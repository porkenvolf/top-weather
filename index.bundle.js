/*! For license information please see index.bundle.js.LICENSE.txt */
(()=>{"use strict";var t={217:(t,e,i)=>{i.d(e,{Z:()=>a});var n=i(537),s=i.n(n),o=i(645),r=i.n(o)()(s());r.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;1,300;1,400;1,500;1,600&display=swap);"]),r.push([t.id,':root {\n  font-family: "Open Sans", sans-serif;\n}\n',"",{version:3,sources:["webpack://./src/css/font.css"],names:[],mappings:"AAEA;EACE,oCAAoC;AACtC",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;1,300;1,400;1,500;1,600&display=swap");\n\n:root {\n  font-family: "Open Sans", sans-serif;\n}\n'],sourceRoot:""}]);const a=r},830:(t,e,i)=>{i.d(e,{Z:()=>h});var n=i(537),s=i.n(n),o=i(645),r=i.n(o),a=i(728),l=r()(s());l.i(a.Z),l.push([t.id,"#appContainer {\n  position: relative;\n  border-radius: 10px;\n  display: flex;\n  flex-direction: column;\n  width: min(var(--minWidth), 100%);\n  padding: 10px;\n  gap: 10px;\n}\n","",{version:3,sources:["webpack://./src/css/modules/App.css"],names:[],mappings:"AAEA;EACE,kBAAkB;EAClB,mBAAmB;EACnB,aAAa;EACb,sBAAsB;EACtB,iCAAiC;EACjC,aAAa;EACb,SAAS;AACX",sourcesContent:["@import url(../variables.css);\n\n#appContainer {\n  position: relative;\n  border-radius: 10px;\n  display: flex;\n  flex-direction: column;\n  width: min(var(--minWidth), 100%);\n  padding: 10px;\n  gap: 10px;\n}\n"],sourceRoot:""}]);const h=l},211:(t,e,i)=>{i.d(e,{Z:()=>h});var n=i(537),s=i.n(n),o=i(645),r=i.n(o),a=i(728),l=r()(s());l.i(a.Z),l.push([t.id,"#dayContainer {\n  flex: 1 0 auto;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: 1rem 1fr 1rem;\n  padding: 5px; /* \n  border: 2px solid grey; */\n  border-radius: 10px;\n  gap: 5px;\n  cursor: pointer;\n}\n\n#dayDay {\n  grid-row: 1;\n  grid-column: 1/-1;\n  text-align: center;\n}\n#dayIcon {\n  grid-row: 2;\n  grid-column: 1/-1;\n  align-self: center;\n  justify-self: center;\n  width: 100%;\n}\n#dayMax {\n  grid-row: 3;\n  grid-column: 1;\n  text-align: center;\n\n  font-size: 0.8rem;\n}\n#dayMin {\n  grid-row: 3;\n  grid-column: 2;\n  text-align: center;\n  font-size: 0.8rem;\n  color: var(--textMid);\n}\n#dayContainer.selected {\n  background: var(--bgMid);\n}\n","",{version:3,sources:["webpack://./src/css/modules/Day.css"],names:[],mappings:"AAEA;EACE,cAAc;EACd,aAAa;EACb,8BAA8B;EAC9B,iCAAiC;EACjC,YAAY,EAAE;2BACW;EACzB,mBAAmB;EACnB,QAAQ;EACR,eAAe;AACjB;;AAEA;EACE,WAAW;EACX,iBAAiB;EACjB,kBAAkB;AACpB;AACA;EACE,WAAW;EACX,iBAAiB;EACjB,kBAAkB;EAClB,oBAAoB;EACpB,WAAW;AACb;AACA;EACE,WAAW;EACX,cAAc;EACd,kBAAkB;;EAElB,iBAAiB;AACnB;AACA;EACE,WAAW;EACX,cAAc;EACd,kBAAkB;EAClB,iBAAiB;EACjB,qBAAqB;AACvB;AACA;EACE,wBAAwB;AAC1B",sourcesContent:['@import url("../variables.css");\n\n#dayContainer {\n  flex: 1 0 auto;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: 1rem 1fr 1rem;\n  padding: 5px; /* \n  border: 2px solid grey; */\n  border-radius: 10px;\n  gap: 5px;\n  cursor: pointer;\n}\n\n#dayDay {\n  grid-row: 1;\n  grid-column: 1/-1;\n  text-align: center;\n}\n#dayIcon {\n  grid-row: 2;\n  grid-column: 1/-1;\n  align-self: center;\n  justify-self: center;\n  width: 100%;\n}\n#dayMax {\n  grid-row: 3;\n  grid-column: 1;\n  text-align: center;\n\n  font-size: 0.8rem;\n}\n#dayMin {\n  grid-row: 3;\n  grid-column: 2;\n  text-align: center;\n  font-size: 0.8rem;\n  color: var(--textMid);\n}\n#dayContainer.selected {\n  background: var(--bgMid);\n}\n'],sourceRoot:""}]);const h=l},343:(t,e,i)=>{i.d(e,{Z:()=>h});var n=i(537),s=i.n(n),o=i(645),r=i.n(o),a=i(728),l=r()(s());l.i(a.Z),l.push([t.id,"#container {\n  margin: 10px 0;\n  display: flex;\n  gap: 10px;\n  scroll-margin: 20px;\n}\n\n@media (max-width: 725px) {\n  /*  FIX: doesn't work witn var() */\n  #container {\n    overflow-x: scroll;\n  }\n}\n","",{version:3,sources:["webpack://./src/css/modules/DaysBar.css"],names:[],mappings:"AAEA;EACE,cAAc;EACd,aAAa;EACb,SAAS;EACT,mBAAmB;AACrB;;AAEA;EACE,kCAAkC;EAClC;IACE,kBAAkB;EACpB;AACF",sourcesContent:['@import url("../variables.css");\n\n#container {\n  margin: 10px 0;\n  display: flex;\n  gap: 10px;\n  scroll-margin: 20px;\n}\n\n@media (max-width: 725px) {\n  /*  FIX: doesn\'t work witn var() */\n  #container {\n    overflow-x: scroll;\n  }\n}\n'],sourceRoot:""}]);const h=l},988:(t,e,i)=>{i.d(e,{Z:()=>h});var n=i(537),s=i.n(n),o=i(645),r=i.n(o),a=i(728),l=r()(s());l.i(a.Z),l.push([t.id,"#graphContainer {\n  position: relative;\n  width: 100%;\n  height: 200px;\n  color: var(--textDark);\n  font-size: 0.8rem;\n}\n#graphContainer #btnBar {\n  display: flex;\n  gap: 15px;\n}\n#graphContainer #btnBar div {\n  cursor: pointer;\n}\n#graphContainer #btnTemp.selected {\n  border-bottom: 3px solid #1a83dd;\n  color: var(--textLight);\n}\n#graphContainer #btnRain.selected {\n  border-bottom: 3px solid #dd1a79;\n  color: var(--textLight);\n}\n","",{version:3,sources:["webpack://./src/css/modules/Graph.css"],names:[],mappings:"AACA;EACE,kBAAkB;EAClB,WAAW;EACX,aAAa;EACb,sBAAsB;EACtB,iBAAiB;AACnB;AACA;EACE,aAAa;EACb,SAAS;AACX;AACA;EACE,eAAe;AACjB;AACA;EACE,gCAAgC;EAChC,uBAAuB;AACzB;AACA;EACE,gCAAgC;EAChC,uBAAuB;AACzB",sourcesContent:['@import url("../variables.css");\n#graphContainer {\n  position: relative;\n  width: 100%;\n  height: 200px;\n  color: var(--textDark);\n  font-size: 0.8rem;\n}\n#graphContainer #btnBar {\n  display: flex;\n  gap: 15px;\n}\n#graphContainer #btnBar div {\n  cursor: pointer;\n}\n#graphContainer #btnTemp.selected {\n  border-bottom: 3px solid #1a83dd;\n  color: var(--textLight);\n}\n#graphContainer #btnRain.selected {\n  border-bottom: 3px solid #dd1a79;\n  color: var(--textLight);\n}\n'],sourceRoot:""}]);const h=l},27:(t,e,i)=>{i.d(e,{Z:()=>h});var n=i(537),s=i.n(n),o=i(645),r=i.n(o),a=i(728),l=r()(s());l.i(a.Z),l.push([t.id,"#headerContainer {\n  display: grid;\n  grid-template-columns: 5rem 5rem 1fr 1fr;\n}\n#headerIcon {\n  grid-column: 1;\n  grid-row: 1;\n  width: 100%;\n  align-self: center;\n  justify-self: center;\n}\n#headerTemperature {\n  grid-column: 2;\n  grid-row: 1;\n  font-size: 3rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n#headerHumidity {\n  grid-column: 1/3;\n  grid-row: 3;\n  font-size: 0.8rem;\n  color: var(--textMid);\n}\n#headerWind {\n  grid-column: 1/3;\n  grid-row: 5;\n  font-size: 0.8rem;\n  color: var(--textMid);\n}\n\n#headerChanceRain {\n  grid-column: 1/3;\n  grid-row: 4;\n  color: var(--textMid);\n  font-size: 0.8rem;\n}\n\n#headerDay {\n  grid-column: 3/6;\n  grid-row: 4;\n  text-align: end;\n  color: var(--textMid);\n  font-size: 0.8rem;\n}\n\n#headerCondition {\n  grid-column: 3/6;\n  grid-row: 5;\n  text-align: end;\n  color: var(--textMid);\n  font-size: 0.8rem;\n}\n\n#searchContainer {\n  grid-column: 5/6;\n  grid-row: 1;\n}\n\n#headerLocation {\n  grid-column: 3/6;\n  grid-row: 3;\n  text-align: end;\n  color: var(--textMid);\n  font-size: 0.8rem;\n}\n\n#unitSelectorContainer {\n  grid-row: 1;\n  grid-column: 3/5;\n}\n\n@media (max-width: 475px) {\n  #searchContainer {\n    grid-row: 2;\n    grid-column: 1/6;\n    margin: 10px 0;\n  }\n}\n","",{version:3,sources:["webpack://./src/css/modules/Header.css"],names:[],mappings:"AAEA;EACE,aAAa;EACb,wCAAwC;AAC1C;AACA;EACE,cAAc;EACd,WAAW;EACX,WAAW;EACX,kBAAkB;EAClB,oBAAoB;AACtB;AACA;EACE,cAAc;EACd,WAAW;EACX,eAAe;EACf,aAAa;EACb,mBAAmB;EACnB,uBAAuB;AACzB;AACA;EACE,gBAAgB;EAChB,WAAW;EACX,iBAAiB;EACjB,qBAAqB;AACvB;AACA;EACE,gBAAgB;EAChB,WAAW;EACX,iBAAiB;EACjB,qBAAqB;AACvB;;AAEA;EACE,gBAAgB;EAChB,WAAW;EACX,qBAAqB;EACrB,iBAAiB;AACnB;;AAEA;EACE,gBAAgB;EAChB,WAAW;EACX,eAAe;EACf,qBAAqB;EACrB,iBAAiB;AACnB;;AAEA;EACE,gBAAgB;EAChB,WAAW;EACX,eAAe;EACf,qBAAqB;EACrB,iBAAiB;AACnB;;AAEA;EACE,gBAAgB;EAChB,WAAW;AACb;;AAEA;EACE,gBAAgB;EAChB,WAAW;EACX,eAAe;EACf,qBAAqB;EACrB,iBAAiB;AACnB;;AAEA;EACE,WAAW;EACX,gBAAgB;AAClB;;AAEA;EACE;IACE,WAAW;IACX,gBAAgB;IAChB,cAAc;EAChB;AACF",sourcesContent:['@import url("../variables.css");\n\n#headerContainer {\n  display: grid;\n  grid-template-columns: 5rem 5rem 1fr 1fr;\n}\n#headerIcon {\n  grid-column: 1;\n  grid-row: 1;\n  width: 100%;\n  align-self: center;\n  justify-self: center;\n}\n#headerTemperature {\n  grid-column: 2;\n  grid-row: 1;\n  font-size: 3rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n#headerHumidity {\n  grid-column: 1/3;\n  grid-row: 3;\n  font-size: 0.8rem;\n  color: var(--textMid);\n}\n#headerWind {\n  grid-column: 1/3;\n  grid-row: 5;\n  font-size: 0.8rem;\n  color: var(--textMid);\n}\n\n#headerChanceRain {\n  grid-column: 1/3;\n  grid-row: 4;\n  color: var(--textMid);\n  font-size: 0.8rem;\n}\n\n#headerDay {\n  grid-column: 3/6;\n  grid-row: 4;\n  text-align: end;\n  color: var(--textMid);\n  font-size: 0.8rem;\n}\n\n#headerCondition {\n  grid-column: 3/6;\n  grid-row: 5;\n  text-align: end;\n  color: var(--textMid);\n  font-size: 0.8rem;\n}\n\n#searchContainer {\n  grid-column: 5/6;\n  grid-row: 1;\n}\n\n#headerLocation {\n  grid-column: 3/6;\n  grid-row: 3;\n  text-align: end;\n  color: var(--textMid);\n  font-size: 0.8rem;\n}\n\n#unitSelectorContainer {\n  grid-row: 1;\n  grid-column: 3/5;\n}\n\n@media (max-width: 475px) {\n  #searchContainer {\n    grid-row: 2;\n    grid-column: 1/6;\n    margin: 10px 0;\n  }\n}\n'],sourceRoot:""}]);const h=l},252:(t,e,i)=>{i.d(e,{Z:()=>h});var n=i(537),s=i.n(n),o=i(645),r=i.n(o),a=i(728),l=r()(s());l.i(a.Z),l.push([t.id,"#loadingContainer {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: var(--bgDark);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\nimg.loadingWheel {\n  animation: rotate 1s infinite linear;\n  height: 10rem;\n  width: auto;\n  filter: invert(1) brightness(0.8);\n}\n@keyframes rotate {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n","",{version:3,sources:["webpack://./src/css/modules/Loading.css"],names:[],mappings:"AAEA;EACE,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,WAAW;EACX,YAAY;EACZ,yBAAyB;EACzB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;AACA;EACE,oCAAoC;EACpC,aAAa;EACb,WAAW;EACX,iCAAiC;AACnC;AACA;EACE;IACE,uBAAuB;EACzB;EACA;IACE,yBAAyB;EAC3B;AACF",sourcesContent:['@import url("../variables.css");\n\n#loadingContainer {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: var(--bgDark);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\nimg.loadingWheel {\n  animation: rotate 1s infinite linear;\n  height: 10rem;\n  width: auto;\n  filter: invert(1) brightness(0.8);\n}\n@keyframes rotate {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n'],sourceRoot:""}]);const h=l},117:(t,e,i)=>{i.d(e,{Z:()=>h});var n=i(537),s=i.n(n),o=i(645),r=i.n(o),a=i(728),l=r()(s());l.i(a.Z),l.push([t.id,"#searchContainer {\n  display: flex;\n  justify-content: flex-end;\n}\ninput {\n  flex: 1 1 100%;\n  /* max-width: calc(var(--minWidth) / 2); */\n  padding: 10px;\n  border-radius: 50px;\n  border: 2px solid var(--textDark);\n  background: var(--bgMid);\n  color: var(--textLight);\n  height: 1rem;\n  align-self: center;\n}\n","",{version:3,sources:["webpack://./src/css/modules/SearchBar.css"],names:[],mappings:"AACA;EACE,aAAa;EACb,yBAAyB;AAC3B;AACA;EACE,cAAc;EACd,0CAA0C;EAC1C,aAAa;EACb,mBAAmB;EACnB,iCAAiC;EACjC,wBAAwB;EACxB,uBAAuB;EACvB,YAAY;EACZ,kBAAkB;AACpB",sourcesContent:['@import url("../variables.css");\n#searchContainer {\n  display: flex;\n  justify-content: flex-end;\n}\ninput {\n  flex: 1 1 100%;\n  /* max-width: calc(var(--minWidth) / 2); */\n  padding: 10px;\n  border-radius: 50px;\n  border: 2px solid var(--textDark);\n  background: var(--bgMid);\n  color: var(--textLight);\n  height: 1rem;\n  align-self: center;\n}\n'],sourceRoot:""}]);const h=l},521:(t,e,i)=>{i.d(e,{Z:()=>h});var n=i(537),s=i.n(n),o=i(645),r=i.n(o),a=i(728),l=r()(s());l.i(a.Z),l.push([t.id,'#unitSelectorContainer {\n  display: flex;\n  align-items: start;\n}\n\n#unitSelectorContainer div {\n  padding-left: 5px;\n  margin-top: 1.15rem;\n  color: var(--textDark);\n  cursor: pointer;\n}\n\n#unitSelectorContainer div:last-child::before {\n  content: "|";\n  color: var(--textDark);\n}\n\n#unitSelectorContainer .selected {\n  color: var(--textLight);\n}\n',"",{version:3,sources:["webpack://./src/css/modules/UnitSelector.css"],names:[],mappings:"AAEA;EACE,aAAa;EACb,kBAAkB;AACpB;;AAEA;EACE,iBAAiB;EACjB,mBAAmB;EACnB,sBAAsB;EACtB,eAAe;AACjB;;AAEA;EACE,YAAY;EACZ,sBAAsB;AACxB;;AAEA;EACE,uBAAuB;AACzB",sourcesContent:['@import url("../variables.css");\n\n#unitSelectorContainer {\n  display: flex;\n  align-items: start;\n}\n\n#unitSelectorContainer div {\n  padding-left: 5px;\n  margin-top: 1.15rem;\n  color: var(--textDark);\n  cursor: pointer;\n}\n\n#unitSelectorContainer div:last-child::before {\n  content: "|";\n  color: var(--textDark);\n}\n\n#unitSelectorContainer .selected {\n  color: var(--textLight);\n}\n'],sourceRoot:""}]);const h=l},195:(t,e,i)=>{i.d(e,{Z:()=>h});var n=i(537),s=i.n(n),o=i(645),r=i.n(o),a=i(728),l=r()(s());l.i(a.Z),l.push([t.id,":root {\n  scrollbar-color: #acacac transparent;\n}\n::-webkit-scrollbar {\n  height: 17px;\n  width: 17px;\n  background: var(--bgDark);\n}\n\n::-webkit-scrollbar-thumb {\n  background: var(--textDark);\n  -webkit-border-radius: 1ex;\n  border: solid 5px var(--bgDark);\n}\n\n::-webkit-scrollbar-corner {\n  background: var(--bgDark);\n}\n\n::-webkit-scrollbar-track {\n  box-shadow: inset 0 0 10px 10px var(--bgDark);\n  border: solid 5px var(--bgDark);\n}\n","",{version:3,sources:["webpack://./src/css/scrollbar.css"],names:[],mappings:"AAEA;EACE,oCAAoC;AACtC;AACA;EACE,YAAY;EACZ,WAAW;EACX,yBAAyB;AAC3B;;AAEA;EACE,2BAA2B;EAC3B,0BAA0B;EAC1B,+BAA+B;AACjC;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,6CAA6C;EAC7C,+BAA+B;AACjC",sourcesContent:['@import url("./variables.css");\n\n:root {\n  scrollbar-color: #acacac transparent;\n}\n::-webkit-scrollbar {\n  height: 17px;\n  width: 17px;\n  background: var(--bgDark);\n}\n\n::-webkit-scrollbar-thumb {\n  background: var(--textDark);\n  -webkit-border-radius: 1ex;\n  border: solid 5px var(--bgDark);\n}\n\n::-webkit-scrollbar-corner {\n  background: var(--bgDark);\n}\n\n::-webkit-scrollbar-track {\n  box-shadow: inset 0 0 10px 10px var(--bgDark);\n  border: solid 5px var(--bgDark);\n}\n'],sourceRoot:""}]);const h=l},402:(t,e,i)=>{i.d(e,{Z:()=>c});var n=i(537),s=i.n(n),o=i(645),r=i.n(o),a=i(728),l=i(195),h=r()(s());h.i(a.Z),h.i(l.Z),h.push([t.id,"* {\n  -webkit-user-select: none; /* Safari */\n  -ms-user-select: none; /* IE 10 and IE 11 */\n  user-select: none; /* Standard syntax */\n}\nbody {\n  background: var(--bgDark);\n  color: var(--textLight);\n  min-height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n","",{version:3,sources:["webpack://./src/css/style.css"],names:[],mappings:"AAGA;EACE,yBAAyB,EAAE,WAAW;EACtC,qBAAqB,EAAE,oBAAoB;EAC3C,iBAAiB,EAAE,oBAAoB;AACzC;AACA;EACE,yBAAyB;EACzB,uBAAuB;EACvB,iBAAiB;EACjB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB",sourcesContent:['@import url("./variables.css");\n@import url("./scrollbar.css");\n\n* {\n  -webkit-user-select: none; /* Safari */\n  -ms-user-select: none; /* IE 10 and IE 11 */\n  user-select: none; /* Standard syntax */\n}\nbody {\n  background: var(--bgDark);\n  color: var(--textLight);\n  min-height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n'],sourceRoot:""}]);const c=h},728:(t,e,i)=>{i.d(e,{Z:()=>a});var n=i(537),s=i.n(n),o=i(645),r=i.n(o)()(s());r.push([t.id,":root {\n  --bgDark: #202124;\n  --bgMid: #2b2e36;\n\n  --textDark: #70717a;\n  --textMid: #7f8089;\n  --textLight: #e8eaed;\n\n  --minWidth: 700px;\n}\n","",{version:3,sources:["webpack://./src/css/variables.css"],names:[],mappings:"AAAA;EACE,iBAAiB;EACjB,gBAAgB;;EAEhB,mBAAmB;EACnB,kBAAkB;EAClB,oBAAoB;;EAEpB,iBAAiB;AACnB",sourcesContent:[":root {\n  --bgDark: #202124;\n  --bgMid: #2b2e36;\n\n  --textDark: #70717a;\n  --textMid: #7f8089;\n  --textLight: #e8eaed;\n\n  --minWidth: 700px;\n}\n"],sourceRoot:""}]);const a=r},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i="",n=void 0!==e[5];return e[4]&&(i+="@supports (".concat(e[4],") {")),e[2]&&(i+="@media ".concat(e[2]," {")),n&&(i+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),i+=t(e),n&&(i+="}"),e[2]&&(i+="}"),e[4]&&(i+="}"),i})).join("")},e.i=function(t,i,n,s,o){"string"==typeof t&&(t=[[null,t,void 0]]);var r={};if(n)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(r[l]=!0)}for(var h=0;h<t.length;h++){var c=[].concat(t[h]);n&&r[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),i&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=i):c[2]=i),s&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=s):c[4]="".concat(s)),e.push(c))}},e}},537:t=>{t.exports=function(t){var e=t[1],i=t[3];if(!i)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),o="/*# ".concat(s," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function i(t){for(var i=-1,n=0;n<e.length;n++)if(e[n].identifier===t){i=n;break}return i}function n(t,n){for(var o={},r=[],a=0;a<t.length;a++){var l=t[a],h=n.base?l[0]+n.base:l[0],c=o[h]||0,d="".concat(h," ").concat(c);o[h]=c+1;var u=i(d),f={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)e[u].references++,e[u].updater(f);else{var p=s(f,n);n.byIndex=a,e.splice(a,0,{identifier:d,updater:p,references:1})}r.push(d)}return r}function s(t,e){var i=e.domAPI(e);return i.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;i.update(t=e)}else i.remove()}}t.exports=function(t,s){var o=n(t=t||[],s=s||{});return function(t){t=t||[];for(var r=0;r<o.length;r++){var a=i(o[r]);e[a].references--}for(var l=n(t,s),h=0;h<o.length;h++){var c=i(o[h]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}o=l}}},569:t=>{var e={};t.exports=function(t,i){var n=function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}e[t]=i}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(i)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,i)=>{t.exports=function(t){var e=i.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(i){!function(t,e,i){var n="";i.supports&&(n+="@supports (".concat(i.supports,") {")),i.media&&(n+="@media ".concat(i.media," {"));var s=void 0!==i.layer;s&&(n+="@layer".concat(i.layer.length>0?" ".concat(i.layer):""," {")),n+=i.css,s&&(n+="}"),i.media&&(n+="}"),i.supports&&(n+="}");var o=i.sourceMap;o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,i)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function i(n){var s=e[n];if(void 0!==s)return s.exports;var o=e[n]={id:n,exports:{}};return t[n](o,o.exports,i),o.exports}i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;i.g.importScripts&&(t=i.g.location+"");var e=i.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");if(n.length)for(var s=n.length-1;s>-1&&!t;)t=n[s--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=t})(),i.nc=void 0,(()=>{var t=i(379),e=i.n(t),n=i(795),s=i.n(n),o=i(569),r=i.n(o),a=i(565),l=i.n(a),h=i(216),c=i.n(h),d=i(589),u=i.n(d),f=i(217),p={};p.styleTagTransform=u(),p.setAttributes=l(),p.insert=r().bind(null,"head"),p.domAPI=s(),p.insertStyleElement=c(),e()(f.Z,p),f.Z&&f.Z.locals&&f.Z.locals;var g=i(402),m={};m.styleTagTransform=u(),m.setAttributes=l(),m.insert=r().bind(null,"head"),m.domAPI=s(),m.insertStyleElement=c(),e()(g.Z,m),g.Z&&g.Z.locals&&g.Z.locals;const x={Pubsub:{},on(t,e){this.Pubsub[t]=this.Pubsub[t]||[],this.Pubsub[t].push(e)},off(t,e){if(this.Pubsub[t])for(let i=0;i<this.Pubsub[t].length;i++)if(this.Pubsub[t][i]===e){this.Pubsub[t].splice(i,1);break}},emit(t,e){this.Pubsub[t]&&this.Pubsub[t].forEach((t=>{t(e)}))}};var b=i(117),y={};y.styleTagTransform=u(),y.setAttributes=l(),y.insert=r().bind(null,"head"),y.domAPI=s(),y.insertStyleElement=c(),e()(b.Z,y),b.Z&&b.Z.locals&&b.Z.locals;class v{constructor(){this.container=document.createElement("div"),this.container.id="searchContainer",this.searchBar=document.createElement("input"),this.searchBar.type="text",this.searchBar.placeholder="Search location",this.container.append(this.searchBar),this.bindEvents()}bindEvents(){this.searchBar.addEventListener("change",(()=>{x.emit("apiCall",this.searchBar.value),x.emit("selectedDay",0)}))}}class _{static cachedData;static tempUnits="c";static windUnits="kph";static selectedDay=0}var A=i(521),w={};w.styleTagTransform=u(),w.setAttributes=l(),w.insert=r().bind(null,"head"),w.domAPI=s(),w.insertStyleElement=c(),e()(A.Z,w),A.Z&&A.Z.locals&&A.Z.locals;class C{constructor(){this.container=document.createElement("div"),this.container.id="unitSelectorContainer",this.divC=document.createElement("div"),this.divC.innerText="°C",this.divF=document.createElement("div"),this.divF.innerText="°F",this.container.append(this.divC,this.divF),"c"===_.tempUnits?this.divC.classList.toggle("selected"):this.divF.classList.toggle("selected"),this.bindEvents()}bindEvents(){this.divC.addEventListener("click",(()=>{this.divF.classList.remove("selected"),this.divC.classList.add("selected"),_.tempUnits="c",_.windUnits="kph",x.emit("renderHeader",_.selectedDay),x.emit("renderDaysBar"),x.emit("renderGraph",_.selectedDay)})),this.divF.addEventListener("click",(()=>{this.divC.classList.remove("selected"),this.divF.classList.add("selected"),_.tempUnits="f",_.windUnits="mph",x.emit("renderHeader",_.selectedDay),x.emit("renderDaysBar"),x.emit("renderGraph",_.selectedDay)}))}}var M=i(27),k={};k.styleTagTransform=u(),k.setAttributes=l(),k.insert=r().bind(null,"head"),k.domAPI=s(),k.insertStyleElement=c(),e()(M.Z,k),M.Z&&M.Z.locals&&M.Z.locals;class E{constructor(){this.container=document.createElement("div"),this.container.id="headerContainer",this.imgIcon=document.createElement("img"),this.imgIcon.id="headerIcon",this.divTemperature=document.createElement("div"),this.divTemperature.id="headerTemperature",this.divHumidity=document.createElement("div"),this.divHumidity.id="headerHumidity",this.divWindSpeed=document.createElement("div"),this.divWindSpeed.id="headerWind",this.divChanceRain=document.createElement("div"),this.divChanceRain.id="headerChanceRain",this.divDay=document.createElement("div"),this.divDay.id="headerDay",this.divCondition=document.createElement("div"),this.divCondition.id="headerCondition",this.divLocation=document.createElement("div"),this.divLocation.id="headerLocation",this.searchBar=new v,this.unitSelector=new C,this.container.append(this.imgIcon,this.divTemperature,this.divHumidity,this.divWindSpeed,this.divChanceRain,this.divDay,this.divCondition,this.searchBar.container,this.divLocation,this.unitSelector.container),this.bindEvents()}bindEvents(){x.on("renderHeader",(t=>{const{icon:e}=_.cachedData.forecast.forecastday[t].day.condition,i=_.cachedData.forecast.forecastday[t].day.daily_chance_of_rain,n=_.cachedData.forecast.forecastday[t].day.condition.text,s=new Date(_.cachedData.forecast.forecastday[t].date).toLocaleDateString("en-US",{weekday:"long",day:"numeric",month:"long",timeZone:"UTC"}),o=`${_.cachedData.location.name}, ${_.cachedData.location.country}`;let r,a,l;0===t?(r=Math.floor(_.cachedData.current[`temp_${_.tempUnits}`]),a=_.cachedData.current.humidity,l=_.cachedData.current[`wind_${_.windUnits}`]):(r=Math.floor(_.cachedData.forecast.forecastday[t].day[`avgtemp_${_.tempUnits}`]),a=_.cachedData.forecast.forecastday[t].day.avghumidity,l=_.cachedData.forecast.forecastday[t].day[`maxwind_${_.windUnits}`]),this.render({icon:e,temp:r,humidity:a,wind:l,chanceOfRain:i,day:s,condition:n,location:o})}))}render(t){this.imgIcon.src=t.icon,this.divTemperature.innerText=`${t.temp}°`,this.divHumidity.innerText=`Humidity: ${t.humidity}%`,this.divWindSpeed.innerText=`Wind speed: ${t.wind} ${_.windUnits}`,this.divChanceRain.innerText=`Chance of rain: ${t.chanceOfRain}%`,this.divDay.innerText=t.day,this.divCondition.innerText=t.condition,this.divLocation.innerText=t.location}}var S=i(211),D={};D.styleTagTransform=u(),D.setAttributes=l(),D.insert=r().bind(null,"head"),D.domAPI=s(),D.insertStyleElement=c(),e()(S.Z,D),S.Z&&S.Z.locals&&S.Z.locals;class P{constructor(t){let e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this.index=t,this.isCurrentDay=e,this.container=document.createElement("div"),this.container.id="dayContainer",e&&this.container.classList.add("selected"),this.imgIcon=document.createElement("img"),this.imgIcon.id="dayIcon",this.divDayOfWeek=document.createElement("div"),this.divDayOfWeek.id="dayDay",this.divTemperatureMAX=document.createElement("div"),this.divTemperatureMAX.id="dayMax",this.divTemperatureMIN=document.createElement("div"),this.divTemperatureMIN.id="dayMin",this.container.append(this.imgIcon,this.divDayOfWeek,this.divTemperatureMAX,this.divTemperatureMIN),this.bindEvents()}render(t){this.cachedData=t,this.imgIcon.src=t.day.condition.icon,this.divDayOfWeek.innerText=new Date(1e3*t.date_epoch).toLocaleDateString("en-US",{weekday:"short",timeZone:"UTC"}),this.divTemperatureMAX.innerText=`${t.day[`maxtemp_${_.tempUnits}`]}°`,this.divTemperatureMIN.innerText=`${t.day[`mintemp_${_.tempUnits}`]}°`}bindEvents(){this.container.addEventListener("click",(()=>{x.emit("renderHeader",this.index),x.emit("renderGraph",this.index),x.emit("renderHourly",this.index),x.emit("selectedDay",this.index)}))}}var B=i(343),T={};T.styleTagTransform=u(),T.setAttributes=l(),T.insert=r().bind(null,"head"),T.domAPI=s(),T.insertStyleElement=c(),e()(B.Z,T),B.Z&&B.Z.locals&&B.Z.locals;class O{days=[];constructor(t){this.container=document.createElement("div"),this.container.id="container";for(let e=0;e<t;e++){const t=0===e;this.days.push(new P(e,t)),this.container.append(this.days[e].container)}this.bindEvents()}bindEvents(){x.on("selectedDay",(t=>{this.days.forEach((t=>{t.container.classList.remove("selected")})),this.days[t].container.classList.add("selected"),_.selectedDay=t})),x.on("renderDaysBar",(()=>{this.render(_.cachedData)}))}render(t){this.days.forEach((e=>{e.render(t.forecast.forecastday[e.index])}))}}const L=i.p+"fb33b006dd56733dd60b.svg";var R=i(252),I={};I.styleTagTransform=u(),I.setAttributes=l(),I.insert=r().bind(null,"head"),I.domAPI=s(),I.insertStyleElement=c(),e()(R.Z,I),R.Z&&R.Z.locals&&R.Z.locals;class z{constructor(){this.container=document.createElement("div"),this.container.id="loadingContainer",this.wheel=document.createElement("img"),this.wheel.classList="loadingWheel",this.wheel.src=L,this.container.append(this.wheel)}}function W(t){return t+.5|0}const F=(t,e,i)=>Math.max(Math.min(t,i),e);function j(t){return F(W(2.55*t),0,255)}function V(t){return F(W(255*t),0,255)}function N(t){return F(W(t/2.55)/100,0,1)}function H(t){return F(W(100*t),0,100)}const Y={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},$=[..."0123456789ABCDEF"],X=t=>$[15&t],U=t=>$[(240&t)>>4]+$[15&t],Z=t=>(240&t)>>4==(15&t);const q=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function G(t,e,i){const n=e*Math.min(i,1-i),s=(e,s=(e+t/30)%12)=>i-n*Math.max(Math.min(s-3,9-s,1),-1);return[s(0),s(8),s(4)]}function K(t,e,i){const n=(n,s=(n+t/60)%6)=>i-i*e*Math.max(Math.min(s,4-s,1),0);return[n(5),n(3),n(1)]}function J(t,e,i){const n=G(t,1,.5);let s;for(e+i>1&&(s=1/(e+i),e*=s,i*=s),s=0;s<3;s++)n[s]*=1-e-i,n[s]+=e;return n}function Q(t){const e=t.r/255,i=t.g/255,n=t.b/255,s=Math.max(e,i,n),o=Math.min(e,i,n),r=(s+o)/2;let a,l,h;return s!==o&&(h=s-o,l=r>.5?h/(2-s-o):h/(s+o),a=function(t,e,i,n,s){return t===s?(e-i)/n+(e<i?6:0):e===s?(i-t)/n+2:(t-e)/n+4}(e,i,n,h,s),a=60*a+.5),[0|a,l||0,r]}function tt(t,e,i,n){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,i,n)).map(V)}function et(t,e,i){return tt(G,t,e,i)}function it(t){return(t%360+360)%360}const nt={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},st={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let ot;const rt=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,at=t=>t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055,lt=t=>t<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4);function ht(t,e,i){if(t){let n=Q(t);n[e]=Math.max(0,Math.min(n[e]+n[e]*i,0===e?360:1)),n=et(n),t.r=n[0],t.g=n[1],t.b=n[2]}}function ct(t,e){return t?Object.assign(e||{},t):t}function dt(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=V(t[3]))):(e=ct(t,{r:0,g:0,b:0,a:1})).a=V(e.a),e}function ut(t){return"r"===t.charAt(0)?function(t){const e=rt.exec(t);let i,n,s,o=255;if(e){if(e[7]!==i){const t=+e[7];o=e[8]?j(t):F(255*t,0,255)}return i=+e[1],n=+e[3],s=+e[5],i=255&(e[2]?j(i):F(i,0,255)),n=255&(e[4]?j(n):F(n,0,255)),s=255&(e[6]?j(s):F(s,0,255)),{r:i,g:n,b:s,a:o}}}(t):function(t){const e=q.exec(t);let i,n=255;if(!e)return;e[5]!==i&&(n=e[6]?j(+e[5]):V(+e[5]));const s=it(+e[2]),o=+e[3]/100,r=+e[4]/100;return i="hwb"===e[1]?function(t,e,i){return tt(J,t,e,i)}(s,o,r):"hsv"===e[1]?function(t,e,i){return tt(K,t,e,i)}(s,o,r):et(s,o,r),{r:i[0],g:i[1],b:i[2],a:n}}(t)}class ft{constructor(t){if(t instanceof ft)return t;const e=typeof t;let i;var n,s,o;"object"===e?i=dt(t):"string"===e&&(o=(n=t).length,"#"===n[0]&&(4===o||5===o?s={r:255&17*Y[n[1]],g:255&17*Y[n[2]],b:255&17*Y[n[3]],a:5===o?17*Y[n[4]]:255}:7!==o&&9!==o||(s={r:Y[n[1]]<<4|Y[n[2]],g:Y[n[3]]<<4|Y[n[4]],b:Y[n[5]]<<4|Y[n[6]],a:9===o?Y[n[7]]<<4|Y[n[8]]:255})),i=s||function(t){ot||(ot=function(){const t={},e=Object.keys(st),i=Object.keys(nt);let n,s,o,r,a;for(n=0;n<e.length;n++){for(r=a=e[n],s=0;s<i.length;s++)o=i[s],a=a.replace(o,nt[o]);o=parseInt(st[r],16),t[a]=[o>>16&255,o>>8&255,255&o]}return t}(),ot.transparent=[0,0,0,0]);const e=ot[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}(t)||ut(t)),this._rgb=i,this._valid=!!i}get valid(){return this._valid}get rgb(){var t=ct(this._rgb);return t&&(t.a=N(t.a)),t}set rgb(t){this._rgb=dt(t)}rgbString(){return this._valid?(t=this._rgb)&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${N(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`):void 0;var t}hexString(){return this._valid?(t=this._rgb,e=(t=>Z(t.r)&&Z(t.g)&&Z(t.b)&&Z(t.a))(t)?X:U,t?"#"+e(t.r)+e(t.g)+e(t.b)+((t,e)=>t<255?e(t):"")(t.a,e):void 0):void 0;var t,e}hslString(){return this._valid?function(t){if(!t)return;const e=Q(t),i=e[0],n=H(e[1]),s=H(e[2]);return t.a<255?`hsla(${i}, ${n}%, ${s}%, ${N(t.a)})`:`hsl(${i}, ${n}%, ${s}%)`}(this._rgb):void 0}mix(t,e){if(t){const i=this.rgb,n=t.rgb;let s;const o=e===s?.5:e,r=2*o-1,a=i.a-n.a,l=((r*a==-1?r:(r+a)/(1+r*a))+1)/2;s=1-l,i.r=255&l*i.r+s*n.r+.5,i.g=255&l*i.g+s*n.g+.5,i.b=255&l*i.b+s*n.b+.5,i.a=o*i.a+(1-o)*n.a,this.rgb=i}return this}interpolate(t,e){return t&&(this._rgb=function(t,e,i){const n=lt(N(t.r)),s=lt(N(t.g)),o=lt(N(t.b));return{r:V(at(n+i*(lt(N(e.r))-n))),g:V(at(s+i*(lt(N(e.g))-s))),b:V(at(o+i*(lt(N(e.b))-o))),a:t.a+i*(e.a-t.a)}}(this._rgb,t._rgb,e)),this}clone(){return new ft(this.rgb)}alpha(t){return this._rgb.a=V(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=W(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return ht(this._rgb,2,t),this}darken(t){return ht(this._rgb,2,-t),this}saturate(t){return ht(this._rgb,1,t),this}desaturate(t){return ht(this._rgb,1,-t),this}rotate(t){return function(t,e){var i=Q(t);i[0]=it(i[0]+e),i=et(i),t.r=i[0],t.g=i[1],t.b=i[2]}(this._rgb,t),this}}function pt(){}const gt=(()=>{let t=0;return()=>t++})();function mt(t){return null==t}function xt(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.slice(0,7)&&"Array]"===e.slice(-6)}function bt(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}function yt(t){return("number"==typeof t||t instanceof Number)&&isFinite(+t)}function vt(t,e){return yt(t)?t:e}function _t(t,e){return void 0===t?e:t}const At=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function wt(t,e,i){if(t&&"function"==typeof t.call)return t.apply(i,e)}function Ct(t,e,i,n){let s,o,r;if(xt(t))if(o=t.length,n)for(s=o-1;s>=0;s--)e.call(i,t[s],s);else for(s=0;s<o;s++)e.call(i,t[s],s);else if(bt(t))for(r=Object.keys(t),o=r.length,s=0;s<o;s++)e.call(i,t[r[s]],r[s])}function Mt(t,e){let i,n,s,o;if(!t||!e||t.length!==e.length)return!1;for(i=0,n=t.length;i<n;++i)if(s=t[i],o=e[i],s.datasetIndex!==o.datasetIndex||s.index!==o.index)return!1;return!0}function kt(t){if(xt(t))return t.map(kt);if(bt(t)){const e=Object.create(null),i=Object.keys(t),n=i.length;let s=0;for(;s<n;++s)e[i[s]]=kt(t[i[s]]);return e}return t}function Et(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function St(t,e,i,n){if(!Et(t))return;const s=e[t],o=i[t];bt(s)&&bt(o)?Dt(s,o,n):e[t]=kt(o)}function Dt(t,e,i){const n=xt(e)?e:[e],s=n.length;if(!bt(t))return t;const o=(i=i||{}).merger||St;let r;for(let e=0;e<s;++e){if(r=n[e],!bt(r))continue;const s=Object.keys(r);for(let e=0,n=s.length;e<n;++e)o(s[e],t,r,i)}return t}function Pt(t,e){return Dt(t,e,{merger:Bt})}function Bt(t,e,i){if(!Et(t))return;const n=e[t],s=i[t];bt(n)&&bt(s)?Pt(n,s):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=kt(s))}const Tt={"":t=>t,x:t=>t.x,y:t=>t.y};function Ot(t,e){const i=Tt[e]||(Tt[e]=function(t){const e=function(t){const e=t.split("."),i=[];let n="";for(const t of e)n+=t,n.endsWith("\\")?n=n.slice(0,-1)+".":(i.push(n),n="");return i}(t);return t=>{for(const i of e){if(""===i)break;t=t&&t[i]}return t}}(e));return i(t)}function Lt(t){return t.charAt(0).toUpperCase()+t.slice(1)}const Rt=t=>void 0!==t,It=t=>"function"==typeof t,zt=(t,e)=>{if(t.size!==e.size)return!1;for(const i of t)if(!e.has(i))return!1;return!0},Wt=Math.PI,Ft=2*Wt,jt=Ft+Wt,Vt=Number.POSITIVE_INFINITY,Nt=Wt/180,Ht=Wt/2,Yt=Wt/4,$t=2*Wt/3,Xt=Math.log10,Ut=Math.sign;function Zt(t,e,i){return Math.abs(t-e)<i}function qt(t){const e=Math.round(t);t=Zt(t,e,t/1e3)?e:t;const i=Math.pow(10,Math.floor(Xt(t))),n=t/i;return(n<=1?1:n<=2?2:n<=5?5:10)*i}function Gt(t){return!isNaN(parseFloat(t))&&isFinite(t)}function Kt(t,e,i){let n,s,o;for(n=0,s=t.length;n<s;n++)o=t[n][i],isNaN(o)||(e.min=Math.min(e.min,o),e.max=Math.max(e.max,o))}function Jt(t){return t*(Wt/180)}function Qt(t){return t*(180/Wt)}function te(t){if(!yt(t))return;let e=1,i=0;for(;Math.round(t*e)/e!==t;)e*=10,i++;return i}function ee(t,e){const i=e.x-t.x,n=e.y-t.y,s=Math.sqrt(i*i+n*n);let o=Math.atan2(n,i);return o<-.5*Wt&&(o+=Ft),{angle:o,distance:s}}function ie(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function ne(t,e){return(t-e+jt)%Ft-Wt}function se(t){return(t%Ft+Ft)%Ft}function oe(t,e,i,n){const s=se(t),o=se(e),r=se(i),a=se(o-s),l=se(r-s),h=se(s-o),c=se(s-r);return s===o||s===r||n&&o===r||a>l&&h<c}function re(t,e,i){return Math.max(e,Math.min(i,t))}function ae(t,e,i,n=1e-6){return t>=Math.min(e,i)-n&&t<=Math.max(e,i)+n}function le(t,e,i){i=i||(i=>t[i]<e);let n,s=t.length-1,o=0;for(;s-o>1;)n=o+s>>1,i(n)?o=n:s=n;return{lo:o,hi:s}}const he=(t,e,i,n)=>le(t,i,n?n=>{const s=t[n][e];return s<i||s===i&&t[n+1][e]===i}:n=>t[n][e]<i),ce=(t,e,i)=>le(t,i,(n=>t[n][e]>=i)),de=["push","pop","shift","splice","unshift"];function ue(t,e){const i=t._chartjs;if(!i)return;const n=i.listeners,s=n.indexOf(e);-1!==s&&n.splice(s,1),n.length>0||(de.forEach((e=>{delete t[e]})),delete t._chartjs)}function fe(t){const e=new Set(t);return e.size===t.length?t:Array.from(e)}const pe="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function ge(t,e){let i=[],n=!1;return function(...s){i=s,n||(n=!0,pe.call(window,(()=>{n=!1,t.apply(e,i)})))}}const me=t=>"start"===t?"left":"end"===t?"right":"center",xe=(t,e,i)=>"start"===t?e:"end"===t?i:(e+i)/2;function be(t,e,i){const n=e.length;let s=0,o=n;if(t._sorted){const{iScale:r,_parsed:a}=t,l=r.axis,{min:h,max:c,minDefined:d,maxDefined:u}=r.getUserBounds();d&&(s=re(Math.min(he(a,l,h).lo,i?n:he(e,l,r.getPixelForValue(h)).lo),0,n-1)),o=u?re(Math.max(he(a,r.axis,c,!0).hi+1,i?0:he(e,l,r.getPixelForValue(c),!0).hi+1),s,n)-s:n-s}return{start:s,count:o}}function ye(t){const{xScale:e,yScale:i,_scaleRanges:n}=t,s={xmin:e.min,xmax:e.max,ymin:i.min,ymax:i.max};if(!n)return t._scaleRanges=s,!0;const o=n.xmin!==e.min||n.xmax!==e.max||n.ymin!==i.min||n.ymax!==i.max;return Object.assign(n,s),o}const ve=t=>0===t||1===t,_e=(t,e,i)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*Ft/i),Ae=(t,e,i)=>Math.pow(2,-10*t)*Math.sin((t-e)*Ft/i)+1,we={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*Ht),easeOutSine:t=>Math.sin(t*Ht),easeInOutSine:t=>-.5*(Math.cos(Wt*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>ve(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>ve(t)?t:_e(t,.075,.3),easeOutElastic:t=>ve(t)?t:Ae(t,.075,.3),easeInOutElastic(t){const e=.1125;return ve(t)?t:t<.5?.5*_e(2*t,e,.45):.5+.5*Ae(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-we.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,i=2.75;return t<1/i?e*t*t:t<2/i?e*(t-=1.5/i)*t+.75:t<2.5/i?e*(t-=2.25/i)*t+.9375:e*(t-=2.625/i)*t+.984375},easeInOutBounce:t=>t<.5?.5*we.easeInBounce(2*t):.5*we.easeOutBounce(2*t-1)+.5};function Ce(t){if(t&&"object"==typeof t){const e=t.toString();return"[object CanvasPattern]"===e||"[object CanvasGradient]"===e}return!1}function Me(t){return Ce(t)?t:new ft(t)}function ke(t){return Ce(t)?t:new ft(t).saturate(.5).darken(.1).hexString()}const Ee=["x","y","borderWidth","radius","tension"],Se=["color","borderColor","backgroundColor"],De=new Map;function Pe(t,e,i){return function(t,e){e=e||{};const i=t+JSON.stringify(e);let n=De.get(i);return n||(n=new Intl.NumberFormat(t,e),De.set(i,n)),n}(e,i).format(t)}const Be={values:t=>xt(t)?t:""+t,numeric(t,e,i){if(0===t)return"0";const n=this.chart.options.locale;let s,o=t;if(i.length>1){const e=Math.max(Math.abs(i[0].value),Math.abs(i[i.length-1].value));(e<1e-4||e>1e15)&&(s="scientific"),o=function(t,e){let i=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;return Math.abs(i)>=1&&t!==Math.floor(t)&&(i=t-Math.floor(t)),i}(t,i)}const r=Xt(Math.abs(o)),a=isNaN(r)?1:Math.max(Math.min(-1*Math.floor(r),20),0),l={notation:s,minimumFractionDigits:a,maximumFractionDigits:a};return Object.assign(l,this.options.ticks.format),Pe(t,n,l)},logarithmic(t,e,i){if(0===t)return"0";const n=i[e].significand||t/Math.pow(10,Math.floor(Xt(t)));return[1,2,3,5,10,15].includes(n)||e>.8*i.length?Be.numeric.call(this,t,e,i):""}};var Te={formatters:Be};const Oe=Object.create(null),Le=Object.create(null);function Re(t,e){if(!e)return t;const i=e.split(".");for(let e=0,n=i.length;e<n;++e){const n=i[e];t=t[n]||(t[n]=Object.create(null))}return t}function Ie(t,e,i){return"string"==typeof e?Dt(Re(t,e),i):Dt(Re(t,""),e)}class ze{constructor(t,e){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>ke(e.backgroundColor),this.hoverBorderColor=(t,e)=>ke(e.borderColor),this.hoverColor=(t,e)=>ke(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0,includeInvisible:!1},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t),this.apply(e)}set(t,e){return Ie(this,t,e)}get(t){return Re(this,t)}describe(t,e){return Ie(Le,t,e)}override(t,e){return Ie(Oe,t,e)}route(t,e,i,n){const s=Re(this,t),o=Re(this,i),r="_"+e;Object.defineProperties(s,{[r]:{value:s[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[r],e=o[n];return bt(t)?Object.assign({},e,t):_t(t,e)},set(t){this[r]=t}}})}apply(t){t.forEach((t=>t(this)))}}var We=new ze({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}},[function(t){t.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0}),t.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),t.set("animations",{colors:{type:"color",properties:Se},numbers:{type:"number",properties:Ee}}),t.describe("animations",{_fallback:"animation"}),t.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}})},function(t){t.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}})},function(t){t.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1},border:{display:!0,dash:[],dashOffset:0,width:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:Te.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),t.route("scale.ticks","color","","color"),t.route("scale.grid","color","","borderColor"),t.route("scale.border","color","","borderColor"),t.route("scale.title","color","","color"),t.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t&&"dash"!==t}),t.describe("scales",{_fallback:"scale"}),t.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t})}]);function Fe(t,e,i,n,s){let o=e[s];return o||(o=e[s]=t.measureText(s).width,i.push(s)),o>n&&(n=o),n}function je(t,e,i,n){let s=(n=n||{}).data=n.data||{},o=n.garbageCollect=n.garbageCollect||[];n.font!==e&&(s=n.data={},o=n.garbageCollect=[],n.font=e),t.save(),t.font=e;let r=0;const a=i.length;let l,h,c,d,u;for(l=0;l<a;l++)if(d=i[l],null==d||xt(d)){if(xt(d))for(h=0,c=d.length;h<c;h++)u=d[h],null==u||xt(u)||(r=Fe(t,s,o,r,u))}else r=Fe(t,s,o,r,d);t.restore();const f=o.length/2;if(f>i.length){for(l=0;l<f;l++)delete s[o[l]];o.splice(0,f)}return r}function Ve(t,e,i){const n=t.currentDevicePixelRatio,s=0!==i?Math.max(i/2,.5):0;return Math.round((e-s)*n)/n+s}function Ne(t,e){(e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore()}function He(t,e,i,n){Ye(t,e,i,n,null)}function Ye(t,e,i,n,s){let o,r,a,l,h,c,d,u;const f=e.pointStyle,p=e.rotation,g=e.radius;let m=(p||0)*Nt;if(f&&"object"==typeof f&&(o=f.toString(),"[object HTMLImageElement]"===o||"[object HTMLCanvasElement]"===o))return t.save(),t.translate(i,n),t.rotate(m),t.drawImage(f,-f.width/2,-f.height/2,f.width,f.height),void t.restore();if(!(isNaN(g)||g<=0)){switch(t.beginPath(),f){default:s?t.ellipse(i,n,s/2,g,0,0,Ft):t.arc(i,n,g,0,Ft),t.closePath();break;case"triangle":c=s?s/2:g,t.moveTo(i+Math.sin(m)*c,n-Math.cos(m)*g),m+=$t,t.lineTo(i+Math.sin(m)*c,n-Math.cos(m)*g),m+=$t,t.lineTo(i+Math.sin(m)*c,n-Math.cos(m)*g),t.closePath();break;case"rectRounded":h=.516*g,l=g-h,r=Math.cos(m+Yt)*l,d=Math.cos(m+Yt)*(s?s/2-h:l),a=Math.sin(m+Yt)*l,u=Math.sin(m+Yt)*(s?s/2-h:l),t.arc(i-d,n-a,h,m-Wt,m-Ht),t.arc(i+u,n-r,h,m-Ht,m),t.arc(i+d,n+a,h,m,m+Ht),t.arc(i-u,n+r,h,m+Ht,m+Wt),t.closePath();break;case"rect":if(!p){l=Math.SQRT1_2*g,c=s?s/2:l,t.rect(i-c,n-l,2*c,2*l);break}m+=Yt;case"rectRot":d=Math.cos(m)*(s?s/2:g),r=Math.cos(m)*g,a=Math.sin(m)*g,u=Math.sin(m)*(s?s/2:g),t.moveTo(i-d,n-a),t.lineTo(i+u,n-r),t.lineTo(i+d,n+a),t.lineTo(i-u,n+r),t.closePath();break;case"crossRot":m+=Yt;case"cross":d=Math.cos(m)*(s?s/2:g),r=Math.cos(m)*g,a=Math.sin(m)*g,u=Math.sin(m)*(s?s/2:g),t.moveTo(i-d,n-a),t.lineTo(i+d,n+a),t.moveTo(i+u,n-r),t.lineTo(i-u,n+r);break;case"star":d=Math.cos(m)*(s?s/2:g),r=Math.cos(m)*g,a=Math.sin(m)*g,u=Math.sin(m)*(s?s/2:g),t.moveTo(i-d,n-a),t.lineTo(i+d,n+a),t.moveTo(i+u,n-r),t.lineTo(i-u,n+r),m+=Yt,d=Math.cos(m)*(s?s/2:g),r=Math.cos(m)*g,a=Math.sin(m)*g,u=Math.sin(m)*(s?s/2:g),t.moveTo(i-d,n-a),t.lineTo(i+d,n+a),t.moveTo(i+u,n-r),t.lineTo(i-u,n+r);break;case"line":r=s?s/2:Math.cos(m)*g,a=Math.sin(m)*g,t.moveTo(i-r,n-a),t.lineTo(i+r,n+a);break;case"dash":t.moveTo(i,n),t.lineTo(i+Math.cos(m)*(s?s/2:g),n+Math.sin(m)*g);break;case!1:t.closePath()}t.fill(),e.borderWidth>0&&t.stroke()}}function $e(t,e,i){return i=i||.5,!e||t&&t.x>e.left-i&&t.x<e.right+i&&t.y>e.top-i&&t.y<e.bottom+i}function Xe(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function Ue(t){t.restore()}function Ze(t,e,i,n,s){if(!e)return t.lineTo(i.x,i.y);if("middle"===s){const n=(e.x+i.x)/2;t.lineTo(n,e.y),t.lineTo(n,i.y)}else"after"===s!=!!n?t.lineTo(e.x,i.y):t.lineTo(i.x,e.y);t.lineTo(i.x,i.y)}function qe(t,e,i,n){if(!e)return t.lineTo(i.x,i.y);t.bezierCurveTo(n?e.cp1x:e.cp2x,n?e.cp1y:e.cp2y,n?i.cp2x:i.cp1x,n?i.cp2y:i.cp1y,i.x,i.y)}function Ge(t,e,i,n,s){if(s.strikethrough||s.underline){const o=t.measureText(n),r=e-o.actualBoundingBoxLeft,a=e+o.actualBoundingBoxRight,l=i-o.actualBoundingBoxAscent,h=i+o.actualBoundingBoxDescent,c=s.strikethrough?(l+h)/2:h;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=s.decorationWidth||2,t.moveTo(r,c),t.lineTo(a,c),t.stroke()}}function Ke(t,e){const i=t.fillStyle;t.fillStyle=e.color,t.fillRect(e.left,e.top,e.width,e.height),t.fillStyle=i}function Je(t,e,i,n,s,o={}){const r=xt(e)?e:[e],a=o.strokeWidth>0&&""!==o.strokeColor;let l,h;for(t.save(),t.font=s.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]),mt(e.rotation)||t.rotate(e.rotation),e.color&&(t.fillStyle=e.color),e.textAlign&&(t.textAlign=e.textAlign),e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,o),l=0;l<r.length;++l)h=r[l],o.backdrop&&Ke(t,o.backdrop),a&&(o.strokeColor&&(t.strokeStyle=o.strokeColor),mt(o.strokeWidth)||(t.lineWidth=o.strokeWidth),t.strokeText(h,i,n,o.maxWidth)),t.fillText(h,i,n,o.maxWidth),Ge(t,i,n,h,o),n+=Number(s.lineHeight);t.restore()}function Qe(t,e){const{x:i,y:n,w:s,h:o,radius:r}=e;t.arc(i+r.topLeft,n+r.topLeft,r.topLeft,-Ht,Wt,!0),t.lineTo(i,n+o-r.bottomLeft),t.arc(i+r.bottomLeft,n+o-r.bottomLeft,r.bottomLeft,Wt,Ht,!0),t.lineTo(i+s-r.bottomRight,n+o),t.arc(i+s-r.bottomRight,n+o-r.bottomRight,r.bottomRight,Ht,0,!0),t.lineTo(i+s,n+r.topRight),t.arc(i+s-r.topRight,n+r.topRight,r.topRight,0,-Ht,!0),t.lineTo(i+r.topLeft,n)}const ti=/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/,ei=/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;function ii(t,e){const i=(""+t).match(ti);if(!i||"normal"===i[1])return 1.2*e;switch(t=+i[2],i[3]){case"px":return t;case"%":t/=100}return e*t}const ni=t=>+t||0;function si(t,e){const i={},n=bt(e),s=n?Object.keys(e):e,o=bt(t)?n?i=>_t(t[i],t[e[i]]):e=>t[e]:()=>t;for(const t of s)i[t]=ni(o(t));return i}function oi(t){return si(t,{top:"y",right:"x",bottom:"y",left:"x"})}function ri(t){return si(t,["topLeft","topRight","bottomLeft","bottomRight"])}function ai(t){const e=oi(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function li(t,e){t=t||{},e=e||We.font;let i=_t(t.size,e.size);"string"==typeof i&&(i=parseInt(i,10));let n=_t(t.style,e.style);n&&!(""+n).match(ei)&&(console.warn('Invalid font style specified: "'+n+'"'),n=void 0);const s={family:_t(t.family,e.family),lineHeight:ii(_t(t.lineHeight,e.lineHeight),i),size:i,style:n,weight:_t(t.weight,e.weight),string:""};return s.string=function(t){return!t||mt(t.size)||mt(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}(s),s}function hi(t,e,i,n){let s,o,r,a=!0;for(s=0,o=t.length;s<o;++s)if(r=t[s],void 0!==r&&(void 0!==e&&"function"==typeof r&&(r=r(e),a=!1),void 0!==i&&xt(r)&&(r=r[i%r.length],a=!1),void 0!==r))return n&&!a&&(n.cacheable=!1),r}function ci(t,e){return Object.assign(Object.create(t),e)}function di(t,e=[""],i,n,s=(()=>t[0])){const o=i||t;void 0===n&&(n=Ai("_fallback",t));const r={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:o,_fallback:n,_getTarget:s,override:i=>di([i,...t],e,o,n)};return new Proxy(r,{deleteProperty:(e,i)=>(delete e[i],delete e._keys,delete t[0][i],!0),get:(i,n)=>mi(i,n,(()=>function(t,e,i,n){let s;for(const o of e)if(s=Ai(pi(o,t),i),void 0!==s)return gi(t,s)?vi(i,n,t,s):s}(n,e,t,i))),getOwnPropertyDescriptor:(t,e)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],e),getPrototypeOf:()=>Reflect.getPrototypeOf(t[0]),has:(t,e)=>wi(t).includes(e),ownKeys:t=>wi(t),set(t,e,i){const n=t._storage||(t._storage=s());return t[e]=n[e]=i,delete t._keys,!0}})}function ui(t,e,i,n){const s={_cacheable:!1,_proxy:t,_context:e,_subProxy:i,_stack:new Set,_descriptors:fi(t,n),setContext:e=>ui(t,e,i,n),override:s=>ui(t.override(s),e,i,n)};return new Proxy(s,{deleteProperty:(e,i)=>(delete e[i],delete t[i],!0),get:(t,e,i)=>mi(t,e,(()=>function(t,e,i){const{_proxy:n,_context:s,_subProxy:o,_descriptors:r}=t;let a=n[e];return It(a)&&r.isScriptable(e)&&(a=function(t,e,i,n){const{_proxy:s,_context:o,_subProxy:r,_stack:a}=i;if(a.has(t))throw new Error("Recursion detected: "+Array.from(a).join("->")+"->"+t);a.add(t);let l=e(o,r||n);return a.delete(t),gi(t,l)&&(l=vi(s._scopes,s,t,l)),l}(e,a,t,i)),xt(a)&&a.length&&(a=function(t,e,i,n){const{_proxy:s,_context:o,_subProxy:r,_descriptors:a}=i;if(void 0!==o.index&&n(t))return e[o.index%e.length];if(bt(e[0])){const i=e,n=s._scopes.filter((t=>t!==i));e=[];for(const l of i){const i=vi(n,s,t,l);e.push(ui(i,o,r&&r[t],a))}}return e}(e,a,t,r.isIndexable)),gi(e,a)&&(a=ui(a,s,o&&o[e],r)),a}(t,e,i))),getOwnPropertyDescriptor:(e,i)=>e._descriptors.allKeys?Reflect.has(t,i)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,i),getPrototypeOf:()=>Reflect.getPrototypeOf(t),has:(e,i)=>Reflect.has(t,i),ownKeys:()=>Reflect.ownKeys(t),set:(e,i,n)=>(t[i]=n,delete e[i],!0)})}function fi(t,e={scriptable:!0,indexable:!0}){const{_scriptable:i=e.scriptable,_indexable:n=e.indexable,_allKeys:s=e.allKeys}=t;return{allKeys:s,scriptable:i,indexable:n,isScriptable:It(i)?i:()=>i,isIndexable:It(n)?n:()=>n}}const pi=(t,e)=>t?t+Lt(e):e,gi=(t,e)=>bt(e)&&"adapters"!==t&&(null===Object.getPrototypeOf(e)||e.constructor===Object);function mi(t,e,i){if(Object.prototype.hasOwnProperty.call(t,e))return t[e];const n=i();return t[e]=n,n}function xi(t,e,i){return It(t)?t(e,i):t}const bi=(t,e)=>!0===t?e:"string"==typeof t?Ot(e,t):void 0;function yi(t,e,i,n,s){for(const o of e){const e=bi(i,o);if(e){t.add(e);const o=xi(e._fallback,i,s);if(void 0!==o&&o!==i&&o!==n)return o}else if(!1===e&&void 0!==n&&i!==n)return null}return!1}function vi(t,e,i,n){const s=e._rootScopes,o=xi(e._fallback,i,n),r=[...t,...s],a=new Set;a.add(n);let l=_i(a,r,i,o||i,n);return null!==l&&(void 0===o||o===i||(l=_i(a,r,o,l,n),null!==l))&&di(Array.from(a),[""],s,o,(()=>function(t,e,i){const n=t._getTarget();e in n||(n[e]={});const s=n[e];return xt(s)&&bt(i)?i:s||{}}(e,i,n)))}function _i(t,e,i,n,s){for(;i;)i=yi(t,e,i,n,s);return i}function Ai(t,e){for(const i of e){if(!i)continue;const e=i[t];if(void 0!==e)return e}}function wi(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const i of t)for(const t of Object.keys(i).filter((t=>!t.startsWith("_"))))e.add(t);return Array.from(e)}(t._scopes)),e}function Ci(t,e,i,n){const{iScale:s}=t,{key:o="r"}=this._parsing,r=new Array(n);let a,l,h,c;for(a=0,l=n;a<l;++a)h=a+i,c=e[h],r[a]={r:s.parse(Ot(c,o),h)};return r}const Mi=Number.EPSILON||1e-14,ki=(t,e)=>e<t.length&&!t[e].skip&&t[e],Ei=t=>"x"===t?"y":"x";function Si(t,e,i,n){const s=t.skip?e:t,o=e,r=i.skip?e:i,a=ie(o,s),l=ie(r,o);let h=a/(a+l),c=l/(a+l);h=isNaN(h)?0:h,c=isNaN(c)?0:c;const d=n*h,u=n*c;return{previous:{x:o.x-d*(r.x-s.x),y:o.y-d*(r.y-s.y)},next:{x:o.x+u*(r.x-s.x),y:o.y+u*(r.y-s.y)}}}function Di(t,e,i){return Math.max(Math.min(t,i),e)}function Pi(t,e,i,n,s){let o,r,a,l;if(e.spanGaps&&(t=t.filter((t=>!t.skip))),"monotone"===e.cubicInterpolationMode)!function(t,e="x"){const i=Ei(e),n=t.length,s=Array(n).fill(0),o=Array(n);let r,a,l,h=ki(t,0);for(r=0;r<n;++r)if(a=l,l=h,h=ki(t,r+1),l){if(h){const t=h[e]-l[e];s[r]=0!==t?(h[i]-l[i])/t:0}o[r]=a?h?Ut(s[r-1])!==Ut(s[r])?0:(s[r-1]+s[r])/2:s[r-1]:s[r]}!function(t,e,i){const n=t.length;let s,o,r,a,l,h=ki(t,0);for(let c=0;c<n-1;++c)l=h,h=ki(t,c+1),l&&h&&(Zt(e[c],0,Mi)?i[c]=i[c+1]=0:(s=i[c]/e[c],o=i[c+1]/e[c],a=Math.pow(s,2)+Math.pow(o,2),a<=9||(r=3/Math.sqrt(a),i[c]=s*r*e[c],i[c+1]=o*r*e[c])))}(t,s,o),function(t,e,i="x"){const n=Ei(i),s=t.length;let o,r,a,l=ki(t,0);for(let h=0;h<s;++h){if(r=a,a=l,l=ki(t,h+1),!a)continue;const s=a[i],c=a[n];r&&(o=(s-r[i])/3,a[`cp1${i}`]=s-o,a[`cp1${n}`]=c-o*e[h]),l&&(o=(l[i]-s)/3,a[`cp2${i}`]=s+o,a[`cp2${n}`]=c+o*e[h])}}(t,o,e)}(t,s);else{let i=n?t[t.length-1]:t[0];for(o=0,r=t.length;o<r;++o)a=t[o],l=Si(i,a,t[Math.min(o+1,r-(n?0:1))%r],e.tension),a.cp1x=l.previous.x,a.cp1y=l.previous.y,a.cp2x=l.next.x,a.cp2y=l.next.y,i=a}e.capBezierPoints&&function(t,e){let i,n,s,o,r,a=$e(t[0],e);for(i=0,n=t.length;i<n;++i)r=o,o=a,a=i<n-1&&$e(t[i+1],e),o&&(s=t[i],r&&(s.cp1x=Di(s.cp1x,e.left,e.right),s.cp1y=Di(s.cp1y,e.top,e.bottom)),a&&(s.cp2x=Di(s.cp2x,e.left,e.right),s.cp2y=Di(s.cp2y,e.top,e.bottom)))}(t,i)}function Bi(){return"undefined"!=typeof window&&"undefined"!=typeof document}function Ti(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function Oi(t,e,i){let n;return"string"==typeof t?(n=parseInt(t,10),-1!==t.indexOf("%")&&(n=n/100*e.parentNode[i])):n=t,n}const Li=t=>t.ownerDocument.defaultView.getComputedStyle(t,null),Ri=["top","right","bottom","left"];function Ii(t,e,i){const n={};i=i?"-"+i:"";for(let s=0;s<4;s++){const o=Ri[s];n[o]=parseFloat(t[e+"-"+o+i])||0}return n.width=n.left+n.right,n.height=n.top+n.bottom,n}const zi=(t,e,i)=>(t>0||e>0)&&(!i||!i.shadowRoot);function Wi(t,e){if("native"in t)return t;const{canvas:i,currentDevicePixelRatio:n}=e,s=Li(i),o="border-box"===s.boxSizing,r=Ii(s,"padding"),a=Ii(s,"border","width"),{x:l,y:h,box:c}=function(t,e){const i=t.touches,n=i&&i.length?i[0]:t,{offsetX:s,offsetY:o}=n;let r,a,l=!1;if(zi(s,o,t.target))r=s,a=o;else{const t=e.getBoundingClientRect();r=n.clientX-t.left,a=n.clientY-t.top,l=!0}return{x:r,y:a,box:l}}(t,i),d=r.left+(c&&a.left),u=r.top+(c&&a.top);let{width:f,height:p}=e;return o&&(f-=r.width+a.width,p-=r.height+a.height),{x:Math.round((l-d)/f*i.width/n),y:Math.round((h-u)/p*i.height/n)}}const Fi=t=>Math.round(10*t)/10;function ji(t,e,i){const n=e||1,s=Math.floor(t.height*n),o=Math.floor(t.width*n);t.height=Math.floor(t.height),t.width=Math.floor(t.width);const r=t.canvas;return r.style&&(i||!r.style.height&&!r.style.width)&&(r.style.height=`${t.height}px`,r.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==n||r.height!==s||r.width!==o)&&(t.currentDevicePixelRatio=n,r.height=s,r.width=o,t.ctx.setTransform(n,0,0,n,0,0),!0)}const Vi=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};window.addEventListener("test",null,e),window.removeEventListener("test",null,e)}catch(t){}return t}();function Ni(t,e){const i=function(t,e){return Li(t).getPropertyValue(e)}(t,e),n=i&&i.match(/^(\d+)(\.\d+)?px$/);return n?+n[1]:void 0}function Hi(t,e,i,n){return{x:t.x+i*(e.x-t.x),y:t.y+i*(e.y-t.y)}}function Yi(t,e,i,n){return{x:t.x+i*(e.x-t.x),y:"middle"===n?i<.5?t.y:e.y:"after"===n?i<1?t.y:e.y:i>0?e.y:t.y}}function $i(t,e,i,n){const s={x:t.cp2x,y:t.cp2y},o={x:e.cp1x,y:e.cp1y},r=Hi(t,s,i),a=Hi(s,o,i),l=Hi(o,e,i),h=Hi(r,a,i),c=Hi(a,l,i);return Hi(h,c,i)}function Xi(t,e,i){return t?function(t,e){return{x:i=>t+t+e-i,setWidth(t){e=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,e)=>t-e,leftForLtr:(t,e)=>t-e}}(e,i):{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,e)=>t+e,leftForLtr:(t,e)=>t}}function Ui(t,e){let i,n;"ltr"!==e&&"rtl"!==e||(i=t.canvas.style,n=[i.getPropertyValue("direction"),i.getPropertyPriority("direction")],i.setProperty("direction",e,"important"),t.prevTextDirection=n)}function Zi(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function qi(t){return"angle"===t?{between:oe,compare:ne,normalize:se}:{between:ae,compare:(t,e)=>t-e,normalize:t=>t}}function Gi({start:t,end:e,count:i,loop:n,style:s}){return{start:t%i,end:e%i,loop:n&&(e-t+1)%i==0,style:s}}function Ki(t,e,i){if(!i)return[t];const{property:n,start:s,end:o}=i,r=e.length,{compare:a,between:l,normalize:h}=qi(n),{start:c,end:d,loop:u,style:f}=function(t,e,i){const{property:n,start:s,end:o}=i,{between:r,normalize:a}=qi(n),l=e.length;let h,c,{start:d,end:u,loop:f}=t;if(f){for(d+=l,u+=l,h=0,c=l;h<c&&r(a(e[d%l][n]),s,o);++h)d--,u--;d%=l,u%=l}return u<d&&(u+=l),{start:d,end:u,loop:f,style:t.style}}(t,e,i),p=[];let g,m,x,b=!1,y=null;for(let t=c,i=c;t<=d;++t)m=e[t%r],m.skip||(g=h(m[n]),g!==x&&(b=l(g,s,o),null===y&&(b||l(s,x,g)&&0!==a(s,x))&&(y=0===a(g,s)?t:i),null!==y&&(!b||0===a(o,g)||l(o,x,g))&&(p.push(Gi({start:y,end:t,loop:u,count:r,style:f})),y=null),i=t,x=g));return null!==y&&p.push(Gi({start:y,end:d,loop:u,count:r,style:f})),p}function Ji(t,e){const i=[],n=t.segments;for(let s=0;s<n.length;s++){const o=Ki(n[s],t.points,e);o.length&&i.push(...o)}return i}function Qi(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function tn(t,e){if(!e)return!1;const i=[],n=function(t,e){return Ce(e)?(i.includes(e)||i.push(e),i.indexOf(e)):e};return JSON.stringify(t,n)!==JSON.stringify(e,n)}class en{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,i,n){const s=e.listeners[n],o=e.duration;s.forEach((n=>n({chart:t,initial:e.initial,numSteps:o,currentStep:Math.min(i-e.start,o)})))}_refresh(){this._request||(this._running=!0,this._request=pe.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(t=Date.now()){let e=0;this._charts.forEach(((i,n)=>{if(!i.running||!i.items.length)return;const s=i.items;let o,r=s.length-1,a=!1;for(;r>=0;--r)o=s[r],o._active?(o._total>i.duration&&(i.duration=o._total),o.tick(t),a=!0):(s[r]=s[s.length-1],s.pop());a&&(n.draw(),this._notify(n,i,t,"progress")),s.length||(i.running=!1,this._notify(n,i,t,"complete"),i.initial=!1),e+=s.length})),this._lastDate=t,0===e&&(this._running=!1)}_getAnims(t){const e=this._charts;let i=e.get(t);return i||(i={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,i)),i}listen(t,e,i){this._getAnims(t).listeners[e].push(i)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce(((t,e)=>Math.max(t,e._duration)),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const i=e.items;let n=i.length-1;for(;n>=0;--n)i[n].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}}var nn=new en;const sn="transparent",on={boolean:(t,e,i)=>i>.5?e:t,color(t,e,i){const n=Me(t||sn),s=n.valid&&Me(e||sn);return s&&s.valid?s.mix(n,i).hexString():e},number:(t,e,i)=>t+(e-t)*i};class rn{constructor(t,e,i,n){const s=e[i];n=hi([t.to,n,s,t.from]);const o=hi([t.from,s,n]);this._active=!0,this._fn=t.fn||on[t.type||typeof o],this._easing=we[t.easing]||we.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=i,this._from=o,this._to=n,this._promises=void 0}active(){return this._active}update(t,e,i){if(this._active){this._notify(!1);const n=this._target[this._prop],s=i-this._start,o=this._duration-s;this._start=i,this._duration=Math.floor(Math.max(o,t.duration)),this._total+=s,this._loop=!!t.loop,this._to=hi([t.to,e,n,t.from]),this._from=hi([t.from,n,e])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){const e=t-this._start,i=this._duration,n=this._prop,s=this._from,o=this._loop,r=this._to;let a;if(this._active=s!==r&&(o||e<i),!this._active)return this._target[n]=r,void this._notify(!0);e<0?this._target[n]=s:(a=e/i%2,a=o&&a>1?2-a:a,a=this._easing(Math.min(1,Math.max(0,a))),this._target[n]=this._fn(s,r,a))}wait(){const t=this._promises||(this._promises=[]);return new Promise(((e,i)=>{t.push({res:e,rej:i})}))}_notify(t){const e=t?"res":"rej",i=this._promises||[];for(let t=0;t<i.length;t++)i[t][e]()}}class an{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!bt(t))return;const e=Object.keys(We.animation),i=this._properties;Object.getOwnPropertyNames(t).forEach((n=>{const s=t[n];if(!bt(s))return;const o={};for(const t of e)o[t]=s[t];(xt(s.properties)&&s.properties||[n]).forEach((t=>{t!==n&&i.has(t)||i.set(t,o)}))}))}_animateOptions(t,e){const i=e.options,n=function(t,e){if(!e)return;let i=t.options;if(i)return i.$shared&&(t.options=i=Object.assign({},i,{$shared:!1,$animations:{}})),i;t.options=e}(t,i);if(!n)return[];const s=this._createAnimations(n,i);return i.$shared&&function(t,e){const i=[],n=Object.keys(e);for(let e=0;e<n.length;e++){const s=t[n[e]];s&&s.active()&&i.push(s.wait())}return Promise.all(i)}(t.options.$animations,i).then((()=>{t.options=i}),(()=>{})),s}_createAnimations(t,e){const i=this._properties,n=[],s=t.$animations||(t.$animations={}),o=Object.keys(e),r=Date.now();let a;for(a=o.length-1;a>=0;--a){const l=o[a];if("$"===l.charAt(0))continue;if("options"===l){n.push(...this._animateOptions(t,e));continue}const h=e[l];let c=s[l];const d=i.get(l);if(c){if(d&&c.active()){c.update(d,h,r);continue}c.cancel()}d&&d.duration?(s[l]=c=new rn(d,t,l,h),n.push(c)):t[l]=h}return n}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const i=this._createAnimations(t,e);return i.length?(nn.add(this._chart,i),!0):void 0}}function ln(t,e){const i=t&&t.options||{},n=i.reverse,s=void 0===i.min?e:0,o=void 0===i.max?e:0;return{start:n?o:s,end:n?s:o}}function hn(t,e){const i=[],n=t._getSortedDatasetMetas(e);let s,o;for(s=0,o=n.length;s<o;++s)i.push(n[s].index);return i}function cn(t,e,i,n={}){const s=t.keys,o="single"===n.mode;let r,a,l,h;if(null!==e){for(r=0,a=s.length;r<a;++r){if(l=+s[r],l===i){if(n.all)continue;break}h=t.values[l],yt(h)&&(o||0===e||Ut(e)===Ut(h))&&(e+=h)}return e}}function dn(t,e){const i=t&&t.options.stacked;return i||void 0===i&&void 0!==e.stack}function un(t,e,i){const n=t[e]||(t[e]={});return n[i]||(n[i]={})}function fn(t,e,i,n){for(const s of e.getMatchingVisibleMetas(n).reverse()){const e=t[s.index];if(i&&e>0||!i&&e<0)return s.index}return null}function pn(t,e){const{chart:i,_cachedMeta:n}=t,s=i._stacks||(i._stacks={}),{iScale:o,vScale:r,index:a}=n,l=o.axis,h=r.axis,c=function(t,e,i){return`${t.id}.${e.id}.${i.stack||i.type}`}(o,r,n),d=e.length;let u;for(let t=0;t<d;++t){const i=e[t],{[l]:o,[h]:d}=i;u=(i._stacks||(i._stacks={}))[h]=un(s,c,o),u[a]=d,u._top=fn(u,r,!0,n.type),u._bottom=fn(u,r,!1,n.type),(u._visualValues||(u._visualValues={}))[a]=d}}function gn(t,e){const i=t.scales;return Object.keys(i).filter((t=>i[t].axis===e)).shift()}function mn(t,e){const i=t.controller.index,n=t.vScale&&t.vScale.axis;if(n){e=e||t._parsed;for(const t of e){const e=t._stacks;if(!e||void 0===e[n]||void 0===e[n][i])return;delete e[n][i],void 0!==e[n]._visualValues&&void 0!==e[n]._visualValues[i]&&delete e[n]._visualValues[i]}}}const xn=t=>"reset"===t||"none"===t,bn=(t,e)=>e?t:Object.assign({},t);class yn{static defaults={};static datasetElementType=null;static dataElementType=null;constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.supportsDecimation=!1,this.$context=void 0,this._syncList=[],this.datasetElementType=new.target.datasetElementType,this.dataElementType=new.target.dataElementType,this.initialize()}initialize(){const t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=dn(t.vScale,t),this.addElements(),this.options.fill&&!this.chart.isPluginEnabled("filler")&&console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options")}updateIndex(t){this.index!==t&&mn(this._cachedMeta),this.index=t}linkScales(){const t=this.chart,e=this._cachedMeta,i=this.getDataset(),n=(t,e,i,n)=>"x"===t?e:"r"===t?n:i,s=e.xAxisID=_t(i.xAxisID,gn(t,"x")),o=e.yAxisID=_t(i.yAxisID,gn(t,"y")),r=e.rAxisID=_t(i.rAxisID,gn(t,"r")),a=e.indexAxis,l=e.iAxisID=n(a,s,o,r),h=e.vAxisID=n(a,o,s,r);e.xScale=this.getScaleForId(s),e.yScale=this.getScaleForId(o),e.rScale=this.getScaleForId(r),e.iScale=this.getScaleForId(l),e.vScale=this.getScaleForId(h)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&ue(this._data,this),t._stacked&&mn(t)}_dataCheck(){const t=this.getDataset(),e=t.data||(t.data=[]),i=this._data;if(bt(e))this._data=function(t){const e=Object.keys(t),i=new Array(e.length);let n,s,o;for(n=0,s=e.length;n<s;++n)o=e[n],i[n]={x:o,y:t[o]};return i}(e);else if(i!==e){if(i){ue(i,this);const t=this._cachedMeta;mn(t),t._parsed=[]}e&&Object.isExtensible(e)&&(this,(n=e)._chartjs?n._chartjs.listeners.push(this):(Object.defineProperty(n,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[this]}}),de.forEach((t=>{const e="_onData"+Lt(t),i=n[t];Object.defineProperty(n,t,{configurable:!0,enumerable:!1,value(...t){const s=i.apply(this,t);return n._chartjs.listeners.forEach((i=>{"function"==typeof i[e]&&i[e](...t)})),s}})})))),this._syncList=[],this._data=e}var n}addElements(){const t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){const e=this._cachedMeta,i=this.getDataset();let n=!1;this._dataCheck();const s=e._stacked;e._stacked=dn(e.vScale,e),e.stack!==i.stack&&(n=!0,mn(e),e.stack=i.stack),this._resyncElements(t),(n||s!==e._stacked)&&pn(this,e._parsed)}configure(){const t=this.chart.config,e=t.datasetScopeKeys(this._type),i=t.getOptionScopes(this.getDataset(),e,!0);this.options=t.createResolver(i,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,e){const{_cachedMeta:i,_data:n}=this,{iScale:s,_stacked:o}=i,r=s.axis;let a,l,h,c=0===t&&e===n.length||i._sorted,d=t>0&&i._parsed[t-1];if(!1===this._parsing)i._parsed=n,i._sorted=!0,h=n;else{h=xt(n[t])?this.parseArrayData(i,n,t,e):bt(n[t])?this.parseObjectData(i,n,t,e):this.parsePrimitiveData(i,n,t,e);const s=()=>null===l[r]||d&&l[r]<d[r];for(a=0;a<e;++a)i._parsed[a+t]=l=h[a],c&&(s()&&(c=!1),d=l);i._sorted=c}o&&pn(this,h)}parsePrimitiveData(t,e,i,n){const{iScale:s,vScale:o}=t,r=s.axis,a=o.axis,l=s.getLabels(),h=s===o,c=new Array(n);let d,u,f;for(d=0,u=n;d<u;++d)f=d+i,c[d]={[r]:h||s.parse(l[f],f),[a]:o.parse(e[f],f)};return c}parseArrayData(t,e,i,n){const{xScale:s,yScale:o}=t,r=new Array(n);let a,l,h,c;for(a=0,l=n;a<l;++a)h=a+i,c=e[h],r[a]={x:s.parse(c[0],h),y:o.parse(c[1],h)};return r}parseObjectData(t,e,i,n){const{xScale:s,yScale:o}=t,{xAxisKey:r="x",yAxisKey:a="y"}=this._parsing,l=new Array(n);let h,c,d,u;for(h=0,c=n;h<c;++h)d=h+i,u=e[d],l[h]={x:s.parse(Ot(u,r),d),y:o.parse(Ot(u,a),d)};return l}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,i){const n=this.chart,s=this._cachedMeta,o=e[t.axis];return cn({keys:hn(n,!0),values:e._stacks[t.axis]._visualValues},o,s.index,{mode:i})}updateRangeFromParsed(t,e,i,n){const s=i[e.axis];let o=null===s?NaN:s;const r=n&&i._stacks[e.axis];n&&r&&(n.values=r,o=cn(n,s,this._cachedMeta.index)),t.min=Math.min(t.min,o),t.max=Math.max(t.max,o)}getMinMax(t,e){const i=this._cachedMeta,n=i._parsed,s=i._sorted&&t===i.iScale,o=n.length,r=this._getOtherScale(t),a=((t,e,i)=>t&&!e.hidden&&e._stacked&&{keys:hn(i,!0),values:null})(e,i,this.chart),l={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:h,max:c}=function(t){const{min:e,max:i,minDefined:n,maxDefined:s}=t.getUserBounds();return{min:n?e:Number.NEGATIVE_INFINITY,max:s?i:Number.POSITIVE_INFINITY}}(r);let d,u;function f(){u=n[d];const e=u[r.axis];return!yt(u[t.axis])||h>e||c<e}for(d=0;d<o&&(f()||(this.updateRangeFromParsed(l,t,u,a),!s));++d);if(s)for(d=o-1;d>=0;--d)if(!f()){this.updateRangeFromParsed(l,t,u,a);break}return l}getAllParsedValues(t){const e=this._cachedMeta._parsed,i=[];let n,s,o;for(n=0,s=e.length;n<s;++n)o=e[n][t.axis],yt(o)&&i.push(o);return i}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,i=e.iScale,n=e.vScale,s=this.getParsed(t);return{label:i?""+i.getLabelForValue(s[i.axis]):"",value:n?""+n.getLabelForValue(s[n.axis]):""}}_update(t){const e=this._cachedMeta;this.update(t||"default"),e._clip=function(t){let e,i,n,s;return bt(t)?(e=t.top,i=t.right,n=t.bottom,s=t.left):e=i=n=s=t,{top:e,right:i,bottom:n,left:s,disabled:!1===t}}(_t(this.options.clip,function(t,e,i){if(!1===i)return!1;const n=ln(t,i),s=ln(e,i);return{top:s.end,right:n.end,bottom:s.start,left:n.start}}(e.xScale,e.yScale,this.getMaxOverflow())))}update(t){}draw(){const t=this._ctx,e=this.chart,i=this._cachedMeta,n=i.data||[],s=e.chartArea,o=[],r=this._drawStart||0,a=this._drawCount||n.length-r,l=this.options.drawActiveElementsOnTop;let h;for(i.dataset&&i.dataset.draw(t,s,r,a),h=r;h<r+a;++h){const e=n[h];e.hidden||(e.active&&l?o.push(e):e.draw(t,s))}for(h=0;h<o.length;++h)o[h].draw(t,s)}getStyle(t,e){const i=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(i):this.resolveDataElementOptions(t||0,i)}getContext(t,e,i){const n=this.getDataset();let s;if(t>=0&&t<this._cachedMeta.data.length){const e=this._cachedMeta.data[t];s=e.$context||(e.$context=function(t,e,i){return ci(t,{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:i,index:e,mode:"default",type:"data"})}(this.getContext(),t,e)),s.parsed=this.getParsed(t),s.raw=n.data[t],s.index=s.dataIndex=t}else s=this.$context||(this.$context=function(t,e){return ci(t,{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),s.dataset=n,s.index=s.datasetIndex=this.index;return s.active=!!e,s.mode=i,s}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",i){const n="active"===e,s=this._cachedDataOpts,o=t+"-"+e,r=s[o],a=this.enableOptionSharing&&Rt(i);if(r)return bn(r,a);const l=this.chart.config,h=l.datasetElementScopeKeys(this._type,t),c=n?[`${t}Hover`,"hover",t,""]:[t,""],d=l.getOptionScopes(this.getDataset(),h),u=Object.keys(We.elements[t]),f=l.resolveNamedOptions(d,u,(()=>this.getContext(i,n,e)),c);return f.$shared&&(f.$shared=a,s[o]=Object.freeze(bn(f,a))),f}_resolveAnimations(t,e,i){const n=this.chart,s=this._cachedDataOpts,o=`animation-${e}`,r=s[o];if(r)return r;let a;if(!1!==n.options.animation){const n=this.chart.config,s=n.datasetAnimationScopeKeys(this._type,e),o=n.getOptionScopes(this.getDataset(),s);a=n.createResolver(o,this.getContext(t,i,e))}const l=new an(n,a&&a.animations);return a&&a._cacheable&&(s[o]=Object.freeze(l)),l}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||xn(t)||this.chart._animationsDisabled}_getSharedOptions(t,e){const i=this.resolveDataElementOptions(t,e),n=this._sharedOptions,s=this.getSharedOptions(i),o=this.includeOptions(e,s)||s!==n;return this.updateSharedOptions(s,e,i),{sharedOptions:s,includeOptions:o}}updateElement(t,e,i,n){xn(n)?Object.assign(t,i):this._resolveAnimations(e,n).update(t,i)}updateSharedOptions(t,e,i){t&&!xn(e)&&this._resolveAnimations(void 0,e).update(t,i)}_setStyle(t,e,i,n){t.active=n;const s=this.getStyle(e,n);this._resolveAnimations(e,i,n).update(t,{options:!n&&this.getSharedOptions(s)||s})}removeHoverStyle(t,e,i){this._setStyle(t,i,"active",!1)}setHoverStyle(t,e,i){this._setStyle(t,i,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this._data,i=this._cachedMeta.data;for(const[t,e,i]of this._syncList)this[t](e,i);this._syncList=[];const n=i.length,s=e.length,o=Math.min(s,n);o&&this.parse(0,o),s>n?this._insertElements(n,s-n,t):s<n&&this._removeElements(s,n-s)}_insertElements(t,e,i=!0){const n=this._cachedMeta,s=n.data,o=t+e;let r;const a=t=>{for(t.length+=e,r=t.length-1;r>=o;r--)t[r]=t[r-e]};for(a(s),r=t;r<o;++r)s[r]=new this.dataElementType;this._parsing&&a(n._parsed),this.parse(t,e),i&&this.updateElements(s,t,e,"reset")}updateElements(t,e,i,n){}_removeElements(t,e){const i=this._cachedMeta;if(this._parsing){const n=i._parsed.splice(t,e);i._stacked&&mn(i,n)}i.data.splice(t,e)}_sync(t){if(this._parsing)this._syncList.push(t);else{const[e,i,n]=t;this[e](i,n)}this.chart._dataChanges.push([this.index,...t])}_onDataPush(){const t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){e&&this._sync(["_removeElements",t,e]);const i=arguments.length-2;i&&this._sync(["_insertElements",t,i])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function vn(t){const e=t.iScale,i=function(t,e){if(!t._cache.$bar){const i=t.getMatchingVisibleMetas(e);let n=[];for(let e=0,s=i.length;e<s;e++)n=n.concat(i[e].controller.getAllParsedValues(t));t._cache.$bar=fe(n.sort(((t,e)=>t-e)))}return t._cache.$bar}(e,t.type);let n,s,o,r,a=e._length;const l=()=>{32767!==o&&-32768!==o&&(Rt(r)&&(a=Math.min(a,Math.abs(o-r)||a)),r=o)};for(n=0,s=i.length;n<s;++n)o=e.getPixelForValue(i[n]),l();for(r=void 0,n=0,s=e.ticks.length;n<s;++n)o=e.getPixelForTick(n),l();return a}function _n(t,e,i,n){return xt(t)?function(t,e,i,n){const s=i.parse(t[0],n),o=i.parse(t[1],n),r=Math.min(s,o),a=Math.max(s,o);let l=r,h=a;Math.abs(r)>Math.abs(a)&&(l=a,h=r),e[i.axis]=h,e._custom={barStart:l,barEnd:h,start:s,end:o,min:r,max:a}}(t,e,i,n):e[i.axis]=i.parse(t,n),e}function An(t,e,i,n){const s=t.iScale,o=t.vScale,r=s.getLabels(),a=s===o,l=[];let h,c,d,u;for(h=i,c=i+n;h<c;++h)u=e[h],d={},d[s.axis]=a||s.parse(r[h],h),l.push(_n(u,d,o,h));return l}function wn(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function Cn(t,e,i,n){let s=e.borderSkipped;const o={};if(!s)return void(t.borderSkipped=o);if(!0===s)return void(t.borderSkipped={top:!0,right:!0,bottom:!0,left:!0});const{start:r,end:a,reverse:l,top:h,bottom:c}=function(t){let e,i,n,s,o;return t.horizontal?(e=t.base>t.x,i="left",n="right"):(e=t.base<t.y,i="bottom",n="top"),e?(s="end",o="start"):(s="start",o="end"),{start:i,end:n,reverse:e,top:s,bottom:o}}(t);"middle"===s&&i&&(t.enableBorderRadius=!0,(i._top||0)===n?s=h:(i._bottom||0)===n?s=c:(o[Mn(c,r,a,l)]=!0,s=h)),o[Mn(s,r,a,l)]=!0,t.borderSkipped=o}function Mn(t,e,i,n){var s,o,r;return n?(r=i,t=kn(t=(s=t)===(o=e)?r:s===r?o:s,i,e)):t=kn(t,e,i),t}function kn(t,e,i){return"start"===t?e:"end"===t?i:t}function En(t,{inflateAmount:e},i){t.inflateAmount="auto"===e?1===i?.33:0:e}class Sn extends yn{static id="doughnut";static defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"};static descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t&&!t.startsWith("borderDash")&&!t.startsWith("hoverBorderDash")};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i,color:n}}=t.legend.options;return e.labels.map(((e,s)=>{const o=t.getDatasetMeta(0).controller.getStyle(s);return{text:e,fillStyle:o.backgroundColor,strokeStyle:o.borderColor,fontColor:n,lineWidth:o.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(s),index:s}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}}}};constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){const i=this.getDataset().data,n=this._cachedMeta;if(!1===this._parsing)n._parsed=i;else{let s,o,r=t=>+i[t];if(bt(i[t])){const{key:t="value"}=this._parsing;r=e=>+Ot(i[e],t)}for(s=t,o=t+e;s<o;++s)n._parsed[s]=r(s)}}_getRotation(){return Jt(this.options.rotation-90)}_getCircumference(){return Jt(this.options.circumference)}_getRotationExtents(){let t=Ft,e=-Ft;for(let i=0;i<this.chart.data.datasets.length;++i)if(this.chart.isDatasetVisible(i)&&this.chart.getDatasetMeta(i).type===this._type){const n=this.chart.getDatasetMeta(i).controller,s=n._getRotation(),o=n._getCircumference();t=Math.min(t,s),e=Math.max(e,s+o)}return{rotation:t,circumference:e-t}}update(t){const e=this.chart,{chartArea:i}=e,n=this._cachedMeta,s=n.data,o=this.getMaxBorderWidth()+this.getMaxOffset(s)+this.options.spacing,r=Math.max((Math.min(i.width,i.height)-o)/2,0),a=Math.min((h=r,"string"==typeof(l=this.options.cutout)&&l.endsWith("%")?parseFloat(l)/100:+l/h),1);var l,h;const c=this._getRingWeight(this.index),{circumference:d,rotation:u}=this._getRotationExtents(),{ratioX:f,ratioY:p,offsetX:g,offsetY:m}=function(t,e,i){let n=1,s=1,o=0,r=0;if(e<Ft){const a=t,l=a+e,h=Math.cos(a),c=Math.sin(a),d=Math.cos(l),u=Math.sin(l),f=(t,e,n)=>oe(t,a,l,!0)?1:Math.max(e,e*i,n,n*i),p=(t,e,n)=>oe(t,a,l,!0)?-1:Math.min(e,e*i,n,n*i),g=f(0,h,d),m=f(Ht,c,u),x=p(Wt,h,d),b=p(Wt+Ht,c,u);n=(g-x)/2,s=(m-b)/2,o=-(g+x)/2,r=-(m+b)/2}return{ratioX:n,ratioY:s,offsetX:o,offsetY:r}}(u,d,a),x=(i.width-o)/f,b=(i.height-o)/p,y=Math.max(Math.min(x,b)/2,0),v=At(this.options.radius,y),_=(v-Math.max(v*a,0))/this._getVisibleDatasetWeightTotal();this.offsetX=g*v,this.offsetY=m*v,n.total=this.calculateTotal(),this.outerRadius=v-_*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-_*c,0),this.updateElements(s,0,s.length,t)}_circumference(t,e){const i=this.options,n=this._cachedMeta,s=this._getCircumference();return e&&i.animation.animateRotate||!this.chart.getDataVisibility(t)||null===n._parsed[t]||n.data[t].hidden?0:this.calculateCircumference(n._parsed[t]*s/Ft)}updateElements(t,e,i,n){const s="reset"===n,o=this.chart,r=o.chartArea,a=o.options.animation,l=(r.left+r.right)/2,h=(r.top+r.bottom)/2,c=s&&a.animateScale,d=c?0:this.innerRadius,u=c?0:this.outerRadius,{sharedOptions:f,includeOptions:p}=this._getSharedOptions(e,n);let g,m=this._getRotation();for(g=0;g<e;++g)m+=this._circumference(g,s);for(g=e;g<e+i;++g){const e=this._circumference(g,s),i=t[g],o={x:l+this.offsetX,y:h+this.offsetY,startAngle:m,endAngle:m+e,circumference:e,outerRadius:u,innerRadius:d};p&&(o.options=f||this.resolveDataElementOptions(g,i.active?"active":n)),m+=e,this.updateElement(i,g,o,n)}}calculateTotal(){const t=this._cachedMeta,e=t.data;let i,n=0;for(i=0;i<e.length;i++){const s=t._parsed[i];null===s||isNaN(s)||!this.chart.getDataVisibility(i)||e[i].hidden||(n+=Math.abs(s))}return n}calculateCircumference(t){const e=this._cachedMeta.total;return e>0&&!isNaN(t)?Ft*(Math.abs(t)/e):0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,n=i.data.labels||[],s=Pe(e._parsed[t],i.options.locale);return{label:n[t]||"",value:s}}getMaxBorderWidth(t){let e=0;const i=this.chart;let n,s,o,r,a;if(!t)for(n=0,s=i.data.datasets.length;n<s;++n)if(i.isDatasetVisible(n)){o=i.getDatasetMeta(n),t=o.data,r=o.controller;break}if(!t)return 0;for(n=0,s=t.length;n<s;++n)a=r.resolveDataElementOptions(n),"inner"!==a.borderAlign&&(e=Math.max(e,a.borderWidth||0,a.hoverBorderWidth||0));return e}getMaxOffset(t){let e=0;for(let i=0,n=t.length;i<n;++i){const t=this.resolveDataElementOptions(i);e=Math.max(e,t.offset||0,t.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let i=0;i<t;++i)this.chart.isDatasetVisible(i)&&(e+=this._getRingWeight(i));return e}_getRingWeight(t){return Math.max(_t(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}class Dn extends yn{static id="polarArea";static defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i,color:n}}=t.legend.options;return e.labels.map(((e,s)=>{const o=t.getDatasetMeta(0).controller.getStyle(s);return{text:e,fillStyle:o.backgroundColor,strokeStyle:o.borderColor,fontColor:n,lineWidth:o.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(s),index:s}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,n=i.data.labels||[],s=Pe(e._parsed[t].r,i.options.locale);return{label:n[t]||"",value:s}}parseObjectData(t,e,i,n){return Ci.bind(this)(t,e,i,n)}update(t){const e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}getMinMax(){const t=this._cachedMeta,e={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY};return t.data.forEach(((t,i)=>{const n=this.getParsed(i).r;!isNaN(n)&&this.chart.getDataVisibility(i)&&(n<e.min&&(e.min=n),n>e.max&&(e.max=n))})),e}_updateRadius(){const t=this.chart,e=t.chartArea,i=t.options,n=Math.min(e.right-e.left,e.bottom-e.top),s=Math.max(n/2,0),o=(s-Math.max(i.cutoutPercentage?s/100*i.cutoutPercentage:1,0))/t.getVisibleDatasetCount();this.outerRadius=s-o*this.index,this.innerRadius=this.outerRadius-o}updateElements(t,e,i,n){const s="reset"===n,o=this.chart,r=o.options.animation,a=this._cachedMeta.rScale,l=a.xCenter,h=a.yCenter,c=a.getIndexAngle(0)-.5*Wt;let d,u=c;const f=360/this.countVisibleElements();for(d=0;d<e;++d)u+=this._computeAngle(d,n,f);for(d=e;d<e+i;d++){const e=t[d];let i=u,p=u+this._computeAngle(d,n,f),g=o.getDataVisibility(d)?a.getDistanceFromCenterForValue(this.getParsed(d).r):0;u=p,s&&(r.animateScale&&(g=0),r.animateRotate&&(i=p=c));const m={x:l,y:h,innerRadius:0,outerRadius:g,startAngle:i,endAngle:p,options:this.resolveDataElementOptions(d,e.active?"active":n)};this.updateElement(e,d,m,n)}}countVisibleElements(){const t=this._cachedMeta;let e=0;return t.data.forEach(((t,i)=>{!isNaN(this.getParsed(i).r)&&this.chart.getDataVisibility(i)&&e++})),e}_computeAngle(t,e,i){return this.chart.getDataVisibility(t)?Jt(this.resolveDataElementOptions(t,e).angle||i):0}}var Pn=Object.freeze({__proto__:null,BarController:class extends yn{static id="bar";static defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}};static overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};parsePrimitiveData(t,e,i,n){return An(t,e,i,n)}parseArrayData(t,e,i,n){return An(t,e,i,n)}parseObjectData(t,e,i,n){const{iScale:s,vScale:o}=t,{xAxisKey:r="x",yAxisKey:a="y"}=this._parsing,l="x"===s.axis?r:a,h="x"===o.axis?r:a,c=[];let d,u,f,p;for(d=i,u=i+n;d<u;++d)p=e[d],f={},f[s.axis]=s.parse(Ot(p,l),d),c.push(_n(Ot(p,h),f,o,d));return c}updateRangeFromParsed(t,e,i,n){super.updateRangeFromParsed(t,e,i,n);const s=i._custom;s&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,s.min),t.max=Math.max(t.max,s.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:i,vScale:n}=e,s=this.getParsed(t),o=s._custom,r=wn(o)?"["+o.start+", "+o.end+"]":""+n.getLabelForValue(s[n.axis]);return{label:""+i.getLabelForValue(s[i.axis]),value:r}}initialize(){this.enableOptionSharing=!0,super.initialize(),this._cachedMeta.stack=this.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,i,n){const s="reset"===n,{index:o,_cachedMeta:{vScale:r}}=this,a=r.getBasePixel(),l=r.isHorizontal(),h=this._getRuler(),{sharedOptions:c,includeOptions:d}=this._getSharedOptions(e,n);for(let u=e;u<e+i;u++){const e=this.getParsed(u),i=s||mt(e[r.axis])?{base:a,head:a}:this._calculateBarValuePixels(u),f=this._calculateBarIndexPixels(u,h),p=(e._stacks||{})[r.axis],g={horizontal:l,base:i.base,enableBorderRadius:!p||wn(e._custom)||o===p._top||o===p._bottom,x:l?i.head:f.center,y:l?f.center:i.head,height:l?f.size:Math.abs(i.size),width:l?Math.abs(i.size):f.size};d&&(g.options=c||this.resolveDataElementOptions(u,t[u].active?"active":n));const m=g.options||t[u].options;Cn(g,m,p,o),En(g,m,h.ratio),this.updateElement(t[u],u,g,n)}}_getStacks(t,e){const{iScale:i}=this._cachedMeta,n=i.getMatchingVisibleMetas(this._type).filter((t=>t.controller.options.grouped)),s=i.options.stacked,o=[],r=t=>{const i=t.controller.getParsed(e),n=i&&i[t.vScale.axis];if(mt(n)||isNaN(n))return!0};for(const i of n)if((void 0===e||!r(i))&&((!1===s||-1===o.indexOf(i.stack)||void 0===s&&void 0===i.stack)&&o.push(i.stack),i.index===t))break;return o.length||o.push(void 0),o}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,i){const n=this._getStacks(t,i),s=void 0!==e?n.indexOf(e):-1;return-1===s?n.length-1:s}_getRuler(){const t=this.options,e=this._cachedMeta,i=e.iScale,n=[];let s,o;for(s=0,o=e.data.length;s<o;++s)n.push(i.getPixelForValue(this.getParsed(s)[i.axis],s));const r=t.barThickness;return{min:r||vn(e),pixels:n,start:i._startPixel,end:i._endPixel,stackCount:this._getStackCount(),scale:i,grouped:t.grouped,ratio:r?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){const{_cachedMeta:{vScale:e,_stacked:i,index:n},options:{base:s,minBarLength:o}}=this,r=s||0,a=this.getParsed(t),l=a._custom,h=wn(l);let c,d,u=a[e.axis],f=0,p=i?this.applyStack(e,a,i):u;p!==u&&(f=p-u,p=u),h&&(u=l.barStart,p=l.barEnd-l.barStart,0!==u&&Ut(u)!==Ut(l.barEnd)&&(f=0),f+=u);const g=mt(s)||h?f:s;let m=e.getPixelForValue(g);if(c=this.chart.getDataVisibility(t)?e.getPixelForValue(f+p):m,d=c-m,Math.abs(d)<o){d=function(t,e,i){return 0!==t?Ut(t):(e.isHorizontal()?1:-1)*(e.min>=i?1:-1)}(d,e,r)*o,u===r&&(m-=d/2);const t=e.getPixelForDecimal(0),s=e.getPixelForDecimal(1),l=Math.min(t,s),f=Math.max(t,s);m=Math.max(Math.min(m,f),l),c=m+d,i&&!h&&(a._stacks[e.axis]._visualValues[n]=e.getValueForPixel(c)-e.getValueForPixel(m))}if(m===e.getPixelForValue(r)){const t=Ut(d)*e.getLineWidthForValue(r)/2;m+=t,d-=t}return{size:d,base:m,head:c,center:c+d/2}}_calculateBarIndexPixels(t,e){const i=e.scale,n=this.options,s=n.skipNull,o=_t(n.maxBarThickness,1/0);let r,a;if(e.grouped){const i=s?this._getStackCount(t):e.stackCount,l="flex"===n.barThickness?function(t,e,i,n){const s=e.pixels,o=s[t];let r=t>0?s[t-1]:null,a=t<s.length-1?s[t+1]:null;const l=i.categoryPercentage;null===r&&(r=o-(null===a?e.end-e.start:a-o)),null===a&&(a=o+o-r);const h=o-(o-Math.min(r,a))/2*l;return{chunk:Math.abs(a-r)/2*l/n,ratio:i.barPercentage,start:h}}(t,e,n,i):function(t,e,i,n){const s=i.barThickness;let o,r;return mt(s)?(o=e.min*i.categoryPercentage,r=i.barPercentage):(o=s*n,r=1),{chunk:o/n,ratio:r,start:e.pixels[t]-o/2}}(t,e,n,i),h=this._getStackIndex(this.index,this._cachedMeta.stack,s?t:void 0);r=l.start+l.chunk*h+l.chunk/2,a=Math.min(o,l.chunk*l.ratio)}else r=i.getPixelForValue(this.getParsed(t)[i.axis],t),a=Math.min(o,e.min*e.ratio);return{base:r-a/2,head:r+a/2,center:r,size:a}}draw(){const t=this._cachedMeta,e=t.vScale,i=t.data,n=i.length;let s=0;for(;s<n;++s)null!==this.getParsed(s)[e.axis]&&i[s].draw(this._ctx)}},BubbleController:class extends yn{static id="bubble";static defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}};static overrides={scales:{x:{type:"linear"},y:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,e,i,n){const s=super.parsePrimitiveData(t,e,i,n);for(let t=0;t<s.length;t++)s[t]._custom=this.resolveDataElementOptions(t+i).radius;return s}parseArrayData(t,e,i,n){const s=super.parseArrayData(t,e,i,n);for(let t=0;t<s.length;t++){const n=e[i+t];s[t]._custom=_t(n[2],this.resolveDataElementOptions(t+i).radius)}return s}parseObjectData(t,e,i,n){const s=super.parseObjectData(t,e,i,n);for(let t=0;t<s.length;t++){const n=e[i+t];s[t]._custom=_t(n&&n.r&&+n.r,this.resolveDataElementOptions(t+i).radius)}return s}getMaxOverflow(){const t=this._cachedMeta.data;let e=0;for(let i=t.length-1;i>=0;--i)e=Math.max(e,t[i].size(this.resolveDataElementOptions(i))/2);return e>0&&e}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart.data.labels||[],{xScale:n,yScale:s}=e,o=this.getParsed(t),r=n.getLabelForValue(o.x),a=s.getLabelForValue(o.y),l=o._custom;return{label:i[t]||"",value:"("+r+", "+a+(l?", "+l:"")+")"}}update(t){const e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,i,n){const s="reset"===n,{iScale:o,vScale:r}=this._cachedMeta,{sharedOptions:a,includeOptions:l}=this._getSharedOptions(e,n),h=o.axis,c=r.axis;for(let d=e;d<e+i;d++){const e=t[d],i=!s&&this.getParsed(d),u={},f=u[h]=s?o.getPixelForDecimal(.5):o.getPixelForValue(i[h]),p=u[c]=s?r.getBasePixel():r.getPixelForValue(i[c]);u.skip=isNaN(f)||isNaN(p),l&&(u.options=a||this.resolveDataElementOptions(d,e.active?"active":n),s&&(u.options.radius=0)),this.updateElement(e,d,u,n)}}resolveDataElementOptions(t,e){const i=this.getParsed(t);let n=super.resolveDataElementOptions(t,e);n.$shared&&(n=Object.assign({},n,{$shared:!1}));const s=n.radius;return"active"!==e&&(n.radius=0),n.radius+=_t(i&&i._custom,s),n}},DoughnutController:Sn,LineController:class extends yn{static id="line";static defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1};static overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,this.supportsDecimation=!0,super.initialize()}update(t){const e=this._cachedMeta,{dataset:i,data:n=[],_dataset:s}=e,o=this.chart._animationsDisabled;let{start:r,count:a}=be(e,n,o);this._drawStart=r,this._drawCount=a,ye(e)&&(r=0,a=n.length),i._chart=this.chart,i._datasetIndex=this.index,i._decimated=!!s._decimated,i.points=n;const l=this.resolveDatasetElementOptions(t);this.options.showLine||(l.borderWidth=0),l.segment=this.options.segment,this.updateElement(i,void 0,{animated:!o,options:l},t),this.updateElements(n,r,a,t)}updateElements(t,e,i,n){const s="reset"===n,{iScale:o,vScale:r,_stacked:a,_dataset:l}=this._cachedMeta,{sharedOptions:h,includeOptions:c}=this._getSharedOptions(e,n),d=o.axis,u=r.axis,{spanGaps:f,segment:p}=this.options,g=Gt(f)?f:Number.POSITIVE_INFINITY,m=this.chart._animationsDisabled||s||"none"===n,x=e+i,b=t.length;let y=e>0&&this.getParsed(e-1);for(let i=0;i<b;++i){const f=t[i],b=m?f:{};if(i<e||i>=x){b.skip=!0;continue}const v=this.getParsed(i),_=mt(v[u]),A=b[d]=o.getPixelForValue(v[d],i),w=b[u]=s||_?r.getBasePixel():r.getPixelForValue(a?this.applyStack(r,v,a):v[u],i);b.skip=isNaN(A)||isNaN(w)||_,b.stop=i>0&&Math.abs(v[d]-y[d])>g,p&&(b.parsed=v,b.raw=l.data[i]),c&&(b.options=h||this.resolveDataElementOptions(i,f.active?"active":n)),m||this.updateElement(f,i,b,n),y=v}}getMaxOverflow(){const t=this._cachedMeta,e=t.dataset,i=e.options&&e.options.borderWidth||0,n=t.data||[];if(!n.length)return i;const s=n[0].size(this.resolveDataElementOptions(0)),o=n[n.length-1].size(this.resolveDataElementOptions(n.length-1));return Math.max(i,s,o)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}},PieController:class extends Sn{static id="pie";static defaults={cutout:0,rotation:0,circumference:360,radius:"100%"}},PolarAreaController:Dn,RadarController:class extends yn{static id="radar";static defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}};static overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};getLabelAndValue(t){const e=this._cachedMeta.vScale,i=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(i[e.axis])}}parseObjectData(t,e,i,n){return Ci.bind(this)(t,e,i,n)}update(t){const e=this._cachedMeta,i=e.dataset,n=e.data||[],s=e.iScale.getLabels();if(i.points=n,"resize"!==t){const e=this.resolveDatasetElementOptions(t);this.options.showLine||(e.borderWidth=0);const o={_loop:!0,_fullLoop:s.length===n.length,options:e};this.updateElement(i,void 0,o,t)}this.updateElements(n,0,n.length,t)}updateElements(t,e,i,n){const s=this._cachedMeta.rScale,o="reset"===n;for(let r=e;r<e+i;r++){const e=t[r],i=this.resolveDataElementOptions(r,e.active?"active":n),a=s.getPointPositionForValue(r,this.getParsed(r).r),l=o?s.xCenter:a.x,h=o?s.yCenter:a.y,c={x:l,y:h,angle:a.angle,skip:isNaN(l)||isNaN(h),options:i};this.updateElement(e,r,c,n)}}},ScatterController:class extends yn{static id="scatter";static defaults={datasetElementType:!1,dataElementType:"point",showLine:!1,fill:!1};static overrides={interaction:{mode:"point"},scales:{x:{type:"linear"},y:{type:"linear"}}};getLabelAndValue(t){const e=this._cachedMeta,i=this.chart.data.labels||[],{xScale:n,yScale:s}=e,o=this.getParsed(t),r=n.getLabelForValue(o.x),a=s.getLabelForValue(o.y);return{label:i[t]||"",value:"("+r+", "+a+")"}}update(t){const e=this._cachedMeta,{data:i=[]}=e,n=this.chart._animationsDisabled;let{start:s,count:o}=be(e,i,n);if(this._drawStart=s,this._drawCount=o,ye(e)&&(s=0,o=i.length),this.options.showLine){this.datasetElementType||this.addElements();const{dataset:s,_dataset:o}=e;s._chart=this.chart,s._datasetIndex=this.index,s._decimated=!!o._decimated,s.points=i;const r=this.resolveDatasetElementOptions(t);r.segment=this.options.segment,this.updateElement(s,void 0,{animated:!n,options:r},t)}else this.datasetElementType&&(delete e.dataset,this.datasetElementType=!1);this.updateElements(i,s,o,t)}addElements(){const{showLine:t}=this.options;!this.datasetElementType&&t&&(this.datasetElementType=this.chart.registry.getElement("line")),super.addElements()}updateElements(t,e,i,n){const s="reset"===n,{iScale:o,vScale:r,_stacked:a,_dataset:l}=this._cachedMeta,h=this.resolveDataElementOptions(e,n),c=this.getSharedOptions(h),d=this.includeOptions(n,c),u=o.axis,f=r.axis,{spanGaps:p,segment:g}=this.options,m=Gt(p)?p:Number.POSITIVE_INFINITY,x=this.chart._animationsDisabled||s||"none"===n;let b=e>0&&this.getParsed(e-1);for(let h=e;h<e+i;++h){const e=t[h],i=this.getParsed(h),p=x?e:{},y=mt(i[f]),v=p[u]=o.getPixelForValue(i[u],h),_=p[f]=s||y?r.getBasePixel():r.getPixelForValue(a?this.applyStack(r,i,a):i[f],h);p.skip=isNaN(v)||isNaN(_)||y,p.stop=h>0&&Math.abs(i[u]-b[u])>m,g&&(p.parsed=i,p.raw=l.data[h]),d&&(p.options=c||this.resolveDataElementOptions(h,e.active?"active":n)),x||this.updateElement(e,h,p,n),b=i}this.updateSharedOptions(c,n,h)}getMaxOverflow(){const t=this._cachedMeta,e=t.data||[];if(!this.options.showLine){let t=0;for(let i=e.length-1;i>=0;--i)t=Math.max(t,e[i].size(this.resolveDataElementOptions(i))/2);return t>0&&t}const i=t.dataset,n=i.options&&i.options.borderWidth||0;if(!e.length)return n;const s=e[0].size(this.resolveDataElementOptions(0)),o=e[e.length-1].size(this.resolveDataElementOptions(e.length-1));return Math.max(n,s,o)/2}}});function Bn(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class Tn{static override(t){Object.assign(Tn.prototype,t)}options;constructor(t){this.options=t||{}}init(){}formats(){return Bn()}parse(){return Bn()}format(){return Bn()}add(){return Bn()}diff(){return Bn()}startOf(){return Bn()}endOf(){return Bn()}}var On=Tn;function Ln(t,e,i,n){const{controller:s,data:o,_sorted:r}=t,a=s._cachedMeta.iScale;if(a&&e===a.axis&&"r"!==e&&r&&o.length){const t=a._reversePixels?ce:he;if(!n)return t(o,e,i);if(s._sharedOptions){const n=o[0],s="function"==typeof n.getRange&&n.getRange(e);if(s){const n=t(o,e,i-s),r=t(o,e,i+s);return{lo:n.lo,hi:r.hi}}}}return{lo:0,hi:o.length-1}}function Rn(t,e,i,n,s){const o=t.getSortedVisibleDatasetMetas(),r=i[e];for(let t=0,i=o.length;t<i;++t){const{index:i,data:a}=o[t],{lo:l,hi:h}=Ln(o[t],e,r,s);for(let t=l;t<=h;++t){const e=a[t];e.skip||n(e,i,t)}}}function In(t,e,i,n,s){const o=[];return s||t.isPointInArea(e)?(Rn(t,i,e,(function(i,r,a){(s||$e(i,t.chartArea,0))&&i.inRange(e.x,e.y,n)&&o.push({element:i,datasetIndex:r,index:a})}),!0),o):o}function zn(t,e,i,n,s,o){return o||t.isPointInArea(e)?"r"!==i||n?function(t,e,i,n,s,o){let r=[];const a=function(t){const e=-1!==t.indexOf("x"),i=-1!==t.indexOf("y");return function(t,n){const s=e?Math.abs(t.x-n.x):0,o=i?Math.abs(t.y-n.y):0;return Math.sqrt(Math.pow(s,2)+Math.pow(o,2))}}(i);let l=Number.POSITIVE_INFINITY;return Rn(t,i,e,(function(i,h,c){const d=i.inRange(e.x,e.y,s);if(n&&!d)return;const u=i.getCenterPoint(s);if(!o&&!t.isPointInArea(u)&&!d)return;const f=a(e,u);f<l?(r=[{element:i,datasetIndex:h,index:c}],l=f):f===l&&r.push({element:i,datasetIndex:h,index:c})})),r}(t,e,i,n,s,o):function(t,e,i,n){let s=[];return Rn(t,i,e,(function(t,i,o){const{startAngle:r,endAngle:a}=t.getProps(["startAngle","endAngle"],n),{angle:l}=ee(t,{x:e.x,y:e.y});oe(l,r,a)&&s.push({element:t,datasetIndex:i,index:o})})),s}(t,e,i,s):[]}function Wn(t,e,i,n,s){const o=[],r="x"===i?"inXRange":"inYRange";let a=!1;return Rn(t,i,e,((t,n,l)=>{t[r](e[i],s)&&(o.push({element:t,datasetIndex:n,index:l}),a=a||t.inRange(e.x,e.y,s))})),n&&!a?[]:o}var Fn={evaluateInteractionItems:Rn,modes:{index(t,e,i,n){const s=Wi(e,t),o=i.axis||"x",r=i.includeInvisible||!1,a=i.intersect?In(t,s,o,n,r):zn(t,s,o,!1,n,r),l=[];return a.length?(t.getSortedVisibleDatasetMetas().forEach((t=>{const e=a[0].index,i=t.data[e];i&&!i.skip&&l.push({element:i,datasetIndex:t.index,index:e})})),l):[]},dataset(t,e,i,n){const s=Wi(e,t),o=i.axis||"xy",r=i.includeInvisible||!1;let a=i.intersect?In(t,s,o,n,r):zn(t,s,o,!1,n,r);if(a.length>0){const e=a[0].datasetIndex,i=t.getDatasetMeta(e).data;a=[];for(let t=0;t<i.length;++t)a.push({element:i[t],datasetIndex:e,index:t})}return a},point:(t,e,i,n)=>In(t,Wi(e,t),i.axis||"xy",n,i.includeInvisible||!1),nearest(t,e,i,n){const s=Wi(e,t),o=i.axis||"xy",r=i.includeInvisible||!1;return zn(t,s,o,i.intersect,n,r)},x:(t,e,i,n)=>Wn(t,Wi(e,t),"x",i.intersect,n),y:(t,e,i,n)=>Wn(t,Wi(e,t),"y",i.intersect,n)}};const jn=["left","top","right","bottom"];function Vn(t,e){return t.filter((t=>t.pos===e))}function Nn(t,e){return t.filter((t=>-1===jn.indexOf(t.pos)&&t.box.axis===e))}function Hn(t,e){return t.sort(((t,i)=>{const n=e?i:t,s=e?t:i;return n.weight===s.weight?n.index-s.index:n.weight-s.weight}))}function Yn(t,e,i,n){return Math.max(t[i],e[i])+Math.max(t[n],e[n])}function $n(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function Xn(t,e,i,n){const{pos:s,box:o}=i,r=t.maxPadding;if(!bt(s)){i.size&&(t[s]-=i.size);const e=n[i.stack]||{size:0,count:1};e.size=Math.max(e.size,i.horizontal?o.height:o.width),i.size=e.size/e.count,t[s]+=i.size}o.getPadding&&$n(r,o.getPadding());const a=Math.max(0,e.outerWidth-Yn(r,t,"left","right")),l=Math.max(0,e.outerHeight-Yn(r,t,"top","bottom")),h=a!==t.w,c=l!==t.h;return t.w=a,t.h=l,i.horizontal?{same:h,other:c}:{same:c,other:h}}function Un(t,e){const i=e.maxPadding;return function(t){const n={left:0,top:0,right:0,bottom:0};return t.forEach((t=>{n[t]=Math.max(e[t],i[t])})),n}(t?["left","right"]:["top","bottom"])}function Zn(t,e,i,n){const s=[];let o,r,a,l,h,c;for(o=0,r=t.length,h=0;o<r;++o){a=t[o],l=a.box,l.update(a.width||e.w,a.height||e.h,Un(a.horizontal,e));const{same:r,other:d}=Xn(e,i,a,n);h|=r&&s.length,c=c||d,l.fullSize||s.push(a)}return h&&Zn(s,e,i,n)||c}function qn(t,e,i,n,s){t.top=i,t.left=e,t.right=e+n,t.bottom=i+s,t.width=n,t.height=s}function Gn(t,e,i,n){const s=i.padding;let{x:o,y:r}=e;for(const a of t){const t=a.box,l=n[a.stack]||{count:1,placed:0,weight:1},h=a.stackWeight/l.weight||1;if(a.horizontal){const n=e.w*h,o=l.size||t.height;Rt(l.start)&&(r=l.start),t.fullSize?qn(t,s.left,r,i.outerWidth-s.right-s.left,o):qn(t,e.left+l.placed,r,n,o),l.start=r,l.placed+=n,r=t.bottom}else{const n=e.h*h,r=l.size||t.width;Rt(l.start)&&(o=l.start),t.fullSize?qn(t,o,s.top,r,i.outerHeight-s.bottom-s.top):qn(t,o,e.top+l.placed,r,n),l.start=o,l.placed+=n,o=t.right}}e.x=o,e.y=r}var Kn={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const i=t.boxes?t.boxes.indexOf(e):-1;-1!==i&&t.boxes.splice(i,1)},configure(t,e,i){e.fullSize=i.fullSize,e.position=i.position,e.weight=i.weight},update(t,e,i,n){if(!t)return;const s=ai(t.options.layout.padding),o=Math.max(e-s.width,0),r=Math.max(i-s.height,0),a=function(t){const e=function(t){const e=[];let i,n,s,o,r,a;for(i=0,n=(t||[]).length;i<n;++i)s=t[i],({position:o,options:{stack:r,stackWeight:a=1}}=s),e.push({index:i,box:s,pos:o,horizontal:s.isHorizontal(),weight:s.weight,stack:r&&o+r,stackWeight:a});return e}(t),i=Hn(e.filter((t=>t.box.fullSize)),!0),n=Hn(Vn(e,"left"),!0),s=Hn(Vn(e,"right")),o=Hn(Vn(e,"top"),!0),r=Hn(Vn(e,"bottom")),a=Nn(e,"x"),l=Nn(e,"y");return{fullSize:i,leftAndTop:n.concat(o),rightAndBottom:s.concat(l).concat(r).concat(a),chartArea:Vn(e,"chartArea"),vertical:n.concat(s).concat(l),horizontal:o.concat(r).concat(a)}}(t.boxes),l=a.vertical,h=a.horizontal;Ct(t.boxes,(t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}));const c=l.reduce(((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1),0)||1,d=Object.freeze({outerWidth:e,outerHeight:i,padding:s,availableWidth:o,availableHeight:r,vBoxMaxWidth:o/2/c,hBoxMaxHeight:r/2}),u=Object.assign({},s);$n(u,ai(n));const f=Object.assign({maxPadding:u,w:o,h:r,x:s.left,y:s.top},s),p=function(t,e){const i=function(t){const e={};for(const i of t){const{stack:t,pos:n,stackWeight:s}=i;if(!t||!jn.includes(n))continue;const o=e[t]||(e[t]={count:0,placed:0,weight:0,size:0});o.count++,o.weight+=s}return e}(t),{vBoxMaxWidth:n,hBoxMaxHeight:s}=e;let o,r,a;for(o=0,r=t.length;o<r;++o){a=t[o];const{fullSize:r}=a.box,l=i[a.stack],h=l&&a.stackWeight/l.weight;a.horizontal?(a.width=h?h*n:r&&e.availableWidth,a.height=s):(a.width=n,a.height=h?h*s:r&&e.availableHeight)}return i}(l.concat(h),d);Zn(a.fullSize,f,d,p),Zn(l,f,d,p),Zn(h,f,d,p)&&Zn(l,f,d,p),function(t){const e=t.maxPadding;function i(i){const n=Math.max(e[i]-t[i],0);return t[i]+=n,n}t.y+=i("top"),t.x+=i("left"),i("right"),i("bottom")}(f),Gn(a.leftAndTop,f,d,p),f.x+=f.w,f.y+=f.h,Gn(a.rightAndBottom,f,d,p),t.chartArea={left:f.left,top:f.top,right:f.left+f.w,bottom:f.top+f.h,height:f.h,width:f.w},Ct(a.chartArea,(e=>{const i=e.box;Object.assign(i,t.chartArea),i.update(f.w,f.h,{left:0,top:0,right:0,bottom:0})}))}};class Jn{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,i){}removeEventListener(t,e,i){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,i,n){return e=Math.max(0,e||t.width),i=i||t.height,{width:e,height:Math.max(0,n?Math.floor(e/n):i)}}isAttached(t){return!0}updateConfig(t){}}class Qn extends Jn{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}}const ts="$chartjs",es={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},is=t=>null===t||""===t,ns=!!Vi&&{passive:!0};function ss(t,e,i){t.canvas.removeEventListener(e,i,ns)}function os(t,e){for(const i of t)if(i===e||i.contains(e))return!0}function rs(t,e,i){const n=t.canvas,s=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||os(i.addedNodes,n),e=e&&!os(i.removedNodes,n);e&&i()}));return s.observe(document,{childList:!0,subtree:!0}),s}function as(t,e,i){const n=t.canvas,s=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||os(i.removedNodes,n),e=e&&!os(i.addedNodes,n);e&&i()}));return s.observe(document,{childList:!0,subtree:!0}),s}const ls=new Map;let hs=0;function cs(){const t=window.devicePixelRatio;t!==hs&&(hs=t,ls.forEach(((e,i)=>{i.currentDevicePixelRatio!==t&&e()})))}function ds(t,e,i){const n=t.canvas,s=n&&Ti(n);if(!s)return;const o=ge(((t,e)=>{const n=s.clientWidth;i(t,e),n<s.clientWidth&&i()}),window),r=new ResizeObserver((t=>{const e=t[0],i=e.contentRect.width,n=e.contentRect.height;0===i&&0===n||o(i,n)}));return r.observe(s),function(t,e){ls.size||window.addEventListener("resize",cs),ls.set(t,e)}(t,o),r}function us(t,e,i){i&&i.disconnect(),"resize"===e&&function(t){ls.delete(t),ls.size||window.removeEventListener("resize",cs)}(t)}function fs(t,e,i){const n=t.canvas,s=ge((e=>{null!==t.ctx&&i(function(t,e){const i=es[t.type]||t.type,{x:n,y:s}=Wi(t,e);return{type:i,chart:e,native:t,x:void 0!==n?n:null,y:void 0!==s?s:null}}(e,t))}),t);return function(t,e,i){t.addEventListener(e,i,ns)}(n,e,s),s}class ps extends Jn{acquireContext(t,e){const i=t&&t.getContext&&t.getContext("2d");return i&&i.canvas===t?(function(t,e){const i=t.style,n=t.getAttribute("height"),s=t.getAttribute("width");if(t[ts]={initial:{height:n,width:s,style:{display:i.display,height:i.height,width:i.width}}},i.display=i.display||"block",i.boxSizing=i.boxSizing||"border-box",is(s)){const e=Ni(t,"width");void 0!==e&&(t.width=e)}if(is(n))if(""===t.style.height)t.height=t.width/(e||2);else{const e=Ni(t,"height");void 0!==e&&(t.height=e)}}(t,e),i):null}releaseContext(t){const e=t.canvas;if(!e[ts])return!1;const i=e[ts].initial;["height","width"].forEach((t=>{const n=i[t];mt(n)?e.removeAttribute(t):e.setAttribute(t,n)}));const n=i.style||{};return Object.keys(n).forEach((t=>{e.style[t]=n[t]})),e.width=e.width,delete e[ts],!0}addEventListener(t,e,i){this.removeEventListener(t,e);const n=t.$proxies||(t.$proxies={}),s={attach:rs,detach:as,resize:ds}[e]||fs;n[e]=s(t,e,i)}removeEventListener(t,e){const i=t.$proxies||(t.$proxies={}),n=i[e];n&&(({attach:us,detach:us,resize:us}[e]||ss)(t,e,n),i[e]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,i,n){return function(t,e,i,n){const s=Li(t),o=Ii(s,"margin"),r=Oi(s.maxWidth,t,"clientWidth")||Vt,a=Oi(s.maxHeight,t,"clientHeight")||Vt,l=function(t,e,i){let n,s;if(void 0===e||void 0===i){const o=Ti(t);if(o){const t=o.getBoundingClientRect(),r=Li(o),a=Ii(r,"border","width"),l=Ii(r,"padding");e=t.width-l.width-a.width,i=t.height-l.height-a.height,n=Oi(r.maxWidth,o,"clientWidth"),s=Oi(r.maxHeight,o,"clientHeight")}else e=t.clientWidth,i=t.clientHeight}return{width:e,height:i,maxWidth:n||Vt,maxHeight:s||Vt}}(t,e,i);let{width:h,height:c}=l;if("content-box"===s.boxSizing){const t=Ii(s,"border","width"),e=Ii(s,"padding");h-=e.width+t.width,c-=e.height+t.height}return h=Math.max(0,h-o.width),c=Math.max(0,n?h/n:c-o.height),h=Fi(Math.min(h,r,l.maxWidth)),c=Fi(Math.min(c,a,l.maxHeight)),h&&!c&&(c=Fi(h/2)),(void 0!==e||void 0!==i)&&n&&l.height&&c>l.height&&(c=l.height,h=Fi(Math.floor(c*n))),{width:h,height:c}}(t,e,i,n)}isAttached(t){const e=Ti(t);return!(!e||!e.isConnected)}}class gs{static defaults={};static defaultRoutes=void 0;x;y;active=!1;options;$animations;tooltipPosition(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}hasValue(){return Gt(this.x)&&Gt(this.y)}getProps(t,e){const i=this.$animations;if(!e||!i)return this;const n={};return t.forEach((t=>{n[t]=i[t]&&i[t].active()?i[t]._to:this[t]})),n}}function ms(t,e,i,n,s){const o=_t(n,0),r=Math.min(_t(s,t.length),t.length);let a,l,h,c=0;for(i=Math.ceil(i),s&&(a=s-n,i=a/Math.floor(a/i)),h=o;h<0;)c++,h=Math.round(o+c*i);for(l=Math.max(o,0);l<r;l++)l===h&&(e.push(t[l]),c++,h=Math.round(o+c*i))}const xs=(t,e,i)=>"top"===e||"left"===e?t[e]+i:t[e]-i,bs=(t,e)=>Math.min(e||t,t);function ys(t,e){const i=[],n=t.length/e,s=t.length;let o=0;for(;o<s;o+=n)i.push(t[Math.floor(o)]);return i}function vs(t,e,i){const n=t.ticks.length,s=Math.min(e,n-1),o=t._startPixel,r=t._endPixel,a=1e-6;let l,h=t.getPixelForTick(s);if(!(i&&(l=1===n?Math.max(h-o,r-h):0===e?(t.getPixelForTick(1)-h)/2:(h-t.getPixelForTick(s-1))/2,h+=s<e?l:-l,h<o-a||h>r+a)))return h}function _s(t){return t.drawTicks?t.tickLength:0}function As(t,e){if(!t.display)return 0;const i=li(t.font,e),n=ai(t.padding);return(xt(t.text)?t.text.length:1)*i.lineHeight+n.height}function ws(t,e,i){let n=me(t);return(i&&"right"!==e||!i&&"right"===e)&&(n=(t=>"left"===t?"right":"right"===t?"left":t)(n)),n}class Cs extends gs{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:i,_suggestedMax:n}=this;return t=vt(t,Number.POSITIVE_INFINITY),e=vt(e,Number.NEGATIVE_INFINITY),i=vt(i,Number.POSITIVE_INFINITY),n=vt(n,Number.NEGATIVE_INFINITY),{min:vt(t,i),max:vt(e,n),minDefined:yt(t),maxDefined:yt(e)}}getMinMax(t){let e,{min:i,max:n,minDefined:s,maxDefined:o}=this.getUserBounds();if(s&&o)return{min:i,max:n};const r=this.getMatchingVisibleMetas();for(let a=0,l=r.length;a<l;++a)e=r[a].controller.getMinMax(this,t),s||(i=Math.min(i,e.min)),o||(n=Math.max(n,e.max));return i=o&&i>n?n:i,n=s&&i>n?i:n,{min:vt(i,vt(n,i)),max:vt(n,vt(i,n))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}getLabelItems(t=this.chart.chartArea){return this._labelItems||(this._labelItems=this._computeLabelItems(t))}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){wt(this.options.beforeUpdate,[this])}update(t,e,i){const{beginAtZero:n,grace:s,ticks:o}=this.options,r=o.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this._margins=i=Object.assign({left:0,right:0,top:0,bottom:0},i),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+i.left+i.right:this.height+i.top+i.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=function(t,e,i){const{min:n,max:s}=t,o=At(e,(s-n)/2),r=(t,e)=>i&&0===t?0:t+e;return{min:r(n,-Math.abs(o)),max:r(s,o)}}(this,s,n),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const a=r<this.ticks.length;this._convertTicksToLabels(a?ys(this.ticks,r):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),o.display&&(o.autoSkip||"auto"===o.source)&&(this.ticks=function(t,e){const i=t.options.ticks,n=function(t){const e=t.options.offset,i=t._tickSize(),n=t._length/i+(e?0:1),s=t._maxLength/i;return Math.floor(Math.min(n,s))}(t),s=Math.min(i.maxTicksLimit||n,n),o=i.major.enabled?function(t){const e=[];let i,n;for(i=0,n=t.length;i<n;i++)t[i].major&&e.push(i);return e}(e):[],r=o.length,a=o[0],l=o[r-1],h=[];if(r>s)return function(t,e,i,n){let s,o=0,r=i[0];for(n=Math.ceil(n),s=0;s<t.length;s++)s===r&&(e.push(t[s]),o++,r=i[o*n])}(e,h,o,r/s),h;const c=function(t,e,i){const n=function(t){const e=t.length;let i,n;if(e<2)return!1;for(n=t[0],i=1;i<e;++i)if(t[i]-t[i-1]!==n)return!1;return n}(t),s=e.length/i;if(!n)return Math.max(s,1);const o=function(t){const e=[],i=Math.sqrt(t);let n;for(n=1;n<i;n++)t%n==0&&(e.push(n),e.push(t/n));return i===(0|i)&&e.push(i),e.sort(((t,e)=>t-e)).pop(),e}(n);for(let t=0,e=o.length-1;t<e;t++){const e=o[t];if(e>s)return e}return Math.max(s,1)}(o,e,s);if(r>0){let t,i;const n=r>1?Math.round((l-a)/(r-1)):null;for(ms(e,h,c,mt(n)?0:a-n,a),t=0,i=r-1;t<i;t++)ms(e,h,c,o[t],o[t+1]);return ms(e,h,c,l,mt(n)?e.length:l+n),h}return ms(e,h,c),h}(this,this.ticks),this._labelSizes=null,this.afterAutoSkip()),a&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t,e,i=this.options.reverse;this.isHorizontal()?(t=this.left,e=this.right):(t=this.top,e=this.bottom,i=!i),this._startPixel=t,this._endPixel=e,this._reversePixels=i,this._length=e-t,this._alignToPixels=this.options.alignToPixels}afterUpdate(){wt(this.options.afterUpdate,[this])}beforeSetDimensions(){wt(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){wt(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),wt(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){wt(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this.options.ticks;let i,n,s;for(i=0,n=t.length;i<n;i++)s=t[i],s.label=wt(e.callback,[s.value,i,t],this)}afterTickToLabelConversion(){wt(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){wt(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this.options,e=t.ticks,i=bs(this.ticks.length,t.ticks.maxTicksLimit),n=e.minRotation||0,s=e.maxRotation;let o,r,a,l=n;if(!this._isVisible()||!e.display||n>=s||i<=1||!this.isHorizontal())return void(this.labelRotation=n);const h=this._getLabelSizes(),c=h.widest.width,d=h.highest.height,u=re(this.chart.width-c,0,this.maxWidth);o=t.offset?this.maxWidth/i:u/(i-1),c+6>o&&(o=u/(i-(t.offset?.5:1)),r=this.maxHeight-_s(t.grid)-e.padding-As(t.title,this.chart.options.font),a=Math.sqrt(c*c+d*d),l=Qt(Math.min(Math.asin(re((h.highest.height+6)/o,-1,1)),Math.asin(re(r/a,-1,1))-Math.asin(re(d/a,-1,1)))),l=Math.max(n,Math.min(s,l))),this.labelRotation=l}afterCalculateLabelRotation(){wt(this.options.afterCalculateLabelRotation,[this])}afterAutoSkip(){}beforeFit(){wt(this.options.beforeFit,[this])}fit(){const t={width:0,height:0},{chart:e,options:{ticks:i,title:n,grid:s}}=this,o=this._isVisible(),r=this.isHorizontal();if(o){const o=As(n,e.options.font);if(r?(t.width=this.maxWidth,t.height=_s(s)+o):(t.height=this.maxHeight,t.width=_s(s)+o),i.display&&this.ticks.length){const{first:e,last:n,widest:s,highest:o}=this._getLabelSizes(),a=2*i.padding,l=Jt(this.labelRotation),h=Math.cos(l),c=Math.sin(l);if(r){const e=i.mirror?0:c*s.width+h*o.height;t.height=Math.min(this.maxHeight,t.height+e+a)}else{const e=i.mirror?0:h*s.width+c*o.height;t.width=Math.min(this.maxWidth,t.width+e+a)}this._calculatePadding(e,n,c,h)}}this._handleMargins(),r?(this.width=this._length=e.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=e.height-this._margins.top-this._margins.bottom)}_calculatePadding(t,e,i,n){const{ticks:{align:s,padding:o},position:r}=this.options,a=0!==this.labelRotation,l="top"!==r&&"x"===this.axis;if(this.isHorizontal()){const r=this.getPixelForTick(0)-this.left,h=this.right-this.getPixelForTick(this.ticks.length-1);let c=0,d=0;a?l?(c=n*t.width,d=i*e.height):(c=i*t.height,d=n*e.width):"start"===s?d=e.width:"end"===s?c=t.width:"inner"!==s&&(c=t.width/2,d=e.width/2),this.paddingLeft=Math.max((c-r+o)*this.width/(this.width-r),0),this.paddingRight=Math.max((d-h+o)*this.width/(this.width-h),0)}else{let i=e.height/2,n=t.height/2;"start"===s?(i=0,n=t.height):"end"===s&&(i=e.height,n=0),this.paddingTop=i+o,this.paddingBottom=n+o}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){wt(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){let e,i;for(this.beforeTickToLabelConversion(),this.generateTickLabels(t),e=0,i=t.length;e<i;e++)mt(t[e].label)&&(t.splice(e,1),i--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){let t=this._labelSizes;if(!t){const e=this.options.ticks.sampleSize;let i=this.ticks;e<i.length&&(i=ys(i,e)),this._labelSizes=t=this._computeLabelSizes(i,i.length,this.options.ticks.maxTicksLimit)}return t}_computeLabelSizes(t,e,i){const{ctx:n,_longestTextCache:s}=this,o=[],r=[],a=Math.floor(e/bs(e,i));let l,h,c,d,u,f,p,g,m,x,b,y=0,v=0;for(l=0;l<e;l+=a){if(d=t[l].label,u=this._resolveTickFontOptions(l),n.font=f=u.string,p=s[f]=s[f]||{data:{},gc:[]},g=u.lineHeight,m=x=0,mt(d)||xt(d)){if(xt(d))for(h=0,c=d.length;h<c;++h)b=d[h],mt(b)||xt(b)||(m=Fe(n,p.data,p.gc,m,b),x+=g)}else m=Fe(n,p.data,p.gc,m,d),x=g;o.push(m),r.push(x),y=Math.max(m,y),v=Math.max(x,v)}!function(t,e){Ct(t,(t=>{const i=t.gc,n=i.length/2;let s;if(n>e){for(s=0;s<n;++s)delete t.data[i[s]];i.splice(0,n)}}))}(s,e);const _=o.indexOf(y),A=r.indexOf(v),w=t=>({width:o[t]||0,height:r[t]||0});return{first:w(0),last:w(e-1),widest:w(_),highest:w(A),widths:o,heights:r}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);const e=this._startPixel+t*this._length;return re(this._alignToPixels?Ve(this.chart,e,0):e,-32768,32767)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this.ticks||[];if(t>=0&&t<e.length){const i=e[t];return i.$context||(i.$context=function(t,e,i){return ci(t,{tick:i,index:e,type:"tick"})}(this.getContext(),t,i))}return this.$context||(this.$context=ci(this.chart.getContext(),{scale:this,type:"scale"}))}_tickSize(){const t=this.options.ticks,e=Jt(this.labelRotation),i=Math.abs(Math.cos(e)),n=Math.abs(Math.sin(e)),s=this._getLabelSizes(),o=t.autoSkipPadding||0,r=s?s.widest.width+o:0,a=s?s.highest.height+o:0;return this.isHorizontal()?a*i>r*n?r/i:a/n:a*n<r*i?a/i:r/n}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this.axis,i=this.chart,n=this.options,{grid:s,position:o,border:r}=n,a=s.offset,l=this.isHorizontal(),h=this.ticks.length+(a?1:0),c=_s(s),d=[],u=r.setContext(this.getContext()),f=u.display?u.width:0,p=f/2,g=function(t){return Ve(i,t,f)};let m,x,b,y,v,_,A,w,C,M,k,E;if("top"===o)m=g(this.bottom),_=this.bottom-c,w=m-p,M=g(t.top)+p,E=t.bottom;else if("bottom"===o)m=g(this.top),M=t.top,E=g(t.bottom)-p,_=m+p,w=this.top+c;else if("left"===o)m=g(this.right),v=this.right-c,A=m-p,C=g(t.left)+p,k=t.right;else if("right"===o)m=g(this.left),C=t.left,k=g(t.right)-p,v=m+p,A=this.left+c;else if("x"===e){if("center"===o)m=g((t.top+t.bottom)/2+.5);else if(bt(o)){const t=Object.keys(o)[0],e=o[t];m=g(this.chart.scales[t].getPixelForValue(e))}M=t.top,E=t.bottom,_=m+p,w=_+c}else if("y"===e){if("center"===o)m=g((t.left+t.right)/2);else if(bt(o)){const t=Object.keys(o)[0],e=o[t];m=g(this.chart.scales[t].getPixelForValue(e))}v=m-p,A=v-c,C=t.left,k=t.right}const S=_t(n.ticks.maxTicksLimit,h),D=Math.max(1,Math.ceil(h/S));for(x=0;x<h;x+=D){const t=this.getContext(x),e=s.setContext(t),n=r.setContext(t),o=e.lineWidth,h=e.color,c=n.dash||[],u=n.dashOffset,f=e.tickWidth,p=e.tickColor,g=e.tickBorderDash||[],m=e.tickBorderDashOffset;b=vs(this,x,a),void 0!==b&&(y=Ve(i,b,o),l?v=A=C=k=y:_=w=M=E=y,d.push({tx1:v,ty1:_,tx2:A,ty2:w,x1:C,y1:M,x2:k,y2:E,width:o,color:h,borderDash:c,borderDashOffset:u,tickWidth:f,tickColor:p,tickBorderDash:g,tickBorderDashOffset:m}))}return this._ticksLength=h,this._borderValue=m,d}_computeLabelItems(t){const e=this.axis,i=this.options,{position:n,ticks:s}=i,o=this.isHorizontal(),r=this.ticks,{align:a,crossAlign:l,padding:h,mirror:c}=s,d=_s(i.grid),u=d+h,f=c?-h:u,p=-Jt(this.labelRotation),g=[];let m,x,b,y,v,_,A,w,C,M,k,E,S="middle";if("top"===n)_=this.bottom-f,A=this._getXAxisLabelAlignment();else if("bottom"===n)_=this.top+f,A=this._getXAxisLabelAlignment();else if("left"===n){const t=this._getYAxisLabelAlignment(d);A=t.textAlign,v=t.x}else if("right"===n){const t=this._getYAxisLabelAlignment(d);A=t.textAlign,v=t.x}else if("x"===e){if("center"===n)_=(t.top+t.bottom)/2+u;else if(bt(n)){const t=Object.keys(n)[0],e=n[t];_=this.chart.scales[t].getPixelForValue(e)+u}A=this._getXAxisLabelAlignment()}else if("y"===e){if("center"===n)v=(t.left+t.right)/2-u;else if(bt(n)){const t=Object.keys(n)[0],e=n[t];v=this.chart.scales[t].getPixelForValue(e)}A=this._getYAxisLabelAlignment(d).textAlign}"y"===e&&("start"===a?S="top":"end"===a&&(S="bottom"));const D=this._getLabelSizes();for(m=0,x=r.length;m<x;++m){b=r[m],y=b.label;const t=s.setContext(this.getContext(m));w=this.getPixelForTick(m)+s.labelOffset,C=this._resolveTickFontOptions(m),M=C.lineHeight,k=xt(y)?y.length:1;const e=k/2,i=t.color,a=t.textStrokeColor,h=t.textStrokeWidth;let d,u=A;if(o?(v=w,"inner"===A&&(u=m===x-1?this.options.reverse?"left":"right":0===m?this.options.reverse?"right":"left":"center"),E="top"===n?"near"===l||0!==p?-k*M+M/2:"center"===l?-D.highest.height/2-e*M+M:-D.highest.height+M/2:"near"===l||0!==p?M/2:"center"===l?D.highest.height/2-e*M:D.highest.height-k*M,c&&(E*=-1),0===p||t.showLabelBackdrop||(v+=M/2*Math.sin(p))):(_=w,E=(1-k)*M/2),t.showLabelBackdrop){const e=ai(t.backdropPadding),i=D.heights[m],n=D.widths[m];let s=E-e.top,o=0-e.left;switch(S){case"middle":s-=i/2;break;case"bottom":s-=i}switch(A){case"center":o-=n/2;break;case"right":o-=n}d={left:o,top:s,width:n+e.width,height:i+e.height,color:t.backdropColor}}g.push({label:y,font:C,textOffset:E,options:{rotation:p,color:i,strokeColor:a,strokeWidth:h,textAlign:u,textBaseline:S,translation:[v,_],backdrop:d}})}return g}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-Jt(this.labelRotation))return"top"===t?"left":"right";let i="center";return"start"===e.align?i="left":"end"===e.align?i="right":"inner"===e.align&&(i="inner"),i}_getYAxisLabelAlignment(t){const{position:e,ticks:{crossAlign:i,mirror:n,padding:s}}=this.options,o=t+s,r=this._getLabelSizes().widest.width;let a,l;return"left"===e?n?(l=this.right+s,"near"===i?a="left":"center"===i?(a="center",l+=r/2):(a="right",l+=r)):(l=this.right-o,"near"===i?a="right":"center"===i?(a="center",l-=r/2):(a="left",l=this.left)):"right"===e?n?(l=this.left+s,"near"===i?a="right":"center"===i?(a="center",l-=r/2):(a="left",l-=r)):(l=this.left+o,"near"===i?a="left":"center"===i?(a="center",l+=r/2):(a="right",l=this.right)):a="right",{textAlign:a,x:l}}_computeLabelArea(){if(this.options.ticks.mirror)return;const t=this.chart,e=this.options.position;return"left"===e||"right"===e?{top:0,left:this.left,bottom:t.height,right:this.right}:"top"===e||"bottom"===e?{top:this.top,left:0,bottom:this.bottom,right:t.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:i,top:n,width:s,height:o}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(i,n,s,o),t.restore())}getLineWidthForValue(t){const e=this.options.grid;if(!this._isVisible()||!e.display)return 0;const i=this.ticks.findIndex((e=>e.value===t));return i>=0?e.setContext(this.getContext(i)).lineWidth:0}drawGrid(t){const e=this.options.grid,i=this.ctx,n=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t));let s,o;const r=(t,e,n)=>{n.width&&n.color&&(i.save(),i.lineWidth=n.width,i.strokeStyle=n.color,i.setLineDash(n.borderDash||[]),i.lineDashOffset=n.borderDashOffset,i.beginPath(),i.moveTo(t.x,t.y),i.lineTo(e.x,e.y),i.stroke(),i.restore())};if(e.display)for(s=0,o=n.length;s<o;++s){const t=n[s];e.drawOnChartArea&&r({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),e.drawTicks&&r({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const{chart:t,ctx:e,options:{border:i,grid:n}}=this,s=i.setContext(this.getContext()),o=i.display?s.width:0;if(!o)return;const r=n.setContext(this.getContext(0)).lineWidth,a=this._borderValue;let l,h,c,d;this.isHorizontal()?(l=Ve(t,this.left,o)-o/2,h=Ve(t,this.right,r)+r/2,c=d=a):(c=Ve(t,this.top,o)-o/2,d=Ve(t,this.bottom,r)+r/2,l=h=a),e.save(),e.lineWidth=s.width,e.strokeStyle=s.color,e.beginPath(),e.moveTo(l,c),e.lineTo(h,d),e.stroke(),e.restore()}drawLabels(t){if(!this.options.ticks.display)return;const e=this.ctx,i=this._computeLabelArea();i&&Xe(e,i);const n=this.getLabelItems(t);for(const t of n){const i=t.options,n=t.font;Je(e,t.label,0,t.textOffset,n,i)}i&&Ue(e)}drawTitle(){const{ctx:t,options:{position:e,title:i,reverse:n}}=this;if(!i.display)return;const s=li(i.font),o=ai(i.padding),r=i.align;let a=s.lineHeight/2;"bottom"===e||"center"===e||bt(e)?(a+=o.bottom,xt(i.text)&&(a+=s.lineHeight*(i.text.length-1))):a+=o.top;const{titleX:l,titleY:h,maxWidth:c,rotation:d}=function(t,e,i,n){const{top:s,left:o,bottom:r,right:a,chart:l}=t,{chartArea:h,scales:c}=l;let d,u,f,p=0;const g=r-s,m=a-o;if(t.isHorizontal()){if(u=xe(n,o,a),bt(i)){const t=Object.keys(i)[0],n=i[t];f=c[t].getPixelForValue(n)+g-e}else f="center"===i?(h.bottom+h.top)/2+g-e:xs(t,i,e);d=a-o}else{if(bt(i)){const t=Object.keys(i)[0],n=i[t];u=c[t].getPixelForValue(n)-m+e}else u="center"===i?(h.left+h.right)/2-m+e:xs(t,i,e);f=xe(n,r,s),p="left"===i?-Ht:Ht}return{titleX:u,titleY:f,maxWidth:d,rotation:p}}(this,a,e,r);Je(t,i.text,0,0,s,{color:i.color,maxWidth:c,rotation:d,textAlign:ws(r,e,n),textBaseline:"middle",translation:[l,h]})}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){const t=this.options,e=t.ticks&&t.ticks.z||0,i=_t(t.grid&&t.grid.z,-1),n=_t(t.border&&t.border.z,0);return this._isVisible()&&this.draw===Cs.prototype.draw?[{z:i,draw:t=>{this.drawBackground(),this.drawGrid(t),this.drawTitle()}},{z:n,draw:()=>{this.drawBorder()}},{z:e,draw:t=>{this.drawLabels(t)}}]:[{z:e,draw:t=>{this.draw(t)}}]}getMatchingVisibleMetas(t){const e=this.chart.getSortedVisibleDatasetMetas(),i=this.axis+"AxisID",n=[];let s,o;for(s=0,o=e.length;s<o;++s){const o=e[s];o[i]!==this.id||t&&o.type!==t||n.push(o)}return n}_resolveTickFontOptions(t){return li(this.options.ticks.setContext(this.getContext(t)).font)}_maxDigits(){const t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}class Ms{constructor(t,e,i){this.type=t,this.scope=e,this.override=i,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=Object.getPrototypeOf(t);let i;(function(t){return"id"in t&&"defaults"in t})(e)&&(i=this.register(e));const n=this.items,s=t.id,o=this.scope+"."+s;if(!s)throw new Error("class does not have id: "+t);return s in n||(n[s]=t,function(t,e,i){const n=Dt(Object.create(null),[i?We.get(i):{},We.get(e),t.defaults]);We.set(e,n),t.defaultRoutes&&function(t,e){Object.keys(e).forEach((i=>{const n=i.split("."),s=n.pop(),o=[t].concat(n).join("."),r=e[i].split("."),a=r.pop(),l=r.join(".");We.route(o,s,l,a)}))}(e,t.defaultRoutes),t.descriptors&&We.describe(e,t.descriptors)}(t,o,i),this.override&&We.override(t.id,t.overrides)),o}get(t){return this.items[t]}unregister(t){const e=this.items,i=t.id,n=this.scope;i in e&&delete e[i],n&&i in We[n]&&(delete We[n][i],this.override&&delete Oe[i])}}class ks{constructor(){this.controllers=new Ms(yn,"datasets",!0),this.elements=new Ms(gs,"elements"),this.plugins=new Ms(Object,"plugins"),this.scales=new Ms(Cs,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,i){[...e].forEach((e=>{const n=i||this._getRegistryForType(e);i||n.isForType(e)||n===this.plugins&&e.id?this._exec(t,n,e):Ct(e,(e=>{const n=i||this._getRegistryForType(e);this._exec(t,n,e)}))}))}_exec(t,e,i){const n=Lt(t);wt(i["before"+n],[],i),e[t](i),wt(i["after"+n],[],i)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const i=this._typedRegistries[e];if(i.isForType(t))return i}return this.plugins}_get(t,e,i){const n=e.get(t);if(void 0===n)throw new Error('"'+t+'" is not a registered '+i+".");return n}}var Es=new ks;class Ss{constructor(){this._init=[]}notify(t,e,i,n){"beforeInit"===e&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));const s=n?this._descriptors(t).filter(n):this._descriptors(t),o=this._notify(s,t,e,i);return"afterDestroy"===e&&(this._notify(s,t,"stop"),this._notify(this._init,t,"uninstall")),o}_notify(t,e,i,n){n=n||{};for(const s of t){const t=s.plugin;if(!1===wt(t[i],[e,n,s.options],t)&&n.cancelable)return!1}return!0}invalidate(){mt(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const i=t&&t.config,n=_t(i.options&&i.options.plugins,{}),s=function(t){const e={},i=[],n=Object.keys(Es.plugins.items);for(let t=0;t<n.length;t++)i.push(Es.getPlugin(n[t]));const s=t.plugins||[];for(let t=0;t<s.length;t++){const n=s[t];-1===i.indexOf(n)&&(i.push(n),e[n.id]=!0)}return{plugins:i,localIds:e}}(i);return!1!==n||e?function(t,{plugins:e,localIds:i},n,s){const o=[],r=t.getContext();for(const a of e){const e=a.id,l=Ds(n[e],s);null!==l&&o.push({plugin:a,options:Ps(t.config,{plugin:a,local:i[e]},l,r)})}return o}(t,s,n,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],i=this._cache,n=(t,e)=>t.filter((t=>!e.some((e=>t.plugin.id===e.plugin.id))));this._notify(n(e,i),t,"stop"),this._notify(n(i,e),t,"start")}}function Ds(t,e){return e||!1!==t?!0===t?{}:t:null}function Ps(t,{plugin:e,local:i},n,s){const o=t.pluginScopeKeys(e),r=t.getOptionScopes(n,o);return i&&e.defaults&&r.push(e.defaults),t.createResolver(r,s,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function Bs(t,e){const i=We.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||i.indexAxis||"x"}function Ts(t){if("x"===t||"y"===t||"r"===t)return t}function Os(t,...e){if(Ts(t))return t;for(const n of e){const e=n.axis||("top"===(i=n.position)||"bottom"===i?"x":"left"===i||"right"===i?"y":void 0)||t.length>1&&Ts(t[0].toLowerCase());if(e)return e}var i;throw new Error(`Cannot determine type of '${t}' axis. Please provide 'axis' or 'position' option.`)}function Ls(t,e,i){if(i[e+"AxisID"]===t)return{axis:e}}function Rs(t){const e=t.options||(t.options={});e.plugins=_t(e.plugins,{}),e.scales=function(t,e){const i=Oe[t.type]||{scales:{}},n=e.scales||{},s=Bs(t.type,e),o=Object.create(null);return Object.keys(n).forEach((e=>{const r=n[e];if(!bt(r))return console.error(`Invalid scale configuration for scale: ${e}`);if(r._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${e}`);const a=Os(e,r,function(t,e){if(e.data&&e.data.datasets){const i=e.data.datasets.filter((e=>e.xAxisID===t||e.yAxisID===t));if(i.length)return Ls(t,"x",i[0])||Ls(t,"y",i[0])}return{}}(e,t),We.scales[r.type]),l=function(t,e){return t===e?"_index_":"_value_"}(a,s),h=i.scales||{};o[e]=Pt(Object.create(null),[{axis:a},r,h[a],h[l]])})),t.data.datasets.forEach((i=>{const s=i.type||t.type,r=i.indexAxis||Bs(s,e),a=(Oe[s]||{}).scales||{};Object.keys(a).forEach((t=>{const e=function(t,e){let i=t;return"_index_"===t?i=e:"_value_"===t&&(i="x"===e?"y":"x"),i}(t,r),s=i[e+"AxisID"]||e;o[s]=o[s]||Object.create(null),Pt(o[s],[{axis:e},n[s],a[t]])}))})),Object.keys(o).forEach((t=>{const e=o[t];Pt(e,[We.scales[e.type],We.scale])})),o}(t,e)}function Is(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const zs=new Map,Ws=new Set;function Fs(t,e){let i=zs.get(t);return i||(i=e(),zs.set(t,i),Ws.add(i)),i}const js=(t,e,i)=>{const n=Ot(e,i);void 0!==n&&t.add(n)};class Vs{constructor(t){this._config=function(t){return(t=t||{}).data=Is(t.data),Rs(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=Is(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),Rs(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return Fs(t,(()=>[[`datasets.${t}`,""]]))}datasetAnimationScopeKeys(t,e){return Fs(`${t}.transition.${e}`,(()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]]))}datasetElementScopeKeys(t,e){return Fs(`${t}-${e}`,(()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]]))}pluginScopeKeys(t){const e=t.id;return Fs(`${this.type}-plugin-${e}`,(()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]]))}_cachedScopes(t,e){const i=this._scopeCache;let n=i.get(t);return n&&!e||(n=new Map,i.set(t,n)),n}getOptionScopes(t,e,i){const{options:n,type:s}=this,o=this._cachedScopes(t,i),r=o.get(e);if(r)return r;const a=new Set;e.forEach((e=>{t&&(a.add(t),e.forEach((e=>js(a,t,e)))),e.forEach((t=>js(a,n,t))),e.forEach((t=>js(a,Oe[s]||{},t))),e.forEach((t=>js(a,We,t))),e.forEach((t=>js(a,Le,t)))}));const l=Array.from(a);return 0===l.length&&l.push(Object.create(null)),Ws.has(e)&&o.set(e,l),l}chartOptionScopes(){const{options:t,type:e}=this;return[t,Oe[e]||{},We.datasets[e]||{},{type:e},We,Le]}resolveNamedOptions(t,e,i,n=[""]){const s={$shared:!0},{resolver:o,subPrefixes:r}=Ns(this._resolverCache,t,n);let a=o;(function(t,e){const{isScriptable:i,isIndexable:n}=fi(t);for(const s of e){const e=i(s),o=n(s),r=(o||e)&&t[s];if(e&&(It(r)||Hs(r))||o&&xt(r))return!0}return!1})(o,e)&&(s.$shared=!1,a=ui(o,i=It(i)?i():i,this.createResolver(t,i,r)));for(const t of e)s[t]=a[t];return s}createResolver(t,e,i=[""],n){const{resolver:s}=Ns(this._resolverCache,t,i);return bt(e)?ui(s,e,void 0,n):s}}function Ns(t,e,i){let n=t.get(e);n||(n=new Map,t.set(e,n));const s=i.join();let o=n.get(s);return o||(o={resolver:di(e,i),subPrefixes:i.filter((t=>!t.toLowerCase().includes("hover")))},n.set(s,o)),o}const Hs=t=>bt(t)&&Object.getOwnPropertyNames(t).reduce(((e,i)=>e||It(t[i])),!1),Ys=["top","bottom","left","right","chartArea"];function $s(t,e){return"top"===t||"bottom"===t||-1===Ys.indexOf(t)&&"x"===e}function Xs(t,e){return function(i,n){return i[t]===n[t]?i[e]-n[e]:i[t]-n[t]}}function Us(t){const e=t.chart,i=e.options.animation;e.notifyPlugins("afterRender"),wt(i&&i.onComplete,[t],e)}function Zs(t){const e=t.chart,i=e.options.animation;wt(i&&i.onProgress,[t],e)}function qs(t){return Bi()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const Gs={},Ks=t=>{const e=qs(t);return Object.values(Gs).filter((t=>t.canvas===e)).pop()};function Js(t,e,i){const n=Object.keys(t);for(const s of n){const n=+s;if(n>=e){const o=t[s];delete t[s],(i>0||n>e)&&(t[n+i]=o)}}}class Qs{static defaults=We;static instances=Gs;static overrides=Oe;static registry=Es;static version="4.3.3";static getChart=Ks;static register(...t){Es.add(...t),to()}static unregister(...t){Es.remove(...t),to()}constructor(t,e){const i=this.config=new Vs(e),n=qs(t),s=Ks(n);if(s)throw new Error("Canvas is already in use. Chart with ID '"+s.id+"' must be destroyed before the canvas with ID '"+s.canvas.id+"' can be reused.");const o=i.createResolver(i.chartOptionScopes(),this.getContext());this.platform=new(i.platform||function(t){return!Bi()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?Qn:ps}(n)),this.platform.updateConfig(i);const r=this.platform.acquireContext(n,o.aspectRatio),a=r&&r.canvas,l=a&&a.height,h=a&&a.width;this.id=gt(),this.ctx=r,this.canvas=a,this.width=h,this.height=l,this._options=o,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new Ss,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=function(t,e){let i;return function(...n){return e?(clearTimeout(i),i=setTimeout(t,e,n)):t.apply(this,n),e}}((t=>this.update(t)),o.resizeDelay||0),this._dataChanges=[],Gs[this.id]=this,r&&a?(nn.listen(this,"complete",Us),nn.listen(this,"progress",Zs),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:i,height:n,_aspectRatio:s}=this;return mt(t)?e&&s?s:n?i/n:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}get registry(){return Es}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():ji(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return Ne(this.canvas,this.ctx),this}stop(){return nn.stop(this),this}resize(t,e){nn.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const i=this.options,n=this.canvas,s=i.maintainAspectRatio&&this.aspectRatio,o=this.platform.getMaximumSize(n,t,e,s),r=i.devicePixelRatio||this.platform.getDevicePixelRatio(),a=this.width?"resize":"attach";this.width=o.width,this.height=o.height,this._aspectRatio=this.aspectRatio,ji(this,r,!0)&&(this.notifyPlugins("resize",{size:o}),wt(i.onResize,[this,o],this),this.attached&&this._doResize(a)&&this.render())}ensureScalesHaveIDs(){Ct(this.options.scales||{},((t,e)=>{t.id=e}))}buildOrUpdateScales(){const t=this.options,e=t.scales,i=this.scales,n=Object.keys(i).reduce(((t,e)=>(t[e]=!1,t)),{});let s=[];e&&(s=s.concat(Object.keys(e).map((t=>{const i=e[t],n=Os(t,i),s="r"===n,o="x"===n;return{options:i,dposition:s?"chartArea":o?"bottom":"left",dtype:s?"radialLinear":o?"category":"linear"}})))),Ct(s,(e=>{const s=e.options,o=s.id,r=Os(o,s),a=_t(s.type,e.dtype);void 0!==s.position&&$s(s.position,r)===$s(e.dposition)||(s.position=e.dposition),n[o]=!0;let l=null;o in i&&i[o].type===a?l=i[o]:(l=new(Es.getScale(a))({id:o,type:a,ctx:this.ctx,chart:this}),i[l.id]=l),l.init(s,t)})),Ct(n,((t,e)=>{t||delete i[e]})),Ct(i,(t=>{Kn.configure(this,t,t.options),Kn.addBox(this,t)}))}_updateMetasets(){const t=this._metasets,e=this.data.datasets.length,i=t.length;if(t.sort(((t,e)=>t.index-e.index)),i>e){for(let t=e;t<i;++t)this._destroyDatasetMeta(t);t.splice(e,i-e)}this._sortedMetasets=t.slice(0).sort(Xs("order","index"))}_removeUnreferencedMetasets(){const{_metasets:t,data:{datasets:e}}=this;t.length>e.length&&delete this._stacks,t.forEach(((t,i)=>{0===e.filter((e=>e===t._dataset)).length&&this._destroyDatasetMeta(i)}))}buildOrUpdateControllers(){const t=[],e=this.data.datasets;let i,n;for(this._removeUnreferencedMetasets(),i=0,n=e.length;i<n;i++){const n=e[i];let s=this.getDatasetMeta(i);const o=n.type||this.config.type;if(s.type&&s.type!==o&&(this._destroyDatasetMeta(i),s=this.getDatasetMeta(i)),s.type=o,s.indexAxis=n.indexAxis||Bs(o,this.options),s.order=n.order||0,s.index=i,s.label=""+n.label,s.visible=this.isDatasetVisible(i),s.controller)s.controller.updateIndex(i),s.controller.linkScales();else{const e=Es.getController(o),{datasetElementType:n,dataElementType:r}=We.datasets[o];Object.assign(e,{dataElementType:Es.getElement(r),datasetElementType:n&&Es.getElement(n)}),s.controller=new e(this,i),t.push(s.controller)}}return this._updateMetasets(),t}_resetElements(){Ct(this.data.datasets,((t,e)=>{this.getDatasetMeta(e).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this.config;e.update();const i=this._options=e.createResolver(e.chartOptionScopes(),this.getContext()),n=this._animationsDisabled=!i.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const s=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let o=0;for(let t=0,e=this.data.datasets.length;t<e;t++){const{controller:e}=this.getDatasetMeta(t),i=!n&&-1===s.indexOf(e);e.buildOrUpdateElements(i),o=Math.max(+e.getMaxOverflow(),o)}o=this._minPadding=i.layout.autoPadding?o:0,this._updateLayout(o),n||Ct(s,(t=>{t.reset()})),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(Xs("z","_idx"));const{_active:r,_lastEvent:a}=this;a?this._eventHandler(a,!0):r.length&&this._updateHoverStyles(r,r,!0),this.render()}_updateScales(){Ct(this.scales,(t=>{Kn.removeBox(this,t)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const t=this.options,e=new Set(Object.keys(this._listeners)),i=new Set(t.events);zt(e,i)&&!!this._responsiveListeners===t.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:t}=this,e=this._getUniformDataChanges()||[];for(const{method:i,start:n,count:s}of e)Js(t,n,"_removeElements"===i?-s:s)}_getUniformDataChanges(){const t=this._dataChanges;if(!t||!t.length)return;this._dataChanges=[];const e=this.data.datasets.length,i=e=>new Set(t.filter((t=>t[0]===e)).map(((t,e)=>e+","+t.splice(1).join(",")))),n=i(0);for(let t=1;t<e;t++)if(!zt(n,i(t)))return;return Array.from(n).map((t=>t.split(","))).map((t=>({method:t[1],start:+t[2],count:+t[3]})))}_updateLayout(t){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;Kn.update(this,this.width,this.height,t);const e=this.chartArea,i=e.width<=0||e.height<=0;this._layers=[],Ct(this.boxes,(t=>{i&&"chartArea"===t.position||(t.configure&&t.configure(),this._layers.push(...t._layers()))}),this),this._layers.forEach(((t,e)=>{t._idx=e})),this.notifyPlugins("afterLayout")}_updateDatasets(t){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let t=0,e=this.data.datasets.length;t<e;++t)this.getDatasetMeta(t).controller.configure();for(let e=0,i=this.data.datasets.length;e<i;++e)this._updateDataset(e,It(t)?t({datasetIndex:e}):t);this.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const i=this.getDatasetMeta(t),n={meta:i,index:t,mode:e,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",n)&&(i.controller._update(e),n.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",n))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(nn.has(this)?this.attached&&!nn.running(this)&&nn.start(this):(this.draw(),Us({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){const{width:t,height:e}=this._resizeBeforeDraw;this._resize(t,e),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const e=this._layers;for(t=0;t<e.length&&e[t].z<=0;++t)e[t].draw(this.chartArea);for(this._drawDatasets();t<e.length;++t)e[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,i=[];let n,s;for(n=0,s=e.length;n<s;++n){const s=e[n];t&&!s.visible||i.push(s)}return i}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=this.getSortedVisibleDatasetMetas();for(let e=t.length-1;e>=0;--e)this._drawDataset(t[e]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this.ctx,i=t._clip,n=!i.disabled,s=function(t){const{xScale:e,yScale:i}=t;if(e&&i)return{left:e.left,right:e.right,top:i.top,bottom:i.bottom}}(t)||this.chartArea,o={meta:t,index:t.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",o)&&(n&&Xe(e,{left:!1===i.left?0:s.left-i.left,right:!1===i.right?this.width:s.right+i.right,top:!1===i.top?0:s.top-i.top,bottom:!1===i.bottom?this.height:s.bottom+i.bottom}),t.controller.draw(),n&&Ue(e),o.cancelable=!1,this.notifyPlugins("afterDatasetDraw",o))}isPointInArea(t){return $e(t,this.chartArea,this._minPadding)}getElementsAtEventForMode(t,e,i,n){const s=Fn.modes[e];return"function"==typeof s?s(this,t,i,n):[]}getDatasetMeta(t){const e=this.data.datasets[t],i=this._metasets;let n=i.filter((t=>t&&t._dataset===e)).pop();return n||(n={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},i.push(n)),n}getContext(){return this.$context||(this.$context=ci(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const i=this.getDatasetMeta(t);return"boolean"==typeof i.hidden?!i.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,e,i){const n=i?"show":"hide",s=this.getDatasetMeta(t),o=s.controller._resolveAnimations(void 0,n);Rt(e)?(s.data[e].hidden=!i,this.update()):(this.setDatasetVisibility(t,i),o.update(s,{visible:i}),this.update((e=>e.datasetIndex===t?n:void 0)))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){const e=this._metasets[t];e&&e.controller&&e.controller._destroy(),delete this._metasets[t]}_stop(){let t,e;for(this.stop(),nn.remove(this),t=0,e=this.data.datasets.length;t<e;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:t,ctx:e}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),Ne(t,e),this.platform.releaseContext(e),this.canvas=null,this.ctx=null),delete Gs[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this._listeners,e=this.platform,i=(i,n)=>{e.addEventListener(this,i,n),t[i]=n},n=(t,e,i)=>{t.offsetX=e,t.offsetY=i,this._eventHandler(t)};Ct(this.options.events,(t=>i(t,n)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const t=this._responsiveListeners,e=this.platform,i=(i,n)=>{e.addEventListener(this,i,n),t[i]=n},n=(i,n)=>{t[i]&&(e.removeEventListener(this,i,n),delete t[i])},s=(t,e)=>{this.canvas&&this.resize(t,e)};let o;const r=()=>{n("attach",r),this.attached=!0,this.resize(),i("resize",s),i("detach",o)};o=()=>{this.attached=!1,n("resize",s),this._stop(),this._resize(0,0),i("attach",r)},e.isAttached(this.canvas)?r():o()}unbindEvents(){Ct(this._listeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._listeners={},Ct(this._responsiveListeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._responsiveListeners=void 0}updateHoverStyle(t,e,i){const n=i?"set":"remove";let s,o,r,a;for("dataset"===e&&(s=this.getDatasetMeta(t[0].datasetIndex),s.controller["_"+n+"DatasetHoverStyle"]()),r=0,a=t.length;r<a;++r){o=t[r];const e=o&&this.getDatasetMeta(o.datasetIndex).controller;e&&e[n+"HoverStyle"](o.element,o.datasetIndex,o.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this._active||[],i=t.map((({datasetIndex:t,index:e})=>{const i=this.getDatasetMeta(t);if(!i)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:i.data[e],index:e}}));!Mt(i,e)&&(this._active=i,this._lastEvent=null,this._updateHoverStyles(i,e))}notifyPlugins(t,e,i){return this._plugins.notify(this,t,e,i)}isPluginEnabled(t){return 1===this._plugins._cache.filter((e=>e.plugin.id===t)).length}_updateHoverStyles(t,e,i){const n=this.options.hover,s=(t,e)=>t.filter((t=>!e.some((e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)))),o=s(e,t),r=i?t:s(t,e);o.length&&this.updateHoverStyle(o,n.mode,!1),r.length&&n.mode&&this.updateHoverStyle(r,n.mode,!0)}_eventHandler(t,e){const i={event:t,replay:e,cancelable:!0,inChartArea:this.isPointInArea(t)},n=e=>(e.options.events||this.options.events).includes(t.native.type);if(!1===this.notifyPlugins("beforeEvent",i,n))return;const s=this._handleEvent(t,e,i.inChartArea);return i.cancelable=!1,this.notifyPlugins("afterEvent",i,n),(s||i.changed)&&this.render(),this}_handleEvent(t,e,i){const{_active:n=[],options:s}=this,o=e,r=this._getActiveElements(t,n,i,o),a=function(t){return"mouseup"===t.type||"click"===t.type||"contextmenu"===t.type}(t),l=function(t,e,i,n){return i&&"mouseout"!==t.type?n?e:t:null}(t,this._lastEvent,i,a);i&&(this._lastEvent=null,wt(s.onHover,[t,r,this],this),a&&wt(s.onClick,[t,r,this],this));const h=!Mt(r,n);return(h||e)&&(this._active=r,this._updateHoverStyles(r,n,e)),this._lastEvent=l,h}_getActiveElements(t,e,i,n){if("mouseout"===t.type)return[];if(!i)return e;const s=this.options.hover;return this.getElementsAtEventForMode(t,s.mode,s,n)}}function to(){return Ct(Qs.instances,(t=>t._plugins.invalidate()))}function eo(t,e,i,n){return{x:i+t*Math.cos(e),y:n+t*Math.sin(e)}}function io(t,e,i,n,s,o){const{x:r,y:a,startAngle:l,pixelMargin:h,innerRadius:c}=e,d=Math.max(e.outerRadius+n+i-h,0),u=c>0?c+n+i+h:0;let f=0;const p=s-l;if(n){const t=((c>0?c-n:0)+(d>0?d-n:0))/2;f=(p-(0!==t?p*t/(t+n):p))/2}const g=(p-Math.max(.001,p*d-i/Wt)/d)/2,m=l+g+f,x=s-g-f,{outerStart:b,outerEnd:y,innerStart:v,innerEnd:_}=function(t,e,i,n){const s=si(t.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]),o=(i-e)/2,r=Math.min(o,n*e/2),a=t=>{const e=(i-Math.min(o,t))*n/2;return re(t,0,Math.min(o,e))};return{outerStart:a(s.outerStart),outerEnd:a(s.outerEnd),innerStart:re(s.innerStart,0,r),innerEnd:re(s.innerEnd,0,r)}}(e,u,d,x-m),A=d-b,w=d-y,C=m+b/A,M=x-y/w,k=u+v,E=u+_,S=m+v/k,D=x-_/E;if(t.beginPath(),o){const e=(C+M)/2;if(t.arc(r,a,d,C,e),t.arc(r,a,d,e,M),y>0){const e=eo(w,M,r,a);t.arc(e.x,e.y,y,M,x+Ht)}const i=eo(E,x,r,a);if(t.lineTo(i.x,i.y),_>0){const e=eo(E,D,r,a);t.arc(e.x,e.y,_,x+Ht,D+Math.PI)}const n=(x-_/u+(m+v/u))/2;if(t.arc(r,a,u,x-_/u,n,!0),t.arc(r,a,u,n,m+v/u,!0),v>0){const e=eo(k,S,r,a);t.arc(e.x,e.y,v,S+Math.PI,m-Ht)}const s=eo(A,m,r,a);if(t.lineTo(s.x,s.y),b>0){const e=eo(A,C,r,a);t.arc(e.x,e.y,b,m-Ht,C)}}else{t.moveTo(r,a);const e=Math.cos(C)*d+r,i=Math.sin(C)*d+a;t.lineTo(e,i);const n=Math.cos(M)*d+r,s=Math.sin(M)*d+a;t.lineTo(n,s)}t.closePath()}function no(t,e,i=e){t.lineCap=_t(i.borderCapStyle,e.borderCapStyle),t.setLineDash(_t(i.borderDash,e.borderDash)),t.lineDashOffset=_t(i.borderDashOffset,e.borderDashOffset),t.lineJoin=_t(i.borderJoinStyle,e.borderJoinStyle),t.lineWidth=_t(i.borderWidth,e.borderWidth),t.strokeStyle=_t(i.borderColor,e.borderColor)}function so(t,e,i){t.lineTo(i.x,i.y)}function oo(t,e,i={}){const n=t.length,{start:s=0,end:o=n-1}=i,{start:r,end:a}=e,l=Math.max(s,r),h=Math.min(o,a),c=s<r&&o<r||s>a&&o>a;return{count:n,start:l,loop:e.loop,ilen:h<l&&!c?n+h-l:h-l}}function ro(t,e,i,n){const{points:s,options:o}=e,{count:r,start:a,loop:l,ilen:h}=oo(s,i,n),c=function(t){return t.stepped?Ze:t.tension||"monotone"===t.cubicInterpolationMode?qe:so}(o);let d,u,f,{move:p=!0,reverse:g}=n||{};for(d=0;d<=h;++d)u=s[(a+(g?h-d:d))%r],u.skip||(p?(t.moveTo(u.x,u.y),p=!1):c(t,f,u,g,o.stepped),f=u);return l&&(u=s[(a+(g?h:0))%r],c(t,f,u,g,o.stepped)),!!l}function ao(t,e,i,n){const s=e.points,{count:o,start:r,ilen:a}=oo(s,i,n),{move:l=!0,reverse:h}=n||{};let c,d,u,f,p,g,m=0,x=0;const b=t=>(r+(h?a-t:t))%o,y=()=>{f!==p&&(t.lineTo(m,p),t.lineTo(m,f),t.lineTo(m,g))};for(l&&(d=s[b(0)],t.moveTo(d.x,d.y)),c=0;c<=a;++c){if(d=s[b(c)],d.skip)continue;const e=d.x,i=d.y,n=0|e;n===u?(i<f?f=i:i>p&&(p=i),m=(x*m+e)/++x):(y(),t.lineTo(e,i),u=n,x=0,f=p=i),g=i}y()}function lo(t){const e=t.options,i=e.borderDash&&e.borderDash.length;return t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||i?ro:ao}const ho="function"==typeof Path2D;class co extends gs{static id="line";static defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};static descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){const i=this.options;if((i.tension||"monotone"===i.cubicInterpolationMode)&&!i.stepped&&!this._pointsUpdated){const n=i.spanGaps?this._loop:this._fullLoop;Pi(this._points,i,t,n,e),this._pointsUpdated=!0}}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=function(t,e){const i=t.points,n=t.options.spanGaps,s=i.length;if(!s)return[];const o=!!t._loop,{start:r,end:a}=function(t,e,i,n){let s=0,o=e-1;if(i&&!n)for(;s<e&&!t[s].skip;)s++;for(;s<e&&t[s].skip;)s++;for(s%=e,i&&(o+=s);o>s&&t[o%e].skip;)o--;return o%=e,{start:s,end:o}}(i,s,o,n);return function(t,e,i,n){return n&&n.setContext&&i?function(t,e,i,n){const s=t._chart.getContext(),o=Qi(t.options),{_datasetIndex:r,options:{spanGaps:a}}=t,l=i.length,h=[];let c=o,d=e[0].start,u=d;function f(t,e,n,s){const o=a?-1:1;if(t!==e){for(t+=l;i[t%l].skip;)t-=o;for(;i[e%l].skip;)e+=o;t%l!=e%l&&(h.push({start:t%l,end:e%l,loop:n,style:s}),c=s,d=e%l)}}for(const t of e){d=a?d:t.start;let e,o=i[d%l];for(u=d+1;u<=t.end;u++){const a=i[u%l];e=Qi(n.setContext(ci(s,{type:"segment",p0:o,p1:a,p0DataIndex:(u-1)%l,p1DataIndex:u%l,datasetIndex:r}))),tn(e,c)&&f(d,u-1,t.loop,c),o=a,c=e}d<u-1&&f(d,u-1,t.loop,c)}return h}(t,e,i,n):e}(t,!0===n?[{start:r,end:a,loop:o}]:function(t,e,i,n){const s=t.length,o=[];let r,a=e,l=t[e];for(r=e+1;r<=i;++r){const i=t[r%s];i.skip||i.stop?l.skip||(n=!1,o.push({start:e%s,end:(r-1)%s,loop:n}),e=a=i.stop?r:null):(a=r,l.skip&&(e=r)),l=i}return null!==a&&o.push({start:e%s,end:a%s,loop:n}),o}(i,r,a<r?a+s:a,!!t._fullLoop&&0===r&&a===s-1),i,e)}(this,this.options.segment))}first(){const t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){const t=this.segments,e=this.points,i=t.length;return i&&e[t[i-1].end]}interpolate(t,e){const i=this.options,n=t[e],s=this.points,o=Ji(this,{property:e,start:n,end:n});if(!o.length)return;const r=[],a=function(t){return t.stepped?Yi:t.tension||"monotone"===t.cubicInterpolationMode?$i:Hi}(i);let l,h;for(l=0,h=o.length;l<h;++l){const{start:h,end:c}=o[l],d=s[h],u=s[c];if(d===u){r.push(d);continue}const f=a(d,u,Math.abs((n-d[e])/(u[e]-d[e])),i.stepped);f[e]=t[e],r.push(f)}return 1===r.length?r[0]:r}pathSegment(t,e,i){return lo(this)(t,this,e,i)}path(t,e,i){const n=this.segments,s=lo(this);let o=this._loop;e=e||0,i=i||this.points.length-e;for(const r of n)o&=s(t,this,r,{start:e,end:e+i-1});return!!o}draw(t,e,i,n){const s=this.options||{};(this.points||[]).length&&s.borderWidth&&(t.save(),function(t,e,i,n){ho&&!e.options.segment?function(t,e,i,n){let s=e._path;s||(s=e._path=new Path2D,e.path(s,i,n)&&s.closePath()),no(t,e.options),t.stroke(s)}(t,e,i,n):function(t,e,i,n){const{segments:s,options:o}=e,r=lo(e);for(const a of s)no(t,o,a.style),t.beginPath(),r(t,e,a,{start:i,end:i+n-1})&&t.closePath(),t.stroke()}(t,e,i,n)}(t,this,i,n),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function uo(t,e,i,n){const s=t.options,{[i]:o}=t.getProps([i],n);return Math.abs(e-o)<s.radius+s.hitRadius}function fo(t,e){const{x:i,y:n,base:s,width:o,height:r}=t.getProps(["x","y","base","width","height"],e);let a,l,h,c,d;return t.horizontal?(d=r/2,a=Math.min(i,s),l=Math.max(i,s),h=n-d,c=n+d):(d=o/2,a=i-d,l=i+d,h=Math.min(n,s),c=Math.max(n,s)),{left:a,top:h,right:l,bottom:c}}function po(t,e,i,n){return t?0:re(e,i,n)}function go(t,e,i,n){const s=null===e,o=null===i,r=t&&!(s&&o)&&fo(t,n);return r&&(s||ae(e,r.left,r.right))&&(o||ae(i,r.top,r.bottom))}function mo(t,e){t.rect(e.x,e.y,e.w,e.h)}function xo(t,e,i={}){const n=t.x!==i.x?-e:0,s=t.y!==i.y?-e:0,o=(t.x+t.w!==i.x+i.w?e:0)-n,r=(t.y+t.h!==i.y+i.h?e:0)-s;return{x:t.x+n,y:t.y+s,w:t.w+o,h:t.h+r,radius:t.radius}}var bo=Object.freeze({__proto__:null,ArcElement:class extends gs{static id="arc";static defaults={borderAlign:"center",borderColor:"#fff",borderDash:[],borderDashOffset:0,borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0,circular:!0};static defaultRoutes={backgroundColor:"backgroundColor"};static descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t};circumference;endAngle;fullCircles;innerRadius;outerRadius;pixelMargin;startAngle;constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,i){const n=this.getProps(["x","y"],i),{angle:s,distance:o}=ee(n,{x:t,y:e}),{startAngle:r,endAngle:a,innerRadius:l,outerRadius:h,circumference:c}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],i),d=(this.options.spacing+this.options.borderWidth)/2,u=_t(c,a-r)>=Ft||oe(s,r,a),f=ae(o,l+d,h+d);return u&&f}getCenterPoint(t){const{x:e,y:i,startAngle:n,endAngle:s,innerRadius:o,outerRadius:r}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius"],t),{offset:a,spacing:l}=this.options,h=(n+s)/2,c=(o+r+l+a)/2;return{x:e+Math.cos(h)*c,y:i+Math.sin(h)*c}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const{options:e,circumference:i}=this,n=(e.offset||0)/4,s=(e.spacing||0)/2,o=e.circular;if(this.pixelMargin="inner"===e.borderAlign?.33:0,this.fullCircles=i>Ft?Math.floor(i/Ft):0,0===i||this.innerRadius<0||this.outerRadius<0)return;t.save();const r=(this.startAngle+this.endAngle)/2;t.translate(Math.cos(r)*n,Math.sin(r)*n);const a=n*(1-Math.sin(Math.min(Wt,i||0)));t.fillStyle=e.backgroundColor,t.strokeStyle=e.borderColor,function(t,e,i,n,s){const{fullCircles:o,startAngle:r,circumference:a}=e;let l=e.endAngle;if(o){io(t,e,i,n,l,s);for(let e=0;e<o;++e)t.fill();isNaN(a)||(l=r+(a%Ft||Ft))}io(t,e,i,n,l,s),t.fill()}(t,this,a,s,o),function(t,e,i,n,s){const{fullCircles:o,startAngle:r,circumference:a,options:l}=e,{borderWidth:h,borderJoinStyle:c,borderDash:d,borderDashOffset:u}=l,f="inner"===l.borderAlign;if(!h)return;t.setLineDash(d||[]),t.lineDashOffset=u,f?(t.lineWidth=2*h,t.lineJoin=c||"round"):(t.lineWidth=h,t.lineJoin=c||"bevel");let p=e.endAngle;if(o){io(t,e,i,n,p,s);for(let e=0;e<o;++e)t.stroke();isNaN(a)||(p=r+(a%Ft||Ft))}f&&function(t,e,i){const{startAngle:n,pixelMargin:s,x:o,y:r,outerRadius:a,innerRadius:l}=e;let h=s/a;t.beginPath(),t.arc(o,r,a,n-h,i+h),l>s?(h=s/l,t.arc(o,r,l,i+h,n-h,!0)):t.arc(o,r,s,i+Ht,n-Ht),t.closePath(),t.clip()}(t,e,p),o||(io(t,e,i,n,p,s),t.stroke())}(t,this,a,s,o),t.restore()}},BarElement:class extends gs{static id="bar";static defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){const{inflateAmount:e,options:{borderColor:i,backgroundColor:n}}=this,{inner:s,outer:o}=function(t){const e=fo(t),i=e.right-e.left,n=e.bottom-e.top,s=function(t,e,i){const n=t.options.borderWidth,s=t.borderSkipped,o=oi(n);return{t:po(s.top,o.top,0,i),r:po(s.right,o.right,0,e),b:po(s.bottom,o.bottom,0,i),l:po(s.left,o.left,0,e)}}(t,i/2,n/2),o=function(t,e,i){const{enableBorderRadius:n}=t.getProps(["enableBorderRadius"]),s=t.options.borderRadius,o=ri(s),r=Math.min(e,i),a=t.borderSkipped,l=n||bt(s);return{topLeft:po(!l||a.top||a.left,o.topLeft,0,r),topRight:po(!l||a.top||a.right,o.topRight,0,r),bottomLeft:po(!l||a.bottom||a.left,o.bottomLeft,0,r),bottomRight:po(!l||a.bottom||a.right,o.bottomRight,0,r)}}(t,i/2,n/2);return{outer:{x:e.left,y:e.top,w:i,h:n,radius:o},inner:{x:e.left+s.l,y:e.top+s.t,w:i-s.l-s.r,h:n-s.t-s.b,radius:{topLeft:Math.max(0,o.topLeft-Math.max(s.t,s.l)),topRight:Math.max(0,o.topRight-Math.max(s.t,s.r)),bottomLeft:Math.max(0,o.bottomLeft-Math.max(s.b,s.l)),bottomRight:Math.max(0,o.bottomRight-Math.max(s.b,s.r))}}}}(this),r=(a=o.radius).topLeft||a.topRight||a.bottomLeft||a.bottomRight?Qe:mo;var a;t.save(),o.w===s.w&&o.h===s.h||(t.beginPath(),r(t,xo(o,e,s)),t.clip(),r(t,xo(s,-e,o)),t.fillStyle=i,t.fill("evenodd")),t.beginPath(),r(t,xo(s,e)),t.fillStyle=n,t.fill(),t.restore()}inRange(t,e,i){return go(this,t,e,i)}inXRange(t,e){return go(this,t,null,e)}inYRange(t,e){return go(this,null,t,e)}getCenterPoint(t){const{x:e,y:i,base:n,horizontal:s}=this.getProps(["x","y","base","horizontal"],t);return{x:s?(e+n)/2:e,y:s?i:(i+n)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}},LineElement:co,PointElement:class extends gs{static id="point";parsed;skip;stop;static defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,i){const n=this.options,{x:s,y:o}=this.getProps(["x","y"],i);return Math.pow(t-s,2)+Math.pow(e-o,2)<Math.pow(n.hitRadius+n.radius,2)}inXRange(t,e){return uo(this,t,"x",e)}inYRange(t,e){return uo(this,t,"y",e)}getCenterPoint(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}size(t){let e=(t=t||this.options||{}).radius||0;return e=Math.max(e,e&&t.hoverRadius||0),2*(e+(e&&t.borderWidth||0))}draw(t,e){const i=this.options;this.skip||i.radius<.1||!$e(this,e,this.size(i)/2)||(t.strokeStyle=i.borderColor,t.lineWidth=i.borderWidth,t.fillStyle=i.backgroundColor,He(t,i,this.x,this.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}}});const yo=["rgb(54, 162, 235)","rgb(255, 99, 132)","rgb(255, 159, 64)","rgb(255, 205, 86)","rgb(75, 192, 192)","rgb(153, 102, 255)","rgb(201, 203, 207)"],vo=yo.map((t=>t.replace("rgb(","rgba(").replace(")",", 0.5)")));function _o(t){return yo[t%yo.length]}function Ao(t){return vo[t%vo.length]}function wo(t){let e;for(e in t)if(t[e].borderColor||t[e].backgroundColor)return!0;return!1}var Co={id:"colors",defaults:{enabled:!0,forceOverride:!1},beforeLayout(t,e,i){if(!i.enabled)return;const{data:{datasets:n},options:s}=t.config,{elements:o}=s;if(!i.forceOverride&&(wo(n)||(r=s)&&(r.borderColor||r.backgroundColor)||o&&wo(o)))return;var r;const a=function(t){let e=0;return(i,n)=>{const s=t.getDatasetMeta(n).controller;s instanceof Sn?e=function(t,e){return t.backgroundColor=t.data.map((()=>_o(e++))),e}(i,e):s instanceof Dn?e=function(t,e){return t.backgroundColor=t.data.map((()=>Ao(e++))),e}(i,e):s&&(e=function(t,e){return t.borderColor=_o(e),t.backgroundColor=Ao(e),++e}(i,e))}}(t);n.forEach(a)}};function Mo(t){if(t._decimated){const e=t._data;delete t._decimated,delete t._data,Object.defineProperty(t,"data",{configurable:!0,enumerable:!0,writable:!0,value:e})}}function ko(t){t.data.datasets.forEach((t=>{Mo(t)}))}var Eo={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(t,e,i)=>{if(!i.enabled)return void ko(t);const n=t.width;t.data.datasets.forEach(((e,s)=>{const{_data:o,indexAxis:r}=e,a=t.getDatasetMeta(s),l=o||e.data;if("y"===hi([r,t.options.indexAxis]))return;if(!a.controller.supportsDecimation)return;const h=t.scales[a.xAxisID];if("linear"!==h.type&&"time"!==h.type)return;if(t.options.parsing)return;let c,{start:d,count:u}=function(t,e){const i=e.length;let n,s=0;const{iScale:o}=t,{min:r,max:a,minDefined:l,maxDefined:h}=o.getUserBounds();return l&&(s=re(he(e,o.axis,r).lo,0,i-1)),n=h?re(he(e,o.axis,a).hi+1,s,i)-s:i-s,{start:s,count:n}}(a,l);if(u<=(i.threshold||4*n))Mo(e);else{switch(mt(o)&&(e._data=l,delete e.data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(t){this._data=t}})),i.algorithm){case"lttb":c=function(t,e,i,n,s){const o=s.samples||n;if(o>=i)return t.slice(e,e+i);const r=[],a=(i-2)/(o-2);let l=0;const h=e+i-1;let c,d,u,f,p,g=e;for(r[l++]=t[g],c=0;c<o-2;c++){let n,s=0,o=0;const h=Math.floor((c+1)*a)+1+e,m=Math.min(Math.floor((c+2)*a)+1,i)+e,x=m-h;for(n=h;n<m;n++)s+=t[n].x,o+=t[n].y;s/=x,o/=x;const b=Math.floor(c*a)+1+e,y=Math.min(Math.floor((c+1)*a)+1,i)+e,{x:v,y:_}=t[g];for(u=f=-1,n=b;n<y;n++)f=.5*Math.abs((v-s)*(t[n].y-_)-(v-t[n].x)*(o-_)),f>u&&(u=f,d=t[n],p=n);r[l++]=d,g=p}return r[l++]=t[h],r}(l,d,u,n,i);break;case"min-max":c=function(t,e,i,n){let s,o,r,a,l,h,c,d,u,f,p=0,g=0;const m=[],x=e+i-1,b=t[e].x,y=t[x].x-b;for(s=e;s<e+i;++s){o=t[s],r=(o.x-b)/y*n,a=o.y;const e=0|r;if(e===l)a<u?(u=a,h=s):a>f&&(f=a,c=s),p=(g*p+o.x)/++g;else{const i=s-1;if(!mt(h)&&!mt(c)){const e=Math.min(h,c),n=Math.max(h,c);e!==d&&e!==i&&m.push({...t[e],x:p}),n!==d&&n!==i&&m.push({...t[n],x:p})}s>0&&i!==d&&m.push(t[i]),m.push(o),l=e,g=0,u=f=a,h=c=d=s}}return m}(l,d,u,n);break;default:throw new Error(`Unsupported decimation algorithm '${i.algorithm}'`)}e._decimated=c}}))},destroy(t){ko(t)}};function So(t,e,i,n){if(n)return;let s=e[t],o=i[t];return"angle"===t&&(s=se(s),o=se(o)),{property:t,start:s,end:o}}function Do(t,e,i){for(;e>t;e--){const t=i[e];if(!isNaN(t.x)&&!isNaN(t.y))break}return e}function Po(t,e,i,n){return t&&e?n(t[i],e[i]):t?t[i]:e?e[i]:0}function Bo(t,e){let i=[],n=!1;return xt(t)?(n=!0,i=t):i=function(t,e){const{x:i=null,y:n=null}=t||{},s=e.points,o=[];return e.segments.forEach((({start:t,end:e})=>{e=Do(t,e,s);const r=s[t],a=s[e];null!==n?(o.push({x:r.x,y:n}),o.push({x:a.x,y:n})):null!==i&&(o.push({x:i,y:r.y}),o.push({x:i,y:a.y}))})),o}(t,e),i.length?new co({points:i,options:{tension:0},_loop:n,_fullLoop:n}):null}function To(t){return t&&!1!==t.fill}function Oo(t,e,i){let n=t[e].fill;const s=[e];let o;if(!i)return n;for(;!1!==n&&-1===s.indexOf(n);){if(!yt(n))return n;if(o=t[n],!o)return!1;if(o.visible)return n;s.push(n),n=o.fill}return!1}function Lo(t,e,i){const n=function(t){const e=t.options,i=e.fill;let n=_t(i&&i.target,i);return void 0===n&&(n=!!e.backgroundColor),!1!==n&&null!==n&&(!0===n?"origin":n)}(t);if(bt(n))return!isNaN(n.value)&&n;let s=parseFloat(n);return yt(s)&&Math.floor(s)===s?function(t,e,i,n){return"-"!==t&&"+"!==t||(i=e+i),!(i===e||i<0||i>=n)&&i}(n[0],e,s,i):["origin","start","end","stack","shape"].indexOf(n)>=0&&n}function Ro(t,e,i){const n=[];for(let s=0;s<i.length;s++){const o=i[s],{first:r,last:a,point:l}=Io(o,e,"x");if(!(!l||r&&a))if(r)n.unshift(l);else if(t.push(l),!a)break}t.push(...n)}function Io(t,e,i){const n=t.interpolate(e,i);if(!n)return{};const s=n[i],o=t.segments,r=t.points;let a=!1,l=!1;for(let t=0;t<o.length;t++){const e=o[t],n=r[e.start][i],h=r[e.end][i];if(ae(s,n,h)){a=s===n,l=s===h;break}}return{first:a,last:l,point:n}}class zo{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,e,i){const{x:n,y:s,radius:o}=this;return e=e||{start:0,end:Ft},t.arc(n,s,o,e.end,e.start,!0),!i.bounds}interpolate(t){const{x:e,y:i,radius:n}=this,s=t.angle;return{x:e+Math.cos(s)*n,y:i+Math.sin(s)*n,angle:s}}}function Wo(t,e,i){const n=function(t){const{chart:e,fill:i,line:n}=t;if(yt(i))return function(t,e){const i=t.getDatasetMeta(e);return i&&t.isDatasetVisible(e)?i.dataset:null}(e,i);if("stack"===i)return function(t){const{scale:e,index:i,line:n}=t,s=[],o=n.segments,r=n.points,a=function(t,e){const i=[],n=t.getMatchingVisibleMetas("line");for(let t=0;t<n.length;t++){const s=n[t];if(s.index===e)break;s.hidden||i.unshift(s.dataset)}return i}(e,i);a.push(Bo({x:null,y:e.bottom},n));for(let t=0;t<o.length;t++){const e=o[t];for(let t=e.start;t<=e.end;t++)Ro(s,r[t],a)}return new co({points:s,options:{}})}(t);if("shape"===i)return!0;const s=function(t){return(t.scale||{}).getPointPositionForValue?function(t){const{scale:e,fill:i}=t,n=e.options,s=e.getLabels().length,o=n.reverse?e.max:e.min,r=function(t,e,i){let n;return n="start"===t?i:"end"===t?e.options.reverse?e.min:e.max:bt(t)?t.value:e.getBaseValue(),n}(i,e,o),a=[];if(n.grid.circular){const t=e.getPointPositionForValue(0,o);return new zo({x:t.x,y:t.y,radius:e.getDistanceFromCenterForValue(r)})}for(let t=0;t<s;++t)a.push(e.getPointPositionForValue(t,r));return a}(t):function(t){const{scale:e={},fill:i}=t,n=function(t,e){let i=null;return"start"===t?i=e.bottom:"end"===t?i=e.top:bt(t)?i=e.getPixelForValue(t.value):e.getBasePixel&&(i=e.getBasePixel()),i}(i,e);if(yt(n)){const t=e.isHorizontal();return{x:t?n:null,y:t?null:n}}return null}(t)}(t);return s instanceof zo?s:Bo(s,n)}(e),{line:s,scale:o,axis:r}=e,a=s.options,l=a.fill,h=a.backgroundColor,{above:c=h,below:d=h}=l||{};n&&s.points.length&&(Xe(t,i),function(t,e){const{line:i,target:n,above:s,below:o,area:r,scale:a}=e,l=i._loop?"angle":e.axis;t.save(),"x"===l&&o!==s&&(Fo(t,n,r.top),jo(t,{line:i,target:n,color:s,scale:a,property:l}),t.restore(),t.save(),Fo(t,n,r.bottom)),jo(t,{line:i,target:n,color:o,scale:a,property:l}),t.restore()}(t,{line:s,target:n,above:c,below:d,area:i,scale:o,axis:r}),Ue(t))}function Fo(t,e,i){const{segments:n,points:s}=e;let o=!0,r=!1;t.beginPath();for(const a of n){const{start:n,end:l}=a,h=s[n],c=s[Do(n,l,s)];o?(t.moveTo(h.x,h.y),o=!1):(t.lineTo(h.x,i),t.lineTo(h.x,h.y)),r=!!e.pathSegment(t,a,{move:r}),r?t.closePath():t.lineTo(c.x,i)}t.lineTo(e.first().x,i),t.closePath(),t.clip()}function jo(t,e){const{line:i,target:n,property:s,color:o,scale:r}=e,a=function(t,e,i){const n=t.segments,s=t.points,o=e.points,r=[];for(const t of n){let{start:n,end:a}=t;a=Do(n,a,s);const l=So(i,s[n],s[a],t.loop);if(!e.segments){r.push({source:t,target:l,start:s[n],end:s[a]});continue}const h=Ji(e,l);for(const e of h){const n=So(i,o[e.start],o[e.end],e.loop),a=Ki(t,s,n);for(const t of a)r.push({source:t,target:e,start:{[i]:Po(l,n,"start",Math.max)},end:{[i]:Po(l,n,"end",Math.min)}})}}return r}(i,n,s);for(const{source:e,target:l,start:h,end:c}of a){const{style:{backgroundColor:a=o}={}}=e,d=!0!==n;t.save(),t.fillStyle=a,Vo(t,r,d&&So(s,h,c)),t.beginPath();const u=!!i.pathSegment(t,e);let f;if(d){u?t.closePath():No(t,n,c,s);const e=!!n.pathSegment(t,l,{move:u,reverse:!0});f=u&&e,f||No(t,n,h,s)}t.closePath(),t.fill(f?"evenodd":"nonzero"),t.restore()}}function Vo(t,e,i){const{top:n,bottom:s}=e.chart.chartArea,{property:o,start:r,end:a}=i||{};"x"===o&&(t.beginPath(),t.rect(r,n,a-r,s-n),t.clip())}function No(t,e,i,n){const s=e.interpolate(i,n);s&&t.lineTo(s.x,s.y)}var Ho={id:"filler",afterDatasetsUpdate(t,e,i){const n=(t.data.datasets||[]).length,s=[];let o,r,a,l;for(r=0;r<n;++r)o=t.getDatasetMeta(r),a=o.dataset,l=null,a&&a.options&&a instanceof co&&(l={visible:t.isDatasetVisible(r),index:r,fill:Lo(a,r,n),chart:t,axis:o.controller.options.indexAxis,scale:o.vScale,line:a}),o.$filler=l,s.push(l);for(r=0;r<n;++r)l=s[r],l&&!1!==l.fill&&(l.fill=Oo(s,r,i.propagate))},beforeDraw(t,e,i){const n="beforeDraw"===i.drawTime,s=t.getSortedVisibleDatasetMetas(),o=t.chartArea;for(let e=s.length-1;e>=0;--e){const i=s[e].$filler;i&&(i.line.updateControlPoints(o,i.axis),n&&i.fill&&Wo(t.ctx,i,o))}},beforeDatasetsDraw(t,e,i){if("beforeDatasetsDraw"!==i.drawTime)return;const n=t.getSortedVisibleDatasetMetas();for(let e=n.length-1;e>=0;--e){const i=n[e].$filler;To(i)&&Wo(t.ctx,i,t.chartArea)}},beforeDatasetDraw(t,e,i){const n=e.meta.$filler;To(n)&&"beforeDatasetDraw"===i.drawTime&&Wo(t.ctx,n,t.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const Yo=(t,e)=>{let{boxHeight:i=e,boxWidth:n=e}=t;return t.usePointStyle&&(i=Math.min(i,e),n=t.pointStyleWidth||Math.min(n,e)),{boxWidth:n,boxHeight:i,itemHeight:Math.max(e,i)}};class $o extends gs{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,i){this.maxWidth=t,this.maxHeight=e,this._margins=i,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const t=this.options.labels||{};let e=wt(t.generateLabels,[this.chart],this)||[];t.filter&&(e=e.filter((e=>t.filter(e,this.chart.data)))),t.sort&&(e=e.sort(((e,i)=>t.sort(e,i,this.chart.data)))),this.options.reverse&&e.reverse(),this.legendItems=e}fit(){const{options:t,ctx:e}=this;if(!t.display)return void(this.width=this.height=0);const i=t.labels,n=li(i.font),s=n.size,o=this._computeTitleHeight(),{boxWidth:r,itemHeight:a}=Yo(i,s);let l,h;e.font=n.string,this.isHorizontal()?(l=this.maxWidth,h=this._fitRows(o,s,r,a)+10):(h=this.maxHeight,l=this._fitCols(o,n,r,a)+10),this.width=Math.min(l,t.maxWidth||this.maxWidth),this.height=Math.min(h,t.maxHeight||this.maxHeight)}_fitRows(t,e,i,n){const{ctx:s,maxWidth:o,options:{labels:{padding:r}}}=this,a=this.legendHitBoxes=[],l=this.lineWidths=[0],h=n+r;let c=t;s.textAlign="left",s.textBaseline="middle";let d=-1,u=-h;return this.legendItems.forEach(((t,f)=>{const p=i+e/2+s.measureText(t.text).width;(0===f||l[l.length-1]+p+2*r>o)&&(c+=h,l[l.length-(f>0?0:1)]=0,u+=h,d++),a[f]={left:0,top:u,row:d,width:p,height:n},l[l.length-1]+=p+r})),c}_fitCols(t,e,i,n){const{ctx:s,maxHeight:o,options:{labels:{padding:r}}}=this,a=this.legendHitBoxes=[],l=this.columnSizes=[],h=o-t;let c=r,d=0,u=0,f=0,p=0;return this.legendItems.forEach(((t,o)=>{const{itemWidth:g,itemHeight:m}=function(t,e,i,n,s){const o=function(t,e,i,n){let s=t.text;return s&&"string"!=typeof s&&(s=s.reduce(((t,e)=>t.length>e.length?t:e))),e+i.size/2+n.measureText(s).width}(n,t,e,i),r=function(t,e,i){let n=t;return"string"!=typeof e.text&&(n=Xo(e,i)),n}(s,n,e.lineHeight);return{itemWidth:o,itemHeight:r}}(i,e,s,t,n);o>0&&u+m+2*r>h&&(c+=d+r,l.push({width:d,height:u}),f+=d+r,p++,d=u=0),a[o]={left:f,top:u,col:p,width:g,height:m},d=Math.max(d,g),u+=m+r})),c+=d,l.push({width:d,height:u}),c}adjustHitBoxes(){if(!this.options.display)return;const t=this._computeTitleHeight(),{legendHitBoxes:e,options:{align:i,labels:{padding:n},rtl:s}}=this,o=Xi(s,this.left,this.width);if(this.isHorizontal()){let s=0,r=xe(i,this.left+n,this.right-this.lineWidths[s]);for(const a of e)s!==a.row&&(s=a.row,r=xe(i,this.left+n,this.right-this.lineWidths[s])),a.top+=this.top+t+n,a.left=o.leftForLtr(o.x(r),a.width),r+=a.width+n}else{let s=0,r=xe(i,this.top+t+n,this.bottom-this.columnSizes[s].height);for(const a of e)a.col!==s&&(s=a.col,r=xe(i,this.top+t+n,this.bottom-this.columnSizes[s].height)),a.top=r,a.left+=this.left+n,a.left=o.leftForLtr(o.x(a.left),a.width),r+=a.height+n}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const t=this.ctx;Xe(t,this),this._draw(),Ue(t)}}_draw(){const{options:t,columnSizes:e,lineWidths:i,ctx:n}=this,{align:s,labels:o}=t,r=We.color,a=Xi(t.rtl,this.left,this.width),l=li(o.font),{padding:h}=o,c=l.size,d=c/2;let u;this.drawTitle(),n.textAlign=a.textAlign("left"),n.textBaseline="middle",n.lineWidth=.5,n.font=l.string;const{boxWidth:f,boxHeight:p,itemHeight:g}=Yo(o,c),m=this.isHorizontal(),x=this._computeTitleHeight();u=m?{x:xe(s,this.left+h,this.right-i[0]),y:this.top+h+x,line:0}:{x:this.left+h,y:xe(s,this.top+x+h,this.bottom-e[0].height),line:0},Ui(this.ctx,t.textDirection);const b=g+h;this.legendItems.forEach(((y,v)=>{n.strokeStyle=y.fontColor,n.fillStyle=y.fontColor;const _=n.measureText(y.text).width,A=a.textAlign(y.textAlign||(y.textAlign=o.textAlign)),w=f+d+_;let C=u.x,M=u.y;if(a.setWidth(this.width),m?v>0&&C+w+h>this.right&&(M=u.y+=b,u.line++,C=u.x=xe(s,this.left+h,this.right-i[u.line])):v>0&&M+b>this.bottom&&(C=u.x=C+e[u.line].width+h,u.line++,M=u.y=xe(s,this.top+x+h,this.bottom-e[u.line].height)),function(t,e,i){if(isNaN(f)||f<=0||isNaN(p)||p<0)return;n.save();const s=_t(i.lineWidth,1);if(n.fillStyle=_t(i.fillStyle,r),n.lineCap=_t(i.lineCap,"butt"),n.lineDashOffset=_t(i.lineDashOffset,0),n.lineJoin=_t(i.lineJoin,"miter"),n.lineWidth=s,n.strokeStyle=_t(i.strokeStyle,r),n.setLineDash(_t(i.lineDash,[])),o.usePointStyle){const r={radius:p*Math.SQRT2/2,pointStyle:i.pointStyle,rotation:i.rotation,borderWidth:s},l=a.xPlus(t,f/2);Ye(n,r,l,e+d,o.pointStyleWidth&&f)}else{const o=e+Math.max((c-p)/2,0),r=a.leftForLtr(t,f),l=ri(i.borderRadius);n.beginPath(),Object.values(l).some((t=>0!==t))?Qe(n,{x:r,y:o,w:f,h:p,radius:l}):n.rect(r,o,f,p),n.fill(),0!==s&&n.stroke()}n.restore()}(a.x(C),M,y),C=((t,e,i,n)=>t===(n?"left":"right")?i:"center"===t?(e+i)/2:e)(A,C+f+d,m?C+w:this.right,t.rtl),function(t,e,i){Je(n,i.text,t,e+g/2,l,{strikethrough:i.hidden,textAlign:a.textAlign(i.textAlign)})}(a.x(C),M,y),m)u.x+=w+h;else if("string"!=typeof y.text){const t=l.lineHeight;u.y+=Xo(y,t)+h}else u.y+=b})),Zi(this.ctx,t.textDirection)}drawTitle(){const t=this.options,e=t.title,i=li(e.font),n=ai(e.padding);if(!e.display)return;const s=Xi(t.rtl,this.left,this.width),o=this.ctx,r=e.position,a=i.size/2,l=n.top+a;let h,c=this.left,d=this.width;if(this.isHorizontal())d=Math.max(...this.lineWidths),h=this.top+l,c=xe(t.align,c,this.right-d);else{const e=this.columnSizes.reduce(((t,e)=>Math.max(t,e.height)),0);h=l+xe(t.align,this.top,this.bottom-e-t.labels.padding-this._computeTitleHeight())}const u=xe(r,c,c+d);o.textAlign=s.textAlign(me(r)),o.textBaseline="middle",o.strokeStyle=e.color,o.fillStyle=e.color,o.font=i.string,Je(o,e.text,u,h,i)}_computeTitleHeight(){const t=this.options.title,e=li(t.font),i=ai(t.padding);return t.display?e.lineHeight+i.height:0}_getLegendItemAt(t,e){let i,n,s;if(ae(t,this.left,this.right)&&ae(e,this.top,this.bottom))for(s=this.legendHitBoxes,i=0;i<s.length;++i)if(n=s[i],ae(t,n.left,n.left+n.width)&&ae(e,n.top,n.top+n.height))return this.legendItems[i];return null}handleEvent(t){const e=this.options;if(!function(t,e){return!("mousemove"!==t&&"mouseout"!==t||!e.onHover&&!e.onLeave)||!(!e.onClick||"click"!==t&&"mouseup"!==t)}(t.type,e))return;const i=this._getLegendItemAt(t.x,t.y);if("mousemove"===t.type||"mouseout"===t.type){const o=this._hoveredItem,r=(s=i,null!==(n=o)&&null!==s&&n.datasetIndex===s.datasetIndex&&n.index===s.index);o&&!r&&wt(e.onLeave,[t,o,this],this),this._hoveredItem=i,i&&!r&&wt(e.onHover,[t,i,this],this)}else i&&wt(e.onClick,[t,i,this],this);var n,s}}function Xo(t,e){return e*(t.text?t.text.length:0)}var Uo={id:"legend",_element:$o,start(t,e,i){const n=t.legend=new $o({ctx:t.ctx,options:i,chart:t});Kn.configure(t,n,i),Kn.addBox(t,n)},stop(t){Kn.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,i){const n=t.legend;Kn.configure(t,n,i),n.options=i},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,i){const n=e.datasetIndex,s=i.chart;s.isDatasetVisible(n)?(s.hide(n),e.hidden=!0):(s.show(n),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const e=t.data.datasets,{labels:{usePointStyle:i,pointStyle:n,textAlign:s,color:o,useBorderRadius:r,borderRadius:a}}=t.legend.options;return t._getSortedDatasetMetas().map((t=>{const l=t.controller.getStyle(i?0:void 0),h=ai(l.borderWidth);return{text:e[t.index].label,fillStyle:l.backgroundColor,fontColor:o,hidden:!t.visible,lineCap:l.borderCapStyle,lineDash:l.borderDash,lineDashOffset:l.borderDashOffset,lineJoin:l.borderJoinStyle,lineWidth:(h.width+h.height)/4,strokeStyle:l.borderColor,pointStyle:n||l.pointStyle,rotation:l.rotation,textAlign:s||l.textAlign,borderRadius:r&&(a||l.borderRadius),datasetIndex:t.index}}),this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class Zo extends gs{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){const i=this.options;if(this.left=0,this.top=0,!i.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=t,this.height=this.bottom=e;const n=xt(i.text)?i.text.length:1;this._padding=ai(i.padding);const s=n*li(i.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=s:this.width=s}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:e,left:i,bottom:n,right:s,options:o}=this,r=o.align;let a,l,h,c=0;return this.isHorizontal()?(l=xe(r,i,s),h=e+t,a=s-i):("left"===o.position?(l=i+t,h=xe(r,n,e),c=-.5*Wt):(l=s-t,h=xe(r,e,n),c=.5*Wt),a=n-e),{titleX:l,titleY:h,maxWidth:a,rotation:c}}draw(){const t=this.ctx,e=this.options;if(!e.display)return;const i=li(e.font),n=i.lineHeight/2+this._padding.top,{titleX:s,titleY:o,maxWidth:r,rotation:a}=this._drawArgs(n);Je(t,e.text,0,0,i,{color:e.color,maxWidth:r,rotation:a,textAlign:me(e.align),textBaseline:"middle",translation:[s,o]})}}var qo={id:"title",_element:Zo,start(t,e,i){!function(t,e){const i=new Zo({ctx:t.ctx,options:e,chart:t});Kn.configure(t,i,e),Kn.addBox(t,i),t.titleBlock=i}(t,i)},stop(t){const e=t.titleBlock;Kn.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,i){const n=t.titleBlock;Kn.configure(t,n,i),n.options=i},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const Go=new WeakMap;var Ko={id:"subtitle",start(t,e,i){const n=new Zo({ctx:t.ctx,options:i,chart:t});Kn.configure(t,n,i),Kn.addBox(t,n),Go.set(t,n)},stop(t){Kn.removeBox(t,Go.get(t)),Go.delete(t)},beforeUpdate(t,e,i){const n=Go.get(t);Kn.configure(t,n,i),n.options=i},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const Jo={average(t){if(!t.length)return!1;let e,i,n=0,s=0,o=0;for(e=0,i=t.length;e<i;++e){const i=t[e].element;if(i&&i.hasValue()){const t=i.tooltipPosition();n+=t.x,s+=t.y,++o}}return{x:n/o,y:s/o}},nearest(t,e){if(!t.length)return!1;let i,n,s,o=e.x,r=e.y,a=Number.POSITIVE_INFINITY;for(i=0,n=t.length;i<n;++i){const n=t[i].element;if(n&&n.hasValue()){const t=ie(e,n.getCenterPoint());t<a&&(a=t,s=n)}}if(s){const t=s.tooltipPosition();o=t.x,r=t.y}return{x:o,y:r}}};function Qo(t,e){return e&&(xt(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function tr(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function er(t,e){const{element:i,datasetIndex:n,index:s}=e,o=t.getDatasetMeta(n).controller,{label:r,value:a}=o.getLabelAndValue(s);return{chart:t,label:r,parsed:o.getParsed(s),raw:t.data.datasets[n].data[s],formattedValue:a,dataset:o.getDataset(),dataIndex:s,datasetIndex:n,element:i}}function ir(t,e){const i=t.chart.ctx,{body:n,footer:s,title:o}=t,{boxWidth:r,boxHeight:a}=e,l=li(e.bodyFont),h=li(e.titleFont),c=li(e.footerFont),d=o.length,u=s.length,f=n.length,p=ai(e.padding);let g=p.height,m=0,x=n.reduce(((t,e)=>t+e.before.length+e.lines.length+e.after.length),0);x+=t.beforeBody.length+t.afterBody.length,d&&(g+=d*h.lineHeight+(d-1)*e.titleSpacing+e.titleMarginBottom),x&&(g+=f*(e.displayColors?Math.max(a,l.lineHeight):l.lineHeight)+(x-f)*l.lineHeight+(x-1)*e.bodySpacing),u&&(g+=e.footerMarginTop+u*c.lineHeight+(u-1)*e.footerSpacing);let b=0;const y=function(t){m=Math.max(m,i.measureText(t).width+b)};return i.save(),i.font=h.string,Ct(t.title,y),i.font=l.string,Ct(t.beforeBody.concat(t.afterBody),y),b=e.displayColors?r+2+e.boxPadding:0,Ct(n,(t=>{Ct(t.before,y),Ct(t.lines,y),Ct(t.after,y)})),b=0,i.font=c.string,Ct(t.footer,y),i.restore(),m+=p.width,{width:m,height:g}}function nr(t,e,i,n){const{x:s,width:o}=i,{width:r,chartArea:{left:a,right:l}}=t;let h="center";return"center"===n?h=s<=(a+l)/2?"left":"right":s<=o/2?h="left":s>=r-o/2&&(h="right"),function(t,e,i,n){const{x:s,width:o}=n,r=i.caretSize+i.caretPadding;return"left"===t&&s+o+r>e.width||"right"===t&&s-o-r<0||void 0}(h,t,e,i)&&(h="center"),h}function sr(t,e,i){const n=i.yAlign||e.yAlign||function(t,e){const{y:i,height:n}=e;return i<n/2?"top":i>t.height-n/2?"bottom":"center"}(t,i);return{xAlign:i.xAlign||e.xAlign||nr(t,e,i,n),yAlign:n}}function or(t,e,i,n){const{caretSize:s,caretPadding:o,cornerRadius:r}=t,{xAlign:a,yAlign:l}=i,h=s+o,{topLeft:c,topRight:d,bottomLeft:u,bottomRight:f}=ri(r);let p=function(t,e){let{x:i,width:n}=t;return"right"===e?i-=n:"center"===e&&(i-=n/2),i}(e,a);const g=function(t,e,i){let{y:n,height:s}=t;return"top"===e?n+=i:n-="bottom"===e?s+i:s/2,n}(e,l,h);return"center"===l?"left"===a?p+=h:"right"===a&&(p-=h):"left"===a?p-=Math.max(c,u)+s:"right"===a&&(p+=Math.max(d,f)+s),{x:re(p,0,n.width-e.width),y:re(g,0,n.height-e.height)}}function rr(t,e,i){const n=ai(i.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-n.right:t.x+n.left}function ar(t){return Qo([],tr(t))}function lr(t,e){const i=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return i?t.override(i):t}const hr={beforeTitle:pt,title(t){if(t.length>0){const e=t[0],i=e.chart.data.labels,n=i?i.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(n>0&&e.dataIndex<n)return i[e.dataIndex]}return""},afterTitle:pt,beforeBody:pt,beforeLabel:pt,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");const i=t.formattedValue;return mt(i)||(e+=i),e},labelColor(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:pt,afterBody:pt,beforeFooter:pt,footer:pt,afterFooter:pt};function cr(t,e,i,n){const s=t[e].call(i,n);return void 0===s?hr[e].call(i,n):s}class dr extends gs{static positioners=Jo;constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this._cachedAnimations;if(t)return t;const e=this.chart,i=this.options.setContext(this.getContext()),n=i.enabled&&e.options.animation&&i.animations,s=new an(this.chart,n);return n._cacheable&&(this._cachedAnimations=Object.freeze(s)),s}getContext(){return this.$context||(this.$context=(this,ci(this.chart.getContext(),{tooltip:this,tooltipItems:this._tooltipItems,type:"tooltip"})))}getTitle(t,e){const{callbacks:i}=e,n=cr(i,"beforeTitle",this,t),s=cr(i,"title",this,t),o=cr(i,"afterTitle",this,t);let r=[];return r=Qo(r,tr(n)),r=Qo(r,tr(s)),r=Qo(r,tr(o)),r}getBeforeBody(t,e){return ar(cr(e.callbacks,"beforeBody",this,t))}getBody(t,e){const{callbacks:i}=e,n=[];return Ct(t,(t=>{const e={before:[],lines:[],after:[]},s=lr(i,t);Qo(e.before,tr(cr(s,"beforeLabel",this,t))),Qo(e.lines,cr(s,"label",this,t)),Qo(e.after,tr(cr(s,"afterLabel",this,t))),n.push(e)})),n}getAfterBody(t,e){return ar(cr(e.callbacks,"afterBody",this,t))}getFooter(t,e){const{callbacks:i}=e,n=cr(i,"beforeFooter",this,t),s=cr(i,"footer",this,t),o=cr(i,"afterFooter",this,t);let r=[];return r=Qo(r,tr(n)),r=Qo(r,tr(s)),r=Qo(r,tr(o)),r}_createItems(t){const e=this._active,i=this.chart.data,n=[],s=[],o=[];let r,a,l=[];for(r=0,a=e.length;r<a;++r)l.push(er(this.chart,e[r]));return t.filter&&(l=l.filter(((e,n,s)=>t.filter(e,n,s,i)))),t.itemSort&&(l=l.sort(((e,n)=>t.itemSort(e,n,i)))),Ct(l,(e=>{const i=lr(t.callbacks,e);n.push(cr(i,"labelColor",this,e)),s.push(cr(i,"labelPointStyle",this,e)),o.push(cr(i,"labelTextColor",this,e))})),this.labelColors=n,this.labelPointStyles=s,this.labelTextColors=o,this.dataPoints=l,l}update(t,e){const i=this.options.setContext(this.getContext()),n=this._active;let s,o=[];if(n.length){const t=Jo[i.position].call(this,n,this._eventPosition);o=this._createItems(i),this.title=this.getTitle(o,i),this.beforeBody=this.getBeforeBody(o,i),this.body=this.getBody(o,i),this.afterBody=this.getAfterBody(o,i),this.footer=this.getFooter(o,i);const e=this._size=ir(this,i),r=Object.assign({},t,e),a=sr(this.chart,i,r),l=or(i,r,a,this.chart);this.xAlign=a.xAlign,this.yAlign=a.yAlign,s={opacity:1,x:l.x,y:l.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==this.opacity&&(s={opacity:0});this._tooltipItems=o,this.$context=void 0,s&&this._resolveAnimations().update(this,s),t&&i.external&&i.external.call(this,{chart:this.chart,tooltip:this,replay:e})}drawCaret(t,e,i,n){const s=this.getCaretPosition(t,i,n);e.lineTo(s.x1,s.y1),e.lineTo(s.x2,s.y2),e.lineTo(s.x3,s.y3)}getCaretPosition(t,e,i){const{xAlign:n,yAlign:s}=this,{caretSize:o,cornerRadius:r}=i,{topLeft:a,topRight:l,bottomLeft:h,bottomRight:c}=ri(r),{x:d,y:u}=t,{width:f,height:p}=e;let g,m,x,b,y,v;return"center"===s?(y=u+p/2,"left"===n?(g=d,m=g-o,b=y+o,v=y-o):(g=d+f,m=g+o,b=y-o,v=y+o),x=g):(m="left"===n?d+Math.max(a,h)+o:"right"===n?d+f-Math.max(l,c)-o:this.caretX,"top"===s?(b=u,y=b-o,g=m-o,x=m+o):(b=u+p,y=b+o,g=m+o,x=m-o),v=b),{x1:g,x2:m,x3:x,y1:b,y2:y,y3:v}}drawTitle(t,e,i){const n=this.title,s=n.length;let o,r,a;if(s){const l=Xi(i.rtl,this.x,this.width);for(t.x=rr(this,i.titleAlign,i),e.textAlign=l.textAlign(i.titleAlign),e.textBaseline="middle",o=li(i.titleFont),r=i.titleSpacing,e.fillStyle=i.titleColor,e.font=o.string,a=0;a<s;++a)e.fillText(n[a],l.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+r,a+1===s&&(t.y+=i.titleMarginBottom-r)}}_drawColorBox(t,e,i,n,s){const o=this.labelColors[i],r=this.labelPointStyles[i],{boxHeight:a,boxWidth:l}=s,h=li(s.bodyFont),c=rr(this,"left",s),d=n.x(c),u=a<h.lineHeight?(h.lineHeight-a)/2:0,f=e.y+u;if(s.usePointStyle){const e={radius:Math.min(l,a)/2,pointStyle:r.pointStyle,rotation:r.rotation,borderWidth:1},i=n.leftForLtr(d,l)+l/2,h=f+a/2;t.strokeStyle=s.multiKeyBackground,t.fillStyle=s.multiKeyBackground,He(t,e,i,h),t.strokeStyle=o.borderColor,t.fillStyle=o.backgroundColor,He(t,e,i,h)}else{t.lineWidth=bt(o.borderWidth)?Math.max(...Object.values(o.borderWidth)):o.borderWidth||1,t.strokeStyle=o.borderColor,t.setLineDash(o.borderDash||[]),t.lineDashOffset=o.borderDashOffset||0;const e=n.leftForLtr(d,l),i=n.leftForLtr(n.xPlus(d,1),l-2),r=ri(o.borderRadius);Object.values(r).some((t=>0!==t))?(t.beginPath(),t.fillStyle=s.multiKeyBackground,Qe(t,{x:e,y:f,w:l,h:a,radius:r}),t.fill(),t.stroke(),t.fillStyle=o.backgroundColor,t.beginPath(),Qe(t,{x:i,y:f+1,w:l-2,h:a-2,radius:r}),t.fill()):(t.fillStyle=s.multiKeyBackground,t.fillRect(e,f,l,a),t.strokeRect(e,f,l,a),t.fillStyle=o.backgroundColor,t.fillRect(i,f+1,l-2,a-2))}t.fillStyle=this.labelTextColors[i]}drawBody(t,e,i){const{body:n}=this,{bodySpacing:s,bodyAlign:o,displayColors:r,boxHeight:a,boxWidth:l,boxPadding:h}=i,c=li(i.bodyFont);let d=c.lineHeight,u=0;const f=Xi(i.rtl,this.x,this.width),p=function(i){e.fillText(i,f.x(t.x+u),t.y+d/2),t.y+=d+s},g=f.textAlign(o);let m,x,b,y,v,_,A;for(e.textAlign=o,e.textBaseline="middle",e.font=c.string,t.x=rr(this,g,i),e.fillStyle=i.bodyColor,Ct(this.beforeBody,p),u=r&&"right"!==g?"center"===o?l/2+h:l+2+h:0,y=0,_=n.length;y<_;++y){for(m=n[y],x=this.labelTextColors[y],e.fillStyle=x,Ct(m.before,p),b=m.lines,r&&b.length&&(this._drawColorBox(e,t,y,f,i),d=Math.max(c.lineHeight,a)),v=0,A=b.length;v<A;++v)p(b[v]),d=c.lineHeight;Ct(m.after,p)}u=0,d=c.lineHeight,Ct(this.afterBody,p),t.y-=s}drawFooter(t,e,i){const n=this.footer,s=n.length;let o,r;if(s){const a=Xi(i.rtl,this.x,this.width);for(t.x=rr(this,i.footerAlign,i),t.y+=i.footerMarginTop,e.textAlign=a.textAlign(i.footerAlign),e.textBaseline="middle",o=li(i.footerFont),e.fillStyle=i.footerColor,e.font=o.string,r=0;r<s;++r)e.fillText(n[r],a.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+i.footerSpacing}}drawBackground(t,e,i,n){const{xAlign:s,yAlign:o}=this,{x:r,y:a}=t,{width:l,height:h}=i,{topLeft:c,topRight:d,bottomLeft:u,bottomRight:f}=ri(n.cornerRadius);e.fillStyle=n.backgroundColor,e.strokeStyle=n.borderColor,e.lineWidth=n.borderWidth,e.beginPath(),e.moveTo(r+c,a),"top"===o&&this.drawCaret(t,e,i,n),e.lineTo(r+l-d,a),e.quadraticCurveTo(r+l,a,r+l,a+d),"center"===o&&"right"===s&&this.drawCaret(t,e,i,n),e.lineTo(r+l,a+h-f),e.quadraticCurveTo(r+l,a+h,r+l-f,a+h),"bottom"===o&&this.drawCaret(t,e,i,n),e.lineTo(r+u,a+h),e.quadraticCurveTo(r,a+h,r,a+h-u),"center"===o&&"left"===s&&this.drawCaret(t,e,i,n),e.lineTo(r,a+c),e.quadraticCurveTo(r,a,r+c,a),e.closePath(),e.fill(),n.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this.chart,i=this.$animations,n=i&&i.x,s=i&&i.y;if(n||s){const i=Jo[t.position].call(this,this._active,this._eventPosition);if(!i)return;const o=this._size=ir(this,t),r=Object.assign({},i,this._size),a=sr(e,t,r),l=or(t,r,a,e);n._to===l.x&&s._to===l.y||(this.xAlign=a.xAlign,this.yAlign=a.yAlign,this.width=o.width,this.height=o.height,this.caretX=i.x,this.caretY=i.y,this._resolveAnimations().update(this,l))}}_willRender(){return!!this.opacity}draw(t){const e=this.options.setContext(this.getContext());let i=this.opacity;if(!i)return;this._updateAnimationTarget(e);const n={width:this.width,height:this.height},s={x:this.x,y:this.y};i=Math.abs(i)<.001?0:i;const o=ai(e.padding),r=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;e.enabled&&r&&(t.save(),t.globalAlpha=i,this.drawBackground(s,t,n,e),Ui(t,e.textDirection),s.y+=o.top,this.drawTitle(s,t,e),this.drawBody(s,t,e),this.drawFooter(s,t,e),Zi(t,e.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const i=this._active,n=t.map((({datasetIndex:t,index:e})=>{const i=this.chart.getDatasetMeta(t);if(!i)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:i.data[e],index:e}})),s=!Mt(i,n),o=this._positionChanged(n,e);(s||o)&&(this._active=n,this._eventPosition=e,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,e,i=!0){if(e&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const n=this.options,s=this._active||[],o=this._getActiveElements(t,s,e,i),r=this._positionChanged(o,t),a=e||!Mt(o,s)||r;return a&&(this._active=o,(n.enabled||n.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,e))),a}_getActiveElements(t,e,i,n){const s=this.options;if("mouseout"===t.type)return[];if(!n)return e;const o=this.chart.getElementsAtEventForMode(t,s.mode,s,i);return s.reverse&&o.reverse(),o}_positionChanged(t,e){const{caretX:i,caretY:n,options:s}=this,o=Jo[s.position].call(this,t,e);return!1!==o&&(i!==o.x||n!==o.y)}}var ur={id:"tooltip",_element:dr,positioners:Jo,afterInit(t,e,i){i&&(t.tooltip=new dr({chart:t,options:i}))},beforeUpdate(t,e,i){t.tooltip&&t.tooltip.initialize(i)},reset(t,e,i){t.tooltip&&t.tooltip.initialize(i)},afterDraw(t){const e=t.tooltip;if(e&&e._willRender()){const i={tooltip:e};if(!1===t.notifyPlugins("beforeTooltipDraw",{...i,cancelable:!0}))return;e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",i)}},afterEvent(t,e){if(t.tooltip){const i=e.replay;t.tooltip.handleEvent(e.event,i,e.inChartArea)&&(e.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:hr},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},fr=Object.freeze({__proto__:null,Colors:Co,Decimation:Eo,Filler:Ho,Legend:Uo,SubTitle:Ko,Title:qo,Tooltip:ur});function pr(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}function gr(t,e,{horizontal:i,minRotation:n}){const s=Jt(n),o=(i?Math.sin(s):Math.cos(s))||.001,r=.75*e*(""+t).length;return Math.min(e/o,r)}class mr extends Cs{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return mt(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const{beginAtZero:t}=this.options,{minDefined:e,maxDefined:i}=this.getUserBounds();let{min:n,max:s}=this;const o=t=>n=e?n:t,r=t=>s=i?s:t;if(t){const t=Ut(n),e=Ut(s);t<0&&e<0?r(0):t>0&&e>0&&o(0)}if(n===s){let e=0===s?1:Math.abs(.05*s);r(s+e),t||o(n-e)}this.min=n,this.max=s}getTickLimit(){const t=this.options.ticks;let e,{maxTicksLimit:i,stepSize:n}=t;return n?(e=Math.ceil(this.max/n)-Math.floor(this.min/n)+1,e>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${n} would result generating up to ${e} ticks. Limiting to 1000.`),e=1e3)):(e=this.computeTickLimit(),i=i||11),i&&(e=Math.min(i,e)),e}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this.options,e=t.ticks;let i=this.getTickLimit();i=Math.max(2,i);const n=function(t,e){const i=[],{bounds:n,step:s,min:o,max:r,precision:a,count:l,maxTicks:h,maxDigits:c,includeBounds:d}=t,u=s||1,f=h-1,{min:p,max:g}=e,m=!mt(o),x=!mt(r),b=!mt(l),y=(g-p)/(c+1);let v,_,A,w,C=qt((g-p)/f/u)*u;if(C<1e-14&&!m&&!x)return[{value:p},{value:g}];w=Math.ceil(g/C)-Math.floor(p/C),w>f&&(C=qt(w*C/f/u)*u),mt(a)||(v=Math.pow(10,a),C=Math.ceil(C*v)/v),"ticks"===n?(_=Math.floor(p/C)*C,A=Math.ceil(g/C)*C):(_=p,A=g),m&&x&&s&&function(t,e){const i=Math.round(t);return i-e<=t&&i+e>=t}((r-o)/s,C/1e3)?(w=Math.round(Math.min((r-o)/C,h)),C=(r-o)/w,_=o,A=r):b?(_=m?o:_,A=x?r:A,w=l-1,C=(A-_)/w):(w=(A-_)/C,w=Zt(w,Math.round(w),C/1e3)?Math.round(w):Math.ceil(w));const M=Math.max(te(C),te(_));v=Math.pow(10,mt(a)?M:a),_=Math.round(_*v)/v,A=Math.round(A*v)/v;let k=0;for(m&&(d&&_!==o?(i.push({value:o}),_<o&&k++,Zt(Math.round((_+k*C)*v)/v,o,gr(o,y,t))&&k++):_<o&&k++);k<w;++k){const t=Math.round((_+k*C)*v)/v;if(x&&t>r)break;i.push({value:t})}return x&&d&&A!==r?i.length&&Zt(i[i.length-1].value,r,gr(r,y,t))?i[i.length-1].value=r:i.push({value:r}):x&&A!==r||i.push({value:A}),i}({maxTicks:i,bounds:t.bounds,min:t.min,max:t.max,precision:e.precision,step:e.stepSize,count:e.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:e.minRotation||0,includeBounds:!1!==e.includeBounds},this._range||this);return"ticks"===t.bounds&&Kt(n,this,"value"),t.reverse?(n.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),n}configure(){const t=this.ticks;let e=this.min,i=this.max;if(super.configure(),this.options.offset&&t.length){const n=(i-e)/Math.max(t.length-1,1)/2;e-=n,i+=n}this._startValue=e,this._endValue=i,this._valueRange=i-e}getLabelForValue(t){return Pe(t,this.chart.options.locale,this.options.ticks.format)}}class xr extends mr{static id="linear";static defaults={ticks:{callback:Te.formatters.numeric}};determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=yt(t)?t:0,this.max=yt(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){const t=this.isHorizontal(),e=t?this.width:this.height,i=Jt(this.options.ticks.minRotation),n=(t?Math.sin(i):Math.cos(i))||.001,s=this._resolveTickFontOptions(0);return Math.ceil(e/Math.min(40,s.lineHeight/n))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}const br=t=>Math.floor(Xt(t)),yr=(t,e)=>Math.pow(10,br(t)+e);function vr(t){return 1==t/Math.pow(10,br(t))}function _r(t,e,i){const n=Math.pow(10,i),s=Math.floor(t/n);return Math.ceil(e/n)-s}class Ar extends Cs{static id="logarithmic";static defaults={ticks:{callback:Te.formatters.logarithmic,major:{enabled:!0}}};constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){const i=mr.prototype.parse.apply(this,[t,e]);if(0!==i)return yt(i)&&i>0?i:null;this._zero=!0}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=yt(t)?Math.max(0,t):null,this.max=yt(e)?Math.max(0,e):null,this.options.beginAtZero&&(this._zero=!0),this._zero&&this.min!==this._suggestedMin&&!yt(this._userMin)&&(this.min=t===yr(this.min,0)?yr(this.min,-1):yr(this.min,0)),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let i=this.min,n=this.max;const s=e=>i=t?i:e,o=t=>n=e?n:t;i===n&&(i<=0?(s(1),o(10)):(s(yr(i,-1)),o(yr(n,1)))),i<=0&&s(yr(n,-1)),n<=0&&o(yr(i,1)),this.min=i,this.max=n}buildTicks(){const t=this.options,e=function(t,{min:e,max:i}){e=vt(t.min,e);const n=[],s=br(e);let o=function(t,e){let i=br(e-t);for(;_r(t,e,i)>10;)i++;for(;_r(t,e,i)<10;)i--;return Math.min(i,br(t))}(e,i),r=o<0?Math.pow(10,Math.abs(o)):1;const a=Math.pow(10,o),l=s>o?Math.pow(10,s):0,h=Math.round((e-l)*r)/r,c=Math.floor((e-l)/a/10)*a*10;let d=Math.floor((h-c)/Math.pow(10,o)),u=vt(t.min,Math.round((l+c+d*Math.pow(10,o))*r)/r);for(;u<i;)n.push({value:u,major:vr(u),significand:d}),d>=10?d=d<15?15:20:d++,d>=20&&(o++,d=2,r=o>=0?1:r),u=Math.round((l+c+d*Math.pow(10,o))*r)/r;const f=vt(t.max,u);return n.push({value:f,major:vr(f),significand:d}),n}({min:this._userMin,max:this._userMax},this);return"ticks"===t.bounds&&Kt(e,this,"value"),t.reverse?(e.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),e}getLabelForValue(t){return void 0===t?"0":Pe(t,this.chart.options.locale,this.options.ticks.format)}configure(){const t=this.min;super.configure(),this._startValue=Xt(t),this._valueRange=Xt(this.max)-Xt(t)}getPixelForValue(t){return void 0!==t&&0!==t||(t=this.min),null===t||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:(Xt(t)-this._startValue)/this._valueRange)}getValueForPixel(t){const e=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+e*this._valueRange)}}function wr(t){const e=t.ticks;if(e.display&&t.display){const t=ai(e.backdropPadding);return _t(e.font&&e.font.size,We.font.size)+t.height}return 0}function Cr(t,e,i){return i=xt(i)?i:[i],{w:je(t,e.string,i),h:i.length*e.lineHeight}}function Mr(t,e,i,n,s){return t===n||t===s?{start:e-i/2,end:e+i/2}:t<n||t>s?{start:e-i,end:e}:{start:e,end:e+i}}function kr(t,e,i,n,s){const o=Math.abs(Math.sin(i)),r=Math.abs(Math.cos(i));let a=0,l=0;n.start<e.l?(a=(e.l-n.start)/o,t.l=Math.min(t.l,e.l-a)):n.end>e.r&&(a=(n.end-e.r)/o,t.r=Math.max(t.r,e.r+a)),s.start<e.t?(l=(e.t-s.start)/r,t.t=Math.min(t.t,e.t-l)):s.end>e.b&&(l=(s.end-e.b)/r,t.b=Math.max(t.b,e.b+l))}function Er(t,e,i){const n=t.drawingArea,{extra:s,additionalAngle:o,padding:r,size:a}=i,l=t.getPointPosition(e,n+s+r,o),h=Math.round(Qt(se(l.angle+Ht))),c=function(t,e,i){return 90===i||270===i?t-=e/2:(i>270||i<90)&&(t-=e),t}(l.y,a.h,h),d=function(t){return 0===t||180===t?"center":t<180?"left":"right"}(h),u=(f=l.x,p=a.w,"right"===(g=d)?f-=p:"center"===g&&(f-=p/2),f);var f,p,g;return{visible:!0,x:l.x,y:c,textAlign:d,left:u,top:c,right:u+a.w,bottom:c+a.h}}function Sr(t,e){if(!e)return!0;const{left:i,top:n,right:s,bottom:o}=t;return!($e({x:i,y:n},e)||$e({x:i,y:o},e)||$e({x:s,y:n},e)||$e({x:s,y:o},e))}function Dr(t,e,i){const{left:n,top:s,right:o,bottom:r}=i,{backdropColor:a}=e;if(!mt(a)){const i=ri(e.borderRadius),l=ai(e.backdropPadding);t.fillStyle=a;const h=n-l.left,c=s-l.top,d=o-n+l.width,u=r-s+l.height;Object.values(i).some((t=>0!==t))?(t.beginPath(),Qe(t,{x:h,y:c,w:d,h:u,radius:i}),t.fill()):t.fillRect(h,c,d,u)}}function Pr(t,e,i,n){const{ctx:s}=t;if(i)s.arc(t.xCenter,t.yCenter,e,0,Ft);else{let i=t.getPointPosition(0,e);s.moveTo(i.x,i.y);for(let o=1;o<n;o++)i=t.getPointPosition(o,e),s.lineTo(i.x,i.y)}}class Br extends mr{static id="radialLinear";static defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:Te.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:t=>t,padding:5,centerPointLabels:!1}};static defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"};static descriptors={angleLines:{_fallback:"grid"}};constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this._padding=ai(wr(this.options)/2),e=this.width=this.maxWidth-t.width,i=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+e/2+t.left),this.yCenter=Math.floor(this.top+i/2+t.top),this.drawingArea=Math.floor(Math.min(e,i)/2)}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!1);this.min=yt(t)&&!isNaN(t)?t:0,this.max=yt(e)&&!isNaN(e)?e:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/wr(this.options))}generateTickLabels(t){mr.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map(((t,e)=>{const i=wt(this.options.pointLabels.callback,[t,e],this);return i||0===i?i:""})).filter(((t,e)=>this.chart.getDataVisibility(e)))}fit(){const t=this.options;t.display&&t.pointLabels.display?function(t){const e={l:t.left+t._padding.left,r:t.right-t._padding.right,t:t.top+t._padding.top,b:t.bottom-t._padding.bottom},i=Object.assign({},e),n=[],s=[],o=t._pointLabels.length,r=t.options.pointLabels,a=r.centerPointLabels?Wt/o:0;for(let l=0;l<o;l++){const o=r.setContext(t.getPointLabelContext(l));s[l]=o.padding;const h=t.getPointPosition(l,t.drawingArea+s[l],a),c=li(o.font),d=Cr(t.ctx,c,t._pointLabels[l]);n[l]=d;const u=se(t.getIndexAngle(l)+a),f=Math.round(Qt(u));kr(i,e,u,Mr(f,h.x,d.w,0,180),Mr(f,h.y,d.h,90,270))}t.setCenterPoint(e.l-i.l,i.r-e.r,e.t-i.t,i.b-e.b),t._pointLabelItems=function(t,e,i){const n=[],s=t._pointLabels.length,o=t.options,{centerPointLabels:r,display:a}=o.pointLabels,l={extra:wr(o)/2,additionalAngle:r?Wt/s:0};let h;for(let o=0;o<s;o++){l.padding=i[o],l.size=e[o];const s=Er(t,o,l);n.push(s),"auto"===a&&(s.visible=Sr(s,h),s.visible&&(h=s))}return n}(t,n,s)}(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,e,i,n){this.xCenter+=Math.floor((t-e)/2),this.yCenter+=Math.floor((i-n)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,e,i,n))}getIndexAngle(t){return se(t*(Ft/(this._pointLabels.length||1))+Jt(this.options.startAngle||0))}getDistanceFromCenterForValue(t){if(mt(t))return NaN;const e=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*e:(t-this.min)*e}getValueForDistanceFromCenter(t){if(mt(t))return NaN;const e=t/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-e:this.min+e}getPointLabelContext(t){const e=this._pointLabels||[];if(t>=0&&t<e.length){const i=e[t];return function(t,e,i){return ci(t,{label:i,index:e,type:"pointLabel"})}(this.getContext(),t,i)}}getPointPosition(t,e,i=0){const n=this.getIndexAngle(t)-Ht+i;return{x:Math.cos(n)*e+this.xCenter,y:Math.sin(n)*e+this.yCenter,angle:n}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:e,top:i,right:n,bottom:s}=this._pointLabelItems[t];return{left:e,top:i,right:n,bottom:s}}drawBackground(){const{backgroundColor:t,grid:{circular:e}}=this.options;if(t){const i=this.ctx;i.save(),i.beginPath(),Pr(this,this.getDistanceFromCenterForValue(this._endValue),e,this._pointLabels.length),i.closePath(),i.fillStyle=t,i.fill(),i.restore()}}drawGrid(){const t=this.ctx,e=this.options,{angleLines:i,grid:n,border:s}=e,o=this._pointLabels.length;let r,a,l;if(e.pointLabels.display&&function(t,e){const{ctx:i,options:{pointLabels:n}}=t;for(let s=e-1;s>=0;s--){const e=t._pointLabelItems[s];if(!e.visible)continue;const o=n.setContext(t.getPointLabelContext(s));Dr(i,o,e);const r=li(o.font),{x:a,y:l,textAlign:h}=e;Je(i,t._pointLabels[s],a,l+r.lineHeight/2,r,{color:o.color,textAlign:h,textBaseline:"middle"})}}(this,o),n.display&&this.ticks.forEach(((t,e)=>{if(0!==e){a=this.getDistanceFromCenterForValue(t.value);const i=this.getContext(e),r=n.setContext(i),l=s.setContext(i);!function(t,e,i,n,s){const o=t.ctx,r=e.circular,{color:a,lineWidth:l}=e;!r&&!n||!a||!l||i<0||(o.save(),o.strokeStyle=a,o.lineWidth=l,o.setLineDash(s.dash),o.lineDashOffset=s.dashOffset,o.beginPath(),Pr(t,i,r,n),o.closePath(),o.stroke(),o.restore())}(this,r,a,o,l)}})),i.display){for(t.save(),r=o-1;r>=0;r--){const n=i.setContext(this.getPointLabelContext(r)),{color:s,lineWidth:o}=n;o&&s&&(t.lineWidth=o,t.strokeStyle=s,t.setLineDash(n.borderDash),t.lineDashOffset=n.borderDashOffset,a=this.getDistanceFromCenterForValue(e.ticks.reverse?this.min:this.max),l=this.getPointPosition(r,a),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(l.x,l.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const t=this.ctx,e=this.options,i=e.ticks;if(!i.display)return;const n=this.getIndexAngle(0);let s,o;t.save(),t.translate(this.xCenter,this.yCenter),t.rotate(n),t.textAlign="center",t.textBaseline="middle",this.ticks.forEach(((n,r)=>{if(0===r&&!e.reverse)return;const a=i.setContext(this.getContext(r)),l=li(a.font);if(s=this.getDistanceFromCenterForValue(this.ticks[r].value),a.showLabelBackdrop){t.font=l.string,o=t.measureText(n.label).width,t.fillStyle=a.backdropColor;const e=ai(a.backdropPadding);t.fillRect(-o/2-e.left,-s-l.size/2-e.top,o+e.width,l.size+e.height)}Je(t,n.label,0,-s,l,{color:a.color,strokeColor:a.textStrokeColor,strokeWidth:a.textStrokeWidth})})),t.restore()}drawTitle(){}}const Tr={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},Or=Object.keys(Tr);function Lr(t,e){return t-e}function Rr(t,e){if(mt(e))return null;const i=t._adapter,{parser:n,round:s,isoWeekday:o}=t._parseOpts;let r=e;return"function"==typeof n&&(r=n(r)),yt(r)||(r="string"==typeof n?i.parse(r,n):i.parse(r)),null===r?null:(s&&(r="week"!==s||!Gt(o)&&!0!==o?i.startOf(r,s):i.startOf(r,"isoWeek",o)),+r)}function Ir(t,e,i,n){const s=Or.length;for(let o=Or.indexOf(t);o<s-1;++o){const t=Tr[Or[o]],s=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((i-e)/(s*t.size))<=n)return Or[o]}return Or[s-1]}function zr(t,e,i){if(i){if(i.length){const{lo:n,hi:s}=le(i,e);t[i[n]>=e?i[n]:i[s]]=!0}}else t[e]=!0}function Wr(t,e,i){const n=[],s={},o=e.length;let r,a;for(r=0;r<o;++r)a=e[r],s[a]=r,n.push({value:a,major:!1});return 0!==o&&i?function(t,e,i,n){const s=t._adapter,o=+s.startOf(e[0].value,n),r=e[e.length-1].value;let a,l;for(a=o;a<=r;a=+s.add(a,1,n))l=i[a],l>=0&&(e[l].major=!0);return e}(t,n,s,i):n}class Fr extends Cs{static id="time";static defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",callback:!1,major:{enabled:!1}}};constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e={}){const i=t.time||(t.time={}),n=this._adapter=new On(t.adapters.date);n.init(e),Pt(i.displayFormats,n.formats()),this._parseOpts={parser:i.parser,round:i.round,isoWeekday:i.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:Rr(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this.options,e=this._adapter,i=t.time.unit||"day";let{min:n,max:s,minDefined:o,maxDefined:r}=this.getUserBounds();function a(t){o||isNaN(t.min)||(n=Math.min(n,t.min)),r||isNaN(t.max)||(s=Math.max(s,t.max))}o&&r||(a(this._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||a(this.getMinMax(!1))),n=yt(n)&&!isNaN(n)?n:+e.startOf(Date.now(),i),s=yt(s)&&!isNaN(s)?s:+e.endOf(Date.now(),i)+1,this.min=Math.min(n,s-1),this.max=Math.max(n+1,s)}_getLabelBounds(){const t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],i=t[t.length-1]),{min:e,max:i}}buildTicks(){const t=this.options,e=t.time,i=t.ticks,n="labels"===i.source?this.getLabelTimestamps():this._generate();"ticks"===t.bounds&&n.length&&(this.min=this._userMin||n[0],this.max=this._userMax||n[n.length-1]);const s=this.min,o=function(t,e,i){let n=0,s=t.length;for(;n<s&&t[n]<e;)n++;for(;s>n&&t[s-1]>i;)s--;return n>0||s<t.length?t.slice(n,s):t}(n,s,this.max);return this._unit=e.unit||(i.autoSkip?Ir(e.minUnit,this.min,this.max,this._getLabelCapacity(s)):function(t,e,i,n,s){for(let o=Or.length-1;o>=Or.indexOf(i);o--){const i=Or[o];if(Tr[i].common&&t._adapter.diff(s,n,i)>=e-1)return i}return Or[i?Or.indexOf(i):0]}(this,o.length,e.minUnit,this.min,this.max)),this._majorUnit=i.major.enabled&&"year"!==this._unit?function(t){for(let e=Or.indexOf(t)+1,i=Or.length;e<i;++e)if(Tr[Or[e]].common)return Or[e]}(this._unit):void 0,this.initOffsets(n),t.reverse&&o.reverse(),Wr(this,o,this._majorUnit)}afterAutoSkip(){this.options.offsetAfterAutoskip&&this.initOffsets(this.ticks.map((t=>+t.value)))}initOffsets(t=[]){let e,i,n=0,s=0;this.options.offset&&t.length&&(e=this.getDecimalForValue(t[0]),n=1===t.length?1-e:(this.getDecimalForValue(t[1])-e)/2,i=this.getDecimalForValue(t[t.length-1]),s=1===t.length?i:(i-this.getDecimalForValue(t[t.length-2]))/2);const o=t.length<3?.5:.25;n=re(n,0,o),s=re(s,0,o),this._offsets={start:n,end:s,factor:1/(n+1+s)}}_generate(){const t=this._adapter,e=this.min,i=this.max,n=this.options,s=n.time,o=s.unit||Ir(s.minUnit,e,i,this._getLabelCapacity(e)),r=_t(n.ticks.stepSize,1),a="week"===o&&s.isoWeekday,l=Gt(a)||!0===a,h={};let c,d,u=e;if(l&&(u=+t.startOf(u,"isoWeek",a)),u=+t.startOf(u,l?"day":o),t.diff(i,e,o)>1e5*r)throw new Error(e+" and "+i+" are too far apart with stepSize of "+r+" "+o);const f="data"===n.ticks.source&&this.getDataTimestamps();for(c=u,d=0;c<i;c=+t.add(c,r,o),d++)zr(h,c,f);return c!==i&&"ticks"!==n.bounds&&1!==d||zr(h,c,f),Object.keys(h).sort(Lr).map((t=>+t))}getLabelForValue(t){const e=this._adapter,i=this.options.time;return i.tooltipFormat?e.format(t,i.tooltipFormat):e.format(t,i.displayFormats.datetime)}format(t,e){const i=this.options.time.displayFormats,n=this._unit,s=e||i[n];return this._adapter.format(t,s)}_tickFormatFunction(t,e,i,n){const s=this.options,o=s.ticks.callback;if(o)return wt(o,[t,e,i],this);const r=s.time.displayFormats,a=this._unit,l=this._majorUnit,h=a&&r[a],c=l&&r[l],d=i[e],u=l&&c&&d&&d.major;return this._adapter.format(t,n||(u?c:h))}generateTickLabels(t){let e,i,n;for(e=0,i=t.length;e<i;++e)n=t[e],n.label=this._tickFormatFunction(n.value,e,t)}getDecimalForValue(t){return null===t?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){const e=this._offsets,i=this.getDecimalForValue(t);return this.getPixelForDecimal((e.start+i)*e.factor)}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return this.min+i*(this.max-this.min)}_getLabelSize(t){const e=this.options.ticks,i=this.ctx.measureText(t).width,n=Jt(this.isHorizontal()?e.maxRotation:e.minRotation),s=Math.cos(n),o=Math.sin(n),r=this._resolveTickFontOptions(0).size;return{w:i*s+r*o,h:i*o+r*s}}_getLabelCapacity(t){const e=this.options.time,i=e.displayFormats,n=i[e.unit]||i.millisecond,s=this._tickFormatFunction(t,0,Wr(this,[t],this._majorUnit),n),o=this._getLabelSize(s),r=Math.floor(this.isHorizontal()?this.width/o.w:this.height/o.h)-1;return r>0?r:1}getDataTimestamps(){let t,e,i=this._cache.data||[];if(i.length)return i;const n=this.getMatchingVisibleMetas();if(this._normalized&&n.length)return this._cache.data=n[0].controller.getAllParsedValues(this);for(t=0,e=n.length;t<e;++t)i=i.concat(n[t].controller.getAllParsedValues(this));return this._cache.data=this.normalize(i)}getLabelTimestamps(){const t=this._cache.labels||[];let e,i;if(t.length)return t;const n=this.getLabels();for(e=0,i=n.length;e<i;++e)t.push(Rr(this,n[e]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return fe(t.sort(Lr))}}function jr(t,e,i){let n,s,o,r,a=0,l=t.length-1;i?(e>=t[a].pos&&e<=t[l].pos&&({lo:a,hi:l}=he(t,"pos",e)),({pos:n,time:o}=t[a]),({pos:s,time:r}=t[l])):(e>=t[a].time&&e<=t[l].time&&({lo:a,hi:l}=he(t,"time",e)),({time:n,pos:o}=t[a]),({time:s,pos:r}=t[l]));const h=s-n;return h?o+(r-o)*(e-n)/h:o}var Vr=Object.freeze({__proto__:null,CategoryScale:class extends Cs{static id="category";static defaults={ticks:{callback:pr}};constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){const e=this._addedLabels;if(e.length){const t=this.getLabels();for(const{index:i,label:n}of e)t[i]===n&&t.splice(i,1);this._addedLabels=[]}super.init(t)}parse(t,e){if(mt(t))return null;const i=this.getLabels();return((t,e)=>null===t?null:re(Math.round(t),0,e))(e=isFinite(e)&&i[e]===t?e:function(t,e,i,n){const s=t.indexOf(e);return-1===s?((t,e,i,n)=>("string"==typeof e?(i=t.push(e)-1,n.unshift({index:i,label:e})):isNaN(e)&&(i=null),i))(t,e,i,n):s!==t.lastIndexOf(e)?i:s}(i,t,_t(e,t),this._addedLabels),i.length-1)}determineDataLimits(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let{min:i,max:n}=this.getMinMax(!0);"ticks"===this.options.bounds&&(t||(i=0),e||(n=this.getLabels().length-1)),this.min=i,this.max=n}buildTicks(){const t=this.min,e=this.max,i=this.options.offset,n=[];let s=this.getLabels();s=0===t&&e===s.length-1?s:s.slice(t,e+1),this._valueRange=Math.max(s.length-(i?0:1),1),this._startValue=this.min-(i?.5:0);for(let i=t;i<=e;i++)n.push({value:i});return n}getLabelForValue(t){return pr.call(this,t)}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return"number"!=typeof t&&(t=this.parse(t)),null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}},LinearScale:xr,LogarithmicScale:Ar,RadialLinearScale:Br,TimeScale:Fr,TimeSeriesScale:class extends Fr{static id="timeseries";static defaults=Fr.defaults;constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this._getTimestampsForTable(),e=this._table=this.buildLookupTable(t);this._minPos=jr(e,this.min),this._tableRange=jr(e,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){const{min:e,max:i}=this,n=[],s=[];let o,r,a,l,h;for(o=0,r=t.length;o<r;++o)l=t[o],l>=e&&l<=i&&n.push(l);if(n.length<2)return[{time:e,pos:0},{time:i,pos:1}];for(o=0,r=n.length;o<r;++o)h=n[o+1],a=n[o-1],l=n[o],Math.round((h+a)/2)!==l&&s.push({time:l,pos:o/(r-1)});return s}_generate(){const t=this.min,e=this.max;let i=super.getDataTimestamps();return i.includes(t)&&i.length||i.splice(0,0,t),i.includes(e)&&1!==i.length||i.push(e),i.sort(((t,e)=>t-e))}_getTimestampsForTable(){let t=this._cache.all||[];if(t.length)return t;const e=this.getDataTimestamps(),i=this.getLabelTimestamps();return t=e.length&&i.length?this.normalize(e.concat(i)):e.length?e:i,t=this._cache.all=t,t}getDecimalForValue(t){return(jr(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return jr(this._table,i*this._tableRange+this._minPos,!0)}}});const Nr=[Pn,bo,fr,Vr];Qs.register(...Nr);const Hr=Qs,Yr={modes:{point:(t,e)=>Xr(t,e,{intersect:!0}),nearest:(t,e,i)=>function(t,e,i){let n=Number.POSITIVE_INFINITY;return Xr(t,e,i).reduce(((t,s)=>{const o=s.getCenterPoint(),r=function(t,e,i){return"x"===i?{x:t.x,y:e.y}:"y"===i?{x:e.x,y:t.y}:e}(e,o,i.axis),a=ie(e,r);return a<n?(t=[s],n=a):a===n&&t.push(s),t}),[]).sort(((t,e)=>t._index-e._index)).slice(0,1)}(t,e,i),x:(t,e,i)=>Xr(t,e,{intersect:i.intersect,axis:"x"}),y:(t,e,i)=>Xr(t,e,{intersect:i.intersect,axis:"y"})}};function $r(t,e,i){return(Yr.modes[i.mode]||Yr.modes.nearest)(t,e,i)}function Xr(t,e,i){return t.visibleElements.filter((t=>i.intersect?t.inRange(e.x,e.y):function(t,e,i){return"x"!==i&&"y"!==i?t.inRange(e.x,e.y,"x",!0)||t.inRange(e.x,e.y,"y",!0):t.inRange(e.x,e.y,i,!0)}(t,e,i.axis)))}const Ur=(t,e)=>e>t||t.length>e.length&&t.slice(0,e.length)===e,Zr=.001,qr=(t,e,i)=>Math.min(i,Math.max(e,t));function Gr(t,e,i){for(const n of Object.keys(t))t[n]=qr(t[n],e,i);return t}function Kr(t,{x:e,y:i,x2:n,y2:s},o,r){const a=r/2,l=t.x>=e-a-Zr&&t.x<=n+a+Zr,h=t.y>=i-a-Zr&&t.y<=s+a+Zr;return"x"===o?l:("y"===o||l)&&h}function Jr(t,e){const{centerX:i,centerY:n}=t.getProps(["centerX","centerY"],e);return{x:i,y:n}}const Qr=t=>"string"==typeof t&&t.endsWith("%"),ta=t=>parseFloat(t)/100,ea=t=>qr(ta(t),0,1),ia=(t,e)=>({x:t,y:e,x2:t,y2:e,width:0,height:0}),na={box:t=>ia(t.centerX,t.centerY),ellipse:t=>({centerX:t.centerX,centerY:t.centerX,radius:0,width:0,height:0}),label:t=>ia(t.centerX,t.centerY),line:t=>ia(t.x,t.y),point:t=>({centerX:t.centerX,centerY:t.centerY,radius:0,width:0,height:0}),polygon:t=>ia(t.centerX,t.centerY)};function sa(t,e){return"start"===e?0:"end"===e?t:Qr(e)?ea(e)*t:t/2}function oa(t,e,i=!0){return"number"==typeof e?e:Qr(e)?(i?ea(e):ta(e))*t:t}function ra(t,e="center"){return bt(t)?{x:_t(t.x,e),y:_t(t.y,e)}:{x:t=_t(t,e),y:t}}function aa(t){return t&&(Rt(t.xValue)||Rt(t.yValue))}function la(t,e,i){const n=i.init;if(n)return!0===n?ca(e,i):function(t,e,i){const n=wt(i.init,[{chart:t,properties:e,options:i}]);return!0===n?ca(e,i):bt(n)?n:void 0}(t,e,i)}function ha(t,e,i){let n=!1;return e.forEach((e=>{It(t[e])?(n=!0,i[e]=t[e]):Rt(i[e])&&delete i[e]})),n}function ca(t,e){const i=e.type||"line";return na[i](t)}const da=new Map,ua=t=>t.reduce((function(t,e){return t+e.string}),"");function fa(t){if(t&&"object"==typeof t){const e=t.toString();return"[object HTMLImageElement]"===e||"[object HTMLCanvasElement]"===e}}function pa(t,{x:e,y:i},n){n&&(t.translate(e,i),t.rotate(Jt(n)),t.translate(-e,-i))}function ga(t,e){if(e&&e.borderWidth)return t.lineCap=e.borderCapStyle,t.setLineDash(e.borderDash),t.lineDashOffset=e.borderDashOffset,t.lineJoin=e.borderJoinStyle,t.lineWidth=e.borderWidth,t.strokeStyle=e.borderColor,!0}function ma(t,e){t.shadowColor=e.backgroundShadowColor,t.shadowBlur=e.shadowBlur,t.shadowOffsetX=e.shadowOffsetX,t.shadowOffsetY=e.shadowOffsetY}function xa(t,e){const i=e.content;if(fa(i))return{width:oa(i.width,e.width),height:oa(i.height,e.height)};const n=e.font,s=xt(n)?n.map((t=>li(t))):[li(n)],o=e.textStrokeWidth,r=xt(i)?i:[i],a=r.join()+ua(s)+o+(t._measureText?"-spriting":"");return da.has(a)||da.set(a,function(t,e,i,n){t.save();const s=e.length;let o=0,r=n;for(let a=0;a<s;a++){const s=i[Math.min(a,i.length-1)];t.font=s.string;const l=e[a];o=Math.max(o,t.measureText(l).width+n),r+=s.lineHeight}return t.restore(),{width:o,height:r}}(t,r,s,o)),da.get(a)}function ba(t,e,i){const{x:n,y:s,width:o,height:r}=e;t.save(),ma(t,i);const a=ga(t,i);t.fillStyle=i.backgroundColor,t.beginPath(),Qe(t,{x:n,y:s,w:o,h:r,radius:Gr(ri(i.borderRadius),0,Math.min(o,r)/2)}),t.closePath(),t.fill(),a&&(t.shadowColor=i.borderShadowColor,t.stroke()),t.restore()}const ya={xScaleID:{min:"xMin",max:"xMax",start:"left",end:"right",startProp:"x",endProp:"x2"},yScaleID:{min:"yMin",max:"yMax",start:"bottom",end:"top",startProp:"y",endProp:"y2"}};function va(t,e,i){return yt(e="number"==typeof e?e:t.parse(e))?t.getPixelForValue(e):i}function _a(t,e,i){const n=e[i];if(n||"scaleID"===i)return n;const s=i.charAt(0),o=Object.values(t).filter((t=>t.axis&&t.axis===s));return o.length?o[0].id:s}function Aa(t,e){if(t){const i=t.options.reverse;return{start:va(t,e.min,i?e.end:e.start),end:va(t,e.max,i?e.start:e.end)}}}function wa(t,e){const{chartArea:i,scales:n}=t,s=n[_a(n,e,"xScaleID")],o=n[_a(n,e,"yScaleID")];let r=i.width/2,a=i.height/2;return s&&(r=va(s,e.xValue,s.left+s.width/2)),o&&(a=va(o,e.yValue,o.top+o.height/2)),{x:r,y:a}}function Ca(t,e){const i=t.scales,n=i[_a(i,e,"xScaleID")],s=i[_a(i,e,"yScaleID")];if(!n&&!s)return{};let{left:o,right:r}=n||t.chartArea,{top:a,bottom:l}=s||t.chartArea;const h=Ea(n,{min:e.xMin,max:e.xMax,start:o,end:r});o=h.start,r=h.end;const c=Ea(s,{min:e.yMin,max:e.yMax,start:l,end:a});return a=c.start,l=c.end,{x:o,y:a,x2:r,y2:l,width:r-o,height:l-a,centerX:o+(r-o)/2,centerY:a+(l-a)/2}}function Ma(t,e){if(!aa(e)){const i=Ca(t,e);let n=e.radius;n&&!isNaN(n)||(n=Math.min(i.width,i.height)/2,e.radius=n);const s=2*n,o=i.centerX+e.xAdjust,r=i.centerY+e.yAdjust;return{x:o-n,y:r-n,x2:o+n,y2:r+n,centerX:o,centerY:r,width:s,height:s,radius:n}}return function(t,e){const i=wa(t,e),n=2*e.radius;return{x:i.x-e.radius+e.xAdjust,y:i.y-e.radius+e.yAdjust,x2:i.x+e.radius+e.xAdjust,y2:i.y+e.radius+e.yAdjust,centerX:i.x+e.xAdjust,centerY:i.y+e.yAdjust,radius:e.radius,width:n,height:n}}(t,e)}function ka(t,e){const i=Ca(t,e);return i.initProperties=la(t,i,e),i.elements=[{type:"label",optionScope:"label",properties:Da(t,i,e),initProperties:i.initProperties}],i}function Ea(t,e){const i=Aa(t,e)||e;return{start:Math.min(i.start,i.end),end:Math.max(i.start,i.end)}}function Sa(t,e){const{start:i,end:n,borderWidth:s}=t,{position:o,padding:{start:r,end:a},adjust:l}=e;return i+s/2+l+sa(n-s-i-r-a-e.size,o)}function Da(t,e,i){const n=i.label;n.backgroundColor="transparent",n.callout.display=!1;const s=ra(n.position),o=ai(n.padding),r=xa(t.ctx,n),a=function({properties:t,options:e},i,n,s){const{x:o,x2:r,width:a}=t;return Sa({start:o,end:r,size:a,borderWidth:e.borderWidth},{position:n.x,padding:{start:s.left,end:s.right},adjust:e.label.xAdjust,size:i.width})}({properties:e,options:i},r,s,o),l=function({properties:t,options:e},i,n,s){const{y:o,y2:r,height:a}=t;return Sa({start:o,end:r,size:a,borderWidth:e.borderWidth},{position:n.y,padding:{start:s.top,end:s.bottom},adjust:e.label.yAdjust,size:i.height})}({properties:e,options:i},r,s,o),h=r.width+o.width,c=r.height+o.height;return{x:a,y:l,x2:a+h,y2:l+c,width:h,height:c,centerX:a+h/2,centerY:l+c/2,rotation:n.rotation}}function Pa(t,e,i){const n=Math.cos(i),s=Math.sin(i),o=e.x,r=e.y;return{x:o+n*(t.x-o)-s*(t.y-r),y:r+s*(t.x-o)+n*(t.y-r)}}const Ba=["enter","leave"],Ta=Ba.concat("click");function Oa({state:t,event:e},i,n,s){let o;for(const r of n)s.indexOf(r)<0&&(o=La(r.options[i]||t.listeners[i],r,e)||o);return o}function La(t,e,i){return!0===wt(t,[e.$context,i])}const Ra=["afterDraw","beforeDraw"];function Ia(t,e,i){if(t.hooked)return wt(e.options[i]||t.hooks[i],[e.$context])}function za(t,e,i,n){if(yt(e[i])&&!function(t,e,i){return Rt(t[e])||Rt(t[i])}(t.options,i,n)){const n=t[i]!==e[i];return t[i]=e[i],n}}function Wa(t,e){for(const i of["scaleID","xScaleID","yScaleID"]){const n=_a(e,t,i);n&&!e[n]&&Fa(t,i)&&console.warn(`No scale found with id '${n}' for annotation '${t.id}'`)}}function Fa(t,e){if("scaleID"===e)return!0;const i=e.charAt(0);for(const e of["Min","Max","Value"])if(Rt(t[i+e]))return!0;return!1}function ja(t,e,i,n){for(const s of i){const i=t[s];if(Rt(i)){const t=e.parse(i);n.min=Math.min(n.min,t),n.max=Math.max(n.max,t)}}}class Va extends gs{inRange(t,e,i,n){const{x:s,y:o}=Pa({x:t,y:e},this.getCenterPoint(n),Jt(-this.options.rotation));return Kr({x:s,y:o},this.getProps(["x","y","x2","y2"],n),i,this.options.borderWidth)}getCenterPoint(t){return Jr(this,t)}draw(t){t.save(),pa(t,this.getCenterPoint(),this.options.rotation),ba(t,this,this.options),t.restore()}get label(){return this.elements&&this.elements[0]}resolveElementProperties(t,e){return ka(t,e)}}Va.id="boxAnnotation",Va.defaults={adjustScaleRange:!0,backgroundShadowColor:"transparent",borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderRadius:0,borderShadowColor:"transparent",borderWidth:1,display:!0,init:void 0,label:{backgroundColor:"transparent",borderWidth:0,callout:{display:!1},color:"black",content:null,display:!1,drawTime:void 0,font:{family:void 0,lineHeight:void 0,size:void 0,style:void 0,weight:"bold"},height:void 0,opacity:void 0,padding:6,position:"center",rotation:void 0,textAlign:"start",textStrokeColor:void 0,textStrokeWidth:0,width:void 0,xAdjust:0,yAdjust:0,z:void 0},rotation:0,shadowBlur:0,shadowOffsetX:0,shadowOffsetY:0,xMax:void 0,xMin:void 0,xScaleID:void 0,yMax:void 0,yMin:void 0,yScaleID:void 0,z:0},Va.defaultRoutes={borderColor:"color",backgroundColor:"color"},Va.descriptors={label:{_fallback:!0}};const Na=["left","bottom","top","right"];class Ha extends gs{inRange(t,e,i,n){const{x:s,y:o}=Pa({x:t,y:e},this.getCenterPoint(n),Jt(-this.rotation));return Kr({x:s,y:o},this.getProps(["x","y","x2","y2"],n),i,this.options.borderWidth)}getCenterPoint(t){return Jr(this,t)}draw(t){const e=this.options,i=!Rt(this._visible)||this._visible;e.display&&e.content&&i&&(t.save(),pa(t,this.getCenterPoint(),this.rotation),function(t,e){const{pointX:i,pointY:n,options:s}=e,o=s.callout,r=o&&o.display&&function(t,e){const i=e.position;return Na.includes(i)?i:function(t,e){const{x:i,y:n,x2:s,y2:o,width:r,height:a,pointX:l,pointY:h,centerX:c,centerY:d,rotation:u}=t,f={x:c,y:d},p=e.start,g=oa(r,p),m=[i,i+g,i+g,s],x=[n+oa(a,p),o,n,o],b=[];for(let t=0;t<4;t++){const e=Pa({x:m[t],y:x[t]},f,Jt(u));b.push({position:Na[t],distance:ie(e,{x:l,y:h})})}return b.sort(((t,e)=>t.distance-e.distance))[0].position}(t,e)}(e,o);if(!r||function(t,e,i){const{pointX:n,pointY:s}=t,o=e.margin;let r=n,a=s;return"left"===i?r+=o:"right"===i?r-=o:"top"===i?a+=o:"bottom"===i&&(a-=o),t.inRange(r,a)}(e,o,r))return;t.save(),t.beginPath();if(!ga(t,o))return t.restore();const{separatorStart:a,separatorEnd:l}=function(t,e){const{x:i,y:n,x2:s,y2:o}=t,r=function(t,e){const{width:i,height:n,options:s}=t,o=s.callout.margin+s.borderWidth/2;return"right"===e?i+o:"bottom"===e?n+o:-o}(t,e);let a,l;return"left"===e||"right"===e?(a={x:i+r,y:n},l={x:a.x,y:o}):(a={x:i,y:n+r},l={x:s,y:a.y}),{separatorStart:a,separatorEnd:l}}(e,r),{sideStart:h,sideEnd:c}=function(t,e,i){const{y:n,width:s,height:o,options:r}=t,a=r.callout.start,l=function(t,e){const i=e.side;return"left"===t||"top"===t?-i:i}(e,r.callout);let h,c;return"left"===e||"right"===e?(h={x:i.x,y:n+oa(o,a)},c={x:h.x+l,y:h.y}):(h={x:i.x+oa(s,a),y:i.y},c={x:h.x,y:h.y+l}),{sideStart:h,sideEnd:c}}(e,r,a);(o.margin>0||0===s.borderWidth)&&(t.moveTo(a.x,a.y),t.lineTo(l.x,l.y)),t.moveTo(h.x,h.y),t.lineTo(c.x,c.y);const d=Pa({x:i,y:n},e.getCenterPoint(),Jt(-e.rotation));t.lineTo(d.x,d.y),t.stroke(),t.restore()}(t,this),ba(t,this,e),function(t,e,i){const n=i.content;if(fa(n))return t.save(),t.globalAlpha=function(t,e){const i=Gt(t)?t:e;return Gt(i)?qr(i,0,1):1}(i.opacity,n.style.opacity),t.drawImage(n,e.x,e.y,e.width,e.height),void t.restore();const s=xt(n)?n:[n],o=i.font,r=xt(o)?o.map((t=>li(t))):[li(o)],a=i.color,l=xt(a)?a:[a],h=function(t,e){const{x:i,width:n}=t,s=e.textAlign;return"center"===s?i+n/2:"end"===s||"right"===s?i+n:i}(e,i),c=e.y+i.textStrokeWidth/2;t.save(),t.textBaseline="middle",t.textAlign=i.textAlign,function(t,e){if(e.textStrokeWidth>0)return t.lineJoin="round",t.miterLimit=2,t.lineWidth=e.textStrokeWidth,t.strokeStyle=e.textStrokeColor,!0}(t,i)&&function(t,{x:e,y:i},n,s){t.beginPath();let o=0;n.forEach((function(n,r){const a=s[Math.min(r,s.length-1)],l=a.lineHeight;t.font=a.string,t.strokeText(n,e,i+l/2+o),o+=l})),t.stroke()}(t,{x:h,y:c},s,r),function(t,{x:e,y:i},n,{fonts:s,colors:o}){let r=0;n.forEach((function(n,a){const l=o[Math.min(a,o.length-1)],h=s[Math.min(a,s.length-1)],c=h.lineHeight;t.beginPath(),t.font=h.string,t.fillStyle=l,t.fillText(n,e,i+c/2+r),r+=c,t.fill()}))}(t,{x:h,y:c},s,{fonts:r,colors:l}),t.restore()}(t,function({x:t,y:e,width:i,height:n,options:s}){const o=s.borderWidth/2,r=ai(s.padding);return{x:t+r.left+o,y:e+r.top+o,width:i-r.left-r.right-s.borderWidth,height:n-r.top-r.bottom-s.borderWidth}}(this),e),t.restore())}resolveElementProperties(t,e){let i;if(aa(e))i=wa(t,e);else{const{centerX:n,centerY:s}=Ca(t,e);i={x:n,y:s}}const n=ai(e.padding),s=function(t,e,i,n){const s=e.width+n.width+i.borderWidth,o=e.height+n.height+i.borderWidth,r=ra(i.position,"center"),a=Ya(t.x,s,i.xAdjust,r.x),l=Ya(t.y,o,i.yAdjust,r.y);return{x:a,y:l,x2:a+s,y2:l+o,width:s,height:o,centerX:a+s/2,centerY:l+o/2}}(i,xa(t.ctx,e),e,n);return{initProperties:la(t,s,e),pointX:i.x,pointY:i.y,...s,rotation:e.rotation}}}function Ya(t,e,i=0,n){return t-sa(e,n)+i}Ha.id="labelAnnotation",Ha.defaults={adjustScaleRange:!0,backgroundColor:"transparent",backgroundShadowColor:"transparent",borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderRadius:0,borderShadowColor:"transparent",borderWidth:0,callout:{borderCapStyle:"butt",borderColor:void 0,borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:1,display:!1,margin:5,position:"auto",side:5,start:"50%"},color:"black",content:null,display:!0,font:{family:void 0,lineHeight:void 0,size:void 0,style:void 0,weight:void 0},height:void 0,init:void 0,opacity:void 0,padding:6,position:"center",rotation:0,shadowBlur:0,shadowOffsetX:0,shadowOffsetY:0,textAlign:"center",textStrokeColor:void 0,textStrokeWidth:0,width:void 0,xAdjust:0,xMax:void 0,xMin:void 0,xScaleID:void 0,xValue:void 0,yAdjust:0,yMax:void 0,yMin:void 0,yScaleID:void 0,yValue:void 0,z:0},Ha.defaultRoutes={borderColor:"color"};const $a=(t,e,i)=>({x:t.x+i*(e.x-t.x),y:t.y+i*(e.y-t.y)}),Xa=(t,e,i)=>$a(e,i,Math.abs((t-e.y)/(i.y-e.y))).x,Ua=(t,e,i)=>$a(e,i,Math.abs((t-e.x)/(i.x-e.x))).y,Za=t=>t*t,qa=(t,e,i,n)=>(1-n)*(1-n)*t+2*(1-n)*n*e+n*n*i,Ga=(t,e,i,n)=>({x:qa(t.x,e.x,i.x,n),y:qa(t.y,e.y,i.y,n)}),Ka=(t,e,i,n)=>2*(1-n)*(e-t)+2*n*(i-e),Ja=(t,e,i,n)=>-Math.atan2(Ka(t.x,e.x,i.x,n),Ka(t.y,e.y,i.y,n))+.5*Wt;class Qa extends gs{inRange(t,e,i,n){const s=this.options.borderWidth/2;if("x"!==i&&"y"!==i){const i={mouseX:t,mouseY:e},{path:o,ctx:r}=this;if(o){ga(r,this.options);const{chart:s}=this.$context,a=t*s.currentDevicePixelRatio,l=e*s.currentDevicePixelRatio,h=r.isPointInStroke(o,a,l)||il(this,i,n);return r.restore(),h}return function(t,{mouseX:e,mouseY:i},n=.001,s){const{x:o,y:r,x2:a,y2:l}=t.getProps(["x","y","x2","y2"],s),h=a-o,c=l-r,d=Za(h)+Za(c),u=0===d?-1:((e-o)*h+(i-r)*c)/d;let f,p;return u<0?(f=o,p=r):u>1?(f=a,p=l):(f=o+u*h,p=r+u*c),Za(e-f)+Za(i-p)<=n}(this,i,Za(s),n)||il(this,i,n)}return function(t,{mouseX:e,mouseY:i},n,{hBorderWidth:s,useFinalPosition:o}){const r=((t,e,{x:i,y:n,x2:s,y2:o},r)=>"y"===r?{start:Math.min(n,o),end:Math.max(n,o),value:e}:{start:Math.min(i,s),end:Math.max(i,s),value:t})(e,i,t.getProps(["x","y","x2","y2"],o),n);return r.value>=r.start-s&&r.value<=r.end+s||il(t,{mouseX:e,mouseY:i},o,n)}(this,{mouseX:t,mouseY:e},i,{hBorderWidth:s,useFinalPosition:n})}getCenterPoint(t){return Jr(this,t)}draw(t){const{x:e,y:i,x2:n,y2:s,cp:o,options:r}=this;if(t.save(),!ga(t,r))return t.restore();ma(t,r);const a=Math.sqrt(Math.pow(n-e,2)+Math.pow(s-i,2));if(r.curve&&o)return function(t,e,i,n){const{x:s,y:o,x2:r,y2:a,options:l}=e,{startOpts:h,endOpts:c,startAdjust:d,endAdjust:u}=ol(e),f={x:s,y:o},p={x:r,y:a},g=Ja(f,i,p,0),m=Ja(f,i,p,1)-Wt,x=Ga(f,i,p,d/n),b=Ga(f,i,p,1-u/n),y=new Path2D;t.beginPath(),y.moveTo(x.x,x.y),y.quadraticCurveTo(i.x,i.y,b.x,b.y),t.shadowColor=l.borderShadowColor,t.stroke(y),e.path=y,e.ctx=t,ll(t,x,{angle:g,adjust:d},h),ll(t,b,{angle:m,adjust:u},c)}(t,this,o,a),t.restore();const{startOpts:l,endOpts:h,startAdjust:c,endAdjust:d}=ol(this),u=Math.atan2(s-i,n-e);t.translate(e,i),t.rotate(u),t.beginPath(),t.moveTo(0+c,0),t.lineTo(a-d,0),t.shadowColor=r.borderShadowColor,t.stroke(),al(t,0,c,l),al(t,a,-d,h),t.restore()}get label(){return this.elements&&this.elements[0]}resolveElementProperties(t,e){const i=function(t,e){const{scales:i,chartArea:n}=t,s=i[e.scaleID],o={x:n.left,y:n.top,x2:n.right,y2:n.bottom};return s?function(t,e,i){const n=va(t,i.value,NaN),s=va(t,i.endValue,n);t.isHorizontal()?(e.x=n,e.x2=s):(e.y=n,e.y2=s)}(s,o,e):function(t,e,i){for(const n of Object.keys(ya)){const s=t[_a(t,i,n)];if(s){const{min:t,max:o,start:r,end:a,startProp:l,endProp:h}=ya[n],c=Aa(s,{min:i[t],max:i[o],start:s[r],end:s[a]});e[l]=c.start,e[h]=c.end}}}(i,o,e),o}(t,e),{x:n,y:s,x2:o,y2:r}=i,a=function({x:t,y:e,x2:i,y2:n},{top:s,right:o,bottom:r,left:a}){return!(t<a&&i<a||t>o&&i>o||e<s&&n<s||e>r&&n>r)}(i,t.chartArea),l=a?function(t,e,i){const{x:n,y:s}=el(t,e,i),{x:o,y:r}=el(e,t,i);return{x:n,y:s,x2:o,y2:r,width:Math.abs(o-n),height:Math.abs(r-s)}}({x:n,y:s},{x:o,y:r},t.chartArea):{x:n,y:s,x2:o,y2:r,width:Math.abs(o-n),height:Math.abs(r-s)};if(l.centerX=(o+n)/2,l.centerY=(r+s)/2,l.initProperties=la(t,l,e),e.curve){const t={x:l.x,y:l.y},i={x:l.x2,y:l.y2};l.cp=function(t,e,i){const{x:n,y:s,x2:o,y2:r,centerX:a,centerY:l}=t,h=Math.atan2(r-s,o-n),c=ra(e.controlPoint,0);return Pa({x:a+oa(i,c.x,!1),y:l+oa(i,c.y,!1)},{x:a,y:l},h)}(l,e,ie(t,i))}const h=function(t,e,i){const n=i.borderWidth,s=ai(i.padding),o=xa(t.ctx,i);return function(t,e,i,n){const{width:s,height:o,padding:r}=i,{xAdjust:a,yAdjust:l}=e,h={x:t.x,y:t.y},c={x:t.x2,y:t.y2},d="auto"===e.rotation?function(t){const{x:e,y:i,x2:n,y2:s}=t,o=Math.atan2(s-i,n-e);return o>Wt/2?o-Wt:o<Wt/-2?o+Wt:o}(t):Jt(e.rotation),u=function(t,e,i){const n=Math.cos(i),s=Math.sin(i);return{w:Math.abs(t*n)+Math.abs(e*s),h:Math.abs(t*s)+Math.abs(e*n)}}(s,o,d),f=function(t,e,i,n){let s;const o=function(t,e){const{x:i,x2:n,y:s,y2:o}=t,r=Math.min(s,o)-e.top,a=Math.min(i,n)-e.left,l=e.bottom-Math.max(s,o),h=e.right-Math.max(i,n);return{x:Math.min(a,h),y:Math.min(r,l),dx:a<=h?1:-1,dy:r<=l?1:-1}}(t,n);return s="start"===e.position?nl({w:t.x2-t.x,h:t.y2-t.y},i,0,o):"end"===e.position?1-nl({w:t.x-t.x2,h:t.y-t.y2},i,0,o):sa(1,e.position),s}(t,e,{labelSize:u,padding:r},n),p=t.cp?Ga(h,t.cp,c,f):$a(h,c,f),g={size:u.w,min:n.left,max:n.right,padding:r.left},m={size:u.h,min:n.top,max:n.bottom,padding:r.top},x=sl(p.x,g)+a,b=sl(p.y,m)+l;return{x:x-s/2,y:b-o/2,x2:x+s/2,y2:b+o/2,centerX:x,centerY:b,pointX:p.x,pointY:p.y,width:s,height:o,rotation:Qt(d)}}(e,i,{width:o.width+s.width+n,height:o.height+s.height+n,padding:s},t.chartArea)}(t,l,e.label);return h._visible=a,l.elements=[{type:"label",optionScope:"label",properties:h,initProperties:l.initProperties}],l}}Qa.id="lineAnnotation";const tl={backgroundColor:void 0,backgroundShadowColor:void 0,borderColor:void 0,borderDash:void 0,borderDashOffset:void 0,borderShadowColor:void 0,borderWidth:void 0,display:void 0,fill:void 0,length:void 0,shadowBlur:void 0,shadowOffsetX:void 0,shadowOffsetY:void 0,width:void 0};function el({x:t,y:e},i,{top:n,right:s,bottom:o,left:r}){return t<r&&(e=Ua(r,{x:t,y:e},i),t=r),t>s&&(e=Ua(s,{x:t,y:e},i),t=s),e<n&&(t=Xa(n,{x:t,y:e},i),e=n),e>o&&(t=Xa(o,{x:t,y:e},i),e=o),{x:t,y:e}}function il(t,{mouseX:e,mouseY:i},n,s){const o=t.label;return o.options.display&&o.inRange(e,i,s,n)}function nl(t,e,i,n){const{labelSize:s,padding:o}=e,r=t.w*n.dx,a=t.h*n.dy,l=r>0&&(s.w/2+o.left-n.x)/r,h=a>0&&(s.h/2+o.top-n.y)/a;return qr(Math.max(l,h),0,.25)}function sl(t,e){const{size:i,min:n,max:s,padding:o}=e,r=i/2;return i>s-n?(s+n)/2:(n>=t-o-r&&(t=n+o+r),s<=t+o+r&&(t=s-o-r),t)}function ol(t){const e=t.options,i=e.arrowHeads&&e.arrowHeads.start,n=e.arrowHeads&&e.arrowHeads.end;return{startOpts:i,endOpts:n,startAdjust:rl(t,i),endAdjust:rl(t,n)}}function rl(t,e){if(!e||!e.display)return 0;const{length:i,width:n}=e,s=t.options.borderWidth/2,o={x:i,y:n+s},r={x:0,y:s};return Math.abs(Xa(0,o,r))}function al(t,e,i,n){if(!n||!n.display)return;const{length:s,width:o,fill:r,backgroundColor:a,borderColor:l}=n,h=Math.abs(e-s)+i;t.beginPath(),ma(t,n),ga(t,n),t.moveTo(h,-o),t.lineTo(e+i,0),t.lineTo(h,o),!0===r?(t.fillStyle=a||l,t.closePath(),t.fill(),t.shadowColor="transparent"):t.shadowColor=n.borderShadowColor,t.stroke()}function ll(t,{x:e,y:i},{angle:n,adjust:s},o){o&&o.display&&(t.save(),t.translate(e,i),t.rotate(n),al(t,0,-s,o),t.restore())}Qa.defaults={adjustScaleRange:!0,arrowHeads:{display:!1,end:Object.assign({},tl),fill:!1,length:12,start:Object.assign({},tl),width:6},borderDash:[],borderDashOffset:0,borderShadowColor:"transparent",borderWidth:2,curve:!1,controlPoint:{y:"-50%"},display:!0,endValue:void 0,init:void 0,label:{backgroundColor:"rgba(0,0,0,0.8)",backgroundShadowColor:"transparent",borderCapStyle:"butt",borderColor:"black",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderRadius:6,borderShadowColor:"transparent",borderWidth:0,callout:Object.assign({},Ha.defaults.callout),color:"#fff",content:null,display:!1,drawTime:void 0,font:{family:void 0,lineHeight:void 0,size:void 0,style:void 0,weight:"bold"},height:void 0,opacity:void 0,padding:6,position:"center",rotation:0,shadowBlur:0,shadowOffsetX:0,shadowOffsetY:0,textAlign:"center",textStrokeColor:void 0,textStrokeWidth:0,width:void 0,xAdjust:0,yAdjust:0,z:void 0},scaleID:void 0,shadowBlur:0,shadowOffsetX:0,shadowOffsetY:0,value:void 0,xMax:void 0,xMin:void 0,xScaleID:void 0,yMax:void 0,yMin:void 0,yScaleID:void 0,z:0},Qa.descriptors={arrowHeads:{start:{_fallback:!0},end:{_fallback:!0},_fallback:!0}},Qa.defaultRoutes={borderColor:"color"};class hl extends gs{inRange(t,e,i,n){const s=this.options.rotation,o=this.options.borderWidth;if("x"!==i&&"y"!==i)return function(t,e,i,n){const{width:s,height:o,centerX:r,centerY:a}=e,l=s/2,h=o/2;if(l<=0||h<=0)return!1;const c=Jt(i||0),d=n/2||0,u=Math.cos(c),f=Math.sin(c),p=Math.pow(u*(t.x-r)+f*(t.y-a),2),g=Math.pow(f*(t.x-r)-u*(t.y-a),2);return p/Math.pow(l+d,2)+g/Math.pow(h+d,2)<=1.0001}({x:t,y:e},this.getProps(["width","height","centerX","centerY"],n),s,o);const{x:r,y:a,x2:l,y2:h}=this.getProps(["x","y","x2","y2"],n),c=o/2,d="y"===i?{start:a,end:h}:{start:r,end:l},u=Pa({x:t,y:e},this.getCenterPoint(n),Jt(-s));return u[i]>=d.start-c-Zr&&u[i]<=d.end+c+Zr}getCenterPoint(t){return Jr(this,t)}draw(t){const{width:e,height:i,centerX:n,centerY:s,options:o}=this;t.save(),pa(t,this.getCenterPoint(),o.rotation),ma(t,this.options),t.beginPath(),t.fillStyle=o.backgroundColor;const r=ga(t,o);t.ellipse(n,s,i/2,e/2,Wt/2,0,2*Wt),t.fill(),r&&(t.shadowColor=o.borderShadowColor,t.stroke()),t.restore()}get label(){return this.elements&&this.elements[0]}resolveElementProperties(t,e){return ka(t,e)}}hl.id="ellipseAnnotation",hl.defaults={adjustScaleRange:!0,backgroundShadowColor:"transparent",borderDash:[],borderDashOffset:0,borderShadowColor:"transparent",borderWidth:1,display:!0,init:void 0,label:Object.assign({},Va.defaults.label),rotation:0,shadowBlur:0,shadowOffsetX:0,shadowOffsetY:0,xMax:void 0,xMin:void 0,xScaleID:void 0,yMax:void 0,yMin:void 0,yScaleID:void 0,z:0},hl.defaultRoutes={borderColor:"color",backgroundColor:"color"},hl.descriptors={label:{_fallback:!0}};class cl extends gs{inRange(t,e,i,n){const{x:s,y:o,x2:r,y2:a,width:l}=this.getProps(["x","y","x2","y2","width"],n),h=this.options.borderWidth;if("x"!==i&&"y"!==i)return function(t,e,i,n){if(!t||!e||i<=0)return!1;const s=n/2;return Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2)<=Math.pow(i+s,2)}({x:t,y:e},this.getCenterPoint(n),l/2,h);const c=h/2,d="y"===i?{start:o,end:a,value:e}:{start:s,end:r,value:t};return d.value>=d.start-c&&d.value<=d.end+c}getCenterPoint(t){return Jr(this,t)}draw(t){const e=this.options,i=e.borderWidth;if(e.radius<.1)return;t.save(),t.fillStyle=e.backgroundColor,ma(t,e);const n=ga(t,e);(function(t,e,i,n){const{radius:s,options:o}=e,r=o.pointStyle,a=o.rotation;let l=(a||0)*Nt;if(fa(r))return t.save(),t.translate(i,n),t.rotate(l),t.drawImage(r,-r.width/2,-r.height/2,r.width,r.height),void t.restore();(t=>isNaN(t)||t<=0)(s)||function(t,{x:e,y:i,radius:n,rotation:s,style:o,rad:r}){let a,l,h,c;switch(t.beginPath(),o){default:t.arc(e,i,n,0,Ft),t.closePath();break;case"triangle":t.moveTo(e+Math.sin(r)*n,i-Math.cos(r)*n),r+=$t,t.lineTo(e+Math.sin(r)*n,i-Math.cos(r)*n),r+=$t,t.lineTo(e+Math.sin(r)*n,i-Math.cos(r)*n),t.closePath();break;case"rectRounded":c=.516*n,h=n-c,a=Math.cos(r+Yt)*h,l=Math.sin(r+Yt)*h,t.arc(e-a,i-l,c,r-Wt,r-Ht),t.arc(e+l,i-a,c,r-Ht,r),t.arc(e+a,i+l,c,r,r+Ht),t.arc(e-l,i+a,c,r+Ht,r+Wt),t.closePath();break;case"rect":if(!s){h=Math.SQRT1_2*n,t.rect(e-h,i-h,2*h,2*h);break}r+=Yt;case"rectRot":a=Math.cos(r)*n,l=Math.sin(r)*n,t.moveTo(e-a,i-l),t.lineTo(e+l,i-a),t.lineTo(e+a,i+l),t.lineTo(e-l,i+a),t.closePath();break;case"crossRot":r+=Yt;case"cross":a=Math.cos(r)*n,l=Math.sin(r)*n,t.moveTo(e-a,i-l),t.lineTo(e+a,i+l),t.moveTo(e+l,i-a),t.lineTo(e-l,i+a);break;case"star":a=Math.cos(r)*n,l=Math.sin(r)*n,t.moveTo(e-a,i-l),t.lineTo(e+a,i+l),t.moveTo(e+l,i-a),t.lineTo(e-l,i+a),r+=Yt,a=Math.cos(r)*n,l=Math.sin(r)*n,t.moveTo(e-a,i-l),t.lineTo(e+a,i+l),t.moveTo(e+l,i-a),t.lineTo(e-l,i+a);break;case"line":a=Math.cos(r)*n,l=Math.sin(r)*n,t.moveTo(e-a,i-l),t.lineTo(e+a,i+l);break;case"dash":t.moveTo(e,i),t.lineTo(e+Math.cos(r)*n,i+Math.sin(r)*n)}t.fill()}(t,{x:i,y:n,radius:s,rotation:a,style:r,rad:l})})(t,this,this.centerX,this.centerY),n&&!fa(e.pointStyle)&&(t.shadowColor=e.borderShadowColor,t.stroke()),t.restore(),e.borderWidth=i}resolveElementProperties(t,e){const i=Ma(t,e);return i.initProperties=la(t,i,e),i}}cl.id="pointAnnotation",cl.defaults={adjustScaleRange:!0,backgroundShadowColor:"transparent",borderDash:[],borderDashOffset:0,borderShadowColor:"transparent",borderWidth:1,display:!0,init:void 0,pointStyle:"circle",radius:10,rotation:0,shadowBlur:0,shadowOffsetX:0,shadowOffsetY:0,xAdjust:0,xMax:void 0,xMin:void 0,xScaleID:void 0,xValue:void 0,yAdjust:0,yMax:void 0,yMin:void 0,yScaleID:void 0,yValue:void 0,z:0},cl.defaultRoutes={borderColor:"color",backgroundColor:"color"};class dl extends gs{inRange(t,e,i,n){if("x"!==i&&"y"!==i)return this.options.radius>=.1&&this.elements.length>1&&function(t,e,i,n){let s=!1,o=t[t.length-1].getProps(["bX","bY"],n);for(const r of t){const t=r.getProps(["bX","bY"],n);t.bY>i!=o.bY>i&&e<(o.bX-t.bX)*(i-t.bY)/(o.bY-t.bY)+t.bX&&(s=!s),o=t}return s}(this.elements,t,e,n);const s=Pa({x:t,y:e},this.getCenterPoint(n),Jt(-this.options.rotation)),o=this.elements.map((t=>"y"===i?t.bY:t.bX)),r=Math.min(...o),a=Math.max(...o);return s[i]>=r&&s[i]<=a}getCenterPoint(t){return Jr(this,t)}draw(t){const{elements:e,options:i}=this;t.save(),t.beginPath(),t.fillStyle=i.backgroundColor,ma(t,i);const n=ga(t,i);let s=!0;for(const i of e)s?(t.moveTo(i.x,i.y),s=!1):t.lineTo(i.x,i.y);t.closePath(),t.fill(),n&&(t.shadowColor=i.borderShadowColor,t.stroke()),t.restore()}resolveElementProperties(t,e){const i=Ma(t,e),{sides:n,rotation:s}=e,o=[],r=2*Wt/n;let a=s*Nt;for(let s=0;s<n;s++,a+=r){const n=ul(i,e,a);n.initProperties=la(t,i,e),o.push(n)}return i.elements=o,i}}function ul({centerX:t,centerY:e},{radius:i,borderWidth:n},s){const o=n/2,r=Math.sin(s),a=Math.cos(s),l={x:t+r*i,y:e-a*i};return{type:"point",optionScope:"point",properties:{x:l.x,y:l.y,centerX:l.x,centerY:l.y,bX:t+r*(i+o),bY:e-a*(i+o)}}}dl.id="polygonAnnotation",dl.defaults={adjustScaleRange:!0,backgroundShadowColor:"transparent",borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderShadowColor:"transparent",borderWidth:1,display:!0,init:void 0,point:{radius:0},radius:10,rotation:0,shadowBlur:0,shadowOffsetX:0,shadowOffsetY:0,sides:3,xAdjust:0,xMax:void 0,xMin:void 0,xScaleID:void 0,xValue:void 0,yAdjust:0,yMax:void 0,yMin:void 0,yScaleID:void 0,yValue:void 0,z:0},dl.defaultRoutes={borderColor:"color",backgroundColor:"color"};const fl={box:Va,ellipse:hl,label:Ha,line:Qa,point:cl,polygon:dl};Object.keys(fl).forEach((t=>{We.describe(`elements.${fl[t].id}`,{_fallback:"plugins.annotation.common"})}));const pl={update:Object.assign},gl=Ta.concat(Ra),ml=(t,e)=>bt(e)?wl(t,e):t,xl=t=>"color"===t||"font"===t;function bl(t="line"){return fl[t]?t:(console.warn(`Unknown annotation type: '${t}', defaulting to 'line'`),"line")}function yl(t){return isNaN(t.x)||isNaN(t.y)}function vl(t,e,i,n){const s=t.elements||(t.elements=[]);s.length=e.length;for(let t=0;t<e.length;t++){const o=e[t],r=o.properties,a=_l(s,t,o.type,o.initProperties),l=i[o.optionScope].override(o);r.options=Al(l),n.update(a,r)}}function _l(t,e,i,n){const s=fl[bl(i)];let o=t[e];return o&&o instanceof s||(o=t[e]=new s,Object.assign(o,n)),o}function Al(t){const e=fl[bl(t.type)],i={};i.id=t.id,i.type=t.type,i.drawTime=t.drawTime,Object.assign(i,wl(t,e.defaults),wl(t,e.defaultRoutes));for(const e of gl)i[e]=t[e];return i}function wl(t,e){const i={};for(const n of Object.keys(e)){const s=e[n],o=t[n];xl(n)&&xt(o)?i[n]=o.map((t=>ml(t,s))):i[n]=ml(o,s)}return i}function Cl(t,e,i){return e.$context||(e.$context=Object.assign(Object.create(t.getContext()),{element:e,id:i.id,type:"annotation"}))}const Ml=new Map,kl=Ta.concat(Ra);var El={id:"annotation",version:"3.0.1",beforeRegister(){!function(t,e,i,n=!0){const s=i.split(".");let o=0;for(const r of e.split(".")){const a=s[o++];if(parseInt(r,10)<parseInt(a,10))break;if(Ur(a,r)){if(n)throw new Error(`${t} v${i} is not supported. v${e} or newer is required.`);return!1}}}("chart.js","4.0",Qs.version)},afterRegister(){Qs.register(fl)},afterUnregister(){Qs.unregister(fl)},beforeInit(t){Ml.set(t,{annotations:[],elements:[],visibleElements:[],listeners:{},listened:!1,moveListened:!1,hooks:{},hooked:!1,hovered:[]})},beforeUpdate(t,e,i){const n=Ml.get(t).annotations=[];let s=i.annotations;bt(s)?Object.keys(s).forEach((t=>{const e=s[t];bt(e)&&(e.id=t,n.push(e))})):xt(s)&&n.push(...s),function(t,e){for(const i of t)Wa(i,e)}(n,t.scales)},afterDataLimits(t,e){const i=Ml.get(t);!function(t,e,i){const n=function(t,e,i){const n=e.axis,s=e.id,o=n+"ScaleID",r={min:_t(e.min,Number.NEGATIVE_INFINITY),max:_t(e.max,Number.POSITIVE_INFINITY)};for(const a of i)a.scaleID===s?ja(a,e,["value","endValue"],r):_a(t,a,o)===s&&ja(a,e,[n+"Min",n+"Max",n+"Value"],r);return r}(t.scales,e,i);let s=za(e,n,"min","suggestedMin");s=za(e,n,"max","suggestedMax")||s,s&&It(e.handleTickRangeOptions)&&e.handleTickRangeOptions()}(t,e.scale,i.annotations.filter((t=>t.display&&t.adjustScaleRange)))},afterUpdate(t,e,i){const n=Ml.get(t);!function(t,e,i){e.listened=ha(i,Ta,e.listeners),e.moveListened=!1,e._getElements=$r,Ba.forEach((t=>{It(i[t])&&(e.moveListened=!0)})),e.listened&&e.moveListened||e.annotations.forEach((t=>{!e.listened&&It(t.click)&&(e.listened=!0),e.moveListened||Ba.forEach((i=>{It(t[i])&&(e.listened=!0,e.moveListened=!0)}))}))}(0,n,i),function(t,e,i,n){const s=function(t,e,i){return"reset"===i||"none"===i||"resize"===i?pl:new an(t,e)}(t,i.animations,n),o=e.annotations,r=function(t,e){const i=e.length,n=t.length;if(n<i){const e=i-n;t.splice(n,0,...new Array(e))}else n>i&&t.splice(i,n-i);return t}(e.elements,o);for(let e=0;e<o.length;e++){const i=o[e],n=_l(r,e,i.type),a=i.setContext(Cl(t,n,i)),l=n.resolveElementProperties(t,a);l.skip=yl(l),"elements"in l&&(vl(n,l.elements,a,s),delete l.elements),Rt(n.x)||Object.assign(n,l),Object.assign(n,l.initProperties),l.options=Al(a),s.update(n,l)}}(t,n,i,e.mode),n.visibleElements=n.elements.filter((t=>!t.skip&&t.options.display)),function(t,e,i){const n=e.visibleElements;e.hooked=ha(i,Ra,e.hooks),e.hooked||n.forEach((t=>{e.hooked||Ra.forEach((i=>{It(t.options[i])&&(e.hooked=!0)}))}))}(0,n,i)},beforeDatasetsDraw(t,e,i){Sl(t,"beforeDatasetsDraw",i.clip)},afterDatasetsDraw(t,e,i){Sl(t,"afterDatasetsDraw",i.clip)},beforeDraw(t,e,i){Sl(t,"beforeDraw",i.clip)},afterDraw(t,e,i){Sl(t,"afterDraw",i.clip)},beforeEvent(t,e,i){(function(t,e,i){if(t.listened)switch(e.type){case"mousemove":case"mouseout":return function(t,e,i){if(!t.moveListened)return;let n;n="mousemove"===e.type?$r(t,e,i.interaction):[];const s=t.hovered;t.hovered=n;const o={state:t,event:e};let r=Oa(o,"leave",s,n);return Oa(o,"enter",n,s)||r}(t,e,i);case"click":return function(t,e,i){const n=t.listeners,s=$r(t,e,i.interaction);let o;for(const t of s)o=La(t.options.click||n.click,t,e)||o;return o}(t,e,i)}})(Ml.get(t),e.event,i)&&(e.changed=!0)},afterDestroy(t){Ml.delete(t)},_getState:t=>Ml.get(t),defaults:{animations:{numbers:{properties:["x","y","x2","y2","width","height","centerX","centerY","pointX","pointY","radius"],type:"number"}},clip:!0,interaction:{mode:void 0,axis:void 0,intersect:void 0},common:{drawTime:"afterDatasetsDraw",init:!1,label:{}}},descriptors:{_indexable:!1,_scriptable:t=>!kl.includes(t)&&"init"!==t,annotations:{_allKeys:!1,_fallback:(t,e)=>`elements.${fl[bl(e.type)].id}`},interaction:{_fallback:!0},common:{label:{_indexable:xl,_fallback:!0},_indexable:xl}},additionalOptionScopes:[""]};function Sl(t,e,i){const{ctx:n,chartArea:s}=t,o=Ml.get(t);i&&Xe(n,s);const r=function(t,e){const i=[];for(const n of t)if(n.options.drawTime===e&&i.push({element:n,main:!0}),n.elements&&n.elements.length)for(const t of n.elements)t.options.display&&t.options.drawTime===e&&i.push({element:t});return i}(o.visibleElements,e).sort(((t,e)=>t.element.options.z-e.element.options.z));for(const t of r)Dl(n,s,o,t);i&&Ue(n)}function Dl(t,e,i,n){const s=n.element;n.main?(Ia(i,s,"beforeDraw"),s.draw(t,e),Ia(i,s,"afterDraw")):s.draw(t,e)}var Pl=i(988),Bl={};Bl.styleTagTransform=u(),Bl.setAttributes=l(),Bl.insert=r().bind(null,"head"),Bl.domAPI=s(),Bl.insertStyleElement=c(),e()(Pl.Z,Bl),Pl.Z&&Pl.Z.locals&&Pl.Z.locals;class Tl{constructor(){Hr.register(El),this.container=document.createElement("div"),this.container.id="graphContainer",this.btnBar=document.createElement("div"),this.btnBar.id="btnBar",this.btnTemp=document.createElement("div"),this.btnTemp.innerText="Temperature",this.btnTemp.id="btnTemp",this.btnTemp.classList.add("selected"),this.btnRain=document.createElement("div"),this.btnRain.innerText="Chance of rain",this.btnRain.id="btnRain",this.settingWhichGraph="temp",this.btnBar.append(this.btnTemp,this.btnRain),this.container.append(this.btnBar),this.bindEvents()}bindEvents(){x.on("renderGraph",(t=>{let e;"temp"===this.settingWhichGraph?e=`temp_${_.tempUnits}`:"rain"===this.settingWhichGraph&&(e="chance_of_rain");const i=Object.values(_.cachedData.forecast.forecastday[t].hour),n=[];i.forEach((t=>{const i=new Date(t.time).getHours();n.push({hour:i,temp:t[e]})}));const s=0===t;this.render({parsedData:n,isCurrentDay:s})})),this.btnTemp.addEventListener("click",(()=>{this.settingWhichGraph="temp",this.btnTemp.classList.add("selected"),this.btnRain.classList.remove("selected"),x.emit("renderGraph",_.selectedDay)})),this.btnRain.addEventListener("click",(()=>{this.settingWhichGraph="rain",this.btnRain.classList.add("selected"),this.btnTemp.classList.remove("selected"),x.emit("renderGraph",_.selectedDay)}))}render(t){const e=t.isCurrentDay?1:0,i=new Date(_.cachedData.current.last_updated).getHours();let n,s;"temp"===this.settingWhichGraph?(n="°",s="#1A83DD"):"rain"===this.settingWhichGraph&&(n="%",s="#dd1a79"),this.container.contains(this.canvas)&&this.container.removeChild(this.canvas),this.canvas=document.createElement("canvas"),this.container.append(this.canvas),this.cachedChart=new Hr(this.canvas,{type:"line",data:{labels:t.parsedData.map((t=>`${t.hour}:00`)),datasets:[{data:t.parsedData.map((t=>t.temp)),borderColor:s,tension:.2}]},options:{scales:{y:{beginAtZero:!1,ticks:{callback:t=>`${t}${n}`,stepSize:1}}},maintainAspectRatio:!1,responsive:!0,plugins:{annotation:{annotations:{line1:{adjustScaleRange:!0,drawTime:"afterDatasetsDraw",type:"line",scaleID:"x",borderColor:"orange",borderWidth:e,value:i}}},legend:{display:!1}},annotations:{line1:{}}}})}}var Ol=i(830),Ll={};Ll.styleTagTransform=u(),Ll.setAttributes=l(),Ll.insert=r().bind(null,"head"),Ll.domAPI=s(),Ll.insertStyleElement=c(),e()(Ol.Z,Ll),Ol.Z&&Ol.Z.locals&&Ol.Z.locals;class Rl{constructor(){this.container=document.createElement("div"),this.container.id="appContainer",this.loading=new z,this.header=new E,this.graph=new Tl,this.daysBar=new O(8),this.container.append(this.header.container,this.graph.container,this.daysBar.container),Rl.bindEvents(this),Rl.apiCall()}static apiCall(t){(async function(t){x.emit("loading");const e=t||await async function(){const t=await fetch("https://ipapi.co/json/"),e=await t.json();return"LBR"!==t.country_code_iso3&&"MMR"!==t.country_code_iso3&&"USA"!==t.country_code_iso3||(_.tempUnits="f",_.windUnits="mph"),e.city}().catch(console.log),i=await fetch(`https://api.weatherapi.com/v1/forecast.json?key=6b50d5938f0b4173a06202148231208&q=${e}&days=10&aqi=no&alerts=no\n    `),n=await i.json();return x.emit("stopLoading"),n})(t).then((t=>{_.cachedData=t,x.emit("renderHeader",0),x.emit("renderDaysBar"),x.emit("renderGraph",0),x.emit("renderHourly",0)})).catch(console.log)}static bindEvents(t){x.on("apiCall",(t=>{Rl.apiCall(t)})),x.on("loading",(()=>{t.container.append(t.loading.container)})),x.on("stopLoading",(()=>{t.loading.container.remove()}))}}const Il=document.querySelector("body"),zl=new Rl;Il.append(zl.container)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,