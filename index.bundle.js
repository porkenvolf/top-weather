/*! For license information please see index.bundle.js.LICENSE.txt */
(()=>{"use strict";var t={514:(t,e,i)=>{i.d(e,{Z:()=>h});var n=i(537),s=i.n(n),o=i(645),r=i.n(o),a=i(728),l=r()(s());l.i(a.Z),l.push([t.id,"#appContainer {\n  position: relative;\n  border-radius: 10px;\n  display: flex;\n  flex-direction: column;\n  width: min(var(--minWidth), 100%);\n  padding: 10px;\n  gap: 15px;\n  overflow: hidden;\n}\n","",{version:3,sources:["webpack://./src/css/components/App.css"],names:[],mappings:"AAEA;EACE,kBAAkB;EAClB,mBAAmB;EACnB,aAAa;EACb,sBAAsB;EACtB,iCAAiC;EACjC,aAAa;EACb,SAAS;EACT,gBAAgB;AAClB",sourcesContent:["@import url(../variables.css);\n\n#appContainer {\n  position: relative;\n  border-radius: 10px;\n  display: flex;\n  flex-direction: column;\n  width: min(var(--minWidth), 100%);\n  padding: 10px;\n  gap: 15px;\n  overflow: hidden;\n}\n"],sourceRoot:""}]);const h=l},738:(t,e,i)=>{i.d(e,{Z:()=>h});var n=i(537),s=i.n(n),o=i(645),r=i.n(o),a=i(728),l=r()(s());l.i(a.Z),l.push([t.id,"#dayContainer {\n  flex: 1 0 auto;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: 1rem 1fr 1rem;\n  padding: 5px; /* \n  border: 2px solid grey; */\n  border-radius: 10px;\n  gap: 5px;\n  cursor: pointer;\n}\n\n#dayDay {\n  grid-row: 1;\n  grid-column: 1/-1;\n  text-align: center;\n}\n#dayIcon {\n  grid-row: 2;\n  grid-column: 1/-1;\n  align-self: center;\n  justify-self: center;\n  width: 100%;\n}\n#dayMax {\n  grid-row: 3;\n  grid-column: 1;\n  text-align: center;\n\n  font-size: 0.8rem;\n}\n#dayMin {\n  grid-row: 3;\n  grid-column: 2;\n  text-align: center;\n  font-size: 0.8rem;\n  color: var(--textMid);\n}\n#dayContainer.selected {\n  background: var(--bgMid);\n}\n","",{version:3,sources:["webpack://./src/css/components/Day.css"],names:[],mappings:"AAEA;EACE,cAAc;EACd,aAAa;EACb,8BAA8B;EAC9B,iCAAiC;EACjC,YAAY,EAAE;2BACW;EACzB,mBAAmB;EACnB,QAAQ;EACR,eAAe;AACjB;;AAEA;EACE,WAAW;EACX,iBAAiB;EACjB,kBAAkB;AACpB;AACA;EACE,WAAW;EACX,iBAAiB;EACjB,kBAAkB;EAClB,oBAAoB;EACpB,WAAW;AACb;AACA;EACE,WAAW;EACX,cAAc;EACd,kBAAkB;;EAElB,iBAAiB;AACnB;AACA;EACE,WAAW;EACX,cAAc;EACd,kBAAkB;EAClB,iBAAiB;EACjB,qBAAqB;AACvB;AACA;EACE,wBAAwB;AAC1B",sourcesContent:['@import url("../variables.css");\n\n#dayContainer {\n  flex: 1 0 auto;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: 1rem 1fr 1rem;\n  padding: 5px; /* \n  border: 2px solid grey; */\n  border-radius: 10px;\n  gap: 5px;\n  cursor: pointer;\n}\n\n#dayDay {\n  grid-row: 1;\n  grid-column: 1/-1;\n  text-align: center;\n}\n#dayIcon {\n  grid-row: 2;\n  grid-column: 1/-1;\n  align-self: center;\n  justify-self: center;\n  width: 100%;\n}\n#dayMax {\n  grid-row: 3;\n  grid-column: 1;\n  text-align: center;\n\n  font-size: 0.8rem;\n}\n#dayMin {\n  grid-row: 3;\n  grid-column: 2;\n  text-align: center;\n  font-size: 0.8rem;\n  color: var(--textMid);\n}\n#dayContainer.selected {\n  background: var(--bgMid);\n}\n'],sourceRoot:""}]);const h=l},132:(t,e,i)=>{i.d(e,{Z:()=>h});var n=i(537),s=i.n(n),o=i(645),r=i.n(o),a=i(728),l=r()(s());l.i(a.Z),l.push([t.id,"#container {\n  margin: 10px 0;\n  display: flex;\n  gap: 10px;\n  scroll-margin: 20px;\n}\n\n@media (max-width: 725px) {\n  /*  FIX: doesn't work witn var() */\n  #container {\n    overflow-x: scroll;\n  }\n}\n","",{version:3,sources:["webpack://./src/css/components/DaysBar.css"],names:[],mappings:"AAEA;EACE,cAAc;EACd,aAAa;EACb,SAAS;EACT,mBAAmB;AACrB;;AAEA;EACE,kCAAkC;EAClC;IACE,kBAAkB;EACpB;AACF",sourcesContent:['@import url("../variables.css");\n\n#container {\n  margin: 10px 0;\n  display: flex;\n  gap: 10px;\n  scroll-margin: 20px;\n}\n\n@media (max-width: 725px) {\n  /*  FIX: doesn\'t work witn var() */\n  #container {\n    overflow-x: scroll;\n  }\n}\n'],sourceRoot:""}]);const h=l},884:(t,e,i)=>{i.d(e,{Z:()=>h});var n=i(537),s=i.n(n),o=i(645),r=i.n(o),a=i(728),l=r()(s());l.i(a.Z),l.push([t.id,"#graphContainer {\n  position: relative;\n  width: 100%;\n  height: 200px;\n  color: var(--textDark);\n  font-size: 0.8rem;\n}\n#graphContainer #btnBar {\n  display: flex;\n  gap: 15px;\n}\n#graphContainer #btnBar div {\n  cursor: pointer;\n}\n#graphContainer #btnTemp.selected {\n  border-bottom: 3px solid #1a83dd;\n  color: var(--textLight);\n}\n#graphContainer #btnRain.selected {\n  border-bottom: 3px solid #dd1a79;\n  color: var(--textLight);\n}\n","",{version:3,sources:["webpack://./src/css/components/Graph.css"],names:[],mappings:"AACA;EACE,kBAAkB;EAClB,WAAW;EACX,aAAa;EACb,sBAAsB;EACtB,iBAAiB;AACnB;AACA;EACE,aAAa;EACb,SAAS;AACX;AACA;EACE,eAAe;AACjB;AACA;EACE,gCAAgC;EAChC,uBAAuB;AACzB;AACA;EACE,gCAAgC;EAChC,uBAAuB;AACzB",sourcesContent:['@import url("../variables.css");\n#graphContainer {\n  position: relative;\n  width: 100%;\n  height: 200px;\n  color: var(--textDark);\n  font-size: 0.8rem;\n}\n#graphContainer #btnBar {\n  display: flex;\n  gap: 15px;\n}\n#graphContainer #btnBar div {\n  cursor: pointer;\n}\n#graphContainer #btnTemp.selected {\n  border-bottom: 3px solid #1a83dd;\n  color: var(--textLight);\n}\n#graphContainer #btnRain.selected {\n  border-bottom: 3px solid #dd1a79;\n  color: var(--textLight);\n}\n'],sourceRoot:""}]);const h=l},874:(t,e,i)=>{i.d(e,{Z:()=>h});var n=i(537),s=i.n(n),o=i(645),r=i.n(o),a=i(728),l=r()(s());l.i(a.Z),l.push([t.id,"#headerContainer {\n  display: grid;\n  grid-template-columns: 5rem 5rem 1fr 1fr;\n}\n#headerIcon {\n  grid-column: 1;\n  grid-row: 1;\n  width: 100%;\n  align-self: center;\n  justify-self: center;\n}\n#headerTemperature {\n  grid-column: 2;\n  grid-row: 1;\n  font-size: 3rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n#headerHumidity {\n  grid-column: 1/3;\n  grid-row: 3;\n  font-size: 0.8rem;\n  color: var(--textMid);\n}\n#headerWind {\n  grid-column: 1/3;\n  grid-row: 5;\n  font-size: 0.8rem;\n  color: var(--textMid);\n}\n\n#headerChanceRain {\n  grid-column: 1/3;\n  grid-row: 4;\n  color: var(--textMid);\n  font-size: 0.8rem;\n}\n\n#headerDay {\n  grid-column: 3/6;\n  grid-row: 4;\n  text-align: end;\n  color: var(--textMid);\n  font-size: 0.8rem;\n}\n\n#headerCondition {\n  grid-column: 3/6;\n  grid-row: 5;\n  text-align: end;\n  color: var(--textMid);\n  font-size: 0.8rem;\n}\n\n#searchContainer {\n  grid-column: 5/6;\n  grid-row: 1;\n}\n\n#headerLocation {\n  grid-column: 3/6;\n  grid-row: 3;\n  text-align: end;\n  color: var(--textMid);\n  font-size: 0.8rem;\n}\n\n#unitSelectorContainer {\n  grid-row: 1;\n  grid-column: 3/5;\n}\n\n@media (max-width: 475px) {\n  #searchContainer {\n    grid-row: 2;\n    grid-column: 1/6;\n    margin: 10px 0;\n  }\n}\n","",{version:3,sources:["webpack://./src/css/components/Header.css"],names:[],mappings:"AAEA;EACE,aAAa;EACb,wCAAwC;AAC1C;AACA;EACE,cAAc;EACd,WAAW;EACX,WAAW;EACX,kBAAkB;EAClB,oBAAoB;AACtB;AACA;EACE,cAAc;EACd,WAAW;EACX,eAAe;EACf,aAAa;EACb,mBAAmB;EACnB,uBAAuB;AACzB;AACA;EACE,gBAAgB;EAChB,WAAW;EACX,iBAAiB;EACjB,qBAAqB;AACvB;AACA;EACE,gBAAgB;EAChB,WAAW;EACX,iBAAiB;EACjB,qBAAqB;AACvB;;AAEA;EACE,gBAAgB;EAChB,WAAW;EACX,qBAAqB;EACrB,iBAAiB;AACnB;;AAEA;EACE,gBAAgB;EAChB,WAAW;EACX,eAAe;EACf,qBAAqB;EACrB,iBAAiB;AACnB;;AAEA;EACE,gBAAgB;EAChB,WAAW;EACX,eAAe;EACf,qBAAqB;EACrB,iBAAiB;AACnB;;AAEA;EACE,gBAAgB;EAChB,WAAW;AACb;;AAEA;EACE,gBAAgB;EAChB,WAAW;EACX,eAAe;EACf,qBAAqB;EACrB,iBAAiB;AACnB;;AAEA;EACE,WAAW;EACX,gBAAgB;AAClB;;AAEA;EACE;IACE,WAAW;IACX,gBAAgB;IAChB,cAAc;EAChB;AACF",sourcesContent:['@import url("../variables.css");\n\n#headerContainer {\n  display: grid;\n  grid-template-columns: 5rem 5rem 1fr 1fr;\n}\n#headerIcon {\n  grid-column: 1;\n  grid-row: 1;\n  width: 100%;\n  align-self: center;\n  justify-self: center;\n}\n#headerTemperature {\n  grid-column: 2;\n  grid-row: 1;\n  font-size: 3rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n#headerHumidity {\n  grid-column: 1/3;\n  grid-row: 3;\n  font-size: 0.8rem;\n  color: var(--textMid);\n}\n#headerWind {\n  grid-column: 1/3;\n  grid-row: 5;\n  font-size: 0.8rem;\n  color: var(--textMid);\n}\n\n#headerChanceRain {\n  grid-column: 1/3;\n  grid-row: 4;\n  color: var(--textMid);\n  font-size: 0.8rem;\n}\n\n#headerDay {\n  grid-column: 3/6;\n  grid-row: 4;\n  text-align: end;\n  color: var(--textMid);\n  font-size: 0.8rem;\n}\n\n#headerCondition {\n  grid-column: 3/6;\n  grid-row: 5;\n  text-align: end;\n  color: var(--textMid);\n  font-size: 0.8rem;\n}\n\n#searchContainer {\n  grid-column: 5/6;\n  grid-row: 1;\n}\n\n#headerLocation {\n  grid-column: 3/6;\n  grid-row: 3;\n  text-align: end;\n  color: var(--textMid);\n  font-size: 0.8rem;\n}\n\n#unitSelectorContainer {\n  grid-row: 1;\n  grid-column: 3/5;\n}\n\n@media (max-width: 475px) {\n  #searchContainer {\n    grid-row: 2;\n    grid-column: 1/6;\n    margin: 10px 0;\n  }\n}\n'],sourceRoot:""}]);const h=l},55:(t,e,i)=>{i.d(e,{Z:()=>h});var n=i(537),s=i.n(n),o=i(645),r=i.n(o),a=i(728),l=r()(s());l.i(a.Z),l.push([t.id,"#loadingContainer {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: var(--bgDark);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\nimg.loadingWheel {\n  animation: rotate 1s infinite linear;\n  height: 10rem;\n  width: auto;\n  filter: invert(1) brightness(0.8);\n}\n@keyframes rotate {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n","",{version:3,sources:["webpack://./src/css/components/Loading.css"],names:[],mappings:"AAEA;EACE,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,WAAW;EACX,YAAY;EACZ,yBAAyB;EACzB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;AACA;EACE,oCAAoC;EACpC,aAAa;EACb,WAAW;EACX,iCAAiC;AACnC;AACA;EACE;IACE,uBAAuB;EACzB;EACA;IACE,yBAAyB;EAC3B;AACF",sourcesContent:['@import url("../variables.css");\n\n#loadingContainer {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: var(--bgDark);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\nimg.loadingWheel {\n  animation: rotate 1s infinite linear;\n  height: 10rem;\n  width: auto;\n  filter: invert(1) brightness(0.8);\n}\n@keyframes rotate {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n'],sourceRoot:""}]);const h=l},558:(t,e,i)=>{i.d(e,{Z:()=>h});var n=i(537),s=i.n(n),o=i(645),r=i.n(o),a=i(728),l=r()(s());l.i(a.Z),l.push([t.id,"#searchContainer {\n  display: flex;\n  justify-content: flex-end;\n}\ninput {\n  flex: 1 1 100%;\n  /* max-width: calc(var(--minWidth) / 2); */\n  padding: 10px;\n  border-radius: 50px;\n  border: 2px solid var(--textDark);\n  background: var(--bgMid);\n  color: var(--textLight);\n  height: 1rem;\n  align-self: center;\n}\n","",{version:3,sources:["webpack://./src/css/components/SearchBar.css"],names:[],mappings:"AACA;EACE,aAAa;EACb,yBAAyB;AAC3B;AACA;EACE,cAAc;EACd,0CAA0C;EAC1C,aAAa;EACb,mBAAmB;EACnB,iCAAiC;EACjC,wBAAwB;EACxB,uBAAuB;EACvB,YAAY;EACZ,kBAAkB;AACpB",sourcesContent:['@import url("../variables.css");\n#searchContainer {\n  display: flex;\n  justify-content: flex-end;\n}\ninput {\n  flex: 1 1 100%;\n  /* max-width: calc(var(--minWidth) / 2); */\n  padding: 10px;\n  border-radius: 50px;\n  border: 2px solid var(--textDark);\n  background: var(--bgMid);\n  color: var(--textLight);\n  height: 1rem;\n  align-self: center;\n}\n'],sourceRoot:""}]);const h=l},224:(t,e,i)=>{i.d(e,{Z:()=>a});var n=i(537),s=i.n(n),o=i(645),r=i.n(o)()(s());r.push([t.id,"#titleContainer {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 2px solid grey;\n  gap: 15px;\n  font-size: 2rem;\n  font-weight: bold;\n  padding-bottom: 5px;\n}\n#titleContainer img {\n  height: 2.5rem;\n}\n","",{version:3,sources:["webpack://./src/css/components/Title.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,6BAA6B;EAC7B,SAAS;EACT,eAAe;EACf,iBAAiB;EACjB,mBAAmB;AACrB;AACA;EACE,cAAc;AAChB",sourcesContent:["#titleContainer {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 2px solid grey;\n  gap: 15px;\n  font-size: 2rem;\n  font-weight: bold;\n  padding-bottom: 5px;\n}\n#titleContainer img {\n  height: 2.5rem;\n}\n"],sourceRoot:""}]);const a=r},629:(t,e,i)=>{i.d(e,{Z:()=>h});var n=i(537),s=i.n(n),o=i(645),r=i.n(o),a=i(728),l=r()(s());l.i(a.Z),l.push([t.id,'#unitSelectorContainer {\n  display: flex;\n  align-items: start;\n}\n\n#unitSelectorContainer div {\n  padding-left: 5px;\n  margin-top: 1.15rem;\n  color: var(--textDark);\n  cursor: pointer;\n}\n\n#unitSelectorContainer div:last-child::before {\n  content: "|";\n  color: var(--textDark);\n}\n\n#unitSelectorContainer .selected {\n  color: var(--textLight);\n}\n',"",{version:3,sources:["webpack://./src/css/components/UnitSelector.css"],names:[],mappings:"AAEA;EACE,aAAa;EACb,kBAAkB;AACpB;;AAEA;EACE,iBAAiB;EACjB,mBAAmB;EACnB,sBAAsB;EACtB,eAAe;AACjB;;AAEA;EACE,YAAY;EACZ,sBAAsB;AACxB;;AAEA;EACE,uBAAuB;AACzB",sourcesContent:['@import url("../variables.css");\n\n#unitSelectorContainer {\n  display: flex;\n  align-items: start;\n}\n\n#unitSelectorContainer div {\n  padding-left: 5px;\n  margin-top: 1.15rem;\n  color: var(--textDark);\n  cursor: pointer;\n}\n\n#unitSelectorContainer div:last-child::before {\n  content: "|";\n  color: var(--textDark);\n}\n\n#unitSelectorContainer .selected {\n  color: var(--textLight);\n}\n'],sourceRoot:""}]);const h=l},217:(t,e,i)=>{i.d(e,{Z:()=>a});var n=i(537),s=i.n(n),o=i(645),r=i.n(o)()(s());r.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;1,300;1,400;1,500;1,600&display=swap);"]),r.push([t.id,':root {\n  font-family: "Open Sans", sans-serif;\n}\n',"",{version:3,sources:["webpack://./src/css/font.css"],names:[],mappings:"AAEA;EACE,oCAAoC;AACtC",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;1,300;1,400;1,500;1,600&display=swap");\n\n:root {\n  font-family: "Open Sans", sans-serif;\n}\n'],sourceRoot:""}]);const a=r},195:(t,e,i)=>{i.d(e,{Z:()=>h});var n=i(537),s=i.n(n),o=i(645),r=i.n(o),a=i(728),l=r()(s());l.i(a.Z),l.push([t.id,":root {\n  scrollbar-color: #acacac transparent;\n}\n::-webkit-scrollbar {\n  height: 17px;\n  width: 17px;\n  background: var(--bgDark);\n}\n\n::-webkit-scrollbar-thumb {\n  background: var(--textDark);\n  -webkit-border-radius: 1ex;\n  border: solid 5px var(--bgDark);\n}\n\n::-webkit-scrollbar-corner {\n  background: var(--bgDark);\n}\n\n::-webkit-scrollbar-track {\n  box-shadow: inset 0 0 10px 10px var(--bgDark);\n  border: solid 5px var(--bgDark);\n}\n","",{version:3,sources:["webpack://./src/css/scrollbar.css"],names:[],mappings:"AAEA;EACE,oCAAoC;AACtC;AACA;EACE,YAAY;EACZ,WAAW;EACX,yBAAyB;AAC3B;;AAEA;EACE,2BAA2B;EAC3B,0BAA0B;EAC1B,+BAA+B;AACjC;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,6CAA6C;EAC7C,+BAA+B;AACjC",sourcesContent:['@import url("./variables.css");\n\n:root {\n  scrollbar-color: #acacac transparent;\n}\n::-webkit-scrollbar {\n  height: 17px;\n  width: 17px;\n  background: var(--bgDark);\n}\n\n::-webkit-scrollbar-thumb {\n  background: var(--textDark);\n  -webkit-border-radius: 1ex;\n  border: solid 5px var(--bgDark);\n}\n\n::-webkit-scrollbar-corner {\n  background: var(--bgDark);\n}\n\n::-webkit-scrollbar-track {\n  box-shadow: inset 0 0 10px 10px var(--bgDark);\n  border: solid 5px var(--bgDark);\n}\n'],sourceRoot:""}]);const h=l},402:(t,e,i)=>{i.d(e,{Z:()=>c});var n=i(537),s=i.n(n),o=i(645),r=i.n(o),a=i(728),l=i(195),h=r()(s());h.i(a.Z),h.i(l.Z),h.push([t.id,"* {\n  -webkit-user-select: none; /* Safari */\n  -ms-user-select: none; /* IE 10 and IE 11 */\n  user-select: none; /* Standard syntax */\n}\nbody {\n  background: var(--bgDark);\n  color: var(--textLight);\n  /* min-height: 100vh; */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n","",{version:3,sources:["webpack://./src/css/style.css"],names:[],mappings:"AAGA;EACE,yBAAyB,EAAE,WAAW;EACtC,qBAAqB,EAAE,oBAAoB;EAC3C,iBAAiB,EAAE,oBAAoB;AACzC;AACA;EACE,yBAAyB;EACzB,uBAAuB;EACvB,uBAAuB;EACvB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB",sourcesContent:['@import url("./variables.css");\n@import url("./scrollbar.css");\n\n* {\n  -webkit-user-select: none; /* Safari */\n  -ms-user-select: none; /* IE 10 and IE 11 */\n  user-select: none; /* Standard syntax */\n}\nbody {\n  background: var(--bgDark);\n  color: var(--textLight);\n  /* min-height: 100vh; */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n'],sourceRoot:""}]);const c=h},728:(t,e,i)=>{i.d(e,{Z:()=>a});var n=i(537),s=i.n(n),o=i(645),r=i.n(o)()(s());r.push([t.id,":root {\n  --bgDark: #202124;\n  --bgMid: #2b2e36;\n\n  --textDark: #70717a;\n  --textMid: #7f8089;\n  --textLight: #e8eaed;\n\n  --minWidth: 700px;\n}\n","",{version:3,sources:["webpack://./src/css/variables.css"],names:[],mappings:"AAAA;EACE,iBAAiB;EACjB,gBAAgB;;EAEhB,mBAAmB;EACnB,kBAAkB;EAClB,oBAAoB;;EAEpB,iBAAiB;AACnB",sourcesContent:[":root {\n  --bgDark: #202124;\n  --bgMid: #2b2e36;\n\n  --textDark: #70717a;\n  --textMid: #7f8089;\n  --textLight: #e8eaed;\n\n  --minWidth: 700px;\n}\n"],sourceRoot:""}]);const a=r},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i="",n=void 0!==e[5];return e[4]&&(i+="@supports (".concat(e[4],") {")),e[2]&&(i+="@media ".concat(e[2]," {")),n&&(i+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),i+=t(e),n&&(i+="}"),e[2]&&(i+="}"),e[4]&&(i+="}"),i})).join("")},e.i=function(t,i,n,s,o){"string"==typeof t&&(t=[[null,t,void 0]]);var r={};if(n)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(r[l]=!0)}for(var h=0;h<t.length;h++){var c=[].concat(t[h]);n&&r[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),i&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=i):c[2]=i),s&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=s):c[4]="".concat(s)),e.push(c))}},e}},537:t=>{t.exports=function(t){var e=t[1],i=t[3];if(!i)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),o="/*# ".concat(s," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function i(t){for(var i=-1,n=0;n<e.length;n++)if(e[n].identifier===t){i=n;break}return i}function n(t,n){for(var o={},r=[],a=0;a<t.length;a++){var l=t[a],h=n.base?l[0]+n.base:l[0],c=o[h]||0,d="".concat(h," ").concat(c);o[h]=c+1;var u=i(d),f={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)e[u].references++,e[u].updater(f);else{var p=s(f,n);n.byIndex=a,e.splice(a,0,{identifier:d,updater:p,references:1})}r.push(d)}return r}function s(t,e){var i=e.domAPI(e);return i.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;i.update(t=e)}else i.remove()}}t.exports=function(t,s){var o=n(t=t||[],s=s||{});return function(t){t=t||[];for(var r=0;r<o.length;r++){var a=i(o[r]);e[a].references--}for(var l=n(t,s),h=0;h<o.length;h++){var c=i(o[h]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}o=l}}},569:t=>{var e={};t.exports=function(t,i){var n=function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}e[t]=i}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(i)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,i)=>{t.exports=function(t){var e=i.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(i){!function(t,e,i){var n="";i.supports&&(n+="@supports (".concat(i.supports,") {")),i.media&&(n+="@media ".concat(i.media," {"));var s=void 0!==i.layer;s&&(n+="@layer".concat(i.layer.length>0?" ".concat(i.layer):""," {")),n+=i.css,s&&(n+="}"),i.media&&(n+="}"),i.supports&&(n+="}");var o=i.sourceMap;o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,i)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function i(n){var s=e[n];if(void 0!==s)return s.exports;var o=e[n]={id:n,exports:{}};return t[n](o,o.exports,i),o.exports}i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;i.g.importScripts&&(t=i.g.location+"");var e=i.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");if(n.length)for(var s=n.length-1;s>-1&&!t;)t=n[s--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=t})(),i.nc=void 0,(()=>{var t=i(379),e=i.n(t),n=i(795),s=i.n(n),o=i(569),r=i.n(o),a=i(565),l=i.n(a),h=i(216),c=i.n(h),d=i(589),u=i.n(d),f=i(217),p={};p.styleTagTransform=u(),p.setAttributes=l(),p.insert=r().bind(null,"head"),p.domAPI=s(),p.insertStyleElement=c(),e()(f.Z,p),f.Z&&f.Z.locals&&f.Z.locals;var g=i(402),m={};m.styleTagTransform=u(),m.setAttributes=l(),m.insert=r().bind(null,"head"),m.domAPI=s(),m.insertStyleElement=c(),e()(g.Z,m),g.Z&&g.Z.locals&&g.Z.locals;const x={Pubsub:{},on(t,e){this.Pubsub[t]=this.Pubsub[t]||[],this.Pubsub[t].push(e)},off(t,e){if(this.Pubsub[t])for(let i=0;i<this.Pubsub[t].length;i++)if(this.Pubsub[t][i]===e){this.Pubsub[t].splice(i,1);break}},emit(t,e){this.Pubsub[t]&&this.Pubsub[t].forEach((t=>{t(e)}))}};var b=i(558),y={};y.styleTagTransform=u(),y.setAttributes=l(),y.insert=r().bind(null,"head"),y.domAPI=s(),y.insertStyleElement=c(),e()(b.Z,y),b.Z&&b.Z.locals&&b.Z.locals;class v{constructor(){this.container=document.createElement("div"),this.container.id="searchContainer",this.searchBar=document.createElement("input"),this.searchBar.type="text",this.searchBar.placeholder="Search location",this.container.append(this.searchBar),this.bindEvents()}bindEvents(){this.searchBar.addEventListener("change",(()=>{x.emit("apiCall",this.searchBar.value),x.emit("selectedDay",0)}))}}class _{static cachedData;static tempUnits="c";static windUnits="kph";static selectedDay=0}var A=i(629),w={};w.styleTagTransform=u(),w.setAttributes=l(),w.insert=r().bind(null,"head"),w.domAPI=s(),w.insertStyleElement=c(),e()(A.Z,w),A.Z&&A.Z.locals&&A.Z.locals;class C{constructor(){this.container=document.createElement("div"),this.container.id="unitSelectorContainer",this.divC=document.createElement("div"),this.divC.innerText="°C",this.divF=document.createElement("div"),this.divF.innerText="°F",this.container.append(this.divC,this.divF),"c"===_.tempUnits?this.divC.classList.toggle("selected"):this.divF.classList.toggle("selected"),this.bindEvents()}bindEvents(){this.divC.addEventListener("click",(()=>{this.divF.classList.remove("selected"),this.divC.classList.add("selected"),_.tempUnits="c",_.windUnits="kph",x.emit("renderHeader",_.selectedDay),x.emit("renderDaysBar"),x.emit("renderGraph",_.selectedDay)})),this.divF.addEventListener("click",(()=>{this.divC.classList.remove("selected"),this.divF.classList.add("selected"),_.tempUnits="f",_.windUnits="mph",x.emit("renderHeader",_.selectedDay),x.emit("renderDaysBar"),x.emit("renderGraph",_.selectedDay)}))}}var M=i(874),k={};k.styleTagTransform=u(),k.setAttributes=l(),k.insert=r().bind(null,"head"),k.domAPI=s(),k.insertStyleElement=c(),e()(M.Z,k),M.Z&&M.Z.locals&&M.Z.locals;class E{constructor(){this.container=document.createElement("div"),this.container.id="headerContainer",this.imgIcon=document.createElement("img"),this.imgIcon.id="headerIcon",this.divTemperature=document.createElement("div"),this.divTemperature.id="headerTemperature",this.divHumidity=document.createElement("div"),this.divHumidity.id="headerHumidity",this.divWindSpeed=document.createElement("div"),this.divWindSpeed.id="headerWind",this.divChanceRain=document.createElement("div"),this.divChanceRain.id="headerChanceRain",this.divDay=document.createElement("div"),this.divDay.id="headerDay",this.divCondition=document.createElement("div"),this.divCondition.id="headerCondition",this.divLocation=document.createElement("div"),this.divLocation.id="headerLocation",this.searchBar=new v,this.unitSelector=new C,this.container.append(this.imgIcon,this.divTemperature,this.divHumidity,this.divWindSpeed,this.divChanceRain,this.divDay,this.divCondition,this.searchBar.container,this.divLocation,this.unitSelector.container),this.bindEvents()}bindEvents(){x.on("renderHeader",(t=>{const{icon:e}=_.cachedData.forecast.forecastday[t].day.condition,i=_.cachedData.forecast.forecastday[t].day.daily_chance_of_rain,n=_.cachedData.forecast.forecastday[t].day.condition.text,s=new Date(_.cachedData.forecast.forecastday[t].date).toLocaleDateString("en-US",{weekday:"long",day:"numeric",month:"long",timeZone:"UTC"}),o=`${_.cachedData.location.name}, ${_.cachedData.location.country}`;let r,a,l;0===t?(r=Math.floor(_.cachedData.current[`temp_${_.tempUnits}`]),a=_.cachedData.current.humidity,l=_.cachedData.current[`wind_${_.windUnits}`]):(r=Math.floor(_.cachedData.forecast.forecastday[t].day[`avgtemp_${_.tempUnits}`]),a=_.cachedData.forecast.forecastday[t].day.avghumidity,l=_.cachedData.forecast.forecastday[t].day[`maxwind_${_.windUnits}`]),this.render({icon:e,temp:r,humidity:a,wind:l,chanceOfRain:i,day:s,condition:n,location:o})}))}render(t){this.imgIcon.src=t.icon,this.divTemperature.innerText=`${t.temp}°`,this.divHumidity.innerText=`Humidity: ${t.humidity}%`,this.divWindSpeed.innerText=`Wind speed: ${t.wind} ${_.windUnits}`,this.divChanceRain.innerText=`Chance of rain: ${t.chanceOfRain}%`,this.divDay.innerText=t.day,this.divCondition.innerText=t.condition,this.divLocation.innerText=t.location}}var S=i(738),D={};D.styleTagTransform=u(),D.setAttributes=l(),D.insert=r().bind(null,"head"),D.domAPI=s(),D.insertStyleElement=c(),e()(S.Z,D),S.Z&&S.Z.locals&&S.Z.locals;class P{constructor(t){let e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this.index=t,this.isCurrentDay=e,this.container=document.createElement("div"),this.container.id="dayContainer",e&&this.container.classList.add("selected"),this.imgIcon=document.createElement("img"),this.imgIcon.id="dayIcon",this.divDayOfWeek=document.createElement("div"),this.divDayOfWeek.id="dayDay",this.divTemperatureMAX=document.createElement("div"),this.divTemperatureMAX.id="dayMax",this.divTemperatureMIN=document.createElement("div"),this.divTemperatureMIN.id="dayMin",this.container.append(this.imgIcon,this.divDayOfWeek,this.divTemperatureMAX,this.divTemperatureMIN),this.bindEvents()}render(t){this.cachedData=t,this.imgIcon.src=t.day.condition.icon,this.divDayOfWeek.innerText=new Date(1e3*t.date_epoch).toLocaleDateString("en-US",{weekday:"short",timeZone:"UTC"}),this.divTemperatureMAX.innerText=`${t.day[`maxtemp_${_.tempUnits}`]}°`,this.divTemperatureMIN.innerText=`${t.day[`mintemp_${_.tempUnits}`]}°`}bindEvents(){this.container.addEventListener("click",(()=>{x.emit("renderHeader",this.index),x.emit("renderGraph",this.index),x.emit("renderHourly",this.index),x.emit("selectedDay",this.index)}))}}var B=i(132),T={};T.styleTagTransform=u(),T.setAttributes=l(),T.insert=r().bind(null,"head"),T.domAPI=s(),T.insertStyleElement=c(),e()(B.Z,T),B.Z&&B.Z.locals&&B.Z.locals;class O{days=[];constructor(t){this.container=document.createElement("div"),this.container.id="container";for(let e=0;e<t;e++){const t=0===e;this.days.push(new P(e,t)),this.container.append(this.days[e].container)}this.bindEvents()}bindEvents(){x.on("selectedDay",(t=>{this.days.forEach((t=>{t.container.classList.remove("selected")})),this.days[t].container.classList.add("selected"),_.selectedDay=t})),x.on("renderDaysBar",(()=>{this.render(_.cachedData)}))}render(t){this.days.forEach((e=>{e.render(t.forecast.forecastday[e.index])}))}}const L=i.p+"fb33b006dd56733dd60b.svg";var R=i(55),I={};I.styleTagTransform=u(),I.setAttributes=l(),I.insert=r().bind(null,"head"),I.domAPI=s(),I.insertStyleElement=c(),e()(R.Z,I),R.Z&&R.Z.locals&&R.Z.locals;class z{constructor(){this.container=document.createElement("div"),this.container.id="loadingContainer",this.wheel=document.createElement("img"),this.wheel.classList="loadingWheel",this.wheel.src=L,this.container.append(this.wheel)}}function W(t){return t+.5|0}const F=(t,e,i)=>Math.max(Math.min(t,i),e);function j(t){return F(W(2.55*t),0,255)}function V(t){return F(W(255*t),0,255)}function N(t){return F(W(t/2.55)/100,0,1)}function H(t){return F(W(100*t),0,100)}const Y={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},$=[..."0123456789ABCDEF"],X=t=>$[15&t],U=t=>$[(240&t)>>4]+$[15&t],Z=t=>(240&t)>>4==(15&t);const q=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function G(t,e,i){const n=e*Math.min(i,1-i),s=(e,s=(e+t/30)%12)=>i-n*Math.max(Math.min(s-3,9-s,1),-1);return[s(0),s(8),s(4)]}function K(t,e,i){const n=(n,s=(n+t/60)%6)=>i-i*e*Math.max(Math.min(s,4-s,1),0);return[n(5),n(3),n(1)]}function J(t,e,i){const n=G(t,1,.5);let s;for(e+i>1&&(s=1/(e+i),e*=s,i*=s),s=0;s<3;s++)n[s]*=1-e-i,n[s]+=e;return n}function Q(t){const e=t.r/255,i=t.g/255,n=t.b/255,s=Math.max(e,i,n),o=Math.min(e,i,n),r=(s+o)/2;let a,l,h;return s!==o&&(h=s-o,l=r>.5?h/(2-s-o):h/(s+o),a=function(t,e,i,n,s){return t===s?(e-i)/n+(e<i?6:0):e===s?(i-t)/n+2:(t-e)/n+4}(e,i,n,h,s),a=60*a+.5),[0|a,l||0,r]}function tt(t,e,i,n){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,i,n)).map(V)}function et(t,e,i){return tt(G,t,e,i)}function it(t){return(t%360+360)%360}const nt={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},st={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let ot;const rt=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,at=t=>t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055,lt=t=>t<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4);function ht(t,e,i){if(t){let n=Q(t);n[e]=Math.max(0,Math.min(n[e]+n[e]*i,0===e?360:1)),n=et(n),t.r=n[0],t.g=n[1],t.b=n[2]}}function ct(t,e){return t?Object.assign(e||{},t):t}function dt(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=V(t[3]))):(e=ct(t,{r:0,g:0,b:0,a:1})).a=V(e.a),e}function ut(t){return"r"===t.charAt(0)?function(t){const e=rt.exec(t);let i,n,s,o=255;if(e){if(e[7]!==i){const t=+e[7];o=e[8]?j(t):F(255*t,0,255)}return i=+e[1],n=+e[3],s=+e[5],i=255&(e[2]?j(i):F(i,0,255)),n=255&(e[4]?j(n):F(n,0,255)),s=255&(e[6]?j(s):F(s,0,255)),{r:i,g:n,b:s,a:o}}}(t):function(t){const e=q.exec(t);let i,n=255;if(!e)return;e[5]!==i&&(n=e[6]?j(+e[5]):V(+e[5]));const s=it(+e[2]),o=+e[3]/100,r=+e[4]/100;return i="hwb"===e[1]?function(t,e,i){return tt(J,t,e,i)}(s,o,r):"hsv"===e[1]?function(t,e,i){return tt(K,t,e,i)}(s,o,r):et(s,o,r),{r:i[0],g:i[1],b:i[2],a:n}}(t)}class ft{constructor(t){if(t instanceof ft)return t;const e=typeof t;let i;var n,s,o;"object"===e?i=dt(t):"string"===e&&(o=(n=t).length,"#"===n[0]&&(4===o||5===o?s={r:255&17*Y[n[1]],g:255&17*Y[n[2]],b:255&17*Y[n[3]],a:5===o?17*Y[n[4]]:255}:7!==o&&9!==o||(s={r:Y[n[1]]<<4|Y[n[2]],g:Y[n[3]]<<4|Y[n[4]],b:Y[n[5]]<<4|Y[n[6]],a:9===o?Y[n[7]]<<4|Y[n[8]]:255})),i=s||function(t){ot||(ot=function(){const t={},e=Object.keys(st),i=Object.keys(nt);let n,s,o,r,a;for(n=0;n<e.length;n++){for(r=a=e[n],s=0;s<i.length;s++)o=i[s],a=a.replace(o,nt[o]);o=parseInt(st[r],16),t[a]=[o>>16&255,o>>8&255,255&o]}return t}(),ot.transparent=[0,0,0,0]);const e=ot[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}(t)||ut(t)),this._rgb=i,this._valid=!!i}get valid(){return this._valid}get rgb(){var t=ct(this._rgb);return t&&(t.a=N(t.a)),t}set rgb(t){this._rgb=dt(t)}rgbString(){return this._valid?(t=this._rgb)&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${N(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`):void 0;var t}hexString(){return this._valid?(t=this._rgb,e=(t=>Z(t.r)&&Z(t.g)&&Z(t.b)&&Z(t.a))(t)?X:U,t?"#"+e(t.r)+e(t.g)+e(t.b)+((t,e)=>t<255?e(t):"")(t.a,e):void 0):void 0;var t,e}hslString(){return this._valid?function(t){if(!t)return;const e=Q(t),i=e[0],n=H(e[1]),s=H(e[2]);return t.a<255?`hsla(${i}, ${n}%, ${s}%, ${N(t.a)})`:`hsl(${i}, ${n}%, ${s}%)`}(this._rgb):void 0}mix(t,e){if(t){const i=this.rgb,n=t.rgb;let s;const o=e===s?.5:e,r=2*o-1,a=i.a-n.a,l=((r*a==-1?r:(r+a)/(1+r*a))+1)/2;s=1-l,i.r=255&l*i.r+s*n.r+.5,i.g=255&l*i.g+s*n.g+.5,i.b=255&l*i.b+s*n.b+.5,i.a=o*i.a+(1-o)*n.a,this.rgb=i}return this}interpolate(t,e){return t&&(this._rgb=function(t,e,i){const n=lt(N(t.r)),s=lt(N(t.g)),o=lt(N(t.b));return{r:V(at(n+i*(lt(N(e.r))-n))),g:V(at(s+i*(lt(N(e.g))-s))),b:V(at(o+i*(lt(N(e.b))-o))),a:t.a+i*(e.a-t.a)}}(this._rgb,t._rgb,e)),this}clone(){return new ft(this.rgb)}alpha(t){return this._rgb.a=V(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=W(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return ht(this._rgb,2,t),this}darken(t){return ht(this._rgb,2,-t),this}saturate(t){return ht(this._rgb,1,t),this}desaturate(t){return ht(this._rgb,1,-t),this}rotate(t){return function(t,e){var i=Q(t);i[0]=it(i[0]+e),i=et(i),t.r=i[0],t.g=i[1],t.b=i[2]}(this._rgb,t),this}}function pt(){}const gt=(()=>{let t=0;return()=>t++})();function mt(t){return null==t}function xt(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.slice(0,7)&&"Array]"===e.slice(-6)}function bt(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}function yt(t){return("number"==typeof t||t instanceof Number)&&isFinite(+t)}function vt(t,e){return yt(t)?t:e}function _t(t,e){return void 0===t?e:t}const At=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function wt(t,e,i){if(t&&"function"==typeof t.call)return t.apply(i,e)}function Ct(t,e,i,n){let s,o,r;if(xt(t))if(o=t.length,n)for(s=o-1;s>=0;s--)e.call(i,t[s],s);else for(s=0;s<o;s++)e.call(i,t[s],s);else if(bt(t))for(r=Object.keys(t),o=r.length,s=0;s<o;s++)e.call(i,t[r[s]],r[s])}function Mt(t,e){let i,n,s,o;if(!t||!e||t.length!==e.length)return!1;for(i=0,n=t.length;i<n;++i)if(s=t[i],o=e[i],s.datasetIndex!==o.datasetIndex||s.index!==o.index)return!1;return!0}function kt(t){if(xt(t))return t.map(kt);if(bt(t)){const e=Object.create(null),i=Object.keys(t),n=i.length;let s=0;for(;s<n;++s)e[i[s]]=kt(t[i[s]]);return e}return t}function Et(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function St(t,e,i,n){if(!Et(t))return;const s=e[t],o=i[t];bt(s)&&bt(o)?Dt(s,o,n):e[t]=kt(o)}function Dt(t,e,i){const n=xt(e)?e:[e],s=n.length;if(!bt(t))return t;const o=(i=i||{}).merger||St;let r;for(let e=0;e<s;++e){if(r=n[e],!bt(r))continue;const s=Object.keys(r);for(let e=0,n=s.length;e<n;++e)o(s[e],t,r,i)}return t}function Pt(t,e){return Dt(t,e,{merger:Bt})}function Bt(t,e,i){if(!Et(t))return;const n=e[t],s=i[t];bt(n)&&bt(s)?Pt(n,s):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=kt(s))}const Tt={"":t=>t,x:t=>t.x,y:t=>t.y};function Ot(t,e){const i=Tt[e]||(Tt[e]=function(t){const e=function(t){const e=t.split("."),i=[];let n="";for(const t of e)n+=t,n.endsWith("\\")?n=n.slice(0,-1)+".":(i.push(n),n="");return i}(t);return t=>{for(const i of e){if(""===i)break;t=t&&t[i]}return t}}(e));return i(t)}function Lt(t){return t.charAt(0).toUpperCase()+t.slice(1)}const Rt=t=>void 0!==t,It=t=>"function"==typeof t,zt=(t,e)=>{if(t.size!==e.size)return!1;for(const i of t)if(!e.has(i))return!1;return!0},Wt=Math.PI,Ft=2*Wt,jt=Ft+Wt,Vt=Number.POSITIVE_INFINITY,Nt=Wt/180,Ht=Wt/2,Yt=Wt/4,$t=2*Wt/3,Xt=Math.log10,Ut=Math.sign;function Zt(t,e,i){return Math.abs(t-e)<i}function qt(t){const e=Math.round(t);t=Zt(t,e,t/1e3)?e:t;const i=Math.pow(10,Math.floor(Xt(t))),n=t/i;return(n<=1?1:n<=2?2:n<=5?5:10)*i}function Gt(t){return!isNaN(parseFloat(t))&&isFinite(t)}function Kt(t,e,i){let n,s,o;for(n=0,s=t.length;n<s;n++)o=t[n][i],isNaN(o)||(e.min=Math.min(e.min,o),e.max=Math.max(e.max,o))}function Jt(t){return t*(Wt/180)}function Qt(t){return t*(180/Wt)}function te(t){if(!yt(t))return;let e=1,i=0;for(;Math.round(t*e)/e!==t;)e*=10,i++;return i}function ee(t,e){const i=e.x-t.x,n=e.y-t.y,s=Math.sqrt(i*i+n*n);let o=Math.atan2(n,i);return o<-.5*Wt&&(o+=Ft),{angle:o,distance:s}}function ie(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function ne(t,e){return(t-e+jt)%Ft-Wt}function se(t){return(t%Ft+Ft)%Ft}function oe(t,e,i,n){const s=se(t),o=se(e),r=se(i),a=se(o-s),l=se(r-s),h=se(s-o),c=se(s-r);return s===o||s===r||n&&o===r||a>l&&h<c}function re(t,e,i){return Math.max(e,Math.min(i,t))}function ae(t,e,i,n=1e-6){return t>=Math.min(e,i)-n&&t<=Math.max(e,i)+n}function le(t,e,i){i=i||(i=>t[i]<e);let n,s=t.length-1,o=0;for(;s-o>1;)n=o+s>>1,i(n)?o=n:s=n;return{lo:o,hi:s}}const he=(t,e,i,n)=>le(t,i,n?n=>{const s=t[n][e];return s<i||s===i&&t[n+1][e]===i}:n=>t[n][e]<i),ce=(t,e,i)=>le(t,i,(n=>t[n][e]>=i)),de=["push","pop","shift","splice","unshift"];function ue(t,e){const i=t._chartjs;if(!i)return;const n=i.listeners,s=n.indexOf(e);-1!==s&&n.splice(s,1),n.length>0||(de.forEach((e=>{delete t[e]})),delete t._chartjs)}function fe(t){const e=new Set(t);return e.size===t.length?t:Array.from(e)}const pe="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function ge(t,e){let i=[],n=!1;return function(...s){i=s,n||(n=!0,pe.call(window,(()=>{n=!1,t.apply(e,i)})))}}const me=t=>"start"===t?"left":"end"===t?"right":"center",xe=(t,e,i)=>"start"===t?e:"end"===t?i:(e+i)/2;function be(t,e,i){const n=e.length;let s=0,o=n;if(t._sorted){const{iScale:r,_parsed:a}=t,l=r.axis,{min:h,max:c,minDefined:d,maxDefined:u}=r.getUserBounds();d&&(s=re(Math.min(he(a,l,h).lo,i?n:he(e,l,r.getPixelForValue(h)).lo),0,n-1)),o=u?re(Math.max(he(a,r.axis,c,!0).hi+1,i?0:he(e,l,r.getPixelForValue(c),!0).hi+1),s,n)-s:n-s}return{start:s,count:o}}function ye(t){const{xScale:e,yScale:i,_scaleRanges:n}=t,s={xmin:e.min,xmax:e.max,ymin:i.min,ymax:i.max};if(!n)return t._scaleRanges=s,!0;const o=n.xmin!==e.min||n.xmax!==e.max||n.ymin!==i.min||n.ymax!==i.max;return Object.assign(n,s),o}const ve=t=>0===t||1===t,_e=(t,e,i)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*Ft/i),Ae=(t,e,i)=>Math.pow(2,-10*t)*Math.sin((t-e)*Ft/i)+1,we={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*Ht),easeOutSine:t=>Math.sin(t*Ht),easeInOutSine:t=>-.5*(Math.cos(Wt*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>ve(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>ve(t)?t:_e(t,.075,.3),easeOutElastic:t=>ve(t)?t:Ae(t,.075,.3),easeInOutElastic(t){const e=.1125;return ve(t)?t:t<.5?.5*_e(2*t,e,.45):.5+.5*Ae(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-we.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,i=2.75;return t<1/i?e*t*t:t<2/i?e*(t-=1.5/i)*t+.75:t<2.5/i?e*(t-=2.25/i)*t+.9375:e*(t-=2.625/i)*t+.984375},easeInOutBounce:t=>t<.5?.5*we.easeInBounce(2*t):.5*we.easeOutBounce(2*t-1)+.5};function Ce(t){if(t&&"object"==typeof t){const e=t.toString();return"[object CanvasPattern]"===e||"[object CanvasGradient]"===e}return!1}function Me(t){return Ce(t)?t:new ft(t)}function ke(t){return Ce(t)?t:new ft(t).saturate(.5).darken(.1).hexString()}const Ee=["x","y","borderWidth","radius","tension"],Se=["color","borderColor","backgroundColor"],De=new Map;function Pe(t,e,i){return function(t,e){e=e||{};const i=t+JSON.stringify(e);let n=De.get(i);return n||(n=new Intl.NumberFormat(t,e),De.set(i,n)),n}(e,i).format(t)}const Be={values:t=>xt(t)?t:""+t,numeric(t,e,i){if(0===t)return"0";const n=this.chart.options.locale;let s,o=t;if(i.length>1){const e=Math.max(Math.abs(i[0].value),Math.abs(i[i.length-1].value));(e<1e-4||e>1e15)&&(s="scientific"),o=function(t,e){let i=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;return Math.abs(i)>=1&&t!==Math.floor(t)&&(i=t-Math.floor(t)),i}(t,i)}const r=Xt(Math.abs(o)),a=isNaN(r)?1:Math.max(Math.min(-1*Math.floor(r),20),0),l={notation:s,minimumFractionDigits:a,maximumFractionDigits:a};return Object.assign(l,this.options.ticks.format),Pe(t,n,l)},logarithmic(t,e,i){if(0===t)return"0";const n=i[e].significand||t/Math.pow(10,Math.floor(Xt(t)));return[1,2,3,5,10,15].includes(n)||e>.8*i.length?Be.numeric.call(this,t,e,i):""}};var Te={formatters:Be};const Oe=Object.create(null),Le=Object.create(null);function Re(t,e){if(!e)return t;const i=e.split(".");for(let e=0,n=i.length;e<n;++e){const n=i[e];t=t[n]||(t[n]=Object.create(null))}return t}function Ie(t,e,i){return"string"==typeof e?Dt(Re(t,e),i):Dt(Re(t,""),e)}class ze{constructor(t,e){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>ke(e.backgroundColor),this.hoverBorderColor=(t,e)=>ke(e.borderColor),this.hoverColor=(t,e)=>ke(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0,includeInvisible:!1},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t),this.apply(e)}set(t,e){return Ie(this,t,e)}get(t){return Re(this,t)}describe(t,e){return Ie(Le,t,e)}override(t,e){return Ie(Oe,t,e)}route(t,e,i,n){const s=Re(this,t),o=Re(this,i),r="_"+e;Object.defineProperties(s,{[r]:{value:s[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[r],e=o[n];return bt(t)?Object.assign({},e,t):_t(t,e)},set(t){this[r]=t}}})}apply(t){t.forEach((t=>t(this)))}}var We=new ze({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}},[function(t){t.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0}),t.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),t.set("animations",{colors:{type:"color",properties:Se},numbers:{type:"number",properties:Ee}}),t.describe("animations",{_fallback:"animation"}),t.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}})},function(t){t.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}})},function(t){t.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1},border:{display:!0,dash:[],dashOffset:0,width:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:Te.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),t.route("scale.ticks","color","","color"),t.route("scale.grid","color","","borderColor"),t.route("scale.border","color","","borderColor"),t.route("scale.title","color","","color"),t.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t&&"dash"!==t}),t.describe("scales",{_fallback:"scale"}),t.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t})}]);function Fe(t,e,i,n,s){let o=e[s];return o||(o=e[s]=t.measureText(s).width,i.push(s)),o>n&&(n=o),n}function je(t,e,i,n){let s=(n=n||{}).data=n.data||{},o=n.garbageCollect=n.garbageCollect||[];n.font!==e&&(s=n.data={},o=n.garbageCollect=[],n.font=e),t.save(),t.font=e;let r=0;const a=i.length;let l,h,c,d,u;for(l=0;l<a;l++)if(d=i[l],null==d||xt(d)){if(xt(d))for(h=0,c=d.length;h<c;h++)u=d[h],null==u||xt(u)||(r=Fe(t,s,o,r,u))}else r=Fe(t,s,o,r,d);t.restore();const f=o.length/2;if(f>i.length){for(l=0;l<f;l++)delete s[o[l]];o.splice(0,f)}return r}function Ve(t,e,i){const n=t.currentDevicePixelRatio,s=0!==i?Math.max(i/2,.5):0;return Math.round((e-s)*n)/n+s}function Ne(t,e){(e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore()}function He(t,e,i,n){Ye(t,e,i,n,null)}function Ye(t,e,i,n,s){let o,r,a,l,h,c,d,u;const f=e.pointStyle,p=e.rotation,g=e.radius;let m=(p||0)*Nt;if(f&&"object"==typeof f&&(o=f.toString(),"[object HTMLImageElement]"===o||"[object HTMLCanvasElement]"===o))return t.save(),t.translate(i,n),t.rotate(m),t.drawImage(f,-f.width/2,-f.height/2,f.width,f.height),void t.restore();if(!(isNaN(g)||g<=0)){switch(t.beginPath(),f){default:s?t.ellipse(i,n,s/2,g,0,0,Ft):t.arc(i,n,g,0,Ft),t.closePath();break;case"triangle":c=s?s/2:g,t.moveTo(i+Math.sin(m)*c,n-Math.cos(m)*g),m+=$t,t.lineTo(i+Math.sin(m)*c,n-Math.cos(m)*g),m+=$t,t.lineTo(i+Math.sin(m)*c,n-Math.cos(m)*g),t.closePath();break;case"rectRounded":h=.516*g,l=g-h,r=Math.cos(m+Yt)*l,d=Math.cos(m+Yt)*(s?s/2-h:l),a=Math.sin(m+Yt)*l,u=Math.sin(m+Yt)*(s?s/2-h:l),t.arc(i-d,n-a,h,m-Wt,m-Ht),t.arc(i+u,n-r,h,m-Ht,m),t.arc(i+d,n+a,h,m,m+Ht),t.arc(i-u,n+r,h,m+Ht,m+Wt),t.closePath();break;case"rect":if(!p){l=Math.SQRT1_2*g,c=s?s/2:l,t.rect(i-c,n-l,2*c,2*l);break}m+=Yt;case"rectRot":d=Math.cos(m)*(s?s/2:g),r=Math.cos(m)*g,a=Math.sin(m)*g,u=Math.sin(m)*(s?s/2:g),t.moveTo(i-d,n-a),t.lineTo(i+u,n-r),t.lineTo(i+d,n+a),t.lineTo(i-u,n+r),t.closePath();break;case"crossRot":m+=Yt;case"cross":d=Math.cos(m)*(s?s/2:g),r=Math.cos(m)*g,a=Math.sin(m)*g,u=Math.sin(m)*(s?s/2:g),t.moveTo(i-d,n-a),t.lineTo(i+d,n+a),t.moveTo(i+u,n-r),t.lineTo(i-u,n+r);break;case"star":d=Math.cos(m)*(s?s/2:g),r=Math.cos(m)*g,a=Math.sin(m)*g,u=Math.sin(m)*(s?s/2:g),t.moveTo(i-d,n-a),t.lineTo(i+d,n+a),t.moveTo(i+u,n-r),t.lineTo(i-u,n+r),m+=Yt,d=Math.cos(m)*(s?s/2:g),r=Math.cos(m)*g,a=Math.sin(m)*g,u=Math.sin(m)*(s?s/2:g),t.moveTo(i-d,n-a),t.lineTo(i+d,n+a),t.moveTo(i+u,n-r),t.lineTo(i-u,n+r);break;case"line":r=s?s/2:Math.cos(m)*g,a=Math.sin(m)*g,t.moveTo(i-r,n-a),t.lineTo(i+r,n+a);break;case"dash":t.moveTo(i,n),t.lineTo(i+Math.cos(m)*(s?s/2:g),n+Math.sin(m)*g);break;case!1:t.closePath()}t.fill(),e.borderWidth>0&&t.stroke()}}function $e(t,e,i){return i=i||.5,!e||t&&t.x>e.left-i&&t.x<e.right+i&&t.y>e.top-i&&t.y<e.bottom+i}function Xe(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function Ue(t){t.restore()}function Ze(t,e,i,n,s){if(!e)return t.lineTo(i.x,i.y);if("middle"===s){const n=(e.x+i.x)/2;t.lineTo(n,e.y),t.lineTo(n,i.y)}else"after"===s!=!!n?t.lineTo(e.x,i.y):t.lineTo(i.x,e.y);t.lineTo(i.x,i.y)}function qe(t,e,i,n){if(!e)return t.lineTo(i.x,i.y);t.bezierCurveTo(n?e.cp1x:e.cp2x,n?e.cp1y:e.cp2y,n?i.cp2x:i.cp1x,n?i.cp2y:i.cp1y,i.x,i.y)}function Ge(t,e,i,n,s){if(s.strikethrough||s.underline){const o=t.measureText(n),r=e-o.actualBoundingBoxLeft,a=e+o.actualBoundingBoxRight,l=i-o.actualBoundingBoxAscent,h=i+o.actualBoundingBoxDescent,c=s.strikethrough?(l+h)/2:h;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=s.decorationWidth||2,t.moveTo(r,c),t.lineTo(a,c),t.stroke()}}function Ke(t,e){const i=t.fillStyle;t.fillStyle=e.color,t.fillRect(e.left,e.top,e.width,e.height),t.fillStyle=i}function Je(t,e,i,n,s,o={}){const r=xt(e)?e:[e],a=o.strokeWidth>0&&""!==o.strokeColor;let l,h;for(t.save(),t.font=s.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]),mt(e.rotation)||t.rotate(e.rotation),e.color&&(t.fillStyle=e.color),e.textAlign&&(t.textAlign=e.textAlign),e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,o),l=0;l<r.length;++l)h=r[l],o.backdrop&&Ke(t,o.backdrop),a&&(o.strokeColor&&(t.strokeStyle=o.strokeColor),mt(o.strokeWidth)||(t.lineWidth=o.strokeWidth),t.strokeText(h,i,n,o.maxWidth)),t.fillText(h,i,n,o.maxWidth),Ge(t,i,n,h,o),n+=Number(s.lineHeight);t.restore()}function Qe(t,e){const{x:i,y:n,w:s,h:o,radius:r}=e;t.arc(i+r.topLeft,n+r.topLeft,r.topLeft,-Ht,Wt,!0),t.lineTo(i,n+o-r.bottomLeft),t.arc(i+r.bottomLeft,n+o-r.bottomLeft,r.bottomLeft,Wt,Ht,!0),t.lineTo(i+s-r.bottomRight,n+o),t.arc(i+s-r.bottomRight,n+o-r.bottomRight,r.bottomRight,Ht,0,!0),t.lineTo(i+s,n+r.topRight),t.arc(i+s-r.topRight,n+r.topRight,r.topRight,0,-Ht,!0),t.lineTo(i+r.topLeft,n)}const ti=/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/,ei=/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;function ii(t,e){const i=(""+t).match(ti);if(!i||"normal"===i[1])return 1.2*e;switch(t=+i[2],i[3]){case"px":return t;case"%":t/=100}return e*t}const ni=t=>+t||0;function si(t,e){const i={},n=bt(e),s=n?Object.keys(e):e,o=bt(t)?n?i=>_t(t[i],t[e[i]]):e=>t[e]:()=>t;for(const t of s)i[t]=ni(o(t));return i}function oi(t){return si(t,{top:"y",right:"x",bottom:"y",left:"x"})}function ri(t){return si(t,["topLeft","topRight","bottomLeft","bottomRight"])}function ai(t){const e=oi(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function li(t,e){t=t||{},e=e||We.font;let i=_t(t.size,e.size);"string"==typeof i&&(i=parseInt(i,10));let n=_t(t.style,e.style);n&&!(""+n).match(ei)&&(console.warn('Invalid font style specified: "'+n+'"'),n=void 0);const s={family:_t(t.family,e.family),lineHeight:ii(_t(t.lineHeight,e.lineHeight),i),size:i,style:n,weight:_t(t.weight,e.weight),string:""};return s.string=function(t){return!t||mt(t.size)||mt(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}(s),s}function hi(t,e,i,n){let s,o,r,a=!0;for(s=0,o=t.length;s<o;++s)if(r=t[s],void 0!==r&&(void 0!==e&&"function"==typeof r&&(r=r(e),a=!1),void 0!==i&&xt(r)&&(r=r[i%r.length],a=!1),void 0!==r))return n&&!a&&(n.cacheable=!1),r}function ci(t,e){return Object.assign(Object.create(t),e)}function di(t,e=[""],i,n,s=(()=>t[0])){const o=i||t;void 0===n&&(n=Ai("_fallback",t));const r={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:o,_fallback:n,_getTarget:s,override:i=>di([i,...t],e,o,n)};return new Proxy(r,{deleteProperty:(e,i)=>(delete e[i],delete e._keys,delete t[0][i],!0),get:(i,n)=>mi(i,n,(()=>function(t,e,i,n){let s;for(const o of e)if(s=Ai(pi(o,t),i),void 0!==s)return gi(t,s)?vi(i,n,t,s):s}(n,e,t,i))),getOwnPropertyDescriptor:(t,e)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],e),getPrototypeOf:()=>Reflect.getPrototypeOf(t[0]),has:(t,e)=>wi(t).includes(e),ownKeys:t=>wi(t),set(t,e,i){const n=t._storage||(t._storage=s());return t[e]=n[e]=i,delete t._keys,!0}})}function ui(t,e,i,n){const s={_cacheable:!1,_proxy:t,_context:e,_subProxy:i,_stack:new Set,_descriptors:fi(t,n),setContext:e=>ui(t,e,i,n),override:s=>ui(t.override(s),e,i,n)};return new Proxy(s,{deleteProperty:(e,i)=>(delete e[i],delete t[i],!0),get:(t,e,i)=>mi(t,e,(()=>function(t,e,i){const{_proxy:n,_context:s,_subProxy:o,_descriptors:r}=t;let a=n[e];return It(a)&&r.isScriptable(e)&&(a=function(t,e,i,n){const{_proxy:s,_context:o,_subProxy:r,_stack:a}=i;if(a.has(t))throw new Error("Recursion detected: "+Array.from(a).join("->")+"->"+t);a.add(t);let l=e(o,r||n);return a.delete(t),gi(t,l)&&(l=vi(s._scopes,s,t,l)),l}(e,a,t,i)),xt(a)&&a.length&&(a=function(t,e,i,n){const{_proxy:s,_context:o,_subProxy:r,_descriptors:a}=i;if(void 0!==o.index&&n(t))return e[o.index%e.length];if(bt(e[0])){const i=e,n=s._scopes.filter((t=>t!==i));e=[];for(const l of i){const i=vi(n,s,t,l);e.push(ui(i,o,r&&r[t],a))}}return e}(e,a,t,r.isIndexable)),gi(e,a)&&(a=ui(a,s,o&&o[e],r)),a}(t,e,i))),getOwnPropertyDescriptor:(e,i)=>e._descriptors.allKeys?Reflect.has(t,i)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,i),getPrototypeOf:()=>Reflect.getPrototypeOf(t),has:(e,i)=>Reflect.has(t,i),ownKeys:()=>Reflect.ownKeys(t),set:(e,i,n)=>(t[i]=n,delete e[i],!0)})}function fi(t,e={scriptable:!0,indexable:!0}){const{_scriptable:i=e.scriptable,_indexable:n=e.indexable,_allKeys:s=e.allKeys}=t;return{allKeys:s,scriptable:i,indexable:n,isScriptable:It(i)?i:()=>i,isIndexable:It(n)?n:()=>n}}const pi=(t,e)=>t?t+Lt(e):e,gi=(t,e)=>bt(e)&&"adapters"!==t&&(null===Object.getPrototypeOf(e)||e.constructor===Object);function mi(t,e,i){if(Object.prototype.hasOwnProperty.call(t,e))return t[e];const n=i();return t[e]=n,n}function xi(t,e,i){return It(t)?t(e,i):t}const bi=(t,e)=>!0===t?e:"string"==typeof t?Ot(e,t):void 0;function yi(t,e,i,n,s){for(const o of e){const e=bi(i,o);if(e){t.add(e);const o=xi(e._fallback,i,s);if(void 0!==o&&o!==i&&o!==n)return o}else if(!1===e&&void 0!==n&&i!==n)return null}return!1}function vi(t,e,i,n){const s=e._rootScopes,o=xi(e._fallback,i,n),r=[...t,...s],a=new Set;a.add(n);let l=_i(a,r,i,o||i,n);return null!==l&&(void 0===o||o===i||(l=_i(a,r,o,l,n),null!==l))&&di(Array.from(a),[""],s,o,(()=>function(t,e,i){const n=t._getTarget();e in n||(n[e]={});const s=n[e];return xt(s)&&bt(i)?i:s||{}}(e,i,n)))}function _i(t,e,i,n,s){for(;i;)i=yi(t,e,i,n,s);return i}function Ai(t,e){for(const i of e){if(!i)continue;const e=i[t];if(void 0!==e)return e}}function wi(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const i of t)for(const t of Object.keys(i).filter((t=>!t.startsWith("_"))))e.add(t);return Array.from(e)}(t._scopes)),e}function Ci(t,e,i,n){const{iScale:s}=t,{key:o="r"}=this._parsing,r=new Array(n);let a,l,h,c;for(a=0,l=n;a<l;++a)h=a+i,c=e[h],r[a]={r:s.parse(Ot(c,o),h)};return r}const Mi=Number.EPSILON||1e-14,ki=(t,e)=>e<t.length&&!t[e].skip&&t[e],Ei=t=>"x"===t?"y":"x";function Si(t,e,i,n){const s=t.skip?e:t,o=e,r=i.skip?e:i,a=ie(o,s),l=ie(r,o);let h=a/(a+l),c=l/(a+l);h=isNaN(h)?0:h,c=isNaN(c)?0:c;const d=n*h,u=n*c;return{previous:{x:o.x-d*(r.x-s.x),y:o.y-d*(r.y-s.y)},next:{x:o.x+u*(r.x-s.x),y:o.y+u*(r.y-s.y)}}}function Di(t,e,i){return Math.max(Math.min(t,i),e)}function Pi(t,e,i,n,s){let o,r,a,l;if(e.spanGaps&&(t=t.filter((t=>!t.skip))),"monotone"===e.cubicInterpolationMode)!function(t,e="x"){const i=Ei(e),n=t.length,s=Array(n).fill(0),o=Array(n);let r,a,l,h=ki(t,0);for(r=0;r<n;++r)if(a=l,l=h,h=ki(t,r+1),l){if(h){const t=h[e]-l[e];s[r]=0!==t?(h[i]-l[i])/t:0}o[r]=a?h?Ut(s[r-1])!==Ut(s[r])?0:(s[r-1]+s[r])/2:s[r-1]:s[r]}!function(t,e,i){const n=t.length;let s,o,r,a,l,h=ki(t,0);for(let c=0;c<n-1;++c)l=h,h=ki(t,c+1),l&&h&&(Zt(e[c],0,Mi)?i[c]=i[c+1]=0:(s=i[c]/e[c],o=i[c+1]/e[c],a=Math.pow(s,2)+Math.pow(o,2),a<=9||(r=3/Math.sqrt(a),i[c]=s*r*e[c],i[c+1]=o*r*e[c])))}(t,s,o),function(t,e,i="x"){const n=Ei(i),s=t.length;let o,r,a,l=ki(t,0);for(let h=0;h<s;++h){if(r=a,a=l,l=ki(t,h+1),!a)continue;const s=a[i],c=a[n];r&&(o=(s-r[i])/3,a[`cp1${i}`]=s-o,a[`cp1${n}`]=c-o*e[h]),l&&(o=(l[i]-s)/3,a[`cp2${i}`]=s+o,a[`cp2${n}`]=c+o*e[h])}}(t,o,e)}(t,s);else{let i=n?t[t.length-1]:t[0];for(o=0,r=t.length;o<r;++o)a=t[o],l=Si(i,a,t[Math.min(o+1,r-(n?0:1))%r],e.tension),a.cp1x=l.previous.x,a.cp1y=l.previous.y,a.cp2x=l.next.x,a.cp2y=l.next.y,i=a}e.capBezierPoints&&function(t,e){let i,n,s,o,r,a=$e(t[0],e);for(i=0,n=t.length;i<n;++i)r=o,o=a,a=i<n-1&&$e(t[i+1],e),o&&(s=t[i],r&&(s.cp1x=Di(s.cp1x,e.left,e.right),s.cp1y=Di(s.cp1y,e.top,e.bottom)),a&&(s.cp2x=Di(s.cp2x,e.left,e.right),s.cp2y=Di(s.cp2y,e.top,e.bottom)))}(t,i)}function Bi(){return"undefined"!=typeof window&&"undefined"!=typeof document}function Ti(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function Oi(t,e,i){let n;return"string"==typeof t?(n=parseInt(t,10),-1!==t.indexOf("%")&&(n=n/100*e.parentNode[i])):n=t,n}const Li=t=>t.ownerDocument.defaultView.getComputedStyle(t,null),Ri=["top","right","bottom","left"];function Ii(t,e,i){const n={};i=i?"-"+i:"";for(let s=0;s<4;s++){const o=Ri[s];n[o]=parseFloat(t[e+"-"+o+i])||0}return n.width=n.left+n.right,n.height=n.top+n.bottom,n}const zi=(t,e,i)=>(t>0||e>0)&&(!i||!i.shadowRoot);function Wi(t,e){if("native"in t)return t;const{canvas:i,currentDevicePixelRatio:n}=e,s=Li(i),o="border-box"===s.boxSizing,r=Ii(s,"padding"),a=Ii(s,"border","width"),{x:l,y:h,box:c}=function(t,e){const i=t.touches,n=i&&i.length?i[0]:t,{offsetX:s,offsetY:o}=n;let r,a,l=!1;if(zi(s,o,t.target))r=s,a=o;else{const t=e.getBoundingClientRect();r=n.clientX-t.left,a=n.clientY-t.top,l=!0}return{x:r,y:a,box:l}}(t,i),d=r.left+(c&&a.left),u=r.top+(c&&a.top);let{width:f,height:p}=e;return o&&(f-=r.width+a.width,p-=r.height+a.height),{x:Math.round((l-d)/f*i.width/n),y:Math.round((h-u)/p*i.height/n)}}const Fi=t=>Math.round(10*t)/10;function ji(t,e,i){const n=e||1,s=Math.floor(t.height*n),o=Math.floor(t.width*n);t.height=Math.floor(t.height),t.width=Math.floor(t.width);const r=t.canvas;return r.style&&(i||!r.style.height&&!r.style.width)&&(r.style.height=`${t.height}px`,r.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==n||r.height!==s||r.width!==o)&&(t.currentDevicePixelRatio=n,r.height=s,r.width=o,t.ctx.setTransform(n,0,0,n,0,0),!0)}const Vi=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};window.addEventListener("test",null,e),window.removeEventListener("test",null,e)}catch(t){}return t}();function Ni(t,e){const i=function(t,e){return Li(t).getPropertyValue(e)}(t,e),n=i&&i.match(/^(\d+)(\.\d+)?px$/);return n?+n[1]:void 0}function Hi(t,e,i,n){return{x:t.x+i*(e.x-t.x),y:t.y+i*(e.y-t.y)}}function Yi(t,e,i,n){return{x:t.x+i*(e.x-t.x),y:"middle"===n?i<.5?t.y:e.y:"after"===n?i<1?t.y:e.y:i>0?e.y:t.y}}function $i(t,e,i,n){const s={x:t.cp2x,y:t.cp2y},o={x:e.cp1x,y:e.cp1y},r=Hi(t,s,i),a=Hi(s,o,i),l=Hi(o,e,i),h=Hi(r,a,i),c=Hi(a,l,i);return Hi(h,c,i)}function Xi(t,e,i){return t?function(t,e){return{x:i=>t+t+e-i,setWidth(t){e=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,e)=>t-e,leftForLtr:(t,e)=>t-e}}(e,i):{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,e)=>t+e,leftForLtr:(t,e)=>t}}function Ui(t,e){let i,n;"ltr"!==e&&"rtl"!==e||(i=t.canvas.style,n=[i.getPropertyValue("direction"),i.getPropertyPriority("direction")],i.setProperty("direction",e,"important"),t.prevTextDirection=n)}function Zi(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function qi(t){return"angle"===t?{between:oe,compare:ne,normalize:se}:{between:ae,compare:(t,e)=>t-e,normalize:t=>t}}function Gi({start:t,end:e,count:i,loop:n,style:s}){return{start:t%i,end:e%i,loop:n&&(e-t+1)%i==0,style:s}}function Ki(t,e,i){if(!i)return[t];const{property:n,start:s,end:o}=i,r=e.length,{compare:a,between:l,normalize:h}=qi(n),{start:c,end:d,loop:u,style:f}=function(t,e,i){const{property:n,start:s,end:o}=i,{between:r,normalize:a}=qi(n),l=e.length;let h,c,{start:d,end:u,loop:f}=t;if(f){for(d+=l,u+=l,h=0,c=l;h<c&&r(a(e[d%l][n]),s,o);++h)d--,u--;d%=l,u%=l}return u<d&&(u+=l),{start:d,end:u,loop:f,style:t.style}}(t,e,i),p=[];let g,m,x,b=!1,y=null;for(let t=c,i=c;t<=d;++t)m=e[t%r],m.skip||(g=h(m[n]),g!==x&&(b=l(g,s,o),null===y&&(b||l(s,x,g)&&0!==a(s,x))&&(y=0===a(g,s)?t:i),null!==y&&(!b||0===a(o,g)||l(o,x,g))&&(p.push(Gi({start:y,end:t,loop:u,count:r,style:f})),y=null),i=t,x=g));return null!==y&&p.push(Gi({start:y,end:d,loop:u,count:r,style:f})),p}function Ji(t,e){const i=[],n=t.segments;for(let s=0;s<n.length;s++){const o=Ki(n[s],t.points,e);o.length&&i.push(...o)}return i}function Qi(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function tn(t,e){if(!e)return!1;const i=[],n=function(t,e){return Ce(e)?(i.includes(e)||i.push(e),i.indexOf(e)):e};return JSON.stringify(t,n)!==JSON.stringify(e,n)}class en{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,i,n){const s=e.listeners[n],o=e.duration;s.forEach((n=>n({chart:t,initial:e.initial,numSteps:o,currentStep:Math.min(i-e.start,o)})))}_refresh(){this._request||(this._running=!0,this._request=pe.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(t=Date.now()){let e=0;this._charts.forEach(((i,n)=>{if(!i.running||!i.items.length)return;const s=i.items;let o,r=s.length-1,a=!1;for(;r>=0;--r)o=s[r],o._active?(o._total>i.duration&&(i.duration=o._total),o.tick(t),a=!0):(s[r]=s[s.length-1],s.pop());a&&(n.draw(),this._notify(n,i,t,"progress")),s.length||(i.running=!1,this._notify(n,i,t,"complete"),i.initial=!1),e+=s.length})),this._lastDate=t,0===e&&(this._running=!1)}_getAnims(t){const e=this._charts;let i=e.get(t);return i||(i={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,i)),i}listen(t,e,i){this._getAnims(t).listeners[e].push(i)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce(((t,e)=>Math.max(t,e._duration)),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const i=e.items;let n=i.length-1;for(;n>=0;--n)i[n].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}}var nn=new en;const sn="transparent",on={boolean:(t,e,i)=>i>.5?e:t,color(t,e,i){const n=Me(t||sn),s=n.valid&&Me(e||sn);return s&&s.valid?s.mix(n,i).hexString():e},number:(t,e,i)=>t+(e-t)*i};class rn{constructor(t,e,i,n){const s=e[i];n=hi([t.to,n,s,t.from]);const o=hi([t.from,s,n]);this._active=!0,this._fn=t.fn||on[t.type||typeof o],this._easing=we[t.easing]||we.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=i,this._from=o,this._to=n,this._promises=void 0}active(){return this._active}update(t,e,i){if(this._active){this._notify(!1);const n=this._target[this._prop],s=i-this._start,o=this._duration-s;this._start=i,this._duration=Math.floor(Math.max(o,t.duration)),this._total+=s,this._loop=!!t.loop,this._to=hi([t.to,e,n,t.from]),this._from=hi([t.from,n,e])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){const e=t-this._start,i=this._duration,n=this._prop,s=this._from,o=this._loop,r=this._to;let a;if(this._active=s!==r&&(o||e<i),!this._active)return this._target[n]=r,void this._notify(!0);e<0?this._target[n]=s:(a=e/i%2,a=o&&a>1?2-a:a,a=this._easing(Math.min(1,Math.max(0,a))),this._target[n]=this._fn(s,r,a))}wait(){const t=this._promises||(this._promises=[]);return new Promise(((e,i)=>{t.push({res:e,rej:i})}))}_notify(t){const e=t?"res":"rej",i=this._promises||[];for(let t=0;t<i.length;t++)i[t][e]()}}class an{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!bt(t))return;const e=Object.keys(We.animation),i=this._properties;Object.getOwnPropertyNames(t).forEach((n=>{const s=t[n];if(!bt(s))return;const o={};for(const t of e)o[t]=s[t];(xt(s.properties)&&s.properties||[n]).forEach((t=>{t!==n&&i.has(t)||i.set(t,o)}))}))}_animateOptions(t,e){const i=e.options,n=function(t,e){if(!e)return;let i=t.options;if(i)return i.$shared&&(t.options=i=Object.assign({},i,{$shared:!1,$animations:{}})),i;t.options=e}(t,i);if(!n)return[];const s=this._createAnimations(n,i);return i.$shared&&function(t,e){const i=[],n=Object.keys(e);for(let e=0;e<n.length;e++){const s=t[n[e]];s&&s.active()&&i.push(s.wait())}return Promise.all(i)}(t.options.$animations,i).then((()=>{t.options=i}),(()=>{})),s}_createAnimations(t,e){const i=this._properties,n=[],s=t.$animations||(t.$animations={}),o=Object.keys(e),r=Date.now();let a;for(a=o.length-1;a>=0;--a){const l=o[a];if("$"===l.charAt(0))continue;if("options"===l){n.push(...this._animateOptions(t,e));continue}const h=e[l];let c=s[l];const d=i.get(l);if(c){if(d&&c.active()){c.update(d,h,r);continue}c.cancel()}d&&d.duration?(s[l]=c=new rn(d,t,l,h),n.push(c)):t[l]=h}return n}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const i=this._createAnimations(t,e);return i.length?(nn.add(this._chart,i),!0):void 0}}function ln(t,e){const i=t&&t.options||{},n=i.reverse,s=void 0===i.min?e:0,o=void 0===i.max?e:0;return{start:n?o:s,end:n?s:o}}function hn(t,e){const i=[],n=t._getSortedDatasetMetas(e);let s,o;for(s=0,o=n.length;s<o;++s)i.push(n[s].index);return i}function cn(t,e,i,n={}){const s=t.keys,o="single"===n.mode;let r,a,l,h;if(null!==e){for(r=0,a=s.length;r<a;++r){if(l=+s[r],l===i){if(n.all)continue;break}h=t.values[l],yt(h)&&(o||0===e||Ut(e)===Ut(h))&&(e+=h)}return e}}function dn(t,e){const i=t&&t.options.stacked;return i||void 0===i&&void 0!==e.stack}function un(t,e,i){const n=t[e]||(t[e]={});return n[i]||(n[i]={})}function fn(t,e,i,n){for(const s of e.getMatchingVisibleMetas(n).reverse()){const e=t[s.index];if(i&&e>0||!i&&e<0)return s.index}return null}function pn(t,e){const{chart:i,_cachedMeta:n}=t,s=i._stacks||(i._stacks={}),{iScale:o,vScale:r,index:a}=n,l=o.axis,h=r.axis,c=function(t,e,i){return`${t.id}.${e.id}.${i.stack||i.type}`}(o,r,n),d=e.length;let u;for(let t=0;t<d;++t){const i=e[t],{[l]:o,[h]:d}=i;u=(i._stacks||(i._stacks={}))[h]=un(s,c,o),u[a]=d,u._top=fn(u,r,!0,n.type),u._bottom=fn(u,r,!1,n.type),(u._visualValues||(u._visualValues={}))[a]=d}}function gn(t,e){const i=t.scales;return Object.keys(i).filter((t=>i[t].axis===e)).shift()}function mn(t,e){const i=t.controller.index,n=t.vScale&&t.vScale.axis;if(n){e=e||t._parsed;for(const t of e){const e=t._stacks;if(!e||void 0===e[n]||void 0===e[n][i])return;delete e[n][i],void 0!==e[n]._visualValues&&void 0!==e[n]._visualValues[i]&&delete e[n]._visualValues[i]}}}const xn=t=>"reset"===t||"none"===t,bn=(t,e)=>e?t:Object.assign({},t);class yn{static defaults={};static datasetElementType=null;static dataElementType=null;constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.supportsDecimation=!1,this.$context=void 0,this._syncList=[],this.datasetElementType=new.target.datasetElementType,this.dataElementType=new.target.dataElementType,this.initialize()}initialize(){const t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=dn(t.vScale,t),this.addElements(),this.options.fill&&!this.chart.isPluginEnabled("filler")&&console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options")}updateIndex(t){this.index!==t&&mn(this._cachedMeta),this.index=t}linkScales(){const t=this.chart,e=this._cachedMeta,i=this.getDataset(),n=(t,e,i,n)=>"x"===t?e:"r"===t?n:i,s=e.xAxisID=_t(i.xAxisID,gn(t,"x")),o=e.yAxisID=_t(i.yAxisID,gn(t,"y")),r=e.rAxisID=_t(i.rAxisID,gn(t,"r")),a=e.indexAxis,l=e.iAxisID=n(a,s,o,r),h=e.vAxisID=n(a,o,s,r);e.xScale=this.getScaleForId(s),e.yScale=this.getScaleForId(o),e.rScale=this.getScaleForId(r),e.iScale=this.getScaleForId(l),e.vScale=this.getScaleForId(h)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&ue(this._data,this),t._stacked&&mn(t)}_dataCheck(){const t=this.getDataset(),e=t.data||(t.data=[]),i=this._data;if(bt(e))this._data=function(t){const e=Object.keys(t),i=new Array(e.length);let n,s,o;for(n=0,s=e.length;n<s;++n)o=e[n],i[n]={x:o,y:t[o]};return i}(e);else if(i!==e){if(i){ue(i,this);const t=this._cachedMeta;mn(t),t._parsed=[]}e&&Object.isExtensible(e)&&(this,(n=e)._chartjs?n._chartjs.listeners.push(this):(Object.defineProperty(n,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[this]}}),de.forEach((t=>{const e="_onData"+Lt(t),i=n[t];Object.defineProperty(n,t,{configurable:!0,enumerable:!1,value(...t){const s=i.apply(this,t);return n._chartjs.listeners.forEach((i=>{"function"==typeof i[e]&&i[e](...t)})),s}})})))),this._syncList=[],this._data=e}var n}addElements(){const t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){const e=this._cachedMeta,i=this.getDataset();let n=!1;this._dataCheck();const s=e._stacked;e._stacked=dn(e.vScale,e),e.stack!==i.stack&&(n=!0,mn(e),e.stack=i.stack),this._resyncElements(t),(n||s!==e._stacked)&&pn(this,e._parsed)}configure(){const t=this.chart.config,e=t.datasetScopeKeys(this._type),i=t.getOptionScopes(this.getDataset(),e,!0);this.options=t.createResolver(i,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,e){const{_cachedMeta:i,_data:n}=this,{iScale:s,_stacked:o}=i,r=s.axis;let a,l,h,c=0===t&&e===n.length||i._sorted,d=t>0&&i._parsed[t-1];if(!1===this._parsing)i._parsed=n,i._sorted=!0,h=n;else{h=xt(n[t])?this.parseArrayData(i,n,t,e):bt(n[t])?this.parseObjectData(i,n,t,e):this.parsePrimitiveData(i,n,t,e);const s=()=>null===l[r]||d&&l[r]<d[r];for(a=0;a<e;++a)i._parsed[a+t]=l=h[a],c&&(s()&&(c=!1),d=l);i._sorted=c}o&&pn(this,h)}parsePrimitiveData(t,e,i,n){const{iScale:s,vScale:o}=t,r=s.axis,a=o.axis,l=s.getLabels(),h=s===o,c=new Array(n);let d,u,f;for(d=0,u=n;d<u;++d)f=d+i,c[d]={[r]:h||s.parse(l[f],f),[a]:o.parse(e[f],f)};return c}parseArrayData(t,e,i,n){const{xScale:s,yScale:o}=t,r=new Array(n);let a,l,h,c;for(a=0,l=n;a<l;++a)h=a+i,c=e[h],r[a]={x:s.parse(c[0],h),y:o.parse(c[1],h)};return r}parseObjectData(t,e,i,n){const{xScale:s,yScale:o}=t,{xAxisKey:r="x",yAxisKey:a="y"}=this._parsing,l=new Array(n);let h,c,d,u;for(h=0,c=n;h<c;++h)d=h+i,u=e[d],l[h]={x:s.parse(Ot(u,r),d),y:o.parse(Ot(u,a),d)};return l}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,i){const n=this.chart,s=this._cachedMeta,o=e[t.axis];return cn({keys:hn(n,!0),values:e._stacks[t.axis]._visualValues},o,s.index,{mode:i})}updateRangeFromParsed(t,e,i,n){const s=i[e.axis];let o=null===s?NaN:s;const r=n&&i._stacks[e.axis];n&&r&&(n.values=r,o=cn(n,s,this._cachedMeta.index)),t.min=Math.min(t.min,o),t.max=Math.max(t.max,o)}getMinMax(t,e){const i=this._cachedMeta,n=i._parsed,s=i._sorted&&t===i.iScale,o=n.length,r=this._getOtherScale(t),a=((t,e,i)=>t&&!e.hidden&&e._stacked&&{keys:hn(i,!0),values:null})(e,i,this.chart),l={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:h,max:c}=function(t){const{min:e,max:i,minDefined:n,maxDefined:s}=t.getUserBounds();return{min:n?e:Number.NEGATIVE_INFINITY,max:s?i:Number.POSITIVE_INFINITY}}(r);let d,u;function f(){u=n[d];const e=u[r.axis];return!yt(u[t.axis])||h>e||c<e}for(d=0;d<o&&(f()||(this.updateRangeFromParsed(l,t,u,a),!s));++d);if(s)for(d=o-1;d>=0;--d)if(!f()){this.updateRangeFromParsed(l,t,u,a);break}return l}getAllParsedValues(t){const e=this._cachedMeta._parsed,i=[];let n,s,o;for(n=0,s=e.length;n<s;++n)o=e[n][t.axis],yt(o)&&i.push(o);return i}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,i=e.iScale,n=e.vScale,s=this.getParsed(t);return{label:i?""+i.getLabelForValue(s[i.axis]):"",value:n?""+n.getLabelForValue(s[n.axis]):""}}_update(t){const e=this._cachedMeta;this.update(t||"default"),e._clip=function(t){let e,i,n,s;return bt(t)?(e=t.top,i=t.right,n=t.bottom,s=t.left):e=i=n=s=t,{top:e,right:i,bottom:n,left:s,disabled:!1===t}}(_t(this.options.clip,function(t,e,i){if(!1===i)return!1;const n=ln(t,i),s=ln(e,i);return{top:s.end,right:n.end,bottom:s.start,left:n.start}}(e.xScale,e.yScale,this.getMaxOverflow())))}update(t){}draw(){const t=this._ctx,e=this.chart,i=this._cachedMeta,n=i.data||[],s=e.chartArea,o=[],r=this._drawStart||0,a=this._drawCount||n.length-r,l=this.options.drawActiveElementsOnTop;let h;for(i.dataset&&i.dataset.draw(t,s,r,a),h=r;h<r+a;++h){const e=n[h];e.hidden||(e.active&&l?o.push(e):e.draw(t,s))}for(h=0;h<o.length;++h)o[h].draw(t,s)}getStyle(t,e){const i=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(i):this.resolveDataElementOptions(t||0,i)}getContext(t,e,i){const n=this.getDataset();let s;if(t>=0&&t<this._cachedMeta.data.length){const e=this._cachedMeta.data[t];s=e.$context||(e.$context=function(t,e,i){return ci(t,{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:i,index:e,mode:"default",type:"data"})}(this.getContext(),t,e)),s.parsed=this.getParsed(t),s.raw=n.data[t],s.index=s.dataIndex=t}else s=this.$context||(this.$context=function(t,e){return ci(t,{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),s.dataset=n,s.index=s.datasetIndex=this.index;return s.active=!!e,s.mode=i,s}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",i){const n="active"===e,s=this._cachedDataOpts,o=t+"-"+e,r=s[o],a=this.enableOptionSharing&&Rt(i);if(r)return bn(r,a);const l=this.chart.config,h=l.datasetElementScopeKeys(this._type,t),c=n?[`${t}Hover`,"hover",t,""]:[t,""],d=l.getOptionScopes(this.getDataset(),h),u=Object.keys(We.elements[t]),f=l.resolveNamedOptions(d,u,(()=>this.getContext(i,n,e)),c);return f.$shared&&(f.$shared=a,s[o]=Object.freeze(bn(f,a))),f}_resolveAnimations(t,e,i){const n=this.chart,s=this._cachedDataOpts,o=`animation-${e}`,r=s[o];if(r)return r;let a;if(!1!==n.options.animation){const n=this.chart.config,s=n.datasetAnimationScopeKeys(this._type,e),o=n.getOptionScopes(this.getDataset(),s);a=n.createResolver(o,this.getContext(t,i,e))}const l=new an(n,a&&a.animations);return a&&a._cacheable&&(s[o]=Object.freeze(l)),l}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||xn(t)||this.chart._animationsDisabled}_getSharedOptions(t,e){const i=this.resolveDataElementOptions(t,e),n=this._sharedOptions,s=this.getSharedOptions(i),o=this.includeOptions(e,s)||s!==n;return this.updateSharedOptions(s,e,i),{sharedOptions:s,includeOptions:o}}updateElement(t,e,i,n){xn(n)?Object.assign(t,i):this._resolveAnimations(e,n).update(t,i)}updateSharedOptions(t,e,i){t&&!xn(e)&&this._resolveAnimations(void 0,e).update(t,i)}_setStyle(t,e,i,n){t.active=n;const s=this.getStyle(e,n);this._resolveAnimations(e,i,n).update(t,{options:!n&&this.getSharedOptions(s)||s})}removeHoverStyle(t,e,i){this._setStyle(t,i,"active",!1)}setHoverStyle(t,e,i){this._setStyle(t,i,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this._data,i=this._cachedMeta.data;for(const[t,e,i]of this._syncList)this[t](e,i);this._syncList=[];const n=i.length,s=e.length,o=Math.min(s,n);o&&this.parse(0,o),s>n?this._insertElements(n,s-n,t):s<n&&this._removeElements(s,n-s)}_insertElements(t,e,i=!0){const n=this._cachedMeta,s=n.data,o=t+e;let r;const a=t=>{for(t.length+=e,r=t.length-1;r>=o;r--)t[r]=t[r-e]};for(a(s),r=t;r<o;++r)s[r]=new this.dataElementType;this._parsing&&a(n._parsed),this.parse(t,e),i&&this.updateElements(s,t,e,"reset")}updateElements(t,e,i,n){}_removeElements(t,e){const i=this._cachedMeta;if(this._parsing){const n=i._parsed.splice(t,e);i._stacked&&mn(i,n)}i.data.splice(t,e)}_sync(t){if(this._parsing)this._syncList.push(t);else{const[e,i,n]=t;this[e](i,n)}this.chart._dataChanges.push([this.index,...t])}_onDataPush(){const t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){e&&this._sync(["_removeElements",t,e]);const i=arguments.length-2;i&&this._sync(["_insertElements",t,i])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function vn(t){const e=t.iScale,i=function(t,e){if(!t._cache.$bar){const i=t.getMatchingVisibleMetas(e);let n=[];for(let e=0,s=i.length;e<s;e++)n=n.concat(i[e].controller.getAllParsedValues(t));t._cache.$bar=fe(n.sort(((t,e)=>t-e)))}return t._cache.$bar}(e,t.type);let n,s,o,r,a=e._length;const l=()=>{32767!==o&&-32768!==o&&(Rt(r)&&(a=Math.min(a,Math.abs(o-r)||a)),r=o)};for(n=0,s=i.length;n<s;++n)o=e.getPixelForValue(i[n]),l();for(r=void 0,n=0,s=e.ticks.length;n<s;++n)o=e.getPixelForTick(n),l();return a}function _n(t,e,i,n){return xt(t)?function(t,e,i,n){const s=i.parse(t[0],n),o=i.parse(t[1],n),r=Math.min(s,o),a=Math.max(s,o);let l=r,h=a;Math.abs(r)>Math.abs(a)&&(l=a,h=r),e[i.axis]=h,e._custom={barStart:l,barEnd:h,start:s,end:o,min:r,max:a}}(t,e,i,n):e[i.axis]=i.parse(t,n),e}function An(t,e,i,n){const s=t.iScale,o=t.vScale,r=s.getLabels(),a=s===o,l=[];let h,c,d,u;for(h=i,c=i+n;h<c;++h)u=e[h],d={},d[s.axis]=a||s.parse(r[h],h),l.push(_n(u,d,o,h));return l}function wn(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function Cn(t,e,i,n){let s=e.borderSkipped;const o={};if(!s)return void(t.borderSkipped=o);if(!0===s)return void(t.borderSkipped={top:!0,right:!0,bottom:!0,left:!0});const{start:r,end:a,reverse:l,top:h,bottom:c}=function(t){let e,i,n,s,o;return t.horizontal?(e=t.base>t.x,i="left",n="right"):(e=t.base<t.y,i="bottom",n="top"),e?(s="end",o="start"):(s="start",o="end"),{start:i,end:n,reverse:e,top:s,bottom:o}}(t);"middle"===s&&i&&(t.enableBorderRadius=!0,(i._top||0)===n?s=h:(i._bottom||0)===n?s=c:(o[Mn(c,r,a,l)]=!0,s=h)),o[Mn(s,r,a,l)]=!0,t.borderSkipped=o}function Mn(t,e,i,n){var s,o,r;return n?(r=i,t=kn(t=(s=t)===(o=e)?r:s===r?o:s,i,e)):t=kn(t,e,i),t}function kn(t,e,i){return"start"===t?e:"end"===t?i:t}function En(t,{inflateAmount:e},i){t.inflateAmount="auto"===e?1===i?.33:0:e}class Sn extends yn{static id="doughnut";static defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"};static descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t&&!t.startsWith("borderDash")&&!t.startsWith("hoverBorderDash")};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i,color:n}}=t.legend.options;return e.labels.map(((e,s)=>{const o=t.getDatasetMeta(0).controller.getStyle(s);return{text:e,fillStyle:o.backgroundColor,strokeStyle:o.borderColor,fontColor:n,lineWidth:o.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(s),index:s}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}}}};constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){const i=this.getDataset().data,n=this._cachedMeta;if(!1===this._parsing)n._parsed=i;else{let s,o,r=t=>+i[t];if(bt(i[t])){const{key:t="value"}=this._parsing;r=e=>+Ot(i[e],t)}for(s=t,o=t+e;s<o;++s)n._parsed[s]=r(s)}}_getRotation(){return Jt(this.options.rotation-90)}_getCircumference(){return Jt(this.options.circumference)}_getRotationExtents(){let t=Ft,e=-Ft;for(let i=0;i<this.chart.data.datasets.length;++i)if(this.chart.isDatasetVisible(i)&&this.chart.getDatasetMeta(i).type===this._type){const n=this.chart.getDatasetMeta(i).controller,s=n._getRotation(),o=n._getCircumference();t=Math.min(t,s),e=Math.max(e,s+o)}return{rotation:t,circumference:e-t}}update(t){const e=this.chart,{chartArea:i}=e,n=this._cachedMeta,s=n.data,o=this.getMaxBorderWidth()+this.getMaxOffset(s)+this.options.spacing,r=Math.max((Math.min(i.width,i.height)-o)/2,0),a=Math.min((h=r,"string"==typeof(l=this.options.cutout)&&l.endsWith("%")?parseFloat(l)/100:+l/h),1);var l,h;const c=this._getRingWeight(this.index),{circumference:d,rotation:u}=this._getRotationExtents(),{ratioX:f,ratioY:p,offsetX:g,offsetY:m}=function(t,e,i){let n=1,s=1,o=0,r=0;if(e<Ft){const a=t,l=a+e,h=Math.cos(a),c=Math.sin(a),d=Math.cos(l),u=Math.sin(l),f=(t,e,n)=>oe(t,a,l,!0)?1:Math.max(e,e*i,n,n*i),p=(t,e,n)=>oe(t,a,l,!0)?-1:Math.min(e,e*i,n,n*i),g=f(0,h,d),m=f(Ht,c,u),x=p(Wt,h,d),b=p(Wt+Ht,c,u);n=(g-x)/2,s=(m-b)/2,o=-(g+x)/2,r=-(m+b)/2}return{ratioX:n,ratioY:s,offsetX:o,offsetY:r}}(u,d,a),x=(i.width-o)/f,b=(i.height-o)/p,y=Math.max(Math.min(x,b)/2,0),v=At(this.options.radius,y),_=(v-Math.max(v*a,0))/this._getVisibleDatasetWeightTotal();this.offsetX=g*v,this.offsetY=m*v,n.total=this.calculateTotal(),this.outerRadius=v-_*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-_*c,0),this.updateElements(s,0,s.length,t)}_circumference(t,e){const i=this.options,n=this._cachedMeta,s=this._getCircumference();return e&&i.animation.animateRotate||!this.chart.getDataVisibility(t)||null===n._parsed[t]||n.data[t].hidden?0:this.calculateCircumference(n._parsed[t]*s/Ft)}updateElements(t,e,i,n){const s="reset"===n,o=this.chart,r=o.chartArea,a=o.options.animation,l=(r.left+r.right)/2,h=(r.top+r.bottom)/2,c=s&&a.animateScale,d=c?0:this.innerRadius,u=c?0:this.outerRadius,{sharedOptions:f,includeOptions:p}=this._getSharedOptions(e,n);let g,m=this._getRotation();for(g=0;g<e;++g)m+=this._circumference(g,s);for(g=e;g<e+i;++g){const e=this._circumference(g,s),i=t[g],o={x:l+this.offsetX,y:h+this.offsetY,startAngle:m,endAngle:m+e,circumference:e,outerRadius:u,innerRadius:d};p&&(o.options=f||this.resolveDataElementOptions(g,i.active?"active":n)),m+=e,this.updateElement(i,g,o,n)}}calculateTotal(){const t=this._cachedMeta,e=t.data;let i,n=0;for(i=0;i<e.length;i++){const s=t._parsed[i];null===s||isNaN(s)||!this.chart.getDataVisibility(i)||e[i].hidden||(n+=Math.abs(s))}return n}calculateCircumference(t){const e=this._cachedMeta.total;return e>0&&!isNaN(t)?Ft*(Math.abs(t)/e):0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,n=i.data.labels||[],s=Pe(e._parsed[t],i.options.locale);return{label:n[t]||"",value:s}}getMaxBorderWidth(t){let e=0;const i=this.chart;let n,s,o,r,a;if(!t)for(n=0,s=i.data.datasets.length;n<s;++n)if(i.isDatasetVisible(n)){o=i.getDatasetMeta(n),t=o.data,r=o.controller;break}if(!t)return 0;for(n=0,s=t.length;n<s;++n)a=r.resolveDataElementOptions(n),"inner"!==a.borderAlign&&(e=Math.max(e,a.borderWidth||0,a.hoverBorderWidth||0));return e}getMaxOffset(t){let e=0;for(let i=0,n=t.length;i<n;++i){const t=this.resolveDataElementOptions(i);e=Math.max(e,t.offset||0,t.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let i=0;i<t;++i)this.chart.isDatasetVisible(i)&&(e+=this._getRingWeight(i));return e}_getRingWeight(t){return Math.max(_t(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}class Dn extends yn{static id="polarArea";static defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i,color:n}}=t.legend.options;return e.labels.map(((e,s)=>{const o=t.getDatasetMeta(0).controller.getStyle(s);return{text:e,fillStyle:o.backgroundColor,strokeStyle:o.borderColor,fontColor:n,lineWidth:o.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(s),index:s}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,n=i.data.labels||[],s=Pe(e._parsed[t].r,i.options.locale);return{label:n[t]||"",value:s}}parseObjectData(t,e,i,n){return Ci.bind(this)(t,e,i,n)}update(t){const e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}getMinMax(){const t=this._cachedMeta,e={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY};return t.data.forEach(((t,i)=>{const n=this.getParsed(i).r;!isNaN(n)&&this.chart.getDataVisibility(i)&&(n<e.min&&(e.min=n),n>e.max&&(e.max=n))})),e}_updateRadius(){const t=this.chart,e=t.chartArea,i=t.options,n=Math.min(e.right-e.left,e.bottom-e.top),s=Math.max(n/2,0),o=(s-Math.max(i.cutoutPercentage?s/100*i.cutoutPercentage:1,0))/t.getVisibleDatasetCount();this.outerRadius=s-o*this.index,this.innerRadius=this.outerRadius-o}updateElements(t,e,i,n){const s="reset"===n,o=this.chart,r=o.options.animation,a=this._cachedMeta.rScale,l=a.xCenter,h=a.yCenter,c=a.getIndexAngle(0)-.5*Wt;let d,u=c;const f=360/this.countVisibleElements();for(d=0;d<e;++d)u+=this._computeAngle(d,n,f);for(d=e;d<e+i;d++){const e=t[d];let i=u,p=u+this._computeAngle(d,n,f),g=o.getDataVisibility(d)?a.getDistanceFromCenterForValue(this.getParsed(d).r):0;u=p,s&&(r.animateScale&&(g=0),r.animateRotate&&(i=p=c));const m={x:l,y:h,innerRadius:0,outerRadius:g,startAngle:i,endAngle:p,options:this.resolveDataElementOptions(d,e.active?"active":n)};this.updateElement(e,d,m,n)}}countVisibleElements(){const t=this._cachedMeta;let e=0;return t.data.forEach(((t,i)=>{!isNaN(this.getParsed(i).r)&&this.chart.getDataVisibility(i)&&e++})),e}_computeAngle(t,e,i){return this.chart.getDataVisibility(t)?Jt(this.resolveDataElementOptions(t,e).angle||i):0}}var Pn=Object.freeze({__proto__:null,BarController:class extends yn{static id="bar";static defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}};static overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};parsePrimitiveData(t,e,i,n){return An(t,e,i,n)}parseArrayData(t,e,i,n){return An(t,e,i,n)}parseObjectData(t,e,i,n){const{iScale:s,vScale:o}=t,{xAxisKey:r="x",yAxisKey:a="y"}=this._parsing,l="x"===s.axis?r:a,h="x"===o.axis?r:a,c=[];let d,u,f,p;for(d=i,u=i+n;d<u;++d)p=e[d],f={},f[s.axis]=s.parse(Ot(p,l),d),c.push(_n(Ot(p,h),f,o,d));return c}updateRangeFromParsed(t,e,i,n){super.updateRangeFromParsed(t,e,i,n);const s=i._custom;s&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,s.min),t.max=Math.max(t.max,s.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:i,vScale:n}=e,s=this.getParsed(t),o=s._custom,r=wn(o)?"["+o.start+", "+o.end+"]":""+n.getLabelForValue(s[n.axis]);return{label:""+i.getLabelForValue(s[i.axis]),value:r}}initialize(){this.enableOptionSharing=!0,super.initialize(),this._cachedMeta.stack=this.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,i,n){const s="reset"===n,{index:o,_cachedMeta:{vScale:r}}=this,a=r.getBasePixel(),l=r.isHorizontal(),h=this._getRuler(),{sharedOptions:c,includeOptions:d}=this._getSharedOptions(e,n);for(let u=e;u<e+i;u++){const e=this.getParsed(u),i=s||mt(e[r.axis])?{base:a,head:a}:this._calculateBarValuePixels(u),f=this._calculateBarIndexPixels(u,h),p=(e._stacks||{})[r.axis],g={horizontal:l,base:i.base,enableBorderRadius:!p||wn(e._custom)||o===p._top||o===p._bottom,x:l?i.head:f.center,y:l?f.center:i.head,height:l?f.size:Math.abs(i.size),width:l?Math.abs(i.size):f.size};d&&(g.options=c||this.resolveDataElementOptions(u,t[u].active?"active":n));const m=g.options||t[u].options;Cn(g,m,p,o),En(g,m,h.ratio),this.updateElement(t[u],u,g,n)}}_getStacks(t,e){const{iScale:i}=this._cachedMeta,n=i.getMatchingVisibleMetas(this._type).filter((t=>t.controller.options.grouped)),s=i.options.stacked,o=[],r=t=>{const i=t.controller.getParsed(e),n=i&&i[t.vScale.axis];if(mt(n)||isNaN(n))return!0};for(const i of n)if((void 0===e||!r(i))&&((!1===s||-1===o.indexOf(i.stack)||void 0===s&&void 0===i.stack)&&o.push(i.stack),i.index===t))break;return o.length||o.push(void 0),o}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,i){const n=this._getStacks(t,i),s=void 0!==e?n.indexOf(e):-1;return-1===s?n.length-1:s}_getRuler(){const t=this.options,e=this._cachedMeta,i=e.iScale,n=[];let s,o;for(s=0,o=e.data.length;s<o;++s)n.push(i.getPixelForValue(this.getParsed(s)[i.axis],s));const r=t.barThickness;return{min:r||vn(e),pixels:n,start:i._startPixel,end:i._endPixel,stackCount:this._getStackCount(),scale:i,grouped:t.grouped,ratio:r?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){const{_cachedMeta:{vScale:e,_stacked:i,index:n},options:{base:s,minBarLength:o}}=this,r=s||0,a=this.getParsed(t),l=a._custom,h=wn(l);let c,d,u=a[e.axis],f=0,p=i?this.applyStack(e,a,i):u;p!==u&&(f=p-u,p=u),h&&(u=l.barStart,p=l.barEnd-l.barStart,0!==u&&Ut(u)!==Ut(l.barEnd)&&(f=0),f+=u);const g=mt(s)||h?f:s;let m=e.getPixelForValue(g);if(c=this.chart.getDataVisibility(t)?e.getPixelForValue(f+p):m,d=c-m,Math.abs(d)<o){d=function(t,e,i){return 0!==t?Ut(t):(e.isHorizontal()?1:-1)*(e.min>=i?1:-1)}(d,e,r)*o,u===r&&(m-=d/2);const t=e.getPixelForDecimal(0),s=e.getPixelForDecimal(1),l=Math.min(t,s),f=Math.max(t,s);m=Math.max(Math.min(m,f),l),c=m+d,i&&!h&&(a._stacks[e.axis]._visualValues[n]=e.getValueForPixel(c)-e.getValueForPixel(m))}if(m===e.getPixelForValue(r)){const t=Ut(d)*e.getLineWidthForValue(r)/2;m+=t,d-=t}return{size:d,base:m,head:c,center:c+d/2}}_calculateBarIndexPixels(t,e){const i=e.scale,n=this.options,s=n.skipNull,o=_t(n.maxBarThickness,1/0);let r,a;if(e.grouped){const i=s?this._getStackCount(t):e.stackCount,l="flex"===n.barThickness?function(t,e,i,n){const s=e.pixels,o=s[t];let r=t>0?s[t-1]:null,a=t<s.length-1?s[t+1]:null;const l=i.categoryPercentage;null===r&&(r=o-(null===a?e.end-e.start:a-o)),null===a&&(a=o+o-r);const h=o-(o-Math.min(r,a))/2*l;return{chunk:Math.abs(a-r)/2*l/n,ratio:i.barPercentage,start:h}}(t,e,n,i):function(t,e,i,n){const s=i.barThickness;let o,r;return mt(s)?(o=e.min*i.categoryPercentage,r=i.barPercentage):(o=s*n,r=1),{chunk:o/n,ratio:r,start:e.pixels[t]-o/2}}(t,e,n,i),h=this._getStackIndex(this.index,this._cachedMeta.stack,s?t:void 0);r=l.start+l.chunk*h+l.chunk/2,a=Math.min(o,l.chunk*l.ratio)}else r=i.getPixelForValue(this.getParsed(t)[i.axis],t),a=Math.min(o,e.min*e.ratio);return{base:r-a/2,head:r+a/2,center:r,size:a}}draw(){const t=this._cachedMeta,e=t.vScale,i=t.data,n=i.length;let s=0;for(;s<n;++s)null!==this.getParsed(s)[e.axis]&&i[s].draw(this._ctx)}},BubbleController:class extends yn{static id="bubble";static defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}};static overrides={scales:{x:{type:"linear"},y:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,e,i,n){const s=super.parsePrimitiveData(t,e,i,n);for(let t=0;t<s.length;t++)s[t]._custom=this.resolveDataElementOptions(t+i).radius;return s}parseArrayData(t,e,i,n){const s=super.parseArrayData(t,e,i,n);for(let t=0;t<s.length;t++){const n=e[i+t];s[t]._custom=_t(n[2],this.resolveDataElementOptions(t+i).radius)}return s}parseObjectData(t,e,i,n){const s=super.parseObjectData(t,e,i,n);for(let t=0;t<s.length;t++){const n=e[i+t];s[t]._custom=_t(n&&n.r&&+n.r,this.resolveDataElementOptions(t+i).radius)}return s}getMaxOverflow(){const t=this._cachedMeta.data;let e=0;for(let i=t.length-1;i>=0;--i)e=Math.max(e,t[i].size(this.resolveDataElementOptions(i))/2);return e>0&&e}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart.data.labels||[],{xScale:n,yScale:s}=e,o=this.getParsed(t),r=n.getLabelForValue(o.x),a=s.getLabelForValue(o.y),l=o._custom;return{label:i[t]||"",value:"("+r+", "+a+(l?", "+l:"")+")"}}update(t){const e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,i,n){const s="reset"===n,{iScale:o,vScale:r}=this._cachedMeta,{sharedOptions:a,includeOptions:l}=this._getSharedOptions(e,n),h=o.axis,c=r.axis;for(let d=e;d<e+i;d++){const e=t[d],i=!s&&this.getParsed(d),u={},f=u[h]=s?o.getPixelForDecimal(.5):o.getPixelForValue(i[h]),p=u[c]=s?r.getBasePixel():r.getPixelForValue(i[c]);u.skip=isNaN(f)||isNaN(p),l&&(u.options=a||this.resolveDataElementOptions(d,e.active?"active":n),s&&(u.options.radius=0)),this.updateElement(e,d,u,n)}}resolveDataElementOptions(t,e){const i=this.getParsed(t);let n=super.resolveDataElementOptions(t,e);n.$shared&&(n=Object.assign({},n,{$shared:!1}));const s=n.radius;return"active"!==e&&(n.radius=0),n.radius+=_t(i&&i._custom,s),n}},DoughnutController:Sn,LineController:class extends yn{static id="line";static defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1};static overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,this.supportsDecimation=!0,super.initialize()}update(t){const e=this._cachedMeta,{dataset:i,data:n=[],_dataset:s}=e,o=this.chart._animationsDisabled;let{start:r,count:a}=be(e,n,o);this._drawStart=r,this._drawCount=a,ye(e)&&(r=0,a=n.length),i._chart=this.chart,i._datasetIndex=this.index,i._decimated=!!s._decimated,i.points=n;const l=this.resolveDatasetElementOptions(t);this.options.showLine||(l.borderWidth=0),l.segment=this.options.segment,this.updateElement(i,void 0,{animated:!o,options:l},t),this.updateElements(n,r,a,t)}updateElements(t,e,i,n){const s="reset"===n,{iScale:o,vScale:r,_stacked:a,_dataset:l}=this._cachedMeta,{sharedOptions:h,includeOptions:c}=this._getSharedOptions(e,n),d=o.axis,u=r.axis,{spanGaps:f,segment:p}=this.options,g=Gt(f)?f:Number.POSITIVE_INFINITY,m=this.chart._animationsDisabled||s||"none"===n,x=e+i,b=t.length;let y=e>0&&this.getParsed(e-1);for(let i=0;i<b;++i){const f=t[i],b=m?f:{};if(i<e||i>=x){b.skip=!0;continue}const v=this.getParsed(i),_=mt(v[u]),A=b[d]=o.getPixelForValue(v[d],i),w=b[u]=s||_?r.getBasePixel():r.getPixelForValue(a?this.applyStack(r,v,a):v[u],i);b.skip=isNaN(A)||isNaN(w)||_,b.stop=i>0&&Math.abs(v[d]-y[d])>g,p&&(b.parsed=v,b.raw=l.data[i]),c&&(b.options=h||this.resolveDataElementOptions(i,f.active?"active":n)),m||this.updateElement(f,i,b,n),y=v}}getMaxOverflow(){const t=this._cachedMeta,e=t.dataset,i=e.options&&e.options.borderWidth||0,n=t.data||[];if(!n.length)return i;const s=n[0].size(this.resolveDataElementOptions(0)),o=n[n.length-1].size(this.resolveDataElementOptions(n.length-1));return Math.max(i,s,o)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}},PieController:class extends Sn{static id="pie";static defaults={cutout:0,rotation:0,circumference:360,radius:"100%"}},PolarAreaController:Dn,RadarController:class extends yn{static id="radar";static defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}};static overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};getLabelAndValue(t){const e=this._cachedMeta.vScale,i=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(i[e.axis])}}parseObjectData(t,e,i,n){return Ci.bind(this)(t,e,i,n)}update(t){const e=this._cachedMeta,i=e.dataset,n=e.data||[],s=e.iScale.getLabels();if(i.points=n,"resize"!==t){const e=this.resolveDatasetElementOptions(t);this.options.showLine||(e.borderWidth=0);const o={_loop:!0,_fullLoop:s.length===n.length,options:e};this.updateElement(i,void 0,o,t)}this.updateElements(n,0,n.length,t)}updateElements(t,e,i,n){const s=this._cachedMeta.rScale,o="reset"===n;for(let r=e;r<e+i;r++){const e=t[r],i=this.resolveDataElementOptions(r,e.active?"active":n),a=s.getPointPositionForValue(r,this.getParsed(r).r),l=o?s.xCenter:a.x,h=o?s.yCenter:a.y,c={x:l,y:h,angle:a.angle,skip:isNaN(l)||isNaN(h),options:i};this.updateElement(e,r,c,n)}}},ScatterController:class extends yn{static id="scatter";static defaults={datasetElementType:!1,dataElementType:"point",showLine:!1,fill:!1};static overrides={interaction:{mode:"point"},scales:{x:{type:"linear"},y:{type:"linear"}}};getLabelAndValue(t){const e=this._cachedMeta,i=this.chart.data.labels||[],{xScale:n,yScale:s}=e,o=this.getParsed(t),r=n.getLabelForValue(o.x),a=s.getLabelForValue(o.y);return{label:i[t]||"",value:"("+r+", "+a+")"}}update(t){const e=this._cachedMeta,{data:i=[]}=e,n=this.chart._animationsDisabled;let{start:s,count:o}=be(e,i,n);if(this._drawStart=s,this._drawCount=o,ye(e)&&(s=0,o=i.length),this.options.showLine){this.datasetElementType||this.addElements();const{dataset:s,_dataset:o}=e;s._chart=this.chart,s._datasetIndex=this.index,s._decimated=!!o._decimated,s.points=i;const r=this.resolveDatasetElementOptions(t);r.segment=this.options.segment,this.updateElement(s,void 0,{animated:!n,options:r},t)}else this.datasetElementType&&(delete e.dataset,this.datasetElementType=!1);this.updateElements(i,s,o,t)}addElements(){const{showLine:t}=this.options;!this.datasetElementType&&t&&(this.datasetElementType=this.chart.registry.getElement("line")),super.addElements()}updateElements(t,e,i,n){const s="reset"===n,{iScale:o,vScale:r,_stacked:a,_dataset:l}=this._cachedMeta,h=this.resolveDataElementOptions(e,n),c=this.getSharedOptions(h),d=this.includeOptions(n,c),u=o.axis,f=r.axis,{spanGaps:p,segment:g}=this.options,m=Gt(p)?p:Number.POSITIVE_INFINITY,x=this.chart._animationsDisabled||s||"none"===n;let b=e>0&&this.getParsed(e-1);for(let h=e;h<e+i;++h){const e=t[h],i=this.getParsed(h),p=x?e:{},y=mt(i[f]),v=p[u]=o.getPixelForValue(i[u],h),_=p[f]=s||y?r.getBasePixel():r.getPixelForValue(a?this.applyStack(r,i,a):i[f],h);p.skip=isNaN(v)||isNaN(_)||y,p.stop=h>0&&Math.abs(i[u]-b[u])>m,g&&(p.parsed=i,p.raw=l.data[h]),d&&(p.options=c||this.resolveDataElementOptions(h,e.active?"active":n)),x||this.updateElement(e,h,p,n),b=i}this.updateSharedOptions(c,n,h)}getMaxOverflow(){const t=this._cachedMeta,e=t.data||[];if(!this.options.showLine){let t=0;for(let i=e.length-1;i>=0;--i)t=Math.max(t,e[i].size(this.resolveDataElementOptions(i))/2);return t>0&&t}const i=t.dataset,n=i.options&&i.options.borderWidth||0;if(!e.length)return n;const s=e[0].size(this.resolveDataElementOptions(0)),o=e[e.length-1].size(this.resolveDataElementOptions(e.length-1));return Math.max(n,s,o)/2}}});function Bn(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class Tn{static override(t){Object.assign(Tn.prototype,t)}options;constructor(t){this.options=t||{}}init(){}formats(){return Bn()}parse(){return Bn()}format(){return Bn()}add(){return Bn()}diff(){return Bn()}startOf(){return Bn()}endOf(){return Bn()}}var On=Tn;function Ln(t,e,i,n){const{controller:s,data:o,_sorted:r}=t,a=s._cachedMeta.iScale;if(a&&e===a.axis&&"r"!==e&&r&&o.length){const t=a._reversePixels?ce:he;if(!n)return t(o,e,i);if(s._sharedOptions){const n=o[0],s="function"==typeof n.getRange&&n.getRange(e);if(s){const n=t(o,e,i-s),r=t(o,e,i+s);return{lo:n.lo,hi:r.hi}}}}return{lo:0,hi:o.length-1}}function Rn(t,e,i,n,s){const o=t.getSortedVisibleDatasetMetas(),r=i[e];for(let t=0,i=o.length;t<i;++t){const{index:i,data:a}=o[t],{lo:l,hi:h}=Ln(o[t],e,r,s);for(let t=l;t<=h;++t){const e=a[t];e.skip||n(e,i,t)}}}function In(t,e,i,n,s){const o=[];return s||t.isPointInArea(e)?(Rn(t,i,e,(function(i,r,a){(s||$e(i,t.chartArea,0))&&i.inRange(e.x,e.y,n)&&o.push({element:i,datasetIndex:r,index:a})}),!0),o):o}function zn(t,e,i,n,s,o){return o||t.isPointInArea(e)?"r"!==i||n?function(t,e,i,n,s,o){let r=[];const a=function(t){const e=-1!==t.indexOf("x"),i=-1!==t.indexOf("y");return function(t,n){const s=e?Math.abs(t.x-n.x):0,o=i?Math.abs(t.y-n.y):0;return Math.sqrt(Math.pow(s,2)+Math.pow(o,2))}}(i);let l=Number.POSITIVE_INFINITY;return Rn(t,i,e,(function(i,h,c){const d=i.inRange(e.x,e.y,s);if(n&&!d)return;const u=i.getCenterPoint(s);if(!o&&!t.isPointInArea(u)&&!d)return;const f=a(e,u);f<l?(r=[{element:i,datasetIndex:h,index:c}],l=f):f===l&&r.push({element:i,datasetIndex:h,index:c})})),r}(t,e,i,n,s,o):function(t,e,i,n){let s=[];return Rn(t,i,e,(function(t,i,o){const{startAngle:r,endAngle:a}=t.getProps(["startAngle","endAngle"],n),{angle:l}=ee(t,{x:e.x,y:e.y});oe(l,r,a)&&s.push({element:t,datasetIndex:i,index:o})})),s}(t,e,i,s):[]}function Wn(t,e,i,n,s){const o=[],r="x"===i?"inXRange":"inYRange";let a=!1;return Rn(t,i,e,((t,n,l)=>{t[r](e[i],s)&&(o.push({element:t,datasetIndex:n,index:l}),a=a||t.inRange(e.x,e.y,s))})),n&&!a?[]:o}var Fn={evaluateInteractionItems:Rn,modes:{index(t,e,i,n){const s=Wi(e,t),o=i.axis||"x",r=i.includeInvisible||!1,a=i.intersect?In(t,s,o,n,r):zn(t,s,o,!1,n,r),l=[];return a.length?(t.getSortedVisibleDatasetMetas().forEach((t=>{const e=a[0].index,i=t.data[e];i&&!i.skip&&l.push({element:i,datasetIndex:t.index,index:e})})),l):[]},dataset(t,e,i,n){const s=Wi(e,t),o=i.axis||"xy",r=i.includeInvisible||!1;let a=i.intersect?In(t,s,o,n,r):zn(t,s,o,!1,n,r);if(a.length>0){const e=a[0].datasetIndex,i=t.getDatasetMeta(e).data;a=[];for(let t=0;t<i.length;++t)a.push({element:i[t],datasetIndex:e,index:t})}return a},point:(t,e,i,n)=>In(t,Wi(e,t),i.axis||"xy",n,i.includeInvisible||!1),nearest(t,e,i,n){const s=Wi(e,t),o=i.axis||"xy",r=i.includeInvisible||!1;return zn(t,s,o,i.intersect,n,r)},x:(t,e,i,n)=>Wn(t,Wi(e,t),"x",i.intersect,n),y:(t,e,i,n)=>Wn(t,Wi(e,t),"y",i.intersect,n)}};const jn=["left","top","right","bottom"];function Vn(t,e){return t.filter((t=>t.pos===e))}function Nn(t,e){return t.filter((t=>-1===jn.indexOf(t.pos)&&t.box.axis===e))}function Hn(t,e){return t.sort(((t,i)=>{const n=e?i:t,s=e?t:i;return n.weight===s.weight?n.index-s.index:n.weight-s.weight}))}function Yn(t,e,i,n){return Math.max(t[i],e[i])+Math.max(t[n],e[n])}function $n(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function Xn(t,e,i,n){const{pos:s,box:o}=i,r=t.maxPadding;if(!bt(s)){i.size&&(t[s]-=i.size);const e=n[i.stack]||{size:0,count:1};e.size=Math.max(e.size,i.horizontal?o.height:o.width),i.size=e.size/e.count,t[s]+=i.size}o.getPadding&&$n(r,o.getPadding());const a=Math.max(0,e.outerWidth-Yn(r,t,"left","right")),l=Math.max(0,e.outerHeight-Yn(r,t,"top","bottom")),h=a!==t.w,c=l!==t.h;return t.w=a,t.h=l,i.horizontal?{same:h,other:c}:{same:c,other:h}}function Un(t,e){const i=e.maxPadding;return function(t){const n={left:0,top:0,right:0,bottom:0};return t.forEach((t=>{n[t]=Math.max(e[t],i[t])})),n}(t?["left","right"]:["top","bottom"])}function Zn(t,e,i,n){const s=[];let o,r,a,l,h,c;for(o=0,r=t.length,h=0;o<r;++o){a=t[o],l=a.box,l.update(a.width||e.w,a.height||e.h,Un(a.horizontal,e));const{same:r,other:d}=Xn(e,i,a,n);h|=r&&s.length,c=c||d,l.fullSize||s.push(a)}return h&&Zn(s,e,i,n)||c}function qn(t,e,i,n,s){t.top=i,t.left=e,t.right=e+n,t.bottom=i+s,t.width=n,t.height=s}function Gn(t,e,i,n){const s=i.padding;let{x:o,y:r}=e;for(const a of t){const t=a.box,l=n[a.stack]||{count:1,placed:0,weight:1},h=a.stackWeight/l.weight||1;if(a.horizontal){const n=e.w*h,o=l.size||t.height;Rt(l.start)&&(r=l.start),t.fullSize?qn(t,s.left,r,i.outerWidth-s.right-s.left,o):qn(t,e.left+l.placed,r,n,o),l.start=r,l.placed+=n,r=t.bottom}else{const n=e.h*h,r=l.size||t.width;Rt(l.start)&&(o=l.start),t.fullSize?qn(t,o,s.top,r,i.outerHeight-s.bottom-s.top):qn(t,o,e.top+l.placed,r,n),l.start=o,l.placed+=n,o=t.right}}e.x=o,e.y=r}var Kn={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const i=t.boxes?t.boxes.indexOf(e):-1;-1!==i&&t.boxes.splice(i,1)},configure(t,e,i){e.fullSize=i.fullSize,e.position=i.position,e.weight=i.weight},update(t,e,i,n){if(!t)return;const s=ai(t.options.layout.padding),o=Math.max(e-s.width,0),r=Math.max(i-s.height,0),a=function(t){const e=function(t){const e=[];let i,n,s,o,r,a;for(i=0,n=(t||[]).length;i<n;++i)s=t[i],({position:o,options:{stack:r,stackWeight:a=1}}=s),e.push({index:i,box:s,pos:o,horizontal:s.isHorizontal(),weight:s.weight,stack:r&&o+r,stackWeight:a});return e}(t),i=Hn(e.filter((t=>t.box.fullSize)),!0),n=Hn(Vn(e,"left"),!0),s=Hn(Vn(e,"right")),o=Hn(Vn(e,"top"),!0),r=Hn(Vn(e,"bottom")),a=Nn(e,"x"),l=Nn(e,"y");return{fullSize:i,leftAndTop:n.concat(o),rightAndBottom:s.concat(l).concat(r).concat(a),chartArea:Vn(e,"chartArea"),vertical:n.concat(s).concat(l),horizontal:o.concat(r).concat(a)}}(t.boxes),l=a.vertical,h=a.horizontal;Ct(t.boxes,(t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}));const c=l.reduce(((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1),0)||1,d=Object.freeze({outerWidth:e,outerHeight:i,padding:s,availableWidth:o,availableHeight:r,vBoxMaxWidth:o/2/c,hBoxMaxHeight:r/2}),u=Object.assign({},s);$n(u,ai(n));const f=Object.assign({maxPadding:u,w:o,h:r,x:s.left,y:s.top},s),p=function(t,e){const i=function(t){const e={};for(const i of t){const{stack:t,pos:n,stackWeight:s}=i;if(!t||!jn.includes(n))continue;const o=e[t]||(e[t]={count:0,placed:0,weight:0,size:0});o.count++,o.weight+=s}return e}(t),{vBoxMaxWidth:n,hBoxMaxHeight:s}=e;let o,r,a;for(o=0,r=t.length;o<r;++o){a=t[o];const{fullSize:r}=a.box,l=i[a.stack],h=l&&a.stackWeight/l.weight;a.horizontal?(a.width=h?h*n:r&&e.availableWidth,a.height=s):(a.width=n,a.height=h?h*s:r&&e.availableHeight)}return i}(l.concat(h),d);Zn(a.fullSize,f,d,p),Zn(l,f,d,p),Zn(h,f,d,p)&&Zn(l,f,d,p),function(t){const e=t.maxPadding;function i(i){const n=Math.max(e[i]-t[i],0);return t[i]+=n,n}t.y+=i("top"),t.x+=i("left"),i("right"),i("bottom")}(f),Gn(a.leftAndTop,f,d,p),f.x+=f.w,f.y+=f.h,Gn(a.rightAndBottom,f,d,p),t.chartArea={left:f.left,top:f.top,right:f.left+f.w,bottom:f.top+f.h,height:f.h,width:f.w},Ct(a.chartArea,(e=>{const i=e.box;Object.assign(i,t.chartArea),i.update(f.w,f.h,{left:0,top:0,right:0,bottom:0})}))}};class Jn{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,i){}removeEventListener(t,e,i){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,i,n){return e=Math.max(0,e||t.width),i=i||t.height,{width:e,height:Math.max(0,n?Math.floor(e/n):i)}}isAttached(t){return!0}updateConfig(t){}}class Qn extends Jn{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}}const ts="$chartjs",es={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},is=t=>null===t||""===t,ns=!!Vi&&{passive:!0};function ss(t,e,i){t.canvas.removeEventListener(e,i,ns)}function os(t,e){for(const i of t)if(i===e||i.contains(e))return!0}function rs(t,e,i){const n=t.canvas,s=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||os(i.addedNodes,n),e=e&&!os(i.removedNodes,n);e&&i()}));return s.observe(document,{childList:!0,subtree:!0}),s}function as(t,e,i){const n=t.canvas,s=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||os(i.removedNodes,n),e=e&&!os(i.addedNodes,n);e&&i()}));return s.observe(document,{childList:!0,subtree:!0}),s}const ls=new Map;let hs=0;function cs(){const t=window.devicePixelRatio;t!==hs&&(hs=t,ls.forEach(((e,i)=>{i.currentDevicePixelRatio!==t&&e()})))}function ds(t,e,i){const n=t.canvas,s=n&&Ti(n);if(!s)return;const o=ge(((t,e)=>{const n=s.clientWidth;i(t,e),n<s.clientWidth&&i()}),window),r=new ResizeObserver((t=>{const e=t[0],i=e.contentRect.width,n=e.contentRect.height;0===i&&0===n||o(i,n)}));return r.observe(s),function(t,e){ls.size||window.addEventListener("resize",cs),ls.set(t,e)}(t,o),r}function us(t,e,i){i&&i.disconnect(),"resize"===e&&function(t){ls.delete(t),ls.size||window.removeEventListener("resize",cs)}(t)}function fs(t,e,i){const n=t.canvas,s=ge((e=>{null!==t.ctx&&i(function(t,e){const i=es[t.type]||t.type,{x:n,y:s}=Wi(t,e);return{type:i,chart:e,native:t,x:void 0!==n?n:null,y:void 0!==s?s:null}}(e,t))}),t);return function(t,e,i){t.addEventListener(e,i,ns)}(n,e,s),s}class ps extends Jn{acquireContext(t,e){const i=t&&t.getContext&&t.getContext("2d");return i&&i.canvas===t?(function(t,e){const i=t.style,n=t.getAttribute("height"),s=t.getAttribute("width");if(t[ts]={initial:{height:n,width:s,style:{display:i.display,height:i.height,width:i.width}}},i.display=i.display||"block",i.boxSizing=i.boxSizing||"border-box",is(s)){const e=Ni(t,"width");void 0!==e&&(t.width=e)}if(is(n))if(""===t.style.height)t.height=t.width/(e||2);else{const e=Ni(t,"height");void 0!==e&&(t.height=e)}}(t,e),i):null}releaseContext(t){const e=t.canvas;if(!e[ts])return!1;const i=e[ts].initial;["height","width"].forEach((t=>{const n=i[t];mt(n)?e.removeAttribute(t):e.setAttribute(t,n)}));const n=i.style||{};return Object.keys(n).forEach((t=>{e.style[t]=n[t]})),e.width=e.width,delete e[ts],!0}addEventListener(t,e,i){this.removeEventListener(t,e);const n=t.$proxies||(t.$proxies={}),s={attach:rs,detach:as,resize:ds}[e]||fs;n[e]=s(t,e,i)}removeEventListener(t,e){const i=t.$proxies||(t.$proxies={}),n=i[e];n&&(({attach:us,detach:us,resize:us}[e]||ss)(t,e,n),i[e]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,i,n){return function(t,e,i,n){const s=Li(t),o=Ii(s,"margin"),r=Oi(s.maxWidth,t,"clientWidth")||Vt,a=Oi(s.maxHeight,t,"clientHeight")||Vt,l=function(t,e,i){let n,s;if(void 0===e||void 0===i){const o=Ti(t);if(o){const t=o.getBoundingClientRect(),r=Li(o),a=Ii(r,"border","width"),l=Ii(r,"padding");e=t.width-l.width-a.width,i=t.height-l.height-a.height,n=Oi(r.maxWidth,o,"clientWidth"),s=Oi(r.maxHeight,o,"clientHeight")}else e=t.clientWidth,i=t.clientHeight}return{width:e,height:i,maxWidth:n||Vt,maxHeight:s||Vt}}(t,e,i);let{width:h,height:c}=l;if("content-box"===s.boxSizing){const t=Ii(s,"border","width"),e=Ii(s,"padding");h-=e.width+t.width,c-=e.height+t.height}return h=Math.max(0,h-o.width),c=Math.max(0,n?h/n:c-o.height),h=Fi(Math.min(h,r,l.maxWidth)),c=Fi(Math.min(c,a,l.maxHeight)),h&&!c&&(c=Fi(h/2)),(void 0!==e||void 0!==i)&&n&&l.height&&c>l.height&&(c=l.height,h=Fi(Math.floor(c*n))),{width:h,height:c}}(t,e,i,n)}isAttached(t){const e=Ti(t);return!(!e||!e.isConnected)}}class gs{static defaults={};static defaultRoutes=void 0;x;y;active=!1;options;$animations;tooltipPosition(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}hasValue(){return Gt(this.x)&&Gt(this.y)}getProps(t,e){const i=this.$animations;if(!e||!i)return this;const n={};return t.forEach((t=>{n[t]=i[t]&&i[t].active()?i[t]._to:this[t]})),n}}function ms(t,e,i,n,s){const o=_t(n,0),r=Math.min(_t(s,t.length),t.length);let a,l,h,c=0;for(i=Math.ceil(i),s&&(a=s-n,i=a/Math.floor(a/i)),h=o;h<0;)c++,h=Math.round(o+c*i);for(l=Math.max(o,0);l<r;l++)l===h&&(e.push(t[l]),c++,h=Math.round(o+c*i))}const xs=(t,e,i)=>"top"===e||"left"===e?t[e]+i:t[e]-i,bs=(t,e)=>Math.min(e||t,t);function ys(t,e){const i=[],n=t.length/e,s=t.length;let o=0;for(;o<s;o+=n)i.push(t[Math.floor(o)]);return i}function vs(t,e,i){const n=t.ticks.length,s=Math.min(e,n-1),o=t._startPixel,r=t._endPixel,a=1e-6;let l,h=t.getPixelForTick(s);if(!(i&&(l=1===n?Math.max(h-o,r-h):0===e?(t.getPixelForTick(1)-h)/2:(h-t.getPixelForTick(s-1))/2,h+=s<e?l:-l,h<o-a||h>r+a)))return h}function _s(t){return t.drawTicks?t.tickLength:0}function As(t,e){if(!t.display)return 0;const i=li(t.font,e),n=ai(t.padding);return(xt(t.text)?t.text.length:1)*i.lineHeight+n.height}function ws(t,e,i){let n=me(t);return(i&&"right"!==e||!i&&"right"===e)&&(n=(t=>"left"===t?"right":"right"===t?"left":t)(n)),n}class Cs extends gs{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:i,_suggestedMax:n}=this;return t=vt(t,Number.POSITIVE_INFINITY),e=vt(e,Number.NEGATIVE_INFINITY),i=vt(i,Number.POSITIVE_INFINITY),n=vt(n,Number.NEGATIVE_INFINITY),{min:vt(t,i),max:vt(e,n),minDefined:yt(t),maxDefined:yt(e)}}getMinMax(t){let e,{min:i,max:n,minDefined:s,maxDefined:o}=this.getUserBounds();if(s&&o)return{min:i,max:n};const r=this.getMatchingVisibleMetas();for(let a=0,l=r.length;a<l;++a)e=r[a].controller.getMinMax(this,t),s||(i=Math.min(i,e.min)),o||(n=Math.max(n,e.max));return i=o&&i>n?n:i,n=s&&i>n?i:n,{min:vt(i,vt(n,i)),max:vt(n,vt(i,n))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}getLabelItems(t=this.chart.chartArea){return this._labelItems||(this._labelItems=this._computeLabelItems(t))}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){wt(this.options.beforeUpdate,[this])}update(t,e,i){const{beginAtZero:n,grace:s,ticks:o}=this.options,r=o.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this._margins=i=Object.assign({left:0,right:0,top:0,bottom:0},i),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+i.left+i.right:this.height+i.top+i.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=function(t,e,i){const{min:n,max:s}=t,o=At(e,(s-n)/2),r=(t,e)=>i&&0===t?0:t+e;return{min:r(n,-Math.abs(o)),max:r(s,o)}}(this,s,n),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const a=r<this.ticks.length;this._convertTicksToLabels(a?ys(this.ticks,r):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),o.display&&(o.autoSkip||"auto"===o.source)&&(this.ticks=function(t,e){const i=t.options.ticks,n=function(t){const e=t.options.offset,i=t._tickSize(),n=t._length/i+(e?0:1),s=t._maxLength/i;return Math.floor(Math.min(n,s))}(t),s=Math.min(i.maxTicksLimit||n,n),o=i.major.enabled?function(t){const e=[];let i,n;for(i=0,n=t.length;i<n;i++)t[i].major&&e.push(i);return e}(e):[],r=o.length,a=o[0],l=o[r-1],h=[];if(r>s)return function(t,e,i,n){let s,o=0,r=i[0];for(n=Math.ceil(n),s=0;s<t.length;s++)s===r&&(e.push(t[s]),o++,r=i[o*n])}(e,h,o,r/s),h;const c=function(t,e,i){const n=function(t){const e=t.length;let i,n;if(e<2)return!1;for(n=t[0],i=1;i<e;++i)if(t[i]-t[i-1]!==n)return!1;return n}(t),s=e.length/i;if(!n)return Math.max(s,1);const o=function(t){const e=[],i=Math.sqrt(t);let n;for(n=1;n<i;n++)t%n==0&&(e.push(n),e.push(t/n));return i===(0|i)&&e.push(i),e.sort(((t,e)=>t-e)).pop(),e}(n);for(let t=0,e=o.length-1;t<e;t++){const e=o[t];if(e>s)return e}return Math.max(s,1)}(o,e,s);if(r>0){let t,i;const n=r>1?Math.round((l-a)/(r-1)):null;for(ms(e,h,c,mt(n)?0:a-n,a),t=0,i=r-1;t<i;t++)ms(e,h,c,o[t],o[t+1]);return ms(e,h,c,l,mt(n)?e.length:l+n),h}return ms(e,h,c),h}(this,this.ticks),this._labelSizes=null,this.afterAutoSkip()),a&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t,e,i=this.options.reverse;this.isHorizontal()?(t=this.left,e=this.right):(t=this.top,e=this.bottom,i=!i),this._startPixel=t,this._endPixel=e,this._reversePixels=i,this._length=e-t,this._alignToPixels=this.options.alignToPixels}afterUpdate(){wt(this.options.afterUpdate,[this])}beforeSetDimensions(){wt(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){wt(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),wt(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){wt(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this.options.ticks;let i,n,s;for(i=0,n=t.length;i<n;i++)s=t[i],s.label=wt(e.callback,[s.value,i,t],this)}afterTickToLabelConversion(){wt(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){wt(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this.options,e=t.ticks,i=bs(this.ticks.length,t.ticks.maxTicksLimit),n=e.minRotation||0,s=e.maxRotation;let o,r,a,l=n;if(!this._isVisible()||!e.display||n>=s||i<=1||!this.isHorizontal())return void(this.labelRotation=n);const h=this._getLabelSizes(),c=h.widest.width,d=h.highest.height,u=re(this.chart.width-c,0,this.maxWidth);o=t.offset?this.maxWidth/i:u/(i-1),c+6>o&&(o=u/(i-(t.offset?.5:1)),r=this.maxHeight-_s(t.grid)-e.padding-As(t.title,this.chart.options.font),a=Math.sqrt(c*c+d*d),l=Qt(Math.min(Math.asin(re((h.highest.height+6)/o,-1,1)),Math.asin(re(r/a,-1,1))-Math.asin(re(d/a,-1,1)))),l=Math.max(n,Math.min(s,l))),this.labelRotation=l}afterCalculateLabelRotation(){wt(this.options.afterCalculateLabelRotation,[this])}afterAutoSkip(){}beforeFit(){wt(this.options.beforeFit,[this])}fit(){const t={width:0,height:0},{chart:e,options:{ticks:i,title:n,grid:s}}=this,o=this._isVisible(),r=this.isHorizontal();if(o){const o=As(n,e.options.font);if(r?(t.width=this.maxWidth,t.height=_s(s)+o):(t.height=this.maxHeight,t.width=_s(s)+o),i.display&&this.ticks.length){const{first:e,last:n,widest:s,highest:o}=this._getLabelSizes(),a=2*i.padding,l=Jt(this.labelRotation),h=Math.cos(l),c=Math.sin(l);if(r){const e=i.mirror?0:c*s.width+h*o.height;t.height=Math.min(this.maxHeight,t.height+e+a)}else{const e=i.mirror?0:h*s.width+c*o.height;t.width=Math.min(this.maxWidth,t.width+e+a)}this._calculatePadding(e,n,c,h)}}this._handleMargins(),r?(this.width=this._length=e.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=e.height-this._margins.top-this._margins.bottom)}_calculatePadding(t,e,i,n){const{ticks:{align:s,padding:o},position:r}=this.options,a=0!==this.labelRotation,l="top"!==r&&"x"===this.axis;if(this.isHorizontal()){const r=this.getPixelForTick(0)-this.left,h=this.right-this.getPixelForTick(this.ticks.length-1);let c=0,d=0;a?l?(c=n*t.width,d=i*e.height):(c=i*t.height,d=n*e.width):"start"===s?d=e.width:"end"===s?c=t.width:"inner"!==s&&(c=t.width/2,d=e.width/2),this.paddingLeft=Math.max((c-r+o)*this.width/(this.width-r),0),this.paddingRight=Math.max((d-h+o)*this.width/(this.width-h),0)}else{let i=e.height/2,n=t.height/2;"start"===s?(i=0,n=t.height):"end"===s&&(i=e.height,n=0),this.paddingTop=i+o,this.paddingBottom=n+o}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){wt(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){let e,i;for(this.beforeTickToLabelConversion(),this.generateTickLabels(t),e=0,i=t.length;e<i;e++)mt(t[e].label)&&(t.splice(e,1),i--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){let t=this._labelSizes;if(!t){const e=this.options.ticks.sampleSize;let i=this.ticks;e<i.length&&(i=ys(i,e)),this._labelSizes=t=this._computeLabelSizes(i,i.length,this.options.ticks.maxTicksLimit)}return t}_computeLabelSizes(t,e,i){const{ctx:n,_longestTextCache:s}=this,o=[],r=[],a=Math.floor(e/bs(e,i));let l,h,c,d,u,f,p,g,m,x,b,y=0,v=0;for(l=0;l<e;l+=a){if(d=t[l].label,u=this._resolveTickFontOptions(l),n.font=f=u.string,p=s[f]=s[f]||{data:{},gc:[]},g=u.lineHeight,m=x=0,mt(d)||xt(d)){if(xt(d))for(h=0,c=d.length;h<c;++h)b=d[h],mt(b)||xt(b)||(m=Fe(n,p.data,p.gc,m,b),x+=g)}else m=Fe(n,p.data,p.gc,m,d),x=g;o.push(m),r.push(x),y=Math.max(m,y),v=Math.max(x,v)}!function(t,e){Ct(t,(t=>{const i=t.gc,n=i.length/2;let s;if(n>e){for(s=0;s<n;++s)delete t.data[i[s]];i.splice(0,n)}}))}(s,e);const _=o.indexOf(y),A=r.indexOf(v),w=t=>({width:o[t]||0,height:r[t]||0});return{first:w(0),last:w(e-1),widest:w(_),highest:w(A),widths:o,heights:r}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);const e=this._startPixel+t*this._length;return re(this._alignToPixels?Ve(this.chart,e,0):e,-32768,32767)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this.ticks||[];if(t>=0&&t<e.length){const i=e[t];return i.$context||(i.$context=function(t,e,i){return ci(t,{tick:i,index:e,type:"tick"})}(this.getContext(),t,i))}return this.$context||(this.$context=ci(this.chart.getContext(),{scale:this,type:"scale"}))}_tickSize(){const t=this.options.ticks,e=Jt(this.labelRotation),i=Math.abs(Math.cos(e)),n=Math.abs(Math.sin(e)),s=this._getLabelSizes(),o=t.autoSkipPadding||0,r=s?s.widest.width+o:0,a=s?s.highest.height+o:0;return this.isHorizontal()?a*i>r*n?r/i:a/n:a*n<r*i?a/i:r/n}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this.axis,i=this.chart,n=this.options,{grid:s,position:o,border:r}=n,a=s.offset,l=this.isHorizontal(),h=this.ticks.length+(a?1:0),c=_s(s),d=[],u=r.setContext(this.getContext()),f=u.display?u.width:0,p=f/2,g=function(t){return Ve(i,t,f)};let m,x,b,y,v,_,A,w,C,M,k,E;if("top"===o)m=g(this.bottom),_=this.bottom-c,w=m-p,M=g(t.top)+p,E=t.bottom;else if("bottom"===o)m=g(this.top),M=t.top,E=g(t.bottom)-p,_=m+p,w=this.top+c;else if("left"===o)m=g(this.right),v=this.right-c,A=m-p,C=g(t.left)+p,k=t.right;else if("right"===o)m=g(this.left),C=t.left,k=g(t.right)-p,v=m+p,A=this.left+c;else if("x"===e){if("center"===o)m=g((t.top+t.bottom)/2+.5);else if(bt(o)){const t=Object.keys(o)[0],e=o[t];m=g(this.chart.scales[t].getPixelForValue(e))}M=t.top,E=t.bottom,_=m+p,w=_+c}else if("y"===e){if("center"===o)m=g((t.left+t.right)/2);else if(bt(o)){const t=Object.keys(o)[0],e=o[t];m=g(this.chart.scales[t].getPixelForValue(e))}v=m-p,A=v-c,C=t.left,k=t.right}const S=_t(n.ticks.maxTicksLimit,h),D=Math.max(1,Math.ceil(h/S));for(x=0;x<h;x+=D){const t=this.getContext(x),e=s.setContext(t),n=r.setContext(t),o=e.lineWidth,h=e.color,c=n.dash||[],u=n.dashOffset,f=e.tickWidth,p=e.tickColor,g=e.tickBorderDash||[],m=e.tickBorderDashOffset;b=vs(this,x,a),void 0!==b&&(y=Ve(i,b,o),l?v=A=C=k=y:_=w=M=E=y,d.push({tx1:v,ty1:_,tx2:A,ty2:w,x1:C,y1:M,x2:k,y2:E,width:o,color:h,borderDash:c,borderDashOffset:u,tickWidth:f,tickColor:p,tickBorderDash:g,tickBorderDashOffset:m}))}return this._ticksLength=h,this._borderValue=m,d}_computeLabelItems(t){const e=this.axis,i=this.options,{position:n,ticks:s}=i,o=this.isHorizontal(),r=this.ticks,{align:a,crossAlign:l,padding:h,mirror:c}=s,d=_s(i.grid),u=d+h,f=c?-h:u,p=-Jt(this.labelRotation),g=[];let m,x,b,y,v,_,A,w,C,M,k,E,S="middle";if("top"===n)_=this.bottom-f,A=this._getXAxisLabelAlignment();else if("bottom"===n)_=this.top+f,A=this._getXAxisLabelAlignment();else if("left"===n){const t=this._getYAxisLabelAlignment(d);A=t.textAlign,v=t.x}else if("right"===n){const t=this._getYAxisLabelAlignment(d);A=t.textAlign,v=t.x}else if("x"===e){if("center"===n)_=(t.top+t.bottom)/2+u;else if(bt(n)){const t=Object.keys(n)[0],e=n[t];_=this.chart.scales[t].getPixelForValue(e)+u}A=this._getXAxisLabelAlignment()}else if("y"===e){if("center"===n)v=(t.left+t.right)/2-u;else if(bt(n)){const t=Object.keys(n)[0],e=n[t];v=this.chart.scales[t].getPixelForValue(e)}A=this._getYAxisLabelAlignment(d).textAlign}"y"===e&&("start"===a?S="top":"end"===a&&(S="bottom"));const D=this._getLabelSizes();for(m=0,x=r.length;m<x;++m){b=r[m],y=b.label;const t=s.setContext(this.getContext(m));w=this.getPixelForTick(m)+s.labelOffset,C=this._resolveTickFontOptions(m),M=C.lineHeight,k=xt(y)?y.length:1;const e=k/2,i=t.color,a=t.textStrokeColor,h=t.textStrokeWidth;let d,u=A;if(o?(v=w,"inner"===A&&(u=m===x-1?this.options.reverse?"left":"right":0===m?this.options.reverse?"right":"left":"center"),E="top"===n?"near"===l||0!==p?-k*M+M/2:"center"===l?-D.highest.height/2-e*M+M:-D.highest.height+M/2:"near"===l||0!==p?M/2:"center"===l?D.highest.height/2-e*M:D.highest.height-k*M,c&&(E*=-1),0===p||t.showLabelBackdrop||(v+=M/2*Math.sin(p))):(_=w,E=(1-k)*M/2),t.showLabelBackdrop){const e=ai(t.backdropPadding),i=D.heights[m],n=D.widths[m];let s=E-e.top,o=0-e.left;switch(S){case"middle":s-=i/2;break;case"bottom":s-=i}switch(A){case"center":o-=n/2;break;case"right":o-=n}d={left:o,top:s,width:n+e.width,height:i+e.height,color:t.backdropColor}}g.push({label:y,font:C,textOffset:E,options:{rotation:p,color:i,strokeColor:a,strokeWidth:h,textAlign:u,textBaseline:S,translation:[v,_],backdrop:d}})}return g}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-Jt(this.labelRotation))return"top"===t?"left":"right";let i="center";return"start"===e.align?i="left":"end"===e.align?i="right":"inner"===e.align&&(i="inner"),i}_getYAxisLabelAlignment(t){const{position:e,ticks:{crossAlign:i,mirror:n,padding:s}}=this.options,o=t+s,r=this._getLabelSizes().widest.width;let a,l;return"left"===e?n?(l=this.right+s,"near"===i?a="left":"center"===i?(a="center",l+=r/2):(a="right",l+=r)):(l=this.right-o,"near"===i?a="right":"center"===i?(a="center",l-=r/2):(a="left",l=this.left)):"right"===e?n?(l=this.left+s,"near"===i?a="right":"center"===i?(a="center",l-=r/2):(a="left",l-=r)):(l=this.left+o,"near"===i?a="left":"center"===i?(a="center",l+=r/2):(a="right",l=this.right)):a="right",{textAlign:a,x:l}}_computeLabelArea(){if(this.options.ticks.mirror)return;const t=this.chart,e=this.options.position;return"left"===e||"right"===e?{top:0,left:this.left,bottom:t.height,right:this.right}:"top"===e||"bottom"===e?{top:this.top,left:0,bottom:this.bottom,right:t.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:i,top:n,width:s,height:o}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(i,n,s,o),t.restore())}getLineWidthForValue(t){const e=this.options.grid;if(!this._isVisible()||!e.display)return 0;const i=this.ticks.findIndex((e=>e.value===t));return i>=0?e.setContext(this.getContext(i)).lineWidth:0}drawGrid(t){const e=this.options.grid,i=this.ctx,n=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t));let s,o;const r=(t,e,n)=>{n.width&&n.color&&(i.save(),i.lineWidth=n.width,i.strokeStyle=n.color,i.setLineDash(n.borderDash||[]),i.lineDashOffset=n.borderDashOffset,i.beginPath(),i.moveTo(t.x,t.y),i.lineTo(e.x,e.y),i.stroke(),i.restore())};if(e.display)for(s=0,o=n.length;s<o;++s){const t=n[s];e.drawOnChartArea&&r({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),e.drawTicks&&r({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const{chart:t,ctx:e,options:{border:i,grid:n}}=this,s=i.setContext(this.getContext()),o=i.display?s.width:0;if(!o)return;const r=n.setContext(this.getContext(0)).lineWidth,a=this._borderValue;let l,h,c,d;this.isHorizontal()?(l=Ve(t,this.left,o)-o/2,h=Ve(t,this.right,r)+r/2,c=d=a):(c=Ve(t,this.top,o)-o/2,d=Ve(t,this.bottom,r)+r/2,l=h=a),e.save(),e.lineWidth=s.width,e.strokeStyle=s.color,e.beginPath(),e.moveTo(l,c),e.lineTo(h,d),e.stroke(),e.restore()}drawLabels(t){if(!this.options.ticks.display)return;const e=this.ctx,i=this._computeLabelArea();i&&Xe(e,i);const n=this.getLabelItems(t);for(const t of n){const i=t.options,n=t.font;Je(e,t.label,0,t.textOffset,n,i)}i&&Ue(e)}drawTitle(){const{ctx:t,options:{position:e,title:i,reverse:n}}=this;if(!i.display)return;const s=li(i.font),o=ai(i.padding),r=i.align;let a=s.lineHeight/2;"bottom"===e||"center"===e||bt(e)?(a+=o.bottom,xt(i.text)&&(a+=s.lineHeight*(i.text.length-1))):a+=o.top;const{titleX:l,titleY:h,maxWidth:c,rotation:d}=function(t,e,i,n){const{top:s,left:o,bottom:r,right:a,chart:l}=t,{chartArea:h,scales:c}=l;let d,u,f,p=0;const g=r-s,m=a-o;if(t.isHorizontal()){if(u=xe(n,o,a),bt(i)){const t=Object.keys(i)[0],n=i[t];f=c[t].getPixelForValue(n)+g-e}else f="center"===i?(h.bottom+h.top)/2+g-e:xs(t,i,e);d=a-o}else{if(bt(i)){const t=Object.keys(i)[0],n=i[t];u=c[t].getPixelForValue(n)-m+e}else u="center"===i?(h.left+h.right)/2-m+e:xs(t,i,e);f=xe(n,r,s),p="left"===i?-Ht:Ht}return{titleX:u,titleY:f,maxWidth:d,rotation:p}}(this,a,e,r);Je(t,i.text,0,0,s,{color:i.color,maxWidth:c,rotation:d,textAlign:ws(r,e,n),textBaseline:"middle",translation:[l,h]})}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){const t=this.options,e=t.ticks&&t.ticks.z||0,i=_t(t.grid&&t.grid.z,-1),n=_t(t.border&&t.border.z,0);return this._isVisible()&&this.draw===Cs.prototype.draw?[{z:i,draw:t=>{this.drawBackground(),this.drawGrid(t),this.drawTitle()}},{z:n,draw:()=>{this.drawBorder()}},{z:e,draw:t=>{this.drawLabels(t)}}]:[{z:e,draw:t=>{this.draw(t)}}]}getMatchingVisibleMetas(t){const e=this.chart.getSortedVisibleDatasetMetas(),i=this.axis+"AxisID",n=[];let s,o;for(s=0,o=e.length;s<o;++s){const o=e[s];o[i]!==this.id||t&&o.type!==t||n.push(o)}return n}_resolveTickFontOptions(t){return li(this.options.ticks.setContext(this.getContext(t)).font)}_maxDigits(){const t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}class Ms{constructor(t,e,i){this.type=t,this.scope=e,this.override=i,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=Object.getPrototypeOf(t);let i;(function(t){return"id"in t&&"defaults"in t})(e)&&(i=this.register(e));const n=this.items,s=t.id,o=this.scope+"."+s;if(!s)throw new Error("class does not have id: "+t);return s in n||(n[s]=t,function(t,e,i){const n=Dt(Object.create(null),[i?We.get(i):{},We.get(e),t.defaults]);We.set(e,n),t.defaultRoutes&&function(t,e){Object.keys(e).forEach((i=>{const n=i.split("."),s=n.pop(),o=[t].concat(n).join("."),r=e[i].split("."),a=r.pop(),l=r.join(".");We.route(o,s,l,a)}))}(e,t.defaultRoutes),t.descriptors&&We.describe(e,t.descriptors)}(t,o,i),this.override&&We.override(t.id,t.overrides)),o}get(t){return this.items[t]}unregister(t){const e=this.items,i=t.id,n=this.scope;i in e&&delete e[i],n&&i in We[n]&&(delete We[n][i],this.override&&delete Oe[i])}}class ks{constructor(){this.controllers=new Ms(yn,"datasets",!0),this.elements=new Ms(gs,"elements"),this.plugins=new Ms(Object,"plugins"),this.scales=new Ms(Cs,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,i){[...e].forEach((e=>{const n=i||this._getRegistryForType(e);i||n.isForType(e)||n===this.plugins&&e.id?this._exec(t,n,e):Ct(e,(e=>{const n=i||this._getRegistryForType(e);this._exec(t,n,e)}))}))}_exec(t,e,i){const n=Lt(t);wt(i["before"+n],[],i),e[t](i),wt(i["after"+n],[],i)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const i=this._typedRegistries[e];if(i.isForType(t))return i}return this.plugins}_get(t,e,i){const n=e.get(t);if(void 0===n)throw new Error('"'+t+'" is not a registered '+i+".");return n}}var Es=new ks;class Ss{constructor(){this._init=[]}notify(t,e,i,n){"beforeInit"===e&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));const s=n?this._descriptors(t).filter(n):this._descriptors(t),o=this._notify(s,t,e,i);return"afterDestroy"===e&&(this._notify(s,t,"stop"),this._notify(this._init,t,"uninstall")),o}_notify(t,e,i,n){n=n||{};for(const s of t){const t=s.plugin;if(!1===wt(t[i],[e,n,s.options],t)&&n.cancelable)return!1}return!0}invalidate(){mt(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const i=t&&t.config,n=_t(i.options&&i.options.plugins,{}),s=function(t){const e={},i=[],n=Object.keys(Es.plugins.items);for(let t=0;t<n.length;t++)i.push(Es.getPlugin(n[t]));const s=t.plugins||[];for(let t=0;t<s.length;t++){const n=s[t];-1===i.indexOf(n)&&(i.push(n),e[n.id]=!0)}return{plugins:i,localIds:e}}(i);return!1!==n||e?function(t,{plugins:e,localIds:i},n,s){const o=[],r=t.getContext();for(const a of e){const e=a.id,l=Ds(n[e],s);null!==l&&o.push({plugin:a,options:Ps(t.config,{plugin:a,local:i[e]},l,r)})}return o}(t,s,n,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],i=this._cache,n=(t,e)=>t.filter((t=>!e.some((e=>t.plugin.id===e.plugin.id))));this._notify(n(e,i),t,"stop"),this._notify(n(i,e),t,"start")}}function Ds(t,e){return e||!1!==t?!0===t?{}:t:null}function Ps(t,{plugin:e,local:i},n,s){const o=t.pluginScopeKeys(e),r=t.getOptionScopes(n,o);return i&&e.defaults&&r.push(e.defaults),t.createResolver(r,s,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function Bs(t,e){const i=We.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||i.indexAxis||"x"}function Ts(t){if("x"===t||"y"===t||"r"===t)return t}function Os(t,...e){if(Ts(t))return t;for(const n of e){const e=n.axis||("top"===(i=n.position)||"bottom"===i?"x":"left"===i||"right"===i?"y":void 0)||t.length>1&&Ts(t[0].toLowerCase());if(e)return e}var i;throw new Error(`Cannot determine type of '${t}' axis. Please provide 'axis' or 'position' option.`)}function Ls(t,e,i){if(i[e+"AxisID"]===t)return{axis:e}}function Rs(t){const e=t.options||(t.options={});e.plugins=_t(e.plugins,{}),e.scales=function(t,e){const i=Oe[t.type]||{scales:{}},n=e.scales||{},s=Bs(t.type,e),o=Object.create(null);return Object.keys(n).forEach((e=>{const r=n[e];if(!bt(r))return console.error(`Invalid scale configuration for scale: ${e}`);if(r._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${e}`);const a=Os(e,r,function(t,e){if(e.data&&e.data.datasets){const i=e.data.datasets.filter((e=>e.xAxisID===t||e.yAxisID===t));if(i.length)return Ls(t,"x",i[0])||Ls(t,"y",i[0])}return{}}(e,t),We.scales[r.type]),l=function(t,e){return t===e?"_index_":"_value_"}(a,s),h=i.scales||{};o[e]=Pt(Object.create(null),[{axis:a},r,h[a],h[l]])})),t.data.datasets.forEach((i=>{const s=i.type||t.type,r=i.indexAxis||Bs(s,e),a=(Oe[s]||{}).scales||{};Object.keys(a).forEach((t=>{const e=function(t,e){let i=t;return"_index_"===t?i=e:"_value_"===t&&(i="x"===e?"y":"x"),i}(t,r),s=i[e+"AxisID"]||e;o[s]=o[s]||Object.create(null),Pt(o[s],[{axis:e},n[s],a[t]])}))})),Object.keys(o).forEach((t=>{const e=o[t];Pt(e,[We.scales[e.type],We.scale])})),o}(t,e)}function Is(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const zs=new Map,Ws=new Set;function Fs(t,e){let i=zs.get(t);return i||(i=e(),zs.set(t,i),Ws.add(i)),i}const js=(t,e,i)=>{const n=Ot(e,i);void 0!==n&&t.add(n)};class Vs{constructor(t){this._config=function(t){return(t=t||{}).data=Is(t.data),Rs(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=Is(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),Rs(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return Fs(t,(()=>[[`datasets.${t}`,""]]))}datasetAnimationScopeKeys(t,e){return Fs(`${t}.transition.${e}`,(()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]]))}datasetElementScopeKeys(t,e){return Fs(`${t}-${e}`,(()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]]))}pluginScopeKeys(t){const e=t.id;return Fs(`${this.type}-plugin-${e}`,(()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]]))}_cachedScopes(t,e){const i=this._scopeCache;let n=i.get(t);return n&&!e||(n=new Map,i.set(t,n)),n}getOptionScopes(t,e,i){const{options:n,type:s}=this,o=this._cachedScopes(t,i),r=o.get(e);if(r)return r;const a=new Set;e.forEach((e=>{t&&(a.add(t),e.forEach((e=>js(a,t,e)))),e.forEach((t=>js(a,n,t))),e.forEach((t=>js(a,Oe[s]||{},t))),e.forEach((t=>js(a,We,t))),e.forEach((t=>js(a,Le,t)))}));const l=Array.from(a);return 0===l.length&&l.push(Object.create(null)),Ws.has(e)&&o.set(e,l),l}chartOptionScopes(){const{options:t,type:e}=this;return[t,Oe[e]||{},We.datasets[e]||{},{type:e},We,Le]}resolveNamedOptions(t,e,i,n=[""]){const s={$shared:!0},{resolver:o,subPrefixes:r}=Ns(this._resolverCache,t,n);let a=o;(function(t,e){const{isScriptable:i,isIndexable:n}=fi(t);for(const s of e){const e=i(s),o=n(s),r=(o||e)&&t[s];if(e&&(It(r)||Hs(r))||o&&xt(r))return!0}return!1})(o,e)&&(s.$shared=!1,a=ui(o,i=It(i)?i():i,this.createResolver(t,i,r)));for(const t of e)s[t]=a[t];return s}createResolver(t,e,i=[""],n){const{resolver:s}=Ns(this._resolverCache,t,i);return bt(e)?ui(s,e,void 0,n):s}}function Ns(t,e,i){let n=t.get(e);n||(n=new Map,t.set(e,n));const s=i.join();let o=n.get(s);return o||(o={resolver:di(e,i),subPrefixes:i.filter((t=>!t.toLowerCase().includes("hover")))},n.set(s,o)),o}const Hs=t=>bt(t)&&Object.getOwnPropertyNames(t).reduce(((e,i)=>e||It(t[i])),!1),Ys=["top","bottom","left","right","chartArea"];function $s(t,e){return"top"===t||"bottom"===t||-1===Ys.indexOf(t)&&"x"===e}function Xs(t,e){return function(i,n){return i[t]===n[t]?i[e]-n[e]:i[t]-n[t]}}function Us(t){const e=t.chart,i=e.options.animation;e.notifyPlugins("afterRender"),wt(i&&i.onComplete,[t],e)}function Zs(t){const e=t.chart,i=e.options.animation;wt(i&&i.onProgress,[t],e)}function qs(t){return Bi()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const Gs={},Ks=t=>{const e=qs(t);return Object.values(Gs).filter((t=>t.canvas===e)).pop()};function Js(t,e,i){const n=Object.keys(t);for(const s of n){const n=+s;if(n>=e){const o=t[s];delete t[s],(i>0||n>e)&&(t[n+i]=o)}}}class Qs{static defaults=We;static instances=Gs;static overrides=Oe;static registry=Es;static version="4.3.3";static getChart=Ks;static register(...t){Es.add(...t),to()}static unregister(...t){Es.remove(...t),to()}constructor(t,e){const i=this.config=new Vs(e),n=qs(t),s=Ks(n);if(s)throw new Error("Canvas is already in use. Chart with ID '"+s.id+"' must be destroyed before the canvas with ID '"+s.canvas.id+"' can be reused.");const o=i.createResolver(i.chartOptionScopes(),this.getContext());this.platform=new(i.platform||function(t){return!Bi()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?Qn:ps}(n)),this.platform.updateConfig(i);const r=this.platform.acquireContext(n,o.aspectRatio),a=r&&r.canvas,l=a&&a.height,h=a&&a.width;this.id=gt(),this.ctx=r,this.canvas=a,this.width=h,this.height=l,this._options=o,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new Ss,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=function(t,e){let i;return function(...n){return e?(clearTimeout(i),i=setTimeout(t,e,n)):t.apply(this,n),e}}((t=>this.update(t)),o.resizeDelay||0),this._dataChanges=[],Gs[this.id]=this,r&&a?(nn.listen(this,"complete",Us),nn.listen(this,"progress",Zs),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:i,height:n,_aspectRatio:s}=this;return mt(t)?e&&s?s:n?i/n:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}get registry(){return Es}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():ji(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return Ne(this.canvas,this.ctx),this}stop(){return nn.stop(this),this}resize(t,e){nn.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const i=this.options,n=this.canvas,s=i.maintainAspectRatio&&this.aspectRatio,o=this.platform.getMaximumSize(n,t,e,s),r=i.devicePixelRatio||this.platform.getDevicePixelRatio(),a=this.width?"resize":"attach";this.width=o.width,this.height=o.height,this._aspectRatio=this.aspectRatio,ji(this,r,!0)&&(this.notifyPlugins("resize",{size:o}),wt(i.onResize,[this,o],this),this.attached&&this._doResize(a)&&this.render())}ensureScalesHaveIDs(){Ct(this.options.scales||{},((t,e)=>{t.id=e}))}buildOrUpdateScales(){const t=this.options,e=t.scales,i=this.scales,n=Object.keys(i).reduce(((t,e)=>(t[e]=!1,t)),{});let s=[];e&&(s=s.concat(Object.keys(e).map((t=>{const i=e[t],n=Os(t,i),s="r"===n,o="x"===n;return{options:i,dposition:s?"chartArea":o?"bottom":"left",dtype:s?"radialLinear":o?"category":"linear"}})))),Ct(s,(e=>{const s=e.options,o=s.id,r=Os(o,s),a=_t(s.type,e.dtype);void 0!==s.position&&$s(s.position,r)===$s(e.dposition)||(s.position=e.dposition),n[o]=!0;let l=null;o in i&&i[o].type===a?l=i[o]:(l=new(Es.getScale(a))({id:o,type:a,ctx:this.ctx,chart:this}),i[l.id]=l),l.init(s,t)})),Ct(n,((t,e)=>{t||delete i[e]})),Ct(i,(t=>{Kn.configure(this,t,t.options),Kn.addBox(this,t)}))}_updateMetasets(){const t=this._metasets,e=this.data.datasets.length,i=t.length;if(t.sort(((t,e)=>t.index-e.index)),i>e){for(let t=e;t<i;++t)this._destroyDatasetMeta(t);t.splice(e,i-e)}this._sortedMetasets=t.slice(0).sort(Xs("order","index"))}_removeUnreferencedMetasets(){const{_metasets:t,data:{datasets:e}}=this;t.length>e.length&&delete this._stacks,t.forEach(((t,i)=>{0===e.filter((e=>e===t._dataset)).length&&this._destroyDatasetMeta(i)}))}buildOrUpdateControllers(){const t=[],e=this.data.datasets;let i,n;for(this._removeUnreferencedMetasets(),i=0,n=e.length;i<n;i++){const n=e[i];let s=this.getDatasetMeta(i);const o=n.type||this.config.type;if(s.type&&s.type!==o&&(this._destroyDatasetMeta(i),s=this.getDatasetMeta(i)),s.type=o,s.indexAxis=n.indexAxis||Bs(o,this.options),s.order=n.order||0,s.index=i,s.label=""+n.label,s.visible=this.isDatasetVisible(i),s.controller)s.controller.updateIndex(i),s.controller.linkScales();else{const e=Es.getController(o),{datasetElementType:n,dataElementType:r}=We.datasets[o];Object.assign(e,{dataElementType:Es.getElement(r),datasetElementType:n&&Es.getElement(n)}),s.controller=new e(this,i),t.push(s.controller)}}return this._updateMetasets(),t}_resetElements(){Ct(this.data.datasets,((t,e)=>{this.getDatasetMeta(e).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this.config;e.update();const i=this._options=e.createResolver(e.chartOptionScopes(),this.getContext()),n=this._animationsDisabled=!i.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const s=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let o=0;for(let t=0,e=this.data.datasets.length;t<e;t++){const{controller:e}=this.getDatasetMeta(t),i=!n&&-1===s.indexOf(e);e.buildOrUpdateElements(i),o=Math.max(+e.getMaxOverflow(),o)}o=this._minPadding=i.layout.autoPadding?o:0,this._updateLayout(o),n||Ct(s,(t=>{t.reset()})),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(Xs("z","_idx"));const{_active:r,_lastEvent:a}=this;a?this._eventHandler(a,!0):r.length&&this._updateHoverStyles(r,r,!0),this.render()}_updateScales(){Ct(this.scales,(t=>{Kn.removeBox(this,t)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const t=this.options,e=new Set(Object.keys(this._listeners)),i=new Set(t.events);zt(e,i)&&!!this._responsiveListeners===t.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:t}=this,e=this._getUniformDataChanges()||[];for(const{method:i,start:n,count:s}of e)Js(t,n,"_removeElements"===i?-s:s)}_getUniformDataChanges(){const t=this._dataChanges;if(!t||!t.length)return;this._dataChanges=[];const e=this.data.datasets.length,i=e=>new Set(t.filter((t=>t[0]===e)).map(((t,e)=>e+","+t.splice(1).join(",")))),n=i(0);for(let t=1;t<e;t++)if(!zt(n,i(t)))return;return Array.from(n).map((t=>t.split(","))).map((t=>({method:t[1],start:+t[2],count:+t[3]})))}_updateLayout(t){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;Kn.update(this,this.width,this.height,t);const e=this.chartArea,i=e.width<=0||e.height<=0;this._layers=[],Ct(this.boxes,(t=>{i&&"chartArea"===t.position||(t.configure&&t.configure(),this._layers.push(...t._layers()))}),this),this._layers.forEach(((t,e)=>{t._idx=e})),this.notifyPlugins("afterLayout")}_updateDatasets(t){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let t=0,e=this.data.datasets.length;t<e;++t)this.getDatasetMeta(t).controller.configure();for(let e=0,i=this.data.datasets.length;e<i;++e)this._updateDataset(e,It(t)?t({datasetIndex:e}):t);this.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const i=this.getDatasetMeta(t),n={meta:i,index:t,mode:e,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",n)&&(i.controller._update(e),n.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",n))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(nn.has(this)?this.attached&&!nn.running(this)&&nn.start(this):(this.draw(),Us({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){const{width:t,height:e}=this._resizeBeforeDraw;this._resize(t,e),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const e=this._layers;for(t=0;t<e.length&&e[t].z<=0;++t)e[t].draw(this.chartArea);for(this._drawDatasets();t<e.length;++t)e[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,i=[];let n,s;for(n=0,s=e.length;n<s;++n){const s=e[n];t&&!s.visible||i.push(s)}return i}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=this.getSortedVisibleDatasetMetas();for(let e=t.length-1;e>=0;--e)this._drawDataset(t[e]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this.ctx,i=t._clip,n=!i.disabled,s=function(t){const{xScale:e,yScale:i}=t;if(e&&i)return{left:e.left,right:e.right,top:i.top,bottom:i.bottom}}(t)||this.chartArea,o={meta:t,index:t.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",o)&&(n&&Xe(e,{left:!1===i.left?0:s.left-i.left,right:!1===i.right?this.width:s.right+i.right,top:!1===i.top?0:s.top-i.top,bottom:!1===i.bottom?this.height:s.bottom+i.bottom}),t.controller.draw(),n&&Ue(e),o.cancelable=!1,this.notifyPlugins("afterDatasetDraw",o))}isPointInArea(t){return $e(t,this.chartArea,this._minPadding)}getElementsAtEventForMode(t,e,i,n){const s=Fn.modes[e];return"function"==typeof s?s(this,t,i,n):[]}getDatasetMeta(t){const e=this.data.datasets[t],i=this._metasets;let n=i.filter((t=>t&&t._dataset===e)).pop();return n||(n={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},i.push(n)),n}getContext(){return this.$context||(this.$context=ci(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const i=this.getDatasetMeta(t);return"boolean"==typeof i.hidden?!i.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,e,i){const n=i?"show":"hide",s=this.getDatasetMeta(t),o=s.controller._resolveAnimations(void 0,n);Rt(e)?(s.data[e].hidden=!i,this.update()):(this.setDatasetVisibility(t,i),o.update(s,{visible:i}),this.update((e=>e.datasetIndex===t?n:void 0)))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){const e=this._metasets[t];e&&e.controller&&e.controller._destroy(),delete this._metasets[t]}_stop(){let t,e;for(this.stop(),nn.remove(this),t=0,e=this.data.datasets.length;t<e;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:t,ctx:e}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),Ne(t,e),this.platform.releaseContext(e),this.canvas=null,this.ctx=null),delete Gs[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this._listeners,e=this.platform,i=(i,n)=>{e.addEventListener(this,i,n),t[i]=n},n=(t,e,i)=>{t.offsetX=e,t.offsetY=i,this._eventHandler(t)};Ct(this.options.events,(t=>i(t,n)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const t=this._responsiveListeners,e=this.platform,i=(i,n)=>{e.addEventListener(this,i,n),t[i]=n},n=(i,n)=>{t[i]&&(e.removeEventListener(this,i,n),delete t[i])},s=(t,e)=>{this.canvas&&this.resize(t,e)};let o;const r=()=>{n("attach",r),this.attached=!0,this.resize(),i("resize",s),i("detach",o)};o=()=>{this.attached=!1,n("resize",s),this._stop(),this._resize(0,0),i("attach",r)},e.isAttached(this.canvas)?r():o()}unbindEvents(){Ct(this._listeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._listeners={},Ct(this._responsiveListeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._responsiveListeners=void 0}updateHoverStyle(t,e,i){const n=i?"set":"remove";let s,o,r,a;for("dataset"===e&&(s=this.getDatasetMeta(t[0].datasetIndex),s.controller["_"+n+"DatasetHoverStyle"]()),r=0,a=t.length;r<a;++r){o=t[r];const e=o&&this.getDatasetMeta(o.datasetIndex).controller;e&&e[n+"HoverStyle"](o.element,o.datasetIndex,o.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this._active||[],i=t.map((({datasetIndex:t,index:e})=>{const i=this.getDatasetMeta(t);if(!i)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:i.data[e],index:e}}));!Mt(i,e)&&(this._active=i,this._lastEvent=null,this._updateHoverStyles(i,e))}notifyPlugins(t,e,i){return this._plugins.notify(this,t,e,i)}isPluginEnabled(t){return 1===this._plugins._cache.filter((e=>e.plugin.id===t)).length}_updateHoverStyles(t,e,i){const n=this.options.hover,s=(t,e)=>t.filter((t=>!e.some((e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)))),o=s(e,t),r=i?t:s(t,e);o.length&&this.updateHoverStyle(o,n.mode,!1),r.length&&n.mode&&this.updateHoverStyle(r,n.mode,!0)}_eventHandler(t,e){const i={event:t,replay:e,cancelable:!0,inChartArea:this.isPointInArea(t)},n=e=>(e.options.events||this.options.events).includes(t.native.type);if(!1===this.notifyPlugins("beforeEvent",i,n))return;const s=this._handleEvent(t,e,i.inChartArea);return i.cancelable=!1,this.notifyPlugins("afterEvent",i,n),(s||i.changed)&&this.render(),this}_handleEvent(t,e,i){const{_active:n=[],options:s}=this,o=e,r=this._getActiveElements(t,n,i,o),a=function(t){return"mouseup"===t.type||"click"===t.type||"contextmenu"===t.type}(t),l=function(t,e,i,n){return i&&"mouseout"!==t.type?n?e:t:null}(t,this._lastEvent,i,a);i&&(this._lastEvent=null,wt(s.onHover,[t,r,this],this),a&&wt(s.onClick,[t,r,this],this));const h=!Mt(r,n);return(h||e)&&(this._active=r,this._updateHoverStyles(r,n,e)),this._lastEvent=l,h}_getActiveElements(t,e,i,n){if("mouseout"===t.type)return[];if(!i)return e;const s=this.options.hover;return this.getElementsAtEventForMode(t,s.mode,s,n)}}function to(){return Ct(Qs.instances,(t=>t._plugins.invalidate()))}function eo(t,e,i,n){return{x:i+t*Math.cos(e),y:n+t*Math.sin(e)}}function io(t,e,i,n,s,o){const{x:r,y:a,startAngle:l,pixelMargin:h,innerRadius:c}=e,d=Math.max(e.outerRadius+n+i-h,0),u=c>0?c+n+i+h:0;let f=0;const p=s-l;if(n){const t=((c>0?c-n:0)+(d>0?d-n:0))/2;f=(p-(0!==t?p*t/(t+n):p))/2}const g=(p-Math.max(.001,p*d-i/Wt)/d)/2,m=l+g+f,x=s-g-f,{outerStart:b,outerEnd:y,innerStart:v,innerEnd:_}=function(t,e,i,n){const s=si(t.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]),o=(i-e)/2,r=Math.min(o,n*e/2),a=t=>{const e=(i-Math.min(o,t))*n/2;return re(t,0,Math.min(o,e))};return{outerStart:a(s.outerStart),outerEnd:a(s.outerEnd),innerStart:re(s.innerStart,0,r),innerEnd:re(s.innerEnd,0,r)}}(e,u,d,x-m),A=d-b,w=d-y,C=m+b/A,M=x-y/w,k=u+v,E=u+_,S=m+v/k,D=x-_/E;if(t.beginPath(),o){const e=(C+M)/2;if(t.arc(r,a,d,C,e),t.arc(r,a,d,e,M),y>0){const e=eo(w,M,r,a);t.arc(e.x,e.y,y,M,x+Ht)}const i=eo(E,x,r,a);if(t.lineTo(i.x,i.y),_>0){const e=eo(E,D,r,a);t.arc(e.x,e.y,_,x+Ht,D+Math.PI)}const n=(x-_/u+(m+v/u))/2;if(t.arc(r,a,u,x-_/u,n,!0),t.arc(r,a,u,n,m+v/u,!0),v>0){const e=eo(k,S,r,a);t.arc(e.x,e.y,v,S+Math.PI,m-Ht)}const s=eo(A,m,r,a);if(t.lineTo(s.x,s.y),b>0){const e=eo(A,C,r,a);t.arc(e.x,e.y,b,m-Ht,C)}}else{t.moveTo(r,a);const e=Math.cos(C)*d+r,i=Math.sin(C)*d+a;t.lineTo(e,i);const n=Math.cos(M)*d+r,s=Math.sin(M)*d+a;t.lineTo(n,s)}t.closePath()}function no(t,e,i=e){t.lineCap=_t(i.borderCapStyle,e.borderCapStyle),t.setLineDash(_t(i.borderDash,e.borderDash)),t.lineDashOffset=_t(i.borderDashOffset,e.borderDashOffset),t.lineJoin=_t(i.borderJoinStyle,e.borderJoinStyle),t.lineWidth=_t(i.borderWidth,e.borderWidth),t.strokeStyle=_t(i.borderColor,e.borderColor)}function so(t,e,i){t.lineTo(i.x,i.y)}function oo(t,e,i={}){const n=t.length,{start:s=0,end:o=n-1}=i,{start:r,end:a}=e,l=Math.max(s,r),h=Math.min(o,a),c=s<r&&o<r||s>a&&o>a;return{count:n,start:l,loop:e.loop,ilen:h<l&&!c?n+h-l:h-l}}function ro(t,e,i,n){const{points:s,options:o}=e,{count:r,start:a,loop:l,ilen:h}=oo(s,i,n),c=function(t){return t.stepped?Ze:t.tension||"monotone"===t.cubicInterpolationMode?qe:so}(o);let d,u,f,{move:p=!0,reverse:g}=n||{};for(d=0;d<=h;++d)u=s[(a+(g?h-d:d))%r],u.skip||(p?(t.moveTo(u.x,u.y),p=!1):c(t,f,u,g,o.stepped),f=u);return l&&(u=s[(a+(g?h:0))%r],c(t,f,u,g,o.stepped)),!!l}function ao(t,e,i,n){const s=e.points,{count:o,start:r,ilen:a}=oo(s,i,n),{move:l=!0,reverse:h}=n||{};let c,d,u,f,p,g,m=0,x=0;const b=t=>(r+(h?a-t:t))%o,y=()=>{f!==p&&(t.lineTo(m,p),t.lineTo(m,f),t.lineTo(m,g))};for(l&&(d=s[b(0)],t.moveTo(d.x,d.y)),c=0;c<=a;++c){if(d=s[b(c)],d.skip)continue;const e=d.x,i=d.y,n=0|e;n===u?(i<f?f=i:i>p&&(p=i),m=(x*m+e)/++x):(y(),t.lineTo(e,i),u=n,x=0,f=p=i),g=i}y()}function lo(t){const e=t.options,i=e.borderDash&&e.borderDash.length;return t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||i?ro:ao}const ho="function"==typeof Path2D;class co extends gs{static id="line";static defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};static descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){const i=this.options;if((i.tension||"monotone"===i.cubicInterpolationMode)&&!i.stepped&&!this._pointsUpdated){const n=i.spanGaps?this._loop:this._fullLoop;Pi(this._points,i,t,n,e),this._pointsUpdated=!0}}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=function(t,e){const i=t.points,n=t.options.spanGaps,s=i.length;if(!s)return[];const o=!!t._loop,{start:r,end:a}=function(t,e,i,n){let s=0,o=e-1;if(i&&!n)for(;s<e&&!t[s].skip;)s++;for(;s<e&&t[s].skip;)s++;for(s%=e,i&&(o+=s);o>s&&t[o%e].skip;)o--;return o%=e,{start:s,end:o}}(i,s,o,n);return function(t,e,i,n){return n&&n.setContext&&i?function(t,e,i,n){const s=t._chart.getContext(),o=Qi(t.options),{_datasetIndex:r,options:{spanGaps:a}}=t,l=i.length,h=[];let c=o,d=e[0].start,u=d;function f(t,e,n,s){const o=a?-1:1;if(t!==e){for(t+=l;i[t%l].skip;)t-=o;for(;i[e%l].skip;)e+=o;t%l!=e%l&&(h.push({start:t%l,end:e%l,loop:n,style:s}),c=s,d=e%l)}}for(const t of e){d=a?d:t.start;let e,o=i[d%l];for(u=d+1;u<=t.end;u++){const a=i[u%l];e=Qi(n.setContext(ci(s,{type:"segment",p0:o,p1:a,p0DataIndex:(u-1)%l,p1DataIndex:u%l,datasetIndex:r}))),tn(e,c)&&f(d,u-1,t.loop,c),o=a,c=e}d<u-1&&f(d,u-1,t.loop,c)}return h}(t,e,i,n):e}(t,!0===n?[{start:r,end:a,loop:o}]:function(t,e,i,n){const s=t.length,o=[];let r,a=e,l=t[e];for(r=e+1;r<=i;++r){const i=t[r%s];i.skip||i.stop?l.skip||(n=!1,o.push({start:e%s,end:(r-1)%s,loop:n}),e=a=i.stop?r:null):(a=r,l.skip&&(e=r)),l=i}return null!==a&&o.push({start:e%s,end:a%s,loop:n}),o}(i,r,a<r?a+s:a,!!t._fullLoop&&0===r&&a===s-1),i,e)}(this,this.options.segment))}first(){const t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){const t=this.segments,e=this.points,i=t.length;return i&&e[t[i-1].end]}interpolate(t,e){const i=this.options,n=t[e],s=this.points,o=Ji(this,{property:e,start:n,end:n});if(!o.length)return;const r=[],a=function(t){return t.stepped?Yi:t.tension||"monotone"===t.cubicInterpolationMode?$i:Hi}(i);let l,h;for(l=0,h=o.length;l<h;++l){const{start:h,end:c}=o[l],d=s[h],u=s[c];if(d===u){r.push(d);continue}const f=a(d,u,Math.abs((n-d[e])/(u[e]-d[e])),i.stepped);f[e]=t[e],r.push(f)}return 1===r.length?r[0]:r}pathSegment(t,e,i){return lo(this)(t,this,e,i)}path(t,e,i){const n=this.segments,s=lo(this);let o=this._loop;e=e||0,i=i||this.points.length-e;for(const r of n)o&=s(t,this,r,{start:e,end:e+i-1});return!!o}draw(t,e,i,n){const s=this.options||{};(this.points||[]).length&&s.borderWidth&&(t.save(),function(t,e,i,n){ho&&!e.options.segment?function(t,e,i,n){let s=e._path;s||(s=e._path=new Path2D,e.path(s,i,n)&&s.closePath()),no(t,e.options),t.stroke(s)}(t,e,i,n):function(t,e,i,n){const{segments:s,options:o}=e,r=lo(e);for(const a of s)no(t,o,a.style),t.beginPath(),r(t,e,a,{start:i,end:i+n-1})&&t.closePath(),t.stroke()}(t,e,i,n)}(t,this,i,n),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function uo(t,e,i,n){const s=t.options,{[i]:o}=t.getProps([i],n);return Math.abs(e-o)<s.radius+s.hitRadius}function fo(t,e){const{x:i,y:n,base:s,width:o,height:r}=t.getProps(["x","y","base","width","height"],e);let a,l,h,c,d;return t.horizontal?(d=r/2,a=Math.min(i,s),l=Math.max(i,s),h=n-d,c=n+d):(d=o/2,a=i-d,l=i+d,h=Math.min(n,s),c=Math.max(n,s)),{left:a,top:h,right:l,bottom:c}}function po(t,e,i,n){return t?0:re(e,i,n)}function go(t,e,i,n){const s=null===e,o=null===i,r=t&&!(s&&o)&&fo(t,n);return r&&(s||ae(e,r.left,r.right))&&(o||ae(i,r.top,r.bottom))}function mo(t,e){t.rect(e.x,e.y,e.w,e.h)}function xo(t,e,i={}){const n=t.x!==i.x?-e:0,s=t.y!==i.y?-e:0,o=(t.x+t.w!==i.x+i.w?e:0)-n,r=(t.y+t.h!==i.y+i.h?e:0)-s;return{x:t.x+n,y:t.y+s,w:t.w+o,h:t.h+r,radius:t.radius}}var bo=Object.freeze({__proto__:null,ArcElement:class extends gs{static id="arc";static defaults={borderAlign:"center",borderColor:"#fff",borderDash:[],borderDashOffset:0,borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0,circular:!0};static defaultRoutes={backgroundColor:"backgroundColor"};static descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t};circumference;endAngle;fullCircles;innerRadius;outerRadius;pixelMargin;startAngle;constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,i){const n=this.getProps(["x","y"],i),{angle:s,distance:o}=ee(n,{x:t,y:e}),{startAngle:r,endAngle:a,innerRadius:l,outerRadius:h,circumference:c}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],i),d=(this.options.spacing+this.options.borderWidth)/2,u=_t(c,a-r)>=Ft||oe(s,r,a),f=ae(o,l+d,h+d);return u&&f}getCenterPoint(t){const{x:e,y:i,startAngle:n,endAngle:s,innerRadius:o,outerRadius:r}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius"],t),{offset:a,spacing:l}=this.options,h=(n+s)/2,c=(o+r+l+a)/2;return{x:e+Math.cos(h)*c,y:i+Math.sin(h)*c}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const{options:e,circumference:i}=this,n=(e.offset||0)/4,s=(e.spacing||0)/2,o=e.circular;if(this.pixelMargin="inner"===e.borderAlign?.33:0,this.fullCircles=i>Ft?Math.floor(i/Ft):0,0===i||this.innerRadius<0||this.outerRadius<0)return;t.save();const r=(this.startAngle+this.endAngle)/2;t.translate(Math.cos(r)*n,Math.sin(r)*n);const a=n*(1-Math.sin(Math.min(Wt,i||0)));t.fillStyle=e.backgroundColor,t.strokeStyle=e.borderColor,function(t,e,i,n,s){const{fullCircles:o,startAngle:r,circumference:a}=e;let l=e.endAngle;if(o){io(t,e,i,n,l,s);for(let e=0;e<o;++e)t.fill();isNaN(a)||(l=r+(a%Ft||Ft))}io(t,e,i,n,l,s),t.fill()}(t,this,a,s,o),function(t,e,i,n,s){const{fullCircles:o,startAngle:r,circumference:a,options:l}=e,{borderWidth:h,borderJoinStyle:c,borderDash:d,borderDashOffset:u}=l,f="inner"===l.borderAlign;if(!h)return;t.setLineDash(d||[]),t.lineDashOffset=u,f?(t.lineWidth=2*h,t.lineJoin=c||"round"):(t.lineWidth=h,t.lineJoin=c||"bevel");let p=e.endAngle;if(o){io(t,e,i,n,p,s);for(let e=0;e<o;++e)t.stroke();isNaN(a)||(p=r+(a%Ft||Ft))}f&&function(t,e,i){const{startAngle:n,pixelMargin:s,x:o,y:r,outerRadius:a,innerRadius:l}=e;let h=s/a;t.beginPath(),t.arc(o,r,a,n-h,i+h),l>s?(h=s/l,t.arc(o,r,l,i+h,n-h,!0)):t.arc(o,r,s,i+Ht,n-Ht),t.closePath(),t.clip()}(t,e,p),o||(io(t,e,i,n,p,s),t.stroke())}(t,this,a,s,o),t.restore()}},BarElement:class extends gs{static id="bar";static defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){const{inflateAmount:e,options:{borderColor:i,backgroundColor:n}}=this,{inner:s,outer:o}=function(t){const e=fo(t),i=e.right-e.left,n=e.bottom-e.top,s=function(t,e,i){const n=t.options.borderWidth,s=t.borderSkipped,o=oi(n);return{t:po(s.top,o.top,0,i),r:po(s.right,o.right,0,e),b:po(s.bottom,o.bottom,0,i),l:po(s.left,o.left,0,e)}}(t,i/2,n/2),o=function(t,e,i){const{enableBorderRadius:n}=t.getProps(["enableBorderRadius"]),s=t.options.borderRadius,o=ri(s),r=Math.min(e,i),a=t.borderSkipped,l=n||bt(s);return{topLeft:po(!l||a.top||a.left,o.topLeft,0,r),topRight:po(!l||a.top||a.right,o.topRight,0,r),bottomLeft:po(!l||a.bottom||a.left,o.bottomLeft,0,r),bottomRight:po(!l||a.bottom||a.right,o.bottomRight,0,r)}}(t,i/2,n/2);return{outer:{x:e.left,y:e.top,w:i,h:n,radius:o},inner:{x:e.left+s.l,y:e.top+s.t,w:i-s.l-s.r,h:n-s.t-s.b,radius:{topLeft:Math.max(0,o.topLeft-Math.max(s.t,s.l)),topRight:Math.max(0,o.topRight-Math.max(s.t,s.r)),bottomLeft:Math.max(0,o.bottomLeft-Math.max(s.b,s.l)),bottomRight:Math.max(0,o.bottomRight-Math.max(s.b,s.r))}}}}(this),r=(a=o.radius).topLeft||a.topRight||a.bottomLeft||a.bottomRight?Qe:mo;var a;t.save(),o.w===s.w&&o.h===s.h||(t.beginPath(),r(t,xo(o,e,s)),t.clip(),r(t,xo(s,-e,o)),t.fillStyle=i,t.fill("evenodd")),t.beginPath(),r(t,xo(s,e)),t.fillStyle=n,t.fill(),t.restore()}inRange(t,e,i){return go(this,t,e,i)}inXRange(t,e){return go(this,t,null,e)}inYRange(t,e){return go(this,null,t,e)}getCenterPoint(t){const{x:e,y:i,base:n,horizontal:s}=this.getProps(["x","y","base","horizontal"],t);return{x:s?(e+n)/2:e,y:s?i:(i+n)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}},LineElement:co,PointElement:class extends gs{static id="point";parsed;skip;stop;static defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,i){const n=this.options,{x:s,y:o}=this.getProps(["x","y"],i);return Math.pow(t-s,2)+Math.pow(e-o,2)<Math.pow(n.hitRadius+n.radius,2)}inXRange(t,e){return uo(this,t,"x",e)}inYRange(t,e){return uo(this,t,"y",e)}getCenterPoint(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}size(t){let e=(t=t||this.options||{}).radius||0;return e=Math.max(e,e&&t.hoverRadius||0),2*(e+(e&&t.borderWidth||0))}draw(t,e){const i=this.options;this.skip||i.radius<.1||!$e(this,e,this.size(i)/2)||(t.strokeStyle=i.borderColor,t.lineWidth=i.borderWidth,t.fillStyle=i.backgroundColor,He(t,i,this.x,this.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}}});const yo=["rgb(54, 162, 235)","rgb(255, 99, 132)","rgb(255, 159, 64)","rgb(255, 205, 86)","rgb(75, 192, 192)","rgb(153, 102, 255)","rgb(201, 203, 207)"],vo=yo.map((t=>t.replace("rgb(","rgba(").replace(")",", 0.5)")));function _o(t){return yo[t%yo.length]}function Ao(t){return vo[t%vo.length]}function wo(t){let e;for(e in t)if(t[e].borderColor||t[e].backgroundColor)return!0;return!1}var Co={id:"colors",defaults:{enabled:!0,forceOverride:!1},beforeLayout(t,e,i){if(!i.enabled)return;const{data:{datasets:n},options:s}=t.config,{elements:o}=s;if(!i.forceOverride&&(wo(n)||(r=s)&&(r.borderColor||r.backgroundColor)||o&&wo(o)))return;var r;const a=function(t){let e=0;return(i,n)=>{const s=t.getDatasetMeta(n).controller;s instanceof Sn?e=function(t,e){return t.backgroundColor=t.data.map((()=>_o(e++))),e}(i,e):s instanceof Dn?e=function(t,e){return t.backgroundColor=t.data.map((()=>Ao(e++))),e}(i,e):s&&(e=function(t,e){return t.borderColor=_o(e),t.backgroundColor=Ao(e),++e}(i,e))}}(t);n.forEach(a)}};function Mo(t){if(t._decimated){const e=t._data;delete t._decimated,delete t._data,Object.defineProperty(t,"data",{configurable:!0,enumerable:!0,writable:!0,value:e})}}function ko(t){t.data.datasets.forEach((t=>{Mo(t)}))}var Eo={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(t,e,i)=>{if(!i.enabled)return void ko(t);const n=t.width;t.data.datasets.forEach(((e,s)=>{const{_data:o,indexAxis:r}=e,a=t.getDatasetMeta(s),l=o||e.data;if("y"===hi([r,t.options.indexAxis]))return;if(!a.controller.supportsDecimation)return;const h=t.scales[a.xAxisID];if("linear"!==h.type&&"time"!==h.type)return;if(t.options.parsing)return;let c,{start:d,count:u}=function(t,e){const i=e.length;let n,s=0;const{iScale:o}=t,{min:r,max:a,minDefined:l,maxDefined:h}=o.getUserBounds();return l&&(s=re(he(e,o.axis,r).lo,0,i-1)),n=h?re(he(e,o.axis,a).hi+1,s,i)-s:i-s,{start:s,count:n}}(a,l);if(u<=(i.threshold||4*n))Mo(e);else{switch(mt(o)&&(e._data=l,delete e.data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(t){this._data=t}})),i.algorithm){case"lttb":c=function(t,e,i,n,s){const o=s.samples||n;if(o>=i)return t.slice(e,e+i);const r=[],a=(i-2)/(o-2);let l=0;const h=e+i-1;let c,d,u,f,p,g=e;for(r[l++]=t[g],c=0;c<o-2;c++){let n,s=0,o=0;const h=Math.floor((c+1)*a)+1+e,m=Math.min(Math.floor((c+2)*a)+1,i)+e,x=m-h;for(n=h;n<m;n++)s+=t[n].x,o+=t[n].y;s/=x,o/=x;const b=Math.floor(c*a)+1+e,y=Math.min(Math.floor((c+1)*a)+1,i)+e,{x:v,y:_}=t[g];for(u=f=-1,n=b;n<y;n++)f=.5*Math.abs((v-s)*(t[n].y-_)-(v-t[n].x)*(o-_)),f>u&&(u=f,d=t[n],p=n);r[l++]=d,g=p}return r[l++]=t[h],r}(l,d,u,n,i);break;case"min-max":c=function(t,e,i,n){let s,o,r,a,l,h,c,d,u,f,p=0,g=0;const m=[],x=e+i-1,b=t[e].x,y=t[x].x-b;for(s=e;s<e+i;++s){o=t[s],r=(o.x-b)/y*n,a=o.y;const e=0|r;if(e===l)a<u?(u=a,h=s):a>f&&(f=a,c=s),p=(g*p+o.x)/++g;else{const i=s-1;if(!mt(h)&&!mt(c)){const e=Math.min(h,c),n=Math.max(h,c);e!==d&&e!==i&&m.push({...t[e],x:p}),n!==d&&n!==i&&m.push({...t[n],x:p})}s>0&&i!==d&&m.push(t[i]),m.push(o),l=e,g=0,u=f=a,h=c=d=s}}return m}(l,d,u,n);break;default:throw new Error(`Unsupported decimation algorithm '${i.algorithm}'`)}e._decimated=c}}))},destroy(t){ko(t)}};function So(t,e,i,n){if(n)return;let s=e[t],o=i[t];return"angle"===t&&(s=se(s),o=se(o)),{property:t,start:s,end:o}}function Do(t,e,i){for(;e>t;e--){const t=i[e];if(!isNaN(t.x)&&!isNaN(t.y))break}return e}function Po(t,e,i,n){return t&&e?n(t[i],e[i]):t?t[i]:e?e[i]:0}function Bo(t,e){let i=[],n=!1;return xt(t)?(n=!0,i=t):i=function(t,e){const{x:i=null,y:n=null}=t||{},s=e.points,o=[];return e.segments.forEach((({start:t,end:e})=>{e=Do(t,e,s);const r=s[t],a=s[e];null!==n?(o.push({x:r.x,y:n}),o.push({x:a.x,y:n})):null!==i&&(o.push({x:i,y:r.y}),o.push({x:i,y:a.y}))})),o}(t,e),i.length?new co({points:i,options:{tension:0},_loop:n,_fullLoop:n}):null}function To(t){return t&&!1!==t.fill}function Oo(t,e,i){let n=t[e].fill;const s=[e];let o;if(!i)return n;for(;!1!==n&&-1===s.indexOf(n);){if(!yt(n))return n;if(o=t[n],!o)return!1;if(o.visible)return n;s.push(n),n=o.fill}return!1}function Lo(t,e,i){const n=function(t){const e=t.options,i=e.fill;let n=_t(i&&i.target,i);return void 0===n&&(n=!!e.backgroundColor),!1!==n&&null!==n&&(!0===n?"origin":n)}(t);if(bt(n))return!isNaN(n.value)&&n;let s=parseFloat(n);return yt(s)&&Math.floor(s)===s?function(t,e,i,n){return"-"!==t&&"+"!==t||(i=e+i),!(i===e||i<0||i>=n)&&i}(n[0],e,s,i):["origin","start","end","stack","shape"].indexOf(n)>=0&&n}function Ro(t,e,i){const n=[];for(let s=0;s<i.length;s++){const o=i[s],{first:r,last:a,point:l}=Io(o,e,"x");if(!(!l||r&&a))if(r)n.unshift(l);else if(t.push(l),!a)break}t.push(...n)}function Io(t,e,i){const n=t.interpolate(e,i);if(!n)return{};const s=n[i],o=t.segments,r=t.points;let a=!1,l=!1;for(let t=0;t<o.length;t++){const e=o[t],n=r[e.start][i],h=r[e.end][i];if(ae(s,n,h)){a=s===n,l=s===h;break}}return{first:a,last:l,point:n}}class zo{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,e,i){const{x:n,y:s,radius:o}=this;return e=e||{start:0,end:Ft},t.arc(n,s,o,e.end,e.start,!0),!i.bounds}interpolate(t){const{x:e,y:i,radius:n}=this,s=t.angle;return{x:e+Math.cos(s)*n,y:i+Math.sin(s)*n,angle:s}}}function Wo(t,e,i){const n=function(t){const{chart:e,fill:i,line:n}=t;if(yt(i))return function(t,e){const i=t.getDatasetMeta(e);return i&&t.isDatasetVisible(e)?i.dataset:null}(e,i);if("stack"===i)return function(t){const{scale:e,index:i,line:n}=t,s=[],o=n.segments,r=n.points,a=function(t,e){const i=[],n=t.getMatchingVisibleMetas("line");for(let t=0;t<n.length;t++){const s=n[t];if(s.index===e)break;s.hidden||i.unshift(s.dataset)}return i}(e,i);a.push(Bo({x:null,y:e.bottom},n));for(let t=0;t<o.length;t++){const e=o[t];for(let t=e.start;t<=e.end;t++)Ro(s,r[t],a)}return new co({points:s,options:{}})}(t);if("shape"===i)return!0;const s=function(t){return(t.scale||{}).getPointPositionForValue?function(t){const{scale:e,fill:i}=t,n=e.options,s=e.getLabels().length,o=n.reverse?e.max:e.min,r=function(t,e,i){let n;return n="start"===t?i:"end"===t?e.options.reverse?e.min:e.max:bt(t)?t.value:e.getBaseValue(),n}(i,e,o),a=[];if(n.grid.circular){const t=e.getPointPositionForValue(0,o);return new zo({x:t.x,y:t.y,radius:e.getDistanceFromCenterForValue(r)})}for(let t=0;t<s;++t)a.push(e.getPointPositionForValue(t,r));return a}(t):function(t){const{scale:e={},fill:i}=t,n=function(t,e){let i=null;return"start"===t?i=e.bottom:"end"===t?i=e.top:bt(t)?i=e.getPixelForValue(t.value):e.getBasePixel&&(i=e.getBasePixel()),i}(i,e);if(yt(n)){const t=e.isHorizontal();return{x:t?n:null,y:t?null:n}}return null}(t)}(t);return s instanceof zo?s:Bo(s,n)}(e),{line:s,scale:o,axis:r}=e,a=s.options,l=a.fill,h=a.backgroundColor,{above:c=h,below:d=h}=l||{};n&&s.points.length&&(Xe(t,i),function(t,e){const{line:i,target:n,above:s,below:o,area:r,scale:a}=e,l=i._loop?"angle":e.axis;t.save(),"x"===l&&o!==s&&(Fo(t,n,r.top),jo(t,{line:i,target:n,color:s,scale:a,property:l}),t.restore(),t.save(),Fo(t,n,r.bottom)),jo(t,{line:i,target:n,color:o,scale:a,property:l}),t.restore()}(t,{line:s,target:n,above:c,below:d,area:i,scale:o,axis:r}),Ue(t))}function Fo(t,e,i){const{segments:n,points:s}=e;let o=!0,r=!1;t.beginPath();for(const a of n){const{start:n,end:l}=a,h=s[n],c=s[Do(n,l,s)];o?(t.moveTo(h.x,h.y),o=!1):(t.lineTo(h.x,i),t.lineTo(h.x,h.y)),r=!!e.pathSegment(t,a,{move:r}),r?t.closePath():t.lineTo(c.x,i)}t.lineTo(e.first().x,i),t.closePath(),t.clip()}function jo(t,e){const{line:i,target:n,property:s,color:o,scale:r}=e,a=function(t,e,i){const n=t.segments,s=t.points,o=e.points,r=[];for(const t of n){let{start:n,end:a}=t;a=Do(n,a,s);const l=So(i,s[n],s[a],t.loop);if(!e.segments){r.push({source:t,target:l,start:s[n],end:s[a]});continue}const h=Ji(e,l);for(const e of h){const n=So(i,o[e.start],o[e.end],e.loop),a=Ki(t,s,n);for(const t of a)r.push({source:t,target:e,start:{[i]:Po(l,n,"start",Math.max)},end:{[i]:Po(l,n,"end",Math.min)}})}}return r}(i,n,s);for(const{source:e,target:l,start:h,end:c}of a){const{style:{backgroundColor:a=o}={}}=e,d=!0!==n;t.save(),t.fillStyle=a,Vo(t,r,d&&So(s,h,c)),t.beginPath();const u=!!i.pathSegment(t,e);let f;if(d){u?t.closePath():No(t,n,c,s);const e=!!n.pathSegment(t,l,{move:u,reverse:!0});f=u&&e,f||No(t,n,h,s)}t.closePath(),t.fill(f?"evenodd":"nonzero"),t.restore()}}function Vo(t,e,i){const{top:n,bottom:s}=e.chart.chartArea,{property:o,start:r,end:a}=i||{};"x"===o&&(t.beginPath(),t.rect(r,n,a-r,s-n),t.clip())}function No(t,e,i,n){const s=e.interpolate(i,n);s&&t.lineTo(s.x,s.y)}var Ho={id:"filler",afterDatasetsUpdate(t,e,i){const n=(t.data.datasets||[]).length,s=[];let o,r,a,l;for(r=0;r<n;++r)o=t.getDatasetMeta(r),a=o.dataset,l=null,a&&a.options&&a instanceof co&&(l={visible:t.isDatasetVisible(r),index:r,fill:Lo(a,r,n),chart:t,axis:o.controller.options.indexAxis,scale:o.vScale,line:a}),o.$filler=l,s.push(l);for(r=0;r<n;++r)l=s[r],l&&!1!==l.fill&&(l.fill=Oo(s,r,i.propagate))},beforeDraw(t,e,i){const n="beforeDraw"===i.drawTime,s=t.getSortedVisibleDatasetMetas(),o=t.chartArea;for(let e=s.length-1;e>=0;--e){const i=s[e].$filler;i&&(i.line.updateControlPoints(o,i.axis),n&&i.fill&&Wo(t.ctx,i,o))}},beforeDatasetsDraw(t,e,i){if("beforeDatasetsDraw"!==i.drawTime)return;const n=t.getSortedVisibleDatasetMetas();for(let e=n.length-1;e>=0;--e){const i=n[e].$filler;To(i)&&Wo(t.ctx,i,t.chartArea)}},beforeDatasetDraw(t,e,i){const n=e.meta.$filler;To(n)&&"beforeDatasetDraw"===i.drawTime&&Wo(t.ctx,n,t.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const Yo=(t,e)=>{let{boxHeight:i=e,boxWidth:n=e}=t;return t.usePointStyle&&(i=Math.min(i,e),n=t.pointStyleWidth||Math.min(n,e)),{boxWidth:n,boxHeight:i,itemHeight:Math.max(e,i)}};class $o extends gs{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,i){this.maxWidth=t,this.maxHeight=e,this._margins=i,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const t=this.options.labels||{};let e=wt(t.generateLabels,[this.chart],this)||[];t.filter&&(e=e.filter((e=>t.filter(e,this.chart.data)))),t.sort&&(e=e.sort(((e,i)=>t.sort(e,i,this.chart.data)))),this.options.reverse&&e.reverse(),this.legendItems=e}fit(){const{options:t,ctx:e}=this;if(!t.display)return void(this.width=this.height=0);const i=t.labels,n=li(i.font),s=n.size,o=this._computeTitleHeight(),{boxWidth:r,itemHeight:a}=Yo(i,s);let l,h;e.font=n.string,this.isHorizontal()?(l=this.maxWidth,h=this._fitRows(o,s,r,a)+10):(h=this.maxHeight,l=this._fitCols(o,n,r,a)+10),this.width=Math.min(l,t.maxWidth||this.maxWidth),this.height=Math.min(h,t.maxHeight||this.maxHeight)}_fitRows(t,e,i,n){const{ctx:s,maxWidth:o,options:{labels:{padding:r}}}=this,a=this.legendHitBoxes=[],l=this.lineWidths=[0],h=n+r;let c=t;s.textAlign="left",s.textBaseline="middle";let d=-1,u=-h;return this.legendItems.forEach(((t,f)=>{const p=i+e/2+s.measureText(t.text).width;(0===f||l[l.length-1]+p+2*r>o)&&(c+=h,l[l.length-(f>0?0:1)]=0,u+=h,d++),a[f]={left:0,top:u,row:d,width:p,height:n},l[l.length-1]+=p+r})),c}_fitCols(t,e,i,n){const{ctx:s,maxHeight:o,options:{labels:{padding:r}}}=this,a=this.legendHitBoxes=[],l=this.columnSizes=[],h=o-t;let c=r,d=0,u=0,f=0,p=0;return this.legendItems.forEach(((t,o)=>{const{itemWidth:g,itemHeight:m}=function(t,e,i,n,s){const o=function(t,e,i,n){let s=t.text;return s&&"string"!=typeof s&&(s=s.reduce(((t,e)=>t.length>e.length?t:e))),e+i.size/2+n.measureText(s).width}(n,t,e,i),r=function(t,e,i){let n=t;return"string"!=typeof e.text&&(n=Xo(e,i)),n}(s,n,e.lineHeight);return{itemWidth:o,itemHeight:r}}(i,e,s,t,n);o>0&&u+m+2*r>h&&(c+=d+r,l.push({width:d,height:u}),f+=d+r,p++,d=u=0),a[o]={left:f,top:u,col:p,width:g,height:m},d=Math.max(d,g),u+=m+r})),c+=d,l.push({width:d,height:u}),c}adjustHitBoxes(){if(!this.options.display)return;const t=this._computeTitleHeight(),{legendHitBoxes:e,options:{align:i,labels:{padding:n},rtl:s}}=this,o=Xi(s,this.left,this.width);if(this.isHorizontal()){let s=0,r=xe(i,this.left+n,this.right-this.lineWidths[s]);for(const a of e)s!==a.row&&(s=a.row,r=xe(i,this.left+n,this.right-this.lineWidths[s])),a.top+=this.top+t+n,a.left=o.leftForLtr(o.x(r),a.width),r+=a.width+n}else{let s=0,r=xe(i,this.top+t+n,this.bottom-this.columnSizes[s].height);for(const a of e)a.col!==s&&(s=a.col,r=xe(i,this.top+t+n,this.bottom-this.columnSizes[s].height)),a.top=r,a.left+=this.left+n,a.left=o.leftForLtr(o.x(a.left),a.width),r+=a.height+n}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const t=this.ctx;Xe(t,this),this._draw(),Ue(t)}}_draw(){const{options:t,columnSizes:e,lineWidths:i,ctx:n}=this,{align:s,labels:o}=t,r=We.color,a=Xi(t.rtl,this.left,this.width),l=li(o.font),{padding:h}=o,c=l.size,d=c/2;let u;this.drawTitle(),n.textAlign=a.textAlign("left"),n.textBaseline="middle",n.lineWidth=.5,n.font=l.string;const{boxWidth:f,boxHeight:p,itemHeight:g}=Yo(o,c),m=this.isHorizontal(),x=this._computeTitleHeight();u=m?{x:xe(s,this.left+h,this.right-i[0]),y:this.top+h+x,line:0}:{x:this.left+h,y:xe(s,this.top+x+h,this.bottom-e[0].height),line:0},Ui(this.ctx,t.textDirection);const b=g+h;this.legendItems.forEach(((y,v)=>{n.strokeStyle=y.fontColor,n.fillStyle=y.fontColor;const _=n.measureText(y.text).width,A=a.textAlign(y.textAlign||(y.textAlign=o.textAlign)),w=f+d+_;let C=u.x,M=u.y;if(a.setWidth(this.width),m?v>0&&C+w+h>this.right&&(M=u.y+=b,u.line++,C=u.x=xe(s,this.left+h,this.right-i[u.line])):v>0&&M+b>this.bottom&&(C=u.x=C+e[u.line].width+h,u.line++,M=u.y=xe(s,this.top+x+h,this.bottom-e[u.line].height)),function(t,e,i){if(isNaN(f)||f<=0||isNaN(p)||p<0)return;n.save();const s=_t(i.lineWidth,1);if(n.fillStyle=_t(i.fillStyle,r),n.lineCap=_t(i.lineCap,"butt"),n.lineDashOffset=_t(i.lineDashOffset,0),n.lineJoin=_t(i.lineJoin,"miter"),n.lineWidth=s,n.strokeStyle=_t(i.strokeStyle,r),n.setLineDash(_t(i.lineDash,[])),o.usePointStyle){const r={radius:p*Math.SQRT2/2,pointStyle:i.pointStyle,rotation:i.rotation,borderWidth:s},l=a.xPlus(t,f/2);Ye(n,r,l,e+d,o.pointStyleWidth&&f)}else{const o=e+Math.max((c-p)/2,0),r=a.leftForLtr(t,f),l=ri(i.borderRadius);n.beginPath(),Object.values(l).some((t=>0!==t))?Qe(n,{x:r,y:o,w:f,h:p,radius:l}):n.rect(r,o,f,p),n.fill(),0!==s&&n.stroke()}n.restore()}(a.x(C),M,y),C=((t,e,i,n)=>t===(n?"left":"right")?i:"center"===t?(e+i)/2:e)(A,C+f+d,m?C+w:this.right,t.rtl),function(t,e,i){Je(n,i.text,t,e+g/2,l,{strikethrough:i.hidden,textAlign:a.textAlign(i.textAlign)})}(a.x(C),M,y),m)u.x+=w+h;else if("string"!=typeof y.text){const t=l.lineHeight;u.y+=Xo(y,t)+h}else u.y+=b})),Zi(this.ctx,t.textDirection)}drawTitle(){const t=this.options,e=t.title,i=li(e.font),n=ai(e.padding);if(!e.display)return;const s=Xi(t.rtl,this.left,this.width),o=this.ctx,r=e.position,a=i.size/2,l=n.top+a;let h,c=this.left,d=this.width;if(this.isHorizontal())d=Math.max(...this.lineWidths),h=this.top+l,c=xe(t.align,c,this.right-d);else{const e=this.columnSizes.reduce(((t,e)=>Math.max(t,e.height)),0);h=l+xe(t.align,this.top,this.bottom-e-t.labels.padding-this._computeTitleHeight())}const u=xe(r,c,c+d);o.textAlign=s.textAlign(me(r)),o.textBaseline="middle",o.strokeStyle=e.color,o.fillStyle=e.color,o.font=i.string,Je(o,e.text,u,h,i)}_computeTitleHeight(){const t=this.options.title,e=li(t.font),i=ai(t.padding);return t.display?e.lineHeight+i.height:0}_getLegendItemAt(t,e){let i,n,s;if(ae(t,this.left,this.right)&&ae(e,this.top,this.bottom))for(s=this.legendHitBoxes,i=0;i<s.length;++i)if(n=s[i],ae(t,n.left,n.left+n.width)&&ae(e,n.top,n.top+n.height))return this.legendItems[i];return null}handleEvent(t){const e=this.options;if(!function(t,e){return!("mousemove"!==t&&"mouseout"!==t||!e.onHover&&!e.onLeave)||!(!e.onClick||"click"!==t&&"mouseup"!==t)}(t.type,e))return;const i=this._getLegendItemAt(t.x,t.y);if("mousemove"===t.type||"mouseout"===t.type){const o=this._hoveredItem,r=(s=i,null!==(n=o)&&null!==s&&n.datasetIndex===s.datasetIndex&&n.index===s.index);o&&!r&&wt(e.onLeave,[t,o,this],this),this._hoveredItem=i,i&&!r&&wt(e.onHover,[t,i,this],this)}else i&&wt(e.onClick,[t,i,this],this);var n,s}}function Xo(t,e){return e*(t.text?t.text.length:0)}var Uo={id:"legend",_element:$o,start(t,e,i){const n=t.legend=new $o({ctx:t.ctx,options:i,chart:t});Kn.configure(t,n,i),Kn.addBox(t,n)},stop(t){Kn.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,i){const n=t.legend;Kn.configure(t,n,i),n.options=i},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,i){const n=e.datasetIndex,s=i.chart;s.isDatasetVisible(n)?(s.hide(n),e.hidden=!0):(s.show(n),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const e=t.data.datasets,{labels:{usePointStyle:i,pointStyle:n,textAlign:s,color:o,useBorderRadius:r,borderRadius:a}}=t.legend.options;return t._getSortedDatasetMetas().map((t=>{const l=t.controller.getStyle(i?0:void 0),h=ai(l.borderWidth);return{text:e[t.index].label,fillStyle:l.backgroundColor,fontColor:o,hidden:!t.visible,lineCap:l.borderCapStyle,lineDash:l.borderDash,lineDashOffset:l.borderDashOffset,lineJoin:l.borderJoinStyle,lineWidth:(h.width+h.height)/4,strokeStyle:l.borderColor,pointStyle:n||l.pointStyle,rotation:l.rotation,textAlign:s||l.textAlign,borderRadius:r&&(a||l.borderRadius),datasetIndex:t.index}}),this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class Zo extends gs{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){const i=this.options;if(this.left=0,this.top=0,!i.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=t,this.height=this.bottom=e;const n=xt(i.text)?i.text.length:1;this._padding=ai(i.padding);const s=n*li(i.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=s:this.width=s}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:e,left:i,bottom:n,right:s,options:o}=this,r=o.align;let a,l,h,c=0;return this.isHorizontal()?(l=xe(r,i,s),h=e+t,a=s-i):("left"===o.position?(l=i+t,h=xe(r,n,e),c=-.5*Wt):(l=s-t,h=xe(r,e,n),c=.5*Wt),a=n-e),{titleX:l,titleY:h,maxWidth:a,rotation:c}}draw(){const t=this.ctx,e=this.options;if(!e.display)return;const i=li(e.font),n=i.lineHeight/2+this._padding.top,{titleX:s,titleY:o,maxWidth:r,rotation:a}=this._drawArgs(n);Je(t,e.text,0,0,i,{color:e.color,maxWidth:r,rotation:a,textAlign:me(e.align),textBaseline:"middle",translation:[s,o]})}}var qo={id:"title",_element:Zo,start(t,e,i){!function(t,e){const i=new Zo({ctx:t.ctx,options:e,chart:t});Kn.configure(t,i,e),Kn.addBox(t,i),t.titleBlock=i}(t,i)},stop(t){const e=t.titleBlock;Kn.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,i){const n=t.titleBlock;Kn.configure(t,n,i),n.options=i},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const Go=new WeakMap;var Ko={id:"subtitle",start(t,e,i){const n=new Zo({ctx:t.ctx,options:i,chart:t});Kn.configure(t,n,i),Kn.addBox(t,n),Go.set(t,n)},stop(t){Kn.removeBox(t,Go.get(t)),Go.delete(t)},beforeUpdate(t,e,i){const n=Go.get(t);Kn.configure(t,n,i),n.options=i},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const Jo={average(t){if(!t.length)return!1;let e,i,n=0,s=0,o=0;for(e=0,i=t.length;e<i;++e){const i=t[e].element;if(i&&i.hasValue()){const t=i.tooltipPosition();n+=t.x,s+=t.y,++o}}return{x:n/o,y:s/o}},nearest(t,e){if(!t.length)return!1;let i,n,s,o=e.x,r=e.y,a=Number.POSITIVE_INFINITY;for(i=0,n=t.length;i<n;++i){const n=t[i].element;if(n&&n.hasValue()){const t=ie(e,n.getCenterPoint());t<a&&(a=t,s=n)}}if(s){const t=s.tooltipPosition();o=t.x,r=t.y}return{x:o,y:r}}};function Qo(t,e){return e&&(xt(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function tr(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function er(t,e){const{element:i,datasetIndex:n,index:s}=e,o=t.getDatasetMeta(n).controller,{label:r,value:a}=o.getLabelAndValue(s);return{chart:t,label:r,parsed:o.getParsed(s),raw:t.data.datasets[n].data[s],formattedValue:a,dataset:o.getDataset(),dataIndex:s,datasetIndex:n,element:i}}function ir(t,e){const i=t.chart.ctx,{body:n,footer:s,title:o}=t,{boxWidth:r,boxHeight:a}=e,l=li(e.bodyFont),h=li(e.titleFont),c=li(e.footerFont),d=o.length,u=s.length,f=n.length,p=ai(e.padding);let g=p.height,m=0,x=n.reduce(((t,e)=>t+e.before.length+e.lines.length+e.after.length),0);x+=t.beforeBody.length+t.afterBody.length,d&&(g+=d*h.lineHeight+(d-1)*e.titleSpacing+e.titleMarginBottom),x&&(g+=f*(e.displayColors?Math.max(a,l.lineHeight):l.lineHeight)+(x-f)*l.lineHeight+(x-1)*e.bodySpacing),u&&(g+=e.footerMarginTop+u*c.lineHeight+(u-1)*e.footerSpacing);let b=0;const y=function(t){m=Math.max(m,i.measureText(t).width+b)};return i.save(),i.font=h.string,Ct(t.title,y),i.font=l.string,Ct(t.beforeBody.concat(t.afterBody),y),b=e.displayColors?r+2+e.boxPadding:0,Ct(n,(t=>{Ct(t.before,y),Ct(t.lines,y),Ct(t.after,y)})),b=0,i.font=c.string,Ct(t.footer,y),i.restore(),m+=p.width,{width:m,height:g}}function nr(t,e,i,n){const{x:s,width:o}=i,{width:r,chartArea:{left:a,right:l}}=t;let h="center";return"center"===n?h=s<=(a+l)/2?"left":"right":s<=o/2?h="left":s>=r-o/2&&(h="right"),function(t,e,i,n){const{x:s,width:o}=n,r=i.caretSize+i.caretPadding;return"left"===t&&s+o+r>e.width||"right"===t&&s-o-r<0||void 0}(h,t,e,i)&&(h="center"),h}function sr(t,e,i){const n=i.yAlign||e.yAlign||function(t,e){const{y:i,height:n}=e;return i<n/2?"top":i>t.height-n/2?"bottom":"center"}(t,i);return{xAlign:i.xAlign||e.xAlign||nr(t,e,i,n),yAlign:n}}function or(t,e,i,n){const{caretSize:s,caretPadding:o,cornerRadius:r}=t,{xAlign:a,yAlign:l}=i,h=s+o,{topLeft:c,topRight:d,bottomLeft:u,bottomRight:f}=ri(r);let p=function(t,e){let{x:i,width:n}=t;return"right"===e?i-=n:"center"===e&&(i-=n/2),i}(e,a);const g=function(t,e,i){let{y:n,height:s}=t;return"top"===e?n+=i:n-="bottom"===e?s+i:s/2,n}(e,l,h);return"center"===l?"left"===a?p+=h:"right"===a&&(p-=h):"left"===a?p-=Math.max(c,u)+s:"right"===a&&(p+=Math.max(d,f)+s),{x:re(p,0,n.width-e.width),y:re(g,0,n.height-e.height)}}function rr(t,e,i){const n=ai(i.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-n.right:t.x+n.left}function ar(t){return Qo([],tr(t))}function lr(t,e){const i=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return i?t.override(i):t}const hr={beforeTitle:pt,title(t){if(t.length>0){const e=t[0],i=e.chart.data.labels,n=i?i.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(n>0&&e.dataIndex<n)return i[e.dataIndex]}return""},afterTitle:pt,beforeBody:pt,beforeLabel:pt,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");const i=t.formattedValue;return mt(i)||(e+=i),e},labelColor(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:pt,afterBody:pt,beforeFooter:pt,footer:pt,afterFooter:pt};function cr(t,e,i,n){const s=t[e].call(i,n);return void 0===s?hr[e].call(i,n):s}class dr extends gs{static positioners=Jo;constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this._cachedAnimations;if(t)return t;const e=this.chart,i=this.options.setContext(this.getContext()),n=i.enabled&&e.options.animation&&i.animations,s=new an(this.chart,n);return n._cacheable&&(this._cachedAnimations=Object.freeze(s)),s}getContext(){return this.$context||(this.$context=(this,ci(this.chart.getContext(),{tooltip:this,tooltipItems:this._tooltipItems,type:"tooltip"})))}getTitle(t,e){const{callbacks:i}=e,n=cr(i,"beforeTitle",this,t),s=cr(i,"title",this,t),o=cr(i,"afterTitle",this,t);let r=[];return r=Qo(r,tr(n)),r=Qo(r,tr(s)),r=Qo(r,tr(o)),r}getBeforeBody(t,e){return ar(cr(e.callbacks,"beforeBody",this,t))}getBody(t,e){const{callbacks:i}=e,n=[];return Ct(t,(t=>{const e={before:[],lines:[],after:[]},s=lr(i,t);Qo(e.before,tr(cr(s,"beforeLabel",this,t))),Qo(e.lines,cr(s,"label",this,t)),Qo(e.after,tr(cr(s,"afterLabel",this,t))),n.push(e)})),n}getAfterBody(t,e){return ar(cr(e.callbacks,"afterBody",this,t))}getFooter(t,e){const{callbacks:i}=e,n=cr(i,"beforeFooter",this,t),s=cr(i,"footer",this,t),o=cr(i,"afterFooter",this,t);let r=[];return r=Qo(r,tr(n)),r=Qo(r,tr(s)),r=Qo(r,tr(o)),r}_createItems(t){const e=this._active,i=this.chart.data,n=[],s=[],o=[];let r,a,l=[];for(r=0,a=e.length;r<a;++r)l.push(er(this.chart,e[r]));return t.filter&&(l=l.filter(((e,n,s)=>t.filter(e,n,s,i)))),t.itemSort&&(l=l.sort(((e,n)=>t.itemSort(e,n,i)))),Ct(l,(e=>{const i=lr(t.callbacks,e);n.push(cr(i,"labelColor",this,e)),s.push(cr(i,"labelPointStyle",this,e)),o.push(cr(i,"labelTextColor",this,e))})),this.labelColors=n,this.labelPointStyles=s,this.labelTextColors=o,this.dataPoints=l,l}update(t,e){const i=this.options.setContext(this.getContext()),n=this._active;let s,o=[];if(n.length){const t=Jo[i.position].call(this,n,this._eventPosition);o=this._createItems(i),this.title=this.getTitle(o,i),this.beforeBody=this.getBeforeBody(o,i),this.body=this.getBody(o,i),this.afterBody=this.getAfterBody(o,i),this.footer=this.getFooter(o,i);const e=this._size=ir(this,i),r=Object.assign({},t,e),a=sr(this.chart,i,r),l=or(i,r,a,this.chart);this.xAlign=a.xAlign,this.yAlign=a.yAlign,s={opacity:1,x:l.x,y:l.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==this.opacity&&(s={opacity:0});this._tooltipItems=o,this.$context=void 0,s&&this._resolveAnimations().update(this,s),t&&i.external&&i.external.call(this,{chart:this.chart,tooltip:this,replay:e})}drawCaret(t,e,i,n){const s=this.getCaretPosition(t,i,n);e.lineTo(s.x1,s.y1),e.lineTo(s.x2,s.y2),e.lineTo(s.x3,s.y3)}getCaretPosition(t,e,i){const{xAlign:n,yAlign:s}=this,{caretSize:o,cornerRadius:r}=i,{topLeft:a,topRight:l,bottomLeft:h,bottomRight:c}=ri(r),{x:d,y:u}=t,{width:f,height:p}=e;let g,m,x,b,y,v;return"center"===s?(y=u+p/2,"left"===n?(g=d,m=g-o,b=y+o,v=y-o):(g=d+f,m=g+o,b=y-o,v=y+o),x=g):(m="left"===n?d+Math.max(a,h)+o:"right"===n?d+f-Math.max(l,c)-o:this.caretX,"top"===s?(b=u,y=b-o,g=m-o,x=m+o):(b=u+p,y=b+o,g=m+o,x=m-o),v=b),{x1:g,x2:m,x3:x,y1:b,y2:y,y3:v}}drawTitle(t,e,i){const n=this.title,s=n.length;let o,r,a;if(s){const l=Xi(i.rtl,this.x,this.width);for(t.x=rr(this,i.titleAlign,i),e.textAlign=l.textAlign(i.titleAlign),e.textBaseline="middle",o=li(i.titleFont),r=i.titleSpacing,e.fillStyle=i.titleColor,e.font=o.string,a=0;a<s;++a)e.fillText(n[a],l.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+r,a+1===s&&(t.y+=i.titleMarginBottom-r)}}_drawColorBox(t,e,i,n,s){const o=this.labelColors[i],r=this.labelPointStyles[i],{boxHeight:a,boxWidth:l}=s,h=li(s.bodyFont),c=rr(this,"left",s),d=n.x(c),u=a<h.lineHeight?(h.lineHeight-a)/2:0,f=e.y+u;if(s.usePointStyle){const e={radius:Math.min(l,a)/2,pointStyle:r.pointStyle,rotation:r.rotation,borderWidth:1},i=n.leftForLtr(d,l)+l/2,h=f+a/2;t.strokeStyle=s.multiKeyBackground,t.fillStyle=s.multiKeyBackground,He(t,e,i,h),t.strokeStyle=o.borderColor,t.fillStyle=o.backgroundColor,He(t,e,i,h)}else{t.lineWidth=bt(o.borderWidth)?Math.max(...Object.values(o.borderWidth)):o.borderWidth||1,t.strokeStyle=o.borderColor,t.setLineDash(o.borderDash||[]),t.lineDashOffset=o.borderDashOffset||0;const e=n.leftForLtr(d,l),i=n.leftForLtr(n.xPlus(d,1),l-2),r=ri(o.borderRadius);Object.values(r).some((t=>0!==t))?(t.beginPath(),t.fillStyle=s.multiKeyBackground,Qe(t,{x:e,y:f,w:l,h:a,radius:r}),t.fill(),t.stroke(),t.fillStyle=o.backgroundColor,t.beginPath(),Qe(t,{x:i,y:f+1,w:l-2,h:a-2,radius:r}),t.fill()):(t.fillStyle=s.multiKeyBackground,t.fillRect(e,f,l,a),t.strokeRect(e,f,l,a),t.fillStyle=o.backgroundColor,t.fillRect(i,f+1,l-2,a-2))}t.fillStyle=this.labelTextColors[i]}drawBody(t,e,i){const{body:n}=this,{bodySpacing:s,bodyAlign:o,displayColors:r,boxHeight:a,boxWidth:l,boxPadding:h}=i,c=li(i.bodyFont);let d=c.lineHeight,u=0;const f=Xi(i.rtl,this.x,this.width),p=function(i){e.fillText(i,f.x(t.x+u),t.y+d/2),t.y+=d+s},g=f.textAlign(o);let m,x,b,y,v,_,A;for(e.textAlign=o,e.textBaseline="middle",e.font=c.string,t.x=rr(this,g,i),e.fillStyle=i.bodyColor,Ct(this.beforeBody,p),u=r&&"right"!==g?"center"===o?l/2+h:l+2+h:0,y=0,_=n.length;y<_;++y){for(m=n[y],x=this.labelTextColors[y],e.fillStyle=x,Ct(m.before,p),b=m.lines,r&&b.length&&(this._drawColorBox(e,t,y,f,i),d=Math.max(c.lineHeight,a)),v=0,A=b.length;v<A;++v)p(b[v]),d=c.lineHeight;Ct(m.after,p)}u=0,d=c.lineHeight,Ct(this.afterBody,p),t.y-=s}drawFooter(t,e,i){const n=this.footer,s=n.length;let o,r;if(s){const a=Xi(i.rtl,this.x,this.width);for(t.x=rr(this,i.footerAlign,i),t.y+=i.footerMarginTop,e.textAlign=a.textAlign(i.footerAlign),e.textBaseline="middle",o=li(i.footerFont),e.fillStyle=i.footerColor,e.font=o.string,r=0;r<s;++r)e.fillText(n[r],a.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+i.footerSpacing}}drawBackground(t,e,i,n){const{xAlign:s,yAlign:o}=this,{x:r,y:a}=t,{width:l,height:h}=i,{topLeft:c,topRight:d,bottomLeft:u,bottomRight:f}=ri(n.cornerRadius);e.fillStyle=n.backgroundColor,e.strokeStyle=n.borderColor,e.lineWidth=n.borderWidth,e.beginPath(),e.moveTo(r+c,a),"top"===o&&this.drawCaret(t,e,i,n),e.lineTo(r+l-d,a),e.quadraticCurveTo(r+l,a,r+l,a+d),"center"===o&&"right"===s&&this.drawCaret(t,e,i,n),e.lineTo(r+l,a+h-f),e.quadraticCurveTo(r+l,a+h,r+l-f,a+h),"bottom"===o&&this.drawCaret(t,e,i,n),e.lineTo(r+u,a+h),e.quadraticCurveTo(r,a+h,r,a+h-u),"center"===o&&"left"===s&&this.drawCaret(t,e,i,n),e.lineTo(r,a+c),e.quadraticCurveTo(r,a,r+c,a),e.closePath(),e.fill(),n.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this.chart,i=this.$animations,n=i&&i.x,s=i&&i.y;if(n||s){const i=Jo[t.position].call(this,this._active,this._eventPosition);if(!i)return;const o=this._size=ir(this,t),r=Object.assign({},i,this._size),a=sr(e,t,r),l=or(t,r,a,e);n._to===l.x&&s._to===l.y||(this.xAlign=a.xAlign,this.yAlign=a.yAlign,this.width=o.width,this.height=o.height,this.caretX=i.x,this.caretY=i.y,this._resolveAnimations().update(this,l))}}_willRender(){return!!this.opacity}draw(t){const e=this.options.setContext(this.getContext());let i=this.opacity;if(!i)return;this._updateAnimationTarget(e);const n={width:this.width,height:this.height},s={x:this.x,y:this.y};i=Math.abs(i)<.001?0:i;const o=ai(e.padding),r=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;e.enabled&&r&&(t.save(),t.globalAlpha=i,this.drawBackground(s,t,n,e),Ui(t,e.textDirection),s.y+=o.top,this.drawTitle(s,t,e),this.drawBody(s,t,e),this.drawFooter(s,t,e),Zi(t,e.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const i=this._active,n=t.map((({datasetIndex:t,index:e})=>{const i=this.chart.getDatasetMeta(t);if(!i)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:i.data[e],index:e}})),s=!Mt(i,n),o=this._positionChanged(n,e);(s||o)&&(this._active=n,this._eventPosition=e,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,e,i=!0){if(e&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const n=this.options,s=this._active||[],o=this._getActiveElements(t,s,e,i),r=this._positionChanged(o,t),a=e||!Mt(o,s)||r;return a&&(this._active=o,(n.enabled||n.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,e))),a}_getActiveElements(t,e,i,n){const s=this.options;if("mouseout"===t.type)return[];if(!n)return e;const o=this.chart.getElementsAtEventForMode(t,s.mode,s,i);return s.reverse&&o.reverse(),o}_positionChanged(t,e){const{caretX:i,caretY:n,options:s}=this,o=Jo[s.position].call(this,t,e);return!1!==o&&(i!==o.x||n!==o.y)}}var ur={id:"tooltip",_element:dr,positioners:Jo,afterInit(t,e,i){i&&(t.tooltip=new dr({chart:t,options:i}))},beforeUpdate(t,e,i){t.tooltip&&t.tooltip.initialize(i)},reset(t,e,i){t.tooltip&&t.tooltip.initialize(i)},afterDraw(t){const e=t.tooltip;if(e&&e._willRender()){const i={tooltip:e};if(!1===t.notifyPlugins("beforeTooltipDraw",{...i,cancelable:!0}))return;e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",i)}},afterEvent(t,e){if(t.tooltip){const i=e.replay;t.tooltip.handleEvent(e.event,i,e.inChartArea)&&(e.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:hr},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},fr=Object.freeze({__proto__:null,Colors:Co,Decimation:Eo,Filler:Ho,Legend:Uo,SubTitle:Ko,Title:qo,Tooltip:ur});function pr(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}function gr(t,e,{horizontal:i,minRotation:n}){const s=Jt(n),o=(i?Math.sin(s):Math.cos(s))||.001,r=.75*e*(""+t).length;return Math.min(e/o,r)}class mr extends Cs{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return mt(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const{beginAtZero:t}=this.options,{minDefined:e,maxDefined:i}=this.getUserBounds();let{min:n,max:s}=this;const o=t=>n=e?n:t,r=t=>s=i?s:t;if(t){const t=Ut(n),e=Ut(s);t<0&&e<0?r(0):t>0&&e>0&&o(0)}if(n===s){let e=0===s?1:Math.abs(.05*s);r(s+e),t||o(n-e)}this.min=n,this.max=s}getTickLimit(){const t=this.options.ticks;let e,{maxTicksLimit:i,stepSize:n}=t;return n?(e=Math.ceil(this.max/n)-Math.floor(this.min/n)+1,e>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${n} would result generating up to ${e} ticks. Limiting to 1000.`),e=1e3)):(e=this.computeTickLimit(),i=i||11),i&&(e=Math.min(i,e)),e}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this.options,e=t.ticks;let i=this.getTickLimit();i=Math.max(2,i);const n=function(t,e){const i=[],{bounds:n,step:s,min:o,max:r,precision:a,count:l,maxTicks:h,maxDigits:c,includeBounds:d}=t,u=s||1,f=h-1,{min:p,max:g}=e,m=!mt(o),x=!mt(r),b=!mt(l),y=(g-p)/(c+1);let v,_,A,w,C=qt((g-p)/f/u)*u;if(C<1e-14&&!m&&!x)return[{value:p},{value:g}];w=Math.ceil(g/C)-Math.floor(p/C),w>f&&(C=qt(w*C/f/u)*u),mt(a)||(v=Math.pow(10,a),C=Math.ceil(C*v)/v),"ticks"===n?(_=Math.floor(p/C)*C,A=Math.ceil(g/C)*C):(_=p,A=g),m&&x&&s&&function(t,e){const i=Math.round(t);return i-e<=t&&i+e>=t}((r-o)/s,C/1e3)?(w=Math.round(Math.min((r-o)/C,h)),C=(r-o)/w,_=o,A=r):b?(_=m?o:_,A=x?r:A,w=l-1,C=(A-_)/w):(w=(A-_)/C,w=Zt(w,Math.round(w),C/1e3)?Math.round(w):Math.ceil(w));const M=Math.max(te(C),te(_));v=Math.pow(10,mt(a)?M:a),_=Math.round(_*v)/v,A=Math.round(A*v)/v;let k=0;for(m&&(d&&_!==o?(i.push({value:o}),_<o&&k++,Zt(Math.round((_+k*C)*v)/v,o,gr(o,y,t))&&k++):_<o&&k++);k<w;++k){const t=Math.round((_+k*C)*v)/v;if(x&&t>r)break;i.push({value:t})}return x&&d&&A!==r?i.length&&Zt(i[i.length-1].value,r,gr(r,y,t))?i[i.length-1].value=r:i.push({value:r}):x&&A!==r||i.push({value:A}),i}({maxTicks:i,bounds:t.bounds,min:t.min,max:t.max,precision:e.precision,step:e.stepSize,count:e.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:e.minRotation||0,includeBounds:!1!==e.includeBounds},this._range||this);return"ticks"===t.bounds&&Kt(n,this,"value"),t.reverse?(n.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),n}configure(){const t=this.ticks;let e=this.min,i=this.max;if(super.configure(),this.options.offset&&t.length){const n=(i-e)/Math.max(t.length-1,1)/2;e-=n,i+=n}this._startValue=e,this._endValue=i,this._valueRange=i-e}getLabelForValue(t){return Pe(t,this.chart.options.locale,this.options.ticks.format)}}class xr extends mr{static id="linear";static defaults={ticks:{callback:Te.formatters.numeric}};determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=yt(t)?t:0,this.max=yt(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){const t=this.isHorizontal(),e=t?this.width:this.height,i=Jt(this.options.ticks.minRotation),n=(t?Math.sin(i):Math.cos(i))||.001,s=this._resolveTickFontOptions(0);return Math.ceil(e/Math.min(40,s.lineHeight/n))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}const br=t=>Math.floor(Xt(t)),yr=(t,e)=>Math.pow(10,br(t)+e);function vr(t){return 1==t/Math.pow(10,br(t))}function _r(t,e,i){const n=Math.pow(10,i),s=Math.floor(t/n);return Math.ceil(e/n)-s}class Ar extends Cs{static id="logarithmic";static defaults={ticks:{callback:Te.formatters.logarithmic,major:{enabled:!0}}};constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){const i=mr.prototype.parse.apply(this,[t,e]);if(0!==i)return yt(i)&&i>0?i:null;this._zero=!0}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=yt(t)?Math.max(0,t):null,this.max=yt(e)?Math.max(0,e):null,this.options.beginAtZero&&(this._zero=!0),this._zero&&this.min!==this._suggestedMin&&!yt(this._userMin)&&(this.min=t===yr(this.min,0)?yr(this.min,-1):yr(this.min,0)),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let i=this.min,n=this.max;const s=e=>i=t?i:e,o=t=>n=e?n:t;i===n&&(i<=0?(s(1),o(10)):(s(yr(i,-1)),o(yr(n,1)))),i<=0&&s(yr(n,-1)),n<=0&&o(yr(i,1)),this.min=i,this.max=n}buildTicks(){const t=this.options,e=function(t,{min:e,max:i}){e=vt(t.min,e);const n=[],s=br(e);let o=function(t,e){let i=br(e-t);for(;_r(t,e,i)>10;)i++;for(;_r(t,e,i)<10;)i--;return Math.min(i,br(t))}(e,i),r=o<0?Math.pow(10,Math.abs(o)):1;const a=Math.pow(10,o),l=s>o?Math.pow(10,s):0,h=Math.round((e-l)*r)/r,c=Math.floor((e-l)/a/10)*a*10;let d=Math.floor((h-c)/Math.pow(10,o)),u=vt(t.min,Math.round((l+c+d*Math.pow(10,o))*r)/r);for(;u<i;)n.push({value:u,major:vr(u),significand:d}),d>=10?d=d<15?15:20:d++,d>=20&&(o++,d=2,r=o>=0?1:r),u=Math.round((l+c+d*Math.pow(10,o))*r)/r;const f=vt(t.max,u);return n.push({value:f,major:vr(f),significand:d}),n}({min:this._userMin,max:this._userMax},this);return"ticks"===t.bounds&&Kt(e,this,"value"),t.reverse?(e.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),e}getLabelForValue(t){return void 0===t?"0":Pe(t,this.chart.options.locale,this.options.ticks.format)}configure(){const t=this.min;super.configure(),this._startValue=Xt(t),this._valueRange=Xt(this.max)-Xt(t)}getPixelForValue(t){return void 0!==t&&0!==t||(t=this.min),null===t||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:(Xt(t)-this._startValue)/this._valueRange)}getValueForPixel(t){const e=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+e*this._valueRange)}}function wr(t){const e=t.ticks;if(e.display&&t.display){const t=ai(e.backdropPadding);return _t(e.font&&e.font.size,We.font.size)+t.height}return 0}function Cr(t,e,i){return i=xt(i)?i:[i],{w:je(t,e.string,i),h:i.length*e.lineHeight}}function Mr(t,e,i,n,s){return t===n||t===s?{start:e-i/2,end:e+i/2}:t<n||t>s?{start:e-i,end:e}:{start:e,end:e+i}}function kr(t,e,i,n,s){const o=Math.abs(Math.sin(i)),r=Math.abs(Math.cos(i));let a=0,l=0;n.start<e.l?(a=(e.l-n.start)/o,t.l=Math.min(t.l,e.l-a)):n.end>e.r&&(a=(n.end-e.r)/o,t.r=Math.max(t.r,e.r+a)),s.start<e.t?(l=(e.t-s.start)/r,t.t=Math.min(t.t,e.t-l)):s.end>e.b&&(l=(s.end-e.b)/r,t.b=Math.max(t.b,e.b+l))}function Er(t,e,i){const n=t.drawingArea,{extra:s,additionalAngle:o,padding:r,size:a}=i,l=t.getPointPosition(e,n+s+r,o),h=Math.round(Qt(se(l.angle+Ht))),c=function(t,e,i){return 90===i||270===i?t-=e/2:(i>270||i<90)&&(t-=e),t}(l.y,a.h,h),d=function(t){return 0===t||180===t?"center":t<180?"left":"right"}(h),u=(f=l.x,p=a.w,"right"===(g=d)?f-=p:"center"===g&&(f-=p/2),f);var f,p,g;return{visible:!0,x:l.x,y:c,textAlign:d,left:u,top:c,right:u+a.w,bottom:c+a.h}}function Sr(t,e){if(!e)return!0;const{left:i,top:n,right:s,bottom:o}=t;return!($e({x:i,y:n},e)||$e({x:i,y:o},e)||$e({x:s,y:n},e)||$e({x:s,y:o},e))}function Dr(t,e,i){const{left:n,top:s,right:o,bottom:r}=i,{backdropColor:a}=e;if(!mt(a)){const i=ri(e.borderRadius),l=ai(e.backdropPadding);t.fillStyle=a;const h=n-l.left,c=s-l.top,d=o-n+l.width,u=r-s+l.height;Object.values(i).some((t=>0!==t))?(t.beginPath(),Qe(t,{x:h,y:c,w:d,h:u,radius:i}),t.fill()):t.fillRect(h,c,d,u)}}function Pr(t,e,i,n){const{ctx:s}=t;if(i)s.arc(t.xCenter,t.yCenter,e,0,Ft);else{let i=t.getPointPosition(0,e);s.moveTo(i.x,i.y);for(let o=1;o<n;o++)i=t.getPointPosition(o,e),s.lineTo(i.x,i.y)}}class Br extends mr{static id="radialLinear";static defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:Te.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:t=>t,padding:5,centerPointLabels:!1}};static defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"};static descriptors={angleLines:{_fallback:"grid"}};constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this._padding=ai(wr(this.options)/2),e=this.width=this.maxWidth-t.width,i=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+e/2+t.left),this.yCenter=Math.floor(this.top+i/2+t.top),this.drawingArea=Math.floor(Math.min(e,i)/2)}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!1);this.min=yt(t)&&!isNaN(t)?t:0,this.max=yt(e)&&!isNaN(e)?e:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/wr(this.options))}generateTickLabels(t){mr.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map(((t,e)=>{const i=wt(this.options.pointLabels.callback,[t,e],this);return i||0===i?i:""})).filter(((t,e)=>this.chart.getDataVisibility(e)))}fit(){const t=this.options;t.display&&t.pointLabels.display?function(t){const e={l:t.left+t._padding.left,r:t.right-t._padding.right,t:t.top+t._padding.top,b:t.bottom-t._padding.bottom},i=Object.assign({},e),n=[],s=[],o=t._pointLabels.length,r=t.options.pointLabels,a=r.centerPointLabels?Wt/o:0;for(let l=0;l<o;l++){const o=r.setContext(t.getPointLabelContext(l));s[l]=o.padding;const h=t.getPointPosition(l,t.drawingArea+s[l],a),c=li(o.font),d=Cr(t.ctx,c,t._pointLabels[l]);n[l]=d;const u=se(t.getIndexAngle(l)+a),f=Math.round(Qt(u));kr(i,e,u,Mr(f,h.x,d.w,0,180),Mr(f,h.y,d.h,90,270))}t.setCenterPoint(e.l-i.l,i.r-e.r,e.t-i.t,i.b-e.b),t._pointLabelItems=function(t,e,i){const n=[],s=t._pointLabels.length,o=t.options,{centerPointLabels:r,display:a}=o.pointLabels,l={extra:wr(o)/2,additionalAngle:r?Wt/s:0};let h;for(let o=0;o<s;o++){l.padding=i[o],l.size=e[o];const s=Er(t,o,l);n.push(s),"auto"===a&&(s.visible=Sr(s,h),s.visible&&(h=s))}return n}(t,n,s)}(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,e,i,n){this.xCenter+=Math.floor((t-e)/2),this.yCenter+=Math.floor((i-n)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,e,i,n))}getIndexAngle(t){return se(t*(Ft/(this._pointLabels.length||1))+Jt(this.options.startAngle||0))}getDistanceFromCenterForValue(t){if(mt(t))return NaN;const e=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*e:(t-this.min)*e}getValueForDistanceFromCenter(t){if(mt(t))return NaN;const e=t/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-e:this.min+e}getPointLabelContext(t){const e=this._pointLabels||[];if(t>=0&&t<e.length){const i=e[t];return function(t,e,i){return ci(t,{label:i,index:e,type:"pointLabel"})}(this.getContext(),t,i)}}getPointPosition(t,e,i=0){const n=this.getIndexAngle(t)-Ht+i;return{x:Math.cos(n)*e+this.xCenter,y:Math.sin(n)*e+this.yCenter,angle:n}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:e,top:i,right:n,bottom:s}=this._pointLabelItems[t];return{left:e,top:i,right:n,bottom:s}}drawBackground(){const{backgroundColor:t,grid:{circular:e}}=this.options;if(t){const i=this.ctx;i.save(),i.beginPath(),Pr(this,this.getDistanceFromCenterForValue(this._endValue),e,this._pointLabels.length),i.closePath(),i.fillStyle=t,i.fill(),i.restore()}}drawGrid(){const t=this.ctx,e=this.options,{angleLines:i,grid:n,border:s}=e,o=this._pointLabels.length;let r,a,l;if(e.pointLabels.display&&function(t,e){const{ctx:i,options:{pointLabels:n}}=t;for(let s=e-1;s>=0;s--){const e=t._pointLabelItems[s];if(!e.visible)continue;const o=n.setContext(t.getPointLabelContext(s));Dr(i,o,e);const r=li(o.font),{x:a,y:l,textAlign:h}=e;Je(i,t._pointLabels[s],a,l+r.lineHeight/2,r,{color:o.color,textAlign:h,textBaseline:"middle"})}}(this,o),n.display&&this.ticks.forEach(((t,e)=>{if(0!==e){a=this.getDistanceFromCenterForValue(t.value);const i=this.getContext(e),r=n.setContext(i),l=s.setContext(i);!function(t,e,i,n,s){const o=t.ctx,r=e.circular,{color:a,lineWidth:l}=e;!r&&!n||!a||!l||i<0||(o.save(),o.strokeStyle=a,o.lineWidth=l,o.setLineDash(s.dash),o.lineDashOffset=s.dashOffset,o.beginPath(),Pr(t,i,r,n),o.closePath(),o.stroke(),o.restore())}(this,r,a,o,l)}})),i.display){for(t.save(),r=o-1;r>=0;r--){const n=i.setContext(this.getPointLabelContext(r)),{color:s,lineWidth:o}=n;o&&s&&(t.lineWidth=o,t.strokeStyle=s,t.setLineDash(n.borderDash),t.lineDashOffset=n.borderDashOffset,a=this.getDistanceFromCenterForValue(e.ticks.reverse?this.min:this.max),l=this.getPointPosition(r,a),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(l.x,l.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const t=this.ctx,e=this.options,i=e.ticks;if(!i.display)return;const n=this.getIndexAngle(0);let s,o;t.save(),t.translate(this.xCenter,this.yCenter),t.rotate(n),t.textAlign="center",t.textBaseline="middle",this.ticks.forEach(((n,r)=>{if(0===r&&!e.reverse)return;const a=i.setContext(this.getContext(r)),l=li(a.font);if(s=this.getDistanceFromCenterForValue(this.ticks[r].value),a.showLabelBackdrop){t.font=l.string,o=t.measureText(n.label).width,t.fillStyle=a.backdropColor;const e=ai(a.backdropPadding);t.fillRect(-o/2-e.left,-s-l.size/2-e.top,o+e.width,l.size+e.height)}Je(t,n.label,0,-s,l,{color:a.color,strokeColor:a.textStrokeColor,strokeWidth:a.textStrokeWidth})})),t.restore()}drawTitle(){}}const Tr={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},Or=Object.keys(Tr);function Lr(t,e){return t-e}function Rr(t,e){if(mt(e))return null;const i=t._adapter,{parser:n,round:s,isoWeekday:o}=t._parseOpts;let r=e;return"function"==typeof n&&(r=n(r)),yt(r)||(r="string"==typeof n?i.parse(r,n):i.parse(r)),null===r?null:(s&&(r="week"!==s||!Gt(o)&&!0!==o?i.startOf(r,s):i.startOf(r,"isoWeek",o)),+r)}function Ir(t,e,i,n){const s=Or.length;for(let o=Or.indexOf(t);o<s-1;++o){const t=Tr[Or[o]],s=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((i-e)/(s*t.size))<=n)return Or[o]}return Or[s-1]}function zr(t,e,i){if(i){if(i.length){const{lo:n,hi:s}=le(i,e);t[i[n]>=e?i[n]:i[s]]=!0}}else t[e]=!0}function Wr(t,e,i){const n=[],s={},o=e.length;let r,a;for(r=0;r<o;++r)a=e[r],s[a]=r,n.push({value:a,major:!1});return 0!==o&&i?function(t,e,i,n){const s=t._adapter,o=+s.startOf(e[0].value,n),r=e[e.length-1].value;let a,l;for(a=o;a<=r;a=+s.add(a,1,n))l=i[a],l>=0&&(e[l].major=!0);return e}(t,n,s,i):n}class Fr extends Cs{static id="time";static defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",callback:!1,major:{enabled:!1}}};constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e={}){const i=t.time||(t.time={}),n=this._adapter=new On(t.adapters.date);n.init(e),Pt(i.displayFormats,n.formats()),this._parseOpts={parser:i.parser,round:i.round,isoWeekday:i.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:Rr(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this.options,e=this._adapter,i=t.time.unit||"day";let{min:n,max:s,minDefined:o,maxDefined:r}=this.getUserBounds();function a(t){o||isNaN(t.min)||(n=Math.min(n,t.min)),r||isNaN(t.max)||(s=Math.max(s,t.max))}o&&r||(a(this._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||a(this.getMinMax(!1))),n=yt(n)&&!isNaN(n)?n:+e.startOf(Date.now(),i),s=yt(s)&&!isNaN(s)?s:+e.endOf(Date.now(),i)+1,this.min=Math.min(n,s-1),this.max=Math.max(n+1,s)}_getLabelBounds(){const t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],i=t[t.length-1]),{min:e,max:i}}buildTicks(){const t=this.options,e=t.time,i=t.ticks,n="labels"===i.source?this.getLabelTimestamps():this._generate();"ticks"===t.bounds&&n.length&&(this.min=this._userMin||n[0],this.max=this._userMax||n[n.length-1]);const s=this.min,o=function(t,e,i){let n=0,s=t.length;for(;n<s&&t[n]<e;)n++;for(;s>n&&t[s-1]>i;)s--;return n>0||s<t.length?t.slice(n,s):t}(n,s,this.max);return this._unit=e.unit||(i.autoSkip?Ir(e.minUnit,this.min,this.max,this._getLabelCapacity(s)):function(t,e,i,n,s){for(let o=Or.length-1;o>=Or.indexOf(i);o--){const i=Or[o];if(Tr[i].common&&t._adapter.diff(s,n,i)>=e-1)return i}return Or[i?Or.indexOf(i):0]}(this,o.length,e.minUnit,this.min,this.max)),this._majorUnit=i.major.enabled&&"year"!==this._unit?function(t){for(let e=Or.indexOf(t)+1,i=Or.length;e<i;++e)if(Tr[Or[e]].common)return Or[e]}(this._unit):void 0,this.initOffsets(n),t.reverse&&o.reverse(),Wr(this,o,this._majorUnit)}afterAutoSkip(){this.options.offsetAfterAutoskip&&this.initOffsets(this.ticks.map((t=>+t.value)))}initOffsets(t=[]){let e,i,n=0,s=0;this.options.offset&&t.length&&(e=this.getDecimalForValue(t[0]),n=1===t.length?1-e:(this.getDecimalForValue(t[1])-e)/2,i=this.getDecimalForValue(t[t.length-1]),s=1===t.length?i:(i-this.getDecimalForValue(t[t.length-2]))/2);const o=t.length<3?.5:.25;n=re(n,0,o),s=re(s,0,o),this._offsets={start:n,end:s,factor:1/(n+1+s)}}_generate(){const t=this._adapter,e=this.min,i=this.max,n=this.options,s=n.time,o=s.unit||Ir(s.minUnit,e,i,this._getLabelCapacity(e)),r=_t(n.ticks.stepSize,1),a="week"===o&&s.isoWeekday,l=Gt(a)||!0===a,h={};let c,d,u=e;if(l&&(u=+t.startOf(u,"isoWeek",a)),u=+t.startOf(u,l?"day":o),t.diff(i,e,o)>1e5*r)throw new Error(e+" and "+i+" are too far apart with stepSize of "+r+" "+o);const f="data"===n.ticks.source&&this.getDataTimestamps();for(c=u,d=0;c<i;c=+t.add(c,r,o),d++)zr(h,c,f);return c!==i&&"ticks"!==n.bounds&&1!==d||zr(h,c,f),Object.keys(h).sort(Lr).map((t=>+t))}getLabelForValue(t){const e=this._adapter,i=this.options.time;return i.tooltipFormat?e.format(t,i.tooltipFormat):e.format(t,i.displayFormats.datetime)}format(t,e){const i=this.options.time.displayFormats,n=this._unit,s=e||i[n];return this._adapter.format(t,s)}_tickFormatFunction(t,e,i,n){const s=this.options,o=s.ticks.callback;if(o)return wt(o,[t,e,i],this);const r=s.time.displayFormats,a=this._unit,l=this._majorUnit,h=a&&r[a],c=l&&r[l],d=i[e],u=l&&c&&d&&d.major;return this._adapter.format(t,n||(u?c:h))}generateTickLabels(t){let e,i,n;for(e=0,i=t.length;e<i;++e)n=t[e],n.label=this._tickFormatFunction(n.value,e,t)}getDecimalForValue(t){return null===t?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){const e=this._offsets,i=this.getDecimalForValue(t);return this.getPixelForDecimal((e.start+i)*e.factor)}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return this.min+i*(this.max-this.min)}_getLabelSize(t){const e=this.options.ticks,i=this.ctx.measureText(t).width,n=Jt(this.isHorizontal()?e.maxRotation:e.minRotation),s=Math.cos(n),o=Math.sin(n),r=this._resolveTickFontOptions(0).size;return{w:i*s+r*o,h:i*o+r*s}}_getLabelCapacity(t){const e=this.options.time,i=e.displayFormats,n=i[e.unit]||i.millisecond,s=this._tickFormatFunction(t,0,Wr(this,[t],this._majorUnit),n),o=this._getLabelSize(s),r=Math.floor(this.isHorizontal()?this.width/o.w:this.height/o.h)-1;return r>0?r:1}getDataTimestamps(){let t,e,i=this._cache.data||[];if(i.length)return i;const n=this.getMatchingVisibleMetas();if(this._normalized&&n.length)return this._cache.data=n[0].controller.getAllParsedValues(this);for(t=0,e=n.length;t<e;++t)i=i.concat(n[t].controller.getAllParsedValues(this));return this._cache.data=this.normalize(i)}getLabelTimestamps(){const t=this._cache.labels||[];let e,i;if(t.length)return t;const n=this.getLabels();for(e=0,i=n.length;e<i;++e)t.push(Rr(this,n[e]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return fe(t.sort(Lr))}}function jr(t,e,i){let n,s,o,r,a=0,l=t.length-1;i?(e>=t[a].pos&&e<=t[l].pos&&({lo:a,hi:l}=he(t,"pos",e)),({pos:n,time:o}=t[a]),({pos:s,time:r}=t[l])):(e>=t[a].time&&e<=t[l].time&&({lo:a,hi:l}=he(t,"time",e)),({time:n,pos:o}=t[a]),({time:s,pos:r}=t[l]));const h=s-n;return h?o+(r-o)*(e-n)/h:o}var Vr=Object.freeze({__proto__:null,CategoryScale:class extends Cs{static id="category";static defaults={ticks:{callback:pr}};constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){const e=this._addedLabels;if(e.length){const t=this.getLabels();for(const{index:i,label:n}of e)t[i]===n&&t.splice(i,1);this._addedLabels=[]}super.init(t)}parse(t,e){if(mt(t))return null;const i=this.getLabels();return((t,e)=>null===t?null:re(Math.round(t),0,e))(e=isFinite(e)&&i[e]===t?e:function(t,e,i,n){const s=t.indexOf(e);return-1===s?((t,e,i,n)=>("string"==typeof e?(i=t.push(e)-1,n.unshift({index:i,label:e})):isNaN(e)&&(i=null),i))(t,e,i,n):s!==t.lastIndexOf(e)?i:s}(i,t,_t(e,t),this._addedLabels),i.length-1)}determineDataLimits(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let{min:i,max:n}=this.getMinMax(!0);"ticks"===this.options.bounds&&(t||(i=0),e||(n=this.getLabels().length-1)),this.min=i,this.max=n}buildTicks(){const t=this.min,e=this.max,i=this.options.offset,n=[];let s=this.getLabels();s=0===t&&e===s.length-1?s:s.slice(t,e+1),this._valueRange=Math.max(s.length-(i?0:1),1),this._startValue=this.min-(i?.5:0);for(let i=t;i<=e;i++)n.push({value:i});return n}getLabelForValue(t){return pr.call(this,t)}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return"number"!=typeof t&&(t=this.parse(t)),null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}},LinearScale:xr,LogarithmicScale:Ar,RadialLinearScale:Br,TimeScale:Fr,TimeSeriesScale:class extends Fr{static id="timeseries";static defaults=Fr.defaults;constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this._getTimestampsForTable(),e=this._table=this.buildLookupTable(t);this._minPos=jr(e,this.min),this._tableRange=jr(e,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){const{min:e,max:i}=this,n=[],s=[];let o,r,a,l,h;for(o=0,r=t.length;o<r;++o)l=t[o],l>=e&&l<=i&&n.push(l);if(n.length<2)return[{time:e,pos:0},{time:i,pos:1}];for(o=0,r=n.length;o<r;++o)h=n[o+1],a=n[o-1],l=n[o],Math.round((h+a)/2)!==l&&s.push({time:l,pos:o/(r-1)});return s}_generate(){const t=this.min,e=this.max;let i=super.getDataTimestamps();return i.includes(t)&&i.length||i.splice(0,0,t),i.includes(e)&&1!==i.length||i.push(e),i.sort(((t,e)=>t-e))}_getTimestampsForTable(){let t=this._cache.all||[];if(t.length)return t;const e=this.getDataTimestamps(),i=this.getLabelTimestamps();return t=e.length&&i.length?this.normalize(e.concat(i)):e.length?e:i,t=this._cache.all=t,t}getDecimalForValue(t){return(jr(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return jr(this._table,i*this._tableRange+this._minPos,!0)}}});const Nr=[Pn,bo,fr,Vr];Qs.register(...Nr);const Hr=Qs,Yr={modes:{point:(t,e)=>Xr(t,e,{intersect:!0}),nearest:(t,e,i)=>function(t,e,i){let n=Number.POSITIVE_INFINITY;return Xr(t,e,i).reduce(((t,s)=>{const o=s.getCenterPoint(),r=function(t,e,i){return"x"===i?{x:t.x,y:e.y}:"y"===i?{x:e.x,y:t.y}:e}(e,o,i.axis),a=ie(e,r);return a<n?(t=[s],n=a):a===n&&t.push(s),t}),[]).sort(((t,e)=>t._index-e._index)).slice(0,1)}(t,e,i),x:(t,e,i)=>Xr(t,e,{intersect:i.intersect,axis:"x"}),y:(t,e,i)=>Xr(t,e,{intersect:i.intersect,axis:"y"})}};function $r(t,e,i){return(Yr.modes[i.mode]||Yr.modes.nearest)(t,e,i)}function Xr(t,e,i){return t.visibleElements.filter((t=>i.intersect?t.inRange(e.x,e.y):function(t,e,i){return"x"!==i&&"y"!==i?t.inRange(e.x,e.y,"x",!0)||t.inRange(e.x,e.y,"y",!0):t.inRange(e.x,e.y,i,!0)}(t,e,i.axis)))}const Ur=(t,e)=>e>t||t.length>e.length&&t.slice(0,e.length)===e,Zr=.001,qr=(t,e,i)=>Math.min(i,Math.max(e,t));function Gr(t,e,i){for(const n of Object.keys(t))t[n]=qr(t[n],e,i);return t}function Kr(t,{x:e,y:i,x2:n,y2:s},o,r){const a=r/2,l=t.x>=e-a-Zr&&t.x<=n+a+Zr,h=t.y>=i-a-Zr&&t.y<=s+a+Zr;return"x"===o?l:("y"===o||l)&&h}function Jr(t,e){const{centerX:i,centerY:n}=t.getProps(["centerX","centerY"],e);return{x:i,y:n}}const Qr=t=>"string"==typeof t&&t.endsWith("%"),ta=t=>parseFloat(t)/100,ea=t=>qr(ta(t),0,1),ia=(t,e)=>({x:t,y:e,x2:t,y2:e,width:0,height:0}),na={box:t=>ia(t.centerX,t.centerY),ellipse:t=>({centerX:t.centerX,centerY:t.centerX,radius:0,width:0,height:0}),label:t=>ia(t.centerX,t.centerY),line:t=>ia(t.x,t.y),point:t=>({centerX:t.centerX,centerY:t.centerY,radius:0,width:0,height:0}),polygon:t=>ia(t.centerX,t.centerY)};function sa(t,e){return"start"===e?0:"end"===e?t:Qr(e)?ea(e)*t:t/2}function oa(t,e,i=!0){return"number"==typeof e?e:Qr(e)?(i?ea(e):ta(e))*t:t}function ra(t,e="center"){return bt(t)?{x:_t(t.x,e),y:_t(t.y,e)}:{x:t=_t(t,e),y:t}}function aa(t){return t&&(Rt(t.xValue)||Rt(t.yValue))}function la(t,e,i){const n=i.init;if(n)return!0===n?ca(e,i):function(t,e,i){const n=wt(i.init,[{chart:t,properties:e,options:i}]);return!0===n?ca(e,i):bt(n)?n:void 0}(t,e,i)}function ha(t,e,i){let n=!1;return e.forEach((e=>{It(t[e])?(n=!0,i[e]=t[e]):Rt(i[e])&&delete i[e]})),n}function ca(t,e){const i=e.type||"line";return na[i](t)}const da=new Map,ua=t=>t.reduce((function(t,e){return t+e.string}),"");function fa(t){if(t&&"object"==typeof t){const e=t.toString();return"[object HTMLImageElement]"===e||"[object HTMLCanvasElement]"===e}}function pa(t,{x:e,y:i},n){n&&(t.translate(e,i),t.rotate(Jt(n)),t.translate(-e,-i))}function ga(t,e){if(e&&e.borderWidth)return t.lineCap=e.borderCapStyle,t.setLineDash(e.borderDash),t.lineDashOffset=e.borderDashOffset,t.lineJoin=e.borderJoinStyle,t.lineWidth=e.borderWidth,t.strokeStyle=e.borderColor,!0}function ma(t,e){t.shadowColor=e.backgroundShadowColor,t.shadowBlur=e.shadowBlur,t.shadowOffsetX=e.shadowOffsetX,t.shadowOffsetY=e.shadowOffsetY}function xa(t,e){const i=e.content;if(fa(i))return{width:oa(i.width,e.width),height:oa(i.height,e.height)};const n=e.font,s=xt(n)?n.map((t=>li(t))):[li(n)],o=e.textStrokeWidth,r=xt(i)?i:[i],a=r.join()+ua(s)+o+(t._measureText?"-spriting":"");return da.has(a)||da.set(a,function(t,e,i,n){t.save();const s=e.length;let o=0,r=n;for(let a=0;a<s;a++){const s=i[Math.min(a,i.length-1)];t.font=s.string;const l=e[a];o=Math.max(o,t.measureText(l).width+n),r+=s.lineHeight}return t.restore(),{width:o,height:r}}(t,r,s,o)),da.get(a)}function ba(t,e,i){const{x:n,y:s,width:o,height:r}=e;t.save(),ma(t,i);const a=ga(t,i);t.fillStyle=i.backgroundColor,t.beginPath(),Qe(t,{x:n,y:s,w:o,h:r,radius:Gr(ri(i.borderRadius),0,Math.min(o,r)/2)}),t.closePath(),t.fill(),a&&(t.shadowColor=i.borderShadowColor,t.stroke()),t.restore()}const ya={xScaleID:{min:"xMin",max:"xMax",start:"left",end:"right",startProp:"x",endProp:"x2"},yScaleID:{min:"yMin",max:"yMax",start:"bottom",end:"top",startProp:"y",endProp:"y2"}};function va(t,e,i){return yt(e="number"==typeof e?e:t.parse(e))?t.getPixelForValue(e):i}function _a(t,e,i){const n=e[i];if(n||"scaleID"===i)return n;const s=i.charAt(0),o=Object.values(t).filter((t=>t.axis&&t.axis===s));return o.length?o[0].id:s}function Aa(t,e){if(t){const i=t.options.reverse;return{start:va(t,e.min,i?e.end:e.start),end:va(t,e.max,i?e.start:e.end)}}}function wa(t,e){const{chartArea:i,scales:n}=t,s=n[_a(n,e,"xScaleID")],o=n[_a(n,e,"yScaleID")];let r=i.width/2,a=i.height/2;return s&&(r=va(s,e.xValue,s.left+s.width/2)),o&&(a=va(o,e.yValue,o.top+o.height/2)),{x:r,y:a}}function Ca(t,e){const i=t.scales,n=i[_a(i,e,"xScaleID")],s=i[_a(i,e,"yScaleID")];if(!n&&!s)return{};let{left:o,right:r}=n||t.chartArea,{top:a,bottom:l}=s||t.chartArea;const h=Ea(n,{min:e.xMin,max:e.xMax,start:o,end:r});o=h.start,r=h.end;const c=Ea(s,{min:e.yMin,max:e.yMax,start:l,end:a});return a=c.start,l=c.end,{x:o,y:a,x2:r,y2:l,width:r-o,height:l-a,centerX:o+(r-o)/2,centerY:a+(l-a)/2}}function Ma(t,e){if(!aa(e)){const i=Ca(t,e);let n=e.radius;n&&!isNaN(n)||(n=Math.min(i.width,i.height)/2,e.radius=n);const s=2*n,o=i.centerX+e.xAdjust,r=i.centerY+e.yAdjust;return{x:o-n,y:r-n,x2:o+n,y2:r+n,centerX:o,centerY:r,width:s,height:s,radius:n}}return function(t,e){const i=wa(t,e),n=2*e.radius;return{x:i.x-e.radius+e.xAdjust,y:i.y-e.radius+e.yAdjust,x2:i.x+e.radius+e.xAdjust,y2:i.y+e.radius+e.yAdjust,centerX:i.x+e.xAdjust,centerY:i.y+e.yAdjust,radius:e.radius,width:n,height:n}}(t,e)}function ka(t,e){const i=Ca(t,e);return i.initProperties=la(t,i,e),i.elements=[{type:"label",optionScope:"label",properties:Da(t,i,e),initProperties:i.initProperties}],i}function Ea(t,e){const i=Aa(t,e)||e;return{start:Math.min(i.start,i.end),end:Math.max(i.start,i.end)}}function Sa(t,e){const{start:i,end:n,borderWidth:s}=t,{position:o,padding:{start:r,end:a},adjust:l}=e;return i+s/2+l+sa(n-s-i-r-a-e.size,o)}function Da(t,e,i){const n=i.label;n.backgroundColor="transparent",n.callout.display=!1;const s=ra(n.position),o=ai(n.padding),r=xa(t.ctx,n),a=function({properties:t,options:e},i,n,s){const{x:o,x2:r,width:a}=t;return Sa({start:o,end:r,size:a,borderWidth:e.borderWidth},{position:n.x,padding:{start:s.left,end:s.right},adjust:e.label.xAdjust,size:i.width})}({properties:e,options:i},r,s,o),l=function({properties:t,options:e},i,n,s){const{y:o,y2:r,height:a}=t;return Sa({start:o,end:r,size:a,borderWidth:e.borderWidth},{position:n.y,padding:{start:s.top,end:s.bottom},adjust:e.label.yAdjust,size:i.height})}({properties:e,options:i},r,s,o),h=r.width+o.width,c=r.height+o.height;return{x:a,y:l,x2:a+h,y2:l+c,width:h,height:c,centerX:a+h/2,centerY:l+c/2,rotation:n.rotation}}function Pa(t,e,i){const n=Math.cos(i),s=Math.sin(i),o=e.x,r=e.y;return{x:o+n*(t.x-o)-s*(t.y-r),y:r+s*(t.x-o)+n*(t.y-r)}}const Ba=["enter","leave"],Ta=Ba.concat("click");function Oa({state:t,event:e},i,n,s){let o;for(const r of n)s.indexOf(r)<0&&(o=La(r.options[i]||t.listeners[i],r,e)||o);return o}function La(t,e,i){return!0===wt(t,[e.$context,i])}const Ra=["afterDraw","beforeDraw"];function Ia(t,e,i){if(t.hooked)return wt(e.options[i]||t.hooks[i],[e.$context])}function za(t,e,i,n){if(yt(e[i])&&!function(t,e,i){return Rt(t[e])||Rt(t[i])}(t.options,i,n)){const n=t[i]!==e[i];return t[i]=e[i],n}}function Wa(t,e){for(const i of["scaleID","xScaleID","yScaleID"]){const n=_a(e,t,i);n&&!e[n]&&Fa(t,i)&&console.warn(`No scale found with id '${n}' for annotation '${t.id}'`)}}function Fa(t,e){if("scaleID"===e)return!0;const i=e.charAt(0);for(const e of["Min","Max","Value"])if(Rt(t[i+e]))return!0;return!1}function ja(t,e,i,n){for(const s of i){const i=t[s];if(Rt(i)){const t=e.parse(i);n.min=Math.min(n.min,t),n.max=Math.max(n.max,t)}}}class Va extends gs{inRange(t,e,i,n){const{x:s,y:o}=Pa({x:t,y:e},this.getCenterPoint(n),Jt(-this.options.rotation));return Kr({x:s,y:o},this.getProps(["x","y","x2","y2"],n),i,this.options.borderWidth)}getCenterPoint(t){return Jr(this,t)}draw(t){t.save(),pa(t,this.getCenterPoint(),this.options.rotation),ba(t,this,this.options),t.restore()}get label(){return this.elements&&this.elements[0]}resolveElementProperties(t,e){return ka(t,e)}}Va.id="boxAnnotation",Va.defaults={adjustScaleRange:!0,backgroundShadowColor:"transparent",borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderRadius:0,borderShadowColor:"transparent",borderWidth:1,display:!0,init:void 0,label:{backgroundColor:"transparent",borderWidth:0,callout:{display:!1},color:"black",content:null,display:!1,drawTime:void 0,font:{family:void 0,lineHeight:void 0,size:void 0,style:void 0,weight:"bold"},height:void 0,opacity:void 0,padding:6,position:"center",rotation:void 0,textAlign:"start",textStrokeColor:void 0,textStrokeWidth:0,width:void 0,xAdjust:0,yAdjust:0,z:void 0},rotation:0,shadowBlur:0,shadowOffsetX:0,shadowOffsetY:0,xMax:void 0,xMin:void 0,xScaleID:void 0,yMax:void 0,yMin:void 0,yScaleID:void 0,z:0},Va.defaultRoutes={borderColor:"color",backgroundColor:"color"},Va.descriptors={label:{_fallback:!0}};const Na=["left","bottom","top","right"];class Ha extends gs{inRange(t,e,i,n){const{x:s,y:o}=Pa({x:t,y:e},this.getCenterPoint(n),Jt(-this.rotation));return Kr({x:s,y:o},this.getProps(["x","y","x2","y2"],n),i,this.options.borderWidth)}getCenterPoint(t){return Jr(this,t)}draw(t){const e=this.options,i=!Rt(this._visible)||this._visible;e.display&&e.content&&i&&(t.save(),pa(t,this.getCenterPoint(),this.rotation),function(t,e){const{pointX:i,pointY:n,options:s}=e,o=s.callout,r=o&&o.display&&function(t,e){const i=e.position;return Na.includes(i)?i:function(t,e){const{x:i,y:n,x2:s,y2:o,width:r,height:a,pointX:l,pointY:h,centerX:c,centerY:d,rotation:u}=t,f={x:c,y:d},p=e.start,g=oa(r,p),m=[i,i+g,i+g,s],x=[n+oa(a,p),o,n,o],b=[];for(let t=0;t<4;t++){const e=Pa({x:m[t],y:x[t]},f,Jt(u));b.push({position:Na[t],distance:ie(e,{x:l,y:h})})}return b.sort(((t,e)=>t.distance-e.distance))[0].position}(t,e)}(e,o);if(!r||function(t,e,i){const{pointX:n,pointY:s}=t,o=e.margin;let r=n,a=s;return"left"===i?r+=o:"right"===i?r-=o:"top"===i?a+=o:"bottom"===i&&(a-=o),t.inRange(r,a)}(e,o,r))return;t.save(),t.beginPath();if(!ga(t,o))return t.restore();const{separatorStart:a,separatorEnd:l}=function(t,e){const{x:i,y:n,x2:s,y2:o}=t,r=function(t,e){const{width:i,height:n,options:s}=t,o=s.callout.margin+s.borderWidth/2;return"right"===e?i+o:"bottom"===e?n+o:-o}(t,e);let a,l;return"left"===e||"right"===e?(a={x:i+r,y:n},l={x:a.x,y:o}):(a={x:i,y:n+r},l={x:s,y:a.y}),{separatorStart:a,separatorEnd:l}}(e,r),{sideStart:h,sideEnd:c}=function(t,e,i){const{y:n,width:s,height:o,options:r}=t,a=r.callout.start,l=function(t,e){const i=e.side;return"left"===t||"top"===t?-i:i}(e,r.callout);let h,c;return"left"===e||"right"===e?(h={x:i.x,y:n+oa(o,a)},c={x:h.x+l,y:h.y}):(h={x:i.x+oa(s,a),y:i.y},c={x:h.x,y:h.y+l}),{sideStart:h,sideEnd:c}}(e,r,a);(o.margin>0||0===s.borderWidth)&&(t.moveTo(a.x,a.y),t.lineTo(l.x,l.y)),t.moveTo(h.x,h.y),t.lineTo(c.x,c.y);const d=Pa({x:i,y:n},e.getCenterPoint(),Jt(-e.rotation));t.lineTo(d.x,d.y),t.stroke(),t.restore()}(t,this),ba(t,this,e),function(t,e,i){const n=i.content;if(fa(n))return t.save(),t.globalAlpha=function(t,e){const i=Gt(t)?t:e;return Gt(i)?qr(i,0,1):1}(i.opacity,n.style.opacity),t.drawImage(n,e.x,e.y,e.width,e.height),void t.restore();const s=xt(n)?n:[n],o=i.font,r=xt(o)?o.map((t=>li(t))):[li(o)],a=i.color,l=xt(a)?a:[a],h=function(t,e){const{x:i,width:n}=t,s=e.textAlign;return"center"===s?i+n/2:"end"===s||"right"===s?i+n:i}(e,i),c=e.y+i.textStrokeWidth/2;t.save(),t.textBaseline="middle",t.textAlign=i.textAlign,function(t,e){if(e.textStrokeWidth>0)return t.lineJoin="round",t.miterLimit=2,t.lineWidth=e.textStrokeWidth,t.strokeStyle=e.textStrokeColor,!0}(t,i)&&function(t,{x:e,y:i},n,s){t.beginPath();let o=0;n.forEach((function(n,r){const a=s[Math.min(r,s.length-1)],l=a.lineHeight;t.font=a.string,t.strokeText(n,e,i+l/2+o),o+=l})),t.stroke()}(t,{x:h,y:c},s,r),function(t,{x:e,y:i},n,{fonts:s,colors:o}){let r=0;n.forEach((function(n,a){const l=o[Math.min(a,o.length-1)],h=s[Math.min(a,s.length-1)],c=h.lineHeight;t.beginPath(),t.font=h.string,t.fillStyle=l,t.fillText(n,e,i+c/2+r),r+=c,t.fill()}))}(t,{x:h,y:c},s,{fonts:r,colors:l}),t.restore()}(t,function({x:t,y:e,width:i,height:n,options:s}){const o=s.borderWidth/2,r=ai(s.padding);return{x:t+r.left+o,y:e+r.top+o,width:i-r.left-r.right-s.borderWidth,height:n-r.top-r.bottom-s.borderWidth}}(this),e),t.restore())}resolveElementProperties(t,e){let i;if(aa(e))i=wa(t,e);else{const{centerX:n,centerY:s}=Ca(t,e);i={x:n,y:s}}const n=ai(e.padding),s=function(t,e,i,n){const s=e.width+n.width+i.borderWidth,o=e.height+n.height+i.borderWidth,r=ra(i.position,"center"),a=Ya(t.x,s,i.xAdjust,r.x),l=Ya(t.y,o,i.yAdjust,r.y);return{x:a,y:l,x2:a+s,y2:l+o,width:s,height:o,centerX:a+s/2,centerY:l+o/2}}(i,xa(t.ctx,e),e,n);return{initProperties:la(t,s,e),pointX:i.x,pointY:i.y,...s,rotation:e.rotation}}}function Ya(t,e,i=0,n){return t-sa(e,n)+i}Ha.id="labelAnnotation",Ha.defaults={adjustScaleRange:!0,backgroundColor:"transparent",backgroundShadowColor:"transparent",borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderRadius:0,borderShadowColor:"transparent",borderWidth:0,callout:{borderCapStyle:"butt",borderColor:void 0,borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:1,display:!1,margin:5,position:"auto",side:5,start:"50%"},color:"black",content:null,display:!0,font:{family:void 0,lineHeight:void 0,size:void 0,style:void 0,weight:void 0},height:void 0,init:void 0,opacity:void 0,padding:6,position:"center",rotation:0,shadowBlur:0,shadowOffsetX:0,shadowOffsetY:0,textAlign:"center",textStrokeColor:void 0,textStrokeWidth:0,width:void 0,xAdjust:0,xMax:void 0,xMin:void 0,xScaleID:void 0,xValue:void 0,yAdjust:0,yMax:void 0,yMin:void 0,yScaleID:void 0,yValue:void 0,z:0},Ha.defaultRoutes={borderColor:"color"};const $a=(t,e,i)=>({x:t.x+i*(e.x-t.x),y:t.y+i*(e.y-t.y)}),Xa=(t,e,i)=>$a(e,i,Math.abs((t-e.y)/(i.y-e.y))).x,Ua=(t,e,i)=>$a(e,i,Math.abs((t-e.x)/(i.x-e.x))).y,Za=t=>t*t,qa=(t,e,i,n)=>(1-n)*(1-n)*t+2*(1-n)*n*e+n*n*i,Ga=(t,e,i,n)=>({x:qa(t.x,e.x,i.x,n),y:qa(t.y,e.y,i.y,n)}),Ka=(t,e,i,n)=>2*(1-n)*(e-t)+2*n*(i-e),Ja=(t,e,i,n)=>-Math.atan2(Ka(t.x,e.x,i.x,n),Ka(t.y,e.y,i.y,n))+.5*Wt;class Qa extends gs{inRange(t,e,i,n){const s=this.options.borderWidth/2;if("x"!==i&&"y"!==i){const i={mouseX:t,mouseY:e},{path:o,ctx:r}=this;if(o){ga(r,this.options);const{chart:s}=this.$context,a=t*s.currentDevicePixelRatio,l=e*s.currentDevicePixelRatio,h=r.isPointInStroke(o,a,l)||il(this,i,n);return r.restore(),h}return function(t,{mouseX:e,mouseY:i},n=.001,s){const{x:o,y:r,x2:a,y2:l}=t.getProps(["x","y","x2","y2"],s),h=a-o,c=l-r,d=Za(h)+Za(c),u=0===d?-1:((e-o)*h+(i-r)*c)/d;let f,p;return u<0?(f=o,p=r):u>1?(f=a,p=l):(f=o+u*h,p=r+u*c),Za(e-f)+Za(i-p)<=n}(this,i,Za(s),n)||il(this,i,n)}return function(t,{mouseX:e,mouseY:i},n,{hBorderWidth:s,useFinalPosition:o}){const r=((t,e,{x:i,y:n,x2:s,y2:o},r)=>"y"===r?{start:Math.min(n,o),end:Math.max(n,o),value:e}:{start:Math.min(i,s),end:Math.max(i,s),value:t})(e,i,t.getProps(["x","y","x2","y2"],o),n);return r.value>=r.start-s&&r.value<=r.end+s||il(t,{mouseX:e,mouseY:i},o,n)}(this,{mouseX:t,mouseY:e},i,{hBorderWidth:s,useFinalPosition:n})}getCenterPoint(t){return Jr(this,t)}draw(t){const{x:e,y:i,x2:n,y2:s,cp:o,options:r}=this;if(t.save(),!ga(t,r))return t.restore();ma(t,r);const a=Math.sqrt(Math.pow(n-e,2)+Math.pow(s-i,2));if(r.curve&&o)return function(t,e,i,n){const{x:s,y:o,x2:r,y2:a,options:l}=e,{startOpts:h,endOpts:c,startAdjust:d,endAdjust:u}=ol(e),f={x:s,y:o},p={x:r,y:a},g=Ja(f,i,p,0),m=Ja(f,i,p,1)-Wt,x=Ga(f,i,p,d/n),b=Ga(f,i,p,1-u/n),y=new Path2D;t.beginPath(),y.moveTo(x.x,x.y),y.quadraticCurveTo(i.x,i.y,b.x,b.y),t.shadowColor=l.borderShadowColor,t.stroke(y),e.path=y,e.ctx=t,ll(t,x,{angle:g,adjust:d},h),ll(t,b,{angle:m,adjust:u},c)}(t,this,o,a),t.restore();const{startOpts:l,endOpts:h,startAdjust:c,endAdjust:d}=ol(this),u=Math.atan2(s-i,n-e);t.translate(e,i),t.rotate(u),t.beginPath(),t.moveTo(0+c,0),t.lineTo(a-d,0),t.shadowColor=r.borderShadowColor,t.stroke(),al(t,0,c,l),al(t,a,-d,h),t.restore()}get label(){return this.elements&&this.elements[0]}resolveElementProperties(t,e){const i=function(t,e){const{scales:i,chartArea:n}=t,s=i[e.scaleID],o={x:n.left,y:n.top,x2:n.right,y2:n.bottom};return s?function(t,e,i){const n=va(t,i.value,NaN),s=va(t,i.endValue,n);t.isHorizontal()?(e.x=n,e.x2=s):(e.y=n,e.y2=s)}(s,o,e):function(t,e,i){for(const n of Object.keys(ya)){const s=t[_a(t,i,n)];if(s){const{min:t,max:o,start:r,end:a,startProp:l,endProp:h}=ya[n],c=Aa(s,{min:i[t],max:i[o],start:s[r],end:s[a]});e[l]=c.start,e[h]=c.end}}}(i,o,e),o}(t,e),{x:n,y:s,x2:o,y2:r}=i,a=function({x:t,y:e,x2:i,y2:n},{top:s,right:o,bottom:r,left:a}){return!(t<a&&i<a||t>o&&i>o||e<s&&n<s||e>r&&n>r)}(i,t.chartArea),l=a?function(t,e,i){const{x:n,y:s}=el(t,e,i),{x:o,y:r}=el(e,t,i);return{x:n,y:s,x2:o,y2:r,width:Math.abs(o-n),height:Math.abs(r-s)}}({x:n,y:s},{x:o,y:r},t.chartArea):{x:n,y:s,x2:o,y2:r,width:Math.abs(o-n),height:Math.abs(r-s)};if(l.centerX=(o+n)/2,l.centerY=(r+s)/2,l.initProperties=la(t,l,e),e.curve){const t={x:l.x,y:l.y},i={x:l.x2,y:l.y2};l.cp=function(t,e,i){const{x:n,y:s,x2:o,y2:r,centerX:a,centerY:l}=t,h=Math.atan2(r-s,o-n),c=ra(e.controlPoint,0);return Pa({x:a+oa(i,c.x,!1),y:l+oa(i,c.y,!1)},{x:a,y:l},h)}(l,e,ie(t,i))}const h=function(t,e,i){const n=i.borderWidth,s=ai(i.padding),o=xa(t.ctx,i);return function(t,e,i,n){const{width:s,height:o,padding:r}=i,{xAdjust:a,yAdjust:l}=e,h={x:t.x,y:t.y},c={x:t.x2,y:t.y2},d="auto"===e.rotation?function(t){const{x:e,y:i,x2:n,y2:s}=t,o=Math.atan2(s-i,n-e);return o>Wt/2?o-Wt:o<Wt/-2?o+Wt:o}(t):Jt(e.rotation),u=function(t,e,i){const n=Math.cos(i),s=Math.sin(i);return{w:Math.abs(t*n)+Math.abs(e*s),h:Math.abs(t*s)+Math.abs(e*n)}}(s,o,d),f=function(t,e,i,n){let s;const o=function(t,e){const{x:i,x2:n,y:s,y2:o}=t,r=Math.min(s,o)-e.top,a=Math.min(i,n)-e.left,l=e.bottom-Math.max(s,o),h=e.right-Math.max(i,n);return{x:Math.min(a,h),y:Math.min(r,l),dx:a<=h?1:-1,dy:r<=l?1:-1}}(t,n);return s="start"===e.position?nl({w:t.x2-t.x,h:t.y2-t.y},i,0,o):"end"===e.position?1-nl({w:t.x-t.x2,h:t.y-t.y2},i,0,o):sa(1,e.position),s}(t,e,{labelSize:u,padding:r},n),p=t.cp?Ga(h,t.cp,c,f):$a(h,c,f),g={size:u.w,min:n.left,max:n.right,padding:r.left},m={size:u.h,min:n.top,max:n.bottom,padding:r.top},x=sl(p.x,g)+a,b=sl(p.y,m)+l;return{x:x-s/2,y:b-o/2,x2:x+s/2,y2:b+o/2,centerX:x,centerY:b,pointX:p.x,pointY:p.y,width:s,height:o,rotation:Qt(d)}}(e,i,{width:o.width+s.width+n,height:o.height+s.height+n,padding:s},t.chartArea)}(t,l,e.label);return h._visible=a,l.elements=[{type:"label",optionScope:"label",properties:h,initProperties:l.initProperties}],l}}Qa.id="lineAnnotation";const tl={backgroundColor:void 0,backgroundShadowColor:void 0,borderColor:void 0,borderDash:void 0,borderDashOffset:void 0,borderShadowColor:void 0,borderWidth:void 0,display:void 0,fill:void 0,length:void 0,shadowBlur:void 0,shadowOffsetX:void 0,shadowOffsetY:void 0,width:void 0};function el({x:t,y:e},i,{top:n,right:s,bottom:o,left:r}){return t<r&&(e=Ua(r,{x:t,y:e},i),t=r),t>s&&(e=Ua(s,{x:t,y:e},i),t=s),e<n&&(t=Xa(n,{x:t,y:e},i),e=n),e>o&&(t=Xa(o,{x:t,y:e},i),e=o),{x:t,y:e}}function il(t,{mouseX:e,mouseY:i},n,s){const o=t.label;return o.options.display&&o.inRange(e,i,s,n)}function nl(t,e,i,n){const{labelSize:s,padding:o}=e,r=t.w*n.dx,a=t.h*n.dy,l=r>0&&(s.w/2+o.left-n.x)/r,h=a>0&&(s.h/2+o.top-n.y)/a;return qr(Math.max(l,h),0,.25)}function sl(t,e){const{size:i,min:n,max:s,padding:o}=e,r=i/2;return i>s-n?(s+n)/2:(n>=t-o-r&&(t=n+o+r),s<=t+o+r&&(t=s-o-r),t)}function ol(t){const e=t.options,i=e.arrowHeads&&e.arrowHeads.start,n=e.arrowHeads&&e.arrowHeads.end;return{startOpts:i,endOpts:n,startAdjust:rl(t,i),endAdjust:rl(t,n)}}function rl(t,e){if(!e||!e.display)return 0;const{length:i,width:n}=e,s=t.options.borderWidth/2,o={x:i,y:n+s},r={x:0,y:s};return Math.abs(Xa(0,o,r))}function al(t,e,i,n){if(!n||!n.display)return;const{length:s,width:o,fill:r,backgroundColor:a,borderColor:l}=n,h=Math.abs(e-s)+i;t.beginPath(),ma(t,n),ga(t,n),t.moveTo(h,-o),t.lineTo(e+i,0),t.lineTo(h,o),!0===r?(t.fillStyle=a||l,t.closePath(),t.fill(),t.shadowColor="transparent"):t.shadowColor=n.borderShadowColor,t.stroke()}function ll(t,{x:e,y:i},{angle:n,adjust:s},o){o&&o.display&&(t.save(),t.translate(e,i),t.rotate(n),al(t,0,-s,o),t.restore())}Qa.defaults={adjustScaleRange:!0,arrowHeads:{display:!1,end:Object.assign({},tl),fill:!1,length:12,start:Object.assign({},tl),width:6},borderDash:[],borderDashOffset:0,borderShadowColor:"transparent",borderWidth:2,curve:!1,controlPoint:{y:"-50%"},display:!0,endValue:void 0,init:void 0,label:{backgroundColor:"rgba(0,0,0,0.8)",backgroundShadowColor:"transparent",borderCapStyle:"butt",borderColor:"black",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderRadius:6,borderShadowColor:"transparent",borderWidth:0,callout:Object.assign({},Ha.defaults.callout),color:"#fff",content:null,display:!1,drawTime:void 0,font:{family:void 0,lineHeight:void 0,size:void 0,style:void 0,weight:"bold"},height:void 0,opacity:void 0,padding:6,position:"center",rotation:0,shadowBlur:0,shadowOffsetX:0,shadowOffsetY:0,textAlign:"center",textStrokeColor:void 0,textStrokeWidth:0,width:void 0,xAdjust:0,yAdjust:0,z:void 0},scaleID:void 0,shadowBlur:0,shadowOffsetX:0,shadowOffsetY:0,value:void 0,xMax:void 0,xMin:void 0,xScaleID:void 0,yMax:void 0,yMin:void 0,yScaleID:void 0,z:0},Qa.descriptors={arrowHeads:{start:{_fallback:!0},end:{_fallback:!0},_fallback:!0}},Qa.defaultRoutes={borderColor:"color"};class hl extends gs{inRange(t,e,i,n){const s=this.options.rotation,o=this.options.borderWidth;if("x"!==i&&"y"!==i)return function(t,e,i,n){const{width:s,height:o,centerX:r,centerY:a}=e,l=s/2,h=o/2;if(l<=0||h<=0)return!1;const c=Jt(i||0),d=n/2||0,u=Math.cos(c),f=Math.sin(c),p=Math.pow(u*(t.x-r)+f*(t.y-a),2),g=Math.pow(f*(t.x-r)-u*(t.y-a),2);return p/Math.pow(l+d,2)+g/Math.pow(h+d,2)<=1.0001}({x:t,y:e},this.getProps(["width","height","centerX","centerY"],n),s,o);const{x:r,y:a,x2:l,y2:h}=this.getProps(["x","y","x2","y2"],n),c=o/2,d="y"===i?{start:a,end:h}:{start:r,end:l},u=Pa({x:t,y:e},this.getCenterPoint(n),Jt(-s));return u[i]>=d.start-c-Zr&&u[i]<=d.end+c+Zr}getCenterPoint(t){return Jr(this,t)}draw(t){const{width:e,height:i,centerX:n,centerY:s,options:o}=this;t.save(),pa(t,this.getCenterPoint(),o.rotation),ma(t,this.options),t.beginPath(),t.fillStyle=o.backgroundColor;const r=ga(t,o);t.ellipse(n,s,i/2,e/2,Wt/2,0,2*Wt),t.fill(),r&&(t.shadowColor=o.borderShadowColor,t.stroke()),t.restore()}get label(){return this.elements&&this.elements[0]}resolveElementProperties(t,e){return ka(t,e)}}hl.id="ellipseAnnotation",hl.defaults={adjustScaleRange:!0,backgroundShadowColor:"transparent",borderDash:[],borderDashOffset:0,borderShadowColor:"transparent",borderWidth:1,display:!0,init:void 0,label:Object.assign({},Va.defaults.label),rotation:0,shadowBlur:0,shadowOffsetX:0,shadowOffsetY:0,xMax:void 0,xMin:void 0,xScaleID:void 0,yMax:void 0,yMin:void 0,yScaleID:void 0,z:0},hl.defaultRoutes={borderColor:"color",backgroundColor:"color"},hl.descriptors={label:{_fallback:!0}};class cl extends gs{inRange(t,e,i,n){const{x:s,y:o,x2:r,y2:a,width:l}=this.getProps(["x","y","x2","y2","width"],n),h=this.options.borderWidth;if("x"!==i&&"y"!==i)return function(t,e,i,n){if(!t||!e||i<=0)return!1;const s=n/2;return Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2)<=Math.pow(i+s,2)}({x:t,y:e},this.getCenterPoint(n),l/2,h);const c=h/2,d="y"===i?{start:o,end:a,value:e}:{start:s,end:r,value:t};return d.value>=d.start-c&&d.value<=d.end+c}getCenterPoint(t){return Jr(this,t)}draw(t){const e=this.options,i=e.borderWidth;if(e.radius<.1)return;t.save(),t.fillStyle=e.backgroundColor,ma(t,e);const n=ga(t,e);(function(t,e,i,n){const{radius:s,options:o}=e,r=o.pointStyle,a=o.rotation;let l=(a||0)*Nt;if(fa(r))return t.save(),t.translate(i,n),t.rotate(l),t.drawImage(r,-r.width/2,-r.height/2,r.width,r.height),void t.restore();(t=>isNaN(t)||t<=0)(s)||function(t,{x:e,y:i,radius:n,rotation:s,style:o,rad:r}){let a,l,h,c;switch(t.beginPath(),o){default:t.arc(e,i,n,0,Ft),t.closePath();break;case"triangle":t.moveTo(e+Math.sin(r)*n,i-Math.cos(r)*n),r+=$t,t.lineTo(e+Math.sin(r)*n,i-Math.cos(r)*n),r+=$t,t.lineTo(e+Math.sin(r)*n,i-Math.cos(r)*n),t.closePath();break;case"rectRounded":c=.516*n,h=n-c,a=Math.cos(r+Yt)*h,l=Math.sin(r+Yt)*h,t.arc(e-a,i-l,c,r-Wt,r-Ht),t.arc(e+l,i-a,c,r-Ht,r),t.arc(e+a,i+l,c,r,r+Ht),t.arc(e-l,i+a,c,r+Ht,r+Wt),t.closePath();break;case"rect":if(!s){h=Math.SQRT1_2*n,t.rect(e-h,i-h,2*h,2*h);break}r+=Yt;case"rectRot":a=Math.cos(r)*n,l=Math.sin(r)*n,t.moveTo(e-a,i-l),t.lineTo(e+l,i-a),t.lineTo(e+a,i+l),t.lineTo(e-l,i+a),t.closePath();break;case"crossRot":r+=Yt;case"cross":a=Math.cos(r)*n,l=Math.sin(r)*n,t.moveTo(e-a,i-l),t.lineTo(e+a,i+l),t.moveTo(e+l,i-a),t.lineTo(e-l,i+a);break;case"star":a=Math.cos(r)*n,l=Math.sin(r)*n,t.moveTo(e-a,i-l),t.lineTo(e+a,i+l),t.moveTo(e+l,i-a),t.lineTo(e-l,i+a),r+=Yt,a=Math.cos(r)*n,l=Math.sin(r)*n,t.moveTo(e-a,i-l),t.lineTo(e+a,i+l),t.moveTo(e+l,i-a),t.lineTo(e-l,i+a);break;case"line":a=Math.cos(r)*n,l=Math.sin(r)*n,t.moveTo(e-a,i-l),t.lineTo(e+a,i+l);break;case"dash":t.moveTo(e,i),t.lineTo(e+Math.cos(r)*n,i+Math.sin(r)*n)}t.fill()}(t,{x:i,y:n,radius:s,rotation:a,style:r,rad:l})})(t,this,this.centerX,this.centerY),n&&!fa(e.pointStyle)&&(t.shadowColor=e.borderShadowColor,t.stroke()),t.restore(),e.borderWidth=i}resolveElementProperties(t,e){const i=Ma(t,e);return i.initProperties=la(t,i,e),i}}cl.id="pointAnnotation",cl.defaults={adjustScaleRange:!0,backgroundShadowColor:"transparent",borderDash:[],borderDashOffset:0,borderShadowColor:"transparent",borderWidth:1,display:!0,init:void 0,pointStyle:"circle",radius:10,rotation:0,shadowBlur:0,shadowOffsetX:0,shadowOffsetY:0,xAdjust:0,xMax:void 0,xMin:void 0,xScaleID:void 0,xValue:void 0,yAdjust:0,yMax:void 0,yMin:void 0,yScaleID:void 0,yValue:void 0,z:0},cl.defaultRoutes={borderColor:"color",backgroundColor:"color"};class dl extends gs{inRange(t,e,i,n){if("x"!==i&&"y"!==i)return this.options.radius>=.1&&this.elements.length>1&&function(t,e,i,n){let s=!1,o=t[t.length-1].getProps(["bX","bY"],n);for(const r of t){const t=r.getProps(["bX","bY"],n);t.bY>i!=o.bY>i&&e<(o.bX-t.bX)*(i-t.bY)/(o.bY-t.bY)+t.bX&&(s=!s),o=t}return s}(this.elements,t,e,n);const s=Pa({x:t,y:e},this.getCenterPoint(n),Jt(-this.options.rotation)),o=this.elements.map((t=>"y"===i?t.bY:t.bX)),r=Math.min(...o),a=Math.max(...o);return s[i]>=r&&s[i]<=a}getCenterPoint(t){return Jr(this,t)}draw(t){const{elements:e,options:i}=this;t.save(),t.beginPath(),t.fillStyle=i.backgroundColor,ma(t,i);const n=ga(t,i);let s=!0;for(const i of e)s?(t.moveTo(i.x,i.y),s=!1):t.lineTo(i.x,i.y);t.closePath(),t.fill(),n&&(t.shadowColor=i.borderShadowColor,t.stroke()),t.restore()}resolveElementProperties(t,e){const i=Ma(t,e),{sides:n,rotation:s}=e,o=[],r=2*Wt/n;let a=s*Nt;for(let s=0;s<n;s++,a+=r){const n=ul(i,e,a);n.initProperties=la(t,i,e),o.push(n)}return i.elements=o,i}}function ul({centerX:t,centerY:e},{radius:i,borderWidth:n},s){const o=n/2,r=Math.sin(s),a=Math.cos(s),l={x:t+r*i,y:e-a*i};return{type:"point",optionScope:"point",properties:{x:l.x,y:l.y,centerX:l.x,centerY:l.y,bX:t+r*(i+o),bY:e-a*(i+o)}}}dl.id="polygonAnnotation",dl.defaults={adjustScaleRange:!0,backgroundShadowColor:"transparent",borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderShadowColor:"transparent",borderWidth:1,display:!0,init:void 0,point:{radius:0},radius:10,rotation:0,shadowBlur:0,shadowOffsetX:0,shadowOffsetY:0,sides:3,xAdjust:0,xMax:void 0,xMin:void 0,xScaleID:void 0,xValue:void 0,yAdjust:0,yMax:void 0,yMin:void 0,yScaleID:void 0,yValue:void 0,z:0},dl.defaultRoutes={borderColor:"color",backgroundColor:"color"};const fl={box:Va,ellipse:hl,label:Ha,line:Qa,point:cl,polygon:dl};Object.keys(fl).forEach((t=>{We.describe(`elements.${fl[t].id}`,{_fallback:"plugins.annotation.common"})}));const pl={update:Object.assign},gl=Ta.concat(Ra),ml=(t,e)=>bt(e)?wl(t,e):t,xl=t=>"color"===t||"font"===t;function bl(t="line"){return fl[t]?t:(console.warn(`Unknown annotation type: '${t}', defaulting to 'line'`),"line")}function yl(t){return isNaN(t.x)||isNaN(t.y)}function vl(t,e,i,n){const s=t.elements||(t.elements=[]);s.length=e.length;for(let t=0;t<e.length;t++){const o=e[t],r=o.properties,a=_l(s,t,o.type,o.initProperties),l=i[o.optionScope].override(o);r.options=Al(l),n.update(a,r)}}function _l(t,e,i,n){const s=fl[bl(i)];let o=t[e];return o&&o instanceof s||(o=t[e]=new s,Object.assign(o,n)),o}function Al(t){const e=fl[bl(t.type)],i={};i.id=t.id,i.type=t.type,i.drawTime=t.drawTime,Object.assign(i,wl(t,e.defaults),wl(t,e.defaultRoutes));for(const e of gl)i[e]=t[e];return i}function wl(t,e){const i={};for(const n of Object.keys(e)){const s=e[n],o=t[n];xl(n)&&xt(o)?i[n]=o.map((t=>ml(t,s))):i[n]=ml(o,s)}return i}function Cl(t,e,i){return e.$context||(e.$context=Object.assign(Object.create(t.getContext()),{element:e,id:i.id,type:"annotation"}))}const Ml=new Map,kl=Ta.concat(Ra);var El={id:"annotation",version:"3.0.1",beforeRegister(){!function(t,e,i,n=!0){const s=i.split(".");let o=0;for(const r of e.split(".")){const a=s[o++];if(parseInt(r,10)<parseInt(a,10))break;if(Ur(a,r)){if(n)throw new Error(`${t} v${i} is not supported. v${e} or newer is required.`);return!1}}}("chart.js","4.0",Qs.version)},afterRegister(){Qs.register(fl)},afterUnregister(){Qs.unregister(fl)},beforeInit(t){Ml.set(t,{annotations:[],elements:[],visibleElements:[],listeners:{},listened:!1,moveListened:!1,hooks:{},hooked:!1,hovered:[]})},beforeUpdate(t,e,i){const n=Ml.get(t).annotations=[];let s=i.annotations;bt(s)?Object.keys(s).forEach((t=>{const e=s[t];bt(e)&&(e.id=t,n.push(e))})):xt(s)&&n.push(...s),function(t,e){for(const i of t)Wa(i,e)}(n,t.scales)},afterDataLimits(t,e){const i=Ml.get(t);!function(t,e,i){const n=function(t,e,i){const n=e.axis,s=e.id,o=n+"ScaleID",r={min:_t(e.min,Number.NEGATIVE_INFINITY),max:_t(e.max,Number.POSITIVE_INFINITY)};for(const a of i)a.scaleID===s?ja(a,e,["value","endValue"],r):_a(t,a,o)===s&&ja(a,e,[n+"Min",n+"Max",n+"Value"],r);return r}(t.scales,e,i);let s=za(e,n,"min","suggestedMin");s=za(e,n,"max","suggestedMax")||s,s&&It(e.handleTickRangeOptions)&&e.handleTickRangeOptions()}(t,e.scale,i.annotations.filter((t=>t.display&&t.adjustScaleRange)))},afterUpdate(t,e,i){const n=Ml.get(t);!function(t,e,i){e.listened=ha(i,Ta,e.listeners),e.moveListened=!1,e._getElements=$r,Ba.forEach((t=>{It(i[t])&&(e.moveListened=!0)})),e.listened&&e.moveListened||e.annotations.forEach((t=>{!e.listened&&It(t.click)&&(e.listened=!0),e.moveListened||Ba.forEach((i=>{It(t[i])&&(e.listened=!0,e.moveListened=!0)}))}))}(0,n,i),function(t,e,i,n){const s=function(t,e,i){return"reset"===i||"none"===i||"resize"===i?pl:new an(t,e)}(t,i.animations,n),o=e.annotations,r=function(t,e){const i=e.length,n=t.length;if(n<i){const e=i-n;t.splice(n,0,...new Array(e))}else n>i&&t.splice(i,n-i);return t}(e.elements,o);for(let e=0;e<o.length;e++){const i=o[e],n=_l(r,e,i.type),a=i.setContext(Cl(t,n,i)),l=n.resolveElementProperties(t,a);l.skip=yl(l),"elements"in l&&(vl(n,l.elements,a,s),delete l.elements),Rt(n.x)||Object.assign(n,l),Object.assign(n,l.initProperties),l.options=Al(a),s.update(n,l)}}(t,n,i,e.mode),n.visibleElements=n.elements.filter((t=>!t.skip&&t.options.display)),function(t,e,i){const n=e.visibleElements;e.hooked=ha(i,Ra,e.hooks),e.hooked||n.forEach((t=>{e.hooked||Ra.forEach((i=>{It(t.options[i])&&(e.hooked=!0)}))}))}(0,n,i)},beforeDatasetsDraw(t,e,i){Sl(t,"beforeDatasetsDraw",i.clip)},afterDatasetsDraw(t,e,i){Sl(t,"afterDatasetsDraw",i.clip)},beforeDraw(t,e,i){Sl(t,"beforeDraw",i.clip)},afterDraw(t,e,i){Sl(t,"afterDraw",i.clip)},beforeEvent(t,e,i){(function(t,e,i){if(t.listened)switch(e.type){case"mousemove":case"mouseout":return function(t,e,i){if(!t.moveListened)return;let n;n="mousemove"===e.type?$r(t,e,i.interaction):[];const s=t.hovered;t.hovered=n;const o={state:t,event:e};let r=Oa(o,"leave",s,n);return Oa(o,"enter",n,s)||r}(t,e,i);case"click":return function(t,e,i){const n=t.listeners,s=$r(t,e,i.interaction);let o;for(const t of s)o=La(t.options.click||n.click,t,e)||o;return o}(t,e,i)}})(Ml.get(t),e.event,i)&&(e.changed=!0)},afterDestroy(t){Ml.delete(t)},_getState:t=>Ml.get(t),defaults:{animations:{numbers:{properties:["x","y","x2","y2","width","height","centerX","centerY","pointX","pointY","radius"],type:"number"}},clip:!0,interaction:{mode:void 0,axis:void 0,intersect:void 0},common:{drawTime:"afterDatasetsDraw",init:!1,label:{}}},descriptors:{_indexable:!1,_scriptable:t=>!kl.includes(t)&&"init"!==t,annotations:{_allKeys:!1,_fallback:(t,e)=>`elements.${fl[bl(e.type)].id}`},interaction:{_fallback:!0},common:{label:{_indexable:xl,_fallback:!0},_indexable:xl}},additionalOptionScopes:[""]};function Sl(t,e,i){const{ctx:n,chartArea:s}=t,o=Ml.get(t);i&&Xe(n,s);const r=function(t,e){const i=[];for(const n of t)if(n.options.drawTime===e&&i.push({element:n,main:!0}),n.elements&&n.elements.length)for(const t of n.elements)t.options.display&&t.options.drawTime===e&&i.push({element:t});return i}(o.visibleElements,e).sort(((t,e)=>t.element.options.z-e.element.options.z));for(const t of r)Dl(n,s,o,t);i&&Ue(n)}function Dl(t,e,i,n){const s=n.element;n.main?(Ia(i,s,"beforeDraw"),s.draw(t,e),Ia(i,s,"afterDraw")):s.draw(t,e)}var Pl=i(884),Bl={};Bl.styleTagTransform=u(),Bl.setAttributes=l(),Bl.insert=r().bind(null,"head"),Bl.domAPI=s(),Bl.insertStyleElement=c(),e()(Pl.Z,Bl),Pl.Z&&Pl.Z.locals&&Pl.Z.locals;class Tl{constructor(){Hr.register(El),this.container=document.createElement("div"),this.container.id="graphContainer",this.btnBar=document.createElement("div"),this.btnBar.id="btnBar",this.btnTemp=document.createElement("div"),this.btnTemp.innerText="Temperature",this.btnTemp.id="btnTemp",this.btnTemp.classList.add("selected"),this.btnRain=document.createElement("div"),this.btnRain.innerText="Chance of rain",this.btnRain.id="btnRain",this.settingWhichGraph="temp",this.btnBar.append(this.btnTemp,this.btnRain),this.container.append(this.btnBar),this.bindEvents()}bindEvents(){x.on("renderGraph",(t=>{let e;"temp"===this.settingWhichGraph?e=`temp_${_.tempUnits}`:"rain"===this.settingWhichGraph&&(e="chance_of_rain");const i=Object.values(_.cachedData.forecast.forecastday[t].hour),n=[];i.forEach((t=>{const i=new Date(t.time).getHours();n.push({hour:i,temp:t[e]})}));const s=0===t;this.render({parsedData:n,isCurrentDay:s})})),this.btnTemp.addEventListener("click",(()=>{this.settingWhichGraph="temp",this.btnTemp.classList.add("selected"),this.btnRain.classList.remove("selected"),x.emit("renderGraph",_.selectedDay)})),this.btnRain.addEventListener("click",(()=>{this.settingWhichGraph="rain",this.btnRain.classList.add("selected"),this.btnTemp.classList.remove("selected"),x.emit("renderGraph",_.selectedDay)}))}render(t){const e=t.isCurrentDay?1:0,i=new Date(_.cachedData.current.last_updated).getHours();let n,s;"temp"===this.settingWhichGraph?(n="°",s="#1A83DD"):"rain"===this.settingWhichGraph&&(n="%",s="#dd1a79"),this.container.contains(this.canvas)&&this.container.removeChild(this.canvas),this.canvas=document.createElement("canvas"),this.container.append(this.canvas),this.cachedChart=new Hr(this.canvas,{type:"line",data:{labels:t.parsedData.map((t=>`${t.hour}:00`)),datasets:[{data:t.parsedData.map((t=>t.temp)),borderColor:s,tension:.2}]},options:{scales:{y:{beginAtZero:!1,ticks:{callback:t=>`${t}${n}`,stepSize:1}}},maintainAspectRatio:!1,responsive:!0,plugins:{annotation:{annotations:{line1:{adjustScaleRange:!0,drawTime:"afterDatasetsDraw",type:"line",scaleID:"x",borderColor:"orange",borderWidth:e,value:i}}},legend:{display:!1}},annotations:{line1:{}}}})}}class Ol{#t;#e;constructor(t){this.#t=t,this.#e=this.#i()}#i(){const t=(new Date).getFullYear();let e;const i=this.#t.toString();e=i,i.includes(t)||(e=`${e}-${t} - `);const n=document.createElement("footer");return n.innerHTML=`\n            <small>\n                &copy; Copyright ${e}\n                <a href="https://github.com/porkenvolf" target="”_blank”">\n                    Porkenvölf\n                </a>\n            </small>\n            `,n.style.display="flex",n.style.justifyContent="center",n.style.alignItems="center",n.style.color="grey",n.style.fontSize="0.9rem",n.querySelector("a").style.color="grey",n}get output(){return this.#e}}const Ll=i.p+"0ed817be10db2d705986.png";var Rl=i(224),Il={};Il.styleTagTransform=u(),Il.setAttributes=l(),Il.insert=r().bind(null,"head"),Il.domAPI=s(),Il.insertStyleElement=c(),e()(Rl.Z,Il),Rl.Z&&Rl.Z.locals&&Rl.Z.locals;class zl{constructor(){this.container=document.createElement("div"),this.container.id="titleContainer",this.icon=document.createElement("img"),this.icon.src=Ll,this.titleText=document.createElement("div"),this.titleText.innerText="SwineSky",this.container.append(this.titleText,this.icon)}}var Wl=i(514),Fl={};Fl.styleTagTransform=u(),Fl.setAttributes=l(),Fl.insert=r().bind(null,"head"),Fl.domAPI=s(),Fl.insertStyleElement=c(),e()(Wl.Z,Fl),Wl.Z&&Wl.Z.locals&&Wl.Z.locals;class jl{constructor(){this.container=document.createElement("div"),this.container.id="appContainer",this.loading=new z,this.title=new zl,this.header=new E,this.graph=new Tl,this.daysBar=new O(8),this.footer=new Ol(2023),this.container.append(this.title.container,this.header.container,this.graph.container,this.daysBar.container,this.footer.output),jl.bindEvents(this),jl.apiCall()}static apiCall(t){(async function(t){x.emit("loading");const e=t||await async function(){const t=await fetch("https://ipapi.co/json/"),e=await t.json();return"LBR"!==t.country_code_iso3&&"MMR"!==t.country_code_iso3&&"USA"!==t.country_code_iso3||(_.tempUnits="f",_.windUnits="mph"),e.city}().catch(console.log),i=await fetch(`https://api.weatherapi.com/v1/forecast.json?key=6b50d5938f0b4173a06202148231208&q=${e}&days=10&aqi=no&alerts=no\n    `),n=await i.json();return x.emit("stopLoading"),n})(t).then((t=>{_.cachedData=t,x.emit("renderHeader",0),x.emit("renderDaysBar"),x.emit("renderGraph",0),x.emit("renderHourly",0)})).catch(console.log)}static bindEvents(t){x.on("apiCall",(t=>{jl.apiCall(t)})),x.on("loading",(()=>{t.container.append(t.loading.container)})),x.on("stopLoading",(()=>{t.loading.container.remove()}))}}const Vl=document.querySelector("body"),Nl=new jl;Vl.append(Nl.container)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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VyxTQUNYQyxPQUFRLFNBQ1JDLFNBQVUsU0FDVkMsUUFBUyxTQUNUQyxJQUFLLFNBQ0xDLFlBQWEsU0FDYkMsUUFBUyxTQUNUQyxRQUFTLFNBQ1RDLEtBQU0sT0FDTkMsSUFBSyxLQUNMQyxNQUFPLE9BQ1BDLFFBQVMsU0FDVEMsS0FBTSxTQUNOQyxLQUFNLE9BQ05DLEtBQU0sU0FDTkMsT0FBUSxTQUNSQyxRQUFTLFNBQ1RDLFNBQVUsU0FDVkMsT0FBUSxTQUNSQyxNQUFPLFNBQ1BDLElBQUssU0FDTEMsT0FBUSxTQUNSQyxPQUFRLFNBQ1JDLEtBQU0sU0FDTkMsTUFBTyxTQUNQQyxNQUFPLFNBQ1BDLElBQUssT0FDTEMsT0FBUSxTQUNSQyxPQUFRLFNBQ1JDLFNBQVUsT0FDVkMsT0FBUSxTQUNSQyxPQUFRLFNBQ1JDLFNBQVUsU0FDVkMsU0FBVSxTQUNWQyxTQUFVLFNBQ1ZDLFNBQVUsU0FDVkMsT0FBUSxTQUNSQyxRQUFTLFNBQ1RDLFVBQVcsU0FDWEMsSUFBSyxTQUNMQyxPQUFRLFNBQ1JDLElBQUssU0FDTEMsSUFBSyxPQUNMQyxNQUFPLFNBQ1BDLElBQUssU0FDTEMsUUFBUyxTQUNUQyxPQUFRLFNBQ1JDLFFBQVMsU0FDVEMsTUFBTyxTQUNQQyxLQUFNLFNBQ05DLE1BQU8sU0FDUEMsT0FBUSxTQUNSQyxVQUFXLFNBQ1hDLFFBQVMsU0FDVEMsV0FBWSxTQUNaQyxJQUFLLFNBQ0xDLEtBQU0sU0FDTkMsTUFBTyxTQUNQQyxVQUFXLFNBQ1hDLEtBQU0sU0FDTkMsS0FBTSxTQUNOQyxLQUFNLFNBQ05DLEtBQU0sU0FDTkMsT0FBUSxTQUNSQyxPQUFRLFNBQ1JDLE9BQVEsU0FDUkMsTUFBTyxTQUNQQyxNQUFPLFNBQ1BDLFFBQVMsU0FDVEMsSUFBSyxTQUNMQyxLQUFNLE9BQ05DLFFBQVMsU0FDVEMsSUFBSyxTQUNMQyxPQUFRLFNBQ1JDLE1BQU8sU0FDUEMsV0FBWSxTQUNaQyxJQUFLLEtBQ0xDLE1BQU8sU0FDUEMsT0FBUSxTQUNSQyxPQUFRLFNBQ1JDLEtBQU0sU0FDTkMsVUFBVyxPQUNYQyxJ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LEdBQzVDLzZGLEVBQU9LLEtBQUssV0FDWixNQUFNZCxFQUFXdzdGLFNBZm5CRCxpQkFDRSxNQUFNRSxRQUF3QkMsTUFBTSwwQkFDOUJDLFFBQXNCRixFQUFnQkcsT0FTNUMsTUFQd0MsUUFBdENILEVBQWdCSSxtQkFDc0IsUUFBdENKLEVBQWdCSSxtQkFDc0IsUUFBdENKLEVBQWdCSSxvQkFFaEJuNkYsRUFBTU0sVUFBWSxJQUNsQk4sRUFBTVUsVUFBWSxPQUVidTVGLEVBQWNHLElBQ3ZCLENBR3VDQyxHQUFtQkMsTUFBTTNvRSxRQUFRNG9FLEtBQ2hFQyxRQUNFUixNQUFPLHFGQUFvRjE3RixvQ0FFN0YxRixRQUFhNGhHLEVBQWVOLE9BRWxDLE9BREFuN0YsRUFBT0ssS0FBSyxlQUNMeEcsQ0FDVCxFRFNJNmhHLENBQWdCbjhGLEdBQ2JzbEMsTUFBTWhyQyxJQUNMb0gsRUFBTXVCLFdBQWEzSSxFQUNuQm1HLEVBQU9LLEtBQUssZUFBZ0IsR0FDNUJMLEVBQU9LLEtBQUssaUJBQ1pMLEVBQU9LLEtBQUssY0FBZSxHQUMzQkwsRUFBT0ssS0FBSyxlQUFnQixFQUFFLElBRS9CazdGLE1BQU0zb0UsUUFBUTRvRSxJQUNuQixDQUVBLGlCQUFPMTZGLENBQVc2NkYsR0FDaEIzN0YsRUFBT0MsR0FBRyxXQUFZVixJQUNwQmk3RixHQUFJSyxRQUFRdDdGLEVBQVMsSUFFdkJTLEVBQU9DLEdBQUcsV0FBVyxLQUNuQjA3RixFQUFTbDdGLFVBQVVJLE9BQU84NkYsRUFBU2xCLFFBQVFoNkYsVUFBVSxJQUV2RFQsRUFBT0MsR0FBRyxlQUFlLEtBQ3ZCMDdGLEVBQVNsQixRQUFRaDZGLFVBQVVuRixRQUFRLEdBRXZDLEVFbkRGLE1BQU0yNEUsR0FBTy8zRSxTQUFTQyxjQUFjLFFBQzlCeS9GLEdBQU0sSUFBSXBCLEdBQ2hCdm1CLEdBQUtwekUsT0FBTys2RixHQUFJbjdGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9jc3MvY29tcG9uZW50cy9BcHAuY3NzIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvY3NzL2NvbXBvbmVudHMvRGF5LmNzcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL2Nzcy9jb21wb25lbnRzL0RheXNCYXIuY3NzIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvY3NzL2NvbXBvbmVudHMvR3JhcGguY3NzIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvY3NzL2NvbXBvbmVudHMvSGVhZGVyLmNzcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL2Nzcy9jb21wb25lbnRzL0xvYWRpbmcuY3NzIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvY3NzL2NvbXBvbmVudHMvU2VhcmNoQmFyLmNzcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL2Nzcy9jb21wb25lbnRzL1RpdGxlLmNzcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL2Nzcy9jb21wb25lbnRzL1VuaXRTZWxlY3Rvci5jc3MiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9jc3MvZm9udC5jc3MiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9jc3Mvc2Nyb2xsYmFyLmNzcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL2Nzcy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9jc3MvdmFyaWFibGVzLmNzcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3dlYXRoZXIvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vd2VhdGhlci93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vd2VhdGhlci93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3dlYXRoZXIvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly93ZWF0aGVyL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL3dlYXRoZXIvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvY3NzL2ZvbnQuY3NzPzI5YTQiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9jc3Mvc3R5bGUuY3NzPzlmY2QiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9qcy9QdWJzdWIuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9jc3MvY29tcG9uZW50cy9TZWFyY2hCYXIuY3NzP2RiNjciLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9qcy9jb21wb25lbnRzL1NlYXJjaEJhci5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL2pzL2NvbXBvbmVudHMvQ2FjaGUuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9jc3MvY29tcG9uZW50cy9Vbml0U2VsZWN0b3IuY3NzP2M0YWIiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9qcy9jb21wb25lbnRzL1VuaXRTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL2Nzcy9jb21wb25lbnRzL0hlYWRlci5jc3M/NTRhZiIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL2pzL2NvbXBvbmVudHMvSGVhZGVyLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvY3NzL2NvbXBvbmVudHMvRGF5LmNzcz8zYjg1Iiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvanMvY29tcG9uZW50cy9EYXkuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9jc3MvY29tcG9uZW50cy9EYXlzQmFyLmNzcz9lNzhjIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvanMvY29tcG9uZW50cy9EYXlzQmFyLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvY3NzL2NvbXBvbmVudHMvTG9hZGluZy5jc3M/NzM3MyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL2pzL2NvbXBvbmVudHMvTG9hZGluZy5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vbm9kZV9tb2R1bGVzL0BrdXJrbGUvY29sb3IvZGlzdC9jb2xvci5lc20uanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9kaXN0L2NodW5rcy9oZWxwZXJzLnNlZ21lbnQuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9kaXN0L2NoYXJ0LmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvYXV0by9hdXRvLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9ub2RlX21vZHVsZXMvY2hhcnRqcy1wbHVnaW4tYW5ub3RhdGlvbi9kaXN0L2NoYXJ0anMtcGx1Z2luLWFubm90YXRpb24uZXNtLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvY3NzL2NvbXBvbmVudHMvR3JhcGguY3NzPzg4OTMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9qcy9jb21wb25lbnRzL0dyYXBoLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvanMvY29tcG9uZW50cy9Gb290ZXIuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9jc3MvY29tcG9uZW50cy9UaXRsZS5jc3M/YjRmNSIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL2pzL2NvbXBvbmVudHMvVGl0bGUuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9jc3MvY29tcG9uZW50cy9BcHAuY3NzPzBlZDAiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9qcy9jb21wb25lbnRzL0FwcC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL2pzL2NvbXBvbmVudHMvQVBJLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL3ZhcmlhYmxlcy5jc3NcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmkoX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgI2FwcENvbnRhaW5lciB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgd2lkdGg6IG1pbih2YXIoLS1taW5XaWR0aCksIDEwMCUpO1xuICBwYWRkaW5nOiAxMHB4O1xuICBnYXA6IDE1cHg7XG4gIG92ZXJmbG93OiBoaWRkZW47XG59XG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jc3MvY29tcG9uZW50cy9BcHAuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLG1CQUFtQjtFQUNuQixhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLGlDQUFpQztFQUNqQyxhQUFhO0VBQ2IsU0FBUztFQUNULGdCQUFnQjtBQUNsQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IHVybCguLi92YXJpYWJsZXMuY3NzKTtcXG5cXG4jYXBwQ29udGFpbmVyIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIHdpZHRoOiBtaW4odmFyKC0tbWluV2lkdGgpLCAxMDAlKTtcXG4gIHBhZGRpbmc6IDEwcHg7XFxuICBnYXA6IDE1cHg7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL3ZhcmlhYmxlcy5jc3NcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmkoX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgI2RheUNvbnRhaW5lciB7XG4gIGZsZXg6IDEgMCBhdXRvO1xuICBkaXNwbGF5OiBncmlkO1xuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnI7XG4gIGdyaWQtdGVtcGxhdGUtcm93czogMXJlbSAxZnIgMXJlbTtcbiAgcGFkZGluZzogNXB4OyAvKiBcbiAgYm9yZGVyOiAycHggc29saWQgZ3JleTsgKi9cbiAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgZ2FwOiA1cHg7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuI2RheURheSB7XG4gIGdyaWQtcm93OiAxO1xuICBncmlkLWNvbHVtbjogMS8tMTtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuI2RheUljb24ge1xuICBncmlkLXJvdzogMjtcbiAgZ3JpZC1jb2x1bW46IDEvLTE7XG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAganVzdGlmeS1zZWxmOiBjZW50ZXI7XG4gIHdpZHRoOiAxMDAlO1xufVxuI2RheU1heCB7XG4gIGdyaWQtcm93OiAzO1xuICBncmlkLWNvbHVtbjogMTtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuXG4gIGZvbnQtc2l6ZTogMC44cmVtO1xufVxuI2RheU1pbiB7XG4gIGdyaWQtcm93OiAzO1xuICBncmlkLWNvbHVtbjogMjtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBmb250LXNpemU6IDAuOHJlbTtcbiAgY29sb3I6IHZhcigtLXRleHRNaWQpO1xufVxuI2RheUNvbnRhaW5lci5zZWxlY3RlZCB7XG4gIGJhY2tncm91bmQ6IHZhcigtLWJnTWlkKTtcbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Nzcy9jb21wb25lbnRzL0RheS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUE7RUFDRSxjQUFjO0VBQ2QsYUFBYTtFQUNiLDhCQUE4QjtFQUM5QixpQ0FBaUM7RUFDakMsWUFBWSxFQUFFOzJCQUNXO0VBQ3pCLG1CQUFtQjtFQUNuQixRQUFRO0VBQ1IsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLFdBQVc7RUFDWCxpQkFBaUI7RUFDakIsa0JBQWtCO0FBQ3BCO0FBQ0E7RUFDRSxXQUFXO0VBQ1gsaUJBQWlCO0VBQ2pCLGtCQUFrQjtFQUNsQixvQkFBb0I7RUFDcEIsV0FBVztBQUNiO0FBQ0E7RUFDRSxXQUFXO0VBQ1gsY0FBYztFQUNkLGtCQUFrQjs7RUFFbEIsaUJBQWlCO0FBQ25CO0FBQ0E7RUFDRSxXQUFXO0VBQ1gsY0FBYztFQUNkLGtCQUFrQjtFQUNsQixpQkFBaUI7RUFDakIscUJBQXFCO0FBQ3ZCO0FBQ0E7RUFDRSx3QkFBd0I7QUFDMUJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCB1cmwoXFxcIi4uL3ZhcmlhYmxlcy5jc3NcXFwiKTtcXG5cXG4jZGF5Q29udGFpbmVyIHtcXG4gIGZsZXg6IDEgMCBhdXRvO1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmcjtcXG4gIGdyaWQtdGVtcGxhdGUtcm93czogMXJlbSAxZnIgMXJlbTtcXG4gIHBhZGRpbmc6IDVweDsgLyogXFxuICBib3JkZXI6IDJweCBzb2xpZCBncmV5OyAqL1xcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gIGdhcDogNXB4O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4jZGF5RGF5IHtcXG4gIGdyaWQtcm93OiAxO1xcbiAgZ3JpZC1jb2x1bW46IDEvLTE7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcbiNkYXlJY29uIHtcXG4gIGdyaWQtcm93OiAyO1xcbiAgZ3JpZC1jb2x1bW46IDEvLTE7XFxuICBhbGlnbi1zZWxmOiBjZW50ZXI7XFxuICBqdXN0aWZ5LXNlbGY6IGNlbnRlcjtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4jZGF5TWF4IHtcXG4gIGdyaWQtcm93OiAzO1xcbiAgZ3JpZC1jb2x1bW46IDE7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuXFxuICBmb250LXNpemU6IDAuOHJlbTtcXG59XFxuI2RheU1pbiB7XFxuICBncmlkLXJvdzogMztcXG4gIGdyaWQtY29sdW1uOiAyO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgZm9udC1zaXplOiAwLjhyZW07XFxuICBjb2xvcjogdmFyKC0tdGV4dE1pZCk7XFxufVxcbiNkYXlDb250YWluZXIuc2VsZWN0ZWQge1xcbiAgYmFja2dyb3VuZDogdmFyKC0tYmdNaWQpO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL3ZhcmlhYmxlcy5jc3NcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmkoX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgI2NvbnRhaW5lciB7XG4gIG1hcmdpbjogMTBweCAwO1xuICBkaXNwbGF5OiBmbGV4O1xuICBnYXA6IDEwcHg7XG4gIHNjcm9sbC1tYXJnaW46IDIwcHg7XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiA3MjVweCkge1xuICAvKiAgRklYOiBkb2Vzbid0IHdvcmsgd2l0biB2YXIoKSAqL1xuICAjY29udGFpbmVyIHtcbiAgICBvdmVyZmxvdy14OiBzY3JvbGw7XG4gIH1cbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Nzcy9jb21wb25lbnRzL0RheXNCYXIuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUVBO0VBQ0UsY0FBYztFQUNkLGFBQWE7RUFDYixTQUFTO0VBQ1QsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0Usa0NBQWtDO0VBQ2xDO0lBQ0Usa0JBQWtCO0VBQ3BCO0FBQ0ZcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCB1cmwoXFxcIi4uL3ZhcmlhYmxlcy5jc3NcXFwiKTtcXG5cXG4jY29udGFpbmVyIHtcXG4gIG1hcmdpbjogMTBweCAwO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGdhcDogMTBweDtcXG4gIHNjcm9sbC1tYXJnaW46IDIwcHg7XFxufVxcblxcbkBtZWRpYSAobWF4LXdpZHRoOiA3MjVweCkge1xcbiAgLyogIEZJWDogZG9lc24ndCB3b3JrIHdpdG4gdmFyKCkgKi9cXG4gICNjb250YWluZXIge1xcbiAgICBvdmVyZmxvdy14OiBzY3JvbGw7XFxuICB9XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18gZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vdmFyaWFibGVzLmNzc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18uaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAjZ3JhcGhDb250YWluZXIge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDIwMHB4O1xuICBjb2xvcjogdmFyKC0tdGV4dERhcmspO1xuICBmb250LXNpemU6IDAuOHJlbTtcbn1cbiNncmFwaENvbnRhaW5lciAjYnRuQmFyIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZ2FwOiAxNXB4O1xufVxuI2dyYXBoQ29udGFpbmVyICNidG5CYXIgZGl2IHtcbiAgY3Vyc29yOiBwb2ludGVyO1xufVxuI2dyYXBoQ29udGFpbmVyICNidG5UZW1wLnNlbGVjdGVkIHtcbiAgYm9yZGVyLWJvdHRvbTogM3B4IHNvbGlkICMxYTgzZGQ7XG4gIGNvbG9yOiB2YXIoLS10ZXh0TGlnaHQpO1xufVxuI2dyYXBoQ29udGFpbmVyICNidG5SYWluLnNlbGVjdGVkIHtcbiAgYm9yZGVyLWJvdHRvbTogM3B4IHNvbGlkICNkZDFhNzk7XG4gIGNvbG9yOiB2YXIoLS10ZXh0TGlnaHQpO1xufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzL2NvbXBvbmVudHMvR3JhcGguY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUNBO0VBQ0Usa0JBQWtCO0VBQ2xCLFdBQVc7RUFDWCxhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLGlCQUFpQjtBQUNuQjtBQUNBO0VBQ0UsYUFBYTtFQUNiLFNBQVM7QUFDWDtBQUNBO0VBQ0UsZUFBZTtBQUNqQjtBQUNBO0VBQ0UsZ0NBQWdDO0VBQ2hDLHVCQUF1QjtBQUN6QjtBQUNBO0VBQ0UsZ0NBQWdDO0VBQ2hDLHVCQUF1QjtBQUN6QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IHVybChcXFwiLi4vdmFyaWFibGVzLmNzc1xcXCIpO1xcbiNncmFwaENvbnRhaW5lciB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMjAwcHg7XFxuICBjb2xvcjogdmFyKC0tdGV4dERhcmspO1xcbiAgZm9udC1zaXplOiAwLjhyZW07XFxufVxcbiNncmFwaENvbnRhaW5lciAjYnRuQmFyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBnYXA6IDE1cHg7XFxufVxcbiNncmFwaENvbnRhaW5lciAjYnRuQmFyIGRpdiB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcbiNncmFwaENvbnRhaW5lciAjYnRuVGVtcC5zZWxlY3RlZCB7XFxuICBib3JkZXItYm90dG9tOiAzcHggc29saWQgIzFhODNkZDtcXG4gIGNvbG9yOiB2YXIoLS10ZXh0TGlnaHQpO1xcbn1cXG4jZ3JhcGhDb250YWluZXIgI2J0blJhaW4uc2VsZWN0ZWQge1xcbiAgYm9yZGVyLWJvdHRvbTogM3B4IHNvbGlkICNkZDFhNzk7XFxuICBjb2xvcjogdmFyKC0tdGV4dExpZ2h0KTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi92YXJpYWJsZXMuY3NzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYCNoZWFkZXJDb250YWluZXIge1xuICBkaXNwbGF5OiBncmlkO1xuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDVyZW0gNXJlbSAxZnIgMWZyO1xufVxuI2hlYWRlckljb24ge1xuICBncmlkLWNvbHVtbjogMTtcbiAgZ3JpZC1yb3c6IDE7XG4gIHdpZHRoOiAxMDAlO1xuICBhbGlnbi1zZWxmOiBjZW50ZXI7XG4gIGp1c3RpZnktc2VsZjogY2VudGVyO1xufVxuI2hlYWRlclRlbXBlcmF0dXJlIHtcbiAgZ3JpZC1jb2x1bW46IDI7XG4gIGdyaWQtcm93OiAxO1xuICBmb250LXNpemU6IDNyZW07XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xufVxuI2hlYWRlckh1bWlkaXR5IHtcbiAgZ3JpZC1jb2x1bW46IDEvMztcbiAgZ3JpZC1yb3c6IDM7XG4gIGZvbnQtc2l6ZTogMC44cmVtO1xuICBjb2xvcjogdmFyKC0tdGV4dE1pZCk7XG59XG4jaGVhZGVyV2luZCB7XG4gIGdyaWQtY29sdW1uOiAxLzM7XG4gIGdyaWQtcm93OiA1O1xuICBmb250LXNpemU6IDAuOHJlbTtcbiAgY29sb3I6IHZhcigtLXRleHRNaWQpO1xufVxuXG4jaGVhZGVyQ2hhbmNlUmFpbiB7XG4gIGdyaWQtY29sdW1uOiAxLzM7XG4gIGdyaWQtcm93OiA0O1xuICBjb2xvcjogdmFyKC0tdGV4dE1pZCk7XG4gIGZvbnQtc2l6ZTogMC44cmVtO1xufVxuXG4jaGVhZGVyRGF5IHtcbiAgZ3JpZC1jb2x1bW46IDMvNjtcbiAgZ3JpZC1yb3c6IDQ7XG4gIHRleHQtYWxpZ246IGVuZDtcbiAgY29sb3I6IHZhcigtLXRleHRNaWQpO1xuICBmb250LXNpemU6IDAuOHJlbTtcbn1cblxuI2hlYWRlckNvbmRpdGlvbiB7XG4gIGdyaWQtY29sdW1uOiAzLzY7XG4gIGdyaWQtcm93OiA1O1xuICB0ZXh0LWFsaWduOiBlbmQ7XG4gIGNvbG9yOiB2YXIoLS10ZXh0TWlkKTtcbiAgZm9udC1zaXplOiAwLjhyZW07XG59XG5cbiNzZWFyY2hDb250YWluZXIge1xuICBncmlkLWNvbHVtbjogNS82O1xuICBncmlkLXJvdzogMTtcbn1cblxuI2hlYWRlckxvY2F0aW9uIHtcbiAgZ3JpZC1jb2x1bW46IDMvNjtcbiAgZ3JpZC1yb3c6IDM7XG4gIHRleHQtYWxpZ246IGVuZDtcbiAgY29sb3I6IHZhcigtLXRleHRNaWQpO1xuICBmb250LXNpemU6IDAuOHJlbTtcbn1cblxuI3VuaXRTZWxlY3RvckNvbnRhaW5lciB7XG4gIGdyaWQtcm93OiAxO1xuICBncmlkLWNvbHVtbjogMy81O1xufVxuXG5AbWVkaWEgKG1heC13aWR0aDogNDc1cHgpIHtcbiAgI3NlYXJjaENvbnRhaW5lciB7XG4gICAgZ3JpZC1yb3c6IDI7XG4gICAgZ3JpZC1jb2x1bW46IDEvNjtcbiAgICBtYXJnaW46IDEwcHggMDtcbiAgfVxufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzL2NvbXBvbmVudHMvSGVhZGVyLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFFQTtFQUNFLGFBQWE7RUFDYix3Q0FBd0M7QUFDMUM7QUFDQTtFQUNFLGNBQWM7RUFDZCxXQUFXO0VBQ1gsV0FBVztFQUNYLGtCQUFrQjtFQUNsQixvQkFBb0I7QUFDdEI7QUFDQTtFQUNFLGNBQWM7RUFDZCxXQUFXO0VBQ1gsZUFBZTtFQUNmLGFBQWE7RUFDYixtQkFBbUI7RUFDbkIsdUJBQXVCO0FBQ3pCO0FBQ0E7RUFDRSxnQkFBZ0I7RUFDaEIsV0FBVztFQUNYLGlCQUFpQjtFQUNqQixxQkFBcUI7QUFDdkI7QUFDQTtFQUNFLGdCQUFnQjtFQUNoQixXQUFXO0VBQ1gsaUJBQWlCO0VBQ2pCLHFCQUFxQjtBQUN2Qjs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixXQUFXO0VBQ1gscUJBQXFCO0VBQ3JCLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixXQUFXO0VBQ1gsZUFBZTtFQUNmLHFCQUFxQjtFQUNyQixpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsV0FBVztFQUNYLGVBQWU7RUFDZixxQkFBcUI7RUFDckIsaUJBQWlCO0FBQ25COztBQUVBO0VBQ0UsZ0JBQWdCO0VBQ2hCLFdBQVc7QUFDYjs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixXQUFXO0VBQ1gsZUFBZTtFQUNmLHFCQUFxQjtFQUNyQixpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0U7SUFDRSxXQUFXO0lBQ1gsZ0JBQWdCO0lBQ2hCLGNBQWM7RUFDaEI7QUFDRlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IHVybChcXFwiLi4vdmFyaWFibGVzLmNzc1xcXCIpO1xcblxcbiNoZWFkZXJDb250YWluZXIge1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogNXJlbSA1cmVtIDFmciAxZnI7XFxufVxcbiNoZWFkZXJJY29uIHtcXG4gIGdyaWQtY29sdW1uOiAxO1xcbiAgZ3JpZC1yb3c6IDE7XFxuICB3aWR0aDogMTAwJTtcXG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcXG4gIGp1c3RpZnktc2VsZjogY2VudGVyO1xcbn1cXG4jaGVhZGVyVGVtcGVyYXR1cmUge1xcbiAgZ3JpZC1jb2x1bW46IDI7XFxuICBncmlkLXJvdzogMTtcXG4gIGZvbnQtc2l6ZTogM3JlbTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxufVxcbiNoZWFkZXJIdW1pZGl0eSB7XFxuICBncmlkLWNvbHVtbjogMS8zO1xcbiAgZ3JpZC1yb3c6IDM7XFxuICBmb250LXNpemU6IDAuOHJlbTtcXG4gIGNvbG9yOiB2YXIoLS10ZXh0TWlkKTtcXG59XFxuI2hlYWRlcldpbmQge1xcbiAgZ3JpZC1jb2x1bW46IDEvMztcXG4gIGdyaWQtcm93OiA1O1xcbiAgZm9udC1zaXplOiAwLjhyZW07XFxuICBjb2xvcjogdmFyKC0tdGV4dE1pZCk7XFxufVxcblxcbiNoZWFkZXJDaGFuY2VSYWluIHtcXG4gIGdyaWQtY29sdW1uOiAxLzM7XFxuICBncmlkLXJvdzogNDtcXG4gIGNvbG9yOiB2YXIoLS10ZXh0TWlkKTtcXG4gIGZvbnQtc2l6ZTogMC44cmVtO1xcbn1cXG5cXG4jaGVhZGVyRGF5IHtcXG4gIGdyaWQtY29sdW1uOiAzLzY7XFxuICBncmlkLXJvdzogNDtcXG4gIHRleHQtYWxpZ246IGVuZDtcXG4gIGNvbG9yOiB2YXIoLS10ZXh0TWlkKTtcXG4gIGZvbnQtc2l6ZTogMC44cmVtO1xcbn1cXG5cXG4jaGVhZGVyQ29uZGl0aW9uIHtcXG4gIGdyaWQtY29sdW1uOiAzLzY7XFxuICBncmlkLXJvdzogNTtcXG4gIHRleHQtYWxpZ246IGVuZDtcXG4gIGNvbG9yOiB2YXIoLS10ZXh0TWlkKTtcXG4gIGZvbnQtc2l6ZTogMC44cmVtO1xcbn1cXG5cXG4jc2VhcmNoQ29udGFpbmVyIHtcXG4gIGdyaWQtY29sdW1uOiA1LzY7XFxuICBncmlkLXJvdzogMTtcXG59XFxuXFxuI2hlYWRlckxvY2F0aW9uIHtcXG4gIGdyaWQtY29sdW1uOiAzLzY7XFxuICBncmlkLXJvdzogMztcXG4gIHRleHQtYWxpZ246IGVuZDtcXG4gIGNvbG9yOiB2YXIoLS10ZXh0TWlkKTtcXG4gIGZvbnQtc2l6ZTogMC44cmVtO1xcbn1cXG5cXG4jdW5pdFNlbGVjdG9yQ29udGFpbmVyIHtcXG4gIGdyaWQtcm93OiAxO1xcbiAgZ3JpZC1jb2x1bW46IDMvNTtcXG59XFxuXFxuQG1lZGlhIChtYXgtd2lkdGg6IDQ3NXB4KSB7XFxuICAjc2VhcmNoQ29udGFpbmVyIHtcXG4gICAgZ3JpZC1yb3c6IDI7XFxuICAgIGdyaWQtY29sdW1uOiAxLzY7XFxuICAgIG1hcmdpbjogMTBweCAwO1xcbiAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL3ZhcmlhYmxlcy5jc3NcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmkoX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgI2xvYWRpbmdDb250YWluZXIge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgYmFja2dyb3VuZDogdmFyKC0tYmdEYXJrKTtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG59XG5pbWcubG9hZGluZ1doZWVsIHtcbiAgYW5pbWF0aW9uOiByb3RhdGUgMXMgaW5maW5pdGUgbGluZWFyO1xuICBoZWlnaHQ6IDEwcmVtO1xuICB3aWR0aDogYXV0bztcbiAgZmlsdGVyOiBpbnZlcnQoMSkgYnJpZ2h0bmVzcygwLjgpO1xufVxuQGtleWZyYW1lcyByb3RhdGUge1xuICBmcm9tIHtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcbiAgfVxuICB0byB7XG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcbiAgfVxufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzL2NvbXBvbmVudHMvTG9hZGluZy5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUE7RUFDRSxrQkFBa0I7RUFDbEIsTUFBTTtFQUNOLE9BQU87RUFDUCxXQUFXO0VBQ1gsWUFBWTtFQUNaLHlCQUF5QjtFQUN6QixhQUFhO0VBQ2IsdUJBQXVCO0VBQ3ZCLG1CQUFtQjtBQUNyQjtBQUNBO0VBQ0Usb0NBQW9DO0VBQ3BDLGFBQWE7RUFDYixXQUFXO0VBQ1gsaUNBQWlDO0FBQ25DO0FBQ0E7RUFDRTtJQUNFLHVCQUF1QjtFQUN6QjtFQUNBO0lBQ0UseUJBQXlCO0VBQzNCO0FBQ0ZcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCB1cmwoXFxcIi4uL3ZhcmlhYmxlcy5jc3NcXFwiKTtcXG5cXG4jbG9hZGluZ0NvbnRhaW5lciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiAwO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBiYWNrZ3JvdW5kOiB2YXIoLS1iZ0RhcmspO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuaW1nLmxvYWRpbmdXaGVlbCB7XFxuICBhbmltYXRpb246IHJvdGF0ZSAxcyBpbmZpbml0ZSBsaW5lYXI7XFxuICBoZWlnaHQ6IDEwcmVtO1xcbiAgd2lkdGg6IGF1dG87XFxuICBmaWx0ZXI6IGludmVydCgxKSBicmlnaHRuZXNzKDAuOCk7XFxufVxcbkBrZXlmcmFtZXMgcm90YXRlIHtcXG4gIGZyb20ge1xcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcXG4gIH1cXG4gIHRvIHtcXG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcXG4gIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi92YXJpYWJsZXMuY3NzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYCNzZWFyY2hDb250YWluZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xufVxuaW5wdXQge1xuICBmbGV4OiAxIDEgMTAwJTtcbiAgLyogbWF4LXdpZHRoOiBjYWxjKHZhcigtLW1pbldpZHRoKSAvIDIpOyAqL1xuICBwYWRkaW5nOiAxMHB4O1xuICBib3JkZXItcmFkaXVzOiA1MHB4O1xuICBib3JkZXI6IDJweCBzb2xpZCB2YXIoLS10ZXh0RGFyayk7XG4gIGJhY2tncm91bmQ6IHZhcigtLWJnTWlkKTtcbiAgY29sb3I6IHZhcigtLXRleHRMaWdodCk7XG4gIGhlaWdodDogMXJlbTtcbiAgYWxpZ24tc2VsZjogY2VudGVyO1xufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzL2NvbXBvbmVudHMvU2VhcmNoQmFyLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFDQTtFQUNFLGFBQWE7RUFDYix5QkFBeUI7QUFDM0I7QUFDQTtFQUNFLGNBQWM7RUFDZCwwQ0FBMEM7RUFDMUMsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQixpQ0FBaUM7RUFDakMsd0JBQXdCO0VBQ3hCLHVCQUF1QjtFQUN2QixZQUFZO0VBQ1osa0JBQWtCO0FBQ3BCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgdXJsKFxcXCIuLi92YXJpYWJsZXMuY3NzXFxcIik7XFxuI3NlYXJjaENvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcXG59XFxuaW5wdXQge1xcbiAgZmxleDogMSAxIDEwMCU7XFxuICAvKiBtYXgtd2lkdGg6IGNhbGModmFyKC0tbWluV2lkdGgpIC8gMik7ICovXFxuICBwYWRkaW5nOiAxMHB4O1xcbiAgYm9yZGVyLXJhZGl1czogNTBweDtcXG4gIGJvcmRlcjogMnB4IHNvbGlkIHZhcigtLXRleHREYXJrKTtcXG4gIGJhY2tncm91bmQ6IHZhcigtLWJnTWlkKTtcXG4gIGNvbG9yOiB2YXIoLS10ZXh0TGlnaHQpO1xcbiAgaGVpZ2h0OiAxcmVtO1xcbiAgYWxpZ24tc2VsZjogY2VudGVyO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYCN0aXRsZUNvbnRhaW5lciB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIGdyZXk7XG4gIGdhcDogMTVweDtcbiAgZm9udC1zaXplOiAycmVtO1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgcGFkZGluZy1ib3R0b206IDVweDtcbn1cbiN0aXRsZUNvbnRhaW5lciBpbWcge1xuICBoZWlnaHQ6IDIuNXJlbTtcbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Nzcy9jb21wb25lbnRzL1RpdGxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGFBQWE7RUFDYiw4QkFBOEI7RUFDOUIsbUJBQW1CO0VBQ25CLDZCQUE2QjtFQUM3QixTQUFTO0VBQ1QsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixtQkFBbUI7QUFDckI7QUFDQTtFQUNFLGNBQWM7QUFDaEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiI3RpdGxlQ29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIGdyZXk7XFxuICBnYXA6IDE1cHg7XFxuICBmb250LXNpemU6IDJyZW07XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIHBhZGRpbmctYm90dG9tOiA1cHg7XFxufVxcbiN0aXRsZUNvbnRhaW5lciBpbWcge1xcbiAgaGVpZ2h0OiAyLjVyZW07XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18gZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vdmFyaWFibGVzLmNzc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18uaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAjdW5pdFNlbGVjdG9yQ29udGFpbmVyIHtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IHN0YXJ0O1xufVxuXG4jdW5pdFNlbGVjdG9yQ29udGFpbmVyIGRpdiB7XG4gIHBhZGRpbmctbGVmdDogNXB4O1xuICBtYXJnaW4tdG9wOiAxLjE1cmVtO1xuICBjb2xvcjogdmFyKC0tdGV4dERhcmspO1xuICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbiN1bml0U2VsZWN0b3JDb250YWluZXIgZGl2Omxhc3QtY2hpbGQ6OmJlZm9yZSB7XG4gIGNvbnRlbnQ6IFwifFwiO1xuICBjb2xvcjogdmFyKC0tdGV4dERhcmspO1xufVxuXG4jdW5pdFNlbGVjdG9yQ29udGFpbmVyIC5zZWxlY3RlZCB7XG4gIGNvbG9yOiB2YXIoLS10ZXh0TGlnaHQpO1xufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzL2NvbXBvbmVudHMvVW5pdFNlbGVjdG9yLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFFQTtFQUNFLGFBQWE7RUFDYixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxpQkFBaUI7RUFDakIsbUJBQW1CO0VBQ25CLHNCQUFzQjtFQUN0QixlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsWUFBWTtFQUNaLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLHVCQUF1QjtBQUN6QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IHVybChcXFwiLi4vdmFyaWFibGVzLmNzc1xcXCIpO1xcblxcbiN1bml0U2VsZWN0b3JDb250YWluZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBzdGFydDtcXG59XFxuXFxuI3VuaXRTZWxlY3RvckNvbnRhaW5lciBkaXYge1xcbiAgcGFkZGluZy1sZWZ0OiA1cHg7XFxuICBtYXJnaW4tdG9wOiAxLjE1cmVtO1xcbiAgY29sb3I6IHZhcigtLXRleHREYXJrKTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuI3VuaXRTZWxlY3RvckNvbnRhaW5lciBkaXY6bGFzdC1jaGlsZDo6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJ8XFxcIjtcXG4gIGNvbG9yOiB2YXIoLS10ZXh0RGFyayk7XFxufVxcblxcbiN1bml0U2VsZWN0b3JDb250YWluZXIgLnNlbGVjdGVkIHtcXG4gIGNvbG9yOiB2YXIoLS10ZXh0TGlnaHQpO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiQGltcG9ydCB1cmwoaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1PcGVuK1NhbnM6aXRhbCx3Z2h0QDAsMzAwOzAsNDAwOzAsNTAwOzAsNjAwOzEsMzAwOzEsNDAwOzEsNTAwOzEsNjAwJmRpc3BsYXk9c3dhcCk7XCJdKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgOnJvb3Qge1xuICBmb250LWZhbWlseTogXCJPcGVuIFNhbnNcIiwgc2Fucy1zZXJpZjtcbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Nzcy9mb250LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFFQTtFQUNFLG9DQUFvQztBQUN0Q1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IHVybChcXFwiaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1PcGVuK1NhbnM6aXRhbCx3Z2h0QDAsMzAwOzAsNDAwOzAsNTAwOzAsNjAwOzEsMzAwOzEsNDAwOzEsNTAwOzEsNjAwJmRpc3BsYXk9c3dhcFxcXCIpO1xcblxcbjpyb290IHtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiT3BlbiBTYW5zXFxcIiwgc2Fucy1zZXJpZjtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3ZhcmlhYmxlcy5jc3NcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmkoX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgOnJvb3Qge1xuICBzY3JvbGxiYXItY29sb3I6ICNhY2FjYWMgdHJhbnNwYXJlbnQ7XG59XG46Oi13ZWJraXQtc2Nyb2xsYmFyIHtcbiAgaGVpZ2h0OiAxN3B4O1xuICB3aWR0aDogMTdweDtcbiAgYmFja2dyb3VuZDogdmFyKC0tYmdEYXJrKTtcbn1cblxuOjotd2Via2l0LXNjcm9sbGJhci10aHVtYiB7XG4gIGJhY2tncm91bmQ6IHZhcigtLXRleHREYXJrKTtcbiAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiAxZXg7XG4gIGJvcmRlcjogc29saWQgNXB4IHZhcigtLWJnRGFyayk7XG59XG5cbjo6LXdlYmtpdC1zY3JvbGxiYXItY29ybmVyIHtcbiAgYmFja2dyb3VuZDogdmFyKC0tYmdEYXJrKTtcbn1cblxuOjotd2Via2l0LXNjcm9sbGJhci10cmFjayB7XG4gIGJveC1zaGFkb3c6IGluc2V0IDAgMCAxMHB4IDEwcHggdmFyKC0tYmdEYXJrKTtcbiAgYm9yZGVyOiBzb2xpZCA1cHggdmFyKC0tYmdEYXJrKTtcbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Nzcy9zY3JvbGxiYXIuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUVBO0VBQ0Usb0NBQW9DO0FBQ3RDO0FBQ0E7RUFDRSxZQUFZO0VBQ1osV0FBVztFQUNYLHlCQUF5QjtBQUMzQjs7QUFFQTtFQUNFLDJCQUEyQjtFQUMzQiwwQkFBMEI7RUFDMUIsK0JBQStCO0FBQ2pDOztBQUVBO0VBQ0UseUJBQXlCO0FBQzNCOztBQUVBO0VBQ0UsNkNBQTZDO0VBQzdDLCtCQUErQjtBQUNqQ1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IHVybChcXFwiLi92YXJpYWJsZXMuY3NzXFxcIik7XFxuXFxuOnJvb3Qge1xcbiAgc2Nyb2xsYmFyLWNvbG9yOiAjYWNhY2FjIHRyYW5zcGFyZW50O1xcbn1cXG46Oi13ZWJraXQtc2Nyb2xsYmFyIHtcXG4gIGhlaWdodDogMTdweDtcXG4gIHdpZHRoOiAxN3B4O1xcbiAgYmFja2dyb3VuZDogdmFyKC0tYmdEYXJrKTtcXG59XFxuXFxuOjotd2Via2l0LXNjcm9sbGJhci10aHVtYiB7XFxuICBiYWNrZ3JvdW5kOiB2YXIoLS10ZXh0RGFyayk7XFxuICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDFleDtcXG4gIGJvcmRlcjogc29saWQgNXB4IHZhcigtLWJnRGFyayk7XFxufVxcblxcbjo6LXdlYmtpdC1zY3JvbGxiYXItY29ybmVyIHtcXG4gIGJhY2tncm91bmQ6IHZhcigtLWJnRGFyayk7XFxufVxcblxcbjo6LXdlYmtpdC1zY3JvbGxiYXItdHJhY2sge1xcbiAgYm94LXNoYWRvdzogaW5zZXQgMCAwIDEwcHggMTBweCB2YXIoLS1iZ0RhcmspO1xcbiAgYm9yZGVyOiBzb2xpZCA1cHggdmFyKC0tYmdEYXJrKTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3ZhcmlhYmxlcy5jc3NcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzFfX18gZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zY3JvbGxiYXIuY3NzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMV9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYCoge1xuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lOyAvKiBTYWZhcmkgKi9cbiAgLW1zLXVzZXItc2VsZWN0OiBub25lOyAvKiBJRSAxMCBhbmQgSUUgMTEgKi9cbiAgdXNlci1zZWxlY3Q6IG5vbmU7IC8qIFN0YW5kYXJkIHN5bnRheCAqL1xufVxuYm9keSB7XG4gIGJhY2tncm91bmQ6IHZhcigtLWJnRGFyayk7XG4gIGNvbG9yOiB2YXIoLS10ZXh0TGlnaHQpO1xuICAvKiBtaW4taGVpZ2h0OiAxMDB2aDsgKi9cbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG59XG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jc3Mvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUdBO0VBQ0UseUJBQXlCLEVBQUUsV0FBVztFQUN0QyxxQkFBcUIsRUFBRSxvQkFBb0I7RUFDM0MsaUJBQWlCLEVBQUUsb0JBQW9CO0FBQ3pDO0FBQ0E7RUFDRSx5QkFBeUI7RUFDekIsdUJBQXVCO0VBQ3ZCLHVCQUF1QjtFQUN2QixhQUFhO0VBQ2IsdUJBQXVCO0VBQ3ZCLG1CQUFtQjtBQUNyQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IHVybChcXFwiLi92YXJpYWJsZXMuY3NzXFxcIik7XFxuQGltcG9ydCB1cmwoXFxcIi4vc2Nyb2xsYmFyLmNzc1xcXCIpO1xcblxcbioge1xcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTsgLyogU2FmYXJpICovXFxuICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7IC8qIElFIDEwIGFuZCBJRSAxMSAqL1xcbiAgdXNlci1zZWxlY3Q6IG5vbmU7IC8qIFN0YW5kYXJkIHN5bnRheCAqL1xcbn1cXG5ib2R5IHtcXG4gIGJhY2tncm91bmQ6IHZhcigtLWJnRGFyayk7XFxuICBjb2xvcjogdmFyKC0tdGV4dExpZ2h0KTtcXG4gIC8qIG1pbi1oZWlnaHQ6IDEwMHZoOyAqL1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGA6cm9vdCB7XG4gIC0tYmdEYXJrOiAjMjAyMTI0O1xuICAtLWJnTWlkOiAjMmIyZTM2O1xuXG4gIC0tdGV4dERhcms6ICM3MDcxN2E7XG4gIC0tdGV4dE1pZDogIzdmODA4OTtcbiAgLS10ZXh0TGlnaHQ6ICNlOGVhZWQ7XG5cbiAgLS1taW5XaWR0aDogNzAwcHg7XG59XG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jc3MvdmFyaWFibGVzLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGlCQUFpQjtFQUNqQixnQkFBZ0I7O0VBRWhCLG1CQUFtQjtFQUNuQixrQkFBa0I7RUFDbEIsb0JBQW9COztFQUVwQixpQkFBaUI7QUFDbkJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiOnJvb3Qge1xcbiAgLS1iZ0Rhcms6ICMyMDIxMjQ7XFxuICAtLWJnTWlkOiAjMmIyZTM2O1xcblxcbiAgLS10ZXh0RGFyazogIzcwNzE3YTtcXG4gIC0tdGV4dE1pZDogIzdmODA4OTtcXG4gIC0tdGV4dExpZ2h0OiAjZThlYWVkO1xcblxcbiAgLS1taW5XaWR0aDogNzAwcHg7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cbiAgY3NzICs9IG9iai5jc3M7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH1cblxuICAvLyBGb3Igb2xkIElFXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7fSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmM7XG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkge1xuXHRcdFx0dmFyIGkgPSBzY3JpcHRzLmxlbmd0aCAtIDE7XG5cdFx0XHR3aGlsZSAoaSA+IC0xICYmICFzY3JpcHRVcmwpIHNjcmlwdFVybCA9IHNjcmlwdHNbaS0tXS5zcmM7XG5cdFx0fVxuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9mb250LmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZm9udC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCIvKiBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9sZWFybmNvZGVhY2FkZW15Lzc3NzM0OTc0N2Q4MzgyYmZiNzIyICovXG5jb25zdCBQdWJzdWIgPSB7XG4gIFB1YnN1Yjoge30sXG4gIG9uKGV2ZW50TmFtZSwgZm4pIHtcbiAgICB0aGlzLlB1YnN1YltldmVudE5hbWVdID0gdGhpcy5QdWJzdWJbZXZlbnROYW1lXSB8fCBbXTtcbiAgICB0aGlzLlB1YnN1YltldmVudE5hbWVdLnB1c2goZm4pO1xuICB9LFxuICBvZmYoZXZlbnROYW1lLCBmbikge1xuICAgIGlmICh0aGlzLlB1YnN1YltldmVudE5hbWVdKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuUHVic3ViW2V2ZW50TmFtZV0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHRoaXMuUHVic3ViW2V2ZW50TmFtZV1baV0gPT09IGZuKSB7XG4gICAgICAgICAgdGhpcy5QdWJzdWJbZXZlbnROYW1lXS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGVtaXQoZXZlbnROYW1lLCBkYXRhKSB7XG4gICAgaWYgKHRoaXMuUHVic3ViW2V2ZW50TmFtZV0pIHtcbiAgICAgIHRoaXMuUHVic3ViW2V2ZW50TmFtZV0uZm9yRWFjaCgoZm4pID0+IHtcbiAgICAgICAgZm4oZGF0YSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBQdWJzdWI7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU2VhcmNoQmFyLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU2VhcmNoQmFyLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBcIi4uLy4uL2Nzcy9jb21wb25lbnRzL1NlYXJjaEJhci5jc3NcIjtcbmltcG9ydCBQdWJzdWIgZnJvbSBcIi4uL1B1YnN1YlwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWFyY2hCYXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGhpcy5jb250YWluZXIuaWQgPSBcInNlYXJjaENvbnRhaW5lclwiO1xuXG4gICAgdGhpcy5zZWFyY2hCYXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgdGhpcy5zZWFyY2hCYXIudHlwZSA9IFwidGV4dFwiO1xuICAgIHRoaXMuc2VhcmNoQmFyLnBsYWNlaG9sZGVyID0gXCJTZWFyY2ggbG9jYXRpb25cIjtcblxuICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZCh0aGlzLnNlYXJjaEJhcik7XG5cbiAgICB0aGlzLmJpbmRFdmVudHMoKTtcbiAgfVxuXG4gIGJpbmRFdmVudHMoKSB7XG4gICAgdGhpcy5zZWFyY2hCYXIuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCAoKSA9PiB7XG4gICAgICBQdWJzdWIuZW1pdChcImFwaUNhbGxcIiwgdGhpcy5zZWFyY2hCYXIudmFsdWUpO1xuICAgICAgUHVic3ViLmVtaXQoXCJzZWxlY3RlZERheVwiLCAwKTtcbiAgICB9KTtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FjaGUge1xuICBzdGF0aWMgY2FjaGVkRGF0YTtcblxuICBzdGF0aWMgdGVtcFVuaXRzID0gXCJjXCI7IC8vIG9yICdmJ1xuXG4gIHN0YXRpYyB3aW5kVW5pdHMgPSBcImtwaFwiOyAvLyBvciBtcGhcblxuICBzdGF0aWMgc2VsZWN0ZWREYXkgPSAwO1xufVxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1VuaXRTZWxlY3Rvci5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1VuaXRTZWxlY3Rvci5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgQ2FjaGUgZnJvbSBcIi4vQ2FjaGVcIjtcbmltcG9ydCBcIi4uLy4uL2Nzcy9jb21wb25lbnRzL1VuaXRTZWxlY3Rvci5jc3NcIjtcbmltcG9ydCBQdWJzdWIgZnJvbSBcIi4uL1B1YnN1YlwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVbml0U2VsZWN0b3Ige1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGhpcy5jb250YWluZXIuaWQgPSBcInVuaXRTZWxlY3RvckNvbnRhaW5lclwiO1xuXG4gICAgdGhpcy5kaXZDID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0aGlzLmRpdkMuaW5uZXJUZXh0ID0gXCLCsENcIjtcblxuICAgIHRoaXMuZGl2RiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGhpcy5kaXZGLmlubmVyVGV4dCA9IFwiwrBGXCI7XG5cbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmQodGhpcy5kaXZDLCB0aGlzLmRpdkYpO1xuXG4gICAgaWYgKENhY2hlLnRlbXBVbml0cyA9PT0gXCJjXCIpIHtcbiAgICAgIHRoaXMuZGl2Qy5jbGFzc0xpc3QudG9nZ2xlKFwic2VsZWN0ZWRcIik7XG4gICAgfSBlbHNlIHRoaXMuZGl2Ri5jbGFzc0xpc3QudG9nZ2xlKFwic2VsZWN0ZWRcIik7XG5cbiAgICB0aGlzLmJpbmRFdmVudHMoKTtcbiAgfVxuXG4gIGJpbmRFdmVudHMoKSB7XG4gICAgdGhpcy5kaXZDLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICB0aGlzLmRpdkYuY2xhc3NMaXN0LnJlbW92ZShcInNlbGVjdGVkXCIpO1xuICAgICAgdGhpcy5kaXZDLmNsYXNzTGlzdC5hZGQoXCJzZWxlY3RlZFwiKTtcbiAgICAgIENhY2hlLnRlbXBVbml0cyA9IFwiY1wiO1xuICAgICAgQ2FjaGUud2luZFVuaXRzID0gXCJrcGhcIjtcbiAgICAgIFB1YnN1Yi5lbWl0KFwicmVuZGVySGVhZGVyXCIsIENhY2hlLnNlbGVjdGVkRGF5KTtcbiAgICAgIFB1YnN1Yi5lbWl0KFwicmVuZGVyRGF5c0JhclwiKTtcbiAgICAgIFB1YnN1Yi5lbWl0KFwicmVuZGVyR3JhcGhcIiwgQ2FjaGUuc2VsZWN0ZWREYXkpO1xuICAgIH0pO1xuICAgIHRoaXMuZGl2Ri5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5kaXZDLmNsYXNzTGlzdC5yZW1vdmUoXCJzZWxlY3RlZFwiKTtcbiAgICAgIHRoaXMuZGl2Ri5jbGFzc0xpc3QuYWRkKFwic2VsZWN0ZWRcIik7XG4gICAgICBDYWNoZS50ZW1wVW5pdHMgPSBcImZcIjtcbiAgICAgIENhY2hlLndpbmRVbml0cyA9IFwibXBoXCI7XG4gICAgICBQdWJzdWIuZW1pdChcInJlbmRlckhlYWRlclwiLCBDYWNoZS5zZWxlY3RlZERheSk7XG4gICAgICBQdWJzdWIuZW1pdChcInJlbmRlckRheXNCYXJcIik7XG4gICAgICBQdWJzdWIuZW1pdChcInJlbmRlckdyYXBoXCIsIENhY2hlLnNlbGVjdGVkRGF5KTtcbiAgICB9KTtcbiAgfVxufVxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0hlYWRlci5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0hlYWRlci5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgUHVic3ViIGZyb20gXCIuLi9QdWJzdWJcIjtcbmltcG9ydCBTZWFyY2hCYXIgZnJvbSBcIi4vU2VhcmNoQmFyXCI7XG5pbXBvcnQgVW5pdFNlbGVjdG9yIGZyb20gXCIuL1VuaXRTZWxlY3RvclwiO1xuaW1wb3J0IENhY2hlIGZyb20gXCIuL0NhY2hlXCI7XG5pbXBvcnQgXCIuLi8uLi9jc3MvY29tcG9uZW50cy9IZWFkZXIuY3NzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhlYWRlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIC8vIERPTVxuICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0aGlzLmNvbnRhaW5lci5pZCA9IFwiaGVhZGVyQ29udGFpbmVyXCI7XG5cbiAgICB0aGlzLmltZ0ljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xuICAgIHRoaXMuaW1nSWNvbi5pZCA9IFwiaGVhZGVySWNvblwiO1xuXG4gICAgdGhpcy5kaXZUZW1wZXJhdHVyZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGhpcy5kaXZUZW1wZXJhdHVyZS5pZCA9IFwiaGVhZGVyVGVtcGVyYXR1cmVcIjtcblxuICAgIHRoaXMuZGl2SHVtaWRpdHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRoaXMuZGl2SHVtaWRpdHkuaWQgPSBcImhlYWRlckh1bWlkaXR5XCI7XG5cbiAgICB0aGlzLmRpdldpbmRTcGVlZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGhpcy5kaXZXaW5kU3BlZWQuaWQgPSBcImhlYWRlcldpbmRcIjtcblxuICAgIHRoaXMuZGl2Q2hhbmNlUmFpbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGhpcy5kaXZDaGFuY2VSYWluLmlkID0gXCJoZWFkZXJDaGFuY2VSYWluXCI7XG5cbiAgICB0aGlzLmRpdkRheSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGhpcy5kaXZEYXkuaWQgPSBcImhlYWRlckRheVwiO1xuXG4gICAgdGhpcy5kaXZDb25kaXRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRoaXMuZGl2Q29uZGl0aW9uLmlkID0gXCJoZWFkZXJDb25kaXRpb25cIjtcblxuICAgIHRoaXMuZGl2TG9jYXRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRoaXMuZGl2TG9jYXRpb24uaWQgPSBcImhlYWRlckxvY2F0aW9uXCI7XG5cbiAgICB0aGlzLnNlYXJjaEJhciA9IG5ldyBTZWFyY2hCYXIoKTtcblxuICAgIHRoaXMudW5pdFNlbGVjdG9yID0gbmV3IFVuaXRTZWxlY3RvcigpO1xuXG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kKFxuICAgICAgdGhpcy5pbWdJY29uLFxuICAgICAgdGhpcy5kaXZUZW1wZXJhdHVyZSxcbiAgICAgIHRoaXMuZGl2SHVtaWRpdHksXG4gICAgICB0aGlzLmRpdldpbmRTcGVlZCxcbiAgICAgIHRoaXMuZGl2Q2hhbmNlUmFpbixcbiAgICAgIHRoaXMuZGl2RGF5LFxuICAgICAgdGhpcy5kaXZDb25kaXRpb24sXG4gICAgICB0aGlzLnNlYXJjaEJhci5jb250YWluZXIsXG4gICAgICB0aGlzLmRpdkxvY2F0aW9uLFxuICAgICAgdGhpcy51bml0U2VsZWN0b3IuY29udGFpbmVyLFxuICAgICk7XG4gICAgdGhpcy5iaW5kRXZlbnRzKCk7XG4gIH1cblxuICBiaW5kRXZlbnRzKCkge1xuICAgIFB1YnN1Yi5vbihcInJlbmRlckhlYWRlclwiLCAoaW5kZXgpID0+IHtcbiAgICAgIC8vIFRoaXMgZGF0YSBpcyBhY2Nlc3NlZCB0aGUgc2FtZSB3YXkgaXJyZXNwZWN0aXZlIG9mIGluZGV4XG4gICAgICBjb25zdCB7IGljb24gfSA9XG4gICAgICAgIENhY2hlLmNhY2hlZERhdGEuZm9yZWNhc3QuZm9yZWNhc3RkYXlbaW5kZXhdLmRheS5jb25kaXRpb247XG4gICAgICBjb25zdCBjaGFuY2VPZlJhaW4gPVxuICAgICAgICBDYWNoZS5jYWNoZWREYXRhLmZvcmVjYXN0LmZvcmVjYXN0ZGF5W2luZGV4XS5kYXkuZGFpbHlfY2hhbmNlX29mX3JhaW47XG4gICAgICBjb25zdCBjb25kaXRpb24gPVxuICAgICAgICBDYWNoZS5jYWNoZWREYXRhLmZvcmVjYXN0LmZvcmVjYXN0ZGF5W2luZGV4XS5kYXkuY29uZGl0aW9uLnRleHQ7XG4gICAgICBjb25zdCBkYXkgPSBuZXcgRGF0ZShcbiAgICAgICAgQ2FjaGUuY2FjaGVkRGF0YS5mb3JlY2FzdC5mb3JlY2FzdGRheVtpbmRleF0uZGF0ZSxcbiAgICAgICkudG9Mb2NhbGVEYXRlU3RyaW5nKFwiZW4tVVNcIiwge1xuICAgICAgICB3ZWVrZGF5OiBcImxvbmdcIixcbiAgICAgICAgZGF5OiBcIm51bWVyaWNcIixcbiAgICAgICAgbW9udGg6IFwibG9uZ1wiLFxuICAgICAgICB0aW1lWm9uZTogXCJVVENcIixcbiAgICAgIH0pO1xuICAgICAgY29uc3QgbG9jYXRpb24gPSBgJHtDYWNoZS5jYWNoZWREYXRhLmxvY2F0aW9uLm5hbWV9LCAke0NhY2hlLmNhY2hlZERhdGEubG9jYXRpb24uY291bnRyeX1gO1xuXG4gICAgICAvLyBUaGlzIGRhdGEgaXMgYWNjZXNzZWQgZGlmZmVyZW50bHkgaWYgaW5kZXggPT09IDBcbiAgICAgIGxldCB0ZW1wO1xuICAgICAgbGV0IGh1bWlkaXR5O1xuICAgICAgbGV0IHdpbmQ7XG4gICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgLy8gaW5kZXggMCBkZW5vdGVzIHRoZSBDdXJyZW50IGRheSwgYXMgb3Bwb3NlZCB0byBhIGZvcmVjYXN0ZWQgZGF5XG4gICAgICAgIHRlbXAgPSBNYXRoLmZsb29yKENhY2hlLmNhY2hlZERhdGEuY3VycmVudFtgdGVtcF8ke0NhY2hlLnRlbXBVbml0c31gXSk7XG4gICAgICAgIGh1bWlkaXR5ID0gQ2FjaGUuY2FjaGVkRGF0YS5jdXJyZW50Lmh1bWlkaXR5O1xuICAgICAgICB3aW5kID0gQ2FjaGUuY2FjaGVkRGF0YS5jdXJyZW50W2B3aW5kXyR7Q2FjaGUud2luZFVuaXRzfWBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaWYgaW5kZXggIT09IDAgaXQgbXVzdCBhY2Nlc3MgZGF0YSBmcm9tIHRoZSBmb3JjYXN0IHNlY3Rpb25cbiAgICAgICAgdGVtcCA9IE1hdGguZmxvb3IoXG4gICAgICAgICAgQ2FjaGUuY2FjaGVkRGF0YS5mb3JlY2FzdC5mb3JlY2FzdGRheVtpbmRleF0uZGF5W1xuICAgICAgICAgICAgYGF2Z3RlbXBfJHtDYWNoZS50ZW1wVW5pdHN9YFxuICAgICAgICAgIF0sXG4gICAgICAgICk7XG4gICAgICAgIGh1bWlkaXR5ID0gQ2FjaGUuY2FjaGVkRGF0YS5mb3JlY2FzdC5mb3JlY2FzdGRheVtpbmRleF0uZGF5LmF2Z2h1bWlkaXR5O1xuICAgICAgICB3aW5kID1cbiAgICAgICAgICBDYWNoZS5jYWNoZWREYXRhLmZvcmVjYXN0LmZvcmVjYXN0ZGF5W2luZGV4XS5kYXlbXG4gICAgICAgICAgICBgbWF4d2luZF8ke0NhY2hlLndpbmRVbml0c31gXG4gICAgICAgICAgXTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5yZW5kZXIoe1xuICAgICAgICBpY29uLFxuICAgICAgICB0ZW1wLFxuICAgICAgICBodW1pZGl0eSxcbiAgICAgICAgd2luZCxcbiAgICAgICAgY2hhbmNlT2ZSYWluLFxuICAgICAgICBkYXksXG4gICAgICAgIGNvbmRpdGlvbixcbiAgICAgICAgbG9jYXRpb24sXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHJlbmRlcihkYXRhKSB7XG4gICAgdGhpcy5pbWdJY29uLnNyYyA9IGRhdGEuaWNvbjtcbiAgICB0aGlzLmRpdlRlbXBlcmF0dXJlLmlubmVyVGV4dCA9IGAke2RhdGEudGVtcH3CsGA7XG4gICAgdGhpcy5kaXZIdW1pZGl0eS5pbm5lclRleHQgPSBgSHVtaWRpdHk6ICR7ZGF0YS5odW1pZGl0eX0lYDtcbiAgICB0aGlzLmRpdldpbmRTcGVlZC5pbm5lclRleHQgPSBgV2luZCBzcGVlZDogJHtkYXRhLndpbmR9ICR7Q2FjaGUud2luZFVuaXRzfWA7XG4gICAgdGhpcy5kaXZDaGFuY2VSYWluLmlubmVyVGV4dCA9IGBDaGFuY2Ugb2YgcmFpbjogJHtkYXRhLmNoYW5jZU9mUmFpbn0lYDtcbiAgICB0aGlzLmRpdkRheS5pbm5lclRleHQgPSBkYXRhLmRheTtcbiAgICB0aGlzLmRpdkNvbmRpdGlvbi5pbm5lclRleHQgPSBkYXRhLmNvbmRpdGlvbjtcbiAgICB0aGlzLmRpdkxvY2F0aW9uLmlubmVyVGV4dCA9IGRhdGEubG9jYXRpb247XG4gIH1cbn1cbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9EYXkuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9EYXkuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFwiLi4vLi4vY3NzL2NvbXBvbmVudHMvRGF5LmNzc1wiO1xuaW1wb3J0IFB1YnN1YiBmcm9tIFwiLi4vUHVic3ViXCI7XG5pbXBvcnQgQ2FjaGUgZnJvbSBcIi4vQ2FjaGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGF5IHtcbiAgY29uc3RydWN0b3IoaW5kZXgsIGN1cnJlbnQgPSBmYWxzZSkge1xuICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICB0aGlzLmlzQ3VycmVudERheSA9IGN1cnJlbnQ7XG4gICAgLy8gRE9NXG4gICAgdGhpcy5jb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRoaXMuY29udGFpbmVyLmlkID0gXCJkYXlDb250YWluZXJcIjtcbiAgICBpZiAoY3VycmVudCkge1xuICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZChcInNlbGVjdGVkXCIpO1xuICAgIH1cblxuICAgIHRoaXMuaW1nSWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XG4gICAgdGhpcy5pbWdJY29uLmlkID0gXCJkYXlJY29uXCI7XG5cbiAgICB0aGlzLmRpdkRheU9mV2VlayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGhpcy5kaXZEYXlPZldlZWsuaWQgPSBcImRheURheVwiO1xuXG4gICAgdGhpcy5kaXZUZW1wZXJhdHVyZU1BWCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGhpcy5kaXZUZW1wZXJhdHVyZU1BWC5pZCA9IFwiZGF5TWF4XCI7XG5cbiAgICB0aGlzLmRpdlRlbXBlcmF0dXJlTUlOID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0aGlzLmRpdlRlbXBlcmF0dXJlTUlOLmlkID0gXCJkYXlNaW5cIjtcblxuICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZChcbiAgICAgIHRoaXMuaW1nSWNvbixcbiAgICAgIHRoaXMuZGl2RGF5T2ZXZWVrLFxuICAgICAgdGhpcy5kaXZUZW1wZXJhdHVyZU1BWCxcbiAgICAgIHRoaXMuZGl2VGVtcGVyYXR1cmVNSU4sXG4gICAgKTtcblxuICAgIC8vIEVWRU5UU1xuICAgIHRoaXMuYmluZEV2ZW50cygpO1xuICB9XG5cbiAgcmVuZGVyKGRhdGEpIHtcbiAgICB0aGlzLmNhY2hlZERhdGEgPSBkYXRhO1xuICAgIHRoaXMuaW1nSWNvbi5zcmMgPSBkYXRhLmRheS5jb25kaXRpb24uaWNvbjtcbiAgICB0aGlzLmRpdkRheU9mV2Vlay5pbm5lclRleHQgPSBuZXcgRGF0ZShcbiAgICAgIGRhdGEuZGF0ZV9lcG9jaCAqIDEwMDAsXG4gICAgKS50b0xvY2FsZURhdGVTdHJpbmcoXCJlbi1VU1wiLCB7IHdlZWtkYXk6IFwic2hvcnRcIiwgdGltZVpvbmU6IFwiVVRDXCIgfSk7XG4gICAgdGhpcy5kaXZUZW1wZXJhdHVyZU1BWC5pbm5lclRleHQgPSBgJHtcbiAgICAgIGRhdGEuZGF5W2BtYXh0ZW1wXyR7Q2FjaGUudGVtcFVuaXRzfWBdXG4gICAgfcKwYDtcbiAgICB0aGlzLmRpdlRlbXBlcmF0dXJlTUlOLmlubmVyVGV4dCA9IGAke1xuICAgICAgZGF0YS5kYXlbYG1pbnRlbXBfJHtDYWNoZS50ZW1wVW5pdHN9YF1cbiAgICB9wrBgO1xuICB9XG5cbiAgYmluZEV2ZW50cygpIHtcbiAgICB0aGlzLmNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgUHVic3ViLmVtaXQoXCJyZW5kZXJIZWFkZXJcIiwgdGhpcy5pbmRleCk7XG4gICAgICBQdWJzdWIuZW1pdChcInJlbmRlckdyYXBoXCIsIHRoaXMuaW5kZXgpO1xuICAgICAgUHVic3ViLmVtaXQoXCJyZW5kZXJIb3VybHlcIiwgdGhpcy5pbmRleCk7XG4gICAgICBQdWJzdWIuZW1pdChcInNlbGVjdGVkRGF5XCIsIHRoaXMuaW5kZXgpO1xuICAgIH0pO1xuICB9XG59XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vRGF5c0Jhci5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0RheXNCYXIuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFB1YnN1YiBmcm9tIFwiLi4vUHVic3ViXCI7XG5pbXBvcnQgRGF5IGZyb20gXCIuL0RheVwiO1xuaW1wb3J0IENhY2hlIGZyb20gXCIuL0NhY2hlXCI7XG5pbXBvcnQgXCIuLi8uLi9jc3MvY29tcG9uZW50cy9EYXlzQmFyLmNzc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEYXlzQmFyIHtcbiAgZGF5cyA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKGFtb3VudCkge1xuICAgIC8vIERPTVxuICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0aGlzLmNvbnRhaW5lci5pZCA9IFwiY29udGFpbmVyXCI7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFtb3VudDsgaSsrKSB7XG4gICAgICBjb25zdCBpc0N1cnJlbnREYXkgPSBpID09PSAwO1xuICAgICAgdGhpcy5kYXlzLnB1c2gobmV3IERheShpLCBpc0N1cnJlbnREYXkpKTtcbiAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZCh0aGlzLmRheXNbaV0uY29udGFpbmVyKTtcbiAgICB9XG5cbiAgICAvLyBFVkVOVFNcbiAgICB0aGlzLmJpbmRFdmVudHMoKTtcbiAgfVxuXG4gIGJpbmRFdmVudHMoKSB7XG4gICAgUHVic3ViLm9uKFwic2VsZWN0ZWREYXlcIiwgKGluZGV4KSA9PiB7XG4gICAgICB0aGlzLmRheXMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICBlbGVtZW50LmNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKFwic2VsZWN0ZWRcIik7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuZGF5c1tpbmRleF0uY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJzZWxlY3RlZFwiKTtcblxuICAgICAgQ2FjaGUuc2VsZWN0ZWREYXkgPSBpbmRleDtcbiAgICB9KTtcbiAgICBQdWJzdWIub24oXCJyZW5kZXJEYXlzQmFyXCIsICgpID0+IHtcbiAgICAgIHRoaXMucmVuZGVyKENhY2hlLmNhY2hlZERhdGEpO1xuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyKGRhdGEpIHtcbiAgICB0aGlzLmRheXMuZm9yRWFjaCgoZGF5KSA9PiB7XG4gICAgICBkYXkucmVuZGVyKGRhdGEuZm9yZWNhc3QuZm9yZWNhc3RkYXlbZGF5LmluZGV4XSk7XG4gICAgfSk7XG4gIH1cbn1cbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Mb2FkaW5nLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTG9hZGluZy5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgaW1nTG9hZGluZyBmcm9tIFwiLi4vLi4vaW1nL2xvYWRpbmcuc3ZnXCI7XG5pbXBvcnQgXCIuLi8uLi9jc3MvY29tcG9uZW50cy9Mb2FkaW5nLmNzc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb2FkaW5nIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRoaXMuY29udGFpbmVyLmlkID0gXCJsb2FkaW5nQ29udGFpbmVyXCI7XG4gICAgdGhpcy53aGVlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XG4gICAgdGhpcy53aGVlbC5jbGFzc0xpc3QgPSBcImxvYWRpbmdXaGVlbFwiO1xuICAgIHRoaXMud2hlZWwuc3JjID0gaW1nTG9hZGluZztcbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmQodGhpcy53aGVlbCk7XG4gIH1cbn1cbiIsIi8qIVxuICogQGt1cmtsZS9jb2xvciB2MC4zLjJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9rdXJrbGUvY29sb3IjcmVhZG1lXG4gKiAoYykgMjAyMyBKdWtrYSBLdXJrZWxhXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqL1xuZnVuY3Rpb24gcm91bmQodikge1xuICByZXR1cm4gdiArIDAuNSB8IDA7XG59XG5jb25zdCBsaW0gPSAodiwgbCwgaCkgPT4gTWF0aC5tYXgoTWF0aC5taW4odiwgaCksIGwpO1xuZnVuY3Rpb24gcDJiKHYpIHtcbiAgcmV0dXJuIGxpbShyb3VuZCh2ICogMi41NSksIDAsIDI1NSk7XG59XG5mdW5jdGlvbiBiMnAodikge1xuICByZXR1cm4gbGltKHJvdW5kKHYgLyAyLjU1KSwgMCwgMTAwKTtcbn1cbmZ1bmN0aW9uIG4yYih2KSB7XG4gIHJldHVybiBsaW0ocm91bmQodiAqIDI1NSksIDAsIDI1NSk7XG59XG5mdW5jdGlvbiBiMm4odikge1xuICByZXR1cm4gbGltKHJvdW5kKHYgLyAyLjU1KSAvIDEwMCwgMCwgMSk7XG59XG5mdW5jdGlvbiBuMnAodikge1xuICByZXR1cm4gbGltKHJvdW5kKHYgKiAxMDApLCAwLCAxMDApO1xufVxuXG5jb25zdCBtYXAkMSA9IHswOiAwLCAxOiAxLCAyOiAyLCAzOiAzLCA0OiA0LCA1OiA1LCA2OiA2LCA3OiA3LCA4OiA4LCA5OiA5LCBBOiAxMCwgQjogMTEsIEM6IDEyLCBEOiAxMywgRTogMTQsIEY6IDE1LCBhOiAxMCwgYjogMTEsIGM6IDEyLCBkOiAxMywgZTogMTQsIGY6IDE1fTtcbmNvbnN0IGhleCA9IFsuLi4nMDEyMzQ1Njc4OUFCQ0RFRiddO1xuY29uc3QgaDEgPSBiID0+IGhleFtiICYgMHhGXTtcbmNvbnN0IGgyID0gYiA9PiBoZXhbKGIgJiAweEYwKSA+PiA0XSArIGhleFtiICYgMHhGXTtcbmNvbnN0IGVxID0gYiA9PiAoKGIgJiAweEYwKSA+PiA0KSA9PT0gKGIgJiAweEYpO1xuY29uc3QgaXNTaG9ydCA9IHYgPT4gZXEodi5yKSAmJiBlcSh2LmcpICYmIGVxKHYuYikgJiYgZXEodi5hKTtcbmZ1bmN0aW9uIGhleFBhcnNlKHN0cikge1xuICB2YXIgbGVuID0gc3RyLmxlbmd0aDtcbiAgdmFyIHJldDtcbiAgaWYgKHN0clswXSA9PT0gJyMnKSB7XG4gICAgaWYgKGxlbiA9PT0gNCB8fCBsZW4gPT09IDUpIHtcbiAgICAgIHJldCA9IHtcbiAgICAgICAgcjogMjU1ICYgbWFwJDFbc3RyWzFdXSAqIDE3LFxuICAgICAgICBnOiAyNTUgJiBtYXAkMVtzdHJbMl1dICogMTcsXG4gICAgICAgIGI6IDI1NSAmIG1hcCQxW3N0clszXV0gKiAxNyxcbiAgICAgICAgYTogbGVuID09PSA1ID8gbWFwJDFbc3RyWzRdXSAqIDE3IDogMjU1XG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAobGVuID09PSA3IHx8IGxlbiA9PT0gOSkge1xuICAgICAgcmV0ID0ge1xuICAgICAgICByOiBtYXAkMVtzdHJbMV1dIDw8IDQgfCBtYXAkMVtzdHJbMl1dLFxuICAgICAgICBnOiBtYXAkMVtzdHJbM11dIDw8IDQgfCBtYXAkMVtzdHJbNF1dLFxuICAgICAgICBiOiBtYXAkMVtzdHJbNV1dIDw8IDQgfCBtYXAkMVtzdHJbNl1dLFxuICAgICAgICBhOiBsZW4gPT09IDkgPyAobWFwJDFbc3RyWzddXSA8PCA0IHwgbWFwJDFbc3RyWzhdXSkgOiAyNTVcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIHJldHVybiByZXQ7XG59XG5jb25zdCBhbHBoYSA9IChhLCBmKSA9PiBhIDwgMjU1ID8gZihhKSA6ICcnO1xuZnVuY3Rpb24gaGV4U3RyaW5nKHYpIHtcbiAgdmFyIGYgPSBpc1Nob3J0KHYpID8gaDEgOiBoMjtcbiAgcmV0dXJuIHZcbiAgICA/ICcjJyArIGYodi5yKSArIGYodi5nKSArIGYodi5iKSArIGFscGhhKHYuYSwgZilcbiAgICA6IHVuZGVmaW5lZDtcbn1cblxuY29uc3QgSFVFX1JFID0gL14oaHNsYT98aHdifGhzdilcXChcXHMqKFstKy5lXFxkXSspKD86ZGVnKT9bXFxzLF0rKFstKy5lXFxkXSspJVtcXHMsXSsoWy0rLmVcXGRdKyklKD86W1xccyxdKyhbLSsuZVxcZF0rKSglKT8pP1xccypcXCkkLztcbmZ1bmN0aW9uIGhzbDJyZ2JuKGgsIHMsIGwpIHtcbiAgY29uc3QgYSA9IHMgKiBNYXRoLm1pbihsLCAxIC0gbCk7XG4gIGNvbnN0IGYgPSAobiwgayA9IChuICsgaCAvIDMwKSAlIDEyKSA9PiBsIC0gYSAqIE1hdGgubWF4KE1hdGgubWluKGsgLSAzLCA5IC0gaywgMSksIC0xKTtcbiAgcmV0dXJuIFtmKDApLCBmKDgpLCBmKDQpXTtcbn1cbmZ1bmN0aW9uIGhzdjJyZ2JuKGgsIHMsIHYpIHtcbiAgY29uc3QgZiA9IChuLCBrID0gKG4gKyBoIC8gNjApICUgNikgPT4gdiAtIHYgKiBzICogTWF0aC5tYXgoTWF0aC5taW4oaywgNCAtIGssIDEpLCAwKTtcbiAgcmV0dXJuIFtmKDUpLCBmKDMpLCBmKDEpXTtcbn1cbmZ1bmN0aW9uIGh3YjJyZ2JuKGgsIHcsIGIpIHtcbiAgY29uc3QgcmdiID0gaHNsMnJnYm4oaCwgMSwgMC41KTtcbiAgbGV0IGk7XG4gIGlmICh3ICsgYiA+IDEpIHtcbiAgICBpID0gMSAvICh3ICsgYik7XG4gICAgdyAqPSBpO1xuICAgIGIgKj0gaTtcbiAgfVxuICBmb3IgKGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgcmdiW2ldICo9IDEgLSB3IC0gYjtcbiAgICByZ2JbaV0gKz0gdztcbiAgfVxuICByZXR1cm4gcmdiO1xufVxuZnVuY3Rpb24gaHVlVmFsdWUociwgZywgYiwgZCwgbWF4KSB7XG4gIGlmIChyID09PSBtYXgpIHtcbiAgICByZXR1cm4gKChnIC0gYikgLyBkKSArIChnIDwgYiA/IDYgOiAwKTtcbiAgfVxuICBpZiAoZyA9PT0gbWF4KSB7XG4gICAgcmV0dXJuIChiIC0gcikgLyBkICsgMjtcbiAgfVxuICByZXR1cm4gKHIgLSBnKSAvIGQgKyA0O1xufVxuZnVuY3Rpb24gcmdiMmhzbCh2KSB7XG4gIGNvbnN0IHJhbmdlID0gMjU1O1xuICBjb25zdCByID0gdi5yIC8gcmFuZ2U7XG4gIGNvbnN0IGcgPSB2LmcgLyByYW5nZTtcbiAgY29uc3QgYiA9IHYuYiAvIHJhbmdlO1xuICBjb25zdCBtYXggPSBNYXRoLm1heChyLCBnLCBiKTtcbiAgY29uc3QgbWluID0gTWF0aC5taW4ociwgZywgYik7XG4gIGNvbnN0IGwgPSAobWF4ICsgbWluKSAvIDI7XG4gIGxldCBoLCBzLCBkO1xuICBpZiAobWF4ICE9PSBtaW4pIHtcbiAgICBkID0gbWF4IC0gbWluO1xuICAgIHMgPSBsID4gMC41ID8gZCAvICgyIC0gbWF4IC0gbWluKSA6IGQgLyAobWF4ICsgbWluKTtcbiAgICBoID0gaHVlVmFsdWUociwgZywgYiwgZCwgbWF4KTtcbiAgICBoID0gaCAqIDYwICsgMC41O1xuICB9XG4gIHJldHVybiBbaCB8IDAsIHMgfHwgMCwgbF07XG59XG5mdW5jdGlvbiBjYWxsbihmLCBhLCBiLCBjKSB7XG4gIHJldHVybiAoXG4gICAgQXJyYXkuaXNBcnJheShhKVxuICAgICAgPyBmKGFbMF0sIGFbMV0sIGFbMl0pXG4gICAgICA6IGYoYSwgYiwgYylcbiAgKS5tYXAobjJiKTtcbn1cbmZ1bmN0aW9uIGhzbDJyZ2IoaCwgcywgbCkge1xuICByZXR1cm4gY2FsbG4oaHNsMnJnYm4sIGgsIHMsIGwpO1xufVxuZnVuY3Rpb24gaHdiMnJnYihoLCB3LCBiKSB7XG4gIHJldHVybiBjYWxsbihod2IycmdibiwgaCwgdywgYik7XG59XG5mdW5jdGlvbiBoc3YycmdiKGgsIHMsIHYpIHtcbiAgcmV0dXJuIGNhbGxuKGhzdjJyZ2JuLCBoLCBzLCB2KTtcbn1cbmZ1bmN0aW9uIGh1ZShoKSB7XG4gIHJldHVybiAoaCAlIDM2MCArIDM2MCkgJSAzNjA7XG59XG5mdW5jdGlvbiBodWVQYXJzZShzdHIpIHtcbiAgY29uc3QgbSA9IEhVRV9SRS5leGVjKHN0cik7XG4gIGxldCBhID0gMjU1O1xuICBsZXQgdjtcbiAgaWYgKCFtKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChtWzVdICE9PSB2KSB7XG4gICAgYSA9IG1bNl0gPyBwMmIoK21bNV0pIDogbjJiKCttWzVdKTtcbiAgfVxuICBjb25zdCBoID0gaHVlKCttWzJdKTtcbiAgY29uc3QgcDEgPSArbVszXSAvIDEwMDtcbiAgY29uc3QgcDIgPSArbVs0XSAvIDEwMDtcbiAgaWYgKG1bMV0gPT09ICdod2InKSB7XG4gICAgdiA9IGh3YjJyZ2IoaCwgcDEsIHAyKTtcbiAgfSBlbHNlIGlmIChtWzFdID09PSAnaHN2Jykge1xuICAgIHYgPSBoc3YycmdiKGgsIHAxLCBwMik7XG4gIH0gZWxzZSB7XG4gICAgdiA9IGhzbDJyZ2IoaCwgcDEsIHAyKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHI6IHZbMF0sXG4gICAgZzogdlsxXSxcbiAgICBiOiB2WzJdLFxuICAgIGE6IGFcbiAgfTtcbn1cbmZ1bmN0aW9uIHJvdGF0ZSh2LCBkZWcpIHtcbiAgdmFyIGggPSByZ2IyaHNsKHYpO1xuICBoWzBdID0gaHVlKGhbMF0gKyBkZWcpO1xuICBoID0gaHNsMnJnYihoKTtcbiAgdi5yID0gaFswXTtcbiAgdi5nID0gaFsxXTtcbiAgdi5iID0gaFsyXTtcbn1cbmZ1bmN0aW9uIGhzbFN0cmluZyh2KSB7XG4gIGlmICghdikge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBhID0gcmdiMmhzbCh2KTtcbiAgY29uc3QgaCA9IGFbMF07XG4gIGNvbnN0IHMgPSBuMnAoYVsxXSk7XG4gIGNvbnN0IGwgPSBuMnAoYVsyXSk7XG4gIHJldHVybiB2LmEgPCAyNTVcbiAgICA/IGBoc2xhKCR7aH0sICR7c30lLCAke2x9JSwgJHtiMm4odi5hKX0pYFxuICAgIDogYGhzbCgke2h9LCAke3N9JSwgJHtsfSUpYDtcbn1cblxuY29uc3QgbWFwID0ge1xuICB4OiAnZGFyaycsXG4gIFo6ICdsaWdodCcsXG4gIFk6ICdyZScsXG4gIFg6ICdibHUnLFxuICBXOiAnZ3InLFxuICBWOiAnbWVkaXVtJyxcbiAgVTogJ3NsYXRlJyxcbiAgQTogJ2VlJyxcbiAgVDogJ29sJyxcbiAgUzogJ29yJyxcbiAgQjogJ3JhJyxcbiAgQzogJ2xhdGVnJyxcbiAgRDogJ2lnaHRzJyxcbiAgUjogJ2luJyxcbiAgUTogJ3R1cnF1b2lzJyxcbiAgRTogJ2hpJyxcbiAgUDogJ3JvJyxcbiAgTzogJ2FsJyxcbiAgTjogJ2xlJyxcbiAgTTogJ2RlJyxcbiAgTDogJ3llbGxvJyxcbiAgRjogJ2VuJyxcbiAgSzogJ2NoJyxcbiAgRzogJ2Fya3MnLFxuICBIOiAnZWEnLFxuICBJOiAnaWdodGcnLFxuICBKOiAnd2gnXG59O1xuY29uc3QgbmFtZXMkMSA9IHtcbiAgT2ljZVhlOiAnZjBmOGZmJyxcbiAgYW50aXF1ZXdFdGU6ICdmYWViZDcnLFxuICBhcXVhOiAnZmZmZicsXG4gIGFxdWFtYXJSZTogJzdmZmZkNCcsXG4gIGF6dVk6ICdmMGZmZmYnLFxuICBiZWlnZTogJ2Y1ZjVkYycsXG4gIGJpc3F1ZTogJ2ZmZTRjNCcsXG4gIGJsYWNrOiAnMCcsXG4gIGJsYW5LZWRPbW9uZDogJ2ZmZWJjZCcsXG4gIFhlOiAnZmYnLFxuICBYZXZpVGV0OiAnOGEyYmUyJyxcbiAgYlB3bjogJ2E1MmEyYScsXG4gIGJ1cmx5d29vZDogJ2RlYjg4NycsXG4gIGNhTXRYZTogJzVmOWVhMCcsXG4gIEthcnRZdXNlOiAnN2ZmZjAwJyxcbiAgS29jVGF0ZTogJ2QyNjkxZScsXG4gIGNTTzogJ2ZmN2Y1MCcsXG4gIGNTbmZsb3dlclhlOiAnNjQ5NWVkJyxcbiAgY1Nuc2lsazogJ2ZmZjhkYycsXG4gIGNyaW1zb246ICdkYzE0M2MnLFxuICBjeWFuOiAnZmZmZicsXG4gIHhYZTogJzhiJyxcbiAgeGN5YW46ICc4YjhiJyxcbiAgeGdUTW5QZDogJ2I4ODYwYicsXG4gIHhXYXk6ICdhOWE5YTknLFxuICB4Z1lGOiAnNjQwMCcsXG4gIHhnWXk6ICdhOWE5YTknLFxuICB4a2hha2k6ICdiZGI3NmInLFxuICB4bWFnRnRhOiAnOGIwMDhiJyxcbiAgeFRpdmVnWUY6ICc1NTZiMmYnLFxuICB4U2FuZ2U6ICdmZjhjMDAnLFxuICB4U2NFZDogJzk5MzJjYycsXG4gIHhZZDogJzhiMDAwMCcsXG4gIHhzT21vbjogJ2U5OTY3YScsXG4gIHhzSGdZRjogJzhmYmM4ZicsXG4gIHhVWGU6ICc0ODNkOGInLFxuICB4VVdheTogJzJmNGY0ZicsXG4gIHhVZ1l5OiAnMmY0ZjRmJyxcbiAgeFFlOiAnY2VkMScsXG4gIHh2aVRldDogJzk0MDBkMycsXG4gIGRBcHBSazogJ2ZmMTQ5MycsXG4gIGRBcHNreVhlOiAnYmZmZicsXG4gIGRpbVdheTogJzY5Njk2OScsXG4gIGRpbWdZeTogJzY5Njk2OScsXG4gIGRvZGdlclhlOiAnMWU5MGZmJyxcbiAgZmlZYnJpY2s6ICdiMjIyMjInLFxuICBmbFNPd0V0ZTogJ2ZmZmFmMCcsXG4gIGZvWXN0V0FuOiAnMjI4YjIyJyxcbiAgZnVLc2lhOiAnZmYwMGZmJyxcbiAgZ2FSc2JTbzogJ2RjZGNkYycsXG4gIGdob3N0d0V0ZTogJ2Y4ZjhmZicsXG4gIGdUZDogJ2ZmZDcwMCcsXG4gIGdUTW5QZDogJ2RhYTUyMCcsXG4gIFdheTogJzgwODA4MCcsXG4gIGdZRjogJzgwMDAnLFxuICBnWUZMdzogJ2FkZmYyZicsXG4gIGdZeTogJzgwODA4MCcsXG4gIGhvbmV5TXc6ICdmMGZmZjAnLFxuICBob3RwUms6ICdmZjY5YjQnLFxuICBSZGlhbllkOiAnY2Q1YzVjJyxcbiAgUmRpZ286ICc0YjAwODInLFxuICBpdlN5OiAnZmZmZmYwJyxcbiAga2hha2k6ICdmMGU2OGMnLFxuICBsYXZGTXI6ICdlNmU2ZmEnLFxuICBsYXZGTXJYc2g6ICdmZmYwZjUnLFxuICBsYXduZ1lGOiAnN2NmYzAwJyxcbiAgTm1vbmNFZmZvbjogJ2ZmZmFjZCcsXG4gIFpYZTogJ2FkZDhlNicsXG4gIFpjU086ICdmMDgwODAnLFxuICBaY3lhbjogJ2UwZmZmZicsXG4gIFpnVE1uUGRMdzogJ2ZhZmFkMicsXG4gIFpXYXk6ICdkM2QzZDMnLFxuICBaZ1lGOiAnOTBlZTkwJyxcbiAgWmdZeTogJ2QzZDNkMycsXG4gIFpwUms6ICdmZmI2YzEnLFxuICBac09tb246ICdmZmEwN2EnLFxuICBac0hnWUY6ICcyMGIyYWEnLFxuICBac2t5WGU6ICc4N2NlZmEnLFxuICBaVVdheTogJzc3ODg5OScsXG4gIFpVZ1l5OiAnNzc4ODk5JyxcbiAgWnN0QWxYZTogJ2IwYzRkZScsXG4gIFpMdzogJ2ZmZmZlMCcsXG4gIGxpbWU6ICdmZjAwJyxcbiAgbGltZWdZRjogJzMyY2QzMicsXG4gIGxSRjogJ2ZhZjBlNicsXG4gIG1hZ0Z0YTogJ2ZmMDBmZicsXG4gIG1hUG9uOiAnODAwMDAwJyxcbiAgVmFxdWFtYXJSZTogJzY2Y2RhYScsXG4gIFZYZTogJ2NkJyxcbiAgVlNjRWQ6ICdiYTU1ZDMnLFxuICBWcHVycE46ICc5MzcwZGInLFxuICBWc0hnWUY6ICczY2IzNzEnLFxuICBWVVhlOiAnN2I2OGVlJyxcbiAgVnNwclJnZ1lGOiAnZmE5YScsXG4gIFZRZTogJzQ4ZDFjYycsXG4gIFZ2aVRldFlkOiAnYzcxNTg1JyxcbiAgbWlkbmlnaHRYZTogJzE5MTk3MCcsXG4gIG1SdGNZYW06ICdmNWZmZmEnLFxuICBtaXN0eVBzZTogJ2ZmZTRlMScsXG4gIG1vY2Nhc1I6ICdmZmU0YjUnLFxuICBuYXZham93RXRlOiAnZmZkZWFkJyxcbiAgbmF2eTogJzgwJyxcbiAgVGRsYWNlOiAnZmRmNWU2JyxcbiAgVGl2ZTogJzgwODAwMCcsXG4gIFRpdmVkQmI6ICc2YjhlMjMnLFxuICBTYW5nZTogJ2ZmYTUwMCcsXG4gIFNhbmdlWWQ6ICdmZjQ1MDAnLFxuICBTY0VkOiAnZGE3MGQ2JyxcbiAgcE9lZ1RNblBkOiAnZWVlOGFhJyxcbiAgcE9lZ1lGOiAnOThmYjk4JyxcbiAgcE9lUWU6ICdhZmVlZWUnLFxuICBwT2V2aVRldFlkOiAnZGI3MDkzJyxcbiAgcGFwYXlhd0VwOiAnZmZlZmQ1JyxcbiAgcEhLcHVmZjogJ2ZmZGFiOScsXG4gIHBlcnU6ICdjZDg1M2YnLFxuICBwUms6ICdmZmMwY2InLFxuICBwbHVtOiAnZGRhMGRkJyxcbiAgcG93TXJYZTogJ2IwZTBlNicsXG4gIHB1cnBOOiAnODAwMDgwJyxcbiAgWWJlY2NhcHVycE46ICc2NjMzOTknLFxuICBZZDogJ2ZmMDAwMCcsXG4gIFBzeWJyb3duOiAnYmM4ZjhmJyxcbiAgUHlPWGU6ICc0MTY5ZTEnLFxuICBzYWRkTmJQd246ICc4YjQ1MTMnLFxuICBzT21vbjogJ2ZhODA3MicsXG4gIHNhbmR5YlB3bjogJ2Y0YTQ2MCcsXG4gIHNIZ1lGOiAnMmU4YjU3JyxcbiAgc0hzaGVsbDogJ2ZmZjVlZScsXG4gIHNpRm5hOiAnYTA1MjJkJyxcbiAgc2lsdmVyOiAnYzBjMGMwJyxcbiAgc2t5WGU6ICc4N2NlZWInLFxuICBVWGU6ICc2YTVhY2QnLFxuICBVV2F5OiAnNzA4MDkwJyxcbiAgVWdZeTogJzcwODA5MCcsXG4gIHNub3c6ICdmZmZhZmEnLFxuICBzcHJSZ2dZRjogJ2ZmN2YnLFxuICBzdEFsWGU6ICc0NjgyYjQnLFxuICB0YW46ICdkMmI0OGMnLFxuICB0ZU86ICc4MDgwJyxcbiAgdEVzdE46ICdkOGJmZDgnLFxuICB0b21hdG86ICdmZjYzNDcnLFxuICBRZTogJzQwZTBkMCcsXG4gIHZpVGV0OiAnZWU4MmVlJyxcbiAgSkh0OiAnZjVkZWIzJyxcbiAgd0V0ZTogJ2ZmZmZmZicsXG4gIHdFdGVzbW9rZTogJ2Y1ZjVmNScsXG4gIEx3OiAnZmZmZjAwJyxcbiAgTHdnWUY6ICc5YWNkMzInXG59O1xuZnVuY3Rpb24gdW5wYWNrKCkge1xuICBjb25zdCB1bnBhY2tlZCA9IHt9O1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMobmFtZXMkMSk7XG4gIGNvbnN0IHRrZXlzID0gT2JqZWN0LmtleXMobWFwKTtcbiAgbGV0IGksIGosIGssIG9rLCBuaztcbiAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBvayA9IG5rID0ga2V5c1tpXTtcbiAgICBmb3IgKGogPSAwOyBqIDwgdGtleXMubGVuZ3RoOyBqKyspIHtcbiAgICAgIGsgPSB0a2V5c1tqXTtcbiAgICAgIG5rID0gbmsucmVwbGFjZShrLCBtYXBba10pO1xuICAgIH1cbiAgICBrID0gcGFyc2VJbnQobmFtZXMkMVtva10sIDE2KTtcbiAgICB1bnBhY2tlZFtua10gPSBbayA+PiAxNiAmIDB4RkYsIGsgPj4gOCAmIDB4RkYsIGsgJiAweEZGXTtcbiAgfVxuICByZXR1cm4gdW5wYWNrZWQ7XG59XG5cbmxldCBuYW1lcztcbmZ1bmN0aW9uIG5hbWVQYXJzZShzdHIpIHtcbiAgaWYgKCFuYW1lcykge1xuICAgIG5hbWVzID0gdW5wYWNrKCk7XG4gICAgbmFtZXMudHJhbnNwYXJlbnQgPSBbMCwgMCwgMCwgMF07XG4gIH1cbiAgY29uc3QgYSA9IG5hbWVzW3N0ci50b0xvd2VyQ2FzZSgpXTtcbiAgcmV0dXJuIGEgJiYge1xuICAgIHI6IGFbMF0sXG4gICAgZzogYVsxXSxcbiAgICBiOiBhWzJdLFxuICAgIGE6IGEubGVuZ3RoID09PSA0ID8gYVszXSA6IDI1NVxuICB9O1xufVxuXG5jb25zdCBSR0JfUkUgPSAvXnJnYmE/XFwoXFxzKihbLSsuXFxkXSspKCUpP1tcXHMsXSsoWy0rLmVcXGRdKykoJSk/W1xccyxdKyhbLSsuZVxcZF0rKSglKT8oPzpbXFxzLC9dKyhbLSsuZVxcZF0rKSglKT8pP1xccypcXCkkLztcbmZ1bmN0aW9uIHJnYlBhcnNlKHN0cikge1xuICBjb25zdCBtID0gUkdCX1JFLmV4ZWMoc3RyKTtcbiAgbGV0IGEgPSAyNTU7XG4gIGxldCByLCBnLCBiO1xuICBpZiAoIW0pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKG1bN10gIT09IHIpIHtcbiAgICBjb25zdCB2ID0gK21bN107XG4gICAgYSA9IG1bOF0gPyBwMmIodikgOiBsaW0odiAqIDI1NSwgMCwgMjU1KTtcbiAgfVxuICByID0gK21bMV07XG4gIGcgPSArbVszXTtcbiAgYiA9ICttWzVdO1xuICByID0gMjU1ICYgKG1bMl0gPyBwMmIocikgOiBsaW0ociwgMCwgMjU1KSk7XG4gIGcgPSAyNTUgJiAobVs0XSA/IHAyYihnKSA6IGxpbShnLCAwLCAyNTUpKTtcbiAgYiA9IDI1NSAmIChtWzZdID8gcDJiKGIpIDogbGltKGIsIDAsIDI1NSkpO1xuICByZXR1cm4ge1xuICAgIHI6IHIsXG4gICAgZzogZyxcbiAgICBiOiBiLFxuICAgIGE6IGFcbiAgfTtcbn1cbmZ1bmN0aW9uIHJnYlN0cmluZyh2KSB7XG4gIHJldHVybiB2ICYmIChcbiAgICB2LmEgPCAyNTVcbiAgICAgID8gYHJnYmEoJHt2LnJ9LCAke3YuZ30sICR7di5ifSwgJHtiMm4odi5hKX0pYFxuICAgICAgOiBgcmdiKCR7di5yfSwgJHt2Lmd9LCAke3YuYn0pYFxuICApO1xufVxuXG5jb25zdCB0byA9IHYgPT4gdiA8PSAwLjAwMzEzMDggPyB2ICogMTIuOTIgOiBNYXRoLnBvdyh2LCAxLjAgLyAyLjQpICogMS4wNTUgLSAwLjA1NTtcbmNvbnN0IGZyb20gPSB2ID0+IHYgPD0gMC4wNDA0NSA/IHYgLyAxMi45MiA6IE1hdGgucG93KCh2ICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG5mdW5jdGlvbiBpbnRlcnBvbGF0ZShyZ2IxLCByZ2IyLCB0KSB7XG4gIGNvbnN0IHIgPSBmcm9tKGIybihyZ2IxLnIpKTtcbiAgY29uc3QgZyA9IGZyb20oYjJuKHJnYjEuZykpO1xuICBjb25zdCBiID0gZnJvbShiMm4ocmdiMS5iKSk7XG4gIHJldHVybiB7XG4gICAgcjogbjJiKHRvKHIgKyB0ICogKGZyb20oYjJuKHJnYjIucikpIC0gcikpKSxcbiAgICBnOiBuMmIodG8oZyArIHQgKiAoZnJvbShiMm4ocmdiMi5nKSkgLSBnKSkpLFxuICAgIGI6IG4yYih0byhiICsgdCAqIChmcm9tKGIybihyZ2IyLmIpKSAtIGIpKSksXG4gICAgYTogcmdiMS5hICsgdCAqIChyZ2IyLmEgLSByZ2IxLmEpXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1vZEhTTCh2LCBpLCByYXRpbykge1xuICBpZiAodikge1xuICAgIGxldCB0bXAgPSByZ2IyaHNsKHYpO1xuICAgIHRtcFtpXSA9IE1hdGgubWF4KDAsIE1hdGgubWluKHRtcFtpXSArIHRtcFtpXSAqIHJhdGlvLCBpID09PSAwID8gMzYwIDogMSkpO1xuICAgIHRtcCA9IGhzbDJyZ2IodG1wKTtcbiAgICB2LnIgPSB0bXBbMF07XG4gICAgdi5nID0gdG1wWzFdO1xuICAgIHYuYiA9IHRtcFsyXTtcbiAgfVxufVxuZnVuY3Rpb24gY2xvbmUodiwgcHJvdG8pIHtcbiAgcmV0dXJuIHYgPyBPYmplY3QuYXNzaWduKHByb3RvIHx8IHt9LCB2KSA6IHY7XG59XG5mdW5jdGlvbiBmcm9tT2JqZWN0KGlucHV0KSB7XG4gIHZhciB2ID0ge3I6IDAsIGc6IDAsIGI6IDAsIGE6IDI1NX07XG4gIGlmIChBcnJheS5pc0FycmF5KGlucHV0KSkge1xuICAgIGlmIChpbnB1dC5sZW5ndGggPj0gMykge1xuICAgICAgdiA9IHtyOiBpbnB1dFswXSwgZzogaW5wdXRbMV0sIGI6IGlucHV0WzJdLCBhOiAyNTV9O1xuICAgICAgaWYgKGlucHV0Lmxlbmd0aCA+IDMpIHtcbiAgICAgICAgdi5hID0gbjJiKGlucHV0WzNdKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdiA9IGNsb25lKGlucHV0LCB7cjogMCwgZzogMCwgYjogMCwgYTogMX0pO1xuICAgIHYuYSA9IG4yYih2LmEpO1xuICB9XG4gIHJldHVybiB2O1xufVxuZnVuY3Rpb24gZnVuY3Rpb25QYXJzZShzdHIpIHtcbiAgaWYgKHN0ci5jaGFyQXQoMCkgPT09ICdyJykge1xuICAgIHJldHVybiByZ2JQYXJzZShzdHIpO1xuICB9XG4gIHJldHVybiBodWVQYXJzZShzdHIpO1xufVxuY2xhc3MgQ29sb3Ige1xuICBjb25zdHJ1Y3RvcihpbnB1dCkge1xuICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIENvbG9yKSB7XG4gICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuICAgIGNvbnN0IHR5cGUgPSB0eXBlb2YgaW5wdXQ7XG4gICAgbGV0IHY7XG4gICAgaWYgKHR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICB2ID0gZnJvbU9iamVjdChpbnB1dCk7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgdiA9IGhleFBhcnNlKGlucHV0KSB8fCBuYW1lUGFyc2UoaW5wdXQpIHx8IGZ1bmN0aW9uUGFyc2UoaW5wdXQpO1xuICAgIH1cbiAgICB0aGlzLl9yZ2IgPSB2O1xuICAgIHRoaXMuX3ZhbGlkID0gISF2O1xuICB9XG4gIGdldCB2YWxpZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsaWQ7XG4gIH1cbiAgZ2V0IHJnYigpIHtcbiAgICB2YXIgdiA9IGNsb25lKHRoaXMuX3JnYik7XG4gICAgaWYgKHYpIHtcbiAgICAgIHYuYSA9IGIybih2LmEpO1xuICAgIH1cbiAgICByZXR1cm4gdjtcbiAgfVxuICBzZXQgcmdiKG9iaikge1xuICAgIHRoaXMuX3JnYiA9IGZyb21PYmplY3Qob2JqKTtcbiAgfVxuICByZ2JTdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbGlkID8gcmdiU3RyaW5nKHRoaXMuX3JnYikgOiB1bmRlZmluZWQ7XG4gIH1cbiAgaGV4U3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLl92YWxpZCA/IGhleFN0cmluZyh0aGlzLl9yZ2IpIDogdW5kZWZpbmVkO1xuICB9XG4gIGhzbFN0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsaWQgPyBoc2xTdHJpbmcodGhpcy5fcmdiKSA6IHVuZGVmaW5lZDtcbiAgfVxuICBtaXgoY29sb3IsIHdlaWdodCkge1xuICAgIGlmIChjb2xvcikge1xuICAgICAgY29uc3QgYzEgPSB0aGlzLnJnYjtcbiAgICAgIGNvbnN0IGMyID0gY29sb3IucmdiO1xuICAgICAgbGV0IHcyO1xuICAgICAgY29uc3QgcCA9IHdlaWdodCA9PT0gdzIgPyAwLjUgOiB3ZWlnaHQ7XG4gICAgICBjb25zdCB3ID0gMiAqIHAgLSAxO1xuICAgICAgY29uc3QgYSA9IGMxLmEgLSBjMi5hO1xuICAgICAgY29uc3QgdzEgPSAoKHcgKiBhID09PSAtMSA/IHcgOiAodyArIGEpIC8gKDEgKyB3ICogYSkpICsgMSkgLyAyLjA7XG4gICAgICB3MiA9IDEgLSB3MTtcbiAgICAgIGMxLnIgPSAweEZGICYgdzEgKiBjMS5yICsgdzIgKiBjMi5yICsgMC41O1xuICAgICAgYzEuZyA9IDB4RkYgJiB3MSAqIGMxLmcgKyB3MiAqIGMyLmcgKyAwLjU7XG4gICAgICBjMS5iID0gMHhGRiAmIHcxICogYzEuYiArIHcyICogYzIuYiArIDAuNTtcbiAgICAgIGMxLmEgPSBwICogYzEuYSArICgxIC0gcCkgKiBjMi5hO1xuICAgICAgdGhpcy5yZ2IgPSBjMTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgaW50ZXJwb2xhdGUoY29sb3IsIHQpIHtcbiAgICBpZiAoY29sb3IpIHtcbiAgICAgIHRoaXMuX3JnYiA9IGludGVycG9sYXRlKHRoaXMuX3JnYiwgY29sb3IuX3JnYiwgdCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGNsb25lKCkge1xuICAgIHJldHVybiBuZXcgQ29sb3IodGhpcy5yZ2IpO1xuICB9XG4gIGFscGhhKGEpIHtcbiAgICB0aGlzLl9yZ2IuYSA9IG4yYihhKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBjbGVhcmVyKHJhdGlvKSB7XG4gICAgY29uc3QgcmdiID0gdGhpcy5fcmdiO1xuICAgIHJnYi5hICo9IDEgLSByYXRpbztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBncmV5c2NhbGUoKSB7XG4gICAgY29uc3QgcmdiID0gdGhpcy5fcmdiO1xuICAgIGNvbnN0IHZhbCA9IHJvdW5kKHJnYi5yICogMC4zICsgcmdiLmcgKiAwLjU5ICsgcmdiLmIgKiAwLjExKTtcbiAgICByZ2IuciA9IHJnYi5nID0gcmdiLmIgPSB2YWw7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgb3BhcXVlcihyYXRpbykge1xuICAgIGNvbnN0IHJnYiA9IHRoaXMuX3JnYjtcbiAgICByZ2IuYSAqPSAxICsgcmF0aW87XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgbmVnYXRlKCkge1xuICAgIGNvbnN0IHYgPSB0aGlzLl9yZ2I7XG4gICAgdi5yID0gMjU1IC0gdi5yO1xuICAgIHYuZyA9IDI1NSAtIHYuZztcbiAgICB2LmIgPSAyNTUgLSB2LmI7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgbGlnaHRlbihyYXRpbykge1xuICAgIG1vZEhTTCh0aGlzLl9yZ2IsIDIsIHJhdGlvKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBkYXJrZW4ocmF0aW8pIHtcbiAgICBtb2RIU0wodGhpcy5fcmdiLCAyLCAtcmF0aW8pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHNhdHVyYXRlKHJhdGlvKSB7XG4gICAgbW9kSFNMKHRoaXMuX3JnYiwgMSwgcmF0aW8pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGRlc2F0dXJhdGUocmF0aW8pIHtcbiAgICBtb2RIU0wodGhpcy5fcmdiLCAxLCAtcmF0aW8pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHJvdGF0ZShkZWcpIHtcbiAgICByb3RhdGUodGhpcy5fcmdiLCBkZWcpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluZGV4X2VzbShpbnB1dCkge1xuICByZXR1cm4gbmV3IENvbG9yKGlucHV0KTtcbn1cblxuZXhwb3J0IHsgQ29sb3IsIGIybiwgYjJwLCBpbmRleF9lc20gYXMgZGVmYXVsdCwgaGV4UGFyc2UsIGhleFN0cmluZywgaHNsMnJnYiwgaHNsU3RyaW5nLCBoc3YycmdiLCBodWVQYXJzZSwgaHdiMnJnYiwgbGltLCBuMmIsIG4ycCwgbmFtZVBhcnNlLCBwMmIsIHJnYjJoc2wsIHJnYlBhcnNlLCByZ2JTdHJpbmcsIHJvdGF0ZSwgcm91bmQgfTtcbiIsIi8qIVxuICogQ2hhcnQuanMgdjQuMy4zXG4gKiBodHRwczovL3d3dy5jaGFydGpzLm9yZ1xuICogKGMpIDIwMjMgQ2hhcnQuanMgQ29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICdAa3Vya2xlL2NvbG9yJztcblxuLyoqXG4gKiBAbmFtZXNwYWNlIENoYXJ0LmhlbHBlcnNcbiAqLyAvKipcbiAqIEFuIGVtcHR5IGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQsIGZvciBleGFtcGxlLCBmb3Igb3B0aW9uYWwgY2FsbGJhY2suXG4gKi8gZnVuY3Rpb24gbm9vcCgpIHtcbi8qIG5vb3AgKi8gfVxuLyoqXG4gKiBSZXR1cm5zIGEgdW5pcXVlIGlkLCBzZXF1ZW50aWFsbHkgZ2VuZXJhdGVkIGZyb20gYSBnbG9iYWwgdmFyaWFibGUuXG4gKi8gY29uc3QgdWlkID0gKCgpPT57XG4gICAgbGV0IGlkID0gMDtcbiAgICByZXR1cm4gKCk9PmlkKys7XG59KSgpO1xuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYHZhbHVlYCBpcyBuZWl0aGVyIG51bGwgbm9yIHVuZGVmaW5lZCwgZWxzZSByZXR1cm5zIGZhbHNlLlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIHRlc3QuXG4gKiBAc2luY2UgMi43LjBcbiAqLyBmdW5jdGlvbiBpc051bGxPclVuZGVmKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCc7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBgdmFsdWVgIGlzIGFuIGFycmF5IChpbmNsdWRpbmcgdHlwZWQgYXJyYXlzKSwgZWxzZSByZXR1cm5zIGZhbHNlLlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIHRlc3QuXG4gKiBAZnVuY3Rpb25cbiAqLyBmdW5jdGlvbiBpc0FycmF5KHZhbHVlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkgJiYgQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNvbnN0IHR5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgIGlmICh0eXBlLnNsaWNlKDAsIDcpID09PSAnW29iamVjdCcgJiYgdHlwZS5zbGljZSgtNikgPT09ICdBcnJheV0nKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCAoZXhjbHVkaW5nIG51bGwpLCBlbHNlIHJldHVybnMgZmFsc2UuXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gdGVzdC5cbiAqIEBzaW5jZSAyLjcuMFxuICovIGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYHZhbHVlYCBpcyBhIGZpbml0ZSBudW1iZXIsIGVsc2UgcmV0dXJucyBmYWxzZVxuICogQHBhcmFtIHZhbHVlICAtIFRoZSB2YWx1ZSB0byB0ZXN0LlxuICovIGZ1bmN0aW9uIGlzTnVtYmVyRmluaXRlKHZhbHVlKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8IHZhbHVlIGluc3RhbmNlb2YgTnVtYmVyKSAmJiBpc0Zpbml0ZSgrdmFsdWUpO1xufVxuLyoqXG4gKiBSZXR1cm5zIGB2YWx1ZWAgaWYgZmluaXRlLCBlbHNlIHJldHVybnMgYGRlZmF1bHRWYWx1ZWAuXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gcmV0dXJuIGlmIGRlZmluZWQuXG4gKiBAcGFyYW0gZGVmYXVsdFZhbHVlIC0gVGhlIHZhbHVlIHRvIHJldHVybiBpZiBgdmFsdWVgIGlzIG5vdCBmaW5pdGUuXG4gKi8gZnVuY3Rpb24gZmluaXRlT3JEZWZhdWx0KHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICByZXR1cm4gaXNOdW1iZXJGaW5pdGUodmFsdWUpID8gdmFsdWUgOiBkZWZhdWx0VmFsdWU7XG59XG4vKipcbiAqIFJldHVybnMgYHZhbHVlYCBpZiBkZWZpbmVkLCBlbHNlIHJldHVybnMgYGRlZmF1bHRWYWx1ZWAuXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gcmV0dXJuIGlmIGRlZmluZWQuXG4gKiBAcGFyYW0gZGVmYXVsdFZhbHVlIC0gVGhlIHZhbHVlIHRvIHJldHVybiBpZiBgdmFsdWVgIGlzIHVuZGVmaW5lZC5cbiAqLyBmdW5jdGlvbiB2YWx1ZU9yRGVmYXVsdCh2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyBkZWZhdWx0VmFsdWUgOiB2YWx1ZTtcbn1cbmNvbnN0IHRvUGVyY2VudGFnZSA9ICh2YWx1ZSwgZGltZW5zaW9uKT0+dHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5lbmRzV2l0aCgnJScpID8gcGFyc2VGbG9hdCh2YWx1ZSkgLyAxMDAgOiArdmFsdWUgLyBkaW1lbnNpb247XG5jb25zdCB0b0RpbWVuc2lvbiA9ICh2YWx1ZSwgZGltZW5zaW9uKT0+dHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5lbmRzV2l0aCgnJScpID8gcGFyc2VGbG9hdCh2YWx1ZSkgLyAxMDAgKiBkaW1lbnNpb24gOiArdmFsdWU7XG4vKipcbiAqIENhbGxzIGBmbmAgd2l0aCB0aGUgZ2l2ZW4gYGFyZ3NgIGluIHRoZSBzY29wZSBkZWZpbmVkIGJ5IGB0aGlzQXJnYCBhbmQgcmV0dXJucyB0aGVcbiAqIHZhbHVlIHJldHVybmVkIGJ5IGBmbmAuIElmIGBmbmAgaXMgbm90IGEgZnVuY3Rpb24sIHRoaXMgbWV0aG9kIHJldHVybnMgdW5kZWZpbmVkLlxuICogQHBhcmFtIGZuIC0gVGhlIGZ1bmN0aW9uIHRvIGNhbGwuXG4gKiBAcGFyYW0gYXJncyAtIFRoZSBhcmd1bWVudHMgd2l0aCB3aGljaCBgZm5gIHNob3VsZCBiZSBjYWxsZWQuXG4gKiBAcGFyYW0gW3RoaXNBcmddIC0gVGhlIHZhbHVlIG9mIGB0aGlzYCBwcm92aWRlZCBmb3IgdGhlIGNhbGwgdG8gYGZuYC5cbiAqLyBmdW5jdGlvbiBjYWxsYmFjayhmbiwgYXJncywgdGhpc0FyZykge1xuICAgIGlmIChmbiAmJiB0eXBlb2YgZm4uY2FsbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgfVxufVxuZnVuY3Rpb24gZWFjaChsb29wYWJsZSwgZm4sIHRoaXNBcmcsIHJldmVyc2UpIHtcbiAgICBsZXQgaSwgbGVuLCBrZXlzO1xuICAgIGlmIChpc0FycmF5KGxvb3BhYmxlKSkge1xuICAgICAgICBsZW4gPSBsb29wYWJsZS5sZW5ndGg7XG4gICAgICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgICAgICBmb3IoaSA9IGxlbiAtIDE7IGkgPj0gMDsgaS0tKXtcbiAgICAgICAgICAgICAgICBmbi5jYWxsKHRoaXNBcmcsIGxvb3BhYmxlW2ldLCBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvcihpID0gMDsgaSA8IGxlbjsgaSsrKXtcbiAgICAgICAgICAgICAgICBmbi5jYWxsKHRoaXNBcmcsIGxvb3BhYmxlW2ldLCBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QobG9vcGFibGUpKSB7XG4gICAgICAgIGtleXMgPSBPYmplY3Qua2V5cyhsb29wYWJsZSk7XG4gICAgICAgIGxlbiA9IGtleXMubGVuZ3RoO1xuICAgICAgICBmb3IoaSA9IDA7IGkgPCBsZW47IGkrKyl7XG4gICAgICAgICAgICBmbi5jYWxsKHRoaXNBcmcsIGxvb3BhYmxlW2tleXNbaV1dLCBrZXlzW2ldKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBgYTBgIGFuZCBgYTFgIGFycmF5cyBoYXZlIHRoZSBzYW1lIGNvbnRlbnQsIGVsc2UgcmV0dXJucyBmYWxzZS5cbiAqIEBwYXJhbSBhMCAtIFRoZSBhcnJheSB0byBjb21wYXJlXG4gKiBAcGFyYW0gYTEgLSBUaGUgYXJyYXkgdG8gY29tcGFyZVxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfZWxlbWVudHNFcXVhbChhMCwgYTEpIHtcbiAgICBsZXQgaSwgaWxlbiwgdjAsIHYxO1xuICAgIGlmICghYTAgfHwgIWExIHx8IGEwLmxlbmd0aCAhPT0gYTEubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yKGkgPSAwLCBpbGVuID0gYTAubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgdjAgPSBhMFtpXTtcbiAgICAgICAgdjEgPSBhMVtpXTtcbiAgICAgICAgaWYgKHYwLmRhdGFzZXRJbmRleCAhPT0gdjEuZGF0YXNldEluZGV4IHx8IHYwLmluZGV4ICE9PSB2MS5pbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgZGVlcCBjb3B5IG9mIGBzb3VyY2VgIHdpdGhvdXQga2VlcGluZyByZWZlcmVuY2VzIG9uIG9iamVjdHMgYW5kIGFycmF5cy5cbiAqIEBwYXJhbSBzb3VyY2UgLSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gKi8gZnVuY3Rpb24gY2xvbmUoc291cmNlKSB7XG4gICAgaWYgKGlzQXJyYXkoc291cmNlKSkge1xuICAgICAgICByZXR1cm4gc291cmNlLm1hcChjbG9uZSk7XG4gICAgfVxuICAgIGlmIChpc09iamVjdChzb3VyY2UpKSB7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICAgICAgICBjb25zdCBrbGVuID0ga2V5cy5sZW5ndGg7XG4gICAgICAgIGxldCBrID0gMDtcbiAgICAgICAgZm9yKDsgayA8IGtsZW47ICsrayl7XG4gICAgICAgICAgICB0YXJnZXRba2V5c1trXV0gPSBjbG9uZShzb3VyY2Vba2V5c1trXV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2U7XG59XG5mdW5jdGlvbiBpc1ZhbGlkS2V5KGtleSkge1xuICAgIHJldHVybiBbXG4gICAgICAgICdfX3Byb3RvX18nLFxuICAgICAgICAncHJvdG90eXBlJyxcbiAgICAgICAgJ2NvbnN0cnVjdG9yJ1xuICAgIF0uaW5kZXhPZihrZXkpID09PSAtMTtcbn1cbi8qKlxuICogVGhlIGRlZmF1bHQgbWVyZ2VyIHdoZW4gQ2hhcnQuaGVscGVycy5tZXJnZSBpcyBjYWxsZWQgd2l0aG91dCBtZXJnZXIgb3B0aW9uLlxuICogTm90ZShTQik6IGFsc28gdXNlZCBieSBtZXJnZUNvbmZpZyBhbmQgbWVyZ2VTY2FsZUNvbmZpZyBhcyBmYWxsYmFjay5cbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX21lcmdlcihrZXksIHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG4gICAgaWYgKCFpc1ZhbGlkS2V5KGtleSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB0dmFsID0gdGFyZ2V0W2tleV07XG4gICAgY29uc3Qgc3ZhbCA9IHNvdXJjZVtrZXldO1xuICAgIGlmIChpc09iamVjdCh0dmFsKSAmJiBpc09iamVjdChzdmFsKSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVzZS1iZWZvcmUtZGVmaW5lXG4gICAgICAgIG1lcmdlKHR2YWwsIHN2YWwsIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gY2xvbmUoc3ZhbCk7XG4gICAgfVxufVxuZnVuY3Rpb24gbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBzb3VyY2VzID0gaXNBcnJheShzb3VyY2UpID8gc291cmNlIDogW1xuICAgICAgICBzb3VyY2VcbiAgICBdO1xuICAgIGNvbnN0IGlsZW4gPSBzb3VyY2VzLmxlbmd0aDtcbiAgICBpZiAoIWlzT2JqZWN0KHRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgY29uc3QgbWVyZ2VyID0gb3B0aW9ucy5tZXJnZXIgfHwgX21lcmdlcjtcbiAgICBsZXQgY3VycmVudDtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgY3VycmVudCA9IHNvdXJjZXNbaV07XG4gICAgICAgIGlmICghaXNPYmplY3QoY3VycmVudCkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhjdXJyZW50KTtcbiAgICAgICAgZm9yKGxldCBrID0gMCwga2xlbiA9IGtleXMubGVuZ3RoOyBrIDwga2xlbjsgKytrKXtcbiAgICAgICAgICAgIG1lcmdlcihrZXlzW2tdLCB0YXJnZXQsIGN1cnJlbnQsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59XG5mdW5jdGlvbiBtZXJnZUlmKHRhcmdldCwgc291cmNlKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11c2UtYmVmb3JlLWRlZmluZVxuICAgIHJldHVybiBtZXJnZSh0YXJnZXQsIHNvdXJjZSwge1xuICAgICAgICBtZXJnZXI6IF9tZXJnZXJJZlxuICAgIH0pO1xufVxuLyoqXG4gKiBNZXJnZXMgc291cmNlW2tleV0gaW4gdGFyZ2V0W2tleV0gb25seSBpZiB0YXJnZXRba2V5XSBpcyB1bmRlZmluZWQuXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9tZXJnZXJJZihrZXksIHRhcmdldCwgc291cmNlKSB7XG4gICAgaWYgKCFpc1ZhbGlkS2V5KGtleSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB0dmFsID0gdGFyZ2V0W2tleV07XG4gICAgY29uc3Qgc3ZhbCA9IHNvdXJjZVtrZXldO1xuICAgIGlmIChpc09iamVjdCh0dmFsKSAmJiBpc09iamVjdChzdmFsKSkge1xuICAgICAgICBtZXJnZUlmKHR2YWwsIHN2YWwpO1xuICAgIH0gZWxzZSBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBjbG9uZShzdmFsKTtcbiAgICB9XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2RlcHJlY2F0ZWQoc2NvcGUsIHZhbHVlLCBwcmV2aW91cywgY3VycmVudCkge1xuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihzY29wZSArICc6IFwiJyArIHByZXZpb3VzICsgJ1wiIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgXCInICsgY3VycmVudCArICdcIiBpbnN0ZWFkJyk7XG4gICAgfVxufVxuLy8gcmVzb2x2ZU9iamVjdEtleSByZXNvbHZlciBjYWNoZVxuY29uc3Qga2V5UmVzb2x2ZXJzID0ge1xuICAgIC8vIENoYXJ0LmhlbHBlcnMuY29yZSByZXNvbHZlT2JqZWN0S2V5IHNob3VsZCByZXNvbHZlIGVtcHR5IGtleSB0byByb290IG9iamVjdFxuICAgICcnOiAodik9PnYsXG4gICAgLy8gZGVmYXVsdCByZXNvbHZlcnNcbiAgICB4OiAobyk9Pm8ueCxcbiAgICB5OiAobyk9Pm8ueVxufTtcbi8qKlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfc3BsaXRLZXkoa2V5KSB7XG4gICAgY29uc3QgcGFydHMgPSBrZXkuc3BsaXQoJy4nKTtcbiAgICBjb25zdCBrZXlzID0gW107XG4gICAgbGV0IHRtcCA9ICcnO1xuICAgIGZvciAoY29uc3QgcGFydCBvZiBwYXJ0cyl7XG4gICAgICAgIHRtcCArPSBwYXJ0O1xuICAgICAgICBpZiAodG1wLmVuZHNXaXRoKCdcXFxcJykpIHtcbiAgICAgICAgICAgIHRtcCA9IHRtcC5zbGljZSgwLCAtMSkgKyAnLic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBrZXlzLnB1c2godG1wKTtcbiAgICAgICAgICAgIHRtcCA9ICcnO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBrZXlzO1xufVxuZnVuY3Rpb24gX2dldEtleVJlc29sdmVyKGtleSkge1xuICAgIGNvbnN0IGtleXMgPSBfc3BsaXRLZXkoa2V5KTtcbiAgICByZXR1cm4gKG9iaik9PntcbiAgICAgICAgZm9yIChjb25zdCBrIG9mIGtleXMpe1xuICAgICAgICAgICAgaWYgKGsgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvYmogPSBvYmogJiYgb2JqW2tdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVPYmplY3RLZXkob2JqLCBrZXkpIHtcbiAgICBjb25zdCByZXNvbHZlciA9IGtleVJlc29sdmVyc1trZXldIHx8IChrZXlSZXNvbHZlcnNba2V5XSA9IF9nZXRLZXlSZXNvbHZlcihrZXkpKTtcbiAgICByZXR1cm4gcmVzb2x2ZXIob2JqKTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfY2FwaXRhbGl6ZShzdHIpIHtcbiAgICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpO1xufVxuY29uc3QgZGVmaW5lZCA9ICh2YWx1ZSk9PnR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCc7XG5jb25zdCBpc0Z1bmN0aW9uID0gKHZhbHVlKT0+dHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xuLy8gQWRhcHRlZCBmcm9tIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzMxMTI4ODU1L2NvbXBhcmluZy1lY21hNi1zZXRzLWZvci1lcXVhbGl0eSMzMTEyOTM4NFxuY29uc3Qgc2V0c0VxdWFsID0gKGEsIGIpPT57XG4gICAgaWYgKGEuc2l6ZSAhPT0gYi5zaXplKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGEpe1xuICAgICAgICBpZiAoIWIuaGFzKGl0ZW0pKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59O1xuLyoqXG4gKiBAcGFyYW0gZSAtIFRoZSBldmVudFxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfaXNDbGlja0V2ZW50KGUpIHtcbiAgICByZXR1cm4gZS50eXBlID09PSAnbW91c2V1cCcgfHwgZS50eXBlID09PSAnY2xpY2snIHx8IGUudHlwZSA9PT0gJ2NvbnRleHRtZW51Jztcbn1cblxuLyoqXG4gKiBAYWxpYXMgQ2hhcnQuaGVscGVycy5tYXRoXG4gKiBAbmFtZXNwYWNlXG4gKi8gY29uc3QgUEkgPSBNYXRoLlBJO1xuY29uc3QgVEFVID0gMiAqIFBJO1xuY29uc3QgUElUQVUgPSBUQVUgKyBQSTtcbmNvbnN0IElORklOSVRZID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuY29uc3QgUkFEX1BFUl9ERUcgPSBQSSAvIDE4MDtcbmNvbnN0IEhBTEZfUEkgPSBQSSAvIDI7XG5jb25zdCBRVUFSVEVSX1BJID0gUEkgLyA0O1xuY29uc3QgVFdPX1RISVJEU19QSSA9IFBJICogMiAvIDM7XG5jb25zdCBsb2cxMCA9IE1hdGgubG9nMTA7XG5jb25zdCBzaWduID0gTWF0aC5zaWduO1xuZnVuY3Rpb24gYWxtb3N0RXF1YWxzKHgsIHksIGVwc2lsb24pIHtcbiAgICByZXR1cm4gTWF0aC5hYnMoeCAtIHkpIDwgZXBzaWxvbjtcbn1cbi8qKlxuICogSW1wbGVtZW50YXRpb24gb2YgdGhlIG5pY2UgbnVtYmVyIGFsZ29yaXRobSB1c2VkIGluIGRldGVybWluaW5nIHdoZXJlIGF4aXMgbGFiZWxzIHdpbGwgZ29cbiAqLyBmdW5jdGlvbiBuaWNlTnVtKHJhbmdlKSB7XG4gICAgY29uc3Qgcm91bmRlZFJhbmdlID0gTWF0aC5yb3VuZChyYW5nZSk7XG4gICAgcmFuZ2UgPSBhbG1vc3RFcXVhbHMocmFuZ2UsIHJvdW5kZWRSYW5nZSwgcmFuZ2UgLyAxMDAwKSA/IHJvdW5kZWRSYW5nZSA6IHJhbmdlO1xuICAgIGNvbnN0IG5pY2VSYW5nZSA9IE1hdGgucG93KDEwLCBNYXRoLmZsb29yKGxvZzEwKHJhbmdlKSkpO1xuICAgIGNvbnN0IGZyYWN0aW9uID0gcmFuZ2UgLyBuaWNlUmFuZ2U7XG4gICAgY29uc3QgbmljZUZyYWN0aW9uID0gZnJhY3Rpb24gPD0gMSA/IDEgOiBmcmFjdGlvbiA8PSAyID8gMiA6IGZyYWN0aW9uIDw9IDUgPyA1IDogMTA7XG4gICAgcmV0dXJuIG5pY2VGcmFjdGlvbiAqIG5pY2VSYW5nZTtcbn1cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBvZiBmYWN0b3JzIHNvcnRlZCBmcm9tIDEgdG8gc3FydCh2YWx1ZSlcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2ZhY3Rvcml6ZSh2YWx1ZSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGNvbnN0IHNxcnQgPSBNYXRoLnNxcnQodmFsdWUpO1xuICAgIGxldCBpO1xuICAgIGZvcihpID0gMTsgaSA8IHNxcnQ7IGkrKyl7XG4gICAgICAgIGlmICh2YWx1ZSAlIGkgPT09IDApIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGkpO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUgLyBpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoc3FydCA9PT0gKHNxcnQgfCAwKSkge1xuICAgICAgICByZXN1bHQucHVzaChzcXJ0KTtcbiAgICB9XG4gICAgcmVzdWx0LnNvcnQoKGEsIGIpPT5hIC0gYikucG9wKCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGlzTnVtYmVyKG4pIHtcbiAgICByZXR1cm4gIWlzTmFOKHBhcnNlRmxvYXQobikpICYmIGlzRmluaXRlKG4pO1xufVxuZnVuY3Rpb24gYWxtb3N0V2hvbGUoeCwgZXBzaWxvbikge1xuICAgIGNvbnN0IHJvdW5kZWQgPSBNYXRoLnJvdW5kKHgpO1xuICAgIHJldHVybiByb3VuZGVkIC0gZXBzaWxvbiA8PSB4ICYmIHJvdW5kZWQgKyBlcHNpbG9uID49IHg7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX3NldE1pbkFuZE1heEJ5S2V5KGFycmF5LCB0YXJnZXQsIHByb3BlcnR5KSB7XG4gICAgbGV0IGksIGlsZW4sIHZhbHVlO1xuICAgIGZvcihpID0gMCwgaWxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGlsZW47IGkrKyl7XG4gICAgICAgIHZhbHVlID0gYXJyYXlbaV1bcHJvcGVydHldO1xuICAgICAgICBpZiAoIWlzTmFOKHZhbHVlKSkge1xuICAgICAgICAgICAgdGFyZ2V0Lm1pbiA9IE1hdGgubWluKHRhcmdldC5taW4sIHZhbHVlKTtcbiAgICAgICAgICAgIHRhcmdldC5tYXggPSBNYXRoLm1heCh0YXJnZXQubWF4LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiB0b1JhZGlhbnMoZGVncmVlcykge1xuICAgIHJldHVybiBkZWdyZWVzICogKFBJIC8gMTgwKTtcbn1cbmZ1bmN0aW9uIHRvRGVncmVlcyhyYWRpYW5zKSB7XG4gICAgcmV0dXJuIHJhZGlhbnMgKiAoMTgwIC8gUEkpO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXNcbiAqIGkuZS4gdGhlIG51bWJlciBvZiBkaWdpdHMgYWZ0ZXIgdGhlIGRlY2ltYWwgcG9pbnQsIG9mIHRoZSB2YWx1ZSBvZiB0aGlzIE51bWJlci5cbiAqIEBwYXJhbSB4IC0gQSBudW1iZXIuXG4gKiBAcmV0dXJucyBUaGUgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzLlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfZGVjaW1hbFBsYWNlcyh4KSB7XG4gICAgaWYgKCFpc051bWJlckZpbml0ZSh4KSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBlID0gMTtcbiAgICBsZXQgcCA9IDA7XG4gICAgd2hpbGUoTWF0aC5yb3VuZCh4ICogZSkgLyBlICE9PSB4KXtcbiAgICAgICAgZSAqPSAxMDtcbiAgICAgICAgcCsrO1xuICAgIH1cbiAgICByZXR1cm4gcDtcbn1cbi8vIEdldHMgdGhlIGFuZ2xlIGZyb20gdmVydGljYWwgdXByaWdodCB0byB0aGUgcG9pbnQgYWJvdXQgYSBjZW50cmUuXG5mdW5jdGlvbiBnZXRBbmdsZUZyb21Qb2ludChjZW50cmVQb2ludCwgYW5nbGVQb2ludCkge1xuICAgIGNvbnN0IGRpc3RhbmNlRnJvbVhDZW50ZXIgPSBhbmdsZVBvaW50LnggLSBjZW50cmVQb2ludC54O1xuICAgIGNvbnN0IGRpc3RhbmNlRnJvbVlDZW50ZXIgPSBhbmdsZVBvaW50LnkgLSBjZW50cmVQb2ludC55O1xuICAgIGNvbnN0IHJhZGlhbERpc3RhbmNlRnJvbUNlbnRlciA9IE1hdGguc3FydChkaXN0YW5jZUZyb21YQ2VudGVyICogZGlzdGFuY2VGcm9tWENlbnRlciArIGRpc3RhbmNlRnJvbVlDZW50ZXIgKiBkaXN0YW5jZUZyb21ZQ2VudGVyKTtcbiAgICBsZXQgYW5nbGUgPSBNYXRoLmF0YW4yKGRpc3RhbmNlRnJvbVlDZW50ZXIsIGRpc3RhbmNlRnJvbVhDZW50ZXIpO1xuICAgIGlmIChhbmdsZSA8IC0wLjUgKiBQSSkge1xuICAgICAgICBhbmdsZSArPSBUQVU7IC8vIG1ha2Ugc3VyZSB0aGUgcmV0dXJuZWQgYW5nbGUgaXMgaW4gdGhlIHJhbmdlIG9mICgtUEkvMiwgM1BJLzJdXG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGFuZ2xlLFxuICAgICAgICBkaXN0YW5jZTogcmFkaWFsRGlzdGFuY2VGcm9tQ2VudGVyXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGRpc3RhbmNlQmV0d2VlblBvaW50cyhwdDEsIHB0Mikge1xuICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3cocHQyLnggLSBwdDEueCwgMikgKyBNYXRoLnBvdyhwdDIueSAtIHB0MS55LCAyKSk7XG59XG4vKipcbiAqIFNob3J0ZXN0IGRpc3RhbmNlIGJldHdlZW4gYW5nbGVzLCBpbiBlaXRoZXIgZGlyZWN0aW9uLlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfYW5nbGVEaWZmKGEsIGIpIHtcbiAgICByZXR1cm4gKGEgLSBiICsgUElUQVUpICUgVEFVIC0gUEk7XG59XG4vKipcbiAqIE5vcm1hbGl6ZSBhbmdsZSB0byBiZSBiZXR3ZWVuIDAgYW5kIDIqUElcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX25vcm1hbGl6ZUFuZ2xlKGEpIHtcbiAgICByZXR1cm4gKGEgJSBUQVUgKyBUQVUpICUgVEFVO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9hbmdsZUJldHdlZW4oYW5nbGUsIHN0YXJ0LCBlbmQsIHNhbWVBbmdsZUlzRnVsbENpcmNsZSkge1xuICAgIGNvbnN0IGEgPSBfbm9ybWFsaXplQW5nbGUoYW5nbGUpO1xuICAgIGNvbnN0IHMgPSBfbm9ybWFsaXplQW5nbGUoc3RhcnQpO1xuICAgIGNvbnN0IGUgPSBfbm9ybWFsaXplQW5nbGUoZW5kKTtcbiAgICBjb25zdCBhbmdsZVRvU3RhcnQgPSBfbm9ybWFsaXplQW5nbGUocyAtIGEpO1xuICAgIGNvbnN0IGFuZ2xlVG9FbmQgPSBfbm9ybWFsaXplQW5nbGUoZSAtIGEpO1xuICAgIGNvbnN0IHN0YXJ0VG9BbmdsZSA9IF9ub3JtYWxpemVBbmdsZShhIC0gcyk7XG4gICAgY29uc3QgZW5kVG9BbmdsZSA9IF9ub3JtYWxpemVBbmdsZShhIC0gZSk7XG4gICAgcmV0dXJuIGEgPT09IHMgfHwgYSA9PT0gZSB8fCBzYW1lQW5nbGVJc0Z1bGxDaXJjbGUgJiYgcyA9PT0gZSB8fCBhbmdsZVRvU3RhcnQgPiBhbmdsZVRvRW5kICYmIHN0YXJ0VG9BbmdsZSA8IGVuZFRvQW5nbGU7XG59XG4vKipcbiAqIExpbWl0IGB2YWx1ZWAgYmV0d2VlbiBgbWluYCBhbmQgYG1heGBcbiAqIEBwYXJhbSB2YWx1ZVxuICogQHBhcmFtIG1pblxuICogQHBhcmFtIG1heFxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfbGltaXRWYWx1ZSh2YWx1ZSwgbWluLCBtYXgpIHtcbiAgICByZXR1cm4gTWF0aC5tYXgobWluLCBNYXRoLm1pbihtYXgsIHZhbHVlKSk7XG59XG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfaW50MTZSYW5nZSh2YWx1ZSkge1xuICAgIHJldHVybiBfbGltaXRWYWx1ZSh2YWx1ZSwgLTMyNzY4LCAzMjc2Nyk7XG59XG4vKipcbiAqIEBwYXJhbSB2YWx1ZVxuICogQHBhcmFtIHN0YXJ0XG4gKiBAcGFyYW0gZW5kXG4gKiBAcGFyYW0gW2Vwc2lsb25dXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9pc0JldHdlZW4odmFsdWUsIHN0YXJ0LCBlbmQsIGVwc2lsb24gPSAxZS02KSB7XG4gICAgcmV0dXJuIHZhbHVlID49IE1hdGgubWluKHN0YXJ0LCBlbmQpIC0gZXBzaWxvbiAmJiB2YWx1ZSA8PSBNYXRoLm1heChzdGFydCwgZW5kKSArIGVwc2lsb247XG59XG5cbmZ1bmN0aW9uIF9sb29rdXAodGFibGUsIHZhbHVlLCBjbXApIHtcbiAgICBjbXAgPSBjbXAgfHwgKChpbmRleCk9PnRhYmxlW2luZGV4XSA8IHZhbHVlKTtcbiAgICBsZXQgaGkgPSB0YWJsZS5sZW5ndGggLSAxO1xuICAgIGxldCBsbyA9IDA7XG4gICAgbGV0IG1pZDtcbiAgICB3aGlsZShoaSAtIGxvID4gMSl7XG4gICAgICAgIG1pZCA9IGxvICsgaGkgPj4gMTtcbiAgICAgICAgaWYgKGNtcChtaWQpKSB7XG4gICAgICAgICAgICBsbyA9IG1pZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhpID0gbWlkO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGxvLFxuICAgICAgICBoaVxuICAgIH07XG59XG4vKipcbiAqIEJpbmFyeSBzZWFyY2hcbiAqIEBwYXJhbSB0YWJsZSAtIHRoZSB0YWJsZSBzZWFyY2guIG11c3QgYmUgc29ydGVkIVxuICogQHBhcmFtIGtleSAtIHByb3BlcnR5IG5hbWUgZm9yIHRoZSB2YWx1ZSBpbiBlYWNoIGVudHJ5XG4gKiBAcGFyYW0gdmFsdWUgLSB2YWx1ZSB0byBmaW5kXG4gKiBAcGFyYW0gbGFzdCAtIGxvb2t1cCBsYXN0IGluZGV4XG4gKiBAcHJpdmF0ZVxuICovIGNvbnN0IF9sb29rdXBCeUtleSA9ICh0YWJsZSwga2V5LCB2YWx1ZSwgbGFzdCk9Pl9sb29rdXAodGFibGUsIHZhbHVlLCBsYXN0ID8gKGluZGV4KT0+e1xuICAgICAgICBjb25zdCB0aSA9IHRhYmxlW2luZGV4XVtrZXldO1xuICAgICAgICByZXR1cm4gdGkgPCB2YWx1ZSB8fCB0aSA9PT0gdmFsdWUgJiYgdGFibGVbaW5kZXggKyAxXVtrZXldID09PSB2YWx1ZTtcbiAgICB9IDogKGluZGV4KT0+dGFibGVbaW5kZXhdW2tleV0gPCB2YWx1ZSk7XG4vKipcbiAqIFJldmVyc2UgYmluYXJ5IHNlYXJjaFxuICogQHBhcmFtIHRhYmxlIC0gdGhlIHRhYmxlIHNlYXJjaC4gbXVzdCBiZSBzb3J0ZWQhXG4gKiBAcGFyYW0ga2V5IC0gcHJvcGVydHkgbmFtZSBmb3IgdGhlIHZhbHVlIGluIGVhY2ggZW50cnlcbiAqIEBwYXJhbSB2YWx1ZSAtIHZhbHVlIHRvIGZpbmRcbiAqIEBwcml2YXRlXG4gKi8gY29uc3QgX3Jsb29rdXBCeUtleSA9ICh0YWJsZSwga2V5LCB2YWx1ZSk9Pl9sb29rdXAodGFibGUsIHZhbHVlLCAoaW5kZXgpPT50YWJsZVtpbmRleF1ba2V5XSA+PSB2YWx1ZSk7XG4vKipcbiAqIFJldHVybiBzdWJzZXQgb2YgYHZhbHVlc2AgYmV0d2VlbiBgbWluYCBhbmQgYG1heGAgaW5jbHVzaXZlLlxuICogVmFsdWVzIGFyZSBhc3N1bWVkIHRvIGJlIGluIHNvcnRlZCBvcmRlci5cbiAqIEBwYXJhbSB2YWx1ZXMgLSBzb3J0ZWQgYXJyYXkgb2YgdmFsdWVzXG4gKiBAcGFyYW0gbWluIC0gbWluIHZhbHVlXG4gKiBAcGFyYW0gbWF4IC0gbWF4IHZhbHVlXG4gKi8gZnVuY3Rpb24gX2ZpbHRlckJldHdlZW4odmFsdWVzLCBtaW4sIG1heCkge1xuICAgIGxldCBzdGFydCA9IDA7XG4gICAgbGV0IGVuZCA9IHZhbHVlcy5sZW5ndGg7XG4gICAgd2hpbGUoc3RhcnQgPCBlbmQgJiYgdmFsdWVzW3N0YXJ0XSA8IG1pbil7XG4gICAgICAgIHN0YXJ0Kys7XG4gICAgfVxuICAgIHdoaWxlKGVuZCA+IHN0YXJ0ICYmIHZhbHVlc1tlbmQgLSAxXSA+IG1heCl7XG4gICAgICAgIGVuZC0tO1xuICAgIH1cbiAgICByZXR1cm4gc3RhcnQgPiAwIHx8IGVuZCA8IHZhbHVlcy5sZW5ndGggPyB2YWx1ZXMuc2xpY2Uoc3RhcnQsIGVuZCkgOiB2YWx1ZXM7XG59XG5jb25zdCBhcnJheUV2ZW50cyA9IFtcbiAgICAncHVzaCcsXG4gICAgJ3BvcCcsXG4gICAgJ3NoaWZ0JyxcbiAgICAnc3BsaWNlJyxcbiAgICAndW5zaGlmdCdcbl07XG5mdW5jdGlvbiBsaXN0ZW5BcnJheUV2ZW50cyhhcnJheSwgbGlzdGVuZXIpIHtcbiAgICBpZiAoYXJyYXkuX2NoYXJ0anMpIHtcbiAgICAgICAgYXJyYXkuX2NoYXJ0anMubGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcnJheSwgJ19jaGFydGpzJywge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgbGlzdGVuZXJzOiBbXG4gICAgICAgICAgICAgICAgbGlzdGVuZXJcbiAgICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGFycmF5RXZlbnRzLmZvckVhY2goKGtleSk9PntcbiAgICAgICAgY29uc3QgbWV0aG9kID0gJ19vbkRhdGEnICsgX2NhcGl0YWxpemUoa2V5KTtcbiAgICAgICAgY29uc3QgYmFzZSA9IGFycmF5W2tleV07XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcnJheSwga2V5LCB7XG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHZhbHVlICguLi5hcmdzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzID0gYmFzZS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgICAgICBhcnJheS5fY2hhcnRqcy5saXN0ZW5lcnMuZm9yRWFjaCgob2JqZWN0KT0+e1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9iamVjdFttZXRob2RdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmplY3RbbWV0aG9kXSguLi5hcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gdW5saXN0ZW5BcnJheUV2ZW50cyhhcnJheSwgbGlzdGVuZXIpIHtcbiAgICBjb25zdCBzdHViID0gYXJyYXkuX2NoYXJ0anM7XG4gICAgaWYgKCFzdHViKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbGlzdGVuZXJzID0gc3R1Yi5saXN0ZW5lcnM7XG4gICAgY29uc3QgaW5kZXggPSBsaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICBsaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gICAgaWYgKGxpc3RlbmVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYXJyYXlFdmVudHMuZm9yRWFjaCgoa2V5KT0+e1xuICAgICAgICBkZWxldGUgYXJyYXlba2V5XTtcbiAgICB9KTtcbiAgICBkZWxldGUgYXJyYXkuX2NoYXJ0anM7XG59XG4vKipcbiAqIEBwYXJhbSBpdGVtc1xuICovIGZ1bmN0aW9uIF9hcnJheVVuaXF1ZShpdGVtcykge1xuICAgIGNvbnN0IHNldCA9IG5ldyBTZXQoaXRlbXMpO1xuICAgIGlmIChzZXQuc2l6ZSA9PT0gaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBpdGVtcztcbiAgICB9XG4gICAgcmV0dXJuIEFycmF5LmZyb20oc2V0KTtcbn1cblxuZnVuY3Rpb24gZm9udFN0cmluZyhwaXhlbFNpemUsIGZvbnRTdHlsZSwgZm9udEZhbWlseSkge1xuICAgIHJldHVybiBmb250U3R5bGUgKyAnICcgKyBwaXhlbFNpemUgKyAncHggJyArIGZvbnRGYW1pbHk7XG59XG4vKipcbiogUmVxdWVzdCBhbmltYXRpb24gcG9seWZpbGxcbiovIGNvbnN0IHJlcXVlc3RBbmltRnJhbWUgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG59KCk7XG4vKipcbiAqIFRocm90dGxlcyBjYWxsaW5nIGBmbmAgb25jZSBwZXIgYW5pbWF0aW9uIGZyYW1lXG4gKiBMYXRlc3QgYXJndW1lbnRzIGFyZSB1c2VkIG9uIHRoZSBhY3R1YWwgY2FsbFxuICovIGZ1bmN0aW9uIHRocm90dGxlZChmbiwgdGhpc0FyZykge1xuICAgIGxldCBhcmdzVG9Vc2UgPSBbXTtcbiAgICBsZXQgdGlja2luZyA9IGZhbHNlO1xuICAgIHJldHVybiBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgICAgIC8vIFNhdmUgdGhlIGFyZ3MgZm9yIHVzZSBsYXRlclxuICAgICAgICBhcmdzVG9Vc2UgPSBhcmdzO1xuICAgICAgICBpZiAoIXRpY2tpbmcpIHtcbiAgICAgICAgICAgIHRpY2tpbmcgPSB0cnVlO1xuICAgICAgICAgICAgcmVxdWVzdEFuaW1GcmFtZS5jYWxsKHdpbmRvdywgKCk9PntcbiAgICAgICAgICAgICAgICB0aWNraW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZm4uYXBwbHkodGhpc0FyZywgYXJnc1RvVXNlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbn1cbi8qKlxuICogRGVib3VuY2VzIGNhbGxpbmcgYGZuYCBmb3IgYGRlbGF5YCBtc1xuICovIGZ1bmN0aW9uIGRlYm91bmNlKGZuLCBkZWxheSkge1xuICAgIGxldCB0aW1lb3V0O1xuICAgIHJldHVybiBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgICAgIGlmIChkZWxheSkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoZm4sIGRlbGF5LCBhcmdzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWxheTtcbiAgICB9O1xufVxuLyoqXG4gKiBDb252ZXJ0cyAnc3RhcnQnIHRvICdsZWZ0JywgJ2VuZCcgdG8gJ3JpZ2h0JyBhbmQgb3RoZXJzIHRvICdjZW50ZXInXG4gKiBAcHJpdmF0ZVxuICovIGNvbnN0IF90b0xlZnRSaWdodENlbnRlciA9IChhbGlnbik9PmFsaWduID09PSAnc3RhcnQnID8gJ2xlZnQnIDogYWxpZ24gPT09ICdlbmQnID8gJ3JpZ2h0JyA6ICdjZW50ZXInO1xuLyoqXG4gKiBSZXR1cm5zIGBzdGFydGAsIGBlbmRgIG9yIGAoc3RhcnQgKyBlbmQpIC8gMmAgZGVwZW5kaW5nIG9uIGBhbGlnbmAuIERlZmF1bHRzIHRvIGBjZW50ZXJgXG4gKiBAcHJpdmF0ZVxuICovIGNvbnN0IF9hbGlnblN0YXJ0RW5kID0gKGFsaWduLCBzdGFydCwgZW5kKT0+YWxpZ24gPT09ICdzdGFydCcgPyBzdGFydCA6IGFsaWduID09PSAnZW5kJyA/IGVuZCA6IChzdGFydCArIGVuZCkgLyAyO1xuLyoqXG4gKiBSZXR1cm5zIGBsZWZ0YCwgYHJpZ2h0YCBvciBgKGxlZnQgKyByaWdodCkgLyAyYCBkZXBlbmRpbmcgb24gYGFsaWduYC4gRGVmYXVsdHMgdG8gYGxlZnRgXG4gKiBAcHJpdmF0ZVxuICovIGNvbnN0IF90ZXh0WCA9IChhbGlnbiwgbGVmdCwgcmlnaHQsIHJ0bCk9PntcbiAgICBjb25zdCBjaGVjayA9IHJ0bCA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gICAgcmV0dXJuIGFsaWduID09PSBjaGVjayA/IHJpZ2h0IDogYWxpZ24gPT09ICdjZW50ZXInID8gKGxlZnQgKyByaWdodCkgLyAyIDogbGVmdDtcbn07XG4vKipcbiAqIFJldHVybiBzdGFydCBhbmQgY291bnQgb2YgdmlzaWJsZSBwb2ludHMuXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9nZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzKG1ldGEsIHBvaW50cywgYW5pbWF0aW9uc0Rpc2FibGVkKSB7XG4gICAgY29uc3QgcG9pbnRDb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gICAgbGV0IHN0YXJ0ID0gMDtcbiAgICBsZXQgY291bnQgPSBwb2ludENvdW50O1xuICAgIGlmIChtZXRhLl9zb3J0ZWQpIHtcbiAgICAgICAgY29uc3QgeyBpU2NhbGUgLCBfcGFyc2VkICB9ID0gbWV0YTtcbiAgICAgICAgY29uc3QgYXhpcyA9IGlTY2FsZS5heGlzO1xuICAgICAgICBjb25zdCB7IG1pbiAsIG1heCAsIG1pbkRlZmluZWQgLCBtYXhEZWZpbmVkICB9ID0gaVNjYWxlLmdldFVzZXJCb3VuZHMoKTtcbiAgICAgICAgaWYgKG1pbkRlZmluZWQpIHtcbiAgICAgICAgICAgIHN0YXJ0ID0gX2xpbWl0VmFsdWUoTWF0aC5taW4oLy8gQHRzLWV4cGVjdC1lcnJvciBOZWVkIHRvIHR5cGUgX3BhcnNlZFxuICAgICAgICAgICAgX2xvb2t1cEJ5S2V5KF9wYXJzZWQsIGF4aXMsIG1pbikubG8sIC8vIEB0cy1leHBlY3QtZXJyb3IgTmVlZCB0byBmaXggdHlwZXMgb24gX2xvb2t1cEJ5S2V5XG4gICAgICAgICAgICBhbmltYXRpb25zRGlzYWJsZWQgPyBwb2ludENvdW50IDogX2xvb2t1cEJ5S2V5KHBvaW50cywgYXhpcywgaVNjYWxlLmdldFBpeGVsRm9yVmFsdWUobWluKSkubG8pLCAwLCBwb2ludENvdW50IC0gMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1heERlZmluZWQpIHtcbiAgICAgICAgICAgIGNvdW50ID0gX2xpbWl0VmFsdWUoTWF0aC5tYXgoLy8gQHRzLWV4cGVjdC1lcnJvciBOZWVkIHRvIHR5cGUgX3BhcnNlZFxuICAgICAgICAgICAgX2xvb2t1cEJ5S2V5KF9wYXJzZWQsIGlTY2FsZS5heGlzLCBtYXgsIHRydWUpLmhpICsgMSwgLy8gQHRzLWV4cGVjdC1lcnJvciBOZWVkIHRvIGZpeCB0eXBlcyBvbiBfbG9va3VwQnlLZXlcbiAgICAgICAgICAgIGFuaW1hdGlvbnNEaXNhYmxlZCA/IDAgOiBfbG9va3VwQnlLZXkocG9pbnRzLCBheGlzLCBpU2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShtYXgpLCB0cnVlKS5oaSArIDEpLCBzdGFydCwgcG9pbnRDb3VudCkgLSBzdGFydDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvdW50ID0gcG9pbnRDb3VudCAtIHN0YXJ0O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0LFxuICAgICAgICBjb3VudFxuICAgIH07XG59XG4vKipcbiAqIENoZWNrcyBpZiB0aGUgc2NhbGUgcmFuZ2VzIGhhdmUgY2hhbmdlZC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBtZXRhIC0gZGF0YXNldCBtZXRhLlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9zY2FsZVJhbmdlc0NoYW5nZWQobWV0YSkge1xuICAgIGNvbnN0IHsgeFNjYWxlICwgeVNjYWxlICwgX3NjYWxlUmFuZ2VzICB9ID0gbWV0YTtcbiAgICBjb25zdCBuZXdSYW5nZXMgPSB7XG4gICAgICAgIHhtaW46IHhTY2FsZS5taW4sXG4gICAgICAgIHhtYXg6IHhTY2FsZS5tYXgsXG4gICAgICAgIHltaW46IHlTY2FsZS5taW4sXG4gICAgICAgIHltYXg6IHlTY2FsZS5tYXhcbiAgICB9O1xuICAgIGlmICghX3NjYWxlUmFuZ2VzKSB7XG4gICAgICAgIG1ldGEuX3NjYWxlUmFuZ2VzID0gbmV3UmFuZ2VzO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgY2hhbmdlZCA9IF9zY2FsZVJhbmdlcy54bWluICE9PSB4U2NhbGUubWluIHx8IF9zY2FsZVJhbmdlcy54bWF4ICE9PSB4U2NhbGUubWF4IHx8IF9zY2FsZVJhbmdlcy55bWluICE9PSB5U2NhbGUubWluIHx8IF9zY2FsZVJhbmdlcy55bWF4ICE9PSB5U2NhbGUubWF4O1xuICAgIE9iamVjdC5hc3NpZ24oX3NjYWxlUmFuZ2VzLCBuZXdSYW5nZXMpO1xuICAgIHJldHVybiBjaGFuZ2VkO1xufVxuXG5jb25zdCBhdEVkZ2UgPSAodCk9PnQgPT09IDAgfHwgdCA9PT0gMTtcbmNvbnN0IGVsYXN0aWNJbiA9ICh0LCBzLCBwKT0+LShNYXRoLnBvdygyLCAxMCAqICh0IC09IDEpKSAqIE1hdGguc2luKCh0IC0gcykgKiBUQVUgLyBwKSk7XG5jb25zdCBlbGFzdGljT3V0ID0gKHQsIHMsIHApPT5NYXRoLnBvdygyLCAtMTAgKiB0KSAqIE1hdGguc2luKCh0IC0gcykgKiBUQVUgLyBwKSArIDE7XG4vKipcbiAqIEVhc2luZyBmdW5jdGlvbnMgYWRhcHRlZCBmcm9tIFJvYmVydCBQZW5uZXIncyBlYXNpbmcgZXF1YXRpb25zLlxuICogQG5hbWVzcGFjZSBDaGFydC5oZWxwZXJzLmVhc2luZy5lZmZlY3RzXG4gKiBAc2VlIGh0dHA6Ly93d3cucm9iZXJ0cGVubmVyLmNvbS9lYXNpbmcvXG4gKi8gY29uc3QgZWZmZWN0cyA9IHtcbiAgICBsaW5lYXI6ICh0KT0+dCxcbiAgICBlYXNlSW5RdWFkOiAodCk9PnQgKiB0LFxuICAgIGVhc2VPdXRRdWFkOiAodCk9Pi10ICogKHQgLSAyKSxcbiAgICBlYXNlSW5PdXRRdWFkOiAodCk9Pih0IC89IDAuNSkgPCAxID8gMC41ICogdCAqIHQgOiAtMC41ICogKC0tdCAqICh0IC0gMikgLSAxKSxcbiAgICBlYXNlSW5DdWJpYzogKHQpPT50ICogdCAqIHQsXG4gICAgZWFzZU91dEN1YmljOiAodCk9Pih0IC09IDEpICogdCAqIHQgKyAxLFxuICAgIGVhc2VJbk91dEN1YmljOiAodCk9Pih0IC89IDAuNSkgPCAxID8gMC41ICogdCAqIHQgKiB0IDogMC41ICogKCh0IC09IDIpICogdCAqIHQgKyAyKSxcbiAgICBlYXNlSW5RdWFydDogKHQpPT50ICogdCAqIHQgKiB0LFxuICAgIGVhc2VPdXRRdWFydDogKHQpPT4tKCh0IC09IDEpICogdCAqIHQgKiB0IC0gMSksXG4gICAgZWFzZUluT3V0UXVhcnQ6ICh0KT0+KHQgLz0gMC41KSA8IDEgPyAwLjUgKiB0ICogdCAqIHQgKiB0IDogLTAuNSAqICgodCAtPSAyKSAqIHQgKiB0ICogdCAtIDIpLFxuICAgIGVhc2VJblF1aW50OiAodCk9PnQgKiB0ICogdCAqIHQgKiB0LFxuICAgIGVhc2VPdXRRdWludDogKHQpPT4odCAtPSAxKSAqIHQgKiB0ICogdCAqIHQgKyAxLFxuICAgIGVhc2VJbk91dFF1aW50OiAodCk9Pih0IC89IDAuNSkgPCAxID8gMC41ICogdCAqIHQgKiB0ICogdCAqIHQgOiAwLjUgKiAoKHQgLT0gMikgKiB0ICogdCAqIHQgKiB0ICsgMiksXG4gICAgZWFzZUluU2luZTogKHQpPT4tTWF0aC5jb3ModCAqIEhBTEZfUEkpICsgMSxcbiAgICBlYXNlT3V0U2luZTogKHQpPT5NYXRoLnNpbih0ICogSEFMRl9QSSksXG4gICAgZWFzZUluT3V0U2luZTogKHQpPT4tMC41ICogKE1hdGguY29zKFBJICogdCkgLSAxKSxcbiAgICBlYXNlSW5FeHBvOiAodCk9PnQgPT09IDAgPyAwIDogTWF0aC5wb3coMiwgMTAgKiAodCAtIDEpKSxcbiAgICBlYXNlT3V0RXhwbzogKHQpPT50ID09PSAxID8gMSA6IC1NYXRoLnBvdygyLCAtMTAgKiB0KSArIDEsXG4gICAgZWFzZUluT3V0RXhwbzogKHQpPT5hdEVkZ2UodCkgPyB0IDogdCA8IDAuNSA/IDAuNSAqIE1hdGgucG93KDIsIDEwICogKHQgKiAyIC0gMSkpIDogMC41ICogKC1NYXRoLnBvdygyLCAtMTAgKiAodCAqIDIgLSAxKSkgKyAyKSxcbiAgICBlYXNlSW5DaXJjOiAodCk9PnQgPj0gMSA/IHQgOiAtKE1hdGguc3FydCgxIC0gdCAqIHQpIC0gMSksXG4gICAgZWFzZU91dENpcmM6ICh0KT0+TWF0aC5zcXJ0KDEgLSAodCAtPSAxKSAqIHQpLFxuICAgIGVhc2VJbk91dENpcmM6ICh0KT0+KHQgLz0gMC41KSA8IDEgPyAtMC41ICogKE1hdGguc3FydCgxIC0gdCAqIHQpIC0gMSkgOiAwLjUgKiAoTWF0aC5zcXJ0KDEgLSAodCAtPSAyKSAqIHQpICsgMSksXG4gICAgZWFzZUluRWxhc3RpYzogKHQpPT5hdEVkZ2UodCkgPyB0IDogZWxhc3RpY0luKHQsIDAuMDc1LCAwLjMpLFxuICAgIGVhc2VPdXRFbGFzdGljOiAodCk9PmF0RWRnZSh0KSA/IHQgOiBlbGFzdGljT3V0KHQsIDAuMDc1LCAwLjMpLFxuICAgIGVhc2VJbk91dEVsYXN0aWMgKHQpIHtcbiAgICAgICAgY29uc3QgcyA9IDAuMTEyNTtcbiAgICAgICAgY29uc3QgcCA9IDAuNDU7XG4gICAgICAgIHJldHVybiBhdEVkZ2UodCkgPyB0IDogdCA8IDAuNSA/IDAuNSAqIGVsYXN0aWNJbih0ICogMiwgcywgcCkgOiAwLjUgKyAwLjUgKiBlbGFzdGljT3V0KHQgKiAyIC0gMSwgcywgcCk7XG4gICAgfSxcbiAgICBlYXNlSW5CYWNrICh0KSB7XG4gICAgICAgIGNvbnN0IHMgPSAxLjcwMTU4O1xuICAgICAgICByZXR1cm4gdCAqIHQgKiAoKHMgKyAxKSAqIHQgLSBzKTtcbiAgICB9LFxuICAgIGVhc2VPdXRCYWNrICh0KSB7XG4gICAgICAgIGNvbnN0IHMgPSAxLjcwMTU4O1xuICAgICAgICByZXR1cm4gKHQgLT0gMSkgKiB0ICogKChzICsgMSkgKiB0ICsgcykgKyAxO1xuICAgIH0sXG4gICAgZWFzZUluT3V0QmFjayAodCkge1xuICAgICAgICBsZXQgcyA9IDEuNzAxNTg7XG4gICAgICAgIGlmICgodCAvPSAwLjUpIDwgMSkge1xuICAgICAgICAgICAgcmV0dXJuIDAuNSAqICh0ICogdCAqICgoKHMgKj0gMS41MjUpICsgMSkgKiB0IC0gcykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwLjUgKiAoKHQgLT0gMikgKiB0ICogKCgocyAqPSAxLjUyNSkgKyAxKSAqIHQgKyBzKSArIDIpO1xuICAgIH0sXG4gICAgZWFzZUluQm91bmNlOiAodCk9PjEgLSBlZmZlY3RzLmVhc2VPdXRCb3VuY2UoMSAtIHQpLFxuICAgIGVhc2VPdXRCb3VuY2UgKHQpIHtcbiAgICAgICAgY29uc3QgbSA9IDcuNTYyNTtcbiAgICAgICAgY29uc3QgZCA9IDIuNzU7XG4gICAgICAgIGlmICh0IDwgMSAvIGQpIHtcbiAgICAgICAgICAgIHJldHVybiBtICogdCAqIHQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHQgPCAyIC8gZCkge1xuICAgICAgICAgICAgcmV0dXJuIG0gKiAodCAtPSAxLjUgLyBkKSAqIHQgKyAwLjc1O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0IDwgMi41IC8gZCkge1xuICAgICAgICAgICAgcmV0dXJuIG0gKiAodCAtPSAyLjI1IC8gZCkgKiB0ICsgMC45Mzc1O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtICogKHQgLT0gMi42MjUgLyBkKSAqIHQgKyAwLjk4NDM3NTtcbiAgICB9LFxuICAgIGVhc2VJbk91dEJvdW5jZTogKHQpPT50IDwgMC41ID8gZWZmZWN0cy5lYXNlSW5Cb3VuY2UodCAqIDIpICogMC41IDogZWZmZWN0cy5lYXNlT3V0Qm91bmNlKHQgKiAyIC0gMSkgKiAwLjUgKyAwLjVcbn07XG5cbmZ1bmN0aW9uIGlzUGF0dGVybk9yR3JhZGllbnQodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICBjb25zdCB0eXBlID0gdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgcmV0dXJuIHR5cGUgPT09ICdbb2JqZWN0IENhbnZhc1BhdHRlcm5dJyB8fCB0eXBlID09PSAnW29iamVjdCBDYW52YXNHcmFkaWVudF0nO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBjb2xvcih2YWx1ZSkge1xuICAgIHJldHVybiBpc1BhdHRlcm5PckdyYWRpZW50KHZhbHVlKSA/IHZhbHVlIDogbmV3IENvbG9yKHZhbHVlKTtcbn1cbmZ1bmN0aW9uIGdldEhvdmVyQ29sb3IodmFsdWUpIHtcbiAgICByZXR1cm4gaXNQYXR0ZXJuT3JHcmFkaWVudCh2YWx1ZSkgPyB2YWx1ZSA6IG5ldyBDb2xvcih2YWx1ZSkuc2F0dXJhdGUoMC41KS5kYXJrZW4oMC4xKS5oZXhTdHJpbmcoKTtcbn1cblxuY29uc3QgbnVtYmVycyA9IFtcbiAgICAneCcsXG4gICAgJ3knLFxuICAgICdib3JkZXJXaWR0aCcsXG4gICAgJ3JhZGl1cycsXG4gICAgJ3RlbnNpb24nXG5dO1xuY29uc3QgY29sb3JzID0gW1xuICAgICdjb2xvcicsXG4gICAgJ2JvcmRlckNvbG9yJyxcbiAgICAnYmFja2dyb3VuZENvbG9yJ1xuXTtcbmZ1bmN0aW9uIGFwcGx5QW5pbWF0aW9uc0RlZmF1bHRzKGRlZmF1bHRzKSB7XG4gICAgZGVmYXVsdHMuc2V0KCdhbmltYXRpb24nLCB7XG4gICAgICAgIGRlbGF5OiB1bmRlZmluZWQsXG4gICAgICAgIGR1cmF0aW9uOiAxMDAwLFxuICAgICAgICBlYXNpbmc6ICdlYXNlT3V0UXVhcnQnLFxuICAgICAgICBmbjogdW5kZWZpbmVkLFxuICAgICAgICBmcm9tOiB1bmRlZmluZWQsXG4gICAgICAgIGxvb3A6IHVuZGVmaW5lZCxcbiAgICAgICAgdG86IHVuZGVmaW5lZCxcbiAgICAgICAgdHlwZTogdW5kZWZpbmVkXG4gICAgfSk7XG4gICAgZGVmYXVsdHMuZGVzY3JpYmUoJ2FuaW1hdGlvbicsIHtcbiAgICAgICAgX2ZhbGxiYWNrOiBmYWxzZSxcbiAgICAgICAgX2luZGV4YWJsZTogZmFsc2UsXG4gICAgICAgIF9zY3JpcHRhYmxlOiAobmFtZSk9Pm5hbWUgIT09ICdvblByb2dyZXNzJyAmJiBuYW1lICE9PSAnb25Db21wbGV0ZScgJiYgbmFtZSAhPT0gJ2ZuJ1xuICAgIH0pO1xuICAgIGRlZmF1bHRzLnNldCgnYW5pbWF0aW9ucycsIHtcbiAgICAgICAgY29sb3JzOiB7XG4gICAgICAgICAgICB0eXBlOiAnY29sb3InLFxuICAgICAgICAgICAgcHJvcGVydGllczogY29sb3JzXG4gICAgICAgIH0sXG4gICAgICAgIG51bWJlcnM6IHtcbiAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICAgICAgcHJvcGVydGllczogbnVtYmVyc1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgZGVmYXVsdHMuZGVzY3JpYmUoJ2FuaW1hdGlvbnMnLCB7XG4gICAgICAgIF9mYWxsYmFjazogJ2FuaW1hdGlvbidcbiAgICB9KTtcbiAgICBkZWZhdWx0cy5zZXQoJ3RyYW5zaXRpb25zJywge1xuICAgICAgICBhY3RpdmU6IHtcbiAgICAgICAgICAgIGFuaW1hdGlvbjoge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiA0MDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVzaXplOiB7XG4gICAgICAgICAgICBhbmltYXRpb246IHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogMFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzaG93OiB7XG4gICAgICAgICAgICBhbmltYXRpb25zOiB7XG4gICAgICAgICAgICAgICAgY29sb3JzOiB7XG4gICAgICAgICAgICAgICAgICAgIGZyb206ICd0cmFuc3BhcmVudCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHZpc2libGU6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgaGlkZToge1xuICAgICAgICAgICAgYW5pbWF0aW9uczoge1xuICAgICAgICAgICAgICAgIGNvbG9yczoge1xuICAgICAgICAgICAgICAgICAgICB0bzogJ3RyYW5zcGFyZW50J1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdmlzaWJsZToge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICAgICAgICAgICAgICAgIGVhc2luZzogJ2xpbmVhcicsXG4gICAgICAgICAgICAgICAgICAgIGZuOiAodik9PnYgfCAwXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5TGF5b3V0c0RlZmF1bHRzKGRlZmF1bHRzKSB7XG4gICAgZGVmYXVsdHMuc2V0KCdsYXlvdXQnLCB7XG4gICAgICAgIGF1dG9QYWRkaW5nOiB0cnVlLFxuICAgICAgICBwYWRkaW5nOiB7XG4gICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgICAgIGxlZnQ6IDBcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5jb25zdCBpbnRsQ2FjaGUgPSBuZXcgTWFwKCk7XG5mdW5jdGlvbiBnZXROdW1iZXJGb3JtYXQobG9jYWxlLCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgY29uc3QgY2FjaGVLZXkgPSBsb2NhbGUgKyBKU09OLnN0cmluZ2lmeShvcHRpb25zKTtcbiAgICBsZXQgZm9ybWF0dGVyID0gaW50bENhY2hlLmdldChjYWNoZUtleSk7XG4gICAgaWYgKCFmb3JtYXR0ZXIpIHtcbiAgICAgICAgZm9ybWF0dGVyID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KGxvY2FsZSwgb3B0aW9ucyk7XG4gICAgICAgIGludGxDYWNoZS5zZXQoY2FjaGVLZXksIGZvcm1hdHRlcik7XG4gICAgfVxuICAgIHJldHVybiBmb3JtYXR0ZXI7XG59XG5mdW5jdGlvbiBmb3JtYXROdW1iZXIobnVtLCBsb2NhbGUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gZ2V0TnVtYmVyRm9ybWF0KGxvY2FsZSwgb3B0aW9ucykuZm9ybWF0KG51bSk7XG59XG5cbmNvbnN0IGZvcm1hdHRlcnMgPSB7XG4gdmFsdWVzICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgPyAgdmFsdWUgOiAnJyArIHZhbHVlO1xuICAgIH0sXG4gbnVtZXJpYyAodGlja1ZhbHVlLCBpbmRleCwgdGlja3MpIHtcbiAgICAgICAgaWYgKHRpY2tWYWx1ZSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuICcwJztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsb2NhbGUgPSB0aGlzLmNoYXJ0Lm9wdGlvbnMubG9jYWxlO1xuICAgICAgICBsZXQgbm90YXRpb247XG4gICAgICAgIGxldCBkZWx0YSA9IHRpY2tWYWx1ZTtcbiAgICAgICAgaWYgKHRpY2tzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IG1heFRpY2sgPSBNYXRoLm1heChNYXRoLmFicyh0aWNrc1swXS52YWx1ZSksIE1hdGguYWJzKHRpY2tzW3RpY2tzLmxlbmd0aCAtIDFdLnZhbHVlKSk7XG4gICAgICAgICAgICBpZiAobWF4VGljayA8IDFlLTQgfHwgbWF4VGljayA+IDFlKzE1KSB7XG4gICAgICAgICAgICAgICAgbm90YXRpb24gPSAnc2NpZW50aWZpYyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWx0YSA9IGNhbGN1bGF0ZURlbHRhKHRpY2tWYWx1ZSwgdGlja3MpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxvZ0RlbHRhID0gbG9nMTAoTWF0aC5hYnMoZGVsdGEpKTtcbiAgICAgICAgY29uc3QgbnVtRGVjaW1hbCA9IGlzTmFOKGxvZ0RlbHRhKSA/IDEgOiBNYXRoLm1heChNYXRoLm1pbigtMSAqIE1hdGguZmxvb3IobG9nRGVsdGEpLCAyMCksIDApO1xuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgbm90YXRpb24sXG4gICAgICAgICAgICBtaW5pbXVtRnJhY3Rpb25EaWdpdHM6IG51bURlY2ltYWwsXG4gICAgICAgICAgICBtYXhpbXVtRnJhY3Rpb25EaWdpdHM6IG51bURlY2ltYWxcbiAgICAgICAgfTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihvcHRpb25zLCB0aGlzLm9wdGlvbnMudGlja3MuZm9ybWF0KTtcbiAgICAgICAgcmV0dXJuIGZvcm1hdE51bWJlcih0aWNrVmFsdWUsIGxvY2FsZSwgb3B0aW9ucyk7XG4gICAgfSxcbiBsb2dhcml0aG1pYyAodGlja1ZhbHVlLCBpbmRleCwgdGlja3MpIHtcbiAgICAgICAgaWYgKHRpY2tWYWx1ZSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuICcwJztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZW1haW4gPSB0aWNrc1tpbmRleF0uc2lnbmlmaWNhbmQgfHwgdGlja1ZhbHVlIC8gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IobG9nMTAodGlja1ZhbHVlKSkpO1xuICAgICAgICBpZiAoW1xuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMTVcbiAgICAgICAgXS5pbmNsdWRlcyhyZW1haW4pIHx8IGluZGV4ID4gMC44ICogdGlja3MubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0dGVycy5udW1lcmljLmNhbGwodGhpcywgdGlja1ZhbHVlLCBpbmRleCwgdGlja3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG59O1xuZnVuY3Rpb24gY2FsY3VsYXRlRGVsdGEodGlja1ZhbHVlLCB0aWNrcykge1xuICAgIGxldCBkZWx0YSA9IHRpY2tzLmxlbmd0aCA+IDMgPyB0aWNrc1syXS52YWx1ZSAtIHRpY2tzWzFdLnZhbHVlIDogdGlja3NbMV0udmFsdWUgLSB0aWNrc1swXS52YWx1ZTtcbiAgICBpZiAoTWF0aC5hYnMoZGVsdGEpID49IDEgJiYgdGlja1ZhbHVlICE9PSBNYXRoLmZsb29yKHRpY2tWYWx1ZSkpIHtcbiAgICAgICAgZGVsdGEgPSB0aWNrVmFsdWUgLSBNYXRoLmZsb29yKHRpY2tWYWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBkZWx0YTtcbn1cbiB2YXIgVGlja3MgPSB7XG4gICAgZm9ybWF0dGVyc1xufTtcblxuZnVuY3Rpb24gYXBwbHlTY2FsZURlZmF1bHRzKGRlZmF1bHRzKSB7XG4gICAgZGVmYXVsdHMuc2V0KCdzY2FsZScsIHtcbiAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgb2Zmc2V0OiBmYWxzZSxcbiAgICAgICAgcmV2ZXJzZTogZmFsc2UsXG4gICAgICAgIGJlZ2luQXRaZXJvOiBmYWxzZSxcbiBib3VuZHM6ICd0aWNrcycsXG4gZ3JhY2U6IDAsXG4gICAgICAgIGdyaWQ6IHtcbiAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgICAgICBsaW5lV2lkdGg6IDEsXG4gICAgICAgICAgICBkcmF3T25DaGFydEFyZWE6IHRydWUsXG4gICAgICAgICAgICBkcmF3VGlja3M6IHRydWUsXG4gICAgICAgICAgICB0aWNrTGVuZ3RoOiA4LFxuICAgICAgICAgICAgdGlja1dpZHRoOiAoX2N0eCwgb3B0aW9ucyk9Pm9wdGlvbnMubGluZVdpZHRoLFxuICAgICAgICAgICAgdGlja0NvbG9yOiAoX2N0eCwgb3B0aW9ucyk9Pm9wdGlvbnMuY29sb3IsXG4gICAgICAgICAgICBvZmZzZXQ6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIGJvcmRlcjoge1xuICAgICAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgICAgIGRhc2g6IFtdLFxuICAgICAgICAgICAgZGFzaE9mZnNldDogMC4wLFxuICAgICAgICAgICAgd2lkdGg6IDFcbiAgICAgICAgfSxcbiAgICAgICAgdGl0bGU6IHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGZhbHNlLFxuICAgICAgICAgICAgdGV4dDogJycsXG4gICAgICAgICAgICBwYWRkaW5nOiB7XG4gICAgICAgICAgICAgICAgdG9wOiA0LFxuICAgICAgICAgICAgICAgIGJvdHRvbTogNFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0aWNrczoge1xuICAgICAgICAgICAgbWluUm90YXRpb246IDAsXG4gICAgICAgICAgICBtYXhSb3RhdGlvbjogNTAsXG4gICAgICAgICAgICBtaXJyb3I6IGZhbHNlLFxuICAgICAgICAgICAgdGV4dFN0cm9rZVdpZHRoOiAwLFxuICAgICAgICAgICAgdGV4dFN0cm9rZUNvbG9yOiAnJyxcbiAgICAgICAgICAgIHBhZGRpbmc6IDMsXG4gICAgICAgICAgICBkaXNwbGF5OiB0cnVlLFxuICAgICAgICAgICAgYXV0b1NraXA6IHRydWUsXG4gICAgICAgICAgICBhdXRvU2tpcFBhZGRpbmc6IDMsXG4gICAgICAgICAgICBsYWJlbE9mZnNldDogMCxcbiAgICAgICAgICAgIGNhbGxiYWNrOiBUaWNrcy5mb3JtYXR0ZXJzLnZhbHVlcyxcbiAgICAgICAgICAgIG1pbm9yOiB7fSxcbiAgICAgICAgICAgIG1ham9yOiB7fSxcbiAgICAgICAgICAgIGFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgICAgIGNyb3NzQWxpZ246ICduZWFyJyxcbiAgICAgICAgICAgIHNob3dMYWJlbEJhY2tkcm9wOiBmYWxzZSxcbiAgICAgICAgICAgIGJhY2tkcm9wQ29sb3I6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNzUpJyxcbiAgICAgICAgICAgIGJhY2tkcm9wUGFkZGluZzogMlxuICAgICAgICB9XG4gICAgfSk7XG4gICAgZGVmYXVsdHMucm91dGUoJ3NjYWxlLnRpY2tzJywgJ2NvbG9yJywgJycsICdjb2xvcicpO1xuICAgIGRlZmF1bHRzLnJvdXRlKCdzY2FsZS5ncmlkJywgJ2NvbG9yJywgJycsICdib3JkZXJDb2xvcicpO1xuICAgIGRlZmF1bHRzLnJvdXRlKCdzY2FsZS5ib3JkZXInLCAnY29sb3InLCAnJywgJ2JvcmRlckNvbG9yJyk7XG4gICAgZGVmYXVsdHMucm91dGUoJ3NjYWxlLnRpdGxlJywgJ2NvbG9yJywgJycsICdjb2xvcicpO1xuICAgIGRlZmF1bHRzLmRlc2NyaWJlKCdzY2FsZScsIHtcbiAgICAgICAgX2ZhbGxiYWNrOiBmYWxzZSxcbiAgICAgICAgX3NjcmlwdGFibGU6IChuYW1lKT0+IW5hbWUuc3RhcnRzV2l0aCgnYmVmb3JlJykgJiYgIW5hbWUuc3RhcnRzV2l0aCgnYWZ0ZXInKSAmJiBuYW1lICE9PSAnY2FsbGJhY2snICYmIG5hbWUgIT09ICdwYXJzZXInLFxuICAgICAgICBfaW5kZXhhYmxlOiAobmFtZSk9Pm5hbWUgIT09ICdib3JkZXJEYXNoJyAmJiBuYW1lICE9PSAndGlja0JvcmRlckRhc2gnICYmIG5hbWUgIT09ICdkYXNoJ1xuICAgIH0pO1xuICAgIGRlZmF1bHRzLmRlc2NyaWJlKCdzY2FsZXMnLCB7XG4gICAgICAgIF9mYWxsYmFjazogJ3NjYWxlJ1xuICAgIH0pO1xuICAgIGRlZmF1bHRzLmRlc2NyaWJlKCdzY2FsZS50aWNrcycsIHtcbiAgICAgICAgX3NjcmlwdGFibGU6IChuYW1lKT0+bmFtZSAhPT0gJ2JhY2tkcm9wUGFkZGluZycgJiYgbmFtZSAhPT0gJ2NhbGxiYWNrJyxcbiAgICAgICAgX2luZGV4YWJsZTogKG5hbWUpPT5uYW1lICE9PSAnYmFja2Ryb3BQYWRkaW5nJ1xuICAgIH0pO1xufVxuXG5jb25zdCBvdmVycmlkZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuY29uc3QgZGVzY3JpcHRvcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIGZ1bmN0aW9uIGdldFNjb3BlJDEobm9kZSwga2V5KSB7XG4gICAgaWYgKCFrZXkpIHtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICAgIGNvbnN0IGtleXMgPSBrZXkuc3BsaXQoJy4nKTtcbiAgICBmb3IobGV0IGkgPSAwLCBuID0ga2V5cy5sZW5ndGg7IGkgPCBuOyArK2kpe1xuICAgICAgICBjb25zdCBrID0ga2V5c1tpXTtcbiAgICAgICAgbm9kZSA9IG5vZGVba10gfHwgKG5vZGVba10gPSBPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGU7XG59XG5mdW5jdGlvbiBzZXQocm9vdCwgc2NvcGUsIHZhbHVlcykge1xuICAgIGlmICh0eXBlb2Ygc2NvcGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBtZXJnZShnZXRTY29wZSQxKHJvb3QsIHNjb3BlKSwgdmFsdWVzKTtcbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlKGdldFNjb3BlJDEocm9vdCwgJycpLCBzY29wZSk7XG59XG4gY2xhc3MgRGVmYXVsdHMge1xuICAgIGNvbnN0cnVjdG9yKF9kZXNjcmlwdG9ycywgX2FwcGxpZXJzKXtcbiAgICAgICAgdGhpcy5hbmltYXRpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuYmFja2dyb3VuZENvbG9yID0gJ3JnYmEoMCwwLDAsMC4xKSc7XG4gICAgICAgIHRoaXMuYm9yZGVyQ29sb3IgPSAncmdiYSgwLDAsMCwwLjEpJztcbiAgICAgICAgdGhpcy5jb2xvciA9ICcjNjY2JztcbiAgICAgICAgdGhpcy5kYXRhc2V0cyA9IHt9O1xuICAgICAgICB0aGlzLmRldmljZVBpeGVsUmF0aW8gPSAoY29udGV4dCk9PmNvbnRleHQuY2hhcnQucGxhdGZvcm0uZ2V0RGV2aWNlUGl4ZWxSYXRpbygpO1xuICAgICAgICB0aGlzLmVsZW1lbnRzID0ge307XG4gICAgICAgIHRoaXMuZXZlbnRzID0gW1xuICAgICAgICAgICAgJ21vdXNlbW92ZScsXG4gICAgICAgICAgICAnbW91c2VvdXQnLFxuICAgICAgICAgICAgJ2NsaWNrJyxcbiAgICAgICAgICAgICd0b3VjaHN0YXJ0JyxcbiAgICAgICAgICAgICd0b3VjaG1vdmUnXG4gICAgICAgIF07XG4gICAgICAgIHRoaXMuZm9udCA9IHtcbiAgICAgICAgICAgIGZhbWlseTogXCInSGVsdmV0aWNhIE5ldWUnLCAnSGVsdmV0aWNhJywgJ0FyaWFsJywgc2Fucy1zZXJpZlwiLFxuICAgICAgICAgICAgc2l6ZTogMTIsXG4gICAgICAgICAgICBzdHlsZTogJ25vcm1hbCcsXG4gICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjIsXG4gICAgICAgICAgICB3ZWlnaHQ6IG51bGxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5ob3ZlciA9IHt9O1xuICAgICAgICB0aGlzLmhvdmVyQmFja2dyb3VuZENvbG9yID0gKGN0eCwgb3B0aW9ucyk9PmdldEhvdmVyQ29sb3Iob3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IpO1xuICAgICAgICB0aGlzLmhvdmVyQm9yZGVyQ29sb3IgPSAoY3R4LCBvcHRpb25zKT0+Z2V0SG92ZXJDb2xvcihvcHRpb25zLmJvcmRlckNvbG9yKTtcbiAgICAgICAgdGhpcy5ob3ZlckNvbG9yID0gKGN0eCwgb3B0aW9ucyk9PmdldEhvdmVyQ29sb3Iob3B0aW9ucy5jb2xvcik7XG4gICAgICAgIHRoaXMuaW5kZXhBeGlzID0gJ3gnO1xuICAgICAgICB0aGlzLmludGVyYWN0aW9uID0ge1xuICAgICAgICAgICAgbW9kZTogJ25lYXJlc3QnLFxuICAgICAgICAgICAgaW50ZXJzZWN0OiB0cnVlLFxuICAgICAgICAgICAgaW5jbHVkZUludmlzaWJsZTogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5tYWludGFpbkFzcGVjdFJhdGlvID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5vbkhvdmVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5vbkNsaWNrID0gbnVsbDtcbiAgICAgICAgdGhpcy5wYXJzaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5wbHVnaW5zID0ge307XG4gICAgICAgIHRoaXMucmVzcG9uc2l2ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuc2NhbGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuc2NhbGVzID0ge307XG4gICAgICAgIHRoaXMuc2hvd0xpbmUgPSB0cnVlO1xuICAgICAgICB0aGlzLmRyYXdBY3RpdmVFbGVtZW50c09uVG9wID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kZXNjcmliZShfZGVzY3JpcHRvcnMpO1xuICAgICAgICB0aGlzLmFwcGx5KF9hcHBsaWVycyk7XG4gICAgfVxuIHNldChzY29wZSwgdmFsdWVzKSB7XG4gICAgICAgIHJldHVybiBzZXQodGhpcywgc2NvcGUsIHZhbHVlcyk7XG4gICAgfVxuIGdldChzY29wZSkge1xuICAgICAgICByZXR1cm4gZ2V0U2NvcGUkMSh0aGlzLCBzY29wZSk7XG4gICAgfVxuIGRlc2NyaWJlKHNjb3BlLCB2YWx1ZXMpIHtcbiAgICAgICAgcmV0dXJuIHNldChkZXNjcmlwdG9ycywgc2NvcGUsIHZhbHVlcyk7XG4gICAgfVxuICAgIG92ZXJyaWRlKHNjb3BlLCB2YWx1ZXMpIHtcbiAgICAgICAgcmV0dXJuIHNldChvdmVycmlkZXMsIHNjb3BlLCB2YWx1ZXMpO1xuICAgIH1cbiByb3V0ZShzY29wZSwgbmFtZSwgdGFyZ2V0U2NvcGUsIHRhcmdldE5hbWUpIHtcbiAgICAgICAgY29uc3Qgc2NvcGVPYmplY3QgPSBnZXRTY29wZSQxKHRoaXMsIHNjb3BlKTtcbiAgICAgICAgY29uc3QgdGFyZ2V0U2NvcGVPYmplY3QgPSBnZXRTY29wZSQxKHRoaXMsIHRhcmdldFNjb3BlKTtcbiAgICAgICAgY29uc3QgcHJpdmF0ZU5hbWUgPSAnXycgKyBuYW1lO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzY29wZU9iamVjdCwge1xuICAgICAgICAgICAgW3ByaXZhdGVOYW1lXToge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBzY29wZU9iamVjdFtuYW1lXSxcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFtuYW1lXToge1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZ2V0ICgpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbG9jYWwgPSB0aGlzW3ByaXZhdGVOYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGFyZ2V0U2NvcGVPYmplY3RbdGFyZ2V0TmFtZV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc09iamVjdChsb2NhbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCB0YXJnZXQsIGxvY2FsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVPckRlZmF1bHQobG9jYWwsIHRhcmdldCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbcHJpdmF0ZU5hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXBwbHkoYXBwbGllcnMpIHtcbiAgICAgICAgYXBwbGllcnMuZm9yRWFjaCgoYXBwbHkpPT5hcHBseSh0aGlzKSk7XG4gICAgfVxufVxudmFyIGRlZmF1bHRzID0gLyogI19fUFVSRV9fICovIG5ldyBEZWZhdWx0cyh7XG4gICAgX3NjcmlwdGFibGU6IChuYW1lKT0+IW5hbWUuc3RhcnRzV2l0aCgnb24nKSxcbiAgICBfaW5kZXhhYmxlOiAobmFtZSk9Pm5hbWUgIT09ICdldmVudHMnLFxuICAgIGhvdmVyOiB7XG4gICAgICAgIF9mYWxsYmFjazogJ2ludGVyYWN0aW9uJ1xuICAgIH0sXG4gICAgaW50ZXJhY3Rpb246IHtcbiAgICAgICAgX3NjcmlwdGFibGU6IGZhbHNlLFxuICAgICAgICBfaW5kZXhhYmxlOiBmYWxzZVxuICAgIH1cbn0sIFtcbiAgICBhcHBseUFuaW1hdGlvbnNEZWZhdWx0cyxcbiAgICBhcHBseUxheW91dHNEZWZhdWx0cyxcbiAgICBhcHBseVNjYWxlRGVmYXVsdHNcbl0pO1xuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBnaXZlbiBmb250IG9iamVjdCBpbnRvIGEgQ1NTIGZvbnQgc3RyaW5nLlxuICogQHBhcmFtIGZvbnQgLSBBIGZvbnQgb2JqZWN0LlxuICogQHJldHVybiBUaGUgQ1NTIGZvbnQgc3RyaW5nLiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2ZvbnRcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gdG9Gb250U3RyaW5nKGZvbnQpIHtcbiAgICBpZiAoIWZvbnQgfHwgaXNOdWxsT3JVbmRlZihmb250LnNpemUpIHx8IGlzTnVsbE9yVW5kZWYoZm9udC5mYW1pbHkpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gKGZvbnQuc3R5bGUgPyBmb250LnN0eWxlICsgJyAnIDogJycpICsgKGZvbnQud2VpZ2h0ID8gZm9udC53ZWlnaHQgKyAnICcgOiAnJykgKyBmb250LnNpemUgKyAncHggJyArIGZvbnQuZmFtaWx5O1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9tZWFzdXJlVGV4dChjdHgsIGRhdGEsIGdjLCBsb25nZXN0LCBzdHJpbmcpIHtcbiAgICBsZXQgdGV4dFdpZHRoID0gZGF0YVtzdHJpbmddO1xuICAgIGlmICghdGV4dFdpZHRoKSB7XG4gICAgICAgIHRleHRXaWR0aCA9IGRhdGFbc3RyaW5nXSA9IGN0eC5tZWFzdXJlVGV4dChzdHJpbmcpLndpZHRoO1xuICAgICAgICBnYy5wdXNoKHN0cmluZyk7XG4gICAgfVxuICAgIGlmICh0ZXh0V2lkdGggPiBsb25nZXN0KSB7XG4gICAgICAgIGxvbmdlc3QgPSB0ZXh0V2lkdGg7XG4gICAgfVxuICAgIHJldHVybiBsb25nZXN0O1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5mdW5jdGlvbiBfbG9uZ2VzdFRleHQoY3R4LCBmb250LCBhcnJheU9mVGhpbmdzLCBjYWNoZSkge1xuICAgIGNhY2hlID0gY2FjaGUgfHwge307XG4gICAgbGV0IGRhdGEgPSBjYWNoZS5kYXRhID0gY2FjaGUuZGF0YSB8fCB7fTtcbiAgICBsZXQgZ2MgPSBjYWNoZS5nYXJiYWdlQ29sbGVjdCA9IGNhY2hlLmdhcmJhZ2VDb2xsZWN0IHx8IFtdO1xuICAgIGlmIChjYWNoZS5mb250ICE9PSBmb250KSB7XG4gICAgICAgIGRhdGEgPSBjYWNoZS5kYXRhID0ge307XG4gICAgICAgIGdjID0gY2FjaGUuZ2FyYmFnZUNvbGxlY3QgPSBbXTtcbiAgICAgICAgY2FjaGUuZm9udCA9IGZvbnQ7XG4gICAgfVxuICAgIGN0eC5zYXZlKCk7XG4gICAgY3R4LmZvbnQgPSBmb250O1xuICAgIGxldCBsb25nZXN0ID0gMDtcbiAgICBjb25zdCBpbGVuID0gYXJyYXlPZlRoaW5ncy5sZW5ndGg7XG4gICAgbGV0IGksIGosIGpsZW4sIHRoaW5nLCBuZXN0ZWRUaGluZztcbiAgICBmb3IoaSA9IDA7IGkgPCBpbGVuOyBpKyspe1xuICAgICAgICB0aGluZyA9IGFycmF5T2ZUaGluZ3NbaV07XG4gICAgICAgIC8vIFVuZGVmaW5lZCBzdHJpbmdzIGFuZCBhcnJheXMgc2hvdWxkIG5vdCBiZSBtZWFzdXJlZFxuICAgICAgICBpZiAodGhpbmcgIT09IHVuZGVmaW5lZCAmJiB0aGluZyAhPT0gbnVsbCAmJiAhaXNBcnJheSh0aGluZykpIHtcbiAgICAgICAgICAgIGxvbmdlc3QgPSBfbWVhc3VyZVRleHQoY3R4LCBkYXRhLCBnYywgbG9uZ2VzdCwgdGhpbmcpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkodGhpbmcpKSB7XG4gICAgICAgICAgICAvLyBpZiBpdCBpcyBhbiBhcnJheSBsZXRzIG1lYXN1cmUgZWFjaCBlbGVtZW50XG4gICAgICAgICAgICAvLyB0byBkbyBtYXliZSBzaW1wbGlmeSB0aGlzIGZ1bmN0aW9uIGEgYml0IHNvIHdlIGNhbiBkbyB0aGlzIG1vcmUgcmVjdXJzaXZlbHk/XG4gICAgICAgICAgICBmb3IoaiA9IDAsIGpsZW4gPSB0aGluZy5sZW5ndGg7IGogPCBqbGVuOyBqKyspe1xuICAgICAgICAgICAgICAgIG5lc3RlZFRoaW5nID0gdGhpbmdbal07XG4gICAgICAgICAgICAgICAgLy8gVW5kZWZpbmVkIHN0cmluZ3MgYW5kIGFycmF5cyBzaG91bGQgbm90IGJlIG1lYXN1cmVkXG4gICAgICAgICAgICAgICAgaWYgKG5lc3RlZFRoaW5nICE9PSB1bmRlZmluZWQgJiYgbmVzdGVkVGhpbmcgIT09IG51bGwgJiYgIWlzQXJyYXkobmVzdGVkVGhpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvbmdlc3QgPSBfbWVhc3VyZVRleHQoY3R4LCBkYXRhLCBnYywgbG9uZ2VzdCwgbmVzdGVkVGhpbmcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjdHgucmVzdG9yZSgpO1xuICAgIGNvbnN0IGdjTGVuID0gZ2MubGVuZ3RoIC8gMjtcbiAgICBpZiAoZ2NMZW4gPiBhcnJheU9mVGhpbmdzLmxlbmd0aCkge1xuICAgICAgICBmb3IoaSA9IDA7IGkgPCBnY0xlbjsgaSsrKXtcbiAgICAgICAgICAgIGRlbGV0ZSBkYXRhW2djW2ldXTtcbiAgICAgICAgfVxuICAgICAgICBnYy5zcGxpY2UoMCwgZ2NMZW4pO1xuICAgIH1cbiAgICByZXR1cm4gbG9uZ2VzdDtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgYWxpZ25lZCBwaXhlbCB2YWx1ZSB0byBhdm9pZCBhbnRpLWFsaWFzaW5nIGJsdXJcbiAqIEBwYXJhbSBjaGFydCAtIFRoZSBjaGFydCBpbnN0YW5jZS5cbiAqIEBwYXJhbSBwaXhlbCAtIEEgcGl4ZWwgdmFsdWUuXG4gKiBAcGFyYW0gd2lkdGggLSBUaGUgd2lkdGggb2YgdGhlIGVsZW1lbnQuXG4gKiBAcmV0dXJucyBUaGUgYWxpZ25lZCBwaXhlbCB2YWx1ZS5cbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2FsaWduUGl4ZWwoY2hhcnQsIHBpeGVsLCB3aWR0aCkge1xuICAgIGNvbnN0IGRldmljZVBpeGVsUmF0aW8gPSBjaGFydC5jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbztcbiAgICBjb25zdCBoYWxmV2lkdGggPSB3aWR0aCAhPT0gMCA/IE1hdGgubWF4KHdpZHRoIC8gMiwgMC41KSA6IDA7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoKHBpeGVsIC0gaGFsZldpZHRoKSAqIGRldmljZVBpeGVsUmF0aW8pIC8gZGV2aWNlUGl4ZWxSYXRpbyArIGhhbGZXaWR0aDtcbn1cbi8qKlxuICogQ2xlYXJzIHRoZSBlbnRpcmUgY2FudmFzLlxuICovIGZ1bmN0aW9uIGNsZWFyQ2FudmFzKGNhbnZhcywgY3R4KSB7XG4gICAgY3R4ID0gY3R4IHx8IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIGN0eC5zYXZlKCk7XG4gICAgLy8gY2FudmFzLndpZHRoIGFuZCBjYW52YXMuaGVpZ2h0IGRvIG5vdCBjb25zaWRlciB0aGUgY2FudmFzIHRyYW5zZm9ybSxcbiAgICAvLyB3aGlsZSBjbGVhclJlY3QgZG9lc1xuICAgIGN0eC5yZXNldFRyYW5zZm9ybSgpO1xuICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICBjdHgucmVzdG9yZSgpO1xufVxuZnVuY3Rpb24gZHJhd1BvaW50KGN0eCwgb3B0aW9ucywgeCwgeSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgICBkcmF3UG9pbnRMZWdlbmQoY3R4LCBvcHRpb25zLCB4LCB5LCBudWxsKTtcbn1cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5mdW5jdGlvbiBkcmF3UG9pbnRMZWdlbmQoY3R4LCBvcHRpb25zLCB4LCB5LCB3KSB7XG4gICAgbGV0IHR5cGUsIHhPZmZzZXQsIHlPZmZzZXQsIHNpemUsIGNvcm5lclJhZGl1cywgd2lkdGgsIHhPZmZzZXRXLCB5T2Zmc2V0VztcbiAgICBjb25zdCBzdHlsZSA9IG9wdGlvbnMucG9pbnRTdHlsZTtcbiAgICBjb25zdCByb3RhdGlvbiA9IG9wdGlvbnMucm90YXRpb247XG4gICAgY29uc3QgcmFkaXVzID0gb3B0aW9ucy5yYWRpdXM7XG4gICAgbGV0IHJhZCA9IChyb3RhdGlvbiB8fCAwKSAqIFJBRF9QRVJfREVHO1xuICAgIGlmIChzdHlsZSAmJiB0eXBlb2Ygc3R5bGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHR5cGUgPSBzdHlsZS50b1N0cmluZygpO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ1tvYmplY3QgSFRNTEltYWdlRWxlbWVudF0nIHx8IHR5cGUgPT09ICdbb2JqZWN0IEhUTUxDYW52YXNFbGVtZW50XScpIHtcbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICBjdHgudHJhbnNsYXRlKHgsIHkpO1xuICAgICAgICAgICAgY3R4LnJvdGF0ZShyYWQpO1xuICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShzdHlsZSwgLXN0eWxlLndpZHRoIC8gMiwgLXN0eWxlLmhlaWdodCAvIDIsIHN0eWxlLndpZHRoLCBzdHlsZS5oZWlnaHQpO1xuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNOYU4ocmFkaXVzKSB8fCByYWRpdXMgPD0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBzd2l0Y2goc3R5bGUpe1xuICAgICAgICAvLyBEZWZhdWx0IGluY2x1ZGVzIGNpcmNsZVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgaWYgKHcpIHtcbiAgICAgICAgICAgICAgICBjdHguZWxsaXBzZSh4LCB5LCB3IC8gMiwgcmFkaXVzLCAwLCAwLCBUQVUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjdHguYXJjKHgsIHksIHJhZGl1cywgMCwgVEFVKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd0cmlhbmdsZSc6XG4gICAgICAgICAgICB3aWR0aCA9IHcgPyB3IC8gMiA6IHJhZGl1cztcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8oeCArIE1hdGguc2luKHJhZCkgKiB3aWR0aCwgeSAtIE1hdGguY29zKHJhZCkgKiByYWRpdXMpO1xuICAgICAgICAgICAgcmFkICs9IFRXT19USElSRFNfUEk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHggKyBNYXRoLnNpbihyYWQpICogd2lkdGgsIHkgLSBNYXRoLmNvcyhyYWQpICogcmFkaXVzKTtcbiAgICAgICAgICAgIHJhZCArPSBUV09fVEhJUkRTX1BJO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh4ICsgTWF0aC5zaW4ocmFkKSAqIHdpZHRoLCB5IC0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cyk7XG4gICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncmVjdFJvdW5kZWQnOlxuICAgICAgICAgICAgLy8gTk9URTogdGhlIHJvdW5kZWQgcmVjdCBpbXBsZW1lbnRhdGlvbiBjaGFuZ2VkIHRvIHVzZSBgYXJjYCBpbnN0ZWFkIG9mXG4gICAgICAgICAgICAvLyBgcXVhZHJhdGljQ3VydmVUb2Agc2luY2UgaXQgZ2VuZXJhdGVzIGJldHRlciByZXN1bHRzIHdoZW4gcmVjdCBpc1xuICAgICAgICAgICAgLy8gYWxtb3N0IGEgY2lyY2xlLiAwLjUxNiAoaW5zdGVhZCBvZiAwLjUpIHByb2R1Y2VzIHJlc3VsdHMgd2l0aCB2aXN1YWxseVxuICAgICAgICAgICAgLy8gY2xvc2VyIHByb3BvcnRpb24gdG8gdGhlIHByZXZpb3VzIGltcGwgYW5kIGl0IGlzIGluc2NyaWJlZCBpbiB0aGVcbiAgICAgICAgICAgIC8vIGNpcmNsZSB3aXRoIGByYWRpdXNgLiBGb3IgbW9yZSBkZXRhaWxzLCBzZWUgdGhlIGZvbGxvd2luZyBQUnM6XG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9pc3N1ZXMvNTU5N1xuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzU4NThcbiAgICAgICAgICAgIGNvcm5lclJhZGl1cyA9IHJhZGl1cyAqIDAuNTE2O1xuICAgICAgICAgICAgc2l6ZSA9IHJhZGl1cyAtIGNvcm5lclJhZGl1cztcbiAgICAgICAgICAgIHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQgKyBRVUFSVEVSX1BJKSAqIHNpemU7XG4gICAgICAgICAgICB4T2Zmc2V0VyA9IE1hdGguY29zKHJhZCArIFFVQVJURVJfUEkpICogKHcgPyB3IC8gMiAtIGNvcm5lclJhZGl1cyA6IHNpemUpO1xuICAgICAgICAgICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCArIFFVQVJURVJfUEkpICogc2l6ZTtcbiAgICAgICAgICAgIHlPZmZzZXRXID0gTWF0aC5zaW4ocmFkICsgUVVBUlRFUl9QSSkgKiAodyA/IHcgLyAyIC0gY29ybmVyUmFkaXVzIDogc2l6ZSk7XG4gICAgICAgICAgICBjdHguYXJjKHggLSB4T2Zmc2V0VywgeSAtIHlPZmZzZXQsIGNvcm5lclJhZGl1cywgcmFkIC0gUEksIHJhZCAtIEhBTEZfUEkpO1xuICAgICAgICAgICAgY3R4LmFyYyh4ICsgeU9mZnNldFcsIHkgLSB4T2Zmc2V0LCBjb3JuZXJSYWRpdXMsIHJhZCAtIEhBTEZfUEksIHJhZCk7XG4gICAgICAgICAgICBjdHguYXJjKHggKyB4T2Zmc2V0VywgeSArIHlPZmZzZXQsIGNvcm5lclJhZGl1cywgcmFkLCByYWQgKyBIQUxGX1BJKTtcbiAgICAgICAgICAgIGN0eC5hcmMoeCAtIHlPZmZzZXRXLCB5ICsgeE9mZnNldCwgY29ybmVyUmFkaXVzLCByYWQgKyBIQUxGX1BJLCByYWQgKyBQSSk7XG4gICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncmVjdCc6XG4gICAgICAgICAgICBpZiAoIXJvdGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgc2l6ZSA9IE1hdGguU1FSVDFfMiAqIHJhZGl1cztcbiAgICAgICAgICAgICAgICB3aWR0aCA9IHcgPyB3IC8gMiA6IHNpemU7XG4gICAgICAgICAgICAgICAgY3R4LnJlY3QoeCAtIHdpZHRoLCB5IC0gc2l6ZSwgMiAqIHdpZHRoLCAyICogc2l6ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByYWQgKz0gUVVBUlRFUl9QSTtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqLyBjYXNlICdyZWN0Um90JzpcbiAgICAgICAgICAgIHhPZmZzZXRXID0gTWF0aC5jb3MocmFkKSAqICh3ID8gdyAvIDIgOiByYWRpdXMpO1xuICAgICAgICAgICAgeE9mZnNldCA9IE1hdGguY29zKHJhZCkgKiByYWRpdXM7XG4gICAgICAgICAgICB5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkKSAqIHJhZGl1cztcbiAgICAgICAgICAgIHlPZmZzZXRXID0gTWF0aC5zaW4ocmFkKSAqICh3ID8gdyAvIDIgOiByYWRpdXMpO1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyh4IC0geE9mZnNldFcsIHkgLSB5T2Zmc2V0KTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeCArIHlPZmZzZXRXLCB5IC0geE9mZnNldCk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHggKyB4T2Zmc2V0VywgeSArIHlPZmZzZXQpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh4IC0geU9mZnNldFcsIHkgKyB4T2Zmc2V0KTtcbiAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdjcm9zc1JvdCc6XG4gICAgICAgICAgICByYWQgKz0gUVVBUlRFUl9QSTtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqLyBjYXNlICdjcm9zcyc6XG4gICAgICAgICAgICB4T2Zmc2V0VyA9IE1hdGguY29zKHJhZCkgKiAodyA/IHcgLyAyIDogcmFkaXVzKTtcbiAgICAgICAgICAgIHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuICAgICAgICAgICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG4gICAgICAgICAgICB5T2Zmc2V0VyA9IE1hdGguc2luKHJhZCkgKiAodyA/IHcgLyAyIDogcmFkaXVzKTtcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXRXLCB5IC0geU9mZnNldCk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHggKyB4T2Zmc2V0VywgeSArIHlPZmZzZXQpO1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyh4ICsgeU9mZnNldFcsIHkgLSB4T2Zmc2V0KTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeCAtIHlPZmZzZXRXLCB5ICsgeE9mZnNldCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnc3Rhcic6XG4gICAgICAgICAgICB4T2Zmc2V0VyA9IE1hdGguY29zKHJhZCkgKiAodyA/IHcgLyAyIDogcmFkaXVzKTtcbiAgICAgICAgICAgIHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuICAgICAgICAgICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG4gICAgICAgICAgICB5T2Zmc2V0VyA9IE1hdGguc2luKHJhZCkgKiAodyA/IHcgLyAyIDogcmFkaXVzKTtcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXRXLCB5IC0geU9mZnNldCk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHggKyB4T2Zmc2V0VywgeSArIHlPZmZzZXQpO1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyh4ICsgeU9mZnNldFcsIHkgLSB4T2Zmc2V0KTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeCAtIHlPZmZzZXRXLCB5ICsgeE9mZnNldCk7XG4gICAgICAgICAgICByYWQgKz0gUVVBUlRFUl9QSTtcbiAgICAgICAgICAgIHhPZmZzZXRXID0gTWF0aC5jb3MocmFkKSAqICh3ID8gdyAvIDIgOiByYWRpdXMpO1xuICAgICAgICAgICAgeE9mZnNldCA9IE1hdGguY29zKHJhZCkgKiByYWRpdXM7XG4gICAgICAgICAgICB5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkKSAqIHJhZGl1cztcbiAgICAgICAgICAgIHlPZmZzZXRXID0gTWF0aC5zaW4ocmFkKSAqICh3ID8gdyAvIDIgOiByYWRpdXMpO1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyh4IC0geE9mZnNldFcsIHkgLSB5T2Zmc2V0KTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeCArIHhPZmZzZXRXLCB5ICsgeU9mZnNldCk7XG4gICAgICAgICAgICBjdHgubW92ZVRvKHggKyB5T2Zmc2V0VywgeSAtIHhPZmZzZXQpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh4IC0geU9mZnNldFcsIHkgKyB4T2Zmc2V0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdsaW5lJzpcbiAgICAgICAgICAgIHhPZmZzZXQgPSB3ID8gdyAvIDIgOiBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuICAgICAgICAgICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG4gICAgICAgICAgICBjdHgubW92ZVRvKHggLSB4T2Zmc2V0LCB5IC0geU9mZnNldCk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHggKyB4T2Zmc2V0LCB5ICsgeU9mZnNldCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZGFzaCc6XG4gICAgICAgICAgICBjdHgubW92ZVRvKHgsIHkpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh4ICsgTWF0aC5jb3MocmFkKSAqICh3ID8gdyAvIDIgOiByYWRpdXMpLCB5ICsgTWF0aC5zaW4ocmFkKSAqIHJhZGl1cyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBmYWxzZTpcbiAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjdHguZmlsbCgpO1xuICAgIGlmIChvcHRpb25zLmJvcmRlcldpZHRoID4gMCkge1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgfVxufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHBvaW50IGlzIGluc2lkZSB0aGUgcmVjdGFuZ2xlXG4gKiBAcGFyYW0gcG9pbnQgLSBUaGUgcG9pbnQgdG8gdGVzdFxuICogQHBhcmFtIGFyZWEgLSBUaGUgcmVjdGFuZ2xlXG4gKiBAcGFyYW0gbWFyZ2luIC0gYWxsb3dlZCBtYXJnaW5cbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2lzUG9pbnRJbkFyZWEocG9pbnQsIGFyZWEsIG1hcmdpbikge1xuICAgIG1hcmdpbiA9IG1hcmdpbiB8fCAwLjU7IC8vIG1hcmdpbiAtIGRlZmF1bHQgaXMgdG8gbWF0Y2ggcm91bmRlZCBkZWNpbWFsc1xuICAgIHJldHVybiAhYXJlYSB8fCBwb2ludCAmJiBwb2ludC54ID4gYXJlYS5sZWZ0IC0gbWFyZ2luICYmIHBvaW50LnggPCBhcmVhLnJpZ2h0ICsgbWFyZ2luICYmIHBvaW50LnkgPiBhcmVhLnRvcCAtIG1hcmdpbiAmJiBwb2ludC55IDwgYXJlYS5ib3R0b20gKyBtYXJnaW47XG59XG5mdW5jdGlvbiBjbGlwQXJlYShjdHgsIGFyZWEpIHtcbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHgucmVjdChhcmVhLmxlZnQsIGFyZWEudG9wLCBhcmVhLnJpZ2h0IC0gYXJlYS5sZWZ0LCBhcmVhLmJvdHRvbSAtIGFyZWEudG9wKTtcbiAgICBjdHguY2xpcCgpO1xufVxuZnVuY3Rpb24gdW5jbGlwQXJlYShjdHgpIHtcbiAgICBjdHgucmVzdG9yZSgpO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9zdGVwcGVkTGluZVRvKGN0eCwgcHJldmlvdXMsIHRhcmdldCwgZmxpcCwgbW9kZSkge1xuICAgIGlmICghcHJldmlvdXMpIHtcbiAgICAgICAgcmV0dXJuIGN0eC5saW5lVG8odGFyZ2V0LngsIHRhcmdldC55KTtcbiAgICB9XG4gICAgaWYgKG1vZGUgPT09ICdtaWRkbGUnKSB7XG4gICAgICAgIGNvbnN0IG1pZHBvaW50ID0gKHByZXZpb3VzLnggKyB0YXJnZXQueCkgLyAyLjA7XG4gICAgICAgIGN0eC5saW5lVG8obWlkcG9pbnQsIHByZXZpb3VzLnkpO1xuICAgICAgICBjdHgubGluZVRvKG1pZHBvaW50LCB0YXJnZXQueSk7XG4gICAgfSBlbHNlIGlmIChtb2RlID09PSAnYWZ0ZXInICE9PSAhIWZsaXApIHtcbiAgICAgICAgY3R4LmxpbmVUbyhwcmV2aW91cy54LCB0YXJnZXQueSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY3R4LmxpbmVUbyh0YXJnZXQueCwgcHJldmlvdXMueSk7XG4gICAgfVxuICAgIGN0eC5saW5lVG8odGFyZ2V0LngsIHRhcmdldC55KTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfYmV6aWVyQ3VydmVUbyhjdHgsIHByZXZpb3VzLCB0YXJnZXQsIGZsaXApIHtcbiAgICBpZiAoIXByZXZpb3VzKSB7XG4gICAgICAgIHJldHVybiBjdHgubGluZVRvKHRhcmdldC54LCB0YXJnZXQueSk7XG4gICAgfVxuICAgIGN0eC5iZXppZXJDdXJ2ZVRvKGZsaXAgPyBwcmV2aW91cy5jcDF4IDogcHJldmlvdXMuY3AyeCwgZmxpcCA/IHByZXZpb3VzLmNwMXkgOiBwcmV2aW91cy5jcDJ5LCBmbGlwID8gdGFyZ2V0LmNwMnggOiB0YXJnZXQuY3AxeCwgZmxpcCA/IHRhcmdldC5jcDJ5IDogdGFyZ2V0LmNwMXksIHRhcmdldC54LCB0YXJnZXQueSk7XG59XG5mdW5jdGlvbiBzZXRSZW5kZXJPcHRzKGN0eCwgb3B0cykge1xuICAgIGlmIChvcHRzLnRyYW5zbGF0aW9uKSB7XG4gICAgICAgIGN0eC50cmFuc2xhdGUob3B0cy50cmFuc2xhdGlvblswXSwgb3B0cy50cmFuc2xhdGlvblsxXSk7XG4gICAgfVxuICAgIGlmICghaXNOdWxsT3JVbmRlZihvcHRzLnJvdGF0aW9uKSkge1xuICAgICAgICBjdHgucm90YXRlKG9wdHMucm90YXRpb24pO1xuICAgIH1cbiAgICBpZiAob3B0cy5jb2xvcikge1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gb3B0cy5jb2xvcjtcbiAgICB9XG4gICAgaWYgKG9wdHMudGV4dEFsaWduKSB7XG4gICAgICAgIGN0eC50ZXh0QWxpZ24gPSBvcHRzLnRleHRBbGlnbjtcbiAgICB9XG4gICAgaWYgKG9wdHMudGV4dEJhc2VsaW5lKSB7XG4gICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSBvcHRzLnRleHRCYXNlbGluZTtcbiAgICB9XG59XG5mdW5jdGlvbiBkZWNvcmF0ZVRleHQoY3R4LCB4LCB5LCBsaW5lLCBvcHRzKSB7XG4gICAgaWYgKG9wdHMuc3RyaWtldGhyb3VnaCB8fCBvcHRzLnVuZGVybGluZSkge1xuICAgICAgICAvKipcbiAgICAgKiBOb3cgdGhhdCBJRTExIHN1cHBvcnQgaGFzIGJlZW4gZHJvcHBlZCwgd2UgY2FuIHVzZSBtb3JlXG4gICAgICogb2YgdGhlIFRleHRNZXRyaWNzIG9iamVjdC4gVGhlIGFjdHVhbCBib3VuZGluZyBib3hlc1xuICAgICAqIGFyZSB1bmZsYWdnZWQgaW4gQ2hyb21lLCBGaXJlZm94LCBFZGdlLCBhbmQgU2FmYXJpIHNvIHRoZXlcbiAgICAgKiBjYW4gYmUgc2FmZWx5IHVzZWQuXG4gICAgICogU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9UZXh0TWV0cmljcyNCcm93c2VyX2NvbXBhdGliaWxpdHlcbiAgICAgKi8gY29uc3QgbWV0cmljcyA9IGN0eC5tZWFzdXJlVGV4dChsaW5lKTtcbiAgICAgICAgY29uc3QgbGVmdCA9IHggLSBtZXRyaWNzLmFjdHVhbEJvdW5kaW5nQm94TGVmdDtcbiAgICAgICAgY29uc3QgcmlnaHQgPSB4ICsgbWV0cmljcy5hY3R1YWxCb3VuZGluZ0JveFJpZ2h0O1xuICAgICAgICBjb25zdCB0b3AgPSB5IC0gbWV0cmljcy5hY3R1YWxCb3VuZGluZ0JveEFzY2VudDtcbiAgICAgICAgY29uc3QgYm90dG9tID0geSArIG1ldHJpY3MuYWN0dWFsQm91bmRpbmdCb3hEZXNjZW50O1xuICAgICAgICBjb25zdCB5RGVjb3JhdGlvbiA9IG9wdHMuc3RyaWtldGhyb3VnaCA/ICh0b3AgKyBib3R0b20pIC8gMiA6IGJvdHRvbTtcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gY3R4LmZpbGxTdHlsZTtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHgubGluZVdpZHRoID0gb3B0cy5kZWNvcmF0aW9uV2lkdGggfHwgMjtcbiAgICAgICAgY3R4Lm1vdmVUbyhsZWZ0LCB5RGVjb3JhdGlvbik7XG4gICAgICAgIGN0eC5saW5lVG8ocmlnaHQsIHlEZWNvcmF0aW9uKTtcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRyYXdCYWNrZHJvcChjdHgsIG9wdHMpIHtcbiAgICBjb25zdCBvbGRDb2xvciA9IGN0eC5maWxsU3R5bGU7XG4gICAgY3R4LmZpbGxTdHlsZSA9IG9wdHMuY29sb3I7XG4gICAgY3R4LmZpbGxSZWN0KG9wdHMubGVmdCwgb3B0cy50b3AsIG9wdHMud2lkdGgsIG9wdHMuaGVpZ2h0KTtcbiAgICBjdHguZmlsbFN0eWxlID0gb2xkQ29sb3I7XG59XG4vKipcbiAqIFJlbmRlciB0ZXh0IG9udG8gdGhlIGNhbnZhc1xuICovIGZ1bmN0aW9uIHJlbmRlclRleHQoY3R4LCB0ZXh0LCB4LCB5LCBmb250LCBvcHRzID0ge30pIHtcbiAgICBjb25zdCBsaW5lcyA9IGlzQXJyYXkodGV4dCkgPyB0ZXh0IDogW1xuICAgICAgICB0ZXh0XG4gICAgXTtcbiAgICBjb25zdCBzdHJva2UgPSBvcHRzLnN0cm9rZVdpZHRoID4gMCAmJiBvcHRzLnN0cm9rZUNvbG9yICE9PSAnJztcbiAgICBsZXQgaSwgbGluZTtcbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC5mb250ID0gZm9udC5zdHJpbmc7XG4gICAgc2V0UmVuZGVyT3B0cyhjdHgsIG9wdHMpO1xuICAgIGZvcihpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgKytpKXtcbiAgICAgICAgbGluZSA9IGxpbmVzW2ldO1xuICAgICAgICBpZiAob3B0cy5iYWNrZHJvcCkge1xuICAgICAgICAgICAgZHJhd0JhY2tkcm9wKGN0eCwgb3B0cy5iYWNrZHJvcCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0cm9rZSkge1xuICAgICAgICAgICAgaWYgKG9wdHMuc3Ryb2tlQ29sb3IpIHtcbiAgICAgICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBvcHRzLnN0cm9rZUNvbG9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc051bGxPclVuZGVmKG9wdHMuc3Ryb2tlV2lkdGgpKSB7XG4gICAgICAgICAgICAgICAgY3R4LmxpbmVXaWR0aCA9IG9wdHMuc3Ryb2tlV2lkdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdHguc3Ryb2tlVGV4dChsaW5lLCB4LCB5LCBvcHRzLm1heFdpZHRoKTtcbiAgICAgICAgfVxuICAgICAgICBjdHguZmlsbFRleHQobGluZSwgeCwgeSwgb3B0cy5tYXhXaWR0aCk7XG4gICAgICAgIGRlY29yYXRlVGV4dChjdHgsIHgsIHksIGxpbmUsIG9wdHMpO1xuICAgICAgICB5ICs9IE51bWJlcihmb250LmxpbmVIZWlnaHQpO1xuICAgIH1cbiAgICBjdHgucmVzdG9yZSgpO1xufVxuLyoqXG4gKiBBZGQgYSBwYXRoIG9mIGEgcmVjdGFuZ2xlIHdpdGggcm91bmRlZCBjb3JuZXJzIHRvIHRoZSBjdXJyZW50IHN1Yi1wYXRoXG4gKiBAcGFyYW0gY3R4IC0gQ29udGV4dFxuICogQHBhcmFtIHJlY3QgLSBCb3VuZGluZyByZWN0XG4gKi8gZnVuY3Rpb24gYWRkUm91bmRlZFJlY3RQYXRoKGN0eCwgcmVjdCkge1xuICAgIGNvbnN0IHsgeCAsIHkgLCB3ICwgaCAsIHJhZGl1cyAgfSA9IHJlY3Q7XG4gICAgLy8gdG9wIGxlZnQgYXJjXG4gICAgY3R4LmFyYyh4ICsgcmFkaXVzLnRvcExlZnQsIHkgKyByYWRpdXMudG9wTGVmdCwgcmFkaXVzLnRvcExlZnQsIC1IQUxGX1BJLCBQSSwgdHJ1ZSk7XG4gICAgLy8gbGluZSBmcm9tIHRvcCBsZWZ0IHRvIGJvdHRvbSBsZWZ0XG4gICAgY3R4LmxpbmVUbyh4LCB5ICsgaCAtIHJhZGl1cy5ib3R0b21MZWZ0KTtcbiAgICAvLyBib3R0b20gbGVmdCBhcmNcbiAgICBjdHguYXJjKHggKyByYWRpdXMuYm90dG9tTGVmdCwgeSArIGggLSByYWRpdXMuYm90dG9tTGVmdCwgcmFkaXVzLmJvdHRvbUxlZnQsIFBJLCBIQUxGX1BJLCB0cnVlKTtcbiAgICAvLyBsaW5lIGZyb20gYm90dG9tIGxlZnQgdG8gYm90dG9tIHJpZ2h0XG4gICAgY3R4LmxpbmVUbyh4ICsgdyAtIHJhZGl1cy5ib3R0b21SaWdodCwgeSArIGgpO1xuICAgIC8vIGJvdHRvbSByaWdodCBhcmNcbiAgICBjdHguYXJjKHggKyB3IC0gcmFkaXVzLmJvdHRvbVJpZ2h0LCB5ICsgaCAtIHJhZGl1cy5ib3R0b21SaWdodCwgcmFkaXVzLmJvdHRvbVJpZ2h0LCBIQUxGX1BJLCAwLCB0cnVlKTtcbiAgICAvLyBsaW5lIGZyb20gYm90dG9tIHJpZ2h0IHRvIHRvcCByaWdodFxuICAgIGN0eC5saW5lVG8oeCArIHcsIHkgKyByYWRpdXMudG9wUmlnaHQpO1xuICAgIC8vIHRvcCByaWdodCBhcmNcbiAgICBjdHguYXJjKHggKyB3IC0gcmFkaXVzLnRvcFJpZ2h0LCB5ICsgcmFkaXVzLnRvcFJpZ2h0LCByYWRpdXMudG9wUmlnaHQsIDAsIC1IQUxGX1BJLCB0cnVlKTtcbiAgICAvLyBsaW5lIGZyb20gdG9wIHJpZ2h0IHRvIHRvcCBsZWZ0XG4gICAgY3R4LmxpbmVUbyh4ICsgcmFkaXVzLnRvcExlZnQsIHkpO1xufVxuXG5jb25zdCBMSU5FX0hFSUdIVCA9IC9eKG5vcm1hbHwoXFxkKyg/OlxcLlxcZCspPykocHh8ZW18JSk/KSQvO1xuY29uc3QgRk9OVF9TVFlMRSA9IC9eKG5vcm1hbHxpdGFsaWN8aW5pdGlhbHxpbmhlcml0fHVuc2V0fChvYmxpcXVlKCAtP1swLTldP1swLTldZGVnKT8pKSQvO1xuLyoqXG4gKiBAYWxpYXMgQ2hhcnQuaGVscGVycy5vcHRpb25zXG4gKiBAbmFtZXNwYWNlXG4gKi8gLyoqXG4gKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gbGluZSBoZWlnaHQgYHZhbHVlYCBpbiBwaXhlbHMgZm9yIGEgc3BlY2lmaWMgZm9udCBgc2l6ZWAuXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgbGluZUhlaWdodCB0byBwYXJzZSAoZWcuIDEuNiwgJzE0cHgnLCAnNzUlJywgJzEuNmVtJykuXG4gKiBAcGFyYW0gc2l6ZSAtIFRoZSBmb250IHNpemUgKGluIHBpeGVscykgdXNlZCB0byByZXNvbHZlIHJlbGF0aXZlIGB2YWx1ZWAuXG4gKiBAcmV0dXJucyBUaGUgZWZmZWN0aXZlIGxpbmUgaGVpZ2h0IGluIHBpeGVscyAoc2l6ZSAqIDEuMiBpZiB2YWx1ZSBpcyBpbnZhbGlkKS5cbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2xpbmUtaGVpZ2h0XG4gKiBAc2luY2UgMi43LjBcbiAqLyBmdW5jdGlvbiB0b0xpbmVIZWlnaHQodmFsdWUsIHNpemUpIHtcbiAgICBjb25zdCBtYXRjaGVzID0gKCcnICsgdmFsdWUpLm1hdGNoKExJTkVfSEVJR0hUKTtcbiAgICBpZiAoIW1hdGNoZXMgfHwgbWF0Y2hlc1sxXSA9PT0gJ25vcm1hbCcpIHtcbiAgICAgICAgcmV0dXJuIHNpemUgKiAxLjI7XG4gICAgfVxuICAgIHZhbHVlID0gK21hdGNoZXNbMl07XG4gICAgc3dpdGNoKG1hdGNoZXNbM10pe1xuICAgICAgICBjYXNlICdweCc6XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIGNhc2UgJyUnOlxuICAgICAgICAgICAgdmFsdWUgLz0gMTAwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBzaXplICogdmFsdWU7XG59XG5jb25zdCBudW1iZXJPclplcm8gPSAodik9Pit2IHx8IDA7XG5mdW5jdGlvbiBfcmVhZFZhbHVlVG9Qcm9wcyh2YWx1ZSwgcHJvcHMpIHtcbiAgICBjb25zdCByZXQgPSB7fTtcbiAgICBjb25zdCBvYmpQcm9wcyA9IGlzT2JqZWN0KHByb3BzKTtcbiAgICBjb25zdCBrZXlzID0gb2JqUHJvcHMgPyBPYmplY3Qua2V5cyhwcm9wcykgOiBwcm9wcztcbiAgICBjb25zdCByZWFkID0gaXNPYmplY3QodmFsdWUpID8gb2JqUHJvcHMgPyAocHJvcCk9PnZhbHVlT3JEZWZhdWx0KHZhbHVlW3Byb3BdLCB2YWx1ZVtwcm9wc1twcm9wXV0pIDogKHByb3ApPT52YWx1ZVtwcm9wXSA6ICgpPT52YWx1ZTtcbiAgICBmb3IgKGNvbnN0IHByb3Agb2Yga2V5cyl7XG4gICAgICAgIHJldFtwcm9wXSA9IG51bWJlck9yWmVybyhyZWFkKHByb3ApKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn1cbi8qKlxuICogQ29udmVydHMgdGhlIGdpdmVuIHZhbHVlIGludG8gYSBUUkJMIG9iamVjdC5cbiAqIEBwYXJhbSB2YWx1ZSAtIElmIGEgbnVtYmVyLCBzZXQgdGhlIHZhbHVlIHRvIGFsbCBUUkJMIGNvbXBvbmVudCxcbiAqICBlbHNlLCBpZiBhbiBvYmplY3QsIHVzZSBkZWZpbmVkIHByb3BlcnRpZXMgYW5kIHNldHMgdW5kZWZpbmVkIG9uZXMgdG8gMC5cbiAqICB4IC8geSBhcmUgc2hvcnRoYW5kcyBmb3Igc2FtZSB2YWx1ZSBmb3IgbGVmdC9yaWdodCBhbmQgdG9wL2JvdHRvbS5cbiAqIEByZXR1cm5zIFRoZSBwYWRkaW5nIHZhbHVlcyAodG9wLCByaWdodCwgYm90dG9tLCBsZWZ0KVxuICogQHNpbmNlIDMuMC4wXG4gKi8gZnVuY3Rpb24gdG9UUkJMKHZhbHVlKSB7XG4gICAgcmV0dXJuIF9yZWFkVmFsdWVUb1Byb3BzKHZhbHVlLCB7XG4gICAgICAgIHRvcDogJ3knLFxuICAgICAgICByaWdodDogJ3gnLFxuICAgICAgICBib3R0b206ICd5JyxcbiAgICAgICAgbGVmdDogJ3gnXG4gICAgfSk7XG59XG4vKipcbiAqIENvbnZlcnRzIHRoZSBnaXZlbiB2YWx1ZSBpbnRvIGEgVFJCTCBjb3JuZXJzIG9iamVjdCAoc2ltaWxhciB3aXRoIGNzcyBib3JkZXItcmFkaXVzKS5cbiAqIEBwYXJhbSB2YWx1ZSAtIElmIGEgbnVtYmVyLCBzZXQgdGhlIHZhbHVlIHRvIGFsbCBUUkJMIGNvcm5lciBjb21wb25lbnRzLFxuICogIGVsc2UsIGlmIGFuIG9iamVjdCwgdXNlIGRlZmluZWQgcHJvcGVydGllcyBhbmQgc2V0cyB1bmRlZmluZWQgb25lcyB0byAwLlxuICogQHJldHVybnMgVGhlIFRSQkwgY29ybmVyIHZhbHVlcyAodG9wTGVmdCwgdG9wUmlnaHQsIGJvdHRvbUxlZnQsIGJvdHRvbVJpZ2h0KVxuICogQHNpbmNlIDMuMC4wXG4gKi8gZnVuY3Rpb24gdG9UUkJMQ29ybmVycyh2YWx1ZSkge1xuICAgIHJldHVybiBfcmVhZFZhbHVlVG9Qcm9wcyh2YWx1ZSwgW1xuICAgICAgICAndG9wTGVmdCcsXG4gICAgICAgICd0b3BSaWdodCcsXG4gICAgICAgICdib3R0b21MZWZ0JyxcbiAgICAgICAgJ2JvdHRvbVJpZ2h0J1xuICAgIF0pO1xufVxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gdmFsdWUgaW50byBhIHBhZGRpbmcgb2JqZWN0IHdpdGggcHJlLWNvbXB1dGVkIHdpZHRoL2hlaWdodC5cbiAqIEBwYXJhbSB2YWx1ZSAtIElmIGEgbnVtYmVyLCBzZXQgdGhlIHZhbHVlIHRvIGFsbCBUUkJMIGNvbXBvbmVudCxcbiAqICBlbHNlLCBpZiBhbiBvYmplY3QsIHVzZSBkZWZpbmVkIHByb3BlcnRpZXMgYW5kIHNldHMgdW5kZWZpbmVkIG9uZXMgdG8gMC5cbiAqICB4IC8geSBhcmUgc2hvcnRoYW5kcyBmb3Igc2FtZSB2YWx1ZSBmb3IgbGVmdC9yaWdodCBhbmQgdG9wL2JvdHRvbS5cbiAqIEByZXR1cm5zIFRoZSBwYWRkaW5nIHZhbHVlcyAodG9wLCByaWdodCwgYm90dG9tLCBsZWZ0LCB3aWR0aCwgaGVpZ2h0KVxuICogQHNpbmNlIDIuNy4wXG4gKi8gZnVuY3Rpb24gdG9QYWRkaW5nKHZhbHVlKSB7XG4gICAgY29uc3Qgb2JqID0gdG9UUkJMKHZhbHVlKTtcbiAgICBvYmoud2lkdGggPSBvYmoubGVmdCArIG9iai5yaWdodDtcbiAgICBvYmouaGVpZ2h0ID0gb2JqLnRvcCArIG9iai5ib3R0b207XG4gICAgcmV0dXJuIG9iajtcbn1cbi8qKlxuICogUGFyc2VzIGZvbnQgb3B0aW9ucyBhbmQgcmV0dXJucyB0aGUgZm9udCBvYmplY3QuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIEEgb2JqZWN0IHRoYXQgY29udGFpbnMgZm9udCBvcHRpb25zIHRvIGJlIHBhcnNlZC5cbiAqIEBwYXJhbSBmYWxsYmFjayAtIEEgb2JqZWN0IHRoYXQgY29udGFpbnMgZmFsbGJhY2sgZm9udCBvcHRpb25zLlxuICogQHJldHVybiBUaGUgZm9udCBvYmplY3QuXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIHRvRm9udChvcHRpb25zLCBmYWxsYmFjaykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIGZhbGxiYWNrID0gZmFsbGJhY2sgfHwgZGVmYXVsdHMuZm9udDtcbiAgICBsZXQgc2l6ZSA9IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMuc2l6ZSwgZmFsbGJhY2suc2l6ZSk7XG4gICAgaWYgKHR5cGVvZiBzaXplID09PSAnc3RyaW5nJykge1xuICAgICAgICBzaXplID0gcGFyc2VJbnQoc2l6ZSwgMTApO1xuICAgIH1cbiAgICBsZXQgc3R5bGUgPSB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLnN0eWxlLCBmYWxsYmFjay5zdHlsZSk7XG4gICAgaWYgKHN0eWxlICYmICEoJycgKyBzdHlsZSkubWF0Y2goRk9OVF9TVFlMRSkpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdJbnZhbGlkIGZvbnQgc3R5bGUgc3BlY2lmaWVkOiBcIicgKyBzdHlsZSArICdcIicpO1xuICAgICAgICBzdHlsZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY29uc3QgZm9udCA9IHtcbiAgICAgICAgZmFtaWx5OiB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLmZhbWlseSwgZmFsbGJhY2suZmFtaWx5KSxcbiAgICAgICAgbGluZUhlaWdodDogdG9MaW5lSGVpZ2h0KHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMubGluZUhlaWdodCwgZmFsbGJhY2subGluZUhlaWdodCksIHNpemUpLFxuICAgICAgICBzaXplLFxuICAgICAgICBzdHlsZSxcbiAgICAgICAgd2VpZ2h0OiB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLndlaWdodCwgZmFsbGJhY2sud2VpZ2h0KSxcbiAgICAgICAgc3RyaW5nOiAnJ1xuICAgIH07XG4gICAgZm9udC5zdHJpbmcgPSB0b0ZvbnRTdHJpbmcoZm9udCk7XG4gICAgcmV0dXJuIGZvbnQ7XG59XG4vKipcbiAqIEV2YWx1YXRlcyB0aGUgZ2l2ZW4gYGlucHV0c2Agc2VxdWVudGlhbGx5IGFuZCByZXR1cm5zIHRoZSBmaXJzdCBkZWZpbmVkIHZhbHVlLlxuICogQHBhcmFtIGlucHV0cyAtIEFuIGFycmF5IG9mIHZhbHVlcywgZmFsbGluZyBiYWNrIHRvIHRoZSBsYXN0IHZhbHVlLlxuICogQHBhcmFtIGNvbnRleHQgLSBJZiBkZWZpbmVkIGFuZCB0aGUgY3VycmVudCB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCB0aGUgdmFsdWVcbiAqIGlzIGNhbGxlZCB3aXRoIGBjb250ZXh0YCBhcyBmaXJzdCBhcmd1bWVudCBhbmQgdGhlIHJlc3VsdCBiZWNvbWVzIHRoZSBuZXcgaW5wdXQuXG4gKiBAcGFyYW0gaW5kZXggLSBJZiBkZWZpbmVkIGFuZCB0aGUgY3VycmVudCB2YWx1ZSBpcyBhbiBhcnJheSwgdGhlIHZhbHVlXG4gKiBhdCBgaW5kZXhgIGJlY29tZSB0aGUgbmV3IGlucHV0LlxuICogQHBhcmFtIGluZm8gLSBvYmplY3QgdG8gcmV0dXJuIGluZm9ybWF0aW9uIGFib3V0IHJlc29sdXRpb24gaW5cbiAqIEBwYXJhbSBpbmZvLmNhY2hlYWJsZSAtIFdpbGwgYmUgc2V0IHRvIGBmYWxzZWAgaWYgb3B0aW9uIGlzIG5vdCBjYWNoZWFibGUuXG4gKiBAc2luY2UgMi43LjBcbiAqLyBmdW5jdGlvbiByZXNvbHZlKGlucHV0cywgY29udGV4dCwgaW5kZXgsIGluZm8pIHtcbiAgICBsZXQgY2FjaGVhYmxlID0gdHJ1ZTtcbiAgICBsZXQgaSwgaWxlbiwgdmFsdWU7XG4gICAgZm9yKGkgPSAwLCBpbGVuID0gaW5wdXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIHZhbHVlID0gaW5wdXRzW2ldO1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnRleHQgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUoY29udGV4dCk7XG4gICAgICAgICAgICBjYWNoZWFibGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5kZXggIT09IHVuZGVmaW5lZCAmJiBpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZVtpbmRleCAlIHZhbHVlLmxlbmd0aF07XG4gICAgICAgICAgICBjYWNoZWFibGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKGluZm8gJiYgIWNhY2hlYWJsZSkge1xuICAgICAgICAgICAgICAgIGluZm8uY2FjaGVhYmxlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIEBwYXJhbSBtaW5tYXhcbiAqIEBwYXJhbSBncmFjZVxuICogQHBhcmFtIGJlZ2luQXRaZXJvXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9hZGRHcmFjZShtaW5tYXgsIGdyYWNlLCBiZWdpbkF0WmVybykge1xuICAgIGNvbnN0IHsgbWluICwgbWF4ICB9ID0gbWlubWF4O1xuICAgIGNvbnN0IGNoYW5nZSA9IHRvRGltZW5zaW9uKGdyYWNlLCAobWF4IC0gbWluKSAvIDIpO1xuICAgIGNvbnN0IGtlZXBaZXJvID0gKHZhbHVlLCBhZGQpPT5iZWdpbkF0WmVybyAmJiB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSArIGFkZDtcbiAgICByZXR1cm4ge1xuICAgICAgICBtaW46IGtlZXBaZXJvKG1pbiwgLU1hdGguYWJzKGNoYW5nZSkpLFxuICAgICAgICBtYXg6IGtlZXBaZXJvKG1heCwgY2hhbmdlKVxuICAgIH07XG59XG5mdW5jdGlvbiBjcmVhdGVDb250ZXh0KHBhcmVudENvbnRleHQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKHBhcmVudENvbnRleHQpLCBjb250ZXh0KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgUHJveHkgZm9yIHJlc29sdmluZyByYXcgdmFsdWVzIGZvciBvcHRpb25zLlxuICogQHBhcmFtIHNjb3BlcyAtIFRoZSBvcHRpb24gc2NvcGVzIHRvIGxvb2sgZm9yIHZhbHVlcywgaW4gcmVzb2x1dGlvbiBvcmRlclxuICogQHBhcmFtIHByZWZpeGVzIC0gVGhlIHByZWZpeGVzIGZvciB2YWx1ZXMsIGluIHJlc29sdXRpb24gb3JkZXIuXG4gKiBAcGFyYW0gcm9vdFNjb3BlcyAtIFRoZSByb290IG9wdGlvbiBzY29wZXNcbiAqIEBwYXJhbSBmYWxsYmFjayAtIFBhcmVudCBzY29wZXMgZmFsbGJhY2tcbiAqIEBwYXJhbSBnZXRUYXJnZXQgLSBjYWxsYmFjayBmb3IgZ2V0dGluZyB0aGUgdGFyZ2V0IGZvciBjaGFuZ2VkIHZhbHVlc1xuICogQHJldHVybnMgUHJveHlcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2NyZWF0ZVJlc29sdmVyKHNjb3BlcywgcHJlZml4ZXMgPSBbXG4gICAgJydcbl0sIHJvb3RTY29wZXMsIGZhbGxiYWNrLCBnZXRUYXJnZXQgPSAoKT0+c2NvcGVzWzBdKSB7XG4gICAgY29uc3QgZmluYWxSb290U2NvcGVzID0gcm9vdFNjb3BlcyB8fCBzY29wZXM7XG4gICAgaWYgKHR5cGVvZiBmYWxsYmFjayA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgZmFsbGJhY2sgPSBfcmVzb2x2ZSgnX2ZhbGxiYWNrJywgc2NvcGVzKTtcbiAgICB9XG4gICAgY29uc3QgY2FjaGUgPSB7XG4gICAgICAgIFtTeW1ib2wudG9TdHJpbmdUYWddOiAnT2JqZWN0JyxcbiAgICAgICAgX2NhY2hlYWJsZTogdHJ1ZSxcbiAgICAgICAgX3Njb3Blczogc2NvcGVzLFxuICAgICAgICBfcm9vdFNjb3BlczogZmluYWxSb290U2NvcGVzLFxuICAgICAgICBfZmFsbGJhY2s6IGZhbGxiYWNrLFxuICAgICAgICBfZ2V0VGFyZ2V0OiBnZXRUYXJnZXQsXG4gICAgICAgIG92ZXJyaWRlOiAoc2NvcGUpPT5fY3JlYXRlUmVzb2x2ZXIoW1xuICAgICAgICAgICAgICAgIHNjb3BlLFxuICAgICAgICAgICAgICAgIC4uLnNjb3Blc1xuICAgICAgICAgICAgXSwgcHJlZml4ZXMsIGZpbmFsUm9vdFNjb3BlcywgZmFsbGJhY2spXG4gICAgfTtcbiAgICByZXR1cm4gbmV3IFByb3h5KGNhY2hlLCB7XG4gICAgICAgIC8qKlxuICAgICAqIEEgdHJhcCBmb3IgdGhlIGRlbGV0ZSBvcGVyYXRvci5cbiAgICAgKi8gZGVsZXRlUHJvcGVydHkgKHRhcmdldCwgcHJvcCkge1xuICAgICAgICAgICAgZGVsZXRlIHRhcmdldFtwcm9wXTsgLy8gcmVtb3ZlIGZyb20gY2FjaGVcbiAgICAgICAgICAgIGRlbGV0ZSB0YXJnZXQuX2tleXM7IC8vIHJlbW92ZSBjYWNoZWQga2V5c1xuICAgICAgICAgICAgZGVsZXRlIHNjb3Blc1swXVtwcm9wXTsgLy8gcmVtb3ZlIGZyb20gdG9wIGxldmVsIHNjb3BlXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICogQSB0cmFwIGZvciBnZXR0aW5nIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKi8gZ2V0ICh0YXJnZXQsIHByb3ApIHtcbiAgICAgICAgICAgIHJldHVybiBfY2FjaGVkKHRhcmdldCwgcHJvcCwgKCk9Pl9yZXNvbHZlV2l0aFByZWZpeGVzKHByb3AsIHByZWZpeGVzLCBzY29wZXMsIHRhcmdldCkpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgKiBBIHRyYXAgZm9yIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IuXG4gICAgICogQWxzbyB1c2VkIGJ5IE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5cbiAgICAgKi8gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICh0YXJnZXQsIHByb3ApIHtcbiAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQuX3Njb3Blc1swXSwgcHJvcCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAqIEEgdHJhcCBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mLlxuICAgICAqLyBnZXRQcm90b3R5cGVPZiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5nZXRQcm90b3R5cGVPZihzY29wZXNbMF0pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgKiBBIHRyYXAgZm9yIHRoZSBpbiBvcGVyYXRvci5cbiAgICAgKi8gaGFzICh0YXJnZXQsIHByb3ApIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRLZXlzRnJvbUFsbFNjb3Blcyh0YXJnZXQpLmluY2x1ZGVzKHByb3ApO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgKiBBIHRyYXAgZm9yIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIGFuZCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzLlxuICAgICAqLyBvd25LZXlzICh0YXJnZXQpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRLZXlzRnJvbUFsbFNjb3Blcyh0YXJnZXQpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgKiBBIHRyYXAgZm9yIHNldHRpbmcgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqLyBzZXQgKHRhcmdldCwgcHJvcCwgdmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0b3JhZ2UgPSB0YXJnZXQuX3N0b3JhZ2UgfHwgKHRhcmdldC5fc3RvcmFnZSA9IGdldFRhcmdldCgpKTtcbiAgICAgICAgICAgIHRhcmdldFtwcm9wXSA9IHN0b3JhZ2VbcHJvcF0gPSB2YWx1ZTsgLy8gc2V0IHRvIHRvcCBsZXZlbCBzY29wZSArIGNhY2hlXG4gICAgICAgICAgICBkZWxldGUgdGFyZ2V0Ll9rZXlzOyAvLyByZW1vdmUgY2FjaGVkIGtleXNcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4vKipcbiAqIFJldHVybnMgYW4gUHJveHkgZm9yIHJlc29sdmluZyBvcHRpb24gdmFsdWVzIHdpdGggY29udGV4dC5cbiAqIEBwYXJhbSBwcm94eSAtIFRoZSBQcm94eSByZXR1cm5lZCBieSBgX2NyZWF0ZVJlc29sdmVyYFxuICogQHBhcmFtIGNvbnRleHQgLSBDb250ZXh0IG9iamVjdCBmb3Igc2NyaXB0YWJsZS9pbmRleGFibGUgb3B0aW9uc1xuICogQHBhcmFtIHN1YlByb3h5IC0gVGhlIHByb3h5IHByb3ZpZGVkIGZvciBzY3JpcHRhYmxlIG9wdGlvbnNcbiAqIEBwYXJhbSBkZXNjcmlwdG9yRGVmYXVsdHMgLSBEZWZhdWx0cyBmb3IgZGVzY3JpcHRvcnNcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2F0dGFjaENvbnRleHQocHJveHksIGNvbnRleHQsIHN1YlByb3h5LCBkZXNjcmlwdG9yRGVmYXVsdHMpIHtcbiAgICBjb25zdCBjYWNoZSA9IHtcbiAgICAgICAgX2NhY2hlYWJsZTogZmFsc2UsXG4gICAgICAgIF9wcm94eTogcHJveHksXG4gICAgICAgIF9jb250ZXh0OiBjb250ZXh0LFxuICAgICAgICBfc3ViUHJveHk6IHN1YlByb3h5LFxuICAgICAgICBfc3RhY2s6IG5ldyBTZXQoKSxcbiAgICAgICAgX2Rlc2NyaXB0b3JzOiBfZGVzY3JpcHRvcnMocHJveHksIGRlc2NyaXB0b3JEZWZhdWx0cyksXG4gICAgICAgIHNldENvbnRleHQ6IChjdHgpPT5fYXR0YWNoQ29udGV4dChwcm94eSwgY3R4LCBzdWJQcm94eSwgZGVzY3JpcHRvckRlZmF1bHRzKSxcbiAgICAgICAgb3ZlcnJpZGU6IChzY29wZSk9Pl9hdHRhY2hDb250ZXh0KHByb3h5Lm92ZXJyaWRlKHNjb3BlKSwgY29udGV4dCwgc3ViUHJveHksIGRlc2NyaXB0b3JEZWZhdWx0cylcbiAgICB9O1xuICAgIHJldHVybiBuZXcgUHJveHkoY2FjaGUsIHtcbiAgICAgICAgLyoqXG4gICAgICogQSB0cmFwIGZvciB0aGUgZGVsZXRlIG9wZXJhdG9yLlxuICAgICAqLyBkZWxldGVQcm9wZXJ0eSAodGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgICAgICBkZWxldGUgdGFyZ2V0W3Byb3BdOyAvLyByZW1vdmUgZnJvbSBjYWNoZVxuICAgICAgICAgICAgZGVsZXRlIHByb3h5W3Byb3BdOyAvLyByZW1vdmUgZnJvbSBwcm94eVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAqIEEgdHJhcCBmb3IgZ2V0dGluZyBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICovIGdldCAodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikge1xuICAgICAgICAgICAgcmV0dXJuIF9jYWNoZWQodGFyZ2V0LCBwcm9wLCAoKT0+X3Jlc29sdmVXaXRoQ29udGV4dCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAqIEEgdHJhcCBmb3IgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvci5cbiAgICAgKiBBbHNvIHVzZWQgYnkgT2JqZWN0Lmhhc093blByb3BlcnR5LlxuICAgICAqLyBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgKHRhcmdldCwgcHJvcCkge1xuICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5fZGVzY3JpcHRvcnMuYWxsS2V5cyA/IFJlZmxlY3QuaGFzKHByb3h5LCBwcm9wKSA/IHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgfSA6IHVuZGVmaW5lZCA6IFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHByb3h5LCBwcm9wKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICogQSB0cmFwIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YuXG4gICAgICovIGdldFByb3RvdHlwZU9mICgpIHtcbiAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHByb3h5KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICogQSB0cmFwIGZvciB0aGUgaW4gb3BlcmF0b3IuXG4gICAgICovIGhhcyAodGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5oYXMocHJveHksIHByb3ApO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgKiBBIHRyYXAgZm9yIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIGFuZCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzLlxuICAgICAqLyBvd25LZXlzICgpIHtcbiAgICAgICAgICAgIHJldHVybiBSZWZsZWN0Lm93bktleXMocHJveHkpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgKiBBIHRyYXAgZm9yIHNldHRpbmcgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqLyBzZXQgKHRhcmdldCwgcHJvcCwgdmFsdWUpIHtcbiAgICAgICAgICAgIHByb3h5W3Byb3BdID0gdmFsdWU7IC8vIHNldCB0byBwcm94eVxuICAgICAgICAgICAgZGVsZXRlIHRhcmdldFtwcm9wXTsgLy8gcmVtb3ZlIGZyb20gY2FjaGVcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2Rlc2NyaXB0b3JzKHByb3h5LCBkZWZhdWx0cyA9IHtcbiAgICBzY3JpcHRhYmxlOiB0cnVlLFxuICAgIGluZGV4YWJsZTogdHJ1ZVxufSkge1xuICAgIGNvbnN0IHsgX3NjcmlwdGFibGUgPWRlZmF1bHRzLnNjcmlwdGFibGUgLCBfaW5kZXhhYmxlID1kZWZhdWx0cy5pbmRleGFibGUgLCBfYWxsS2V5cyA9ZGVmYXVsdHMuYWxsS2V5cyAgfSA9IHByb3h5O1xuICAgIHJldHVybiB7XG4gICAgICAgIGFsbEtleXM6IF9hbGxLZXlzLFxuICAgICAgICBzY3JpcHRhYmxlOiBfc2NyaXB0YWJsZSxcbiAgICAgICAgaW5kZXhhYmxlOiBfaW5kZXhhYmxlLFxuICAgICAgICBpc1NjcmlwdGFibGU6IGlzRnVuY3Rpb24oX3NjcmlwdGFibGUpID8gX3NjcmlwdGFibGUgOiAoKT0+X3NjcmlwdGFibGUsXG4gICAgICAgIGlzSW5kZXhhYmxlOiBpc0Z1bmN0aW9uKF9pbmRleGFibGUpID8gX2luZGV4YWJsZSA6ICgpPT5faW5kZXhhYmxlXG4gICAgfTtcbn1cbmNvbnN0IHJlYWRLZXkgPSAocHJlZml4LCBuYW1lKT0+cHJlZml4ID8gcHJlZml4ICsgX2NhcGl0YWxpemUobmFtZSkgOiBuYW1lO1xuY29uc3QgbmVlZHNTdWJSZXNvbHZlciA9IChwcm9wLCB2YWx1ZSk9PmlzT2JqZWN0KHZhbHVlKSAmJiBwcm9wICE9PSAnYWRhcHRlcnMnICYmIChPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpID09PSBudWxsIHx8IHZhbHVlLmNvbnN0cnVjdG9yID09PSBPYmplY3QpO1xuZnVuY3Rpb24gX2NhY2hlZCh0YXJnZXQsIHByb3AsIHJlc29sdmUpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRhcmdldCwgcHJvcCkpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldFtwcm9wXTtcbiAgICB9XG4gICAgY29uc3QgdmFsdWUgPSByZXNvbHZlKCk7XG4gICAgLy8gY2FjaGUgdGhlIHJlc29sdmVkIHZhbHVlXG4gICAgdGFyZ2V0W3Byb3BdID0gdmFsdWU7XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gX3Jlc29sdmVXaXRoQ29udGV4dCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7XG4gICAgY29uc3QgeyBfcHJveHkgLCBfY29udGV4dCAsIF9zdWJQcm94eSAsIF9kZXNjcmlwdG9yczogZGVzY3JpcHRvcnMgIH0gPSB0YXJnZXQ7XG4gICAgbGV0IHZhbHVlID0gX3Byb3h5W3Byb3BdOyAvLyByZXNvbHZlIGZyb20gcHJveHlcbiAgICAvLyByZXNvbHZlIHdpdGggY29udGV4dFxuICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSAmJiBkZXNjcmlwdG9ycy5pc1NjcmlwdGFibGUocHJvcCkpIHtcbiAgICAgICAgdmFsdWUgPSBfcmVzb2x2ZVNjcmlwdGFibGUocHJvcCwgdmFsdWUsIHRhcmdldCwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgICBpZiAoaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoKSB7XG4gICAgICAgIHZhbHVlID0gX3Jlc29sdmVBcnJheShwcm9wLCB2YWx1ZSwgdGFyZ2V0LCBkZXNjcmlwdG9ycy5pc0luZGV4YWJsZSk7XG4gICAgfVxuICAgIGlmIChuZWVkc1N1YlJlc29sdmVyKHByb3AsIHZhbHVlKSkge1xuICAgICAgICAvLyBpZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXMgYW4gb2JqZWN0LCBjcmVhdGUgYSBzdWIgcmVzb2x2ZXIgZm9yIGl0XG4gICAgICAgIHZhbHVlID0gX2F0dGFjaENvbnRleHQodmFsdWUsIF9jb250ZXh0LCBfc3ViUHJveHkgJiYgX3N1YlByb3h5W3Byb3BdLCBkZXNjcmlwdG9ycyk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIF9yZXNvbHZlU2NyaXB0YWJsZShwcm9wLCBnZXRWYWx1ZSwgdGFyZ2V0LCByZWNlaXZlcikge1xuICAgIGNvbnN0IHsgX3Byb3h5ICwgX2NvbnRleHQgLCBfc3ViUHJveHkgLCBfc3RhY2sgIH0gPSB0YXJnZXQ7XG4gICAgaWYgKF9zdGFjay5oYXMocHJvcCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWN1cnNpb24gZGV0ZWN0ZWQ6ICcgKyBBcnJheS5mcm9tKF9zdGFjaykuam9pbignLT4nKSArICctPicgKyBwcm9wKTtcbiAgICB9XG4gICAgX3N0YWNrLmFkZChwcm9wKTtcbiAgICBsZXQgdmFsdWUgPSBnZXRWYWx1ZShfY29udGV4dCwgX3N1YlByb3h5IHx8IHJlY2VpdmVyKTtcbiAgICBfc3RhY2suZGVsZXRlKHByb3ApO1xuICAgIGlmIChuZWVkc1N1YlJlc29sdmVyKHByb3AsIHZhbHVlKSkge1xuICAgICAgICAvLyBXaGVuIHNjcmlwdGFibGUgb3B0aW9uIHJldHVybnMgYW4gb2JqZWN0LCBjcmVhdGUgYSByZXNvbHZlciBvbiB0aGF0LlxuICAgICAgICB2YWx1ZSA9IGNyZWF0ZVN1YlJlc29sdmVyKF9wcm94eS5fc2NvcGVzLCBfcHJveHksIHByb3AsIHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gX3Jlc29sdmVBcnJheShwcm9wLCB2YWx1ZSwgdGFyZ2V0LCBpc0luZGV4YWJsZSkge1xuICAgIGNvbnN0IHsgX3Byb3h5ICwgX2NvbnRleHQgLCBfc3ViUHJveHkgLCBfZGVzY3JpcHRvcnM6IGRlc2NyaXB0b3JzICB9ID0gdGFyZ2V0O1xuICAgIGlmICh0eXBlb2YgX2NvbnRleHQuaW5kZXggIT09ICd1bmRlZmluZWQnICYmIGlzSW5kZXhhYmxlKHByb3ApKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZVtfY29udGV4dC5pbmRleCAlIHZhbHVlLmxlbmd0aF07XG4gICAgfSBlbHNlIGlmIChpc09iamVjdCh2YWx1ZVswXSkpIHtcbiAgICAgICAgLy8gQXJyYXkgb2Ygb2JqZWN0cywgcmV0dXJuIGFycmF5IG9yIHJlc29sdmVyc1xuICAgICAgICBjb25zdCBhcnIgPSB2YWx1ZTtcbiAgICAgICAgY29uc3Qgc2NvcGVzID0gX3Byb3h5Ll9zY29wZXMuZmlsdGVyKChzKT0+cyAhPT0gYXJyKTtcbiAgICAgICAgdmFsdWUgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGFycil7XG4gICAgICAgICAgICBjb25zdCByZXNvbHZlciA9IGNyZWF0ZVN1YlJlc29sdmVyKHNjb3BlcywgX3Byb3h5LCBwcm9wLCBpdGVtKTtcbiAgICAgICAgICAgIHZhbHVlLnB1c2goX2F0dGFjaENvbnRleHQocmVzb2x2ZXIsIF9jb250ZXh0LCBfc3ViUHJveHkgJiYgX3N1YlByb3h5W3Byb3BdLCBkZXNjcmlwdG9ycykpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVGYWxsYmFjayhmYWxsYmFjaywgcHJvcCwgdmFsdWUpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihmYWxsYmFjaykgPyBmYWxsYmFjayhwcm9wLCB2YWx1ZSkgOiBmYWxsYmFjaztcbn1cbmNvbnN0IGdldFNjb3BlID0gKGtleSwgcGFyZW50KT0+a2V5ID09PSB0cnVlID8gcGFyZW50IDogdHlwZW9mIGtleSA9PT0gJ3N0cmluZycgPyByZXNvbHZlT2JqZWN0S2V5KHBhcmVudCwga2V5KSA6IHVuZGVmaW5lZDtcbmZ1bmN0aW9uIGFkZFNjb3BlcyhzZXQsIHBhcmVudFNjb3Blcywga2V5LCBwYXJlbnRGYWxsYmFjaywgdmFsdWUpIHtcbiAgICBmb3IgKGNvbnN0IHBhcmVudCBvZiBwYXJlbnRTY29wZXMpe1xuICAgICAgICBjb25zdCBzY29wZSA9IGdldFNjb3BlKGtleSwgcGFyZW50KTtcbiAgICAgICAgaWYgKHNjb3BlKSB7XG4gICAgICAgICAgICBzZXQuYWRkKHNjb3BlKTtcbiAgICAgICAgICAgIGNvbnN0IGZhbGxiYWNrID0gcmVzb2x2ZUZhbGxiYWNrKHNjb3BlLl9mYWxsYmFjaywga2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGZhbGxiYWNrICE9PSAndW5kZWZpbmVkJyAmJiBmYWxsYmFjayAhPT0ga2V5ICYmIGZhbGxiYWNrICE9PSBwYXJlbnRGYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIC8vIFdoZW4gd2UgcmVhY2ggdGhlIGRlc2NyaXB0b3IgdGhhdCBkZWZpbmVzIGEgbmV3IF9mYWxsYmFjaywgcmV0dXJuIHRoYXQuXG4gICAgICAgICAgICAgICAgLy8gVGhlIGZhbGxiYWNrIHdpbGwgcmVzdW1lIHRvIHRoYXQgbmV3IHNjb3BlLlxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxsYmFjaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChzY29wZSA9PT0gZmFsc2UgJiYgdHlwZW9mIHBhcmVudEZhbGxiYWNrICE9PSAndW5kZWZpbmVkJyAmJiBrZXkgIT09IHBhcmVudEZhbGxiYWNrKSB7XG4gICAgICAgICAgICAvLyBGYWxsYmFjayB0byBgZmFsc2VgIHJlc3VsdHMgdG8gYGZhbHNlYCwgd2hlbiBmYWxsaW5nIGJhY2sgdG8gZGlmZmVyZW50IGtleS5cbiAgICAgICAgICAgIC8vIEZvciBleGFtcGxlIGBpbnRlcmFjdGlvbmAgZnJvbSBgaG92ZXJgIG9yIGBwbHVnaW5zLnRvb2x0aXBgIGFuZCBgYW5pbWF0aW9uYCBmcm9tIGBhbmltYXRpb25zYFxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gY3JlYXRlU3ViUmVzb2x2ZXIocGFyZW50U2NvcGVzLCByZXNvbHZlciwgcHJvcCwgdmFsdWUpIHtcbiAgICBjb25zdCByb290U2NvcGVzID0gcmVzb2x2ZXIuX3Jvb3RTY29wZXM7XG4gICAgY29uc3QgZmFsbGJhY2sgPSByZXNvbHZlRmFsbGJhY2socmVzb2x2ZXIuX2ZhbGxiYWNrLCBwcm9wLCB2YWx1ZSk7XG4gICAgY29uc3QgYWxsU2NvcGVzID0gW1xuICAgICAgICAuLi5wYXJlbnRTY29wZXMsXG4gICAgICAgIC4uLnJvb3RTY29wZXNcbiAgICBdO1xuICAgIGNvbnN0IHNldCA9IG5ldyBTZXQoKTtcbiAgICBzZXQuYWRkKHZhbHVlKTtcbiAgICBsZXQga2V5ID0gYWRkU2NvcGVzRnJvbUtleShzZXQsIGFsbFNjb3BlcywgcHJvcCwgZmFsbGJhY2sgfHwgcHJvcCwgdmFsdWUpO1xuICAgIGlmIChrZXkgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGZhbGxiYWNrICE9PSAndW5kZWZpbmVkJyAmJiBmYWxsYmFjayAhPT0gcHJvcCkge1xuICAgICAgICBrZXkgPSBhZGRTY29wZXNGcm9tS2V5KHNldCwgYWxsU2NvcGVzLCBmYWxsYmFjaywga2V5LCB2YWx1ZSk7XG4gICAgICAgIGlmIChrZXkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gX2NyZWF0ZVJlc29sdmVyKEFycmF5LmZyb20oc2V0KSwgW1xuICAgICAgICAnJ1xuICAgIF0sIHJvb3RTY29wZXMsIGZhbGxiYWNrLCAoKT0+c3ViR2V0VGFyZ2V0KHJlc29sdmVyLCBwcm9wLCB2YWx1ZSkpO1xufVxuZnVuY3Rpb24gYWRkU2NvcGVzRnJvbUtleShzZXQsIGFsbFNjb3Blcywga2V5LCBmYWxsYmFjaywgaXRlbSkge1xuICAgIHdoaWxlKGtleSl7XG4gICAgICAgIGtleSA9IGFkZFNjb3BlcyhzZXQsIGFsbFNjb3Blcywga2V5LCBmYWxsYmFjaywgaXRlbSk7XG4gICAgfVxuICAgIHJldHVybiBrZXk7XG59XG5mdW5jdGlvbiBzdWJHZXRUYXJnZXQocmVzb2x2ZXIsIHByb3AsIHZhbHVlKSB7XG4gICAgY29uc3QgcGFyZW50ID0gcmVzb2x2ZXIuX2dldFRhcmdldCgpO1xuICAgIGlmICghKHByb3AgaW4gcGFyZW50KSkge1xuICAgICAgICBwYXJlbnRbcHJvcF0gPSB7fTtcbiAgICB9XG4gICAgY29uc3QgdGFyZ2V0ID0gcGFyZW50W3Byb3BdO1xuICAgIGlmIChpc0FycmF5KHRhcmdldCkgJiYgaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIC8vIEZvciBhcnJheSBvZiBvYmplY3RzLCB0aGUgb2JqZWN0IGlzIHVzZWQgdG8gc3RvcmUgdXBkYXRlZCB2YWx1ZXNcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0IHx8IHt9O1xufVxuZnVuY3Rpb24gX3Jlc29sdmVXaXRoUHJlZml4ZXMocHJvcCwgcHJlZml4ZXMsIHNjb3BlcywgcHJveHkpIHtcbiAgICBsZXQgdmFsdWU7XG4gICAgZm9yIChjb25zdCBwcmVmaXggb2YgcHJlZml4ZXMpe1xuICAgICAgICB2YWx1ZSA9IF9yZXNvbHZlKHJlYWRLZXkocHJlZml4LCBwcm9wKSwgc2NvcGVzKTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiBuZWVkc1N1YlJlc29sdmVyKHByb3AsIHZhbHVlKSA/IGNyZWF0ZVN1YlJlc29sdmVyKHNjb3BlcywgcHJveHksIHByb3AsIHZhbHVlKSA6IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gX3Jlc29sdmUoa2V5LCBzY29wZXMpIHtcbiAgICBmb3IgKGNvbnN0IHNjb3BlIG9mIHNjb3Blcyl7XG4gICAgICAgIGlmICghc2NvcGUpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbHVlID0gc2NvcGVba2V5XTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGdldEtleXNGcm9tQWxsU2NvcGVzKHRhcmdldCkge1xuICAgIGxldCBrZXlzID0gdGFyZ2V0Ll9rZXlzO1xuICAgIGlmICgha2V5cykge1xuICAgICAgICBrZXlzID0gdGFyZ2V0Ll9rZXlzID0gcmVzb2x2ZUtleXNGcm9tQWxsU2NvcGVzKHRhcmdldC5fc2NvcGVzKTtcbiAgICB9XG4gICAgcmV0dXJuIGtleXM7XG59XG5mdW5jdGlvbiByZXNvbHZlS2V5c0Zyb21BbGxTY29wZXMoc2NvcGVzKSB7XG4gICAgY29uc3Qgc2V0ID0gbmV3IFNldCgpO1xuICAgIGZvciAoY29uc3Qgc2NvcGUgb2Ygc2NvcGVzKXtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoc2NvcGUpLmZpbHRlcigoayk9PiFrLnN0YXJ0c1dpdGgoJ18nKSkpe1xuICAgICAgICAgICAgc2V0LmFkZChrZXkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBBcnJheS5mcm9tKHNldCk7XG59XG5mdW5jdGlvbiBfcGFyc2VPYmplY3REYXRhUmFkaWFsU2NhbGUobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgY29uc3QgeyBpU2NhbGUgIH0gPSBtZXRhO1xuICAgIGNvbnN0IHsga2V5ID0ncicgIH0gPSB0aGlzLl9wYXJzaW5nO1xuICAgIGNvbnN0IHBhcnNlZCA9IG5ldyBBcnJheShjb3VudCk7XG4gICAgbGV0IGksIGlsZW4sIGluZGV4LCBpdGVtO1xuICAgIGZvcihpID0gMCwgaWxlbiA9IGNvdW50OyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgaW5kZXggPSBpICsgc3RhcnQ7XG4gICAgICAgIGl0ZW0gPSBkYXRhW2luZGV4XTtcbiAgICAgICAgcGFyc2VkW2ldID0ge1xuICAgICAgICAgICAgcjogaVNjYWxlLnBhcnNlKHJlc29sdmVPYmplY3RLZXkoaXRlbSwga2V5KSwgaW5kZXgpXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBwYXJzZWQ7XG59XG5cbmNvbnN0IEVQU0lMT04gPSBOdW1iZXIuRVBTSUxPTiB8fCAxZS0xNDtcbmNvbnN0IGdldFBvaW50ID0gKHBvaW50cywgaSk9PmkgPCBwb2ludHMubGVuZ3RoICYmICFwb2ludHNbaV0uc2tpcCAmJiBwb2ludHNbaV07XG5jb25zdCBnZXRWYWx1ZUF4aXMgPSAoaW5kZXhBeGlzKT0+aW5kZXhBeGlzID09PSAneCcgPyAneScgOiAneCc7XG5mdW5jdGlvbiBzcGxpbmVDdXJ2ZShmaXJzdFBvaW50LCBtaWRkbGVQb2ludCwgYWZ0ZXJQb2ludCwgdCkge1xuICAgIC8vIFByb3BzIHRvIFJvYiBTcGVuY2VyIGF0IHNjYWxlZCBpbm5vdmF0aW9uIGZvciBoaXMgcG9zdCBvbiBzcGxpbmluZyBiZXR3ZWVuIHBvaW50c1xuICAgIC8vIGh0dHA6Ly9zY2FsZWRpbm5vdmF0aW9uLmNvbS9hbmFseXRpY3Mvc3BsaW5lcy9hYm91dFNwbGluZXMuaHRtbFxuICAgIC8vIFRoaXMgZnVuY3Rpb24gbXVzdCBhbHNvIHJlc3BlY3QgXCJza2lwcGVkXCIgcG9pbnRzXG4gICAgY29uc3QgcHJldmlvdXMgPSBmaXJzdFBvaW50LnNraXAgPyBtaWRkbGVQb2ludCA6IGZpcnN0UG9pbnQ7XG4gICAgY29uc3QgY3VycmVudCA9IG1pZGRsZVBvaW50O1xuICAgIGNvbnN0IG5leHQgPSBhZnRlclBvaW50LnNraXAgPyBtaWRkbGVQb2ludCA6IGFmdGVyUG9pbnQ7XG4gICAgY29uc3QgZDAxID0gZGlzdGFuY2VCZXR3ZWVuUG9pbnRzKGN1cnJlbnQsIHByZXZpb3VzKTtcbiAgICBjb25zdCBkMTIgPSBkaXN0YW5jZUJldHdlZW5Qb2ludHMobmV4dCwgY3VycmVudCk7XG4gICAgbGV0IHMwMSA9IGQwMSAvIChkMDEgKyBkMTIpO1xuICAgIGxldCBzMTIgPSBkMTIgLyAoZDAxICsgZDEyKTtcbiAgICAvLyBJZiBhbGwgcG9pbnRzIGFyZSB0aGUgc2FtZSwgczAxICYgczAyIHdpbGwgYmUgaW5mXG4gICAgczAxID0gaXNOYU4oczAxKSA/IDAgOiBzMDE7XG4gICAgczEyID0gaXNOYU4oczEyKSA/IDAgOiBzMTI7XG4gICAgY29uc3QgZmEgPSB0ICogczAxOyAvLyBzY2FsaW5nIGZhY3RvciBmb3IgdHJpYW5nbGUgVGFcbiAgICBjb25zdCBmYiA9IHQgKiBzMTI7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcHJldmlvdXM6IHtcbiAgICAgICAgICAgIHg6IGN1cnJlbnQueCAtIGZhICogKG5leHQueCAtIHByZXZpb3VzLngpLFxuICAgICAgICAgICAgeTogY3VycmVudC55IC0gZmEgKiAobmV4dC55IC0gcHJldmlvdXMueSlcbiAgICAgICAgfSxcbiAgICAgICAgbmV4dDoge1xuICAgICAgICAgICAgeDogY3VycmVudC54ICsgZmIgKiAobmV4dC54IC0gcHJldmlvdXMueCksXG4gICAgICAgICAgICB5OiBjdXJyZW50LnkgKyBmYiAqIChuZXh0LnkgLSBwcmV2aW91cy55KVxuICAgICAgICB9XG4gICAgfTtcbn1cbi8qKlxuICogQWRqdXN0IHRhbmdlbnRzIHRvIGVuc3VyZSBtb25vdG9uaWMgcHJvcGVydGllc1xuICovIGZ1bmN0aW9uIG1vbm90b25lQWRqdXN0KHBvaW50cywgZGVsdGFLLCBtSykge1xuICAgIGNvbnN0IHBvaW50c0xlbiA9IHBvaW50cy5sZW5ndGg7XG4gICAgbGV0IGFscGhhSywgYmV0YUssIHRhdUssIHNxdWFyZWRNYWduaXR1ZGUsIHBvaW50Q3VycmVudDtcbiAgICBsZXQgcG9pbnRBZnRlciA9IGdldFBvaW50KHBvaW50cywgMCk7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHBvaW50c0xlbiAtIDE7ICsraSl7XG4gICAgICAgIHBvaW50Q3VycmVudCA9IHBvaW50QWZ0ZXI7XG4gICAgICAgIHBvaW50QWZ0ZXIgPSBnZXRQb2ludChwb2ludHMsIGkgKyAxKTtcbiAgICAgICAgaWYgKCFwb2ludEN1cnJlbnQgfHwgIXBvaW50QWZ0ZXIpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhbG1vc3RFcXVhbHMoZGVsdGFLW2ldLCAwLCBFUFNJTE9OKSkge1xuICAgICAgICAgICAgbUtbaV0gPSBtS1tpICsgMV0gPSAwO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgYWxwaGFLID0gbUtbaV0gLyBkZWx0YUtbaV07XG4gICAgICAgIGJldGFLID0gbUtbaSArIDFdIC8gZGVsdGFLW2ldO1xuICAgICAgICBzcXVhcmVkTWFnbml0dWRlID0gTWF0aC5wb3coYWxwaGFLLCAyKSArIE1hdGgucG93KGJldGFLLCAyKTtcbiAgICAgICAgaWYgKHNxdWFyZWRNYWduaXR1ZGUgPD0gOSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdGF1SyA9IDMgLyBNYXRoLnNxcnQoc3F1YXJlZE1hZ25pdHVkZSk7XG4gICAgICAgIG1LW2ldID0gYWxwaGFLICogdGF1SyAqIGRlbHRhS1tpXTtcbiAgICAgICAgbUtbaSArIDFdID0gYmV0YUsgKiB0YXVLICogZGVsdGFLW2ldO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG1vbm90b25lQ29tcHV0ZShwb2ludHMsIG1LLCBpbmRleEF4aXMgPSAneCcpIHtcbiAgICBjb25zdCB2YWx1ZUF4aXMgPSBnZXRWYWx1ZUF4aXMoaW5kZXhBeGlzKTtcbiAgICBjb25zdCBwb2ludHNMZW4gPSBwb2ludHMubGVuZ3RoO1xuICAgIGxldCBkZWx0YSwgcG9pbnRCZWZvcmUsIHBvaW50Q3VycmVudDtcbiAgICBsZXQgcG9pbnRBZnRlciA9IGdldFBvaW50KHBvaW50cywgMCk7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHBvaW50c0xlbjsgKytpKXtcbiAgICAgICAgcG9pbnRCZWZvcmUgPSBwb2ludEN1cnJlbnQ7XG4gICAgICAgIHBvaW50Q3VycmVudCA9IHBvaW50QWZ0ZXI7XG4gICAgICAgIHBvaW50QWZ0ZXIgPSBnZXRQb2ludChwb2ludHMsIGkgKyAxKTtcbiAgICAgICAgaWYgKCFwb2ludEN1cnJlbnQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGlQaXhlbCA9IHBvaW50Q3VycmVudFtpbmRleEF4aXNdO1xuICAgICAgICBjb25zdCB2UGl4ZWwgPSBwb2ludEN1cnJlbnRbdmFsdWVBeGlzXTtcbiAgICAgICAgaWYgKHBvaW50QmVmb3JlKSB7XG4gICAgICAgICAgICBkZWx0YSA9IChpUGl4ZWwgLSBwb2ludEJlZm9yZVtpbmRleEF4aXNdKSAvIDM7XG4gICAgICAgICAgICBwb2ludEN1cnJlbnRbYGNwMSR7aW5kZXhBeGlzfWBdID0gaVBpeGVsIC0gZGVsdGE7XG4gICAgICAgICAgICBwb2ludEN1cnJlbnRbYGNwMSR7dmFsdWVBeGlzfWBdID0gdlBpeGVsIC0gZGVsdGEgKiBtS1tpXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9pbnRBZnRlcikge1xuICAgICAgICAgICAgZGVsdGEgPSAocG9pbnRBZnRlcltpbmRleEF4aXNdIC0gaVBpeGVsKSAvIDM7XG4gICAgICAgICAgICBwb2ludEN1cnJlbnRbYGNwMiR7aW5kZXhBeGlzfWBdID0gaVBpeGVsICsgZGVsdGE7XG4gICAgICAgICAgICBwb2ludEN1cnJlbnRbYGNwMiR7dmFsdWVBeGlzfWBdID0gdlBpeGVsICsgZGVsdGEgKiBtS1tpXTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBjYWxjdWxhdGVzIELDqXppZXIgY29udHJvbCBwb2ludHMgaW4gYSBzaW1pbGFyIHdheSB0aGFuIHxzcGxpbmVDdXJ2ZXwsXG4gKiBidXQgcHJlc2VydmVzIG1vbm90b25pY2l0eSBvZiB0aGUgcHJvdmlkZWQgZGF0YSBhbmQgZW5zdXJlcyBubyBsb2NhbCBleHRyZW11bXMgYXJlIGFkZGVkXG4gKiBiZXR3ZWVuIHRoZSBkYXRhc2V0IGRpc2NyZXRlIHBvaW50cyBkdWUgdG8gdGhlIGludGVycG9sYXRpb24uXG4gKiBTZWUgOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Nb25vdG9uZV9jdWJpY19pbnRlcnBvbGF0aW9uXG4gKi8gZnVuY3Rpb24gc3BsaW5lQ3VydmVNb25vdG9uZShwb2ludHMsIGluZGV4QXhpcyA9ICd4Jykge1xuICAgIGNvbnN0IHZhbHVlQXhpcyA9IGdldFZhbHVlQXhpcyhpbmRleEF4aXMpO1xuICAgIGNvbnN0IHBvaW50c0xlbiA9IHBvaW50cy5sZW5ndGg7XG4gICAgY29uc3QgZGVsdGFLID0gQXJyYXkocG9pbnRzTGVuKS5maWxsKDApO1xuICAgIGNvbnN0IG1LID0gQXJyYXkocG9pbnRzTGVuKTtcbiAgICAvLyBDYWxjdWxhdGUgc2xvcGVzIChkZWx0YUspIGFuZCBpbml0aWFsaXplIHRhbmdlbnRzIChtSylcbiAgICBsZXQgaSwgcG9pbnRCZWZvcmUsIHBvaW50Q3VycmVudDtcbiAgICBsZXQgcG9pbnRBZnRlciA9IGdldFBvaW50KHBvaW50cywgMCk7XG4gICAgZm9yKGkgPSAwOyBpIDwgcG9pbnRzTGVuOyArK2kpe1xuICAgICAgICBwb2ludEJlZm9yZSA9IHBvaW50Q3VycmVudDtcbiAgICAgICAgcG9pbnRDdXJyZW50ID0gcG9pbnRBZnRlcjtcbiAgICAgICAgcG9pbnRBZnRlciA9IGdldFBvaW50KHBvaW50cywgaSArIDEpO1xuICAgICAgICBpZiAoIXBvaW50Q3VycmVudCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvaW50QWZ0ZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IHNsb3BlRGVsdGEgPSBwb2ludEFmdGVyW2luZGV4QXhpc10gLSBwb2ludEN1cnJlbnRbaW5kZXhBeGlzXTtcbiAgICAgICAgICAgIC8vIEluIHRoZSBjYXNlIG9mIHR3byBwb2ludHMgdGhhdCBhcHBlYXIgYXQgdGhlIHNhbWUgeCBwaXhlbCwgc2xvcGVEZWx0YVggaXMgMFxuICAgICAgICAgICAgZGVsdGFLW2ldID0gc2xvcGVEZWx0YSAhPT0gMCA/IChwb2ludEFmdGVyW3ZhbHVlQXhpc10gLSBwb2ludEN1cnJlbnRbdmFsdWVBeGlzXSkgLyBzbG9wZURlbHRhIDogMDtcbiAgICAgICAgfVxuICAgICAgICBtS1tpXSA9ICFwb2ludEJlZm9yZSA/IGRlbHRhS1tpXSA6ICFwb2ludEFmdGVyID8gZGVsdGFLW2kgLSAxXSA6IHNpZ24oZGVsdGFLW2kgLSAxXSkgIT09IHNpZ24oZGVsdGFLW2ldKSA/IDAgOiAoZGVsdGFLW2kgLSAxXSArIGRlbHRhS1tpXSkgLyAyO1xuICAgIH1cbiAgICBtb25vdG9uZUFkanVzdChwb2ludHMsIGRlbHRhSywgbUspO1xuICAgIG1vbm90b25lQ29tcHV0ZShwb2ludHMsIG1LLCBpbmRleEF4aXMpO1xufVxuZnVuY3Rpb24gY2FwQ29udHJvbFBvaW50KHB0LCBtaW4sIG1heCkge1xuICAgIHJldHVybiBNYXRoLm1heChNYXRoLm1pbihwdCwgbWF4KSwgbWluKTtcbn1cbmZ1bmN0aW9uIGNhcEJlemllclBvaW50cyhwb2ludHMsIGFyZWEpIHtcbiAgICBsZXQgaSwgaWxlbiwgcG9pbnQsIGluQXJlYSwgaW5BcmVhUHJldjtcbiAgICBsZXQgaW5BcmVhTmV4dCA9IF9pc1BvaW50SW5BcmVhKHBvaW50c1swXSwgYXJlYSk7XG4gICAgZm9yKGkgPSAwLCBpbGVuID0gcG9pbnRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIGluQXJlYVByZXYgPSBpbkFyZWE7XG4gICAgICAgIGluQXJlYSA9IGluQXJlYU5leHQ7XG4gICAgICAgIGluQXJlYU5leHQgPSBpIDwgaWxlbiAtIDEgJiYgX2lzUG9pbnRJbkFyZWEocG9pbnRzW2kgKyAxXSwgYXJlYSk7XG4gICAgICAgIGlmICghaW5BcmVhKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBwb2ludCA9IHBvaW50c1tpXTtcbiAgICAgICAgaWYgKGluQXJlYVByZXYpIHtcbiAgICAgICAgICAgIHBvaW50LmNwMXggPSBjYXBDb250cm9sUG9pbnQocG9pbnQuY3AxeCwgYXJlYS5sZWZ0LCBhcmVhLnJpZ2h0KTtcbiAgICAgICAgICAgIHBvaW50LmNwMXkgPSBjYXBDb250cm9sUG9pbnQocG9pbnQuY3AxeSwgYXJlYS50b3AsIGFyZWEuYm90dG9tKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5BcmVhTmV4dCkge1xuICAgICAgICAgICAgcG9pbnQuY3AyeCA9IGNhcENvbnRyb2xQb2ludChwb2ludC5jcDJ4LCBhcmVhLmxlZnQsIGFyZWEucmlnaHQpO1xuICAgICAgICAgICAgcG9pbnQuY3AyeSA9IGNhcENvbnRyb2xQb2ludChwb2ludC5jcDJ5LCBhcmVhLnRvcCwgYXJlYS5ib3R0b20pO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF91cGRhdGVCZXppZXJDb250cm9sUG9pbnRzKHBvaW50cywgb3B0aW9ucywgYXJlYSwgbG9vcCwgaW5kZXhBeGlzKSB7XG4gICAgbGV0IGksIGlsZW4sIHBvaW50LCBjb250cm9sUG9pbnRzO1xuICAgIC8vIE9ubHkgY29uc2lkZXIgcG9pbnRzIHRoYXQgYXJlIGRyYXduIGluIGNhc2UgdGhlIHNwYW5HYXBzIG9wdGlvbiBpcyB1c2VkXG4gICAgaWYgKG9wdGlvbnMuc3BhbkdhcHMpIHtcbiAgICAgICAgcG9pbnRzID0gcG9pbnRzLmZpbHRlcigocHQpPT4hcHQuc2tpcCk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmN1YmljSW50ZXJwb2xhdGlvbk1vZGUgPT09ICdtb25vdG9uZScpIHtcbiAgICAgICAgc3BsaW5lQ3VydmVNb25vdG9uZShwb2ludHMsIGluZGV4QXhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHByZXYgPSBsb29wID8gcG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXSA6IHBvaW50c1swXTtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gcG9pbnRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBwb2ludCA9IHBvaW50c1tpXTtcbiAgICAgICAgICAgIGNvbnRyb2xQb2ludHMgPSBzcGxpbmVDdXJ2ZShwcmV2LCBwb2ludCwgcG9pbnRzW01hdGgubWluKGkgKyAxLCBpbGVuIC0gKGxvb3AgPyAwIDogMSkpICUgaWxlbl0sIG9wdGlvbnMudGVuc2lvbik7XG4gICAgICAgICAgICBwb2ludC5jcDF4ID0gY29udHJvbFBvaW50cy5wcmV2aW91cy54O1xuICAgICAgICAgICAgcG9pbnQuY3AxeSA9IGNvbnRyb2xQb2ludHMucHJldmlvdXMueTtcbiAgICAgICAgICAgIHBvaW50LmNwMnggPSBjb250cm9sUG9pbnRzLm5leHQueDtcbiAgICAgICAgICAgIHBvaW50LmNwMnkgPSBjb250cm9sUG9pbnRzLm5leHQueTtcbiAgICAgICAgICAgIHByZXYgPSBwb2ludDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAob3B0aW9ucy5jYXBCZXppZXJQb2ludHMpIHtcbiAgICAgICAgY2FwQmV6aWVyUG9pbnRzKHBvaW50cywgYXJlYSk7XG4gICAgfVxufVxuXG4vKipcbiAqIE5vdGU6IHR5cGVkZWZzIGFyZSBhdXRvLWV4cG9ydGVkLCBzbyB1c2UgYSBtYWRlLXVwIGBkb21gIG5hbWVzcGFjZSB3aGVyZVxuICogbmVjZXNzYXJ5IHRvIGF2b2lkIGR1cGxpY2F0ZXMgd2l0aCBgZXhwb3J0ICogZnJvbSAnLi9oZWxwZXJzYDsgc2VlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzQ2MDExXG4gKiBAdHlwZWRlZiB7IGltcG9ydCgnLi4vY29yZS9jb3JlLmNvbnRyb2xsZXIuanMnKS5kZWZhdWx0IH0gZG9tLkNoYXJ0XG4gKiBAdHlwZWRlZiB7IGltcG9ydCgnLi4vLi4vdHlwZXMnKS5DaGFydEV2ZW50IH0gQ2hhcnRFdmVudFxuICovIC8qKlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfaXNEb21TdXBwb3J0ZWQoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCc7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2dldFBhcmVudE5vZGUoZG9tTm9kZSkge1xuICAgIGxldCBwYXJlbnQgPSBkb21Ob2RlLnBhcmVudE5vZGU7XG4gICAgaWYgKHBhcmVudCAmJiBwYXJlbnQudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgU2hhZG93Um9vdF0nKSB7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5ob3N0O1xuICAgIH1cbiAgICByZXR1cm4gcGFyZW50O1xufVxuLyoqXG4gKiBjb252ZXJ0IG1heC13aWR0aC9tYXgtaGVpZ2h0IHZhbHVlcyB0aGF0IG1heSBiZSBwZXJjZW50YWdlcyBpbnRvIGEgbnVtYmVyXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIHBhcnNlTWF4U3R5bGUoc3R5bGVWYWx1ZSwgbm9kZSwgcGFyZW50UHJvcGVydHkpIHtcbiAgICBsZXQgdmFsdWVJblBpeGVscztcbiAgICBpZiAodHlwZW9mIHN0eWxlVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhbHVlSW5QaXhlbHMgPSBwYXJzZUludChzdHlsZVZhbHVlLCAxMCk7XG4gICAgICAgIGlmIChzdHlsZVZhbHVlLmluZGV4T2YoJyUnKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIC8vIHBlcmNlbnRhZ2UgKiBzaXplIGluIGRpbWVuc2lvblxuICAgICAgICAgICAgdmFsdWVJblBpeGVscyA9IHZhbHVlSW5QaXhlbHMgLyAxMDAgKiBub2RlLnBhcmVudE5vZGVbcGFyZW50UHJvcGVydHldO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWVJblBpeGVscyA9IHN0eWxlVmFsdWU7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZUluUGl4ZWxzO1xufVxuY29uc3QgZ2V0Q29tcHV0ZWRTdHlsZSA9IChlbGVtZW50KT0+ZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgbnVsbCk7XG5mdW5jdGlvbiBnZXRTdHlsZShlbCwgcHJvcGVydHkpIHtcbiAgICByZXR1cm4gZ2V0Q29tcHV0ZWRTdHlsZShlbCkuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSk7XG59XG5jb25zdCBwb3NpdGlvbnMgPSBbXG4gICAgJ3RvcCcsXG4gICAgJ3JpZ2h0JyxcbiAgICAnYm90dG9tJyxcbiAgICAnbGVmdCdcbl07XG5mdW5jdGlvbiBnZXRQb3NpdGlvbmVkU3R5bGUoc3R5bGVzLCBzdHlsZSwgc3VmZml4KSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgc3VmZml4ID0gc3VmZml4ID8gJy0nICsgc3VmZml4IDogJyc7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IDQ7IGkrKyl7XG4gICAgICAgIGNvbnN0IHBvcyA9IHBvc2l0aW9uc1tpXTtcbiAgICAgICAgcmVzdWx0W3Bvc10gPSBwYXJzZUZsb2F0KHN0eWxlc1tzdHlsZSArICctJyArIHBvcyArIHN1ZmZpeF0pIHx8IDA7XG4gICAgfVxuICAgIHJlc3VsdC53aWR0aCA9IHJlc3VsdC5sZWZ0ICsgcmVzdWx0LnJpZ2h0O1xuICAgIHJlc3VsdC5oZWlnaHQgPSByZXN1bHQudG9wICsgcmVzdWx0LmJvdHRvbTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuY29uc3QgdXNlT2Zmc2V0UG9zID0gKHgsIHksIHRhcmdldCk9Pih4ID4gMCB8fCB5ID4gMCkgJiYgKCF0YXJnZXQgfHwgIXRhcmdldC5zaGFkb3dSb290KTtcbi8qKlxuICogQHBhcmFtIGVcbiAqIEBwYXJhbSBjYW52YXNcbiAqIEByZXR1cm5zIENhbnZhcyBwb3NpdGlvblxuICovIGZ1bmN0aW9uIGdldENhbnZhc1Bvc2l0aW9uKGUsIGNhbnZhcykge1xuICAgIGNvbnN0IHRvdWNoZXMgPSBlLnRvdWNoZXM7XG4gICAgY29uc3Qgc291cmNlID0gdG91Y2hlcyAmJiB0b3VjaGVzLmxlbmd0aCA/IHRvdWNoZXNbMF0gOiBlO1xuICAgIGNvbnN0IHsgb2Zmc2V0WCAsIG9mZnNldFkgIH0gPSBzb3VyY2U7XG4gICAgbGV0IGJveCA9IGZhbHNlO1xuICAgIGxldCB4LCB5O1xuICAgIGlmICh1c2VPZmZzZXRQb3Mob2Zmc2V0WCwgb2Zmc2V0WSwgZS50YXJnZXQpKSB7XG4gICAgICAgIHggPSBvZmZzZXRYO1xuICAgICAgICB5ID0gb2Zmc2V0WTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCByZWN0ID0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICB4ID0gc291cmNlLmNsaWVudFggLSByZWN0LmxlZnQ7XG4gICAgICAgIHkgPSBzb3VyY2UuY2xpZW50WSAtIHJlY3QudG9wO1xuICAgICAgICBib3ggPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICB4LFxuICAgICAgICB5LFxuICAgICAgICBib3hcbiAgICB9O1xufVxuLyoqXG4gKiBHZXRzIGFuIGV2ZW50J3MgeCwgeSBjb29yZGluYXRlcywgcmVsYXRpdmUgdG8gdGhlIGNoYXJ0IGFyZWFcbiAqIEBwYXJhbSBldmVudFxuICogQHBhcmFtIGNoYXJ0XG4gKiBAcmV0dXJucyB4IGFuZCB5IGNvb3JkaW5hdGVzIG9mIHRoZSBldmVudFxuICovIGZ1bmN0aW9uIGdldFJlbGF0aXZlUG9zaXRpb24oZXZlbnQsIGNoYXJ0KSB7XG4gICAgaWYgKCduYXRpdmUnIGluIGV2ZW50KSB7XG4gICAgICAgIHJldHVybiBldmVudDtcbiAgICB9XG4gICAgY29uc3QgeyBjYW52YXMgLCBjdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyAgfSA9IGNoYXJ0O1xuICAgIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShjYW52YXMpO1xuICAgIGNvbnN0IGJvcmRlckJveCA9IHN0eWxlLmJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnO1xuICAgIGNvbnN0IHBhZGRpbmdzID0gZ2V0UG9zaXRpb25lZFN0eWxlKHN0eWxlLCAncGFkZGluZycpO1xuICAgIGNvbnN0IGJvcmRlcnMgPSBnZXRQb3NpdGlvbmVkU3R5bGUoc3R5bGUsICdib3JkZXInLCAnd2lkdGgnKTtcbiAgICBjb25zdCB7IHggLCB5ICwgYm94ICB9ID0gZ2V0Q2FudmFzUG9zaXRpb24oZXZlbnQsIGNhbnZhcyk7XG4gICAgY29uc3QgeE9mZnNldCA9IHBhZGRpbmdzLmxlZnQgKyAoYm94ICYmIGJvcmRlcnMubGVmdCk7XG4gICAgY29uc3QgeU9mZnNldCA9IHBhZGRpbmdzLnRvcCArIChib3ggJiYgYm9yZGVycy50b3ApO1xuICAgIGxldCB7IHdpZHRoICwgaGVpZ2h0ICB9ID0gY2hhcnQ7XG4gICAgaWYgKGJvcmRlckJveCkge1xuICAgICAgICB3aWR0aCAtPSBwYWRkaW5ncy53aWR0aCArIGJvcmRlcnMud2lkdGg7XG4gICAgICAgIGhlaWdodCAtPSBwYWRkaW5ncy5oZWlnaHQgKyBib3JkZXJzLmhlaWdodDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogTWF0aC5yb3VuZCgoeCAtIHhPZmZzZXQpIC8gd2lkdGggKiBjYW52YXMud2lkdGggLyBjdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyksXG4gICAgICAgIHk6IE1hdGgucm91bmQoKHkgLSB5T2Zmc2V0KSAvIGhlaWdodCAqIGNhbnZhcy5oZWlnaHQgLyBjdXJyZW50RGV2aWNlUGl4ZWxSYXRpbylcbiAgICB9O1xufVxuZnVuY3Rpb24gZ2V0Q29udGFpbmVyU2l6ZShjYW52YXMsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICBsZXQgbWF4V2lkdGgsIG1heEhlaWdodDtcbiAgICBpZiAod2lkdGggPT09IHVuZGVmaW5lZCB8fCBoZWlnaHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBfZ2V0UGFyZW50Tm9kZShjYW52YXMpO1xuICAgICAgICBpZiAoIWNvbnRhaW5lcikge1xuICAgICAgICAgICAgd2lkdGggPSBjYW52YXMuY2xpZW50V2lkdGg7XG4gICAgICAgICAgICBoZWlnaHQgPSBjYW52YXMuY2xpZW50SGVpZ2h0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgcmVjdCA9IGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsgLy8gdGhpcyBpcyB0aGUgYm9yZGVyIGJveCBvZiB0aGUgY29udGFpbmVyXG4gICAgICAgICAgICBjb25zdCBjb250YWluZXJTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoY29udGFpbmVyKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lckJvcmRlciA9IGdldFBvc2l0aW9uZWRTdHlsZShjb250YWluZXJTdHlsZSwgJ2JvcmRlcicsICd3aWR0aCcpO1xuICAgICAgICAgICAgY29uc3QgY29udGFpbmVyUGFkZGluZyA9IGdldFBvc2l0aW9uZWRTdHlsZShjb250YWluZXJTdHlsZSwgJ3BhZGRpbmcnKTtcbiAgICAgICAgICAgIHdpZHRoID0gcmVjdC53aWR0aCAtIGNvbnRhaW5lclBhZGRpbmcud2lkdGggLSBjb250YWluZXJCb3JkZXIud2lkdGg7XG4gICAgICAgICAgICBoZWlnaHQgPSByZWN0LmhlaWdodCAtIGNvbnRhaW5lclBhZGRpbmcuaGVpZ2h0IC0gY29udGFpbmVyQm9yZGVyLmhlaWdodDtcbiAgICAgICAgICAgIG1heFdpZHRoID0gcGFyc2VNYXhTdHlsZShjb250YWluZXJTdHlsZS5tYXhXaWR0aCwgY29udGFpbmVyLCAnY2xpZW50V2lkdGgnKTtcbiAgICAgICAgICAgIG1heEhlaWdodCA9IHBhcnNlTWF4U3R5bGUoY29udGFpbmVyU3R5bGUubWF4SGVpZ2h0LCBjb250YWluZXIsICdjbGllbnRIZWlnaHQnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aCxcbiAgICAgICAgaGVpZ2h0LFxuICAgICAgICBtYXhXaWR0aDogbWF4V2lkdGggfHwgSU5GSU5JVFksXG4gICAgICAgIG1heEhlaWdodDogbWF4SGVpZ2h0IHx8IElORklOSVRZXG4gICAgfTtcbn1cbmNvbnN0IHJvdW5kMSA9ICh2KT0+TWF0aC5yb3VuZCh2ICogMTApIC8gMTA7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eVxuZnVuY3Rpb24gZ2V0TWF4aW11bVNpemUoY2FudmFzLCBiYldpZHRoLCBiYkhlaWdodCwgYXNwZWN0UmF0aW8pIHtcbiAgICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoY2FudmFzKTtcbiAgICBjb25zdCBtYXJnaW5zID0gZ2V0UG9zaXRpb25lZFN0eWxlKHN0eWxlLCAnbWFyZ2luJyk7XG4gICAgY29uc3QgbWF4V2lkdGggPSBwYXJzZU1heFN0eWxlKHN0eWxlLm1heFdpZHRoLCBjYW52YXMsICdjbGllbnRXaWR0aCcpIHx8IElORklOSVRZO1xuICAgIGNvbnN0IG1heEhlaWdodCA9IHBhcnNlTWF4U3R5bGUoc3R5bGUubWF4SGVpZ2h0LCBjYW52YXMsICdjbGllbnRIZWlnaHQnKSB8fCBJTkZJTklUWTtcbiAgICBjb25zdCBjb250YWluZXJTaXplID0gZ2V0Q29udGFpbmVyU2l6ZShjYW52YXMsIGJiV2lkdGgsIGJiSGVpZ2h0KTtcbiAgICBsZXQgeyB3aWR0aCAsIGhlaWdodCAgfSA9IGNvbnRhaW5lclNpemU7XG4gICAgaWYgKHN0eWxlLmJveFNpemluZyA9PT0gJ2NvbnRlbnQtYm94Jykge1xuICAgICAgICBjb25zdCBib3JkZXJzID0gZ2V0UG9zaXRpb25lZFN0eWxlKHN0eWxlLCAnYm9yZGVyJywgJ3dpZHRoJyk7XG4gICAgICAgIGNvbnN0IHBhZGRpbmdzID0gZ2V0UG9zaXRpb25lZFN0eWxlKHN0eWxlLCAncGFkZGluZycpO1xuICAgICAgICB3aWR0aCAtPSBwYWRkaW5ncy53aWR0aCArIGJvcmRlcnMud2lkdGg7XG4gICAgICAgIGhlaWdodCAtPSBwYWRkaW5ncy5oZWlnaHQgKyBib3JkZXJzLmhlaWdodDtcbiAgICB9XG4gICAgd2lkdGggPSBNYXRoLm1heCgwLCB3aWR0aCAtIG1hcmdpbnMud2lkdGgpO1xuICAgIGhlaWdodCA9IE1hdGgubWF4KDAsIGFzcGVjdFJhdGlvID8gd2lkdGggLyBhc3BlY3RSYXRpbyA6IGhlaWdodCAtIG1hcmdpbnMuaGVpZ2h0KTtcbiAgICB3aWR0aCA9IHJvdW5kMShNYXRoLm1pbih3aWR0aCwgbWF4V2lkdGgsIGNvbnRhaW5lclNpemUubWF4V2lkdGgpKTtcbiAgICBoZWlnaHQgPSByb3VuZDEoTWF0aC5taW4oaGVpZ2h0LCBtYXhIZWlnaHQsIGNvbnRhaW5lclNpemUubWF4SGVpZ2h0KSk7XG4gICAgaWYgKHdpZHRoICYmICFoZWlnaHQpIHtcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzQ2NTlcbiAgICAgICAgLy8gSWYgdGhlIGNhbnZhcyBoYXMgd2lkdGgsIGJ1dCBubyBoZWlnaHQsIGRlZmF1bHQgdG8gYXNwZWN0UmF0aW8gb2YgMiAoY2FudmFzIGRlZmF1bHQpXG4gICAgICAgIGhlaWdodCA9IHJvdW5kMSh3aWR0aCAvIDIpO1xuICAgIH1cbiAgICBjb25zdCBtYWludGFpbkhlaWdodCA9IGJiV2lkdGggIT09IHVuZGVmaW5lZCB8fCBiYkhlaWdodCAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChtYWludGFpbkhlaWdodCAmJiBhc3BlY3RSYXRpbyAmJiBjb250YWluZXJTaXplLmhlaWdodCAmJiBoZWlnaHQgPiBjb250YWluZXJTaXplLmhlaWdodCkge1xuICAgICAgICBoZWlnaHQgPSBjb250YWluZXJTaXplLmhlaWdodDtcbiAgICAgICAgd2lkdGggPSByb3VuZDEoTWF0aC5mbG9vcihoZWlnaHQgKiBhc3BlY3RSYXRpbykpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aCxcbiAgICAgICAgaGVpZ2h0XG4gICAgfTtcbn1cbi8qKlxuICogQHBhcmFtIGNoYXJ0XG4gKiBAcGFyYW0gZm9yY2VSYXRpb1xuICogQHBhcmFtIGZvcmNlU3R5bGVcbiAqIEByZXR1cm5zIFRydWUgaWYgdGhlIGNhbnZhcyBjb250ZXh0IHNpemUgb3IgdHJhbnNmb3JtYXRpb24gaGFzIGNoYW5nZWQuXG4gKi8gZnVuY3Rpb24gcmV0aW5hU2NhbGUoY2hhcnQsIGZvcmNlUmF0aW8sIGZvcmNlU3R5bGUpIHtcbiAgICBjb25zdCBwaXhlbFJhdGlvID0gZm9yY2VSYXRpbyB8fCAxO1xuICAgIGNvbnN0IGRldmljZUhlaWdodCA9IE1hdGguZmxvb3IoY2hhcnQuaGVpZ2h0ICogcGl4ZWxSYXRpbyk7XG4gICAgY29uc3QgZGV2aWNlV2lkdGggPSBNYXRoLmZsb29yKGNoYXJ0LndpZHRoICogcGl4ZWxSYXRpbyk7XG4gICAgY2hhcnQuaGVpZ2h0ID0gTWF0aC5mbG9vcihjaGFydC5oZWlnaHQpO1xuICAgIGNoYXJ0LndpZHRoID0gTWF0aC5mbG9vcihjaGFydC53aWR0aCk7XG4gICAgY29uc3QgY2FudmFzID0gY2hhcnQuY2FudmFzO1xuICAgIC8vIElmIG5vIHN0eWxlIGhhcyBiZWVuIHNldCBvbiB0aGUgY2FudmFzLCB0aGUgcmVuZGVyIHNpemUgaXMgdXNlZCBhcyBkaXNwbGF5IHNpemUsXG4gICAgLy8gbWFraW5nIHRoZSBjaGFydCB2aXN1YWxseSBiaWdnZXIsIHNvIGxldCdzIGVuZm9yY2UgaXQgdG8gdGhlIFwiY29ycmVjdFwiIHZhbHVlcy5cbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzM1NzVcbiAgICBpZiAoY2FudmFzLnN0eWxlICYmIChmb3JjZVN0eWxlIHx8ICFjYW52YXMuc3R5bGUuaGVpZ2h0ICYmICFjYW52YXMuc3R5bGUud2lkdGgpKSB7XG4gICAgICAgIGNhbnZhcy5zdHlsZS5oZWlnaHQgPSBgJHtjaGFydC5oZWlnaHR9cHhgO1xuICAgICAgICBjYW52YXMuc3R5bGUud2lkdGggPSBgJHtjaGFydC53aWR0aH1weGA7XG4gICAgfVxuICAgIGlmIChjaGFydC5jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyAhPT0gcGl4ZWxSYXRpbyB8fCBjYW52YXMuaGVpZ2h0ICE9PSBkZXZpY2VIZWlnaHQgfHwgY2FudmFzLndpZHRoICE9PSBkZXZpY2VXaWR0aCkge1xuICAgICAgICBjaGFydC5jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyA9IHBpeGVsUmF0aW87XG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSBkZXZpY2VIZWlnaHQ7XG4gICAgICAgIGNhbnZhcy53aWR0aCA9IGRldmljZVdpZHRoO1xuICAgICAgICBjaGFydC5jdHguc2V0VHJhbnNmb3JtKHBpeGVsUmF0aW8sIDAsIDAsIHBpeGVsUmF0aW8sIDAsIDApO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBEZXRlY3RzIHN1cHBvcnQgZm9yIG9wdGlvbnMgb2JqZWN0IGFyZ3VtZW50IGluIGFkZEV2ZW50TGlzdGVuZXIuXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRXZlbnRUYXJnZXQvYWRkRXZlbnRMaXN0ZW5lciNTYWZlbHlfZGV0ZWN0aW5nX29wdGlvbl9zdXBwb3J0XG4gKiBAcHJpdmF0ZVxuICovIGNvbnN0IHN1cHBvcnRzRXZlbnRMaXN0ZW5lck9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgICBsZXQgcGFzc2l2ZVN1cHBvcnRlZCA9IGZhbHNlO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBnZXQgcGFzc2l2ZSAoKSB7XG4gICAgICAgICAgICAgICAgcGFzc2l2ZVN1cHBvcnRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdCcsIG51bGwsIG9wdGlvbnMpO1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndGVzdCcsIG51bGwsIG9wdGlvbnMpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBjb250aW51ZSByZWdhcmRsZXNzIG9mIGVycm9yXG4gICAgfVxuICAgIHJldHVybiBwYXNzaXZlU3VwcG9ydGVkO1xufSgpO1xuLyoqXG4gKiBUaGUgXCJ1c2VkXCIgc2l6ZSBpcyB0aGUgZmluYWwgdmFsdWUgb2YgYSBkaW1lbnNpb24gcHJvcGVydHkgYWZ0ZXIgYWxsIGNhbGN1bGF0aW9ucyBoYXZlXG4gKiBiZWVuIHBlcmZvcm1lZC4gVGhpcyBtZXRob2QgdXNlcyB0aGUgY29tcHV0ZWQgc3R5bGUgb2YgYGVsZW1lbnRgIGJ1dCByZXR1cm5zIHVuZGVmaW5lZFxuICogaWYgdGhlIGNvbXB1dGVkIHN0eWxlIGlzIG5vdCBleHByZXNzZWQgaW4gcGl4ZWxzLiBUaGF0IGNhbiBoYXBwZW4gaW4gc29tZSBjYXNlcyB3aGVyZVxuICogYGVsZW1lbnRgIGhhcyBhIHNpemUgcmVsYXRpdmUgdG8gaXRzIHBhcmVudCBhbmQgdGhpcyBsYXN0IG9uZSBpcyBub3QgeWV0IGRpc3BsYXllZCxcbiAqIGZvciBleGFtcGxlIGJlY2F1c2Ugb2YgYGRpc3BsYXk6IG5vbmVgIG9uIGEgcGFyZW50IG5vZGUuXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy91c2VkX3ZhbHVlXG4gKiBAcmV0dXJucyBTaXplIGluIHBpeGVscyBvciB1bmRlZmluZWQgaWYgdW5rbm93bi5cbiAqLyBmdW5jdGlvbiByZWFkVXNlZFNpemUoZWxlbWVudCwgcHJvcGVydHkpIHtcbiAgICBjb25zdCB2YWx1ZSA9IGdldFN0eWxlKGVsZW1lbnQsIHByb3BlcnR5KTtcbiAgICBjb25zdCBtYXRjaGVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goL14oXFxkKykoXFwuXFxkKyk/cHgkLyk7XG4gICAgcmV0dXJuIG1hdGNoZXMgPyArbWF0Y2hlc1sxXSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9wb2ludEluTGluZShwMSwgcDIsIHQsIG1vZGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiBwMS54ICsgdCAqIChwMi54IC0gcDEueCksXG4gICAgICAgIHk6IHAxLnkgKyB0ICogKHAyLnkgLSBwMS55KVxuICAgIH07XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX3N0ZXBwZWRJbnRlcnBvbGF0aW9uKHAxLCBwMiwgdCwgbW9kZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHg6IHAxLnggKyB0ICogKHAyLnggLSBwMS54KSxcbiAgICAgICAgeTogbW9kZSA9PT0gJ21pZGRsZScgPyB0IDwgMC41ID8gcDEueSA6IHAyLnkgOiBtb2RlID09PSAnYWZ0ZXInID8gdCA8IDEgPyBwMS55IDogcDIueSA6IHQgPiAwID8gcDIueSA6IHAxLnlcbiAgICB9O1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9iZXppZXJJbnRlcnBvbGF0aW9uKHAxLCBwMiwgdCwgbW9kZSkge1xuICAgIGNvbnN0IGNwMSA9IHtcbiAgICAgICAgeDogcDEuY3AyeCxcbiAgICAgICAgeTogcDEuY3AyeVxuICAgIH07XG4gICAgY29uc3QgY3AyID0ge1xuICAgICAgICB4OiBwMi5jcDF4LFxuICAgICAgICB5OiBwMi5jcDF5XG4gICAgfTtcbiAgICBjb25zdCBhID0gX3BvaW50SW5MaW5lKHAxLCBjcDEsIHQpO1xuICAgIGNvbnN0IGIgPSBfcG9pbnRJbkxpbmUoY3AxLCBjcDIsIHQpO1xuICAgIGNvbnN0IGMgPSBfcG9pbnRJbkxpbmUoY3AyLCBwMiwgdCk7XG4gICAgY29uc3QgZCA9IF9wb2ludEluTGluZShhLCBiLCB0KTtcbiAgICBjb25zdCBlID0gX3BvaW50SW5MaW5lKGIsIGMsIHQpO1xuICAgIHJldHVybiBfcG9pbnRJbkxpbmUoZCwgZSwgdCk7XG59XG5cbmNvbnN0IGdldFJpZ2h0VG9MZWZ0QWRhcHRlciA9IGZ1bmN0aW9uKHJlY3RYLCB3aWR0aCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHggKHgpIHtcbiAgICAgICAgICAgIHJldHVybiByZWN0WCArIHJlY3RYICsgd2lkdGggLSB4O1xuICAgICAgICB9LFxuICAgICAgICBzZXRXaWR0aCAodykge1xuICAgICAgICAgICAgd2lkdGggPSB3O1xuICAgICAgICB9LFxuICAgICAgICB0ZXh0QWxpZ24gKGFsaWduKSB7XG4gICAgICAgICAgICBpZiAoYWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFsaWduO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFsaWduID09PSAncmlnaHQnID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICAgICAgfSxcbiAgICAgICAgeFBsdXMgKHgsIHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4geCAtIHZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBsZWZ0Rm9yTHRyICh4LCBpdGVtV2lkdGgpIHtcbiAgICAgICAgICAgIHJldHVybiB4IC0gaXRlbVdpZHRoO1xuICAgICAgICB9XG4gICAgfTtcbn07XG5jb25zdCBnZXRMZWZ0VG9SaWdodEFkYXB0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB4ICh4KSB7XG4gICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0V2lkdGggKHcpIHt9LFxuICAgICAgICB0ZXh0QWxpZ24gKGFsaWduKSB7XG4gICAgICAgICAgICByZXR1cm4gYWxpZ247XG4gICAgICAgIH0sXG4gICAgICAgIHhQbHVzICh4LCB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHggKyB2YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgbGVmdEZvckx0ciAoeCwgX2l0ZW1XaWR0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgIH1cbiAgICB9O1xufTtcbmZ1bmN0aW9uIGdldFJ0bEFkYXB0ZXIocnRsLCByZWN0WCwgd2lkdGgpIHtcbiAgICByZXR1cm4gcnRsID8gZ2V0UmlnaHRUb0xlZnRBZGFwdGVyKHJlY3RYLCB3aWR0aCkgOiBnZXRMZWZ0VG9SaWdodEFkYXB0ZXIoKTtcbn1cbmZ1bmN0aW9uIG92ZXJyaWRlVGV4dERpcmVjdGlvbihjdHgsIGRpcmVjdGlvbikge1xuICAgIGxldCBzdHlsZSwgb3JpZ2luYWw7XG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gJ2x0cicgfHwgZGlyZWN0aW9uID09PSAncnRsJykge1xuICAgICAgICBzdHlsZSA9IGN0eC5jYW52YXMuc3R5bGU7XG4gICAgICAgIG9yaWdpbmFsID0gW1xuICAgICAgICAgICAgc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnZGlyZWN0aW9uJyksXG4gICAgICAgICAgICBzdHlsZS5nZXRQcm9wZXJ0eVByaW9yaXR5KCdkaXJlY3Rpb24nKVxuICAgICAgICBdO1xuICAgICAgICBzdHlsZS5zZXRQcm9wZXJ0eSgnZGlyZWN0aW9uJywgZGlyZWN0aW9uLCAnaW1wb3J0YW50Jyk7XG4gICAgICAgIGN0eC5wcmV2VGV4dERpcmVjdGlvbiA9IG9yaWdpbmFsO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHJlc3RvcmVUZXh0RGlyZWN0aW9uKGN0eCwgb3JpZ2luYWwpIHtcbiAgICBpZiAob3JpZ2luYWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBkZWxldGUgY3R4LnByZXZUZXh0RGlyZWN0aW9uO1xuICAgICAgICBjdHguY2FudmFzLnN0eWxlLnNldFByb3BlcnR5KCdkaXJlY3Rpb24nLCBvcmlnaW5hbFswXSwgb3JpZ2luYWxbMV0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcHJvcGVydHlGbihwcm9wZXJ0eSkge1xuICAgIGlmIChwcm9wZXJ0eSA9PT0gJ2FuZ2xlJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYmV0d2VlbjogX2FuZ2xlQmV0d2VlbixcbiAgICAgICAgICAgIGNvbXBhcmU6IF9hbmdsZURpZmYsXG4gICAgICAgICAgICBub3JtYWxpemU6IF9ub3JtYWxpemVBbmdsZVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBiZXR3ZWVuOiBfaXNCZXR3ZWVuLFxuICAgICAgICBjb21wYXJlOiAoYSwgYik9PmEgLSBiLFxuICAgICAgICBub3JtYWxpemU6ICh4KT0+eFxuICAgIH07XG59XG5mdW5jdGlvbiBub3JtYWxpemVTZWdtZW50KHsgc3RhcnQgLCBlbmQgLCBjb3VudCAsIGxvb3AgLCBzdHlsZSAgfSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0OiBzdGFydCAlIGNvdW50LFxuICAgICAgICBlbmQ6IGVuZCAlIGNvdW50LFxuICAgICAgICBsb29wOiBsb29wICYmIChlbmQgLSBzdGFydCArIDEpICUgY291bnQgPT09IDAsXG4gICAgICAgIHN0eWxlXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGdldFNlZ21lbnQoc2VnbWVudCwgcG9pbnRzLCBib3VuZHMpIHtcbiAgICBjb25zdCB7IHByb3BlcnR5ICwgc3RhcnQ6IHN0YXJ0Qm91bmQgLCBlbmQ6IGVuZEJvdW5kICB9ID0gYm91bmRzO1xuICAgIGNvbnN0IHsgYmV0d2VlbiAsIG5vcm1hbGl6ZSAgfSA9IHByb3BlcnR5Rm4ocHJvcGVydHkpO1xuICAgIGNvbnN0IGNvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgICBsZXQgeyBzdGFydCAsIGVuZCAsIGxvb3AgIH0gPSBzZWdtZW50O1xuICAgIGxldCBpLCBpbGVuO1xuICAgIGlmIChsb29wKSB7XG4gICAgICAgIHN0YXJ0ICs9IGNvdW50O1xuICAgICAgICBlbmQgKz0gY291bnQ7XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IGNvdW50OyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIGlmICghYmV0d2Vlbihub3JtYWxpemUocG9pbnRzW3N0YXJ0ICUgY291bnRdW3Byb3BlcnR5XSksIHN0YXJ0Qm91bmQsIGVuZEJvdW5kKSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RhcnQtLTtcbiAgICAgICAgICAgIGVuZC0tO1xuICAgICAgICB9XG4gICAgICAgIHN0YXJ0ICU9IGNvdW50O1xuICAgICAgICBlbmQgJT0gY291bnQ7XG4gICAgfVxuICAgIGlmIChlbmQgPCBzdGFydCkge1xuICAgICAgICBlbmQgKz0gY291bnQ7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0LFxuICAgICAgICBlbmQsXG4gICAgICAgIGxvb3AsXG4gICAgICAgIHN0eWxlOiBzZWdtZW50LnN0eWxlXG4gICAgfTtcbn1cbiBmdW5jdGlvbiBfYm91bmRTZWdtZW50KHNlZ21lbnQsIHBvaW50cywgYm91bmRzKSB7XG4gICAgaWYgKCFib3VuZHMpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHNlZ21lbnRcbiAgICAgICAgXTtcbiAgICB9XG4gICAgY29uc3QgeyBwcm9wZXJ0eSAsIHN0YXJ0OiBzdGFydEJvdW5kICwgZW5kOiBlbmRCb3VuZCAgfSA9IGJvdW5kcztcbiAgICBjb25zdCBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gICAgY29uc3QgeyBjb21wYXJlICwgYmV0d2VlbiAsIG5vcm1hbGl6ZSAgfSA9IHByb3BlcnR5Rm4ocHJvcGVydHkpO1xuICAgIGNvbnN0IHsgc3RhcnQgLCBlbmQgLCBsb29wICwgc3R5bGUgIH0gPSBnZXRTZWdtZW50KHNlZ21lbnQsIHBvaW50cywgYm91bmRzKTtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBsZXQgaW5zaWRlID0gZmFsc2U7XG4gICAgbGV0IHN1YlN0YXJ0ID0gbnVsbDtcbiAgICBsZXQgdmFsdWUsIHBvaW50LCBwcmV2VmFsdWU7XG4gICAgY29uc3Qgc3RhcnRJc0JlZm9yZSA9ICgpPT5iZXR3ZWVuKHN0YXJ0Qm91bmQsIHByZXZWYWx1ZSwgdmFsdWUpICYmIGNvbXBhcmUoc3RhcnRCb3VuZCwgcHJldlZhbHVlKSAhPT0gMDtcbiAgICBjb25zdCBlbmRJc0JlZm9yZSA9ICgpPT5jb21wYXJlKGVuZEJvdW5kLCB2YWx1ZSkgPT09IDAgfHwgYmV0d2VlbihlbmRCb3VuZCwgcHJldlZhbHVlLCB2YWx1ZSk7XG4gICAgY29uc3Qgc2hvdWxkU3RhcnQgPSAoKT0+aW5zaWRlIHx8IHN0YXJ0SXNCZWZvcmUoKTtcbiAgICBjb25zdCBzaG91bGRTdG9wID0gKCk9PiFpbnNpZGUgfHwgZW5kSXNCZWZvcmUoKTtcbiAgICBmb3IobGV0IGkgPSBzdGFydCwgcHJldiA9IHN0YXJ0OyBpIDw9IGVuZDsgKytpKXtcbiAgICAgICAgcG9pbnQgPSBwb2ludHNbaSAlIGNvdW50XTtcbiAgICAgICAgaWYgKHBvaW50LnNraXApIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlID0gbm9ybWFsaXplKHBvaW50W3Byb3BlcnR5XSk7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gcHJldlZhbHVlKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpbnNpZGUgPSBiZXR3ZWVuKHZhbHVlLCBzdGFydEJvdW5kLCBlbmRCb3VuZCk7XG4gICAgICAgIGlmIChzdWJTdGFydCA9PT0gbnVsbCAmJiBzaG91bGRTdGFydCgpKSB7XG4gICAgICAgICAgICBzdWJTdGFydCA9IGNvbXBhcmUodmFsdWUsIHN0YXJ0Qm91bmQpID09PSAwID8gaSA6IHByZXY7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN1YlN0YXJ0ICE9PSBudWxsICYmIHNob3VsZFN0b3AoKSkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2gobm9ybWFsaXplU2VnbWVudCh7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IHN1YlN0YXJ0LFxuICAgICAgICAgICAgICAgIGVuZDogaSxcbiAgICAgICAgICAgICAgICBsb29wLFxuICAgICAgICAgICAgICAgIGNvdW50LFxuICAgICAgICAgICAgICAgIHN0eWxlXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBzdWJTdGFydCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcHJldiA9IGk7XG4gICAgICAgIHByZXZWYWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBpZiAoc3ViU3RhcnQgIT09IG51bGwpIHtcbiAgICAgICAgcmVzdWx0LnB1c2gobm9ybWFsaXplU2VnbWVudCh7XG4gICAgICAgICAgICBzdGFydDogc3ViU3RhcnQsXG4gICAgICAgICAgICBlbmQsXG4gICAgICAgICAgICBsb29wLFxuICAgICAgICAgICAgY291bnQsXG4gICAgICAgICAgICBzdHlsZVxuICAgICAgICB9KSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4gZnVuY3Rpb24gX2JvdW5kU2VnbWVudHMobGluZSwgYm91bmRzKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgY29uc3Qgc2VnbWVudHMgPSBsaW5lLnNlZ21lbnRzO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGNvbnN0IHN1YiA9IF9ib3VuZFNlZ21lbnQoc2VnbWVudHNbaV0sIGxpbmUucG9pbnRzLCBib3VuZHMpO1xuICAgICAgICBpZiAoc3ViLmxlbmd0aCkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goLi4uc3ViKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIGZ1bmN0aW9uIGZpbmRTdGFydEFuZEVuZChwb2ludHMsIGNvdW50LCBsb29wLCBzcGFuR2Fwcykge1xuICAgIGxldCBzdGFydCA9IDA7XG4gICAgbGV0IGVuZCA9IGNvdW50IC0gMTtcbiAgICBpZiAobG9vcCAmJiAhc3BhbkdhcHMpIHtcbiAgICAgICAgd2hpbGUoc3RhcnQgPCBjb3VudCAmJiAhcG9pbnRzW3N0YXJ0XS5za2lwKXtcbiAgICAgICAgICAgIHN0YXJ0Kys7XG4gICAgICAgIH1cbiAgICB9XG4gICAgd2hpbGUoc3RhcnQgPCBjb3VudCAmJiBwb2ludHNbc3RhcnRdLnNraXApe1xuICAgICAgICBzdGFydCsrO1xuICAgIH1cbiAgICBzdGFydCAlPSBjb3VudDtcbiAgICBpZiAobG9vcCkge1xuICAgICAgICBlbmQgKz0gc3RhcnQ7XG4gICAgfVxuICAgIHdoaWxlKGVuZCA+IHN0YXJ0ICYmIHBvaW50c1tlbmQgJSBjb3VudF0uc2tpcCl7XG4gICAgICAgIGVuZC0tO1xuICAgIH1cbiAgICBlbmQgJT0gY291bnQ7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIGVuZFxuICAgIH07XG59XG4gZnVuY3Rpb24gc29saWRTZWdtZW50cyhwb2ludHMsIHN0YXJ0LCBtYXgsIGxvb3ApIHtcbiAgICBjb25zdCBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgbGV0IGxhc3QgPSBzdGFydDtcbiAgICBsZXQgcHJldiA9IHBvaW50c1tzdGFydF07XG4gICAgbGV0IGVuZDtcbiAgICBmb3IoZW5kID0gc3RhcnQgKyAxOyBlbmQgPD0gbWF4OyArK2VuZCl7XG4gICAgICAgIGNvbnN0IGN1ciA9IHBvaW50c1tlbmQgJSBjb3VudF07XG4gICAgICAgIGlmIChjdXIuc2tpcCB8fCBjdXIuc3RvcCkge1xuICAgICAgICAgICAgaWYgKCFwcmV2LnNraXApIHtcbiAgICAgICAgICAgICAgICBsb29wID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBzdGFydDogc3RhcnQgJSBjb3VudCxcbiAgICAgICAgICAgICAgICAgICAgZW5kOiAoZW5kIC0gMSkgJSBjb3VudCxcbiAgICAgICAgICAgICAgICAgICAgbG9vcFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHN0YXJ0ID0gbGFzdCA9IGN1ci5zdG9wID8gZW5kIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxhc3QgPSBlbmQ7XG4gICAgICAgICAgICBpZiAocHJldi5za2lwKSB7XG4gICAgICAgICAgICAgICAgc3RhcnQgPSBlbmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHJldiA9IGN1cjtcbiAgICB9XG4gICAgaWYgKGxhc3QgIT09IG51bGwpIHtcbiAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0ICUgY291bnQsXG4gICAgICAgICAgICBlbmQ6IGxhc3QgJSBjb3VudCxcbiAgICAgICAgICAgIGxvb3BcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4gZnVuY3Rpb24gX2NvbXB1dGVTZWdtZW50cyhsaW5lLCBzZWdtZW50T3B0aW9ucykge1xuICAgIGNvbnN0IHBvaW50cyA9IGxpbmUucG9pbnRzO1xuICAgIGNvbnN0IHNwYW5HYXBzID0gbGluZS5vcHRpb25zLnNwYW5HYXBzO1xuICAgIGNvbnN0IGNvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgICBpZiAoIWNvdW50KSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgY29uc3QgbG9vcCA9ICEhbGluZS5fbG9vcDtcbiAgICBjb25zdCB7IHN0YXJ0ICwgZW5kICB9ID0gZmluZFN0YXJ0QW5kRW5kKHBvaW50cywgY291bnQsIGxvb3AsIHNwYW5HYXBzKTtcbiAgICBpZiAoc3BhbkdhcHMgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIHNwbGl0QnlTdHlsZXMobGluZSwgW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0YXJ0LFxuICAgICAgICAgICAgICAgIGVuZCxcbiAgICAgICAgICAgICAgICBsb29wXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sIHBvaW50cywgc2VnbWVudE9wdGlvbnMpO1xuICAgIH1cbiAgICBjb25zdCBtYXggPSBlbmQgPCBzdGFydCA/IGVuZCArIGNvdW50IDogZW5kO1xuICAgIGNvbnN0IGNvbXBsZXRlTG9vcCA9ICEhbGluZS5fZnVsbExvb3AgJiYgc3RhcnQgPT09IDAgJiYgZW5kID09PSBjb3VudCAtIDE7XG4gICAgcmV0dXJuIHNwbGl0QnlTdHlsZXMobGluZSwgc29saWRTZWdtZW50cyhwb2ludHMsIHN0YXJ0LCBtYXgsIGNvbXBsZXRlTG9vcCksIHBvaW50cywgc2VnbWVudE9wdGlvbnMpO1xufVxuIGZ1bmN0aW9uIHNwbGl0QnlTdHlsZXMobGluZSwgc2VnbWVudHMsIHBvaW50cywgc2VnbWVudE9wdGlvbnMpIHtcbiAgICBpZiAoIXNlZ21lbnRPcHRpb25zIHx8ICFzZWdtZW50T3B0aW9ucy5zZXRDb250ZXh0IHx8ICFwb2ludHMpIHtcbiAgICAgICAgcmV0dXJuIHNlZ21lbnRzO1xuICAgIH1cbiAgICByZXR1cm4gZG9TcGxpdEJ5U3R5bGVzKGxpbmUsIHNlZ21lbnRzLCBwb2ludHMsIHNlZ21lbnRPcHRpb25zKTtcbn1cbiBmdW5jdGlvbiBkb1NwbGl0QnlTdHlsZXMobGluZSwgc2VnbWVudHMsIHBvaW50cywgc2VnbWVudE9wdGlvbnMpIHtcbiAgICBjb25zdCBjaGFydENvbnRleHQgPSBsaW5lLl9jaGFydC5nZXRDb250ZXh0KCk7XG4gICAgY29uc3QgYmFzZVN0eWxlID0gcmVhZFN0eWxlKGxpbmUub3B0aW9ucyk7XG4gICAgY29uc3QgeyBfZGF0YXNldEluZGV4OiBkYXRhc2V0SW5kZXggLCBvcHRpb25zOiB7IHNwYW5HYXBzICB9ICB9ID0gbGluZTtcbiAgICBjb25zdCBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgbGV0IHByZXZTdHlsZSA9IGJhc2VTdHlsZTtcbiAgICBsZXQgc3RhcnQgPSBzZWdtZW50c1swXS5zdGFydDtcbiAgICBsZXQgaSA9IHN0YXJ0O1xuICAgIGZ1bmN0aW9uIGFkZFN0eWxlKHMsIGUsIGwsIHN0KSB7XG4gICAgICAgIGNvbnN0IGRpciA9IHNwYW5HYXBzID8gLTEgOiAxO1xuICAgICAgICBpZiAocyA9PT0gZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHMgKz0gY291bnQ7XG4gICAgICAgIHdoaWxlKHBvaW50c1tzICUgY291bnRdLnNraXApe1xuICAgICAgICAgICAgcyAtPSBkaXI7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUocG9pbnRzW2UgJSBjb3VudF0uc2tpcCl7XG4gICAgICAgICAgICBlICs9IGRpcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocyAlIGNvdW50ICE9PSBlICUgY291bnQpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICBzdGFydDogcyAlIGNvdW50LFxuICAgICAgICAgICAgICAgIGVuZDogZSAlIGNvdW50LFxuICAgICAgICAgICAgICAgIGxvb3A6IGwsXG4gICAgICAgICAgICAgICAgc3R5bGU6IHN0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHByZXZTdHlsZSA9IHN0O1xuICAgICAgICAgICAgc3RhcnQgPSBlICUgY291bnQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBzZWdtZW50IG9mIHNlZ21lbnRzKXtcbiAgICAgICAgc3RhcnQgPSBzcGFuR2FwcyA/IHN0YXJ0IDogc2VnbWVudC5zdGFydDtcbiAgICAgICAgbGV0IHByZXYgPSBwb2ludHNbc3RhcnQgJSBjb3VudF07XG4gICAgICAgIGxldCBzdHlsZTtcbiAgICAgICAgZm9yKGkgPSBzdGFydCArIDE7IGkgPD0gc2VnbWVudC5lbmQ7IGkrKyl7XG4gICAgICAgICAgICBjb25zdCBwdCA9IHBvaW50c1tpICUgY291bnRdO1xuICAgICAgICAgICAgc3R5bGUgPSByZWFkU3R5bGUoc2VnbWVudE9wdGlvbnMuc2V0Q29udGV4dChjcmVhdGVDb250ZXh0KGNoYXJ0Q29udGV4dCwge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdzZWdtZW50JyxcbiAgICAgICAgICAgICAgICBwMDogcHJldixcbiAgICAgICAgICAgICAgICBwMTogcHQsXG4gICAgICAgICAgICAgICAgcDBEYXRhSW5kZXg6IChpIC0gMSkgJSBjb3VudCxcbiAgICAgICAgICAgICAgICBwMURhdGFJbmRleDogaSAlIGNvdW50LFxuICAgICAgICAgICAgICAgIGRhdGFzZXRJbmRleFxuICAgICAgICAgICAgfSkpKTtcbiAgICAgICAgICAgIGlmIChzdHlsZUNoYW5nZWQoc3R5bGUsIHByZXZTdHlsZSkpIHtcbiAgICAgICAgICAgICAgICBhZGRTdHlsZShzdGFydCwgaSAtIDEsIHNlZ21lbnQubG9vcCwgcHJldlN0eWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByZXYgPSBwdDtcbiAgICAgICAgICAgIHByZXZTdHlsZSA9IHN0eWxlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGFydCA8IGkgLSAxKSB7XG4gICAgICAgICAgICBhZGRTdHlsZShzdGFydCwgaSAtIDEsIHNlZ21lbnQubG9vcCwgcHJldlN0eWxlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gcmVhZFN0eWxlKG9wdGlvbnMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICBib3JkZXJDYXBTdHlsZTogb3B0aW9ucy5ib3JkZXJDYXBTdHlsZSxcbiAgICAgICAgYm9yZGVyRGFzaDogb3B0aW9ucy5ib3JkZXJEYXNoLFxuICAgICAgICBib3JkZXJEYXNoT2Zmc2V0OiBvcHRpb25zLmJvcmRlckRhc2hPZmZzZXQsXG4gICAgICAgIGJvcmRlckpvaW5TdHlsZTogb3B0aW9ucy5ib3JkZXJKb2luU3R5bGUsXG4gICAgICAgIGJvcmRlcldpZHRoOiBvcHRpb25zLmJvcmRlcldpZHRoLFxuICAgICAgICBib3JkZXJDb2xvcjogb3B0aW9ucy5ib3JkZXJDb2xvclxuICAgIH07XG59XG5mdW5jdGlvbiBzdHlsZUNoYW5nZWQoc3R5bGUsIHByZXZTdHlsZSkge1xuICAgIGlmICghcHJldlN0eWxlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgY2FjaGUgPSBbXTtcbiAgICBjb25zdCByZXBsYWNlciA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKCFpc1BhdHRlcm5PckdyYWRpZW50KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY2FjaGUuaW5jbHVkZXModmFsdWUpKSB7XG4gICAgICAgICAgICBjYWNoZS5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2FjaGUuaW5kZXhPZih2YWx1ZSk7XG4gICAgfTtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoc3R5bGUsIHJlcGxhY2VyKSAhPT0gSlNPTi5zdHJpbmdpZnkocHJldlN0eWxlLCByZXBsYWNlcik7XG59XG5cbmV4cG9ydCB7IHVuY2xpcEFyZWEgYXMgJCwgX3Jsb29rdXBCeUtleSBhcyBBLCBfbG9va3VwQnlLZXkgYXMgQiwgX2lzUG9pbnRJbkFyZWEgYXMgQywgZ2V0QW5nbGVGcm9tUG9pbnQgYXMgRCwgdG9QYWRkaW5nIGFzIEUsIGVhY2ggYXMgRiwgZ2V0TWF4aW11bVNpemUgYXMgRywgSEFMRl9QSSBhcyBILCBfZ2V0UGFyZW50Tm9kZSBhcyBJLCByZWFkVXNlZFNpemUgYXMgSiwgc3VwcG9ydHNFdmVudExpc3RlbmVyT3B0aW9ucyBhcyBLLCB0aHJvdHRsZWQgYXMgTCwgX2lzRG9tU3VwcG9ydGVkIGFzIE0sIF9mYWN0b3JpemUgYXMgTiwgZmluaXRlT3JEZWZhdWx0IGFzIE8sIFBJIGFzIFAsIGNhbGxiYWNrIGFzIFEsIF9hZGRHcmFjZSBhcyBSLCBfbGltaXRWYWx1ZSBhcyBTLCBUQVUgYXMgVCwgdG9EZWdyZWVzIGFzIFUsIF9tZWFzdXJlVGV4dCBhcyBWLCBfaW50MTZSYW5nZSBhcyBXLCBfYWxpZ25QaXhlbCBhcyBYLCBjbGlwQXJlYSBhcyBZLCByZW5kZXJUZXh0IGFzIFosIF9hcnJheVVuaXF1ZSBhcyBfLCByZXNvbHZlIGFzIGEsIGZvbnRTdHJpbmcgYXMgYSQsIHRvRm9udCBhcyBhMCwgX3RvTGVmdFJpZ2h0Q2VudGVyIGFzIGExLCBfYWxpZ25TdGFydEVuZCBhcyBhMiwgb3ZlcnJpZGVzIGFzIGEzLCBtZXJnZSBhcyBhNCwgX2NhcGl0YWxpemUgYXMgYTUsIGRlc2NyaXB0b3JzIGFzIGE2LCBpc0Z1bmN0aW9uIGFzIGE3LCBfYXR0YWNoQ29udGV4dCBhcyBhOCwgX2NyZWF0ZVJlc29sdmVyIGFzIGE5LCBvdmVycmlkZVRleHREaXJlY3Rpb24gYXMgYUEsIF90ZXh0WCBhcyBhQiwgcmVzdG9yZVRleHREaXJlY3Rpb24gYXMgYUMsIGRyYXdQb2ludExlZ2VuZCBhcyBhRCwgZGlzdGFuY2VCZXR3ZWVuUG9pbnRzIGFzIGFFLCBub29wIGFzIGFGLCBfc2V0TWluQW5kTWF4QnlLZXkgYXMgYUcsIG5pY2VOdW0gYXMgYUgsIGFsbW9zdFdob2xlIGFzIGFJLCBhbG1vc3RFcXVhbHMgYXMgYUosIF9kZWNpbWFsUGxhY2VzIGFzIGFLLCBUaWNrcyBhcyBhTCwgbG9nMTAgYXMgYU0sIF9sb25nZXN0VGV4dCBhcyBhTiwgX2ZpbHRlckJldHdlZW4gYXMgYU8sIF9sb29rdXAgYXMgYVAsIGlzUGF0dGVybk9yR3JhZGllbnQgYXMgYVEsIGdldEhvdmVyQ29sb3IgYXMgYVIsIGNsb25lIGFzIGFTLCBfbWVyZ2VyIGFzIGFULCBfbWVyZ2VySWYgYXMgYVUsIF9kZXByZWNhdGVkIGFzIGFWLCBfc3BsaXRLZXkgYXMgYVcsIHRvRm9udFN0cmluZyBhcyBhWCwgc3BsaW5lQ3VydmUgYXMgYVksIHNwbGluZUN1cnZlTW9ub3RvbmUgYXMgYVosIGdldFN0eWxlIGFzIGFfLCBfZGVzY3JpcHRvcnMgYXMgYWEsIG1lcmdlSWYgYXMgYWIsIHVpZCBhcyBhYywgZGVib3VuY2UgYXMgYWQsIHJldGluYVNjYWxlIGFzIGFlLCBjbGVhckNhbnZhcyBhcyBhZiwgc2V0c0VxdWFsIGFzIGFnLCBfZWxlbWVudHNFcXVhbCBhcyBhaCwgX2lzQ2xpY2tFdmVudCBhcyBhaSwgX2lzQmV0d2VlbiBhcyBhaiwgX3JlYWRWYWx1ZVRvUHJvcHMgYXMgYWssIF91cGRhdGVCZXppZXJDb250cm9sUG9pbnRzIGFzIGFsLCBfY29tcHV0ZVNlZ21lbnRzIGFzIGFtLCBfYm91bmRTZWdtZW50cyBhcyBhbiwgX3N0ZXBwZWRJbnRlcnBvbGF0aW9uIGFzIGFvLCBfYmV6aWVySW50ZXJwb2xhdGlvbiBhcyBhcCwgX3BvaW50SW5MaW5lIGFzIGFxLCBfc3RlcHBlZExpbmVUbyBhcyBhciwgX2JlemllckN1cnZlVG8gYXMgYXMsIGRyYXdQb2ludCBhcyBhdCwgYWRkUm91bmRlZFJlY3RQYXRoIGFzIGF1LCB0b1RSQkwgYXMgYXYsIHRvVFJCTENvcm5lcnMgYXMgYXcsIF9ib3VuZFNlZ21lbnQgYXMgYXgsIF9ub3JtYWxpemVBbmdsZSBhcyBheSwgZ2V0UnRsQWRhcHRlciBhcyBheiwgaXNBcnJheSBhcyBiLCB0b0xpbmVIZWlnaHQgYXMgYjAsIFBJVEFVIGFzIGIxLCBJTkZJTklUWSBhcyBiMiwgUkFEX1BFUl9ERUcgYXMgYjMsIFFVQVJURVJfUEkgYXMgYjQsIFRXT19USElSRFNfUEkgYXMgYjUsIF9hbmdsZURpZmYgYXMgYjYsIGNvbG9yIGFzIGMsIGRlZmF1bHRzIGFzIGQsIGVmZmVjdHMgYXMgZSwgcmVzb2x2ZU9iamVjdEtleSBhcyBmLCBpc051bWJlckZpbml0ZSBhcyBnLCBkZWZpbmVkIGFzIGgsIGlzT2JqZWN0IGFzIGksIGNyZWF0ZUNvbnRleHQgYXMgaiwgaXNOdWxsT3JVbmRlZiBhcyBrLCBsaXN0ZW5BcnJheUV2ZW50cyBhcyBsLCB0b1BlcmNlbnRhZ2UgYXMgbSwgdG9EaW1lbnNpb24gYXMgbiwgZm9ybWF0TnVtYmVyIGFzIG8sIF9hbmdsZUJldHdlZW4gYXMgcCwgX2dldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHMgYXMgcSwgcmVxdWVzdEFuaW1GcmFtZSBhcyByLCBzaWduIGFzIHMsIHRvUmFkaWFucyBhcyB0LCB1bmxpc3RlbkFycmF5RXZlbnRzIGFzIHUsIHZhbHVlT3JEZWZhdWx0IGFzIHYsIF9zY2FsZVJhbmdlc0NoYW5nZWQgYXMgdywgaXNOdW1iZXIgYXMgeCwgX3BhcnNlT2JqZWN0RGF0YVJhZGlhbFNjYWxlIGFzIHksIGdldFJlbGF0aXZlUG9zaXRpb24gYXMgeiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGVscGVycy5zZWdtZW50LmpzLm1hcFxuIiwiLyohXG4gKiBDaGFydC5qcyB2NC4zLjNcbiAqIGh0dHBzOi8vd3d3LmNoYXJ0anMub3JnXG4gKiAoYykgMjAyMyBDaGFydC5qcyBDb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuICovXG5pbXBvcnQgeyByIGFzIHJlcXVlc3RBbmltRnJhbWUsIGEgYXMgcmVzb2x2ZSwgZSBhcyBlZmZlY3RzLCBjIGFzIGNvbG9yLCBpIGFzIGlzT2JqZWN0LCBkIGFzIGRlZmF1bHRzLCBiIGFzIGlzQXJyYXksIHYgYXMgdmFsdWVPckRlZmF1bHQsIHUgYXMgdW5saXN0ZW5BcnJheUV2ZW50cywgbCBhcyBsaXN0ZW5BcnJheUV2ZW50cywgZiBhcyByZXNvbHZlT2JqZWN0S2V5LCBnIGFzIGlzTnVtYmVyRmluaXRlLCBoIGFzIGRlZmluZWQsIHMgYXMgc2lnbiwgaiBhcyBjcmVhdGVDb250ZXh0LCBrIGFzIGlzTnVsbE9yVW5kZWYsIF8gYXMgX2FycmF5VW5pcXVlLCB0IGFzIHRvUmFkaWFucywgbSBhcyB0b1BlcmNlbnRhZ2UsIG4gYXMgdG9EaW1lbnNpb24sIFQgYXMgVEFVLCBvIGFzIGZvcm1hdE51bWJlciwgcCBhcyBfYW5nbGVCZXR3ZWVuLCBIIGFzIEhBTEZfUEksIFAgYXMgUEksIHEgYXMgX2dldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHMsIHcgYXMgX3NjYWxlUmFuZ2VzQ2hhbmdlZCwgeCBhcyBpc051bWJlciwgeSBhcyBfcGFyc2VPYmplY3REYXRhUmFkaWFsU2NhbGUsIHogYXMgZ2V0UmVsYXRpdmVQb3NpdGlvbiwgQSBhcyBfcmxvb2t1cEJ5S2V5LCBCIGFzIF9sb29rdXBCeUtleSwgQyBhcyBfaXNQb2ludEluQXJlYSwgRCBhcyBnZXRBbmdsZUZyb21Qb2ludCwgRSBhcyB0b1BhZGRpbmcsIEYgYXMgZWFjaCwgRyBhcyBnZXRNYXhpbXVtU2l6ZSwgSSBhcyBfZ2V0UGFyZW50Tm9kZSwgSiBhcyByZWFkVXNlZFNpemUsIEsgYXMgc3VwcG9ydHNFdmVudExpc3RlbmVyT3B0aW9ucywgTCBhcyB0aHJvdHRsZWQsIE0gYXMgX2lzRG9tU3VwcG9ydGVkLCBOIGFzIF9mYWN0b3JpemUsIE8gYXMgZmluaXRlT3JEZWZhdWx0LCBRIGFzIGNhbGxiYWNrLCBSIGFzIF9hZGRHcmFjZSwgUyBhcyBfbGltaXRWYWx1ZSwgVSBhcyB0b0RlZ3JlZXMsIFYgYXMgX21lYXN1cmVUZXh0LCBXIGFzIF9pbnQxNlJhbmdlLCBYIGFzIF9hbGlnblBpeGVsLCBZIGFzIGNsaXBBcmVhLCBaIGFzIHJlbmRlclRleHQsICQgYXMgdW5jbGlwQXJlYSwgYTAgYXMgdG9Gb250LCBhMSBhcyBfdG9MZWZ0UmlnaHRDZW50ZXIsIGEyIGFzIF9hbGlnblN0YXJ0RW5kLCBhMyBhcyBvdmVycmlkZXMsIGE0IGFzIG1lcmdlLCBhNSBhcyBfY2FwaXRhbGl6ZSwgYTYgYXMgZGVzY3JpcHRvcnMsIGE3IGFzIGlzRnVuY3Rpb24sIGE4IGFzIF9hdHRhY2hDb250ZXh0LCBhOSBhcyBfY3JlYXRlUmVzb2x2ZXIsIGFhIGFzIF9kZXNjcmlwdG9ycywgYWIgYXMgbWVyZ2VJZiwgYWMgYXMgdWlkLCBhZCBhcyBkZWJvdW5jZSwgYWUgYXMgcmV0aW5hU2NhbGUsIGFmIGFzIGNsZWFyQ2FudmFzLCBhZyBhcyBzZXRzRXF1YWwsIGFoIGFzIF9lbGVtZW50c0VxdWFsLCBhaSBhcyBfaXNDbGlja0V2ZW50LCBhaiBhcyBfaXNCZXR3ZWVuLCBhayBhcyBfcmVhZFZhbHVlVG9Qcm9wcywgYWwgYXMgX3VwZGF0ZUJlemllckNvbnRyb2xQb2ludHMsIGFtIGFzIF9jb21wdXRlU2VnbWVudHMsIGFuIGFzIF9ib3VuZFNlZ21lbnRzLCBhbyBhcyBfc3RlcHBlZEludGVycG9sYXRpb24sIGFwIGFzIF9iZXppZXJJbnRlcnBvbGF0aW9uLCBhcSBhcyBfcG9pbnRJbkxpbmUsIGFyIGFzIF9zdGVwcGVkTGluZVRvLCBhcyBhcyBfYmV6aWVyQ3VydmVUbywgYXQgYXMgZHJhd1BvaW50LCBhdSBhcyBhZGRSb3VuZGVkUmVjdFBhdGgsIGF2IGFzIHRvVFJCTCwgYXcgYXMgdG9UUkJMQ29ybmVycywgYXggYXMgX2JvdW5kU2VnbWVudCwgYXkgYXMgX25vcm1hbGl6ZUFuZ2xlLCBheiBhcyBnZXRSdGxBZGFwdGVyLCBhQSBhcyBvdmVycmlkZVRleHREaXJlY3Rpb24sIGFCIGFzIF90ZXh0WCwgYUMgYXMgcmVzdG9yZVRleHREaXJlY3Rpb24sIGFEIGFzIGRyYXdQb2ludExlZ2VuZCwgYUUgYXMgZGlzdGFuY2VCZXR3ZWVuUG9pbnRzLCBhRiBhcyBub29wLCBhRyBhcyBfc2V0TWluQW5kTWF4QnlLZXksIGFIIGFzIG5pY2VOdW0sIGFJIGFzIGFsbW9zdFdob2xlLCBhSiBhcyBhbG1vc3RFcXVhbHMsIGFLIGFzIF9kZWNpbWFsUGxhY2VzLCBhTCBhcyBUaWNrcywgYU0gYXMgbG9nMTAsIGFOIGFzIF9sb25nZXN0VGV4dCwgYU8gYXMgX2ZpbHRlckJldHdlZW4sIGFQIGFzIF9sb29rdXAgfSBmcm9tICcuL2NodW5rcy9oZWxwZXJzLnNlZ21lbnQuanMnO1xuaW1wb3J0ICdAa3Vya2xlL2NvbG9yJztcblxuY2xhc3MgQW5pbWF0b3Ige1xuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHRoaXMuX3JlcXVlc3QgPSBudWxsO1xuICAgICAgICB0aGlzLl9jaGFydHMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuX3J1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fbGFzdERhdGUgPSB1bmRlZmluZWQ7XG4gICAgfVxuIF9ub3RpZnkoY2hhcnQsIGFuaW1zLCBkYXRlLCB0eXBlKSB7XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9IGFuaW1zLmxpc3RlbmVyc1t0eXBlXTtcbiAgICAgICAgY29uc3QgbnVtU3RlcHMgPSBhbmltcy5kdXJhdGlvbjtcbiAgICAgICAgY2FsbGJhY2tzLmZvckVhY2goKGZuKT0+Zm4oe1xuICAgICAgICAgICAgICAgIGNoYXJ0LFxuICAgICAgICAgICAgICAgIGluaXRpYWw6IGFuaW1zLmluaXRpYWwsXG4gICAgICAgICAgICAgICAgbnVtU3RlcHMsXG4gICAgICAgICAgICAgICAgY3VycmVudFN0ZXA6IE1hdGgubWluKGRhdGUgLSBhbmltcy5zdGFydCwgbnVtU3RlcHMpXG4gICAgICAgICAgICB9KSk7XG4gICAgfVxuIF9yZWZyZXNoKCkge1xuICAgICAgICBpZiAodGhpcy5fcmVxdWVzdCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3J1bm5pbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLl9yZXF1ZXN0ID0gcmVxdWVzdEFuaW1GcmFtZS5jYWxsKHdpbmRvdywgKCk9PntcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZSgpO1xuICAgICAgICAgICAgdGhpcy5fcmVxdWVzdCA9IG51bGw7XG4gICAgICAgICAgICBpZiAodGhpcy5fcnVubmluZykge1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlZnJlc2goKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuIF91cGRhdGUoZGF0ZSA9IERhdGUubm93KCkpIHtcbiAgICAgICAgbGV0IHJlbWFpbmluZyA9IDA7XG4gICAgICAgIHRoaXMuX2NoYXJ0cy5mb3JFYWNoKChhbmltcywgY2hhcnQpPT57XG4gICAgICAgICAgICBpZiAoIWFuaW1zLnJ1bm5pbmcgfHwgIWFuaW1zLml0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gYW5pbXMuaXRlbXM7XG4gICAgICAgICAgICBsZXQgaSA9IGl0ZW1zLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICBsZXQgZHJhdyA9IGZhbHNlO1xuICAgICAgICAgICAgbGV0IGl0ZW07XG4gICAgICAgICAgICBmb3IoOyBpID49IDA7IC0taSl7XG4gICAgICAgICAgICAgICAgaXRlbSA9IGl0ZW1zW2ldO1xuICAgICAgICAgICAgICAgIGlmIChpdGVtLl9hY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uX3RvdGFsID4gYW5pbXMuZHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1zLmR1cmF0aW9uID0gaXRlbS5fdG90YWw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaXRlbS50aWNrKGRhdGUpO1xuICAgICAgICAgICAgICAgICAgICBkcmF3ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpdGVtc1tpXSA9IGl0ZW1zW2l0ZW1zLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgICAgICBpdGVtcy5wb3AoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZHJhdykge1xuICAgICAgICAgICAgICAgIGNoYXJ0LmRyYXcoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9ub3RpZnkoY2hhcnQsIGFuaW1zLCBkYXRlLCAncHJvZ3Jlc3MnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgYW5pbXMucnVubmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuX25vdGlmeShjaGFydCwgYW5pbXMsIGRhdGUsICdjb21wbGV0ZScpO1xuICAgICAgICAgICAgICAgIGFuaW1zLmluaXRpYWwgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlbWFpbmluZyArPSBpdGVtcy5sZW5ndGg7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9sYXN0RGF0ZSA9IGRhdGU7XG4gICAgICAgIGlmIChyZW1haW5pbmcgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuX3J1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiBfZ2V0QW5pbXMoY2hhcnQpIHtcbiAgICAgICAgY29uc3QgY2hhcnRzID0gdGhpcy5fY2hhcnRzO1xuICAgICAgICBsZXQgYW5pbXMgPSBjaGFydHMuZ2V0KGNoYXJ0KTtcbiAgICAgICAgaWYgKCFhbmltcykge1xuICAgICAgICAgICAgYW5pbXMgPSB7XG4gICAgICAgICAgICAgICAgcnVubmluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgaW5pdGlhbDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpdGVtczogW10sXG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3M6IFtdXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNoYXJ0cy5zZXQoY2hhcnQsIGFuaW1zKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYW5pbXM7XG4gICAgfVxuIGxpc3RlbihjaGFydCwgZXZlbnQsIGNiKSB7XG4gICAgICAgIHRoaXMuX2dldEFuaW1zKGNoYXJ0KS5saXN0ZW5lcnNbZXZlbnRdLnB1c2goY2IpO1xuICAgIH1cbiBhZGQoY2hhcnQsIGl0ZW1zKSB7XG4gICAgICAgIGlmICghaXRlbXMgfHwgIWl0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2dldEFuaW1zKGNoYXJ0KS5pdGVtcy5wdXNoKC4uLml0ZW1zKTtcbiAgICB9XG4gaGFzKGNoYXJ0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRBbmltcyhjaGFydCkuaXRlbXMubGVuZ3RoID4gMDtcbiAgICB9XG4gc3RhcnQoY2hhcnQpIHtcbiAgICAgICAgY29uc3QgYW5pbXMgPSB0aGlzLl9jaGFydHMuZ2V0KGNoYXJ0KTtcbiAgICAgICAgaWYgKCFhbmltcykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGFuaW1zLnJ1bm5pbmcgPSB0cnVlO1xuICAgICAgICBhbmltcy5zdGFydCA9IERhdGUubm93KCk7XG4gICAgICAgIGFuaW1zLmR1cmF0aW9uID0gYW5pbXMuaXRlbXMucmVkdWNlKChhY2MsIGN1cik9Pk1hdGgubWF4KGFjYywgY3VyLl9kdXJhdGlvbiksIDApO1xuICAgICAgICB0aGlzLl9yZWZyZXNoKCk7XG4gICAgfVxuICAgIHJ1bm5pbmcoY2hhcnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9ydW5uaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYW5pbXMgPSB0aGlzLl9jaGFydHMuZ2V0KGNoYXJ0KTtcbiAgICAgICAgaWYgKCFhbmltcyB8fCAhYW5pbXMucnVubmluZyB8fCAhYW5pbXMuaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuIHN0b3AoY2hhcnQpIHtcbiAgICAgICAgY29uc3QgYW5pbXMgPSB0aGlzLl9jaGFydHMuZ2V0KGNoYXJ0KTtcbiAgICAgICAgaWYgKCFhbmltcyB8fCAhYW5pbXMuaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXRlbXMgPSBhbmltcy5pdGVtcztcbiAgICAgICAgbGV0IGkgPSBpdGVtcy5sZW5ndGggLSAxO1xuICAgICAgICBmb3IoOyBpID49IDA7IC0taSl7XG4gICAgICAgICAgICBpdGVtc1tpXS5jYW5jZWwoKTtcbiAgICAgICAgfVxuICAgICAgICBhbmltcy5pdGVtcyA9IFtdO1xuICAgICAgICB0aGlzLl9ub3RpZnkoY2hhcnQsIGFuaW1zLCBEYXRlLm5vdygpLCAnY29tcGxldGUnKTtcbiAgICB9XG4gcmVtb3ZlKGNoYXJ0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jaGFydHMuZGVsZXRlKGNoYXJ0KTtcbiAgICB9XG59XG52YXIgYW5pbWF0b3IgPSAvKiAjX19QVVJFX18gKi8gbmV3IEFuaW1hdG9yKCk7XG5cbmNvbnN0IHRyYW5zcGFyZW50ID0gJ3RyYW5zcGFyZW50JztcbmNvbnN0IGludGVycG9sYXRvcnMgPSB7XG4gICAgYm9vbGVhbiAoZnJvbSwgdG8sIGZhY3Rvcikge1xuICAgICAgICByZXR1cm4gZmFjdG9yID4gMC41ID8gdG8gOiBmcm9tO1xuICAgIH0sXG4gY29sb3IgKGZyb20sIHRvLCBmYWN0b3IpIHtcbiAgICAgICAgY29uc3QgYzAgPSBjb2xvcihmcm9tIHx8IHRyYW5zcGFyZW50KTtcbiAgICAgICAgY29uc3QgYzEgPSBjMC52YWxpZCAmJiBjb2xvcih0byB8fCB0cmFuc3BhcmVudCk7XG4gICAgICAgIHJldHVybiBjMSAmJiBjMS52YWxpZCA/IGMxLm1peChjMCwgZmFjdG9yKS5oZXhTdHJpbmcoKSA6IHRvO1xuICAgIH0sXG4gICAgbnVtYmVyIChmcm9tLCB0bywgZmFjdG9yKSB7XG4gICAgICAgIHJldHVybiBmcm9tICsgKHRvIC0gZnJvbSkgKiBmYWN0b3I7XG4gICAgfVxufTtcbmNsYXNzIEFuaW1hdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY2ZnLCB0YXJnZXQsIHByb3AsIHRvKXtcbiAgICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gdGFyZ2V0W3Byb3BdO1xuICAgICAgICB0byA9IHJlc29sdmUoW1xuICAgICAgICAgICAgY2ZnLnRvLFxuICAgICAgICAgICAgdG8sXG4gICAgICAgICAgICBjdXJyZW50VmFsdWUsXG4gICAgICAgICAgICBjZmcuZnJvbVxuICAgICAgICBdKTtcbiAgICAgICAgY29uc3QgZnJvbSA9IHJlc29sdmUoW1xuICAgICAgICAgICAgY2ZnLmZyb20sXG4gICAgICAgICAgICBjdXJyZW50VmFsdWUsXG4gICAgICAgICAgICB0b1xuICAgICAgICBdKTtcbiAgICAgICAgdGhpcy5fYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fZm4gPSBjZmcuZm4gfHwgaW50ZXJwb2xhdG9yc1tjZmcudHlwZSB8fCB0eXBlb2YgZnJvbV07XG4gICAgICAgIHRoaXMuX2Vhc2luZyA9IGVmZmVjdHNbY2ZnLmVhc2luZ10gfHwgZWZmZWN0cy5saW5lYXI7XG4gICAgICAgIHRoaXMuX3N0YXJ0ID0gTWF0aC5mbG9vcihEYXRlLm5vdygpICsgKGNmZy5kZWxheSB8fCAwKSk7XG4gICAgICAgIHRoaXMuX2R1cmF0aW9uID0gdGhpcy5fdG90YWwgPSBNYXRoLmZsb29yKGNmZy5kdXJhdGlvbik7XG4gICAgICAgIHRoaXMuX2xvb3AgPSAhIWNmZy5sb29wO1xuICAgICAgICB0aGlzLl90YXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgIHRoaXMuX3Byb3AgPSBwcm9wO1xuICAgICAgICB0aGlzLl9mcm9tID0gZnJvbTtcbiAgICAgICAgdGhpcy5fdG8gPSB0bztcbiAgICAgICAgdGhpcy5fcHJvbWlzZXMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGFjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZTtcbiAgICB9XG4gICAgdXBkYXRlKGNmZywgdG8sIGRhdGUpIHtcbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy5fbm90aWZ5KGZhbHNlKTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IHRoaXMuX3RhcmdldFt0aGlzLl9wcm9wXTtcbiAgICAgICAgICAgIGNvbnN0IGVsYXBzZWQgPSBkYXRlIC0gdGhpcy5fc3RhcnQ7XG4gICAgICAgICAgICBjb25zdCByZW1haW4gPSB0aGlzLl9kdXJhdGlvbiAtIGVsYXBzZWQ7XG4gICAgICAgICAgICB0aGlzLl9zdGFydCA9IGRhdGU7XG4gICAgICAgICAgICB0aGlzLl9kdXJhdGlvbiA9IE1hdGguZmxvb3IoTWF0aC5tYXgocmVtYWluLCBjZmcuZHVyYXRpb24pKTtcbiAgICAgICAgICAgIHRoaXMuX3RvdGFsICs9IGVsYXBzZWQ7XG4gICAgICAgICAgICB0aGlzLl9sb29wID0gISFjZmcubG9vcDtcbiAgICAgICAgICAgIHRoaXMuX3RvID0gcmVzb2x2ZShbXG4gICAgICAgICAgICAgICAgY2ZnLnRvLFxuICAgICAgICAgICAgICAgIHRvLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSxcbiAgICAgICAgICAgICAgICBjZmcuZnJvbVxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICB0aGlzLl9mcm9tID0gcmVzb2x2ZShbXG4gICAgICAgICAgICAgICAgY2ZnLmZyb20sXG4gICAgICAgICAgICAgICAgY3VycmVudFZhbHVlLFxuICAgICAgICAgICAgICAgIHRvXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYW5jZWwoKSB7XG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmUpIHtcbiAgICAgICAgICAgIHRoaXMudGljayhEYXRlLm5vdygpKTtcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5fbm90aWZ5KGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aWNrKGRhdGUpIHtcbiAgICAgICAgY29uc3QgZWxhcHNlZCA9IGRhdGUgLSB0aGlzLl9zdGFydDtcbiAgICAgICAgY29uc3QgZHVyYXRpb24gPSB0aGlzLl9kdXJhdGlvbjtcbiAgICAgICAgY29uc3QgcHJvcCA9IHRoaXMuX3Byb3A7XG4gICAgICAgIGNvbnN0IGZyb20gPSB0aGlzLl9mcm9tO1xuICAgICAgICBjb25zdCBsb29wID0gdGhpcy5fbG9vcDtcbiAgICAgICAgY29uc3QgdG8gPSB0aGlzLl90bztcbiAgICAgICAgbGV0IGZhY3RvcjtcbiAgICAgICAgdGhpcy5fYWN0aXZlID0gZnJvbSAhPT0gdG8gJiYgKGxvb3AgfHwgZWxhcHNlZCA8IGR1cmF0aW9uKTtcbiAgICAgICAgaWYgKCF0aGlzLl9hY3RpdmUpIHtcbiAgICAgICAgICAgIHRoaXMuX3RhcmdldFtwcm9wXSA9IHRvO1xuICAgICAgICAgICAgdGhpcy5fbm90aWZ5KHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbGFwc2VkIDwgMCkge1xuICAgICAgICAgICAgdGhpcy5fdGFyZ2V0W3Byb3BdID0gZnJvbTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmYWN0b3IgPSBlbGFwc2VkIC8gZHVyYXRpb24gJSAyO1xuICAgICAgICBmYWN0b3IgPSBsb29wICYmIGZhY3RvciA+IDEgPyAyIC0gZmFjdG9yIDogZmFjdG9yO1xuICAgICAgICBmYWN0b3IgPSB0aGlzLl9lYXNpbmcoTWF0aC5taW4oMSwgTWF0aC5tYXgoMCwgZmFjdG9yKSkpO1xuICAgICAgICB0aGlzLl90YXJnZXRbcHJvcF0gPSB0aGlzLl9mbihmcm9tLCB0bywgZmFjdG9yKTtcbiAgICB9XG4gICAgd2FpdCgpIHtcbiAgICAgICAgY29uc3QgcHJvbWlzZXMgPSB0aGlzLl9wcm9taXNlcyB8fCAodGhpcy5fcHJvbWlzZXMgPSBbXSk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzLCByZWopPT57XG4gICAgICAgICAgICBwcm9taXNlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICByZXMsXG4gICAgICAgICAgICAgICAgcmVqXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9ub3RpZnkocmVzb2x2ZWQpIHtcbiAgICAgICAgY29uc3QgbWV0aG9kID0gcmVzb2x2ZWQgPyAncmVzJyA6ICdyZWonO1xuICAgICAgICBjb25zdCBwcm9taXNlcyA9IHRoaXMuX3Byb21pc2VzIHx8IFtdO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgcHJvbWlzZXMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgcHJvbWlzZXNbaV1bbWV0aG9kXSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5jbGFzcyBBbmltYXRpb25zIHtcbiAgICBjb25zdHJ1Y3RvcihjaGFydCwgY29uZmlnKXtcbiAgICAgICAgdGhpcy5fY2hhcnQgPSBjaGFydDtcbiAgICAgICAgdGhpcy5fcHJvcGVydGllcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5jb25maWd1cmUoY29uZmlnKTtcbiAgICB9XG4gICAgY29uZmlndXJlKGNvbmZpZykge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGNvbmZpZykpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhbmltYXRpb25PcHRpb25zID0gT2JqZWN0LmtleXMoZGVmYXVsdHMuYW5pbWF0aW9uKTtcbiAgICAgICAgY29uc3QgYW5pbWF0ZWRQcm9wcyA9IHRoaXMuX3Byb3BlcnRpZXM7XG4gICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGNvbmZpZykuZm9yRWFjaCgoa2V5KT0+e1xuICAgICAgICAgICAgY29uc3QgY2ZnID0gY29uZmlnW2tleV07XG4gICAgICAgICAgICBpZiAoIWlzT2JqZWN0KGNmZykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZXNvbHZlZCA9IHt9O1xuICAgICAgICAgICAgZm9yIChjb25zdCBvcHRpb24gb2YgYW5pbWF0aW9uT3B0aW9ucyl7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRbb3B0aW9uXSA9IGNmZ1tvcHRpb25dO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKGlzQXJyYXkoY2ZnLnByb3BlcnRpZXMpICYmIGNmZy5wcm9wZXJ0aWVzIHx8IFtcbiAgICAgICAgICAgICAgICBrZXlcbiAgICAgICAgICAgIF0pLmZvckVhY2goKHByb3ApPT57XG4gICAgICAgICAgICAgICAgaWYgKHByb3AgPT09IGtleSB8fCAhYW5pbWF0ZWRQcm9wcy5oYXMocHJvcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZWRQcm9wcy5zZXQocHJvcCwgcmVzb2x2ZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gX2FuaW1hdGVPcHRpb25zKHRhcmdldCwgdmFsdWVzKSB7XG4gICAgICAgIGNvbnN0IG5ld09wdGlvbnMgPSB2YWx1ZXMub3B0aW9ucztcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHJlc29sdmVUYXJnZXRPcHRpb25zKHRhcmdldCwgbmV3T3B0aW9ucyk7XG4gICAgICAgIGlmICghb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbnMgPSB0aGlzLl9jcmVhdGVBbmltYXRpb25zKG9wdGlvbnMsIG5ld09wdGlvbnMpO1xuICAgICAgICBpZiAobmV3T3B0aW9ucy4kc2hhcmVkKSB7XG4gICAgICAgICAgICBhd2FpdEFsbCh0YXJnZXQub3B0aW9ucy4kYW5pbWF0aW9ucywgbmV3T3B0aW9ucykudGhlbigoKT0+e1xuICAgICAgICAgICAgICAgIHRhcmdldC5vcHRpb25zID0gbmV3T3B0aW9ucztcbiAgICAgICAgICAgIH0sICgpPT57XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYW5pbWF0aW9ucztcbiAgICB9XG4gX2NyZWF0ZUFuaW1hdGlvbnModGFyZ2V0LCB2YWx1ZXMpIHtcbiAgICAgICAgY29uc3QgYW5pbWF0ZWRQcm9wcyA9IHRoaXMuX3Byb3BlcnRpZXM7XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbnMgPSBbXTtcbiAgICAgICAgY29uc3QgcnVubmluZyA9IHRhcmdldC4kYW5pbWF0aW9ucyB8fCAodGFyZ2V0LiRhbmltYXRpb25zID0ge30pO1xuICAgICAgICBjb25zdCBwcm9wcyA9IE9iamVjdC5rZXlzKHZhbHVlcyk7XG4gICAgICAgIGNvbnN0IGRhdGUgPSBEYXRlLm5vdygpO1xuICAgICAgICBsZXQgaTtcbiAgICAgICAgZm9yKGkgPSBwcm9wcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSl7XG4gICAgICAgICAgICBjb25zdCBwcm9wID0gcHJvcHNbaV07XG4gICAgICAgICAgICBpZiAocHJvcC5jaGFyQXQoMCkgPT09ICckJykge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHByb3AgPT09ICdvcHRpb25zJykge1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbnMucHVzaCguLi50aGlzLl9hbmltYXRlT3B0aW9ucyh0YXJnZXQsIHZhbHVlcykpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB2YWx1ZXNbcHJvcF07XG4gICAgICAgICAgICBsZXQgYW5pbWF0aW9uID0gcnVubmluZ1twcm9wXTtcbiAgICAgICAgICAgIGNvbnN0IGNmZyA9IGFuaW1hdGVkUHJvcHMuZ2V0KHByb3ApO1xuICAgICAgICAgICAgaWYgKGFuaW1hdGlvbikge1xuICAgICAgICAgICAgICAgIGlmIChjZmcgJiYgYW5pbWF0aW9uLmFjdGl2ZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbi51cGRhdGUoY2ZnLCB2YWx1ZSwgZGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5jYW5jZWwoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWNmZyB8fCAhY2ZnLmR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W3Byb3BdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBydW5uaW5nW3Byb3BdID0gYW5pbWF0aW9uID0gbmV3IEFuaW1hdGlvbihjZmcsIHRhcmdldCwgcHJvcCwgdmFsdWUpO1xuICAgICAgICAgICAgYW5pbWF0aW9ucy5wdXNoKGFuaW1hdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbnM7XG4gICAgfVxuIHVwZGF0ZSh0YXJnZXQsIHZhbHVlcykge1xuICAgICAgICBpZiAodGhpcy5fcHJvcGVydGllcy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHRhcmdldCwgdmFsdWVzKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhbmltYXRpb25zID0gdGhpcy5fY3JlYXRlQW5pbWF0aW9ucyh0YXJnZXQsIHZhbHVlcyk7XG4gICAgICAgIGlmIChhbmltYXRpb25zLmxlbmd0aCkge1xuICAgICAgICAgICAgYW5pbWF0b3IuYWRkKHRoaXMuX2NoYXJ0LCBhbmltYXRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gYXdhaXRBbGwoYW5pbWF0aW9ucywgcHJvcGVydGllcykge1xuICAgIGNvbnN0IHJ1bm5pbmcgPSBbXTtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMocHJvcGVydGllcyk7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspe1xuICAgICAgICBjb25zdCBhbmltID0gYW5pbWF0aW9uc1trZXlzW2ldXTtcbiAgICAgICAgaWYgKGFuaW0gJiYgYW5pbS5hY3RpdmUoKSkge1xuICAgICAgICAgICAgcnVubmluZy5wdXNoKGFuaW0ud2FpdCgpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocnVubmluZyk7XG59XG5mdW5jdGlvbiByZXNvbHZlVGFyZ2V0T3B0aW9ucyh0YXJnZXQsIG5ld09wdGlvbnMpIHtcbiAgICBpZiAoIW5ld09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgb3B0aW9ucyA9IHRhcmdldC5vcHRpb25zO1xuICAgIGlmICghb3B0aW9ucykge1xuICAgICAgICB0YXJnZXQub3B0aW9ucyA9IG5ld09wdGlvbnM7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuJHNoYXJlZCkge1xuICAgICAgICB0YXJnZXQub3B0aW9ucyA9IG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB7XG4gICAgICAgICAgICAkc2hhcmVkOiBmYWxzZSxcbiAgICAgICAgICAgICRhbmltYXRpb25zOiB7fVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG9wdGlvbnM7XG59XG5cbmZ1bmN0aW9uIHNjYWxlQ2xpcChzY2FsZSwgYWxsb3dlZE92ZXJmbG93KSB7XG4gICAgY29uc3Qgb3B0cyA9IHNjYWxlICYmIHNjYWxlLm9wdGlvbnMgfHwge307XG4gICAgY29uc3QgcmV2ZXJzZSA9IG9wdHMucmV2ZXJzZTtcbiAgICBjb25zdCBtaW4gPSBvcHRzLm1pbiA9PT0gdW5kZWZpbmVkID8gYWxsb3dlZE92ZXJmbG93IDogMDtcbiAgICBjb25zdCBtYXggPSBvcHRzLm1heCA9PT0gdW5kZWZpbmVkID8gYWxsb3dlZE92ZXJmbG93IDogMDtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydDogcmV2ZXJzZSA/IG1heCA6IG1pbixcbiAgICAgICAgZW5kOiByZXZlcnNlID8gbWluIDogbWF4XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGlwKHhTY2FsZSwgeVNjYWxlLCBhbGxvd2VkT3ZlcmZsb3cpIHtcbiAgICBpZiAoYWxsb3dlZE92ZXJmbG93ID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHggPSBzY2FsZUNsaXAoeFNjYWxlLCBhbGxvd2VkT3ZlcmZsb3cpO1xuICAgIGNvbnN0IHkgPSBzY2FsZUNsaXAoeVNjYWxlLCBhbGxvd2VkT3ZlcmZsb3cpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogeS5lbmQsXG4gICAgICAgIHJpZ2h0OiB4LmVuZCxcbiAgICAgICAgYm90dG9tOiB5LnN0YXJ0LFxuICAgICAgICBsZWZ0OiB4LnN0YXJ0XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHRvQ2xpcCh2YWx1ZSkge1xuICAgIGxldCB0LCByLCBiLCBsO1xuICAgIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgdCA9IHZhbHVlLnRvcDtcbiAgICAgICAgciA9IHZhbHVlLnJpZ2h0O1xuICAgICAgICBiID0gdmFsdWUuYm90dG9tO1xuICAgICAgICBsID0gdmFsdWUubGVmdDtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0ID0gciA9IGIgPSBsID0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogdCxcbiAgICAgICAgcmlnaHQ6IHIsXG4gICAgICAgIGJvdHRvbTogYixcbiAgICAgICAgbGVmdDogbCxcbiAgICAgICAgZGlzYWJsZWQ6IHZhbHVlID09PSBmYWxzZVxuICAgIH07XG59XG5mdW5jdGlvbiBnZXRTb3J0ZWREYXRhc2V0SW5kaWNlcyhjaGFydCwgZmlsdGVyVmlzaWJsZSkge1xuICAgIGNvbnN0IGtleXMgPSBbXTtcbiAgICBjb25zdCBtZXRhc2V0cyA9IGNoYXJ0Ll9nZXRTb3J0ZWREYXRhc2V0TWV0YXMoZmlsdGVyVmlzaWJsZSk7XG4gICAgbGV0IGksIGlsZW47XG4gICAgZm9yKGkgPSAwLCBpbGVuID0gbWV0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAga2V5cy5wdXNoKG1ldGFzZXRzW2ldLmluZGV4KTtcbiAgICB9XG4gICAgcmV0dXJuIGtleXM7XG59XG5mdW5jdGlvbiBhcHBseVN0YWNrKHN0YWNrLCB2YWx1ZSwgZHNJbmRleCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3Qga2V5cyA9IHN0YWNrLmtleXM7XG4gICAgY29uc3Qgc2luZ2xlTW9kZSA9IG9wdGlvbnMubW9kZSA9PT0gJ3NpbmdsZSc7XG4gICAgbGV0IGksIGlsZW4sIGRhdGFzZXRJbmRleCwgb3RoZXJWYWx1ZTtcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmb3IoaSA9IDAsIGlsZW4gPSBrZXlzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIGRhdGFzZXRJbmRleCA9ICtrZXlzW2ldO1xuICAgICAgICBpZiAoZGF0YXNldEluZGV4ID09PSBkc0luZGV4KSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5hbGwpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG90aGVyVmFsdWUgPSBzdGFjay52YWx1ZXNbZGF0YXNldEluZGV4XTtcbiAgICAgICAgaWYgKGlzTnVtYmVyRmluaXRlKG90aGVyVmFsdWUpICYmIChzaW5nbGVNb2RlIHx8IHZhbHVlID09PSAwIHx8IHNpZ24odmFsdWUpID09PSBzaWduKG90aGVyVmFsdWUpKSkge1xuICAgICAgICAgICAgdmFsdWUgKz0gb3RoZXJWYWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBjb252ZXJ0T2JqZWN0RGF0YVRvQXJyYXkoZGF0YSkge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhkYXRhKTtcbiAgICBjb25zdCBhZGF0YSA9IG5ldyBBcnJheShrZXlzLmxlbmd0aCk7XG4gICAgbGV0IGksIGlsZW4sIGtleTtcbiAgICBmb3IoaSA9IDAsIGlsZW4gPSBrZXlzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgIGFkYXRhW2ldID0ge1xuICAgICAgICAgICAgeDoga2V5LFxuICAgICAgICAgICAgeTogZGF0YVtrZXldXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBhZGF0YTtcbn1cbmZ1bmN0aW9uIGlzU3RhY2tlZChzY2FsZSwgbWV0YSkge1xuICAgIGNvbnN0IHN0YWNrZWQgPSBzY2FsZSAmJiBzY2FsZS5vcHRpb25zLnN0YWNrZWQ7XG4gICAgcmV0dXJuIHN0YWNrZWQgfHwgc3RhY2tlZCA9PT0gdW5kZWZpbmVkICYmIG1ldGEuc3RhY2sgIT09IHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIGdldFN0YWNrS2V5KGluZGV4U2NhbGUsIHZhbHVlU2NhbGUsIG1ldGEpIHtcbiAgICByZXR1cm4gYCR7aW5kZXhTY2FsZS5pZH0uJHt2YWx1ZVNjYWxlLmlkfS4ke21ldGEuc3RhY2sgfHwgbWV0YS50eXBlfWA7XG59XG5mdW5jdGlvbiBnZXRVc2VyQm91bmRzKHNjYWxlKSB7XG4gICAgY29uc3QgeyBtaW4gLCBtYXggLCBtaW5EZWZpbmVkICwgbWF4RGVmaW5lZCAgfSA9IHNjYWxlLmdldFVzZXJCb3VuZHMoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBtaW46IG1pbkRlZmluZWQgPyBtaW4gOiBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFksXG4gICAgICAgIG1heDogbWF4RGVmaW5lZCA/IG1heCA6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWVxuICAgIH07XG59XG5mdW5jdGlvbiBnZXRPckNyZWF0ZVN0YWNrKHN0YWNrcywgc3RhY2tLZXksIGluZGV4VmFsdWUpIHtcbiAgICBjb25zdCBzdWJTdGFjayA9IHN0YWNrc1tzdGFja0tleV0gfHwgKHN0YWNrc1tzdGFja0tleV0gPSB7fSk7XG4gICAgcmV0dXJuIHN1YlN0YWNrW2luZGV4VmFsdWVdIHx8IChzdWJTdGFja1tpbmRleFZhbHVlXSA9IHt9KTtcbn1cbmZ1bmN0aW9uIGdldExhc3RJbmRleEluU3RhY2soc3RhY2ssIHZTY2FsZSwgcG9zaXRpdmUsIHR5cGUpIHtcbiAgICBmb3IgKGNvbnN0IG1ldGEgb2YgdlNjYWxlLmdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKHR5cGUpLnJldmVyc2UoKSl7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gc3RhY2tbbWV0YS5pbmRleF07XG4gICAgICAgIGlmIChwb3NpdGl2ZSAmJiB2YWx1ZSA+IDAgfHwgIXBvc2l0aXZlICYmIHZhbHVlIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIG1ldGEuaW5kZXg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiB1cGRhdGVTdGFja3MoY29udHJvbGxlciwgcGFyc2VkKSB7XG4gICAgY29uc3QgeyBjaGFydCAsIF9jYWNoZWRNZXRhOiBtZXRhICB9ID0gY29udHJvbGxlcjtcbiAgICBjb25zdCBzdGFja3MgPSBjaGFydC5fc3RhY2tzIHx8IChjaGFydC5fc3RhY2tzID0ge30pO1xuICAgIGNvbnN0IHsgaVNjYWxlICwgdlNjYWxlICwgaW5kZXg6IGRhdGFzZXRJbmRleCAgfSA9IG1ldGE7XG4gICAgY29uc3QgaUF4aXMgPSBpU2NhbGUuYXhpcztcbiAgICBjb25zdCB2QXhpcyA9IHZTY2FsZS5heGlzO1xuICAgIGNvbnN0IGtleSA9IGdldFN0YWNrS2V5KGlTY2FsZSwgdlNjYWxlLCBtZXRhKTtcbiAgICBjb25zdCBpbGVuID0gcGFyc2VkLmxlbmd0aDtcbiAgICBsZXQgc3RhY2s7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBwYXJzZWRbaV07XG4gICAgICAgIGNvbnN0IHsgW2lBeGlzXTogaW5kZXggLCBbdkF4aXNdOiB2YWx1ZSAgfSA9IGl0ZW07XG4gICAgICAgIGNvbnN0IGl0ZW1TdGFja3MgPSBpdGVtLl9zdGFja3MgfHwgKGl0ZW0uX3N0YWNrcyA9IHt9KTtcbiAgICAgICAgc3RhY2sgPSBpdGVtU3RhY2tzW3ZBeGlzXSA9IGdldE9yQ3JlYXRlU3RhY2soc3RhY2tzLCBrZXksIGluZGV4KTtcbiAgICAgICAgc3RhY2tbZGF0YXNldEluZGV4XSA9IHZhbHVlO1xuICAgICAgICBzdGFjay5fdG9wID0gZ2V0TGFzdEluZGV4SW5TdGFjayhzdGFjaywgdlNjYWxlLCB0cnVlLCBtZXRhLnR5cGUpO1xuICAgICAgICBzdGFjay5fYm90dG9tID0gZ2V0TGFzdEluZGV4SW5TdGFjayhzdGFjaywgdlNjYWxlLCBmYWxzZSwgbWV0YS50eXBlKTtcbiAgICAgICAgY29uc3QgdmlzdWFsVmFsdWVzID0gc3RhY2suX3Zpc3VhbFZhbHVlcyB8fCAoc3RhY2suX3Zpc3VhbFZhbHVlcyA9IHt9KTtcbiAgICAgICAgdmlzdWFsVmFsdWVzW2RhdGFzZXRJbmRleF0gPSB2YWx1ZTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRGaXJzdFNjYWxlSWQoY2hhcnQsIGF4aXMpIHtcbiAgICBjb25zdCBzY2FsZXMgPSBjaGFydC5zY2FsZXM7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHNjYWxlcykuZmlsdGVyKChrZXkpPT5zY2FsZXNba2V5XS5heGlzID09PSBheGlzKS5zaGlmdCgpO1xufVxuZnVuY3Rpb24gY3JlYXRlRGF0YXNldENvbnRleHQocGFyZW50LCBpbmRleCkge1xuICAgIHJldHVybiBjcmVhdGVDb250ZXh0KHBhcmVudCwge1xuICAgICAgICBhY3RpdmU6IGZhbHNlLFxuICAgICAgICBkYXRhc2V0OiB1bmRlZmluZWQsXG4gICAgICAgIGRhdGFzZXRJbmRleDogaW5kZXgsXG4gICAgICAgIGluZGV4LFxuICAgICAgICBtb2RlOiAnZGVmYXVsdCcsXG4gICAgICAgIHR5cGU6ICdkYXRhc2V0J1xuICAgIH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlRGF0YUNvbnRleHQocGFyZW50LCBpbmRleCwgZWxlbWVudCkge1xuICAgIHJldHVybiBjcmVhdGVDb250ZXh0KHBhcmVudCwge1xuICAgICAgICBhY3RpdmU6IGZhbHNlLFxuICAgICAgICBkYXRhSW5kZXg6IGluZGV4LFxuICAgICAgICBwYXJzZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgcmF3OiB1bmRlZmluZWQsXG4gICAgICAgIGVsZW1lbnQsXG4gICAgICAgIGluZGV4LFxuICAgICAgICBtb2RlOiAnZGVmYXVsdCcsXG4gICAgICAgIHR5cGU6ICdkYXRhJ1xuICAgIH0pO1xufVxuZnVuY3Rpb24gY2xlYXJTdGFja3MobWV0YSwgaXRlbXMpIHtcbiAgICBjb25zdCBkYXRhc2V0SW5kZXggPSBtZXRhLmNvbnRyb2xsZXIuaW5kZXg7XG4gICAgY29uc3QgYXhpcyA9IG1ldGEudlNjYWxlICYmIG1ldGEudlNjYWxlLmF4aXM7XG4gICAgaWYgKCFheGlzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaXRlbXMgPSBpdGVtcyB8fCBtZXRhLl9wYXJzZWQ7XG4gICAgZm9yIChjb25zdCBwYXJzZWQgb2YgaXRlbXMpe1xuICAgICAgICBjb25zdCBzdGFja3MgPSBwYXJzZWQuX3N0YWNrcztcbiAgICAgICAgaWYgKCFzdGFja3MgfHwgc3RhY2tzW2F4aXNdID09PSB1bmRlZmluZWQgfHwgc3RhY2tzW2F4aXNdW2RhdGFzZXRJbmRleF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSBzdGFja3NbYXhpc11bZGF0YXNldEluZGV4XTtcbiAgICAgICAgaWYgKHN0YWNrc1theGlzXS5fdmlzdWFsVmFsdWVzICE9PSB1bmRlZmluZWQgJiYgc3RhY2tzW2F4aXNdLl92aXN1YWxWYWx1ZXNbZGF0YXNldEluZGV4XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBkZWxldGUgc3RhY2tzW2F4aXNdLl92aXN1YWxWYWx1ZXNbZGF0YXNldEluZGV4XTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmNvbnN0IGlzRGlyZWN0VXBkYXRlTW9kZSA9IChtb2RlKT0+bW9kZSA9PT0gJ3Jlc2V0JyB8fCBtb2RlID09PSAnbm9uZSc7XG5jb25zdCBjbG9uZUlmTm90U2hhcmVkID0gKGNhY2hlZCwgc2hhcmVkKT0+c2hhcmVkID8gY2FjaGVkIDogT2JqZWN0LmFzc2lnbih7fSwgY2FjaGVkKTtcbmNvbnN0IGNyZWF0ZVN0YWNrID0gKGNhblN0YWNrLCBtZXRhLCBjaGFydCk9PmNhblN0YWNrICYmICFtZXRhLmhpZGRlbiAmJiBtZXRhLl9zdGFja2VkICYmIHtcbiAgICAgICAga2V5czogZ2V0U29ydGVkRGF0YXNldEluZGljZXMoY2hhcnQsIHRydWUpLFxuICAgICAgICB2YWx1ZXM6IG51bGxcbiAgICB9O1xuY2xhc3MgRGF0YXNldENvbnRyb2xsZXIge1xuIHN0YXRpYyBkZWZhdWx0cyA9IHt9O1xuIHN0YXRpYyBkYXRhc2V0RWxlbWVudFR5cGUgPSBudWxsO1xuIHN0YXRpYyBkYXRhRWxlbWVudFR5cGUgPSBudWxsO1xuIGNvbnN0cnVjdG9yKGNoYXJ0LCBkYXRhc2V0SW5kZXgpe1xuICAgICAgICB0aGlzLmNoYXJ0ID0gY2hhcnQ7XG4gICAgICAgIHRoaXMuX2N0eCA9IGNoYXJ0LmN0eDtcbiAgICAgICAgdGhpcy5pbmRleCA9IGRhdGFzZXRJbmRleDtcbiAgICAgICAgdGhpcy5fY2FjaGVkRGF0YU9wdHMgPSB7fTtcbiAgICAgICAgdGhpcy5fY2FjaGVkTWV0YSA9IHRoaXMuZ2V0TWV0YSgpO1xuICAgICAgICB0aGlzLl90eXBlID0gdGhpcy5fY2FjaGVkTWV0YS50eXBlO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLl9wYXJzaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2RhdGEgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX29iamVjdERhdGEgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3NoYXJlZE9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2RyYXdTdGFydCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fZHJhd0NvdW50ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmVuYWJsZU9wdGlvblNoYXJpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zdXBwb3J0c0RlY2ltYXRpb24gPSBmYWxzZTtcbiAgICAgICAgdGhpcy4kY29udGV4dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fc3luY0xpc3QgPSBbXTtcbiAgICAgICAgdGhpcy5kYXRhc2V0RWxlbWVudFR5cGUgPSBuZXcudGFyZ2V0LmRhdGFzZXRFbGVtZW50VHlwZTtcbiAgICAgICAgdGhpcy5kYXRhRWxlbWVudFR5cGUgPSBuZXcudGFyZ2V0LmRhdGFFbGVtZW50VHlwZTtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplKCk7XG4gICAgfVxuICAgIGluaXRpYWxpemUoKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICB0aGlzLmNvbmZpZ3VyZSgpO1xuICAgICAgICB0aGlzLmxpbmtTY2FsZXMoKTtcbiAgICAgICAgbWV0YS5fc3RhY2tlZCA9IGlzU3RhY2tlZChtZXRhLnZTY2FsZSwgbWV0YSk7XG4gICAgICAgIHRoaXMuYWRkRWxlbWVudHMoKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5maWxsICYmICF0aGlzLmNoYXJ0LmlzUGx1Z2luRW5hYmxlZCgnZmlsbGVyJykpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlRyaWVkIHRvIHVzZSB0aGUgJ2ZpbGwnIG9wdGlvbiB3aXRob3V0IHRoZSAnRmlsbGVyJyBwbHVnaW4gZW5hYmxlZC4gUGxlYXNlIGltcG9ydCBhbmQgcmVnaXN0ZXIgdGhlICdGaWxsZXInIHBsdWdpbiBhbmQgbWFrZSBzdXJlIGl0IGlzIG5vdCBkaXNhYmxlZCBpbiB0aGUgb3B0aW9uc1wiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB1cGRhdGVJbmRleChkYXRhc2V0SW5kZXgpIHtcbiAgICAgICAgaWYgKHRoaXMuaW5kZXggIT09IGRhdGFzZXRJbmRleCkge1xuICAgICAgICAgICAgY2xlYXJTdGFja3ModGhpcy5fY2FjaGVkTWV0YSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbmRleCA9IGRhdGFzZXRJbmRleDtcbiAgICB9XG4gICAgbGlua1NjYWxlcygpIHtcbiAgICAgICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgZGF0YXNldCA9IHRoaXMuZ2V0RGF0YXNldCgpO1xuICAgICAgICBjb25zdCBjaG9vc2VJZCA9IChheGlzLCB4LCB5LCByKT0+YXhpcyA9PT0gJ3gnID8geCA6IGF4aXMgPT09ICdyJyA/IHIgOiB5O1xuICAgICAgICBjb25zdCB4aWQgPSBtZXRhLnhBeGlzSUQgPSB2YWx1ZU9yRGVmYXVsdChkYXRhc2V0LnhBeGlzSUQsIGdldEZpcnN0U2NhbGVJZChjaGFydCwgJ3gnKSk7XG4gICAgICAgIGNvbnN0IHlpZCA9IG1ldGEueUF4aXNJRCA9IHZhbHVlT3JEZWZhdWx0KGRhdGFzZXQueUF4aXNJRCwgZ2V0Rmlyc3RTY2FsZUlkKGNoYXJ0LCAneScpKTtcbiAgICAgICAgY29uc3QgcmlkID0gbWV0YS5yQXhpc0lEID0gdmFsdWVPckRlZmF1bHQoZGF0YXNldC5yQXhpc0lELCBnZXRGaXJzdFNjYWxlSWQoY2hhcnQsICdyJykpO1xuICAgICAgICBjb25zdCBpbmRleEF4aXMgPSBtZXRhLmluZGV4QXhpcztcbiAgICAgICAgY29uc3QgaWlkID0gbWV0YS5pQXhpc0lEID0gY2hvb3NlSWQoaW5kZXhBeGlzLCB4aWQsIHlpZCwgcmlkKTtcbiAgICAgICAgY29uc3QgdmlkID0gbWV0YS52QXhpc0lEID0gY2hvb3NlSWQoaW5kZXhBeGlzLCB5aWQsIHhpZCwgcmlkKTtcbiAgICAgICAgbWV0YS54U2NhbGUgPSB0aGlzLmdldFNjYWxlRm9ySWQoeGlkKTtcbiAgICAgICAgbWV0YS55U2NhbGUgPSB0aGlzLmdldFNjYWxlRm9ySWQoeWlkKTtcbiAgICAgICAgbWV0YS5yU2NhbGUgPSB0aGlzLmdldFNjYWxlRm9ySWQocmlkKTtcbiAgICAgICAgbWV0YS5pU2NhbGUgPSB0aGlzLmdldFNjYWxlRm9ySWQoaWlkKTtcbiAgICAgICAgbWV0YS52U2NhbGUgPSB0aGlzLmdldFNjYWxlRm9ySWQodmlkKTtcbiAgICB9XG4gICAgZ2V0RGF0YXNldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1t0aGlzLmluZGV4XTtcbiAgICB9XG4gICAgZ2V0TWV0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcnQuZ2V0RGF0YXNldE1ldGEodGhpcy5pbmRleCk7XG4gICAgfVxuIGdldFNjYWxlRm9ySWQoc2NhbGVJRCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFydC5zY2FsZXNbc2NhbGVJRF07XG4gICAgfVxuIF9nZXRPdGhlclNjYWxlKHNjYWxlKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICByZXR1cm4gc2NhbGUgPT09IG1ldGEuaVNjYWxlID8gbWV0YS52U2NhbGUgOiBtZXRhLmlTY2FsZTtcbiAgICB9XG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZSgncmVzZXQnKTtcbiAgICB9XG4gX2Rlc3Ryb3koKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBpZiAodGhpcy5fZGF0YSkge1xuICAgICAgICAgICAgdW5saXN0ZW5BcnJheUV2ZW50cyh0aGlzLl9kYXRhLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWV0YS5fc3RhY2tlZCkge1xuICAgICAgICAgICAgY2xlYXJTdGFja3MobWV0YSk7XG4gICAgICAgIH1cbiAgICB9XG4gX2RhdGFDaGVjaygpIHtcbiAgICAgICAgY29uc3QgZGF0YXNldCA9IHRoaXMuZ2V0RGF0YXNldCgpO1xuICAgICAgICBjb25zdCBkYXRhID0gZGF0YXNldC5kYXRhIHx8IChkYXRhc2V0LmRhdGEgPSBbXSk7XG4gICAgICAgIGNvbnN0IF9kYXRhID0gdGhpcy5fZGF0YTtcbiAgICAgICAgaWYgKGlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICAgICAgICB0aGlzLl9kYXRhID0gY29udmVydE9iamVjdERhdGFUb0FycmF5KGRhdGEpO1xuICAgICAgICB9IGVsc2UgaWYgKF9kYXRhICE9PSBkYXRhKSB7XG4gICAgICAgICAgICBpZiAoX2RhdGEpIHtcbiAgICAgICAgICAgICAgICB1bmxpc3RlbkFycmF5RXZlbnRzKF9kYXRhLCB0aGlzKTtcbiAgICAgICAgICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgICAgICAgICBjbGVhclN0YWNrcyhtZXRhKTtcbiAgICAgICAgICAgICAgICBtZXRhLl9wYXJzZWQgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkYXRhICYmIE9iamVjdC5pc0V4dGVuc2libGUoZGF0YSkpIHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5BcnJheUV2ZW50cyhkYXRhLCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3N5bmNMaXN0ID0gW107XG4gICAgICAgICAgICB0aGlzLl9kYXRhID0gZGF0YTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhZGRFbGVtZW50cygpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIHRoaXMuX2RhdGFDaGVjaygpO1xuICAgICAgICBpZiAodGhpcy5kYXRhc2V0RWxlbWVudFR5cGUpIHtcbiAgICAgICAgICAgIG1ldGEuZGF0YXNldCA9IG5ldyB0aGlzLmRhdGFzZXRFbGVtZW50VHlwZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGJ1aWxkT3JVcGRhdGVFbGVtZW50cyhyZXNldE5ld0VsZW1lbnRzKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBkYXRhc2V0ID0gdGhpcy5nZXREYXRhc2V0KCk7XG4gICAgICAgIGxldCBzdGFja0NoYW5nZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fZGF0YUNoZWNrKCk7XG4gICAgICAgIGNvbnN0IG9sZFN0YWNrZWQgPSBtZXRhLl9zdGFja2VkO1xuICAgICAgICBtZXRhLl9zdGFja2VkID0gaXNTdGFja2VkKG1ldGEudlNjYWxlLCBtZXRhKTtcbiAgICAgICAgaWYgKG1ldGEuc3RhY2sgIT09IGRhdGFzZXQuc3RhY2spIHtcbiAgICAgICAgICAgIHN0YWNrQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICBjbGVhclN0YWNrcyhtZXRhKTtcbiAgICAgICAgICAgIG1ldGEuc3RhY2sgPSBkYXRhc2V0LnN0YWNrO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Jlc3luY0VsZW1lbnRzKHJlc2V0TmV3RWxlbWVudHMpO1xuICAgICAgICBpZiAoc3RhY2tDaGFuZ2VkIHx8IG9sZFN0YWNrZWQgIT09IG1ldGEuX3N0YWNrZWQpIHtcbiAgICAgICAgICAgIHVwZGF0ZVN0YWNrcyh0aGlzLCBtZXRhLl9wYXJzZWQpO1xuICAgICAgICB9XG4gICAgfVxuIGNvbmZpZ3VyZSgpIHtcbiAgICAgICAgY29uc3QgY29uZmlnID0gdGhpcy5jaGFydC5jb25maWc7XG4gICAgICAgIGNvbnN0IHNjb3BlS2V5cyA9IGNvbmZpZy5kYXRhc2V0U2NvcGVLZXlzKHRoaXMuX3R5cGUpO1xuICAgICAgICBjb25zdCBzY29wZXMgPSBjb25maWcuZ2V0T3B0aW9uU2NvcGVzKHRoaXMuZ2V0RGF0YXNldCgpLCBzY29wZUtleXMsIHRydWUpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBjb25maWcuY3JlYXRlUmVzb2x2ZXIoc2NvcGVzLCB0aGlzLmdldENvbnRleHQoKSk7XG4gICAgICAgIHRoaXMuX3BhcnNpbmcgPSB0aGlzLm9wdGlvbnMucGFyc2luZztcbiAgICAgICAgdGhpcy5fY2FjaGVkRGF0YU9wdHMgPSB7fTtcbiAgICB9XG4gcGFyc2Uoc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIGNvbnN0IHsgX2NhY2hlZE1ldGE6IG1ldGEgLCBfZGF0YTogZGF0YSAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgaVNjYWxlICwgX3N0YWNrZWQgIH0gPSBtZXRhO1xuICAgICAgICBjb25zdCBpQXhpcyA9IGlTY2FsZS5heGlzO1xuICAgICAgICBsZXQgc29ydGVkID0gc3RhcnQgPT09IDAgJiYgY291bnQgPT09IGRhdGEubGVuZ3RoID8gdHJ1ZSA6IG1ldGEuX3NvcnRlZDtcbiAgICAgICAgbGV0IHByZXYgPSBzdGFydCA+IDAgJiYgbWV0YS5fcGFyc2VkW3N0YXJ0IC0gMV07XG4gICAgICAgIGxldCBpLCBjdXIsIHBhcnNlZDtcbiAgICAgICAgaWYgKHRoaXMuX3BhcnNpbmcgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBtZXRhLl9wYXJzZWQgPSBkYXRhO1xuICAgICAgICAgICAgbWV0YS5fc29ydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHBhcnNlZCA9IGRhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoaXNBcnJheShkYXRhW3N0YXJ0XSkpIHtcbiAgICAgICAgICAgICAgICBwYXJzZWQgPSB0aGlzLnBhcnNlQXJyYXlEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGRhdGFbc3RhcnRdKSkge1xuICAgICAgICAgICAgICAgIHBhcnNlZCA9IHRoaXMucGFyc2VPYmplY3REYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhcnNlZCA9IHRoaXMucGFyc2VQcmltaXRpdmVEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBpc05vdEluT3JkZXJDb21wYXJlZFRvUHJldiA9ICgpPT5jdXJbaUF4aXNdID09PSBudWxsIHx8IHByZXYgJiYgY3VyW2lBeGlzXSA8IHByZXZbaUF4aXNdO1xuICAgICAgICAgICAgZm9yKGkgPSAwOyBpIDwgY291bnQ7ICsraSl7XG4gICAgICAgICAgICAgICAgbWV0YS5fcGFyc2VkW2kgKyBzdGFydF0gPSBjdXIgPSBwYXJzZWRbaV07XG4gICAgICAgICAgICAgICAgaWYgKHNvcnRlZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNOb3RJbk9yZGVyQ29tcGFyZWRUb1ByZXYoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc29ydGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcHJldiA9IGN1cjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtZXRhLl9zb3J0ZWQgPSBzb3J0ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9zdGFja2VkKSB7XG4gICAgICAgICAgICB1cGRhdGVTdGFja3ModGhpcywgcGFyc2VkKTtcbiAgICAgICAgfVxuICAgIH1cbiBwYXJzZVByaW1pdGl2ZURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIGNvbnN0IHsgaVNjYWxlICwgdlNjYWxlICB9ID0gbWV0YTtcbiAgICAgICAgY29uc3QgaUF4aXMgPSBpU2NhbGUuYXhpcztcbiAgICAgICAgY29uc3QgdkF4aXMgPSB2U2NhbGUuYXhpcztcbiAgICAgICAgY29uc3QgbGFiZWxzID0gaVNjYWxlLmdldExhYmVscygpO1xuICAgICAgICBjb25zdCBzaW5nbGVTY2FsZSA9IGlTY2FsZSA9PT0gdlNjYWxlO1xuICAgICAgICBjb25zdCBwYXJzZWQgPSBuZXcgQXJyYXkoY291bnQpO1xuICAgICAgICBsZXQgaSwgaWxlbiwgaW5kZXg7XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IGNvdW50OyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIGluZGV4ID0gaSArIHN0YXJ0O1xuICAgICAgICAgICAgcGFyc2VkW2ldID0ge1xuICAgICAgICAgICAgICAgIFtpQXhpc106IHNpbmdsZVNjYWxlIHx8IGlTY2FsZS5wYXJzZShsYWJlbHNbaW5kZXhdLCBpbmRleCksXG4gICAgICAgICAgICAgICAgW3ZBeGlzXTogdlNjYWxlLnBhcnNlKGRhdGFbaW5kZXhdLCBpbmRleClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcnNlZDtcbiAgICB9XG4gcGFyc2VBcnJheURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIGNvbnN0IHsgeFNjYWxlICwgeVNjYWxlICB9ID0gbWV0YTtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gbmV3IEFycmF5KGNvdW50KTtcbiAgICAgICAgbGV0IGksIGlsZW4sIGluZGV4LCBpdGVtO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBjb3VudDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBpbmRleCA9IGkgKyBzdGFydDtcbiAgICAgICAgICAgIGl0ZW0gPSBkYXRhW2luZGV4XTtcbiAgICAgICAgICAgIHBhcnNlZFtpXSA9IHtcbiAgICAgICAgICAgICAgICB4OiB4U2NhbGUucGFyc2UoaXRlbVswXSwgaW5kZXgpLFxuICAgICAgICAgICAgICAgIHk6IHlTY2FsZS5wYXJzZShpdGVtWzFdLCBpbmRleClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcnNlZDtcbiAgICB9XG4gcGFyc2VPYmplY3REYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCB7IHhTY2FsZSAsIHlTY2FsZSAgfSA9IG1ldGE7XG4gICAgICAgIGNvbnN0IHsgeEF4aXNLZXkgPSd4JyAsIHlBeGlzS2V5ID0neScgIH0gPSB0aGlzLl9wYXJzaW5nO1xuICAgICAgICBjb25zdCBwYXJzZWQgPSBuZXcgQXJyYXkoY291bnQpO1xuICAgICAgICBsZXQgaSwgaWxlbiwgaW5kZXgsIGl0ZW07XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IGNvdW50OyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIGluZGV4ID0gaSArIHN0YXJ0O1xuICAgICAgICAgICAgaXRlbSA9IGRhdGFbaW5kZXhdO1xuICAgICAgICAgICAgcGFyc2VkW2ldID0ge1xuICAgICAgICAgICAgICAgIHg6IHhTY2FsZS5wYXJzZShyZXNvbHZlT2JqZWN0S2V5KGl0ZW0sIHhBeGlzS2V5KSwgaW5kZXgpLFxuICAgICAgICAgICAgICAgIHk6IHlTY2FsZS5wYXJzZShyZXNvbHZlT2JqZWN0S2V5KGl0ZW0sIHlBeGlzS2V5KSwgaW5kZXgpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgfVxuIGdldFBhcnNlZChpbmRleCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGVkTWV0YS5fcGFyc2VkW2luZGV4XTtcbiAgICB9XG4gZ2V0RGF0YUVsZW1lbnQoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlZE1ldGEuZGF0YVtpbmRleF07XG4gICAgfVxuIGFwcGx5U3RhY2soc2NhbGUsIHBhcnNlZCwgbW9kZSkge1xuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHBhcnNlZFtzY2FsZS5heGlzXTtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSB7XG4gICAgICAgICAgICBrZXlzOiBnZXRTb3J0ZWREYXRhc2V0SW5kaWNlcyhjaGFydCwgdHJ1ZSksXG4gICAgICAgICAgICB2YWx1ZXM6IHBhcnNlZC5fc3RhY2tzW3NjYWxlLmF4aXNdLl92aXN1YWxWYWx1ZXNcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGFwcGx5U3RhY2soc3RhY2ssIHZhbHVlLCBtZXRhLmluZGV4LCB7XG4gICAgICAgICAgICBtb2RlXG4gICAgICAgIH0pO1xuICAgIH1cbiB1cGRhdGVSYW5nZUZyb21QYXJzZWQocmFuZ2UsIHNjYWxlLCBwYXJzZWQsIHN0YWNrKSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZFZhbHVlID0gcGFyc2VkW3NjYWxlLmF4aXNdO1xuICAgICAgICBsZXQgdmFsdWUgPSBwYXJzZWRWYWx1ZSA9PT0gbnVsbCA/IE5hTiA6IHBhcnNlZFZhbHVlO1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBzdGFjayAmJiBwYXJzZWQuX3N0YWNrc1tzY2FsZS5heGlzXTtcbiAgICAgICAgaWYgKHN0YWNrICYmIHZhbHVlcykge1xuICAgICAgICAgICAgc3RhY2sudmFsdWVzID0gdmFsdWVzO1xuICAgICAgICAgICAgdmFsdWUgPSBhcHBseVN0YWNrKHN0YWNrLCBwYXJzZWRWYWx1ZSwgdGhpcy5fY2FjaGVkTWV0YS5pbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgcmFuZ2UubWluID0gTWF0aC5taW4ocmFuZ2UubWluLCB2YWx1ZSk7XG4gICAgICAgIHJhbmdlLm1heCA9IE1hdGgubWF4KHJhbmdlLm1heCwgdmFsdWUpO1xuICAgIH1cbiBnZXRNaW5NYXgoc2NhbGUsIGNhblN0YWNrKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBfcGFyc2VkID0gbWV0YS5fcGFyc2VkO1xuICAgICAgICBjb25zdCBzb3J0ZWQgPSBtZXRhLl9zb3J0ZWQgJiYgc2NhbGUgPT09IG1ldGEuaVNjYWxlO1xuICAgICAgICBjb25zdCBpbGVuID0gX3BhcnNlZC5sZW5ndGg7XG4gICAgICAgIGNvbnN0IG90aGVyU2NhbGUgPSB0aGlzLl9nZXRPdGhlclNjYWxlKHNjYWxlKTtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBjcmVhdGVTdGFjayhjYW5TdGFjaywgbWV0YSwgdGhpcy5jaGFydCk7XG4gICAgICAgIGNvbnN0IHJhbmdlID0ge1xuICAgICAgICAgICAgbWluOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksXG4gICAgICAgICAgICBtYXg6IE51bWJlci5ORUdBVElWRV9JTkZJTklUWVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCB7IG1pbjogb3RoZXJNaW4gLCBtYXg6IG90aGVyTWF4ICB9ID0gZ2V0VXNlckJvdW5kcyhvdGhlclNjYWxlKTtcbiAgICAgICAgbGV0IGksIHBhcnNlZDtcbiAgICAgICAgZnVuY3Rpb24gX3NraXAoKSB7XG4gICAgICAgICAgICBwYXJzZWQgPSBfcGFyc2VkW2ldO1xuICAgICAgICAgICAgY29uc3Qgb3RoZXJWYWx1ZSA9IHBhcnNlZFtvdGhlclNjYWxlLmF4aXNdO1xuICAgICAgICAgICAgcmV0dXJuICFpc051bWJlckZpbml0ZShwYXJzZWRbc2NhbGUuYXhpc10pIHx8IG90aGVyTWluID4gb3RoZXJWYWx1ZSB8fCBvdGhlck1heCA8IG90aGVyVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIGlmIChfc2tpcCgpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVJhbmdlRnJvbVBhcnNlZChyYW5nZSwgc2NhbGUsIHBhcnNlZCwgc3RhY2spO1xuICAgICAgICAgICAgaWYgKHNvcnRlZCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzb3J0ZWQpIHtcbiAgICAgICAgICAgIGZvcihpID0gaWxlbiAtIDE7IGkgPj0gMDsgLS1pKXtcbiAgICAgICAgICAgICAgICBpZiAoX3NraXAoKSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVSYW5nZUZyb21QYXJzZWQocmFuZ2UsIHNjYWxlLCBwYXJzZWQsIHN0YWNrKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmFuZ2U7XG4gICAgfVxuICAgIGdldEFsbFBhcnNlZFZhbHVlcyhzY2FsZSkge1xuICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLl9jYWNoZWRNZXRhLl9wYXJzZWQ7XG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xuICAgICAgICBsZXQgaSwgaWxlbiwgdmFsdWU7XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IHBhcnNlZC5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgdmFsdWUgPSBwYXJzZWRbaV1bc2NhbGUuYXhpc107XG4gICAgICAgICAgICBpZiAoaXNOdW1iZXJGaW5pdGUodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWVzLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfVxuIGdldE1heE92ZXJmbG93KCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuIGdldExhYmVsQW5kVmFsdWUoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGlTY2FsZSA9IG1ldGEuaVNjYWxlO1xuICAgICAgICBjb25zdCB2U2NhbGUgPSBtZXRhLnZTY2FsZTtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaW5kZXgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGFiZWw6IGlTY2FsZSA/ICcnICsgaVNjYWxlLmdldExhYmVsRm9yVmFsdWUocGFyc2VkW2lTY2FsZS5heGlzXSkgOiAnJyxcbiAgICAgICAgICAgIHZhbHVlOiB2U2NhbGUgPyAnJyArIHZTY2FsZS5nZXRMYWJlbEZvclZhbHVlKHBhcnNlZFt2U2NhbGUuYXhpc10pIDogJydcbiAgICAgICAgfTtcbiAgICB9XG4gX3VwZGF0ZShtb2RlKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICB0aGlzLnVwZGF0ZShtb2RlIHx8ICdkZWZhdWx0Jyk7XG4gICAgICAgIG1ldGEuX2NsaXAgPSB0b0NsaXAodmFsdWVPckRlZmF1bHQodGhpcy5vcHRpb25zLmNsaXAsIGRlZmF1bHRDbGlwKG1ldGEueFNjYWxlLCBtZXRhLnlTY2FsZSwgdGhpcy5nZXRNYXhPdmVyZmxvdygpKSkpO1xuICAgIH1cbiB1cGRhdGUobW9kZSkge31cbiAgICBkcmF3KCkge1xuICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9jdHg7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0gbWV0YS5kYXRhIHx8IFtdO1xuICAgICAgICBjb25zdCBhcmVhID0gY2hhcnQuY2hhcnRBcmVhO1xuICAgICAgICBjb25zdCBhY3RpdmUgPSBbXTtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSB0aGlzLl9kcmF3U3RhcnQgfHwgMDtcbiAgICAgICAgY29uc3QgY291bnQgPSB0aGlzLl9kcmF3Q291bnQgfHwgZWxlbWVudHMubGVuZ3RoIC0gc3RhcnQ7XG4gICAgICAgIGNvbnN0IGRyYXdBY3RpdmVFbGVtZW50c09uVG9wID0gdGhpcy5vcHRpb25zLmRyYXdBY3RpdmVFbGVtZW50c09uVG9wO1xuICAgICAgICBsZXQgaTtcbiAgICAgICAgaWYgKG1ldGEuZGF0YXNldCkge1xuICAgICAgICAgICAgbWV0YS5kYXRhc2V0LmRyYXcoY3R4LCBhcmVhLCBzdGFydCwgY291bnQpO1xuICAgICAgICB9XG4gICAgICAgIGZvcihpID0gc3RhcnQ7IGkgPCBzdGFydCArIGNvdW50OyArK2kpe1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGVsZW1lbnRzW2ldO1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQuaGlkZGVuKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZWxlbWVudC5hY3RpdmUgJiYgZHJhd0FjdGl2ZUVsZW1lbnRzT25Ub3ApIHtcbiAgICAgICAgICAgICAgICBhY3RpdmUucHVzaChlbGVtZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5kcmF3KGN0eCwgYXJlYSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgYWN0aXZlLmxlbmd0aDsgKytpKXtcbiAgICAgICAgICAgIGFjdGl2ZVtpXS5kcmF3KGN0eCwgYXJlYSk7XG4gICAgICAgIH1cbiAgICB9XG4gZ2V0U3R5bGUoaW5kZXgsIGFjdGl2ZSkge1xuICAgICAgICBjb25zdCBtb2RlID0gYWN0aXZlID8gJ2FjdGl2ZScgOiAnZGVmYXVsdCc7XG4gICAgICAgIHJldHVybiBpbmRleCA9PT0gdW5kZWZpbmVkICYmIHRoaXMuX2NhY2hlZE1ldGEuZGF0YXNldCA/IHRoaXMucmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9ucyhtb2RlKSA6IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpbmRleCB8fCAwLCBtb2RlKTtcbiAgICB9XG4gZ2V0Q29udGV4dChpbmRleCwgYWN0aXZlLCBtb2RlKSB7XG4gICAgICAgIGNvbnN0IGRhdGFzZXQgPSB0aGlzLmdldERhdGFzZXQoKTtcbiAgICAgICAgbGV0IGNvbnRleHQ7XG4gICAgICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgdGhpcy5fY2FjaGVkTWV0YS5kYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMuX2NhY2hlZE1ldGEuZGF0YVtpbmRleF07XG4gICAgICAgICAgICBjb250ZXh0ID0gZWxlbWVudC4kY29udGV4dCB8fCAoZWxlbWVudC4kY29udGV4dCA9IGNyZWF0ZURhdGFDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpLCBpbmRleCwgZWxlbWVudCkpO1xuICAgICAgICAgICAgY29udGV4dC5wYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgICAgICAgICBjb250ZXh0LnJhdyA9IGRhdGFzZXQuZGF0YVtpbmRleF07XG4gICAgICAgICAgICBjb250ZXh0LmluZGV4ID0gY29udGV4dC5kYXRhSW5kZXggPSBpbmRleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRleHQgPSB0aGlzLiRjb250ZXh0IHx8ICh0aGlzLiRjb250ZXh0ID0gY3JlYXRlRGF0YXNldENvbnRleHQodGhpcy5jaGFydC5nZXRDb250ZXh0KCksIHRoaXMuaW5kZXgpKTtcbiAgICAgICAgICAgIGNvbnRleHQuZGF0YXNldCA9IGRhdGFzZXQ7XG4gICAgICAgICAgICBjb250ZXh0LmluZGV4ID0gY29udGV4dC5kYXRhc2V0SW5kZXggPSB0aGlzLmluZGV4O1xuICAgICAgICB9XG4gICAgICAgIGNvbnRleHQuYWN0aXZlID0gISFhY3RpdmU7XG4gICAgICAgIGNvbnRleHQubW9kZSA9IG1vZGU7XG4gICAgICAgIHJldHVybiBjb250ZXh0O1xuICAgIH1cbiByZXNvbHZlRGF0YXNldEVsZW1lbnRPcHRpb25zKG1vZGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc29sdmVFbGVtZW50T3B0aW9ucyh0aGlzLmRhdGFzZXRFbGVtZW50VHlwZS5pZCwgbW9kZSk7XG4gICAgfVxuIHJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaW5kZXgsIG1vZGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc29sdmVFbGVtZW50T3B0aW9ucyh0aGlzLmRhdGFFbGVtZW50VHlwZS5pZCwgbW9kZSwgaW5kZXgpO1xuICAgIH1cbiBfcmVzb2x2ZUVsZW1lbnRPcHRpb25zKGVsZW1lbnRUeXBlLCBtb2RlID0gJ2RlZmF1bHQnLCBpbmRleCkge1xuICAgICAgICBjb25zdCBhY3RpdmUgPSBtb2RlID09PSAnYWN0aXZlJztcbiAgICAgICAgY29uc3QgY2FjaGUgPSB0aGlzLl9jYWNoZWREYXRhT3B0cztcbiAgICAgICAgY29uc3QgY2FjaGVLZXkgPSBlbGVtZW50VHlwZSArICctJyArIG1vZGU7XG4gICAgICAgIGNvbnN0IGNhY2hlZCA9IGNhY2hlW2NhY2hlS2V5XTtcbiAgICAgICAgY29uc3Qgc2hhcmluZyA9IHRoaXMuZW5hYmxlT3B0aW9uU2hhcmluZyAmJiBkZWZpbmVkKGluZGV4KTtcbiAgICAgICAgaWYgKGNhY2hlZCkge1xuICAgICAgICAgICAgcmV0dXJuIGNsb25lSWZOb3RTaGFyZWQoY2FjaGVkLCBzaGFyaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb25maWcgPSB0aGlzLmNoYXJ0LmNvbmZpZztcbiAgICAgICAgY29uc3Qgc2NvcGVLZXlzID0gY29uZmlnLmRhdGFzZXRFbGVtZW50U2NvcGVLZXlzKHRoaXMuX3R5cGUsIGVsZW1lbnRUeXBlKTtcbiAgICAgICAgY29uc3QgcHJlZml4ZXMgPSBhY3RpdmUgPyBbXG4gICAgICAgICAgICBgJHtlbGVtZW50VHlwZX1Ib3ZlcmAsXG4gICAgICAgICAgICAnaG92ZXInLFxuICAgICAgICAgICAgZWxlbWVudFR5cGUsXG4gICAgICAgICAgICAnJ1xuICAgICAgICBdIDogW1xuICAgICAgICAgICAgZWxlbWVudFR5cGUsXG4gICAgICAgICAgICAnJ1xuICAgICAgICBdO1xuICAgICAgICBjb25zdCBzY29wZXMgPSBjb25maWcuZ2V0T3B0aW9uU2NvcGVzKHRoaXMuZ2V0RGF0YXNldCgpLCBzY29wZUtleXMpO1xuICAgICAgICBjb25zdCBuYW1lcyA9IE9iamVjdC5rZXlzKGRlZmF1bHRzLmVsZW1lbnRzW2VsZW1lbnRUeXBlXSk7XG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSAoKT0+dGhpcy5nZXRDb250ZXh0KGluZGV4LCBhY3RpdmUsIG1vZGUpO1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBjb25maWcucmVzb2x2ZU5hbWVkT3B0aW9ucyhzY29wZXMsIG5hbWVzLCBjb250ZXh0LCBwcmVmaXhlcyk7XG4gICAgICAgIGlmICh2YWx1ZXMuJHNoYXJlZCkge1xuICAgICAgICAgICAgdmFsdWVzLiRzaGFyZWQgPSBzaGFyaW5nO1xuICAgICAgICAgICAgY2FjaGVbY2FjaGVLZXldID0gT2JqZWN0LmZyZWV6ZShjbG9uZUlmTm90U2hhcmVkKHZhbHVlcywgc2hhcmluZykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfVxuIF9yZXNvbHZlQW5pbWF0aW9ucyhpbmRleCwgdHJhbnNpdGlvbiwgYWN0aXZlKSB7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3QgY2FjaGUgPSB0aGlzLl9jYWNoZWREYXRhT3B0cztcbiAgICAgICAgY29uc3QgY2FjaGVLZXkgPSBgYW5pbWF0aW9uLSR7dHJhbnNpdGlvbn1gO1xuICAgICAgICBjb25zdCBjYWNoZWQgPSBjYWNoZVtjYWNoZUtleV07XG4gICAgICAgIGlmIChjYWNoZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG9wdGlvbnM7XG4gICAgICAgIGlmIChjaGFydC5vcHRpb25zLmFuaW1hdGlvbiAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY2hhcnQuY29uZmlnO1xuICAgICAgICAgICAgY29uc3Qgc2NvcGVLZXlzID0gY29uZmlnLmRhdGFzZXRBbmltYXRpb25TY29wZUtleXModGhpcy5fdHlwZSwgdHJhbnNpdGlvbik7XG4gICAgICAgICAgICBjb25zdCBzY29wZXMgPSBjb25maWcuZ2V0T3B0aW9uU2NvcGVzKHRoaXMuZ2V0RGF0YXNldCgpLCBzY29wZUtleXMpO1xuICAgICAgICAgICAgb3B0aW9ucyA9IGNvbmZpZy5jcmVhdGVSZXNvbHZlcihzY29wZXMsIHRoaXMuZ2V0Q29udGV4dChpbmRleCwgYWN0aXZlLCB0cmFuc2l0aW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYW5pbWF0aW9ucyA9IG5ldyBBbmltYXRpb25zKGNoYXJ0LCBvcHRpb25zICYmIG9wdGlvbnMuYW5pbWF0aW9ucyk7XG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuX2NhY2hlYWJsZSkge1xuICAgICAgICAgICAgY2FjaGVbY2FjaGVLZXldID0gT2JqZWN0LmZyZWV6ZShhbmltYXRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYW5pbWF0aW9ucztcbiAgICB9XG4gZ2V0U2hhcmVkT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIGlmICghb3B0aW9ucy4kc2hhcmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3NoYXJlZE9wdGlvbnMgfHwgKHRoaXMuX3NoYXJlZE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKSk7XG4gICAgfVxuIGluY2x1ZGVPcHRpb25zKG1vZGUsIHNoYXJlZE9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuICFzaGFyZWRPcHRpb25zIHx8IGlzRGlyZWN0VXBkYXRlTW9kZShtb2RlKSB8fCB0aGlzLmNoYXJ0Ll9hbmltYXRpb25zRGlzYWJsZWQ7XG4gICAgfVxuIF9nZXRTaGFyZWRPcHRpb25zKHN0YXJ0LCBtb2RlKSB7XG4gICAgICAgIGNvbnN0IGZpcnN0T3B0cyA9IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhzdGFydCwgbW9kZSk7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzbHlTaGFyZWRPcHRpb25zID0gdGhpcy5fc2hhcmVkT3B0aW9ucztcbiAgICAgICAgY29uc3Qgc2hhcmVkT3B0aW9ucyA9IHRoaXMuZ2V0U2hhcmVkT3B0aW9ucyhmaXJzdE9wdHMpO1xuICAgICAgICBjb25zdCBpbmNsdWRlT3B0aW9ucyA9IHRoaXMuaW5jbHVkZU9wdGlvbnMobW9kZSwgc2hhcmVkT3B0aW9ucykgfHwgc2hhcmVkT3B0aW9ucyAhPT0gcHJldmlvdXNseVNoYXJlZE9wdGlvbnM7XG4gICAgICAgIHRoaXMudXBkYXRlU2hhcmVkT3B0aW9ucyhzaGFyZWRPcHRpb25zLCBtb2RlLCBmaXJzdE9wdHMpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2hhcmVkT3B0aW9ucyxcbiAgICAgICAgICAgIGluY2x1ZGVPcHRpb25zXG4gICAgICAgIH07XG4gICAgfVxuIHVwZGF0ZUVsZW1lbnQoZWxlbWVudCwgaW5kZXgsIHByb3BlcnRpZXMsIG1vZGUpIHtcbiAgICAgICAgaWYgKGlzRGlyZWN0VXBkYXRlTW9kZShtb2RlKSkge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihlbGVtZW50LCBwcm9wZXJ0aWVzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc29sdmVBbmltYXRpb25zKGluZGV4LCBtb2RlKS51cGRhdGUoZWxlbWVudCwgcHJvcGVydGllcyk7XG4gICAgICAgIH1cbiAgICB9XG4gdXBkYXRlU2hhcmVkT3B0aW9ucyhzaGFyZWRPcHRpb25zLCBtb2RlLCBuZXdPcHRpb25zKSB7XG4gICAgICAgIGlmIChzaGFyZWRPcHRpb25zICYmICFpc0RpcmVjdFVwZGF0ZU1vZGUobW9kZSkpIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc29sdmVBbmltYXRpb25zKHVuZGVmaW5lZCwgbW9kZSkudXBkYXRlKHNoYXJlZE9wdGlvbnMsIG5ld09wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuIF9zZXRTdHlsZShlbGVtZW50LCBpbmRleCwgbW9kZSwgYWN0aXZlKSB7XG4gICAgICAgIGVsZW1lbnQuYWN0aXZlID0gYWN0aXZlO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5nZXRTdHlsZShpbmRleCwgYWN0aXZlKTtcbiAgICAgICAgdGhpcy5fcmVzb2x2ZUFuaW1hdGlvbnMoaW5kZXgsIG1vZGUsIGFjdGl2ZSkudXBkYXRlKGVsZW1lbnQsIHtcbiAgICAgICAgICAgIG9wdGlvbnM6ICFhY3RpdmUgJiYgdGhpcy5nZXRTaGFyZWRPcHRpb25zKG9wdGlvbnMpIHx8IG9wdGlvbnNcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJlbW92ZUhvdmVyU3R5bGUoZWxlbWVudCwgZGF0YXNldEluZGV4LCBpbmRleCkge1xuICAgICAgICB0aGlzLl9zZXRTdHlsZShlbGVtZW50LCBpbmRleCwgJ2FjdGl2ZScsIGZhbHNlKTtcbiAgICB9XG4gICAgc2V0SG92ZXJTdHlsZShlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4KSB7XG4gICAgICAgIHRoaXMuX3NldFN0eWxlKGVsZW1lbnQsIGluZGV4LCAnYWN0aXZlJywgdHJ1ZSk7XG4gICAgfVxuIF9yZW1vdmVEYXRhc2V0SG92ZXJTdHlsZSgpIHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMuX2NhY2hlZE1ldGEuZGF0YXNldDtcbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3NldFN0eWxlKGVsZW1lbnQsIHVuZGVmaW5lZCwgJ2FjdGl2ZScsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cbiBfc2V0RGF0YXNldEhvdmVyU3R5bGUoKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLl9jYWNoZWRNZXRhLmRhdGFzZXQ7XG4gICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9zZXRTdHlsZShlbGVtZW50LCB1bmRlZmluZWQsICdhY3RpdmUnLCB0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cbiBfcmVzeW5jRWxlbWVudHMocmVzZXROZXdFbGVtZW50cykge1xuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5fZGF0YTtcbiAgICAgICAgY29uc3QgZWxlbWVudHMgPSB0aGlzLl9jYWNoZWRNZXRhLmRhdGE7XG4gICAgICAgIGZvciAoY29uc3QgW21ldGhvZCwgYXJnMSwgYXJnMl0gb2YgdGhpcy5fc3luY0xpc3Qpe1xuICAgICAgICAgICAgdGhpc1ttZXRob2RdKGFyZzEsIGFyZzIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3N5bmNMaXN0ID0gW107XG4gICAgICAgIGNvbnN0IG51bU1ldGEgPSBlbGVtZW50cy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IG51bURhdGEgPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgY29uc3QgY291bnQgPSBNYXRoLm1pbihudW1EYXRhLCBudW1NZXRhKTtcbiAgICAgICAgaWYgKGNvdW50KSB7XG4gICAgICAgICAgICB0aGlzLnBhcnNlKDAsIGNvdW50KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobnVtRGF0YSA+IG51bU1ldGEpIHtcbiAgICAgICAgICAgIHRoaXMuX2luc2VydEVsZW1lbnRzKG51bU1ldGEsIG51bURhdGEgLSBudW1NZXRhLCByZXNldE5ld0VsZW1lbnRzKTtcbiAgICAgICAgfSBlbHNlIGlmIChudW1EYXRhIDwgbnVtTWV0YSkge1xuICAgICAgICAgICAgdGhpcy5fcmVtb3ZlRWxlbWVudHMobnVtRGF0YSwgbnVtTWV0YSAtIG51bURhdGEpO1xuICAgICAgICB9XG4gICAgfVxuIF9pbnNlcnRFbGVtZW50cyhzdGFydCwgY291bnQsIHJlc2V0TmV3RWxlbWVudHMgPSB0cnVlKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBkYXRhID0gbWV0YS5kYXRhO1xuICAgICAgICBjb25zdCBlbmQgPSBzdGFydCArIGNvdW50O1xuICAgICAgICBsZXQgaTtcbiAgICAgICAgY29uc3QgbW92ZSA9IChhcnIpPT57XG4gICAgICAgICAgICBhcnIubGVuZ3RoICs9IGNvdW50O1xuICAgICAgICAgICAgZm9yKGkgPSBhcnIubGVuZ3RoIC0gMTsgaSA+PSBlbmQ7IGktLSl7XG4gICAgICAgICAgICAgICAgYXJyW2ldID0gYXJyW2kgLSBjb3VudF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIG1vdmUoZGF0YSk7XG4gICAgICAgIGZvcihpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSl7XG4gICAgICAgICAgICBkYXRhW2ldID0gbmV3IHRoaXMuZGF0YUVsZW1lbnRUeXBlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3BhcnNpbmcpIHtcbiAgICAgICAgICAgIG1vdmUobWV0YS5fcGFyc2VkKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBhcnNlKHN0YXJ0LCBjb3VudCk7XG4gICAgICAgIGlmIChyZXNldE5ld0VsZW1lbnRzKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnRzKGRhdGEsIHN0YXJ0LCBjb3VudCwgJ3Jlc2V0Jyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlRWxlbWVudHMoZWxlbWVudCwgc3RhcnQsIGNvdW50LCBtb2RlKSB7fVxuIF9yZW1vdmVFbGVtZW50cyhzdGFydCwgY291bnQpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGlmICh0aGlzLl9wYXJzaW5nKSB7XG4gICAgICAgICAgICBjb25zdCByZW1vdmVkID0gbWV0YS5fcGFyc2VkLnNwbGljZShzdGFydCwgY291bnQpO1xuICAgICAgICAgICAgaWYgKG1ldGEuX3N0YWNrZWQpIHtcbiAgICAgICAgICAgICAgICBjbGVhclN0YWNrcyhtZXRhLCByZW1vdmVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBtZXRhLmRhdGEuc3BsaWNlKHN0YXJ0LCBjb3VudCk7XG4gICAgfVxuIF9zeW5jKGFyZ3MpIHtcbiAgICAgICAgaWYgKHRoaXMuX3BhcnNpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuX3N5bmNMaXN0LnB1c2goYXJncyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBbbWV0aG9kLCBhcmcxLCBhcmcyXSA9IGFyZ3M7XG4gICAgICAgICAgICB0aGlzW21ldGhvZF0oYXJnMSwgYXJnMik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jaGFydC5fZGF0YUNoYW5nZXMucHVzaChbXG4gICAgICAgICAgICB0aGlzLmluZGV4LFxuICAgICAgICAgICAgLi4uYXJnc1xuICAgICAgICBdKTtcbiAgICB9XG4gICAgX29uRGF0YVB1c2goKSB7XG4gICAgICAgIGNvbnN0IGNvdW50ID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgdGhpcy5fc3luYyhbXG4gICAgICAgICAgICAnX2luc2VydEVsZW1lbnRzJyxcbiAgICAgICAgICAgIHRoaXMuZ2V0RGF0YXNldCgpLmRhdGEubGVuZ3RoIC0gY291bnQsXG4gICAgICAgICAgICBjb3VudFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgX29uRGF0YVBvcCgpIHtcbiAgICAgICAgdGhpcy5fc3luYyhbXG4gICAgICAgICAgICAnX3JlbW92ZUVsZW1lbnRzJyxcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlZE1ldGEuZGF0YS5sZW5ndGggLSAxLFxuICAgICAgICAgICAgMVxuICAgICAgICBdKTtcbiAgICB9XG4gICAgX29uRGF0YVNoaWZ0KCkge1xuICAgICAgICB0aGlzLl9zeW5jKFtcbiAgICAgICAgICAgICdfcmVtb3ZlRWxlbWVudHMnLFxuICAgICAgICAgICAgMCxcbiAgICAgICAgICAgIDFcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIF9vbkRhdGFTcGxpY2Uoc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIGlmIChjb3VudCkge1xuICAgICAgICAgICAgdGhpcy5fc3luYyhbXG4gICAgICAgICAgICAgICAgJ19yZW1vdmVFbGVtZW50cycsXG4gICAgICAgICAgICAgICAgc3RhcnQsXG4gICAgICAgICAgICAgICAgY291bnRcbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5ld0NvdW50ID0gYXJndW1lbnRzLmxlbmd0aCAtIDI7XG4gICAgICAgIGlmIChuZXdDb3VudCkge1xuICAgICAgICAgICAgdGhpcy5fc3luYyhbXG4gICAgICAgICAgICAgICAgJ19pbnNlcnRFbGVtZW50cycsXG4gICAgICAgICAgICAgICAgc3RhcnQsXG4gICAgICAgICAgICAgICAgbmV3Q291bnRcbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9vbkRhdGFVbnNoaWZ0KCkge1xuICAgICAgICB0aGlzLl9zeW5jKFtcbiAgICAgICAgICAgICdfaW5zZXJ0RWxlbWVudHMnLFxuICAgICAgICAgICAgMCxcbiAgICAgICAgICAgIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICAgXSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRBbGxTY2FsZVZhbHVlcyhzY2FsZSwgdHlwZSkge1xuICAgIGlmICghc2NhbGUuX2NhY2hlLiRiYXIpIHtcbiAgICAgICAgY29uc3QgdmlzaWJsZU1ldGFzID0gc2NhbGUuZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXModHlwZSk7XG4gICAgICAgIGxldCB2YWx1ZXMgPSBbXTtcbiAgICAgICAgZm9yKGxldCBpID0gMCwgaWxlbiA9IHZpc2libGVNZXRhcy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspe1xuICAgICAgICAgICAgdmFsdWVzID0gdmFsdWVzLmNvbmNhdCh2aXNpYmxlTWV0YXNbaV0uY29udHJvbGxlci5nZXRBbGxQYXJzZWRWYWx1ZXMoc2NhbGUpKTtcbiAgICAgICAgfVxuICAgICAgICBzY2FsZS5fY2FjaGUuJGJhciA9IF9hcnJheVVuaXF1ZSh2YWx1ZXMuc29ydCgoYSwgYik9PmEgLSBiKSk7XG4gICAgfVxuICAgIHJldHVybiBzY2FsZS5fY2FjaGUuJGJhcjtcbn1cbiBmdW5jdGlvbiBjb21wdXRlTWluU2FtcGxlU2l6ZShtZXRhKSB7XG4gICAgY29uc3Qgc2NhbGUgPSBtZXRhLmlTY2FsZTtcbiAgICBjb25zdCB2YWx1ZXMgPSBnZXRBbGxTY2FsZVZhbHVlcyhzY2FsZSwgbWV0YS50eXBlKTtcbiAgICBsZXQgbWluID0gc2NhbGUuX2xlbmd0aDtcbiAgICBsZXQgaSwgaWxlbiwgY3VyciwgcHJldjtcbiAgICBjb25zdCB1cGRhdGVNaW5BbmRQcmV2ID0gKCk9PntcbiAgICAgICAgaWYgKGN1cnIgPT09IDMyNzY3IHx8IGN1cnIgPT09IC0zMjc2OCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWZpbmVkKHByZXYpKSB7XG4gICAgICAgICAgICBtaW4gPSBNYXRoLm1pbihtaW4sIE1hdGguYWJzKGN1cnIgLSBwcmV2KSB8fCBtaW4pO1xuICAgICAgICB9XG4gICAgICAgIHByZXYgPSBjdXJyO1xuICAgIH07XG4gICAgZm9yKGkgPSAwLCBpbGVuID0gdmFsdWVzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIGN1cnIgPSBzY2FsZS5nZXRQaXhlbEZvclZhbHVlKHZhbHVlc1tpXSk7XG4gICAgICAgIHVwZGF0ZU1pbkFuZFByZXYoKTtcbiAgICB9XG4gICAgcHJldiA9IHVuZGVmaW5lZDtcbiAgICBmb3IoaSA9IDAsIGlsZW4gPSBzY2FsZS50aWNrcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBjdXJyID0gc2NhbGUuZ2V0UGl4ZWxGb3JUaWNrKGkpO1xuICAgICAgICB1cGRhdGVNaW5BbmRQcmV2KCk7XG4gICAgfVxuICAgIHJldHVybiBtaW47XG59XG4gZnVuY3Rpb24gY29tcHV0ZUZpdENhdGVnb3J5VHJhaXRzKGluZGV4LCBydWxlciwgb3B0aW9ucywgc3RhY2tDb3VudCkge1xuICAgIGNvbnN0IHRoaWNrbmVzcyA9IG9wdGlvbnMuYmFyVGhpY2tuZXNzO1xuICAgIGxldCBzaXplLCByYXRpbztcbiAgICBpZiAoaXNOdWxsT3JVbmRlZih0aGlja25lc3MpKSB7XG4gICAgICAgIHNpemUgPSBydWxlci5taW4gKiBvcHRpb25zLmNhdGVnb3J5UGVyY2VudGFnZTtcbiAgICAgICAgcmF0aW8gPSBvcHRpb25zLmJhclBlcmNlbnRhZ2U7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc2l6ZSA9IHRoaWNrbmVzcyAqIHN0YWNrQ291bnQ7XG4gICAgICAgIHJhdGlvID0gMTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY2h1bms6IHNpemUgLyBzdGFja0NvdW50LFxuICAgICAgICByYXRpbyxcbiAgICAgICAgc3RhcnQ6IHJ1bGVyLnBpeGVsc1tpbmRleF0gLSBzaXplIC8gMlxuICAgIH07XG59XG4gZnVuY3Rpb24gY29tcHV0ZUZsZXhDYXRlZ29yeVRyYWl0cyhpbmRleCwgcnVsZXIsIG9wdGlvbnMsIHN0YWNrQ291bnQpIHtcbiAgICBjb25zdCBwaXhlbHMgPSBydWxlci5waXhlbHM7XG4gICAgY29uc3QgY3VyciA9IHBpeGVsc1tpbmRleF07XG4gICAgbGV0IHByZXYgPSBpbmRleCA+IDAgPyBwaXhlbHNbaW5kZXggLSAxXSA6IG51bGw7XG4gICAgbGV0IG5leHQgPSBpbmRleCA8IHBpeGVscy5sZW5ndGggLSAxID8gcGl4ZWxzW2luZGV4ICsgMV0gOiBudWxsO1xuICAgIGNvbnN0IHBlcmNlbnQgPSBvcHRpb25zLmNhdGVnb3J5UGVyY2VudGFnZTtcbiAgICBpZiAocHJldiA9PT0gbnVsbCkge1xuICAgICAgICBwcmV2ID0gY3VyciAtIChuZXh0ID09PSBudWxsID8gcnVsZXIuZW5kIC0gcnVsZXIuc3RhcnQgOiBuZXh0IC0gY3Vycik7XG4gICAgfVxuICAgIGlmIChuZXh0ID09PSBudWxsKSB7XG4gICAgICAgIG5leHQgPSBjdXJyICsgY3VyciAtIHByZXY7XG4gICAgfVxuICAgIGNvbnN0IHN0YXJ0ID0gY3VyciAtIChjdXJyIC0gTWF0aC5taW4ocHJldiwgbmV4dCkpIC8gMiAqIHBlcmNlbnQ7XG4gICAgY29uc3Qgc2l6ZSA9IE1hdGguYWJzKG5leHQgLSBwcmV2KSAvIDIgKiBwZXJjZW50O1xuICAgIHJldHVybiB7XG4gICAgICAgIGNodW5rOiBzaXplIC8gc3RhY2tDb3VudCxcbiAgICAgICAgcmF0aW86IG9wdGlvbnMuYmFyUGVyY2VudGFnZSxcbiAgICAgICAgc3RhcnRcbiAgICB9O1xufVxuZnVuY3Rpb24gcGFyc2VGbG9hdEJhcihlbnRyeSwgaXRlbSwgdlNjYWxlLCBpKSB7XG4gICAgY29uc3Qgc3RhcnRWYWx1ZSA9IHZTY2FsZS5wYXJzZShlbnRyeVswXSwgaSk7XG4gICAgY29uc3QgZW5kVmFsdWUgPSB2U2NhbGUucGFyc2UoZW50cnlbMV0sIGkpO1xuICAgIGNvbnN0IG1pbiA9IE1hdGgubWluKHN0YXJ0VmFsdWUsIGVuZFZhbHVlKTtcbiAgICBjb25zdCBtYXggPSBNYXRoLm1heChzdGFydFZhbHVlLCBlbmRWYWx1ZSk7XG4gICAgbGV0IGJhclN0YXJ0ID0gbWluO1xuICAgIGxldCBiYXJFbmQgPSBtYXg7XG4gICAgaWYgKE1hdGguYWJzKG1pbikgPiBNYXRoLmFicyhtYXgpKSB7XG4gICAgICAgIGJhclN0YXJ0ID0gbWF4O1xuICAgICAgICBiYXJFbmQgPSBtaW47XG4gICAgfVxuICAgIGl0ZW1bdlNjYWxlLmF4aXNdID0gYmFyRW5kO1xuICAgIGl0ZW0uX2N1c3RvbSA9IHtcbiAgICAgICAgYmFyU3RhcnQsXG4gICAgICAgIGJhckVuZCxcbiAgICAgICAgc3RhcnQ6IHN0YXJ0VmFsdWUsXG4gICAgICAgIGVuZDogZW5kVmFsdWUsXG4gICAgICAgIG1pbixcbiAgICAgICAgbWF4XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHBhcnNlVmFsdWUoZW50cnksIGl0ZW0sIHZTY2FsZSwgaSkge1xuICAgIGlmIChpc0FycmF5KGVudHJ5KSkge1xuICAgICAgICBwYXJzZUZsb2F0QmFyKGVudHJ5LCBpdGVtLCB2U2NhbGUsIGkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGl0ZW1bdlNjYWxlLmF4aXNdID0gdlNjYWxlLnBhcnNlKGVudHJ5LCBpKTtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZW07XG59XG5mdW5jdGlvbiBwYXJzZUFycmF5T3JQcmltaXRpdmUobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgY29uc3QgaVNjYWxlID0gbWV0YS5pU2NhbGU7XG4gICAgY29uc3QgdlNjYWxlID0gbWV0YS52U2NhbGU7XG4gICAgY29uc3QgbGFiZWxzID0gaVNjYWxlLmdldExhYmVscygpO1xuICAgIGNvbnN0IHNpbmdsZVNjYWxlID0gaVNjYWxlID09PSB2U2NhbGU7XG4gICAgY29uc3QgcGFyc2VkID0gW107XG4gICAgbGV0IGksIGlsZW4sIGl0ZW0sIGVudHJ5O1xuICAgIGZvcihpID0gc3RhcnQsIGlsZW4gPSBzdGFydCArIGNvdW50OyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgZW50cnkgPSBkYXRhW2ldO1xuICAgICAgICBpdGVtID0ge307XG4gICAgICAgIGl0ZW1baVNjYWxlLmF4aXNdID0gc2luZ2xlU2NhbGUgfHwgaVNjYWxlLnBhcnNlKGxhYmVsc1tpXSwgaSk7XG4gICAgICAgIHBhcnNlZC5wdXNoKHBhcnNlVmFsdWUoZW50cnksIGl0ZW0sIHZTY2FsZSwgaSkpO1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VkO1xufVxuZnVuY3Rpb24gaXNGbG9hdEJhcihjdXN0b20pIHtcbiAgICByZXR1cm4gY3VzdG9tICYmIGN1c3RvbS5iYXJTdGFydCAhPT0gdW5kZWZpbmVkICYmIGN1c3RvbS5iYXJFbmQgIT09IHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIGJhclNpZ24oc2l6ZSwgdlNjYWxlLCBhY3R1YWxCYXNlKSB7XG4gICAgaWYgKHNpemUgIT09IDApIHtcbiAgICAgICAgcmV0dXJuIHNpZ24oc2l6ZSk7XG4gICAgfVxuICAgIHJldHVybiAodlNjYWxlLmlzSG9yaXpvbnRhbCgpID8gMSA6IC0xKSAqICh2U2NhbGUubWluID49IGFjdHVhbEJhc2UgPyAxIDogLTEpO1xufVxuZnVuY3Rpb24gYm9yZGVyUHJvcHMocHJvcGVydGllcykge1xuICAgIGxldCByZXZlcnNlLCBzdGFydCwgZW5kLCB0b3AsIGJvdHRvbTtcbiAgICBpZiAocHJvcGVydGllcy5ob3Jpem9udGFsKSB7XG4gICAgICAgIHJldmVyc2UgPSBwcm9wZXJ0aWVzLmJhc2UgPiBwcm9wZXJ0aWVzLng7XG4gICAgICAgIHN0YXJ0ID0gJ2xlZnQnO1xuICAgICAgICBlbmQgPSAncmlnaHQnO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldmVyc2UgPSBwcm9wZXJ0aWVzLmJhc2UgPCBwcm9wZXJ0aWVzLnk7XG4gICAgICAgIHN0YXJ0ID0gJ2JvdHRvbSc7XG4gICAgICAgIGVuZCA9ICd0b3AnO1xuICAgIH1cbiAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICB0b3AgPSAnZW5kJztcbiAgICAgICAgYm90dG9tID0gJ3N0YXJ0JztcbiAgICB9IGVsc2Uge1xuICAgICAgICB0b3AgPSAnc3RhcnQnO1xuICAgICAgICBib3R0b20gPSAnZW5kJztcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIGVuZCxcbiAgICAgICAgcmV2ZXJzZSxcbiAgICAgICAgdG9wLFxuICAgICAgICBib3R0b21cbiAgICB9O1xufVxuZnVuY3Rpb24gc2V0Qm9yZGVyU2tpcHBlZChwcm9wZXJ0aWVzLCBvcHRpb25zLCBzdGFjaywgaW5kZXgpIHtcbiAgICBsZXQgZWRnZSA9IG9wdGlvbnMuYm9yZGVyU2tpcHBlZDtcbiAgICBjb25zdCByZXMgPSB7fTtcbiAgICBpZiAoIWVkZ2UpIHtcbiAgICAgICAgcHJvcGVydGllcy5ib3JkZXJTa2lwcGVkID0gcmVzO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChlZGdlID09PSB0cnVlKSB7XG4gICAgICAgIHByb3BlcnRpZXMuYm9yZGVyU2tpcHBlZCA9IHtcbiAgICAgICAgICAgIHRvcDogdHJ1ZSxcbiAgICAgICAgICAgIHJpZ2h0OiB0cnVlLFxuICAgICAgICAgICAgYm90dG9tOiB0cnVlLFxuICAgICAgICAgICAgbGVmdDogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHsgc3RhcnQgLCBlbmQgLCByZXZlcnNlICwgdG9wICwgYm90dG9tICB9ID0gYm9yZGVyUHJvcHMocHJvcGVydGllcyk7XG4gICAgaWYgKGVkZ2UgPT09ICdtaWRkbGUnICYmIHN0YWNrKSB7XG4gICAgICAgIHByb3BlcnRpZXMuZW5hYmxlQm9yZGVyUmFkaXVzID0gdHJ1ZTtcbiAgICAgICAgaWYgKChzdGFjay5fdG9wIHx8IDApID09PSBpbmRleCkge1xuICAgICAgICAgICAgZWRnZSA9IHRvcDtcbiAgICAgICAgfSBlbHNlIGlmICgoc3RhY2suX2JvdHRvbSB8fCAwKSA9PT0gaW5kZXgpIHtcbiAgICAgICAgICAgIGVkZ2UgPSBib3R0b207XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNbcGFyc2VFZGdlKGJvdHRvbSwgc3RhcnQsIGVuZCwgcmV2ZXJzZSldID0gdHJ1ZTtcbiAgICAgICAgICAgIGVkZ2UgPSB0b3A7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVzW3BhcnNlRWRnZShlZGdlLCBzdGFydCwgZW5kLCByZXZlcnNlKV0gPSB0cnVlO1xuICAgIHByb3BlcnRpZXMuYm9yZGVyU2tpcHBlZCA9IHJlcztcbn1cbmZ1bmN0aW9uIHBhcnNlRWRnZShlZGdlLCBhLCBiLCByZXZlcnNlKSB7XG4gICAgaWYgKHJldmVyc2UpIHtcbiAgICAgICAgZWRnZSA9IHN3YXAoZWRnZSwgYSwgYik7XG4gICAgICAgIGVkZ2UgPSBzdGFydEVuZChlZGdlLCBiLCBhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBlZGdlID0gc3RhcnRFbmQoZWRnZSwgYSwgYik7XG4gICAgfVxuICAgIHJldHVybiBlZGdlO1xufVxuZnVuY3Rpb24gc3dhcChvcmlnLCB2MSwgdjIpIHtcbiAgICByZXR1cm4gb3JpZyA9PT0gdjEgPyB2MiA6IG9yaWcgPT09IHYyID8gdjEgOiBvcmlnO1xufVxuZnVuY3Rpb24gc3RhcnRFbmQodiwgc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiB2ID09PSAnc3RhcnQnID8gc3RhcnQgOiB2ID09PSAnZW5kJyA/IGVuZCA6IHY7XG59XG5mdW5jdGlvbiBzZXRJbmZsYXRlQW1vdW50KHByb3BlcnRpZXMsIHsgaW5mbGF0ZUFtb3VudCAgfSwgcmF0aW8pIHtcbiAgICBwcm9wZXJ0aWVzLmluZmxhdGVBbW91bnQgPSBpbmZsYXRlQW1vdW50ID09PSAnYXV0bycgPyByYXRpbyA9PT0gMSA/IDAuMzMgOiAwIDogaW5mbGF0ZUFtb3VudDtcbn1cbmNsYXNzIEJhckNvbnRyb2xsZXIgZXh0ZW5kcyBEYXRhc2V0Q29udHJvbGxlciB7XG4gICAgc3RhdGljIGlkID0gJ2Jhcic7XG4gc3RhdGljIGRlZmF1bHRzID0ge1xuICAgICAgICBkYXRhc2V0RWxlbWVudFR5cGU6IGZhbHNlLFxuICAgICAgICBkYXRhRWxlbWVudFR5cGU6ICdiYXInLFxuICAgICAgICBjYXRlZ29yeVBlcmNlbnRhZ2U6IDAuOCxcbiAgICAgICAgYmFyUGVyY2VudGFnZTogMC45LFxuICAgICAgICBncm91cGVkOiB0cnVlLFxuICAgICAgICBhbmltYXRpb25zOiB7XG4gICAgICAgICAgICBudW1iZXJzOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgICAgICAgICAgcHJvcGVydGllczogW1xuICAgICAgICAgICAgICAgICAgICAneCcsXG4gICAgICAgICAgICAgICAgICAgICd5JyxcbiAgICAgICAgICAgICAgICAgICAgJ2Jhc2UnLFxuICAgICAgICAgICAgICAgICAgICAnd2lkdGgnLFxuICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0J1xuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gc3RhdGljIG92ZXJyaWRlcyA9IHtcbiAgICAgICAgc2NhbGVzOiB7XG4gICAgICAgICAgICBfaW5kZXhfOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2NhdGVnb3J5JyxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IHRydWUsXG4gICAgICAgICAgICAgICAgZ3JpZDoge1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3ZhbHVlXzoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5lYXInLFxuICAgICAgICAgICAgICAgIGJlZ2luQXRaZXJvOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuIHBhcnNlUHJpbWl0aXZlRGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlQXJyYXlPclByaW1pdGl2ZShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgIH1cbiBwYXJzZUFycmF5RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlQXJyYXlPclByaW1pdGl2ZShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgIH1cbiBwYXJzZU9iamVjdERhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIGNvbnN0IHsgaVNjYWxlICwgdlNjYWxlICB9ID0gbWV0YTtcbiAgICAgICAgY29uc3QgeyB4QXhpc0tleSA9J3gnICwgeUF4aXNLZXkgPSd5JyAgfSA9IHRoaXMuX3BhcnNpbmc7XG4gICAgICAgIGNvbnN0IGlBeGlzS2V5ID0gaVNjYWxlLmF4aXMgPT09ICd4JyA/IHhBeGlzS2V5IDogeUF4aXNLZXk7XG4gICAgICAgIGNvbnN0IHZBeGlzS2V5ID0gdlNjYWxlLmF4aXMgPT09ICd4JyA/IHhBeGlzS2V5IDogeUF4aXNLZXk7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IFtdO1xuICAgICAgICBsZXQgaSwgaWxlbiwgaXRlbSwgb2JqO1xuICAgICAgICBmb3IoaSA9IHN0YXJ0LCBpbGVuID0gc3RhcnQgKyBjb3VudDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBvYmogPSBkYXRhW2ldO1xuICAgICAgICAgICAgaXRlbSA9IHt9O1xuICAgICAgICAgICAgaXRlbVtpU2NhbGUuYXhpc10gPSBpU2NhbGUucGFyc2UocmVzb2x2ZU9iamVjdEtleShvYmosIGlBeGlzS2V5KSwgaSk7XG4gICAgICAgICAgICBwYXJzZWQucHVzaChwYXJzZVZhbHVlKHJlc29sdmVPYmplY3RLZXkob2JqLCB2QXhpc0tleSksIGl0ZW0sIHZTY2FsZSwgaSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgfVxuIHVwZGF0ZVJhbmdlRnJvbVBhcnNlZChyYW5nZSwgc2NhbGUsIHBhcnNlZCwgc3RhY2spIHtcbiAgICAgICAgc3VwZXIudXBkYXRlUmFuZ2VGcm9tUGFyc2VkKHJhbmdlLCBzY2FsZSwgcGFyc2VkLCBzdGFjayk7XG4gICAgICAgIGNvbnN0IGN1c3RvbSA9IHBhcnNlZC5fY3VzdG9tO1xuICAgICAgICBpZiAoY3VzdG9tICYmIHNjYWxlID09PSB0aGlzLl9jYWNoZWRNZXRhLnZTY2FsZSkge1xuICAgICAgICAgICAgcmFuZ2UubWluID0gTWF0aC5taW4ocmFuZ2UubWluLCBjdXN0b20ubWluKTtcbiAgICAgICAgICAgIHJhbmdlLm1heCA9IE1hdGgubWF4KHJhbmdlLm1heCwgY3VzdG9tLm1heCk7XG4gICAgICAgIH1cbiAgICB9XG4gZ2V0TWF4T3ZlcmZsb3coKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiBnZXRMYWJlbEFuZFZhbHVlKGluZGV4KSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCB7IGlTY2FsZSAsIHZTY2FsZSAgfSA9IG1ldGE7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGluZGV4KTtcbiAgICAgICAgY29uc3QgY3VzdG9tID0gcGFyc2VkLl9jdXN0b207XG4gICAgICAgIGNvbnN0IHZhbHVlID0gaXNGbG9hdEJhcihjdXN0b20pID8gJ1snICsgY3VzdG9tLnN0YXJ0ICsgJywgJyArIGN1c3RvbS5lbmQgKyAnXScgOiAnJyArIHZTY2FsZS5nZXRMYWJlbEZvclZhbHVlKHBhcnNlZFt2U2NhbGUuYXhpc10pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGFiZWw6ICcnICsgaVNjYWxlLmdldExhYmVsRm9yVmFsdWUocGFyc2VkW2lTY2FsZS5heGlzXSksXG4gICAgICAgICAgICB2YWx1ZVxuICAgICAgICB9O1xuICAgIH1cbiAgICBpbml0aWFsaXplKCkge1xuICAgICAgICB0aGlzLmVuYWJsZU9wdGlvblNoYXJpbmcgPSB0cnVlO1xuICAgICAgICBzdXBlci5pbml0aWFsaXplKCk7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBtZXRhLnN0YWNrID0gdGhpcy5nZXREYXRhc2V0KCkuc3RhY2s7XG4gICAgfVxuICAgIHVwZGF0ZShtb2RlKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnRzKG1ldGEuZGF0YSwgMCwgbWV0YS5kYXRhLmxlbmd0aCwgbW9kZSk7XG4gICAgfVxuICAgIHVwZGF0ZUVsZW1lbnRzKGJhcnMsIHN0YXJ0LCBjb3VudCwgbW9kZSkge1xuICAgICAgICBjb25zdCByZXNldCA9IG1vZGUgPT09ICdyZXNldCc7XG4gICAgICAgIGNvbnN0IHsgaW5kZXggLCBfY2FjaGVkTWV0YTogeyB2U2NhbGUgIH0gIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBiYXNlID0gdlNjYWxlLmdldEJhc2VQaXhlbCgpO1xuICAgICAgICBjb25zdCBob3Jpem9udGFsID0gdlNjYWxlLmlzSG9yaXpvbnRhbCgpO1xuICAgICAgICBjb25zdCBydWxlciA9IHRoaXMuX2dldFJ1bGVyKCk7XG4gICAgICAgIGNvbnN0IHsgc2hhcmVkT3B0aW9ucyAsIGluY2x1ZGVPcHRpb25zICB9ID0gdGhpcy5fZ2V0U2hhcmVkT3B0aW9ucyhzdGFydCwgbW9kZSk7XG4gICAgICAgIGZvcihsZXQgaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBjb3VudDsgaSsrKXtcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGkpO1xuICAgICAgICAgICAgY29uc3QgdnBpeGVscyA9IHJlc2V0IHx8IGlzTnVsbE9yVW5kZWYocGFyc2VkW3ZTY2FsZS5heGlzXSkgPyB7XG4gICAgICAgICAgICAgICAgYmFzZSxcbiAgICAgICAgICAgICAgICBoZWFkOiBiYXNlXG4gICAgICAgICAgICB9IDogdGhpcy5fY2FsY3VsYXRlQmFyVmFsdWVQaXhlbHMoaSk7XG4gICAgICAgICAgICBjb25zdCBpcGl4ZWxzID0gdGhpcy5fY2FsY3VsYXRlQmFySW5kZXhQaXhlbHMoaSwgcnVsZXIpO1xuICAgICAgICAgICAgY29uc3Qgc3RhY2sgPSAocGFyc2VkLl9zdGFja3MgfHwge30pW3ZTY2FsZS5heGlzXTtcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSB7XG4gICAgICAgICAgICAgICAgaG9yaXpvbnRhbCxcbiAgICAgICAgICAgICAgICBiYXNlOiB2cGl4ZWxzLmJhc2UsXG4gICAgICAgICAgICAgICAgZW5hYmxlQm9yZGVyUmFkaXVzOiAhc3RhY2sgfHwgaXNGbG9hdEJhcihwYXJzZWQuX2N1c3RvbSkgfHwgaW5kZXggPT09IHN0YWNrLl90b3AgfHwgaW5kZXggPT09IHN0YWNrLl9ib3R0b20sXG4gICAgICAgICAgICAgICAgeDogaG9yaXpvbnRhbCA/IHZwaXhlbHMuaGVhZCA6IGlwaXhlbHMuY2VudGVyLFxuICAgICAgICAgICAgICAgIHk6IGhvcml6b250YWwgPyBpcGl4ZWxzLmNlbnRlciA6IHZwaXhlbHMuaGVhZCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGhvcml6b250YWwgPyBpcGl4ZWxzLnNpemUgOiBNYXRoLmFicyh2cGl4ZWxzLnNpemUpLFxuICAgICAgICAgICAgICAgIHdpZHRoOiBob3Jpem9udGFsID8gTWF0aC5hYnModnBpeGVscy5zaXplKSA6IGlwaXhlbHMuc2l6ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChpbmNsdWRlT3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMub3B0aW9ucyA9IHNoYXJlZE9wdGlvbnMgfHwgdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGksIGJhcnNbaV0uYWN0aXZlID8gJ2FjdGl2ZScgOiBtb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSBwcm9wZXJ0aWVzLm9wdGlvbnMgfHwgYmFyc1tpXS5vcHRpb25zO1xuICAgICAgICAgICAgc2V0Qm9yZGVyU2tpcHBlZChwcm9wZXJ0aWVzLCBvcHRpb25zLCBzdGFjaywgaW5kZXgpO1xuICAgICAgICAgICAgc2V0SW5mbGF0ZUFtb3VudChwcm9wZXJ0aWVzLCBvcHRpb25zLCBydWxlci5yYXRpbyk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQoYmFyc1tpXSwgaSwgcHJvcGVydGllcywgbW9kZSk7XG4gICAgICAgIH1cbiAgICB9XG4gX2dldFN0YWNrcyhsYXN0LCBkYXRhSW5kZXgpIHtcbiAgICAgICAgY29uc3QgeyBpU2NhbGUgIH0gPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBtZXRhc2V0cyA9IGlTY2FsZS5nZXRNYXRjaGluZ1Zpc2libGVNZXRhcyh0aGlzLl90eXBlKS5maWx0ZXIoKG1ldGEpPT5tZXRhLmNvbnRyb2xsZXIub3B0aW9ucy5ncm91cGVkKTtcbiAgICAgICAgY29uc3Qgc3RhY2tlZCA9IGlTY2FsZS5vcHRpb25zLnN0YWNrZWQ7XG4gICAgICAgIGNvbnN0IHN0YWNrcyA9IFtdO1xuICAgICAgICBjb25zdCBza2lwTnVsbCA9IChtZXRhKT0+e1xuICAgICAgICAgICAgY29uc3QgcGFyc2VkID0gbWV0YS5jb250cm9sbGVyLmdldFBhcnNlZChkYXRhSW5kZXgpO1xuICAgICAgICAgICAgY29uc3QgdmFsID0gcGFyc2VkICYmIHBhcnNlZFttZXRhLnZTY2FsZS5heGlzXTtcbiAgICAgICAgICAgIGlmIChpc051bGxPclVuZGVmKHZhbCkgfHwgaXNOYU4odmFsKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBmb3IgKGNvbnN0IG1ldGEgb2YgbWV0YXNldHMpe1xuICAgICAgICAgICAgaWYgKGRhdGFJbmRleCAhPT0gdW5kZWZpbmVkICYmIHNraXBOdWxsKG1ldGEpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RhY2tlZCA9PT0gZmFsc2UgfHwgc3RhY2tzLmluZGV4T2YobWV0YS5zdGFjaykgPT09IC0xIHx8IHN0YWNrZWQgPT09IHVuZGVmaW5lZCAmJiBtZXRhLnN0YWNrID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBzdGFja3MucHVzaChtZXRhLnN0YWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXRhLmluZGV4ID09PSBsYXN0KSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzdGFja3MubGVuZ3RoKSB7XG4gICAgICAgICAgICBzdGFja3MucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdGFja3M7XG4gICAgfVxuIF9nZXRTdGFja0NvdW50KGluZGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRTdGFja3ModW5kZWZpbmVkLCBpbmRleCkubGVuZ3RoO1xuICAgIH1cbiBfZ2V0U3RhY2tJbmRleChkYXRhc2V0SW5kZXgsIG5hbWUsIGRhdGFJbmRleCkge1xuICAgICAgICBjb25zdCBzdGFja3MgPSB0aGlzLl9nZXRTdGFja3MoZGF0YXNldEluZGV4LCBkYXRhSW5kZXgpO1xuICAgICAgICBjb25zdCBpbmRleCA9IG5hbWUgIT09IHVuZGVmaW5lZCA/IHN0YWNrcy5pbmRleE9mKG5hbWUpIDogLTE7XG4gICAgICAgIHJldHVybiBpbmRleCA9PT0gLTEgPyBzdGFja3MubGVuZ3RoIC0gMSA6IGluZGV4O1xuICAgIH1cbiBfZ2V0UnVsZXIoKSB7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBpU2NhbGUgPSBtZXRhLmlTY2FsZTtcbiAgICAgICAgY29uc3QgcGl4ZWxzID0gW107XG4gICAgICAgIGxldCBpLCBpbGVuO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBtZXRhLmRhdGEubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIHBpeGVscy5wdXNoKGlTY2FsZS5nZXRQaXhlbEZvclZhbHVlKHRoaXMuZ2V0UGFyc2VkKGkpW2lTY2FsZS5heGlzXSwgaSkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJhclRoaWNrbmVzcyA9IG9wdHMuYmFyVGhpY2tuZXNzO1xuICAgICAgICBjb25zdCBtaW4gPSBiYXJUaGlja25lc3MgfHwgY29tcHV0ZU1pblNhbXBsZVNpemUobWV0YSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtaW4sXG4gICAgICAgICAgICBwaXhlbHMsXG4gICAgICAgICAgICBzdGFydDogaVNjYWxlLl9zdGFydFBpeGVsLFxuICAgICAgICAgICAgZW5kOiBpU2NhbGUuX2VuZFBpeGVsLFxuICAgICAgICAgICAgc3RhY2tDb3VudDogdGhpcy5fZ2V0U3RhY2tDb3VudCgpLFxuICAgICAgICAgICAgc2NhbGU6IGlTY2FsZSxcbiAgICAgICAgICAgIGdyb3VwZWQ6IG9wdHMuZ3JvdXBlZCxcbiAgICAgICAgICAgIHJhdGlvOiBiYXJUaGlja25lc3MgPyAxIDogb3B0cy5jYXRlZ29yeVBlcmNlbnRhZ2UgKiBvcHRzLmJhclBlcmNlbnRhZ2VcbiAgICAgICAgfTtcbiAgICB9XG4gX2NhbGN1bGF0ZUJhclZhbHVlUGl4ZWxzKGluZGV4KSB7XG4gICAgICAgIGNvbnN0IHsgX2NhY2hlZE1ldGE6IHsgdlNjYWxlICwgX3N0YWNrZWQgLCBpbmRleDogZGF0YXNldEluZGV4ICB9ICwgb3B0aW9uczogeyBiYXNlOiBiYXNlVmFsdWUgLCBtaW5CYXJMZW5ndGggIH0gIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBhY3R1YWxCYXNlID0gYmFzZVZhbHVlIHx8IDA7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGluZGV4KTtcbiAgICAgICAgY29uc3QgY3VzdG9tID0gcGFyc2VkLl9jdXN0b207XG4gICAgICAgIGNvbnN0IGZsb2F0aW5nID0gaXNGbG9hdEJhcihjdXN0b20pO1xuICAgICAgICBsZXQgdmFsdWUgPSBwYXJzZWRbdlNjYWxlLmF4aXNdO1xuICAgICAgICBsZXQgc3RhcnQgPSAwO1xuICAgICAgICBsZXQgbGVuZ3RoID0gX3N0YWNrZWQgPyB0aGlzLmFwcGx5U3RhY2sodlNjYWxlLCBwYXJzZWQsIF9zdGFja2VkKSA6IHZhbHVlO1xuICAgICAgICBsZXQgaGVhZCwgc2l6ZTtcbiAgICAgICAgaWYgKGxlbmd0aCAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHN0YXJ0ID0gbGVuZ3RoIC0gdmFsdWU7XG4gICAgICAgICAgICBsZW5ndGggPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZmxvYXRpbmcpIHtcbiAgICAgICAgICAgIHZhbHVlID0gY3VzdG9tLmJhclN0YXJ0O1xuICAgICAgICAgICAgbGVuZ3RoID0gY3VzdG9tLmJhckVuZCAtIGN1c3RvbS5iYXJTdGFydDtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gMCAmJiBzaWduKHZhbHVlKSAhPT0gc2lnbihjdXN0b20uYmFyRW5kKSkge1xuICAgICAgICAgICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YXJ0ICs9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN0YXJ0VmFsdWUgPSAhaXNOdWxsT3JVbmRlZihiYXNlVmFsdWUpICYmICFmbG9hdGluZyA/IGJhc2VWYWx1ZSA6IHN0YXJ0O1xuICAgICAgICBsZXQgYmFzZSA9IHZTY2FsZS5nZXRQaXhlbEZvclZhbHVlKHN0YXJ0VmFsdWUpO1xuICAgICAgICBpZiAodGhpcy5jaGFydC5nZXREYXRhVmlzaWJpbGl0eShpbmRleCkpIHtcbiAgICAgICAgICAgIGhlYWQgPSB2U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShzdGFydCArIGxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoZWFkID0gYmFzZTtcbiAgICAgICAgfVxuICAgICAgICBzaXplID0gaGVhZCAtIGJhc2U7XG4gICAgICAgIGlmIChNYXRoLmFicyhzaXplKSA8IG1pbkJhckxlbmd0aCkge1xuICAgICAgICAgICAgc2l6ZSA9IGJhclNpZ24oc2l6ZSwgdlNjYWxlLCBhY3R1YWxCYXNlKSAqIG1pbkJhckxlbmd0aDtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gYWN0dWFsQmFzZSkge1xuICAgICAgICAgICAgICAgIGJhc2UgLT0gc2l6ZSAvIDI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzdGFydFBpeGVsID0gdlNjYWxlLmdldFBpeGVsRm9yRGVjaW1hbCgwKTtcbiAgICAgICAgICAgIGNvbnN0IGVuZFBpeGVsID0gdlNjYWxlLmdldFBpeGVsRm9yRGVjaW1hbCgxKTtcbiAgICAgICAgICAgIGNvbnN0IG1pbiA9IE1hdGgubWluKHN0YXJ0UGl4ZWwsIGVuZFBpeGVsKTtcbiAgICAgICAgICAgIGNvbnN0IG1heCA9IE1hdGgubWF4KHN0YXJ0UGl4ZWwsIGVuZFBpeGVsKTtcbiAgICAgICAgICAgIGJhc2UgPSBNYXRoLm1heChNYXRoLm1pbihiYXNlLCBtYXgpLCBtaW4pO1xuICAgICAgICAgICAgaGVhZCA9IGJhc2UgKyBzaXplO1xuICAgICAgICAgICAgaWYgKF9zdGFja2VkICYmICFmbG9hdGluZykge1xuICAgICAgICAgICAgICAgIHBhcnNlZC5fc3RhY2tzW3ZTY2FsZS5heGlzXS5fdmlzdWFsVmFsdWVzW2RhdGFzZXRJbmRleF0gPSB2U2NhbGUuZ2V0VmFsdWVGb3JQaXhlbChoZWFkKSAtIHZTY2FsZS5nZXRWYWx1ZUZvclBpeGVsKGJhc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChiYXNlID09PSB2U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShhY3R1YWxCYXNlKSkge1xuICAgICAgICAgICAgY29uc3QgaGFsZkdyaWQgPSBzaWduKHNpemUpICogdlNjYWxlLmdldExpbmVXaWR0aEZvclZhbHVlKGFjdHVhbEJhc2UpIC8gMjtcbiAgICAgICAgICAgIGJhc2UgKz0gaGFsZkdyaWQ7XG4gICAgICAgICAgICBzaXplIC09IGhhbGZHcmlkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzaXplLFxuICAgICAgICAgICAgYmFzZSxcbiAgICAgICAgICAgIGhlYWQsXG4gICAgICAgICAgICBjZW50ZXI6IGhlYWQgKyBzaXplIC8gMlxuICAgICAgICB9O1xuICAgIH1cbiBfY2FsY3VsYXRlQmFySW5kZXhQaXhlbHMoaW5kZXgsIHJ1bGVyKSB7XG4gICAgICAgIGNvbnN0IHNjYWxlID0gcnVsZXIuc2NhbGU7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHNraXBOdWxsID0gb3B0aW9ucy5za2lwTnVsbDtcbiAgICAgICAgY29uc3QgbWF4QmFyVGhpY2tuZXNzID0gdmFsdWVPckRlZmF1bHQob3B0aW9ucy5tYXhCYXJUaGlja25lc3MsIEluZmluaXR5KTtcbiAgICAgICAgbGV0IGNlbnRlciwgc2l6ZTtcbiAgICAgICAgaWYgKHJ1bGVyLmdyb3VwZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YWNrQ291bnQgPSBza2lwTnVsbCA/IHRoaXMuX2dldFN0YWNrQ291bnQoaW5kZXgpIDogcnVsZXIuc3RhY2tDb3VudDtcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gb3B0aW9ucy5iYXJUaGlja25lc3MgPT09ICdmbGV4JyA/IGNvbXB1dGVGbGV4Q2F0ZWdvcnlUcmFpdHMoaW5kZXgsIHJ1bGVyLCBvcHRpb25zLCBzdGFja0NvdW50KSA6IGNvbXB1dGVGaXRDYXRlZ29yeVRyYWl0cyhpbmRleCwgcnVsZXIsIG9wdGlvbnMsIHN0YWNrQ291bnQpO1xuICAgICAgICAgICAgY29uc3Qgc3RhY2tJbmRleCA9IHRoaXMuX2dldFN0YWNrSW5kZXgodGhpcy5pbmRleCwgdGhpcy5fY2FjaGVkTWV0YS5zdGFjaywgc2tpcE51bGwgPyBpbmRleCA6IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICBjZW50ZXIgPSByYW5nZS5zdGFydCArIHJhbmdlLmNodW5rICogc3RhY2tJbmRleCArIHJhbmdlLmNodW5rIC8gMjtcbiAgICAgICAgICAgIHNpemUgPSBNYXRoLm1pbihtYXhCYXJUaGlja25lc3MsIHJhbmdlLmNodW5rICogcmFuZ2UucmF0aW8pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2VudGVyID0gc2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZSh0aGlzLmdldFBhcnNlZChpbmRleClbc2NhbGUuYXhpc10sIGluZGV4KTtcbiAgICAgICAgICAgIHNpemUgPSBNYXRoLm1pbihtYXhCYXJUaGlja25lc3MsIHJ1bGVyLm1pbiAqIHJ1bGVyLnJhdGlvKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYmFzZTogY2VudGVyIC0gc2l6ZSAvIDIsXG4gICAgICAgICAgICBoZWFkOiBjZW50ZXIgKyBzaXplIC8gMixcbiAgICAgICAgICAgIGNlbnRlcixcbiAgICAgICAgICAgIHNpemVcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZHJhdygpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IHZTY2FsZSA9IG1ldGEudlNjYWxlO1xuICAgICAgICBjb25zdCByZWN0cyA9IG1ldGEuZGF0YTtcbiAgICAgICAgY29uc3QgaWxlbiA9IHJlY3RzLmxlbmd0aDtcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICBmb3IoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIGlmICh0aGlzLmdldFBhcnNlZChpKVt2U2NhbGUuYXhpc10gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZWN0c1tpXS5kcmF3KHRoaXMuX2N0eCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNsYXNzIEJ1YmJsZUNvbnRyb2xsZXIgZXh0ZW5kcyBEYXRhc2V0Q29udHJvbGxlciB7XG4gICAgc3RhdGljIGlkID0gJ2J1YmJsZSc7XG4gc3RhdGljIGRlZmF1bHRzID0ge1xuICAgICAgICBkYXRhc2V0RWxlbWVudFR5cGU6IGZhbHNlLFxuICAgICAgICBkYXRhRWxlbWVudFR5cGU6ICdwb2ludCcsXG4gICAgICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgICAgICAgIG51bWJlcnM6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiBbXG4gICAgICAgICAgICAgICAgICAgICd4JyxcbiAgICAgICAgICAgICAgICAgICAgJ3knLFxuICAgICAgICAgICAgICAgICAgICAnYm9yZGVyV2lkdGgnLFxuICAgICAgICAgICAgICAgICAgICAncmFkaXVzJ1xuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gc3RhdGljIG92ZXJyaWRlcyA9IHtcbiAgICAgICAgc2NhbGVzOiB7XG4gICAgICAgICAgICB4OiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2xpbmVhcidcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB5OiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2xpbmVhcidcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgdGhpcy5lbmFibGVPcHRpb25TaGFyaW5nID0gdHJ1ZTtcbiAgICAgICAgc3VwZXIuaW5pdGlhbGl6ZSgpO1xuICAgIH1cbiBwYXJzZVByaW1pdGl2ZURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IHN1cGVyLnBhcnNlUHJpbWl0aXZlRGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgcGFyc2VkLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIHBhcnNlZFtpXS5fY3VzdG9tID0gdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGkgKyBzdGFydCkucmFkaXVzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgfVxuIHBhcnNlQXJyYXlEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCBwYXJzZWQgPSBzdXBlci5wYXJzZUFycmF5RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgcGFyc2VkLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBkYXRhW3N0YXJ0ICsgaV07XG4gICAgICAgICAgICBwYXJzZWRbaV0uX2N1c3RvbSA9IHZhbHVlT3JEZWZhdWx0KGl0ZW1bMl0sIHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpICsgc3RhcnQpLnJhZGl1cyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcnNlZDtcbiAgICB9XG4gcGFyc2VPYmplY3REYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCBwYXJzZWQgPSBzdXBlci5wYXJzZU9iamVjdERhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHBhcnNlZC5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gZGF0YVtzdGFydCArIGldO1xuICAgICAgICAgICAgcGFyc2VkW2ldLl9jdXN0b20gPSB2YWx1ZU9yRGVmYXVsdChpdGVtICYmIGl0ZW0uciAmJiAraXRlbS5yLCB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSArIHN0YXJ0KS5yYWRpdXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgfVxuIGdldE1heE92ZXJmbG93KCkge1xuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhO1xuICAgICAgICBsZXQgbWF4ID0gMDtcbiAgICAgICAgZm9yKGxldCBpID0gZGF0YS5sZW5ndGggLSAxOyBpID49IDA7IC0taSl7XG4gICAgICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIGRhdGFbaV0uc2l6ZSh0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSkpIC8gMik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1heCA+IDAgJiYgbWF4O1xuICAgIH1cbiBnZXRMYWJlbEFuZFZhbHVlKGluZGV4KSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBsYWJlbHMgPSB0aGlzLmNoYXJ0LmRhdGEubGFiZWxzIHx8IFtdO1xuICAgICAgICBjb25zdCB7IHhTY2FsZSAsIHlTY2FsZSAgfSA9IG1ldGE7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGluZGV4KTtcbiAgICAgICAgY29uc3QgeCA9IHhTY2FsZS5nZXRMYWJlbEZvclZhbHVlKHBhcnNlZC54KTtcbiAgICAgICAgY29uc3QgeSA9IHlTY2FsZS5nZXRMYWJlbEZvclZhbHVlKHBhcnNlZC55KTtcbiAgICAgICAgY29uc3QgciA9IHBhcnNlZC5fY3VzdG9tO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGFiZWw6IGxhYmVsc1tpbmRleF0gfHwgJycsXG4gICAgICAgICAgICB2YWx1ZTogJygnICsgeCArICcsICcgKyB5ICsgKHIgPyAnLCAnICsgciA6ICcnKSArICcpJ1xuICAgICAgICB9O1xuICAgIH1cbiAgICB1cGRhdGUobW9kZSkge1xuICAgICAgICBjb25zdCBwb2ludHMgPSB0aGlzLl9jYWNoZWRNZXRhLmRhdGE7XG4gICAgICAgIHRoaXMudXBkYXRlRWxlbWVudHMocG9pbnRzLCAwLCBwb2ludHMubGVuZ3RoLCBtb2RlKTtcbiAgICB9XG4gICAgdXBkYXRlRWxlbWVudHMocG9pbnRzLCBzdGFydCwgY291bnQsIG1vZGUpIHtcbiAgICAgICAgY29uc3QgcmVzZXQgPSBtb2RlID09PSAncmVzZXQnO1xuICAgICAgICBjb25zdCB7IGlTY2FsZSAsIHZTY2FsZSAgfSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IHsgc2hhcmVkT3B0aW9ucyAsIGluY2x1ZGVPcHRpb25zICB9ID0gdGhpcy5fZ2V0U2hhcmVkT3B0aW9ucyhzdGFydCwgbW9kZSk7XG4gICAgICAgIGNvbnN0IGlBeGlzID0gaVNjYWxlLmF4aXM7XG4gICAgICAgIGNvbnN0IHZBeGlzID0gdlNjYWxlLmF4aXM7XG4gICAgICAgIGZvcihsZXQgaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBjb3VudDsgaSsrKXtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50ID0gcG9pbnRzW2ldO1xuICAgICAgICAgICAgY29uc3QgcGFyc2VkID0gIXJlc2V0ICYmIHRoaXMuZ2V0UGFyc2VkKGkpO1xuICAgICAgICAgICAgY29uc3QgcHJvcGVydGllcyA9IHt9O1xuICAgICAgICAgICAgY29uc3QgaVBpeGVsID0gcHJvcGVydGllc1tpQXhpc10gPSByZXNldCA/IGlTY2FsZS5nZXRQaXhlbEZvckRlY2ltYWwoMC41KSA6IGlTY2FsZS5nZXRQaXhlbEZvclZhbHVlKHBhcnNlZFtpQXhpc10pO1xuICAgICAgICAgICAgY29uc3QgdlBpeGVsID0gcHJvcGVydGllc1t2QXhpc10gPSByZXNldCA/IHZTY2FsZS5nZXRCYXNlUGl4ZWwoKSA6IHZTY2FsZS5nZXRQaXhlbEZvclZhbHVlKHBhcnNlZFt2QXhpc10pO1xuICAgICAgICAgICAgcHJvcGVydGllcy5za2lwID0gaXNOYU4oaVBpeGVsKSB8fCBpc05hTih2UGl4ZWwpO1xuICAgICAgICAgICAgaWYgKGluY2x1ZGVPcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgcHJvcGVydGllcy5vcHRpb25zID0gc2hhcmVkT3B0aW9ucyB8fCB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSwgcG9pbnQuYWN0aXZlID8gJ2FjdGl2ZScgOiBtb2RlKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllcy5vcHRpb25zLnJhZGl1cyA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50KHBvaW50LCBpLCBwcm9wZXJ0aWVzLCBtb2RlKTtcbiAgICAgICAgfVxuICAgIH1cbiByZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGluZGV4LCBtb2RlKSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGluZGV4KTtcbiAgICAgICAgbGV0IHZhbHVlcyA9IHN1cGVyLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaW5kZXgsIG1vZGUpO1xuICAgICAgICBpZiAodmFsdWVzLiRzaGFyZWQpIHtcbiAgICAgICAgICAgIHZhbHVlcyA9IE9iamVjdC5hc3NpZ24oe30sIHZhbHVlcywge1xuICAgICAgICAgICAgICAgICRzaGFyZWQ6IGZhbHNlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByYWRpdXMgPSB2YWx1ZXMucmFkaXVzO1xuICAgICAgICBpZiAobW9kZSAhPT0gJ2FjdGl2ZScpIHtcbiAgICAgICAgICAgIHZhbHVlcy5yYWRpdXMgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlcy5yYWRpdXMgKz0gdmFsdWVPckRlZmF1bHQocGFyc2VkICYmIHBhcnNlZC5fY3VzdG9tLCByYWRpdXMpO1xuICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0UmF0aW9BbmRPZmZzZXQocm90YXRpb24sIGNpcmN1bWZlcmVuY2UsIGN1dG91dCkge1xuICAgIGxldCByYXRpb1ggPSAxO1xuICAgIGxldCByYXRpb1kgPSAxO1xuICAgIGxldCBvZmZzZXRYID0gMDtcbiAgICBsZXQgb2Zmc2V0WSA9IDA7XG4gICAgaWYgKGNpcmN1bWZlcmVuY2UgPCBUQVUpIHtcbiAgICAgICAgY29uc3Qgc3RhcnRBbmdsZSA9IHJvdGF0aW9uO1xuICAgICAgICBjb25zdCBlbmRBbmdsZSA9IHN0YXJ0QW5nbGUgKyBjaXJjdW1mZXJlbmNlO1xuICAgICAgICBjb25zdCBzdGFydFggPSBNYXRoLmNvcyhzdGFydEFuZ2xlKTtcbiAgICAgICAgY29uc3Qgc3RhcnRZID0gTWF0aC5zaW4oc3RhcnRBbmdsZSk7XG4gICAgICAgIGNvbnN0IGVuZFggPSBNYXRoLmNvcyhlbmRBbmdsZSk7XG4gICAgICAgIGNvbnN0IGVuZFkgPSBNYXRoLnNpbihlbmRBbmdsZSk7XG4gICAgICAgIGNvbnN0IGNhbGNNYXggPSAoYW5nbGUsIGEsIGIpPT5fYW5nbGVCZXR3ZWVuKGFuZ2xlLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSwgdHJ1ZSkgPyAxIDogTWF0aC5tYXgoYSwgYSAqIGN1dG91dCwgYiwgYiAqIGN1dG91dCk7XG4gICAgICAgIGNvbnN0IGNhbGNNaW4gPSAoYW5nbGUsIGEsIGIpPT5fYW5nbGVCZXR3ZWVuKGFuZ2xlLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSwgdHJ1ZSkgPyAtMSA6IE1hdGgubWluKGEsIGEgKiBjdXRvdXQsIGIsIGIgKiBjdXRvdXQpO1xuICAgICAgICBjb25zdCBtYXhYID0gY2FsY01heCgwLCBzdGFydFgsIGVuZFgpO1xuICAgICAgICBjb25zdCBtYXhZID0gY2FsY01heChIQUxGX1BJLCBzdGFydFksIGVuZFkpO1xuICAgICAgICBjb25zdCBtaW5YID0gY2FsY01pbihQSSwgc3RhcnRYLCBlbmRYKTtcbiAgICAgICAgY29uc3QgbWluWSA9IGNhbGNNaW4oUEkgKyBIQUxGX1BJLCBzdGFydFksIGVuZFkpO1xuICAgICAgICByYXRpb1ggPSAobWF4WCAtIG1pblgpIC8gMjtcbiAgICAgICAgcmF0aW9ZID0gKG1heFkgLSBtaW5ZKSAvIDI7XG4gICAgICAgIG9mZnNldFggPSAtKG1heFggKyBtaW5YKSAvIDI7XG4gICAgICAgIG9mZnNldFkgPSAtKG1heFkgKyBtaW5ZKSAvIDI7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHJhdGlvWCxcbiAgICAgICAgcmF0aW9ZLFxuICAgICAgICBvZmZzZXRYLFxuICAgICAgICBvZmZzZXRZXG4gICAgfTtcbn1cbmNsYXNzIERvdWdobnV0Q29udHJvbGxlciBleHRlbmRzIERhdGFzZXRDb250cm9sbGVyIHtcbiAgICBzdGF0aWMgaWQgPSAnZG91Z2hudXQnO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgZGF0YXNldEVsZW1lbnRUeXBlOiBmYWxzZSxcbiAgICAgICAgZGF0YUVsZW1lbnRUeXBlOiAnYXJjJyxcbiAgICAgICAgYW5pbWF0aW9uOiB7XG4gICAgICAgICAgICBhbmltYXRlUm90YXRlOiB0cnVlLFxuICAgICAgICAgICAgYW5pbWF0ZVNjYWxlOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBhbmltYXRpb25zOiB7XG4gICAgICAgICAgICBudW1iZXJzOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgICAgICAgICAgcHJvcGVydGllczogW1xuICAgICAgICAgICAgICAgICAgICAnY2lyY3VtZmVyZW5jZScsXG4gICAgICAgICAgICAgICAgICAgICdlbmRBbmdsZScsXG4gICAgICAgICAgICAgICAgICAgICdpbm5lclJhZGl1cycsXG4gICAgICAgICAgICAgICAgICAgICdvdXRlclJhZGl1cycsXG4gICAgICAgICAgICAgICAgICAgICdzdGFydEFuZ2xlJyxcbiAgICAgICAgICAgICAgICAgICAgJ3gnLFxuICAgICAgICAgICAgICAgICAgICAneScsXG4gICAgICAgICAgICAgICAgICAgICdvZmZzZXQnLFxuICAgICAgICAgICAgICAgICAgICAnYm9yZGVyV2lkdGgnLFxuICAgICAgICAgICAgICAgICAgICAnc3BhY2luZydcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGN1dG91dDogJzUwJScsXG4gICAgICAgIHJvdGF0aW9uOiAwLFxuICAgICAgICBjaXJjdW1mZXJlbmNlOiAzNjAsXG4gICAgICAgIHJhZGl1czogJzEwMCUnLFxuICAgICAgICBzcGFjaW5nOiAwLFxuICAgICAgICBpbmRleEF4aXM6ICdyJ1xuICAgIH07XG4gICAgc3RhdGljIGRlc2NyaXB0b3JzID0ge1xuICAgICAgICBfc2NyaXB0YWJsZTogKG5hbWUpPT5uYW1lICE9PSAnc3BhY2luZycsXG4gICAgICAgIF9pbmRleGFibGU6IChuYW1lKT0+bmFtZSAhPT0gJ3NwYWNpbmcnICYmICFuYW1lLnN0YXJ0c1dpdGgoJ2JvcmRlckRhc2gnKSAmJiAhbmFtZS5zdGFydHNXaXRoKCdob3ZlckJvcmRlckRhc2gnKVxuICAgIH07XG4gc3RhdGljIG92ZXJyaWRlcyA9IHtcbiAgICAgICAgYXNwZWN0UmF0aW86IDEsXG4gICAgICAgIHBsdWdpbnM6IHtcbiAgICAgICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZUxhYmVscyAoY2hhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBjaGFydC5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEubGFiZWxzLmxlbmd0aCAmJiBkYXRhLmRhdGFzZXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgbGFiZWxzOiB7IHBvaW50U3R5bGUgLCBjb2xvciAgfSAgfSA9IGNoYXJ0LmxlZ2VuZC5vcHRpb25zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLmxhYmVscy5tYXAoKGxhYmVsLCBpKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlID0gbWV0YS5jb250cm9sbGVyLmdldFN0eWxlKGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogbGFiZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsU3R5bGU6IHN0eWxlLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZVN0eWxlOiBzdHlsZS5ib3JkZXJDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRDb2xvcjogY29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lV2lkdGg6IHN0eWxlLmJvcmRlcldpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRTdHlsZTogcG9pbnRTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZGRlbjogIWNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25DbGljayAoZSwgbGVnZW5kSXRlbSwgbGVnZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIGxlZ2VuZC5jaGFydC50b2dnbGVEYXRhVmlzaWJpbGl0eShsZWdlbmRJdGVtLmluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgbGVnZW5kLmNoYXJ0LnVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3RydWN0b3IoY2hhcnQsIGRhdGFzZXRJbmRleCl7XG4gICAgICAgIHN1cGVyKGNoYXJ0LCBkYXRhc2V0SW5kZXgpO1xuICAgICAgICB0aGlzLmVuYWJsZU9wdGlvblNoYXJpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLmlubmVyUmFkaXVzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm91dGVyUmFkaXVzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm9mZnNldFggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMub2Zmc2V0WSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgbGlua1NjYWxlcygpIHt9XG4gcGFyc2Uoc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmdldERhdGFzZXQoKS5kYXRhO1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgaWYgKHRoaXMuX3BhcnNpbmcgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBtZXRhLl9wYXJzZWQgPSBkYXRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IGdldHRlciA9IChpKT0+K2RhdGFbaV07XG4gICAgICAgICAgICBpZiAoaXNPYmplY3QoZGF0YVtzdGFydF0pKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBrZXkgPSd2YWx1ZScgIH0gPSB0aGlzLl9wYXJzaW5nO1xuICAgICAgICAgICAgICAgIGdldHRlciA9IChpKT0+K3Jlc29sdmVPYmplY3RLZXkoZGF0YVtpXSwga2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBpLCBpbGVuO1xuICAgICAgICAgICAgZm9yKGkgPSBzdGFydCwgaWxlbiA9IHN0YXJ0ICsgY291bnQ7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgICAgIG1ldGEuX3BhcnNlZFtpXSA9IGdldHRlcihpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiBfZ2V0Um90YXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0b1JhZGlhbnModGhpcy5vcHRpb25zLnJvdGF0aW9uIC0gOTApO1xuICAgIH1cbiBfZ2V0Q2lyY3VtZmVyZW5jZSgpIHtcbiAgICAgICAgcmV0dXJuIHRvUmFkaWFucyh0aGlzLm9wdGlvbnMuY2lyY3VtZmVyZW5jZSk7XG4gICAgfVxuIF9nZXRSb3RhdGlvbkV4dGVudHMoKSB7XG4gICAgICAgIGxldCBtaW4gPSBUQVU7XG4gICAgICAgIGxldCBtYXggPSAtVEFVO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgKytpKXtcbiAgICAgICAgICAgIGlmICh0aGlzLmNoYXJ0LmlzRGF0YXNldFZpc2libGUoaSkgJiYgdGhpcy5jaGFydC5nZXREYXRhc2V0TWV0YShpKS50eXBlID09PSB0aGlzLl90eXBlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29udHJvbGxlciA9IHRoaXMuY2hhcnQuZ2V0RGF0YXNldE1ldGEoaSkuY29udHJvbGxlcjtcbiAgICAgICAgICAgICAgICBjb25zdCByb3RhdGlvbiA9IGNvbnRyb2xsZXIuX2dldFJvdGF0aW9uKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgY2lyY3VtZmVyZW5jZSA9IGNvbnRyb2xsZXIuX2dldENpcmN1bWZlcmVuY2UoKTtcbiAgICAgICAgICAgICAgICBtaW4gPSBNYXRoLm1pbihtaW4sIHJvdGF0aW9uKTtcbiAgICAgICAgICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIHJvdGF0aW9uICsgY2lyY3VtZmVyZW5jZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJvdGF0aW9uOiBtaW4sXG4gICAgICAgICAgICBjaXJjdW1mZXJlbmNlOiBtYXggLSBtaW5cbiAgICAgICAgfTtcbiAgICB9XG4gdXBkYXRlKG1vZGUpIHtcbiAgICAgICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgICAgICBjb25zdCB7IGNoYXJ0QXJlYSAgfSA9IGNoYXJ0O1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgYXJjcyA9IG1ldGEuZGF0YTtcbiAgICAgICAgY29uc3Qgc3BhY2luZyA9IHRoaXMuZ2V0TWF4Qm9yZGVyV2lkdGgoKSArIHRoaXMuZ2V0TWF4T2Zmc2V0KGFyY3MpICsgdGhpcy5vcHRpb25zLnNwYWNpbmc7XG4gICAgICAgIGNvbnN0IG1heFNpemUgPSBNYXRoLm1heCgoTWF0aC5taW4oY2hhcnRBcmVhLndpZHRoLCBjaGFydEFyZWEuaGVpZ2h0KSAtIHNwYWNpbmcpIC8gMiwgMCk7XG4gICAgICAgIGNvbnN0IGN1dG91dCA9IE1hdGgubWluKHRvUGVyY2VudGFnZSh0aGlzLm9wdGlvbnMuY3V0b3V0LCBtYXhTaXplKSwgMSk7XG4gICAgICAgIGNvbnN0IGNoYXJ0V2VpZ2h0ID0gdGhpcy5fZ2V0UmluZ1dlaWdodCh0aGlzLmluZGV4KTtcbiAgICAgICAgY29uc3QgeyBjaXJjdW1mZXJlbmNlICwgcm90YXRpb24gIH0gPSB0aGlzLl9nZXRSb3RhdGlvbkV4dGVudHMoKTtcbiAgICAgICAgY29uc3QgeyByYXRpb1ggLCByYXRpb1kgLCBvZmZzZXRYICwgb2Zmc2V0WSAgfSA9IGdldFJhdGlvQW5kT2Zmc2V0KHJvdGF0aW9uLCBjaXJjdW1mZXJlbmNlLCBjdXRvdXQpO1xuICAgICAgICBjb25zdCBtYXhXaWR0aCA9IChjaGFydEFyZWEud2lkdGggLSBzcGFjaW5nKSAvIHJhdGlvWDtcbiAgICAgICAgY29uc3QgbWF4SGVpZ2h0ID0gKGNoYXJ0QXJlYS5oZWlnaHQgLSBzcGFjaW5nKSAvIHJhdGlvWTtcbiAgICAgICAgY29uc3QgbWF4UmFkaXVzID0gTWF0aC5tYXgoTWF0aC5taW4obWF4V2lkdGgsIG1heEhlaWdodCkgLyAyLCAwKTtcbiAgICAgICAgY29uc3Qgb3V0ZXJSYWRpdXMgPSB0b0RpbWVuc2lvbih0aGlzLm9wdGlvbnMucmFkaXVzLCBtYXhSYWRpdXMpO1xuICAgICAgICBjb25zdCBpbm5lclJhZGl1cyA9IE1hdGgubWF4KG91dGVyUmFkaXVzICogY3V0b3V0LCAwKTtcbiAgICAgICAgY29uc3QgcmFkaXVzTGVuZ3RoID0gKG91dGVyUmFkaXVzIC0gaW5uZXJSYWRpdXMpIC8gdGhpcy5fZ2V0VmlzaWJsZURhdGFzZXRXZWlnaHRUb3RhbCgpO1xuICAgICAgICB0aGlzLm9mZnNldFggPSBvZmZzZXRYICogb3V0ZXJSYWRpdXM7XG4gICAgICAgIHRoaXMub2Zmc2V0WSA9IG9mZnNldFkgKiBvdXRlclJhZGl1cztcbiAgICAgICAgbWV0YS50b3RhbCA9IHRoaXMuY2FsY3VsYXRlVG90YWwoKTtcbiAgICAgICAgdGhpcy5vdXRlclJhZGl1cyA9IG91dGVyUmFkaXVzIC0gcmFkaXVzTGVuZ3RoICogdGhpcy5fZ2V0UmluZ1dlaWdodE9mZnNldCh0aGlzLmluZGV4KTtcbiAgICAgICAgdGhpcy5pbm5lclJhZGl1cyA9IE1hdGgubWF4KHRoaXMub3V0ZXJSYWRpdXMgLSByYWRpdXNMZW5ndGggKiBjaGFydFdlaWdodCwgMCk7XG4gICAgICAgIHRoaXMudXBkYXRlRWxlbWVudHMoYXJjcywgMCwgYXJjcy5sZW5ndGgsIG1vZGUpO1xuICAgIH1cbiBfY2lyY3VtZmVyZW5jZShpLCByZXNldCkge1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgY2lyY3VtZmVyZW5jZSA9IHRoaXMuX2dldENpcmN1bWZlcmVuY2UoKTtcbiAgICAgICAgaWYgKHJlc2V0ICYmIG9wdHMuYW5pbWF0aW9uLmFuaW1hdGVSb3RhdGUgfHwgIXRoaXMuY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaSkgfHwgbWV0YS5fcGFyc2VkW2ldID09PSBudWxsIHx8IG1ldGEuZGF0YVtpXS5oaWRkZW4pIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGN1bGF0ZUNpcmN1bWZlcmVuY2UobWV0YS5fcGFyc2VkW2ldICogY2lyY3VtZmVyZW5jZSAvIFRBVSk7XG4gICAgfVxuICAgIHVwZGF0ZUVsZW1lbnRzKGFyY3MsIHN0YXJ0LCBjb3VudCwgbW9kZSkge1xuICAgICAgICBjb25zdCByZXNldCA9IG1vZGUgPT09ICdyZXNldCc7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3QgY2hhcnRBcmVhID0gY2hhcnQuY2hhcnRBcmVhO1xuICAgICAgICBjb25zdCBvcHRzID0gY2hhcnQub3B0aW9ucztcbiAgICAgICAgY29uc3QgYW5pbWF0aW9uT3B0cyA9IG9wdHMuYW5pbWF0aW9uO1xuICAgICAgICBjb25zdCBjZW50ZXJYID0gKGNoYXJ0QXJlYS5sZWZ0ICsgY2hhcnRBcmVhLnJpZ2h0KSAvIDI7XG4gICAgICAgIGNvbnN0IGNlbnRlclkgPSAoY2hhcnRBcmVhLnRvcCArIGNoYXJ0QXJlYS5ib3R0b20pIC8gMjtcbiAgICAgICAgY29uc3QgYW5pbWF0ZVNjYWxlID0gcmVzZXQgJiYgYW5pbWF0aW9uT3B0cy5hbmltYXRlU2NhbGU7XG4gICAgICAgIGNvbnN0IGlubmVyUmFkaXVzID0gYW5pbWF0ZVNjYWxlID8gMCA6IHRoaXMuaW5uZXJSYWRpdXM7XG4gICAgICAgIGNvbnN0IG91dGVyUmFkaXVzID0gYW5pbWF0ZVNjYWxlID8gMCA6IHRoaXMub3V0ZXJSYWRpdXM7XG4gICAgICAgIGNvbnN0IHsgc2hhcmVkT3B0aW9ucyAsIGluY2x1ZGVPcHRpb25zICB9ID0gdGhpcy5fZ2V0U2hhcmVkT3B0aW9ucyhzdGFydCwgbW9kZSk7XG4gICAgICAgIGxldCBzdGFydEFuZ2xlID0gdGhpcy5fZ2V0Um90YXRpb24oKTtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGZvcihpID0gMDsgaSA8IHN0YXJ0OyArK2kpe1xuICAgICAgICAgICAgc3RhcnRBbmdsZSArPSB0aGlzLl9jaXJjdW1mZXJlbmNlKGksIHJlc2V0KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IoaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBjb3VudDsgKytpKXtcbiAgICAgICAgICAgIGNvbnN0IGNpcmN1bWZlcmVuY2UgPSB0aGlzLl9jaXJjdW1mZXJlbmNlKGksIHJlc2V0KTtcbiAgICAgICAgICAgIGNvbnN0IGFyYyA9IGFyY3NbaV07XG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgICAgICAgICAgICAgIHg6IGNlbnRlclggKyB0aGlzLm9mZnNldFgsXG4gICAgICAgICAgICAgICAgeTogY2VudGVyWSArIHRoaXMub2Zmc2V0WSxcbiAgICAgICAgICAgICAgICBzdGFydEFuZ2xlLFxuICAgICAgICAgICAgICAgIGVuZEFuZ2xlOiBzdGFydEFuZ2xlICsgY2lyY3VtZmVyZW5jZSxcbiAgICAgICAgICAgICAgICBjaXJjdW1mZXJlbmNlLFxuICAgICAgICAgICAgICAgIG91dGVyUmFkaXVzLFxuICAgICAgICAgICAgICAgIGlubmVyUmFkaXVzXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGluY2x1ZGVPcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgcHJvcGVydGllcy5vcHRpb25zID0gc2hhcmVkT3B0aW9ucyB8fCB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSwgYXJjLmFjdGl2ZSA/ICdhY3RpdmUnIDogbW9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGFydEFuZ2xlICs9IGNpcmN1bWZlcmVuY2U7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQoYXJjLCBpLCBwcm9wZXJ0aWVzLCBtb2RlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYWxjdWxhdGVUb3RhbCgpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IG1ldGFEYXRhID0gbWV0YS5kYXRhO1xuICAgICAgICBsZXQgdG90YWwgPSAwO1xuICAgICAgICBsZXQgaTtcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgbWV0YURhdGEubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBtZXRhLl9wYXJzZWRbaV07XG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IG51bGwgJiYgIWlzTmFOKHZhbHVlKSAmJiB0aGlzLmNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGkpICYmICFtZXRhRGF0YVtpXS5oaWRkZW4pIHtcbiAgICAgICAgICAgICAgICB0b3RhbCArPSBNYXRoLmFicyh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvdGFsO1xuICAgIH1cbiAgICBjYWxjdWxhdGVDaXJjdW1mZXJlbmNlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHRvdGFsID0gdGhpcy5fY2FjaGVkTWV0YS50b3RhbDtcbiAgICAgICAgaWYgKHRvdGFsID4gMCAmJiAhaXNOYU4odmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gVEFVICogKE1hdGguYWJzKHZhbHVlKSAvIHRvdGFsKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgZ2V0TGFiZWxBbmRWYWx1ZShpbmRleCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgICAgICBjb25zdCBsYWJlbHMgPSBjaGFydC5kYXRhLmxhYmVscyB8fCBbXTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBmb3JtYXROdW1iZXIobWV0YS5fcGFyc2VkW2luZGV4XSwgY2hhcnQub3B0aW9ucy5sb2NhbGUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGFiZWw6IGxhYmVsc1tpbmRleF0gfHwgJycsXG4gICAgICAgICAgICB2YWx1ZVxuICAgICAgICB9O1xuICAgIH1cbiAgICBnZXRNYXhCb3JkZXJXaWR0aChhcmNzKSB7XG4gICAgICAgIGxldCBtYXggPSAwO1xuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGxldCBpLCBpbGVuLCBtZXRhLCBjb250cm9sbGVyLCBvcHRpb25zO1xuICAgICAgICBpZiAoIWFyY3MpIHtcbiAgICAgICAgICAgIGZvcihpID0gMCwgaWxlbiA9IGNoYXJ0LmRhdGEuZGF0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgICAgICBpZiAoY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpKSkge1xuICAgICAgICAgICAgICAgICAgICBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoaSk7XG4gICAgICAgICAgICAgICAgICAgIGFyY3MgPSBtZXRhLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIgPSBtZXRhLmNvbnRyb2xsZXI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWFyY3MpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IGFyY3MubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBjb250cm9sbGVyLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSk7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5ib3JkZXJBbGlnbiAhPT0gJ2lubmVyJykge1xuICAgICAgICAgICAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgb3B0aW9ucy5ib3JkZXJXaWR0aCB8fCAwLCBvcHRpb25zLmhvdmVyQm9yZGVyV2lkdGggfHwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1heDtcbiAgICB9XG4gICAgZ2V0TWF4T2Zmc2V0KGFyY3MpIHtcbiAgICAgICAgbGV0IG1heCA9IDA7XG4gICAgICAgIGZvcihsZXQgaSA9IDAsIGlsZW4gPSBhcmNzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGkpO1xuICAgICAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCBvcHRpb25zLm9mZnNldCB8fCAwLCBvcHRpb25zLmhvdmVyT2Zmc2V0IHx8IDApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXg7XG4gICAgfVxuIF9nZXRSaW5nV2VpZ2h0T2Zmc2V0KGRhdGFzZXRJbmRleCkge1xuICAgICAgICBsZXQgcmluZ1dlaWdodE9mZnNldCA9IDA7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBkYXRhc2V0SW5kZXg7ICsraSl7XG4gICAgICAgICAgICBpZiAodGhpcy5jaGFydC5pc0RhdGFzZXRWaXNpYmxlKGkpKSB7XG4gICAgICAgICAgICAgICAgcmluZ1dlaWdodE9mZnNldCArPSB0aGlzLl9nZXRSaW5nV2VpZ2h0KGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByaW5nV2VpZ2h0T2Zmc2V0O1xuICAgIH1cbiBfZ2V0UmluZ1dlaWdodChkYXRhc2V0SW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KHZhbHVlT3JEZWZhdWx0KHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdLndlaWdodCwgMSksIDApO1xuICAgIH1cbiBfZ2V0VmlzaWJsZURhdGFzZXRXZWlnaHRUb3RhbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldFJpbmdXZWlnaHRPZmZzZXQodGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzLmxlbmd0aCkgfHwgMTtcbiAgICB9XG59XG5cbmNsYXNzIExpbmVDb250cm9sbGVyIGV4dGVuZHMgRGF0YXNldENvbnRyb2xsZXIge1xuICAgIHN0YXRpYyBpZCA9ICdsaW5lJztcbiBzdGF0aWMgZGVmYXVsdHMgPSB7XG4gICAgICAgIGRhdGFzZXRFbGVtZW50VHlwZTogJ2xpbmUnLFxuICAgICAgICBkYXRhRWxlbWVudFR5cGU6ICdwb2ludCcsXG4gICAgICAgIHNob3dMaW5lOiB0cnVlLFxuICAgICAgICBzcGFuR2FwczogZmFsc2VcbiAgICB9O1xuIHN0YXRpYyBvdmVycmlkZXMgPSB7XG4gICAgICAgIHNjYWxlczoge1xuICAgICAgICAgICAgX2luZGV4Xzoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdjYXRlZ29yeSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfdmFsdWVfOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2xpbmVhcidcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgdGhpcy5lbmFibGVPcHRpb25TaGFyaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zdXBwb3J0c0RlY2ltYXRpb24gPSB0cnVlO1xuICAgICAgICBzdXBlci5pbml0aWFsaXplKCk7XG4gICAgfVxuICAgIHVwZGF0ZShtb2RlKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCB7IGRhdGFzZXQ6IGxpbmUgLCBkYXRhOiBwb2ludHMgPSBbXSAsIF9kYXRhc2V0ICB9ID0gbWV0YTtcbiAgICAgICAgY29uc3QgYW5pbWF0aW9uc0Rpc2FibGVkID0gdGhpcy5jaGFydC5fYW5pbWF0aW9uc0Rpc2FibGVkO1xuICAgICAgICBsZXQgeyBzdGFydCAsIGNvdW50ICB9ID0gX2dldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHMobWV0YSwgcG9pbnRzLCBhbmltYXRpb25zRGlzYWJsZWQpO1xuICAgICAgICB0aGlzLl9kcmF3U3RhcnQgPSBzdGFydDtcbiAgICAgICAgdGhpcy5fZHJhd0NvdW50ID0gY291bnQ7XG4gICAgICAgIGlmIChfc2NhbGVSYW5nZXNDaGFuZ2VkKG1ldGEpKSB7XG4gICAgICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgICAgICBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgbGluZS5fY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgICAgICBsaW5lLl9kYXRhc2V0SW5kZXggPSB0aGlzLmluZGV4O1xuICAgICAgICBsaW5lLl9kZWNpbWF0ZWQgPSAhIV9kYXRhc2V0Ll9kZWNpbWF0ZWQ7XG4gICAgICAgIGxpbmUucG9pbnRzID0gcG9pbnRzO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5yZXNvbHZlRGF0YXNldEVsZW1lbnRPcHRpb25zKG1vZGUpO1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5zaG93TGluZSkge1xuICAgICAgICAgICAgb3B0aW9ucy5ib3JkZXJXaWR0aCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgb3B0aW9ucy5zZWdtZW50ID0gdGhpcy5vcHRpb25zLnNlZ21lbnQ7XG4gICAgICAgIHRoaXMudXBkYXRlRWxlbWVudChsaW5lLCB1bmRlZmluZWQsIHtcbiAgICAgICAgICAgIGFuaW1hdGVkOiAhYW5pbWF0aW9uc0Rpc2FibGVkLFxuICAgICAgICAgICAgb3B0aW9uc1xuICAgICAgICB9LCBtb2RlKTtcbiAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50cyhwb2ludHMsIHN0YXJ0LCBjb3VudCwgbW9kZSk7XG4gICAgfVxuICAgIHVwZGF0ZUVsZW1lbnRzKHBvaW50cywgc3RhcnQsIGNvdW50LCBtb2RlKSB7XG4gICAgICAgIGNvbnN0IHJlc2V0ID0gbW9kZSA9PT0gJ3Jlc2V0JztcbiAgICAgICAgY29uc3QgeyBpU2NhbGUgLCB2U2NhbGUgLCBfc3RhY2tlZCAsIF9kYXRhc2V0ICB9ID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgeyBzaGFyZWRPcHRpb25zICwgaW5jbHVkZU9wdGlvbnMgIH0gPSB0aGlzLl9nZXRTaGFyZWRPcHRpb25zKHN0YXJ0LCBtb2RlKTtcbiAgICAgICAgY29uc3QgaUF4aXMgPSBpU2NhbGUuYXhpcztcbiAgICAgICAgY29uc3QgdkF4aXMgPSB2U2NhbGUuYXhpcztcbiAgICAgICAgY29uc3QgeyBzcGFuR2FwcyAsIHNlZ21lbnQgIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IG1heEdhcExlbmd0aCA9IGlzTnVtYmVyKHNwYW5HYXBzKSA/IHNwYW5HYXBzIDogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICBjb25zdCBkaXJlY3RVcGRhdGUgPSB0aGlzLmNoYXJ0Ll9hbmltYXRpb25zRGlzYWJsZWQgfHwgcmVzZXQgfHwgbW9kZSA9PT0gJ25vbmUnO1xuICAgICAgICBjb25zdCBlbmQgPSBzdGFydCArIGNvdW50O1xuICAgICAgICBjb25zdCBwb2ludHNDb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gICAgICAgIGxldCBwcmV2UGFyc2VkID0gc3RhcnQgPiAwICYmIHRoaXMuZ2V0UGFyc2VkKHN0YXJ0IC0gMSk7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBwb2ludHNDb3VudDsgKytpKXtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50ID0gcG9pbnRzW2ldO1xuICAgICAgICAgICAgY29uc3QgcHJvcGVydGllcyA9IGRpcmVjdFVwZGF0ZSA/IHBvaW50IDoge307XG4gICAgICAgICAgICBpZiAoaSA8IHN0YXJ0IHx8IGkgPj0gZW5kKSB7XG4gICAgICAgICAgICAgICAgcHJvcGVydGllcy5za2lwID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGkpO1xuICAgICAgICAgICAgY29uc3QgbnVsbERhdGEgPSBpc051bGxPclVuZGVmKHBhcnNlZFt2QXhpc10pO1xuICAgICAgICAgICAgY29uc3QgaVBpeGVsID0gcHJvcGVydGllc1tpQXhpc10gPSBpU2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShwYXJzZWRbaUF4aXNdLCBpKTtcbiAgICAgICAgICAgIGNvbnN0IHZQaXhlbCA9IHByb3BlcnRpZXNbdkF4aXNdID0gcmVzZXQgfHwgbnVsbERhdGEgPyB2U2NhbGUuZ2V0QmFzZVBpeGVsKCkgOiB2U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShfc3RhY2tlZCA/IHRoaXMuYXBwbHlTdGFjayh2U2NhbGUsIHBhcnNlZCwgX3N0YWNrZWQpIDogcGFyc2VkW3ZBeGlzXSwgaSk7XG4gICAgICAgICAgICBwcm9wZXJ0aWVzLnNraXAgPSBpc05hTihpUGl4ZWwpIHx8IGlzTmFOKHZQaXhlbCkgfHwgbnVsbERhdGE7XG4gICAgICAgICAgICBwcm9wZXJ0aWVzLnN0b3AgPSBpID4gMCAmJiBNYXRoLmFicyhwYXJzZWRbaUF4aXNdIC0gcHJldlBhcnNlZFtpQXhpc10pID4gbWF4R2FwTGVuZ3RoO1xuICAgICAgICAgICAgaWYgKHNlZ21lbnQpIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLnBhcnNlZCA9IHBhcnNlZDtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLnJhdyA9IF9kYXRhc2V0LmRhdGFbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaW5jbHVkZU9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLm9wdGlvbnMgPSBzaGFyZWRPcHRpb25zIHx8IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpLCBwb2ludC5hY3RpdmUgPyAnYWN0aXZlJyA6IG1vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFkaXJlY3RVcGRhdGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQocG9pbnQsIGksIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJldlBhcnNlZCA9IHBhcnNlZDtcbiAgICAgICAgfVxuICAgIH1cbiBnZXRNYXhPdmVyZmxvdygpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGRhdGFzZXQgPSBtZXRhLmRhdGFzZXQ7XG4gICAgICAgIGNvbnN0IGJvcmRlciA9IGRhdGFzZXQub3B0aW9ucyAmJiBkYXRhc2V0Lm9wdGlvbnMuYm9yZGVyV2lkdGggfHwgMDtcbiAgICAgICAgY29uc3QgZGF0YSA9IG1ldGEuZGF0YSB8fCBbXTtcbiAgICAgICAgaWYgKCFkYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGJvcmRlcjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmaXJzdFBvaW50ID0gZGF0YVswXS5zaXplKHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucygwKSk7XG4gICAgICAgIGNvbnN0IGxhc3RQb2ludCA9IGRhdGFbZGF0YS5sZW5ndGggLSAxXS5zaXplKHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhkYXRhLmxlbmd0aCAtIDEpKTtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KGJvcmRlciwgZmlyc3RQb2ludCwgbGFzdFBvaW50KSAvIDI7XG4gICAgfVxuICAgIGRyYXcoKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBtZXRhLmRhdGFzZXQudXBkYXRlQ29udHJvbFBvaW50cyh0aGlzLmNoYXJ0LmNoYXJ0QXJlYSwgbWV0YS5pU2NhbGUuYXhpcyk7XG4gICAgICAgIHN1cGVyLmRyYXcoKTtcbiAgICB9XG59XG5cbmNsYXNzIFBvbGFyQXJlYUNvbnRyb2xsZXIgZXh0ZW5kcyBEYXRhc2V0Q29udHJvbGxlciB7XG4gICAgc3RhdGljIGlkID0gJ3BvbGFyQXJlYSc7XG4gc3RhdGljIGRlZmF1bHRzID0ge1xuICAgICAgICBkYXRhRWxlbWVudFR5cGU6ICdhcmMnLFxuICAgICAgICBhbmltYXRpb246IHtcbiAgICAgICAgICAgIGFuaW1hdGVSb3RhdGU6IHRydWUsXG4gICAgICAgICAgICBhbmltYXRlU2NhbGU6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgYW5pbWF0aW9uczoge1xuICAgICAgICAgICAgbnVtYmVyczoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgJ3gnLFxuICAgICAgICAgICAgICAgICAgICAneScsXG4gICAgICAgICAgICAgICAgICAgICdzdGFydEFuZ2xlJyxcbiAgICAgICAgICAgICAgICAgICAgJ2VuZEFuZ2xlJyxcbiAgICAgICAgICAgICAgICAgICAgJ2lubmVyUmFkaXVzJyxcbiAgICAgICAgICAgICAgICAgICAgJ291dGVyUmFkaXVzJ1xuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgaW5kZXhBeGlzOiAncicsXG4gICAgICAgIHN0YXJ0QW5nbGU6IDBcbiAgICB9O1xuIHN0YXRpYyBvdmVycmlkZXMgPSB7XG4gICAgICAgIGFzcGVjdFJhdGlvOiAxLFxuICAgICAgICBwbHVnaW5zOiB7XG4gICAgICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVMYWJlbHMgKGNoYXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gY2hhcnQuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmxhYmVscy5sZW5ndGggJiYgZGF0YS5kYXRhc2V0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGxhYmVsczogeyBwb2ludFN0eWxlICwgY29sb3IgIH0gIH0gPSBjaGFydC5sZWdlbmQub3B0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5sYWJlbHMubWFwKChsYWJlbCwgaSk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHlsZSA9IG1ldGEuY29udHJvbGxlci5nZXRTdHlsZShpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGxhYmVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbFN0eWxlOiBzdHlsZS5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VTdHlsZTogc3R5bGUuYm9yZGVyQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250Q29sb3I6IGNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZVdpZHRoOiBzdHlsZS5ib3JkZXJXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50U3R5bGU6IHBvaW50U3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWRkZW46ICFjaGFydC5nZXREYXRhVmlzaWJpbGl0eShpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uQ2xpY2sgKGUsIGxlZ2VuZEl0ZW0sIGxlZ2VuZCkge1xuICAgICAgICAgICAgICAgICAgICBsZWdlbmQuY2hhcnQudG9nZ2xlRGF0YVZpc2liaWxpdHkobGVnZW5kSXRlbS5pbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIGxlZ2VuZC5jaGFydC51cGRhdGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNjYWxlczoge1xuICAgICAgICAgICAgcjoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdyYWRpYWxMaW5lYXInLFxuICAgICAgICAgICAgICAgIGFuZ2xlTGluZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJlZ2luQXRaZXJvOiB0cnVlLFxuICAgICAgICAgICAgICAgIGdyaWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgY2lyY3VsYXI6IHRydWVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHBvaW50TGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzdGFydEFuZ2xlOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKGNoYXJ0LCBkYXRhc2V0SW5kZXgpe1xuICAgICAgICBzdXBlcihjaGFydCwgZGF0YXNldEluZGV4KTtcbiAgICAgICAgdGhpcy5pbm5lclJhZGl1cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5vdXRlclJhZGl1cyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZ2V0TGFiZWxBbmRWYWx1ZShpbmRleCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgICAgICBjb25zdCBsYWJlbHMgPSBjaGFydC5kYXRhLmxhYmVscyB8fCBbXTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBmb3JtYXROdW1iZXIobWV0YS5fcGFyc2VkW2luZGV4XS5yLCBjaGFydC5vcHRpb25zLmxvY2FsZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsYWJlbDogbGFiZWxzW2luZGV4XSB8fCAnJyxcbiAgICAgICAgICAgIHZhbHVlXG4gICAgICAgIH07XG4gICAgfVxuICAgIHBhcnNlT2JqZWN0RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICAgICAgcmV0dXJuIF9wYXJzZU9iamVjdERhdGFSYWRpYWxTY2FsZS5iaW5kKHRoaXMpKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCk7XG4gICAgfVxuICAgIHVwZGF0ZShtb2RlKSB7XG4gICAgICAgIGNvbnN0IGFyY3MgPSB0aGlzLl9jYWNoZWRNZXRhLmRhdGE7XG4gICAgICAgIHRoaXMuX3VwZGF0ZVJhZGl1cygpO1xuICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnRzKGFyY3MsIDAsIGFyY3MubGVuZ3RoLCBtb2RlKTtcbiAgICB9XG4gZ2V0TWluTWF4KCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgcmFuZ2UgPSB7XG4gICAgICAgICAgICBtaW46IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxcbiAgICAgICAgICAgIG1heDogTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZXG4gICAgICAgIH07XG4gICAgICAgIG1ldGEuZGF0YS5mb3JFYWNoKChlbGVtZW50LCBpbmRleCk9PntcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGluZGV4KS5yO1xuICAgICAgICAgICAgaWYgKCFpc05hTihwYXJzZWQpICYmIHRoaXMuY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlZCA8IHJhbmdlLm1pbikge1xuICAgICAgICAgICAgICAgICAgICByYW5nZS5taW4gPSBwYXJzZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwYXJzZWQgPiByYW5nZS5tYXgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UubWF4ID0gcGFyc2VkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByYW5nZTtcbiAgICB9XG4gX3VwZGF0ZVJhZGl1cygpIHtcbiAgICAgICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgICAgICBjb25zdCBjaGFydEFyZWEgPSBjaGFydC5jaGFydEFyZWE7XG4gICAgICAgIGNvbnN0IG9wdHMgPSBjaGFydC5vcHRpb25zO1xuICAgICAgICBjb25zdCBtaW5TaXplID0gTWF0aC5taW4oY2hhcnRBcmVhLnJpZ2h0IC0gY2hhcnRBcmVhLmxlZnQsIGNoYXJ0QXJlYS5ib3R0b20gLSBjaGFydEFyZWEudG9wKTtcbiAgICAgICAgY29uc3Qgb3V0ZXJSYWRpdXMgPSBNYXRoLm1heChtaW5TaXplIC8gMiwgMCk7XG4gICAgICAgIGNvbnN0IGlubmVyUmFkaXVzID0gTWF0aC5tYXgob3B0cy5jdXRvdXRQZXJjZW50YWdlID8gb3V0ZXJSYWRpdXMgLyAxMDAgKiBvcHRzLmN1dG91dFBlcmNlbnRhZ2UgOiAxLCAwKTtcbiAgICAgICAgY29uc3QgcmFkaXVzTGVuZ3RoID0gKG91dGVyUmFkaXVzIC0gaW5uZXJSYWRpdXMpIC8gY2hhcnQuZ2V0VmlzaWJsZURhdGFzZXRDb3VudCgpO1xuICAgICAgICB0aGlzLm91dGVyUmFkaXVzID0gb3V0ZXJSYWRpdXMgLSByYWRpdXNMZW5ndGggKiB0aGlzLmluZGV4O1xuICAgICAgICB0aGlzLmlubmVyUmFkaXVzID0gdGhpcy5vdXRlclJhZGl1cyAtIHJhZGl1c0xlbmd0aDtcbiAgICB9XG4gICAgdXBkYXRlRWxlbWVudHMoYXJjcywgc3RhcnQsIGNvdW50LCBtb2RlKSB7XG4gICAgICAgIGNvbnN0IHJlc2V0ID0gbW9kZSA9PT0gJ3Jlc2V0JztcbiAgICAgICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgICAgICBjb25zdCBvcHRzID0gY2hhcnQub3B0aW9ucztcbiAgICAgICAgY29uc3QgYW5pbWF0aW9uT3B0cyA9IG9wdHMuYW5pbWF0aW9uO1xuICAgICAgICBjb25zdCBzY2FsZSA9IHRoaXMuX2NhY2hlZE1ldGEuclNjYWxlO1xuICAgICAgICBjb25zdCBjZW50ZXJYID0gc2NhbGUueENlbnRlcjtcbiAgICAgICAgY29uc3QgY2VudGVyWSA9IHNjYWxlLnlDZW50ZXI7XG4gICAgICAgIGNvbnN0IGRhdGFzZXRTdGFydEFuZ2xlID0gc2NhbGUuZ2V0SW5kZXhBbmdsZSgwKSAtIDAuNSAqIFBJO1xuICAgICAgICBsZXQgYW5nbGUgPSBkYXRhc2V0U3RhcnRBbmdsZTtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRBbmdsZSA9IDM2MCAvIHRoaXMuY291bnRWaXNpYmxlRWxlbWVudHMoKTtcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgc3RhcnQ7ICsraSl7XG4gICAgICAgICAgICBhbmdsZSArPSB0aGlzLl9jb21wdXRlQW5nbGUoaSwgbW9kZSwgZGVmYXVsdEFuZ2xlKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IoaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBjb3VudDsgaSsrKXtcbiAgICAgICAgICAgIGNvbnN0IGFyYyA9IGFyY3NbaV07XG4gICAgICAgICAgICBsZXQgc3RhcnRBbmdsZSA9IGFuZ2xlO1xuICAgICAgICAgICAgbGV0IGVuZEFuZ2xlID0gYW5nbGUgKyB0aGlzLl9jb21wdXRlQW5nbGUoaSwgbW9kZSwgZGVmYXVsdEFuZ2xlKTtcbiAgICAgICAgICAgIGxldCBvdXRlclJhZGl1cyA9IGNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGkpID8gc2NhbGUuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUodGhpcy5nZXRQYXJzZWQoaSkucikgOiAwO1xuICAgICAgICAgICAgYW5nbGUgPSBlbmRBbmdsZTtcbiAgICAgICAgICAgIGlmIChyZXNldCkge1xuICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25PcHRzLmFuaW1hdGVTY2FsZSkge1xuICAgICAgICAgICAgICAgICAgICBvdXRlclJhZGl1cyA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25PcHRzLmFuaW1hdGVSb3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRBbmdsZSA9IGVuZEFuZ2xlID0gZGF0YXNldFN0YXJ0QW5nbGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcHJvcGVydGllcyA9IHtcbiAgICAgICAgICAgICAgICB4OiBjZW50ZXJYLFxuICAgICAgICAgICAgICAgIHk6IGNlbnRlclksXG4gICAgICAgICAgICAgICAgaW5uZXJSYWRpdXM6IDAsXG4gICAgICAgICAgICAgICAgb3V0ZXJSYWRpdXMsXG4gICAgICAgICAgICAgICAgc3RhcnRBbmdsZSxcbiAgICAgICAgICAgICAgICBlbmRBbmdsZSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSwgYXJjLmFjdGl2ZSA/ICdhY3RpdmUnIDogbW9kZSlcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQoYXJjLCBpLCBwcm9wZXJ0aWVzLCBtb2RlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb3VudFZpc2libGVFbGVtZW50cygpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGxldCBjb3VudCA9IDA7XG4gICAgICAgIG1ldGEuZGF0YS5mb3JFYWNoKChlbGVtZW50LCBpbmRleCk9PntcbiAgICAgICAgICAgIGlmICghaXNOYU4odGhpcy5nZXRQYXJzZWQoaW5kZXgpLnIpICYmIHRoaXMuY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjb3VudDtcbiAgICB9XG4gX2NvbXB1dGVBbmdsZShpbmRleCwgbW9kZSwgZGVmYXVsdEFuZ2xlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGluZGV4KSA/IHRvUmFkaWFucyh0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaW5kZXgsIG1vZGUpLmFuZ2xlIHx8IGRlZmF1bHRBbmdsZSkgOiAwO1xuICAgIH1cbn1cblxuY2xhc3MgUGllQ29udHJvbGxlciBleHRlbmRzIERvdWdobnV0Q29udHJvbGxlciB7XG4gICAgc3RhdGljIGlkID0gJ3BpZSc7XG4gc3RhdGljIGRlZmF1bHRzID0ge1xuICAgICAgICBjdXRvdXQ6IDAsXG4gICAgICAgIHJvdGF0aW9uOiAwLFxuICAgICAgICBjaXJjdW1mZXJlbmNlOiAzNjAsXG4gICAgICAgIHJhZGl1czogJzEwMCUnXG4gICAgfTtcbn1cblxuY2xhc3MgUmFkYXJDb250cm9sbGVyIGV4dGVuZHMgRGF0YXNldENvbnRyb2xsZXIge1xuICAgIHN0YXRpYyBpZCA9ICdyYWRhcic7XG4gc3RhdGljIGRlZmF1bHRzID0ge1xuICAgICAgICBkYXRhc2V0RWxlbWVudFR5cGU6ICdsaW5lJyxcbiAgICAgICAgZGF0YUVsZW1lbnRUeXBlOiAncG9pbnQnLFxuICAgICAgICBpbmRleEF4aXM6ICdyJyxcbiAgICAgICAgc2hvd0xpbmU6IHRydWUsXG4gICAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgICAgICBsaW5lOiB7XG4gICAgICAgICAgICAgICAgZmlsbDogJ3N0YXJ0J1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiBzdGF0aWMgb3ZlcnJpZGVzID0ge1xuICAgICAgICBhc3BlY3RSYXRpbzogMSxcbiAgICAgICAgc2NhbGVzOiB7XG4gICAgICAgICAgICByOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3JhZGlhbExpbmVhcidcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gZ2V0TGFiZWxBbmRWYWx1ZShpbmRleCkge1xuICAgICAgICBjb25zdCB2U2NhbGUgPSB0aGlzLl9jYWNoZWRNZXRhLnZTY2FsZTtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaW5kZXgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGFiZWw6IHZTY2FsZS5nZXRMYWJlbHMoKVtpbmRleF0sXG4gICAgICAgICAgICB2YWx1ZTogJycgKyB2U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWRbdlNjYWxlLmF4aXNdKVxuICAgICAgICB9O1xuICAgIH1cbiAgICBwYXJzZU9iamVjdERhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIHJldHVybiBfcGFyc2VPYmplY3REYXRhUmFkaWFsU2NhbGUuYmluZCh0aGlzKShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgIH1cbiAgICB1cGRhdGUobW9kZSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgbGluZSA9IG1ldGEuZGF0YXNldDtcbiAgICAgICAgY29uc3QgcG9pbnRzID0gbWV0YS5kYXRhIHx8IFtdO1xuICAgICAgICBjb25zdCBsYWJlbHMgPSBtZXRhLmlTY2FsZS5nZXRMYWJlbHMoKTtcbiAgICAgICAgbGluZS5wb2ludHMgPSBwb2ludHM7XG4gICAgICAgIGlmIChtb2RlICE9PSAncmVzaXplJykge1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMucmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9ucyhtb2RlKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLnNob3dMaW5lKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5ib3JkZXJXaWR0aCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgICAgICAgICAgICAgIF9sb29wOiB0cnVlLFxuICAgICAgICAgICAgICAgIF9mdWxsTG9vcDogbGFiZWxzLmxlbmd0aCA9PT0gcG9pbnRzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBvcHRpb25zXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50KGxpbmUsIHVuZGVmaW5lZCwgcHJvcGVydGllcywgbW9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50cyhwb2ludHMsIDAsIHBvaW50cy5sZW5ndGgsIG1vZGUpO1xuICAgIH1cbiAgICB1cGRhdGVFbGVtZW50cyhwb2ludHMsIHN0YXJ0LCBjb3VudCwgbW9kZSkge1xuICAgICAgICBjb25zdCBzY2FsZSA9IHRoaXMuX2NhY2hlZE1ldGEuclNjYWxlO1xuICAgICAgICBjb25zdCByZXNldCA9IG1vZGUgPT09ICdyZXNldCc7XG4gICAgICAgIGZvcihsZXQgaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBjb3VudDsgaSsrKXtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50ID0gcG9pbnRzW2ldO1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpLCBwb2ludC5hY3RpdmUgPyAnYWN0aXZlJyA6IG1vZGUpO1xuICAgICAgICAgICAgY29uc3QgcG9pbnRQb3NpdGlvbiA9IHNjYWxlLmdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZShpLCB0aGlzLmdldFBhcnNlZChpKS5yKTtcbiAgICAgICAgICAgIGNvbnN0IHggPSByZXNldCA/IHNjYWxlLnhDZW50ZXIgOiBwb2ludFBvc2l0aW9uLng7XG4gICAgICAgICAgICBjb25zdCB5ID0gcmVzZXQgPyBzY2FsZS55Q2VudGVyIDogcG9pbnRQb3NpdGlvbi55O1xuICAgICAgICAgICAgY29uc3QgcHJvcGVydGllcyA9IHtcbiAgICAgICAgICAgICAgICB4LFxuICAgICAgICAgICAgICAgIHksXG4gICAgICAgICAgICAgICAgYW5nbGU6IHBvaW50UG9zaXRpb24uYW5nbGUsXG4gICAgICAgICAgICAgICAgc2tpcDogaXNOYU4oeCkgfHwgaXNOYU4oeSksXG4gICAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlRWxlbWVudChwb2ludCwgaSwgcHJvcGVydGllcywgbW9kZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNsYXNzIFNjYXR0ZXJDb250cm9sbGVyIGV4dGVuZHMgRGF0YXNldENvbnRyb2xsZXIge1xuICAgIHN0YXRpYyBpZCA9ICdzY2F0dGVyJztcbiBzdGF0aWMgZGVmYXVsdHMgPSB7XG4gICAgICAgIGRhdGFzZXRFbGVtZW50VHlwZTogZmFsc2UsXG4gICAgICAgIGRhdGFFbGVtZW50VHlwZTogJ3BvaW50JyxcbiAgICAgICAgc2hvd0xpbmU6IGZhbHNlLFxuICAgICAgICBmaWxsOiBmYWxzZVxuICAgIH07XG4gc3RhdGljIG92ZXJyaWRlcyA9IHtcbiAgICAgICAgaW50ZXJhY3Rpb246IHtcbiAgICAgICAgICAgIG1vZGU6ICdwb2ludCdcbiAgICAgICAgfSxcbiAgICAgICAgc2NhbGVzOiB7XG4gICAgICAgICAgICB4OiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2xpbmVhcidcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB5OiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2xpbmVhcidcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gZ2V0TGFiZWxBbmRWYWx1ZShpbmRleCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgbGFiZWxzID0gdGhpcy5jaGFydC5kYXRhLmxhYmVscyB8fCBbXTtcbiAgICAgICAgY29uc3QgeyB4U2NhbGUgLCB5U2NhbGUgIH0gPSBtZXRhO1xuICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgICAgIGNvbnN0IHggPSB4U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWQueCk7XG4gICAgICAgIGNvbnN0IHkgPSB5U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWQueSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsYWJlbDogbGFiZWxzW2luZGV4XSB8fCAnJyxcbiAgICAgICAgICAgIHZhbHVlOiAnKCcgKyB4ICsgJywgJyArIHkgKyAnKSdcbiAgICAgICAgfTtcbiAgICB9XG4gICAgdXBkYXRlKG1vZGUpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IHsgZGF0YTogcG9pbnRzID0gW10gIH0gPSBtZXRhO1xuICAgICAgICBjb25zdCBhbmltYXRpb25zRGlzYWJsZWQgPSB0aGlzLmNoYXJ0Ll9hbmltYXRpb25zRGlzYWJsZWQ7XG4gICAgICAgIGxldCB7IHN0YXJ0ICwgY291bnQgIH0gPSBfZ2V0U3RhcnRBbmRDb3VudE9mVmlzaWJsZVBvaW50cyhtZXRhLCBwb2ludHMsIGFuaW1hdGlvbnNEaXNhYmxlZCk7XG4gICAgICAgIHRoaXMuX2RyYXdTdGFydCA9IHN0YXJ0O1xuICAgICAgICB0aGlzLl9kcmF3Q291bnQgPSBjb3VudDtcbiAgICAgICAgaWYgKF9zY2FsZVJhbmdlc0NoYW5nZWQobWV0YSkpIHtcbiAgICAgICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgICAgIGNvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNob3dMaW5lKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZGF0YXNldEVsZW1lbnRUeXBlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRFbGVtZW50cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeyBkYXRhc2V0OiBsaW5lICwgX2RhdGFzZXQgIH0gPSBtZXRhO1xuICAgICAgICAgICAgbGluZS5fY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgICAgICAgICAgbGluZS5fZGF0YXNldEluZGV4ID0gdGhpcy5pbmRleDtcbiAgICAgICAgICAgIGxpbmUuX2RlY2ltYXRlZCA9ICEhX2RhdGFzZXQuX2RlY2ltYXRlZDtcbiAgICAgICAgICAgIGxpbmUucG9pbnRzID0gcG9pbnRzO1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMucmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9ucyhtb2RlKTtcbiAgICAgICAgICAgIG9wdGlvbnMuc2VnbWVudCA9IHRoaXMub3B0aW9ucy5zZWdtZW50O1xuICAgICAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50KGxpbmUsIHVuZGVmaW5lZCwge1xuICAgICAgICAgICAgICAgIGFuaW1hdGVkOiAhYW5pbWF0aW9uc0Rpc2FibGVkLFxuICAgICAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgICAgIH0sIG1vZGUpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZGF0YXNldEVsZW1lbnRUeXBlKSB7XG4gICAgICAgICAgICBkZWxldGUgbWV0YS5kYXRhc2V0O1xuICAgICAgICAgICAgdGhpcy5kYXRhc2V0RWxlbWVudFR5cGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnRzKHBvaW50cywgc3RhcnQsIGNvdW50LCBtb2RlKTtcbiAgICB9XG4gICAgYWRkRWxlbWVudHMoKSB7XG4gICAgICAgIGNvbnN0IHsgc2hvd0xpbmUgIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGlmICghdGhpcy5kYXRhc2V0RWxlbWVudFR5cGUgJiYgc2hvd0xpbmUpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YXNldEVsZW1lbnRUeXBlID0gdGhpcy5jaGFydC5yZWdpc3RyeS5nZXRFbGVtZW50KCdsaW5lJyk7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIuYWRkRWxlbWVudHMoKTtcbiAgICB9XG4gICAgdXBkYXRlRWxlbWVudHMocG9pbnRzLCBzdGFydCwgY291bnQsIG1vZGUpIHtcbiAgICAgICAgY29uc3QgcmVzZXQgPSBtb2RlID09PSAncmVzZXQnO1xuICAgICAgICBjb25zdCB7IGlTY2FsZSAsIHZTY2FsZSAsIF9zdGFja2VkICwgX2RhdGFzZXQgIH0gPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBmaXJzdE9wdHMgPSB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoc3RhcnQsIG1vZGUpO1xuICAgICAgICBjb25zdCBzaGFyZWRPcHRpb25zID0gdGhpcy5nZXRTaGFyZWRPcHRpb25zKGZpcnN0T3B0cyk7XG4gICAgICAgIGNvbnN0IGluY2x1ZGVPcHRpb25zID0gdGhpcy5pbmNsdWRlT3B0aW9ucyhtb2RlLCBzaGFyZWRPcHRpb25zKTtcbiAgICAgICAgY29uc3QgaUF4aXMgPSBpU2NhbGUuYXhpcztcbiAgICAgICAgY29uc3QgdkF4aXMgPSB2U2NhbGUuYXhpcztcbiAgICAgICAgY29uc3QgeyBzcGFuR2FwcyAsIHNlZ21lbnQgIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IG1heEdhcExlbmd0aCA9IGlzTnVtYmVyKHNwYW5HYXBzKSA/IHNwYW5HYXBzIDogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICBjb25zdCBkaXJlY3RVcGRhdGUgPSB0aGlzLmNoYXJ0Ll9hbmltYXRpb25zRGlzYWJsZWQgfHwgcmVzZXQgfHwgbW9kZSA9PT0gJ25vbmUnO1xuICAgICAgICBsZXQgcHJldlBhcnNlZCA9IHN0YXJ0ID4gMCAmJiB0aGlzLmdldFBhcnNlZChzdGFydCAtIDEpO1xuICAgICAgICBmb3IobGV0IGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7ICsraSl7XG4gICAgICAgICAgICBjb25zdCBwb2ludCA9IHBvaW50c1tpXTtcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGkpO1xuICAgICAgICAgICAgY29uc3QgcHJvcGVydGllcyA9IGRpcmVjdFVwZGF0ZSA/IHBvaW50IDoge307XG4gICAgICAgICAgICBjb25zdCBudWxsRGF0YSA9IGlzTnVsbE9yVW5kZWYocGFyc2VkW3ZBeGlzXSk7XG4gICAgICAgICAgICBjb25zdCBpUGl4ZWwgPSBwcm9wZXJ0aWVzW2lBeGlzXSA9IGlTY2FsZS5nZXRQaXhlbEZvclZhbHVlKHBhcnNlZFtpQXhpc10sIGkpO1xuICAgICAgICAgICAgY29uc3QgdlBpeGVsID0gcHJvcGVydGllc1t2QXhpc10gPSByZXNldCB8fCBudWxsRGF0YSA/IHZTY2FsZS5nZXRCYXNlUGl4ZWwoKSA6IHZTY2FsZS5nZXRQaXhlbEZvclZhbHVlKF9zdGFja2VkID8gdGhpcy5hcHBseVN0YWNrKHZTY2FsZSwgcGFyc2VkLCBfc3RhY2tlZCkgOiBwYXJzZWRbdkF4aXNdLCBpKTtcbiAgICAgICAgICAgIHByb3BlcnRpZXMuc2tpcCA9IGlzTmFOKGlQaXhlbCkgfHwgaXNOYU4odlBpeGVsKSB8fCBudWxsRGF0YTtcbiAgICAgICAgICAgIHByb3BlcnRpZXMuc3RvcCA9IGkgPiAwICYmIE1hdGguYWJzKHBhcnNlZFtpQXhpc10gLSBwcmV2UGFyc2VkW2lBeGlzXSkgPiBtYXhHYXBMZW5ndGg7XG4gICAgICAgICAgICBpZiAoc2VnbWVudCkge1xuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMucGFyc2VkID0gcGFyc2VkO1xuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMucmF3ID0gX2RhdGFzZXQuZGF0YVtpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpbmNsdWRlT3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMub3B0aW9ucyA9IHNoYXJlZE9wdGlvbnMgfHwgdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGksIHBvaW50LmFjdGl2ZSA/ICdhY3RpdmUnIDogbW9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWRpcmVjdFVwZGF0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlRWxlbWVudChwb2ludCwgaSwgcHJvcGVydGllcywgbW9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcmV2UGFyc2VkID0gcGFyc2VkO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlU2hhcmVkT3B0aW9ucyhzaGFyZWRPcHRpb25zLCBtb2RlLCBmaXJzdE9wdHMpO1xuICAgIH1cbiBnZXRNYXhPdmVyZmxvdygpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBtZXRhLmRhdGEgfHwgW107XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLnNob3dMaW5lKSB7XG4gICAgICAgICAgICBsZXQgbWF4ID0gMDtcbiAgICAgICAgICAgIGZvcihsZXQgaSA9IGRhdGEubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpe1xuICAgICAgICAgICAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgZGF0YVtpXS5zaXplKHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpKSkgLyAyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtYXggPiAwICYmIG1heDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkYXRhc2V0ID0gbWV0YS5kYXRhc2V0O1xuICAgICAgICBjb25zdCBib3JkZXIgPSBkYXRhc2V0Lm9wdGlvbnMgJiYgZGF0YXNldC5vcHRpb25zLmJvcmRlcldpZHRoIHx8IDA7XG4gICAgICAgIGlmICghZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBib3JkZXI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZmlyc3RQb2ludCA9IGRhdGFbMF0uc2l6ZSh0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoMCkpO1xuICAgICAgICBjb25zdCBsYXN0UG9pbnQgPSBkYXRhW2RhdGEubGVuZ3RoIC0gMV0uc2l6ZSh0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoZGF0YS5sZW5ndGggLSAxKSk7XG4gICAgICAgIHJldHVybiBNYXRoLm1heChib3JkZXIsIGZpcnN0UG9pbnQsIGxhc3RQb2ludCkgLyAyO1xuICAgIH1cbn1cblxudmFyIGNvbnRyb2xsZXJzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuX19wcm90b19fOiBudWxsLFxuQmFyQ29udHJvbGxlcjogQmFyQ29udHJvbGxlcixcbkJ1YmJsZUNvbnRyb2xsZXI6IEJ1YmJsZUNvbnRyb2xsZXIsXG5Eb3VnaG51dENvbnRyb2xsZXI6IERvdWdobnV0Q29udHJvbGxlcixcbkxpbmVDb250cm9sbGVyOiBMaW5lQ29udHJvbGxlcixcblBpZUNvbnRyb2xsZXI6IFBpZUNvbnRyb2xsZXIsXG5Qb2xhckFyZWFDb250cm9sbGVyOiBQb2xhckFyZWFDb250cm9sbGVyLFxuUmFkYXJDb250cm9sbGVyOiBSYWRhckNvbnRyb2xsZXIsXG5TY2F0dGVyQ29udHJvbGxlcjogU2NhdHRlckNvbnRyb2xsZXJcbn0pO1xuXG4vKipcbiAqIEBuYW1lc3BhY2UgQ2hhcnQuX2FkYXB0ZXJzXG4gKiBAc2luY2UgMi44LjBcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gYWJzdHJhY3QoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQ6IENoZWNrIHRoYXQgYSBjb21wbGV0ZSBkYXRlIGFkYXB0ZXIgaXMgcHJvdmlkZWQuJyk7XG59XG4vKipcbiAqIERhdGUgYWRhcHRlciAoY3VycmVudCB1c2VkIGJ5IHRoZSB0aW1lIHNjYWxlKVxuICogQG5hbWVzcGFjZSBDaGFydC5fYWRhcHRlcnMuX2RhdGVcbiAqIEBtZW1iZXJvZiBDaGFydC5fYWRhcHRlcnNcbiAqIEBwcml2YXRlXG4gKi8gY2xhc3MgRGF0ZUFkYXB0ZXJCYXNlIHtcbiAgICAvKipcbiAgICogT3ZlcnJpZGUgZGVmYXVsdCBkYXRlIGFkYXB0ZXIgbWV0aG9kcy5cbiAgICogQWNjZXB0cyB0eXBlIHBhcmFtZXRlciB0byBkZWZpbmUgb3B0aW9ucyB0eXBlLlxuICAgKiBAZXhhbXBsZVxuICAgKiBDaGFydC5fYWRhcHRlcnMuX2RhdGUub3ZlcnJpZGU8e215QWRhcHRlck9wdGlvbjogc3RyaW5nfT4oe1xuICAgKiAgIGluaXQoKSB7XG4gICAqICAgICBjb25zb2xlLmxvZyh0aGlzLm9wdGlvbnMubXlBZGFwdGVyT3B0aW9uKTtcbiAgICogICB9XG4gICAqIH0pXG4gICAqLyBzdGF0aWMgb3ZlcnJpZGUobWVtYmVycykge1xuICAgICAgICBPYmplY3QuYXNzaWduKERhdGVBZGFwdGVyQmFzZS5wcm90b3R5cGUsIG1lbWJlcnMpO1xuICAgIH1cbiAgICBvcHRpb25zO1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpe1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXG4gICAgaW5pdCgpIHt9XG4gICAgZm9ybWF0cygpIHtcbiAgICAgICAgcmV0dXJuIGFic3RyYWN0KCk7XG4gICAgfVxuICAgIHBhcnNlKCkge1xuICAgICAgICByZXR1cm4gYWJzdHJhY3QoKTtcbiAgICB9XG4gICAgZm9ybWF0KCkge1xuICAgICAgICByZXR1cm4gYWJzdHJhY3QoKTtcbiAgICB9XG4gICAgYWRkKCkge1xuICAgICAgICByZXR1cm4gYWJzdHJhY3QoKTtcbiAgICB9XG4gICAgZGlmZigpIHtcbiAgICAgICAgcmV0dXJuIGFic3RyYWN0KCk7XG4gICAgfVxuICAgIHN0YXJ0T2YoKSB7XG4gICAgICAgIHJldHVybiBhYnN0cmFjdCgpO1xuICAgIH1cbiAgICBlbmRPZigpIHtcbiAgICAgICAgcmV0dXJuIGFic3RyYWN0KCk7XG4gICAgfVxufVxudmFyIGFkYXB0ZXJzID0ge1xuICAgIF9kYXRlOiBEYXRlQWRhcHRlckJhc2Vcbn07XG5cbmZ1bmN0aW9uIGJpbmFyeVNlYXJjaChtZXRhc2V0LCBheGlzLCB2YWx1ZSwgaW50ZXJzZWN0KSB7XG4gICAgY29uc3QgeyBjb250cm9sbGVyICwgZGF0YSAsIF9zb3J0ZWQgIH0gPSBtZXRhc2V0O1xuICAgIGNvbnN0IGlTY2FsZSA9IGNvbnRyb2xsZXIuX2NhY2hlZE1ldGEuaVNjYWxlO1xuICAgIGlmIChpU2NhbGUgJiYgYXhpcyA9PT0gaVNjYWxlLmF4aXMgJiYgYXhpcyAhPT0gJ3InICYmIF9zb3J0ZWQgJiYgZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgbG9va3VwTWV0aG9kID0gaVNjYWxlLl9yZXZlcnNlUGl4ZWxzID8gX3Jsb29rdXBCeUtleSA6IF9sb29rdXBCeUtleTtcbiAgICAgICAgaWYgKCFpbnRlcnNlY3QpIHtcbiAgICAgICAgICAgIHJldHVybiBsb29rdXBNZXRob2QoZGF0YSwgYXhpcywgdmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbnRyb2xsZXIuX3NoYXJlZE9wdGlvbnMpIHtcbiAgICAgICAgICAgIGNvbnN0IGVsID0gZGF0YVswXTtcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gdHlwZW9mIGVsLmdldFJhbmdlID09PSAnZnVuY3Rpb24nICYmIGVsLmdldFJhbmdlKGF4aXMpO1xuICAgICAgICAgICAgaWYgKHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBsb29rdXBNZXRob2QoZGF0YSwgYXhpcywgdmFsdWUgLSByYW5nZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZW5kID0gbG9va3VwTWV0aG9kKGRhdGEsIGF4aXMsIHZhbHVlICsgcmFuZ2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGxvOiBzdGFydC5sbyxcbiAgICAgICAgICAgICAgICAgICAgaGk6IGVuZC5oaVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbG86IDAsXG4gICAgICAgIGhpOiBkYXRhLmxlbmd0aCAtIDFcbiAgICB9O1xufVxuIGZ1bmN0aW9uIGV2YWx1YXRlSW50ZXJhY3Rpb25JdGVtcyhjaGFydCwgYXhpcywgcG9zaXRpb24sIGhhbmRsZXIsIGludGVyc2VjdCkge1xuICAgIGNvbnN0IG1ldGFzZXRzID0gY2hhcnQuZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpO1xuICAgIGNvbnN0IHZhbHVlID0gcG9zaXRpb25bYXhpc107XG4gICAgZm9yKGxldCBpID0gMCwgaWxlbiA9IG1ldGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIGNvbnN0IHsgaW5kZXggLCBkYXRhICB9ID0gbWV0YXNldHNbaV07XG4gICAgICAgIGNvbnN0IHsgbG8gLCBoaSAgfSA9IGJpbmFyeVNlYXJjaChtZXRhc2V0c1tpXSwgYXhpcywgdmFsdWUsIGludGVyc2VjdCk7XG4gICAgICAgIGZvcihsZXQgaiA9IGxvOyBqIDw9IGhpOyArK2ope1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGRhdGFbal07XG4gICAgICAgICAgICBpZiAoIWVsZW1lbnQuc2tpcCkge1xuICAgICAgICAgICAgICAgIGhhbmRsZXIoZWxlbWVudCwgaW5kZXgsIGopO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIGZ1bmN0aW9uIGdldERpc3RhbmNlTWV0cmljRm9yQXhpcyhheGlzKSB7XG4gICAgY29uc3QgdXNlWCA9IGF4aXMuaW5kZXhPZigneCcpICE9PSAtMTtcbiAgICBjb25zdCB1c2VZID0gYXhpcy5pbmRleE9mKCd5JykgIT09IC0xO1xuICAgIHJldHVybiBmdW5jdGlvbihwdDEsIHB0Mikge1xuICAgICAgICBjb25zdCBkZWx0YVggPSB1c2VYID8gTWF0aC5hYnMocHQxLnggLSBwdDIueCkgOiAwO1xuICAgICAgICBjb25zdCBkZWx0YVkgPSB1c2VZID8gTWF0aC5hYnMocHQxLnkgLSBwdDIueSkgOiAwO1xuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KGRlbHRhWCwgMikgKyBNYXRoLnBvdyhkZWx0YVksIDIpKTtcbiAgICB9O1xufVxuIGZ1bmN0aW9uIGdldEludGVyc2VjdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgdXNlRmluYWxQb3NpdGlvbiwgaW5jbHVkZUludmlzaWJsZSkge1xuICAgIGNvbnN0IGl0ZW1zID0gW107XG4gICAgaWYgKCFpbmNsdWRlSW52aXNpYmxlICYmICFjaGFydC5pc1BvaW50SW5BcmVhKHBvc2l0aW9uKSkge1xuICAgICAgICByZXR1cm4gaXRlbXM7XG4gICAgfVxuICAgIGNvbnN0IGV2YWx1YXRpb25GdW5jID0gZnVuY3Rpb24oZWxlbWVudCwgZGF0YXNldEluZGV4LCBpbmRleCkge1xuICAgICAgICBpZiAoIWluY2x1ZGVJbnZpc2libGUgJiYgIV9pc1BvaW50SW5BcmVhKGVsZW1lbnQsIGNoYXJ0LmNoYXJ0QXJlYSwgMCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbWVudC5pblJhbmdlKHBvc2l0aW9uLngsIHBvc2l0aW9uLnksIHVzZUZpbmFsUG9zaXRpb24pKSB7XG4gICAgICAgICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgICAgICAgIGRhdGFzZXRJbmRleCxcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGV2YWx1YXRlSW50ZXJhY3Rpb25JdGVtcyhjaGFydCwgYXhpcywgcG9zaXRpb24sIGV2YWx1YXRpb25GdW5jLCB0cnVlKTtcbiAgICByZXR1cm4gaXRlbXM7XG59XG4gZnVuY3Rpb24gZ2V0TmVhcmVzdFJhZGlhbEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIGxldCBpdGVtcyA9IFtdO1xuICAgIGZ1bmN0aW9uIGV2YWx1YXRpb25GdW5jKGVsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXgpIHtcbiAgICAgICAgY29uc3QgeyBzdGFydEFuZ2xlICwgZW5kQW5nbGUgIH0gPSBlbGVtZW50LmdldFByb3BzKFtcbiAgICAgICAgICAgICdzdGFydEFuZ2xlJyxcbiAgICAgICAgICAgICdlbmRBbmdsZSdcbiAgICAgICAgXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgICAgIGNvbnN0IHsgYW5nbGUgIH0gPSBnZXRBbmdsZUZyb21Qb2ludChlbGVtZW50LCB7XG4gICAgICAgICAgICB4OiBwb3NpdGlvbi54LFxuICAgICAgICAgICAgeTogcG9zaXRpb24ueVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKF9hbmdsZUJldHdlZW4oYW5nbGUsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlKSkge1xuICAgICAgICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICAgICAgICBkYXRhc2V0SW5kZXgsXG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGV2YWx1YXRlSW50ZXJhY3Rpb25JdGVtcyhjaGFydCwgYXhpcywgcG9zaXRpb24sIGV2YWx1YXRpb25GdW5jKTtcbiAgICByZXR1cm4gaXRlbXM7XG59XG4gZnVuY3Rpb24gZ2V0TmVhcmVzdENhcnRlc2lhbkl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgaW50ZXJzZWN0LCB1c2VGaW5hbFBvc2l0aW9uLCBpbmNsdWRlSW52aXNpYmxlKSB7XG4gICAgbGV0IGl0ZW1zID0gW107XG4gICAgY29uc3QgZGlzdGFuY2VNZXRyaWMgPSBnZXREaXN0YW5jZU1ldHJpY0ZvckF4aXMoYXhpcyk7XG4gICAgbGV0IG1pbkRpc3RhbmNlID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgIGZ1bmN0aW9uIGV2YWx1YXRpb25GdW5jKGVsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXgpIHtcbiAgICAgICAgY29uc3QgaW5SYW5nZSA9IGVsZW1lbnQuaW5SYW5nZShwb3NpdGlvbi54LCBwb3NpdGlvbi55LCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgICAgaWYgKGludGVyc2VjdCAmJiAhaW5SYW5nZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNlbnRlciA9IGVsZW1lbnQuZ2V0Q2VudGVyUG9pbnQodXNlRmluYWxQb3NpdGlvbik7XG4gICAgICAgIGNvbnN0IHBvaW50SW5BcmVhID0gISFpbmNsdWRlSW52aXNpYmxlIHx8IGNoYXJ0LmlzUG9pbnRJbkFyZWEoY2VudGVyKTtcbiAgICAgICAgaWYgKCFwb2ludEluQXJlYSAmJiAhaW5SYW5nZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRpc3RhbmNlID0gZGlzdGFuY2VNZXRyaWMocG9zaXRpb24sIGNlbnRlcik7XG4gICAgICAgIGlmIChkaXN0YW5jZSA8IG1pbkRpc3RhbmNlKSB7XG4gICAgICAgICAgICBpdGVtcyA9IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFzZXRJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgbWluRGlzdGFuY2UgPSBkaXN0YW5jZTtcbiAgICAgICAgfSBlbHNlIGlmIChkaXN0YW5jZSA9PT0gbWluRGlzdGFuY2UpIHtcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgZGF0YXNldEluZGV4LFxuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBldmFsdWF0ZUludGVyYWN0aW9uSXRlbXMoY2hhcnQsIGF4aXMsIHBvc2l0aW9uLCBldmFsdWF0aW9uRnVuYyk7XG4gICAgcmV0dXJuIGl0ZW1zO1xufVxuIGZ1bmN0aW9uIGdldE5lYXJlc3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIGludGVyc2VjdCwgdXNlRmluYWxQb3NpdGlvbiwgaW5jbHVkZUludmlzaWJsZSkge1xuICAgIGlmICghaW5jbHVkZUludmlzaWJsZSAmJiAhY2hhcnQuaXNQb2ludEluQXJlYShwb3NpdGlvbikpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICByZXR1cm4gYXhpcyA9PT0gJ3InICYmICFpbnRlcnNlY3QgPyBnZXROZWFyZXN0UmFkaWFsSXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCB1c2VGaW5hbFBvc2l0aW9uKSA6IGdldE5lYXJlc3RDYXJ0ZXNpYW5JdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIGludGVyc2VjdCwgdXNlRmluYWxQb3NpdGlvbiwgaW5jbHVkZUludmlzaWJsZSk7XG59XG4gZnVuY3Rpb24gZ2V0QXhpc0l0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgaW50ZXJzZWN0LCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICBjb25zdCByYW5nZU1ldGhvZCA9IGF4aXMgPT09ICd4JyA/ICdpblhSYW5nZScgOiAnaW5ZUmFuZ2UnO1xuICAgIGxldCBpbnRlcnNlY3RzSXRlbSA9IGZhbHNlO1xuICAgIGV2YWx1YXRlSW50ZXJhY3Rpb25JdGVtcyhjaGFydCwgYXhpcywgcG9zaXRpb24sIChlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4KT0+e1xuICAgICAgICBpZiAoZWxlbWVudFtyYW5nZU1ldGhvZF0ocG9zaXRpb25bYXhpc10sIHVzZUZpbmFsUG9zaXRpb24pKSB7XG4gICAgICAgICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgICAgICAgIGRhdGFzZXRJbmRleCxcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpbnRlcnNlY3RzSXRlbSA9IGludGVyc2VjdHNJdGVtIHx8IGVsZW1lbnQuaW5SYW5nZShwb3NpdGlvbi54LCBwb3NpdGlvbi55LCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChpbnRlcnNlY3QgJiYgIWludGVyc2VjdHNJdGVtKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZW1zO1xufVxuIHZhciBJbnRlcmFjdGlvbiA9IHtcbiAgICBldmFsdWF0ZUludGVyYWN0aW9uSXRlbXMsXG4gICAgbW9kZXM6IHtcbiBpbmRleCAoY2hhcnQsIGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG4gICAgICAgICAgICBjb25zdCBheGlzID0gb3B0aW9ucy5heGlzIHx8ICd4JztcbiAgICAgICAgICAgIGNvbnN0IGluY2x1ZGVJbnZpc2libGUgPSBvcHRpb25zLmluY2x1ZGVJbnZpc2libGUgfHwgZmFsc2U7XG4gICAgICAgICAgICBjb25zdCBpdGVtcyA9IG9wdGlvbnMuaW50ZXJzZWN0ID8gZ2V0SW50ZXJzZWN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCB1c2VGaW5hbFBvc2l0aW9uLCBpbmNsdWRlSW52aXNpYmxlKSA6IGdldE5lYXJlc3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIGZhbHNlLCB1c2VGaW5hbFBvc2l0aW9uLCBpbmNsdWRlSW52aXNpYmxlKTtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnRzID0gW107XG4gICAgICAgICAgICBpZiAoIWl0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNoYXJ0LmdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKS5mb3JFYWNoKChtZXRhKT0+e1xuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gaXRlbXNbMF0uaW5kZXg7XG4gICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IG1ldGEuZGF0YVtpbmRleF07XG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQgJiYgIWVsZW1lbnQuc2tpcCkge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhc2V0SW5kZXg6IG1ldGEuaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50cztcbiAgICAgICAgfSxcbiBkYXRhc2V0IChjaGFydCwgZSwgb3B0aW9ucywgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICAgICAgY29uc3QgcG9zaXRpb24gPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGUsIGNoYXJ0KTtcbiAgICAgICAgICAgIGNvbnN0IGF4aXMgPSBvcHRpb25zLmF4aXMgfHwgJ3h5JztcbiAgICAgICAgICAgIGNvbnN0IGluY2x1ZGVJbnZpc2libGUgPSBvcHRpb25zLmluY2x1ZGVJbnZpc2libGUgfHwgZmFsc2U7XG4gICAgICAgICAgICBsZXQgaXRlbXMgPSBvcHRpb25zLmludGVyc2VjdCA/IGdldEludGVyc2VjdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgdXNlRmluYWxQb3NpdGlvbiwgaW5jbHVkZUludmlzaWJsZSkgOiBnZXROZWFyZXN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCBmYWxzZSwgdXNlRmluYWxQb3NpdGlvbiwgaW5jbHVkZUludmlzaWJsZSk7XG4gICAgICAgICAgICBpZiAoaXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFzZXRJbmRleCA9IGl0ZW1zWzBdLmRhdGFzZXRJbmRleDtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KS5kYXRhO1xuICAgICAgICAgICAgICAgIGl0ZW1zID0gW107XG4gICAgICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyArK2kpe1xuICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGRhdGFbaV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhc2V0SW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogaVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaXRlbXM7XG4gICAgICAgIH0sXG4gcG9pbnQgKGNoYXJ0LCBlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuICAgICAgICAgICAgY29uc3QgYXhpcyA9IG9wdGlvbnMuYXhpcyB8fCAneHknO1xuICAgICAgICAgICAgY29uc3QgaW5jbHVkZUludmlzaWJsZSA9IG9wdGlvbnMuaW5jbHVkZUludmlzaWJsZSB8fCBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBnZXRJbnRlcnNlY3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIHVzZUZpbmFsUG9zaXRpb24sIGluY2x1ZGVJbnZpc2libGUpO1xuICAgICAgICB9LFxuIG5lYXJlc3QgKGNoYXJ0LCBlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuICAgICAgICAgICAgY29uc3QgYXhpcyA9IG9wdGlvbnMuYXhpcyB8fCAneHknO1xuICAgICAgICAgICAgY29uc3QgaW5jbHVkZUludmlzaWJsZSA9IG9wdGlvbnMuaW5jbHVkZUludmlzaWJsZSB8fCBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBnZXROZWFyZXN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCBvcHRpb25zLmludGVyc2VjdCwgdXNlRmluYWxQb3NpdGlvbiwgaW5jbHVkZUludmlzaWJsZSk7XG4gICAgICAgIH0sXG4geCAoY2hhcnQsIGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG4gICAgICAgICAgICByZXR1cm4gZ2V0QXhpc0l0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgJ3gnLCBvcHRpb25zLmludGVyc2VjdCwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgICAgIH0sXG4geSAoY2hhcnQsIGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG4gICAgICAgICAgICByZXR1cm4gZ2V0QXhpc0l0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgJ3knLCBvcHRpb25zLmludGVyc2VjdCwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5jb25zdCBTVEFUSUNfUE9TSVRJT05TID0gW1xuICAgICdsZWZ0JyxcbiAgICAndG9wJyxcbiAgICAncmlnaHQnLFxuICAgICdib3R0b20nXG5dO1xuZnVuY3Rpb24gZmlsdGVyQnlQb3NpdGlvbihhcnJheSwgcG9zaXRpb24pIHtcbiAgICByZXR1cm4gYXJyYXkuZmlsdGVyKCh2KT0+di5wb3MgPT09IHBvc2l0aW9uKTtcbn1cbmZ1bmN0aW9uIGZpbHRlckR5bmFtaWNQb3NpdGlvbkJ5QXhpcyhhcnJheSwgYXhpcykge1xuICAgIHJldHVybiBhcnJheS5maWx0ZXIoKHYpPT5TVEFUSUNfUE9TSVRJT05TLmluZGV4T2Yodi5wb3MpID09PSAtMSAmJiB2LmJveC5heGlzID09PSBheGlzKTtcbn1cbmZ1bmN0aW9uIHNvcnRCeVdlaWdodChhcnJheSwgcmV2ZXJzZSkge1xuICAgIHJldHVybiBhcnJheS5zb3J0KChhLCBiKT0+e1xuICAgICAgICBjb25zdCB2MCA9IHJldmVyc2UgPyBiIDogYTtcbiAgICAgICAgY29uc3QgdjEgPSByZXZlcnNlID8gYSA6IGI7XG4gICAgICAgIHJldHVybiB2MC53ZWlnaHQgPT09IHYxLndlaWdodCA/IHYwLmluZGV4IC0gdjEuaW5kZXggOiB2MC53ZWlnaHQgLSB2MS53ZWlnaHQ7XG4gICAgfSk7XG59XG5mdW5jdGlvbiB3cmFwQm94ZXMoYm94ZXMpIHtcbiAgICBjb25zdCBsYXlvdXRCb3hlcyA9IFtdO1xuICAgIGxldCBpLCBpbGVuLCBib3gsIHBvcywgc3RhY2ssIHN0YWNrV2VpZ2h0O1xuICAgIGZvcihpID0gMCwgaWxlbiA9IChib3hlcyB8fCBbXSkubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgYm94ID0gYm94ZXNbaV07XG4gICAgICAgICh7IHBvc2l0aW9uOiBwb3MgLCBvcHRpb25zOiB7IHN0YWNrICwgc3RhY2tXZWlnaHQgPTEgIH0gIH0gPSBib3gpO1xuICAgICAgICBsYXlvdXRCb3hlcy5wdXNoKHtcbiAgICAgICAgICAgIGluZGV4OiBpLFxuICAgICAgICAgICAgYm94LFxuICAgICAgICAgICAgcG9zLFxuICAgICAgICAgICAgaG9yaXpvbnRhbDogYm94LmlzSG9yaXpvbnRhbCgpLFxuICAgICAgICAgICAgd2VpZ2h0OiBib3gud2VpZ2h0LFxuICAgICAgICAgICAgc3RhY2s6IHN0YWNrICYmIHBvcyArIHN0YWNrLFxuICAgICAgICAgICAgc3RhY2tXZWlnaHRcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBsYXlvdXRCb3hlcztcbn1cbmZ1bmN0aW9uIGJ1aWxkU3RhY2tzKGxheW91dHMpIHtcbiAgICBjb25zdCBzdGFja3MgPSB7fTtcbiAgICBmb3IgKGNvbnN0IHdyYXAgb2YgbGF5b3V0cyl7XG4gICAgICAgIGNvbnN0IHsgc3RhY2sgLCBwb3MgLCBzdGFja1dlaWdodCAgfSA9IHdyYXA7XG4gICAgICAgIGlmICghc3RhY2sgfHwgIVNUQVRJQ19QT1NJVElPTlMuaW5jbHVkZXMocG9zKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgX3N0YWNrID0gc3RhY2tzW3N0YWNrXSB8fCAoc3RhY2tzW3N0YWNrXSA9IHtcbiAgICAgICAgICAgIGNvdW50OiAwLFxuICAgICAgICAgICAgcGxhY2VkOiAwLFxuICAgICAgICAgICAgd2VpZ2h0OiAwLFxuICAgICAgICAgICAgc2l6ZTogMFxuICAgICAgICB9KTtcbiAgICAgICAgX3N0YWNrLmNvdW50Kys7XG4gICAgICAgIF9zdGFjay53ZWlnaHQgKz0gc3RhY2tXZWlnaHQ7XG4gICAgfVxuICAgIHJldHVybiBzdGFja3M7XG59XG4gZnVuY3Rpb24gc2V0TGF5b3V0RGltcyhsYXlvdXRzLCBwYXJhbXMpIHtcbiAgICBjb25zdCBzdGFja3MgPSBidWlsZFN0YWNrcyhsYXlvdXRzKTtcbiAgICBjb25zdCB7IHZCb3hNYXhXaWR0aCAsIGhCb3hNYXhIZWlnaHQgIH0gPSBwYXJhbXM7XG4gICAgbGV0IGksIGlsZW4sIGxheW91dDtcbiAgICBmb3IoaSA9IDAsIGlsZW4gPSBsYXlvdXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIGxheW91dCA9IGxheW91dHNbaV07XG4gICAgICAgIGNvbnN0IHsgZnVsbFNpemUgIH0gPSBsYXlvdXQuYm94O1xuICAgICAgICBjb25zdCBzdGFjayA9IHN0YWNrc1tsYXlvdXQuc3RhY2tdO1xuICAgICAgICBjb25zdCBmYWN0b3IgPSBzdGFjayAmJiBsYXlvdXQuc3RhY2tXZWlnaHQgLyBzdGFjay53ZWlnaHQ7XG4gICAgICAgIGlmIChsYXlvdXQuaG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgbGF5b3V0LndpZHRoID0gZmFjdG9yID8gZmFjdG9yICogdkJveE1heFdpZHRoIDogZnVsbFNpemUgJiYgcGFyYW1zLmF2YWlsYWJsZVdpZHRoO1xuICAgICAgICAgICAgbGF5b3V0LmhlaWdodCA9IGhCb3hNYXhIZWlnaHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsYXlvdXQud2lkdGggPSB2Qm94TWF4V2lkdGg7XG4gICAgICAgICAgICBsYXlvdXQuaGVpZ2h0ID0gZmFjdG9yID8gZmFjdG9yICogaEJveE1heEhlaWdodCA6IGZ1bGxTaXplICYmIHBhcmFtcy5hdmFpbGFibGVIZWlnaHQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0YWNrcztcbn1cbmZ1bmN0aW9uIGJ1aWxkTGF5b3V0Qm94ZXMoYm94ZXMpIHtcbiAgICBjb25zdCBsYXlvdXRCb3hlcyA9IHdyYXBCb3hlcyhib3hlcyk7XG4gICAgY29uc3QgZnVsbFNpemUgPSBzb3J0QnlXZWlnaHQobGF5b3V0Qm94ZXMuZmlsdGVyKCh3cmFwKT0+d3JhcC5ib3guZnVsbFNpemUpLCB0cnVlKTtcbiAgICBjb25zdCBsZWZ0ID0gc29ydEJ5V2VpZ2h0KGZpbHRlckJ5UG9zaXRpb24obGF5b3V0Qm94ZXMsICdsZWZ0JyksIHRydWUpO1xuICAgIGNvbnN0IHJpZ2h0ID0gc29ydEJ5V2VpZ2h0KGZpbHRlckJ5UG9zaXRpb24obGF5b3V0Qm94ZXMsICdyaWdodCcpKTtcbiAgICBjb25zdCB0b3AgPSBzb3J0QnlXZWlnaHQoZmlsdGVyQnlQb3NpdGlvbihsYXlvdXRCb3hlcywgJ3RvcCcpLCB0cnVlKTtcbiAgICBjb25zdCBib3R0b20gPSBzb3J0QnlXZWlnaHQoZmlsdGVyQnlQb3NpdGlvbihsYXlvdXRCb3hlcywgJ2JvdHRvbScpKTtcbiAgICBjb25zdCBjZW50ZXJIb3Jpem9udGFsID0gZmlsdGVyRHluYW1pY1Bvc2l0aW9uQnlBeGlzKGxheW91dEJveGVzLCAneCcpO1xuICAgIGNvbnN0IGNlbnRlclZlcnRpY2FsID0gZmlsdGVyRHluYW1pY1Bvc2l0aW9uQnlBeGlzKGxheW91dEJveGVzLCAneScpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGZ1bGxTaXplLFxuICAgICAgICBsZWZ0QW5kVG9wOiBsZWZ0LmNvbmNhdCh0b3ApLFxuICAgICAgICByaWdodEFuZEJvdHRvbTogcmlnaHQuY29uY2F0KGNlbnRlclZlcnRpY2FsKS5jb25jYXQoYm90dG9tKS5jb25jYXQoY2VudGVySG9yaXpvbnRhbCksXG4gICAgICAgIGNoYXJ0QXJlYTogZmlsdGVyQnlQb3NpdGlvbihsYXlvdXRCb3hlcywgJ2NoYXJ0QXJlYScpLFxuICAgICAgICB2ZXJ0aWNhbDogbGVmdC5jb25jYXQocmlnaHQpLmNvbmNhdChjZW50ZXJWZXJ0aWNhbCksXG4gICAgICAgIGhvcml6b250YWw6IHRvcC5jb25jYXQoYm90dG9tKS5jb25jYXQoY2VudGVySG9yaXpvbnRhbClcbiAgICB9O1xufVxuZnVuY3Rpb24gZ2V0Q29tYmluZWRNYXgobWF4UGFkZGluZywgY2hhcnRBcmVhLCBhLCBiKSB7XG4gICAgcmV0dXJuIE1hdGgubWF4KG1heFBhZGRpbmdbYV0sIGNoYXJ0QXJlYVthXSkgKyBNYXRoLm1heChtYXhQYWRkaW5nW2JdLCBjaGFydEFyZWFbYl0pO1xufVxuZnVuY3Rpb24gdXBkYXRlTWF4UGFkZGluZyhtYXhQYWRkaW5nLCBib3hQYWRkaW5nKSB7XG4gICAgbWF4UGFkZGluZy50b3AgPSBNYXRoLm1heChtYXhQYWRkaW5nLnRvcCwgYm94UGFkZGluZy50b3ApO1xuICAgIG1heFBhZGRpbmcubGVmdCA9IE1hdGgubWF4KG1heFBhZGRpbmcubGVmdCwgYm94UGFkZGluZy5sZWZ0KTtcbiAgICBtYXhQYWRkaW5nLmJvdHRvbSA9IE1hdGgubWF4KG1heFBhZGRpbmcuYm90dG9tLCBib3hQYWRkaW5nLmJvdHRvbSk7XG4gICAgbWF4UGFkZGluZy5yaWdodCA9IE1hdGgubWF4KG1heFBhZGRpbmcucmlnaHQsIGJveFBhZGRpbmcucmlnaHQpO1xufVxuZnVuY3Rpb24gdXBkYXRlRGltcyhjaGFydEFyZWEsIHBhcmFtcywgbGF5b3V0LCBzdGFja3MpIHtcbiAgICBjb25zdCB7IHBvcyAsIGJveCAgfSA9IGxheW91dDtcbiAgICBjb25zdCBtYXhQYWRkaW5nID0gY2hhcnRBcmVhLm1heFBhZGRpbmc7XG4gICAgaWYgKCFpc09iamVjdChwb3MpKSB7XG4gICAgICAgIGlmIChsYXlvdXQuc2l6ZSkge1xuICAgICAgICAgICAgY2hhcnRBcmVhW3Bvc10gLT0gbGF5b3V0LnNpemU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RhY2sgPSBzdGFja3NbbGF5b3V0LnN0YWNrXSB8fCB7XG4gICAgICAgICAgICBzaXplOiAwLFxuICAgICAgICAgICAgY291bnQ6IDFcbiAgICAgICAgfTtcbiAgICAgICAgc3RhY2suc2l6ZSA9IE1hdGgubWF4KHN0YWNrLnNpemUsIGxheW91dC5ob3Jpem9udGFsID8gYm94LmhlaWdodCA6IGJveC53aWR0aCk7XG4gICAgICAgIGxheW91dC5zaXplID0gc3RhY2suc2l6ZSAvIHN0YWNrLmNvdW50O1xuICAgICAgICBjaGFydEFyZWFbcG9zXSArPSBsYXlvdXQuc2l6ZTtcbiAgICB9XG4gICAgaWYgKGJveC5nZXRQYWRkaW5nKSB7XG4gICAgICAgIHVwZGF0ZU1heFBhZGRpbmcobWF4UGFkZGluZywgYm94LmdldFBhZGRpbmcoKSk7XG4gICAgfVxuICAgIGNvbnN0IG5ld1dpZHRoID0gTWF0aC5tYXgoMCwgcGFyYW1zLm91dGVyV2lkdGggLSBnZXRDb21iaW5lZE1heChtYXhQYWRkaW5nLCBjaGFydEFyZWEsICdsZWZ0JywgJ3JpZ2h0JykpO1xuICAgIGNvbnN0IG5ld0hlaWdodCA9IE1hdGgubWF4KDAsIHBhcmFtcy5vdXRlckhlaWdodCAtIGdldENvbWJpbmVkTWF4KG1heFBhZGRpbmcsIGNoYXJ0QXJlYSwgJ3RvcCcsICdib3R0b20nKSk7XG4gICAgY29uc3Qgd2lkdGhDaGFuZ2VkID0gbmV3V2lkdGggIT09IGNoYXJ0QXJlYS53O1xuICAgIGNvbnN0IGhlaWdodENoYW5nZWQgPSBuZXdIZWlnaHQgIT09IGNoYXJ0QXJlYS5oO1xuICAgIGNoYXJ0QXJlYS53ID0gbmV3V2lkdGg7XG4gICAgY2hhcnRBcmVhLmggPSBuZXdIZWlnaHQ7XG4gICAgcmV0dXJuIGxheW91dC5ob3Jpem9udGFsID8ge1xuICAgICAgICBzYW1lOiB3aWR0aENoYW5nZWQsXG4gICAgICAgIG90aGVyOiBoZWlnaHRDaGFuZ2VkXG4gICAgfSA6IHtcbiAgICAgICAgc2FtZTogaGVpZ2h0Q2hhbmdlZCxcbiAgICAgICAgb3RoZXI6IHdpZHRoQ2hhbmdlZFxuICAgIH07XG59XG5mdW5jdGlvbiBoYW5kbGVNYXhQYWRkaW5nKGNoYXJ0QXJlYSkge1xuICAgIGNvbnN0IG1heFBhZGRpbmcgPSBjaGFydEFyZWEubWF4UGFkZGluZztcbiAgICBmdW5jdGlvbiB1cGRhdGVQb3MocG9zKSB7XG4gICAgICAgIGNvbnN0IGNoYW5nZSA9IE1hdGgubWF4KG1heFBhZGRpbmdbcG9zXSAtIGNoYXJ0QXJlYVtwb3NdLCAwKTtcbiAgICAgICAgY2hhcnRBcmVhW3Bvc10gKz0gY2hhbmdlO1xuICAgICAgICByZXR1cm4gY2hhbmdlO1xuICAgIH1cbiAgICBjaGFydEFyZWEueSArPSB1cGRhdGVQb3MoJ3RvcCcpO1xuICAgIGNoYXJ0QXJlYS54ICs9IHVwZGF0ZVBvcygnbGVmdCcpO1xuICAgIHVwZGF0ZVBvcygncmlnaHQnKTtcbiAgICB1cGRhdGVQb3MoJ2JvdHRvbScpO1xufVxuZnVuY3Rpb24gZ2V0TWFyZ2lucyhob3Jpem9udGFsLCBjaGFydEFyZWEpIHtcbiAgICBjb25zdCBtYXhQYWRkaW5nID0gY2hhcnRBcmVhLm1heFBhZGRpbmc7XG4gICAgZnVuY3Rpb24gbWFyZ2luRm9yUG9zaXRpb25zKHBvc2l0aW9ucykge1xuICAgICAgICBjb25zdCBtYXJnaW4gPSB7XG4gICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgICAgICBib3R0b206IDBcbiAgICAgICAgfTtcbiAgICAgICAgcG9zaXRpb25zLmZvckVhY2goKHBvcyk9PntcbiAgICAgICAgICAgIG1hcmdpbltwb3NdID0gTWF0aC5tYXgoY2hhcnRBcmVhW3Bvc10sIG1heFBhZGRpbmdbcG9zXSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbWFyZ2luO1xuICAgIH1cbiAgICByZXR1cm4gaG9yaXpvbnRhbCA/IG1hcmdpbkZvclBvc2l0aW9ucyhbXG4gICAgICAgICdsZWZ0JyxcbiAgICAgICAgJ3JpZ2h0J1xuICAgIF0pIDogbWFyZ2luRm9yUG9zaXRpb25zKFtcbiAgICAgICAgJ3RvcCcsXG4gICAgICAgICdib3R0b20nXG4gICAgXSk7XG59XG5mdW5jdGlvbiBmaXRCb3hlcyhib3hlcywgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcykge1xuICAgIGNvbnN0IHJlZml0Qm94ZXMgPSBbXTtcbiAgICBsZXQgaSwgaWxlbiwgbGF5b3V0LCBib3gsIHJlZml0LCBjaGFuZ2VkO1xuICAgIGZvcihpID0gMCwgaWxlbiA9IGJveGVzLmxlbmd0aCwgcmVmaXQgPSAwOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgbGF5b3V0ID0gYm94ZXNbaV07XG4gICAgICAgIGJveCA9IGxheW91dC5ib3g7XG4gICAgICAgIGJveC51cGRhdGUobGF5b3V0LndpZHRoIHx8IGNoYXJ0QXJlYS53LCBsYXlvdXQuaGVpZ2h0IHx8IGNoYXJ0QXJlYS5oLCBnZXRNYXJnaW5zKGxheW91dC5ob3Jpem9udGFsLCBjaGFydEFyZWEpKTtcbiAgICAgICAgY29uc3QgeyBzYW1lICwgb3RoZXIgIH0gPSB1cGRhdGVEaW1zKGNoYXJ0QXJlYSwgcGFyYW1zLCBsYXlvdXQsIHN0YWNrcyk7XG4gICAgICAgIHJlZml0IHw9IHNhbWUgJiYgcmVmaXRCb3hlcy5sZW5ndGg7XG4gICAgICAgIGNoYW5nZWQgPSBjaGFuZ2VkIHx8IG90aGVyO1xuICAgICAgICBpZiAoIWJveC5mdWxsU2l6ZSkge1xuICAgICAgICAgICAgcmVmaXRCb3hlcy5wdXNoKGxheW91dCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlZml0ICYmIGZpdEJveGVzKHJlZml0Qm94ZXMsIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpIHx8IGNoYW5nZWQ7XG59XG5mdW5jdGlvbiBzZXRCb3hEaW1zKGJveCwgbGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgYm94LnRvcCA9IHRvcDtcbiAgICBib3gubGVmdCA9IGxlZnQ7XG4gICAgYm94LnJpZ2h0ID0gbGVmdCArIHdpZHRoO1xuICAgIGJveC5ib3R0b20gPSB0b3AgKyBoZWlnaHQ7XG4gICAgYm94LndpZHRoID0gd2lkdGg7XG4gICAgYm94LmhlaWdodCA9IGhlaWdodDtcbn1cbmZ1bmN0aW9uIHBsYWNlQm94ZXMoYm94ZXMsIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpIHtcbiAgICBjb25zdCB1c2VyUGFkZGluZyA9IHBhcmFtcy5wYWRkaW5nO1xuICAgIGxldCB7IHggLCB5ICB9ID0gY2hhcnRBcmVhO1xuICAgIGZvciAoY29uc3QgbGF5b3V0IG9mIGJveGVzKXtcbiAgICAgICAgY29uc3QgYm94ID0gbGF5b3V0LmJveDtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBzdGFja3NbbGF5b3V0LnN0YWNrXSB8fCB7XG4gICAgICAgICAgICBjb3VudDogMSxcbiAgICAgICAgICAgIHBsYWNlZDogMCxcbiAgICAgICAgICAgIHdlaWdodDogMVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCB3ZWlnaHQgPSBsYXlvdXQuc3RhY2tXZWlnaHQgLyBzdGFjay53ZWlnaHQgfHwgMTtcbiAgICAgICAgaWYgKGxheW91dC5ob3Jpem9udGFsKSB7XG4gICAgICAgICAgICBjb25zdCB3aWR0aCA9IGNoYXJ0QXJlYS53ICogd2VpZ2h0O1xuICAgICAgICAgICAgY29uc3QgaGVpZ2h0ID0gc3RhY2suc2l6ZSB8fCBib3guaGVpZ2h0O1xuICAgICAgICAgICAgaWYgKGRlZmluZWQoc3RhY2suc3RhcnQpKSB7XG4gICAgICAgICAgICAgICAgeSA9IHN0YWNrLnN0YXJ0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJveC5mdWxsU2l6ZSkge1xuICAgICAgICAgICAgICAgIHNldEJveERpbXMoYm94LCB1c2VyUGFkZGluZy5sZWZ0LCB5LCBwYXJhbXMub3V0ZXJXaWR0aCAtIHVzZXJQYWRkaW5nLnJpZ2h0IC0gdXNlclBhZGRpbmcubGVmdCwgaGVpZ2h0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2V0Qm94RGltcyhib3gsIGNoYXJ0QXJlYS5sZWZ0ICsgc3RhY2sucGxhY2VkLCB5LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YWNrLnN0YXJ0ID0geTtcbiAgICAgICAgICAgIHN0YWNrLnBsYWNlZCArPSB3aWR0aDtcbiAgICAgICAgICAgIHkgPSBib3guYm90dG9tO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgaGVpZ2h0ID0gY2hhcnRBcmVhLmggKiB3ZWlnaHQ7XG4gICAgICAgICAgICBjb25zdCB3aWR0aCA9IHN0YWNrLnNpemUgfHwgYm94LndpZHRoO1xuICAgICAgICAgICAgaWYgKGRlZmluZWQoc3RhY2suc3RhcnQpKSB7XG4gICAgICAgICAgICAgICAgeCA9IHN0YWNrLnN0YXJ0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJveC5mdWxsU2l6ZSkge1xuICAgICAgICAgICAgICAgIHNldEJveERpbXMoYm94LCB4LCB1c2VyUGFkZGluZy50b3AsIHdpZHRoLCBwYXJhbXMub3V0ZXJIZWlnaHQgLSB1c2VyUGFkZGluZy5ib3R0b20gLSB1c2VyUGFkZGluZy50b3ApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZXRCb3hEaW1zKGJveCwgeCwgY2hhcnRBcmVhLnRvcCArIHN0YWNrLnBsYWNlZCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGFjay5zdGFydCA9IHg7XG4gICAgICAgICAgICBzdGFjay5wbGFjZWQgKz0gaGVpZ2h0O1xuICAgICAgICAgICAgeCA9IGJveC5yaWdodDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjaGFydEFyZWEueCA9IHg7XG4gICAgY2hhcnRBcmVhLnkgPSB5O1xufVxudmFyIGxheW91dHMgPSB7XG4gYWRkQm94IChjaGFydCwgaXRlbSkge1xuICAgICAgICBpZiAoIWNoYXJ0LmJveGVzKSB7XG4gICAgICAgICAgICBjaGFydC5ib3hlcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGl0ZW0uZnVsbFNpemUgPSBpdGVtLmZ1bGxTaXplIHx8IGZhbHNlO1xuICAgICAgICBpdGVtLnBvc2l0aW9uID0gaXRlbS5wb3NpdGlvbiB8fCAndG9wJztcbiAgICAgICAgaXRlbS53ZWlnaHQgPSBpdGVtLndlaWdodCB8fCAwO1xuICAgICAgICBpdGVtLl9sYXllcnMgPSBpdGVtLl9sYXllcnMgfHwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgejogMCxcbiAgICAgICAgICAgICAgICAgICAgZHJhdyAoY2hhcnRBcmVhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmRyYXcoY2hhcnRBcmVhKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF07XG4gICAgICAgIH07XG4gICAgICAgIGNoYXJ0LmJveGVzLnB1c2goaXRlbSk7XG4gICAgfSxcbiByZW1vdmVCb3ggKGNoYXJ0LCBsYXlvdXRJdGVtKSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gY2hhcnQuYm94ZXMgPyBjaGFydC5ib3hlcy5pbmRleE9mKGxheW91dEl0ZW0pIDogLTE7XG4gICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIGNoYXJ0LmJveGVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICB9LFxuIGNvbmZpZ3VyZSAoY2hhcnQsIGl0ZW0sIG9wdGlvbnMpIHtcbiAgICAgICAgaXRlbS5mdWxsU2l6ZSA9IG9wdGlvbnMuZnVsbFNpemU7XG4gICAgICAgIGl0ZW0ucG9zaXRpb24gPSBvcHRpb25zLnBvc2l0aW9uO1xuICAgICAgICBpdGVtLndlaWdodCA9IG9wdGlvbnMud2VpZ2h0O1xuICAgIH0sXG4gdXBkYXRlIChjaGFydCwgd2lkdGgsIGhlaWdodCwgbWluUGFkZGluZykge1xuICAgICAgICBpZiAoIWNoYXJ0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFkZGluZyA9IHRvUGFkZGluZyhjaGFydC5vcHRpb25zLmxheW91dC5wYWRkaW5nKTtcbiAgICAgICAgY29uc3QgYXZhaWxhYmxlV2lkdGggPSBNYXRoLm1heCh3aWR0aCAtIHBhZGRpbmcud2lkdGgsIDApO1xuICAgICAgICBjb25zdCBhdmFpbGFibGVIZWlnaHQgPSBNYXRoLm1heChoZWlnaHQgLSBwYWRkaW5nLmhlaWdodCwgMCk7XG4gICAgICAgIGNvbnN0IGJveGVzID0gYnVpbGRMYXlvdXRCb3hlcyhjaGFydC5ib3hlcyk7XG4gICAgICAgIGNvbnN0IHZlcnRpY2FsQm94ZXMgPSBib3hlcy52ZXJ0aWNhbDtcbiAgICAgICAgY29uc3QgaG9yaXpvbnRhbEJveGVzID0gYm94ZXMuaG9yaXpvbnRhbDtcbiAgICAgICAgZWFjaChjaGFydC5ib3hlcywgKGJveCk9PntcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYm94LmJlZm9yZUxheW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGJveC5iZWZvcmVMYXlvdXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHZpc2libGVWZXJ0aWNhbEJveENvdW50ID0gdmVydGljYWxCb3hlcy5yZWR1Y2UoKHRvdGFsLCB3cmFwKT0+d3JhcC5ib3gub3B0aW9ucyAmJiB3cmFwLmJveC5vcHRpb25zLmRpc3BsYXkgPT09IGZhbHNlID8gdG90YWwgOiB0b3RhbCArIDEsIDApIHx8IDE7XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IE9iamVjdC5mcmVlemUoe1xuICAgICAgICAgICAgb3V0ZXJXaWR0aDogd2lkdGgsXG4gICAgICAgICAgICBvdXRlckhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgICAgcGFkZGluZyxcbiAgICAgICAgICAgIGF2YWlsYWJsZVdpZHRoLFxuICAgICAgICAgICAgYXZhaWxhYmxlSGVpZ2h0LFxuICAgICAgICAgICAgdkJveE1heFdpZHRoOiBhdmFpbGFibGVXaWR0aCAvIDIgLyB2aXNpYmxlVmVydGljYWxCb3hDb3VudCxcbiAgICAgICAgICAgIGhCb3hNYXhIZWlnaHQ6IGF2YWlsYWJsZUhlaWdodCAvIDJcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IG1heFBhZGRpbmcgPSBPYmplY3QuYXNzaWduKHt9LCBwYWRkaW5nKTtcbiAgICAgICAgdXBkYXRlTWF4UGFkZGluZyhtYXhQYWRkaW5nLCB0b1BhZGRpbmcobWluUGFkZGluZykpO1xuICAgICAgICBjb25zdCBjaGFydEFyZWEgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgICAgIG1heFBhZGRpbmcsXG4gICAgICAgICAgICB3OiBhdmFpbGFibGVXaWR0aCxcbiAgICAgICAgICAgIGg6IGF2YWlsYWJsZUhlaWdodCxcbiAgICAgICAgICAgIHg6IHBhZGRpbmcubGVmdCxcbiAgICAgICAgICAgIHk6IHBhZGRpbmcudG9wXG4gICAgICAgIH0sIHBhZGRpbmcpO1xuICAgICAgICBjb25zdCBzdGFja3MgPSBzZXRMYXlvdXREaW1zKHZlcnRpY2FsQm94ZXMuY29uY2F0KGhvcml6b250YWxCb3hlcyksIHBhcmFtcyk7XG4gICAgICAgIGZpdEJveGVzKGJveGVzLmZ1bGxTaXplLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKTtcbiAgICAgICAgZml0Qm94ZXModmVydGljYWxCb3hlcywgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcyk7XG4gICAgICAgIGlmIChmaXRCb3hlcyhob3Jpem9udGFsQm94ZXMsIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpKSB7XG4gICAgICAgICAgICBmaXRCb3hlcyh2ZXJ0aWNhbEJveGVzLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKTtcbiAgICAgICAgfVxuICAgICAgICBoYW5kbGVNYXhQYWRkaW5nKGNoYXJ0QXJlYSk7XG4gICAgICAgIHBsYWNlQm94ZXMoYm94ZXMubGVmdEFuZFRvcCwgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcyk7XG4gICAgICAgIGNoYXJ0QXJlYS54ICs9IGNoYXJ0QXJlYS53O1xuICAgICAgICBjaGFydEFyZWEueSArPSBjaGFydEFyZWEuaDtcbiAgICAgICAgcGxhY2VCb3hlcyhib3hlcy5yaWdodEFuZEJvdHRvbSwgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcyk7XG4gICAgICAgIGNoYXJ0LmNoYXJ0QXJlYSA9IHtcbiAgICAgICAgICAgIGxlZnQ6IGNoYXJ0QXJlYS5sZWZ0LFxuICAgICAgICAgICAgdG9wOiBjaGFydEFyZWEudG9wLFxuICAgICAgICAgICAgcmlnaHQ6IGNoYXJ0QXJlYS5sZWZ0ICsgY2hhcnRBcmVhLncsXG4gICAgICAgICAgICBib3R0b206IGNoYXJ0QXJlYS50b3AgKyBjaGFydEFyZWEuaCxcbiAgICAgICAgICAgIGhlaWdodDogY2hhcnRBcmVhLmgsXG4gICAgICAgICAgICB3aWR0aDogY2hhcnRBcmVhLndcbiAgICAgICAgfTtcbiAgICAgICAgZWFjaChib3hlcy5jaGFydEFyZWEsIChsYXlvdXQpPT57XG4gICAgICAgICAgICBjb25zdCBib3ggPSBsYXlvdXQuYm94O1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihib3gsIGNoYXJ0LmNoYXJ0QXJlYSk7XG4gICAgICAgICAgICBib3gudXBkYXRlKGNoYXJ0QXJlYS53LCBjaGFydEFyZWEuaCwge1xuICAgICAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICAgICAgICAgIGJvdHRvbTogMFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn07XG5cbmNsYXNzIEJhc2VQbGF0Zm9ybSB7XG4gYWNxdWlyZUNvbnRleHQoY2FudmFzLCBhc3BlY3RSYXRpbykge31cbiByZWxlYXNlQ29udGV4dChjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gYWRkRXZlbnRMaXN0ZW5lcihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHt9XG4gcmVtb3ZlRXZlbnRMaXN0ZW5lcihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHt9XG4gZ2V0RGV2aWNlUGl4ZWxSYXRpbygpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuIGdldE1heGltdW1TaXplKGVsZW1lbnQsIHdpZHRoLCBoZWlnaHQsIGFzcGVjdFJhdGlvKSB7XG4gICAgICAgIHdpZHRoID0gTWF0aC5tYXgoMCwgd2lkdGggfHwgZWxlbWVudC53aWR0aCk7XG4gICAgICAgIGhlaWdodCA9IGhlaWdodCB8fCBlbGVtZW50LmhlaWdodDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiBNYXRoLm1heCgwLCBhc3BlY3RSYXRpbyA/IE1hdGguZmxvb3Iod2lkdGggLyBhc3BlY3RSYXRpbykgOiBoZWlnaHQpXG4gICAgICAgIH07XG4gICAgfVxuIGlzQXR0YWNoZWQoY2FudmFzKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiB1cGRhdGVDb25maWcoY29uZmlnKSB7XG4gICAgfVxufVxuXG5jbGFzcyBCYXNpY1BsYXRmb3JtIGV4dGVuZHMgQmFzZVBsYXRmb3JtIHtcbiAgICBhY3F1aXJlQ29udGV4dChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICYmIGl0ZW0uZ2V0Q29udGV4dCAmJiBpdGVtLmdldENvbnRleHQoJzJkJykgfHwgbnVsbDtcbiAgICB9XG4gICAgdXBkYXRlQ29uZmlnKGNvbmZpZykge1xuICAgICAgICBjb25maWcub3B0aW9ucy5hbmltYXRpb24gPSBmYWxzZTtcbiAgICB9XG59XG5cbmNvbnN0IEVYUEFORE9fS0VZID0gJyRjaGFydGpzJztcbiBjb25zdCBFVkVOVF9UWVBFUyA9IHtcbiAgICB0b3VjaHN0YXJ0OiAnbW91c2Vkb3duJyxcbiAgICB0b3VjaG1vdmU6ICdtb3VzZW1vdmUnLFxuICAgIHRvdWNoZW5kOiAnbW91c2V1cCcsXG4gICAgcG9pbnRlcmVudGVyOiAnbW91c2VlbnRlcicsXG4gICAgcG9pbnRlcmRvd246ICdtb3VzZWRvd24nLFxuICAgIHBvaW50ZXJtb3ZlOiAnbW91c2Vtb3ZlJyxcbiAgICBwb2ludGVydXA6ICdtb3VzZXVwJyxcbiAgICBwb2ludGVybGVhdmU6ICdtb3VzZW91dCcsXG4gICAgcG9pbnRlcm91dDogJ21vdXNlb3V0J1xufTtcbmNvbnN0IGlzTnVsbE9yRW1wdHkgPSAodmFsdWUpPT52YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gJyc7XG4gZnVuY3Rpb24gaW5pdENhbnZhcyhjYW52YXMsIGFzcGVjdFJhdGlvKSB7XG4gICAgY29uc3Qgc3R5bGUgPSBjYW52YXMuc3R5bGU7XG4gICAgY29uc3QgcmVuZGVySGVpZ2h0ID0gY2FudmFzLmdldEF0dHJpYnV0ZSgnaGVpZ2h0Jyk7XG4gICAgY29uc3QgcmVuZGVyV2lkdGggPSBjYW52YXMuZ2V0QXR0cmlidXRlKCd3aWR0aCcpO1xuICAgIGNhbnZhc1tFWFBBTkRPX0tFWV0gPSB7XG4gICAgICAgIGluaXRpYWw6IHtcbiAgICAgICAgICAgIGhlaWdodDogcmVuZGVySGVpZ2h0LFxuICAgICAgICAgICAgd2lkdGg6IHJlbmRlcldpZHRoLFxuICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBzdHlsZS5kaXNwbGF5LFxuICAgICAgICAgICAgICAgIGhlaWdodDogc3R5bGUuaGVpZ2h0LFxuICAgICAgICAgICAgICAgIHdpZHRoOiBzdHlsZS53aWR0aFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBzdHlsZS5kaXNwbGF5ID0gc3R5bGUuZGlzcGxheSB8fCAnYmxvY2snO1xuICAgIHN0eWxlLmJveFNpemluZyA9IHN0eWxlLmJveFNpemluZyB8fCAnYm9yZGVyLWJveCc7XG4gICAgaWYgKGlzTnVsbE9yRW1wdHkocmVuZGVyV2lkdGgpKSB7XG4gICAgICAgIGNvbnN0IGRpc3BsYXlXaWR0aCA9IHJlYWRVc2VkU2l6ZShjYW52YXMsICd3aWR0aCcpO1xuICAgICAgICBpZiAoZGlzcGxheVdpZHRoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IGRpc3BsYXlXaWR0aDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNOdWxsT3JFbXB0eShyZW5kZXJIZWlnaHQpKSB7XG4gICAgICAgIGlmIChjYW52YXMuc3R5bGUuaGVpZ2h0ID09PSAnJykge1xuICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IGNhbnZhcy53aWR0aCAvIChhc3BlY3RSYXRpbyB8fCAyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGRpc3BsYXlIZWlnaHQgPSByZWFkVXNlZFNpemUoY2FudmFzLCAnaGVpZ2h0Jyk7XG4gICAgICAgICAgICBpZiAoZGlzcGxheUhlaWdodCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IGRpc3BsYXlIZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNhbnZhcztcbn1cbmNvbnN0IGV2ZW50TGlzdGVuZXJPcHRpb25zID0gc3VwcG9ydHNFdmVudExpc3RlbmVyT3B0aW9ucyA/IHtcbiAgICBwYXNzaXZlOiB0cnVlXG59IDogZmFsc2U7XG5mdW5jdGlvbiBhZGRMaXN0ZW5lcihub2RlLCB0eXBlLCBsaXN0ZW5lcikge1xuICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgZXZlbnRMaXN0ZW5lck9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgY2hhcnQuY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIsIGV2ZW50TGlzdGVuZXJPcHRpb25zKTtcbn1cbmZ1bmN0aW9uIGZyb21OYXRpdmVFdmVudChldmVudCwgY2hhcnQpIHtcbiAgICBjb25zdCB0eXBlID0gRVZFTlRfVFlQRVNbZXZlbnQudHlwZV0gfHwgZXZlbnQudHlwZTtcbiAgICBjb25zdCB7IHggLCB5ICB9ID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihldmVudCwgY2hhcnQpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGUsXG4gICAgICAgIGNoYXJ0LFxuICAgICAgICBuYXRpdmU6IGV2ZW50LFxuICAgICAgICB4OiB4ICE9PSB1bmRlZmluZWQgPyB4IDogbnVsbCxcbiAgICAgICAgeTogeSAhPT0gdW5kZWZpbmVkID8geSA6IG51bGxcbiAgICB9O1xufVxuZnVuY3Rpb24gbm9kZUxpc3RDb250YWlucyhub2RlTGlzdCwgY2FudmFzKSB7XG4gICAgZm9yIChjb25zdCBub2RlIG9mIG5vZGVMaXN0KXtcbiAgICAgICAgaWYgKG5vZGUgPT09IGNhbnZhcyB8fCBub2RlLmNvbnRhaW5zKGNhbnZhcykpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlQXR0YWNoT2JzZXJ2ZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgY29uc3QgY2FudmFzID0gY2hhcnQuY2FudmFzO1xuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKGVudHJpZXMpPT57XG4gICAgICAgIGxldCB0cmlnZ2VyID0gZmFsc2U7XG4gICAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcyl7XG4gICAgICAgICAgICB0cmlnZ2VyID0gdHJpZ2dlciB8fCBub2RlTGlzdENvbnRhaW5zKGVudHJ5LmFkZGVkTm9kZXMsIGNhbnZhcyk7XG4gICAgICAgICAgICB0cmlnZ2VyID0gdHJpZ2dlciAmJiAhbm9kZUxpc3RDb250YWlucyhlbnRyeS5yZW1vdmVkTm9kZXMsIGNhbnZhcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRyaWdnZXIpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBvYnNlcnZlci5vYnNlcnZlKGRvY3VtZW50LCB7XG4gICAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcbiAgICAgICAgc3VidHJlZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBvYnNlcnZlcjtcbn1cbmZ1bmN0aW9uIGNyZWF0ZURldGFjaE9ic2VydmVyKGNoYXJ0LCB0eXBlLCBsaXN0ZW5lcikge1xuICAgIGNvbnN0IGNhbnZhcyA9IGNoYXJ0LmNhbnZhcztcbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKChlbnRyaWVzKT0+e1xuICAgICAgICBsZXQgdHJpZ2dlciA9IGZhbHNlO1xuICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpe1xuICAgICAgICAgICAgdHJpZ2dlciA9IHRyaWdnZXIgfHwgbm9kZUxpc3RDb250YWlucyhlbnRyeS5yZW1vdmVkTm9kZXMsIGNhbnZhcyk7XG4gICAgICAgICAgICB0cmlnZ2VyID0gdHJpZ2dlciAmJiAhbm9kZUxpc3RDb250YWlucyhlbnRyeS5hZGRlZE5vZGVzLCBjYW52YXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cmlnZ2VyKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcigpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudCwge1xuICAgICAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgICAgIHN1YnRyZWU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gb2JzZXJ2ZXI7XG59XG5jb25zdCBkcnBMaXN0ZW5pbmdDaGFydHMgPSBuZXcgTWFwKCk7XG5sZXQgb2xkRGV2aWNlUGl4ZWxSYXRpbyA9IDA7XG5mdW5jdGlvbiBvbldpbmRvd1Jlc2l6ZSgpIHtcbiAgICBjb25zdCBkcHIgPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcbiAgICBpZiAoZHByID09PSBvbGREZXZpY2VQaXhlbFJhdGlvKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgb2xkRGV2aWNlUGl4ZWxSYXRpbyA9IGRwcjtcbiAgICBkcnBMaXN0ZW5pbmdDaGFydHMuZm9yRWFjaCgocmVzaXplLCBjaGFydCk9PntcbiAgICAgICAgaWYgKGNoYXJ0LmN1cnJlbnREZXZpY2VQaXhlbFJhdGlvICE9PSBkcHIpIHtcbiAgICAgICAgICAgIHJlc2l6ZSgpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5mdW5jdGlvbiBsaXN0ZW5EZXZpY2VQaXhlbFJhdGlvQ2hhbmdlcyhjaGFydCwgcmVzaXplKSB7XG4gICAgaWYgKCFkcnBMaXN0ZW5pbmdDaGFydHMuc2l6ZSkge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgb25XaW5kb3dSZXNpemUpO1xuICAgIH1cbiAgICBkcnBMaXN0ZW5pbmdDaGFydHMuc2V0KGNoYXJ0LCByZXNpemUpO1xufVxuZnVuY3Rpb24gdW5saXN0ZW5EZXZpY2VQaXhlbFJhdGlvQ2hhbmdlcyhjaGFydCkge1xuICAgIGRycExpc3RlbmluZ0NoYXJ0cy5kZWxldGUoY2hhcnQpO1xuICAgIGlmICghZHJwTGlzdGVuaW5nQ2hhcnRzLnNpemUpIHtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uV2luZG93UmVzaXplKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjcmVhdGVSZXNpemVPYnNlcnZlcihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgICBjb25zdCBjYW52YXMgPSBjaGFydC5jYW52YXM7XG4gICAgY29uc3QgY29udGFpbmVyID0gY2FudmFzICYmIF9nZXRQYXJlbnROb2RlKGNhbnZhcyk7XG4gICAgaWYgKCFjb250YWluZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCByZXNpemUgPSB0aHJvdHRsZWQoKHdpZHRoLCBoZWlnaHQpPT57XG4gICAgICAgIGNvbnN0IHcgPSBjb250YWluZXIuY2xpZW50V2lkdGg7XG4gICAgICAgIGxpc3RlbmVyKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICBpZiAodyA8IGNvbnRhaW5lci5jbGllbnRXaWR0aCkge1xuICAgICAgICAgICAgbGlzdGVuZXIoKTtcbiAgICAgICAgfVxuICAgIH0sIHdpbmRvdyk7XG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoKGVudHJpZXMpPT57XG4gICAgICAgIGNvbnN0IGVudHJ5ID0gZW50cmllc1swXTtcbiAgICAgICAgY29uc3Qgd2lkdGggPSBlbnRyeS5jb250ZW50UmVjdC53aWR0aDtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gZW50cnkuY29udGVudFJlY3QuaGVpZ2h0O1xuICAgICAgICBpZiAod2lkdGggPT09IDAgJiYgaGVpZ2h0ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmVzaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgIH0pO1xuICAgIG9ic2VydmVyLm9ic2VydmUoY29udGFpbmVyKTtcbiAgICBsaXN0ZW5EZXZpY2VQaXhlbFJhdGlvQ2hhbmdlcyhjaGFydCwgcmVzaXplKTtcbiAgICByZXR1cm4gb2JzZXJ2ZXI7XG59XG5mdW5jdGlvbiByZWxlYXNlT2JzZXJ2ZXIoY2hhcnQsIHR5cGUsIG9ic2VydmVyKSB7XG4gICAgaWYgKG9ic2VydmVyKSB7XG4gICAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09ICdyZXNpemUnKSB7XG4gICAgICAgIHVubGlzdGVuRGV2aWNlUGl4ZWxSYXRpb0NoYW5nZXMoY2hhcnQpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZVByb3h5QW5kTGlzdGVuKGNoYXJ0LCB0eXBlLCBsaXN0ZW5lcikge1xuICAgIGNvbnN0IGNhbnZhcyA9IGNoYXJ0LmNhbnZhcztcbiAgICBjb25zdCBwcm94eSA9IHRocm90dGxlZCgoZXZlbnQpPT57XG4gICAgICAgIGlmIChjaGFydC5jdHggIT09IG51bGwpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyKGZyb21OYXRpdmVFdmVudChldmVudCwgY2hhcnQpKTtcbiAgICAgICAgfVxuICAgIH0sIGNoYXJ0KTtcbiAgICBhZGRMaXN0ZW5lcihjYW52YXMsIHR5cGUsIHByb3h5KTtcbiAgICByZXR1cm4gcHJveHk7XG59XG4gY2xhc3MgRG9tUGxhdGZvcm0gZXh0ZW5kcyBCYXNlUGxhdGZvcm0ge1xuIGFjcXVpcmVDb250ZXh0KGNhbnZhcywgYXNwZWN0UmF0aW8pIHtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IGNhbnZhcyAmJiBjYW52YXMuZ2V0Q29udGV4dCAmJiBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5jYW52YXMgPT09IGNhbnZhcykge1xuICAgICAgICAgICAgaW5pdENhbnZhcyhjYW52YXMsIGFzcGVjdFJhdGlvKTtcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiByZWxlYXNlQ29udGV4dChjb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IGNvbnRleHQuY2FudmFzO1xuICAgICAgICBpZiAoIWNhbnZhc1tFWFBBTkRPX0tFWV0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbml0aWFsID0gY2FudmFzW0VYUEFORE9fS0VZXS5pbml0aWFsO1xuICAgICAgICBbXG4gICAgICAgICAgICAnaGVpZ2h0JyxcbiAgICAgICAgICAgICd3aWR0aCdcbiAgICAgICAgXS5mb3JFYWNoKChwcm9wKT0+e1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBpbml0aWFsW3Byb3BdO1xuICAgICAgICAgICAgaWYgKGlzTnVsbE9yVW5kZWYodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgY2FudmFzLnJlbW92ZUF0dHJpYnV0ZShwcm9wKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2FudmFzLnNldEF0dHJpYnV0ZShwcm9wLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBzdHlsZSA9IGluaXRpYWwuc3R5bGUgfHwge307XG4gICAgICAgIE9iamVjdC5rZXlzKHN0eWxlKS5mb3JFYWNoKChrZXkpPT57XG4gICAgICAgICAgICBjYW52YXMuc3R5bGVba2V5XSA9IHN0eWxlW2tleV07XG4gICAgICAgIH0pO1xuICAgICAgICBjYW52YXMud2lkdGggPSBjYW52YXMud2lkdGg7XG4gICAgICAgIGRlbGV0ZSBjYW52YXNbRVhQQU5ET19LRVldO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gYWRkRXZlbnRMaXN0ZW5lcihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKGNoYXJ0LCB0eXBlKTtcbiAgICAgICAgY29uc3QgcHJveGllcyA9IGNoYXJ0LiRwcm94aWVzIHx8IChjaGFydC4kcHJveGllcyA9IHt9KTtcbiAgICAgICAgY29uc3QgaGFuZGxlcnMgPSB7XG4gICAgICAgICAgICBhdHRhY2g6IGNyZWF0ZUF0dGFjaE9ic2VydmVyLFxuICAgICAgICAgICAgZGV0YWNoOiBjcmVhdGVEZXRhY2hPYnNlcnZlcixcbiAgICAgICAgICAgIHJlc2l6ZTogY3JlYXRlUmVzaXplT2JzZXJ2ZXJcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgaGFuZGxlciA9IGhhbmRsZXJzW3R5cGVdIHx8IGNyZWF0ZVByb3h5QW5kTGlzdGVuO1xuICAgICAgICBwcm94aWVzW3R5cGVdID0gaGFuZGxlcihjaGFydCwgdHlwZSwgbGlzdGVuZXIpO1xuICAgIH1cbiByZW1vdmVFdmVudExpc3RlbmVyKGNoYXJ0LCB0eXBlKSB7XG4gICAgICAgIGNvbnN0IHByb3hpZXMgPSBjaGFydC4kcHJveGllcyB8fCAoY2hhcnQuJHByb3hpZXMgPSB7fSk7XG4gICAgICAgIGNvbnN0IHByb3h5ID0gcHJveGllc1t0eXBlXTtcbiAgICAgICAgaWYgKCFwcm94eSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhhbmRsZXJzID0ge1xuICAgICAgICAgICAgYXR0YWNoOiByZWxlYXNlT2JzZXJ2ZXIsXG4gICAgICAgICAgICBkZXRhY2g6IHJlbGVhc2VPYnNlcnZlcixcbiAgICAgICAgICAgIHJlc2l6ZTogcmVsZWFzZU9ic2VydmVyXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBoYW5kbGVyc1t0eXBlXSB8fCByZW1vdmVMaXN0ZW5lcjtcbiAgICAgICAgaGFuZGxlcihjaGFydCwgdHlwZSwgcHJveHkpO1xuICAgICAgICBwcm94aWVzW3R5cGVdID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBnZXREZXZpY2VQaXhlbFJhdGlvKCkge1xuICAgICAgICByZXR1cm4gd2luZG93LmRldmljZVBpeGVsUmF0aW87XG4gICAgfVxuIGdldE1heGltdW1TaXplKGNhbnZhcywgd2lkdGgsIGhlaWdodCwgYXNwZWN0UmF0aW8pIHtcbiAgICAgICAgcmV0dXJuIGdldE1heGltdW1TaXplKGNhbnZhcywgd2lkdGgsIGhlaWdodCwgYXNwZWN0UmF0aW8pO1xuICAgIH1cbiBpc0F0dGFjaGVkKGNhbnZhcykge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBfZ2V0UGFyZW50Tm9kZShjYW52YXMpO1xuICAgICAgICByZXR1cm4gISEoY29udGFpbmVyICYmIGNvbnRhaW5lci5pc0Nvbm5lY3RlZCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBfZGV0ZWN0UGxhdGZvcm0oY2FudmFzKSB7XG4gICAgaWYgKCFfaXNEb21TdXBwb3J0ZWQoKSB8fCB0eXBlb2YgT2Zmc2NyZWVuQ2FudmFzICE9PSAndW5kZWZpbmVkJyAmJiBjYW52YXMgaW5zdGFuY2VvZiBPZmZzY3JlZW5DYW52YXMpIHtcbiAgICAgICAgcmV0dXJuIEJhc2ljUGxhdGZvcm07XG4gICAgfVxuICAgIHJldHVybiBEb21QbGF0Zm9ybTtcbn1cblxuY2xhc3MgRWxlbWVudCB7XG4gICAgc3RhdGljIGRlZmF1bHRzID0ge307XG4gICAgc3RhdGljIGRlZmF1bHRSb3V0ZXMgPSB1bmRlZmluZWQ7XG4gICAgeDtcbiAgICB5O1xuICAgIGFjdGl2ZSA9IGZhbHNlO1xuICAgIG9wdGlvbnM7XG4gICAgJGFuaW1hdGlvbnM7XG4gICAgdG9vbHRpcFBvc2l0aW9uKHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgY29uc3QgeyB4ICwgeSAgfSA9IHRoaXMuZ2V0UHJvcHMoW1xuICAgICAgICAgICAgJ3gnLFxuICAgICAgICAgICAgJ3knXG4gICAgICAgIF0sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeCxcbiAgICAgICAgICAgIHlcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaGFzVmFsdWUoKSB7XG4gICAgICAgIHJldHVybiBpc051bWJlcih0aGlzLngpICYmIGlzTnVtYmVyKHRoaXMueSk7XG4gICAgfVxuICAgIGdldFByb3BzKHByb3BzLCBmaW5hbCkge1xuICAgICAgICBjb25zdCBhbmltcyA9IHRoaXMuJGFuaW1hdGlvbnM7XG4gICAgICAgIGlmICghZmluYWwgfHwgIWFuaW1zKSB7XG4gICAgICAgICAgICAvLyBsZXQncyBub3QgY3JlYXRlIGFuIG9iamVjdCwgaWYgbm90IG5lZWRlZFxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmV0ID0ge307XG4gICAgICAgIHByb3BzLmZvckVhY2goKHByb3ApPT57XG4gICAgICAgICAgICByZXRbcHJvcF0gPSBhbmltc1twcm9wXSAmJiBhbmltc1twcm9wXS5hY3RpdmUoKSA/IGFuaW1zW3Byb3BdLl90byA6IHRoaXNbcHJvcF07XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gYXV0b1NraXAoc2NhbGUsIHRpY2tzKSB7XG4gICAgY29uc3QgdGlja09wdHMgPSBzY2FsZS5vcHRpb25zLnRpY2tzO1xuICAgIGNvbnN0IGRldGVybWluZWRNYXhUaWNrcyA9IGRldGVybWluZU1heFRpY2tzKHNjYWxlKTtcbiAgICBjb25zdCB0aWNrc0xpbWl0ID0gTWF0aC5taW4odGlja09wdHMubWF4VGlja3NMaW1pdCB8fCBkZXRlcm1pbmVkTWF4VGlja3MsIGRldGVybWluZWRNYXhUaWNrcyk7XG4gICAgY29uc3QgbWFqb3JJbmRpY2VzID0gdGlja09wdHMubWFqb3IuZW5hYmxlZCA/IGdldE1ham9ySW5kaWNlcyh0aWNrcykgOiBbXTtcbiAgICBjb25zdCBudW1NYWpvckluZGljZXMgPSBtYWpvckluZGljZXMubGVuZ3RoO1xuICAgIGNvbnN0IGZpcnN0ID0gbWFqb3JJbmRpY2VzWzBdO1xuICAgIGNvbnN0IGxhc3QgPSBtYWpvckluZGljZXNbbnVtTWFqb3JJbmRpY2VzIC0gMV07XG4gICAgY29uc3QgbmV3VGlja3MgPSBbXTtcbiAgICBpZiAobnVtTWFqb3JJbmRpY2VzID4gdGlja3NMaW1pdCkge1xuICAgICAgICBza2lwTWFqb3JzKHRpY2tzLCBuZXdUaWNrcywgbWFqb3JJbmRpY2VzLCBudW1NYWpvckluZGljZXMgLyB0aWNrc0xpbWl0KTtcbiAgICAgICAgcmV0dXJuIG5ld1RpY2tzO1xuICAgIH1cbiAgICBjb25zdCBzcGFjaW5nID0gY2FsY3VsYXRlU3BhY2luZyhtYWpvckluZGljZXMsIHRpY2tzLCB0aWNrc0xpbWl0KTtcbiAgICBpZiAobnVtTWFqb3JJbmRpY2VzID4gMCkge1xuICAgICAgICBsZXQgaSwgaWxlbjtcbiAgICAgICAgY29uc3QgYXZnTWFqb3JTcGFjaW5nID0gbnVtTWFqb3JJbmRpY2VzID4gMSA/IE1hdGgucm91bmQoKGxhc3QgLSBmaXJzdCkgLyAobnVtTWFqb3JJbmRpY2VzIC0gMSkpIDogbnVsbDtcbiAgICAgICAgc2tpcCh0aWNrcywgbmV3VGlja3MsIHNwYWNpbmcsIGlzTnVsbE9yVW5kZWYoYXZnTWFqb3JTcGFjaW5nKSA/IDAgOiBmaXJzdCAtIGF2Z01ham9yU3BhY2luZywgZmlyc3QpO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBudW1NYWpvckluZGljZXMgLSAxOyBpIDwgaWxlbjsgaSsrKXtcbiAgICAgICAgICAgIHNraXAodGlja3MsIG5ld1RpY2tzLCBzcGFjaW5nLCBtYWpvckluZGljZXNbaV0sIG1ham9ySW5kaWNlc1tpICsgMV0pO1xuICAgICAgICB9XG4gICAgICAgIHNraXAodGlja3MsIG5ld1RpY2tzLCBzcGFjaW5nLCBsYXN0LCBpc051bGxPclVuZGVmKGF2Z01ham9yU3BhY2luZykgPyB0aWNrcy5sZW5ndGggOiBsYXN0ICsgYXZnTWFqb3JTcGFjaW5nKTtcbiAgICAgICAgcmV0dXJuIG5ld1RpY2tzO1xuICAgIH1cbiAgICBza2lwKHRpY2tzLCBuZXdUaWNrcywgc3BhY2luZyk7XG4gICAgcmV0dXJuIG5ld1RpY2tzO1xufVxuZnVuY3Rpb24gZGV0ZXJtaW5lTWF4VGlja3Moc2NhbGUpIHtcbiAgICBjb25zdCBvZmZzZXQgPSBzY2FsZS5vcHRpb25zLm9mZnNldDtcbiAgICBjb25zdCB0aWNrTGVuZ3RoID0gc2NhbGUuX3RpY2tTaXplKCk7XG4gICAgY29uc3QgbWF4U2NhbGUgPSBzY2FsZS5fbGVuZ3RoIC8gdGlja0xlbmd0aCArIChvZmZzZXQgPyAwIDogMSk7XG4gICAgY29uc3QgbWF4Q2hhcnQgPSBzY2FsZS5fbWF4TGVuZ3RoIC8gdGlja0xlbmd0aDtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLm1pbihtYXhTY2FsZSwgbWF4Q2hhcnQpKTtcbn1cbiBmdW5jdGlvbiBjYWxjdWxhdGVTcGFjaW5nKG1ham9ySW5kaWNlcywgdGlja3MsIHRpY2tzTGltaXQpIHtcbiAgICBjb25zdCBldmVuTWFqb3JTcGFjaW5nID0gZ2V0RXZlblNwYWNpbmcobWFqb3JJbmRpY2VzKTtcbiAgICBjb25zdCBzcGFjaW5nID0gdGlja3MubGVuZ3RoIC8gdGlja3NMaW1pdDtcbiAgICBpZiAoIWV2ZW5NYWpvclNwYWNpbmcpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KHNwYWNpbmcsIDEpO1xuICAgIH1cbiAgICBjb25zdCBmYWN0b3JzID0gX2ZhY3Rvcml6ZShldmVuTWFqb3JTcGFjaW5nKTtcbiAgICBmb3IobGV0IGkgPSAwLCBpbGVuID0gZmFjdG9ycy5sZW5ndGggLSAxOyBpIDwgaWxlbjsgaSsrKXtcbiAgICAgICAgY29uc3QgZmFjdG9yID0gZmFjdG9yc1tpXTtcbiAgICAgICAgaWYgKGZhY3RvciA+IHNwYWNpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWN0b3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIE1hdGgubWF4KHNwYWNpbmcsIDEpO1xufVxuIGZ1bmN0aW9uIGdldE1ham9ySW5kaWNlcyh0aWNrcykge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGxldCBpLCBpbGVuO1xuICAgIGZvcihpID0gMCwgaWxlbiA9IHRpY2tzLmxlbmd0aDsgaSA8IGlsZW47IGkrKyl7XG4gICAgICAgIGlmICh0aWNrc1tpXS5tYWpvcikge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goaSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbiBmdW5jdGlvbiBza2lwTWFqb3JzKHRpY2tzLCBuZXdUaWNrcywgbWFqb3JJbmRpY2VzLCBzcGFjaW5nKSB7XG4gICAgbGV0IGNvdW50ID0gMDtcbiAgICBsZXQgbmV4dCA9IG1ham9ySW5kaWNlc1swXTtcbiAgICBsZXQgaTtcbiAgICBzcGFjaW5nID0gTWF0aC5jZWlsKHNwYWNpbmcpO1xuICAgIGZvcihpID0gMDsgaSA8IHRpY2tzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgaWYgKGkgPT09IG5leHQpIHtcbiAgICAgICAgICAgIG5ld1RpY2tzLnB1c2godGlja3NbaV0pO1xuICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgIG5leHQgPSBtYWpvckluZGljZXNbY291bnQgKiBzcGFjaW5nXTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiBmdW5jdGlvbiBza2lwKHRpY2tzLCBuZXdUaWNrcywgc3BhY2luZywgbWFqb3JTdGFydCwgbWFqb3JFbmQpIHtcbiAgICBjb25zdCBzdGFydCA9IHZhbHVlT3JEZWZhdWx0KG1ham9yU3RhcnQsIDApO1xuICAgIGNvbnN0IGVuZCA9IE1hdGgubWluKHZhbHVlT3JEZWZhdWx0KG1ham9yRW5kLCB0aWNrcy5sZW5ndGgpLCB0aWNrcy5sZW5ndGgpO1xuICAgIGxldCBjb3VudCA9IDA7XG4gICAgbGV0IGxlbmd0aCwgaSwgbmV4dDtcbiAgICBzcGFjaW5nID0gTWF0aC5jZWlsKHNwYWNpbmcpO1xuICAgIGlmIChtYWpvckVuZCkge1xuICAgICAgICBsZW5ndGggPSBtYWpvckVuZCAtIG1ham9yU3RhcnQ7XG4gICAgICAgIHNwYWNpbmcgPSBsZW5ndGggLyBNYXRoLmZsb29yKGxlbmd0aCAvIHNwYWNpbmcpO1xuICAgIH1cbiAgICBuZXh0ID0gc3RhcnQ7XG4gICAgd2hpbGUobmV4dCA8IDApe1xuICAgICAgICBjb3VudCsrO1xuICAgICAgICBuZXh0ID0gTWF0aC5yb3VuZChzdGFydCArIGNvdW50ICogc3BhY2luZyk7XG4gICAgfVxuICAgIGZvcihpID0gTWF0aC5tYXgoc3RhcnQsIDApOyBpIDwgZW5kOyBpKyspe1xuICAgICAgICBpZiAoaSA9PT0gbmV4dCkge1xuICAgICAgICAgICAgbmV3VGlja3MucHVzaCh0aWNrc1tpXSk7XG4gICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgICAgbmV4dCA9IE1hdGgucm91bmQoc3RhcnQgKyBjb3VudCAqIHNwYWNpbmcpO1xuICAgICAgICB9XG4gICAgfVxufVxuIGZ1bmN0aW9uIGdldEV2ZW5TcGFjaW5nKGFycikge1xuICAgIGNvbnN0IGxlbiA9IGFyci5sZW5ndGg7XG4gICAgbGV0IGksIGRpZmY7XG4gICAgaWYgKGxlbiA8IDIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IoZGlmZiA9IGFyclswXSwgaSA9IDE7IGkgPCBsZW47ICsraSl7XG4gICAgICAgIGlmIChhcnJbaV0gLSBhcnJbaSAtIDFdICE9PSBkaWZmKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRpZmY7XG59XG5cbmNvbnN0IHJldmVyc2VBbGlnbiA9IChhbGlnbik9PmFsaWduID09PSAnbGVmdCcgPyAncmlnaHQnIDogYWxpZ24gPT09ICdyaWdodCcgPyAnbGVmdCcgOiBhbGlnbjtcbmNvbnN0IG9mZnNldEZyb21FZGdlID0gKHNjYWxlLCBlZGdlLCBvZmZzZXQpPT5lZGdlID09PSAndG9wJyB8fCBlZGdlID09PSAnbGVmdCcgPyBzY2FsZVtlZGdlXSArIG9mZnNldCA6IHNjYWxlW2VkZ2VdIC0gb2Zmc2V0O1xuY29uc3QgZ2V0VGlja3NMaW1pdCA9ICh0aWNrc0xlbmd0aCwgbWF4VGlja3NMaW1pdCk9Pk1hdGgubWluKG1heFRpY2tzTGltaXQgfHwgdGlja3NMZW5ndGgsIHRpY2tzTGVuZ3RoKTtcbiBmdW5jdGlvbiBzYW1wbGUoYXJyLCBudW1JdGVtcykge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGNvbnN0IGluY3JlbWVudCA9IGFyci5sZW5ndGggLyBudW1JdGVtcztcbiAgICBjb25zdCBsZW4gPSBhcnIubGVuZ3RoO1xuICAgIGxldCBpID0gMDtcbiAgICBmb3IoOyBpIDwgbGVuOyBpICs9IGluY3JlbWVudCl7XG4gICAgICAgIHJlc3VsdC5wdXNoKGFycltNYXRoLmZsb29yKGkpXSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4gZnVuY3Rpb24gZ2V0UGl4ZWxGb3JHcmlkTGluZShzY2FsZSwgaW5kZXgsIG9mZnNldEdyaWRMaW5lcykge1xuICAgIGNvbnN0IGxlbmd0aCA9IHNjYWxlLnRpY2tzLmxlbmd0aDtcbiAgICBjb25zdCB2YWxpZEluZGV4ID0gTWF0aC5taW4oaW5kZXgsIGxlbmd0aCAtIDEpO1xuICAgIGNvbnN0IHN0YXJ0ID0gc2NhbGUuX3N0YXJ0UGl4ZWw7XG4gICAgY29uc3QgZW5kID0gc2NhbGUuX2VuZFBpeGVsO1xuICAgIGNvbnN0IGVwc2lsb24gPSAxZS02O1xuICAgIGxldCBsaW5lVmFsdWUgPSBzY2FsZS5nZXRQaXhlbEZvclRpY2sodmFsaWRJbmRleCk7XG4gICAgbGV0IG9mZnNldDtcbiAgICBpZiAob2Zmc2V0R3JpZExpbmVzKSB7XG4gICAgICAgIGlmIChsZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIG9mZnNldCA9IE1hdGgubWF4KGxpbmVWYWx1ZSAtIHN0YXJ0LCBlbmQgLSBsaW5lVmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICBvZmZzZXQgPSAoc2NhbGUuZ2V0UGl4ZWxGb3JUaWNrKDEpIC0gbGluZVZhbHVlKSAvIDI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvZmZzZXQgPSAobGluZVZhbHVlIC0gc2NhbGUuZ2V0UGl4ZWxGb3JUaWNrKHZhbGlkSW5kZXggLSAxKSkgLyAyO1xuICAgICAgICB9XG4gICAgICAgIGxpbmVWYWx1ZSArPSB2YWxpZEluZGV4IDwgaW5kZXggPyBvZmZzZXQgOiAtb2Zmc2V0O1xuICAgICAgICBpZiAobGluZVZhbHVlIDwgc3RhcnQgLSBlcHNpbG9uIHx8IGxpbmVWYWx1ZSA+IGVuZCArIGVwc2lsb24pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbGluZVZhbHVlO1xufVxuIGZ1bmN0aW9uIGdhcmJhZ2VDb2xsZWN0KGNhY2hlcywgbGVuZ3RoKSB7XG4gICAgZWFjaChjYWNoZXMsIChjYWNoZSk9PntcbiAgICAgICAgY29uc3QgZ2MgPSBjYWNoZS5nYztcbiAgICAgICAgY29uc3QgZ2NMZW4gPSBnYy5sZW5ndGggLyAyO1xuICAgICAgICBsZXQgaTtcbiAgICAgICAgaWYgKGdjTGVuID4gbGVuZ3RoKSB7XG4gICAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBnY0xlbjsgKytpKXtcbiAgICAgICAgICAgICAgICBkZWxldGUgY2FjaGUuZGF0YVtnY1tpXV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnYy5zcGxpY2UoMCwgZ2NMZW4pO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4gZnVuY3Rpb24gZ2V0VGlja01hcmtMZW5ndGgob3B0aW9ucykge1xuICAgIHJldHVybiBvcHRpb25zLmRyYXdUaWNrcyA/IG9wdGlvbnMudGlja0xlbmd0aCA6IDA7XG59XG4gZnVuY3Rpb24gZ2V0VGl0bGVIZWlnaHQob3B0aW9ucywgZmFsbGJhY2spIHtcbiAgICBpZiAoIW9wdGlvbnMuZGlzcGxheSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgY29uc3QgZm9udCA9IHRvRm9udChvcHRpb25zLmZvbnQsIGZhbGxiYWNrKTtcbiAgICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKG9wdGlvbnMucGFkZGluZyk7XG4gICAgY29uc3QgbGluZXMgPSBpc0FycmF5KG9wdGlvbnMudGV4dCkgPyBvcHRpb25zLnRleHQubGVuZ3RoIDogMTtcbiAgICByZXR1cm4gbGluZXMgKiBmb250LmxpbmVIZWlnaHQgKyBwYWRkaW5nLmhlaWdodDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVNjYWxlQ29udGV4dChwYXJlbnQsIHNjYWxlKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUNvbnRleHQocGFyZW50LCB7XG4gICAgICAgIHNjYWxlLFxuICAgICAgICB0eXBlOiAnc2NhbGUnXG4gICAgfSk7XG59XG5mdW5jdGlvbiBjcmVhdGVUaWNrQ29udGV4dChwYXJlbnQsIGluZGV4LCB0aWNrKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUNvbnRleHQocGFyZW50LCB7XG4gICAgICAgIHRpY2ssXG4gICAgICAgIGluZGV4LFxuICAgICAgICB0eXBlOiAndGljaydcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHRpdGxlQWxpZ24oYWxpZ24sIHBvc2l0aW9uLCByZXZlcnNlKSB7XG4gICAgIGxldCByZXQgPSBfdG9MZWZ0UmlnaHRDZW50ZXIoYWxpZ24pO1xuICAgIGlmIChyZXZlcnNlICYmIHBvc2l0aW9uICE9PSAncmlnaHQnIHx8ICFyZXZlcnNlICYmIHBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgIHJldCA9IHJldmVyc2VBbGlnbihyZXQpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufVxuZnVuY3Rpb24gdGl0bGVBcmdzKHNjYWxlLCBvZmZzZXQsIHBvc2l0aW9uLCBhbGlnbikge1xuICAgIGNvbnN0IHsgdG9wICwgbGVmdCAsIGJvdHRvbSAsIHJpZ2h0ICwgY2hhcnQgIH0gPSBzY2FsZTtcbiAgICBjb25zdCB7IGNoYXJ0QXJlYSAsIHNjYWxlcyAgfSA9IGNoYXJ0O1xuICAgIGxldCByb3RhdGlvbiA9IDA7XG4gICAgbGV0IG1heFdpZHRoLCB0aXRsZVgsIHRpdGxlWTtcbiAgICBjb25zdCBoZWlnaHQgPSBib3R0b20gLSB0b3A7XG4gICAgY29uc3Qgd2lkdGggPSByaWdodCAtIGxlZnQ7XG4gICAgaWYgKHNjYWxlLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgIHRpdGxlWCA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCBsZWZ0LCByaWdodCk7XG4gICAgICAgIGlmIChpc09iamVjdChwb3NpdGlvbikpIHtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uQXhpc0lEID0gT2JqZWN0LmtleXMocG9zaXRpb24pWzBdO1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBwb3NpdGlvbltwb3NpdGlvbkF4aXNJRF07XG4gICAgICAgICAgICB0aXRsZVkgPSBzY2FsZXNbcG9zaXRpb25BeGlzSURdLmdldFBpeGVsRm9yVmFsdWUodmFsdWUpICsgaGVpZ2h0IC0gb2Zmc2V0O1xuICAgICAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgdGl0bGVZID0gKGNoYXJ0QXJlYS5ib3R0b20gKyBjaGFydEFyZWEudG9wKSAvIDIgKyBoZWlnaHQgLSBvZmZzZXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aXRsZVkgPSBvZmZzZXRGcm9tRWRnZShzY2FsZSwgcG9zaXRpb24sIG9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgICAgbWF4V2lkdGggPSByaWdodCAtIGxlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzT2JqZWN0KHBvc2l0aW9uKSkge1xuICAgICAgICAgICAgY29uc3QgcG9zaXRpb25BeGlzSUQgPSBPYmplY3Qua2V5cyhwb3NpdGlvbilbMF07XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHBvc2l0aW9uW3Bvc2l0aW9uQXhpc0lEXTtcbiAgICAgICAgICAgIHRpdGxlWCA9IHNjYWxlc1twb3NpdGlvbkF4aXNJRF0uZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkgLSB3aWR0aCArIG9mZnNldDtcbiAgICAgICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgIHRpdGxlWCA9IChjaGFydEFyZWEubGVmdCArIGNoYXJ0QXJlYS5yaWdodCkgLyAyIC0gd2lkdGggKyBvZmZzZXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aXRsZVggPSBvZmZzZXRGcm9tRWRnZShzY2FsZSwgcG9zaXRpb24sIG9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgICAgdGl0bGVZID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIGJvdHRvbSwgdG9wKTtcbiAgICAgICAgcm90YXRpb24gPSBwb3NpdGlvbiA9PT0gJ2xlZnQnID8gLUhBTEZfUEkgOiBIQUxGX1BJO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICB0aXRsZVgsXG4gICAgICAgIHRpdGxlWSxcbiAgICAgICAgbWF4V2lkdGgsXG4gICAgICAgIHJvdGF0aW9uXG4gICAgfTtcbn1cbmNsYXNzIFNjYWxlIGV4dGVuZHMgRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoY2ZnKXtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgIHRoaXMuaWQgPSBjZmcuaWQ7XG4gICAgICAgICB0aGlzLnR5cGUgPSBjZmcudHlwZTtcbiAgICAgICAgIHRoaXMub3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMuY3R4ID0gY2ZnLmN0eDtcbiAgICAgICAgIHRoaXMuY2hhcnQgPSBjZmcuY2hhcnQ7XG4gICAgICAgICB0aGlzLnRvcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMuYm90dG9tID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5sZWZ0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5yaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMud2lkdGggPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLmhlaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fbWFyZ2lucyA9IHtcbiAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgIGJvdHRvbTogMFxuICAgICAgICB9O1xuICAgICAgICAgdGhpcy5tYXhXaWR0aCA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMubWF4SGVpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5wYWRkaW5nVG9wID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5wYWRkaW5nQm90dG9tID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5wYWRkaW5nTGVmdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMucGFkZGluZ1JpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5heGlzID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5sYWJlbFJvdGF0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm1pbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5tYXggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3JhbmdlID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy50aWNrcyA9IFtdO1xuICAgICAgICAgdGhpcy5fZ3JpZExpbmVJdGVtcyA9IG51bGw7XG4gICAgICAgICB0aGlzLl9sYWJlbEl0ZW1zID0gbnVsbDtcbiAgICAgICAgIHRoaXMuX2xhYmVsU2l6ZXMgPSBudWxsO1xuICAgICAgICB0aGlzLl9sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLl9tYXhMZW5ndGggPSAwO1xuICAgICAgICB0aGlzLl9sb25nZXN0VGV4dENhY2hlID0ge307XG4gICAgICAgICB0aGlzLl9zdGFydFBpeGVsID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5fZW5kUGl4ZWwgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3JldmVyc2VQaXhlbHMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fdXNlck1heCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fdXNlck1pbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fc3VnZ2VzdGVkTWF4ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9zdWdnZXN0ZWRNaW4gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3RpY2tzTGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5fYm9yZGVyVmFsdWUgPSAwO1xuICAgICAgICB0aGlzLl9jYWNoZSA9IHt9O1xuICAgICAgICB0aGlzLl9kYXRhTGltaXRzQ2FjaGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuJGNvbnRleHQgPSB1bmRlZmluZWQ7XG4gICAgfVxuIGluaXQob3B0aW9ucykge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICB0aGlzLmF4aXMgPSBvcHRpb25zLmF4aXM7XG4gICAgICAgIHRoaXMuX3VzZXJNaW4gPSB0aGlzLnBhcnNlKG9wdGlvbnMubWluKTtcbiAgICAgICAgdGhpcy5fdXNlck1heCA9IHRoaXMucGFyc2Uob3B0aW9ucy5tYXgpO1xuICAgICAgICB0aGlzLl9zdWdnZXN0ZWRNaW4gPSB0aGlzLnBhcnNlKG9wdGlvbnMuc3VnZ2VzdGVkTWluKTtcbiAgICAgICAgdGhpcy5fc3VnZ2VzdGVkTWF4ID0gdGhpcy5wYXJzZShvcHRpb25zLnN1Z2dlc3RlZE1heCk7XG4gICAgfVxuIHBhcnNlKHJhdywgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHJhdztcbiAgICB9XG4gZ2V0VXNlckJvdW5kcygpIHtcbiAgICAgICAgbGV0IHsgX3VzZXJNaW4gLCBfdXNlck1heCAsIF9zdWdnZXN0ZWRNaW4gLCBfc3VnZ2VzdGVkTWF4ICB9ID0gdGhpcztcbiAgICAgICAgX3VzZXJNaW4gPSBmaW5pdGVPckRlZmF1bHQoX3VzZXJNaW4sIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSk7XG4gICAgICAgIF91c2VyTWF4ID0gZmluaXRlT3JEZWZhdWx0KF91c2VyTWF4LCBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkpO1xuICAgICAgICBfc3VnZ2VzdGVkTWluID0gZmluaXRlT3JEZWZhdWx0KF9zdWdnZXN0ZWRNaW4sIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSk7XG4gICAgICAgIF9zdWdnZXN0ZWRNYXggPSBmaW5pdGVPckRlZmF1bHQoX3N1Z2dlc3RlZE1heCwgTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1pbjogZmluaXRlT3JEZWZhdWx0KF91c2VyTWluLCBfc3VnZ2VzdGVkTWluKSxcbiAgICAgICAgICAgIG1heDogZmluaXRlT3JEZWZhdWx0KF91c2VyTWF4LCBfc3VnZ2VzdGVkTWF4KSxcbiAgICAgICAgICAgIG1pbkRlZmluZWQ6IGlzTnVtYmVyRmluaXRlKF91c2VyTWluKSxcbiAgICAgICAgICAgIG1heERlZmluZWQ6IGlzTnVtYmVyRmluaXRlKF91c2VyTWF4KVxuICAgICAgICB9O1xuICAgIH1cbiBnZXRNaW5NYXgoY2FuU3RhY2spIHtcbiAgICAgICAgbGV0IHsgbWluICwgbWF4ICwgbWluRGVmaW5lZCAsIG1heERlZmluZWQgIH0gPSB0aGlzLmdldFVzZXJCb3VuZHMoKTtcbiAgICAgICAgbGV0IHJhbmdlO1xuICAgICAgICBpZiAobWluRGVmaW5lZCAmJiBtYXhEZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1pbixcbiAgICAgICAgICAgICAgICBtYXhcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWV0YXMgPSB0aGlzLmdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKCk7XG4gICAgICAgIGZvcihsZXQgaSA9IDAsIGlsZW4gPSBtZXRhcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgcmFuZ2UgPSBtZXRhc1tpXS5jb250cm9sbGVyLmdldE1pbk1heCh0aGlzLCBjYW5TdGFjayk7XG4gICAgICAgICAgICBpZiAoIW1pbkRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBtaW4gPSBNYXRoLm1pbihtaW4sIHJhbmdlLm1pbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIW1heERlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIHJhbmdlLm1heCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbWluID0gbWF4RGVmaW5lZCAmJiBtaW4gPiBtYXggPyBtYXggOiBtaW47XG4gICAgICAgIG1heCA9IG1pbkRlZmluZWQgJiYgbWluID4gbWF4ID8gbWluIDogbWF4O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWluOiBmaW5pdGVPckRlZmF1bHQobWluLCBmaW5pdGVPckRlZmF1bHQobWF4LCBtaW4pKSxcbiAgICAgICAgICAgIG1heDogZmluaXRlT3JEZWZhdWx0KG1heCwgZmluaXRlT3JEZWZhdWx0KG1pbiwgbWF4KSlcbiAgICAgICAgfTtcbiAgICB9XG4gZ2V0UGFkZGluZygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxlZnQ6IHRoaXMucGFkZGluZ0xlZnQgfHwgMCxcbiAgICAgICAgICAgIHRvcDogdGhpcy5wYWRkaW5nVG9wIHx8IDAsXG4gICAgICAgICAgICByaWdodDogdGhpcy5wYWRkaW5nUmlnaHQgfHwgMCxcbiAgICAgICAgICAgIGJvdHRvbTogdGhpcy5wYWRkaW5nQm90dG9tIHx8IDBcbiAgICAgICAgfTtcbiAgICB9XG4gZ2V0VGlja3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRpY2tzO1xuICAgIH1cbiBnZXRMYWJlbHMoKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmNoYXJ0LmRhdGE7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMubGFiZWxzIHx8ICh0aGlzLmlzSG9yaXpvbnRhbCgpID8gZGF0YS54TGFiZWxzIDogZGF0YS55TGFiZWxzKSB8fCBkYXRhLmxhYmVscyB8fCBbXTtcbiAgICB9XG4gZ2V0TGFiZWxJdGVtcyhjaGFydEFyZWEgPSB0aGlzLmNoYXJ0LmNoYXJ0QXJlYSkge1xuICAgICAgICBjb25zdCBpdGVtcyA9IHRoaXMuX2xhYmVsSXRlbXMgfHwgKHRoaXMuX2xhYmVsSXRlbXMgPSB0aGlzLl9jb21wdXRlTGFiZWxJdGVtcyhjaGFydEFyZWEpKTtcbiAgICAgICAgcmV0dXJuIGl0ZW1zO1xuICAgIH1cbiAgICBiZWZvcmVMYXlvdXQoKSB7XG4gICAgICAgIHRoaXMuX2NhY2hlID0ge307XG4gICAgICAgIHRoaXMuX2RhdGFMaW1pdHNDYWNoZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgYmVmb3JlVXBkYXRlKCkge1xuICAgICAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlVXBkYXRlLCBbXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgIF0pO1xuICAgIH1cbiB1cGRhdGUobWF4V2lkdGgsIG1heEhlaWdodCwgbWFyZ2lucykge1xuICAgICAgICBjb25zdCB7IGJlZ2luQXRaZXJvICwgZ3JhY2UgLCB0aWNrczogdGlja09wdHMgIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHNhbXBsZVNpemUgPSB0aWNrT3B0cy5zYW1wbGVTaXplO1xuICAgICAgICB0aGlzLmJlZm9yZVVwZGF0ZSgpO1xuICAgICAgICB0aGlzLm1heFdpZHRoID0gbWF4V2lkdGg7XG4gICAgICAgIHRoaXMubWF4SGVpZ2h0ID0gbWF4SGVpZ2h0O1xuICAgICAgICB0aGlzLl9tYXJnaW5zID0gbWFyZ2lucyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgYm90dG9tOiAwXG4gICAgICAgIH0sIG1hcmdpbnMpO1xuICAgICAgICB0aGlzLnRpY2tzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fbGFiZWxTaXplcyA9IG51bGw7XG4gICAgICAgIHRoaXMuX2dyaWRMaW5lSXRlbXMgPSBudWxsO1xuICAgICAgICB0aGlzLl9sYWJlbEl0ZW1zID0gbnVsbDtcbiAgICAgICAgdGhpcy5iZWZvcmVTZXREaW1lbnNpb25zKCk7XG4gICAgICAgIHRoaXMuc2V0RGltZW5zaW9ucygpO1xuICAgICAgICB0aGlzLmFmdGVyU2V0RGltZW5zaW9ucygpO1xuICAgICAgICB0aGlzLl9tYXhMZW5ndGggPSB0aGlzLmlzSG9yaXpvbnRhbCgpID8gdGhpcy53aWR0aCArIG1hcmdpbnMubGVmdCArIG1hcmdpbnMucmlnaHQgOiB0aGlzLmhlaWdodCArIG1hcmdpbnMudG9wICsgbWFyZ2lucy5ib3R0b207XG4gICAgICAgIGlmICghdGhpcy5fZGF0YUxpbWl0c0NhY2hlZCkge1xuICAgICAgICAgICAgdGhpcy5iZWZvcmVEYXRhTGltaXRzKCk7XG4gICAgICAgICAgICB0aGlzLmRldGVybWluZURhdGFMaW1pdHMoKTtcbiAgICAgICAgICAgIHRoaXMuYWZ0ZXJEYXRhTGltaXRzKCk7XG4gICAgICAgICAgICB0aGlzLl9yYW5nZSA9IF9hZGRHcmFjZSh0aGlzLCBncmFjZSwgYmVnaW5BdFplcm8pO1xuICAgICAgICAgICAgdGhpcy5fZGF0YUxpbWl0c0NhY2hlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5iZWZvcmVCdWlsZFRpY2tzKCk7XG4gICAgICAgIHRoaXMudGlja3MgPSB0aGlzLmJ1aWxkVGlja3MoKSB8fCBbXTtcbiAgICAgICAgdGhpcy5hZnRlckJ1aWxkVGlja3MoKTtcbiAgICAgICAgY29uc3Qgc2FtcGxpbmdFbmFibGVkID0gc2FtcGxlU2l6ZSA8IHRoaXMudGlja3MubGVuZ3RoO1xuICAgICAgICB0aGlzLl9jb252ZXJ0VGlja3NUb0xhYmVscyhzYW1wbGluZ0VuYWJsZWQgPyBzYW1wbGUodGhpcy50aWNrcywgc2FtcGxlU2l6ZSkgOiB0aGlzLnRpY2tzKTtcbiAgICAgICAgdGhpcy5jb25maWd1cmUoKTtcbiAgICAgICAgdGhpcy5iZWZvcmVDYWxjdWxhdGVMYWJlbFJvdGF0aW9uKCk7XG4gICAgICAgIHRoaXMuY2FsY3VsYXRlTGFiZWxSb3RhdGlvbigpO1xuICAgICAgICB0aGlzLmFmdGVyQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbigpO1xuICAgICAgICBpZiAodGlja09wdHMuZGlzcGxheSAmJiAodGlja09wdHMuYXV0b1NraXAgfHwgdGlja09wdHMuc291cmNlID09PSAnYXV0bycpKSB7XG4gICAgICAgICAgICB0aGlzLnRpY2tzID0gYXV0b1NraXAodGhpcywgdGhpcy50aWNrcyk7XG4gICAgICAgICAgICB0aGlzLl9sYWJlbFNpemVzID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuYWZ0ZXJBdXRvU2tpcCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzYW1wbGluZ0VuYWJsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnZlcnRUaWNrc1RvTGFiZWxzKHRoaXMudGlja3MpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYmVmb3JlRml0KCk7XG4gICAgICAgIHRoaXMuZml0KCk7XG4gICAgICAgIHRoaXMuYWZ0ZXJGaXQoKTtcbiAgICAgICAgdGhpcy5hZnRlclVwZGF0ZSgpO1xuICAgIH1cbiBjb25maWd1cmUoKSB7XG4gICAgICAgIGxldCByZXZlcnNlUGl4ZWxzID0gdGhpcy5vcHRpb25zLnJldmVyc2U7XG4gICAgICAgIGxldCBzdGFydFBpeGVsLCBlbmRQaXhlbDtcbiAgICAgICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgIHN0YXJ0UGl4ZWwgPSB0aGlzLmxlZnQ7XG4gICAgICAgICAgICBlbmRQaXhlbCA9IHRoaXMucmlnaHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdGFydFBpeGVsID0gdGhpcy50b3A7XG4gICAgICAgICAgICBlbmRQaXhlbCA9IHRoaXMuYm90dG9tO1xuICAgICAgICAgICAgcmV2ZXJzZVBpeGVscyA9ICFyZXZlcnNlUGl4ZWxzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3N0YXJ0UGl4ZWwgPSBzdGFydFBpeGVsO1xuICAgICAgICB0aGlzLl9lbmRQaXhlbCA9IGVuZFBpeGVsO1xuICAgICAgICB0aGlzLl9yZXZlcnNlUGl4ZWxzID0gcmV2ZXJzZVBpeGVscztcbiAgICAgICAgdGhpcy5fbGVuZ3RoID0gZW5kUGl4ZWwgLSBzdGFydFBpeGVsO1xuICAgICAgICB0aGlzLl9hbGlnblRvUGl4ZWxzID0gdGhpcy5vcHRpb25zLmFsaWduVG9QaXhlbHM7XG4gICAgfVxuICAgIGFmdGVyVXBkYXRlKCkge1xuICAgICAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYWZ0ZXJVcGRhdGUsIFtcbiAgICAgICAgICAgIHRoaXNcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGJlZm9yZVNldERpbWVuc2lvbnMoKSB7XG4gICAgICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5iZWZvcmVTZXREaW1lbnNpb25zLCBbXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBzZXREaW1lbnNpb25zKCkge1xuICAgICAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMubWF4V2lkdGg7XG4gICAgICAgICAgICB0aGlzLmxlZnQgPSAwO1xuICAgICAgICAgICAgdGhpcy5yaWdodCA9IHRoaXMud2lkdGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMubWF4SGVpZ2h0O1xuICAgICAgICAgICAgdGhpcy50b3AgPSAwO1xuICAgICAgICAgICAgdGhpcy5ib3R0b20gPSB0aGlzLmhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBhZGRpbmdMZWZ0ID0gMDtcbiAgICAgICAgdGhpcy5wYWRkaW5nVG9wID0gMDtcbiAgICAgICAgdGhpcy5wYWRkaW5nUmlnaHQgPSAwO1xuICAgICAgICB0aGlzLnBhZGRpbmdCb3R0b20gPSAwO1xuICAgIH1cbiAgICBhZnRlclNldERpbWVuc2lvbnMoKSB7XG4gICAgICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlclNldERpbWVuc2lvbnMsIFtcbiAgICAgICAgICAgIHRoaXNcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIF9jYWxsSG9va3MobmFtZSkge1xuICAgICAgICB0aGlzLmNoYXJ0Lm5vdGlmeVBsdWdpbnMobmFtZSwgdGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnNbbmFtZV0sIFtcbiAgICAgICAgICAgIHRoaXNcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGJlZm9yZURhdGFMaW1pdHMoKSB7XG4gICAgICAgIHRoaXMuX2NhbGxIb29rcygnYmVmb3JlRGF0YUxpbWl0cycpO1xuICAgIH1cbiAgICBkZXRlcm1pbmVEYXRhTGltaXRzKCkge31cbiAgICBhZnRlckRhdGFMaW1pdHMoKSB7XG4gICAgICAgIHRoaXMuX2NhbGxIb29rcygnYWZ0ZXJEYXRhTGltaXRzJyk7XG4gICAgfVxuICAgIGJlZm9yZUJ1aWxkVGlja3MoKSB7XG4gICAgICAgIHRoaXMuX2NhbGxIb29rcygnYmVmb3JlQnVpbGRUaWNrcycpO1xuICAgIH1cbiBidWlsZFRpY2tzKCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGFmdGVyQnVpbGRUaWNrcygpIHtcbiAgICAgICAgdGhpcy5fY2FsbEhvb2tzKCdhZnRlckJ1aWxkVGlja3MnKTtcbiAgICB9XG4gICAgYmVmb3JlVGlja1RvTGFiZWxDb252ZXJzaW9uKCkge1xuICAgICAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlVGlja1RvTGFiZWxDb252ZXJzaW9uLCBbXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgIF0pO1xuICAgIH1cbiBnZW5lcmF0ZVRpY2tMYWJlbHModGlja3MpIHtcbiAgICAgICAgY29uc3QgdGlja09wdHMgPSB0aGlzLm9wdGlvbnMudGlja3M7XG4gICAgICAgIGxldCBpLCBpbGVuLCB0aWNrO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSB0aWNrcy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspe1xuICAgICAgICAgICAgdGljayA9IHRpY2tzW2ldO1xuICAgICAgICAgICAgdGljay5sYWJlbCA9IGNhbGxiYWNrKHRpY2tPcHRzLmNhbGxiYWNrLCBbXG4gICAgICAgICAgICAgICAgdGljay52YWx1ZSxcbiAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgIHRpY2tzXG4gICAgICAgICAgICBdLCB0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbigpIHtcbiAgICAgICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyVGlja1RvTGFiZWxDb252ZXJzaW9uLCBbXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBiZWZvcmVDYWxjdWxhdGVMYWJlbFJvdGF0aW9uKCkge1xuICAgICAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbiwgW1xuICAgICAgICAgICAgdGhpc1xuICAgICAgICBdKTtcbiAgICB9XG4gICAgY2FsY3VsYXRlTGFiZWxSb3RhdGlvbigpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgdGlja09wdHMgPSBvcHRpb25zLnRpY2tzO1xuICAgICAgICBjb25zdCBudW1UaWNrcyA9IGdldFRpY2tzTGltaXQodGhpcy50aWNrcy5sZW5ndGgsIG9wdGlvbnMudGlja3MubWF4VGlja3NMaW1pdCk7XG4gICAgICAgIGNvbnN0IG1pblJvdGF0aW9uID0gdGlja09wdHMubWluUm90YXRpb24gfHwgMDtcbiAgICAgICAgY29uc3QgbWF4Um90YXRpb24gPSB0aWNrT3B0cy5tYXhSb3RhdGlvbjtcbiAgICAgICAgbGV0IGxhYmVsUm90YXRpb24gPSBtaW5Sb3RhdGlvbjtcbiAgICAgICAgbGV0IHRpY2tXaWR0aCwgbWF4SGVpZ2h0LCBtYXhMYWJlbERpYWdvbmFsO1xuICAgICAgICBpZiAoIXRoaXMuX2lzVmlzaWJsZSgpIHx8ICF0aWNrT3B0cy5kaXNwbGF5IHx8IG1pblJvdGF0aW9uID49IG1heFJvdGF0aW9uIHx8IG51bVRpY2tzIDw9IDEgfHwgIXRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgIHRoaXMubGFiZWxSb3RhdGlvbiA9IG1pblJvdGF0aW9uO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxhYmVsU2l6ZXMgPSB0aGlzLl9nZXRMYWJlbFNpemVzKCk7XG4gICAgICAgIGNvbnN0IG1heExhYmVsV2lkdGggPSBsYWJlbFNpemVzLndpZGVzdC53aWR0aDtcbiAgICAgICAgY29uc3QgbWF4TGFiZWxIZWlnaHQgPSBsYWJlbFNpemVzLmhpZ2hlc3QuaGVpZ2h0O1xuICAgICAgICBjb25zdCBtYXhXaWR0aCA9IF9saW1pdFZhbHVlKHRoaXMuY2hhcnQud2lkdGggLSBtYXhMYWJlbFdpZHRoLCAwLCB0aGlzLm1heFdpZHRoKTtcbiAgICAgICAgdGlja1dpZHRoID0gb3B0aW9ucy5vZmZzZXQgPyB0aGlzLm1heFdpZHRoIC8gbnVtVGlja3MgOiBtYXhXaWR0aCAvIChudW1UaWNrcyAtIDEpO1xuICAgICAgICBpZiAobWF4TGFiZWxXaWR0aCArIDYgPiB0aWNrV2lkdGgpIHtcbiAgICAgICAgICAgIHRpY2tXaWR0aCA9IG1heFdpZHRoIC8gKG51bVRpY2tzIC0gKG9wdGlvbnMub2Zmc2V0ID8gMC41IDogMSkpO1xuICAgICAgICAgICAgbWF4SGVpZ2h0ID0gdGhpcy5tYXhIZWlnaHQgLSBnZXRUaWNrTWFya0xlbmd0aChvcHRpb25zLmdyaWQpIC0gdGlja09wdHMucGFkZGluZyAtIGdldFRpdGxlSGVpZ2h0KG9wdGlvbnMudGl0bGUsIHRoaXMuY2hhcnQub3B0aW9ucy5mb250KTtcbiAgICAgICAgICAgIG1heExhYmVsRGlhZ29uYWwgPSBNYXRoLnNxcnQobWF4TGFiZWxXaWR0aCAqIG1heExhYmVsV2lkdGggKyBtYXhMYWJlbEhlaWdodCAqIG1heExhYmVsSGVpZ2h0KTtcbiAgICAgICAgICAgIGxhYmVsUm90YXRpb24gPSB0b0RlZ3JlZXMoTWF0aC5taW4oTWF0aC5hc2luKF9saW1pdFZhbHVlKChsYWJlbFNpemVzLmhpZ2hlc3QuaGVpZ2h0ICsgNikgLyB0aWNrV2lkdGgsIC0xLCAxKSksIE1hdGguYXNpbihfbGltaXRWYWx1ZShtYXhIZWlnaHQgLyBtYXhMYWJlbERpYWdvbmFsLCAtMSwgMSkpIC0gTWF0aC5hc2luKF9saW1pdFZhbHVlKG1heExhYmVsSGVpZ2h0IC8gbWF4TGFiZWxEaWFnb25hbCwgLTEsIDEpKSkpO1xuICAgICAgICAgICAgbGFiZWxSb3RhdGlvbiA9IE1hdGgubWF4KG1pblJvdGF0aW9uLCBNYXRoLm1pbihtYXhSb3RhdGlvbiwgbGFiZWxSb3RhdGlvbikpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGFiZWxSb3RhdGlvbiA9IGxhYmVsUm90YXRpb247XG4gICAgfVxuICAgIGFmdGVyQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbigpIHtcbiAgICAgICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbiwgW1xuICAgICAgICAgICAgdGhpc1xuICAgICAgICBdKTtcbiAgICB9XG4gICAgYWZ0ZXJBdXRvU2tpcCgpIHt9XG4gICAgYmVmb3JlRml0KCkge1xuICAgICAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlRml0LCBbXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBmaXQoKSB7XG4gICAgICAgIGNvbnN0IG1pblNpemUgPSB7XG4gICAgICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgICAgIGhlaWdodDogMFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCB7IGNoYXJ0ICwgb3B0aW9uczogeyB0aWNrczogdGlja09wdHMgLCB0aXRsZTogdGl0bGVPcHRzICwgZ3JpZDogZ3JpZE9wdHMgIH0gIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBkaXNwbGF5ID0gdGhpcy5faXNWaXNpYmxlKCk7XG4gICAgICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IHRoaXMuaXNIb3Jpem9udGFsKCk7XG4gICAgICAgIGlmIChkaXNwbGF5KSB7XG4gICAgICAgICAgICBjb25zdCB0aXRsZUhlaWdodCA9IGdldFRpdGxlSGVpZ2h0KHRpdGxlT3B0cywgY2hhcnQub3B0aW9ucy5mb250KTtcbiAgICAgICAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgICAgICAgICBtaW5TaXplLndpZHRoID0gdGhpcy5tYXhXaWR0aDtcbiAgICAgICAgICAgICAgICBtaW5TaXplLmhlaWdodCA9IGdldFRpY2tNYXJrTGVuZ3RoKGdyaWRPcHRzKSArIHRpdGxlSGVpZ2h0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtaW5TaXplLmhlaWdodCA9IHRoaXMubWF4SGVpZ2h0O1xuICAgICAgICAgICAgICAgIG1pblNpemUud2lkdGggPSBnZXRUaWNrTWFya0xlbmd0aChncmlkT3B0cykgKyB0aXRsZUhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aWNrT3B0cy5kaXNwbGF5ICYmIHRoaXMudGlja3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBmaXJzdCAsIGxhc3QgLCB3aWRlc3QgLCBoaWdoZXN0ICB9ID0gdGhpcy5fZ2V0TGFiZWxTaXplcygpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpY2tQYWRkaW5nID0gdGlja09wdHMucGFkZGluZyAqIDI7XG4gICAgICAgICAgICAgICAgY29uc3QgYW5nbGVSYWRpYW5zID0gdG9SYWRpYW5zKHRoaXMubGFiZWxSb3RhdGlvbik7XG4gICAgICAgICAgICAgICAgY29uc3QgY29zID0gTWF0aC5jb3MoYW5nbGVSYWRpYW5zKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzaW4gPSBNYXRoLnNpbihhbmdsZVJhZGlhbnMpO1xuICAgICAgICAgICAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFiZWxIZWlnaHQgPSB0aWNrT3B0cy5taXJyb3IgPyAwIDogc2luICogd2lkZXN0LndpZHRoICsgY29zICogaGlnaGVzdC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIG1pblNpemUuaGVpZ2h0ID0gTWF0aC5taW4odGhpcy5tYXhIZWlnaHQsIG1pblNpemUuaGVpZ2h0ICsgbGFiZWxIZWlnaHQgKyB0aWNrUGFkZGluZyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFiZWxXaWR0aCA9IHRpY2tPcHRzLm1pcnJvciA/IDAgOiBjb3MgKiB3aWRlc3Qud2lkdGggKyBzaW4gKiBoaWdoZXN0LmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgbWluU2l6ZS53aWR0aCA9IE1hdGgubWluKHRoaXMubWF4V2lkdGgsIG1pblNpemUud2lkdGggKyBsYWJlbFdpZHRoICsgdGlja1BhZGRpbmcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9jYWxjdWxhdGVQYWRkaW5nKGZpcnN0LCBsYXN0LCBzaW4sIGNvcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faGFuZGxlTWFyZ2lucygpO1xuICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5fbGVuZ3RoID0gY2hhcnQud2lkdGggLSB0aGlzLl9tYXJnaW5zLmxlZnQgLSB0aGlzLl9tYXJnaW5zLnJpZ2h0O1xuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSBtaW5TaXplLmhlaWdodDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSBtaW5TaXplLndpZHRoO1xuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLl9sZW5ndGggPSBjaGFydC5oZWlnaHQgLSB0aGlzLl9tYXJnaW5zLnRvcCAtIHRoaXMuX21hcmdpbnMuYm90dG9tO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9jYWxjdWxhdGVQYWRkaW5nKGZpcnN0LCBsYXN0LCBzaW4sIGNvcykge1xuICAgICAgICBjb25zdCB7IHRpY2tzOiB7IGFsaWduICwgcGFkZGluZyAgfSAsIHBvc2l0aW9uICB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBpc1JvdGF0ZWQgPSB0aGlzLmxhYmVsUm90YXRpb24gIT09IDA7XG4gICAgICAgIGNvbnN0IGxhYmVsc0JlbG93VGlja3MgPSBwb3NpdGlvbiAhPT0gJ3RvcCcgJiYgdGhpcy5heGlzID09PSAneCc7XG4gICAgICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICBjb25zdCBvZmZzZXRMZWZ0ID0gdGhpcy5nZXRQaXhlbEZvclRpY2soMCkgLSB0aGlzLmxlZnQ7XG4gICAgICAgICAgICBjb25zdCBvZmZzZXRSaWdodCA9IHRoaXMucmlnaHQgLSB0aGlzLmdldFBpeGVsRm9yVGljayh0aGlzLnRpY2tzLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgbGV0IHBhZGRpbmdMZWZ0ID0gMDtcbiAgICAgICAgICAgIGxldCBwYWRkaW5nUmlnaHQgPSAwO1xuICAgICAgICAgICAgaWYgKGlzUm90YXRlZCkge1xuICAgICAgICAgICAgICAgIGlmIChsYWJlbHNCZWxvd1RpY2tzKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmdMZWZ0ID0gY29zICogZmlyc3Qud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmdSaWdodCA9IHNpbiAqIGxhc3QuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmdMZWZ0ID0gc2luICogZmlyc3QuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nUmlnaHQgPSBjb3MgKiBsYXN0LndpZHRoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWxpZ24gPT09ICdzdGFydCcpIHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nUmlnaHQgPSBsYXN0LndpZHRoO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhbGlnbiA9PT0gJ2VuZCcpIHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nTGVmdCA9IGZpcnN0LndpZHRoO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhbGlnbiAhPT0gJ2lubmVyJykge1xuICAgICAgICAgICAgICAgIHBhZGRpbmdMZWZ0ID0gZmlyc3Qud2lkdGggLyAyO1xuICAgICAgICAgICAgICAgIHBhZGRpbmdSaWdodCA9IGxhc3Qud2lkdGggLyAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5wYWRkaW5nTGVmdCA9IE1hdGgubWF4KChwYWRkaW5nTGVmdCAtIG9mZnNldExlZnQgKyBwYWRkaW5nKSAqIHRoaXMud2lkdGggLyAodGhpcy53aWR0aCAtIG9mZnNldExlZnQpLCAwKTtcbiAgICAgICAgICAgIHRoaXMucGFkZGluZ1JpZ2h0ID0gTWF0aC5tYXgoKHBhZGRpbmdSaWdodCAtIG9mZnNldFJpZ2h0ICsgcGFkZGluZykgKiB0aGlzLndpZHRoIC8gKHRoaXMud2lkdGggLSBvZmZzZXRSaWdodCksIDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHBhZGRpbmdUb3AgPSBsYXN0LmhlaWdodCAvIDI7XG4gICAgICAgICAgICBsZXQgcGFkZGluZ0JvdHRvbSA9IGZpcnN0LmhlaWdodCAvIDI7XG4gICAgICAgICAgICBpZiAoYWxpZ24gPT09ICdzdGFydCcpIHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nVG9wID0gMDtcbiAgICAgICAgICAgICAgICBwYWRkaW5nQm90dG9tID0gZmlyc3QuaGVpZ2h0O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhbGlnbiA9PT0gJ2VuZCcpIHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nVG9wID0gbGFzdC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgcGFkZGluZ0JvdHRvbSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnBhZGRpbmdUb3AgPSBwYWRkaW5nVG9wICsgcGFkZGluZztcbiAgICAgICAgICAgIHRoaXMucGFkZGluZ0JvdHRvbSA9IHBhZGRpbmdCb3R0b20gKyBwYWRkaW5nO1xuICAgICAgICB9XG4gICAgfVxuIF9oYW5kbGVNYXJnaW5zKCkge1xuICAgICAgICBpZiAodGhpcy5fbWFyZ2lucykge1xuICAgICAgICAgICAgdGhpcy5fbWFyZ2lucy5sZWZ0ID0gTWF0aC5tYXgodGhpcy5wYWRkaW5nTGVmdCwgdGhpcy5fbWFyZ2lucy5sZWZ0KTtcbiAgICAgICAgICAgIHRoaXMuX21hcmdpbnMudG9wID0gTWF0aC5tYXgodGhpcy5wYWRkaW5nVG9wLCB0aGlzLl9tYXJnaW5zLnRvcCk7XG4gICAgICAgICAgICB0aGlzLl9tYXJnaW5zLnJpZ2h0ID0gTWF0aC5tYXgodGhpcy5wYWRkaW5nUmlnaHQsIHRoaXMuX21hcmdpbnMucmlnaHQpO1xuICAgICAgICAgICAgdGhpcy5fbWFyZ2lucy5ib3R0b20gPSBNYXRoLm1heCh0aGlzLnBhZGRpbmdCb3R0b20sIHRoaXMuX21hcmdpbnMuYm90dG9tKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhZnRlckZpdCgpIHtcbiAgICAgICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyRml0LCBbXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgIF0pO1xuICAgIH1cbiBpc0hvcml6b250YWwoKSB7XG4gICAgICAgIGNvbnN0IHsgYXhpcyAsIHBvc2l0aW9uICB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICByZXR1cm4gcG9zaXRpb24gPT09ICd0b3AnIHx8IHBvc2l0aW9uID09PSAnYm90dG9tJyB8fCBheGlzID09PSAneCc7XG4gICAgfVxuIGlzRnVsbFNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuZnVsbFNpemU7XG4gICAgfVxuIF9jb252ZXJ0VGlja3NUb0xhYmVscyh0aWNrcykge1xuICAgICAgICB0aGlzLmJlZm9yZVRpY2tUb0xhYmVsQ29udmVyc2lvbigpO1xuICAgICAgICB0aGlzLmdlbmVyYXRlVGlja0xhYmVscyh0aWNrcyk7XG4gICAgICAgIGxldCBpLCBpbGVuO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSB0aWNrcy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspe1xuICAgICAgICAgICAgaWYgKGlzTnVsbE9yVW5kZWYodGlja3NbaV0ubGFiZWwpKSB7XG4gICAgICAgICAgICAgICAgdGlja3Muc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIGlsZW4tLTtcbiAgICAgICAgICAgICAgICBpLS07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbigpO1xuICAgIH1cbiBfZ2V0TGFiZWxTaXplcygpIHtcbiAgICAgICAgbGV0IGxhYmVsU2l6ZXMgPSB0aGlzLl9sYWJlbFNpemVzO1xuICAgICAgICBpZiAoIWxhYmVsU2l6ZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHNhbXBsZVNpemUgPSB0aGlzLm9wdGlvbnMudGlja3Muc2FtcGxlU2l6ZTtcbiAgICAgICAgICAgIGxldCB0aWNrcyA9IHRoaXMudGlja3M7XG4gICAgICAgICAgICBpZiAoc2FtcGxlU2l6ZSA8IHRpY2tzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRpY2tzID0gc2FtcGxlKHRpY2tzLCBzYW1wbGVTaXplKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2xhYmVsU2l6ZXMgPSBsYWJlbFNpemVzID0gdGhpcy5fY29tcHV0ZUxhYmVsU2l6ZXModGlja3MsIHRpY2tzLmxlbmd0aCwgdGhpcy5vcHRpb25zLnRpY2tzLm1heFRpY2tzTGltaXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsYWJlbFNpemVzO1xuICAgIH1cbiBfY29tcHV0ZUxhYmVsU2l6ZXModGlja3MsIGxlbmd0aCwgbWF4VGlja3NMaW1pdCkge1xuICAgICAgICBjb25zdCB7IGN0eCAsIF9sb25nZXN0VGV4dENhY2hlOiBjYWNoZXMgIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB3aWR0aHMgPSBbXTtcbiAgICAgICAgY29uc3QgaGVpZ2h0cyA9IFtdO1xuICAgICAgICBjb25zdCBpbmNyZW1lbnQgPSBNYXRoLmZsb29yKGxlbmd0aCAvIGdldFRpY2tzTGltaXQobGVuZ3RoLCBtYXhUaWNrc0xpbWl0KSk7XG4gICAgICAgIGxldCB3aWRlc3RMYWJlbFNpemUgPSAwO1xuICAgICAgICBsZXQgaGlnaGVzdExhYmVsU2l6ZSA9IDA7XG4gICAgICAgIGxldCBpLCBqLCBqbGVuLCBsYWJlbCwgdGlja0ZvbnQsIGZvbnRTdHJpbmcsIGNhY2hlLCBsaW5lSGVpZ2h0LCB3aWR0aCwgaGVpZ2h0LCBuZXN0ZWRMYWJlbDtcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IGluY3JlbWVudCl7XG4gICAgICAgICAgICBsYWJlbCA9IHRpY2tzW2ldLmxhYmVsO1xuICAgICAgICAgICAgdGlja0ZvbnQgPSB0aGlzLl9yZXNvbHZlVGlja0ZvbnRPcHRpb25zKGkpO1xuICAgICAgICAgICAgY3R4LmZvbnQgPSBmb250U3RyaW5nID0gdGlja0ZvbnQuc3RyaW5nO1xuICAgICAgICAgICAgY2FjaGUgPSBjYWNoZXNbZm9udFN0cmluZ10gPSBjYWNoZXNbZm9udFN0cmluZ10gfHwge1xuICAgICAgICAgICAgICAgIGRhdGE6IHt9LFxuICAgICAgICAgICAgICAgIGdjOiBbXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGxpbmVIZWlnaHQgPSB0aWNrRm9udC5saW5lSGVpZ2h0O1xuICAgICAgICAgICAgd2lkdGggPSBoZWlnaHQgPSAwO1xuICAgICAgICAgICAgaWYgKCFpc051bGxPclVuZGVmKGxhYmVsKSAmJiAhaXNBcnJheShsYWJlbCkpIHtcbiAgICAgICAgICAgICAgICB3aWR0aCA9IF9tZWFzdXJlVGV4dChjdHgsIGNhY2hlLmRhdGEsIGNhY2hlLmdjLCB3aWR0aCwgbGFiZWwpO1xuICAgICAgICAgICAgICAgIGhlaWdodCA9IGxpbmVIZWlnaHQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkobGFiZWwpKSB7XG4gICAgICAgICAgICAgICAgZm9yKGogPSAwLCBqbGVuID0gbGFiZWwubGVuZ3RoOyBqIDwgamxlbjsgKytqKXtcbiAgICAgICAgICAgICAgICAgICAgbmVzdGVkTGFiZWwgPSAgbGFiZWxbal07XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNOdWxsT3JVbmRlZihuZXN0ZWRMYWJlbCkgJiYgIWlzQXJyYXkobmVzdGVkTGFiZWwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IF9tZWFzdXJlVGV4dChjdHgsIGNhY2hlLmRhdGEsIGNhY2hlLmdjLCB3aWR0aCwgbmVzdGVkTGFiZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ICs9IGxpbmVIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aWR0aHMucHVzaCh3aWR0aCk7XG4gICAgICAgICAgICBoZWlnaHRzLnB1c2goaGVpZ2h0KTtcbiAgICAgICAgICAgIHdpZGVzdExhYmVsU2l6ZSA9IE1hdGgubWF4KHdpZHRoLCB3aWRlc3RMYWJlbFNpemUpO1xuICAgICAgICAgICAgaGlnaGVzdExhYmVsU2l6ZSA9IE1hdGgubWF4KGhlaWdodCwgaGlnaGVzdExhYmVsU2l6ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZ2FyYmFnZUNvbGxlY3QoY2FjaGVzLCBsZW5ndGgpO1xuICAgICAgICBjb25zdCB3aWRlc3QgPSB3aWR0aHMuaW5kZXhPZih3aWRlc3RMYWJlbFNpemUpO1xuICAgICAgICBjb25zdCBoaWdoZXN0ID0gaGVpZ2h0cy5pbmRleE9mKGhpZ2hlc3RMYWJlbFNpemUpO1xuICAgICAgICBjb25zdCB2YWx1ZUF0ID0gKGlkeCk9Pih7XG4gICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoc1tpZHhdIHx8IDAsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHRzW2lkeF0gfHwgMFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmaXJzdDogdmFsdWVBdCgwKSxcbiAgICAgICAgICAgIGxhc3Q6IHZhbHVlQXQobGVuZ3RoIC0gMSksXG4gICAgICAgICAgICB3aWRlc3Q6IHZhbHVlQXQod2lkZXN0KSxcbiAgICAgICAgICAgIGhpZ2hlc3Q6IHZhbHVlQXQoaGlnaGVzdCksXG4gICAgICAgICAgICB3aWR0aHMsXG4gICAgICAgICAgICBoZWlnaHRzXG4gICAgICAgIH07XG4gICAgfVxuIGdldExhYmVsRm9yVmFsdWUodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiBnZXRQaXhlbEZvclZhbHVlKHZhbHVlLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gTmFOO1xuICAgIH1cbiBnZXRWYWx1ZUZvclBpeGVsKHBpeGVsKSB7fVxuIGdldFBpeGVsRm9yVGljayhpbmRleCkge1xuICAgICAgICBjb25zdCB0aWNrcyA9IHRoaXMudGlja3M7XG4gICAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPiB0aWNrcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5nZXRQaXhlbEZvclZhbHVlKHRpY2tzW2luZGV4XS52YWx1ZSk7XG4gICAgfVxuIGdldFBpeGVsRm9yRGVjaW1hbChkZWNpbWFsKSB7XG4gICAgICAgIGlmICh0aGlzLl9yZXZlcnNlUGl4ZWxzKSB7XG4gICAgICAgICAgICBkZWNpbWFsID0gMSAtIGRlY2ltYWw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGl4ZWwgPSB0aGlzLl9zdGFydFBpeGVsICsgZGVjaW1hbCAqIHRoaXMuX2xlbmd0aDtcbiAgICAgICAgcmV0dXJuIF9pbnQxNlJhbmdlKHRoaXMuX2FsaWduVG9QaXhlbHMgPyBfYWxpZ25QaXhlbCh0aGlzLmNoYXJ0LCBwaXhlbCwgMCkgOiBwaXhlbCk7XG4gICAgfVxuIGdldERlY2ltYWxGb3JQaXhlbChwaXhlbCkge1xuICAgICAgICBjb25zdCBkZWNpbWFsID0gKHBpeGVsIC0gdGhpcy5fc3RhcnRQaXhlbCkgLyB0aGlzLl9sZW5ndGg7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXZlcnNlUGl4ZWxzID8gMSAtIGRlY2ltYWwgOiBkZWNpbWFsO1xuICAgIH1cbiBnZXRCYXNlUGl4ZWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBpeGVsRm9yVmFsdWUodGhpcy5nZXRCYXNlVmFsdWUoKSk7XG4gICAgfVxuIGdldEJhc2VWYWx1ZSgpIHtcbiAgICAgICAgY29uc3QgeyBtaW4gLCBtYXggIH0gPSB0aGlzO1xuICAgICAgICByZXR1cm4gbWluIDwgMCAmJiBtYXggPCAwID8gbWF4IDogbWluID4gMCAmJiBtYXggPiAwID8gbWluIDogMDtcbiAgICB9XG4gZ2V0Q29udGV4dChpbmRleCkge1xuICAgICAgICBjb25zdCB0aWNrcyA9IHRoaXMudGlja3MgfHwgW107XG4gICAgICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgdGlja3MubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCB0aWNrID0gdGlja3NbaW5kZXhdO1xuICAgICAgICAgICAgcmV0dXJuIHRpY2suJGNvbnRleHQgfHwgKHRpY2suJGNvbnRleHQgPSBjcmVhdGVUaWNrQ29udGV4dCh0aGlzLmdldENvbnRleHQoKSwgaW5kZXgsIHRpY2spKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy4kY29udGV4dCB8fCAodGhpcy4kY29udGV4dCA9IGNyZWF0ZVNjYWxlQ29udGV4dCh0aGlzLmNoYXJ0LmdldENvbnRleHQoKSwgdGhpcykpO1xuICAgIH1cbiBfdGlja1NpemUoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvblRpY2tzID0gdGhpcy5vcHRpb25zLnRpY2tzO1xuICAgICAgICBjb25zdCByb3QgPSB0b1JhZGlhbnModGhpcy5sYWJlbFJvdGF0aW9uKTtcbiAgICAgICAgY29uc3QgY29zID0gTWF0aC5hYnMoTWF0aC5jb3Mocm90KSk7XG4gICAgICAgIGNvbnN0IHNpbiA9IE1hdGguYWJzKE1hdGguc2luKHJvdCkpO1xuICAgICAgICBjb25zdCBsYWJlbFNpemVzID0gdGhpcy5fZ2V0TGFiZWxTaXplcygpO1xuICAgICAgICBjb25zdCBwYWRkaW5nID0gb3B0aW9uVGlja3MuYXV0b1NraXBQYWRkaW5nIHx8IDA7XG4gICAgICAgIGNvbnN0IHcgPSBsYWJlbFNpemVzID8gbGFiZWxTaXplcy53aWRlc3Qud2lkdGggKyBwYWRkaW5nIDogMDtcbiAgICAgICAgY29uc3QgaCA9IGxhYmVsU2l6ZXMgPyBsYWJlbFNpemVzLmhpZ2hlc3QuaGVpZ2h0ICsgcGFkZGluZyA6IDA7XG4gICAgICAgIHJldHVybiB0aGlzLmlzSG9yaXpvbnRhbCgpID8gaCAqIGNvcyA+IHcgKiBzaW4gPyB3IC8gY29zIDogaCAvIHNpbiA6IGggKiBzaW4gPCB3ICogY29zID8gaCAvIGNvcyA6IHcgLyBzaW47XG4gICAgfVxuIF9pc1Zpc2libGUoKSB7XG4gICAgICAgIGNvbnN0IGRpc3BsYXkgPSB0aGlzLm9wdGlvbnMuZGlzcGxheTtcbiAgICAgICAgaWYgKGRpc3BsYXkgIT09ICdhdXRvJykge1xuICAgICAgICAgICAgcmV0dXJuICEhZGlzcGxheTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5nZXRNYXRjaGluZ1Zpc2libGVNZXRhcygpLmxlbmd0aCA+IDA7XG4gICAgfVxuIF9jb21wdXRlR3JpZExpbmVJdGVtcyhjaGFydEFyZWEpIHtcbiAgICAgICAgY29uc3QgYXhpcyA9IHRoaXMuYXhpcztcbiAgICAgICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCB7IGdyaWQgLCBwb3NpdGlvbiAsIGJvcmRlciAgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IGdyaWQub2Zmc2V0O1xuICAgICAgICBjb25zdCBpc0hvcml6b250YWwgPSB0aGlzLmlzSG9yaXpvbnRhbCgpO1xuICAgICAgICBjb25zdCB0aWNrcyA9IHRoaXMudGlja3M7XG4gICAgICAgIGNvbnN0IHRpY2tzTGVuZ3RoID0gdGlja3MubGVuZ3RoICsgKG9mZnNldCA/IDEgOiAwKTtcbiAgICAgICAgY29uc3QgdGwgPSBnZXRUaWNrTWFya0xlbmd0aChncmlkKTtcbiAgICAgICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICAgICAgY29uc3QgYm9yZGVyT3B0cyA9IGJvcmRlci5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICAgICAgY29uc3QgYXhpc1dpZHRoID0gYm9yZGVyT3B0cy5kaXNwbGF5ID8gYm9yZGVyT3B0cy53aWR0aCA6IDA7XG4gICAgICAgIGNvbnN0IGF4aXNIYWxmV2lkdGggPSBheGlzV2lkdGggLyAyO1xuICAgICAgICBjb25zdCBhbGlnbkJvcmRlclZhbHVlID0gZnVuY3Rpb24ocGl4ZWwpIHtcbiAgICAgICAgICAgIHJldHVybiBfYWxpZ25QaXhlbChjaGFydCwgcGl4ZWwsIGF4aXNXaWR0aCk7XG4gICAgICAgIH07XG4gICAgICAgIGxldCBib3JkZXJWYWx1ZSwgaSwgbGluZVZhbHVlLCBhbGlnbmVkTGluZVZhbHVlO1xuICAgICAgICBsZXQgdHgxLCB0eTEsIHR4MiwgdHkyLCB4MSwgeTEsIHgyLCB5MjtcbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAndG9wJykge1xuICAgICAgICAgICAgYm9yZGVyVmFsdWUgPSBhbGlnbkJvcmRlclZhbHVlKHRoaXMuYm90dG9tKTtcbiAgICAgICAgICAgIHR5MSA9IHRoaXMuYm90dG9tIC0gdGw7XG4gICAgICAgICAgICB0eTIgPSBib3JkZXJWYWx1ZSAtIGF4aXNIYWxmV2lkdGg7XG4gICAgICAgICAgICB5MSA9IGFsaWduQm9yZGVyVmFsdWUoY2hhcnRBcmVhLnRvcCkgKyBheGlzSGFsZldpZHRoO1xuICAgICAgICAgICAgeTIgPSBjaGFydEFyZWEuYm90dG9tO1xuICAgICAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAnYm90dG9tJykge1xuICAgICAgICAgICAgYm9yZGVyVmFsdWUgPSBhbGlnbkJvcmRlclZhbHVlKHRoaXMudG9wKTtcbiAgICAgICAgICAgIHkxID0gY2hhcnRBcmVhLnRvcDtcbiAgICAgICAgICAgIHkyID0gYWxpZ25Cb3JkZXJWYWx1ZShjaGFydEFyZWEuYm90dG9tKSAtIGF4aXNIYWxmV2lkdGg7XG4gICAgICAgICAgICB0eTEgPSBib3JkZXJWYWx1ZSArIGF4aXNIYWxmV2lkdGg7XG4gICAgICAgICAgICB0eTIgPSB0aGlzLnRvcCArIHRsO1xuICAgICAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAnbGVmdCcpIHtcbiAgICAgICAgICAgIGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZSh0aGlzLnJpZ2h0KTtcbiAgICAgICAgICAgIHR4MSA9IHRoaXMucmlnaHQgLSB0bDtcbiAgICAgICAgICAgIHR4MiA9IGJvcmRlclZhbHVlIC0gYXhpc0hhbGZXaWR0aDtcbiAgICAgICAgICAgIHgxID0gYWxpZ25Cb3JkZXJWYWx1ZShjaGFydEFyZWEubGVmdCkgKyBheGlzSGFsZldpZHRoO1xuICAgICAgICAgICAgeDIgPSBjaGFydEFyZWEucmlnaHQ7XG4gICAgICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgICAgIGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZSh0aGlzLmxlZnQpO1xuICAgICAgICAgICAgeDEgPSBjaGFydEFyZWEubGVmdDtcbiAgICAgICAgICAgIHgyID0gYWxpZ25Cb3JkZXJWYWx1ZShjaGFydEFyZWEucmlnaHQpIC0gYXhpc0hhbGZXaWR0aDtcbiAgICAgICAgICAgIHR4MSA9IGJvcmRlclZhbHVlICsgYXhpc0hhbGZXaWR0aDtcbiAgICAgICAgICAgIHR4MiA9IHRoaXMubGVmdCArIHRsO1xuICAgICAgICB9IGVsc2UgaWYgKGF4aXMgPT09ICd4Jykge1xuICAgICAgICAgICAgaWYgKHBvc2l0aW9uID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgICAgIGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZSgoY2hhcnRBcmVhLnRvcCArIGNoYXJ0QXJlYS5ib3R0b20pIC8gMiArIDAuNSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHBvc2l0aW9uKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uQXhpc0lEID0gT2JqZWN0LmtleXMocG9zaXRpb24pWzBdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcG9zaXRpb25bcG9zaXRpb25BeGlzSURdO1xuICAgICAgICAgICAgICAgIGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZSh0aGlzLmNoYXJ0LnNjYWxlc1twb3NpdGlvbkF4aXNJRF0uZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeTEgPSBjaGFydEFyZWEudG9wO1xuICAgICAgICAgICAgeTIgPSBjaGFydEFyZWEuYm90dG9tO1xuICAgICAgICAgICAgdHkxID0gYm9yZGVyVmFsdWUgKyBheGlzSGFsZldpZHRoO1xuICAgICAgICAgICAgdHkyID0gdHkxICsgdGw7XG4gICAgICAgIH0gZWxzZSBpZiAoYXhpcyA9PT0gJ3knKSB7XG4gICAgICAgICAgICBpZiAocG9zaXRpb24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgYm9yZGVyVmFsdWUgPSBhbGlnbkJvcmRlclZhbHVlKChjaGFydEFyZWEubGVmdCArIGNoYXJ0QXJlYS5yaWdodCkgLyAyKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QocG9zaXRpb24pKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcG9zaXRpb25BeGlzSUQgPSBPYmplY3Qua2V5cyhwb3NpdGlvbilbMF07XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBwb3NpdGlvbltwb3NpdGlvbkF4aXNJRF07XG4gICAgICAgICAgICAgICAgYm9yZGVyVmFsdWUgPSBhbGlnbkJvcmRlclZhbHVlKHRoaXMuY2hhcnQuc2NhbGVzW3Bvc2l0aW9uQXhpc0lEXS5nZXRQaXhlbEZvclZhbHVlKHZhbHVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0eDEgPSBib3JkZXJWYWx1ZSAtIGF4aXNIYWxmV2lkdGg7XG4gICAgICAgICAgICB0eDIgPSB0eDEgLSB0bDtcbiAgICAgICAgICAgIHgxID0gY2hhcnRBcmVhLmxlZnQ7XG4gICAgICAgICAgICB4MiA9IGNoYXJ0QXJlYS5yaWdodDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsaW1pdCA9IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMudGlja3MubWF4VGlja3NMaW1pdCwgdGlja3NMZW5ndGgpO1xuICAgICAgICBjb25zdCBzdGVwID0gTWF0aC5tYXgoMSwgTWF0aC5jZWlsKHRpY2tzTGVuZ3RoIC8gbGltaXQpKTtcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgdGlja3NMZW5ndGg7IGkgKz0gc3RlcCl7XG4gICAgICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5nZXRDb250ZXh0KGkpO1xuICAgICAgICAgICAgY29uc3Qgb3B0c0F0SW5kZXggPSBncmlkLnNldENvbnRleHQoY29udGV4dCk7XG4gICAgICAgICAgICBjb25zdCBvcHRzQXRJbmRleEJvcmRlciA9IGJvcmRlci5zZXRDb250ZXh0KGNvbnRleHQpO1xuICAgICAgICAgICAgY29uc3QgbGluZVdpZHRoID0gb3B0c0F0SW5kZXgubGluZVdpZHRoO1xuICAgICAgICAgICAgY29uc3QgbGluZUNvbG9yID0gb3B0c0F0SW5kZXguY29sb3I7XG4gICAgICAgICAgICBjb25zdCBib3JkZXJEYXNoID0gb3B0c0F0SW5kZXhCb3JkZXIuZGFzaCB8fCBbXTtcbiAgICAgICAgICAgIGNvbnN0IGJvcmRlckRhc2hPZmZzZXQgPSBvcHRzQXRJbmRleEJvcmRlci5kYXNoT2Zmc2V0O1xuICAgICAgICAgICAgY29uc3QgdGlja1dpZHRoID0gb3B0c0F0SW5kZXgudGlja1dpZHRoO1xuICAgICAgICAgICAgY29uc3QgdGlja0NvbG9yID0gb3B0c0F0SW5kZXgudGlja0NvbG9yO1xuICAgICAgICAgICAgY29uc3QgdGlja0JvcmRlckRhc2ggPSBvcHRzQXRJbmRleC50aWNrQm9yZGVyRGFzaCB8fCBbXTtcbiAgICAgICAgICAgIGNvbnN0IHRpY2tCb3JkZXJEYXNoT2Zmc2V0ID0gb3B0c0F0SW5kZXgudGlja0JvcmRlckRhc2hPZmZzZXQ7XG4gICAgICAgICAgICBsaW5lVmFsdWUgPSBnZXRQaXhlbEZvckdyaWRMaW5lKHRoaXMsIGksIG9mZnNldCk7XG4gICAgICAgICAgICBpZiAobGluZVZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFsaWduZWRMaW5lVmFsdWUgPSBfYWxpZ25QaXhlbChjaGFydCwgbGluZVZhbHVlLCBsaW5lV2lkdGgpO1xuICAgICAgICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgICAgIHR4MSA9IHR4MiA9IHgxID0geDIgPSBhbGlnbmVkTGluZVZhbHVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0eTEgPSB0eTIgPSB5MSA9IHkyID0gYWxpZ25lZExpbmVWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICAgIHR4MSxcbiAgICAgICAgICAgICAgICB0eTEsXG4gICAgICAgICAgICAgICAgdHgyLFxuICAgICAgICAgICAgICAgIHR5MixcbiAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICB5MSxcbiAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICB5MixcbiAgICAgICAgICAgICAgICB3aWR0aDogbGluZVdpZHRoLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBsaW5lQ29sb3IsXG4gICAgICAgICAgICAgICAgYm9yZGVyRGFzaCxcbiAgICAgICAgICAgICAgICBib3JkZXJEYXNoT2Zmc2V0LFxuICAgICAgICAgICAgICAgIHRpY2tXaWR0aCxcbiAgICAgICAgICAgICAgICB0aWNrQ29sb3IsXG4gICAgICAgICAgICAgICAgdGlja0JvcmRlckRhc2gsXG4gICAgICAgICAgICAgICAgdGlja0JvcmRlckRhc2hPZmZzZXRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3RpY2tzTGVuZ3RoID0gdGlja3NMZW5ndGg7XG4gICAgICAgIHRoaXMuX2JvcmRlclZhbHVlID0gYm9yZGVyVmFsdWU7XG4gICAgICAgIHJldHVybiBpdGVtcztcbiAgICB9XG4gX2NvbXB1dGVMYWJlbEl0ZW1zKGNoYXJ0QXJlYSkge1xuICAgICAgICBjb25zdCBheGlzID0gdGhpcy5heGlzO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCB7IHBvc2l0aW9uICwgdGlja3M6IG9wdGlvblRpY2tzICB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3QgaXNIb3Jpem9udGFsID0gdGhpcy5pc0hvcml6b250YWwoKTtcbiAgICAgICAgY29uc3QgdGlja3MgPSB0aGlzLnRpY2tzO1xuICAgICAgICBjb25zdCB7IGFsaWduICwgY3Jvc3NBbGlnbiAsIHBhZGRpbmcgLCBtaXJyb3IgIH0gPSBvcHRpb25UaWNrcztcbiAgICAgICAgY29uc3QgdGwgPSBnZXRUaWNrTWFya0xlbmd0aChvcHRpb25zLmdyaWQpO1xuICAgICAgICBjb25zdCB0aWNrQW5kUGFkZGluZyA9IHRsICsgcGFkZGluZztcbiAgICAgICAgY29uc3QgaFRpY2tBbmRQYWRkaW5nID0gbWlycm9yID8gLXBhZGRpbmcgOiB0aWNrQW5kUGFkZGluZztcbiAgICAgICAgY29uc3Qgcm90YXRpb24gPSAtdG9SYWRpYW5zKHRoaXMubGFiZWxSb3RhdGlvbik7XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gW107XG4gICAgICAgIGxldCBpLCBpbGVuLCB0aWNrLCBsYWJlbCwgeCwgeSwgdGV4dEFsaWduLCBwaXhlbCwgZm9udCwgbGluZUhlaWdodCwgbGluZUNvdW50LCB0ZXh0T2Zmc2V0O1xuICAgICAgICBsZXQgdGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcpIHtcbiAgICAgICAgICAgIHkgPSB0aGlzLmJvdHRvbSAtIGhUaWNrQW5kUGFkZGluZztcbiAgICAgICAgICAgIHRleHRBbGlnbiA9IHRoaXMuX2dldFhBeGlzTGFiZWxBbGlnbm1lbnQoKTtcbiAgICAgICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgICAgIHkgPSB0aGlzLnRvcCArIGhUaWNrQW5kUGFkZGluZztcbiAgICAgICAgICAgIHRleHRBbGlnbiA9IHRoaXMuX2dldFhBeGlzTGFiZWxBbGlnbm1lbnQoKTtcbiAgICAgICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgICBjb25zdCByZXQgPSB0aGlzLl9nZXRZQXhpc0xhYmVsQWxpZ25tZW50KHRsKTtcbiAgICAgICAgICAgIHRleHRBbGlnbiA9IHJldC50ZXh0QWxpZ247XG4gICAgICAgICAgICB4ID0gcmV0Lng7XG4gICAgICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgICAgIGNvbnN0IHJldCA9IHRoaXMuX2dldFlBeGlzTGFiZWxBbGlnbm1lbnQodGwpO1xuICAgICAgICAgICAgdGV4dEFsaWduID0gcmV0LnRleHRBbGlnbjtcbiAgICAgICAgICAgIHggPSByZXQueDtcbiAgICAgICAgfSBlbHNlIGlmIChheGlzID09PSAneCcpIHtcbiAgICAgICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgICAgICB5ID0gKGNoYXJ0QXJlYS50b3AgKyBjaGFydEFyZWEuYm90dG9tKSAvIDIgKyB0aWNrQW5kUGFkZGluZztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QocG9zaXRpb24pKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcG9zaXRpb25BeGlzSUQgPSBPYmplY3Qua2V5cyhwb3NpdGlvbilbMF07XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBwb3NpdGlvbltwb3NpdGlvbkF4aXNJRF07XG4gICAgICAgICAgICAgICAgeSA9IHRoaXMuY2hhcnQuc2NhbGVzW3Bvc2l0aW9uQXhpc0lEXS5nZXRQaXhlbEZvclZhbHVlKHZhbHVlKSArIHRpY2tBbmRQYWRkaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGV4dEFsaWduID0gdGhpcy5fZ2V0WEF4aXNMYWJlbEFsaWdubWVudCgpO1xuICAgICAgICB9IGVsc2UgaWYgKGF4aXMgPT09ICd5Jykge1xuICAgICAgICAgICAgaWYgKHBvc2l0aW9uID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgICAgIHggPSAoY2hhcnRBcmVhLmxlZnQgKyBjaGFydEFyZWEucmlnaHQpIC8gMiAtIHRpY2tBbmRQYWRkaW5nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdChwb3NpdGlvbikpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwb3NpdGlvbkF4aXNJRCA9IE9iamVjdC5rZXlzKHBvc2l0aW9uKVswXTtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHBvc2l0aW9uW3Bvc2l0aW9uQXhpc0lEXTtcbiAgICAgICAgICAgICAgICB4ID0gdGhpcy5jaGFydC5zY2FsZXNbcG9zaXRpb25BeGlzSURdLmdldFBpeGVsRm9yVmFsdWUodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGV4dEFsaWduID0gdGhpcy5fZ2V0WUF4aXNMYWJlbEFsaWdubWVudCh0bCkudGV4dEFsaWduO1xuICAgICAgICB9XG4gICAgICAgIGlmIChheGlzID09PSAneScpIHtcbiAgICAgICAgICAgIGlmIChhbGlnbiA9PT0gJ3N0YXJ0Jykge1xuICAgICAgICAgICAgICAgIHRleHRCYXNlbGluZSA9ICd0b3AnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhbGlnbiA9PT0gJ2VuZCcpIHtcbiAgICAgICAgICAgICAgICB0ZXh0QmFzZWxpbmUgPSAnYm90dG9tJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYWJlbFNpemVzID0gdGhpcy5fZ2V0TGFiZWxTaXplcygpO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSB0aWNrcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgdGljayA9IHRpY2tzW2ldO1xuICAgICAgICAgICAgbGFiZWwgPSB0aWNrLmxhYmVsO1xuICAgICAgICAgICAgY29uc3Qgb3B0c0F0SW5kZXggPSBvcHRpb25UaWNrcy5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dChpKSk7XG4gICAgICAgICAgICBwaXhlbCA9IHRoaXMuZ2V0UGl4ZWxGb3JUaWNrKGkpICsgb3B0aW9uVGlja3MubGFiZWxPZmZzZXQ7XG4gICAgICAgICAgICBmb250ID0gdGhpcy5fcmVzb2x2ZVRpY2tGb250T3B0aW9ucyhpKTtcbiAgICAgICAgICAgIGxpbmVIZWlnaHQgPSBmb250LmxpbmVIZWlnaHQ7XG4gICAgICAgICAgICBsaW5lQ291bnQgPSBpc0FycmF5KGxhYmVsKSA/IGxhYmVsLmxlbmd0aCA6IDE7XG4gICAgICAgICAgICBjb25zdCBoYWxmQ291bnQgPSBsaW5lQ291bnQgLyAyO1xuICAgICAgICAgICAgY29uc3QgY29sb3IgPSBvcHRzQXRJbmRleC5jb2xvcjtcbiAgICAgICAgICAgIGNvbnN0IHN0cm9rZUNvbG9yID0gb3B0c0F0SW5kZXgudGV4dFN0cm9rZUNvbG9yO1xuICAgICAgICAgICAgY29uc3Qgc3Ryb2tlV2lkdGggPSBvcHRzQXRJbmRleC50ZXh0U3Ryb2tlV2lkdGg7XG4gICAgICAgICAgICBsZXQgdGlja1RleHRBbGlnbiA9IHRleHRBbGlnbjtcbiAgICAgICAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgICAgICAgICB4ID0gcGl4ZWw7XG4gICAgICAgICAgICAgICAgaWYgKHRleHRBbGlnbiA9PT0gJ2lubmVyJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gaWxlbiAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpY2tUZXh0QWxpZ24gPSAhdGhpcy5vcHRpb25zLnJldmVyc2UgPyAncmlnaHQnIDogJ2xlZnQnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpY2tUZXh0QWxpZ24gPSAhdGhpcy5vcHRpb25zLnJldmVyc2UgPyAnbGVmdCcgOiAncmlnaHQnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGlja1RleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNyb3NzQWxpZ24gPT09ICduZWFyJyB8fCByb3RhdGlvbiAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dE9mZnNldCA9IC1saW5lQ291bnQgKiBsaW5lSGVpZ2h0ICsgbGluZUhlaWdodCAvIDI7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3Jvc3NBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRPZmZzZXQgPSAtbGFiZWxTaXplcy5oaWdoZXN0LmhlaWdodCAvIDIgLSBoYWxmQ291bnQgKiBsaW5lSGVpZ2h0ICsgbGluZUhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRPZmZzZXQgPSAtbGFiZWxTaXplcy5oaWdoZXN0LmhlaWdodCArIGxpbmVIZWlnaHQgLyAyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNyb3NzQWxpZ24gPT09ICduZWFyJyB8fCByb3RhdGlvbiAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dE9mZnNldCA9IGxpbmVIZWlnaHQgLyAyO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNyb3NzQWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0T2Zmc2V0ID0gbGFiZWxTaXplcy5oaWdoZXN0LmhlaWdodCAvIDIgLSBoYWxmQ291bnQgKiBsaW5lSGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dE9mZnNldCA9IGxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQgLSBsaW5lQ291bnQgKiBsaW5lSGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtaXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dE9mZnNldCAqPSAtMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJvdGF0aW9uICE9PSAwICYmICFvcHRzQXRJbmRleC5zaG93TGFiZWxCYWNrZHJvcCkge1xuICAgICAgICAgICAgICAgICAgICB4ICs9IGxpbmVIZWlnaHQgLyAyICogTWF0aC5zaW4ocm90YXRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgeSA9IHBpeGVsO1xuICAgICAgICAgICAgICAgIHRleHRPZmZzZXQgPSAoMSAtIGxpbmVDb3VudCkgKiBsaW5lSGVpZ2h0IC8gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBiYWNrZHJvcDtcbiAgICAgICAgICAgIGlmIChvcHRzQXRJbmRleC5zaG93TGFiZWxCYWNrZHJvcCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxhYmVsUGFkZGluZyA9IHRvUGFkZGluZyhvcHRzQXRJbmRleC5iYWNrZHJvcFBhZGRpbmcpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IGxhYmVsU2l6ZXMuaGVpZ2h0c1tpXTtcbiAgICAgICAgICAgICAgICBjb25zdCB3aWR0aCA9IGxhYmVsU2l6ZXMud2lkdGhzW2ldO1xuICAgICAgICAgICAgICAgIGxldCB0b3AgPSB0ZXh0T2Zmc2V0IC0gbGFiZWxQYWRkaW5nLnRvcDtcbiAgICAgICAgICAgICAgICBsZXQgbGVmdCA9IDAgLSBsYWJlbFBhZGRpbmcubGVmdDtcbiAgICAgICAgICAgICAgICBzd2l0Y2godGV4dEJhc2VsaW5lKXtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbWlkZGxlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcCAtPSBoZWlnaHQgLyAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3AgLT0gaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN3aXRjaCh0ZXh0QWxpZ24pe1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdjZW50ZXInOlxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCAtPSB3aWR0aCAvIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCAtPSB3aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBiYWNrZHJvcCA9IHtcbiAgICAgICAgICAgICAgICAgICAgbGVmdCxcbiAgICAgICAgICAgICAgICAgICAgdG9wLFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGggKyBsYWJlbFBhZGRpbmcud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0ICsgbGFiZWxQYWRkaW5nLmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IG9wdHNBdEluZGV4LmJhY2tkcm9wQ29sb3JcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgbGFiZWwsXG4gICAgICAgICAgICAgICAgZm9udCxcbiAgICAgICAgICAgICAgICB0ZXh0T2Zmc2V0LFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgcm90YXRpb24sXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yLFxuICAgICAgICAgICAgICAgICAgICBzdHJva2VDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbjogdGlja1RleHRBbGlnbixcbiAgICAgICAgICAgICAgICAgICAgdGV4dEJhc2VsaW5lLFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgeCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHlcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3BcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXRlbXM7XG4gICAgfVxuICAgIF9nZXRYQXhpc0xhYmVsQWxpZ25tZW50KCkge1xuICAgICAgICBjb25zdCB7IHBvc2l0aW9uICwgdGlja3MgIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHJvdGF0aW9uID0gLXRvUmFkaWFucyh0aGlzLmxhYmVsUm90YXRpb24pO1xuICAgICAgICBpZiAocm90YXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBwb3NpdGlvbiA9PT0gJ3RvcCcgPyAnbGVmdCcgOiAncmlnaHQnO1xuICAgICAgICB9XG4gICAgICAgIGxldCBhbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICBpZiAodGlja3MuYWxpZ24gPT09ICdzdGFydCcpIHtcbiAgICAgICAgICAgIGFsaWduID0gJ2xlZnQnO1xuICAgICAgICB9IGVsc2UgaWYgKHRpY2tzLmFsaWduID09PSAnZW5kJykge1xuICAgICAgICAgICAgYWxpZ24gPSAncmlnaHQnO1xuICAgICAgICB9IGVsc2UgaWYgKHRpY2tzLmFsaWduID09PSAnaW5uZXInKSB7XG4gICAgICAgICAgICBhbGlnbiA9ICdpbm5lcic7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFsaWduO1xuICAgIH1cbiAgICBfZ2V0WUF4aXNMYWJlbEFsaWdubWVudCh0bCkge1xuICAgICAgICBjb25zdCB7IHBvc2l0aW9uICwgdGlja3M6IHsgY3Jvc3NBbGlnbiAsIG1pcnJvciAsIHBhZGRpbmcgIH0gIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGxhYmVsU2l6ZXMgPSB0aGlzLl9nZXRMYWJlbFNpemVzKCk7XG4gICAgICAgIGNvbnN0IHRpY2tBbmRQYWRkaW5nID0gdGwgKyBwYWRkaW5nO1xuICAgICAgICBjb25zdCB3aWRlc3QgPSBsYWJlbFNpemVzLndpZGVzdC53aWR0aDtcbiAgICAgICAgbGV0IHRleHRBbGlnbjtcbiAgICAgICAgbGV0IHg7XG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgICBpZiAobWlycm9yKSB7XG4gICAgICAgICAgICAgICAgeCA9IHRoaXMucmlnaHQgKyBwYWRkaW5nO1xuICAgICAgICAgICAgICAgIGlmIChjcm9zc0FsaWduID09PSAnbmVhcicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduID0gJ2xlZnQnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3Jvc3NBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgICAgICAgICAgIHggKz0gd2lkZXN0IC8gMjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ24gPSAncmlnaHQnO1xuICAgICAgICAgICAgICAgICAgICB4ICs9IHdpZGVzdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHggPSB0aGlzLnJpZ2h0IC0gdGlja0FuZFBhZGRpbmc7XG4gICAgICAgICAgICAgICAgaWYgKGNyb3NzQWxpZ24gPT09ICduZWFyJykge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ24gPSAncmlnaHQnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3Jvc3NBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgICAgICAgICAgIHggLT0gd2lkZXN0IC8gMjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ24gPSAnbGVmdCc7XG4gICAgICAgICAgICAgICAgICAgIHggPSB0aGlzLmxlZnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgICBpZiAobWlycm9yKSB7XG4gICAgICAgICAgICAgICAgeCA9IHRoaXMubGVmdCArIHBhZGRpbmc7XG4gICAgICAgICAgICAgICAgaWYgKGNyb3NzQWxpZ24gPT09ICduZWFyJykge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ24gPSAncmlnaHQnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3Jvc3NBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgICAgICAgICAgIHggLT0gd2lkZXN0IC8gMjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ24gPSAnbGVmdCc7XG4gICAgICAgICAgICAgICAgICAgIHggLT0gd2lkZXN0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgeCA9IHRoaXMubGVmdCArIHRpY2tBbmRQYWRkaW5nO1xuICAgICAgICAgICAgICAgIGlmIChjcm9zc0FsaWduID09PSAnbmVhcicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduID0gJ2xlZnQnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3Jvc3NBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgICAgICAgICAgIHggKz0gd2lkZXN0IC8gMjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ24gPSAncmlnaHQnO1xuICAgICAgICAgICAgICAgICAgICB4ID0gdGhpcy5yaWdodDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0ZXh0QWxpZ24gPSAncmlnaHQnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0ZXh0QWxpZ24sXG4gICAgICAgICAgICB4XG4gICAgICAgIH07XG4gICAgfVxuIF9jb21wdXRlTGFiZWxBcmVhKCkge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnRpY2tzLm1pcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSB0aGlzLm9wdGlvbnMucG9zaXRpb247XG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ2xlZnQnIHx8IHBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICBsZWZ0OiB0aGlzLmxlZnQsXG4gICAgICAgICAgICAgICAgYm90dG9tOiBjaGFydC5oZWlnaHQsXG4gICAgICAgICAgICAgICAgcmlnaHQ6IHRoaXMucmlnaHRcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAndG9wJyB8fCBwb3NpdGlvbiA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdG9wOiB0aGlzLnRvcCxcbiAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgIGJvdHRvbTogdGhpcy5ib3R0b20sXG4gICAgICAgICAgICAgICAgcmlnaHQ6IGNoYXJ0LndpZHRoXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuIGRyYXdCYWNrZ3JvdW5kKCkge1xuICAgICAgICBjb25zdCB7IGN0eCAsIG9wdGlvbnM6IHsgYmFja2dyb3VuZENvbG9yICB9ICwgbGVmdCAsIHRvcCAsIHdpZHRoICwgaGVpZ2h0ICB9ID0gdGhpcztcbiAgICAgICAgaWYgKGJhY2tncm91bmRDb2xvcikge1xuICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBiYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgICAgICBjdHguZmlsbFJlY3QobGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0TGluZVdpZHRoRm9yVmFsdWUodmFsdWUpIHtcbiAgICAgICAgY29uc3QgZ3JpZCA9IHRoaXMub3B0aW9ucy5ncmlkO1xuICAgICAgICBpZiAoIXRoaXMuX2lzVmlzaWJsZSgpIHx8ICFncmlkLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRpY2tzID0gdGhpcy50aWNrcztcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aWNrcy5maW5kSW5kZXgoKHQpPT50LnZhbHVlID09PSB2YWx1ZSk7XG4gICAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBvcHRzID0gZ3JpZC5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dChpbmRleCkpO1xuICAgICAgICAgICAgcmV0dXJuIG9wdHMubGluZVdpZHRoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiBkcmF3R3JpZChjaGFydEFyZWEpIHtcbiAgICAgICAgY29uc3QgZ3JpZCA9IHRoaXMub3B0aW9ucy5ncmlkO1xuICAgICAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICAgICAgY29uc3QgaXRlbXMgPSB0aGlzLl9ncmlkTGluZUl0ZW1zIHx8ICh0aGlzLl9ncmlkTGluZUl0ZW1zID0gdGhpcy5fY29tcHV0ZUdyaWRMaW5lSXRlbXMoY2hhcnRBcmVhKSk7XG4gICAgICAgIGxldCBpLCBpbGVuO1xuICAgICAgICBjb25zdCBkcmF3TGluZSA9IChwMSwgcDIsIHN0eWxlKT0+e1xuICAgICAgICAgICAgaWYgKCFzdHlsZS53aWR0aCB8fCAhc3R5bGUuY29sb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgY3R4LmxpbmVXaWR0aCA9IHN0eWxlLndpZHRoO1xuICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gc3R5bGUuY29sb3I7XG4gICAgICAgICAgICBjdHguc2V0TGluZURhc2goc3R5bGUuYm9yZGVyRGFzaCB8fCBbXSk7XG4gICAgICAgICAgICBjdHgubGluZURhc2hPZmZzZXQgPSBzdHlsZS5ib3JkZXJEYXNoT2Zmc2V0O1xuICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyhwMS54LCBwMS55KTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8ocDIueCwgcDIueSk7XG4gICAgICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoZ3JpZC5kaXNwbGF5KSB7XG4gICAgICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBpdGVtc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoZ3JpZC5kcmF3T25DaGFydEFyZWEpIHtcbiAgICAgICAgICAgICAgICAgICAgZHJhd0xpbmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogaXRlbS54MSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IGl0ZW0ueTFcbiAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogaXRlbS54MixcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IGl0ZW0ueTJcbiAgICAgICAgICAgICAgICAgICAgfSwgaXRlbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChncmlkLmRyYXdUaWNrcykge1xuICAgICAgICAgICAgICAgICAgICBkcmF3TGluZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBpdGVtLnR4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IGl0ZW0udHkxXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IGl0ZW0udHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogaXRlbS50eTJcbiAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGl0ZW0udGlja0NvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGl0ZW0udGlja1dpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyRGFzaDogaXRlbS50aWNrQm9yZGVyRGFzaCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckRhc2hPZmZzZXQ6IGl0ZW0udGlja0JvcmRlckRhc2hPZmZzZXRcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuIGRyYXdCb3JkZXIoKSB7XG4gICAgICAgIGNvbnN0IHsgY2hhcnQgLCBjdHggLCBvcHRpb25zOiB7IGJvcmRlciAsIGdyaWQgIH0gIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBib3JkZXJPcHRzID0gYm9yZGVyLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICBjb25zdCBheGlzV2lkdGggPSBib3JkZXIuZGlzcGxheSA/IGJvcmRlck9wdHMud2lkdGggOiAwO1xuICAgICAgICBpZiAoIWF4aXNXaWR0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxhc3RMaW5lV2lkdGggPSBncmlkLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KDApKS5saW5lV2lkdGg7XG4gICAgICAgIGNvbnN0IGJvcmRlclZhbHVlID0gdGhpcy5fYm9yZGVyVmFsdWU7XG4gICAgICAgIGxldCB4MSwgeDIsIHkxLCB5MjtcbiAgICAgICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgIHgxID0gX2FsaWduUGl4ZWwoY2hhcnQsIHRoaXMubGVmdCwgYXhpc1dpZHRoKSAtIGF4aXNXaWR0aCAvIDI7XG4gICAgICAgICAgICB4MiA9IF9hbGlnblBpeGVsKGNoYXJ0LCB0aGlzLnJpZ2h0LCBsYXN0TGluZVdpZHRoKSArIGxhc3RMaW5lV2lkdGggLyAyO1xuICAgICAgICAgICAgeTEgPSB5MiA9IGJvcmRlclZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgeTEgPSBfYWxpZ25QaXhlbChjaGFydCwgdGhpcy50b3AsIGF4aXNXaWR0aCkgLSBheGlzV2lkdGggLyAyO1xuICAgICAgICAgICAgeTIgPSBfYWxpZ25QaXhlbChjaGFydCwgdGhpcy5ib3R0b20sIGxhc3RMaW5lV2lkdGgpICsgbGFzdExpbmVXaWR0aCAvIDI7XG4gICAgICAgICAgICB4MSA9IHgyID0gYm9yZGVyVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IGJvcmRlck9wdHMud2lkdGg7XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGJvcmRlck9wdHMuY29sb3I7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY3R4Lm1vdmVUbyh4MSwgeTEpO1xuICAgICAgICBjdHgubGluZVRvKHgyLCB5Mik7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG4gZHJhd0xhYmVscyhjaGFydEFyZWEpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uVGlja3MgPSB0aGlzLm9wdGlvbnMudGlja3M7XG4gICAgICAgIGlmICghb3B0aW9uVGlja3MuZGlzcGxheSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgICAgICBjb25zdCBhcmVhID0gdGhpcy5fY29tcHV0ZUxhYmVsQXJlYSgpO1xuICAgICAgICBpZiAoYXJlYSkge1xuICAgICAgICAgICAgY2xpcEFyZWEoY3R4LCBhcmVhKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpdGVtcyA9IHRoaXMuZ2V0TGFiZWxJdGVtcyhjaGFydEFyZWEpO1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbXMpe1xuICAgICAgICAgICAgY29uc3QgcmVuZGVyVGV4dE9wdGlvbnMgPSBpdGVtLm9wdGlvbnM7XG4gICAgICAgICAgICBjb25zdCB0aWNrRm9udCA9IGl0ZW0uZm9udDtcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gaXRlbS5sYWJlbDtcbiAgICAgICAgICAgIGNvbnN0IHkgPSBpdGVtLnRleHRPZmZzZXQ7XG4gICAgICAgICAgICByZW5kZXJUZXh0KGN0eCwgbGFiZWwsIDAsIHksIHRpY2tGb250LCByZW5kZXJUZXh0T3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFyZWEpIHtcbiAgICAgICAgICAgIHVuY2xpcEFyZWEoY3R4KTtcbiAgICAgICAgfVxuICAgIH1cbiBkcmF3VGl0bGUoKSB7XG4gICAgICAgIGNvbnN0IHsgY3R4ICwgb3B0aW9uczogeyBwb3NpdGlvbiAsIHRpdGxlICwgcmV2ZXJzZSAgfSAgfSA9IHRoaXM7XG4gICAgICAgIGlmICghdGl0bGUuZGlzcGxheSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZvbnQgPSB0b0ZvbnQodGl0bGUuZm9udCk7XG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcodGl0bGUucGFkZGluZyk7XG4gICAgICAgIGNvbnN0IGFsaWduID0gdGl0bGUuYWxpZ247XG4gICAgICAgIGxldCBvZmZzZXQgPSBmb250LmxpbmVIZWlnaHQgLyAyO1xuICAgICAgICBpZiAocG9zaXRpb24gPT09ICdib3R0b20nIHx8IHBvc2l0aW9uID09PSAnY2VudGVyJyB8fCBpc09iamVjdChwb3NpdGlvbikpIHtcbiAgICAgICAgICAgIG9mZnNldCArPSBwYWRkaW5nLmJvdHRvbTtcbiAgICAgICAgICAgIGlmIChpc0FycmF5KHRpdGxlLnRleHQpKSB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IGZvbnQubGluZUhlaWdodCAqICh0aXRsZS50ZXh0Lmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2Zmc2V0ICs9IHBhZGRpbmcudG9wO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgdGl0bGVYICwgdGl0bGVZICwgbWF4V2lkdGggLCByb3RhdGlvbiAgfSA9IHRpdGxlQXJncyh0aGlzLCBvZmZzZXQsIHBvc2l0aW9uLCBhbGlnbik7XG4gICAgICAgIHJlbmRlclRleHQoY3R4LCB0aXRsZS50ZXh0LCAwLCAwLCBmb250LCB7XG4gICAgICAgICAgICBjb2xvcjogdGl0bGUuY29sb3IsXG4gICAgICAgICAgICBtYXhXaWR0aCxcbiAgICAgICAgICAgIHJvdGF0aW9uLFxuICAgICAgICAgICAgdGV4dEFsaWduOiB0aXRsZUFsaWduKGFsaWduLCBwb3NpdGlvbiwgcmV2ZXJzZSksXG4gICAgICAgICAgICB0ZXh0QmFzZWxpbmU6ICdtaWRkbGUnLFxuICAgICAgICAgICAgdHJhbnNsYXRpb246IFtcbiAgICAgICAgICAgICAgICB0aXRsZVgsXG4gICAgICAgICAgICAgICAgdGl0bGVZXG4gICAgICAgICAgICBdXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBkcmF3KGNoYXJ0QXJlYSkge1xuICAgICAgICBpZiAoIXRoaXMuX2lzVmlzaWJsZSgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kcmF3QmFja2dyb3VuZCgpO1xuICAgICAgICB0aGlzLmRyYXdHcmlkKGNoYXJ0QXJlYSk7XG4gICAgICAgIHRoaXMuZHJhd0JvcmRlcigpO1xuICAgICAgICB0aGlzLmRyYXdUaXRsZSgpO1xuICAgICAgICB0aGlzLmRyYXdMYWJlbHMoY2hhcnRBcmVhKTtcbiAgICB9XG4gX2xheWVycygpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgdHogPSBvcHRzLnRpY2tzICYmIG9wdHMudGlja3MueiB8fCAwO1xuICAgICAgICBjb25zdCBneiA9IHZhbHVlT3JEZWZhdWx0KG9wdHMuZ3JpZCAmJiBvcHRzLmdyaWQueiwgLTEpO1xuICAgICAgICBjb25zdCBieiA9IHZhbHVlT3JEZWZhdWx0KG9wdHMuYm9yZGVyICYmIG9wdHMuYm9yZGVyLnosIDApO1xuICAgICAgICBpZiAoIXRoaXMuX2lzVmlzaWJsZSgpIHx8IHRoaXMuZHJhdyAhPT0gU2NhbGUucHJvdG90eXBlLmRyYXcpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB6OiB0eixcbiAgICAgICAgICAgICAgICAgICAgZHJhdzogKGNoYXJ0QXJlYSk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhdyhjaGFydEFyZWEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHo6IGd6LFxuICAgICAgICAgICAgICAgIGRyYXc6IChjaGFydEFyZWEpPT57XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhd0JhY2tncm91bmQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3R3JpZChjaGFydEFyZWEpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXdUaXRsZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgejogYnosXG4gICAgICAgICAgICAgICAgZHJhdzogKCk9PntcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3Qm9yZGVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB6OiB0eixcbiAgICAgICAgICAgICAgICBkcmF3OiAoY2hhcnRBcmVhKT0+e1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXdMYWJlbHMoY2hhcnRBcmVhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIF07XG4gICAgfVxuIGdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKHR5cGUpIHtcbiAgICAgICAgY29uc3QgbWV0YXMgPSB0aGlzLmNoYXJ0LmdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKTtcbiAgICAgICAgY29uc3QgYXhpc0lEID0gdGhpcy5heGlzICsgJ0F4aXNJRCc7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICBsZXQgaSwgaWxlbjtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gbWV0YXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIGNvbnN0IG1ldGEgPSBtZXRhc1tpXTtcbiAgICAgICAgICAgIGlmIChtZXRhW2F4aXNJRF0gPT09IHRoaXMuaWQgJiYgKCF0eXBlIHx8IG1ldGEudHlwZSA9PT0gdHlwZSkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChtZXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiBfcmVzb2x2ZVRpY2tGb250T3B0aW9ucyhpbmRleCkge1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zLnRpY2tzLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KGluZGV4KSk7XG4gICAgICAgIHJldHVybiB0b0ZvbnQob3B0cy5mb250KTtcbiAgICB9XG4gX21heERpZ2l0cygpIHtcbiAgICAgICAgY29uc3QgZm9udFNpemUgPSB0aGlzLl9yZXNvbHZlVGlja0ZvbnRPcHRpb25zKDApLmxpbmVIZWlnaHQ7XG4gICAgICAgIHJldHVybiAodGhpcy5pc0hvcml6b250YWwoKSA/IHRoaXMud2lkdGggOiB0aGlzLmhlaWdodCkgLyBmb250U2l6ZTtcbiAgICB9XG59XG5cbmNsYXNzIFR5cGVkUmVnaXN0cnkge1xuICAgIGNvbnN0cnVjdG9yKHR5cGUsIHNjb3BlLCBvdmVycmlkZSl7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5vdmVycmlkZSA9IG92ZXJyaWRlO1xuICAgICAgICB0aGlzLml0ZW1zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9XG4gICAgaXNGb3JUeXBlKHR5cGUpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaXNQcm90b3R5cGVPZi5jYWxsKHRoaXMudHlwZS5wcm90b3R5cGUsIHR5cGUucHJvdG90eXBlKTtcbiAgICB9XG4gcmVnaXN0ZXIoaXRlbSkge1xuICAgICAgICBjb25zdCBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihpdGVtKTtcbiAgICAgICAgbGV0IHBhcmVudFNjb3BlO1xuICAgICAgICBpZiAoaXNJQ2hhcnRDb21wb25lbnQocHJvdG8pKSB7XG4gICAgICAgICAgICBwYXJlbnRTY29wZSA9IHRoaXMucmVnaXN0ZXIocHJvdG8pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5pdGVtcztcbiAgICAgICAgY29uc3QgaWQgPSBpdGVtLmlkO1xuICAgICAgICBjb25zdCBzY29wZSA9IHRoaXMuc2NvcGUgKyAnLicgKyBpZDtcbiAgICAgICAgaWYgKCFpZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjbGFzcyBkb2VzIG5vdCBoYXZlIGlkOiAnICsgaXRlbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlkIGluIGl0ZW1zKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NvcGU7XG4gICAgICAgIH1cbiAgICAgICAgaXRlbXNbaWRdID0gaXRlbTtcbiAgICAgICAgcmVnaXN0ZXJEZWZhdWx0cyhpdGVtLCBzY29wZSwgcGFyZW50U2NvcGUpO1xuICAgICAgICBpZiAodGhpcy5vdmVycmlkZSkge1xuICAgICAgICAgICAgZGVmYXVsdHMub3ZlcnJpZGUoaXRlbS5pZCwgaXRlbS5vdmVycmlkZXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzY29wZTtcbiAgICB9XG4gZ2V0KGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLml0ZW1zW2lkXTtcbiAgICB9XG4gdW5yZWdpc3RlcihpdGVtKSB7XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5pdGVtcztcbiAgICAgICAgY29uc3QgaWQgPSBpdGVtLmlkO1xuICAgICAgICBjb25zdCBzY29wZSA9IHRoaXMuc2NvcGU7XG4gICAgICAgIGlmIChpZCBpbiBpdGVtcykge1xuICAgICAgICAgICAgZGVsZXRlIGl0ZW1zW2lkXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2NvcGUgJiYgaWQgaW4gZGVmYXVsdHNbc2NvcGVdKSB7XG4gICAgICAgICAgICBkZWxldGUgZGVmYXVsdHNbc2NvcGVdW2lkXTtcbiAgICAgICAgICAgIGlmICh0aGlzLm92ZXJyaWRlKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIG92ZXJyaWRlc1tpZF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiByZWdpc3RlckRlZmF1bHRzKGl0ZW0sIHNjb3BlLCBwYXJlbnRTY29wZSkge1xuICAgIGNvbnN0IGl0ZW1EZWZhdWx0cyA9IG1lcmdlKE9iamVjdC5jcmVhdGUobnVsbCksIFtcbiAgICAgICAgcGFyZW50U2NvcGUgPyBkZWZhdWx0cy5nZXQocGFyZW50U2NvcGUpIDoge30sXG4gICAgICAgIGRlZmF1bHRzLmdldChzY29wZSksXG4gICAgICAgIGl0ZW0uZGVmYXVsdHNcbiAgICBdKTtcbiAgICBkZWZhdWx0cy5zZXQoc2NvcGUsIGl0ZW1EZWZhdWx0cyk7XG4gICAgaWYgKGl0ZW0uZGVmYXVsdFJvdXRlcykge1xuICAgICAgICByb3V0ZURlZmF1bHRzKHNjb3BlLCBpdGVtLmRlZmF1bHRSb3V0ZXMpO1xuICAgIH1cbiAgICBpZiAoaXRlbS5kZXNjcmlwdG9ycykge1xuICAgICAgICBkZWZhdWx0cy5kZXNjcmliZShzY29wZSwgaXRlbS5kZXNjcmlwdG9ycyk7XG4gICAgfVxufVxuZnVuY3Rpb24gcm91dGVEZWZhdWx0cyhzY29wZSwgcm91dGVzKSB7XG4gICAgT2JqZWN0LmtleXMocm91dGVzKS5mb3JFYWNoKChwcm9wZXJ0eSk9PntcbiAgICAgICAgY29uc3QgcHJvcGVydHlQYXJ0cyA9IHByb3BlcnR5LnNwbGl0KCcuJyk7XG4gICAgICAgIGNvbnN0IHNvdXJjZU5hbWUgPSBwcm9wZXJ0eVBhcnRzLnBvcCgpO1xuICAgICAgICBjb25zdCBzb3VyY2VTY29wZSA9IFtcbiAgICAgICAgICAgIHNjb3BlXG4gICAgICAgIF0uY29uY2F0KHByb3BlcnR5UGFydHMpLmpvaW4oJy4nKTtcbiAgICAgICAgY29uc3QgcGFydHMgPSByb3V0ZXNbcHJvcGVydHldLnNwbGl0KCcuJyk7XG4gICAgICAgIGNvbnN0IHRhcmdldE5hbWUgPSBwYXJ0cy5wb3AoKTtcbiAgICAgICAgY29uc3QgdGFyZ2V0U2NvcGUgPSBwYXJ0cy5qb2luKCcuJyk7XG4gICAgICAgIGRlZmF1bHRzLnJvdXRlKHNvdXJjZVNjb3BlLCBzb3VyY2VOYW1lLCB0YXJnZXRTY29wZSwgdGFyZ2V0TmFtZSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBpc0lDaGFydENvbXBvbmVudChwcm90bykge1xuICAgIHJldHVybiAnaWQnIGluIHByb3RvICYmICdkZWZhdWx0cycgaW4gcHJvdG87XG59XG5cbmNsYXNzIFJlZ2lzdHJ5IHtcbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICB0aGlzLmNvbnRyb2xsZXJzID0gbmV3IFR5cGVkUmVnaXN0cnkoRGF0YXNldENvbnRyb2xsZXIsICdkYXRhc2V0cycsIHRydWUpO1xuICAgICAgICB0aGlzLmVsZW1lbnRzID0gbmV3IFR5cGVkUmVnaXN0cnkoRWxlbWVudCwgJ2VsZW1lbnRzJyk7XG4gICAgICAgIHRoaXMucGx1Z2lucyA9IG5ldyBUeXBlZFJlZ2lzdHJ5KE9iamVjdCwgJ3BsdWdpbnMnKTtcbiAgICAgICAgdGhpcy5zY2FsZXMgPSBuZXcgVHlwZWRSZWdpc3RyeShTY2FsZSwgJ3NjYWxlcycpO1xuICAgICAgICB0aGlzLl90eXBlZFJlZ2lzdHJpZXMgPSBbXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJzLFxuICAgICAgICAgICAgdGhpcy5zY2FsZXMsXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzXG4gICAgICAgIF07XG4gICAgfVxuIGFkZCguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuX2VhY2goJ3JlZ2lzdGVyJywgYXJncyk7XG4gICAgfVxuICAgIHJlbW92ZSguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuX2VhY2goJ3VucmVnaXN0ZXInLCBhcmdzKTtcbiAgICB9XG4gYWRkQ29udHJvbGxlcnMoLi4uYXJncykge1xuICAgICAgICB0aGlzLl9lYWNoKCdyZWdpc3RlcicsIGFyZ3MsIHRoaXMuY29udHJvbGxlcnMpO1xuICAgIH1cbiBhZGRFbGVtZW50cyguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuX2VhY2goJ3JlZ2lzdGVyJywgYXJncywgdGhpcy5lbGVtZW50cyk7XG4gICAgfVxuIGFkZFBsdWdpbnMoLi4uYXJncykge1xuICAgICAgICB0aGlzLl9lYWNoKCdyZWdpc3RlcicsIGFyZ3MsIHRoaXMucGx1Z2lucyk7XG4gICAgfVxuIGFkZFNjYWxlcyguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuX2VhY2goJ3JlZ2lzdGVyJywgYXJncywgdGhpcy5zY2FsZXMpO1xuICAgIH1cbiBnZXRDb250cm9sbGVyKGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXQoaWQsIHRoaXMuY29udHJvbGxlcnMsICdjb250cm9sbGVyJyk7XG4gICAgfVxuIGdldEVsZW1lbnQoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldChpZCwgdGhpcy5lbGVtZW50cywgJ2VsZW1lbnQnKTtcbiAgICB9XG4gZ2V0UGx1Z2luKGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXQoaWQsIHRoaXMucGx1Z2lucywgJ3BsdWdpbicpO1xuICAgIH1cbiBnZXRTY2FsZShpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0KGlkLCB0aGlzLnNjYWxlcywgJ3NjYWxlJyk7XG4gICAgfVxuIHJlbW92ZUNvbnRyb2xsZXJzKC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5fZWFjaCgndW5yZWdpc3RlcicsIGFyZ3MsIHRoaXMuY29udHJvbGxlcnMpO1xuICAgIH1cbiByZW1vdmVFbGVtZW50cyguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuX2VhY2goJ3VucmVnaXN0ZXInLCBhcmdzLCB0aGlzLmVsZW1lbnRzKTtcbiAgICB9XG4gcmVtb3ZlUGx1Z2lucyguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuX2VhY2goJ3VucmVnaXN0ZXInLCBhcmdzLCB0aGlzLnBsdWdpbnMpO1xuICAgIH1cbiByZW1vdmVTY2FsZXMoLi4uYXJncykge1xuICAgICAgICB0aGlzLl9lYWNoKCd1bnJlZ2lzdGVyJywgYXJncywgdGhpcy5zY2FsZXMpO1xuICAgIH1cbiBfZWFjaChtZXRob2QsIGFyZ3MsIHR5cGVkUmVnaXN0cnkpIHtcbiAgICAgICAgW1xuICAgICAgICAgICAgLi4uYXJnc1xuICAgICAgICBdLmZvckVhY2goKGFyZyk9PntcbiAgICAgICAgICAgIGNvbnN0IHJlZyA9IHR5cGVkUmVnaXN0cnkgfHwgdGhpcy5fZ2V0UmVnaXN0cnlGb3JUeXBlKGFyZyk7XG4gICAgICAgICAgICBpZiAodHlwZWRSZWdpc3RyeSB8fCByZWcuaXNGb3JUeXBlKGFyZykgfHwgcmVnID09PSB0aGlzLnBsdWdpbnMgJiYgYXJnLmlkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXhlYyhtZXRob2QsIHJlZywgYXJnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZWFjaChhcmcsIChpdGVtKT0+e1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtUmVnID0gdHlwZWRSZWdpc3RyeSB8fCB0aGlzLl9nZXRSZWdpc3RyeUZvclR5cGUoaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2V4ZWMobWV0aG9kLCBpdGVtUmVnLCBpdGVtKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuIF9leGVjKG1ldGhvZCwgcmVnaXN0cnksIGNvbXBvbmVudCkge1xuICAgICAgICBjb25zdCBjYW1lbE1ldGhvZCA9IF9jYXBpdGFsaXplKG1ldGhvZCk7XG4gICAgICAgIGNhbGxiYWNrKGNvbXBvbmVudFsnYmVmb3JlJyArIGNhbWVsTWV0aG9kXSwgW10sIGNvbXBvbmVudCk7XG4gICAgICAgIHJlZ2lzdHJ5W21ldGhvZF0oY29tcG9uZW50KTtcbiAgICAgICAgY2FsbGJhY2soY29tcG9uZW50WydhZnRlcicgKyBjYW1lbE1ldGhvZF0sIFtdLCBjb21wb25lbnQpO1xuICAgIH1cbiBfZ2V0UmVnaXN0cnlGb3JUeXBlKHR5cGUpIHtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMuX3R5cGVkUmVnaXN0cmllcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBjb25zdCByZWcgPSB0aGlzLl90eXBlZFJlZ2lzdHJpZXNbaV07XG4gICAgICAgICAgICBpZiAocmVnLmlzRm9yVHlwZSh0eXBlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucGx1Z2lucztcbiAgICB9XG4gX2dldChpZCwgdHlwZWRSZWdpc3RyeSwgdHlwZSkge1xuICAgICAgICBjb25zdCBpdGVtID0gdHlwZWRSZWdpc3RyeS5nZXQoaWQpO1xuICAgICAgICBpZiAoaXRlbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIGlkICsgJ1wiIGlzIG5vdCBhIHJlZ2lzdGVyZWQgJyArIHR5cGUgKyAnLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpdGVtO1xuICAgIH1cbn1cbnZhciByZWdpc3RyeSA9IC8qICNfX1BVUkVfXyAqLyBuZXcgUmVnaXN0cnkoKTtcblxuY2xhc3MgUGx1Z2luU2VydmljZSB7XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgdGhpcy5faW5pdCA9IFtdO1xuICAgIH1cbiBub3RpZnkoY2hhcnQsIGhvb2ssIGFyZ3MsIGZpbHRlcikge1xuICAgICAgICBpZiAoaG9vayA9PT0gJ2JlZm9yZUluaXQnKSB7XG4gICAgICAgICAgICB0aGlzLl9pbml0ID0gdGhpcy5fY3JlYXRlRGVzY3JpcHRvcnMoY2hhcnQsIHRydWUpO1xuICAgICAgICAgICAgdGhpcy5fbm90aWZ5KHRoaXMuX2luaXQsIGNoYXJ0LCAnaW5zdGFsbCcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0b3JzID0gZmlsdGVyID8gdGhpcy5fZGVzY3JpcHRvcnMoY2hhcnQpLmZpbHRlcihmaWx0ZXIpIDogdGhpcy5fZGVzY3JpcHRvcnMoY2hhcnQpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9ub3RpZnkoZGVzY3JpcHRvcnMsIGNoYXJ0LCBob29rLCBhcmdzKTtcbiAgICAgICAgaWYgKGhvb2sgPT09ICdhZnRlckRlc3Ryb3knKSB7XG4gICAgICAgICAgICB0aGlzLl9ub3RpZnkoZGVzY3JpcHRvcnMsIGNoYXJ0LCAnc3RvcCcpO1xuICAgICAgICAgICAgdGhpcy5fbm90aWZ5KHRoaXMuX2luaXQsIGNoYXJ0LCAndW5pbnN0YWxsJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gX25vdGlmeShkZXNjcmlwdG9ycywgY2hhcnQsIGhvb2ssIGFyZ3MpIHtcbiAgICAgICAgYXJncyA9IGFyZ3MgfHwge307XG4gICAgICAgIGZvciAoY29uc3QgZGVzY3JpcHRvciBvZiBkZXNjcmlwdG9ycyl7XG4gICAgICAgICAgICBjb25zdCBwbHVnaW4gPSBkZXNjcmlwdG9yLnBsdWdpbjtcbiAgICAgICAgICAgIGNvbnN0IG1ldGhvZCA9IHBsdWdpbltob29rXTtcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IFtcbiAgICAgICAgICAgICAgICBjaGFydCxcbiAgICAgICAgICAgICAgICBhcmdzLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0b3Iub3B0aW9uc1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayhtZXRob2QsIHBhcmFtcywgcGx1Z2luKSA9PT0gZmFsc2UgJiYgYXJncy5jYW5jZWxhYmxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpbnZhbGlkYXRlKCkge1xuICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWYodGhpcy5fY2FjaGUpKSB7XG4gICAgICAgICAgICB0aGlzLl9vbGRDYWNoZSA9IHRoaXMuX2NhY2hlO1xuICAgICAgICAgICAgdGhpcy5fY2FjaGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gX2Rlc2NyaXB0b3JzKGNoYXJ0KSB7XG4gICAgICAgIGlmICh0aGlzLl9jYWNoZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0b3JzID0gdGhpcy5fY2FjaGUgPSB0aGlzLl9jcmVhdGVEZXNjcmlwdG9ycyhjaGFydCk7XG4gICAgICAgIHRoaXMuX25vdGlmeVN0YXRlQ2hhbmdlcyhjaGFydCk7XG4gICAgICAgIHJldHVybiBkZXNjcmlwdG9ycztcbiAgICB9XG4gICAgX2NyZWF0ZURlc2NyaXB0b3JzKGNoYXJ0LCBhbGwpIHtcbiAgICAgICAgY29uc3QgY29uZmlnID0gY2hhcnQgJiYgY2hhcnQuY29uZmlnO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdmFsdWVPckRlZmF1bHQoY29uZmlnLm9wdGlvbnMgJiYgY29uZmlnLm9wdGlvbnMucGx1Z2lucywge30pO1xuICAgICAgICBjb25zdCBwbHVnaW5zID0gYWxsUGx1Z2lucyhjb25maWcpO1xuICAgICAgICByZXR1cm4gb3B0aW9ucyA9PT0gZmFsc2UgJiYgIWFsbCA/IFtdIDogY3JlYXRlRGVzY3JpcHRvcnMoY2hhcnQsIHBsdWdpbnMsIG9wdGlvbnMsIGFsbCk7XG4gICAgfVxuIF9ub3RpZnlTdGF0ZUNoYW5nZXMoY2hhcnQpIHtcbiAgICAgICAgY29uc3QgcHJldmlvdXNEZXNjcmlwdG9ycyA9IHRoaXMuX29sZENhY2hlIHx8IFtdO1xuICAgICAgICBjb25zdCBkZXNjcmlwdG9ycyA9IHRoaXMuX2NhY2hlO1xuICAgICAgICBjb25zdCBkaWZmID0gKGEsIGIpPT5hLmZpbHRlcigoeCk9PiFiLnNvbWUoKHkpPT54LnBsdWdpbi5pZCA9PT0geS5wbHVnaW4uaWQpKTtcbiAgICAgICAgdGhpcy5fbm90aWZ5KGRpZmYocHJldmlvdXNEZXNjcmlwdG9ycywgZGVzY3JpcHRvcnMpLCBjaGFydCwgJ3N0b3AnKTtcbiAgICAgICAgdGhpcy5fbm90aWZ5KGRpZmYoZGVzY3JpcHRvcnMsIHByZXZpb3VzRGVzY3JpcHRvcnMpLCBjaGFydCwgJ3N0YXJ0Jyk7XG4gICAgfVxufVxuIGZ1bmN0aW9uIGFsbFBsdWdpbnMoY29uZmlnKSB7XG4gICAgY29uc3QgbG9jYWxJZHMgPSB7fTtcbiAgICBjb25zdCBwbHVnaW5zID0gW107XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHJlZ2lzdHJ5LnBsdWdpbnMuaXRlbXMpO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgcGx1Z2lucy5wdXNoKHJlZ2lzdHJ5LmdldFBsdWdpbihrZXlzW2ldKSk7XG4gICAgfVxuICAgIGNvbnN0IGxvY2FsID0gY29uZmlnLnBsdWdpbnMgfHwgW107XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGxvY2FsLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgY29uc3QgcGx1Z2luID0gbG9jYWxbaV07XG4gICAgICAgIGlmIChwbHVnaW5zLmluZGV4T2YocGx1Z2luKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHBsdWdpbnMucHVzaChwbHVnaW4pO1xuICAgICAgICAgICAgbG9jYWxJZHNbcGx1Z2luLmlkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcGx1Z2lucyxcbiAgICAgICAgbG9jYWxJZHNcbiAgICB9O1xufVxuZnVuY3Rpb24gZ2V0T3B0cyhvcHRpb25zLCBhbGwpIHtcbiAgICBpZiAoIWFsbCAmJiBvcHRpb25zID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICByZXR1cm4gb3B0aW9ucztcbn1cbmZ1bmN0aW9uIGNyZWF0ZURlc2NyaXB0b3JzKGNoYXJ0LCB7IHBsdWdpbnMgLCBsb2NhbElkcyAgfSwgb3B0aW9ucywgYWxsKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgY29uc3QgY29udGV4dCA9IGNoYXJ0LmdldENvbnRleHQoKTtcbiAgICBmb3IgKGNvbnN0IHBsdWdpbiBvZiBwbHVnaW5zKXtcbiAgICAgICAgY29uc3QgaWQgPSBwbHVnaW4uaWQ7XG4gICAgICAgIGNvbnN0IG9wdHMgPSBnZXRPcHRzKG9wdGlvbnNbaWRdLCBhbGwpO1xuICAgICAgICBpZiAob3B0cyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgcGx1Z2luLFxuICAgICAgICAgICAgb3B0aW9uczogcGx1Z2luT3B0cyhjaGFydC5jb25maWcsIHtcbiAgICAgICAgICAgICAgICBwbHVnaW4sXG4gICAgICAgICAgICAgICAgbG9jYWw6IGxvY2FsSWRzW2lkXVxuICAgICAgICAgICAgfSwgb3B0cywgY29udGV4dClcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBwbHVnaW5PcHRzKGNvbmZpZywgeyBwbHVnaW4gLCBsb2NhbCAgfSwgb3B0cywgY29udGV4dCkge1xuICAgIGNvbnN0IGtleXMgPSBjb25maWcucGx1Z2luU2NvcGVLZXlzKHBsdWdpbik7XG4gICAgY29uc3Qgc2NvcGVzID0gY29uZmlnLmdldE9wdGlvblNjb3BlcyhvcHRzLCBrZXlzKTtcbiAgICBpZiAobG9jYWwgJiYgcGx1Z2luLmRlZmF1bHRzKSB7XG4gICAgICAgIHNjb3Blcy5wdXNoKHBsdWdpbi5kZWZhdWx0cyk7XG4gICAgfVxuICAgIHJldHVybiBjb25maWcuY3JlYXRlUmVzb2x2ZXIoc2NvcGVzLCBjb250ZXh0LCBbXG4gICAgICAgICcnXG4gICAgXSwge1xuICAgICAgICBzY3JpcHRhYmxlOiBmYWxzZSxcbiAgICAgICAgaW5kZXhhYmxlOiBmYWxzZSxcbiAgICAgICAgYWxsS2V5czogdHJ1ZVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRJbmRleEF4aXModHlwZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IGRhdGFzZXREZWZhdWx0cyA9IGRlZmF1bHRzLmRhdGFzZXRzW3R5cGVdIHx8IHt9O1xuICAgIGNvbnN0IGRhdGFzZXRPcHRpb25zID0gKG9wdGlvbnMuZGF0YXNldHMgfHwge30pW3R5cGVdIHx8IHt9O1xuICAgIHJldHVybiBkYXRhc2V0T3B0aW9ucy5pbmRleEF4aXMgfHwgb3B0aW9ucy5pbmRleEF4aXMgfHwgZGF0YXNldERlZmF1bHRzLmluZGV4QXhpcyB8fCAneCc7XG59XG5mdW5jdGlvbiBnZXRBeGlzRnJvbURlZmF1bHRTY2FsZUlEKGlkLCBpbmRleEF4aXMpIHtcbiAgICBsZXQgYXhpcyA9IGlkO1xuICAgIGlmIChpZCA9PT0gJ19pbmRleF8nKSB7XG4gICAgICAgIGF4aXMgPSBpbmRleEF4aXM7XG4gICAgfSBlbHNlIGlmIChpZCA9PT0gJ192YWx1ZV8nKSB7XG4gICAgICAgIGF4aXMgPSBpbmRleEF4aXMgPT09ICd4JyA/ICd5JyA6ICd4JztcbiAgICB9XG4gICAgcmV0dXJuIGF4aXM7XG59XG5mdW5jdGlvbiBnZXREZWZhdWx0U2NhbGVJREZyb21BeGlzKGF4aXMsIGluZGV4QXhpcykge1xuICAgIHJldHVybiBheGlzID09PSBpbmRleEF4aXMgPyAnX2luZGV4XycgOiAnX3ZhbHVlXyc7XG59XG5mdW5jdGlvbiBpZE1hdGNoZXNBeGlzKGlkKSB7XG4gICAgaWYgKGlkID09PSAneCcgfHwgaWQgPT09ICd5JyB8fCBpZCA9PT0gJ3InKSB7XG4gICAgICAgIHJldHVybiBpZDtcbiAgICB9XG59XG5mdW5jdGlvbiBheGlzRnJvbVBvc2l0aW9uKHBvc2l0aW9uKSB7XG4gICAgaWYgKHBvc2l0aW9uID09PSAndG9wJyB8fCBwb3NpdGlvbiA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgcmV0dXJuICd4JztcbiAgICB9XG4gICAgaWYgKHBvc2l0aW9uID09PSAnbGVmdCcgfHwgcG9zaXRpb24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgcmV0dXJuICd5JztcbiAgICB9XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVBeGlzKGlkLCAuLi5zY2FsZU9wdGlvbnMpIHtcbiAgICBpZiAoaWRNYXRjaGVzQXhpcyhpZCkpIHtcbiAgICAgICAgcmV0dXJuIGlkO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IG9wdHMgb2Ygc2NhbGVPcHRpb25zKXtcbiAgICAgICAgY29uc3QgYXhpcyA9IG9wdHMuYXhpcyB8fCBheGlzRnJvbVBvc2l0aW9uKG9wdHMucG9zaXRpb24pIHx8IGlkLmxlbmd0aCA+IDEgJiYgaWRNYXRjaGVzQXhpcyhpZFswXS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgaWYgKGF4aXMpIHtcbiAgICAgICAgICAgIHJldHVybiBheGlzO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGRldGVybWluZSB0eXBlIG9mICcke2lkfScgYXhpcy4gUGxlYXNlIHByb3ZpZGUgJ2F4aXMnIG9yICdwb3NpdGlvbicgb3B0aW9uLmApO1xufVxuZnVuY3Rpb24gZ2V0QXhpc0Zyb21EYXRhc2V0KGlkLCBheGlzLCBkYXRhc2V0KSB7XG4gICAgaWYgKGRhdGFzZXRbYXhpcyArICdBeGlzSUQnXSA9PT0gaWQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGF4aXNcbiAgICAgICAgfTtcbiAgICB9XG59XG5mdW5jdGlvbiByZXRyaWV2ZUF4aXNGcm9tRGF0YXNldHMoaWQsIGNvbmZpZykge1xuICAgIGlmIChjb25maWcuZGF0YSAmJiBjb25maWcuZGF0YS5kYXRhc2V0cykge1xuICAgICAgICBjb25zdCBib3VuZERzID0gY29uZmlnLmRhdGEuZGF0YXNldHMuZmlsdGVyKChkKT0+ZC54QXhpc0lEID09PSBpZCB8fCBkLnlBeGlzSUQgPT09IGlkKTtcbiAgICAgICAgaWYgKGJvdW5kRHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0QXhpc0Zyb21EYXRhc2V0KGlkLCAneCcsIGJvdW5kRHNbMF0pIHx8IGdldEF4aXNGcm9tRGF0YXNldChpZCwgJ3knLCBib3VuZERzWzBdKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge307XG59XG5mdW5jdGlvbiBtZXJnZVNjYWxlQ29uZmlnKGNvbmZpZywgb3B0aW9ucykge1xuICAgIGNvbnN0IGNoYXJ0RGVmYXVsdHMgPSBvdmVycmlkZXNbY29uZmlnLnR5cGVdIHx8IHtcbiAgICAgICAgc2NhbGVzOiB7fVxuICAgIH07XG4gICAgY29uc3QgY29uZmlnU2NhbGVzID0gb3B0aW9ucy5zY2FsZXMgfHwge307XG4gICAgY29uc3QgY2hhcnRJbmRleEF4aXMgPSBnZXRJbmRleEF4aXMoY29uZmlnLnR5cGUsIG9wdGlvbnMpO1xuICAgIGNvbnN0IHNjYWxlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgT2JqZWN0LmtleXMoY29uZmlnU2NhbGVzKS5mb3JFYWNoKChpZCk9PntcbiAgICAgICAgY29uc3Qgc2NhbGVDb25mID0gY29uZmlnU2NhbGVzW2lkXTtcbiAgICAgICAgaWYgKCFpc09iamVjdChzY2FsZUNvbmYpKSB7XG4gICAgICAgICAgICByZXR1cm4gY29uc29sZS5lcnJvcihgSW52YWxpZCBzY2FsZSBjb25maWd1cmF0aW9uIGZvciBzY2FsZTogJHtpZH1gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2NhbGVDb25mLl9wcm94eSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUud2FybihgSWdub3JpbmcgcmVzb2x2ZXIgcGFzc2VkIGFzIG9wdGlvbnMgZm9yIHNjYWxlOiAke2lkfWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGF4aXMgPSBkZXRlcm1pbmVBeGlzKGlkLCBzY2FsZUNvbmYsIHJldHJpZXZlQXhpc0Zyb21EYXRhc2V0cyhpZCwgY29uZmlnKSwgZGVmYXVsdHMuc2NhbGVzW3NjYWxlQ29uZi50eXBlXSk7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRJZCA9IGdldERlZmF1bHRTY2FsZUlERnJvbUF4aXMoYXhpcywgY2hhcnRJbmRleEF4aXMpO1xuICAgICAgICBjb25zdCBkZWZhdWx0U2NhbGVPcHRpb25zID0gY2hhcnREZWZhdWx0cy5zY2FsZXMgfHwge307XG4gICAgICAgIHNjYWxlc1tpZF0gPSBtZXJnZUlmKE9iamVjdC5jcmVhdGUobnVsbCksIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBheGlzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2NhbGVDb25mLFxuICAgICAgICAgICAgZGVmYXVsdFNjYWxlT3B0aW9uc1theGlzXSxcbiAgICAgICAgICAgIGRlZmF1bHRTY2FsZU9wdGlvbnNbZGVmYXVsdElkXVxuICAgICAgICBdKTtcbiAgICB9KTtcbiAgICBjb25maWcuZGF0YS5kYXRhc2V0cy5mb3JFYWNoKChkYXRhc2V0KT0+e1xuICAgICAgICBjb25zdCB0eXBlID0gZGF0YXNldC50eXBlIHx8IGNvbmZpZy50eXBlO1xuICAgICAgICBjb25zdCBpbmRleEF4aXMgPSBkYXRhc2V0LmluZGV4QXhpcyB8fCBnZXRJbmRleEF4aXModHlwZSwgb3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGRhdGFzZXREZWZhdWx0cyA9IG92ZXJyaWRlc1t0eXBlXSB8fCB7fTtcbiAgICAgICAgY29uc3QgZGVmYXVsdFNjYWxlT3B0aW9ucyA9IGRhdGFzZXREZWZhdWx0cy5zY2FsZXMgfHwge307XG4gICAgICAgIE9iamVjdC5rZXlzKGRlZmF1bHRTY2FsZU9wdGlvbnMpLmZvckVhY2goKGRlZmF1bHRJRCk9PntcbiAgICAgICAgICAgIGNvbnN0IGF4aXMgPSBnZXRBeGlzRnJvbURlZmF1bHRTY2FsZUlEKGRlZmF1bHRJRCwgaW5kZXhBeGlzKTtcbiAgICAgICAgICAgIGNvbnN0IGlkID0gZGF0YXNldFtheGlzICsgJ0F4aXNJRCddIHx8IGF4aXM7XG4gICAgICAgICAgICBzY2FsZXNbaWRdID0gc2NhbGVzW2lkXSB8fCBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgICAgbWVyZ2VJZihzY2FsZXNbaWRdLCBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBheGlzXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjb25maWdTY2FsZXNbaWRdLFxuICAgICAgICAgICAgICAgIGRlZmF1bHRTY2FsZU9wdGlvbnNbZGVmYXVsdElEXVxuICAgICAgICAgICAgXSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIE9iamVjdC5rZXlzKHNjYWxlcykuZm9yRWFjaCgoa2V5KT0+e1xuICAgICAgICBjb25zdCBzY2FsZSA9IHNjYWxlc1trZXldO1xuICAgICAgICBtZXJnZUlmKHNjYWxlLCBbXG4gICAgICAgICAgICBkZWZhdWx0cy5zY2FsZXNbc2NhbGUudHlwZV0sXG4gICAgICAgICAgICBkZWZhdWx0cy5zY2FsZVxuICAgICAgICBdKTtcbiAgICB9KTtcbiAgICByZXR1cm4gc2NhbGVzO1xufVxuZnVuY3Rpb24gaW5pdE9wdGlvbnMoY29uZmlnKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IGNvbmZpZy5vcHRpb25zIHx8IChjb25maWcub3B0aW9ucyA9IHt9KTtcbiAgICBvcHRpb25zLnBsdWdpbnMgPSB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLnBsdWdpbnMsIHt9KTtcbiAgICBvcHRpb25zLnNjYWxlcyA9IG1lcmdlU2NhbGVDb25maWcoY29uZmlnLCBvcHRpb25zKTtcbn1cbmZ1bmN0aW9uIGluaXREYXRhKGRhdGEpIHtcbiAgICBkYXRhID0gZGF0YSB8fCB7fTtcbiAgICBkYXRhLmRhdGFzZXRzID0gZGF0YS5kYXRhc2V0cyB8fCBbXTtcbiAgICBkYXRhLmxhYmVscyA9IGRhdGEubGFiZWxzIHx8IFtdO1xuICAgIHJldHVybiBkYXRhO1xufVxuZnVuY3Rpb24gaW5pdENvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gICAgY29uZmlnLmRhdGEgPSBpbml0RGF0YShjb25maWcuZGF0YSk7XG4gICAgaW5pdE9wdGlvbnMoY29uZmlnKTtcbiAgICByZXR1cm4gY29uZmlnO1xufVxuY29uc3Qga2V5Q2FjaGUgPSBuZXcgTWFwKCk7XG5jb25zdCBrZXlzQ2FjaGVkID0gbmV3IFNldCgpO1xuZnVuY3Rpb24gY2FjaGVkS2V5cyhjYWNoZUtleSwgZ2VuZXJhdGUpIHtcbiAgICBsZXQga2V5cyA9IGtleUNhY2hlLmdldChjYWNoZUtleSk7XG4gICAgaWYgKCFrZXlzKSB7XG4gICAgICAgIGtleXMgPSBnZW5lcmF0ZSgpO1xuICAgICAgICBrZXlDYWNoZS5zZXQoY2FjaGVLZXksIGtleXMpO1xuICAgICAgICBrZXlzQ2FjaGVkLmFkZChrZXlzKTtcbiAgICB9XG4gICAgcmV0dXJuIGtleXM7XG59XG5jb25zdCBhZGRJZkZvdW5kID0gKHNldCwgb2JqLCBrZXkpPT57XG4gICAgY29uc3Qgb3B0cyA9IHJlc29sdmVPYmplY3RLZXkob2JqLCBrZXkpO1xuICAgIGlmIChvcHRzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc2V0LmFkZChvcHRzKTtcbiAgICB9XG59O1xuY2xhc3MgQ29uZmlnIHtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpe1xuICAgICAgICB0aGlzLl9jb25maWcgPSBpbml0Q29uZmlnKGNvbmZpZyk7XG4gICAgICAgIHRoaXMuX3Njb3BlQ2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuX3Jlc29sdmVyQ2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIGdldCBwbGF0Zm9ybSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5wbGF0Zm9ybTtcbiAgICB9XG4gICAgZ2V0IHR5cGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb25maWcudHlwZTtcbiAgICB9XG4gICAgc2V0IHR5cGUodHlwZSkge1xuICAgICAgICB0aGlzLl9jb25maWcudHlwZSA9IHR5cGU7XG4gICAgfVxuICAgIGdldCBkYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29uZmlnLmRhdGE7XG4gICAgfVxuICAgIHNldCBkYXRhKGRhdGEpIHtcbiAgICAgICAgdGhpcy5fY29uZmlnLmRhdGEgPSBpbml0RGF0YShkYXRhKTtcbiAgICB9XG4gICAgZ2V0IG9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb25maWcub3B0aW9ucztcbiAgICB9XG4gICAgc2V0IG9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICB0aGlzLl9jb25maWcub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIGdldCBwbHVnaW5zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29uZmlnLnBsdWdpbnM7XG4gICAgfVxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgY29uc3QgY29uZmlnID0gdGhpcy5fY29uZmlnO1xuICAgICAgICB0aGlzLmNsZWFyQ2FjaGUoKTtcbiAgICAgICAgaW5pdE9wdGlvbnMoY29uZmlnKTtcbiAgICB9XG4gICAgY2xlYXJDYWNoZSgpIHtcbiAgICAgICAgdGhpcy5fc2NvcGVDYWNoZS5jbGVhcigpO1xuICAgICAgICB0aGlzLl9yZXNvbHZlckNhY2hlLmNsZWFyKCk7XG4gICAgfVxuIGRhdGFzZXRTY29wZUtleXMoZGF0YXNldFR5cGUpIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlZEtleXMoZGF0YXNldFR5cGUsICgpPT5bXG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICBgZGF0YXNldHMuJHtkYXRhc2V0VHlwZX1gLFxuICAgICAgICAgICAgICAgICAgICAnJ1xuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIF0pO1xuICAgIH1cbiBkYXRhc2V0QW5pbWF0aW9uU2NvcGVLZXlzKGRhdGFzZXRUeXBlLCB0cmFuc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiBjYWNoZWRLZXlzKGAke2RhdGFzZXRUeXBlfS50cmFuc2l0aW9uLiR7dHJhbnNpdGlvbn1gLCAoKT0+W1xuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgYGRhdGFzZXRzLiR7ZGF0YXNldFR5cGV9LnRyYW5zaXRpb25zLiR7dHJhbnNpdGlvbn1gLFxuICAgICAgICAgICAgICAgICAgICBgdHJhbnNpdGlvbnMuJHt0cmFuc2l0aW9ufWBcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgYGRhdGFzZXRzLiR7ZGF0YXNldFR5cGV9YCxcbiAgICAgICAgICAgICAgICAgICAgJydcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdKTtcbiAgICB9XG4gZGF0YXNldEVsZW1lbnRTY29wZUtleXMoZGF0YXNldFR5cGUsIGVsZW1lbnRUeXBlKSB7XG4gICAgICAgIHJldHVybiBjYWNoZWRLZXlzKGAke2RhdGFzZXRUeXBlfS0ke2VsZW1lbnRUeXBlfWAsICgpPT5bXG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICBgZGF0YXNldHMuJHtkYXRhc2V0VHlwZX0uZWxlbWVudHMuJHtlbGVtZW50VHlwZX1gLFxuICAgICAgICAgICAgICAgICAgICBgZGF0YXNldHMuJHtkYXRhc2V0VHlwZX1gLFxuICAgICAgICAgICAgICAgICAgICBgZWxlbWVudHMuJHtlbGVtZW50VHlwZX1gLFxuICAgICAgICAgICAgICAgICAgICAnJ1xuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIF0pO1xuICAgIH1cbiBwbHVnaW5TY29wZUtleXMocGx1Z2luKSB7XG4gICAgICAgIGNvbnN0IGlkID0gcGx1Z2luLmlkO1xuICAgICAgICBjb25zdCB0eXBlID0gdGhpcy50eXBlO1xuICAgICAgICByZXR1cm4gY2FjaGVkS2V5cyhgJHt0eXBlfS1wbHVnaW4tJHtpZH1gLCAoKT0+W1xuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgYHBsdWdpbnMuJHtpZH1gLFxuICAgICAgICAgICAgICAgICAgICAuLi5wbHVnaW4uYWRkaXRpb25hbE9wdGlvblNjb3BlcyB8fCBbXVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIF0pO1xuICAgIH1cbiBfY2FjaGVkU2NvcGVzKG1haW5TY29wZSwgcmVzZXRDYWNoZSkge1xuICAgICAgICBjb25zdCBfc2NvcGVDYWNoZSA9IHRoaXMuX3Njb3BlQ2FjaGU7XG4gICAgICAgIGxldCBjYWNoZSA9IF9zY29wZUNhY2hlLmdldChtYWluU2NvcGUpO1xuICAgICAgICBpZiAoIWNhY2hlIHx8IHJlc2V0Q2FjaGUpIHtcbiAgICAgICAgICAgIGNhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgX3Njb3BlQ2FjaGUuc2V0KG1haW5TY29wZSwgY2FjaGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYWNoZTtcbiAgICB9XG4gZ2V0T3B0aW9uU2NvcGVzKG1haW5TY29wZSwga2V5TGlzdHMsIHJlc2V0Q2FjaGUpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zICwgdHlwZSAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGNhY2hlID0gdGhpcy5fY2FjaGVkU2NvcGVzKG1haW5TY29wZSwgcmVzZXRDYWNoZSk7XG4gICAgICAgIGNvbnN0IGNhY2hlZCA9IGNhY2hlLmdldChrZXlMaXN0cyk7XG4gICAgICAgIGlmIChjYWNoZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2NvcGVzID0gbmV3IFNldCgpO1xuICAgICAgICBrZXlMaXN0cy5mb3JFYWNoKChrZXlzKT0+e1xuICAgICAgICAgICAgaWYgKG1haW5TY29wZSkge1xuICAgICAgICAgICAgICAgIHNjb3Blcy5hZGQobWFpblNjb3BlKTtcbiAgICAgICAgICAgICAgICBrZXlzLmZvckVhY2goKGtleSk9PmFkZElmRm91bmQoc2NvcGVzLCBtYWluU2NvcGUsIGtleSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAga2V5cy5mb3JFYWNoKChrZXkpPT5hZGRJZkZvdW5kKHNjb3Blcywgb3B0aW9ucywga2V5KSk7XG4gICAgICAgICAgICBrZXlzLmZvckVhY2goKGtleSk9PmFkZElmRm91bmQoc2NvcGVzLCBvdmVycmlkZXNbdHlwZV0gfHwge30sIGtleSkpO1xuICAgICAgICAgICAga2V5cy5mb3JFYWNoKChrZXkpPT5hZGRJZkZvdW5kKHNjb3BlcywgZGVmYXVsdHMsIGtleSkpO1xuICAgICAgICAgICAga2V5cy5mb3JFYWNoKChrZXkpPT5hZGRJZkZvdW5kKHNjb3BlcywgZGVzY3JpcHRvcnMsIGtleSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgYXJyYXkgPSBBcnJheS5mcm9tKHNjb3Blcyk7XG4gICAgICAgIGlmIChhcnJheS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGFycmF5LnB1c2goT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGtleXNDYWNoZWQuaGFzKGtleUxpc3RzKSkge1xuICAgICAgICAgICAgY2FjaGUuc2V0KGtleUxpc3RzLCBhcnJheSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cbiBjaGFydE9wdGlvblNjb3BlcygpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zICwgdHlwZSAgfSA9IHRoaXM7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgb3ZlcnJpZGVzW3R5cGVdIHx8IHt9LFxuICAgICAgICAgICAgZGVmYXVsdHMuZGF0YXNldHNbdHlwZV0gfHwge30sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdHlwZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlZmF1bHRzLFxuICAgICAgICAgICAgZGVzY3JpcHRvcnNcbiAgICAgICAgXTtcbiAgICB9XG4gcmVzb2x2ZU5hbWVkT3B0aW9ucyhzY29wZXMsIG5hbWVzLCBjb250ZXh0LCBwcmVmaXhlcyA9IFtcbiAgICAgICAgJydcbiAgICBdKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICAgICAgICRzaGFyZWQ6IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgeyByZXNvbHZlciAsIHN1YlByZWZpeGVzICB9ID0gZ2V0UmVzb2x2ZXIodGhpcy5fcmVzb2x2ZXJDYWNoZSwgc2NvcGVzLCBwcmVmaXhlcyk7XG4gICAgICAgIGxldCBvcHRpb25zID0gcmVzb2x2ZXI7XG4gICAgICAgIGlmIChuZWVkQ29udGV4dChyZXNvbHZlciwgbmFtZXMpKSB7XG4gICAgICAgICAgICByZXN1bHQuJHNoYXJlZCA9IGZhbHNlO1xuICAgICAgICAgICAgY29udGV4dCA9IGlzRnVuY3Rpb24oY29udGV4dCkgPyBjb250ZXh0KCkgOiBjb250ZXh0O1xuICAgICAgICAgICAgY29uc3Qgc3ViUmVzb2x2ZXIgPSB0aGlzLmNyZWF0ZVJlc29sdmVyKHNjb3BlcywgY29udGV4dCwgc3ViUHJlZml4ZXMpO1xuICAgICAgICAgICAgb3B0aW9ucyA9IF9hdHRhY2hDb250ZXh0KHJlc29sdmVyLCBjb250ZXh0LCBzdWJSZXNvbHZlcik7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBwcm9wIG9mIG5hbWVzKXtcbiAgICAgICAgICAgIHJlc3VsdFtwcm9wXSA9IG9wdGlvbnNbcHJvcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gY3JlYXRlUmVzb2x2ZXIoc2NvcGVzLCBjb250ZXh0LCBwcmVmaXhlcyA9IFtcbiAgICAgICAgJydcbiAgICBdLCBkZXNjcmlwdG9yRGVmYXVsdHMpIHtcbiAgICAgICAgY29uc3QgeyByZXNvbHZlciAgfSA9IGdldFJlc29sdmVyKHRoaXMuX3Jlc29sdmVyQ2FjaGUsIHNjb3BlcywgcHJlZml4ZXMpO1xuICAgICAgICByZXR1cm4gaXNPYmplY3QoY29udGV4dCkgPyBfYXR0YWNoQ29udGV4dChyZXNvbHZlciwgY29udGV4dCwgdW5kZWZpbmVkLCBkZXNjcmlwdG9yRGVmYXVsdHMpIDogcmVzb2x2ZXI7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0UmVzb2x2ZXIocmVzb2x2ZXJDYWNoZSwgc2NvcGVzLCBwcmVmaXhlcykge1xuICAgIGxldCBjYWNoZSA9IHJlc29sdmVyQ2FjaGUuZ2V0KHNjb3Blcyk7XG4gICAgaWYgKCFjYWNoZSkge1xuICAgICAgICBjYWNoZSA9IG5ldyBNYXAoKTtcbiAgICAgICAgcmVzb2x2ZXJDYWNoZS5zZXQoc2NvcGVzLCBjYWNoZSk7XG4gICAgfVxuICAgIGNvbnN0IGNhY2hlS2V5ID0gcHJlZml4ZXMuam9pbigpO1xuICAgIGxldCBjYWNoZWQgPSBjYWNoZS5nZXQoY2FjaGVLZXkpO1xuICAgIGlmICghY2FjaGVkKSB7XG4gICAgICAgIGNvbnN0IHJlc29sdmVyID0gX2NyZWF0ZVJlc29sdmVyKHNjb3BlcywgcHJlZml4ZXMpO1xuICAgICAgICBjYWNoZWQgPSB7XG4gICAgICAgICAgICByZXNvbHZlcixcbiAgICAgICAgICAgIHN1YlByZWZpeGVzOiBwcmVmaXhlcy5maWx0ZXIoKHApPT4hcC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdob3ZlcicpKVxuICAgICAgICB9O1xuICAgICAgICBjYWNoZS5zZXQoY2FjaGVLZXksIGNhY2hlZCk7XG4gICAgfVxuICAgIHJldHVybiBjYWNoZWQ7XG59XG5jb25zdCBoYXNGdW5jdGlvbiA9ICh2YWx1ZSk9PmlzT2JqZWN0KHZhbHVlKSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSkucmVkdWNlKChhY2MsIGtleSk9PmFjYyB8fCBpc0Z1bmN0aW9uKHZhbHVlW2tleV0pLCBmYWxzZSk7XG5mdW5jdGlvbiBuZWVkQ29udGV4dChwcm94eSwgbmFtZXMpIHtcbiAgICBjb25zdCB7IGlzU2NyaXB0YWJsZSAsIGlzSW5kZXhhYmxlICB9ID0gX2Rlc2NyaXB0b3JzKHByb3h5KTtcbiAgICBmb3IgKGNvbnN0IHByb3Agb2YgbmFtZXMpe1xuICAgICAgICBjb25zdCBzY3JpcHRhYmxlID0gaXNTY3JpcHRhYmxlKHByb3ApO1xuICAgICAgICBjb25zdCBpbmRleGFibGUgPSBpc0luZGV4YWJsZShwcm9wKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSAoaW5kZXhhYmxlIHx8IHNjcmlwdGFibGUpICYmIHByb3h5W3Byb3BdO1xuICAgICAgICBpZiAoc2NyaXB0YWJsZSAmJiAoaXNGdW5jdGlvbih2YWx1ZSkgfHwgaGFzRnVuY3Rpb24odmFsdWUpKSB8fCBpbmRleGFibGUgJiYgaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxudmFyIHZlcnNpb24gPSBcIjQuMy4zXCI7XG5cbmNvbnN0IEtOT1dOX1BPU0lUSU9OUyA9IFtcbiAgICAndG9wJyxcbiAgICAnYm90dG9tJyxcbiAgICAnbGVmdCcsXG4gICAgJ3JpZ2h0JyxcbiAgICAnY2hhcnRBcmVhJ1xuXTtcbmZ1bmN0aW9uIHBvc2l0aW9uSXNIb3Jpem9udGFsKHBvc2l0aW9uLCBheGlzKSB7XG4gICAgcmV0dXJuIHBvc2l0aW9uID09PSAndG9wJyB8fCBwb3NpdGlvbiA9PT0gJ2JvdHRvbScgfHwgS05PV05fUE9TSVRJT05TLmluZGV4T2YocG9zaXRpb24pID09PSAtMSAmJiBheGlzID09PSAneCc7XG59XG5mdW5jdGlvbiBjb21wYXJlMkxldmVsKGwxLCBsMikge1xuICAgIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgIHJldHVybiBhW2wxXSA9PT0gYltsMV0gPyBhW2wyXSAtIGJbbDJdIDogYVtsMV0gLSBiW2wxXTtcbiAgICB9O1xufVxuZnVuY3Rpb24gb25BbmltYXRpb25zQ29tcGxldGUoY29udGV4dCkge1xuICAgIGNvbnN0IGNoYXJ0ID0gY29udGV4dC5jaGFydDtcbiAgICBjb25zdCBhbmltYXRpb25PcHRpb25zID0gY2hhcnQub3B0aW9ucy5hbmltYXRpb247XG4gICAgY2hhcnQubm90aWZ5UGx1Z2lucygnYWZ0ZXJSZW5kZXInKTtcbiAgICBjYWxsYmFjayhhbmltYXRpb25PcHRpb25zICYmIGFuaW1hdGlvbk9wdGlvbnMub25Db21wbGV0ZSwgW1xuICAgICAgICBjb250ZXh0XG4gICAgXSwgY2hhcnQpO1xufVxuZnVuY3Rpb24gb25BbmltYXRpb25Qcm9ncmVzcyhjb250ZXh0KSB7XG4gICAgY29uc3QgY2hhcnQgPSBjb250ZXh0LmNoYXJ0O1xuICAgIGNvbnN0IGFuaW1hdGlvbk9wdGlvbnMgPSBjaGFydC5vcHRpb25zLmFuaW1hdGlvbjtcbiAgICBjYWxsYmFjayhhbmltYXRpb25PcHRpb25zICYmIGFuaW1hdGlvbk9wdGlvbnMub25Qcm9ncmVzcywgW1xuICAgICAgICBjb250ZXh0XG4gICAgXSwgY2hhcnQpO1xufVxuIGZ1bmN0aW9uIGdldENhbnZhcyhpdGVtKSB7XG4gICAgaWYgKF9pc0RvbVN1cHBvcnRlZCgpICYmIHR5cGVvZiBpdGVtID09PSAnc3RyaW5nJykge1xuICAgICAgICBpdGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaXRlbSk7XG4gICAgfSBlbHNlIGlmIChpdGVtICYmIGl0ZW0ubGVuZ3RoKSB7XG4gICAgICAgIGl0ZW0gPSBpdGVtWzBdO1xuICAgIH1cbiAgICBpZiAoaXRlbSAmJiBpdGVtLmNhbnZhcykge1xuICAgICAgICBpdGVtID0gaXRlbS5jYW52YXM7XG4gICAgfVxuICAgIHJldHVybiBpdGVtO1xufVxuY29uc3QgaW5zdGFuY2VzID0ge307XG5jb25zdCBnZXRDaGFydCA9IChrZXkpPT57XG4gICAgY29uc3QgY2FudmFzID0gZ2V0Q2FudmFzKGtleSk7XG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXMoaW5zdGFuY2VzKS5maWx0ZXIoKGMpPT5jLmNhbnZhcyA9PT0gY2FudmFzKS5wb3AoKTtcbn07XG5mdW5jdGlvbiBtb3ZlTnVtZXJpY0tleXMob2JqLCBzdGFydCwgbW92ZSkge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXMpe1xuICAgICAgICBjb25zdCBpbnRLZXkgPSAra2V5O1xuICAgICAgICBpZiAoaW50S2V5ID49IHN0YXJ0KSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IG9ialtrZXldO1xuICAgICAgICAgICAgZGVsZXRlIG9ialtrZXldO1xuICAgICAgICAgICAgaWYgKG1vdmUgPiAwIHx8IGludEtleSA+IHN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgb2JqW2ludEtleSArIG1vdmVdID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4gZnVuY3Rpb24gZGV0ZXJtaW5lTGFzdEV2ZW50KGUsIGxhc3RFdmVudCwgaW5DaGFydEFyZWEsIGlzQ2xpY2spIHtcbiAgICBpZiAoIWluQ2hhcnRBcmVhIHx8IGUudHlwZSA9PT0gJ21vdXNlb3V0Jykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKGlzQ2xpY2spIHtcbiAgICAgICAgcmV0dXJuIGxhc3RFdmVudDtcbiAgICB9XG4gICAgcmV0dXJuIGU7XG59XG5mdW5jdGlvbiBnZXREYXRhc2V0QXJlYShtZXRhKSB7XG4gICAgY29uc3QgeyB4U2NhbGUgLCB5U2NhbGUgIH0gPSBtZXRhO1xuICAgIGlmICh4U2NhbGUgJiYgeVNjYWxlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsZWZ0OiB4U2NhbGUubGVmdCxcbiAgICAgICAgICAgIHJpZ2h0OiB4U2NhbGUucmlnaHQsXG4gICAgICAgICAgICB0b3A6IHlTY2FsZS50b3AsXG4gICAgICAgICAgICBib3R0b206IHlTY2FsZS5ib3R0b21cbiAgICAgICAgfTtcbiAgICB9XG59XG5jbGFzcyBDaGFydCB7XG4gICAgc3RhdGljIGRlZmF1bHRzID0gZGVmYXVsdHM7XG4gICAgc3RhdGljIGluc3RhbmNlcyA9IGluc3RhbmNlcztcbiAgICBzdGF0aWMgb3ZlcnJpZGVzID0gb3ZlcnJpZGVzO1xuICAgIHN0YXRpYyByZWdpc3RyeSA9IHJlZ2lzdHJ5O1xuICAgIHN0YXRpYyB2ZXJzaW9uID0gdmVyc2lvbjtcbiAgICBzdGF0aWMgZ2V0Q2hhcnQgPSBnZXRDaGFydDtcbiAgICBzdGF0aWMgcmVnaXN0ZXIoLi4uaXRlbXMpIHtcbiAgICAgICAgcmVnaXN0cnkuYWRkKC4uLml0ZW1zKTtcbiAgICAgICAgaW52YWxpZGF0ZVBsdWdpbnMoKTtcbiAgICB9XG4gICAgc3RhdGljIHVucmVnaXN0ZXIoLi4uaXRlbXMpIHtcbiAgICAgICAgcmVnaXN0cnkucmVtb3ZlKC4uLml0ZW1zKTtcbiAgICAgICAgaW52YWxpZGF0ZVBsdWdpbnMoKTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoaXRlbSwgdXNlckNvbmZpZyl7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY29uZmlnID0gbmV3IENvbmZpZyh1c2VyQ29uZmlnKTtcbiAgICAgICAgY29uc3QgaW5pdGlhbENhbnZhcyA9IGdldENhbnZhcyhpdGVtKTtcbiAgICAgICAgY29uc3QgZXhpc3RpbmdDaGFydCA9IGdldENoYXJ0KGluaXRpYWxDYW52YXMpO1xuICAgICAgICBpZiAoZXhpc3RpbmdDaGFydCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW52YXMgaXMgYWxyZWFkeSBpbiB1c2UuIENoYXJ0IHdpdGggSUQgXFwnJyArIGV4aXN0aW5nQ2hhcnQuaWQgKyAnXFwnJyArICcgbXVzdCBiZSBkZXN0cm95ZWQgYmVmb3JlIHRoZSBjYW52YXMgd2l0aCBJRCBcXCcnICsgZXhpc3RpbmdDaGFydC5jYW52YXMuaWQgKyAnXFwnIGNhbiBiZSByZXVzZWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGNvbmZpZy5jcmVhdGVSZXNvbHZlcihjb25maWcuY2hhcnRPcHRpb25TY29wZXMoKSwgdGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICB0aGlzLnBsYXRmb3JtID0gbmV3IChjb25maWcucGxhdGZvcm0gfHwgX2RldGVjdFBsYXRmb3JtKGluaXRpYWxDYW52YXMpKSgpO1xuICAgICAgICB0aGlzLnBsYXRmb3JtLnVwZGF0ZUNvbmZpZyhjb25maWcpO1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5wbGF0Zm9ybS5hY3F1aXJlQ29udGV4dChpbml0aWFsQ2FudmFzLCBvcHRpb25zLmFzcGVjdFJhdGlvKTtcbiAgICAgICAgY29uc3QgY2FudmFzID0gY29udGV4dCAmJiBjb250ZXh0LmNhbnZhcztcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gY2FudmFzICYmIGNhbnZhcy5oZWlnaHQ7XG4gICAgICAgIGNvbnN0IHdpZHRoID0gY2FudmFzICYmIGNhbnZhcy53aWR0aDtcbiAgICAgICAgdGhpcy5pZCA9IHVpZCgpO1xuICAgICAgICB0aGlzLmN0eCA9IGNvbnRleHQ7XG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5fYXNwZWN0UmF0aW8gPSB0aGlzLmFzcGVjdFJhdGlvO1xuICAgICAgICB0aGlzLl9sYXllcnMgPSBbXTtcbiAgICAgICAgdGhpcy5fbWV0YXNldHMgPSBbXTtcbiAgICAgICAgdGhpcy5fc3RhY2tzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmJveGVzID0gW107XG4gICAgICAgIHRoaXMuY3VycmVudERldmljZVBpeGVsUmF0aW8gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuY2hhcnRBcmVhID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9hY3RpdmUgPSBbXTtcbiAgICAgICAgdGhpcy5fbGFzdEV2ZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcbiAgICAgICAgIHRoaXMuX3Jlc3BvbnNpdmVMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3NvcnRlZE1ldGFzZXRzID0gW107XG4gICAgICAgIHRoaXMuc2NhbGVzID0ge307XG4gICAgICAgIHRoaXMuX3BsdWdpbnMgPSBuZXcgUGx1Z2luU2VydmljZSgpO1xuICAgICAgICB0aGlzLiRwcm94aWVzID0ge307XG4gICAgICAgIHRoaXMuX2hpZGRlbkluZGljZXMgPSB7fTtcbiAgICAgICAgdGhpcy5hdHRhY2hlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9hbmltYXRpb25zRGlzYWJsZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuJGNvbnRleHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2RvUmVzaXplID0gZGVib3VuY2UoKG1vZGUpPT50aGlzLnVwZGF0ZShtb2RlKSwgb3B0aW9ucy5yZXNpemVEZWxheSB8fCAwKTtcbiAgICAgICAgdGhpcy5fZGF0YUNoYW5nZXMgPSBbXTtcbiAgICAgICAgaW5zdGFuY2VzW3RoaXMuaWRdID0gdGhpcztcbiAgICAgICAgaWYgKCFjb250ZXh0IHx8ICFjYW52YXMpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gY3JlYXRlIGNoYXJ0OiBjYW4ndCBhY3F1aXJlIGNvbnRleHQgZnJvbSB0aGUgZ2l2ZW4gaXRlbVwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBhbmltYXRvci5saXN0ZW4odGhpcywgJ2NvbXBsZXRlJywgb25BbmltYXRpb25zQ29tcGxldGUpO1xuICAgICAgICBhbmltYXRvci5saXN0ZW4odGhpcywgJ3Byb2dyZXNzJywgb25BbmltYXRpb25Qcm9ncmVzcyk7XG4gICAgICAgIHRoaXMuX2luaXRpYWxpemUoKTtcbiAgICAgICAgaWYgKHRoaXMuYXR0YWNoZWQpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGFzcGVjdFJhdGlvKCkge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnM6IHsgYXNwZWN0UmF0aW8gLCBtYWludGFpbkFzcGVjdFJhdGlvICB9ICwgd2lkdGggLCBoZWlnaHQgLCBfYXNwZWN0UmF0aW8gIH0gPSB0aGlzO1xuICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWYoYXNwZWN0UmF0aW8pKSB7XG4gICAgICAgICAgICByZXR1cm4gYXNwZWN0UmF0aW87XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1haW50YWluQXNwZWN0UmF0aW8gJiYgX2FzcGVjdFJhdGlvKSB7XG4gICAgICAgICAgICByZXR1cm4gX2FzcGVjdFJhdGlvO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoZWlnaHQgPyB3aWR0aCAvIGhlaWdodCA6IG51bGw7XG4gICAgfVxuICAgIGdldCBkYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25maWcuZGF0YTtcbiAgICB9XG4gICAgc2V0IGRhdGEoZGF0YSkge1xuICAgICAgICB0aGlzLmNvbmZpZy5kYXRhID0gZGF0YTtcbiAgICB9XG4gICAgZ2V0IG9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vcHRpb25zO1xuICAgIH1cbiAgICBzZXQgb3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuY29uZmlnLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICBnZXQgcmVnaXN0cnkoKSB7XG4gICAgICAgIHJldHVybiByZWdpc3RyeTtcbiAgICB9XG4gX2luaXRpYWxpemUoKSB7XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlSW5pdCcpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJlc3BvbnNpdmUpIHtcbiAgICAgICAgICAgIHRoaXMucmVzaXplKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXRpbmFTY2FsZSh0aGlzLCB0aGlzLm9wdGlvbnMuZGV2aWNlUGl4ZWxSYXRpbyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5iaW5kRXZlbnRzKCk7XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJJbml0Jyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBjbGVhcigpIHtcbiAgICAgICAgY2xlYXJDYW52YXModGhpcy5jYW52YXMsIHRoaXMuY3R4KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHN0b3AoKSB7XG4gICAgICAgIGFuaW1hdG9yLnN0b3AodGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiByZXNpemUod2lkdGgsIGhlaWdodCkge1xuICAgICAgICBpZiAoIWFuaW1hdG9yLnJ1bm5pbmcodGhpcykpIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc2l6ZUJlZm9yZURyYXcgPSB7XG4gICAgICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIF9yZXNpemUod2lkdGgsIGhlaWdodCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBjYW52YXMgPSB0aGlzLmNhbnZhcztcbiAgICAgICAgY29uc3QgYXNwZWN0UmF0aW8gPSBvcHRpb25zLm1haW50YWluQXNwZWN0UmF0aW8gJiYgdGhpcy5hc3BlY3RSYXRpbztcbiAgICAgICAgY29uc3QgbmV3U2l6ZSA9IHRoaXMucGxhdGZvcm0uZ2V0TWF4aW11bVNpemUoY2FudmFzLCB3aWR0aCwgaGVpZ2h0LCBhc3BlY3RSYXRpbyk7XG4gICAgICAgIGNvbnN0IG5ld1JhdGlvID0gb3B0aW9ucy5kZXZpY2VQaXhlbFJhdGlvIHx8IHRoaXMucGxhdGZvcm0uZ2V0RGV2aWNlUGl4ZWxSYXRpbygpO1xuICAgICAgICBjb25zdCBtb2RlID0gdGhpcy53aWR0aCA/ICdyZXNpemUnIDogJ2F0dGFjaCc7XG4gICAgICAgIHRoaXMud2lkdGggPSBuZXdTaXplLndpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IG5ld1NpemUuaGVpZ2h0O1xuICAgICAgICB0aGlzLl9hc3BlY3RSYXRpbyA9IHRoaXMuYXNwZWN0UmF0aW87XG4gICAgICAgIGlmICghcmV0aW5hU2NhbGUodGhpcywgbmV3UmF0aW8sIHRydWUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdyZXNpemUnLCB7XG4gICAgICAgICAgICBzaXplOiBuZXdTaXplXG4gICAgICAgIH0pO1xuICAgICAgICBjYWxsYmFjayhvcHRpb25zLm9uUmVzaXplLCBbXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgbmV3U2l6ZVxuICAgICAgICBdLCB0aGlzKTtcbiAgICAgICAgaWYgKHRoaXMuYXR0YWNoZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9kb1Jlc2l6ZShtb2RlKSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZW5zdXJlU2NhbGVzSGF2ZUlEcygpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3Qgc2NhbGVzT3B0aW9ucyA9IG9wdGlvbnMuc2NhbGVzIHx8IHt9O1xuICAgICAgICBlYWNoKHNjYWxlc09wdGlvbnMsIChheGlzT3B0aW9ucywgYXhpc0lEKT0+e1xuICAgICAgICAgICAgYXhpc09wdGlvbnMuaWQgPSBheGlzSUQ7XG4gICAgICAgIH0pO1xuICAgIH1cbiBidWlsZE9yVXBkYXRlU2NhbGVzKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBzY2FsZU9wdHMgPSBvcHRpb25zLnNjYWxlcztcbiAgICAgICAgY29uc3Qgc2NhbGVzID0gdGhpcy5zY2FsZXM7XG4gICAgICAgIGNvbnN0IHVwZGF0ZWQgPSBPYmplY3Qua2V5cyhzY2FsZXMpLnJlZHVjZSgob2JqLCBpZCk9PntcbiAgICAgICAgICAgIG9ialtpZF0gPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH0sIHt9KTtcbiAgICAgICAgbGV0IGl0ZW1zID0gW107XG4gICAgICAgIGlmIChzY2FsZU9wdHMpIHtcbiAgICAgICAgICAgIGl0ZW1zID0gaXRlbXMuY29uY2F0KE9iamVjdC5rZXlzKHNjYWxlT3B0cykubWFwKChpZCk9PntcbiAgICAgICAgICAgICAgICBjb25zdCBzY2FsZU9wdGlvbnMgPSBzY2FsZU9wdHNbaWRdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aXMgPSBkZXRlcm1pbmVBeGlzKGlkLCBzY2FsZU9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzUmFkaWFsID0gYXhpcyA9PT0gJ3InO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IGF4aXMgPT09ICd4JztcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBzY2FsZU9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIGRwb3NpdGlvbjogaXNSYWRpYWwgPyAnY2hhcnRBcmVhJyA6IGlzSG9yaXpvbnRhbCA/ICdib3R0b20nIDogJ2xlZnQnLFxuICAgICAgICAgICAgICAgICAgICBkdHlwZTogaXNSYWRpYWwgPyAncmFkaWFsTGluZWFyJyA6IGlzSG9yaXpvbnRhbCA/ICdjYXRlZ29yeScgOiAnbGluZWFyJ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWFjaChpdGVtcywgKGl0ZW0pPT57XG4gICAgICAgICAgICBjb25zdCBzY2FsZU9wdGlvbnMgPSBpdGVtLm9wdGlvbnM7XG4gICAgICAgICAgICBjb25zdCBpZCA9IHNjYWxlT3B0aW9ucy5pZDtcbiAgICAgICAgICAgIGNvbnN0IGF4aXMgPSBkZXRlcm1pbmVBeGlzKGlkLCBzY2FsZU9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3Qgc2NhbGVUeXBlID0gdmFsdWVPckRlZmF1bHQoc2NhbGVPcHRpb25zLnR5cGUsIGl0ZW0uZHR5cGUpO1xuICAgICAgICAgICAgaWYgKHNjYWxlT3B0aW9ucy5wb3NpdGlvbiA9PT0gdW5kZWZpbmVkIHx8IHBvc2l0aW9uSXNIb3Jpem9udGFsKHNjYWxlT3B0aW9ucy5wb3NpdGlvbiwgYXhpcykgIT09IHBvc2l0aW9uSXNIb3Jpem9udGFsKGl0ZW0uZHBvc2l0aW9uKSkge1xuICAgICAgICAgICAgICAgIHNjYWxlT3B0aW9ucy5wb3NpdGlvbiA9IGl0ZW0uZHBvc2l0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXBkYXRlZFtpZF0gPSB0cnVlO1xuICAgICAgICAgICAgbGV0IHNjYWxlID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChpZCBpbiBzY2FsZXMgJiYgc2NhbGVzW2lkXS50eXBlID09PSBzY2FsZVR5cGUpIHtcbiAgICAgICAgICAgICAgICBzY2FsZSA9IHNjYWxlc1tpZF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNjYWxlQ2xhc3MgPSByZWdpc3RyeS5nZXRTY2FsZShzY2FsZVR5cGUpO1xuICAgICAgICAgICAgICAgIHNjYWxlID0gbmV3IHNjYWxlQ2xhc3Moe1xuICAgICAgICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogc2NhbGVUeXBlLFxuICAgICAgICAgICAgICAgICAgICBjdHg6IHRoaXMuY3R4LFxuICAgICAgICAgICAgICAgICAgICBjaGFydDogdGhpc1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHNjYWxlc1tzY2FsZS5pZF0gPSBzY2FsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNjYWxlLmluaXQoc2NhbGVPcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGVhY2godXBkYXRlZCwgKGhhc1VwZGF0ZWQsIGlkKT0+e1xuICAgICAgICAgICAgaWYgKCFoYXNVcGRhdGVkKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHNjYWxlc1tpZF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBlYWNoKHNjYWxlcywgKHNjYWxlKT0+e1xuICAgICAgICAgICAgbGF5b3V0cy5jb25maWd1cmUodGhpcywgc2NhbGUsIHNjYWxlLm9wdGlvbnMpO1xuICAgICAgICAgICAgbGF5b3V0cy5hZGRCb3godGhpcywgc2NhbGUpO1xuICAgICAgICB9KTtcbiAgICB9XG4gX3VwZGF0ZU1ldGFzZXRzKCkge1xuICAgICAgICBjb25zdCBtZXRhc2V0cyA9IHRoaXMuX21ldGFzZXRzO1xuICAgICAgICBjb25zdCBudW1EYXRhID0gdGhpcy5kYXRhLmRhdGFzZXRzLmxlbmd0aDtcbiAgICAgICAgY29uc3QgbnVtTWV0YSA9IG1ldGFzZXRzLmxlbmd0aDtcbiAgICAgICAgbWV0YXNldHMuc29ydCgoYSwgYik9PmEuaW5kZXggLSBiLmluZGV4KTtcbiAgICAgICAgaWYgKG51bU1ldGEgPiBudW1EYXRhKSB7XG4gICAgICAgICAgICBmb3IobGV0IGkgPSBudW1EYXRhOyBpIDwgbnVtTWV0YTsgKytpKXtcbiAgICAgICAgICAgICAgICB0aGlzLl9kZXN0cm95RGF0YXNldE1ldGEoaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtZXRhc2V0cy5zcGxpY2UobnVtRGF0YSwgbnVtTWV0YSAtIG51bURhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3NvcnRlZE1ldGFzZXRzID0gbWV0YXNldHMuc2xpY2UoMCkuc29ydChjb21wYXJlMkxldmVsKCdvcmRlcicsICdpbmRleCcpKTtcbiAgICB9XG4gX3JlbW92ZVVucmVmZXJlbmNlZE1ldGFzZXRzKCkge1xuICAgICAgICBjb25zdCB7IF9tZXRhc2V0czogbWV0YXNldHMgLCBkYXRhOiB7IGRhdGFzZXRzICB9ICB9ID0gdGhpcztcbiAgICAgICAgaWYgKG1ldGFzZXRzLmxlbmd0aCA+IGRhdGFzZXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3N0YWNrcztcbiAgICAgICAgfVxuICAgICAgICBtZXRhc2V0cy5mb3JFYWNoKChtZXRhLCBpbmRleCk9PntcbiAgICAgICAgICAgIGlmIChkYXRhc2V0cy5maWx0ZXIoKHgpPT54ID09PSBtZXRhLl9kYXRhc2V0KS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kZXN0cm95RGF0YXNldE1ldGEoaW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgYnVpbGRPclVwZGF0ZUNvbnRyb2xsZXJzKCkge1xuICAgICAgICBjb25zdCBuZXdDb250cm9sbGVycyA9IFtdO1xuICAgICAgICBjb25zdCBkYXRhc2V0cyA9IHRoaXMuZGF0YS5kYXRhc2V0cztcbiAgICAgICAgbGV0IGksIGlsZW47XG4gICAgICAgIHRoaXMuX3JlbW92ZVVucmVmZXJlbmNlZE1ldGFzZXRzKCk7XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IGRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47IGkrKyl7XG4gICAgICAgICAgICBjb25zdCBkYXRhc2V0ID0gZGF0YXNldHNbaV07XG4gICAgICAgICAgICBsZXQgbWV0YSA9IHRoaXMuZ2V0RGF0YXNldE1ldGEoaSk7XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gZGF0YXNldC50eXBlIHx8IHRoaXMuY29uZmlnLnR5cGU7XG4gICAgICAgICAgICBpZiAobWV0YS50eXBlICYmIG1ldGEudHlwZSAhPT0gdHlwZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Rlc3Ryb3lEYXRhc2V0TWV0YShpKTtcbiAgICAgICAgICAgICAgICBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1ldGEudHlwZSA9IHR5cGU7XG4gICAgICAgICAgICBtZXRhLmluZGV4QXhpcyA9IGRhdGFzZXQuaW5kZXhBeGlzIHx8IGdldEluZGV4QXhpcyh0eXBlLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgbWV0YS5vcmRlciA9IGRhdGFzZXQub3JkZXIgfHwgMDtcbiAgICAgICAgICAgIG1ldGEuaW5kZXggPSBpO1xuICAgICAgICAgICAgbWV0YS5sYWJlbCA9ICcnICsgZGF0YXNldC5sYWJlbDtcbiAgICAgICAgICAgIG1ldGEudmlzaWJsZSA9IHRoaXMuaXNEYXRhc2V0VmlzaWJsZShpKTtcbiAgICAgICAgICAgIGlmIChtZXRhLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgICAgICBtZXRhLmNvbnRyb2xsZXIudXBkYXRlSW5kZXgoaSk7XG4gICAgICAgICAgICAgICAgbWV0YS5jb250cm9sbGVyLmxpbmtTY2FsZXMoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgQ29udHJvbGxlckNsYXNzID0gcmVnaXN0cnkuZ2V0Q29udHJvbGxlcih0eXBlKTtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGRhdGFzZXRFbGVtZW50VHlwZSAsIGRhdGFFbGVtZW50VHlwZSAgfSA9IGRlZmF1bHRzLmRhdGFzZXRzW3R5cGVdO1xuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oQ29udHJvbGxlckNsYXNzLCB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFFbGVtZW50VHlwZTogcmVnaXN0cnkuZ2V0RWxlbWVudChkYXRhRWxlbWVudFR5cGUpLFxuICAgICAgICAgICAgICAgICAgICBkYXRhc2V0RWxlbWVudFR5cGU6IGRhdGFzZXRFbGVtZW50VHlwZSAmJiByZWdpc3RyeS5nZXRFbGVtZW50KGRhdGFzZXRFbGVtZW50VHlwZSlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBtZXRhLmNvbnRyb2xsZXIgPSBuZXcgQ29udHJvbGxlckNsYXNzKHRoaXMsIGkpO1xuICAgICAgICAgICAgICAgIG5ld0NvbnRyb2xsZXJzLnB1c2gobWV0YS5jb250cm9sbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl91cGRhdGVNZXRhc2V0cygpO1xuICAgICAgICByZXR1cm4gbmV3Q29udHJvbGxlcnM7XG4gICAgfVxuIF9yZXNldEVsZW1lbnRzKCkge1xuICAgICAgICBlYWNoKHRoaXMuZGF0YS5kYXRhc2V0cywgKGRhdGFzZXQsIGRhdGFzZXRJbmRleCk9PntcbiAgICAgICAgICAgIHRoaXMuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KS5jb250cm9sbGVyLnJlc2V0KCk7XG4gICAgICAgIH0sIHRoaXMpO1xuICAgIH1cbiByZXNldCgpIHtcbiAgICAgICAgdGhpcy5fcmVzZXRFbGVtZW50cygpO1xuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ3Jlc2V0Jyk7XG4gICAgfVxuICAgIHVwZGF0ZShtb2RlKSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY29uZmlnO1xuICAgICAgICBjb25maWcudXBkYXRlKCk7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLl9vcHRpb25zID0gY29uZmlnLmNyZWF0ZVJlc29sdmVyKGNvbmZpZy5jaGFydE9wdGlvblNjb3BlcygpLCB0aGlzLmdldENvbnRleHQoKSk7XG4gICAgICAgIGNvbnN0IGFuaW1zRGlzYWJsZWQgPSB0aGlzLl9hbmltYXRpb25zRGlzYWJsZWQgPSAhb3B0aW9ucy5hbmltYXRpb247XG4gICAgICAgIHRoaXMuX3VwZGF0ZVNjYWxlcygpO1xuICAgICAgICB0aGlzLl9jaGVja0V2ZW50QmluZGluZ3MoKTtcbiAgICAgICAgdGhpcy5fdXBkYXRlSGlkZGVuSW5kaWNlcygpO1xuICAgICAgICB0aGlzLl9wbHVnaW5zLmludmFsaWRhdGUoKTtcbiAgICAgICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlVXBkYXRlJywge1xuICAgICAgICAgICAgbW9kZSxcbiAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICAgICAgfSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV3Q29udHJvbGxlcnMgPSB0aGlzLmJ1aWxkT3JVcGRhdGVDb250cm9sbGVycygpO1xuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZUVsZW1lbnRzVXBkYXRlJyk7XG4gICAgICAgIGxldCBtaW5QYWRkaW5nID0gMDtcbiAgICAgICAgZm9yKGxldCBpID0gMCwgaWxlbiA9IHRoaXMuZGF0YS5kYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspe1xuICAgICAgICAgICAgY29uc3QgeyBjb250cm9sbGVyICB9ID0gdGhpcy5nZXREYXRhc2V0TWV0YShpKTtcbiAgICAgICAgICAgIGNvbnN0IHJlc2V0ID0gIWFuaW1zRGlzYWJsZWQgJiYgbmV3Q29udHJvbGxlcnMuaW5kZXhPZihjb250cm9sbGVyKSA9PT0gLTE7XG4gICAgICAgICAgICBjb250cm9sbGVyLmJ1aWxkT3JVcGRhdGVFbGVtZW50cyhyZXNldCk7XG4gICAgICAgICAgICBtaW5QYWRkaW5nID0gTWF0aC5tYXgoK2NvbnRyb2xsZXIuZ2V0TWF4T3ZlcmZsb3coKSwgbWluUGFkZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgbWluUGFkZGluZyA9IHRoaXMuX21pblBhZGRpbmcgPSBvcHRpb25zLmxheW91dC5hdXRvUGFkZGluZyA/IG1pblBhZGRpbmcgOiAwO1xuICAgICAgICB0aGlzLl91cGRhdGVMYXlvdXQobWluUGFkZGluZyk7XG4gICAgICAgIGlmICghYW5pbXNEaXNhYmxlZCkge1xuICAgICAgICAgICAgZWFjaChuZXdDb250cm9sbGVycywgKGNvbnRyb2xsZXIpPT57XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5yZXNldCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdXBkYXRlRGF0YXNldHMobW9kZSk7XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJVcGRhdGUnLCB7XG4gICAgICAgICAgICBtb2RlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9sYXllcnMuc29ydChjb21wYXJlMkxldmVsKCd6JywgJ19pZHgnKSk7XG4gICAgICAgIGNvbnN0IHsgX2FjdGl2ZSAsIF9sYXN0RXZlbnQgIH0gPSB0aGlzO1xuICAgICAgICBpZiAoX2xhc3RFdmVudCkge1xuICAgICAgICAgICAgdGhpcy5fZXZlbnRIYW5kbGVyKF9sYXN0RXZlbnQsIHRydWUpO1xuICAgICAgICB9IGVsc2UgaWYgKF9hY3RpdmUubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVIb3ZlclN0eWxlcyhfYWN0aXZlLCBfYWN0aXZlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH1cbiBfdXBkYXRlU2NhbGVzKCkge1xuICAgICAgICBlYWNoKHRoaXMuc2NhbGVzLCAoc2NhbGUpPT57XG4gICAgICAgICAgICBsYXlvdXRzLnJlbW92ZUJveCh0aGlzLCBzY2FsZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVuc3VyZVNjYWxlc0hhdmVJRHMoKTtcbiAgICAgICAgdGhpcy5idWlsZE9yVXBkYXRlU2NhbGVzKCk7XG4gICAgfVxuIF9jaGVja0V2ZW50QmluZGluZ3MoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nRXZlbnRzID0gbmV3IFNldChPYmplY3Qua2V5cyh0aGlzLl9saXN0ZW5lcnMpKTtcbiAgICAgICAgY29uc3QgbmV3RXZlbnRzID0gbmV3IFNldChvcHRpb25zLmV2ZW50cyk7XG4gICAgICAgIGlmICghc2V0c0VxdWFsKGV4aXN0aW5nRXZlbnRzLCBuZXdFdmVudHMpIHx8ICEhdGhpcy5fcmVzcG9uc2l2ZUxpc3RlbmVycyAhPT0gb3B0aW9ucy5yZXNwb25zaXZlKSB7XG4gICAgICAgICAgICB0aGlzLnVuYmluZEV2ZW50cygpO1xuICAgICAgICAgICAgdGhpcy5iaW5kRXZlbnRzKCk7XG4gICAgICAgIH1cbiAgICB9XG4gX3VwZGF0ZUhpZGRlbkluZGljZXMoKSB7XG4gICAgICAgIGNvbnN0IHsgX2hpZGRlbkluZGljZXMgIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBjaGFuZ2VzID0gdGhpcy5fZ2V0VW5pZm9ybURhdGFDaGFuZ2VzKCkgfHwgW107XG4gICAgICAgIGZvciAoY29uc3QgeyBtZXRob2QgLCBzdGFydCAsIGNvdW50ICB9IG9mIGNoYW5nZXMpe1xuICAgICAgICAgICAgY29uc3QgbW92ZSA9IG1ldGhvZCA9PT0gJ19yZW1vdmVFbGVtZW50cycgPyAtY291bnQgOiBjb3VudDtcbiAgICAgICAgICAgIG1vdmVOdW1lcmljS2V5cyhfaGlkZGVuSW5kaWNlcywgc3RhcnQsIG1vdmUpO1xuICAgICAgICB9XG4gICAgfVxuIF9nZXRVbmlmb3JtRGF0YUNoYW5nZXMoKSB7XG4gICAgICAgIGNvbnN0IF9kYXRhQ2hhbmdlcyA9IHRoaXMuX2RhdGFDaGFuZ2VzO1xuICAgICAgICBpZiAoIV9kYXRhQ2hhbmdlcyB8fCAhX2RhdGFDaGFuZ2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2RhdGFDaGFuZ2VzID0gW107XG4gICAgICAgIGNvbnN0IGRhdGFzZXRDb3VudCA9IHRoaXMuZGF0YS5kYXRhc2V0cy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IG1ha2VTZXQgPSAoaWR4KT0+bmV3IFNldChfZGF0YUNoYW5nZXMuZmlsdGVyKChjKT0+Y1swXSA9PT0gaWR4KS5tYXAoKGMsIGkpPT5pICsgJywnICsgYy5zcGxpY2UoMSkuam9pbignLCcpKSk7XG4gICAgICAgIGNvbnN0IGNoYW5nZVNldCA9IG1ha2VTZXQoMCk7XG4gICAgICAgIGZvcihsZXQgaSA9IDE7IGkgPCBkYXRhc2V0Q291bnQ7IGkrKyl7XG4gICAgICAgICAgICBpZiAoIXNldHNFcXVhbChjaGFuZ2VTZXQsIG1ha2VTZXQoaSkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKGNoYW5nZVNldCkubWFwKChjKT0+Yy5zcGxpdCgnLCcpKS5tYXAoKGEpPT4oe1xuICAgICAgICAgICAgICAgIG1ldGhvZDogYVsxXSxcbiAgICAgICAgICAgICAgICBzdGFydDogK2FbMl0sXG4gICAgICAgICAgICAgICAgY291bnQ6ICthWzNdXG4gICAgICAgICAgICB9KSk7XG4gICAgfVxuIF91cGRhdGVMYXlvdXQobWluUGFkZGluZykge1xuICAgICAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVMYXlvdXQnLCB7XG4gICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgIH0pID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxheW91dHMudXBkYXRlKHRoaXMsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCBtaW5QYWRkaW5nKTtcbiAgICAgICAgY29uc3QgYXJlYSA9IHRoaXMuY2hhcnRBcmVhO1xuICAgICAgICBjb25zdCBub0FyZWEgPSBhcmVhLndpZHRoIDw9IDAgfHwgYXJlYS5oZWlnaHQgPD0gMDtcbiAgICAgICAgdGhpcy5fbGF5ZXJzID0gW107XG4gICAgICAgIGVhY2godGhpcy5ib3hlcywgKGJveCk9PntcbiAgICAgICAgICAgIGlmIChub0FyZWEgJiYgYm94LnBvc2l0aW9uID09PSAnY2hhcnRBcmVhJykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChib3guY29uZmlndXJlKSB7XG4gICAgICAgICAgICAgICAgYm94LmNvbmZpZ3VyZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fbGF5ZXJzLnB1c2goLi4uYm94Ll9sYXllcnMoKSk7XG4gICAgICAgIH0sIHRoaXMpO1xuICAgICAgICB0aGlzLl9sYXllcnMuZm9yRWFjaCgoaXRlbSwgaW5kZXgpPT57XG4gICAgICAgICAgICBpdGVtLl9pZHggPSBpbmRleDtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJMYXlvdXQnKTtcbiAgICB9XG4gX3VwZGF0ZURhdGFzZXRzKG1vZGUpIHtcbiAgICAgICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlRGF0YXNldHNVcGRhdGUnLCB7XG4gICAgICAgICAgICBtb2RlLFxuICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICB9KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IobGV0IGkgPSAwLCBpbGVuID0gdGhpcy5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICB0aGlzLmdldERhdGFzZXRNZXRhKGkpLmNvbnRyb2xsZXIuY29uZmlndXJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGxldCBpID0gMCwgaWxlbiA9IHRoaXMuZGF0YS5kYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlRGF0YXNldChpLCBpc0Z1bmN0aW9uKG1vZGUpID8gbW9kZSh7XG4gICAgICAgICAgICAgICAgZGF0YXNldEluZGV4OiBpXG4gICAgICAgICAgICB9KSA6IG1vZGUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJEYXRhc2V0c1VwZGF0ZScsIHtcbiAgICAgICAgICAgIG1vZGVcbiAgICAgICAgfSk7XG4gICAgfVxuIF91cGRhdGVEYXRhc2V0KGluZGV4LCBtb2RlKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLmdldERhdGFzZXRNZXRhKGluZGV4KTtcbiAgICAgICAgY29uc3QgYXJncyA9IHtcbiAgICAgICAgICAgIG1ldGEsXG4gICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgIG1vZGUsXG4gICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZURhdGFzZXRVcGRhdGUnLCBhcmdzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBtZXRhLmNvbnRyb2xsZXIuX3VwZGF0ZShtb2RlKTtcbiAgICAgICAgYXJncy5jYW5jZWxhYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJEYXRhc2V0VXBkYXRlJywgYXJncyk7XG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlUmVuZGVyJywge1xuICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICB9KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYW5pbWF0b3IuaGFzKHRoaXMpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hdHRhY2hlZCAmJiAhYW5pbWF0b3IucnVubmluZyh0aGlzKSkge1xuICAgICAgICAgICAgICAgIGFuaW1hdG9yLnN0YXJ0KHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kcmF3KCk7XG4gICAgICAgICAgICBvbkFuaW1hdGlvbnNDb21wbGV0ZSh7XG4gICAgICAgICAgICAgICAgY2hhcnQ6IHRoaXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRyYXcoKSB7XG4gICAgICAgIGxldCBpO1xuICAgICAgICBpZiAodGhpcy5fcmVzaXplQmVmb3JlRHJhdykge1xuICAgICAgICAgICAgY29uc3QgeyB3aWR0aCAsIGhlaWdodCAgfSA9IHRoaXMuX3Jlc2l6ZUJlZm9yZURyYXc7XG4gICAgICAgICAgICB0aGlzLl9yZXNpemUod2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICB0aGlzLl9yZXNpemVCZWZvcmVEcmF3ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgIGlmICh0aGlzLndpZHRoIDw9IDAgfHwgdGhpcy5oZWlnaHQgPD0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZURyYXcnLCB7XG4gICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgIH0pID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxheWVycyA9IHRoaXMuX2xheWVycztcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgbGF5ZXJzLmxlbmd0aCAmJiBsYXllcnNbaV0ueiA8PSAwOyArK2kpe1xuICAgICAgICAgICAgbGF5ZXJzW2ldLmRyYXcodGhpcy5jaGFydEFyZWEpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2RyYXdEYXRhc2V0cygpO1xuICAgICAgICBmb3IoOyBpIDwgbGF5ZXJzLmxlbmd0aDsgKytpKXtcbiAgICAgICAgICAgIGxheWVyc1tpXS5kcmF3KHRoaXMuY2hhcnRBcmVhKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyRHJhdycpO1xuICAgIH1cbiBfZ2V0U29ydGVkRGF0YXNldE1ldGFzKGZpbHRlclZpc2libGUpIHtcbiAgICAgICAgY29uc3QgbWV0YXNldHMgPSB0aGlzLl9zb3J0ZWRNZXRhc2V0cztcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICAgIGxldCBpLCBpbGVuO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBtZXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgY29uc3QgbWV0YSA9IG1ldGFzZXRzW2ldO1xuICAgICAgICAgICAgaWYgKCFmaWx0ZXJWaXNpYmxlIHx8IG1ldGEudmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG1ldGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuIGdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRTb3J0ZWREYXRhc2V0TWV0YXModHJ1ZSk7XG4gICAgfVxuIF9kcmF3RGF0YXNldHMoKSB7XG4gICAgICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZURhdGFzZXRzRHJhdycsIHtcbiAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICAgICAgfSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWV0YXNldHMgPSB0aGlzLmdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKTtcbiAgICAgICAgZm9yKGxldCBpID0gbWV0YXNldHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpe1xuICAgICAgICAgICAgdGhpcy5fZHJhd0RhdGFzZXQobWV0YXNldHNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJEYXRhc2V0c0RyYXcnKTtcbiAgICB9XG4gX2RyYXdEYXRhc2V0KG1ldGEpIHtcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgICAgIGNvbnN0IGNsaXAgPSBtZXRhLl9jbGlwO1xuICAgICAgICBjb25zdCB1c2VDbGlwID0gIWNsaXAuZGlzYWJsZWQ7XG4gICAgICAgIGNvbnN0IGFyZWEgPSBnZXREYXRhc2V0QXJlYShtZXRhKSB8fCB0aGlzLmNoYXJ0QXJlYTtcbiAgICAgICAgY29uc3QgYXJncyA9IHtcbiAgICAgICAgICAgIG1ldGEsXG4gICAgICAgICAgICBpbmRleDogbWV0YS5pbmRleCxcbiAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlRGF0YXNldERyYXcnLCBhcmdzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodXNlQ2xpcCkge1xuICAgICAgICAgICAgY2xpcEFyZWEoY3R4LCB7XG4gICAgICAgICAgICAgICAgbGVmdDogY2xpcC5sZWZ0ID09PSBmYWxzZSA/IDAgOiBhcmVhLmxlZnQgLSBjbGlwLmxlZnQsXG4gICAgICAgICAgICAgICAgcmlnaHQ6IGNsaXAucmlnaHQgPT09IGZhbHNlID8gdGhpcy53aWR0aCA6IGFyZWEucmlnaHQgKyBjbGlwLnJpZ2h0LFxuICAgICAgICAgICAgICAgIHRvcDogY2xpcC50b3AgPT09IGZhbHNlID8gMCA6IGFyZWEudG9wIC0gY2xpcC50b3AsXG4gICAgICAgICAgICAgICAgYm90dG9tOiBjbGlwLmJvdHRvbSA9PT0gZmFsc2UgPyB0aGlzLmhlaWdodCA6IGFyZWEuYm90dG9tICsgY2xpcC5ib3R0b21cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIG1ldGEuY29udHJvbGxlci5kcmF3KCk7XG4gICAgICAgIGlmICh1c2VDbGlwKSB7XG4gICAgICAgICAgICB1bmNsaXBBcmVhKGN0eCk7XG4gICAgICAgIH1cbiAgICAgICAgYXJncy5jYW5jZWxhYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJEYXRhc2V0RHJhdycsIGFyZ3MpO1xuICAgIH1cbiBpc1BvaW50SW5BcmVhKHBvaW50KSB7XG4gICAgICAgIHJldHVybiBfaXNQb2ludEluQXJlYShwb2ludCwgdGhpcy5jaGFydEFyZWEsIHRoaXMuX21pblBhZGRpbmcpO1xuICAgIH1cbiAgICBnZXRFbGVtZW50c0F0RXZlbnRGb3JNb2RlKGUsIG1vZGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgY29uc3QgbWV0aG9kID0gSW50ZXJhY3Rpb24ubW9kZXNbbW9kZV07XG4gICAgICAgIGlmICh0eXBlb2YgbWV0aG9kID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gbWV0aG9kKHRoaXMsIGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KSB7XG4gICAgICAgIGNvbnN0IGRhdGFzZXQgPSB0aGlzLmRhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XTtcbiAgICAgICAgY29uc3QgbWV0YXNldHMgPSB0aGlzLl9tZXRhc2V0cztcbiAgICAgICAgbGV0IG1ldGEgPSBtZXRhc2V0cy5maWx0ZXIoKHgpPT54ICYmIHguX2RhdGFzZXQgPT09IGRhdGFzZXQpLnBvcCgpO1xuICAgICAgICBpZiAoIW1ldGEpIHtcbiAgICAgICAgICAgIG1ldGEgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRhOiBbXSxcbiAgICAgICAgICAgICAgICBkYXRhc2V0OiBudWxsLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IG51bGwsXG4gICAgICAgICAgICAgICAgaGlkZGVuOiBudWxsLFxuICAgICAgICAgICAgICAgIHhBeGlzSUQ6IG51bGwsXG4gICAgICAgICAgICAgICAgeUF4aXNJRDogbnVsbCxcbiAgICAgICAgICAgICAgICBvcmRlcjogZGF0YXNldCAmJiBkYXRhc2V0Lm9yZGVyIHx8IDAsXG4gICAgICAgICAgICAgICAgaW5kZXg6IGRhdGFzZXRJbmRleCxcbiAgICAgICAgICAgICAgICBfZGF0YXNldDogZGF0YXNldCxcbiAgICAgICAgICAgICAgICBfcGFyc2VkOiBbXSxcbiAgICAgICAgICAgICAgICBfc29ydGVkOiBmYWxzZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG1ldGFzZXRzLnB1c2gobWV0YSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1ldGE7XG4gICAgfVxuICAgIGdldENvbnRleHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiRjb250ZXh0IHx8ICh0aGlzLiRjb250ZXh0ID0gY3JlYXRlQ29udGV4dChudWxsLCB7XG4gICAgICAgICAgICBjaGFydDogdGhpcyxcbiAgICAgICAgICAgIHR5cGU6ICdjaGFydCdcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBnZXRWaXNpYmxlRGF0YXNldENvdW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCkubGVuZ3RoO1xuICAgIH1cbiAgICBpc0RhdGFzZXRWaXNpYmxlKGRhdGFzZXRJbmRleCkge1xuICAgICAgICBjb25zdCBkYXRhc2V0ID0gdGhpcy5kYXRhLmRhdGFzZXRzW2RhdGFzZXRJbmRleF07XG4gICAgICAgIGlmICghZGF0YXNldCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG4gICAgICAgIHJldHVybiB0eXBlb2YgbWV0YS5oaWRkZW4gPT09ICdib29sZWFuJyA/ICFtZXRhLmhpZGRlbiA6ICFkYXRhc2V0LmhpZGRlbjtcbiAgICB9XG4gICAgc2V0RGF0YXNldFZpc2liaWxpdHkoZGF0YXNldEluZGV4LCB2aXNpYmxlKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG4gICAgICAgIG1ldGEuaGlkZGVuID0gIXZpc2libGU7XG4gICAgfVxuICAgIHRvZ2dsZURhdGFWaXNpYmlsaXR5KGluZGV4KSB7XG4gICAgICAgIHRoaXMuX2hpZGRlbkluZGljZXNbaW5kZXhdID0gIXRoaXMuX2hpZGRlbkluZGljZXNbaW5kZXhdO1xuICAgIH1cbiAgICBnZXREYXRhVmlzaWJpbGl0eShpbmRleCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuX2hpZGRlbkluZGljZXNbaW5kZXhdO1xuICAgIH1cbiBfdXBkYXRlVmlzaWJpbGl0eShkYXRhc2V0SW5kZXgsIGRhdGFJbmRleCwgdmlzaWJsZSkge1xuICAgICAgICBjb25zdCBtb2RlID0gdmlzaWJsZSA/ICdzaG93JyA6ICdoaWRlJztcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcbiAgICAgICAgY29uc3QgYW5pbXMgPSBtZXRhLmNvbnRyb2xsZXIuX3Jlc29sdmVBbmltYXRpb25zKHVuZGVmaW5lZCwgbW9kZSk7XG4gICAgICAgIGlmIChkZWZpbmVkKGRhdGFJbmRleCkpIHtcbiAgICAgICAgICAgIG1ldGEuZGF0YVtkYXRhSW5kZXhdLmhpZGRlbiA9ICF2aXNpYmxlO1xuICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0RGF0YXNldFZpc2liaWxpdHkoZGF0YXNldEluZGV4LCB2aXNpYmxlKTtcbiAgICAgICAgICAgIGFuaW1zLnVwZGF0ZShtZXRhLCB7XG4gICAgICAgICAgICAgICAgdmlzaWJsZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSgoY3R4KT0+Y3R4LmRhdGFzZXRJbmRleCA9PT0gZGF0YXNldEluZGV4ID8gbW9kZSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaGlkZShkYXRhc2V0SW5kZXgsIGRhdGFJbmRleCkge1xuICAgICAgICB0aGlzLl91cGRhdGVWaXNpYmlsaXR5KGRhdGFzZXRJbmRleCwgZGF0YUluZGV4LCBmYWxzZSk7XG4gICAgfVxuICAgIHNob3coZGF0YXNldEluZGV4LCBkYXRhSW5kZXgpIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlVmlzaWJpbGl0eShkYXRhc2V0SW5kZXgsIGRhdGFJbmRleCwgdHJ1ZSk7XG4gICAgfVxuIF9kZXN0cm95RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9tZXRhc2V0c1tkYXRhc2V0SW5kZXhdO1xuICAgICAgICBpZiAobWV0YSAmJiBtZXRhLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgIG1ldGEuY29udHJvbGxlci5fZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9tZXRhc2V0c1tkYXRhc2V0SW5kZXhdO1xuICAgIH1cbiAgICBfc3RvcCgpIHtcbiAgICAgICAgbGV0IGksIGlsZW47XG4gICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICBhbmltYXRvci5yZW1vdmUodGhpcyk7XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IHRoaXMuZGF0YS5kYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgdGhpcy5fZGVzdHJveURhdGFzZXRNZXRhKGkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlRGVzdHJveScpO1xuICAgICAgICBjb25zdCB7IGNhbnZhcyAsIGN0eCAgfSA9IHRoaXM7XG4gICAgICAgIHRoaXMuX3N0b3AoKTtcbiAgICAgICAgdGhpcy5jb25maWcuY2xlYXJDYWNoZSgpO1xuICAgICAgICBpZiAoY2FudmFzKSB7XG4gICAgICAgICAgICB0aGlzLnVuYmluZEV2ZW50cygpO1xuICAgICAgICAgICAgY2xlYXJDYW52YXMoY2FudmFzLCBjdHgpO1xuICAgICAgICAgICAgdGhpcy5wbGF0Zm9ybS5yZWxlYXNlQ29udGV4dChjdHgpO1xuICAgICAgICAgICAgdGhpcy5jYW52YXMgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5jdHggPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSBpbnN0YW5jZXNbdGhpcy5pZF07XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJEZXN0cm95Jyk7XG4gICAgfVxuICAgIHRvQmFzZTY0SW1hZ2UoLi4uYXJncykge1xuICAgICAgICByZXR1cm4gdGhpcy5jYW52YXMudG9EYXRhVVJMKC4uLmFyZ3MpO1xuICAgIH1cbiBiaW5kRXZlbnRzKCkge1xuICAgICAgICB0aGlzLmJpbmRVc2VyRXZlbnRzKCk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucmVzcG9uc2l2ZSkge1xuICAgICAgICAgICAgdGhpcy5iaW5kUmVzcG9uc2l2ZUV2ZW50cygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hdHRhY2hlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gYmluZFVzZXJFdmVudHMoKSB7XG4gICAgICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVycztcbiAgICAgICAgY29uc3QgcGxhdGZvcm0gPSB0aGlzLnBsYXRmb3JtO1xuICAgICAgICBjb25zdCBfYWRkID0gKHR5cGUsIGxpc3RlbmVyKT0+e1xuICAgICAgICAgICAgcGxhdGZvcm0uYWRkRXZlbnRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lcik7XG4gICAgICAgICAgICBsaXN0ZW5lcnNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgbGlzdGVuZXIgPSAoZSwgeCwgeSk9PntcbiAgICAgICAgICAgIGUub2Zmc2V0WCA9IHg7XG4gICAgICAgICAgICBlLm9mZnNldFkgPSB5O1xuICAgICAgICAgICAgdGhpcy5fZXZlbnRIYW5kbGVyKGUpO1xuICAgICAgICB9O1xuICAgICAgICBlYWNoKHRoaXMub3B0aW9ucy5ldmVudHMsICh0eXBlKT0+X2FkZCh0eXBlLCBsaXN0ZW5lcikpO1xuICAgIH1cbiBiaW5kUmVzcG9uc2l2ZUV2ZW50cygpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9yZXNwb25zaXZlTGlzdGVuZXJzKSB7XG4gICAgICAgICAgICB0aGlzLl9yZXNwb25zaXZlTGlzdGVuZXJzID0ge307XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5fcmVzcG9uc2l2ZUxpc3RlbmVycztcbiAgICAgICAgY29uc3QgcGxhdGZvcm0gPSB0aGlzLnBsYXRmb3JtO1xuICAgICAgICBjb25zdCBfYWRkID0gKHR5cGUsIGxpc3RlbmVyKT0+e1xuICAgICAgICAgICAgcGxhdGZvcm0uYWRkRXZlbnRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lcik7XG4gICAgICAgICAgICBsaXN0ZW5lcnNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgX3JlbW92ZSA9ICh0eXBlLCBsaXN0ZW5lcik9PntcbiAgICAgICAgICAgIGlmIChsaXN0ZW5lcnNbdHlwZV0pIHtcbiAgICAgICAgICAgICAgICBwbGF0Zm9ybS5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgbGlzdGVuZXJzW3R5cGVdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBsaXN0ZW5lciA9ICh3aWR0aCwgaGVpZ2h0KT0+e1xuICAgICAgICAgICAgaWYgKHRoaXMuY2FudmFzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXNpemUod2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGxldCBkZXRhY2hlZDtcbiAgICAgICAgY29uc3QgYXR0YWNoZWQgPSAoKT0+e1xuICAgICAgICAgICAgX3JlbW92ZSgnYXR0YWNoJywgYXR0YWNoZWQpO1xuICAgICAgICAgICAgdGhpcy5hdHRhY2hlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnJlc2l6ZSgpO1xuICAgICAgICAgICAgX2FkZCgncmVzaXplJywgbGlzdGVuZXIpO1xuICAgICAgICAgICAgX2FkZCgnZGV0YWNoJywgZGV0YWNoZWQpO1xuICAgICAgICB9O1xuICAgICAgICBkZXRhY2hlZCA9ICgpPT57XG4gICAgICAgICAgICB0aGlzLmF0dGFjaGVkID0gZmFsc2U7XG4gICAgICAgICAgICBfcmVtb3ZlKCdyZXNpemUnLCBsaXN0ZW5lcik7XG4gICAgICAgICAgICB0aGlzLl9zdG9wKCk7XG4gICAgICAgICAgICB0aGlzLl9yZXNpemUoMCwgMCk7XG4gICAgICAgICAgICBfYWRkKCdhdHRhY2gnLCBhdHRhY2hlZCk7XG4gICAgICAgIH07XG4gICAgICAgIGlmIChwbGF0Zm9ybS5pc0F0dGFjaGVkKHRoaXMuY2FudmFzKSkge1xuICAgICAgICAgICAgYXR0YWNoZWQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRldGFjaGVkKCk7XG4gICAgICAgIH1cbiAgICB9XG4gdW5iaW5kRXZlbnRzKCkge1xuICAgICAgICBlYWNoKHRoaXMuX2xpc3RlbmVycywgKGxpc3RlbmVyLCB0eXBlKT0+e1xuICAgICAgICAgICAgdGhpcy5wbGF0Zm9ybS5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX2xpc3RlbmVycyA9IHt9O1xuICAgICAgICBlYWNoKHRoaXMuX3Jlc3BvbnNpdmVMaXN0ZW5lcnMsIChsaXN0ZW5lciwgdHlwZSk9PntcbiAgICAgICAgICAgIHRoaXMucGxhdGZvcm0ucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lcik7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9yZXNwb25zaXZlTGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB1cGRhdGVIb3ZlclN0eWxlKGl0ZW1zLCBtb2RlLCBlbmFibGVkKSB7XG4gICAgICAgIGNvbnN0IHByZWZpeCA9IGVuYWJsZWQgPyAnc2V0JyA6ICdyZW1vdmUnO1xuICAgICAgICBsZXQgbWV0YSwgaXRlbSwgaSwgaWxlbjtcbiAgICAgICAgaWYgKG1vZGUgPT09ICdkYXRhc2V0Jykge1xuICAgICAgICAgICAgbWV0YSA9IHRoaXMuZ2V0RGF0YXNldE1ldGEoaXRlbXNbMF0uZGF0YXNldEluZGV4KTtcbiAgICAgICAgICAgIG1ldGEuY29udHJvbGxlclsnXycgKyBwcmVmaXggKyAnRGF0YXNldEhvdmVyU3R5bGUnXSgpO1xuICAgICAgICB9XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IGl0ZW1zLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBpdGVtID0gaXRlbXNbaV07XG4gICAgICAgICAgICBjb25zdCBjb250cm9sbGVyID0gaXRlbSAmJiB0aGlzLmdldERhdGFzZXRNZXRhKGl0ZW0uZGF0YXNldEluZGV4KS5jb250cm9sbGVyO1xuICAgICAgICAgICAgaWYgKGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyW3ByZWZpeCArICdIb3ZlclN0eWxlJ10oaXRlbS5lbGVtZW50LCBpdGVtLmRhdGFzZXRJbmRleCwgaXRlbS5pbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gZ2V0QWN0aXZlRWxlbWVudHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmUgfHwgW107XG4gICAgfVxuIHNldEFjdGl2ZUVsZW1lbnRzKGFjdGl2ZUVsZW1lbnRzKSB7XG4gICAgICAgIGNvbnN0IGxhc3RBY3RpdmUgPSB0aGlzLl9hY3RpdmUgfHwgW107XG4gICAgICAgIGNvbnN0IGFjdGl2ZSA9IGFjdGl2ZUVsZW1lbnRzLm1hcCgoeyBkYXRhc2V0SW5kZXggLCBpbmRleCAgfSk9PntcbiAgICAgICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG4gICAgICAgICAgICBpZiAoIW1ldGEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGRhdGFzZXQgZm91bmQgYXQgaW5kZXggJyArIGRhdGFzZXRJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRhdGFzZXRJbmRleCxcbiAgICAgICAgICAgICAgICBlbGVtZW50OiBtZXRhLmRhdGFbaW5kZXhdLFxuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgY2hhbmdlZCA9ICFfZWxlbWVudHNFcXVhbChhY3RpdmUsIGxhc3RBY3RpdmUpO1xuICAgICAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICAgICAgdGhpcy5fYWN0aXZlID0gYWN0aXZlO1xuICAgICAgICAgICAgdGhpcy5fbGFzdEV2ZW50ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUhvdmVyU3R5bGVzKGFjdGl2ZSwgbGFzdEFjdGl2ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gbm90aWZ5UGx1Z2lucyhob29rLCBhcmdzLCBmaWx0ZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BsdWdpbnMubm90aWZ5KHRoaXMsIGhvb2ssIGFyZ3MsIGZpbHRlcik7XG4gICAgfVxuIGlzUGx1Z2luRW5hYmxlZChwbHVnaW5JZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGx1Z2lucy5fY2FjaGUuZmlsdGVyKChwKT0+cC5wbHVnaW4uaWQgPT09IHBsdWdpbklkKS5sZW5ndGggPT09IDE7XG4gICAgfVxuIF91cGRhdGVIb3ZlclN0eWxlcyhhY3RpdmUsIGxhc3RBY3RpdmUsIHJlcGxheSkge1xuICAgICAgICBjb25zdCBob3Zlck9wdGlvbnMgPSB0aGlzLm9wdGlvbnMuaG92ZXI7XG4gICAgICAgIGNvbnN0IGRpZmYgPSAoYSwgYik9PmEuZmlsdGVyKCh4KT0+IWIuc29tZSgoeSk9PnguZGF0YXNldEluZGV4ID09PSB5LmRhdGFzZXRJbmRleCAmJiB4LmluZGV4ID09PSB5LmluZGV4KSk7XG4gICAgICAgIGNvbnN0IGRlYWN0aXZhdGVkID0gZGlmZihsYXN0QWN0aXZlLCBhY3RpdmUpO1xuICAgICAgICBjb25zdCBhY3RpdmF0ZWQgPSByZXBsYXkgPyBhY3RpdmUgOiBkaWZmKGFjdGl2ZSwgbGFzdEFjdGl2ZSk7XG4gICAgICAgIGlmIChkZWFjdGl2YXRlZC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlSG92ZXJTdHlsZShkZWFjdGl2YXRlZCwgaG92ZXJPcHRpb25zLm1vZGUsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWN0aXZhdGVkLmxlbmd0aCAmJiBob3Zlck9wdGlvbnMubW9kZSkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVIb3ZlclN0eWxlKGFjdGl2YXRlZCwgaG92ZXJPcHRpb25zLm1vZGUsIHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuIF9ldmVudEhhbmRsZXIoZSwgcmVwbGF5KSB7XG4gICAgICAgIGNvbnN0IGFyZ3MgPSB7XG4gICAgICAgICAgICBldmVudDogZSxcbiAgICAgICAgICAgIHJlcGxheSxcbiAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWUsXG4gICAgICAgICAgICBpbkNoYXJ0QXJlYTogdGhpcy5pc1BvaW50SW5BcmVhKGUpXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGV2ZW50RmlsdGVyID0gKHBsdWdpbik9PihwbHVnaW4ub3B0aW9ucy5ldmVudHMgfHwgdGhpcy5vcHRpb25zLmV2ZW50cykuaW5jbHVkZXMoZS5uYXRpdmUudHlwZSk7XG4gICAgICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZUV2ZW50JywgYXJncywgZXZlbnRGaWx0ZXIpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNoYW5nZWQgPSB0aGlzLl9oYW5kbGVFdmVudChlLCByZXBsYXksIGFyZ3MuaW5DaGFydEFyZWEpO1xuICAgICAgICBhcmdzLmNhbmNlbGFibGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdhZnRlckV2ZW50JywgYXJncywgZXZlbnRGaWx0ZXIpO1xuICAgICAgICBpZiAoY2hhbmdlZCB8fCBhcmdzLmNoYW5nZWQpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuIF9oYW5kbGVFdmVudChlLCByZXBsYXksIGluQ2hhcnRBcmVhKSB7XG4gICAgICAgIGNvbnN0IHsgX2FjdGl2ZTogbGFzdEFjdGl2ZSA9IFtdICwgb3B0aW9ucyAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHVzZUZpbmFsUG9zaXRpb24gPSByZXBsYXk7XG4gICAgICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuX2dldEFjdGl2ZUVsZW1lbnRzKGUsIGxhc3RBY3RpdmUsIGluQ2hhcnRBcmVhLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgICAgY29uc3QgaXNDbGljayA9IF9pc0NsaWNrRXZlbnQoZSk7XG4gICAgICAgIGNvbnN0IGxhc3RFdmVudCA9IGRldGVybWluZUxhc3RFdmVudChlLCB0aGlzLl9sYXN0RXZlbnQsIGluQ2hhcnRBcmVhLCBpc0NsaWNrKTtcbiAgICAgICAgaWYgKGluQ2hhcnRBcmVhKSB7XG4gICAgICAgICAgICB0aGlzLl9sYXN0RXZlbnQgPSBudWxsO1xuICAgICAgICAgICAgY2FsbGJhY2sob3B0aW9ucy5vbkhvdmVyLCBbXG4gICAgICAgICAgICAgICAgZSxcbiAgICAgICAgICAgICAgICBhY3RpdmUsXG4gICAgICAgICAgICAgICAgdGhpc1xuICAgICAgICAgICAgXSwgdGhpcyk7XG4gICAgICAgICAgICBpZiAoaXNDbGljaykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG9wdGlvbnMub25DbGljaywgW1xuICAgICAgICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICAgICAgICBhY3RpdmUsXG4gICAgICAgICAgICAgICAgICAgIHRoaXNcbiAgICAgICAgICAgICAgICBdLCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaGFuZ2VkID0gIV9lbGVtZW50c0VxdWFsKGFjdGl2ZSwgbGFzdEFjdGl2ZSk7XG4gICAgICAgIGlmIChjaGFuZ2VkIHx8IHJlcGxheSkge1xuICAgICAgICAgICAgdGhpcy5fYWN0aXZlID0gYWN0aXZlO1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlSG92ZXJTdHlsZXMoYWN0aXZlLCBsYXN0QWN0aXZlLCByZXBsYXkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xhc3RFdmVudCA9IGxhc3RFdmVudDtcbiAgICAgICAgcmV0dXJuIGNoYW5nZWQ7XG4gICAgfVxuIF9nZXRBY3RpdmVFbGVtZW50cyhlLCBsYXN0QWN0aXZlLCBpbkNoYXJ0QXJlYSwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICBpZiAoZS50eXBlID09PSAnbW91c2VvdXQnKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpbkNoYXJ0QXJlYSkge1xuICAgICAgICAgICAgcmV0dXJuIGxhc3RBY3RpdmU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaG92ZXJPcHRpb25zID0gdGhpcy5vcHRpb25zLmhvdmVyO1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRFbGVtZW50c0F0RXZlbnRGb3JNb2RlKGUsIGhvdmVyT3B0aW9ucy5tb2RlLCBob3Zlck9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGludmFsaWRhdGVQbHVnaW5zKCkge1xuICAgIHJldHVybiBlYWNoKENoYXJ0Lmluc3RhbmNlcywgKGNoYXJ0KT0+Y2hhcnQuX3BsdWdpbnMuaW52YWxpZGF0ZSgpKTtcbn1cblxuZnVuY3Rpb24gY2xpcEFyYyhjdHgsIGVsZW1lbnQsIGVuZEFuZ2xlKSB7XG4gICAgY29uc3QgeyBzdGFydEFuZ2xlICwgcGl4ZWxNYXJnaW4gLCB4ICwgeSAsIG91dGVyUmFkaXVzICwgaW5uZXJSYWRpdXMgIH0gPSBlbGVtZW50O1xuICAgIGxldCBhbmdsZU1hcmdpbiA9IHBpeGVsTWFyZ2luIC8gb3V0ZXJSYWRpdXM7XG4gICAgLy8gRHJhdyBhbiBpbm5lciBib3JkZXIgYnkgY2xpcHBpbmcgdGhlIGFyYyBhbmQgZHJhd2luZyBhIGRvdWJsZS13aWR0aCBib3JkZXJcbiAgICAvLyBFbmxhcmdlIHRoZSBjbGlwcGluZyBhcmMgYnkgMC4zMyBwaXhlbHMgdG8gZWxpbWluYXRlIGdsaXRjaGVzIGJldHdlZW4gYm9yZGVyc1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHguYXJjKHgsIHksIG91dGVyUmFkaXVzLCBzdGFydEFuZ2xlIC0gYW5nbGVNYXJnaW4sIGVuZEFuZ2xlICsgYW5nbGVNYXJnaW4pO1xuICAgIGlmIChpbm5lclJhZGl1cyA+IHBpeGVsTWFyZ2luKSB7XG4gICAgICAgIGFuZ2xlTWFyZ2luID0gcGl4ZWxNYXJnaW4gLyBpbm5lclJhZGl1cztcbiAgICAgICAgY3R4LmFyYyh4LCB5LCBpbm5lclJhZGl1cywgZW5kQW5nbGUgKyBhbmdsZU1hcmdpbiwgc3RhcnRBbmdsZSAtIGFuZ2xlTWFyZ2luLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjdHguYXJjKHgsIHksIHBpeGVsTWFyZ2luLCBlbmRBbmdsZSArIEhBTEZfUEksIHN0YXJ0QW5nbGUgLSBIQUxGX1BJKTtcbiAgICB9XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIGN0eC5jbGlwKCk7XG59XG5mdW5jdGlvbiB0b1JhZGl1c0Nvcm5lcnModmFsdWUpIHtcbiAgICByZXR1cm4gX3JlYWRWYWx1ZVRvUHJvcHModmFsdWUsIFtcbiAgICAgICAgJ291dGVyU3RhcnQnLFxuICAgICAgICAnb3V0ZXJFbmQnLFxuICAgICAgICAnaW5uZXJTdGFydCcsXG4gICAgICAgICdpbm5lckVuZCdcbiAgICBdKTtcbn1cbi8qKlxuICogUGFyc2UgYm9yZGVyIHJhZGl1cyBmcm9tIHRoZSBwcm92aWRlZCBvcHRpb25zXG4gKi8gZnVuY3Rpb24gcGFyc2VCb3JkZXJSYWRpdXMkMShhcmMsIGlubmVyUmFkaXVzLCBvdXRlclJhZGl1cywgYW5nbGVEZWx0YSkge1xuICAgIGNvbnN0IG8gPSB0b1JhZGl1c0Nvcm5lcnMoYXJjLm9wdGlvbnMuYm9yZGVyUmFkaXVzKTtcbiAgICBjb25zdCBoYWxmVGhpY2tuZXNzID0gKG91dGVyUmFkaXVzIC0gaW5uZXJSYWRpdXMpIC8gMjtcbiAgICBjb25zdCBpbm5lckxpbWl0ID0gTWF0aC5taW4oaGFsZlRoaWNrbmVzcywgYW5nbGVEZWx0YSAqIGlubmVyUmFkaXVzIC8gMik7XG4gICAgLy8gT3V0ZXIgbGltaXRzIGFyZSBjb21wbGljYXRlZC4gV2Ugd2FudCB0byBjb21wdXRlIHRoZSBhdmFpbGFibGUgYW5ndWxhciBkaXN0YW5jZSBhdFxuICAgIC8vIGEgcmFkaXVzIG9mIG91dGVyUmFkaXVzIC0gYm9yZGVyUmFkaXVzIGJlY2F1c2UgZm9yIHNtYWxsIGFuZ3VsYXIgZGlzdGFuY2VzLCB0aGlzIHRlcm0gbGltaXRzLlxuICAgIC8vIFdlIGNvbXB1dGUgYXQgciA9IG91dGVyUmFkaXVzIC0gYm9yZGVyUmFkaXVzIGJlY2F1c2UgdGhpcyBjaXJjbGUgZGVmaW5lcyB0aGUgY2VudGVyIG9mIHRoZSBib3JkZXIgY29ybmVycy5cbiAgICAvL1xuICAgIC8vIElmIHRoZSBib3JkZXJSYWRpdXMgaXMgbGFyZ2UsIHRoYXQgdmFsdWUgY2FuIGJlY29tZSBuZWdhdGl2ZS5cbiAgICAvLyBUaGlzIGNhdXNlcyB0aGUgb3V0ZXIgYm9yZGVycyB0byBsb3NlIHRoZWlyIHJhZGl1cyBlbnRpcmVseSwgd2hpY2ggaXMgcmF0aGVyIHVuZXhwZWN0ZWQuIFRvIHNvbHZlIHRoYXQsIGlmIGJvcmRlclJhZGl1cyA+IG91dGVyUmFkaXVzXG4gICAgLy8gd2Uga25vdyB0aGF0IHRoZSB0aGlja25lc3MgdGVybSB3aWxsIGRvbWluYXRlIGFuZCBjb21wdXRlIHRoZSBsaW1pdHMgYXQgdGhhdCBwb2ludFxuICAgIGNvbnN0IGNvbXB1dGVPdXRlckxpbWl0ID0gKHZhbCk9PntcbiAgICAgICAgY29uc3Qgb3V0ZXJBcmNMaW1pdCA9IChvdXRlclJhZGl1cyAtIE1hdGgubWluKGhhbGZUaGlja25lc3MsIHZhbCkpICogYW5nbGVEZWx0YSAvIDI7XG4gICAgICAgIHJldHVybiBfbGltaXRWYWx1ZSh2YWwsIDAsIE1hdGgubWluKGhhbGZUaGlja25lc3MsIG91dGVyQXJjTGltaXQpKTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIG91dGVyU3RhcnQ6IGNvbXB1dGVPdXRlckxpbWl0KG8ub3V0ZXJTdGFydCksXG4gICAgICAgIG91dGVyRW5kOiBjb21wdXRlT3V0ZXJMaW1pdChvLm91dGVyRW5kKSxcbiAgICAgICAgaW5uZXJTdGFydDogX2xpbWl0VmFsdWUoby5pbm5lclN0YXJ0LCAwLCBpbm5lckxpbWl0KSxcbiAgICAgICAgaW5uZXJFbmQ6IF9saW1pdFZhbHVlKG8uaW5uZXJFbmQsIDAsIGlubmVyTGltaXQpXG4gICAgfTtcbn1cbi8qKlxuICogQ29udmVydCAociwg8J2cgykgdG8gKHgsIHkpXG4gKi8gZnVuY3Rpb24gclRoZXRhVG9YWShyLCB0aGV0YSwgeCwgeSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHg6IHggKyByICogTWF0aC5jb3ModGhldGEpLFxuICAgICAgICB5OiB5ICsgciAqIE1hdGguc2luKHRoZXRhKVxuICAgIH07XG59XG4vKipcbiAqIFBhdGggdGhlIGFyYywgcmVzcGVjdGluZyBib3JkZXIgcmFkaXVzIGJ5IHNlcGFyYXRpbmcgaW50byBsZWZ0IGFuZCByaWdodCBoYWx2ZXMuXG4gKlxuICogICBTdGFydCAgICAgIEVuZFxuICpcbiAqICAgIDEtLS0+YS0tLT4yICAgIE91dGVyXG4gKiAgIC8gICAgICAgICAgIFxcXG4gKiAgIDggICAgICAgICAgIDNcbiAqICAgfCAgICAgICAgICAgfFxuICogICB8ICAgICAgICAgICB8XG4gKiAgIDcgICAgICAgICAgIDRcbiAqICAgXFwgICAgICAgICAgIC9cbiAqICAgIDY8LS0tYjwtLS01ICAgIElubmVyXG4gKi8gZnVuY3Rpb24gcGF0aEFyYyhjdHgsIGVsZW1lbnQsIG9mZnNldCwgc3BhY2luZywgZW5kLCBjaXJjdWxhcikge1xuICAgIGNvbnN0IHsgeCAsIHkgLCBzdGFydEFuZ2xlOiBzdGFydCAsIHBpeGVsTWFyZ2luICwgaW5uZXJSYWRpdXM6IGlubmVyUiAgfSA9IGVsZW1lbnQ7XG4gICAgY29uc3Qgb3V0ZXJSYWRpdXMgPSBNYXRoLm1heChlbGVtZW50Lm91dGVyUmFkaXVzICsgc3BhY2luZyArIG9mZnNldCAtIHBpeGVsTWFyZ2luLCAwKTtcbiAgICBjb25zdCBpbm5lclJhZGl1cyA9IGlubmVyUiA+IDAgPyBpbm5lclIgKyBzcGFjaW5nICsgb2Zmc2V0ICsgcGl4ZWxNYXJnaW4gOiAwO1xuICAgIGxldCBzcGFjaW5nT2Zmc2V0ID0gMDtcbiAgICBjb25zdCBhbHBoYSA9IGVuZCAtIHN0YXJ0O1xuICAgIGlmIChzcGFjaW5nKSB7XG4gICAgICAgIC8vIFdoZW4gc3BhY2luZyBpcyBwcmVzZW50LCBpdCBpcyB0aGUgc2FtZSBmb3IgYWxsIGl0ZW1zXG4gICAgICAgIC8vIFNvIHdlIGFkanVzdCB0aGUgc3RhcnQgYW5kIGVuZCBhbmdsZSBvZiB0aGUgYXJjIHN1Y2ggdGhhdFxuICAgICAgICAvLyB0aGUgZGlzdGFuY2UgaXMgdGhlIHNhbWUgYXMgaXQgd291bGQgYmUgd2l0aG91dCB0aGUgc3BhY2luZ1xuICAgICAgICBjb25zdCBub1NwYWNpbmdJbm5lclJhZGl1cyA9IGlubmVyUiA+IDAgPyBpbm5lclIgLSBzcGFjaW5nIDogMDtcbiAgICAgICAgY29uc3Qgbm9TcGFjaW5nT3V0ZXJSYWRpdXMgPSBvdXRlclJhZGl1cyA+IDAgPyBvdXRlclJhZGl1cyAtIHNwYWNpbmcgOiAwO1xuICAgICAgICBjb25zdCBhdk5vZ1NwYWNpbmdSYWRpdXMgPSAobm9TcGFjaW5nSW5uZXJSYWRpdXMgKyBub1NwYWNpbmdPdXRlclJhZGl1cykgLyAyO1xuICAgICAgICBjb25zdCBhZGp1c3RlZEFuZ2xlID0gYXZOb2dTcGFjaW5nUmFkaXVzICE9PSAwID8gYWxwaGEgKiBhdk5vZ1NwYWNpbmdSYWRpdXMgLyAoYXZOb2dTcGFjaW5nUmFkaXVzICsgc3BhY2luZykgOiBhbHBoYTtcbiAgICAgICAgc3BhY2luZ09mZnNldCA9IChhbHBoYSAtIGFkanVzdGVkQW5nbGUpIC8gMjtcbiAgICB9XG4gICAgY29uc3QgYmV0YSA9IE1hdGgubWF4KDAuMDAxLCBhbHBoYSAqIG91dGVyUmFkaXVzIC0gb2Zmc2V0IC8gUEkpIC8gb3V0ZXJSYWRpdXM7XG4gICAgY29uc3QgYW5nbGVPZmZzZXQgPSAoYWxwaGEgLSBiZXRhKSAvIDI7XG4gICAgY29uc3Qgc3RhcnRBbmdsZSA9IHN0YXJ0ICsgYW5nbGVPZmZzZXQgKyBzcGFjaW5nT2Zmc2V0O1xuICAgIGNvbnN0IGVuZEFuZ2xlID0gZW5kIC0gYW5nbGVPZmZzZXQgLSBzcGFjaW5nT2Zmc2V0O1xuICAgIGNvbnN0IHsgb3V0ZXJTdGFydCAsIG91dGVyRW5kICwgaW5uZXJTdGFydCAsIGlubmVyRW5kICB9ID0gcGFyc2VCb3JkZXJSYWRpdXMkMShlbGVtZW50LCBpbm5lclJhZGl1cywgb3V0ZXJSYWRpdXMsIGVuZEFuZ2xlIC0gc3RhcnRBbmdsZSk7XG4gICAgY29uc3Qgb3V0ZXJTdGFydEFkanVzdGVkUmFkaXVzID0gb3V0ZXJSYWRpdXMgLSBvdXRlclN0YXJ0O1xuICAgIGNvbnN0IG91dGVyRW5kQWRqdXN0ZWRSYWRpdXMgPSBvdXRlclJhZGl1cyAtIG91dGVyRW5kO1xuICAgIGNvbnN0IG91dGVyU3RhcnRBZGp1c3RlZEFuZ2xlID0gc3RhcnRBbmdsZSArIG91dGVyU3RhcnQgLyBvdXRlclN0YXJ0QWRqdXN0ZWRSYWRpdXM7XG4gICAgY29uc3Qgb3V0ZXJFbmRBZGp1c3RlZEFuZ2xlID0gZW5kQW5nbGUgLSBvdXRlckVuZCAvIG91dGVyRW5kQWRqdXN0ZWRSYWRpdXM7XG4gICAgY29uc3QgaW5uZXJTdGFydEFkanVzdGVkUmFkaXVzID0gaW5uZXJSYWRpdXMgKyBpbm5lclN0YXJ0O1xuICAgIGNvbnN0IGlubmVyRW5kQWRqdXN0ZWRSYWRpdXMgPSBpbm5lclJhZGl1cyArIGlubmVyRW5kO1xuICAgIGNvbnN0IGlubmVyU3RhcnRBZGp1c3RlZEFuZ2xlID0gc3RhcnRBbmdsZSArIGlubmVyU3RhcnQgLyBpbm5lclN0YXJ0QWRqdXN0ZWRSYWRpdXM7XG4gICAgY29uc3QgaW5uZXJFbmRBZGp1c3RlZEFuZ2xlID0gZW5kQW5nbGUgLSBpbm5lckVuZCAvIGlubmVyRW5kQWRqdXN0ZWRSYWRpdXM7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGlmIChjaXJjdWxhcikge1xuICAgICAgICAvLyBUaGUgZmlyc3QgYXJjIHNlZ21lbnRzIGZyb20gcG9pbnQgMSB0byBwb2ludCBhIHRvIHBvaW50IDJcbiAgICAgICAgY29uc3Qgb3V0ZXJNaWRBZGp1c3RlZEFuZ2xlID0gKG91dGVyU3RhcnRBZGp1c3RlZEFuZ2xlICsgb3V0ZXJFbmRBZGp1c3RlZEFuZ2xlKSAvIDI7XG4gICAgICAgIGN0eC5hcmMoeCwgeSwgb3V0ZXJSYWRpdXMsIG91dGVyU3RhcnRBZGp1c3RlZEFuZ2xlLCBvdXRlck1pZEFkanVzdGVkQW5nbGUpO1xuICAgICAgICBjdHguYXJjKHgsIHksIG91dGVyUmFkaXVzLCBvdXRlck1pZEFkanVzdGVkQW5nbGUsIG91dGVyRW5kQWRqdXN0ZWRBbmdsZSk7XG4gICAgICAgIC8vIFRoZSBjb3JuZXIgc2VnbWVudCBmcm9tIHBvaW50IDIgdG8gcG9pbnQgM1xuICAgICAgICBpZiAob3V0ZXJFbmQgPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBwQ2VudGVyID0gclRoZXRhVG9YWShvdXRlckVuZEFkanVzdGVkUmFkaXVzLCBvdXRlckVuZEFkanVzdGVkQW5nbGUsIHgsIHkpO1xuICAgICAgICAgICAgY3R4LmFyYyhwQ2VudGVyLngsIHBDZW50ZXIueSwgb3V0ZXJFbmQsIG91dGVyRW5kQWRqdXN0ZWRBbmdsZSwgZW5kQW5nbGUgKyBIQUxGX1BJKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgbGluZSBmcm9tIHBvaW50IDMgdG8gcG9pbnQgNFxuICAgICAgICBjb25zdCBwNCA9IHJUaGV0YVRvWFkoaW5uZXJFbmRBZGp1c3RlZFJhZGl1cywgZW5kQW5nbGUsIHgsIHkpO1xuICAgICAgICBjdHgubGluZVRvKHA0LngsIHA0LnkpO1xuICAgICAgICAvLyBUaGUgY29ybmVyIHNlZ21lbnQgZnJvbSBwb2ludCA0IHRvIHBvaW50IDVcbiAgICAgICAgaWYgKGlubmVyRW5kID4gMCkge1xuICAgICAgICAgICAgY29uc3QgcENlbnRlciA9IHJUaGV0YVRvWFkoaW5uZXJFbmRBZGp1c3RlZFJhZGl1cywgaW5uZXJFbmRBZGp1c3RlZEFuZ2xlLCB4LCB5KTtcbiAgICAgICAgICAgIGN0eC5hcmMocENlbnRlci54LCBwQ2VudGVyLnksIGlubmVyRW5kLCBlbmRBbmdsZSArIEhBTEZfUEksIGlubmVyRW5kQWRqdXN0ZWRBbmdsZSArIE1hdGguUEkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRoZSBpbm5lciBhcmMgZnJvbSBwb2ludCA1IHRvIHBvaW50IGIgdG8gcG9pbnQgNlxuICAgICAgICBjb25zdCBpbm5lck1pZEFkanVzdGVkQW5nbGUgPSAoZW5kQW5nbGUgLSBpbm5lckVuZCAvIGlubmVyUmFkaXVzICsgKHN0YXJ0QW5nbGUgKyBpbm5lclN0YXJ0IC8gaW5uZXJSYWRpdXMpKSAvIDI7XG4gICAgICAgIGN0eC5hcmMoeCwgeSwgaW5uZXJSYWRpdXMsIGVuZEFuZ2xlIC0gaW5uZXJFbmQgLyBpbm5lclJhZGl1cywgaW5uZXJNaWRBZGp1c3RlZEFuZ2xlLCB0cnVlKTtcbiAgICAgICAgY3R4LmFyYyh4LCB5LCBpbm5lclJhZGl1cywgaW5uZXJNaWRBZGp1c3RlZEFuZ2xlLCBzdGFydEFuZ2xlICsgaW5uZXJTdGFydCAvIGlubmVyUmFkaXVzLCB0cnVlKTtcbiAgICAgICAgLy8gVGhlIGNvcm5lciBzZWdtZW50IGZyb20gcG9pbnQgNiB0byBwb2ludCA3XG4gICAgICAgIGlmIChpbm5lclN0YXJ0ID4gMCkge1xuICAgICAgICAgICAgY29uc3QgcENlbnRlciA9IHJUaGV0YVRvWFkoaW5uZXJTdGFydEFkanVzdGVkUmFkaXVzLCBpbm5lclN0YXJ0QWRqdXN0ZWRBbmdsZSwgeCwgeSk7XG4gICAgICAgICAgICBjdHguYXJjKHBDZW50ZXIueCwgcENlbnRlci55LCBpbm5lclN0YXJ0LCBpbm5lclN0YXJ0QWRqdXN0ZWRBbmdsZSArIE1hdGguUEksIHN0YXJ0QW5nbGUgLSBIQUxGX1BJKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgbGluZSBmcm9tIHBvaW50IDcgdG8gcG9pbnQgOFxuICAgICAgICBjb25zdCBwOCA9IHJUaGV0YVRvWFkob3V0ZXJTdGFydEFkanVzdGVkUmFkaXVzLCBzdGFydEFuZ2xlLCB4LCB5KTtcbiAgICAgICAgY3R4LmxpbmVUbyhwOC54LCBwOC55KTtcbiAgICAgICAgLy8gVGhlIGNvcm5lciBzZWdtZW50IGZyb20gcG9pbnQgOCB0byBwb2ludCAxXG4gICAgICAgIGlmIChvdXRlclN0YXJ0ID4gMCkge1xuICAgICAgICAgICAgY29uc3QgcENlbnRlciA9IHJUaGV0YVRvWFkob3V0ZXJTdGFydEFkanVzdGVkUmFkaXVzLCBvdXRlclN0YXJ0QWRqdXN0ZWRBbmdsZSwgeCwgeSk7XG4gICAgICAgICAgICBjdHguYXJjKHBDZW50ZXIueCwgcENlbnRlci55LCBvdXRlclN0YXJ0LCBzdGFydEFuZ2xlIC0gSEFMRl9QSSwgb3V0ZXJTdGFydEFkanVzdGVkQW5nbGUpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY3R4Lm1vdmVUbyh4LCB5KTtcbiAgICAgICAgY29uc3Qgb3V0ZXJTdGFydFggPSBNYXRoLmNvcyhvdXRlclN0YXJ0QWRqdXN0ZWRBbmdsZSkgKiBvdXRlclJhZGl1cyArIHg7XG4gICAgICAgIGNvbnN0IG91dGVyU3RhcnRZID0gTWF0aC5zaW4ob3V0ZXJTdGFydEFkanVzdGVkQW5nbGUpICogb3V0ZXJSYWRpdXMgKyB5O1xuICAgICAgICBjdHgubGluZVRvKG91dGVyU3RhcnRYLCBvdXRlclN0YXJ0WSk7XG4gICAgICAgIGNvbnN0IG91dGVyRW5kWCA9IE1hdGguY29zKG91dGVyRW5kQWRqdXN0ZWRBbmdsZSkgKiBvdXRlclJhZGl1cyArIHg7XG4gICAgICAgIGNvbnN0IG91dGVyRW5kWSA9IE1hdGguc2luKG91dGVyRW5kQWRqdXN0ZWRBbmdsZSkgKiBvdXRlclJhZGl1cyArIHk7XG4gICAgICAgIGN0eC5saW5lVG8ob3V0ZXJFbmRYLCBvdXRlckVuZFkpO1xuICAgIH1cbiAgICBjdHguY2xvc2VQYXRoKCk7XG59XG5mdW5jdGlvbiBkcmF3QXJjKGN0eCwgZWxlbWVudCwgb2Zmc2V0LCBzcGFjaW5nLCBjaXJjdWxhcikge1xuICAgIGNvbnN0IHsgZnVsbENpcmNsZXMgLCBzdGFydEFuZ2xlICwgY2lyY3VtZmVyZW5jZSAgfSA9IGVsZW1lbnQ7XG4gICAgbGV0IGVuZEFuZ2xlID0gZWxlbWVudC5lbmRBbmdsZTtcbiAgICBpZiAoZnVsbENpcmNsZXMpIHtcbiAgICAgICAgcGF0aEFyYyhjdHgsIGVsZW1lbnQsIG9mZnNldCwgc3BhY2luZywgZW5kQW5nbGUsIGNpcmN1bGFyKTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGZ1bGxDaXJjbGVzOyArK2kpe1xuICAgICAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzTmFOKGNpcmN1bWZlcmVuY2UpKSB7XG4gICAgICAgICAgICBlbmRBbmdsZSA9IHN0YXJ0QW5nbGUgKyAoY2lyY3VtZmVyZW5jZSAlIFRBVSB8fCBUQVUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHBhdGhBcmMoY3R4LCBlbGVtZW50LCBvZmZzZXQsIHNwYWNpbmcsIGVuZEFuZ2xlLCBjaXJjdWxhcik7XG4gICAgY3R4LmZpbGwoKTtcbiAgICByZXR1cm4gZW5kQW5nbGU7XG59XG5mdW5jdGlvbiBkcmF3Qm9yZGVyKGN0eCwgZWxlbWVudCwgb2Zmc2V0LCBzcGFjaW5nLCBjaXJjdWxhcikge1xuICAgIGNvbnN0IHsgZnVsbENpcmNsZXMgLCBzdGFydEFuZ2xlICwgY2lyY3VtZmVyZW5jZSAsIG9wdGlvbnMgIH0gPSBlbGVtZW50O1xuICAgIGNvbnN0IHsgYm9yZGVyV2lkdGggLCBib3JkZXJKb2luU3R5bGUgLCBib3JkZXJEYXNoICwgYm9yZGVyRGFzaE9mZnNldCAgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgaW5uZXIgPSBvcHRpb25zLmJvcmRlckFsaWduID09PSAnaW5uZXInO1xuICAgIGlmICghYm9yZGVyV2lkdGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjdHguc2V0TGluZURhc2goYm9yZGVyRGFzaCB8fCBbXSk7XG4gICAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gYm9yZGVyRGFzaE9mZnNldDtcbiAgICBpZiAoaW5uZXIpIHtcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IGJvcmRlcldpZHRoICogMjtcbiAgICAgICAgY3R4LmxpbmVKb2luID0gYm9yZGVySm9pblN0eWxlIHx8ICdyb3VuZCc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IGJvcmRlcldpZHRoO1xuICAgICAgICBjdHgubGluZUpvaW4gPSBib3JkZXJKb2luU3R5bGUgfHwgJ2JldmVsJztcbiAgICB9XG4gICAgbGV0IGVuZEFuZ2xlID0gZWxlbWVudC5lbmRBbmdsZTtcbiAgICBpZiAoZnVsbENpcmNsZXMpIHtcbiAgICAgICAgcGF0aEFyYyhjdHgsIGVsZW1lbnQsIG9mZnNldCwgc3BhY2luZywgZW5kQW5nbGUsIGNpcmN1bGFyKTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGZ1bGxDaXJjbGVzOyArK2kpe1xuICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNOYU4oY2lyY3VtZmVyZW5jZSkpIHtcbiAgICAgICAgICAgIGVuZEFuZ2xlID0gc3RhcnRBbmdsZSArIChjaXJjdW1mZXJlbmNlICUgVEFVIHx8IFRBVSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlubmVyKSB7XG4gICAgICAgIGNsaXBBcmMoY3R4LCBlbGVtZW50LCBlbmRBbmdsZSk7XG4gICAgfVxuICAgIGlmICghZnVsbENpcmNsZXMpIHtcbiAgICAgICAgcGF0aEFyYyhjdHgsIGVsZW1lbnQsIG9mZnNldCwgc3BhY2luZywgZW5kQW5nbGUsIGNpcmN1bGFyKTtcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgIH1cbn1cbmNsYXNzIEFyY0VsZW1lbnQgZXh0ZW5kcyBFbGVtZW50IHtcbiAgICBzdGF0aWMgaWQgPSAnYXJjJztcbiAgICBzdGF0aWMgZGVmYXVsdHMgPSB7XG4gICAgICAgIGJvcmRlckFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgYm9yZGVyQ29sb3I6ICcjZmZmJyxcbiAgICAgICAgYm9yZGVyRGFzaDogW10sXG4gICAgICAgIGJvcmRlckRhc2hPZmZzZXQ6IDAsXG4gICAgICAgIGJvcmRlckpvaW5TdHlsZTogdW5kZWZpbmVkLFxuICAgICAgICBib3JkZXJSYWRpdXM6IDAsXG4gICAgICAgIGJvcmRlcldpZHRoOiAyLFxuICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgIHNwYWNpbmc6IDAsXG4gICAgICAgIGFuZ2xlOiB1bmRlZmluZWQsXG4gICAgICAgIGNpcmN1bGFyOiB0cnVlXG4gICAgfTtcbiAgICBzdGF0aWMgZGVmYXVsdFJvdXRlcyA9IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnYmFja2dyb3VuZENvbG9yJ1xuICAgIH07XG4gICAgc3RhdGljIGRlc2NyaXB0b3JzID0ge1xuICAgICAgICBfc2NyaXB0YWJsZTogdHJ1ZSxcbiAgICAgICAgX2luZGV4YWJsZTogKG5hbWUpPT5uYW1lICE9PSAnYm9yZGVyRGFzaCdcbiAgICB9O1xuICAgIGNpcmN1bWZlcmVuY2U7XG4gICAgZW5kQW5nbGU7XG4gICAgZnVsbENpcmNsZXM7XG4gICAgaW5uZXJSYWRpdXM7XG4gICAgb3V0ZXJSYWRpdXM7XG4gICAgcGl4ZWxNYXJnaW47XG4gICAgc3RhcnRBbmdsZTtcbiAgICBjb25zdHJ1Y3RvcihjZmcpe1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuY2lyY3VtZmVyZW5jZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5zdGFydEFuZ2xlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmVuZEFuZ2xlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmlubmVyUmFkaXVzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm91dGVyUmFkaXVzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnBpeGVsTWFyZ2luID0gMDtcbiAgICAgICAgdGhpcy5mdWxsQ2lyY2xlcyA9IDA7XG4gICAgICAgIGlmIChjZmcpIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgY2ZnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpblJhbmdlKGNoYXJ0WCwgY2hhcnRZLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgIGNvbnN0IHBvaW50ID0gdGhpcy5nZXRQcm9wcyhbXG4gICAgICAgICAgICAneCcsXG4gICAgICAgICAgICAneSdcbiAgICAgICAgXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgICAgIGNvbnN0IHsgYW5nbGUgLCBkaXN0YW5jZSAgfSA9IGdldEFuZ2xlRnJvbVBvaW50KHBvaW50LCB7XG4gICAgICAgICAgICB4OiBjaGFydFgsXG4gICAgICAgICAgICB5OiBjaGFydFlcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHsgc3RhcnRBbmdsZSAsIGVuZEFuZ2xlICwgaW5uZXJSYWRpdXMgLCBvdXRlclJhZGl1cyAsIGNpcmN1bWZlcmVuY2UgIH0gPSB0aGlzLmdldFByb3BzKFtcbiAgICAgICAgICAgICdzdGFydEFuZ2xlJyxcbiAgICAgICAgICAgICdlbmRBbmdsZScsXG4gICAgICAgICAgICAnaW5uZXJSYWRpdXMnLFxuICAgICAgICAgICAgJ291dGVyUmFkaXVzJyxcbiAgICAgICAgICAgICdjaXJjdW1mZXJlbmNlJ1xuICAgICAgICBdLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgICAgY29uc3QgckFkanVzdCA9ICh0aGlzLm9wdGlvbnMuc3BhY2luZyArIHRoaXMub3B0aW9ucy5ib3JkZXJXaWR0aCkgLyAyO1xuICAgICAgICBjb25zdCBfY2lyY3VtZmVyZW5jZSA9IHZhbHVlT3JEZWZhdWx0KGNpcmN1bWZlcmVuY2UsIGVuZEFuZ2xlIC0gc3RhcnRBbmdsZSk7XG4gICAgICAgIGNvbnN0IGJldHdlZW5BbmdsZXMgPSBfY2lyY3VtZmVyZW5jZSA+PSBUQVUgfHwgX2FuZ2xlQmV0d2VlbihhbmdsZSwgc3RhcnRBbmdsZSwgZW5kQW5nbGUpO1xuICAgICAgICBjb25zdCB3aXRoaW5SYWRpdXMgPSBfaXNCZXR3ZWVuKGRpc3RhbmNlLCBpbm5lclJhZGl1cyArIHJBZGp1c3QsIG91dGVyUmFkaXVzICsgckFkanVzdCk7XG4gICAgICAgIHJldHVybiBiZXR3ZWVuQW5nbGVzICYmIHdpdGhpblJhZGl1cztcbiAgICB9XG4gICAgZ2V0Q2VudGVyUG9pbnQodXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICBjb25zdCB7IHggLCB5ICwgc3RhcnRBbmdsZSAsIGVuZEFuZ2xlICwgaW5uZXJSYWRpdXMgLCBvdXRlclJhZGl1cyAgfSA9IHRoaXMuZ2V0UHJvcHMoW1xuICAgICAgICAgICAgJ3gnLFxuICAgICAgICAgICAgJ3knLFxuICAgICAgICAgICAgJ3N0YXJ0QW5nbGUnLFxuICAgICAgICAgICAgJ2VuZEFuZ2xlJyxcbiAgICAgICAgICAgICdpbm5lclJhZGl1cycsXG4gICAgICAgICAgICAnb3V0ZXJSYWRpdXMnXG4gICAgICAgIF0sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgICBjb25zdCB7IG9mZnNldCAsIHNwYWNpbmcgIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGhhbGZBbmdsZSA9IChzdGFydEFuZ2xlICsgZW5kQW5nbGUpIC8gMjtcbiAgICAgICAgY29uc3QgaGFsZlJhZGl1cyA9IChpbm5lclJhZGl1cyArIG91dGVyUmFkaXVzICsgc3BhY2luZyArIG9mZnNldCkgLyAyO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogeCArIE1hdGguY29zKGhhbGZBbmdsZSkgKiBoYWxmUmFkaXVzLFxuICAgICAgICAgICAgeTogeSArIE1hdGguc2luKGhhbGZBbmdsZSkgKiBoYWxmUmFkaXVzXG4gICAgICAgIH07XG4gICAgfVxuICAgIHRvb2x0aXBQb3NpdGlvbih1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldENlbnRlclBvaW50KHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIH1cbiAgICBkcmF3KGN0eCkge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnMgLCBjaXJjdW1mZXJlbmNlICB9ID0gdGhpcztcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gKG9wdGlvbnMub2Zmc2V0IHx8IDApIC8gNDtcbiAgICAgICAgY29uc3Qgc3BhY2luZyA9IChvcHRpb25zLnNwYWNpbmcgfHwgMCkgLyAyO1xuICAgICAgICBjb25zdCBjaXJjdWxhciA9IG9wdGlvbnMuY2lyY3VsYXI7XG4gICAgICAgIHRoaXMucGl4ZWxNYXJnaW4gPSBvcHRpb25zLmJvcmRlckFsaWduID09PSAnaW5uZXInID8gMC4zMyA6IDA7XG4gICAgICAgIHRoaXMuZnVsbENpcmNsZXMgPSBjaXJjdW1mZXJlbmNlID4gVEFVID8gTWF0aC5mbG9vcihjaXJjdW1mZXJlbmNlIC8gVEFVKSA6IDA7XG4gICAgICAgIGlmIChjaXJjdW1mZXJlbmNlID09PSAwIHx8IHRoaXMuaW5uZXJSYWRpdXMgPCAwIHx8IHRoaXMub3V0ZXJSYWRpdXMgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgY29uc3QgaGFsZkFuZ2xlID0gKHRoaXMuc3RhcnRBbmdsZSArIHRoaXMuZW5kQW5nbGUpIC8gMjtcbiAgICAgICAgY3R4LnRyYW5zbGF0ZShNYXRoLmNvcyhoYWxmQW5nbGUpICogb2Zmc2V0LCBNYXRoLnNpbihoYWxmQW5nbGUpICogb2Zmc2V0KTtcbiAgICAgICAgY29uc3QgZml4ID0gMSAtIE1hdGguc2luKE1hdGgubWluKFBJLCBjaXJjdW1mZXJlbmNlIHx8IDApKTtcbiAgICAgICAgY29uc3QgcmFkaXVzT2Zmc2V0ID0gb2Zmc2V0ICogZml4O1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IG9wdGlvbnMuYm9yZGVyQ29sb3I7XG4gICAgICAgIGRyYXdBcmMoY3R4LCB0aGlzLCByYWRpdXNPZmZzZXQsIHNwYWNpbmcsIGNpcmN1bGFyKTtcbiAgICAgICAgZHJhd0JvcmRlcihjdHgsIHRoaXMsIHJhZGl1c09mZnNldCwgc3BhY2luZywgY2lyY3VsYXIpO1xuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc2V0U3R5bGUoY3R4LCBvcHRpb25zLCBzdHlsZSA9IG9wdGlvbnMpIHtcbiAgICBjdHgubGluZUNhcCA9IHZhbHVlT3JEZWZhdWx0KHN0eWxlLmJvcmRlckNhcFN0eWxlLCBvcHRpb25zLmJvcmRlckNhcFN0eWxlKTtcbiAgICBjdHguc2V0TGluZURhc2godmFsdWVPckRlZmF1bHQoc3R5bGUuYm9yZGVyRGFzaCwgb3B0aW9ucy5ib3JkZXJEYXNoKSk7XG4gICAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gdmFsdWVPckRlZmF1bHQoc3R5bGUuYm9yZGVyRGFzaE9mZnNldCwgb3B0aW9ucy5ib3JkZXJEYXNoT2Zmc2V0KTtcbiAgICBjdHgubGluZUpvaW4gPSB2YWx1ZU9yRGVmYXVsdChzdHlsZS5ib3JkZXJKb2luU3R5bGUsIG9wdGlvbnMuYm9yZGVySm9pblN0eWxlKTtcbiAgICBjdHgubGluZVdpZHRoID0gdmFsdWVPckRlZmF1bHQoc3R5bGUuYm9yZGVyV2lkdGgsIG9wdGlvbnMuYm9yZGVyV2lkdGgpO1xuICAgIGN0eC5zdHJva2VTdHlsZSA9IHZhbHVlT3JEZWZhdWx0KHN0eWxlLmJvcmRlckNvbG9yLCBvcHRpb25zLmJvcmRlckNvbG9yKTtcbn1cbmZ1bmN0aW9uIGxpbmVUbyhjdHgsIHByZXZpb3VzLCB0YXJnZXQpIHtcbiAgICBjdHgubGluZVRvKHRhcmdldC54LCB0YXJnZXQueSk7XG59XG4gZnVuY3Rpb24gZ2V0TGluZU1ldGhvZChvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuc3RlcHBlZCkge1xuICAgICAgICByZXR1cm4gX3N0ZXBwZWRMaW5lVG87XG4gICAgfVxuICAgIGlmIChvcHRpb25zLnRlbnNpb24gfHwgb3B0aW9ucy5jdWJpY0ludGVycG9sYXRpb25Nb2RlID09PSAnbW9ub3RvbmUnKSB7XG4gICAgICAgIHJldHVybiBfYmV6aWVyQ3VydmVUbztcbiAgICB9XG4gICAgcmV0dXJuIGxpbmVUbztcbn1cbmZ1bmN0aW9uIHBhdGhWYXJzKHBvaW50cywgc2VnbWVudCwgcGFyYW1zID0ge30pIHtcbiAgICBjb25zdCBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gICAgY29uc3QgeyBzdGFydDogcGFyYW1zU3RhcnQgPSAwICwgZW5kOiBwYXJhbXNFbmQgPSBjb3VudCAtIDEgIH0gPSBwYXJhbXM7XG4gICAgY29uc3QgeyBzdGFydDogc2VnbWVudFN0YXJ0ICwgZW5kOiBzZWdtZW50RW5kICB9ID0gc2VnbWVudDtcbiAgICBjb25zdCBzdGFydCA9IE1hdGgubWF4KHBhcmFtc1N0YXJ0LCBzZWdtZW50U3RhcnQpO1xuICAgIGNvbnN0IGVuZCA9IE1hdGgubWluKHBhcmFtc0VuZCwgc2VnbWVudEVuZCk7XG4gICAgY29uc3Qgb3V0c2lkZSA9IHBhcmFtc1N0YXJ0IDwgc2VnbWVudFN0YXJ0ICYmIHBhcmFtc0VuZCA8IHNlZ21lbnRTdGFydCB8fCBwYXJhbXNTdGFydCA+IHNlZ21lbnRFbmQgJiYgcGFyYW1zRW5kID4gc2VnbWVudEVuZDtcbiAgICByZXR1cm4ge1xuICAgICAgICBjb3VudCxcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIGxvb3A6IHNlZ21lbnQubG9vcCxcbiAgICAgICAgaWxlbjogZW5kIDwgc3RhcnQgJiYgIW91dHNpZGUgPyBjb3VudCArIGVuZCAtIHN0YXJ0IDogZW5kIC0gc3RhcnRcbiAgICB9O1xufVxuIGZ1bmN0aW9uIHBhdGhTZWdtZW50KGN0eCwgbGluZSwgc2VnbWVudCwgcGFyYW1zKSB7XG4gICAgY29uc3QgeyBwb2ludHMgLCBvcHRpb25zICB9ID0gbGluZTtcbiAgICBjb25zdCB7IGNvdW50ICwgc3RhcnQgLCBsb29wICwgaWxlbiAgfSA9IHBhdGhWYXJzKHBvaW50cywgc2VnbWVudCwgcGFyYW1zKTtcbiAgICBjb25zdCBsaW5lTWV0aG9kID0gZ2V0TGluZU1ldGhvZChvcHRpb25zKTtcbiAgICBsZXQgeyBtb3ZlID10cnVlICwgcmV2ZXJzZSAgfSA9IHBhcmFtcyB8fCB7fTtcbiAgICBsZXQgaSwgcG9pbnQsIHByZXY7XG4gICAgZm9yKGkgPSAwOyBpIDw9IGlsZW47ICsraSl7XG4gICAgICAgIHBvaW50ID0gcG9pbnRzWyhzdGFydCArIChyZXZlcnNlID8gaWxlbiAtIGkgOiBpKSkgJSBjb3VudF07XG4gICAgICAgIGlmIChwb2ludC5za2lwKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIGlmIChtb3ZlKSB7XG4gICAgICAgICAgICBjdHgubW92ZVRvKHBvaW50LngsIHBvaW50LnkpO1xuICAgICAgICAgICAgbW92ZSA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGluZU1ldGhvZChjdHgsIHByZXYsIHBvaW50LCByZXZlcnNlLCBvcHRpb25zLnN0ZXBwZWQpO1xuICAgICAgICB9XG4gICAgICAgIHByZXYgPSBwb2ludDtcbiAgICB9XG4gICAgaWYgKGxvb3ApIHtcbiAgICAgICAgcG9pbnQgPSBwb2ludHNbKHN0YXJ0ICsgKHJldmVyc2UgPyBpbGVuIDogMCkpICUgY291bnRdO1xuICAgICAgICBsaW5lTWV0aG9kKGN0eCwgcHJldiwgcG9pbnQsIHJldmVyc2UsIG9wdGlvbnMuc3RlcHBlZCk7XG4gICAgfVxuICAgIHJldHVybiAhIWxvb3A7XG59XG4gZnVuY3Rpb24gZmFzdFBhdGhTZWdtZW50KGN0eCwgbGluZSwgc2VnbWVudCwgcGFyYW1zKSB7XG4gICAgY29uc3QgcG9pbnRzID0gbGluZS5wb2ludHM7XG4gICAgY29uc3QgeyBjb3VudCAsIHN0YXJ0ICwgaWxlbiAgfSA9IHBhdGhWYXJzKHBvaW50cywgc2VnbWVudCwgcGFyYW1zKTtcbiAgICBjb25zdCB7IG1vdmUgPXRydWUgLCByZXZlcnNlICB9ID0gcGFyYW1zIHx8IHt9O1xuICAgIGxldCBhdmdYID0gMDtcbiAgICBsZXQgY291bnRYID0gMDtcbiAgICBsZXQgaSwgcG9pbnQsIHByZXZYLCBtaW5ZLCBtYXhZLCBsYXN0WTtcbiAgICBjb25zdCBwb2ludEluZGV4ID0gKGluZGV4KT0+KHN0YXJ0ICsgKHJldmVyc2UgPyBpbGVuIC0gaW5kZXggOiBpbmRleCkpICUgY291bnQ7XG4gICAgY29uc3QgZHJhd1ggPSAoKT0+e1xuICAgICAgICBpZiAobWluWSAhPT0gbWF4WSkge1xuICAgICAgICAgICAgY3R4LmxpbmVUbyhhdmdYLCBtYXhZKTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oYXZnWCwgbWluWSk7XG4gICAgICAgICAgICBjdHgubGluZVRvKGF2Z1gsIGxhc3RZKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgaWYgKG1vdmUpIHtcbiAgICAgICAgcG9pbnQgPSBwb2ludHNbcG9pbnRJbmRleCgwKV07XG4gICAgICAgIGN0eC5tb3ZlVG8ocG9pbnQueCwgcG9pbnQueSk7XG4gICAgfVxuICAgIGZvcihpID0gMDsgaSA8PSBpbGVuOyArK2kpe1xuICAgICAgICBwb2ludCA9IHBvaW50c1twb2ludEluZGV4KGkpXTtcbiAgICAgICAgaWYgKHBvaW50LnNraXApIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHggPSBwb2ludC54O1xuICAgICAgICBjb25zdCB5ID0gcG9pbnQueTtcbiAgICAgICAgY29uc3QgdHJ1bmNYID0geCB8IDA7XG4gICAgICAgIGlmICh0cnVuY1ggPT09IHByZXZYKSB7XG4gICAgICAgICAgICBpZiAoeSA8IG1pblkpIHtcbiAgICAgICAgICAgICAgICBtaW5ZID0geTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoeSA+IG1heFkpIHtcbiAgICAgICAgICAgICAgICBtYXhZID0geTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF2Z1ggPSAoY291bnRYICogYXZnWCArIHgpIC8gKytjb3VudFg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkcmF3WCgpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh4LCB5KTtcbiAgICAgICAgICAgIHByZXZYID0gdHJ1bmNYO1xuICAgICAgICAgICAgY291bnRYID0gMDtcbiAgICAgICAgICAgIG1pblkgPSBtYXhZID0geTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0WSA9IHk7XG4gICAgfVxuICAgIGRyYXdYKCk7XG59XG4gZnVuY3Rpb24gX2dldFNlZ21lbnRNZXRob2QobGluZSkge1xuICAgIGNvbnN0IG9wdHMgPSBsaW5lLm9wdGlvbnM7XG4gICAgY29uc3QgYm9yZGVyRGFzaCA9IG9wdHMuYm9yZGVyRGFzaCAmJiBvcHRzLmJvcmRlckRhc2gubGVuZ3RoO1xuICAgIGNvbnN0IHVzZUZhc3RQYXRoID0gIWxpbmUuX2RlY2ltYXRlZCAmJiAhbGluZS5fbG9vcCAmJiAhb3B0cy50ZW5zaW9uICYmIG9wdHMuY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSAhPT0gJ21vbm90b25lJyAmJiAhb3B0cy5zdGVwcGVkICYmICFib3JkZXJEYXNoO1xuICAgIHJldHVybiB1c2VGYXN0UGF0aCA/IGZhc3RQYXRoU2VnbWVudCA6IHBhdGhTZWdtZW50O1xufVxuIGZ1bmN0aW9uIF9nZXRJbnRlcnBvbGF0aW9uTWV0aG9kKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5zdGVwcGVkKSB7XG4gICAgICAgIHJldHVybiBfc3RlcHBlZEludGVycG9sYXRpb247XG4gICAgfVxuICAgIGlmIChvcHRpb25zLnRlbnNpb24gfHwgb3B0aW9ucy5jdWJpY0ludGVycG9sYXRpb25Nb2RlID09PSAnbW9ub3RvbmUnKSB7XG4gICAgICAgIHJldHVybiBfYmV6aWVySW50ZXJwb2xhdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIF9wb2ludEluTGluZTtcbn1cbmZ1bmN0aW9uIHN0cm9rZVBhdGhXaXRoQ2FjaGUoY3R4LCBsaW5lLCBzdGFydCwgY291bnQpIHtcbiAgICBsZXQgcGF0aCA9IGxpbmUuX3BhdGg7XG4gICAgaWYgKCFwYXRoKSB7XG4gICAgICAgIHBhdGggPSBsaW5lLl9wYXRoID0gbmV3IFBhdGgyRCgpO1xuICAgICAgICBpZiAobGluZS5wYXRoKHBhdGgsIHN0YXJ0LCBjb3VudCkpIHtcbiAgICAgICAgICAgIHBhdGguY2xvc2VQYXRoKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0U3R5bGUoY3R4LCBsaW5lLm9wdGlvbnMpO1xuICAgIGN0eC5zdHJva2UocGF0aCk7XG59XG5mdW5jdGlvbiBzdHJva2VQYXRoRGlyZWN0KGN0eCwgbGluZSwgc3RhcnQsIGNvdW50KSB7XG4gICAgY29uc3QgeyBzZWdtZW50cyAsIG9wdGlvbnMgIH0gPSBsaW5lO1xuICAgIGNvbnN0IHNlZ21lbnRNZXRob2QgPSBfZ2V0U2VnbWVudE1ldGhvZChsaW5lKTtcbiAgICBmb3IgKGNvbnN0IHNlZ21lbnQgb2Ygc2VnbWVudHMpe1xuICAgICAgICBzZXRTdHlsZShjdHgsIG9wdGlvbnMsIHNlZ21lbnQuc3R5bGUpO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGlmIChzZWdtZW50TWV0aG9kKGN0eCwgbGluZSwgc2VnbWVudCwge1xuICAgICAgICAgICAgc3RhcnQsXG4gICAgICAgICAgICBlbmQ6IHN0YXJ0ICsgY291bnQgLSAxXG4gICAgICAgIH0pKSB7XG4gICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgIH1cbn1cbmNvbnN0IHVzZVBhdGgyRCA9IHR5cGVvZiBQYXRoMkQgPT09ICdmdW5jdGlvbic7XG5mdW5jdGlvbiBkcmF3KGN0eCwgbGluZSwgc3RhcnQsIGNvdW50KSB7XG4gICAgaWYgKHVzZVBhdGgyRCAmJiAhbGluZS5vcHRpb25zLnNlZ21lbnQpIHtcbiAgICAgICAgc3Ryb2tlUGF0aFdpdGhDYWNoZShjdHgsIGxpbmUsIHN0YXJ0LCBjb3VudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc3Ryb2tlUGF0aERpcmVjdChjdHgsIGxpbmUsIHN0YXJ0LCBjb3VudCk7XG4gICAgfVxufVxuY2xhc3MgTGluZUVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50IHtcbiAgICBzdGF0aWMgaWQgPSAnbGluZSc7XG4gc3RhdGljIGRlZmF1bHRzID0ge1xuICAgICAgICBib3JkZXJDYXBTdHlsZTogJ2J1dHQnLFxuICAgICAgICBib3JkZXJEYXNoOiBbXSxcbiAgICAgICAgYm9yZGVyRGFzaE9mZnNldDogMCxcbiAgICAgICAgYm9yZGVySm9pblN0eWxlOiAnbWl0ZXInLFxuICAgICAgICBib3JkZXJXaWR0aDogMyxcbiAgICAgICAgY2FwQmV6aWVyUG9pbnRzOiB0cnVlLFxuICAgICAgICBjdWJpY0ludGVycG9sYXRpb25Nb2RlOiAnZGVmYXVsdCcsXG4gICAgICAgIGZpbGw6IGZhbHNlLFxuICAgICAgICBzcGFuR2FwczogZmFsc2UsXG4gICAgICAgIHN0ZXBwZWQ6IGZhbHNlLFxuICAgICAgICB0ZW5zaW9uOiAwXG4gICAgfTtcbiBzdGF0aWMgZGVmYXVsdFJvdXRlcyA9IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnYmFja2dyb3VuZENvbG9yJyxcbiAgICAgICAgYm9yZGVyQ29sb3I6ICdib3JkZXJDb2xvcidcbiAgICB9O1xuICAgIHN0YXRpYyBkZXNjcmlwdG9ycyA9IHtcbiAgICAgICAgX3NjcmlwdGFibGU6IHRydWUsXG4gICAgICAgIF9pbmRleGFibGU6IChuYW1lKT0+bmFtZSAhPT0gJ2JvcmRlckRhc2gnICYmIG5hbWUgIT09ICdmaWxsJ1xuICAgIH07XG4gICAgY29uc3RydWN0b3IoY2ZnKXtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5hbmltYXRlZCA9IHRydWU7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fY2hhcnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2xvb3AgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2Z1bGxMb29wID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9wYXRoID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9wb2ludHMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3NlZ21lbnRzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9kZWNpbWF0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcG9pbnRzVXBkYXRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9kYXRhc2V0SW5kZXggPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChjZmcpIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgY2ZnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB1cGRhdGVDb250cm9sUG9pbnRzKGNoYXJ0QXJlYSwgaW5kZXhBeGlzKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGlmICgob3B0aW9ucy50ZW5zaW9uIHx8IG9wdGlvbnMuY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSA9PT0gJ21vbm90b25lJykgJiYgIW9wdGlvbnMuc3RlcHBlZCAmJiAhdGhpcy5fcG9pbnRzVXBkYXRlZCkge1xuICAgICAgICAgICAgY29uc3QgbG9vcCA9IG9wdGlvbnMuc3BhbkdhcHMgPyB0aGlzLl9sb29wIDogdGhpcy5fZnVsbExvb3A7XG4gICAgICAgICAgICBfdXBkYXRlQmV6aWVyQ29udHJvbFBvaW50cyh0aGlzLl9wb2ludHMsIG9wdGlvbnMsIGNoYXJ0QXJlYSwgbG9vcCwgaW5kZXhBeGlzKTtcbiAgICAgICAgICAgIHRoaXMuX3BvaW50c1VwZGF0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldCBwb2ludHMocG9pbnRzKSB7XG4gICAgICAgIHRoaXMuX3BvaW50cyA9IHBvaW50cztcbiAgICAgICAgZGVsZXRlIHRoaXMuX3NlZ21lbnRzO1xuICAgICAgICBkZWxldGUgdGhpcy5fcGF0aDtcbiAgICAgICAgdGhpcy5fcG9pbnRzVXBkYXRlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBnZXQgcG9pbnRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcG9pbnRzO1xuICAgIH1cbiAgICBnZXQgc2VnbWVudHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZWdtZW50cyB8fCAodGhpcy5fc2VnbWVudHMgPSBfY29tcHV0ZVNlZ21lbnRzKHRoaXMsIHRoaXMub3B0aW9ucy5zZWdtZW50KSk7XG4gICAgfVxuIGZpcnN0KCkge1xuICAgICAgICBjb25zdCBzZWdtZW50cyA9IHRoaXMuc2VnbWVudHM7XG4gICAgICAgIGNvbnN0IHBvaW50cyA9IHRoaXMucG9pbnRzO1xuICAgICAgICByZXR1cm4gc2VnbWVudHMubGVuZ3RoICYmIHBvaW50c1tzZWdtZW50c1swXS5zdGFydF07XG4gICAgfVxuIGxhc3QoKSB7XG4gICAgICAgIGNvbnN0IHNlZ21lbnRzID0gdGhpcy5zZWdtZW50cztcbiAgICAgICAgY29uc3QgcG9pbnRzID0gdGhpcy5wb2ludHM7XG4gICAgICAgIGNvbnN0IGNvdW50ID0gc2VnbWVudHMubGVuZ3RoO1xuICAgICAgICByZXR1cm4gY291bnQgJiYgcG9pbnRzW3NlZ21lbnRzW2NvdW50IC0gMV0uZW5kXTtcbiAgICB9XG4gaW50ZXJwb2xhdGUocG9pbnQsIHByb3BlcnR5KSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcG9pbnRbcHJvcGVydHldO1xuICAgICAgICBjb25zdCBwb2ludHMgPSB0aGlzLnBvaW50cztcbiAgICAgICAgY29uc3Qgc2VnbWVudHMgPSBfYm91bmRTZWdtZW50cyh0aGlzLCB7XG4gICAgICAgICAgICBwcm9wZXJ0eSxcbiAgICAgICAgICAgIHN0YXJ0OiB2YWx1ZSxcbiAgICAgICAgICAgIGVuZDogdmFsdWVcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghc2VnbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICAgIGNvbnN0IF9pbnRlcnBvbGF0ZSA9IF9nZXRJbnRlcnBvbGF0aW9uTWV0aG9kKG9wdGlvbnMpO1xuICAgICAgICBsZXQgaSwgaWxlbjtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gc2VnbWVudHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIGNvbnN0IHsgc3RhcnQgLCBlbmQgIH0gPSBzZWdtZW50c1tpXTtcbiAgICAgICAgICAgIGNvbnN0IHAxID0gcG9pbnRzW3N0YXJ0XTtcbiAgICAgICAgICAgIGNvbnN0IHAyID0gcG9pbnRzW2VuZF07XG4gICAgICAgICAgICBpZiAocDEgPT09IHAyKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gocDEpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdCA9IE1hdGguYWJzKCh2YWx1ZSAtIHAxW3Byb3BlcnR5XSkgLyAocDJbcHJvcGVydHldIC0gcDFbcHJvcGVydHldKSk7XG4gICAgICAgICAgICBjb25zdCBpbnRlcnBvbGF0ZWQgPSBfaW50ZXJwb2xhdGUocDEsIHAyLCB0LCBvcHRpb25zLnN0ZXBwZWQpO1xuICAgICAgICAgICAgaW50ZXJwb2xhdGVkW3Byb3BlcnR5XSA9IHBvaW50W3Byb3BlcnR5XTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGludGVycG9sYXRlZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdC5sZW5ndGggPT09IDEgPyByZXN1bHRbMF0gOiByZXN1bHQ7XG4gICAgfVxuIHBhdGhTZWdtZW50KGN0eCwgc2VnbWVudCwgcGFyYW1zKSB7XG4gICAgICAgIGNvbnN0IHNlZ21lbnRNZXRob2QgPSBfZ2V0U2VnbWVudE1ldGhvZCh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHNlZ21lbnRNZXRob2QoY3R4LCB0aGlzLCBzZWdtZW50LCBwYXJhbXMpO1xuICAgIH1cbiBwYXRoKGN0eCwgc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIGNvbnN0IHNlZ21lbnRzID0gdGhpcy5zZWdtZW50cztcbiAgICAgICAgY29uc3Qgc2VnbWVudE1ldGhvZCA9IF9nZXRTZWdtZW50TWV0aG9kKHRoaXMpO1xuICAgICAgICBsZXQgbG9vcCA9IHRoaXMuX2xvb3A7XG4gICAgICAgIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgICAgICAgY291bnQgPSBjb3VudCB8fCB0aGlzLnBvaW50cy5sZW5ndGggLSBzdGFydDtcbiAgICAgICAgZm9yIChjb25zdCBzZWdtZW50IG9mIHNlZ21lbnRzKXtcbiAgICAgICAgICAgIGxvb3AgJj0gc2VnbWVudE1ldGhvZChjdHgsIHRoaXMsIHNlZ21lbnQsIHtcbiAgICAgICAgICAgICAgICBzdGFydCxcbiAgICAgICAgICAgICAgICBlbmQ6IHN0YXJ0ICsgY291bnQgLSAxXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gISFsb29wO1xuICAgIH1cbiBkcmF3KGN0eCwgY2hhcnRBcmVhLCBzdGFydCwgY291bnQpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyB8fCB7fTtcbiAgICAgICAgY29uc3QgcG9pbnRzID0gdGhpcy5wb2ludHMgfHwgW107XG4gICAgICAgIGlmIChwb2ludHMubGVuZ3RoICYmIG9wdGlvbnMuYm9yZGVyV2lkdGgpIHtcbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICBkcmF3KGN0eCwgdGhpcywgc3RhcnQsIGNvdW50KTtcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuYW5pbWF0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3BvaW50c1VwZGF0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuX3BhdGggPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGluUmFuZ2UkMShlbCwgcG9zLCBheGlzLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IGVsLm9wdGlvbnM7XG4gICAgY29uc3QgeyBbYXhpc106IHZhbHVlICB9ID0gZWwuZ2V0UHJvcHMoW1xuICAgICAgICBheGlzXG4gICAgXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgcmV0dXJuIE1hdGguYWJzKHBvcyAtIHZhbHVlKSA8IG9wdGlvbnMucmFkaXVzICsgb3B0aW9ucy5oaXRSYWRpdXM7XG59XG5jbGFzcyBQb2ludEVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50IHtcbiAgICBzdGF0aWMgaWQgPSAncG9pbnQnO1xuICAgIHBhcnNlZDtcbiAgICBza2lwO1xuICAgIHN0b3A7XG4gICAgLyoqXG4gICAqIEB0eXBlIHthbnl9XG4gICAqLyBzdGF0aWMgZGVmYXVsdHMgPSB7XG4gICAgICAgIGJvcmRlcldpZHRoOiAxLFxuICAgICAgICBoaXRSYWRpdXM6IDEsXG4gICAgICAgIGhvdmVyQm9yZGVyV2lkdGg6IDEsXG4gICAgICAgIGhvdmVyUmFkaXVzOiA0LFxuICAgICAgICBwb2ludFN0eWxlOiAnY2lyY2xlJyxcbiAgICAgICAgcmFkaXVzOiAzLFxuICAgICAgICByb3RhdGlvbjogMFxuICAgIH07XG4gICAgLyoqXG4gICAqIEB0eXBlIHthbnl9XG4gICAqLyBzdGF0aWMgZGVmYXVsdFJvdXRlcyA9IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnYmFja2dyb3VuZENvbG9yJyxcbiAgICAgICAgYm9yZGVyQ29sb3I6ICdib3JkZXJDb2xvcidcbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKGNmZyl7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5wYXJzZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuc2tpcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5zdG9wID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoY2ZnKSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIGNmZyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaW5SYW5nZShtb3VzZVgsIG1vdXNlWSwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCB7IHggLCB5ICB9ID0gdGhpcy5nZXRQcm9wcyhbXG4gICAgICAgICAgICAneCcsXG4gICAgICAgICAgICAneSdcbiAgICAgICAgXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgICAgIHJldHVybiBNYXRoLnBvdyhtb3VzZVggLSB4LCAyKSArIE1hdGgucG93KG1vdXNlWSAtIHksIDIpIDwgTWF0aC5wb3cob3B0aW9ucy5oaXRSYWRpdXMgKyBvcHRpb25zLnJhZGl1cywgMik7XG4gICAgfVxuICAgIGluWFJhbmdlKG1vdXNlWCwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gaW5SYW5nZSQxKHRoaXMsIG1vdXNlWCwgJ3gnLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICB9XG4gICAgaW5ZUmFuZ2UobW91c2VZLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiBpblJhbmdlJDEodGhpcywgbW91c2VZLCAneScsIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIH1cbiAgICBnZXRDZW50ZXJQb2ludCh1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgIGNvbnN0IHsgeCAsIHkgIH0gPSB0aGlzLmdldFByb3BzKFtcbiAgICAgICAgICAgICd4JyxcbiAgICAgICAgICAgICd5J1xuICAgICAgICBdLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHgsXG4gICAgICAgICAgICB5XG4gICAgICAgIH07XG4gICAgfVxuICAgIHNpemUob3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB0aGlzLm9wdGlvbnMgfHwge307XG4gICAgICAgIGxldCByYWRpdXMgPSBvcHRpb25zLnJhZGl1cyB8fCAwO1xuICAgICAgICByYWRpdXMgPSBNYXRoLm1heChyYWRpdXMsIHJhZGl1cyAmJiBvcHRpb25zLmhvdmVyUmFkaXVzIHx8IDApO1xuICAgICAgICBjb25zdCBib3JkZXJXaWR0aCA9IHJhZGl1cyAmJiBvcHRpb25zLmJvcmRlcldpZHRoIHx8IDA7XG4gICAgICAgIHJldHVybiAocmFkaXVzICsgYm9yZGVyV2lkdGgpICogMjtcbiAgICB9XG4gICAgZHJhdyhjdHgsIGFyZWEpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgaWYgKHRoaXMuc2tpcCB8fCBvcHRpb25zLnJhZGl1cyA8IDAuMSB8fCAhX2lzUG9pbnRJbkFyZWEodGhpcywgYXJlYSwgdGhpcy5zaXplKG9wdGlvbnMpIC8gMikpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBvcHRpb25zLmJvcmRlckNvbG9yO1xuICAgICAgICBjdHgubGluZVdpZHRoID0gb3B0aW9ucy5ib3JkZXJXaWR0aDtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yO1xuICAgICAgICBkcmF3UG9pbnQoY3R4LCBvcHRpb25zLCB0aGlzLngsIHRoaXMueSk7XG4gICAgfVxuICAgIGdldFJhbmdlKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zIHx8IHt9O1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIEZhbGxiYWNrcyBzaG91bGQgbmV2ZXIgYmUgaGl0IGluIHByYWN0aWNlXG4gICAgICAgIHJldHVybiBvcHRpb25zLnJhZGl1cyArIG9wdGlvbnMuaGl0UmFkaXVzO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0QmFyQm91bmRzKGJhciwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIGNvbnN0IHsgeCAsIHkgLCBiYXNlICwgd2lkdGggLCBoZWlnaHQgIH0gPSAgYmFyLmdldFByb3BzKFtcbiAgICAgICAgJ3gnLFxuICAgICAgICAneScsXG4gICAgICAgICdiYXNlJyxcbiAgICAgICAgJ3dpZHRoJyxcbiAgICAgICAgJ2hlaWdodCdcbiAgICBdLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICBsZXQgbGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tLCBoYWxmO1xuICAgIGlmIChiYXIuaG9yaXpvbnRhbCkge1xuICAgICAgICBoYWxmID0gaGVpZ2h0IC8gMjtcbiAgICAgICAgbGVmdCA9IE1hdGgubWluKHgsIGJhc2UpO1xuICAgICAgICByaWdodCA9IE1hdGgubWF4KHgsIGJhc2UpO1xuICAgICAgICB0b3AgPSB5IC0gaGFsZjtcbiAgICAgICAgYm90dG9tID0geSArIGhhbGY7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaGFsZiA9IHdpZHRoIC8gMjtcbiAgICAgICAgbGVmdCA9IHggLSBoYWxmO1xuICAgICAgICByaWdodCA9IHggKyBoYWxmO1xuICAgICAgICB0b3AgPSBNYXRoLm1pbih5LCBiYXNlKTtcbiAgICAgICAgYm90dG9tID0gTWF0aC5tYXgoeSwgYmFzZSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQsXG4gICAgICAgIHRvcCxcbiAgICAgICAgcmlnaHQsXG4gICAgICAgIGJvdHRvbVxuICAgIH07XG59XG5mdW5jdGlvbiBza2lwT3JMaW1pdChza2lwLCB2YWx1ZSwgbWluLCBtYXgpIHtcbiAgICByZXR1cm4gc2tpcCA/IDAgOiBfbGltaXRWYWx1ZSh2YWx1ZSwgbWluLCBtYXgpO1xufVxuZnVuY3Rpb24gcGFyc2VCb3JkZXJXaWR0aChiYXIsIG1heFcsIG1heEgpIHtcbiAgICBjb25zdCB2YWx1ZSA9IGJhci5vcHRpb25zLmJvcmRlcldpZHRoO1xuICAgIGNvbnN0IHNraXAgPSBiYXIuYm9yZGVyU2tpcHBlZDtcbiAgICBjb25zdCBvID0gdG9UUkJMKHZhbHVlKTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0OiBza2lwT3JMaW1pdChza2lwLnRvcCwgby50b3AsIDAsIG1heEgpLFxuICAgICAgICByOiBza2lwT3JMaW1pdChza2lwLnJpZ2h0LCBvLnJpZ2h0LCAwLCBtYXhXKSxcbiAgICAgICAgYjogc2tpcE9yTGltaXQoc2tpcC5ib3R0b20sIG8uYm90dG9tLCAwLCBtYXhIKSxcbiAgICAgICAgbDogc2tpcE9yTGltaXQoc2tpcC5sZWZ0LCBvLmxlZnQsIDAsIG1heFcpXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHBhcnNlQm9yZGVyUmFkaXVzKGJhciwgbWF4VywgbWF4SCkge1xuICAgIGNvbnN0IHsgZW5hYmxlQm9yZGVyUmFkaXVzICB9ID0gYmFyLmdldFByb3BzKFtcbiAgICAgICAgJ2VuYWJsZUJvcmRlclJhZGl1cydcbiAgICBdKTtcbiAgICBjb25zdCB2YWx1ZSA9IGJhci5vcHRpb25zLmJvcmRlclJhZGl1cztcbiAgICBjb25zdCBvID0gdG9UUkJMQ29ybmVycyh2YWx1ZSk7XG4gICAgY29uc3QgbWF4UiA9IE1hdGgubWluKG1heFcsIG1heEgpO1xuICAgIGNvbnN0IHNraXAgPSBiYXIuYm9yZGVyU2tpcHBlZDtcbiAgICBjb25zdCBlbmFibGVCb3JkZXIgPSBlbmFibGVCb3JkZXJSYWRpdXMgfHwgaXNPYmplY3QodmFsdWUpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHRvcExlZnQ6IHNraXBPckxpbWl0KCFlbmFibGVCb3JkZXIgfHwgc2tpcC50b3AgfHwgc2tpcC5sZWZ0LCBvLnRvcExlZnQsIDAsIG1heFIpLFxuICAgICAgICB0b3BSaWdodDogc2tpcE9yTGltaXQoIWVuYWJsZUJvcmRlciB8fCBza2lwLnRvcCB8fCBza2lwLnJpZ2h0LCBvLnRvcFJpZ2h0LCAwLCBtYXhSKSxcbiAgICAgICAgYm90dG9tTGVmdDogc2tpcE9yTGltaXQoIWVuYWJsZUJvcmRlciB8fCBza2lwLmJvdHRvbSB8fCBza2lwLmxlZnQsIG8uYm90dG9tTGVmdCwgMCwgbWF4UiksXG4gICAgICAgIGJvdHRvbVJpZ2h0OiBza2lwT3JMaW1pdCghZW5hYmxlQm9yZGVyIHx8IHNraXAuYm90dG9tIHx8IHNraXAucmlnaHQsIG8uYm90dG9tUmlnaHQsIDAsIG1heFIpXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGJvdW5kaW5nUmVjdHMoYmFyKSB7XG4gICAgY29uc3QgYm91bmRzID0gZ2V0QmFyQm91bmRzKGJhcik7XG4gICAgY29uc3Qgd2lkdGggPSBib3VuZHMucmlnaHQgLSBib3VuZHMubGVmdDtcbiAgICBjb25zdCBoZWlnaHQgPSBib3VuZHMuYm90dG9tIC0gYm91bmRzLnRvcDtcbiAgICBjb25zdCBib3JkZXIgPSBwYXJzZUJvcmRlcldpZHRoKGJhciwgd2lkdGggLyAyLCBoZWlnaHQgLyAyKTtcbiAgICBjb25zdCByYWRpdXMgPSBwYXJzZUJvcmRlclJhZGl1cyhiYXIsIHdpZHRoIC8gMiwgaGVpZ2h0IC8gMik7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgb3V0ZXI6IHtcbiAgICAgICAgICAgIHg6IGJvdW5kcy5sZWZ0LFxuICAgICAgICAgICAgeTogYm91bmRzLnRvcCxcbiAgICAgICAgICAgIHc6IHdpZHRoLFxuICAgICAgICAgICAgaDogaGVpZ2h0LFxuICAgICAgICAgICAgcmFkaXVzXG4gICAgICAgIH0sXG4gICAgICAgIGlubmVyOiB7XG4gICAgICAgICAgICB4OiBib3VuZHMubGVmdCArIGJvcmRlci5sLFxuICAgICAgICAgICAgeTogYm91bmRzLnRvcCArIGJvcmRlci50LFxuICAgICAgICAgICAgdzogd2lkdGggLSBib3JkZXIubCAtIGJvcmRlci5yLFxuICAgICAgICAgICAgaDogaGVpZ2h0IC0gYm9yZGVyLnQgLSBib3JkZXIuYixcbiAgICAgICAgICAgIHJhZGl1czoge1xuICAgICAgICAgICAgICAgIHRvcExlZnQ6IE1hdGgubWF4KDAsIHJhZGl1cy50b3BMZWZ0IC0gTWF0aC5tYXgoYm9yZGVyLnQsIGJvcmRlci5sKSksXG4gICAgICAgICAgICAgICAgdG9wUmlnaHQ6IE1hdGgubWF4KDAsIHJhZGl1cy50b3BSaWdodCAtIE1hdGgubWF4KGJvcmRlci50LCBib3JkZXIucikpLFxuICAgICAgICAgICAgICAgIGJvdHRvbUxlZnQ6IE1hdGgubWF4KDAsIHJhZGl1cy5ib3R0b21MZWZ0IC0gTWF0aC5tYXgoYm9yZGVyLmIsIGJvcmRlci5sKSksXG4gICAgICAgICAgICAgICAgYm90dG9tUmlnaHQ6IE1hdGgubWF4KDAsIHJhZGl1cy5ib3R0b21SaWdodCAtIE1hdGgubWF4KGJvcmRlci5iLCBib3JkZXIucikpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gaW5SYW5nZShiYXIsIHgsIHksIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICBjb25zdCBza2lwWCA9IHggPT09IG51bGw7XG4gICAgY29uc3Qgc2tpcFkgPSB5ID09PSBudWxsO1xuICAgIGNvbnN0IHNraXBCb3RoID0gc2tpcFggJiYgc2tpcFk7XG4gICAgY29uc3QgYm91bmRzID0gYmFyICYmICFza2lwQm90aCAmJiBnZXRCYXJCb3VuZHMoYmFyLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICByZXR1cm4gYm91bmRzICYmIChza2lwWCB8fCBfaXNCZXR3ZWVuKHgsIGJvdW5kcy5sZWZ0LCBib3VuZHMucmlnaHQpKSAmJiAoc2tpcFkgfHwgX2lzQmV0d2Vlbih5LCBib3VuZHMudG9wLCBib3VuZHMuYm90dG9tKSk7XG59XG5mdW5jdGlvbiBoYXNSYWRpdXMocmFkaXVzKSB7XG4gICAgcmV0dXJuIHJhZGl1cy50b3BMZWZ0IHx8IHJhZGl1cy50b3BSaWdodCB8fCByYWRpdXMuYm90dG9tTGVmdCB8fCByYWRpdXMuYm90dG9tUmlnaHQ7XG59XG4gZnVuY3Rpb24gYWRkTm9ybWFsUmVjdFBhdGgoY3R4LCByZWN0KSB7XG4gICAgY3R4LnJlY3QocmVjdC54LCByZWN0LnksIHJlY3QudywgcmVjdC5oKTtcbn1cbmZ1bmN0aW9uIGluZmxhdGVSZWN0KHJlY3QsIGFtb3VudCwgcmVmUmVjdCA9IHt9KSB7XG4gICAgY29uc3QgeCA9IHJlY3QueCAhPT0gcmVmUmVjdC54ID8gLWFtb3VudCA6IDA7XG4gICAgY29uc3QgeSA9IHJlY3QueSAhPT0gcmVmUmVjdC55ID8gLWFtb3VudCA6IDA7XG4gICAgY29uc3QgdyA9IChyZWN0LnggKyByZWN0LncgIT09IHJlZlJlY3QueCArIHJlZlJlY3QudyA/IGFtb3VudCA6IDApIC0geDtcbiAgICBjb25zdCBoID0gKHJlY3QueSArIHJlY3QuaCAhPT0gcmVmUmVjdC55ICsgcmVmUmVjdC5oID8gYW1vdW50IDogMCkgLSB5O1xuICAgIHJldHVybiB7XG4gICAgICAgIHg6IHJlY3QueCArIHgsXG4gICAgICAgIHk6IHJlY3QueSArIHksXG4gICAgICAgIHc6IHJlY3QudyArIHcsXG4gICAgICAgIGg6IHJlY3QuaCArIGgsXG4gICAgICAgIHJhZGl1czogcmVjdC5yYWRpdXNcbiAgICB9O1xufVxuY2xhc3MgQmFyRWxlbWVudCBleHRlbmRzIEVsZW1lbnQge1xuICAgIHN0YXRpYyBpZCA9ICdiYXInO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgYm9yZGVyU2tpcHBlZDogJ3N0YXJ0JyxcbiAgICAgICAgYm9yZGVyV2lkdGg6IDAsXG4gICAgICAgIGJvcmRlclJhZGl1czogMCxcbiAgICAgICAgaW5mbGF0ZUFtb3VudDogJ2F1dG8nLFxuICAgICAgICBwb2ludFN0eWxlOiB1bmRlZmluZWRcbiAgICB9O1xuIHN0YXRpYyBkZWZhdWx0Um91dGVzID0ge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdiYWNrZ3JvdW5kQ29sb3InLFxuICAgICAgICBib3JkZXJDb2xvcjogJ2JvcmRlckNvbG9yJ1xuICAgIH07XG4gICAgY29uc3RydWN0b3IoY2ZnKXtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmhvcml6b250YWwgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuYmFzZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy53aWR0aCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuaW5mbGF0ZUFtb3VudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGNmZykge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBjZmcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRyYXcoY3R4KSB7XG4gICAgICAgIGNvbnN0IHsgaW5mbGF0ZUFtb3VudCAsIG9wdGlvbnM6IHsgYm9yZGVyQ29sb3IgLCBiYWNrZ3JvdW5kQ29sb3IgIH0gIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IGlubmVyICwgb3V0ZXIgIH0gPSBib3VuZGluZ1JlY3RzKHRoaXMpO1xuICAgICAgICBjb25zdCBhZGRSZWN0UGF0aCA9IGhhc1JhZGl1cyhvdXRlci5yYWRpdXMpID8gYWRkUm91bmRlZFJlY3RQYXRoIDogYWRkTm9ybWFsUmVjdFBhdGg7XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIGlmIChvdXRlci53ICE9PSBpbm5lci53IHx8IG91dGVyLmggIT09IGlubmVyLmgpIHtcbiAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIGFkZFJlY3RQYXRoKGN0eCwgaW5mbGF0ZVJlY3Qob3V0ZXIsIGluZmxhdGVBbW91bnQsIGlubmVyKSk7XG4gICAgICAgICAgICBjdHguY2xpcCgpO1xuICAgICAgICAgICAgYWRkUmVjdFBhdGgoY3R4LCBpbmZsYXRlUmVjdChpbm5lciwgLWluZmxhdGVBbW91bnQsIG91dGVyKSk7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gYm9yZGVyQ29sb3I7XG4gICAgICAgICAgICBjdHguZmlsbCgnZXZlbm9kZCcpO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgYWRkUmVjdFBhdGgoY3R4LCBpbmZsYXRlUmVjdChpbm5lciwgaW5mbGF0ZUFtb3VudCkpO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gYmFja2dyb3VuZENvbG9yO1xuICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cbiAgICBpblJhbmdlKG1vdXNlWCwgbW91c2VZLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiBpblJhbmdlKHRoaXMsIG1vdXNlWCwgbW91c2VZLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICB9XG4gICAgaW5YUmFuZ2UobW91c2VYLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiBpblJhbmdlKHRoaXMsIG1vdXNlWCwgbnVsbCwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgfVxuICAgIGluWVJhbmdlKG1vdXNlWSwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gaW5SYW5nZSh0aGlzLCBudWxsLCBtb3VzZVksIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIH1cbiAgICBnZXRDZW50ZXJQb2ludCh1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgIGNvbnN0IHsgeCAsIHkgLCBiYXNlICwgaG9yaXpvbnRhbCAgfSA9ICB0aGlzLmdldFByb3BzKFtcbiAgICAgICAgICAgICd4JyxcbiAgICAgICAgICAgICd5JyxcbiAgICAgICAgICAgICdiYXNlJyxcbiAgICAgICAgICAgICdob3Jpem9udGFsJ1xuICAgICAgICBdLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IGhvcml6b250YWwgPyAoeCArIGJhc2UpIC8gMiA6IHgsXG4gICAgICAgICAgICB5OiBob3Jpem9udGFsID8geSA6ICh5ICsgYmFzZSkgLyAyXG4gICAgICAgIH07XG4gICAgfVxuICAgIGdldFJhbmdlKGF4aXMpIHtcbiAgICAgICAgcmV0dXJuIGF4aXMgPT09ICd4JyA/IHRoaXMud2lkdGggLyAyIDogdGhpcy5oZWlnaHQgLyAyO1xuICAgIH1cbn1cblxudmFyIGVsZW1lbnRzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuX19wcm90b19fOiBudWxsLFxuQXJjRWxlbWVudDogQXJjRWxlbWVudCxcbkJhckVsZW1lbnQ6IEJhckVsZW1lbnQsXG5MaW5lRWxlbWVudDogTGluZUVsZW1lbnQsXG5Qb2ludEVsZW1lbnQ6IFBvaW50RWxlbWVudFxufSk7XG5cbmNvbnN0IEJPUkRFUl9DT0xPUlMgPSBbXG4gICAgJ3JnYig1NCwgMTYyLCAyMzUpJyxcbiAgICAncmdiKDI1NSwgOTksIDEzMiknLFxuICAgICdyZ2IoMjU1LCAxNTksIDY0KScsXG4gICAgJ3JnYigyNTUsIDIwNSwgODYpJyxcbiAgICAncmdiKDc1LCAxOTIsIDE5MiknLFxuICAgICdyZ2IoMTUzLCAxMDIsIDI1NSknLFxuICAgICdyZ2IoMjAxLCAyMDMsIDIwNyknIC8vIGdyZXlcbl07XG4vLyBCb3JkZXIgY29sb3JzIHdpdGggNTAlIHRyYW5zcGFyZW5jeVxuY29uc3QgQkFDS0dST1VORF9DT0xPUlMgPSAvKiAjX19QVVJFX18gKi8gQk9SREVSX0NPTE9SUy5tYXAoKGNvbG9yKT0+Y29sb3IucmVwbGFjZSgncmdiKCcsICdyZ2JhKCcpLnJlcGxhY2UoJyknLCAnLCAwLjUpJykpO1xuZnVuY3Rpb24gZ2V0Qm9yZGVyQ29sb3IoaSkge1xuICAgIHJldHVybiBCT1JERVJfQ09MT1JTW2kgJSBCT1JERVJfQ09MT1JTLmxlbmd0aF07XG59XG5mdW5jdGlvbiBnZXRCYWNrZ3JvdW5kQ29sb3IoaSkge1xuICAgIHJldHVybiBCQUNLR1JPVU5EX0NPTE9SU1tpICUgQkFDS0dST1VORF9DT0xPUlMubGVuZ3RoXTtcbn1cbmZ1bmN0aW9uIGNvbG9yaXplRGVmYXVsdERhdGFzZXQoZGF0YXNldCwgaSkge1xuICAgIGRhdGFzZXQuYm9yZGVyQ29sb3IgPSBnZXRCb3JkZXJDb2xvcihpKTtcbiAgICBkYXRhc2V0LmJhY2tncm91bmRDb2xvciA9IGdldEJhY2tncm91bmRDb2xvcihpKTtcbiAgICByZXR1cm4gKytpO1xufVxuZnVuY3Rpb24gY29sb3JpemVEb3VnaG51dERhdGFzZXQoZGF0YXNldCwgaSkge1xuICAgIGRhdGFzZXQuYmFja2dyb3VuZENvbG9yID0gZGF0YXNldC5kYXRhLm1hcCgoKT0+Z2V0Qm9yZGVyQ29sb3IoaSsrKSk7XG4gICAgcmV0dXJuIGk7XG59XG5mdW5jdGlvbiBjb2xvcml6ZVBvbGFyQXJlYURhdGFzZXQoZGF0YXNldCwgaSkge1xuICAgIGRhdGFzZXQuYmFja2dyb3VuZENvbG9yID0gZGF0YXNldC5kYXRhLm1hcCgoKT0+Z2V0QmFja2dyb3VuZENvbG9yKGkrKykpO1xuICAgIHJldHVybiBpO1xufVxuZnVuY3Rpb24gZ2V0Q29sb3JpemVyKGNoYXJ0KSB7XG4gICAgbGV0IGkgPSAwO1xuICAgIHJldHVybiAoZGF0YXNldCwgZGF0YXNldEluZGV4KT0+e1xuICAgICAgICBjb25zdCBjb250cm9sbGVyID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KS5jb250cm9sbGVyO1xuICAgICAgICBpZiAoY29udHJvbGxlciBpbnN0YW5jZW9mIERvdWdobnV0Q29udHJvbGxlcikge1xuICAgICAgICAgICAgaSA9IGNvbG9yaXplRG91Z2hudXREYXRhc2V0KGRhdGFzZXQsIGkpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbnRyb2xsZXIgaW5zdGFuY2VvZiBQb2xhckFyZWFDb250cm9sbGVyKSB7XG4gICAgICAgICAgICBpID0gY29sb3JpemVQb2xhckFyZWFEYXRhc2V0KGRhdGFzZXQsIGkpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgIGkgPSBjb2xvcml6ZURlZmF1bHREYXRhc2V0KGRhdGFzZXQsIGkpO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNvbnRhaW5zQ29sb3JzRGVmaW5pdGlvbnMoZGVzY3JpcHRvcnMpIHtcbiAgICBsZXQgaztcbiAgICBmb3IoayBpbiBkZXNjcmlwdG9ycyl7XG4gICAgICAgIGlmIChkZXNjcmlwdG9yc1trXS5ib3JkZXJDb2xvciB8fCBkZXNjcmlwdG9yc1trXS5iYWNrZ3JvdW5kQ29sb3IpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGNvbnRhaW5zQ29sb3JzRGVmaW5pdGlvbihkZXNjcmlwdG9yKSB7XG4gICAgcmV0dXJuIGRlc2NyaXB0b3IgJiYgKGRlc2NyaXB0b3IuYm9yZGVyQ29sb3IgfHwgZGVzY3JpcHRvci5iYWNrZ3JvdW5kQ29sb3IpO1xufVxudmFyIHBsdWdpbl9jb2xvcnMgPSB7XG4gICAgaWQ6ICdjb2xvcnMnLFxuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgIGZvcmNlT3ZlcnJpZGU6IGZhbHNlXG4gICAgfSxcbiAgICBiZWZvcmVMYXlvdXQgKGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgICAgICBpZiAoIW9wdGlvbnMuZW5hYmxlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgZGF0YTogeyBkYXRhc2V0cyAgfSAsIG9wdGlvbnM6IGNoYXJ0T3B0aW9ucyAgfSA9IGNoYXJ0LmNvbmZpZztcbiAgICAgICAgY29uc3QgeyBlbGVtZW50cyAgfSA9IGNoYXJ0T3B0aW9ucztcbiAgICAgICAgaWYgKCFvcHRpb25zLmZvcmNlT3ZlcnJpZGUgJiYgKGNvbnRhaW5zQ29sb3JzRGVmaW5pdGlvbnMoZGF0YXNldHMpIHx8IGNvbnRhaW5zQ29sb3JzRGVmaW5pdGlvbihjaGFydE9wdGlvbnMpIHx8IGVsZW1lbnRzICYmIGNvbnRhaW5zQ29sb3JzRGVmaW5pdGlvbnMoZWxlbWVudHMpKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbG9yaXplciA9IGdldENvbG9yaXplcihjaGFydCk7XG4gICAgICAgIGRhdGFzZXRzLmZvckVhY2goY29sb3JpemVyKTtcbiAgICB9XG59O1xuXG5mdW5jdGlvbiBsdHRiRGVjaW1hdGlvbihkYXRhLCBzdGFydCwgY291bnQsIGF2YWlsYWJsZVdpZHRoLCBvcHRpb25zKSB7XG4gY29uc3Qgc2FtcGxlcyA9IG9wdGlvbnMuc2FtcGxlcyB8fCBhdmFpbGFibGVXaWR0aDtcbiAgICBpZiAoc2FtcGxlcyA+PSBjb3VudCkge1xuICAgICAgICByZXR1cm4gZGF0YS5zbGljZShzdGFydCwgc3RhcnQgKyBjb3VudCk7XG4gICAgfVxuICAgIGNvbnN0IGRlY2ltYXRlZCA9IFtdO1xuICAgIGNvbnN0IGJ1Y2tldFdpZHRoID0gKGNvdW50IC0gMikgLyAoc2FtcGxlcyAtIDIpO1xuICAgIGxldCBzYW1wbGVkSW5kZXggPSAwO1xuICAgIGNvbnN0IGVuZEluZGV4ID0gc3RhcnQgKyBjb3VudCAtIDE7XG4gICAgbGV0IGEgPSBzdGFydDtcbiAgICBsZXQgaSwgbWF4QXJlYVBvaW50LCBtYXhBcmVhLCBhcmVhLCBuZXh0QTtcbiAgICBkZWNpbWF0ZWRbc2FtcGxlZEluZGV4KytdID0gZGF0YVthXTtcbiAgICBmb3IoaSA9IDA7IGkgPCBzYW1wbGVzIC0gMjsgaSsrKXtcbiAgICAgICAgbGV0IGF2Z1ggPSAwO1xuICAgICAgICBsZXQgYXZnWSA9IDA7XG4gICAgICAgIGxldCBqO1xuICAgICAgICBjb25zdCBhdmdSYW5nZVN0YXJ0ID0gTWF0aC5mbG9vcigoaSArIDEpICogYnVja2V0V2lkdGgpICsgMSArIHN0YXJ0O1xuICAgICAgICBjb25zdCBhdmdSYW5nZUVuZCA9IE1hdGgubWluKE1hdGguZmxvb3IoKGkgKyAyKSAqIGJ1Y2tldFdpZHRoKSArIDEsIGNvdW50KSArIHN0YXJ0O1xuICAgICAgICBjb25zdCBhdmdSYW5nZUxlbmd0aCA9IGF2Z1JhbmdlRW5kIC0gYXZnUmFuZ2VTdGFydDtcbiAgICAgICAgZm9yKGogPSBhdmdSYW5nZVN0YXJ0OyBqIDwgYXZnUmFuZ2VFbmQ7IGorKyl7XG4gICAgICAgICAgICBhdmdYICs9IGRhdGFbal0ueDtcbiAgICAgICAgICAgIGF2Z1kgKz0gZGF0YVtqXS55O1xuICAgICAgICB9XG4gICAgICAgIGF2Z1ggLz0gYXZnUmFuZ2VMZW5ndGg7XG4gICAgICAgIGF2Z1kgLz0gYXZnUmFuZ2VMZW5ndGg7XG4gICAgICAgIGNvbnN0IHJhbmdlT2ZmcyA9IE1hdGguZmxvb3IoaSAqIGJ1Y2tldFdpZHRoKSArIDEgKyBzdGFydDtcbiAgICAgICAgY29uc3QgcmFuZ2VUbyA9IE1hdGgubWluKE1hdGguZmxvb3IoKGkgKyAxKSAqIGJ1Y2tldFdpZHRoKSArIDEsIGNvdW50KSArIHN0YXJ0O1xuICAgICAgICBjb25zdCB7IHg6IHBvaW50QXggLCB5OiBwb2ludEF5ICB9ID0gZGF0YVthXTtcbiAgICAgICAgbWF4QXJlYSA9IGFyZWEgPSAtMTtcbiAgICAgICAgZm9yKGogPSByYW5nZU9mZnM7IGogPCByYW5nZVRvOyBqKyspe1xuICAgICAgICAgICAgYXJlYSA9IDAuNSAqIE1hdGguYWJzKChwb2ludEF4IC0gYXZnWCkgKiAoZGF0YVtqXS55IC0gcG9pbnRBeSkgLSAocG9pbnRBeCAtIGRhdGFbal0ueCkgKiAoYXZnWSAtIHBvaW50QXkpKTtcbiAgICAgICAgICAgIGlmIChhcmVhID4gbWF4QXJlYSkge1xuICAgICAgICAgICAgICAgIG1heEFyZWEgPSBhcmVhO1xuICAgICAgICAgICAgICAgIG1heEFyZWFQb2ludCA9IGRhdGFbal07XG4gICAgICAgICAgICAgICAgbmV4dEEgPSBqO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGRlY2ltYXRlZFtzYW1wbGVkSW5kZXgrK10gPSBtYXhBcmVhUG9pbnQ7XG4gICAgICAgIGEgPSBuZXh0QTtcbiAgICB9XG4gICAgZGVjaW1hdGVkW3NhbXBsZWRJbmRleCsrXSA9IGRhdGFbZW5kSW5kZXhdO1xuICAgIHJldHVybiBkZWNpbWF0ZWQ7XG59XG5mdW5jdGlvbiBtaW5NYXhEZWNpbWF0aW9uKGRhdGEsIHN0YXJ0LCBjb3VudCwgYXZhaWxhYmxlV2lkdGgpIHtcbiAgICBsZXQgYXZnWCA9IDA7XG4gICAgbGV0IGNvdW50WCA9IDA7XG4gICAgbGV0IGksIHBvaW50LCB4LCB5LCBwcmV2WCwgbWluSW5kZXgsIG1heEluZGV4LCBzdGFydEluZGV4LCBtaW5ZLCBtYXhZO1xuICAgIGNvbnN0IGRlY2ltYXRlZCA9IFtdO1xuICAgIGNvbnN0IGVuZEluZGV4ID0gc3RhcnQgKyBjb3VudCAtIDE7XG4gICAgY29uc3QgeE1pbiA9IGRhdGFbc3RhcnRdLng7XG4gICAgY29uc3QgeE1heCA9IGRhdGFbZW5kSW5kZXhdLng7XG4gICAgY29uc3QgZHggPSB4TWF4IC0geE1pbjtcbiAgICBmb3IoaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBjb3VudDsgKytpKXtcbiAgICAgICAgcG9pbnQgPSBkYXRhW2ldO1xuICAgICAgICB4ID0gKHBvaW50LnggLSB4TWluKSAvIGR4ICogYXZhaWxhYmxlV2lkdGg7XG4gICAgICAgIHkgPSBwb2ludC55O1xuICAgICAgICBjb25zdCB0cnVuY1ggPSB4IHwgMDtcbiAgICAgICAgaWYgKHRydW5jWCA9PT0gcHJldlgpIHtcbiAgICAgICAgICAgIGlmICh5IDwgbWluWSkge1xuICAgICAgICAgICAgICAgIG1pblkgPSB5O1xuICAgICAgICAgICAgICAgIG1pbkluZGV4ID0gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoeSA+IG1heFkpIHtcbiAgICAgICAgICAgICAgICBtYXhZID0geTtcbiAgICAgICAgICAgICAgICBtYXhJbmRleCA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhdmdYID0gKGNvdW50WCAqIGF2Z1ggKyBwb2ludC54KSAvICsrY291bnRYO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbGFzdEluZGV4ID0gaSAtIDE7XG4gICAgICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWYobWluSW5kZXgpICYmICFpc051bGxPclVuZGVmKG1heEluZGV4KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGludGVybWVkaWF0ZUluZGV4MSA9IE1hdGgubWluKG1pbkluZGV4LCBtYXhJbmRleCk7XG4gICAgICAgICAgICAgICAgY29uc3QgaW50ZXJtZWRpYXRlSW5kZXgyID0gTWF0aC5tYXgobWluSW5kZXgsIG1heEluZGV4KTtcbiAgICAgICAgICAgICAgICBpZiAoaW50ZXJtZWRpYXRlSW5kZXgxICE9PSBzdGFydEluZGV4ICYmIGludGVybWVkaWF0ZUluZGV4MSAhPT0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGRlY2ltYXRlZC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmRhdGFbaW50ZXJtZWRpYXRlSW5kZXgxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IGF2Z1hcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpbnRlcm1lZGlhdGVJbmRleDIgIT09IHN0YXJ0SW5kZXggJiYgaW50ZXJtZWRpYXRlSW5kZXgyICE9PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVjaW1hdGVkLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uZGF0YVtpbnRlcm1lZGlhdGVJbmRleDJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgeDogYXZnWFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaSA+IDAgJiYgbGFzdEluZGV4ICE9PSBzdGFydEluZGV4KSB7XG4gICAgICAgICAgICAgICAgZGVjaW1hdGVkLnB1c2goZGF0YVtsYXN0SW5kZXhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlY2ltYXRlZC5wdXNoKHBvaW50KTtcbiAgICAgICAgICAgIHByZXZYID0gdHJ1bmNYO1xuICAgICAgICAgICAgY291bnRYID0gMDtcbiAgICAgICAgICAgIG1pblkgPSBtYXhZID0geTtcbiAgICAgICAgICAgIG1pbkluZGV4ID0gbWF4SW5kZXggPSBzdGFydEluZGV4ID0gaTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGVjaW1hdGVkO1xufVxuZnVuY3Rpb24gY2xlYW5EZWNpbWF0ZWREYXRhc2V0KGRhdGFzZXQpIHtcbiAgICBpZiAoZGF0YXNldC5fZGVjaW1hdGVkKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBkYXRhc2V0Ll9kYXRhO1xuICAgICAgICBkZWxldGUgZGF0YXNldC5fZGVjaW1hdGVkO1xuICAgICAgICBkZWxldGUgZGF0YXNldC5fZGF0YTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRhdGFzZXQsICdkYXRhJywge1xuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IGRhdGFcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZnVuY3Rpb24gY2xlYW5EZWNpbWF0ZWREYXRhKGNoYXJ0KSB7XG4gICAgY2hhcnQuZGF0YS5kYXRhc2V0cy5mb3JFYWNoKChkYXRhc2V0KT0+e1xuICAgICAgICBjbGVhbkRlY2ltYXRlZERhdGFzZXQoZGF0YXNldCk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBnZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzU2ltcGxpZmllZChtZXRhLCBwb2ludHMpIHtcbiAgICBjb25zdCBwb2ludENvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgICBsZXQgc3RhcnQgPSAwO1xuICAgIGxldCBjb3VudDtcbiAgICBjb25zdCB7IGlTY2FsZSAgfSA9IG1ldGE7XG4gICAgY29uc3QgeyBtaW4gLCBtYXggLCBtaW5EZWZpbmVkICwgbWF4RGVmaW5lZCAgfSA9IGlTY2FsZS5nZXRVc2VyQm91bmRzKCk7XG4gICAgaWYgKG1pbkRlZmluZWQpIHtcbiAgICAgICAgc3RhcnQgPSBfbGltaXRWYWx1ZShfbG9va3VwQnlLZXkocG9pbnRzLCBpU2NhbGUuYXhpcywgbWluKS5sbywgMCwgcG9pbnRDb3VudCAtIDEpO1xuICAgIH1cbiAgICBpZiAobWF4RGVmaW5lZCkge1xuICAgICAgICBjb3VudCA9IF9saW1pdFZhbHVlKF9sb29rdXBCeUtleShwb2ludHMsIGlTY2FsZS5heGlzLCBtYXgpLmhpICsgMSwgc3RhcnQsIHBvaW50Q291bnQpIC0gc3RhcnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY291bnQgPSBwb2ludENvdW50IC0gc3RhcnQ7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0LFxuICAgICAgICBjb3VudFxuICAgIH07XG59XG52YXIgcGx1Z2luX2RlY2ltYXRpb24gPSB7XG4gICAgaWQ6ICdkZWNpbWF0aW9uJyxcbiAgICBkZWZhdWx0czoge1xuICAgICAgICBhbGdvcml0aG06ICdtaW4tbWF4JyxcbiAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICB9LFxuICAgIGJlZm9yZUVsZW1lbnRzVXBkYXRlOiAoY2hhcnQsIGFyZ3MsIG9wdGlvbnMpPT57XG4gICAgICAgIGlmICghb3B0aW9ucy5lbmFibGVkKSB7XG4gICAgICAgICAgICBjbGVhbkRlY2ltYXRlZERhdGEoY2hhcnQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGF2YWlsYWJsZVdpZHRoID0gY2hhcnQud2lkdGg7XG4gICAgICAgIGNoYXJ0LmRhdGEuZGF0YXNldHMuZm9yRWFjaCgoZGF0YXNldCwgZGF0YXNldEluZGV4KT0+e1xuICAgICAgICAgICAgY29uc3QgeyBfZGF0YSAsIGluZGV4QXhpcyAgfSA9IGRhdGFzZXQ7XG4gICAgICAgICAgICBjb25zdCBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBfZGF0YSB8fCBkYXRhc2V0LmRhdGE7XG4gICAgICAgICAgICBpZiAocmVzb2x2ZShbXG4gICAgICAgICAgICAgICAgaW5kZXhBeGlzLFxuICAgICAgICAgICAgICAgIGNoYXJ0Lm9wdGlvbnMuaW5kZXhBeGlzXG4gICAgICAgICAgICBdKSA9PT0gJ3knKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFtZXRhLmNvbnRyb2xsZXIuc3VwcG9ydHNEZWNpbWF0aW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeEF4aXMgPSBjaGFydC5zY2FsZXNbbWV0YS54QXhpc0lEXTtcbiAgICAgICAgICAgIGlmICh4QXhpcy50eXBlICE9PSAnbGluZWFyJyAmJiB4QXhpcy50eXBlICE9PSAndGltZScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2hhcnQub3B0aW9ucy5wYXJzaW5nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHsgc3RhcnQgLCBjb3VudCAgfSA9IGdldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHNTaW1wbGlmaWVkKG1ldGEsIGRhdGEpO1xuICAgICAgICAgICAgY29uc3QgdGhyZXNob2xkID0gb3B0aW9ucy50aHJlc2hvbGQgfHwgNCAqIGF2YWlsYWJsZVdpZHRoO1xuICAgICAgICAgICAgaWYgKGNvdW50IDw9IHRocmVzaG9sZCkge1xuICAgICAgICAgICAgICAgIGNsZWFuRGVjaW1hdGVkRGF0YXNldChkYXRhc2V0KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNOdWxsT3JVbmRlZihfZGF0YSkpIHtcbiAgICAgICAgICAgICAgICBkYXRhc2V0Ll9kYXRhID0gZGF0YTtcbiAgICAgICAgICAgICAgICBkZWxldGUgZGF0YXNldC5kYXRhO1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkYXRhc2V0LCAnZGF0YScsIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RlY2ltYXRlZDtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kYXRhID0gZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGRlY2ltYXRlZDtcbiAgICAgICAgICAgIHN3aXRjaChvcHRpb25zLmFsZ29yaXRobSl7XG4gICAgICAgICAgICAgICAgY2FzZSAnbHR0Yic6XG4gICAgICAgICAgICAgICAgICAgIGRlY2ltYXRlZCA9IGx0dGJEZWNpbWF0aW9uKGRhdGEsIHN0YXJ0LCBjb3VudCwgYXZhaWxhYmxlV2lkdGgsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdtaW4tbWF4JzpcbiAgICAgICAgICAgICAgICAgICAgZGVjaW1hdGVkID0gbWluTWF4RGVjaW1hdGlvbihkYXRhLCBzdGFydCwgY291bnQsIGF2YWlsYWJsZVdpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBkZWNpbWF0aW9uIGFsZ29yaXRobSAnJHtvcHRpb25zLmFsZ29yaXRobX0nYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkYXRhc2V0Ll9kZWNpbWF0ZWQgPSBkZWNpbWF0ZWQ7XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgZGVzdHJveSAoY2hhcnQpIHtcbiAgICAgICAgY2xlYW5EZWNpbWF0ZWREYXRhKGNoYXJ0KTtcbiAgICB9XG59O1xuXG5mdW5jdGlvbiBfc2VnbWVudHMobGluZSwgdGFyZ2V0LCBwcm9wZXJ0eSkge1xuICAgIGNvbnN0IHNlZ21lbnRzID0gbGluZS5zZWdtZW50cztcbiAgICBjb25zdCBwb2ludHMgPSBsaW5lLnBvaW50cztcbiAgICBjb25zdCB0cG9pbnRzID0gdGFyZ2V0LnBvaW50cztcbiAgICBjb25zdCBwYXJ0cyA9IFtdO1xuICAgIGZvciAoY29uc3Qgc2VnbWVudCBvZiBzZWdtZW50cyl7XG4gICAgICAgIGxldCB7IHN0YXJ0ICwgZW5kICB9ID0gc2VnbWVudDtcbiAgICAgICAgZW5kID0gX2ZpbmRTZWdtZW50RW5kKHN0YXJ0LCBlbmQsIHBvaW50cyk7XG4gICAgICAgIGNvbnN0IGJvdW5kcyA9IF9nZXRCb3VuZHMocHJvcGVydHksIHBvaW50c1tzdGFydF0sIHBvaW50c1tlbmRdLCBzZWdtZW50Lmxvb3ApO1xuICAgICAgICBpZiAoIXRhcmdldC5zZWdtZW50cykge1xuICAgICAgICAgICAgcGFydHMucHVzaCh7XG4gICAgICAgICAgICAgICAgc291cmNlOiBzZWdtZW50LFxuICAgICAgICAgICAgICAgIHRhcmdldDogYm91bmRzLFxuICAgICAgICAgICAgICAgIHN0YXJ0OiBwb2ludHNbc3RhcnRdLFxuICAgICAgICAgICAgICAgIGVuZDogcG9pbnRzW2VuZF1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGFyZ2V0U2VnbWVudHMgPSBfYm91bmRTZWdtZW50cyh0YXJnZXQsIGJvdW5kcyk7XG4gICAgICAgIGZvciAoY29uc3QgdGd0IG9mIHRhcmdldFNlZ21lbnRzKXtcbiAgICAgICAgICAgIGNvbnN0IHN1YkJvdW5kcyA9IF9nZXRCb3VuZHMocHJvcGVydHksIHRwb2ludHNbdGd0LnN0YXJ0XSwgdHBvaW50c1t0Z3QuZW5kXSwgdGd0Lmxvb3ApO1xuICAgICAgICAgICAgY29uc3QgZmlsbFNvdXJjZXMgPSBfYm91bmRTZWdtZW50KHNlZ21lbnQsIHBvaW50cywgc3ViQm91bmRzKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZmlsbFNvdXJjZSBvZiBmaWxsU291cmNlcyl7XG4gICAgICAgICAgICAgICAgcGFydHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogZmlsbFNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiB0Z3QsXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBbcHJvcGVydHldOiBfZ2V0RWRnZShib3VuZHMsIHN1YkJvdW5kcywgJ3N0YXJ0JywgTWF0aC5tYXgpXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGVuZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgW3Byb3BlcnR5XTogX2dldEVkZ2UoYm91bmRzLCBzdWJCb3VuZHMsICdlbmQnLCBNYXRoLm1pbilcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYXJ0cztcbn1cbmZ1bmN0aW9uIF9nZXRCb3VuZHMocHJvcGVydHksIGZpcnN0LCBsYXN0LCBsb29wKSB7XG4gICAgaWYgKGxvb3ApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgc3RhcnQgPSBmaXJzdFtwcm9wZXJ0eV07XG4gICAgbGV0IGVuZCA9IGxhc3RbcHJvcGVydHldO1xuICAgIGlmIChwcm9wZXJ0eSA9PT0gJ2FuZ2xlJykge1xuICAgICAgICBzdGFydCA9IF9ub3JtYWxpemVBbmdsZShzdGFydCk7XG4gICAgICAgIGVuZCA9IF9ub3JtYWxpemVBbmdsZShlbmQpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBwcm9wZXJ0eSxcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIGVuZFxuICAgIH07XG59XG5mdW5jdGlvbiBfcG9pbnRzRnJvbVNlZ21lbnRzKGJvdW5kYXJ5LCBsaW5lKSB7XG4gICAgY29uc3QgeyB4ID1udWxsICwgeSA9bnVsbCAgfSA9IGJvdW5kYXJ5IHx8IHt9O1xuICAgIGNvbnN0IGxpbmVQb2ludHMgPSBsaW5lLnBvaW50cztcbiAgICBjb25zdCBwb2ludHMgPSBbXTtcbiAgICBsaW5lLnNlZ21lbnRzLmZvckVhY2goKHsgc3RhcnQgLCBlbmQgIH0pPT57XG4gICAgICAgIGVuZCA9IF9maW5kU2VnbWVudEVuZChzdGFydCwgZW5kLCBsaW5lUG9pbnRzKTtcbiAgICAgICAgY29uc3QgZmlyc3QgPSBsaW5lUG9pbnRzW3N0YXJ0XTtcbiAgICAgICAgY29uc3QgbGFzdCA9IGxpbmVQb2ludHNbZW5kXTtcbiAgICAgICAgaWYgKHkgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHBvaW50cy5wdXNoKHtcbiAgICAgICAgICAgICAgICB4OiBmaXJzdC54LFxuICAgICAgICAgICAgICAgIHlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcG9pbnRzLnB1c2goe1xuICAgICAgICAgICAgICAgIHg6IGxhc3QueCxcbiAgICAgICAgICAgICAgICB5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh4ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBwb2ludHMucHVzaCh7XG4gICAgICAgICAgICAgICAgeCxcbiAgICAgICAgICAgICAgICB5OiBmaXJzdC55XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHBvaW50cy5wdXNoKHtcbiAgICAgICAgICAgICAgICB4LFxuICAgICAgICAgICAgICAgIHk6IGxhc3QueVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcG9pbnRzO1xufVxuZnVuY3Rpb24gX2ZpbmRTZWdtZW50RW5kKHN0YXJ0LCBlbmQsIHBvaW50cykge1xuICAgIGZvcig7IGVuZCA+IHN0YXJ0OyBlbmQtLSl7XG4gICAgICAgIGNvbnN0IHBvaW50ID0gcG9pbnRzW2VuZF07XG4gICAgICAgIGlmICghaXNOYU4ocG9pbnQueCkgJiYgIWlzTmFOKHBvaW50LnkpKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZW5kO1xufVxuZnVuY3Rpb24gX2dldEVkZ2UoYSwgYiwgcHJvcCwgZm4pIHtcbiAgICBpZiAoYSAmJiBiKSB7XG4gICAgICAgIHJldHVybiBmbihhW3Byb3BdLCBiW3Byb3BdKTtcbiAgICB9XG4gICAgcmV0dXJuIGEgPyBhW3Byb3BdIDogYiA/IGJbcHJvcF0gOiAwO1xufVxuXG5mdW5jdGlvbiBfY3JlYXRlQm91bmRhcnlMaW5lKGJvdW5kYXJ5LCBsaW5lKSB7XG4gICAgbGV0IHBvaW50cyA9IFtdO1xuICAgIGxldCBfbG9vcCA9IGZhbHNlO1xuICAgIGlmIChpc0FycmF5KGJvdW5kYXJ5KSkge1xuICAgICAgICBfbG9vcCA9IHRydWU7XG4gICAgICAgIHBvaW50cyA9IGJvdW5kYXJ5O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHBvaW50cyA9IF9wb2ludHNGcm9tU2VnbWVudHMoYm91bmRhcnksIGxpbmUpO1xuICAgIH1cbiAgICByZXR1cm4gcG9pbnRzLmxlbmd0aCA/IG5ldyBMaW5lRWxlbWVudCh7XG4gICAgICAgIHBvaW50cyxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgdGVuc2lvbjogMFxuICAgICAgICB9LFxuICAgICAgICBfbG9vcCxcbiAgICAgICAgX2Z1bGxMb29wOiBfbG9vcFxuICAgIH0pIDogbnVsbDtcbn1cbmZ1bmN0aW9uIF9zaG91bGRBcHBseUZpbGwoc291cmNlKSB7XG4gICAgcmV0dXJuIHNvdXJjZSAmJiBzb3VyY2UuZmlsbCAhPT0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIF9yZXNvbHZlVGFyZ2V0KHNvdXJjZXMsIGluZGV4LCBwcm9wYWdhdGUpIHtcbiAgICBjb25zdCBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICBsZXQgZmlsbCA9IHNvdXJjZS5maWxsO1xuICAgIGNvbnN0IHZpc2l0ZWQgPSBbXG4gICAgICAgIGluZGV4XG4gICAgXTtcbiAgICBsZXQgdGFyZ2V0O1xuICAgIGlmICghcHJvcGFnYXRlKSB7XG4gICAgICAgIHJldHVybiBmaWxsO1xuICAgIH1cbiAgICB3aGlsZShmaWxsICE9PSBmYWxzZSAmJiB2aXNpdGVkLmluZGV4T2YoZmlsbCkgPT09IC0xKXtcbiAgICAgICAgaWYgKCFpc051bWJlckZpbml0ZShmaWxsKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZpbGw7XG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0ID0gc291cmNlc1tmaWxsXTtcbiAgICAgICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFyZ2V0LnZpc2libGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmaWxsO1xuICAgICAgICB9XG4gICAgICAgIHZpc2l0ZWQucHVzaChmaWxsKTtcbiAgICAgICAgZmlsbCA9IHRhcmdldC5maWxsO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4gZnVuY3Rpb24gX2RlY29kZUZpbGwobGluZSwgaW5kZXgsIGNvdW50KSB7XG4gICAgIGNvbnN0IGZpbGwgPSBwYXJzZUZpbGxPcHRpb24obGluZSk7XG4gICAgaWYgKGlzT2JqZWN0KGZpbGwpKSB7XG4gICAgICAgIHJldHVybiBpc05hTihmaWxsLnZhbHVlKSA/IGZhbHNlIDogZmlsbDtcbiAgICB9XG4gICAgbGV0IHRhcmdldCA9IHBhcnNlRmxvYXQoZmlsbCk7XG4gICAgaWYgKGlzTnVtYmVyRmluaXRlKHRhcmdldCkgJiYgTWF0aC5mbG9vcih0YXJnZXQpID09PSB0YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuIGRlY29kZVRhcmdldEluZGV4KGZpbGxbMF0sIGluZGV4LCB0YXJnZXQsIGNvdW50KTtcbiAgICB9XG4gICAgcmV0dXJuIFtcbiAgICAgICAgJ29yaWdpbicsXG4gICAgICAgICdzdGFydCcsXG4gICAgICAgICdlbmQnLFxuICAgICAgICAnc3RhY2snLFxuICAgICAgICAnc2hhcGUnXG4gICAgXS5pbmRleE9mKGZpbGwpID49IDAgJiYgZmlsbDtcbn1cbmZ1bmN0aW9uIGRlY29kZVRhcmdldEluZGV4KGZpcnN0Q2gsIGluZGV4LCB0YXJnZXQsIGNvdW50KSB7XG4gICAgaWYgKGZpcnN0Q2ggPT09ICctJyB8fCBmaXJzdENoID09PSAnKycpIHtcbiAgICAgICAgdGFyZ2V0ID0gaW5kZXggKyB0YXJnZXQ7XG4gICAgfVxuICAgIGlmICh0YXJnZXQgPT09IGluZGV4IHx8IHRhcmdldCA8IDAgfHwgdGFyZ2V0ID49IGNvdW50KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cbiBmdW5jdGlvbiBfZ2V0VGFyZ2V0UGl4ZWwoZmlsbCwgc2NhbGUpIHtcbiAgICBsZXQgcGl4ZWwgPSBudWxsO1xuICAgIGlmIChmaWxsID09PSAnc3RhcnQnKSB7XG4gICAgICAgIHBpeGVsID0gc2NhbGUuYm90dG9tO1xuICAgIH0gZWxzZSBpZiAoZmlsbCA9PT0gJ2VuZCcpIHtcbiAgICAgICAgcGl4ZWwgPSBzY2FsZS50b3A7XG4gICAgfSBlbHNlIGlmIChpc09iamVjdChmaWxsKSkge1xuICAgICAgICBwaXhlbCA9IHNjYWxlLmdldFBpeGVsRm9yVmFsdWUoZmlsbC52YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChzY2FsZS5nZXRCYXNlUGl4ZWwpIHtcbiAgICAgICAgcGl4ZWwgPSBzY2FsZS5nZXRCYXNlUGl4ZWwoKTtcbiAgICB9XG4gICAgcmV0dXJuIHBpeGVsO1xufVxuIGZ1bmN0aW9uIF9nZXRUYXJnZXRWYWx1ZShmaWxsLCBzY2FsZSwgc3RhcnRWYWx1ZSkge1xuICAgIGxldCB2YWx1ZTtcbiAgICBpZiAoZmlsbCA9PT0gJ3N0YXJ0Jykge1xuICAgICAgICB2YWx1ZSA9IHN0YXJ0VmFsdWU7XG4gICAgfSBlbHNlIGlmIChmaWxsID09PSAnZW5kJykge1xuICAgICAgICB2YWx1ZSA9IHNjYWxlLm9wdGlvbnMucmV2ZXJzZSA/IHNjYWxlLm1pbiA6IHNjYWxlLm1heDtcbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGZpbGwpKSB7XG4gICAgICAgIHZhbHVlID0gZmlsbC52YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IHNjYWxlLmdldEJhc2VWYWx1ZSgpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG4gZnVuY3Rpb24gcGFyc2VGaWxsT3B0aW9uKGxpbmUpIHtcbiAgICBjb25zdCBvcHRpb25zID0gbGluZS5vcHRpb25zO1xuICAgIGNvbnN0IGZpbGxPcHRpb24gPSBvcHRpb25zLmZpbGw7XG4gICAgbGV0IGZpbGwgPSB2YWx1ZU9yRGVmYXVsdChmaWxsT3B0aW9uICYmIGZpbGxPcHRpb24udGFyZ2V0LCBmaWxsT3B0aW9uKTtcbiAgICBpZiAoZmlsbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGZpbGwgPSAhIW9wdGlvbnMuYmFja2dyb3VuZENvbG9yO1xuICAgIH1cbiAgICBpZiAoZmlsbCA9PT0gZmFsc2UgfHwgZmlsbCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChmaWxsID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiAnb3JpZ2luJztcbiAgICB9XG4gICAgcmV0dXJuIGZpbGw7XG59XG5cbmZ1bmN0aW9uIF9idWlsZFN0YWNrTGluZShzb3VyY2UpIHtcbiAgICBjb25zdCB7IHNjYWxlICwgaW5kZXggLCBsaW5lICB9ID0gc291cmNlO1xuICAgIGNvbnN0IHBvaW50cyA9IFtdO1xuICAgIGNvbnN0IHNlZ21lbnRzID0gbGluZS5zZWdtZW50cztcbiAgICBjb25zdCBzb3VyY2VQb2ludHMgPSBsaW5lLnBvaW50cztcbiAgICBjb25zdCBsaW5lc0JlbG93ID0gZ2V0TGluZXNCZWxvdyhzY2FsZSwgaW5kZXgpO1xuICAgIGxpbmVzQmVsb3cucHVzaChfY3JlYXRlQm91bmRhcnlMaW5lKHtcbiAgICAgICAgeDogbnVsbCxcbiAgICAgICAgeTogc2NhbGUuYm90dG9tXG4gICAgfSwgbGluZSkpO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGNvbnN0IHNlZ21lbnQgPSBzZWdtZW50c1tpXTtcbiAgICAgICAgZm9yKGxldCBqID0gc2VnbWVudC5zdGFydDsgaiA8PSBzZWdtZW50LmVuZDsgaisrKXtcbiAgICAgICAgICAgIGFkZFBvaW50c0JlbG93KHBvaW50cywgc291cmNlUG9pbnRzW2pdLCBsaW5lc0JlbG93KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IExpbmVFbGVtZW50KHtcbiAgICAgICAgcG9pbnRzLFxuICAgICAgICBvcHRpb25zOiB7fVxuICAgIH0pO1xufVxuIGZ1bmN0aW9uIGdldExpbmVzQmVsb3coc2NhbGUsIGluZGV4KSB7XG4gICAgY29uc3QgYmVsb3cgPSBbXTtcbiAgICBjb25zdCBtZXRhcyA9IHNjYWxlLmdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKCdsaW5lJyk7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IG1ldGFzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgY29uc3QgbWV0YSA9IG1ldGFzW2ldO1xuICAgICAgICBpZiAobWV0YS5pbmRleCA9PT0gaW5kZXgpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbWV0YS5oaWRkZW4pIHtcbiAgICAgICAgICAgIGJlbG93LnVuc2hpZnQobWV0YS5kYXRhc2V0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYmVsb3c7XG59XG4gZnVuY3Rpb24gYWRkUG9pbnRzQmVsb3cocG9pbnRzLCBzb3VyY2VQb2ludCwgbGluZXNCZWxvdykge1xuICAgIGNvbnN0IHBvc3Rwb25lZCA9IFtdO1xuICAgIGZvcihsZXQgaiA9IDA7IGogPCBsaW5lc0JlbG93Lmxlbmd0aDsgaisrKXtcbiAgICAgICAgY29uc3QgbGluZSA9IGxpbmVzQmVsb3dbal07XG4gICAgICAgIGNvbnN0IHsgZmlyc3QgLCBsYXN0ICwgcG9pbnQgIH0gPSBmaW5kUG9pbnQobGluZSwgc291cmNlUG9pbnQsICd4Jyk7XG4gICAgICAgIGlmICghcG9pbnQgfHwgZmlyc3QgJiYgbGFzdCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpcnN0KSB7XG4gICAgICAgICAgICBwb3N0cG9uZWQudW5zaGlmdChwb2ludCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwb2ludHMucHVzaChwb2ludCk7XG4gICAgICAgICAgICBpZiAoIWxhc3QpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBwb2ludHMucHVzaCguLi5wb3N0cG9uZWQpO1xufVxuIGZ1bmN0aW9uIGZpbmRQb2ludChsaW5lLCBzb3VyY2VQb2ludCwgcHJvcGVydHkpIHtcbiAgICBjb25zdCBwb2ludCA9IGxpbmUuaW50ZXJwb2xhdGUoc291cmNlUG9pbnQsIHByb3BlcnR5KTtcbiAgICBpZiAoIXBvaW50KSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgY29uc3QgcG9pbnRWYWx1ZSA9IHBvaW50W3Byb3BlcnR5XTtcbiAgICBjb25zdCBzZWdtZW50cyA9IGxpbmUuc2VnbWVudHM7XG4gICAgY29uc3QgbGluZVBvaW50cyA9IGxpbmUucG9pbnRzO1xuICAgIGxldCBmaXJzdCA9IGZhbHNlO1xuICAgIGxldCBsYXN0ID0gZmFsc2U7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgY29uc3Qgc2VnbWVudCA9IHNlZ21lbnRzW2ldO1xuICAgICAgICBjb25zdCBmaXJzdFZhbHVlID0gbGluZVBvaW50c1tzZWdtZW50LnN0YXJ0XVtwcm9wZXJ0eV07XG4gICAgICAgIGNvbnN0IGxhc3RWYWx1ZSA9IGxpbmVQb2ludHNbc2VnbWVudC5lbmRdW3Byb3BlcnR5XTtcbiAgICAgICAgaWYgKF9pc0JldHdlZW4ocG9pbnRWYWx1ZSwgZmlyc3RWYWx1ZSwgbGFzdFZhbHVlKSkge1xuICAgICAgICAgICAgZmlyc3QgPSBwb2ludFZhbHVlID09PSBmaXJzdFZhbHVlO1xuICAgICAgICAgICAgbGFzdCA9IHBvaW50VmFsdWUgPT09IGxhc3RWYWx1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGZpcnN0LFxuICAgICAgICBsYXN0LFxuICAgICAgICBwb2ludFxuICAgIH07XG59XG5cbmNsYXNzIHNpbXBsZUFyYyB7XG4gICAgY29uc3RydWN0b3Iob3B0cyl7XG4gICAgICAgIHRoaXMueCA9IG9wdHMueDtcbiAgICAgICAgdGhpcy55ID0gb3B0cy55O1xuICAgICAgICB0aGlzLnJhZGl1cyA9IG9wdHMucmFkaXVzO1xuICAgIH1cbiAgICBwYXRoU2VnbWVudChjdHgsIGJvdW5kcywgb3B0cykge1xuICAgICAgICBjb25zdCB7IHggLCB5ICwgcmFkaXVzICB9ID0gdGhpcztcbiAgICAgICAgYm91bmRzID0gYm91bmRzIHx8IHtcbiAgICAgICAgICAgIHN0YXJ0OiAwLFxuICAgICAgICAgICAgZW5kOiBUQVVcbiAgICAgICAgfTtcbiAgICAgICAgY3R4LmFyYyh4LCB5LCByYWRpdXMsIGJvdW5kcy5lbmQsIGJvdW5kcy5zdGFydCwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiAhb3B0cy5ib3VuZHM7XG4gICAgfVxuICAgIGludGVycG9sYXRlKHBvaW50KSB7XG4gICAgICAgIGNvbnN0IHsgeCAsIHkgLCByYWRpdXMgIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBhbmdsZSA9IHBvaW50LmFuZ2xlO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogeCArIE1hdGguY29zKGFuZ2xlKSAqIHJhZGl1cyxcbiAgICAgICAgICAgIHk6IHkgKyBNYXRoLnNpbihhbmdsZSkgKiByYWRpdXMsXG4gICAgICAgICAgICBhbmdsZVxuICAgICAgICB9O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gX2dldFRhcmdldChzb3VyY2UpIHtcbiAgICBjb25zdCB7IGNoYXJ0ICwgZmlsbCAsIGxpbmUgIH0gPSBzb3VyY2U7XG4gICAgaWYgKGlzTnVtYmVyRmluaXRlKGZpbGwpKSB7XG4gICAgICAgIHJldHVybiBnZXRMaW5lQnlJbmRleChjaGFydCwgZmlsbCk7XG4gICAgfVxuICAgIGlmIChmaWxsID09PSAnc3RhY2snKSB7XG4gICAgICAgIHJldHVybiBfYnVpbGRTdGFja0xpbmUoc291cmNlKTtcbiAgICB9XG4gICAgaWYgKGZpbGwgPT09ICdzaGFwZScpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNvbnN0IGJvdW5kYXJ5ID0gY29tcHV0ZUJvdW5kYXJ5KHNvdXJjZSk7XG4gICAgaWYgKGJvdW5kYXJ5IGluc3RhbmNlb2Ygc2ltcGxlQXJjKSB7XG4gICAgICAgIHJldHVybiBib3VuZGFyeTtcbiAgICB9XG4gICAgcmV0dXJuIF9jcmVhdGVCb3VuZGFyeUxpbmUoYm91bmRhcnksIGxpbmUpO1xufVxuIGZ1bmN0aW9uIGdldExpbmVCeUluZGV4KGNoYXJ0LCBpbmRleCkge1xuICAgIGNvbnN0IG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YShpbmRleCk7XG4gICAgY29uc3QgdmlzaWJsZSA9IG1ldGEgJiYgY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpbmRleCk7XG4gICAgcmV0dXJuIHZpc2libGUgPyBtZXRhLmRhdGFzZXQgOiBudWxsO1xufVxuZnVuY3Rpb24gY29tcHV0ZUJvdW5kYXJ5KHNvdXJjZSkge1xuICAgIGNvbnN0IHNjYWxlID0gc291cmNlLnNjYWxlIHx8IHt9O1xuICAgIGlmIChzY2FsZS5nZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGNvbXB1dGVDaXJjdWxhckJvdW5kYXJ5KHNvdXJjZSk7XG4gICAgfVxuICAgIHJldHVybiBjb21wdXRlTGluZWFyQm91bmRhcnkoc291cmNlKTtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVMaW5lYXJCb3VuZGFyeShzb3VyY2UpIHtcbiAgICBjb25zdCB7IHNjYWxlID17fSAsIGZpbGwgIH0gPSBzb3VyY2U7XG4gICAgY29uc3QgcGl4ZWwgPSBfZ2V0VGFyZ2V0UGl4ZWwoZmlsbCwgc2NhbGUpO1xuICAgIGlmIChpc051bWJlckZpbml0ZShwaXhlbCkpIHtcbiAgICAgICAgY29uc3QgaG9yaXpvbnRhbCA9IHNjYWxlLmlzSG9yaXpvbnRhbCgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogaG9yaXpvbnRhbCA/IHBpeGVsIDogbnVsbCxcbiAgICAgICAgICAgIHk6IGhvcml6b250YWwgPyBudWxsIDogcGl4ZWxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBjb21wdXRlQ2lyY3VsYXJCb3VuZGFyeShzb3VyY2UpIHtcbiAgICBjb25zdCB7IHNjYWxlICwgZmlsbCAgfSA9IHNvdXJjZTtcbiAgICBjb25zdCBvcHRpb25zID0gc2NhbGUub3B0aW9ucztcbiAgICBjb25zdCBsZW5ndGggPSBzY2FsZS5nZXRMYWJlbHMoKS5sZW5ndGg7XG4gICAgY29uc3Qgc3RhcnQgPSBvcHRpb25zLnJldmVyc2UgPyBzY2FsZS5tYXggOiBzY2FsZS5taW47XG4gICAgY29uc3QgdmFsdWUgPSBfZ2V0VGFyZ2V0VmFsdWUoZmlsbCwgc2NhbGUsIHN0YXJ0KTtcbiAgICBjb25zdCB0YXJnZXQgPSBbXTtcbiAgICBpZiAob3B0aW9ucy5ncmlkLmNpcmN1bGFyKSB7XG4gICAgICAgIGNvbnN0IGNlbnRlciA9IHNjYWxlLmdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZSgwLCBzdGFydCk7XG4gICAgICAgIHJldHVybiBuZXcgc2ltcGxlQXJjKHtcbiAgICAgICAgICAgIHg6IGNlbnRlci54LFxuICAgICAgICAgICAgeTogY2VudGVyLnksXG4gICAgICAgICAgICByYWRpdXM6IHNjYWxlLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHZhbHVlKVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKXtcbiAgICAgICAgdGFyZ2V0LnB1c2goc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlKGksIHZhbHVlKSk7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF9kcmF3ZmlsbChjdHgsIHNvdXJjZSwgYXJlYSkge1xuICAgIGNvbnN0IHRhcmdldCA9IF9nZXRUYXJnZXQoc291cmNlKTtcbiAgICBjb25zdCB7IGxpbmUgLCBzY2FsZSAsIGF4aXMgIH0gPSBzb3VyY2U7XG4gICAgY29uc3QgbGluZU9wdHMgPSBsaW5lLm9wdGlvbnM7XG4gICAgY29uc3QgZmlsbE9wdGlvbiA9IGxpbmVPcHRzLmZpbGw7XG4gICAgY29uc3QgY29sb3IgPSBsaW5lT3B0cy5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgY29uc3QgeyBhYm92ZSA9Y29sb3IgLCBiZWxvdyA9Y29sb3IgIH0gPSBmaWxsT3B0aW9uIHx8IHt9O1xuICAgIGlmICh0YXJnZXQgJiYgbGluZS5wb2ludHMubGVuZ3RoKSB7XG4gICAgICAgIGNsaXBBcmVhKGN0eCwgYXJlYSk7XG4gICAgICAgIGRvRmlsbChjdHgsIHtcbiAgICAgICAgICAgIGxpbmUsXG4gICAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgICBhYm92ZSxcbiAgICAgICAgICAgIGJlbG93LFxuICAgICAgICAgICAgYXJlYSxcbiAgICAgICAgICAgIHNjYWxlLFxuICAgICAgICAgICAgYXhpc1xuICAgICAgICB9KTtcbiAgICAgICAgdW5jbGlwQXJlYShjdHgpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRvRmlsbChjdHgsIGNmZykge1xuICAgIGNvbnN0IHsgbGluZSAsIHRhcmdldCAsIGFib3ZlICwgYmVsb3cgLCBhcmVhICwgc2NhbGUgIH0gPSBjZmc7XG4gICAgY29uc3QgcHJvcGVydHkgPSBsaW5lLl9sb29wID8gJ2FuZ2xlJyA6IGNmZy5heGlzO1xuICAgIGN0eC5zYXZlKCk7XG4gICAgaWYgKHByb3BlcnR5ID09PSAneCcgJiYgYmVsb3cgIT09IGFib3ZlKSB7XG4gICAgICAgIGNsaXBWZXJ0aWNhbChjdHgsIHRhcmdldCwgYXJlYS50b3ApO1xuICAgICAgICBmaWxsKGN0eCwge1xuICAgICAgICAgICAgbGluZSxcbiAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICAgIGNvbG9yOiBhYm92ZSxcbiAgICAgICAgICAgIHNjYWxlLFxuICAgICAgICAgICAgcHJvcGVydHlcbiAgICAgICAgfSk7XG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIGNsaXBWZXJ0aWNhbChjdHgsIHRhcmdldCwgYXJlYS5ib3R0b20pO1xuICAgIH1cbiAgICBmaWxsKGN0eCwge1xuICAgICAgICBsaW5lLFxuICAgICAgICB0YXJnZXQsXG4gICAgICAgIGNvbG9yOiBiZWxvdyxcbiAgICAgICAgc2NhbGUsXG4gICAgICAgIHByb3BlcnR5XG4gICAgfSk7XG4gICAgY3R4LnJlc3RvcmUoKTtcbn1cbmZ1bmN0aW9uIGNsaXBWZXJ0aWNhbChjdHgsIHRhcmdldCwgY2xpcFkpIHtcbiAgICBjb25zdCB7IHNlZ21lbnRzICwgcG9pbnRzICB9ID0gdGFyZ2V0O1xuICAgIGxldCBmaXJzdCA9IHRydWU7XG4gICAgbGV0IGxpbmVMb29wID0gZmFsc2U7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGZvciAoY29uc3Qgc2VnbWVudCBvZiBzZWdtZW50cyl7XG4gICAgICAgIGNvbnN0IHsgc3RhcnQgLCBlbmQgIH0gPSBzZWdtZW50O1xuICAgICAgICBjb25zdCBmaXJzdFBvaW50ID0gcG9pbnRzW3N0YXJ0XTtcbiAgICAgICAgY29uc3QgbGFzdFBvaW50ID0gcG9pbnRzW19maW5kU2VnbWVudEVuZChzdGFydCwgZW5kLCBwb2ludHMpXTtcbiAgICAgICAgaWYgKGZpcnN0KSB7XG4gICAgICAgICAgICBjdHgubW92ZVRvKGZpcnN0UG9pbnQueCwgZmlyc3RQb2ludC55KTtcbiAgICAgICAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjdHgubGluZVRvKGZpcnN0UG9pbnQueCwgY2xpcFkpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyhmaXJzdFBvaW50LngsIGZpcnN0UG9pbnQueSk7XG4gICAgICAgIH1cbiAgICAgICAgbGluZUxvb3AgPSAhIXRhcmdldC5wYXRoU2VnbWVudChjdHgsIHNlZ21lbnQsIHtcbiAgICAgICAgICAgIG1vdmU6IGxpbmVMb29wXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAobGluZUxvb3ApIHtcbiAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN0eC5saW5lVG8obGFzdFBvaW50LngsIGNsaXBZKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjdHgubGluZVRvKHRhcmdldC5maXJzdCgpLngsIGNsaXBZKTtcbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgY3R4LmNsaXAoKTtcbn1cbmZ1bmN0aW9uIGZpbGwoY3R4LCBjZmcpIHtcbiAgICBjb25zdCB7IGxpbmUgLCB0YXJnZXQgLCBwcm9wZXJ0eSAsIGNvbG9yICwgc2NhbGUgIH0gPSBjZmc7XG4gICAgY29uc3Qgc2VnbWVudHMgPSBfc2VnbWVudHMobGluZSwgdGFyZ2V0LCBwcm9wZXJ0eSk7XG4gICAgZm9yIChjb25zdCB7IHNvdXJjZTogc3JjICwgdGFyZ2V0OiB0Z3QgLCBzdGFydCAsIGVuZCAgfSBvZiBzZWdtZW50cyl7XG4gICAgICAgIGNvbnN0IHsgc3R5bGU6IHsgYmFja2dyb3VuZENvbG9yID1jb2xvciAgfSA9IHt9ICB9ID0gc3JjO1xuICAgICAgICBjb25zdCBub3RTaGFwZSA9IHRhcmdldCAhPT0gdHJ1ZTtcbiAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgY2xpcEJvdW5kcyhjdHgsIHNjYWxlLCBub3RTaGFwZSAmJiBfZ2V0Qm91bmRzKHByb3BlcnR5LCBzdGFydCwgZW5kKSk7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY29uc3QgbGluZUxvb3AgPSAhIWxpbmUucGF0aFNlZ21lbnQoY3R4LCBzcmMpO1xuICAgICAgICBsZXQgbG9vcDtcbiAgICAgICAgaWYgKG5vdFNoYXBlKSB7XG4gICAgICAgICAgICBpZiAobGluZUxvb3ApIHtcbiAgICAgICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGludGVycG9sYXRlZExpbmVUbyhjdHgsIHRhcmdldCwgZW5kLCBwcm9wZXJ0eSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB0YXJnZXRMb29wID0gISF0YXJnZXQucGF0aFNlZ21lbnQoY3R4LCB0Z3QsIHtcbiAgICAgICAgICAgICAgICBtb3ZlOiBsaW5lTG9vcCxcbiAgICAgICAgICAgICAgICByZXZlcnNlOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxvb3AgPSBsaW5lTG9vcCAmJiB0YXJnZXRMb29wO1xuICAgICAgICAgICAgaWYgKCFsb29wKSB7XG4gICAgICAgICAgICAgICAgaW50ZXJwb2xhdGVkTGluZVRvKGN0eCwgdGFyZ2V0LCBzdGFydCwgcHJvcGVydHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgY3R4LmZpbGwobG9vcCA/ICdldmVub2RkJyA6ICdub256ZXJvJyk7XG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gY2xpcEJvdW5kcyhjdHgsIHNjYWxlLCBib3VuZHMpIHtcbiAgICBjb25zdCB7IHRvcCAsIGJvdHRvbSAgfSA9IHNjYWxlLmNoYXJ0LmNoYXJ0QXJlYTtcbiAgICBjb25zdCB7IHByb3BlcnR5ICwgc3RhcnQgLCBlbmQgIH0gPSBib3VuZHMgfHwge307XG4gICAgaWYgKHByb3BlcnR5ID09PSAneCcpIHtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHgucmVjdChzdGFydCwgdG9wLCBlbmQgLSBzdGFydCwgYm90dG9tIC0gdG9wKTtcbiAgICAgICAgY3R4LmNsaXAoKTtcbiAgICB9XG59XG5mdW5jdGlvbiBpbnRlcnBvbGF0ZWRMaW5lVG8oY3R4LCB0YXJnZXQsIHBvaW50LCBwcm9wZXJ0eSkge1xuICAgIGNvbnN0IGludGVycG9sYXRlZFBvaW50ID0gdGFyZ2V0LmludGVycG9sYXRlKHBvaW50LCBwcm9wZXJ0eSk7XG4gICAgaWYgKGludGVycG9sYXRlZFBvaW50KSB7XG4gICAgICAgIGN0eC5saW5lVG8oaW50ZXJwb2xhdGVkUG9pbnQueCwgaW50ZXJwb2xhdGVkUG9pbnQueSk7XG4gICAgfVxufVxuXG52YXIgaW5kZXggPSB7XG4gICAgaWQ6ICdmaWxsZXInLFxuICAgIGFmdGVyRGF0YXNldHNVcGRhdGUgKGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBjb3VudCA9IChjaGFydC5kYXRhLmRhdGFzZXRzIHx8IFtdKS5sZW5ndGg7XG4gICAgICAgIGNvbnN0IHNvdXJjZXMgPSBbXTtcbiAgICAgICAgbGV0IG1ldGEsIGksIGxpbmUsIHNvdXJjZTtcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgY291bnQ7ICsraSl7XG4gICAgICAgICAgICBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoaSk7XG4gICAgICAgICAgICBsaW5lID0gbWV0YS5kYXRhc2V0O1xuICAgICAgICAgICAgc291cmNlID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChsaW5lICYmIGxpbmUub3B0aW9ucyAmJiBsaW5lIGluc3RhbmNlb2YgTGluZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBzb3VyY2UgPSB7XG4gICAgICAgICAgICAgICAgICAgIHZpc2libGU6IGNoYXJ0LmlzRGF0YXNldFZpc2libGUoaSksXG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiBpLFxuICAgICAgICAgICAgICAgICAgICBmaWxsOiBfZGVjb2RlRmlsbChsaW5lLCBpLCBjb3VudCksXG4gICAgICAgICAgICAgICAgICAgIGNoYXJ0LFxuICAgICAgICAgICAgICAgICAgICBheGlzOiBtZXRhLmNvbnRyb2xsZXIub3B0aW9ucy5pbmRleEF4aXMsXG4gICAgICAgICAgICAgICAgICAgIHNjYWxlOiBtZXRhLnZTY2FsZSxcbiAgICAgICAgICAgICAgICAgICAgbGluZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtZXRhLiRmaWxsZXIgPSBzb3VyY2U7XG4gICAgICAgICAgICBzb3VyY2VzLnB1c2goc291cmNlKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IoaSA9IDA7IGkgPCBjb3VudDsgKytpKXtcbiAgICAgICAgICAgIHNvdXJjZSA9IHNvdXJjZXNbaV07XG4gICAgICAgICAgICBpZiAoIXNvdXJjZSB8fCBzb3VyY2UuZmlsbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNvdXJjZS5maWxsID0gX3Jlc29sdmVUYXJnZXQoc291cmNlcywgaSwgb3B0aW9ucy5wcm9wYWdhdGUpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBiZWZvcmVEcmF3IChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgZHJhdyA9IG9wdGlvbnMuZHJhd1RpbWUgPT09ICdiZWZvcmVEcmF3JztcbiAgICAgICAgY29uc3QgbWV0YXNldHMgPSBjaGFydC5nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCk7XG4gICAgICAgIGNvbnN0IGFyZWEgPSBjaGFydC5jaGFydEFyZWE7XG4gICAgICAgIGZvcihsZXQgaSA9IG1ldGFzZXRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKXtcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IG1ldGFzZXRzW2ldLiRmaWxsZXI7XG4gICAgICAgICAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc291cmNlLmxpbmUudXBkYXRlQ29udHJvbFBvaW50cyhhcmVhLCBzb3VyY2UuYXhpcyk7XG4gICAgICAgICAgICBpZiAoZHJhdyAmJiBzb3VyY2UuZmlsbCkge1xuICAgICAgICAgICAgICAgIF9kcmF3ZmlsbChjaGFydC5jdHgsIHNvdXJjZSwgYXJlYSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGJlZm9yZURhdGFzZXRzRHJhdyAoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmRyYXdUaW1lICE9PSAnYmVmb3JlRGF0YXNldHNEcmF3Jykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGFzZXRzID0gY2hhcnQuZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpO1xuICAgICAgICBmb3IobGV0IGkgPSBtZXRhc2V0cy5sZW5ndGggLSAxOyBpID49IDA7IC0taSl7XG4gICAgICAgICAgICBjb25zdCBzb3VyY2UgPSBtZXRhc2V0c1tpXS4kZmlsbGVyO1xuICAgICAgICAgICAgaWYgKF9zaG91bGRBcHBseUZpbGwoc291cmNlKSkge1xuICAgICAgICAgICAgICAgIF9kcmF3ZmlsbChjaGFydC5jdHgsIHNvdXJjZSwgY2hhcnQuY2hhcnRBcmVhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgYmVmb3JlRGF0YXNldERyYXcgKGNoYXJ0LCBhcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHNvdXJjZSA9IGFyZ3MubWV0YS4kZmlsbGVyO1xuICAgICAgICBpZiAoIV9zaG91bGRBcHBseUZpbGwoc291cmNlKSB8fCBvcHRpb25zLmRyYXdUaW1lICE9PSAnYmVmb3JlRGF0YXNldERyYXcnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgX2RyYXdmaWxsKGNoYXJ0LmN0eCwgc291cmNlLCBjaGFydC5jaGFydEFyZWEpO1xuICAgIH0sXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgcHJvcGFnYXRlOiB0cnVlLFxuICAgICAgICBkcmF3VGltZTogJ2JlZm9yZURhdGFzZXREcmF3J1xuICAgIH1cbn07XG5cbmNvbnN0IGdldEJveFNpemUgPSAobGFiZWxPcHRzLCBmb250U2l6ZSk9PntcbiAgICBsZXQgeyBib3hIZWlnaHQgPWZvbnRTaXplICwgYm94V2lkdGggPWZvbnRTaXplICB9ID0gbGFiZWxPcHRzO1xuICAgIGlmIChsYWJlbE9wdHMudXNlUG9pbnRTdHlsZSkge1xuICAgICAgICBib3hIZWlnaHQgPSBNYXRoLm1pbihib3hIZWlnaHQsIGZvbnRTaXplKTtcbiAgICAgICAgYm94V2lkdGggPSBsYWJlbE9wdHMucG9pbnRTdHlsZVdpZHRoIHx8IE1hdGgubWluKGJveFdpZHRoLCBmb250U2l6ZSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGJveFdpZHRoLFxuICAgICAgICBib3hIZWlnaHQsXG4gICAgICAgIGl0ZW1IZWlnaHQ6IE1hdGgubWF4KGZvbnRTaXplLCBib3hIZWlnaHQpXG4gICAgfTtcbn07XG5jb25zdCBpdGVtc0VxdWFsID0gKGEsIGIpPT5hICE9PSBudWxsICYmIGIgIT09IG51bGwgJiYgYS5kYXRhc2V0SW5kZXggPT09IGIuZGF0YXNldEluZGV4ICYmIGEuaW5kZXggPT09IGIuaW5kZXg7XG5jbGFzcyBMZWdlbmQgZXh0ZW5kcyBFbGVtZW50IHtcbiBjb25zdHJ1Y3Rvcihjb25maWcpe1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9hZGRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmxlZ2VuZEhpdEJveGVzID0gW107XG4gdGhpcy5faG92ZXJlZEl0ZW0gPSBudWxsO1xuICAgICAgICB0aGlzLmRvdWdobnV0TW9kZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNoYXJ0ID0gY29uZmlnLmNoYXJ0O1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBjb25maWcub3B0aW9ucztcbiAgICAgICAgdGhpcy5jdHggPSBjb25maWcuY3R4O1xuICAgICAgICB0aGlzLmxlZ2VuZEl0ZW1zID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmNvbHVtblNpemVzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmxpbmVXaWR0aHMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubWF4SGVpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm1heFdpZHRoID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnRvcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5ib3R0b20gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubGVmdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5yaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMud2lkdGggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX21hcmdpbnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMud2VpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmZ1bGxTaXplID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB1cGRhdGUobWF4V2lkdGgsIG1heEhlaWdodCwgbWFyZ2lucykge1xuICAgICAgICB0aGlzLm1heFdpZHRoID0gbWF4V2lkdGg7XG4gICAgICAgIHRoaXMubWF4SGVpZ2h0ID0gbWF4SGVpZ2h0O1xuICAgICAgICB0aGlzLl9tYXJnaW5zID0gbWFyZ2lucztcbiAgICAgICAgdGhpcy5zZXREaW1lbnNpb25zKCk7XG4gICAgICAgIHRoaXMuYnVpbGRMYWJlbHMoKTtcbiAgICAgICAgdGhpcy5maXQoKTtcbiAgICB9XG4gICAgc2V0RGltZW5zaW9ucygpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSB0aGlzLm1heFdpZHRoO1xuICAgICAgICAgICAgdGhpcy5sZWZ0ID0gdGhpcy5fbWFyZ2lucy5sZWZ0O1xuICAgICAgICAgICAgdGhpcy5yaWdodCA9IHRoaXMud2lkdGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMubWF4SGVpZ2h0O1xuICAgICAgICAgICAgdGhpcy50b3AgPSB0aGlzLl9tYXJnaW5zLnRvcDtcbiAgICAgICAgICAgIHRoaXMuYm90dG9tID0gdGhpcy5oZWlnaHQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYnVpbGRMYWJlbHMoKSB7XG4gICAgICAgIGNvbnN0IGxhYmVsT3B0cyA9IHRoaXMub3B0aW9ucy5sYWJlbHMgfHwge307XG4gICAgICAgIGxldCBsZWdlbmRJdGVtcyA9IGNhbGxiYWNrKGxhYmVsT3B0cy5nZW5lcmF0ZUxhYmVscywgW1xuICAgICAgICAgICAgdGhpcy5jaGFydFxuICAgICAgICBdLCB0aGlzKSB8fCBbXTtcbiAgICAgICAgaWYgKGxhYmVsT3B0cy5maWx0ZXIpIHtcbiAgICAgICAgICAgIGxlZ2VuZEl0ZW1zID0gbGVnZW5kSXRlbXMuZmlsdGVyKChpdGVtKT0+bGFiZWxPcHRzLmZpbHRlcihpdGVtLCB0aGlzLmNoYXJ0LmRhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGFiZWxPcHRzLnNvcnQpIHtcbiAgICAgICAgICAgIGxlZ2VuZEl0ZW1zID0gbGVnZW5kSXRlbXMuc29ydCgoYSwgYik9PmxhYmVsT3B0cy5zb3J0KGEsIGIsIHRoaXMuY2hhcnQuZGF0YSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucmV2ZXJzZSkge1xuICAgICAgICAgICAgbGVnZW5kSXRlbXMucmV2ZXJzZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGVnZW5kSXRlbXMgPSBsZWdlbmRJdGVtcztcbiAgICB9XG4gICAgZml0KCkge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnMgLCBjdHggIH0gPSB0aGlzO1xuICAgICAgICBpZiAoIW9wdGlvbnMuZGlzcGxheSkge1xuICAgICAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMuaGVpZ2h0ID0gMDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYWJlbE9wdHMgPSBvcHRpb25zLmxhYmVscztcbiAgICAgICAgY29uc3QgbGFiZWxGb250ID0gdG9Gb250KGxhYmVsT3B0cy5mb250KTtcbiAgICAgICAgY29uc3QgZm9udFNpemUgPSBsYWJlbEZvbnQuc2l6ZTtcbiAgICAgICAgY29uc3QgdGl0bGVIZWlnaHQgPSB0aGlzLl9jb21wdXRlVGl0bGVIZWlnaHQoKTtcbiAgICAgICAgY29uc3QgeyBib3hXaWR0aCAsIGl0ZW1IZWlnaHQgIH0gPSBnZXRCb3hTaXplKGxhYmVsT3B0cywgZm9udFNpemUpO1xuICAgICAgICBsZXQgd2lkdGgsIGhlaWdodDtcbiAgICAgICAgY3R4LmZvbnQgPSBsYWJlbEZvbnQuc3RyaW5nO1xuICAgICAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgd2lkdGggPSB0aGlzLm1heFdpZHRoO1xuICAgICAgICAgICAgaGVpZ2h0ID0gdGhpcy5fZml0Um93cyh0aXRsZUhlaWdodCwgZm9udFNpemUsIGJveFdpZHRoLCBpdGVtSGVpZ2h0KSArIDEwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGVpZ2h0ID0gdGhpcy5tYXhIZWlnaHQ7XG4gICAgICAgICAgICB3aWR0aCA9IHRoaXMuX2ZpdENvbHModGl0bGVIZWlnaHQsIGxhYmVsRm9udCwgYm94V2lkdGgsIGl0ZW1IZWlnaHQpICsgMTA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy53aWR0aCA9IE1hdGgubWluKHdpZHRoLCBvcHRpb25zLm1heFdpZHRoIHx8IHRoaXMubWF4V2lkdGgpO1xuICAgICAgICB0aGlzLmhlaWdodCA9IE1hdGgubWluKGhlaWdodCwgb3B0aW9ucy5tYXhIZWlnaHQgfHwgdGhpcy5tYXhIZWlnaHQpO1xuICAgIH1cbiBfZml0Um93cyh0aXRsZUhlaWdodCwgZm9udFNpemUsIGJveFdpZHRoLCBpdGVtSGVpZ2h0KSB7XG4gICAgICAgIGNvbnN0IHsgY3R4ICwgbWF4V2lkdGggLCBvcHRpb25zOiB7IGxhYmVsczogeyBwYWRkaW5nICB9ICB9ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgaGl0Ym94ZXMgPSB0aGlzLmxlZ2VuZEhpdEJveGVzID0gW107XG4gICAgICAgIGNvbnN0IGxpbmVXaWR0aHMgPSB0aGlzLmxpbmVXaWR0aHMgPSBbXG4gICAgICAgICAgICAwXG4gICAgICAgIF07XG4gICAgICAgIGNvbnN0IGxpbmVIZWlnaHQgPSBpdGVtSGVpZ2h0ICsgcGFkZGluZztcbiAgICAgICAgbGV0IHRvdGFsSGVpZ2h0ID0gdGl0bGVIZWlnaHQ7XG4gICAgICAgIGN0eC50ZXh0QWxpZ24gPSAnbGVmdCc7XG4gICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICAgICAgbGV0IHJvdyA9IC0xO1xuICAgICAgICBsZXQgdG9wID0gLWxpbmVIZWlnaHQ7XG4gICAgICAgIHRoaXMubGVnZW5kSXRlbXMuZm9yRWFjaCgobGVnZW5kSXRlbSwgaSk9PntcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1XaWR0aCA9IGJveFdpZHRoICsgZm9udFNpemUgLyAyICsgY3R4Lm1lYXN1cmVUZXh0KGxlZ2VuZEl0ZW0udGV4dCkud2lkdGg7XG4gICAgICAgICAgICBpZiAoaSA9PT0gMCB8fCBsaW5lV2lkdGhzW2xpbmVXaWR0aHMubGVuZ3RoIC0gMV0gKyBpdGVtV2lkdGggKyAyICogcGFkZGluZyA+IG1heFdpZHRoKSB7XG4gICAgICAgICAgICAgICAgdG90YWxIZWlnaHQgKz0gbGluZUhlaWdodDtcbiAgICAgICAgICAgICAgICBsaW5lV2lkdGhzW2xpbmVXaWR0aHMubGVuZ3RoIC0gKGkgPiAwID8gMCA6IDEpXSA9IDA7XG4gICAgICAgICAgICAgICAgdG9wICs9IGxpbmVIZWlnaHQ7XG4gICAgICAgICAgICAgICAgcm93Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoaXRib3hlc1tpXSA9IHtcbiAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgIHRvcCxcbiAgICAgICAgICAgICAgICByb3csXG4gICAgICAgICAgICAgICAgd2lkdGg6IGl0ZW1XaWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGl0ZW1IZWlnaHRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBsaW5lV2lkdGhzW2xpbmVXaWR0aHMubGVuZ3RoIC0gMV0gKz0gaXRlbVdpZHRoICsgcGFkZGluZztcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0b3RhbEhlaWdodDtcbiAgICB9XG4gICAgX2ZpdENvbHModGl0bGVIZWlnaHQsIGxhYmVsRm9udCwgYm94V2lkdGgsIF9pdGVtSGVpZ2h0KSB7XG4gICAgICAgIGNvbnN0IHsgY3R4ICwgbWF4SGVpZ2h0ICwgb3B0aW9uczogeyBsYWJlbHM6IHsgcGFkZGluZyAgfSAgfSAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGhpdGJveGVzID0gdGhpcy5sZWdlbmRIaXRCb3hlcyA9IFtdO1xuICAgICAgICBjb25zdCBjb2x1bW5TaXplcyA9IHRoaXMuY29sdW1uU2l6ZXMgPSBbXTtcbiAgICAgICAgY29uc3QgaGVpZ2h0TGltaXQgPSBtYXhIZWlnaHQgLSB0aXRsZUhlaWdodDtcbiAgICAgICAgbGV0IHRvdGFsV2lkdGggPSBwYWRkaW5nO1xuICAgICAgICBsZXQgY3VycmVudENvbFdpZHRoID0gMDtcbiAgICAgICAgbGV0IGN1cnJlbnRDb2xIZWlnaHQgPSAwO1xuICAgICAgICBsZXQgbGVmdCA9IDA7XG4gICAgICAgIGxldCBjb2wgPSAwO1xuICAgICAgICB0aGlzLmxlZ2VuZEl0ZW1zLmZvckVhY2goKGxlZ2VuZEl0ZW0sIGkpPT57XG4gICAgICAgICAgICBjb25zdCB7IGl0ZW1XaWR0aCAsIGl0ZW1IZWlnaHQgIH0gPSBjYWxjdWxhdGVJdGVtU2l6ZShib3hXaWR0aCwgbGFiZWxGb250LCBjdHgsIGxlZ2VuZEl0ZW0sIF9pdGVtSGVpZ2h0KTtcbiAgICAgICAgICAgIGlmIChpID4gMCAmJiBjdXJyZW50Q29sSGVpZ2h0ICsgaXRlbUhlaWdodCArIDIgKiBwYWRkaW5nID4gaGVpZ2h0TGltaXQpIHtcbiAgICAgICAgICAgICAgICB0b3RhbFdpZHRoICs9IGN1cnJlbnRDb2xXaWR0aCArIHBhZGRpbmc7XG4gICAgICAgICAgICAgICAgY29sdW1uU2l6ZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBjdXJyZW50Q29sV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogY3VycmVudENvbEhlaWdodFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGxlZnQgKz0gY3VycmVudENvbFdpZHRoICsgcGFkZGluZztcbiAgICAgICAgICAgICAgICBjb2wrKztcbiAgICAgICAgICAgICAgICBjdXJyZW50Q29sV2lkdGggPSBjdXJyZW50Q29sSGVpZ2h0ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhpdGJveGVzW2ldID0ge1xuICAgICAgICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgICAgICAgdG9wOiBjdXJyZW50Q29sSGVpZ2h0LFxuICAgICAgICAgICAgICAgIGNvbCxcbiAgICAgICAgICAgICAgICB3aWR0aDogaXRlbVdpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogaXRlbUhlaWdodFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGN1cnJlbnRDb2xXaWR0aCA9IE1hdGgubWF4KGN1cnJlbnRDb2xXaWR0aCwgaXRlbVdpZHRoKTtcbiAgICAgICAgICAgIGN1cnJlbnRDb2xIZWlnaHQgKz0gaXRlbUhlaWdodCArIHBhZGRpbmc7XG4gICAgICAgIH0pO1xuICAgICAgICB0b3RhbFdpZHRoICs9IGN1cnJlbnRDb2xXaWR0aDtcbiAgICAgICAgY29sdW1uU2l6ZXMucHVzaCh7XG4gICAgICAgICAgICB3aWR0aDogY3VycmVudENvbFdpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiBjdXJyZW50Q29sSGVpZ2h0XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdG90YWxXaWR0aDtcbiAgICB9XG4gICAgYWRqdXN0SGl0Qm94ZXMoKSB7XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0aXRsZUhlaWdodCA9IHRoaXMuX2NvbXB1dGVUaXRsZUhlaWdodCgpO1xuICAgICAgICBjb25zdCB7IGxlZ2VuZEhpdEJveGVzOiBoaXRib3hlcyAsIG9wdGlvbnM6IHsgYWxpZ24gLCBsYWJlbHM6IHsgcGFkZGluZyAgfSAsIHJ0bCAgfSAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHJ0bEhlbHBlciA9IGdldFJ0bEFkYXB0ZXIocnRsLCB0aGlzLmxlZnQsIHRoaXMud2lkdGgpO1xuICAgICAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgbGV0IHJvdyA9IDA7XG4gICAgICAgICAgICBsZXQgbGVmdCA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0aGlzLmxlZnQgKyBwYWRkaW5nLCB0aGlzLnJpZ2h0IC0gdGhpcy5saW5lV2lkdGhzW3Jvd10pO1xuICAgICAgICAgICAgZm9yIChjb25zdCBoaXRib3ggb2YgaGl0Ym94ZXMpe1xuICAgICAgICAgICAgICAgIGlmIChyb3cgIT09IGhpdGJveC5yb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgcm93ID0gaGl0Ym94LnJvdztcbiAgICAgICAgICAgICAgICAgICAgbGVmdCA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0aGlzLmxlZnQgKyBwYWRkaW5nLCB0aGlzLnJpZ2h0IC0gdGhpcy5saW5lV2lkdGhzW3Jvd10pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBoaXRib3gudG9wICs9IHRoaXMudG9wICsgdGl0bGVIZWlnaHQgKyBwYWRkaW5nO1xuICAgICAgICAgICAgICAgIGhpdGJveC5sZWZ0ID0gcnRsSGVscGVyLmxlZnRGb3JMdHIocnRsSGVscGVyLngobGVmdCksIGhpdGJveC53aWR0aCk7XG4gICAgICAgICAgICAgICAgbGVmdCArPSBoaXRib3gud2lkdGggKyBwYWRkaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IGNvbCA9IDA7XG4gICAgICAgICAgICBsZXQgdG9wID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMudG9wICsgdGl0bGVIZWlnaHQgKyBwYWRkaW5nLCB0aGlzLmJvdHRvbSAtIHRoaXMuY29sdW1uU2l6ZXNbY29sXS5oZWlnaHQpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBoaXRib3ggb2YgaGl0Ym94ZXMpe1xuICAgICAgICAgICAgICAgIGlmIChoaXRib3guY29sICE9PSBjb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgY29sID0gaGl0Ym94LmNvbDtcbiAgICAgICAgICAgICAgICAgICAgdG9wID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMudG9wICsgdGl0bGVIZWlnaHQgKyBwYWRkaW5nLCB0aGlzLmJvdHRvbSAtIHRoaXMuY29sdW1uU2l6ZXNbY29sXS5oZWlnaHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBoaXRib3gudG9wID0gdG9wO1xuICAgICAgICAgICAgICAgIGhpdGJveC5sZWZ0ICs9IHRoaXMubGVmdCArIHBhZGRpbmc7XG4gICAgICAgICAgICAgICAgaGl0Ym94LmxlZnQgPSBydGxIZWxwZXIubGVmdEZvckx0cihydGxIZWxwZXIueChoaXRib3gubGVmdCksIGhpdGJveC53aWR0aCk7XG4gICAgICAgICAgICAgICAgdG9wICs9IGhpdGJveC5oZWlnaHQgKyBwYWRkaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlzSG9yaXpvbnRhbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5wb3NpdGlvbiA9PT0gJ3RvcCcgfHwgdGhpcy5vcHRpb25zLnBvc2l0aW9uID09PSAnYm90dG9tJztcbiAgICB9XG4gICAgZHJhdygpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5kaXNwbGF5KSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICAgICAgICAgIGNsaXBBcmVhKGN0eCwgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLl9kcmF3KCk7XG4gICAgICAgICAgICB1bmNsaXBBcmVhKGN0eCk7XG4gICAgICAgIH1cbiAgICB9XG4gX2RyYXcoKSB7XG4gICAgICAgIGNvbnN0IHsgb3B0aW9uczogb3B0cyAsIGNvbHVtblNpemVzICwgbGluZVdpZHRocyAsIGN0eCAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgYWxpZ24gLCBsYWJlbHM6IGxhYmVsT3B0cyAgfSA9IG9wdHM7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRDb2xvciA9IGRlZmF1bHRzLmNvbG9yO1xuICAgICAgICBjb25zdCBydGxIZWxwZXIgPSBnZXRSdGxBZGFwdGVyKG9wdHMucnRsLCB0aGlzLmxlZnQsIHRoaXMud2lkdGgpO1xuICAgICAgICBjb25zdCBsYWJlbEZvbnQgPSB0b0ZvbnQobGFiZWxPcHRzLmZvbnQpO1xuICAgICAgICBjb25zdCB7IHBhZGRpbmcgIH0gPSBsYWJlbE9wdHM7XG4gICAgICAgIGNvbnN0IGZvbnRTaXplID0gbGFiZWxGb250LnNpemU7XG4gICAgICAgIGNvbnN0IGhhbGZGb250U2l6ZSA9IGZvbnRTaXplIC8gMjtcbiAgICAgICAgbGV0IGN1cnNvcjtcbiAgICAgICAgdGhpcy5kcmF3VGl0bGUoKTtcbiAgICAgICAgY3R4LnRleHRBbGlnbiA9IHJ0bEhlbHBlci50ZXh0QWxpZ24oJ2xlZnQnKTtcbiAgICAgICAgY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgICAgICBjdHgubGluZVdpZHRoID0gMC41O1xuICAgICAgICBjdHguZm9udCA9IGxhYmVsRm9udC5zdHJpbmc7XG4gICAgICAgIGNvbnN0IHsgYm94V2lkdGggLCBib3hIZWlnaHQgLCBpdGVtSGVpZ2h0ICB9ID0gZ2V0Qm94U2l6ZShsYWJlbE9wdHMsIGZvbnRTaXplKTtcbiAgICAgICAgY29uc3QgZHJhd0xlZ2VuZEJveCA9IGZ1bmN0aW9uKHgsIHksIGxlZ2VuZEl0ZW0pIHtcbiAgICAgICAgICAgIGlmIChpc05hTihib3hXaWR0aCkgfHwgYm94V2lkdGggPD0gMCB8fCBpc05hTihib3hIZWlnaHQpIHx8IGJveEhlaWdodCA8IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgY29uc3QgbGluZVdpZHRoID0gdmFsdWVPckRlZmF1bHQobGVnZW5kSXRlbS5saW5lV2lkdGgsIDEpO1xuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHZhbHVlT3JEZWZhdWx0KGxlZ2VuZEl0ZW0uZmlsbFN0eWxlLCBkZWZhdWx0Q29sb3IpO1xuICAgICAgICAgICAgY3R4LmxpbmVDYXAgPSB2YWx1ZU9yRGVmYXVsdChsZWdlbmRJdGVtLmxpbmVDYXAsICdidXR0Jyk7XG4gICAgICAgICAgICBjdHgubGluZURhc2hPZmZzZXQgPSB2YWx1ZU9yRGVmYXVsdChsZWdlbmRJdGVtLmxpbmVEYXNoT2Zmc2V0LCAwKTtcbiAgICAgICAgICAgIGN0eC5saW5lSm9pbiA9IHZhbHVlT3JEZWZhdWx0KGxlZ2VuZEl0ZW0ubGluZUpvaW4sICdtaXRlcicpO1xuICAgICAgICAgICAgY3R4LmxpbmVXaWR0aCA9IGxpbmVXaWR0aDtcbiAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHZhbHVlT3JEZWZhdWx0KGxlZ2VuZEl0ZW0uc3Ryb2tlU3R5bGUsIGRlZmF1bHRDb2xvcik7XG4gICAgICAgICAgICBjdHguc2V0TGluZURhc2godmFsdWVPckRlZmF1bHQobGVnZW5kSXRlbS5saW5lRGFzaCwgW10pKTtcbiAgICAgICAgICAgIGlmIChsYWJlbE9wdHMudXNlUG9pbnRTdHlsZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRyYXdPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICByYWRpdXM6IGJveEhlaWdodCAqIE1hdGguU1FSVDIgLyAyLFxuICAgICAgICAgICAgICAgICAgICBwb2ludFN0eWxlOiBsZWdlbmRJdGVtLnBvaW50U3R5bGUsXG4gICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiBsZWdlbmRJdGVtLnJvdGF0aW9uLFxuICAgICAgICAgICAgICAgICAgICBib3JkZXJXaWR0aDogbGluZVdpZHRoXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCBjZW50ZXJYID0gcnRsSGVscGVyLnhQbHVzKHgsIGJveFdpZHRoIC8gMik7XG4gICAgICAgICAgICAgICAgY29uc3QgY2VudGVyWSA9IHkgKyBoYWxmRm9udFNpemU7XG4gICAgICAgICAgICAgICAgZHJhd1BvaW50TGVnZW5kKGN0eCwgZHJhd09wdGlvbnMsIGNlbnRlclgsIGNlbnRlclksIGxhYmVsT3B0cy5wb2ludFN0eWxlV2lkdGggJiYgYm94V2lkdGgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCB5Qm94VG9wID0geSArIE1hdGgubWF4KChmb250U2l6ZSAtIGJveEhlaWdodCkgLyAyLCAwKTtcbiAgICAgICAgICAgICAgICBjb25zdCB4Qm94TGVmdCA9IHJ0bEhlbHBlci5sZWZ0Rm9yTHRyKHgsIGJveFdpZHRoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBib3JkZXJSYWRpdXMgPSB0b1RSQkxDb3JuZXJzKGxlZ2VuZEl0ZW0uYm9yZGVyUmFkaXVzKTtcbiAgICAgICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC52YWx1ZXMoYm9yZGVyUmFkaXVzKS5zb21lKCh2KT0+diAhPT0gMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkUm91bmRlZFJlY3RQYXRoKGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogeEJveExlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiB5Qm94VG9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgdzogYm94V2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBoOiBib3hIZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICByYWRpdXM6IGJvcmRlclJhZGl1c1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjdHgucmVjdCh4Qm94TGVmdCwgeUJveFRvcCwgYm94V2lkdGgsIGJveEhlaWdodCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgICAgICAgICAgaWYgKGxpbmVXaWR0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZmlsbFRleHQgPSBmdW5jdGlvbih4LCB5LCBsZWdlbmRJdGVtKSB7XG4gICAgICAgICAgICByZW5kZXJUZXh0KGN0eCwgbGVnZW5kSXRlbS50ZXh0LCB4LCB5ICsgaXRlbUhlaWdodCAvIDIsIGxhYmVsRm9udCwge1xuICAgICAgICAgICAgICAgIHN0cmlrZXRocm91Z2g6IGxlZ2VuZEl0ZW0uaGlkZGVuLFxuICAgICAgICAgICAgICAgIHRleHRBbGlnbjogcnRsSGVscGVyLnRleHRBbGlnbihsZWdlbmRJdGVtLnRleHRBbGlnbilcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBpc0hvcml6b250YWwgPSB0aGlzLmlzSG9yaXpvbnRhbCgpO1xuICAgICAgICBjb25zdCB0aXRsZUhlaWdodCA9IHRoaXMuX2NvbXB1dGVUaXRsZUhlaWdodCgpO1xuICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICBjdXJzb3IgPSB7XG4gICAgICAgICAgICAgICAgeDogX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMubGVmdCArIHBhZGRpbmcsIHRoaXMucmlnaHQgLSBsaW5lV2lkdGhzWzBdKSxcbiAgICAgICAgICAgICAgICB5OiB0aGlzLnRvcCArIHBhZGRpbmcgKyB0aXRsZUhlaWdodCxcbiAgICAgICAgICAgICAgICBsaW5lOiAwXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3Vyc29yID0ge1xuICAgICAgICAgICAgICAgIHg6IHRoaXMubGVmdCArIHBhZGRpbmcsXG4gICAgICAgICAgICAgICAgeTogX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMudG9wICsgdGl0bGVIZWlnaHQgKyBwYWRkaW5nLCB0aGlzLmJvdHRvbSAtIGNvbHVtblNpemVzWzBdLmhlaWdodCksXG4gICAgICAgICAgICAgICAgbGluZTogMFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBvdmVycmlkZVRleHREaXJlY3Rpb24odGhpcy5jdHgsIG9wdHMudGV4dERpcmVjdGlvbik7XG4gICAgICAgIGNvbnN0IGxpbmVIZWlnaHQgPSBpdGVtSGVpZ2h0ICsgcGFkZGluZztcbiAgICAgICAgdGhpcy5sZWdlbmRJdGVtcy5mb3JFYWNoKChsZWdlbmRJdGVtLCBpKT0+e1xuICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gbGVnZW5kSXRlbS5mb250Q29sb3I7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gbGVnZW5kSXRlbS5mb250Q29sb3I7XG4gICAgICAgICAgICBjb25zdCB0ZXh0V2lkdGggPSBjdHgubWVhc3VyZVRleHQobGVnZW5kSXRlbS50ZXh0KS53aWR0aDtcbiAgICAgICAgICAgIGNvbnN0IHRleHRBbGlnbiA9IHJ0bEhlbHBlci50ZXh0QWxpZ24obGVnZW5kSXRlbS50ZXh0QWxpZ24gfHwgKGxlZ2VuZEl0ZW0udGV4dEFsaWduID0gbGFiZWxPcHRzLnRleHRBbGlnbikpO1xuICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBib3hXaWR0aCArIGhhbGZGb250U2l6ZSArIHRleHRXaWR0aDtcbiAgICAgICAgICAgIGxldCB4ID0gY3Vyc29yLng7XG4gICAgICAgICAgICBsZXQgeSA9IGN1cnNvci55O1xuICAgICAgICAgICAgcnRsSGVscGVyLnNldFdpZHRoKHRoaXMud2lkdGgpO1xuICAgICAgICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgICAgIGlmIChpID4gMCAmJiB4ICsgd2lkdGggKyBwYWRkaW5nID4gdGhpcy5yaWdodCkge1xuICAgICAgICAgICAgICAgICAgICB5ID0gY3Vyc29yLnkgKz0gbGluZUhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yLmxpbmUrKztcbiAgICAgICAgICAgICAgICAgICAgeCA9IGN1cnNvci54ID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMubGVmdCArIHBhZGRpbmcsIHRoaXMucmlnaHQgLSBsaW5lV2lkdGhzW2N1cnNvci5saW5lXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChpID4gMCAmJiB5ICsgbGluZUhlaWdodCA+IHRoaXMuYm90dG9tKSB7XG4gICAgICAgICAgICAgICAgeCA9IGN1cnNvci54ID0geCArIGNvbHVtblNpemVzW2N1cnNvci5saW5lXS53aWR0aCArIHBhZGRpbmc7XG4gICAgICAgICAgICAgICAgY3Vyc29yLmxpbmUrKztcbiAgICAgICAgICAgICAgICB5ID0gY3Vyc29yLnkgPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgdGhpcy50b3AgKyB0aXRsZUhlaWdodCArIHBhZGRpbmcsIHRoaXMuYm90dG9tIC0gY29sdW1uU2l6ZXNbY3Vyc29yLmxpbmVdLmhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZWFsWCA9IHJ0bEhlbHBlci54KHgpO1xuICAgICAgICAgICAgZHJhd0xlZ2VuZEJveChyZWFsWCwgeSwgbGVnZW5kSXRlbSk7XG4gICAgICAgICAgICB4ID0gX3RleHRYKHRleHRBbGlnbiwgeCArIGJveFdpZHRoICsgaGFsZkZvbnRTaXplLCBpc0hvcml6b250YWwgPyB4ICsgd2lkdGggOiB0aGlzLnJpZ2h0LCBvcHRzLnJ0bCk7XG4gICAgICAgICAgICBmaWxsVGV4dChydGxIZWxwZXIueCh4KSwgeSwgbGVnZW5kSXRlbSk7XG4gICAgICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICAgICAgY3Vyc29yLnggKz0gd2lkdGggKyBwYWRkaW5nO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbGVnZW5kSXRlbS50ZXh0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZvbnRMaW5lSGVpZ2h0ID0gbGFiZWxGb250LmxpbmVIZWlnaHQ7XG4gICAgICAgICAgICAgICAgY3Vyc29yLnkgKz0gY2FsY3VsYXRlTGVnZW5kSXRlbUhlaWdodChsZWdlbmRJdGVtLCBmb250TGluZUhlaWdodCkgKyBwYWRkaW5nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjdXJzb3IueSArPSBsaW5lSGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmVzdG9yZVRleHREaXJlY3Rpb24odGhpcy5jdHgsIG9wdHMudGV4dERpcmVjdGlvbik7XG4gICAgfVxuIGRyYXdUaXRsZSgpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgdGl0bGVPcHRzID0gb3B0cy50aXRsZTtcbiAgICAgICAgY29uc3QgdGl0bGVGb250ID0gdG9Gb250KHRpdGxlT3B0cy5mb250KTtcbiAgICAgICAgY29uc3QgdGl0bGVQYWRkaW5nID0gdG9QYWRkaW5nKHRpdGxlT3B0cy5wYWRkaW5nKTtcbiAgICAgICAgaWYgKCF0aXRsZU9wdHMuZGlzcGxheSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJ0bEhlbHBlciA9IGdldFJ0bEFkYXB0ZXIob3B0cy5ydGwsIHRoaXMubGVmdCwgdGhpcy53aWR0aCk7XG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHRpdGxlT3B0cy5wb3NpdGlvbjtcbiAgICAgICAgY29uc3QgaGFsZkZvbnRTaXplID0gdGl0bGVGb250LnNpemUgLyAyO1xuICAgICAgICBjb25zdCB0b3BQYWRkaW5nUGx1c0hhbGZGb250U2l6ZSA9IHRpdGxlUGFkZGluZy50b3AgKyBoYWxmRm9udFNpemU7XG4gICAgICAgIGxldCB5O1xuICAgICAgICBsZXQgbGVmdCA9IHRoaXMubGVmdDtcbiAgICAgICAgbGV0IG1heFdpZHRoID0gdGhpcy53aWR0aDtcbiAgICAgICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgIG1heFdpZHRoID0gTWF0aC5tYXgoLi4udGhpcy5saW5lV2lkdGhzKTtcbiAgICAgICAgICAgIHkgPSB0aGlzLnRvcCArIHRvcFBhZGRpbmdQbHVzSGFsZkZvbnRTaXplO1xuICAgICAgICAgICAgbGVmdCA9IF9hbGlnblN0YXJ0RW5kKG9wdHMuYWxpZ24sIGxlZnQsIHRoaXMucmlnaHQgLSBtYXhXaWR0aCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBtYXhIZWlnaHQgPSB0aGlzLmNvbHVtblNpemVzLnJlZHVjZSgoYWNjLCBzaXplKT0+TWF0aC5tYXgoYWNjLCBzaXplLmhlaWdodCksIDApO1xuICAgICAgICAgICAgeSA9IHRvcFBhZGRpbmdQbHVzSGFsZkZvbnRTaXplICsgX2FsaWduU3RhcnRFbmQob3B0cy5hbGlnbiwgdGhpcy50b3AsIHRoaXMuYm90dG9tIC0gbWF4SGVpZ2h0IC0gb3B0cy5sYWJlbHMucGFkZGluZyAtIHRoaXMuX2NvbXB1dGVUaXRsZUhlaWdodCgpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB4ID0gX2FsaWduU3RhcnRFbmQocG9zaXRpb24sIGxlZnQsIGxlZnQgKyBtYXhXaWR0aCk7XG4gICAgICAgIGN0eC50ZXh0QWxpZ24gPSBydGxIZWxwZXIudGV4dEFsaWduKF90b0xlZnRSaWdodENlbnRlcihwb3NpdGlvbikpO1xuICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHRpdGxlT3B0cy5jb2xvcjtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHRpdGxlT3B0cy5jb2xvcjtcbiAgICAgICAgY3R4LmZvbnQgPSB0aXRsZUZvbnQuc3RyaW5nO1xuICAgICAgICByZW5kZXJUZXh0KGN0eCwgdGl0bGVPcHRzLnRleHQsIHgsIHksIHRpdGxlRm9udCk7XG4gICAgfVxuIF9jb21wdXRlVGl0bGVIZWlnaHQoKSB7XG4gICAgICAgIGNvbnN0IHRpdGxlT3B0cyA9IHRoaXMub3B0aW9ucy50aXRsZTtcbiAgICAgICAgY29uc3QgdGl0bGVGb250ID0gdG9Gb250KHRpdGxlT3B0cy5mb250KTtcbiAgICAgICAgY29uc3QgdGl0bGVQYWRkaW5nID0gdG9QYWRkaW5nKHRpdGxlT3B0cy5wYWRkaW5nKTtcbiAgICAgICAgcmV0dXJuIHRpdGxlT3B0cy5kaXNwbGF5ID8gdGl0bGVGb250LmxpbmVIZWlnaHQgKyB0aXRsZVBhZGRpbmcuaGVpZ2h0IDogMDtcbiAgICB9XG4gX2dldExlZ2VuZEl0ZW1BdCh4LCB5KSB7XG4gICAgICAgIGxldCBpLCBoaXRCb3gsIGxoO1xuICAgICAgICBpZiAoX2lzQmV0d2Vlbih4LCB0aGlzLmxlZnQsIHRoaXMucmlnaHQpICYmIF9pc0JldHdlZW4oeSwgdGhpcy50b3AsIHRoaXMuYm90dG9tKSkge1xuICAgICAgICAgICAgbGggPSB0aGlzLmxlZ2VuZEhpdEJveGVzO1xuICAgICAgICAgICAgZm9yKGkgPSAwOyBpIDwgbGgubGVuZ3RoOyArK2kpe1xuICAgICAgICAgICAgICAgIGhpdEJveCA9IGxoW2ldO1xuICAgICAgICAgICAgICAgIGlmIChfaXNCZXR3ZWVuKHgsIGhpdEJveC5sZWZ0LCBoaXRCb3gubGVmdCArIGhpdEJveC53aWR0aCkgJiYgX2lzQmV0d2Vlbih5LCBoaXRCb3gudG9wLCBoaXRCb3gudG9wICsgaGl0Qm94LmhlaWdodCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGVnZW5kSXRlbXNbaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiBoYW5kbGVFdmVudChlKSB7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGlmICghaXNMaXN0ZW5lZChlLnR5cGUsIG9wdHMpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaG92ZXJlZEl0ZW0gPSB0aGlzLl9nZXRMZWdlbmRJdGVtQXQoZS54LCBlLnkpO1xuICAgICAgICBpZiAoZS50eXBlID09PSAnbW91c2Vtb3ZlJyB8fCBlLnR5cGUgPT09ICdtb3VzZW91dCcpIHtcbiAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzID0gdGhpcy5faG92ZXJlZEl0ZW07XG4gICAgICAgICAgICBjb25zdCBzYW1lSXRlbSA9IGl0ZW1zRXF1YWwocHJldmlvdXMsIGhvdmVyZWRJdGVtKTtcbiAgICAgICAgICAgIGlmIChwcmV2aW91cyAmJiAhc2FtZUl0ZW0pIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhvcHRzLm9uTGVhdmUsIFtcbiAgICAgICAgICAgICAgICAgICAgZSxcbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXMsXG4gICAgICAgICAgICAgICAgICAgIHRoaXNcbiAgICAgICAgICAgICAgICBdLCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2hvdmVyZWRJdGVtID0gaG92ZXJlZEl0ZW07XG4gICAgICAgICAgICBpZiAoaG92ZXJlZEl0ZW0gJiYgIXNhbWVJdGVtKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sob3B0cy5vbkhvdmVyLCBbXG4gICAgICAgICAgICAgICAgICAgIGUsXG4gICAgICAgICAgICAgICAgICAgIGhvdmVyZWRJdGVtLFxuICAgICAgICAgICAgICAgICAgICB0aGlzXG4gICAgICAgICAgICAgICAgXSwgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoaG92ZXJlZEl0ZW0pIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKG9wdHMub25DbGljaywgW1xuICAgICAgICAgICAgICAgIGUsXG4gICAgICAgICAgICAgICAgaG92ZXJlZEl0ZW0sXG4gICAgICAgICAgICAgICAgdGhpc1xuICAgICAgICAgICAgXSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBjYWxjdWxhdGVJdGVtU2l6ZShib3hXaWR0aCwgbGFiZWxGb250LCBjdHgsIGxlZ2VuZEl0ZW0sIF9pdGVtSGVpZ2h0KSB7XG4gICAgY29uc3QgaXRlbVdpZHRoID0gY2FsY3VsYXRlSXRlbVdpZHRoKGxlZ2VuZEl0ZW0sIGJveFdpZHRoLCBsYWJlbEZvbnQsIGN0eCk7XG4gICAgY29uc3QgaXRlbUhlaWdodCA9IGNhbGN1bGF0ZUl0ZW1IZWlnaHQoX2l0ZW1IZWlnaHQsIGxlZ2VuZEl0ZW0sIGxhYmVsRm9udC5saW5lSGVpZ2h0KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBpdGVtV2lkdGgsXG4gICAgICAgIGl0ZW1IZWlnaHRcbiAgICB9O1xufVxuZnVuY3Rpb24gY2FsY3VsYXRlSXRlbVdpZHRoKGxlZ2VuZEl0ZW0sIGJveFdpZHRoLCBsYWJlbEZvbnQsIGN0eCkge1xuICAgIGxldCBsZWdlbmRJdGVtVGV4dCA9IGxlZ2VuZEl0ZW0udGV4dDtcbiAgICBpZiAobGVnZW5kSXRlbVRleHQgJiYgdHlwZW9mIGxlZ2VuZEl0ZW1UZXh0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICBsZWdlbmRJdGVtVGV4dCA9IGxlZ2VuZEl0ZW1UZXh0LnJlZHVjZSgoYSwgYik9PmEubGVuZ3RoID4gYi5sZW5ndGggPyBhIDogYik7XG4gICAgfVxuICAgIHJldHVybiBib3hXaWR0aCArIGxhYmVsRm9udC5zaXplIC8gMiArIGN0eC5tZWFzdXJlVGV4dChsZWdlbmRJdGVtVGV4dCkud2lkdGg7XG59XG5mdW5jdGlvbiBjYWxjdWxhdGVJdGVtSGVpZ2h0KF9pdGVtSGVpZ2h0LCBsZWdlbmRJdGVtLCBmb250TGluZUhlaWdodCkge1xuICAgIGxldCBpdGVtSGVpZ2h0ID0gX2l0ZW1IZWlnaHQ7XG4gICAgaWYgKHR5cGVvZiBsZWdlbmRJdGVtLnRleHQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGl0ZW1IZWlnaHQgPSBjYWxjdWxhdGVMZWdlbmRJdGVtSGVpZ2h0KGxlZ2VuZEl0ZW0sIGZvbnRMaW5lSGVpZ2h0KTtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZW1IZWlnaHQ7XG59XG5mdW5jdGlvbiBjYWxjdWxhdGVMZWdlbmRJdGVtSGVpZ2h0KGxlZ2VuZEl0ZW0sIGZvbnRMaW5lSGVpZ2h0KSB7XG4gICAgY29uc3QgbGFiZWxIZWlnaHQgPSBsZWdlbmRJdGVtLnRleHQgPyBsZWdlbmRJdGVtLnRleHQubGVuZ3RoIDogMDtcbiAgICByZXR1cm4gZm9udExpbmVIZWlnaHQgKiBsYWJlbEhlaWdodDtcbn1cbmZ1bmN0aW9uIGlzTGlzdGVuZWQodHlwZSwgb3B0cykge1xuICAgIGlmICgodHlwZSA9PT0gJ21vdXNlbW92ZScgfHwgdHlwZSA9PT0gJ21vdXNlb3V0JykgJiYgKG9wdHMub25Ib3ZlciB8fCBvcHRzLm9uTGVhdmUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAob3B0cy5vbkNsaWNrICYmICh0eXBlID09PSAnY2xpY2snIHx8IHR5cGUgPT09ICdtb3VzZXVwJykpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbnZhciBwbHVnaW5fbGVnZW5kID0ge1xuICAgIGlkOiAnbGVnZW5kJyxcbiBfZWxlbWVudDogTGVnZW5kLFxuICAgIHN0YXJ0IChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgbGVnZW5kID0gY2hhcnQubGVnZW5kID0gbmV3IExlZ2VuZCh7XG4gICAgICAgICAgICBjdHg6IGNoYXJ0LmN0eCxcbiAgICAgICAgICAgIG9wdGlvbnMsXG4gICAgICAgICAgICBjaGFydFxuICAgICAgICB9KTtcbiAgICAgICAgbGF5b3V0cy5jb25maWd1cmUoY2hhcnQsIGxlZ2VuZCwgb3B0aW9ucyk7XG4gICAgICAgIGxheW91dHMuYWRkQm94KGNoYXJ0LCBsZWdlbmQpO1xuICAgIH0sXG4gICAgc3RvcCAoY2hhcnQpIHtcbiAgICAgICAgbGF5b3V0cy5yZW1vdmVCb3goY2hhcnQsIGNoYXJ0LmxlZ2VuZCk7XG4gICAgICAgIGRlbGV0ZSBjaGFydC5sZWdlbmQ7XG4gICAgfSxcbiAgICBiZWZvcmVVcGRhdGUgKGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBsZWdlbmQgPSBjaGFydC5sZWdlbmQ7XG4gICAgICAgIGxheW91dHMuY29uZmlndXJlKGNoYXJ0LCBsZWdlbmQsIG9wdGlvbnMpO1xuICAgICAgICBsZWdlbmQub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfSxcbiAgICBhZnRlclVwZGF0ZSAoY2hhcnQpIHtcbiAgICAgICAgY29uc3QgbGVnZW5kID0gY2hhcnQubGVnZW5kO1xuICAgICAgICBsZWdlbmQuYnVpbGRMYWJlbHMoKTtcbiAgICAgICAgbGVnZW5kLmFkanVzdEhpdEJveGVzKCk7XG4gICAgfSxcbiAgICBhZnRlckV2ZW50IChjaGFydCwgYXJncykge1xuICAgICAgICBpZiAoIWFyZ3MucmVwbGF5KSB7XG4gICAgICAgICAgICBjaGFydC5sZWdlbmQuaGFuZGxlRXZlbnQoYXJncy5ldmVudCk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgIHBvc2l0aW9uOiAndG9wJyxcbiAgICAgICAgYWxpZ246ICdjZW50ZXInLFxuICAgICAgICBmdWxsU2l6ZTogdHJ1ZSxcbiAgICAgICAgcmV2ZXJzZTogZmFsc2UsXG4gICAgICAgIHdlaWdodDogMTAwMCxcbiAgICAgICAgb25DbGljayAoZSwgbGVnZW5kSXRlbSwgbGVnZW5kKSB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IGxlZ2VuZEl0ZW0uZGF0YXNldEluZGV4O1xuICAgICAgICAgICAgY29uc3QgY2kgPSBsZWdlbmQuY2hhcnQ7XG4gICAgICAgICAgICBpZiAoY2kuaXNEYXRhc2V0VmlzaWJsZShpbmRleCkpIHtcbiAgICAgICAgICAgICAgICBjaS5oaWRlKGluZGV4KTtcbiAgICAgICAgICAgICAgICBsZWdlbmRJdGVtLmhpZGRlbiA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNpLnNob3coaW5kZXgpO1xuICAgICAgICAgICAgICAgIGxlZ2VuZEl0ZW0uaGlkZGVuID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9uSG92ZXI6IG51bGwsXG4gICAgICAgIG9uTGVhdmU6IG51bGwsXG4gICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgY29sb3I6IChjdHgpPT5jdHguY2hhcnQub3B0aW9ucy5jb2xvcixcbiAgICAgICAgICAgIGJveFdpZHRoOiA0MCxcbiAgICAgICAgICAgIHBhZGRpbmc6IDEwLFxuICAgICAgICAgICAgZ2VuZXJhdGVMYWJlbHMgKGNoYXJ0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YXNldHMgPSBjaGFydC5kYXRhLmRhdGFzZXRzO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgbGFiZWxzOiB7IHVzZVBvaW50U3R5bGUgLCBwb2ludFN0eWxlICwgdGV4dEFsaWduICwgY29sb3IgLCB1c2VCb3JkZXJSYWRpdXMgLCBib3JkZXJSYWRpdXMgIH0gIH0gPSBjaGFydC5sZWdlbmQub3B0aW9ucztcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hhcnQuX2dldFNvcnRlZERhdGFzZXRNZXRhcygpLm1hcCgobWV0YSk9PntcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSBtZXRhLmNvbnRyb2xsZXIuZ2V0U3R5bGUodXNlUG9pbnRTdHlsZSA/IDAgOiB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBib3JkZXJXaWR0aCA9IHRvUGFkZGluZyhzdHlsZS5ib3JkZXJXaWR0aCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBkYXRhc2V0c1ttZXRhLmluZGV4XS5sYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxTdHlsZTogc3R5bGUuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udENvbG9yOiBjb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpZGRlbjogIW1ldGEudmlzaWJsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVDYXA6IHN0eWxlLmJvcmRlckNhcFN0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZURhc2g6IHN0eWxlLmJvcmRlckRhc2gsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lRGFzaE9mZnNldDogc3R5bGUuYm9yZGVyRGFzaE9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVKb2luOiBzdHlsZS5ib3JkZXJKb2luU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lV2lkdGg6IChib3JkZXJXaWR0aC53aWR0aCArIGJvcmRlcldpZHRoLmhlaWdodCkgLyA0LFxuICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlU3R5bGU6IHN0eWxlLmJvcmRlckNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRTdHlsZTogcG9pbnRTdHlsZSB8fCBzdHlsZS5wb2ludFN0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IHN0eWxlLnJvdGF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduOiB0ZXh0QWxpZ24gfHwgc3R5bGUudGV4dEFsaWduLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiB1c2VCb3JkZXJSYWRpdXMgJiYgKGJvcmRlclJhZGl1cyB8fCBzdHlsZS5ib3JkZXJSYWRpdXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YXNldEluZGV4OiBtZXRhLmluZGV4XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgICBjb2xvcjogKGN0eCk9PmN0eC5jaGFydC5vcHRpb25zLmNvbG9yLFxuICAgICAgICAgICAgZGlzcGxheTogZmFsc2UsXG4gICAgICAgICAgICBwb3NpdGlvbjogJ2NlbnRlcicsXG4gICAgICAgICAgICB0ZXh0OiAnJ1xuICAgICAgICB9XG4gICAgfSxcbiAgICBkZXNjcmlwdG9yczoge1xuICAgICAgICBfc2NyaXB0YWJsZTogKG5hbWUpPT4hbmFtZS5zdGFydHNXaXRoKCdvbicpLFxuICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgIF9zY3JpcHRhYmxlOiAobmFtZSk9PiFbXG4gICAgICAgICAgICAgICAgICAgICdnZW5lcmF0ZUxhYmVscycsXG4gICAgICAgICAgICAgICAgICAgICdmaWx0ZXInLFxuICAgICAgICAgICAgICAgICAgICAnc29ydCdcbiAgICAgICAgICAgICAgICBdLmluY2x1ZGVzKG5hbWUpXG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5jbGFzcyBUaXRsZSBleHRlbmRzIEVsZW1lbnQge1xuIGNvbnN0cnVjdG9yKGNvbmZpZyl7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuY2hhcnQgPSBjb25maWcuY2hhcnQ7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IGNvbmZpZy5vcHRpb25zO1xuICAgICAgICB0aGlzLmN0eCA9IGNvbmZpZy5jdHg7XG4gICAgICAgIHRoaXMuX3BhZGRpbmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMudG9wID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmJvdHRvbSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5sZWZ0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnJpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLndpZHRoID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmhlaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy53ZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuZnVsbFNpemUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHVwZGF0ZShtYXhXaWR0aCwgbWF4SGVpZ2h0KSB7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIHRoaXMubGVmdCA9IDA7XG4gICAgICAgIHRoaXMudG9wID0gMDtcbiAgICAgICAgaWYgKCFvcHRzLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSB0aGlzLmhlaWdodCA9IHRoaXMucmlnaHQgPSB0aGlzLmJvdHRvbSA9IDA7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMucmlnaHQgPSBtYXhXaWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLmJvdHRvbSA9IG1heEhlaWdodDtcbiAgICAgICAgY29uc3QgbGluZUNvdW50ID0gaXNBcnJheShvcHRzLnRleHQpID8gb3B0cy50ZXh0Lmxlbmd0aCA6IDE7XG4gICAgICAgIHRoaXMuX3BhZGRpbmcgPSB0b1BhZGRpbmcob3B0cy5wYWRkaW5nKTtcbiAgICAgICAgY29uc3QgdGV4dFNpemUgPSBsaW5lQ291bnQgKiB0b0ZvbnQob3B0cy5mb250KS5saW5lSGVpZ2h0ICsgdGhpcy5fcGFkZGluZy5oZWlnaHQ7XG4gICAgICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IHRleHRTaXplO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy53aWR0aCA9IHRleHRTaXplO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlzSG9yaXpvbnRhbCgpIHtcbiAgICAgICAgY29uc3QgcG9zID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uO1xuICAgICAgICByZXR1cm4gcG9zID09PSAndG9wJyB8fCBwb3MgPT09ICdib3R0b20nO1xuICAgIH1cbiAgICBfZHJhd0FyZ3Mob2Zmc2V0KSB7XG4gICAgICAgIGNvbnN0IHsgdG9wICwgbGVmdCAsIGJvdHRvbSAsIHJpZ2h0ICwgb3B0aW9ucyAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGFsaWduID0gb3B0aW9ucy5hbGlnbjtcbiAgICAgICAgbGV0IHJvdGF0aW9uID0gMDtcbiAgICAgICAgbGV0IG1heFdpZHRoLCB0aXRsZVgsIHRpdGxlWTtcbiAgICAgICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgIHRpdGxlWCA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCBsZWZ0LCByaWdodCk7XG4gICAgICAgICAgICB0aXRsZVkgPSB0b3AgKyBvZmZzZXQ7XG4gICAgICAgICAgICBtYXhXaWR0aCA9IHJpZ2h0IC0gbGVmdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnBvc2l0aW9uID09PSAnbGVmdCcpIHtcbiAgICAgICAgICAgICAgICB0aXRsZVggPSBsZWZ0ICsgb2Zmc2V0O1xuICAgICAgICAgICAgICAgIHRpdGxlWSA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCBib3R0b20sIHRvcCk7XG4gICAgICAgICAgICAgICAgcm90YXRpb24gPSBQSSAqIC0wLjU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRpdGxlWCA9IHJpZ2h0IC0gb2Zmc2V0O1xuICAgICAgICAgICAgICAgIHRpdGxlWSA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0b3AsIGJvdHRvbSk7XG4gICAgICAgICAgICAgICAgcm90YXRpb24gPSBQSSAqIDAuNTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1heFdpZHRoID0gYm90dG9tIC0gdG9wO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0aXRsZVgsXG4gICAgICAgICAgICB0aXRsZVksXG4gICAgICAgICAgICBtYXhXaWR0aCxcbiAgICAgICAgICAgIHJvdGF0aW9uXG4gICAgICAgIH07XG4gICAgfVxuICAgIGRyYXcoKSB7XG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBpZiAoIW9wdHMuZGlzcGxheSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZvbnRPcHRzID0gdG9Gb250KG9wdHMuZm9udCk7XG4gICAgICAgIGNvbnN0IGxpbmVIZWlnaHQgPSBmb250T3B0cy5saW5lSGVpZ2h0O1xuICAgICAgICBjb25zdCBvZmZzZXQgPSBsaW5lSGVpZ2h0IC8gMiArIHRoaXMuX3BhZGRpbmcudG9wO1xuICAgICAgICBjb25zdCB7IHRpdGxlWCAsIHRpdGxlWSAsIG1heFdpZHRoICwgcm90YXRpb24gIH0gPSB0aGlzLl9kcmF3QXJncyhvZmZzZXQpO1xuICAgICAgICByZW5kZXJUZXh0KGN0eCwgb3B0cy50ZXh0LCAwLCAwLCBmb250T3B0cywge1xuICAgICAgICAgICAgY29sb3I6IG9wdHMuY29sb3IsXG4gICAgICAgICAgICBtYXhXaWR0aCxcbiAgICAgICAgICAgIHJvdGF0aW9uLFxuICAgICAgICAgICAgdGV4dEFsaWduOiBfdG9MZWZ0UmlnaHRDZW50ZXIob3B0cy5hbGlnbiksXG4gICAgICAgICAgICB0ZXh0QmFzZWxpbmU6ICdtaWRkbGUnLFxuICAgICAgICAgICAgdHJhbnNsYXRpb246IFtcbiAgICAgICAgICAgICAgICB0aXRsZVgsXG4gICAgICAgICAgICAgICAgdGl0bGVZXG4gICAgICAgICAgICBdXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZVRpdGxlKGNoYXJ0LCB0aXRsZU9wdHMpIHtcbiAgICBjb25zdCB0aXRsZSA9IG5ldyBUaXRsZSh7XG4gICAgICAgIGN0eDogY2hhcnQuY3R4LFxuICAgICAgICBvcHRpb25zOiB0aXRsZU9wdHMsXG4gICAgICAgIGNoYXJ0XG4gICAgfSk7XG4gICAgbGF5b3V0cy5jb25maWd1cmUoY2hhcnQsIHRpdGxlLCB0aXRsZU9wdHMpO1xuICAgIGxheW91dHMuYWRkQm94KGNoYXJ0LCB0aXRsZSk7XG4gICAgY2hhcnQudGl0bGVCbG9jayA9IHRpdGxlO1xufVxudmFyIHBsdWdpbl90aXRsZSA9IHtcbiAgICBpZDogJ3RpdGxlJyxcbiBfZWxlbWVudDogVGl0bGUsXG4gICAgc3RhcnQgKGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgICAgICBjcmVhdGVUaXRsZShjaGFydCwgb3B0aW9ucyk7XG4gICAgfSxcbiAgICBzdG9wIChjaGFydCkge1xuICAgICAgICBjb25zdCB0aXRsZUJsb2NrID0gY2hhcnQudGl0bGVCbG9jaztcbiAgICAgICAgbGF5b3V0cy5yZW1vdmVCb3goY2hhcnQsIHRpdGxlQmxvY2spO1xuICAgICAgICBkZWxldGUgY2hhcnQudGl0bGVCbG9jaztcbiAgICB9LFxuICAgIGJlZm9yZVVwZGF0ZSAoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHRpdGxlID0gY2hhcnQudGl0bGVCbG9jaztcbiAgICAgICAgbGF5b3V0cy5jb25maWd1cmUoY2hhcnQsIHRpdGxlLCBvcHRpb25zKTtcbiAgICAgICAgdGl0bGUub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfSxcbiAgICBkZWZhdWx0czoge1xuICAgICAgICBhbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIGRpc3BsYXk6IGZhbHNlLFxuICAgICAgICBmb250OiB7XG4gICAgICAgICAgICB3ZWlnaHQ6ICdib2xkJ1xuICAgICAgICB9LFxuICAgICAgICBmdWxsU2l6ZTogdHJ1ZSxcbiAgICAgICAgcGFkZGluZzogMTAsXG4gICAgICAgIHBvc2l0aW9uOiAndG9wJyxcbiAgICAgICAgdGV4dDogJycsXG4gICAgICAgIHdlaWdodDogMjAwMFxuICAgIH0sXG4gICAgZGVmYXVsdFJvdXRlczoge1xuICAgICAgICBjb2xvcjogJ2NvbG9yJ1xuICAgIH0sXG4gICAgZGVzY3JpcHRvcnM6IHtcbiAgICAgICAgX3NjcmlwdGFibGU6IHRydWUsXG4gICAgICAgIF9pbmRleGFibGU6IGZhbHNlXG4gICAgfVxufTtcblxuY29uc3QgbWFwID0gbmV3IFdlYWtNYXAoKTtcbnZhciBwbHVnaW5fc3VidGl0bGUgPSB7XG4gICAgaWQ6ICdzdWJ0aXRsZScsXG4gICAgc3RhcnQgKGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB0aXRsZSA9IG5ldyBUaXRsZSh7XG4gICAgICAgICAgICBjdHg6IGNoYXJ0LmN0eCxcbiAgICAgICAgICAgIG9wdGlvbnMsXG4gICAgICAgICAgICBjaGFydFxuICAgICAgICB9KTtcbiAgICAgICAgbGF5b3V0cy5jb25maWd1cmUoY2hhcnQsIHRpdGxlLCBvcHRpb25zKTtcbiAgICAgICAgbGF5b3V0cy5hZGRCb3goY2hhcnQsIHRpdGxlKTtcbiAgICAgICAgbWFwLnNldChjaGFydCwgdGl0bGUpO1xuICAgIH0sXG4gICAgc3RvcCAoY2hhcnQpIHtcbiAgICAgICAgbGF5b3V0cy5yZW1vdmVCb3goY2hhcnQsIG1hcC5nZXQoY2hhcnQpKTtcbiAgICAgICAgbWFwLmRlbGV0ZShjaGFydCk7XG4gICAgfSxcbiAgICBiZWZvcmVVcGRhdGUgKGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB0aXRsZSA9IG1hcC5nZXQoY2hhcnQpO1xuICAgICAgICBsYXlvdXRzLmNvbmZpZ3VyZShjaGFydCwgdGl0bGUsIG9wdGlvbnMpO1xuICAgICAgICB0aXRsZS5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9LFxuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIGFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgZGlzcGxheTogZmFsc2UsXG4gICAgICAgIGZvbnQ6IHtcbiAgICAgICAgICAgIHdlaWdodDogJ25vcm1hbCdcbiAgICAgICAgfSxcbiAgICAgICAgZnVsbFNpemU6IHRydWUsXG4gICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgIHBvc2l0aW9uOiAndG9wJyxcbiAgICAgICAgdGV4dDogJycsXG4gICAgICAgIHdlaWdodDogMTUwMFxuICAgIH0sXG4gICAgZGVmYXVsdFJvdXRlczoge1xuICAgICAgICBjb2xvcjogJ2NvbG9yJ1xuICAgIH0sXG4gICAgZGVzY3JpcHRvcnM6IHtcbiAgICAgICAgX3NjcmlwdGFibGU6IHRydWUsXG4gICAgICAgIF9pbmRleGFibGU6IGZhbHNlXG4gICAgfVxufTtcblxuY29uc3QgcG9zaXRpb25lcnMgPSB7XG4gYXZlcmFnZSAoaXRlbXMpIHtcbiAgICAgICAgaWYgKCFpdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgaSwgbGVuO1xuICAgICAgICBsZXQgeCA9IDA7XG4gICAgICAgIGxldCB5ID0gMDtcbiAgICAgICAgbGV0IGNvdW50ID0gMDtcbiAgICAgICAgZm9yKGkgPSAwLCBsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBsZW47ICsraSl7XG4gICAgICAgICAgICBjb25zdCBlbCA9IGl0ZW1zW2ldLmVsZW1lbnQ7XG4gICAgICAgICAgICBpZiAoZWwgJiYgZWwuaGFzVmFsdWUoKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvcyA9IGVsLnRvb2x0aXBQb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgIHggKz0gcG9zLng7XG4gICAgICAgICAgICAgICAgeSArPSBwb3MueTtcbiAgICAgICAgICAgICAgICArK2NvdW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiB4IC8gY291bnQsXG4gICAgICAgICAgICB5OiB5IC8gY291bnRcbiAgICAgICAgfTtcbiAgICB9LFxuIG5lYXJlc3QgKGl0ZW1zLCBldmVudFBvc2l0aW9uKSB7XG4gICAgICAgIGlmICghaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHggPSBldmVudFBvc2l0aW9uLng7XG4gICAgICAgIGxldCB5ID0gZXZlbnRQb3NpdGlvbi55O1xuICAgICAgICBsZXQgbWluRGlzdGFuY2UgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgICAgIGxldCBpLCBsZW4sIG5lYXJlc3RFbGVtZW50O1xuICAgICAgICBmb3IoaSA9IDAsIGxlbiA9IGl0ZW1zLmxlbmd0aDsgaSA8IGxlbjsgKytpKXtcbiAgICAgICAgICAgIGNvbnN0IGVsID0gaXRlbXNbaV0uZWxlbWVudDtcbiAgICAgICAgICAgIGlmIChlbCAmJiBlbC5oYXNWYWx1ZSgpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2VudGVyID0gZWwuZ2V0Q2VudGVyUG9pbnQoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBkID0gZGlzdGFuY2VCZXR3ZWVuUG9pbnRzKGV2ZW50UG9zaXRpb24sIGNlbnRlcik7XG4gICAgICAgICAgICAgICAgaWYgKGQgPCBtaW5EaXN0YW5jZSkge1xuICAgICAgICAgICAgICAgICAgICBtaW5EaXN0YW5jZSA9IGQ7XG4gICAgICAgICAgICAgICAgICAgIG5lYXJlc3RFbGVtZW50ID0gZWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChuZWFyZXN0RWxlbWVudCkge1xuICAgICAgICAgICAgY29uc3QgdHAgPSBuZWFyZXN0RWxlbWVudC50b29sdGlwUG9zaXRpb24oKTtcbiAgICAgICAgICAgIHggPSB0cC54O1xuICAgICAgICAgICAgeSA9IHRwLnk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHgsXG4gICAgICAgICAgICB5XG4gICAgICAgIH07XG4gICAgfVxufTtcbmZ1bmN0aW9uIHB1c2hPckNvbmNhdChiYXNlLCB0b1B1c2gpIHtcbiAgICBpZiAodG9QdXNoKSB7XG4gICAgICAgIGlmIChpc0FycmF5KHRvUHVzaCkpIHtcbiAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGJhc2UsIHRvUHVzaCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBiYXNlLnB1c2godG9QdXNoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYmFzZTtcbn1cbiBmdW5jdGlvbiBzcGxpdE5ld2xpbmVzKHN0cikge1xuICAgIGlmICgodHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgfHwgc3RyIGluc3RhbmNlb2YgU3RyaW5nKSAmJiBzdHIuaW5kZXhPZignXFxuJykgPiAtMSkge1xuICAgICAgICByZXR1cm4gc3RyLnNwbGl0KCdcXG4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbn1cbiBmdW5jdGlvbiBjcmVhdGVUb29sdGlwSXRlbShjaGFydCwgaXRlbSkge1xuICAgIGNvbnN0IHsgZWxlbWVudCAsIGRhdGFzZXRJbmRleCAsIGluZGV4ICB9ID0gaXRlbTtcbiAgICBjb25zdCBjb250cm9sbGVyID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KS5jb250cm9sbGVyO1xuICAgIGNvbnN0IHsgbGFiZWwgLCB2YWx1ZSAgfSA9IGNvbnRyb2xsZXIuZ2V0TGFiZWxBbmRWYWx1ZShpbmRleCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY2hhcnQsXG4gICAgICAgIGxhYmVsLFxuICAgICAgICBwYXJzZWQ6IGNvbnRyb2xsZXIuZ2V0UGFyc2VkKGluZGV4KSxcbiAgICAgICAgcmF3OiBjaGFydC5kYXRhLmRhdGFzZXRzW2RhdGFzZXRJbmRleF0uZGF0YVtpbmRleF0sXG4gICAgICAgIGZvcm1hdHRlZFZhbHVlOiB2YWx1ZSxcbiAgICAgICAgZGF0YXNldDogY29udHJvbGxlci5nZXREYXRhc2V0KCksXG4gICAgICAgIGRhdGFJbmRleDogaW5kZXgsXG4gICAgICAgIGRhdGFzZXRJbmRleCxcbiAgICAgICAgZWxlbWVudFxuICAgIH07XG59XG4gZnVuY3Rpb24gZ2V0VG9vbHRpcFNpemUodG9vbHRpcCwgb3B0aW9ucykge1xuICAgIGNvbnN0IGN0eCA9IHRvb2x0aXAuY2hhcnQuY3R4O1xuICAgIGNvbnN0IHsgYm9keSAsIGZvb3RlciAsIHRpdGxlICB9ID0gdG9vbHRpcDtcbiAgICBjb25zdCB7IGJveFdpZHRoICwgYm94SGVpZ2h0ICB9ID0gb3B0aW9ucztcbiAgICBjb25zdCBib2R5Rm9udCA9IHRvRm9udChvcHRpb25zLmJvZHlGb250KTtcbiAgICBjb25zdCB0aXRsZUZvbnQgPSB0b0ZvbnQob3B0aW9ucy50aXRsZUZvbnQpO1xuICAgIGNvbnN0IGZvb3RlckZvbnQgPSB0b0ZvbnQob3B0aW9ucy5mb290ZXJGb250KTtcbiAgICBjb25zdCB0aXRsZUxpbmVDb3VudCA9IHRpdGxlLmxlbmd0aDtcbiAgICBjb25zdCBmb290ZXJMaW5lQ291bnQgPSBmb290ZXIubGVuZ3RoO1xuICAgIGNvbnN0IGJvZHlMaW5lSXRlbUNvdW50ID0gYm9keS5sZW5ndGg7XG4gICAgY29uc3QgcGFkZGluZyA9IHRvUGFkZGluZyhvcHRpb25zLnBhZGRpbmcpO1xuICAgIGxldCBoZWlnaHQgPSBwYWRkaW5nLmhlaWdodDtcbiAgICBsZXQgd2lkdGggPSAwO1xuICAgIGxldCBjb21iaW5lZEJvZHlMZW5ndGggPSBib2R5LnJlZHVjZSgoY291bnQsIGJvZHlJdGVtKT0+Y291bnQgKyBib2R5SXRlbS5iZWZvcmUubGVuZ3RoICsgYm9keUl0ZW0ubGluZXMubGVuZ3RoICsgYm9keUl0ZW0uYWZ0ZXIubGVuZ3RoLCAwKTtcbiAgICBjb21iaW5lZEJvZHlMZW5ndGggKz0gdG9vbHRpcC5iZWZvcmVCb2R5Lmxlbmd0aCArIHRvb2x0aXAuYWZ0ZXJCb2R5Lmxlbmd0aDtcbiAgICBpZiAodGl0bGVMaW5lQ291bnQpIHtcbiAgICAgICAgaGVpZ2h0ICs9IHRpdGxlTGluZUNvdW50ICogdGl0bGVGb250LmxpbmVIZWlnaHQgKyAodGl0bGVMaW5lQ291bnQgLSAxKSAqIG9wdGlvbnMudGl0bGVTcGFjaW5nICsgb3B0aW9ucy50aXRsZU1hcmdpbkJvdHRvbTtcbiAgICB9XG4gICAgaWYgKGNvbWJpbmVkQm9keUxlbmd0aCkge1xuICAgICAgICBjb25zdCBib2R5TGluZUhlaWdodCA9IG9wdGlvbnMuZGlzcGxheUNvbG9ycyA/IE1hdGgubWF4KGJveEhlaWdodCwgYm9keUZvbnQubGluZUhlaWdodCkgOiBib2R5Rm9udC5saW5lSGVpZ2h0O1xuICAgICAgICBoZWlnaHQgKz0gYm9keUxpbmVJdGVtQ291bnQgKiBib2R5TGluZUhlaWdodCArIChjb21iaW5lZEJvZHlMZW5ndGggLSBib2R5TGluZUl0ZW1Db3VudCkgKiBib2R5Rm9udC5saW5lSGVpZ2h0ICsgKGNvbWJpbmVkQm9keUxlbmd0aCAtIDEpICogb3B0aW9ucy5ib2R5U3BhY2luZztcbiAgICB9XG4gICAgaWYgKGZvb3RlckxpbmVDb3VudCkge1xuICAgICAgICBoZWlnaHQgKz0gb3B0aW9ucy5mb290ZXJNYXJnaW5Ub3AgKyBmb290ZXJMaW5lQ291bnQgKiBmb290ZXJGb250LmxpbmVIZWlnaHQgKyAoZm9vdGVyTGluZUNvdW50IC0gMSkgKiBvcHRpb25zLmZvb3RlclNwYWNpbmc7XG4gICAgfVxuICAgIGxldCB3aWR0aFBhZGRpbmcgPSAwO1xuICAgIGNvbnN0IG1heExpbmVXaWR0aCA9IGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgd2lkdGggPSBNYXRoLm1heCh3aWR0aCwgY3R4Lm1lYXN1cmVUZXh0KGxpbmUpLndpZHRoICsgd2lkdGhQYWRkaW5nKTtcbiAgICB9O1xuICAgIGN0eC5zYXZlKCk7XG4gICAgY3R4LmZvbnQgPSB0aXRsZUZvbnQuc3RyaW5nO1xuICAgIGVhY2godG9vbHRpcC50aXRsZSwgbWF4TGluZVdpZHRoKTtcbiAgICBjdHguZm9udCA9IGJvZHlGb250LnN0cmluZztcbiAgICBlYWNoKHRvb2x0aXAuYmVmb3JlQm9keS5jb25jYXQodG9vbHRpcC5hZnRlckJvZHkpLCBtYXhMaW5lV2lkdGgpO1xuICAgIHdpZHRoUGFkZGluZyA9IG9wdGlvbnMuZGlzcGxheUNvbG9ycyA/IGJveFdpZHRoICsgMiArIG9wdGlvbnMuYm94UGFkZGluZyA6IDA7XG4gICAgZWFjaChib2R5LCAoYm9keUl0ZW0pPT57XG4gICAgICAgIGVhY2goYm9keUl0ZW0uYmVmb3JlLCBtYXhMaW5lV2lkdGgpO1xuICAgICAgICBlYWNoKGJvZHlJdGVtLmxpbmVzLCBtYXhMaW5lV2lkdGgpO1xuICAgICAgICBlYWNoKGJvZHlJdGVtLmFmdGVyLCBtYXhMaW5lV2lkdGgpO1xuICAgIH0pO1xuICAgIHdpZHRoUGFkZGluZyA9IDA7XG4gICAgY3R4LmZvbnQgPSBmb290ZXJGb250LnN0cmluZztcbiAgICBlYWNoKHRvb2x0aXAuZm9vdGVyLCBtYXhMaW5lV2lkdGgpO1xuICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgd2lkdGggKz0gcGFkZGluZy53aWR0aDtcbiAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aCxcbiAgICAgICAgaGVpZ2h0XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGRldGVybWluZVlBbGlnbihjaGFydCwgc2l6ZSkge1xuICAgIGNvbnN0IHsgeSAsIGhlaWdodCAgfSA9IHNpemU7XG4gICAgaWYgKHkgPCBoZWlnaHQgLyAyKSB7XG4gICAgICAgIHJldHVybiAndG9wJztcbiAgICB9IGVsc2UgaWYgKHkgPiBjaGFydC5oZWlnaHQgLSBoZWlnaHQgLyAyKSB7XG4gICAgICAgIHJldHVybiAnYm90dG9tJztcbiAgICB9XG4gICAgcmV0dXJuICdjZW50ZXInO1xufVxuZnVuY3Rpb24gZG9lc05vdEZpdFdpdGhBbGlnbih4QWxpZ24sIGNoYXJ0LCBvcHRpb25zLCBzaXplKSB7XG4gICAgY29uc3QgeyB4ICwgd2lkdGggIH0gPSBzaXplO1xuICAgIGNvbnN0IGNhcmV0ID0gb3B0aW9ucy5jYXJldFNpemUgKyBvcHRpb25zLmNhcmV0UGFkZGluZztcbiAgICBpZiAoeEFsaWduID09PSAnbGVmdCcgJiYgeCArIHdpZHRoICsgY2FyZXQgPiBjaGFydC53aWR0aCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHhBbGlnbiA9PT0gJ3JpZ2h0JyAmJiB4IC0gd2lkdGggLSBjYXJldCA8IDApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuZnVuY3Rpb24gZGV0ZXJtaW5lWEFsaWduKGNoYXJ0LCBvcHRpb25zLCBzaXplLCB5QWxpZ24pIHtcbiAgICBjb25zdCB7IHggLCB3aWR0aCAgfSA9IHNpemU7XG4gICAgY29uc3QgeyB3aWR0aDogY2hhcnRXaWR0aCAsIGNoYXJ0QXJlYTogeyBsZWZ0ICwgcmlnaHQgIH0gIH0gPSBjaGFydDtcbiAgICBsZXQgeEFsaWduID0gJ2NlbnRlcic7XG4gICAgaWYgKHlBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgeEFsaWduID0geCA8PSAobGVmdCArIHJpZ2h0KSAvIDIgPyAnbGVmdCcgOiAncmlnaHQnO1xuICAgIH0gZWxzZSBpZiAoeCA8PSB3aWR0aCAvIDIpIHtcbiAgICAgICAgeEFsaWduID0gJ2xlZnQnO1xuICAgIH0gZWxzZSBpZiAoeCA+PSBjaGFydFdpZHRoIC0gd2lkdGggLyAyKSB7XG4gICAgICAgIHhBbGlnbiA9ICdyaWdodCc7XG4gICAgfVxuICAgIGlmIChkb2VzTm90Rml0V2l0aEFsaWduKHhBbGlnbiwgY2hhcnQsIG9wdGlvbnMsIHNpemUpKSB7XG4gICAgICAgIHhBbGlnbiA9ICdjZW50ZXInO1xuICAgIH1cbiAgICByZXR1cm4geEFsaWduO1xufVxuIGZ1bmN0aW9uIGRldGVybWluZUFsaWdubWVudChjaGFydCwgb3B0aW9ucywgc2l6ZSkge1xuICAgIGNvbnN0IHlBbGlnbiA9IHNpemUueUFsaWduIHx8IG9wdGlvbnMueUFsaWduIHx8IGRldGVybWluZVlBbGlnbihjaGFydCwgc2l6ZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeEFsaWduOiBzaXplLnhBbGlnbiB8fCBvcHRpb25zLnhBbGlnbiB8fCBkZXRlcm1pbmVYQWxpZ24oY2hhcnQsIG9wdGlvbnMsIHNpemUsIHlBbGlnbiksXG4gICAgICAgIHlBbGlnblxuICAgIH07XG59XG5mdW5jdGlvbiBhbGlnblgoc2l6ZSwgeEFsaWduKSB7XG4gICAgbGV0IHsgeCAsIHdpZHRoICB9ID0gc2l6ZTtcbiAgICBpZiAoeEFsaWduID09PSAncmlnaHQnKSB7XG4gICAgICAgIHggLT0gd2lkdGg7XG4gICAgfSBlbHNlIGlmICh4QWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgIHggLT0gd2lkdGggLyAyO1xuICAgIH1cbiAgICByZXR1cm4geDtcbn1cbmZ1bmN0aW9uIGFsaWduWShzaXplLCB5QWxpZ24sIHBhZGRpbmdBbmRTaXplKSB7XG4gICAgbGV0IHsgeSAsIGhlaWdodCAgfSA9IHNpemU7XG4gICAgaWYgKHlBbGlnbiA9PT0gJ3RvcCcpIHtcbiAgICAgICAgeSArPSBwYWRkaW5nQW5kU2l6ZTtcbiAgICB9IGVsc2UgaWYgKHlBbGlnbiA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgeSAtPSBoZWlnaHQgKyBwYWRkaW5nQW5kU2l6ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB5IC09IGhlaWdodCAvIDI7XG4gICAgfVxuICAgIHJldHVybiB5O1xufVxuIGZ1bmN0aW9uIGdldEJhY2tncm91bmRQb2ludChvcHRpb25zLCBzaXplLCBhbGlnbm1lbnQsIGNoYXJ0KSB7XG4gICAgY29uc3QgeyBjYXJldFNpemUgLCBjYXJldFBhZGRpbmcgLCBjb3JuZXJSYWRpdXMgIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IHsgeEFsaWduICwgeUFsaWduICB9ID0gYWxpZ25tZW50O1xuICAgIGNvbnN0IHBhZGRpbmdBbmRTaXplID0gY2FyZXRTaXplICsgY2FyZXRQYWRkaW5nO1xuICAgIGNvbnN0IHsgdG9wTGVmdCAsIHRvcFJpZ2h0ICwgYm90dG9tTGVmdCAsIGJvdHRvbVJpZ2h0ICB9ID0gdG9UUkJMQ29ybmVycyhjb3JuZXJSYWRpdXMpO1xuICAgIGxldCB4ID0gYWxpZ25YKHNpemUsIHhBbGlnbik7XG4gICAgY29uc3QgeSA9IGFsaWduWShzaXplLCB5QWxpZ24sIHBhZGRpbmdBbmRTaXplKTtcbiAgICBpZiAoeUFsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICBpZiAoeEFsaWduID09PSAnbGVmdCcpIHtcbiAgICAgICAgICAgIHggKz0gcGFkZGluZ0FuZFNpemU7XG4gICAgICAgIH0gZWxzZSBpZiAoeEFsaWduID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgICB4IC09IHBhZGRpbmdBbmRTaXplO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmICh4QWxpZ24gPT09ICdsZWZ0Jykge1xuICAgICAgICB4IC09IE1hdGgubWF4KHRvcExlZnQsIGJvdHRvbUxlZnQpICsgY2FyZXRTaXplO1xuICAgIH0gZWxzZSBpZiAoeEFsaWduID09PSAncmlnaHQnKSB7XG4gICAgICAgIHggKz0gTWF0aC5tYXgodG9wUmlnaHQsIGJvdHRvbVJpZ2h0KSArIGNhcmV0U2l6ZTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogX2xpbWl0VmFsdWUoeCwgMCwgY2hhcnQud2lkdGggLSBzaXplLndpZHRoKSxcbiAgICAgICAgeTogX2xpbWl0VmFsdWUoeSwgMCwgY2hhcnQuaGVpZ2h0IC0gc2l6ZS5oZWlnaHQpXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGdldEFsaWduZWRYKHRvb2x0aXAsIGFsaWduLCBvcHRpb25zKSB7XG4gICAgY29uc3QgcGFkZGluZyA9IHRvUGFkZGluZyhvcHRpb25zLnBhZGRpbmcpO1xuICAgIHJldHVybiBhbGlnbiA9PT0gJ2NlbnRlcicgPyB0b29sdGlwLnggKyB0b29sdGlwLndpZHRoIC8gMiA6IGFsaWduID09PSAncmlnaHQnID8gdG9vbHRpcC54ICsgdG9vbHRpcC53aWR0aCAtIHBhZGRpbmcucmlnaHQgOiB0b29sdGlwLnggKyBwYWRkaW5nLmxlZnQ7XG59XG4gZnVuY3Rpb24gZ2V0QmVmb3JlQWZ0ZXJCb2R5TGluZXMoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gcHVzaE9yQ29uY2F0KFtdLCBzcGxpdE5ld2xpbmVzKGNhbGxiYWNrKSk7XG59XG5mdW5jdGlvbiBjcmVhdGVUb29sdGlwQ29udGV4dChwYXJlbnQsIHRvb2x0aXAsIHRvb2x0aXBJdGVtcykge1xuICAgIHJldHVybiBjcmVhdGVDb250ZXh0KHBhcmVudCwge1xuICAgICAgICB0b29sdGlwLFxuICAgICAgICB0b29sdGlwSXRlbXMsXG4gICAgICAgIHR5cGU6ICd0b29sdGlwJ1xuICAgIH0pO1xufVxuZnVuY3Rpb24gb3ZlcnJpZGVDYWxsYmFja3MoY2FsbGJhY2tzLCBjb250ZXh0KSB7XG4gICAgY29uc3Qgb3ZlcnJpZGUgPSBjb250ZXh0ICYmIGNvbnRleHQuZGF0YXNldCAmJiBjb250ZXh0LmRhdGFzZXQudG9vbHRpcCAmJiBjb250ZXh0LmRhdGFzZXQudG9vbHRpcC5jYWxsYmFja3M7XG4gICAgcmV0dXJuIG92ZXJyaWRlID8gY2FsbGJhY2tzLm92ZXJyaWRlKG92ZXJyaWRlKSA6IGNhbGxiYWNrcztcbn1cbmNvbnN0IGRlZmF1bHRDYWxsYmFja3MgPSB7XG4gICAgYmVmb3JlVGl0bGU6IG5vb3AsXG4gICAgdGl0bGUgKHRvb2x0aXBJdGVtcykge1xuICAgICAgICBpZiAodG9vbHRpcEl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSB0b29sdGlwSXRlbXNbMF07XG4gICAgICAgICAgICBjb25zdCBsYWJlbHMgPSBpdGVtLmNoYXJ0LmRhdGEubGFiZWxzO1xuICAgICAgICAgICAgY29uc3QgbGFiZWxDb3VudCA9IGxhYmVscyA/IGxhYmVscy5sZW5ndGggOiAwO1xuICAgICAgICAgICAgaWYgKHRoaXMgJiYgdGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy5tb2RlID09PSAnZGF0YXNldCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5kYXRhc2V0LmxhYmVsIHx8ICcnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpdGVtLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0ubGFiZWw7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxhYmVsQ291bnQgPiAwICYmIGl0ZW0uZGF0YUluZGV4IDwgbGFiZWxDb3VudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBsYWJlbHNbaXRlbS5kYXRhSW5kZXhdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9LFxuICAgIGFmdGVyVGl0bGU6IG5vb3AsXG4gICAgYmVmb3JlQm9keTogbm9vcCxcbiAgICBiZWZvcmVMYWJlbDogbm9vcCxcbiAgICBsYWJlbCAodG9vbHRpcEl0ZW0pIHtcbiAgICAgICAgaWYgKHRoaXMgJiYgdGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy5tb2RlID09PSAnZGF0YXNldCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0b29sdGlwSXRlbS5sYWJlbCArICc6ICcgKyB0b29sdGlwSXRlbS5mb3JtYXR0ZWRWYWx1ZSB8fCB0b29sdGlwSXRlbS5mb3JtYXR0ZWRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbGFiZWwgPSB0b29sdGlwSXRlbS5kYXRhc2V0LmxhYmVsIHx8ICcnO1xuICAgICAgICBpZiAobGFiZWwpIHtcbiAgICAgICAgICAgIGxhYmVsICs9ICc6ICc7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsdWUgPSB0b29sdGlwSXRlbS5mb3JtYXR0ZWRWYWx1ZTtcbiAgICAgICAgaWYgKCFpc051bGxPclVuZGVmKHZhbHVlKSkge1xuICAgICAgICAgICAgbGFiZWwgKz0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxhYmVsO1xuICAgIH0sXG4gICAgbGFiZWxDb2xvciAodG9vbHRpcEl0ZW0pIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRvb2x0aXBJdGVtLmNoYXJ0LmdldERhdGFzZXRNZXRhKHRvb2x0aXBJdGVtLmRhdGFzZXRJbmRleCk7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBtZXRhLmNvbnRyb2xsZXIuZ2V0U3R5bGUodG9vbHRpcEl0ZW0uZGF0YUluZGV4KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJvcmRlckNvbG9yOiBvcHRpb25zLmJvcmRlckNvbG9yLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBvcHRpb25zLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgIGJvcmRlcldpZHRoOiBvcHRpb25zLmJvcmRlcldpZHRoLFxuICAgICAgICAgICAgYm9yZGVyRGFzaDogb3B0aW9ucy5ib3JkZXJEYXNoLFxuICAgICAgICAgICAgYm9yZGVyRGFzaE9mZnNldDogb3B0aW9ucy5ib3JkZXJEYXNoT2Zmc2V0LFxuICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAwXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBsYWJlbFRleHRDb2xvciAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuYm9keUNvbG9yO1xuICAgIH0sXG4gICAgbGFiZWxQb2ludFN0eWxlICh0b29sdGlwSXRlbSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdG9vbHRpcEl0ZW0uY2hhcnQuZ2V0RGF0YXNldE1ldGEodG9vbHRpcEl0ZW0uZGF0YXNldEluZGV4KTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IG1ldGEuY29udHJvbGxlci5nZXRTdHlsZSh0b29sdGlwSXRlbS5kYXRhSW5kZXgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcG9pbnRTdHlsZTogb3B0aW9ucy5wb2ludFN0eWxlLFxuICAgICAgICAgICAgcm90YXRpb246IG9wdGlvbnMucm90YXRpb25cbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGFmdGVyTGFiZWw6IG5vb3AsXG4gICAgYWZ0ZXJCb2R5OiBub29wLFxuICAgIGJlZm9yZUZvb3Rlcjogbm9vcCxcbiAgICBmb290ZXI6IG5vb3AsXG4gICAgYWZ0ZXJGb290ZXI6IG5vb3Bcbn07XG4gZnVuY3Rpb24gaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2soY2FsbGJhY2tzLCBuYW1lLCBjdHgsIGFyZykge1xuICAgIGNvbnN0IHJlc3VsdCA9IGNhbGxiYWNrc1tuYW1lXS5jYWxsKGN0eCwgYXJnKTtcbiAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRDYWxsYmFja3NbbmFtZV0uY2FsbChjdHgsIGFyZyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5jbGFzcyBUb29sdGlwIGV4dGVuZHMgRWxlbWVudCB7XG4gc3RhdGljIHBvc2l0aW9uZXJzID0gcG9zaXRpb25lcnM7XG4gICAgY29uc3RydWN0b3IoY29uZmlnKXtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5vcGFjaXR5ID0gMDtcbiAgICAgICAgdGhpcy5fYWN0aXZlID0gW107XG4gICAgICAgIHRoaXMuX2V2ZW50UG9zaXRpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3NpemUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2NhY2hlZEFuaW1hdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3Rvb2x0aXBJdGVtcyA9IFtdO1xuICAgICAgICB0aGlzLiRhbmltYXRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLiRjb250ZXh0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmNoYXJ0ID0gY29uZmlnLmNoYXJ0O1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBjb25maWcub3B0aW9ucztcbiAgICAgICAgdGhpcy5kYXRhUG9pbnRzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnRpdGxlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmJlZm9yZUJvZHkgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuYm9keSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5hZnRlckJvZHkgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuZm9vdGVyID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnhBbGlnbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy55QWxpZ24gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMueCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy55ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmhlaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy53aWR0aCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5jYXJldFggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuY2FyZXRZID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmxhYmVsQ29sb3JzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmxhYmVsUG9pbnRTdHlsZXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubGFiZWxUZXh0Q29sb3JzID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpbml0aWFsaXplKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5fY2FjaGVkQW5pbWF0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy4kY29udGV4dCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gX3Jlc29sdmVBbmltYXRpb25zKCkge1xuICAgICAgICBjb25zdCBjYWNoZWQgPSB0aGlzLl9jYWNoZWRBbmltYXRpb25zO1xuICAgICAgICBpZiAoY2FjaGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucy5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICAgICAgY29uc3Qgb3B0cyA9IG9wdGlvbnMuZW5hYmxlZCAmJiBjaGFydC5vcHRpb25zLmFuaW1hdGlvbiAmJiBvcHRpb25zLmFuaW1hdGlvbnM7XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbnMgPSBuZXcgQW5pbWF0aW9ucyh0aGlzLmNoYXJ0LCBvcHRzKTtcbiAgICAgICAgaWYgKG9wdHMuX2NhY2hlYWJsZSkge1xuICAgICAgICAgICAgdGhpcy5fY2FjaGVkQW5pbWF0aW9ucyA9IE9iamVjdC5mcmVlemUoYW5pbWF0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbnM7XG4gICAgfVxuIGdldENvbnRleHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiRjb250ZXh0IHx8ICh0aGlzLiRjb250ZXh0ID0gY3JlYXRlVG9vbHRpcENvbnRleHQodGhpcy5jaGFydC5nZXRDb250ZXh0KCksIHRoaXMsIHRoaXMuX3Rvb2x0aXBJdGVtcykpO1xuICAgIH1cbiAgICBnZXRUaXRsZShjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgY2FsbGJhY2tzICB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3QgYmVmb3JlVGl0bGUgPSBpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhjYWxsYmFja3MsICdiZWZvcmVUaXRsZScsIHRoaXMsIGNvbnRleHQpO1xuICAgICAgICBjb25zdCB0aXRsZSA9IGludm9rZUNhbGxiYWNrV2l0aEZhbGxiYWNrKGNhbGxiYWNrcywgJ3RpdGxlJywgdGhpcywgY29udGV4dCk7XG4gICAgICAgIGNvbnN0IGFmdGVyVGl0bGUgPSBpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhjYWxsYmFja3MsICdhZnRlclRpdGxlJywgdGhpcywgY29udGV4dCk7XG4gICAgICAgIGxldCBsaW5lcyA9IFtdO1xuICAgICAgICBsaW5lcyA9IHB1c2hPckNvbmNhdChsaW5lcywgc3BsaXROZXdsaW5lcyhiZWZvcmVUaXRsZSkpO1xuICAgICAgICBsaW5lcyA9IHB1c2hPckNvbmNhdChsaW5lcywgc3BsaXROZXdsaW5lcyh0aXRsZSkpO1xuICAgICAgICBsaW5lcyA9IHB1c2hPckNvbmNhdChsaW5lcywgc3BsaXROZXdsaW5lcyhhZnRlclRpdGxlKSk7XG4gICAgICAgIHJldHVybiBsaW5lcztcbiAgICB9XG4gICAgZ2V0QmVmb3JlQm9keSh0b29sdGlwSXRlbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGdldEJlZm9yZUFmdGVyQm9keUxpbmVzKGludm9rZUNhbGxiYWNrV2l0aEZhbGxiYWNrKG9wdGlvbnMuY2FsbGJhY2tzLCAnYmVmb3JlQm9keScsIHRoaXMsIHRvb2x0aXBJdGVtcykpO1xuICAgIH1cbiAgICBnZXRCb2R5KHRvb2x0aXBJdGVtcywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IGNhbGxiYWNrcyAgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGJvZHlJdGVtcyA9IFtdO1xuICAgICAgICBlYWNoKHRvb2x0aXBJdGVtcywgKGNvbnRleHQpPT57XG4gICAgICAgICAgICBjb25zdCBib2R5SXRlbSA9IHtcbiAgICAgICAgICAgICAgICBiZWZvcmU6IFtdLFxuICAgICAgICAgICAgICAgIGxpbmVzOiBbXSxcbiAgICAgICAgICAgICAgICBhZnRlcjogW11cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBzY29wZWQgPSBvdmVycmlkZUNhbGxiYWNrcyhjYWxsYmFja3MsIGNvbnRleHQpO1xuICAgICAgICAgICAgcHVzaE9yQ29uY2F0KGJvZHlJdGVtLmJlZm9yZSwgc3BsaXROZXdsaW5lcyhpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhzY29wZWQsICdiZWZvcmVMYWJlbCcsIHRoaXMsIGNvbnRleHQpKSk7XG4gICAgICAgICAgICBwdXNoT3JDb25jYXQoYm9keUl0ZW0ubGluZXMsIGludm9rZUNhbGxiYWNrV2l0aEZhbGxiYWNrKHNjb3BlZCwgJ2xhYmVsJywgdGhpcywgY29udGV4dCkpO1xuICAgICAgICAgICAgcHVzaE9yQ29uY2F0KGJvZHlJdGVtLmFmdGVyLCBzcGxpdE5ld2xpbmVzKGludm9rZUNhbGxiYWNrV2l0aEZhbGxiYWNrKHNjb3BlZCwgJ2FmdGVyTGFiZWwnLCB0aGlzLCBjb250ZXh0KSkpO1xuICAgICAgICAgICAgYm9keUl0ZW1zLnB1c2goYm9keUl0ZW0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGJvZHlJdGVtcztcbiAgICB9XG4gICAgZ2V0QWZ0ZXJCb2R5KHRvb2x0aXBJdGVtcywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZ2V0QmVmb3JlQWZ0ZXJCb2R5TGluZXMoaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2sob3B0aW9ucy5jYWxsYmFja3MsICdhZnRlckJvZHknLCB0aGlzLCB0b29sdGlwSXRlbXMpKTtcbiAgICB9XG4gICAgZ2V0Rm9vdGVyKHRvb2x0aXBJdGVtcywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IGNhbGxiYWNrcyAgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGJlZm9yZUZvb3RlciA9IGludm9rZUNhbGxiYWNrV2l0aEZhbGxiYWNrKGNhbGxiYWNrcywgJ2JlZm9yZUZvb3RlcicsIHRoaXMsIHRvb2x0aXBJdGVtcyk7XG4gICAgICAgIGNvbnN0IGZvb3RlciA9IGludm9rZUNhbGxiYWNrV2l0aEZhbGxiYWNrKGNhbGxiYWNrcywgJ2Zvb3RlcicsIHRoaXMsIHRvb2x0aXBJdGVtcyk7XG4gICAgICAgIGNvbnN0IGFmdGVyRm9vdGVyID0gaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2soY2FsbGJhY2tzLCAnYWZ0ZXJGb290ZXInLCB0aGlzLCB0b29sdGlwSXRlbXMpO1xuICAgICAgICBsZXQgbGluZXMgPSBbXTtcbiAgICAgICAgbGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIHNwbGl0TmV3bGluZXMoYmVmb3JlRm9vdGVyKSk7XG4gICAgICAgIGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBzcGxpdE5ld2xpbmVzKGZvb3RlcikpO1xuICAgICAgICBsaW5lcyA9IHB1c2hPckNvbmNhdChsaW5lcywgc3BsaXROZXdsaW5lcyhhZnRlckZvb3RlcikpO1xuICAgICAgICByZXR1cm4gbGluZXM7XG4gICAgfVxuIF9jcmVhdGVJdGVtcyhvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuX2FjdGl2ZTtcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuY2hhcnQuZGF0YTtcbiAgICAgICAgY29uc3QgbGFiZWxDb2xvcnMgPSBbXTtcbiAgICAgICAgY29uc3QgbGFiZWxQb2ludFN0eWxlcyA9IFtdO1xuICAgICAgICBjb25zdCBsYWJlbFRleHRDb2xvcnMgPSBbXTtcbiAgICAgICAgbGV0IHRvb2x0aXBJdGVtcyA9IFtdO1xuICAgICAgICBsZXQgaSwgbGVuO1xuICAgICAgICBmb3IoaSA9IDAsIGxlbiA9IGFjdGl2ZS5sZW5ndGg7IGkgPCBsZW47ICsraSl7XG4gICAgICAgICAgICB0b29sdGlwSXRlbXMucHVzaChjcmVhdGVUb29sdGlwSXRlbSh0aGlzLmNoYXJ0LCBhY3RpdmVbaV0pKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5maWx0ZXIpIHtcbiAgICAgICAgICAgIHRvb2x0aXBJdGVtcyA9IHRvb2x0aXBJdGVtcy5maWx0ZXIoKGVsZW1lbnQsIGluZGV4LCBhcnJheSk9Pm9wdGlvbnMuZmlsdGVyKGVsZW1lbnQsIGluZGV4LCBhcnJheSwgZGF0YSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLml0ZW1Tb3J0KSB7XG4gICAgICAgICAgICB0b29sdGlwSXRlbXMgPSB0b29sdGlwSXRlbXMuc29ydCgoYSwgYik9Pm9wdGlvbnMuaXRlbVNvcnQoYSwgYiwgZGF0YSkpO1xuICAgICAgICB9XG4gICAgICAgIGVhY2godG9vbHRpcEl0ZW1zLCAoY29udGV4dCk9PntcbiAgICAgICAgICAgIGNvbnN0IHNjb3BlZCA9IG92ZXJyaWRlQ2FsbGJhY2tzKG9wdGlvbnMuY2FsbGJhY2tzLCBjb250ZXh0KTtcbiAgICAgICAgICAgIGxhYmVsQ29sb3JzLnB1c2goaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2soc2NvcGVkLCAnbGFiZWxDb2xvcicsIHRoaXMsIGNvbnRleHQpKTtcbiAgICAgICAgICAgIGxhYmVsUG9pbnRTdHlsZXMucHVzaChpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhzY29wZWQsICdsYWJlbFBvaW50U3R5bGUnLCB0aGlzLCBjb250ZXh0KSk7XG4gICAgICAgICAgICBsYWJlbFRleHRDb2xvcnMucHVzaChpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhzY29wZWQsICdsYWJlbFRleHRDb2xvcicsIHRoaXMsIGNvbnRleHQpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubGFiZWxDb2xvcnMgPSBsYWJlbENvbG9ycztcbiAgICAgICAgdGhpcy5sYWJlbFBvaW50U3R5bGVzID0gbGFiZWxQb2ludFN0eWxlcztcbiAgICAgICAgdGhpcy5sYWJlbFRleHRDb2xvcnMgPSBsYWJlbFRleHRDb2xvcnM7XG4gICAgICAgIHRoaXMuZGF0YVBvaW50cyA9IHRvb2x0aXBJdGVtcztcbiAgICAgICAgcmV0dXJuIHRvb2x0aXBJdGVtcztcbiAgICB9XG4gICAgdXBkYXRlKGNoYW5nZWQsIHJlcGxheSkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICBjb25zdCBhY3RpdmUgPSB0aGlzLl9hY3RpdmU7XG4gICAgICAgIGxldCBwcm9wZXJ0aWVzO1xuICAgICAgICBsZXQgdG9vbHRpcEl0ZW1zID0gW107XG4gICAgICAgIGlmICghYWN0aXZlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKHRoaXMub3BhY2l0eSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMgPSB7XG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgcG9zaXRpb24gPSBwb3NpdGlvbmVyc1tvcHRpb25zLnBvc2l0aW9uXS5jYWxsKHRoaXMsIGFjdGl2ZSwgdGhpcy5fZXZlbnRQb3NpdGlvbik7XG4gICAgICAgICAgICB0b29sdGlwSXRlbXMgPSB0aGlzLl9jcmVhdGVJdGVtcyhvcHRpb25zKTtcbiAgICAgICAgICAgIHRoaXMudGl0bGUgPSB0aGlzLmdldFRpdGxlKHRvb2x0aXBJdGVtcywgb3B0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLmJlZm9yZUJvZHkgPSB0aGlzLmdldEJlZm9yZUJvZHkodG9vbHRpcEl0ZW1zLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHRoaXMuYm9keSA9IHRoaXMuZ2V0Qm9keSh0b29sdGlwSXRlbXMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy5hZnRlckJvZHkgPSB0aGlzLmdldEFmdGVyQm9keSh0b29sdGlwSXRlbXMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy5mb290ZXIgPSB0aGlzLmdldEZvb3Rlcih0b29sdGlwSXRlbXMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMuX3NpemUgPSBnZXRUb29sdGlwU2l6ZSh0aGlzLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uQW5kU2l6ZSA9IE9iamVjdC5hc3NpZ24oe30sIHBvc2l0aW9uLCBzaXplKTtcbiAgICAgICAgICAgIGNvbnN0IGFsaWdubWVudCA9IGRldGVybWluZUFsaWdubWVudCh0aGlzLmNoYXJ0LCBvcHRpb25zLCBwb3NpdGlvbkFuZFNpemUpO1xuICAgICAgICAgICAgY29uc3QgYmFja2dyb3VuZFBvaW50ID0gZ2V0QmFja2dyb3VuZFBvaW50KG9wdGlvbnMsIHBvc2l0aW9uQW5kU2l6ZSwgYWxpZ25tZW50LCB0aGlzLmNoYXJ0KTtcbiAgICAgICAgICAgIHRoaXMueEFsaWduID0gYWxpZ25tZW50LnhBbGlnbjtcbiAgICAgICAgICAgIHRoaXMueUFsaWduID0gYWxpZ25tZW50LnlBbGlnbjtcbiAgICAgICAgICAgIHByb3BlcnRpZXMgPSB7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICAgICAgICB4OiBiYWNrZ3JvdW5kUG9pbnQueCxcbiAgICAgICAgICAgICAgICB5OiBiYWNrZ3JvdW5kUG9pbnQueSxcbiAgICAgICAgICAgICAgICB3aWR0aDogc2l6ZS53aWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHNpemUuaGVpZ2h0LFxuICAgICAgICAgICAgICAgIGNhcmV0WDogcG9zaXRpb24ueCxcbiAgICAgICAgICAgICAgICBjYXJldFk6IHBvc2l0aW9uLnlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdG9vbHRpcEl0ZW1zID0gdG9vbHRpcEl0ZW1zO1xuICAgICAgICB0aGlzLiRjb250ZXh0ID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAocHJvcGVydGllcykge1xuICAgICAgICAgICAgdGhpcy5fcmVzb2x2ZUFuaW1hdGlvbnMoKS51cGRhdGUodGhpcywgcHJvcGVydGllcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoYW5nZWQgJiYgb3B0aW9ucy5leHRlcm5hbCkge1xuICAgICAgICAgICAgb3B0aW9ucy5leHRlcm5hbC5jYWxsKHRoaXMsIHtcbiAgICAgICAgICAgICAgICBjaGFydDogdGhpcy5jaGFydCxcbiAgICAgICAgICAgICAgICB0b29sdGlwOiB0aGlzLFxuICAgICAgICAgICAgICAgIHJlcGxheVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZHJhd0NhcmV0KHRvb2x0aXBQb2ludCwgY3R4LCBzaXplLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGNhcmV0UG9zaXRpb24gPSB0aGlzLmdldENhcmV0UG9zaXRpb24odG9vbHRpcFBvaW50LCBzaXplLCBvcHRpb25zKTtcbiAgICAgICAgY3R4LmxpbmVUbyhjYXJldFBvc2l0aW9uLngxLCBjYXJldFBvc2l0aW9uLnkxKTtcbiAgICAgICAgY3R4LmxpbmVUbyhjYXJldFBvc2l0aW9uLngyLCBjYXJldFBvc2l0aW9uLnkyKTtcbiAgICAgICAgY3R4LmxpbmVUbyhjYXJldFBvc2l0aW9uLngzLCBjYXJldFBvc2l0aW9uLnkzKTtcbiAgICB9XG4gICAgZ2V0Q2FyZXRQb3NpdGlvbih0b29sdGlwUG9pbnQsIHNpemUsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyB4QWxpZ24gLCB5QWxpZ24gIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IGNhcmV0U2l6ZSAsIGNvcm5lclJhZGl1cyAgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHsgdG9wTGVmdCAsIHRvcFJpZ2h0ICwgYm90dG9tTGVmdCAsIGJvdHRvbVJpZ2h0ICB9ID0gdG9UUkJMQ29ybmVycyhjb3JuZXJSYWRpdXMpO1xuICAgICAgICBjb25zdCB7IHg6IHB0WCAsIHk6IHB0WSAgfSA9IHRvb2x0aXBQb2ludDtcbiAgICAgICAgY29uc3QgeyB3aWR0aCAsIGhlaWdodCAgfSA9IHNpemU7XG4gICAgICAgIGxldCB4MSwgeDIsIHgzLCB5MSwgeTIsIHkzO1xuICAgICAgICBpZiAoeUFsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgeTIgPSBwdFkgKyBoZWlnaHQgLyAyO1xuICAgICAgICAgICAgaWYgKHhBbGlnbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgICAgICAgeDEgPSBwdFg7XG4gICAgICAgICAgICAgICAgeDIgPSB4MSAtIGNhcmV0U2l6ZTtcbiAgICAgICAgICAgICAgICB5MSA9IHkyICsgY2FyZXRTaXplO1xuICAgICAgICAgICAgICAgIHkzID0geTIgLSBjYXJldFNpemU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHgxID0gcHRYICsgd2lkdGg7XG4gICAgICAgICAgICAgICAgeDIgPSB4MSArIGNhcmV0U2l6ZTtcbiAgICAgICAgICAgICAgICB5MSA9IHkyIC0gY2FyZXRTaXplO1xuICAgICAgICAgICAgICAgIHkzID0geTIgKyBjYXJldFNpemU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB4MyA9IHgxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHhBbGlnbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgICAgICAgeDIgPSBwdFggKyBNYXRoLm1heCh0b3BMZWZ0LCBib3R0b21MZWZ0KSArIGNhcmV0U2l6ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoeEFsaWduID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgICAgICAgeDIgPSBwdFggKyB3aWR0aCAtIE1hdGgubWF4KHRvcFJpZ2h0LCBib3R0b21SaWdodCkgLSBjYXJldFNpemU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHgyID0gdGhpcy5jYXJldFg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoeUFsaWduID09PSAndG9wJykge1xuICAgICAgICAgICAgICAgIHkxID0gcHRZO1xuICAgICAgICAgICAgICAgIHkyID0geTEgLSBjYXJldFNpemU7XG4gICAgICAgICAgICAgICAgeDEgPSB4MiAtIGNhcmV0U2l6ZTtcbiAgICAgICAgICAgICAgICB4MyA9IHgyICsgY2FyZXRTaXplO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB5MSA9IHB0WSArIGhlaWdodDtcbiAgICAgICAgICAgICAgICB5MiA9IHkxICsgY2FyZXRTaXplO1xuICAgICAgICAgICAgICAgIHgxID0geDIgKyBjYXJldFNpemU7XG4gICAgICAgICAgICAgICAgeDMgPSB4MiAtIGNhcmV0U2l6ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHkzID0geTE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICB4MyxcbiAgICAgICAgICAgIHkxLFxuICAgICAgICAgICAgeTIsXG4gICAgICAgICAgICB5M1xuICAgICAgICB9O1xuICAgIH1cbiAgICBkcmF3VGl0bGUocHQsIGN0eCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB0aXRsZSA9IHRoaXMudGl0bGU7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IHRpdGxlLmxlbmd0aDtcbiAgICAgICAgbGV0IHRpdGxlRm9udCwgdGl0bGVTcGFjaW5nLCBpO1xuICAgICAgICBpZiAobGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBydGxIZWxwZXIgPSBnZXRSdGxBZGFwdGVyKG9wdGlvbnMucnRsLCB0aGlzLngsIHRoaXMud2lkdGgpO1xuICAgICAgICAgICAgcHQueCA9IGdldEFsaWduZWRYKHRoaXMsIG9wdGlvbnMudGl0bGVBbGlnbiwgb3B0aW9ucyk7XG4gICAgICAgICAgICBjdHgudGV4dEFsaWduID0gcnRsSGVscGVyLnRleHRBbGlnbihvcHRpb25zLnRpdGxlQWxpZ24pO1xuICAgICAgICAgICAgY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgICAgICAgICAgdGl0bGVGb250ID0gdG9Gb250KG9wdGlvbnMudGl0bGVGb250KTtcbiAgICAgICAgICAgIHRpdGxlU3BhY2luZyA9IG9wdGlvbnMudGl0bGVTcGFjaW5nO1xuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMudGl0bGVDb2xvcjtcbiAgICAgICAgICAgIGN0eC5mb250ID0gdGl0bGVGb250LnN0cmluZztcbiAgICAgICAgICAgIGZvcihpID0gMDsgaSA8IGxlbmd0aDsgKytpKXtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFRleHQodGl0bGVbaV0sIHJ0bEhlbHBlci54KHB0LngpLCBwdC55ICsgdGl0bGVGb250LmxpbmVIZWlnaHQgLyAyKTtcbiAgICAgICAgICAgICAgICBwdC55ICs9IHRpdGxlRm9udC5saW5lSGVpZ2h0ICsgdGl0bGVTcGFjaW5nO1xuICAgICAgICAgICAgICAgIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHB0LnkgKz0gb3B0aW9ucy50aXRsZU1hcmdpbkJvdHRvbSAtIHRpdGxlU3BhY2luZztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gX2RyYXdDb2xvckJveChjdHgsIHB0LCBpLCBydGxIZWxwZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgbGFiZWxDb2xvciA9IHRoaXMubGFiZWxDb2xvcnNbaV07XG4gICAgICAgIGNvbnN0IGxhYmVsUG9pbnRTdHlsZSA9IHRoaXMubGFiZWxQb2ludFN0eWxlc1tpXTtcbiAgICAgICAgY29uc3QgeyBib3hIZWlnaHQgLCBib3hXaWR0aCAgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGJvZHlGb250ID0gdG9Gb250KG9wdGlvbnMuYm9keUZvbnQpO1xuICAgICAgICBjb25zdCBjb2xvclggPSBnZXRBbGlnbmVkWCh0aGlzLCAnbGVmdCcsIG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBydGxDb2xvclggPSBydGxIZWxwZXIueChjb2xvclgpO1xuICAgICAgICBjb25zdCB5T2ZmU2V0ID0gYm94SGVpZ2h0IDwgYm9keUZvbnQubGluZUhlaWdodCA/IChib2R5Rm9udC5saW5lSGVpZ2h0IC0gYm94SGVpZ2h0KSAvIDIgOiAwO1xuICAgICAgICBjb25zdCBjb2xvclkgPSBwdC55ICsgeU9mZlNldDtcbiAgICAgICAgaWYgKG9wdGlvbnMudXNlUG9pbnRTdHlsZSkge1xuICAgICAgICAgICAgY29uc3QgZHJhd09wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgcmFkaXVzOiBNYXRoLm1pbihib3hXaWR0aCwgYm94SGVpZ2h0KSAvIDIsXG4gICAgICAgICAgICAgICAgcG9pbnRTdHlsZTogbGFiZWxQb2ludFN0eWxlLnBvaW50U3R5bGUsXG4gICAgICAgICAgICAgICAgcm90YXRpb246IGxhYmVsUG9pbnRTdHlsZS5yb3RhdGlvbixcbiAgICAgICAgICAgICAgICBib3JkZXJXaWR0aDogMVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGNlbnRlclggPSBydGxIZWxwZXIubGVmdEZvckx0cihydGxDb2xvclgsIGJveFdpZHRoKSArIGJveFdpZHRoIC8gMjtcbiAgICAgICAgICAgIGNvbnN0IGNlbnRlclkgPSBjb2xvclkgKyBib3hIZWlnaHQgLyAyO1xuICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gb3B0aW9ucy5tdWx0aUtleUJhY2tncm91bmQ7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5tdWx0aUtleUJhY2tncm91bmQ7XG4gICAgICAgICAgICBkcmF3UG9pbnQoY3R4LCBkcmF3T3B0aW9ucywgY2VudGVyWCwgY2VudGVyWSk7XG4gICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBsYWJlbENvbG9yLmJvcmRlckNvbG9yO1xuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGxhYmVsQ29sb3IuYmFja2dyb3VuZENvbG9yO1xuICAgICAgICAgICAgZHJhd1BvaW50KGN0eCwgZHJhd09wdGlvbnMsIGNlbnRlclgsIGNlbnRlclkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3R4LmxpbmVXaWR0aCA9IGlzT2JqZWN0KGxhYmVsQ29sb3IuYm9yZGVyV2lkdGgpID8gTWF0aC5tYXgoLi4uT2JqZWN0LnZhbHVlcyhsYWJlbENvbG9yLmJvcmRlcldpZHRoKSkgOiBsYWJlbENvbG9yLmJvcmRlcldpZHRoIHx8IDE7XG4gICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBsYWJlbENvbG9yLmJvcmRlckNvbG9yO1xuICAgICAgICAgICAgY3R4LnNldExpbmVEYXNoKGxhYmVsQ29sb3IuYm9yZGVyRGFzaCB8fCBbXSk7XG4gICAgICAgICAgICBjdHgubGluZURhc2hPZmZzZXQgPSBsYWJlbENvbG9yLmJvcmRlckRhc2hPZmZzZXQgfHwgMDtcbiAgICAgICAgICAgIGNvbnN0IG91dGVyWCA9IHJ0bEhlbHBlci5sZWZ0Rm9yTHRyKHJ0bENvbG9yWCwgYm94V2lkdGgpO1xuICAgICAgICAgICAgY29uc3QgaW5uZXJYID0gcnRsSGVscGVyLmxlZnRGb3JMdHIocnRsSGVscGVyLnhQbHVzKHJ0bENvbG9yWCwgMSksIGJveFdpZHRoIC0gMik7XG4gICAgICAgICAgICBjb25zdCBib3JkZXJSYWRpdXMgPSB0b1RSQkxDb3JuZXJzKGxhYmVsQ29sb3IuYm9yZGVyUmFkaXVzKTtcbiAgICAgICAgICAgIGlmIChPYmplY3QudmFsdWVzKGJvcmRlclJhZGl1cykuc29tZSgodik9PnYgIT09IDApKSB7XG4gICAgICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLm11bHRpS2V5QmFja2dyb3VuZDtcbiAgICAgICAgICAgICAgICBhZGRSb3VuZGVkUmVjdFBhdGgoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgIHg6IG91dGVyWCxcbiAgICAgICAgICAgICAgICAgICAgeTogY29sb3JZLFxuICAgICAgICAgICAgICAgICAgICB3OiBib3hXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgaDogYm94SGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICByYWRpdXM6IGJvcmRlclJhZGl1c1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBsYWJlbENvbG9yLmJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgYWRkUm91bmRlZFJlY3RQYXRoKGN0eCwge1xuICAgICAgICAgICAgICAgICAgICB4OiBpbm5lclgsXG4gICAgICAgICAgICAgICAgICAgIHk6IGNvbG9yWSArIDEsXG4gICAgICAgICAgICAgICAgICAgIHc6IGJveFdpZHRoIC0gMixcbiAgICAgICAgICAgICAgICAgICAgaDogYm94SGVpZ2h0IC0gMixcbiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiBib3JkZXJSYWRpdXNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5tdWx0aUtleUJhY2tncm91bmQ7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxSZWN0KG91dGVyWCwgY29sb3JZLCBib3hXaWR0aCwgYm94SGVpZ2h0KTtcbiAgICAgICAgICAgICAgICBjdHguc3Ryb2tlUmVjdChvdXRlclgsIGNvbG9yWSwgYm94V2lkdGgsIGJveEhlaWdodCk7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGxhYmVsQ29sb3IuYmFja2dyb3VuZENvbG9yO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsUmVjdChpbm5lclgsIGNvbG9yWSArIDEsIGJveFdpZHRoIC0gMiwgYm94SGVpZ2h0IC0gMik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHRoaXMubGFiZWxUZXh0Q29sb3JzW2ldO1xuICAgIH1cbiAgICBkcmF3Qm9keShwdCwgY3R4LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgYm9keSAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgYm9keVNwYWNpbmcgLCBib2R5QWxpZ24gLCBkaXNwbGF5Q29sb3JzICwgYm94SGVpZ2h0ICwgYm94V2lkdGggLCBib3hQYWRkaW5nICB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3QgYm9keUZvbnQgPSB0b0ZvbnQob3B0aW9ucy5ib2R5Rm9udCk7XG4gICAgICAgIGxldCBib2R5TGluZUhlaWdodCA9IGJvZHlGb250LmxpbmVIZWlnaHQ7XG4gICAgICAgIGxldCB4TGluZVBhZGRpbmcgPSAwO1xuICAgICAgICBjb25zdCBydGxIZWxwZXIgPSBnZXRSdGxBZGFwdGVyKG9wdGlvbnMucnRsLCB0aGlzLngsIHRoaXMud2lkdGgpO1xuICAgICAgICBjb25zdCBmaWxsTGluZU9mVGV4dCA9IGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIGN0eC5maWxsVGV4dChsaW5lLCBydGxIZWxwZXIueChwdC54ICsgeExpbmVQYWRkaW5nKSwgcHQueSArIGJvZHlMaW5lSGVpZ2h0IC8gMik7XG4gICAgICAgICAgICBwdC55ICs9IGJvZHlMaW5lSGVpZ2h0ICsgYm9keVNwYWNpbmc7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGJvZHlBbGlnbkZvckNhbGN1bGF0aW9uID0gcnRsSGVscGVyLnRleHRBbGlnbihib2R5QWxpZ24pO1xuICAgICAgICBsZXQgYm9keUl0ZW0sIHRleHRDb2xvciwgbGluZXMsIGksIGosIGlsZW4sIGpsZW47XG4gICAgICAgIGN0eC50ZXh0QWxpZ24gPSBib2R5QWxpZ247XG4gICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICAgICAgY3R4LmZvbnQgPSBib2R5Rm9udC5zdHJpbmc7XG4gICAgICAgIHB0LnggPSBnZXRBbGlnbmVkWCh0aGlzLCBib2R5QWxpZ25Gb3JDYWxjdWxhdGlvbiwgb3B0aW9ucyk7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLmJvZHlDb2xvcjtcbiAgICAgICAgZWFjaCh0aGlzLmJlZm9yZUJvZHksIGZpbGxMaW5lT2ZUZXh0KTtcbiAgICAgICAgeExpbmVQYWRkaW5nID0gZGlzcGxheUNvbG9ycyAmJiBib2R5QWxpZ25Gb3JDYWxjdWxhdGlvbiAhPT0gJ3JpZ2h0JyA/IGJvZHlBbGlnbiA9PT0gJ2NlbnRlcicgPyBib3hXaWR0aCAvIDIgKyBib3hQYWRkaW5nIDogYm94V2lkdGggKyAyICsgYm94UGFkZGluZyA6IDA7XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IGJvZHkubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIGJvZHlJdGVtID0gYm9keVtpXTtcbiAgICAgICAgICAgIHRleHRDb2xvciA9IHRoaXMubGFiZWxUZXh0Q29sb3JzW2ldO1xuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHRleHRDb2xvcjtcbiAgICAgICAgICAgIGVhY2goYm9keUl0ZW0uYmVmb3JlLCBmaWxsTGluZU9mVGV4dCk7XG4gICAgICAgICAgICBsaW5lcyA9IGJvZHlJdGVtLmxpbmVzO1xuICAgICAgICAgICAgaWYgKGRpc3BsYXlDb2xvcnMgJiYgbGluZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZHJhd0NvbG9yQm94KGN0eCwgcHQsIGksIHJ0bEhlbHBlciwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgYm9keUxpbmVIZWlnaHQgPSBNYXRoLm1heChib2R5Rm9udC5saW5lSGVpZ2h0LCBib3hIZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yKGogPSAwLCBqbGVuID0gbGluZXMubGVuZ3RoOyBqIDwgamxlbjsgKytqKXtcbiAgICAgICAgICAgICAgICBmaWxsTGluZU9mVGV4dChsaW5lc1tqXSk7XG4gICAgICAgICAgICAgICAgYm9keUxpbmVIZWlnaHQgPSBib2R5Rm9udC5saW5lSGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWFjaChib2R5SXRlbS5hZnRlciwgZmlsbExpbmVPZlRleHQpO1xuICAgICAgICB9XG4gICAgICAgIHhMaW5lUGFkZGluZyA9IDA7XG4gICAgICAgIGJvZHlMaW5lSGVpZ2h0ID0gYm9keUZvbnQubGluZUhlaWdodDtcbiAgICAgICAgZWFjaCh0aGlzLmFmdGVyQm9keSwgZmlsbExpbmVPZlRleHQpO1xuICAgICAgICBwdC55IC09IGJvZHlTcGFjaW5nO1xuICAgIH1cbiAgICBkcmF3Rm9vdGVyKHB0LCBjdHgsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgZm9vdGVyID0gdGhpcy5mb290ZXI7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IGZvb3Rlci5sZW5ndGg7XG4gICAgICAgIGxldCBmb290ZXJGb250LCBpO1xuICAgICAgICBpZiAobGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBydGxIZWxwZXIgPSBnZXRSdGxBZGFwdGVyKG9wdGlvbnMucnRsLCB0aGlzLngsIHRoaXMud2lkdGgpO1xuICAgICAgICAgICAgcHQueCA9IGdldEFsaWduZWRYKHRoaXMsIG9wdGlvbnMuZm9vdGVyQWxpZ24sIG9wdGlvbnMpO1xuICAgICAgICAgICAgcHQueSArPSBvcHRpb25zLmZvb3Rlck1hcmdpblRvcDtcbiAgICAgICAgICAgIGN0eC50ZXh0QWxpZ24gPSBydGxIZWxwZXIudGV4dEFsaWduKG9wdGlvbnMuZm9vdGVyQWxpZ24pO1xuICAgICAgICAgICAgY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgICAgICAgICAgZm9vdGVyRm9udCA9IHRvRm9udChvcHRpb25zLmZvb3RlckZvbnQpO1xuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMuZm9vdGVyQ29sb3I7XG4gICAgICAgICAgICBjdHguZm9udCA9IGZvb3RlckZvbnQuc3RyaW5nO1xuICAgICAgICAgICAgZm9yKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpe1xuICAgICAgICAgICAgICAgIGN0eC5maWxsVGV4dChmb290ZXJbaV0sIHJ0bEhlbHBlci54KHB0LngpLCBwdC55ICsgZm9vdGVyRm9udC5saW5lSGVpZ2h0IC8gMik7XG4gICAgICAgICAgICAgICAgcHQueSArPSBmb290ZXJGb250LmxpbmVIZWlnaHQgKyBvcHRpb25zLmZvb3RlclNwYWNpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZHJhd0JhY2tncm91bmQocHQsIGN0eCwgdG9vbHRpcFNpemUsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyB4QWxpZ24gLCB5QWxpZ24gIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IHggLCB5ICB9ID0gcHQ7XG4gICAgICAgIGNvbnN0IHsgd2lkdGggLCBoZWlnaHQgIH0gPSB0b29sdGlwU2l6ZTtcbiAgICAgICAgY29uc3QgeyB0b3BMZWZ0ICwgdG9wUmlnaHQgLCBib3R0b21MZWZ0ICwgYm90dG9tUmlnaHQgIH0gPSB0b1RSQkxDb3JuZXJzKG9wdGlvbnMuY29ybmVyUmFkaXVzKTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yO1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBvcHRpb25zLmJvcmRlckNvbG9yO1xuICAgICAgICBjdHgubGluZVdpZHRoID0gb3B0aW9ucy5ib3JkZXJXaWR0aDtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHgubW92ZVRvKHggKyB0b3BMZWZ0LCB5KTtcbiAgICAgICAgaWYgKHlBbGlnbiA9PT0gJ3RvcCcpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhd0NhcmV0KHB0LCBjdHgsIHRvb2x0aXBTaXplLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBjdHgubGluZVRvKHggKyB3aWR0aCAtIHRvcFJpZ2h0LCB5KTtcbiAgICAgICAgY3R4LnF1YWRyYXRpY0N1cnZlVG8oeCArIHdpZHRoLCB5LCB4ICsgd2lkdGgsIHkgKyB0b3BSaWdodCk7XG4gICAgICAgIGlmICh5QWxpZ24gPT09ICdjZW50ZXInICYmIHhBbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICAgdGhpcy5kcmF3Q2FyZXQocHQsIGN0eCwgdG9vbHRpcFNpemUsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5saW5lVG8oeCArIHdpZHRoLCB5ICsgaGVpZ2h0IC0gYm90dG9tUmlnaHQpO1xuICAgICAgICBjdHgucXVhZHJhdGljQ3VydmVUbyh4ICsgd2lkdGgsIHkgKyBoZWlnaHQsIHggKyB3aWR0aCAtIGJvdHRvbVJpZ2h0LCB5ICsgaGVpZ2h0KTtcbiAgICAgICAgaWYgKHlBbGlnbiA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhd0NhcmV0KHB0LCBjdHgsIHRvb2x0aXBTaXplLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBjdHgubGluZVRvKHggKyBib3R0b21MZWZ0LCB5ICsgaGVpZ2h0KTtcbiAgICAgICAgY3R4LnF1YWRyYXRpY0N1cnZlVG8oeCwgeSArIGhlaWdodCwgeCwgeSArIGhlaWdodCAtIGJvdHRvbUxlZnQpO1xuICAgICAgICBpZiAoeUFsaWduID09PSAnY2VudGVyJyAmJiB4QWxpZ24gPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgdGhpcy5kcmF3Q2FyZXQocHQsIGN0eCwgdG9vbHRpcFNpemUsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5saW5lVG8oeCwgeSArIHRvcExlZnQpO1xuICAgICAgICBjdHgucXVhZHJhdGljQ3VydmVUbyh4LCB5LCB4ICsgdG9wTGVmdCwgeSk7XG4gICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgaWYgKG9wdGlvbnMuYm9yZGVyV2lkdGggPiAwKSB7XG4gICAgICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gX3VwZGF0ZUFuaW1hdGlvblRhcmdldChvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3QgYW5pbXMgPSB0aGlzLiRhbmltYXRpb25zO1xuICAgICAgICBjb25zdCBhbmltWCA9IGFuaW1zICYmIGFuaW1zLng7XG4gICAgICAgIGNvbnN0IGFuaW1ZID0gYW5pbXMgJiYgYW5pbXMueTtcbiAgICAgICAgaWYgKGFuaW1YIHx8IGFuaW1ZKSB7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHBvc2l0aW9uZXJzW29wdGlvbnMucG9zaXRpb25dLmNhbGwodGhpcywgdGhpcy5fYWN0aXZlLCB0aGlzLl9ldmVudFBvc2l0aW9uKTtcbiAgICAgICAgICAgIGlmICghcG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzaXplID0gdGhpcy5fc2l6ZSA9IGdldFRvb2x0aXBTaXplKHRoaXMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgcG9zaXRpb25BbmRTaXplID0gT2JqZWN0LmFzc2lnbih7fSwgcG9zaXRpb24sIHRoaXMuX3NpemUpO1xuICAgICAgICAgICAgY29uc3QgYWxpZ25tZW50ID0gZGV0ZXJtaW5lQWxpZ25tZW50KGNoYXJ0LCBvcHRpb25zLCBwb3NpdGlvbkFuZFNpemUpO1xuICAgICAgICAgICAgY29uc3QgcG9pbnQgPSBnZXRCYWNrZ3JvdW5kUG9pbnQob3B0aW9ucywgcG9zaXRpb25BbmRTaXplLCBhbGlnbm1lbnQsIGNoYXJ0KTtcbiAgICAgICAgICAgIGlmIChhbmltWC5fdG8gIT09IHBvaW50LnggfHwgYW5pbVkuX3RvICE9PSBwb2ludC55KSB7XG4gICAgICAgICAgICAgICAgdGhpcy54QWxpZ24gPSBhbGlnbm1lbnQueEFsaWduO1xuICAgICAgICAgICAgICAgIHRoaXMueUFsaWduID0gYWxpZ25tZW50LnlBbGlnbjtcbiAgICAgICAgICAgICAgICB0aGlzLndpZHRoID0gc2l6ZS53aWR0aDtcbiAgICAgICAgICAgICAgICB0aGlzLmhlaWdodCA9IHNpemUuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIHRoaXMuY2FyZXRYID0gcG9zaXRpb24ueDtcbiAgICAgICAgICAgICAgICB0aGlzLmNhcmV0WSA9IHBvc2l0aW9uLnk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVzb2x2ZUFuaW1hdGlvbnMoKS51cGRhdGUodGhpcywgcG9pbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuIF93aWxsUmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLm9wYWNpdHk7XG4gICAgfVxuICAgIGRyYXcoY3R4KSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoKSk7XG4gICAgICAgIGxldCBvcGFjaXR5ID0gdGhpcy5vcGFjaXR5O1xuICAgICAgICBpZiAoIW9wYWNpdHkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl91cGRhdGVBbmltYXRpb25UYXJnZXQob3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IHRvb2x0aXBTaXplID0ge1xuICAgICAgICAgICAgd2lkdGg6IHRoaXMud2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IHRoaXMuaGVpZ2h0XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHB0ID0ge1xuICAgICAgICAgICAgeDogdGhpcy54LFxuICAgICAgICAgICAgeTogdGhpcy55XG4gICAgICAgIH07XG4gICAgICAgIG9wYWNpdHkgPSBNYXRoLmFicyhvcGFjaXR5KSA8IDFlLTMgPyAwIDogb3BhY2l0eTtcbiAgICAgICAgY29uc3QgcGFkZGluZyA9IHRvUGFkZGluZyhvcHRpb25zLnBhZGRpbmcpO1xuICAgICAgICBjb25zdCBoYXNUb29sdGlwQ29udGVudCA9IHRoaXMudGl0bGUubGVuZ3RoIHx8IHRoaXMuYmVmb3JlQm9keS5sZW5ndGggfHwgdGhpcy5ib2R5Lmxlbmd0aCB8fCB0aGlzLmFmdGVyQm9keS5sZW5ndGggfHwgdGhpcy5mb290ZXIubGVuZ3RoO1xuICAgICAgICBpZiAob3B0aW9ucy5lbmFibGVkICYmIGhhc1Rvb2x0aXBDb250ZW50KSB7XG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgY3R4Lmdsb2JhbEFscGhhID0gb3BhY2l0eTtcbiAgICAgICAgICAgIHRoaXMuZHJhd0JhY2tncm91bmQocHQsIGN0eCwgdG9vbHRpcFNpemUsIG9wdGlvbnMpO1xuICAgICAgICAgICAgb3ZlcnJpZGVUZXh0RGlyZWN0aW9uKGN0eCwgb3B0aW9ucy50ZXh0RGlyZWN0aW9uKTtcbiAgICAgICAgICAgIHB0LnkgKz0gcGFkZGluZy50b3A7XG4gICAgICAgICAgICB0aGlzLmRyYXdUaXRsZShwdCwgY3R4LCBvcHRpb25zKTtcbiAgICAgICAgICAgIHRoaXMuZHJhd0JvZHkocHQsIGN0eCwgb3B0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLmRyYXdGb290ZXIocHQsIGN0eCwgb3B0aW9ucyk7XG4gICAgICAgICAgICByZXN0b3JlVGV4dERpcmVjdGlvbihjdHgsIG9wdGlvbnMudGV4dERpcmVjdGlvbik7XG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICB9XG4gICAgfVxuIGdldEFjdGl2ZUVsZW1lbnRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aXZlIHx8IFtdO1xuICAgIH1cbiBzZXRBY3RpdmVFbGVtZW50cyhhY3RpdmVFbGVtZW50cywgZXZlbnRQb3NpdGlvbikge1xuICAgICAgICBjb25zdCBsYXN0QWN0aXZlID0gdGhpcy5fYWN0aXZlO1xuICAgICAgICBjb25zdCBhY3RpdmUgPSBhY3RpdmVFbGVtZW50cy5tYXAoKHsgZGF0YXNldEluZGV4ICwgaW5kZXggIH0pPT57XG4gICAgICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5jaGFydC5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpO1xuICAgICAgICAgICAgaWYgKCFtZXRhKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZmluZCBhIGRhdGFzZXQgYXQgaW5kZXggJyArIGRhdGFzZXRJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRhdGFzZXRJbmRleCxcbiAgICAgICAgICAgICAgICBlbGVtZW50OiBtZXRhLmRhdGFbaW5kZXhdLFxuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgY2hhbmdlZCA9ICFfZWxlbWVudHNFcXVhbChsYXN0QWN0aXZlLCBhY3RpdmUpO1xuICAgICAgICBjb25zdCBwb3NpdGlvbkNoYW5nZWQgPSB0aGlzLl9wb3NpdGlvbkNoYW5nZWQoYWN0aXZlLCBldmVudFBvc2l0aW9uKTtcbiAgICAgICAgaWYgKGNoYW5nZWQgfHwgcG9zaXRpb25DaGFuZ2VkKSB7XG4gICAgICAgICAgICB0aGlzLl9hY3RpdmUgPSBhY3RpdmU7XG4gICAgICAgICAgICB0aGlzLl9ldmVudFBvc2l0aW9uID0gZXZlbnRQb3NpdGlvbjtcbiAgICAgICAgICAgIHRoaXMuX2lnbm9yZVJlcGxheUV2ZW50cyA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSh0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cbiBoYW5kbGVFdmVudChlLCByZXBsYXksIGluQ2hhcnRBcmVhID0gdHJ1ZSkge1xuICAgICAgICBpZiAocmVwbGF5ICYmIHRoaXMuX2lnbm9yZVJlcGxheUV2ZW50cykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2lnbm9yZVJlcGxheUV2ZW50cyA9IGZhbHNlO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBsYXN0QWN0aXZlID0gdGhpcy5fYWN0aXZlIHx8IFtdO1xuICAgICAgICBjb25zdCBhY3RpdmUgPSB0aGlzLl9nZXRBY3RpdmVFbGVtZW50cyhlLCBsYXN0QWN0aXZlLCByZXBsYXksIGluQ2hhcnRBcmVhKTtcbiAgICAgICAgY29uc3QgcG9zaXRpb25DaGFuZ2VkID0gdGhpcy5fcG9zaXRpb25DaGFuZ2VkKGFjdGl2ZSwgZSk7XG4gICAgICAgIGNvbnN0IGNoYW5nZWQgPSByZXBsYXkgfHwgIV9lbGVtZW50c0VxdWFsKGFjdGl2ZSwgbGFzdEFjdGl2ZSkgfHwgcG9zaXRpb25DaGFuZ2VkO1xuICAgICAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICAgICAgdGhpcy5fYWN0aXZlID0gYWN0aXZlO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZW5hYmxlZCB8fCBvcHRpb25zLmV4dGVybmFsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRQb3NpdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgeDogZS54LFxuICAgICAgICAgICAgICAgICAgICB5OiBlLnlcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlKHRydWUsIHJlcGxheSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNoYW5nZWQ7XG4gICAgfVxuIF9nZXRBY3RpdmVFbGVtZW50cyhlLCBsYXN0QWN0aXZlLCByZXBsYXksIGluQ2hhcnRBcmVhKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGlmIChlLnR5cGUgPT09ICdtb3VzZW91dCcpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWluQ2hhcnRBcmVhKSB7XG4gICAgICAgICAgICByZXR1cm4gbGFzdEFjdGl2ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhY3RpdmUgPSB0aGlzLmNoYXJ0LmdldEVsZW1lbnRzQXRFdmVudEZvck1vZGUoZSwgb3B0aW9ucy5tb2RlLCBvcHRpb25zLCByZXBsYXkpO1xuICAgICAgICBpZiAob3B0aW9ucy5yZXZlcnNlKSB7XG4gICAgICAgICAgICBhY3RpdmUucmV2ZXJzZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY3RpdmU7XG4gICAgfVxuIF9wb3NpdGlvbkNoYW5nZWQoYWN0aXZlLCBlKSB7XG4gICAgICAgIGNvbnN0IHsgY2FyZXRYICwgY2FyZXRZICwgb3B0aW9ucyAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gcG9zaXRpb25lcnNbb3B0aW9ucy5wb3NpdGlvbl0uY2FsbCh0aGlzLCBhY3RpdmUsIGUpO1xuICAgICAgICByZXR1cm4gcG9zaXRpb24gIT09IGZhbHNlICYmIChjYXJldFggIT09IHBvc2l0aW9uLnggfHwgY2FyZXRZICE9PSBwb3NpdGlvbi55KTtcbiAgICB9XG59XG52YXIgcGx1Z2luX3Rvb2x0aXAgPSB7XG4gICAgaWQ6ICd0b29sdGlwJyxcbiAgICBfZWxlbWVudDogVG9vbHRpcCxcbiAgICBwb3NpdGlvbmVycyxcbiAgICBhZnRlckluaXQgKGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICAgICAgY2hhcnQudG9vbHRpcCA9IG5ldyBUb29sdGlwKHtcbiAgICAgICAgICAgICAgICBjaGFydCxcbiAgICAgICAgICAgICAgICBvcHRpb25zXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgYmVmb3JlVXBkYXRlIChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGNoYXJ0LnRvb2x0aXApIHtcbiAgICAgICAgICAgIGNoYXJ0LnRvb2x0aXAuaW5pdGlhbGl6ZShvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgcmVzZXQgKGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgICAgICBpZiAoY2hhcnQudG9vbHRpcCkge1xuICAgICAgICAgICAgY2hhcnQudG9vbHRpcC5pbml0aWFsaXplKG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBhZnRlckRyYXcgKGNoYXJ0KSB7XG4gICAgICAgIGNvbnN0IHRvb2x0aXAgPSBjaGFydC50b29sdGlwO1xuICAgICAgICBpZiAodG9vbHRpcCAmJiB0b29sdGlwLl93aWxsUmVuZGVyKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGFyZ3MgPSB7XG4gICAgICAgICAgICAgICAgdG9vbHRpcFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChjaGFydC5ub3RpZnlQbHVnaW5zKCdiZWZvcmVUb29sdGlwRHJhdycsIHtcbiAgICAgICAgICAgICAgICAuLi5hcmdzLFxuICAgICAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICAgICAgICAgIH0pID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRvb2x0aXAuZHJhdyhjaGFydC5jdHgpO1xuICAgICAgICAgICAgY2hhcnQubm90aWZ5UGx1Z2lucygnYWZ0ZXJUb29sdGlwRHJhdycsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBhZnRlckV2ZW50IChjaGFydCwgYXJncykge1xuICAgICAgICBpZiAoY2hhcnQudG9vbHRpcCkge1xuICAgICAgICAgICAgY29uc3QgdXNlRmluYWxQb3NpdGlvbiA9IGFyZ3MucmVwbGF5O1xuICAgICAgICAgICAgaWYgKGNoYXJ0LnRvb2x0aXAuaGFuZGxlRXZlbnQoYXJncy5ldmVudCwgdXNlRmluYWxQb3NpdGlvbiwgYXJncy5pbkNoYXJ0QXJlYSkpIHtcbiAgICAgICAgICAgICAgICBhcmdzLmNoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBkZWZhdWx0czoge1xuICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICBleHRlcm5hbDogbnVsbCxcbiAgICAgICAgcG9zaXRpb246ICdhdmVyYWdlJyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLDAsMCwwLjgpJyxcbiAgICAgICAgdGl0bGVDb2xvcjogJyNmZmYnLFxuICAgICAgICB0aXRsZUZvbnQ6IHtcbiAgICAgICAgICAgIHdlaWdodDogJ2JvbGQnXG4gICAgICAgIH0sXG4gICAgICAgIHRpdGxlU3BhY2luZzogMixcbiAgICAgICAgdGl0bGVNYXJnaW5Cb3R0b206IDYsXG4gICAgICAgIHRpdGxlQWxpZ246ICdsZWZ0JyxcbiAgICAgICAgYm9keUNvbG9yOiAnI2ZmZicsXG4gICAgICAgIGJvZHlTcGFjaW5nOiAyLFxuICAgICAgICBib2R5Rm9udDoge30sXG4gICAgICAgIGJvZHlBbGlnbjogJ2xlZnQnLFxuICAgICAgICBmb290ZXJDb2xvcjogJyNmZmYnLFxuICAgICAgICBmb290ZXJTcGFjaW5nOiAyLFxuICAgICAgICBmb290ZXJNYXJnaW5Ub3A6IDYsXG4gICAgICAgIGZvb3RlckZvbnQ6IHtcbiAgICAgICAgICAgIHdlaWdodDogJ2JvbGQnXG4gICAgICAgIH0sXG4gICAgICAgIGZvb3RlckFsaWduOiAnbGVmdCcsXG4gICAgICAgIHBhZGRpbmc6IDYsXG4gICAgICAgIGNhcmV0UGFkZGluZzogMixcbiAgICAgICAgY2FyZXRTaXplOiA1LFxuICAgICAgICBjb3JuZXJSYWRpdXM6IDYsXG4gICAgICAgIGJveEhlaWdodDogKGN0eCwgb3B0cyk9Pm9wdHMuYm9keUZvbnQuc2l6ZSxcbiAgICAgICAgYm94V2lkdGg6IChjdHgsIG9wdHMpPT5vcHRzLmJvZHlGb250LnNpemUsXG4gICAgICAgIG11bHRpS2V5QmFja2dyb3VuZDogJyNmZmYnLFxuICAgICAgICBkaXNwbGF5Q29sb3JzOiB0cnVlLFxuICAgICAgICBib3hQYWRkaW5nOiAwLFxuICAgICAgICBib3JkZXJDb2xvcjogJ3JnYmEoMCwwLDAsMCknLFxuICAgICAgICBib3JkZXJXaWR0aDogMCxcbiAgICAgICAgYW5pbWF0aW9uOiB7XG4gICAgICAgICAgICBkdXJhdGlvbjogNDAwLFxuICAgICAgICAgICAgZWFzaW5nOiAnZWFzZU91dFF1YXJ0J1xuICAgICAgICB9LFxuICAgICAgICBhbmltYXRpb25zOiB7XG4gICAgICAgICAgICBudW1iZXJzOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgICAgICAgICAgcHJvcGVydGllczogW1xuICAgICAgICAgICAgICAgICAgICAneCcsXG4gICAgICAgICAgICAgICAgICAgICd5JyxcbiAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJyxcbiAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCcsXG4gICAgICAgICAgICAgICAgICAgICdjYXJldFgnLFxuICAgICAgICAgICAgICAgICAgICAnY2FyZXRZJ1xuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvcGFjaXR5OiB7XG4gICAgICAgICAgICAgICAgZWFzaW5nOiAnbGluZWFyJyxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogMjAwXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGxiYWNrczogZGVmYXVsdENhbGxiYWNrc1xuICAgIH0sXG4gICAgZGVmYXVsdFJvdXRlczoge1xuICAgICAgICBib2R5Rm9udDogJ2ZvbnQnLFxuICAgICAgICBmb290ZXJGb250OiAnZm9udCcsXG4gICAgICAgIHRpdGxlRm9udDogJ2ZvbnQnXG4gICAgfSxcbiAgICBkZXNjcmlwdG9yczoge1xuICAgICAgICBfc2NyaXB0YWJsZTogKG5hbWUpPT5uYW1lICE9PSAnZmlsdGVyJyAmJiBuYW1lICE9PSAnaXRlbVNvcnQnICYmIG5hbWUgIT09ICdleHRlcm5hbCcsXG4gICAgICAgIF9pbmRleGFibGU6IGZhbHNlLFxuICAgICAgICBjYWxsYmFja3M6IHtcbiAgICAgICAgICAgIF9zY3JpcHRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIF9pbmRleGFibGU6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIGFuaW1hdGlvbjoge1xuICAgICAgICAgICAgX2ZhbGxiYWNrOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBhbmltYXRpb25zOiB7XG4gICAgICAgICAgICBfZmFsbGJhY2s6ICdhbmltYXRpb24nXG4gICAgICAgIH1cbiAgICB9LFxuICAgIGFkZGl0aW9uYWxPcHRpb25TY29wZXM6IFtcbiAgICAgICAgJ2ludGVyYWN0aW9uJ1xuICAgIF1cbn07XG5cbnZhciBwbHVnaW5zID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuX19wcm90b19fOiBudWxsLFxuQ29sb3JzOiBwbHVnaW5fY29sb3JzLFxuRGVjaW1hdGlvbjogcGx1Z2luX2RlY2ltYXRpb24sXG5GaWxsZXI6IGluZGV4LFxuTGVnZW5kOiBwbHVnaW5fbGVnZW5kLFxuU3ViVGl0bGU6IHBsdWdpbl9zdWJ0aXRsZSxcblRpdGxlOiBwbHVnaW5fdGl0bGUsXG5Ub29sdGlwOiBwbHVnaW5fdG9vbHRpcFxufSk7XG5cbmNvbnN0IGFkZElmU3RyaW5nID0gKGxhYmVscywgcmF3LCBpbmRleCwgYWRkZWRMYWJlbHMpPT57XG4gICAgaWYgKHR5cGVvZiByYXcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGluZGV4ID0gbGFiZWxzLnB1c2gocmF3KSAtIDE7XG4gICAgICAgIGFkZGVkTGFiZWxzLnVuc2hpZnQoe1xuICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICBsYWJlbDogcmF3XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoaXNOYU4ocmF3KSkge1xuICAgICAgICBpbmRleCA9IG51bGw7XG4gICAgfVxuICAgIHJldHVybiBpbmRleDtcbn07XG5mdW5jdGlvbiBmaW5kT3JBZGRMYWJlbChsYWJlbHMsIHJhdywgaW5kZXgsIGFkZGVkTGFiZWxzKSB7XG4gICAgY29uc3QgZmlyc3QgPSBsYWJlbHMuaW5kZXhPZihyYXcpO1xuICAgIGlmIChmaXJzdCA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIGFkZElmU3RyaW5nKGxhYmVscywgcmF3LCBpbmRleCwgYWRkZWRMYWJlbHMpO1xuICAgIH1cbiAgICBjb25zdCBsYXN0ID0gbGFiZWxzLmxhc3RJbmRleE9mKHJhdyk7XG4gICAgcmV0dXJuIGZpcnN0ICE9PSBsYXN0ID8gaW5kZXggOiBmaXJzdDtcbn1cbmNvbnN0IHZhbGlkSW5kZXggPSAoaW5kZXgsIG1heCk9PmluZGV4ID09PSBudWxsID8gbnVsbCA6IF9saW1pdFZhbHVlKE1hdGgucm91bmQoaW5kZXgpLCAwLCBtYXgpO1xuZnVuY3Rpb24gX2dldExhYmVsRm9yVmFsdWUodmFsdWUpIHtcbiAgICBjb25zdCBsYWJlbHMgPSB0aGlzLmdldExhYmVscygpO1xuICAgIGlmICh2YWx1ZSA+PSAwICYmIHZhbHVlIDwgbGFiZWxzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gbGFiZWxzW3ZhbHVlXTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuY2xhc3MgQ2F0ZWdvcnlTY2FsZSBleHRlbmRzIFNjYWxlIHtcbiAgICBzdGF0aWMgaWQgPSAnY2F0ZWdvcnknO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgIGNhbGxiYWNrOiBfZ2V0TGFiZWxGb3JWYWx1ZVxuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdHJ1Y3RvcihjZmcpe1xuICAgICAgICBzdXBlcihjZmcpO1xuICAgICAgICAgdGhpcy5fc3RhcnRWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fdmFsdWVSYW5nZSA9IDA7XG4gICAgICAgIHRoaXMuX2FkZGVkTGFiZWxzID0gW107XG4gICAgfVxuICAgIGluaXQoc2NhbGVPcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGFkZGVkID0gdGhpcy5fYWRkZWRMYWJlbHM7XG4gICAgICAgIGlmIChhZGRlZC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IGxhYmVscyA9IHRoaXMuZ2V0TGFiZWxzKCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHsgaW5kZXggLCBsYWJlbCAgfSBvZiBhZGRlZCl7XG4gICAgICAgICAgICAgICAgaWYgKGxhYmVsc1tpbmRleF0gPT09IGxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVscy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2FkZGVkTGFiZWxzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIuaW5pdChzY2FsZU9wdGlvbnMpO1xuICAgIH1cbiAgICBwYXJzZShyYXcsIGluZGV4KSB7XG4gICAgICAgIGlmIChpc051bGxPclVuZGVmKHJhdykpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxhYmVscyA9IHRoaXMuZ2V0TGFiZWxzKCk7XG4gICAgICAgIGluZGV4ID0gaXNGaW5pdGUoaW5kZXgpICYmIGxhYmVsc1tpbmRleF0gPT09IHJhdyA/IGluZGV4IDogZmluZE9yQWRkTGFiZWwobGFiZWxzLCByYXcsIHZhbHVlT3JEZWZhdWx0KGluZGV4LCByYXcpLCB0aGlzLl9hZGRlZExhYmVscyk7XG4gICAgICAgIHJldHVybiB2YWxpZEluZGV4KGluZGV4LCBsYWJlbHMubGVuZ3RoIC0gMSk7XG4gICAgfVxuICAgIGRldGVybWluZURhdGFMaW1pdHMoKSB7XG4gICAgICAgIGNvbnN0IHsgbWluRGVmaW5lZCAsIG1heERlZmluZWQgIH0gPSB0aGlzLmdldFVzZXJCb3VuZHMoKTtcbiAgICAgICAgbGV0IHsgbWluICwgbWF4ICB9ID0gdGhpcy5nZXRNaW5NYXgodHJ1ZSk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYm91bmRzID09PSAndGlja3MnKSB7XG4gICAgICAgICAgICBpZiAoIW1pbkRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBtaW4gPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFtYXhEZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbWF4ID0gdGhpcy5nZXRMYWJlbHMoKS5sZW5ndGggLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMubWluID0gbWluO1xuICAgICAgICB0aGlzLm1heCA9IG1heDtcbiAgICB9XG4gICAgYnVpbGRUaWNrcygpIHtcbiAgICAgICAgY29uc3QgbWluID0gdGhpcy5taW47XG4gICAgICAgIGNvbnN0IG1heCA9IHRoaXMubWF4O1xuICAgICAgICBjb25zdCBvZmZzZXQgPSB0aGlzLm9wdGlvbnMub2Zmc2V0O1xuICAgICAgICBjb25zdCB0aWNrcyA9IFtdO1xuICAgICAgICBsZXQgbGFiZWxzID0gdGhpcy5nZXRMYWJlbHMoKTtcbiAgICAgICAgbGFiZWxzID0gbWluID09PSAwICYmIG1heCA9PT0gbGFiZWxzLmxlbmd0aCAtIDEgPyBsYWJlbHMgOiBsYWJlbHMuc2xpY2UobWluLCBtYXggKyAxKTtcbiAgICAgICAgdGhpcy5fdmFsdWVSYW5nZSA9IE1hdGgubWF4KGxhYmVscy5sZW5ndGggLSAob2Zmc2V0ID8gMCA6IDEpLCAxKTtcbiAgICAgICAgdGhpcy5fc3RhcnRWYWx1ZSA9IHRoaXMubWluIC0gKG9mZnNldCA/IDAuNSA6IDApO1xuICAgICAgICBmb3IobGV0IHZhbHVlID0gbWluOyB2YWx1ZSA8PSBtYXg7IHZhbHVlKyspe1xuICAgICAgICAgICAgdGlja3MucHVzaCh7XG4gICAgICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aWNrcztcbiAgICB9XG4gICAgZ2V0TGFiZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gX2dldExhYmVsRm9yVmFsdWUuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgfVxuIGNvbmZpZ3VyZSgpIHtcbiAgICAgICAgc3VwZXIuY29uZmlndXJlKCk7XG4gICAgICAgIGlmICghdGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgdGhpcy5fcmV2ZXJzZVBpeGVscyA9ICF0aGlzLl9yZXZlcnNlUGl4ZWxzO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldFBpeGVsRm9yVmFsdWUodmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdGhpcy5wYXJzZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsID8gTmFOIDogdGhpcy5nZXRQaXhlbEZvckRlY2ltYWwoKHZhbHVlIC0gdGhpcy5fc3RhcnRWYWx1ZSkgLyB0aGlzLl92YWx1ZVJhbmdlKTtcbiAgICB9XG4gICAgZ2V0UGl4ZWxGb3JUaWNrKGluZGV4KSB7XG4gICAgICAgIGNvbnN0IHRpY2tzID0gdGhpcy50aWNrcztcbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+IHRpY2tzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBpeGVsRm9yVmFsdWUodGlja3NbaW5kZXhdLnZhbHVlKTtcbiAgICB9XG4gICAgZ2V0VmFsdWVGb3JQaXhlbChwaXhlbCkge1xuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCh0aGlzLl9zdGFydFZhbHVlICsgdGhpcy5nZXREZWNpbWFsRm9yUGl4ZWwocGl4ZWwpICogdGhpcy5fdmFsdWVSYW5nZSk7XG4gICAgfVxuICAgIGdldEJhc2VQaXhlbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYm90dG9tO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVUaWNrcyQxKGdlbmVyYXRpb25PcHRpb25zLCBkYXRhUmFuZ2UpIHtcbiAgICBjb25zdCB0aWNrcyA9IFtdO1xuICAgIGNvbnN0IE1JTl9TUEFDSU5HID0gMWUtMTQ7XG4gICAgY29uc3QgeyBib3VuZHMgLCBzdGVwICwgbWluICwgbWF4ICwgcHJlY2lzaW9uICwgY291bnQgLCBtYXhUaWNrcyAsIG1heERpZ2l0cyAsIGluY2x1ZGVCb3VuZHMgIH0gPSBnZW5lcmF0aW9uT3B0aW9ucztcbiAgICBjb25zdCB1bml0ID0gc3RlcCB8fCAxO1xuICAgIGNvbnN0IG1heFNwYWNlcyA9IG1heFRpY2tzIC0gMTtcbiAgICBjb25zdCB7IG1pbjogcm1pbiAsIG1heDogcm1heCAgfSA9IGRhdGFSYW5nZTtcbiAgICBjb25zdCBtaW5EZWZpbmVkID0gIWlzTnVsbE9yVW5kZWYobWluKTtcbiAgICBjb25zdCBtYXhEZWZpbmVkID0gIWlzTnVsbE9yVW5kZWYobWF4KTtcbiAgICBjb25zdCBjb3VudERlZmluZWQgPSAhaXNOdWxsT3JVbmRlZihjb3VudCk7XG4gICAgY29uc3QgbWluU3BhY2luZyA9IChybWF4IC0gcm1pbikgLyAobWF4RGlnaXRzICsgMSk7XG4gICAgbGV0IHNwYWNpbmcgPSBuaWNlTnVtKChybWF4IC0gcm1pbikgLyBtYXhTcGFjZXMgLyB1bml0KSAqIHVuaXQ7XG4gICAgbGV0IGZhY3RvciwgbmljZU1pbiwgbmljZU1heCwgbnVtU3BhY2VzO1xuICAgIGlmIChzcGFjaW5nIDwgTUlOX1NQQUNJTkcgJiYgIW1pbkRlZmluZWQgJiYgIW1heERlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogcm1pblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogcm1heFxuICAgICAgICAgICAgfVxuICAgICAgICBdO1xuICAgIH1cbiAgICBudW1TcGFjZXMgPSBNYXRoLmNlaWwocm1heCAvIHNwYWNpbmcpIC0gTWF0aC5mbG9vcihybWluIC8gc3BhY2luZyk7XG4gICAgaWYgKG51bVNwYWNlcyA+IG1heFNwYWNlcykge1xuICAgICAgICBzcGFjaW5nID0gbmljZU51bShudW1TcGFjZXMgKiBzcGFjaW5nIC8gbWF4U3BhY2VzIC8gdW5pdCkgKiB1bml0O1xuICAgIH1cbiAgICBpZiAoIWlzTnVsbE9yVW5kZWYocHJlY2lzaW9uKSkge1xuICAgICAgICBmYWN0b3IgPSBNYXRoLnBvdygxMCwgcHJlY2lzaW9uKTtcbiAgICAgICAgc3BhY2luZyA9IE1hdGguY2VpbChzcGFjaW5nICogZmFjdG9yKSAvIGZhY3RvcjtcbiAgICB9XG4gICAgaWYgKGJvdW5kcyA9PT0gJ3RpY2tzJykge1xuICAgICAgICBuaWNlTWluID0gTWF0aC5mbG9vcihybWluIC8gc3BhY2luZykgKiBzcGFjaW5nO1xuICAgICAgICBuaWNlTWF4ID0gTWF0aC5jZWlsKHJtYXggLyBzcGFjaW5nKSAqIHNwYWNpbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbmljZU1pbiA9IHJtaW47XG4gICAgICAgIG5pY2VNYXggPSBybWF4O1xuICAgIH1cbiAgICBpZiAobWluRGVmaW5lZCAmJiBtYXhEZWZpbmVkICYmIHN0ZXAgJiYgYWxtb3N0V2hvbGUoKG1heCAtIG1pbikgLyBzdGVwLCBzcGFjaW5nIC8gMTAwMCkpIHtcbiAgICAgICAgbnVtU3BhY2VzID0gTWF0aC5yb3VuZChNYXRoLm1pbigobWF4IC0gbWluKSAvIHNwYWNpbmcsIG1heFRpY2tzKSk7XG4gICAgICAgIHNwYWNpbmcgPSAobWF4IC0gbWluKSAvIG51bVNwYWNlcztcbiAgICAgICAgbmljZU1pbiA9IG1pbjtcbiAgICAgICAgbmljZU1heCA9IG1heDtcbiAgICB9IGVsc2UgaWYgKGNvdW50RGVmaW5lZCkge1xuICAgICAgICBuaWNlTWluID0gbWluRGVmaW5lZCA/IG1pbiA6IG5pY2VNaW47XG4gICAgICAgIG5pY2VNYXggPSBtYXhEZWZpbmVkID8gbWF4IDogbmljZU1heDtcbiAgICAgICAgbnVtU3BhY2VzID0gY291bnQgLSAxO1xuICAgICAgICBzcGFjaW5nID0gKG5pY2VNYXggLSBuaWNlTWluKSAvIG51bVNwYWNlcztcbiAgICB9IGVsc2Uge1xuICAgICAgICBudW1TcGFjZXMgPSAobmljZU1heCAtIG5pY2VNaW4pIC8gc3BhY2luZztcbiAgICAgICAgaWYgKGFsbW9zdEVxdWFscyhudW1TcGFjZXMsIE1hdGgucm91bmQobnVtU3BhY2VzKSwgc3BhY2luZyAvIDEwMDApKSB7XG4gICAgICAgICAgICBudW1TcGFjZXMgPSBNYXRoLnJvdW5kKG51bVNwYWNlcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBudW1TcGFjZXMgPSBNYXRoLmNlaWwobnVtU3BhY2VzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBkZWNpbWFsUGxhY2VzID0gTWF0aC5tYXgoX2RlY2ltYWxQbGFjZXMoc3BhY2luZyksIF9kZWNpbWFsUGxhY2VzKG5pY2VNaW4pKTtcbiAgICBmYWN0b3IgPSBNYXRoLnBvdygxMCwgaXNOdWxsT3JVbmRlZihwcmVjaXNpb24pID8gZGVjaW1hbFBsYWNlcyA6IHByZWNpc2lvbik7XG4gICAgbmljZU1pbiA9IE1hdGgucm91bmQobmljZU1pbiAqIGZhY3RvcikgLyBmYWN0b3I7XG4gICAgbmljZU1heCA9IE1hdGgucm91bmQobmljZU1heCAqIGZhY3RvcikgLyBmYWN0b3I7XG4gICAgbGV0IGogPSAwO1xuICAgIGlmIChtaW5EZWZpbmVkKSB7XG4gICAgICAgIGlmIChpbmNsdWRlQm91bmRzICYmIG5pY2VNaW4gIT09IG1pbikge1xuICAgICAgICAgICAgdGlja3MucHVzaCh7XG4gICAgICAgICAgICAgICAgdmFsdWU6IG1pblxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAobmljZU1pbiA8IG1pbikge1xuICAgICAgICAgICAgICAgIGorKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhbG1vc3RFcXVhbHMoTWF0aC5yb3VuZCgobmljZU1pbiArIGogKiBzcGFjaW5nKSAqIGZhY3RvcikgLyBmYWN0b3IsIG1pbiwgcmVsYXRpdmVMYWJlbFNpemUobWluLCBtaW5TcGFjaW5nLCBnZW5lcmF0aW9uT3B0aW9ucykpKSB7XG4gICAgICAgICAgICAgICAgaisrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG5pY2VNaW4gPCBtaW4pIHtcbiAgICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IoOyBqIDwgbnVtU3BhY2VzOyArK2ope1xuICAgICAgICBjb25zdCB0aWNrVmFsdWUgPSBNYXRoLnJvdW5kKChuaWNlTWluICsgaiAqIHNwYWNpbmcpICogZmFjdG9yKSAvIGZhY3RvcjtcbiAgICAgICAgaWYgKG1heERlZmluZWQgJiYgdGlja1ZhbHVlID4gbWF4KSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB0aWNrcy5wdXNoKHtcbiAgICAgICAgICAgIHZhbHVlOiB0aWNrVmFsdWVcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChtYXhEZWZpbmVkICYmIGluY2x1ZGVCb3VuZHMgJiYgbmljZU1heCAhPT0gbWF4KSB7XG4gICAgICAgIGlmICh0aWNrcy5sZW5ndGggJiYgYWxtb3N0RXF1YWxzKHRpY2tzW3RpY2tzLmxlbmd0aCAtIDFdLnZhbHVlLCBtYXgsIHJlbGF0aXZlTGFiZWxTaXplKG1heCwgbWluU3BhY2luZywgZ2VuZXJhdGlvbk9wdGlvbnMpKSkge1xuICAgICAgICAgICAgdGlja3NbdGlja3MubGVuZ3RoIC0gMV0udmFsdWUgPSBtYXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aWNrcy5wdXNoKHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogbWF4XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIW1heERlZmluZWQgfHwgbmljZU1heCA9PT0gbWF4KSB7XG4gICAgICAgIHRpY2tzLnB1c2goe1xuICAgICAgICAgICAgdmFsdWU6IG5pY2VNYXhcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0aWNrcztcbn1cbmZ1bmN0aW9uIHJlbGF0aXZlTGFiZWxTaXplKHZhbHVlLCBtaW5TcGFjaW5nLCB7IGhvcml6b250YWwgLCBtaW5Sb3RhdGlvbiAgfSkge1xuICAgIGNvbnN0IHJhZCA9IHRvUmFkaWFucyhtaW5Sb3RhdGlvbik7XG4gICAgY29uc3QgcmF0aW8gPSAoaG9yaXpvbnRhbCA/IE1hdGguc2luKHJhZCkgOiBNYXRoLmNvcyhyYWQpKSB8fCAwLjAwMTtcbiAgICBjb25zdCBsZW5ndGggPSAwLjc1ICogbWluU3BhY2luZyAqICgnJyArIHZhbHVlKS5sZW5ndGg7XG4gICAgcmV0dXJuIE1hdGgubWluKG1pblNwYWNpbmcgLyByYXRpbywgbGVuZ3RoKTtcbn1cbmNsYXNzIExpbmVhclNjYWxlQmFzZSBleHRlbmRzIFNjYWxlIHtcbiAgICBjb25zdHJ1Y3RvcihjZmcpe1xuICAgICAgICBzdXBlcihjZmcpO1xuICAgICAgICAgdGhpcy5zdGFydCA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMuZW5kID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5fc3RhcnRWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMuX2VuZFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl92YWx1ZVJhbmdlID0gMDtcbiAgICB9XG4gICAgcGFyc2UocmF3LCBpbmRleCkge1xuICAgICAgICBpZiAoaXNOdWxsT3JVbmRlZihyYXcpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHR5cGVvZiByYXcgPT09ICdudW1iZXInIHx8IHJhdyBpbnN0YW5jZW9mIE51bWJlcikgJiYgIWlzRmluaXRlKCtyYXcpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gK3JhdztcbiAgICB9XG4gICAgaGFuZGxlVGlja1JhbmdlT3B0aW9ucygpIHtcbiAgICAgICAgY29uc3QgeyBiZWdpbkF0WmVybyAgfSA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgeyBtaW5EZWZpbmVkICwgbWF4RGVmaW5lZCAgfSA9IHRoaXMuZ2V0VXNlckJvdW5kcygpO1xuICAgICAgICBsZXQgeyBtaW4gLCBtYXggIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBzZXRNaW4gPSAodik9Pm1pbiA9IG1pbkRlZmluZWQgPyBtaW4gOiB2O1xuICAgICAgICBjb25zdCBzZXRNYXggPSAodik9Pm1heCA9IG1heERlZmluZWQgPyBtYXggOiB2O1xuICAgICAgICBpZiAoYmVnaW5BdFplcm8pIHtcbiAgICAgICAgICAgIGNvbnN0IG1pblNpZ24gPSBzaWduKG1pbik7XG4gICAgICAgICAgICBjb25zdCBtYXhTaWduID0gc2lnbihtYXgpO1xuICAgICAgICAgICAgaWYgKG1pblNpZ24gPCAwICYmIG1heFNpZ24gPCAwKSB7XG4gICAgICAgICAgICAgICAgc2V0TWF4KDApO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtaW5TaWduID4gMCAmJiBtYXhTaWduID4gMCkge1xuICAgICAgICAgICAgICAgIHNldE1pbigwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobWluID09PSBtYXgpIHtcbiAgICAgICAgICAgIGxldCBvZmZzZXQgPSBtYXggPT09IDAgPyAxIDogTWF0aC5hYnMobWF4ICogMC4wNSk7XG4gICAgICAgICAgICBzZXRNYXgobWF4ICsgb2Zmc2V0KTtcbiAgICAgICAgICAgIGlmICghYmVnaW5BdFplcm8pIHtcbiAgICAgICAgICAgICAgICBzZXRNaW4obWluIC0gb2Zmc2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1pbiA9IG1pbjtcbiAgICAgICAgdGhpcy5tYXggPSBtYXg7XG4gICAgfVxuICAgIGdldFRpY2tMaW1pdCgpIHtcbiAgICAgICAgY29uc3QgdGlja09wdHMgPSB0aGlzLm9wdGlvbnMudGlja3M7XG4gICAgICAgIGxldCB7IG1heFRpY2tzTGltaXQgLCBzdGVwU2l6ZSAgfSA9IHRpY2tPcHRzO1xuICAgICAgICBsZXQgbWF4VGlja3M7XG4gICAgICAgIGlmIChzdGVwU2l6ZSkge1xuICAgICAgICAgICAgbWF4VGlja3MgPSBNYXRoLmNlaWwodGhpcy5tYXggLyBzdGVwU2l6ZSkgLSBNYXRoLmZsb29yKHRoaXMubWluIC8gc3RlcFNpemUpICsgMTtcbiAgICAgICAgICAgIGlmIChtYXhUaWNrcyA+IDEwMDApIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYHNjYWxlcy4ke3RoaXMuaWR9LnRpY2tzLnN0ZXBTaXplOiAke3N0ZXBTaXplfSB3b3VsZCByZXN1bHQgZ2VuZXJhdGluZyB1cCB0byAke21heFRpY2tzfSB0aWNrcy4gTGltaXRpbmcgdG8gMTAwMC5gKTtcbiAgICAgICAgICAgICAgICBtYXhUaWNrcyA9IDEwMDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtYXhUaWNrcyA9IHRoaXMuY29tcHV0ZVRpY2tMaW1pdCgpO1xuICAgICAgICAgICAgbWF4VGlja3NMaW1pdCA9IG1heFRpY2tzTGltaXQgfHwgMTE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1heFRpY2tzTGltaXQpIHtcbiAgICAgICAgICAgIG1heFRpY2tzID0gTWF0aC5taW4obWF4VGlja3NMaW1pdCwgbWF4VGlja3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXhUaWNrcztcbiAgICB9XG4gY29tcHV0ZVRpY2tMaW1pdCgpIHtcbiAgICAgICAgcmV0dXJuIE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICB9XG4gICAgYnVpbGRUaWNrcygpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgdGlja09wdHMgPSBvcHRzLnRpY2tzO1xuICAgICAgICBsZXQgbWF4VGlja3MgPSB0aGlzLmdldFRpY2tMaW1pdCgpO1xuICAgICAgICBtYXhUaWNrcyA9IE1hdGgubWF4KDIsIG1heFRpY2tzKTtcbiAgICAgICAgY29uc3QgbnVtZXJpY0dlbmVyYXRvck9wdGlvbnMgPSB7XG4gICAgICAgICAgICBtYXhUaWNrcyxcbiAgICAgICAgICAgIGJvdW5kczogb3B0cy5ib3VuZHMsXG4gICAgICAgICAgICBtaW46IG9wdHMubWluLFxuICAgICAgICAgICAgbWF4OiBvcHRzLm1heCxcbiAgICAgICAgICAgIHByZWNpc2lvbjogdGlja09wdHMucHJlY2lzaW9uLFxuICAgICAgICAgICAgc3RlcDogdGlja09wdHMuc3RlcFNpemUsXG4gICAgICAgICAgICBjb3VudDogdGlja09wdHMuY291bnQsXG4gICAgICAgICAgICBtYXhEaWdpdHM6IHRoaXMuX21heERpZ2l0cygpLFxuICAgICAgICAgICAgaG9yaXpvbnRhbDogdGhpcy5pc0hvcml6b250YWwoKSxcbiAgICAgICAgICAgIG1pblJvdGF0aW9uOiB0aWNrT3B0cy5taW5Sb3RhdGlvbiB8fCAwLFxuICAgICAgICAgICAgaW5jbHVkZUJvdW5kczogdGlja09wdHMuaW5jbHVkZUJvdW5kcyAhPT0gZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZGF0YVJhbmdlID0gdGhpcy5fcmFuZ2UgfHwgdGhpcztcbiAgICAgICAgY29uc3QgdGlja3MgPSBnZW5lcmF0ZVRpY2tzJDEobnVtZXJpY0dlbmVyYXRvck9wdGlvbnMsIGRhdGFSYW5nZSk7XG4gICAgICAgIGlmIChvcHRzLmJvdW5kcyA9PT0gJ3RpY2tzJykge1xuICAgICAgICAgICAgX3NldE1pbkFuZE1heEJ5S2V5KHRpY2tzLCB0aGlzLCAndmFsdWUnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0cy5yZXZlcnNlKSB7XG4gICAgICAgICAgICB0aWNrcy5yZXZlcnNlKCk7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0ID0gdGhpcy5tYXg7XG4gICAgICAgICAgICB0aGlzLmVuZCA9IHRoaXMubWluO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdGFydCA9IHRoaXMubWluO1xuICAgICAgICAgICAgdGhpcy5lbmQgPSB0aGlzLm1heDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGlja3M7XG4gICAgfVxuIGNvbmZpZ3VyZSgpIHtcbiAgICAgICAgY29uc3QgdGlja3MgPSB0aGlzLnRpY2tzO1xuICAgICAgICBsZXQgc3RhcnQgPSB0aGlzLm1pbjtcbiAgICAgICAgbGV0IGVuZCA9IHRoaXMubWF4O1xuICAgICAgICBzdXBlci5jb25maWd1cmUoKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5vZmZzZXQgJiYgdGlja3MubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBvZmZzZXQgPSAoZW5kIC0gc3RhcnQpIC8gTWF0aC5tYXgodGlja3MubGVuZ3RoIC0gMSwgMSkgLyAyO1xuICAgICAgICAgICAgc3RhcnQgLT0gb2Zmc2V0O1xuICAgICAgICAgICAgZW5kICs9IG9mZnNldDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zdGFydFZhbHVlID0gc3RhcnQ7XG4gICAgICAgIHRoaXMuX2VuZFZhbHVlID0gZW5kO1xuICAgICAgICB0aGlzLl92YWx1ZVJhbmdlID0gZW5kIC0gc3RhcnQ7XG4gICAgfVxuICAgIGdldExhYmVsRm9yVmFsdWUodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdE51bWJlcih2YWx1ZSwgdGhpcy5jaGFydC5vcHRpb25zLmxvY2FsZSwgdGhpcy5vcHRpb25zLnRpY2tzLmZvcm1hdCk7XG4gICAgfVxufVxuXG5jbGFzcyBMaW5lYXJTY2FsZSBleHRlbmRzIExpbmVhclNjYWxlQmFzZSB7XG4gICAgc3RhdGljIGlkID0gJ2xpbmVhcic7XG4gc3RhdGljIGRlZmF1bHRzID0ge1xuICAgICAgICB0aWNrczoge1xuICAgICAgICAgICAgY2FsbGJhY2s6IFRpY2tzLmZvcm1hdHRlcnMubnVtZXJpY1xuICAgICAgICB9XG4gICAgfTtcbiAgICBkZXRlcm1pbmVEYXRhTGltaXRzKCkge1xuICAgICAgICBjb25zdCB7IG1pbiAsIG1heCAgfSA9IHRoaXMuZ2V0TWluTWF4KHRydWUpO1xuICAgICAgICB0aGlzLm1pbiA9IGlzTnVtYmVyRmluaXRlKG1pbikgPyBtaW4gOiAwO1xuICAgICAgICB0aGlzLm1heCA9IGlzTnVtYmVyRmluaXRlKG1heCkgPyBtYXggOiAxO1xuICAgICAgICB0aGlzLmhhbmRsZVRpY2tSYW5nZU9wdGlvbnMoKTtcbiAgICB9XG4gY29tcHV0ZVRpY2tMaW1pdCgpIHtcbiAgICAgICAgY29uc3QgaG9yaXpvbnRhbCA9IHRoaXMuaXNIb3Jpem9udGFsKCk7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IGhvcml6b250YWwgPyB0aGlzLndpZHRoIDogdGhpcy5oZWlnaHQ7XG4gICAgICAgIGNvbnN0IG1pblJvdGF0aW9uID0gdG9SYWRpYW5zKHRoaXMub3B0aW9ucy50aWNrcy5taW5Sb3RhdGlvbik7XG4gICAgICAgIGNvbnN0IHJhdGlvID0gKGhvcml6b250YWwgPyBNYXRoLnNpbihtaW5Sb3RhdGlvbikgOiBNYXRoLmNvcyhtaW5Sb3RhdGlvbikpIHx8IDAuMDAxO1xuICAgICAgICBjb25zdCB0aWNrRm9udCA9IHRoaXMuX3Jlc29sdmVUaWNrRm9udE9wdGlvbnMoMCk7XG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwobGVuZ3RoIC8gTWF0aC5taW4oNDAsIHRpY2tGb250LmxpbmVIZWlnaHQgLyByYXRpbykpO1xuICAgIH1cbiAgICBnZXRQaXhlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCA/IE5hTiA6IHRoaXMuZ2V0UGl4ZWxGb3JEZWNpbWFsKCh2YWx1ZSAtIHRoaXMuX3N0YXJ0VmFsdWUpIC8gdGhpcy5fdmFsdWVSYW5nZSk7XG4gICAgfVxuICAgIGdldFZhbHVlRm9yUGl4ZWwocGl4ZWwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXJ0VmFsdWUgKyB0aGlzLmdldERlY2ltYWxGb3JQaXhlbChwaXhlbCkgKiB0aGlzLl92YWx1ZVJhbmdlO1xuICAgIH1cbn1cblxuY29uc3QgbG9nMTBGbG9vciA9ICh2KT0+TWF0aC5mbG9vcihsb2cxMCh2KSk7XG5jb25zdCBjaGFuZ2VFeHBvbmVudCA9ICh2LCBtKT0+TWF0aC5wb3coMTAsIGxvZzEwRmxvb3IodikgKyBtKTtcbmZ1bmN0aW9uIGlzTWFqb3IodGlja1ZhbCkge1xuICAgIGNvbnN0IHJlbWFpbiA9IHRpY2tWYWwgLyBNYXRoLnBvdygxMCwgbG9nMTBGbG9vcih0aWNrVmFsKSk7XG4gICAgcmV0dXJuIHJlbWFpbiA9PT0gMTtcbn1cbmZ1bmN0aW9uIHN0ZXBzKG1pbiwgbWF4LCByYW5nZUV4cCkge1xuICAgIGNvbnN0IHJhbmdlU3RlcCA9IE1hdGgucG93KDEwLCByYW5nZUV4cCk7XG4gICAgY29uc3Qgc3RhcnQgPSBNYXRoLmZsb29yKG1pbiAvIHJhbmdlU3RlcCk7XG4gICAgY29uc3QgZW5kID0gTWF0aC5jZWlsKG1heCAvIHJhbmdlU3RlcCk7XG4gICAgcmV0dXJuIGVuZCAtIHN0YXJ0O1xufVxuZnVuY3Rpb24gc3RhcnRFeHAobWluLCBtYXgpIHtcbiAgICBjb25zdCByYW5nZSA9IG1heCAtIG1pbjtcbiAgICBsZXQgcmFuZ2VFeHAgPSBsb2cxMEZsb29yKHJhbmdlKTtcbiAgICB3aGlsZShzdGVwcyhtaW4sIG1heCwgcmFuZ2VFeHApID4gMTApe1xuICAgICAgICByYW5nZUV4cCsrO1xuICAgIH1cbiAgICB3aGlsZShzdGVwcyhtaW4sIG1heCwgcmFuZ2VFeHApIDwgMTApe1xuICAgICAgICByYW5nZUV4cC0tO1xuICAgIH1cbiAgICByZXR1cm4gTWF0aC5taW4ocmFuZ2VFeHAsIGxvZzEwRmxvb3IobWluKSk7XG59XG4gZnVuY3Rpb24gZ2VuZXJhdGVUaWNrcyhnZW5lcmF0aW9uT3B0aW9ucywgeyBtaW4gLCBtYXggIH0pIHtcbiAgICBtaW4gPSBmaW5pdGVPckRlZmF1bHQoZ2VuZXJhdGlvbk9wdGlvbnMubWluLCBtaW4pO1xuICAgIGNvbnN0IHRpY2tzID0gW107XG4gICAgY29uc3QgbWluRXhwID0gbG9nMTBGbG9vcihtaW4pO1xuICAgIGxldCBleHAgPSBzdGFydEV4cChtaW4sIG1heCk7XG4gICAgbGV0IHByZWNpc2lvbiA9IGV4cCA8IDAgPyBNYXRoLnBvdygxMCwgTWF0aC5hYnMoZXhwKSkgOiAxO1xuICAgIGNvbnN0IHN0ZXBTaXplID0gTWF0aC5wb3coMTAsIGV4cCk7XG4gICAgY29uc3QgYmFzZSA9IG1pbkV4cCA+IGV4cCA/IE1hdGgucG93KDEwLCBtaW5FeHApIDogMDtcbiAgICBjb25zdCBzdGFydCA9IE1hdGgucm91bmQoKG1pbiAtIGJhc2UpICogcHJlY2lzaW9uKSAvIHByZWNpc2lvbjtcbiAgICBjb25zdCBvZmZzZXQgPSBNYXRoLmZsb29yKChtaW4gLSBiYXNlKSAvIHN0ZXBTaXplIC8gMTApICogc3RlcFNpemUgKiAxMDtcbiAgICBsZXQgc2lnbmlmaWNhbmQgPSBNYXRoLmZsb29yKChzdGFydCAtIG9mZnNldCkgLyBNYXRoLnBvdygxMCwgZXhwKSk7XG4gICAgbGV0IHZhbHVlID0gZmluaXRlT3JEZWZhdWx0KGdlbmVyYXRpb25PcHRpb25zLm1pbiwgTWF0aC5yb3VuZCgoYmFzZSArIG9mZnNldCArIHNpZ25pZmljYW5kICogTWF0aC5wb3coMTAsIGV4cCkpICogcHJlY2lzaW9uKSAvIHByZWNpc2lvbik7XG4gICAgd2hpbGUodmFsdWUgPCBtYXgpe1xuICAgICAgICB0aWNrcy5wdXNoKHtcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgbWFqb3I6IGlzTWFqb3IodmFsdWUpLFxuICAgICAgICAgICAgc2lnbmlmaWNhbmRcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChzaWduaWZpY2FuZCA+PSAxMCkge1xuICAgICAgICAgICAgc2lnbmlmaWNhbmQgPSBzaWduaWZpY2FuZCA8IDE1ID8gMTUgOiAyMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNpZ25pZmljYW5kKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNpZ25pZmljYW5kID49IDIwKSB7XG4gICAgICAgICAgICBleHArKztcbiAgICAgICAgICAgIHNpZ25pZmljYW5kID0gMjtcbiAgICAgICAgICAgIHByZWNpc2lvbiA9IGV4cCA+PSAwID8gMSA6IHByZWNpc2lvbjtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZSA9IE1hdGgucm91bmQoKGJhc2UgKyBvZmZzZXQgKyBzaWduaWZpY2FuZCAqIE1hdGgucG93KDEwLCBleHApKSAqIHByZWNpc2lvbikgLyBwcmVjaXNpb247XG4gICAgfVxuICAgIGNvbnN0IGxhc3RUaWNrID0gZmluaXRlT3JEZWZhdWx0KGdlbmVyYXRpb25PcHRpb25zLm1heCwgdmFsdWUpO1xuICAgIHRpY2tzLnB1c2goe1xuICAgICAgICB2YWx1ZTogbGFzdFRpY2ssXG4gICAgICAgIG1ham9yOiBpc01ham9yKGxhc3RUaWNrKSxcbiAgICAgICAgc2lnbmlmaWNhbmRcbiAgICB9KTtcbiAgICByZXR1cm4gdGlja3M7XG59XG5jbGFzcyBMb2dhcml0aG1pY1NjYWxlIGV4dGVuZHMgU2NhbGUge1xuICAgIHN0YXRpYyBpZCA9ICdsb2dhcml0aG1pYyc7XG4gc3RhdGljIGRlZmF1bHRzID0ge1xuICAgICAgICB0aWNrczoge1xuICAgICAgICAgICAgY2FsbGJhY2s6IFRpY2tzLmZvcm1hdHRlcnMubG9nYXJpdGhtaWMsXG4gICAgICAgICAgICBtYWpvcjoge1xuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3RydWN0b3IoY2ZnKXtcbiAgICAgICAgc3VwZXIoY2ZnKTtcbiAgICAgICAgIHRoaXMuc3RhcnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLmVuZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMuX3N0YXJ0VmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3ZhbHVlUmFuZ2UgPSAwO1xuICAgIH1cbiAgICBwYXJzZShyYXcsIGluZGV4KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gTGluZWFyU2NhbGVCYXNlLnByb3RvdHlwZS5wYXJzZS5hcHBseSh0aGlzLCBbXG4gICAgICAgICAgICByYXcsXG4gICAgICAgICAgICBpbmRleFxuICAgICAgICBdKTtcbiAgICAgICAgaWYgKHZhbHVlID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl96ZXJvID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzTnVtYmVyRmluaXRlKHZhbHVlKSAmJiB2YWx1ZSA+IDAgPyB2YWx1ZSA6IG51bGw7XG4gICAgfVxuICAgIGRldGVybWluZURhdGFMaW1pdHMoKSB7XG4gICAgICAgIGNvbnN0IHsgbWluICwgbWF4ICB9ID0gdGhpcy5nZXRNaW5NYXgodHJ1ZSk7XG4gICAgICAgIHRoaXMubWluID0gaXNOdW1iZXJGaW5pdGUobWluKSA/IE1hdGgubWF4KDAsIG1pbikgOiBudWxsO1xuICAgICAgICB0aGlzLm1heCA9IGlzTnVtYmVyRmluaXRlKG1heCkgPyBNYXRoLm1heCgwLCBtYXgpIDogbnVsbDtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5iZWdpbkF0WmVybykge1xuICAgICAgICAgICAgdGhpcy5femVybyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3plcm8gJiYgdGhpcy5taW4gIT09IHRoaXMuX3N1Z2dlc3RlZE1pbiAmJiAhaXNOdW1iZXJGaW5pdGUodGhpcy5fdXNlck1pbikpIHtcbiAgICAgICAgICAgIHRoaXMubWluID0gbWluID09PSBjaGFuZ2VFeHBvbmVudCh0aGlzLm1pbiwgMCkgPyBjaGFuZ2VFeHBvbmVudCh0aGlzLm1pbiwgLTEpIDogY2hhbmdlRXhwb25lbnQodGhpcy5taW4sIDApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaGFuZGxlVGlja1JhbmdlT3B0aW9ucygpO1xuICAgIH1cbiAgICBoYW5kbGVUaWNrUmFuZ2VPcHRpb25zKCkge1xuICAgICAgICBjb25zdCB7IG1pbkRlZmluZWQgLCBtYXhEZWZpbmVkICB9ID0gdGhpcy5nZXRVc2VyQm91bmRzKCk7XG4gICAgICAgIGxldCBtaW4gPSB0aGlzLm1pbjtcbiAgICAgICAgbGV0IG1heCA9IHRoaXMubWF4O1xuICAgICAgICBjb25zdCBzZXRNaW4gPSAodik9Pm1pbiA9IG1pbkRlZmluZWQgPyBtaW4gOiB2O1xuICAgICAgICBjb25zdCBzZXRNYXggPSAodik9Pm1heCA9IG1heERlZmluZWQgPyBtYXggOiB2O1xuICAgICAgICBpZiAobWluID09PSBtYXgpIHtcbiAgICAgICAgICAgIGlmIChtaW4gPD0gMCkge1xuICAgICAgICAgICAgICAgIHNldE1pbigxKTtcbiAgICAgICAgICAgICAgICBzZXRNYXgoMTApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZXRNaW4oY2hhbmdlRXhwb25lbnQobWluLCAtMSkpO1xuICAgICAgICAgICAgICAgIHNldE1heChjaGFuZ2VFeHBvbmVudChtYXgsICsxKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1pbiA8PSAwKSB7XG4gICAgICAgICAgICBzZXRNaW4oY2hhbmdlRXhwb25lbnQobWF4LCAtMSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXggPD0gMCkge1xuICAgICAgICAgICAgc2V0TWF4KGNoYW5nZUV4cG9uZW50KG1pbiwgKzEpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1pbiA9IG1pbjtcbiAgICAgICAgdGhpcy5tYXggPSBtYXg7XG4gICAgfVxuICAgIGJ1aWxkVGlja3MoKSB7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGdlbmVyYXRpb25PcHRpb25zID0ge1xuICAgICAgICAgICAgbWluOiB0aGlzLl91c2VyTWluLFxuICAgICAgICAgICAgbWF4OiB0aGlzLl91c2VyTWF4XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHRpY2tzID0gZ2VuZXJhdGVUaWNrcyhnZW5lcmF0aW9uT3B0aW9ucywgdGhpcyk7XG4gICAgICAgIGlmIChvcHRzLmJvdW5kcyA9PT0gJ3RpY2tzJykge1xuICAgICAgICAgICAgX3NldE1pbkFuZE1heEJ5S2V5KHRpY2tzLCB0aGlzLCAndmFsdWUnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0cy5yZXZlcnNlKSB7XG4gICAgICAgICAgICB0aWNrcy5yZXZlcnNlKCk7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0ID0gdGhpcy5tYXg7XG4gICAgICAgICAgICB0aGlzLmVuZCA9IHRoaXMubWluO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdGFydCA9IHRoaXMubWluO1xuICAgICAgICAgICAgdGhpcy5lbmQgPSB0aGlzLm1heDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGlja3M7XG4gICAgfVxuIGdldExhYmVsRm9yVmFsdWUodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyAnMCcgOiBmb3JtYXROdW1iZXIodmFsdWUsIHRoaXMuY2hhcnQub3B0aW9ucy5sb2NhbGUsIHRoaXMub3B0aW9ucy50aWNrcy5mb3JtYXQpO1xuICAgIH1cbiBjb25maWd1cmUoKSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5taW47XG4gICAgICAgIHN1cGVyLmNvbmZpZ3VyZSgpO1xuICAgICAgICB0aGlzLl9zdGFydFZhbHVlID0gbG9nMTAoc3RhcnQpO1xuICAgICAgICB0aGlzLl92YWx1ZVJhbmdlID0gbG9nMTAodGhpcy5tYXgpIC0gbG9nMTAoc3RhcnQpO1xuICAgIH1cbiAgICBnZXRQaXhlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSAwKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHRoaXMubWluO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCBpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGl4ZWxGb3JEZWNpbWFsKHZhbHVlID09PSB0aGlzLm1pbiA/IDAgOiAobG9nMTAodmFsdWUpIC0gdGhpcy5fc3RhcnRWYWx1ZSkgLyB0aGlzLl92YWx1ZVJhbmdlKTtcbiAgICB9XG4gICAgZ2V0VmFsdWVGb3JQaXhlbChwaXhlbCkge1xuICAgICAgICBjb25zdCBkZWNpbWFsID0gdGhpcy5nZXREZWNpbWFsRm9yUGl4ZWwocGl4ZWwpO1xuICAgICAgICByZXR1cm4gTWF0aC5wb3coMTAsIHRoaXMuX3N0YXJ0VmFsdWUgKyBkZWNpbWFsICogdGhpcy5fdmFsdWVSYW5nZSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRUaWNrQmFja2Ryb3BIZWlnaHQob3B0cykge1xuICAgIGNvbnN0IHRpY2tPcHRzID0gb3B0cy50aWNrcztcbiAgICBpZiAodGlja09wdHMuZGlzcGxheSAmJiBvcHRzLmRpc3BsYXkpIHtcbiAgICAgICAgY29uc3QgcGFkZGluZyA9IHRvUGFkZGluZyh0aWNrT3B0cy5iYWNrZHJvcFBhZGRpbmcpO1xuICAgICAgICByZXR1cm4gdmFsdWVPckRlZmF1bHQodGlja09wdHMuZm9udCAmJiB0aWNrT3B0cy5mb250LnNpemUsIGRlZmF1bHRzLmZvbnQuc2l6ZSkgKyBwYWRkaW5nLmhlaWdodDtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG59XG5mdW5jdGlvbiBtZWFzdXJlTGFiZWxTaXplKGN0eCwgZm9udCwgbGFiZWwpIHtcbiAgICBsYWJlbCA9IGlzQXJyYXkobGFiZWwpID8gbGFiZWwgOiBbXG4gICAgICAgIGxhYmVsXG4gICAgXTtcbiAgICByZXR1cm4ge1xuICAgICAgICB3OiBfbG9uZ2VzdFRleHQoY3R4LCBmb250LnN0cmluZywgbGFiZWwpLFxuICAgICAgICBoOiBsYWJlbC5sZW5ndGggKiBmb250LmxpbmVIZWlnaHRcbiAgICB9O1xufVxuZnVuY3Rpb24gZGV0ZXJtaW5lTGltaXRzKGFuZ2xlLCBwb3MsIHNpemUsIG1pbiwgbWF4KSB7XG4gICAgaWYgKGFuZ2xlID09PSBtaW4gfHwgYW5nbGUgPT09IG1heCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RhcnQ6IHBvcyAtIHNpemUgLyAyLFxuICAgICAgICAgICAgZW5kOiBwb3MgKyBzaXplIC8gMlxuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAoYW5nbGUgPCBtaW4gfHwgYW5nbGUgPiBtYXgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXJ0OiBwb3MgLSBzaXplLFxuICAgICAgICAgICAgZW5kOiBwb3NcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQ6IHBvcyxcbiAgICAgICAgZW5kOiBwb3MgKyBzaXplXG4gICAgfTtcbn1cbiBmdW5jdGlvbiBmaXRXaXRoUG9pbnRMYWJlbHMoc2NhbGUpIHtcbiAgICBjb25zdCBvcmlnID0ge1xuICAgICAgICBsOiBzY2FsZS5sZWZ0ICsgc2NhbGUuX3BhZGRpbmcubGVmdCxcbiAgICAgICAgcjogc2NhbGUucmlnaHQgLSBzY2FsZS5fcGFkZGluZy5yaWdodCxcbiAgICAgICAgdDogc2NhbGUudG9wICsgc2NhbGUuX3BhZGRpbmcudG9wLFxuICAgICAgICBiOiBzY2FsZS5ib3R0b20gLSBzY2FsZS5fcGFkZGluZy5ib3R0b21cbiAgICB9O1xuICAgIGNvbnN0IGxpbWl0cyA9IE9iamVjdC5hc3NpZ24oe30sIG9yaWcpO1xuICAgIGNvbnN0IGxhYmVsU2l6ZXMgPSBbXTtcbiAgICBjb25zdCBwYWRkaW5nID0gW107XG4gICAgY29uc3QgdmFsdWVDb3VudCA9IHNjYWxlLl9wb2ludExhYmVscy5sZW5ndGg7XG4gICAgY29uc3QgcG9pbnRMYWJlbE9wdHMgPSBzY2FsZS5vcHRpb25zLnBvaW50TGFiZWxzO1xuICAgIGNvbnN0IGFkZGl0aW9uYWxBbmdsZSA9IHBvaW50TGFiZWxPcHRzLmNlbnRlclBvaW50TGFiZWxzID8gUEkgLyB2YWx1ZUNvdW50IDogMDtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgdmFsdWVDb3VudDsgaSsrKXtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHBvaW50TGFiZWxPcHRzLnNldENvbnRleHQoc2NhbGUuZ2V0UG9pbnRMYWJlbENvbnRleHQoaSkpO1xuICAgICAgICBwYWRkaW5nW2ldID0gb3B0cy5wYWRkaW5nO1xuICAgICAgICBjb25zdCBwb2ludFBvc2l0aW9uID0gc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbihpLCBzY2FsZS5kcmF3aW5nQXJlYSArIHBhZGRpbmdbaV0sIGFkZGl0aW9uYWxBbmdsZSk7XG4gICAgICAgIGNvbnN0IHBsRm9udCA9IHRvRm9udChvcHRzLmZvbnQpO1xuICAgICAgICBjb25zdCB0ZXh0U2l6ZSA9IG1lYXN1cmVMYWJlbFNpemUoc2NhbGUuY3R4LCBwbEZvbnQsIHNjYWxlLl9wb2ludExhYmVsc1tpXSk7XG4gICAgICAgIGxhYmVsU2l6ZXNbaV0gPSB0ZXh0U2l6ZTtcbiAgICAgICAgY29uc3QgYW5nbGVSYWRpYW5zID0gX25vcm1hbGl6ZUFuZ2xlKHNjYWxlLmdldEluZGV4QW5nbGUoaSkgKyBhZGRpdGlvbmFsQW5nbGUpO1xuICAgICAgICBjb25zdCBhbmdsZSA9IE1hdGgucm91bmQodG9EZWdyZWVzKGFuZ2xlUmFkaWFucykpO1xuICAgICAgICBjb25zdCBoTGltaXRzID0gZGV0ZXJtaW5lTGltaXRzKGFuZ2xlLCBwb2ludFBvc2l0aW9uLngsIHRleHRTaXplLncsIDAsIDE4MCk7XG4gICAgICAgIGNvbnN0IHZMaW1pdHMgPSBkZXRlcm1pbmVMaW1pdHMoYW5nbGUsIHBvaW50UG9zaXRpb24ueSwgdGV4dFNpemUuaCwgOTAsIDI3MCk7XG4gICAgICAgIHVwZGF0ZUxpbWl0cyhsaW1pdHMsIG9yaWcsIGFuZ2xlUmFkaWFucywgaExpbWl0cywgdkxpbWl0cyk7XG4gICAgfVxuICAgIHNjYWxlLnNldENlbnRlclBvaW50KG9yaWcubCAtIGxpbWl0cy5sLCBsaW1pdHMuciAtIG9yaWcuciwgb3JpZy50IC0gbGltaXRzLnQsIGxpbWl0cy5iIC0gb3JpZy5iKTtcbiAgICBzY2FsZS5fcG9pbnRMYWJlbEl0ZW1zID0gYnVpbGRQb2ludExhYmVsSXRlbXMoc2NhbGUsIGxhYmVsU2l6ZXMsIHBhZGRpbmcpO1xufVxuZnVuY3Rpb24gdXBkYXRlTGltaXRzKGxpbWl0cywgb3JpZywgYW5nbGUsIGhMaW1pdHMsIHZMaW1pdHMpIHtcbiAgICBjb25zdCBzaW4gPSBNYXRoLmFicyhNYXRoLnNpbihhbmdsZSkpO1xuICAgIGNvbnN0IGNvcyA9IE1hdGguYWJzKE1hdGguY29zKGFuZ2xlKSk7XG4gICAgbGV0IHggPSAwO1xuICAgIGxldCB5ID0gMDtcbiAgICBpZiAoaExpbWl0cy5zdGFydCA8IG9yaWcubCkge1xuICAgICAgICB4ID0gKG9yaWcubCAtIGhMaW1pdHMuc3RhcnQpIC8gc2luO1xuICAgICAgICBsaW1pdHMubCA9IE1hdGgubWluKGxpbWl0cy5sLCBvcmlnLmwgLSB4KTtcbiAgICB9IGVsc2UgaWYgKGhMaW1pdHMuZW5kID4gb3JpZy5yKSB7XG4gICAgICAgIHggPSAoaExpbWl0cy5lbmQgLSBvcmlnLnIpIC8gc2luO1xuICAgICAgICBsaW1pdHMuciA9IE1hdGgubWF4KGxpbWl0cy5yLCBvcmlnLnIgKyB4KTtcbiAgICB9XG4gICAgaWYgKHZMaW1pdHMuc3RhcnQgPCBvcmlnLnQpIHtcbiAgICAgICAgeSA9IChvcmlnLnQgLSB2TGltaXRzLnN0YXJ0KSAvIGNvcztcbiAgICAgICAgbGltaXRzLnQgPSBNYXRoLm1pbihsaW1pdHMudCwgb3JpZy50IC0geSk7XG4gICAgfSBlbHNlIGlmICh2TGltaXRzLmVuZCA+IG9yaWcuYikge1xuICAgICAgICB5ID0gKHZMaW1pdHMuZW5kIC0gb3JpZy5iKSAvIGNvcztcbiAgICAgICAgbGltaXRzLmIgPSBNYXRoLm1heChsaW1pdHMuYiwgb3JpZy5iICsgeSk7XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlUG9pbnRMYWJlbEl0ZW0oc2NhbGUsIGluZGV4LCBpdGVtT3B0cykge1xuICAgIGNvbnN0IG91dGVyRGlzdGFuY2UgPSBzY2FsZS5kcmF3aW5nQXJlYTtcbiAgICBjb25zdCB7IGV4dHJhICwgYWRkaXRpb25hbEFuZ2xlICwgcGFkZGluZyAsIHNpemUgIH0gPSBpdGVtT3B0cztcbiAgICBjb25zdCBwb2ludExhYmVsUG9zaXRpb24gPSBzY2FsZS5nZXRQb2ludFBvc2l0aW9uKGluZGV4LCBvdXRlckRpc3RhbmNlICsgZXh0cmEgKyBwYWRkaW5nLCBhZGRpdGlvbmFsQW5nbGUpO1xuICAgIGNvbnN0IGFuZ2xlID0gTWF0aC5yb3VuZCh0b0RlZ3JlZXMoX25vcm1hbGl6ZUFuZ2xlKHBvaW50TGFiZWxQb3NpdGlvbi5hbmdsZSArIEhBTEZfUEkpKSk7XG4gICAgY29uc3QgeSA9IHlGb3JBbmdsZShwb2ludExhYmVsUG9zaXRpb24ueSwgc2l6ZS5oLCBhbmdsZSk7XG4gICAgY29uc3QgdGV4dEFsaWduID0gZ2V0VGV4dEFsaWduRm9yQW5nbGUoYW5nbGUpO1xuICAgIGNvbnN0IGxlZnQgPSBsZWZ0Rm9yVGV4dEFsaWduKHBvaW50TGFiZWxQb3NpdGlvbi54LCBzaXplLncsIHRleHRBbGlnbik7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgeDogcG9pbnRMYWJlbFBvc2l0aW9uLngsXG4gICAgICAgIHksXG4gICAgICAgIHRleHRBbGlnbixcbiAgICAgICAgbGVmdCxcbiAgICAgICAgdG9wOiB5LFxuICAgICAgICByaWdodDogbGVmdCArIHNpemUudyxcbiAgICAgICAgYm90dG9tOiB5ICsgc2l6ZS5oXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGlzTm90T3ZlcmxhcHBlZChpdGVtLCBhcmVhKSB7XG4gICAgaWYgKCFhcmVhKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCB7IGxlZnQgLCB0b3AgLCByaWdodCAsIGJvdHRvbSAgfSA9IGl0ZW07XG4gICAgY29uc3QgYXBleGVzSW5BcmVhID0gX2lzUG9pbnRJbkFyZWEoe1xuICAgICAgICB4OiBsZWZ0LFxuICAgICAgICB5OiB0b3BcbiAgICB9LCBhcmVhKSB8fCBfaXNQb2ludEluQXJlYSh7XG4gICAgICAgIHg6IGxlZnQsXG4gICAgICAgIHk6IGJvdHRvbVxuICAgIH0sIGFyZWEpIHx8IF9pc1BvaW50SW5BcmVhKHtcbiAgICAgICAgeDogcmlnaHQsXG4gICAgICAgIHk6IHRvcFxuICAgIH0sIGFyZWEpIHx8IF9pc1BvaW50SW5BcmVhKHtcbiAgICAgICAgeDogcmlnaHQsXG4gICAgICAgIHk6IGJvdHRvbVxuICAgIH0sIGFyZWEpO1xuICAgIHJldHVybiAhYXBleGVzSW5BcmVhO1xufVxuZnVuY3Rpb24gYnVpbGRQb2ludExhYmVsSXRlbXMoc2NhbGUsIGxhYmVsU2l6ZXMsIHBhZGRpbmcpIHtcbiAgICBjb25zdCBpdGVtcyA9IFtdO1xuICAgIGNvbnN0IHZhbHVlQ291bnQgPSBzY2FsZS5fcG9pbnRMYWJlbHMubGVuZ3RoO1xuICAgIGNvbnN0IG9wdHMgPSBzY2FsZS5vcHRpb25zO1xuICAgIGNvbnN0IHsgY2VudGVyUG9pbnRMYWJlbHMgLCBkaXNwbGF5ICB9ID0gb3B0cy5wb2ludExhYmVscztcbiAgICBjb25zdCBpdGVtT3B0cyA9IHtcbiAgICAgICAgZXh0cmE6IGdldFRpY2tCYWNrZHJvcEhlaWdodChvcHRzKSAvIDIsXG4gICAgICAgIGFkZGl0aW9uYWxBbmdsZTogY2VudGVyUG9pbnRMYWJlbHMgPyBQSSAvIHZhbHVlQ291bnQgOiAwXG4gICAgfTtcbiAgICBsZXQgYXJlYTtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgdmFsdWVDb3VudDsgaSsrKXtcbiAgICAgICAgaXRlbU9wdHMucGFkZGluZyA9IHBhZGRpbmdbaV07XG4gICAgICAgIGl0ZW1PcHRzLnNpemUgPSBsYWJlbFNpemVzW2ldO1xuICAgICAgICBjb25zdCBpdGVtID0gY3JlYXRlUG9pbnRMYWJlbEl0ZW0oc2NhbGUsIGksIGl0ZW1PcHRzKTtcbiAgICAgICAgaXRlbXMucHVzaChpdGVtKTtcbiAgICAgICAgaWYgKGRpc3BsYXkgPT09ICdhdXRvJykge1xuICAgICAgICAgICAgaXRlbS52aXNpYmxlID0gaXNOb3RPdmVybGFwcGVkKGl0ZW0sIGFyZWEpO1xuICAgICAgICAgICAgaWYgKGl0ZW0udmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIGFyZWEgPSBpdGVtO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpdGVtcztcbn1cbmZ1bmN0aW9uIGdldFRleHRBbGlnbkZvckFuZ2xlKGFuZ2xlKSB7XG4gICAgaWYgKGFuZ2xlID09PSAwIHx8IGFuZ2xlID09PSAxODApIHtcbiAgICAgICAgcmV0dXJuICdjZW50ZXInO1xuICAgIH0gZWxzZSBpZiAoYW5nbGUgPCAxODApIHtcbiAgICAgICAgcmV0dXJuICdsZWZ0JztcbiAgICB9XG4gICAgcmV0dXJuICdyaWdodCc7XG59XG5mdW5jdGlvbiBsZWZ0Rm9yVGV4dEFsaWduKHgsIHcsIGFsaWduKSB7XG4gICAgaWYgKGFsaWduID09PSAncmlnaHQnKSB7XG4gICAgICAgIHggLT0gdztcbiAgICB9IGVsc2UgaWYgKGFsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICB4IC09IHcgLyAyO1xuICAgIH1cbiAgICByZXR1cm4geDtcbn1cbmZ1bmN0aW9uIHlGb3JBbmdsZSh5LCBoLCBhbmdsZSkge1xuICAgIGlmIChhbmdsZSA9PT0gOTAgfHwgYW5nbGUgPT09IDI3MCkge1xuICAgICAgICB5IC09IGggLyAyO1xuICAgIH0gZWxzZSBpZiAoYW5nbGUgPiAyNzAgfHwgYW5nbGUgPCA5MCkge1xuICAgICAgICB5IC09IGg7XG4gICAgfVxuICAgIHJldHVybiB5O1xufVxuZnVuY3Rpb24gZHJhd1BvaW50TGFiZWxCb3goY3R4LCBvcHRzLCBpdGVtKSB7XG4gICAgY29uc3QgeyBsZWZ0ICwgdG9wICwgcmlnaHQgLCBib3R0b20gIH0gPSBpdGVtO1xuICAgIGNvbnN0IHsgYmFja2Ryb3BDb2xvciAgfSA9IG9wdHM7XG4gICAgaWYgKCFpc051bGxPclVuZGVmKGJhY2tkcm9wQ29sb3IpKSB7XG4gICAgICAgIGNvbnN0IGJvcmRlclJhZGl1cyA9IHRvVFJCTENvcm5lcnMob3B0cy5ib3JkZXJSYWRpdXMpO1xuICAgICAgICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKG9wdHMuYmFja2Ryb3BQYWRkaW5nKTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGJhY2tkcm9wQ29sb3I7XG4gICAgICAgIGNvbnN0IGJhY2tkcm9wTGVmdCA9IGxlZnQgLSBwYWRkaW5nLmxlZnQ7XG4gICAgICAgIGNvbnN0IGJhY2tkcm9wVG9wID0gdG9wIC0gcGFkZGluZy50b3A7XG4gICAgICAgIGNvbnN0IGJhY2tkcm9wV2lkdGggPSByaWdodCAtIGxlZnQgKyBwYWRkaW5nLndpZHRoO1xuICAgICAgICBjb25zdCBiYWNrZHJvcEhlaWdodCA9IGJvdHRvbSAtIHRvcCArIHBhZGRpbmcuaGVpZ2h0O1xuICAgICAgICBpZiAoT2JqZWN0LnZhbHVlcyhib3JkZXJSYWRpdXMpLnNvbWUoKHYpPT52ICE9PSAwKSkge1xuICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgYWRkUm91bmRlZFJlY3RQYXRoKGN0eCwge1xuICAgICAgICAgICAgICAgIHg6IGJhY2tkcm9wTGVmdCxcbiAgICAgICAgICAgICAgICB5OiBiYWNrZHJvcFRvcCxcbiAgICAgICAgICAgICAgICB3OiBiYWNrZHJvcFdpZHRoLFxuICAgICAgICAgICAgICAgIGg6IGJhY2tkcm9wSGVpZ2h0LFxuICAgICAgICAgICAgICAgIHJhZGl1czogYm9yZGVyUmFkaXVzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjdHguZmlsbFJlY3QoYmFja2Ryb3BMZWZ0LCBiYWNrZHJvcFRvcCwgYmFja2Ryb3BXaWR0aCwgYmFja2Ryb3BIZWlnaHQpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gZHJhd1BvaW50TGFiZWxzKHNjYWxlLCBsYWJlbENvdW50KSB7XG4gICAgY29uc3QgeyBjdHggLCBvcHRpb25zOiB7IHBvaW50TGFiZWxzICB9ICB9ID0gc2NhbGU7XG4gICAgZm9yKGxldCBpID0gbGFiZWxDb3VudCAtIDE7IGkgPj0gMDsgaS0tKXtcbiAgICAgICAgY29uc3QgaXRlbSA9IHNjYWxlLl9wb2ludExhYmVsSXRlbXNbaV07XG4gICAgICAgIGlmICghaXRlbS52aXNpYmxlKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvcHRzQXRJbmRleCA9IHBvaW50TGFiZWxzLnNldENvbnRleHQoc2NhbGUuZ2V0UG9pbnRMYWJlbENvbnRleHQoaSkpO1xuICAgICAgICBkcmF3UG9pbnRMYWJlbEJveChjdHgsIG9wdHNBdEluZGV4LCBpdGVtKTtcbiAgICAgICAgY29uc3QgcGxGb250ID0gdG9Gb250KG9wdHNBdEluZGV4LmZvbnQpO1xuICAgICAgICBjb25zdCB7IHggLCB5ICwgdGV4dEFsaWduICB9ID0gaXRlbTtcbiAgICAgICAgcmVuZGVyVGV4dChjdHgsIHNjYWxlLl9wb2ludExhYmVsc1tpXSwgeCwgeSArIHBsRm9udC5saW5lSGVpZ2h0IC8gMiwgcGxGb250LCB7XG4gICAgICAgICAgICBjb2xvcjogb3B0c0F0SW5kZXguY29sb3IsXG4gICAgICAgICAgICB0ZXh0QWxpZ246IHRleHRBbGlnbixcbiAgICAgICAgICAgIHRleHRCYXNlbGluZTogJ21pZGRsZSdcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZnVuY3Rpb24gcGF0aFJhZGl1c0xpbmUoc2NhbGUsIHJhZGl1cywgY2lyY3VsYXIsIGxhYmVsQ291bnQpIHtcbiAgICBjb25zdCB7IGN0eCAgfSA9IHNjYWxlO1xuICAgIGlmIChjaXJjdWxhcikge1xuICAgICAgICBjdHguYXJjKHNjYWxlLnhDZW50ZXIsIHNjYWxlLnlDZW50ZXIsIHJhZGl1cywgMCwgVEFVKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgcG9pbnRQb3NpdGlvbiA9IHNjYWxlLmdldFBvaW50UG9zaXRpb24oMCwgcmFkaXVzKTtcbiAgICAgICAgY3R4Lm1vdmVUbyhwb2ludFBvc2l0aW9uLngsIHBvaW50UG9zaXRpb24ueSk7XG4gICAgICAgIGZvcihsZXQgaSA9IDE7IGkgPCBsYWJlbENvdW50OyBpKyspe1xuICAgICAgICAgICAgcG9pbnRQb3NpdGlvbiA9IHNjYWxlLmdldFBvaW50UG9zaXRpb24oaSwgcmFkaXVzKTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8ocG9pbnRQb3NpdGlvbi54LCBwb2ludFBvc2l0aW9uLnkpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gZHJhd1JhZGl1c0xpbmUoc2NhbGUsIGdyaWRMaW5lT3B0cywgcmFkaXVzLCBsYWJlbENvdW50LCBib3JkZXJPcHRzKSB7XG4gICAgY29uc3QgY3R4ID0gc2NhbGUuY3R4O1xuICAgIGNvbnN0IGNpcmN1bGFyID0gZ3JpZExpbmVPcHRzLmNpcmN1bGFyO1xuICAgIGNvbnN0IHsgY29sb3IgLCBsaW5lV2lkdGggIH0gPSBncmlkTGluZU9wdHM7XG4gICAgaWYgKCFjaXJjdWxhciAmJiAhbGFiZWxDb3VudCB8fCAhY29sb3IgfHwgIWxpbmVXaWR0aCB8fCByYWRpdXMgPCAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSBjb2xvcjtcbiAgICBjdHgubGluZVdpZHRoID0gbGluZVdpZHRoO1xuICAgIGN0eC5zZXRMaW5lRGFzaChib3JkZXJPcHRzLmRhc2gpO1xuICAgIGN0eC5saW5lRGFzaE9mZnNldCA9IGJvcmRlck9wdHMuZGFzaE9mZnNldDtcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgcGF0aFJhZGl1c0xpbmUoc2NhbGUsIHJhZGl1cywgY2lyY3VsYXIsIGxhYmVsQ291bnQpO1xuICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICBjdHguc3Ryb2tlKCk7XG4gICAgY3R4LnJlc3RvcmUoKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVBvaW50TGFiZWxDb250ZXh0KHBhcmVudCwgaW5kZXgsIGxhYmVsKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUNvbnRleHQocGFyZW50LCB7XG4gICAgICAgIGxhYmVsLFxuICAgICAgICBpbmRleCxcbiAgICAgICAgdHlwZTogJ3BvaW50TGFiZWwnXG4gICAgfSk7XG59XG5jbGFzcyBSYWRpYWxMaW5lYXJTY2FsZSBleHRlbmRzIExpbmVhclNjYWxlQmFzZSB7XG4gICAgc3RhdGljIGlkID0gJ3JhZGlhbExpbmVhcic7XG4gc3RhdGljIGRlZmF1bHRzID0ge1xuICAgICAgICBkaXNwbGF5OiB0cnVlLFxuICAgICAgICBhbmltYXRlOiB0cnVlLFxuICAgICAgICBwb3NpdGlvbjogJ2NoYXJ0QXJlYScsXG4gICAgICAgIGFuZ2xlTGluZXM6IHtcbiAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgICAgICBsaW5lV2lkdGg6IDEsXG4gICAgICAgICAgICBib3JkZXJEYXNoOiBbXSxcbiAgICAgICAgICAgIGJvcmRlckRhc2hPZmZzZXQ6IDAuMFxuICAgICAgICB9LFxuICAgICAgICBncmlkOiB7XG4gICAgICAgICAgICBjaXJjdWxhcjogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgc3RhcnRBbmdsZTogMCxcbiAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgIHNob3dMYWJlbEJhY2tkcm9wOiB0cnVlLFxuICAgICAgICAgICAgY2FsbGJhY2s6IFRpY2tzLmZvcm1hdHRlcnMubnVtZXJpY1xuICAgICAgICB9LFxuICAgICAgICBwb2ludExhYmVsczoge1xuICAgICAgICAgICAgYmFja2Ryb3BDb2xvcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgYmFja2Ryb3BQYWRkaW5nOiAyLFxuICAgICAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgICAgIGZvbnQ6IHtcbiAgICAgICAgICAgICAgICBzaXplOiAxMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNhbGxiYWNrIChsYWJlbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBsYWJlbDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYWRkaW5nOiA1LFxuICAgICAgICAgICAgY2VudGVyUG9pbnRMYWJlbHM6IGZhbHNlXG4gICAgICAgIH1cbiAgICB9O1xuICAgIHN0YXRpYyBkZWZhdWx0Um91dGVzID0ge1xuICAgICAgICAnYW5nbGVMaW5lcy5jb2xvcic6ICdib3JkZXJDb2xvcicsXG4gICAgICAgICdwb2ludExhYmVscy5jb2xvcic6ICdjb2xvcicsXG4gICAgICAgICd0aWNrcy5jb2xvcic6ICdjb2xvcidcbiAgICB9O1xuICAgIHN0YXRpYyBkZXNjcmlwdG9ycyA9IHtcbiAgICAgICAgYW5nbGVMaW5lczoge1xuICAgICAgICAgICAgX2ZhbGxiYWNrOiAnZ3JpZCdcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3RydWN0b3IoY2ZnKXtcbiAgICAgICAgc3VwZXIoY2ZnKTtcbiAgICAgICAgIHRoaXMueENlbnRlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMueUNlbnRlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMuZHJhd2luZ0FyZWEgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLl9wb2ludExhYmVscyA9IFtdO1xuICAgICAgICB0aGlzLl9wb2ludExhYmVsSXRlbXMgPSBbXTtcbiAgICB9XG4gICAgc2V0RGltZW5zaW9ucygpIHtcbiAgICAgICAgY29uc3QgcGFkZGluZyA9IHRoaXMuX3BhZGRpbmcgPSB0b1BhZGRpbmcoZ2V0VGlja0JhY2tkcm9wSGVpZ2h0KHRoaXMub3B0aW9ucykgLyAyKTtcbiAgICAgICAgY29uc3QgdyA9IHRoaXMud2lkdGggPSB0aGlzLm1heFdpZHRoIC0gcGFkZGluZy53aWR0aDtcbiAgICAgICAgY29uc3QgaCA9IHRoaXMuaGVpZ2h0ID0gdGhpcy5tYXhIZWlnaHQgLSBwYWRkaW5nLmhlaWdodDtcbiAgICAgICAgdGhpcy54Q2VudGVyID0gTWF0aC5mbG9vcih0aGlzLmxlZnQgKyB3IC8gMiArIHBhZGRpbmcubGVmdCk7XG4gICAgICAgIHRoaXMueUNlbnRlciA9IE1hdGguZmxvb3IodGhpcy50b3AgKyBoIC8gMiArIHBhZGRpbmcudG9wKTtcbiAgICAgICAgdGhpcy5kcmF3aW5nQXJlYSA9IE1hdGguZmxvb3IoTWF0aC5taW4odywgaCkgLyAyKTtcbiAgICB9XG4gICAgZGV0ZXJtaW5lRGF0YUxpbWl0cygpIHtcbiAgICAgICAgY29uc3QgeyBtaW4gLCBtYXggIH0gPSB0aGlzLmdldE1pbk1heChmYWxzZSk7XG4gICAgICAgIHRoaXMubWluID0gaXNOdW1iZXJGaW5pdGUobWluKSAmJiAhaXNOYU4obWluKSA/IG1pbiA6IDA7XG4gICAgICAgIHRoaXMubWF4ID0gaXNOdW1iZXJGaW5pdGUobWF4KSAmJiAhaXNOYU4obWF4KSA/IG1heCA6IDA7XG4gICAgICAgIHRoaXMuaGFuZGxlVGlja1JhbmdlT3B0aW9ucygpO1xuICAgIH1cbiBjb21wdXRlVGlja0xpbWl0KCkge1xuICAgICAgICByZXR1cm4gTWF0aC5jZWlsKHRoaXMuZHJhd2luZ0FyZWEgLyBnZXRUaWNrQmFja2Ryb3BIZWlnaHQodGhpcy5vcHRpb25zKSk7XG4gICAgfVxuICAgIGdlbmVyYXRlVGlja0xhYmVscyh0aWNrcykge1xuICAgICAgICBMaW5lYXJTY2FsZUJhc2UucHJvdG90eXBlLmdlbmVyYXRlVGlja0xhYmVscy5jYWxsKHRoaXMsIHRpY2tzKTtcbiAgICAgICAgdGhpcy5fcG9pbnRMYWJlbHMgPSB0aGlzLmdldExhYmVscygpLm1hcCgodmFsdWUsIGluZGV4KT0+e1xuICAgICAgICAgICAgY29uc3QgbGFiZWwgPSBjYWxsYmFjayh0aGlzLm9wdGlvbnMucG9pbnRMYWJlbHMuY2FsbGJhY2ssIFtcbiAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgXSwgdGhpcyk7XG4gICAgICAgICAgICByZXR1cm4gbGFiZWwgfHwgbGFiZWwgPT09IDAgPyBsYWJlbCA6ICcnO1xuICAgICAgICB9KS5maWx0ZXIoKHYsIGkpPT50aGlzLmNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGkpKTtcbiAgICB9XG4gICAgZml0KCkge1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBpZiAob3B0cy5kaXNwbGF5ICYmIG9wdHMucG9pbnRMYWJlbHMuZGlzcGxheSkge1xuICAgICAgICAgICAgZml0V2l0aFBvaW50TGFiZWxzKHRoaXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZXRDZW50ZXJQb2ludCgwLCAwLCAwLCAwKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXRDZW50ZXJQb2ludChsZWZ0TW92ZW1lbnQsIHJpZ2h0TW92ZW1lbnQsIHRvcE1vdmVtZW50LCBib3R0b21Nb3ZlbWVudCkge1xuICAgICAgICB0aGlzLnhDZW50ZXIgKz0gTWF0aC5mbG9vcigobGVmdE1vdmVtZW50IC0gcmlnaHRNb3ZlbWVudCkgLyAyKTtcbiAgICAgICAgdGhpcy55Q2VudGVyICs9IE1hdGguZmxvb3IoKHRvcE1vdmVtZW50IC0gYm90dG9tTW92ZW1lbnQpIC8gMik7XG4gICAgICAgIHRoaXMuZHJhd2luZ0FyZWEgLT0gTWF0aC5taW4odGhpcy5kcmF3aW5nQXJlYSAvIDIsIE1hdGgubWF4KGxlZnRNb3ZlbWVudCwgcmlnaHRNb3ZlbWVudCwgdG9wTW92ZW1lbnQsIGJvdHRvbU1vdmVtZW50KSk7XG4gICAgfVxuICAgIGdldEluZGV4QW5nbGUoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgYW5nbGVNdWx0aXBsaWVyID0gVEFVIC8gKHRoaXMuX3BvaW50TGFiZWxzLmxlbmd0aCB8fCAxKTtcbiAgICAgICAgY29uc3Qgc3RhcnRBbmdsZSA9IHRoaXMub3B0aW9ucy5zdGFydEFuZ2xlIHx8IDA7XG4gICAgICAgIHJldHVybiBfbm9ybWFsaXplQW5nbGUoaW5kZXggKiBhbmdsZU11bHRpcGxpZXIgKyB0b1JhZGlhbnMoc3RhcnRBbmdsZSkpO1xuICAgIH1cbiAgICBnZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZSh2YWx1ZSkge1xuICAgICAgICBpZiAoaXNOdWxsT3JVbmRlZih2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2NhbGluZ0ZhY3RvciA9IHRoaXMuZHJhd2luZ0FyZWEgLyAodGhpcy5tYXggLSB0aGlzLm1pbik7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucmV2ZXJzZSkge1xuICAgICAgICAgICAgcmV0dXJuICh0aGlzLm1heCAtIHZhbHVlKSAqIHNjYWxpbmdGYWN0b3I7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICh2YWx1ZSAtIHRoaXMubWluKSAqIHNjYWxpbmdGYWN0b3I7XG4gICAgfVxuICAgIGdldFZhbHVlRm9yRGlzdGFuY2VGcm9tQ2VudGVyKGRpc3RhbmNlKSB7XG4gICAgICAgIGlmIChpc051bGxPclVuZGVmKGRpc3RhbmNlKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzY2FsZWREaXN0YW5jZSA9IGRpc3RhbmNlIC8gKHRoaXMuZHJhd2luZ0FyZWEgLyAodGhpcy5tYXggLSB0aGlzLm1pbikpO1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLnJldmVyc2UgPyB0aGlzLm1heCAtIHNjYWxlZERpc3RhbmNlIDogdGhpcy5taW4gKyBzY2FsZWREaXN0YW5jZTtcbiAgICB9XG4gICAgZ2V0UG9pbnRMYWJlbENvbnRleHQoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgcG9pbnRMYWJlbHMgPSB0aGlzLl9wb2ludExhYmVscyB8fCBbXTtcbiAgICAgICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCBwb2ludExhYmVscy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50TGFiZWwgPSBwb2ludExhYmVsc1tpbmRleF07XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlUG9pbnRMYWJlbENvbnRleHQodGhpcy5nZXRDb250ZXh0KCksIGluZGV4LCBwb2ludExhYmVsKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRQb2ludFBvc2l0aW9uKGluZGV4LCBkaXN0YW5jZUZyb21DZW50ZXIsIGFkZGl0aW9uYWxBbmdsZSA9IDApIHtcbiAgICAgICAgY29uc3QgYW5nbGUgPSB0aGlzLmdldEluZGV4QW5nbGUoaW5kZXgpIC0gSEFMRl9QSSArIGFkZGl0aW9uYWxBbmdsZTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IE1hdGguY29zKGFuZ2xlKSAqIGRpc3RhbmNlRnJvbUNlbnRlciArIHRoaXMueENlbnRlcixcbiAgICAgICAgICAgIHk6IE1hdGguc2luKGFuZ2xlKSAqIGRpc3RhbmNlRnJvbUNlbnRlciArIHRoaXMueUNlbnRlcixcbiAgICAgICAgICAgIGFuZ2xlXG4gICAgICAgIH07XG4gICAgfVxuICAgIGdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZShpbmRleCwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UG9pbnRQb3NpdGlvbihpbmRleCwgdGhpcy5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZSh2YWx1ZSkpO1xuICAgIH1cbiAgICBnZXRCYXNlUG9zaXRpb24oaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlKGluZGV4IHx8IDAsIHRoaXMuZ2V0QmFzZVZhbHVlKCkpO1xuICAgIH1cbiAgICBnZXRQb2ludExhYmVsUG9zaXRpb24oaW5kZXgpIHtcbiAgICAgICAgY29uc3QgeyBsZWZ0ICwgdG9wICwgcmlnaHQgLCBib3R0b20gIH0gPSB0aGlzLl9wb2ludExhYmVsSXRlbXNbaW5kZXhdO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGVmdCxcbiAgICAgICAgICAgIHRvcCxcbiAgICAgICAgICAgIHJpZ2h0LFxuICAgICAgICAgICAgYm90dG9tXG4gICAgICAgIH07XG4gICAgfVxuIGRyYXdCYWNrZ3JvdW5kKCkge1xuICAgICAgICBjb25zdCB7IGJhY2tncm91bmRDb2xvciAsIGdyaWQ6IHsgY2lyY3VsYXIgIH0gIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGlmIChiYWNrZ3JvdW5kQ29sb3IpIHtcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIHBhdGhSYWRpdXNMaW5lKHRoaXMsIHRoaXMuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUodGhpcy5fZW5kVmFsdWUpLCBjaXJjdWxhciwgdGhpcy5fcG9pbnRMYWJlbHMubGVuZ3RoKTtcbiAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBiYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgfVxuICAgIH1cbiBkcmF3R3JpZCgpIHtcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHsgYW5nbGVMaW5lcyAsIGdyaWQgLCBib3JkZXIgIH0gPSBvcHRzO1xuICAgICAgICBjb25zdCBsYWJlbENvdW50ID0gdGhpcy5fcG9pbnRMYWJlbHMubGVuZ3RoO1xuICAgICAgICBsZXQgaSwgb2Zmc2V0LCBwb3NpdGlvbjtcbiAgICAgICAgaWYgKG9wdHMucG9pbnRMYWJlbHMuZGlzcGxheSkge1xuICAgICAgICAgICAgZHJhd1BvaW50TGFiZWxzKHRoaXMsIGxhYmVsQ291bnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChncmlkLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIHRoaXMudGlja3MuZm9yRWFjaCgodGljaywgaW5kZXgpPT57XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IHRoaXMuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUodGljay52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLmdldENvbnRleHQoaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvcHRzQXRJbmRleCA9IGdyaWQuc2V0Q29udGV4dChjb250ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3B0c0F0SW5kZXhCb3JkZXIgPSBib3JkZXIuc2V0Q29udGV4dChjb250ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgZHJhd1JhZGl1c0xpbmUodGhpcywgb3B0c0F0SW5kZXgsIG9mZnNldCwgbGFiZWxDb3VudCwgb3B0c0F0SW5kZXhCb3JkZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhbmdsZUxpbmVzLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICBmb3IoaSA9IGxhYmVsQ291bnQgLSAxOyBpID49IDA7IGktLSl7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3B0c0F0SW5kZXggPSBhbmdsZUxpbmVzLnNldENvbnRleHQodGhpcy5nZXRQb2ludExhYmVsQ29udGV4dChpKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBjb2xvciAsIGxpbmVXaWR0aCAgfSA9IG9wdHNBdEluZGV4O1xuICAgICAgICAgICAgICAgIGlmICghbGluZVdpZHRoIHx8ICFjb2xvcikge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY3R4LmxpbmVXaWR0aCA9IGxpbmVXaWR0aDtcbiAgICAgICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBjb2xvcjtcbiAgICAgICAgICAgICAgICBjdHguc2V0TGluZURhc2gob3B0c0F0SW5kZXguYm9yZGVyRGFzaCk7XG4gICAgICAgICAgICAgICAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gb3B0c0F0SW5kZXguYm9yZGVyRGFzaE9mZnNldDtcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSB0aGlzLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKG9wdHMudGlja3MucmV2ZXJzZSA/IHRoaXMubWluIDogdGhpcy5tYXgpO1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gdGhpcy5nZXRQb2ludFBvc2l0aW9uKGksIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgIGN0eC5tb3ZlVG8odGhpcy54Q2VudGVyLCB0aGlzLnlDZW50ZXIpO1xuICAgICAgICAgICAgICAgIGN0eC5saW5lVG8ocG9zaXRpb24ueCwgcG9zaXRpb24ueSk7XG4gICAgICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgfVxuICAgIH1cbiBkcmF3Qm9yZGVyKCkge31cbiBkcmF3TGFiZWxzKCkge1xuICAgICAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgdGlja09wdHMgPSBvcHRzLnRpY2tzO1xuICAgICAgICBpZiAoIXRpY2tPcHRzLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGFydEFuZ2xlID0gdGhpcy5nZXRJbmRleEFuZ2xlKDApO1xuICAgICAgICBsZXQgb2Zmc2V0LCB3aWR0aDtcbiAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgY3R4LnRyYW5zbGF0ZSh0aGlzLnhDZW50ZXIsIHRoaXMueUNlbnRlcik7XG4gICAgICAgIGN0eC5yb3RhdGUoc3RhcnRBbmdsZSk7XG4gICAgICAgIGN0eC50ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgICAgY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgICAgICB0aGlzLnRpY2tzLmZvckVhY2goKHRpY2ssIGluZGV4KT0+e1xuICAgICAgICAgICAgaWYgKGluZGV4ID09PSAwICYmICFvcHRzLnJldmVyc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBvcHRzQXRJbmRleCA9IHRpY2tPcHRzLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KGluZGV4KSk7XG4gICAgICAgICAgICBjb25zdCB0aWNrRm9udCA9IHRvRm9udChvcHRzQXRJbmRleC5mb250KTtcbiAgICAgICAgICAgIG9mZnNldCA9IHRoaXMuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUodGhpcy50aWNrc1tpbmRleF0udmFsdWUpO1xuICAgICAgICAgICAgaWYgKG9wdHNBdEluZGV4LnNob3dMYWJlbEJhY2tkcm9wKSB7XG4gICAgICAgICAgICAgICAgY3R4LmZvbnQgPSB0aWNrRm9udC5zdHJpbmc7XG4gICAgICAgICAgICAgICAgd2lkdGggPSBjdHgubWVhc3VyZVRleHQodGljay5sYWJlbCkud2lkdGg7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdHNBdEluZGV4LmJhY2tkcm9wQ29sb3I7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFkZGluZyA9IHRvUGFkZGluZyhvcHRzQXRJbmRleC5iYWNrZHJvcFBhZGRpbmcpO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsUmVjdCgtd2lkdGggLyAyIC0gcGFkZGluZy5sZWZ0LCAtb2Zmc2V0IC0gdGlja0ZvbnQuc2l6ZSAvIDIgLSBwYWRkaW5nLnRvcCwgd2lkdGggKyBwYWRkaW5nLndpZHRoLCB0aWNrRm9udC5zaXplICsgcGFkZGluZy5oZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVuZGVyVGV4dChjdHgsIHRpY2subGFiZWwsIDAsIC1vZmZzZXQsIHRpY2tGb250LCB7XG4gICAgICAgICAgICAgICAgY29sb3I6IG9wdHNBdEluZGV4LmNvbG9yLFxuICAgICAgICAgICAgICAgIHN0cm9rZUNvbG9yOiBvcHRzQXRJbmRleC50ZXh0U3Ryb2tlQ29sb3IsXG4gICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IG9wdHNBdEluZGV4LnRleHRTdHJva2VXaWR0aFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cbiBkcmF3VGl0bGUoKSB7fVxufVxuXG5jb25zdCBJTlRFUlZBTFMgPSB7XG4gICAgbWlsbGlzZWNvbmQ6IHtcbiAgICAgICAgY29tbW9uOiB0cnVlLFxuICAgICAgICBzaXplOiAxLFxuICAgICAgICBzdGVwczogMTAwMFxuICAgIH0sXG4gICAgc2Vjb25kOiB7XG4gICAgICAgIGNvbW1vbjogdHJ1ZSxcbiAgICAgICAgc2l6ZTogMTAwMCxcbiAgICAgICAgc3RlcHM6IDYwXG4gICAgfSxcbiAgICBtaW51dGU6IHtcbiAgICAgICAgY29tbW9uOiB0cnVlLFxuICAgICAgICBzaXplOiA2MDAwMCxcbiAgICAgICAgc3RlcHM6IDYwXG4gICAgfSxcbiAgICBob3VyOiB7XG4gICAgICAgIGNvbW1vbjogdHJ1ZSxcbiAgICAgICAgc2l6ZTogMzYwMDAwMCxcbiAgICAgICAgc3RlcHM6IDI0XG4gICAgfSxcbiAgICBkYXk6IHtcbiAgICAgICAgY29tbW9uOiB0cnVlLFxuICAgICAgICBzaXplOiA4NjQwMDAwMCxcbiAgICAgICAgc3RlcHM6IDMwXG4gICAgfSxcbiAgICB3ZWVrOiB7XG4gICAgICAgIGNvbW1vbjogZmFsc2UsXG4gICAgICAgIHNpemU6IDYwNDgwMDAwMCxcbiAgICAgICAgc3RlcHM6IDRcbiAgICB9LFxuICAgIG1vbnRoOiB7XG4gICAgICAgIGNvbW1vbjogdHJ1ZSxcbiAgICAgICAgc2l6ZTogMi42MjhlOSxcbiAgICAgICAgc3RlcHM6IDEyXG4gICAgfSxcbiAgICBxdWFydGVyOiB7XG4gICAgICAgIGNvbW1vbjogZmFsc2UsXG4gICAgICAgIHNpemU6IDcuODg0ZTksXG4gICAgICAgIHN0ZXBzOiA0XG4gICAgfSxcbiAgICB5ZWFyOiB7XG4gICAgICAgIGNvbW1vbjogdHJ1ZSxcbiAgICAgICAgc2l6ZTogMy4xNTRlMTBcbiAgICB9XG59O1xuIGNvbnN0IFVOSVRTID0gIC8qICNfX1BVUkVfXyAqLyBPYmplY3Qua2V5cyhJTlRFUlZBTFMpO1xuIGZ1bmN0aW9uIHNvcnRlcihhLCBiKSB7XG4gICAgcmV0dXJuIGEgLSBiO1xufVxuIGZ1bmN0aW9uIHBhcnNlKHNjYWxlLCBpbnB1dCkge1xuICAgIGlmIChpc051bGxPclVuZGVmKGlucHV0KSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgYWRhcHRlciA9IHNjYWxlLl9hZGFwdGVyO1xuICAgIGNvbnN0IHsgcGFyc2VyICwgcm91bmQgLCBpc29XZWVrZGF5ICB9ID0gc2NhbGUuX3BhcnNlT3B0cztcbiAgICBsZXQgdmFsdWUgPSBpbnB1dDtcbiAgICBpZiAodHlwZW9mIHBhcnNlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YWx1ZSA9IHBhcnNlcih2YWx1ZSk7XG4gICAgfVxuICAgIGlmICghaXNOdW1iZXJGaW5pdGUodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gdHlwZW9mIHBhcnNlciA9PT0gJ3N0cmluZycgPyBhZGFwdGVyLnBhcnNlKHZhbHVlLCAgcGFyc2VyKSA6IGFkYXB0ZXIucGFyc2UodmFsdWUpO1xuICAgIH1cbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChyb3VuZCkge1xuICAgICAgICB2YWx1ZSA9IHJvdW5kID09PSAnd2VlaycgJiYgKGlzTnVtYmVyKGlzb1dlZWtkYXkpIHx8IGlzb1dlZWtkYXkgPT09IHRydWUpID8gYWRhcHRlci5zdGFydE9mKHZhbHVlLCAnaXNvV2VlaycsIGlzb1dlZWtkYXkpIDogYWRhcHRlci5zdGFydE9mKHZhbHVlLCByb3VuZCk7XG4gICAgfVxuICAgIHJldHVybiArdmFsdWU7XG59XG4gZnVuY3Rpb24gZGV0ZXJtaW5lVW5pdEZvckF1dG9UaWNrcyhtaW5Vbml0LCBtaW4sIG1heCwgY2FwYWNpdHkpIHtcbiAgICBjb25zdCBpbGVuID0gVU5JVFMubGVuZ3RoO1xuICAgIGZvcihsZXQgaSA9IFVOSVRTLmluZGV4T2YobWluVW5pdCk7IGkgPCBpbGVuIC0gMTsgKytpKXtcbiAgICAgICAgY29uc3QgaW50ZXJ2YWwgPSBJTlRFUlZBTFNbVU5JVFNbaV1dO1xuICAgICAgICBjb25zdCBmYWN0b3IgPSBpbnRlcnZhbC5zdGVwcyA/IGludGVydmFsLnN0ZXBzIDogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XG4gICAgICAgIGlmIChpbnRlcnZhbC5jb21tb24gJiYgTWF0aC5jZWlsKChtYXggLSBtaW4pIC8gKGZhY3RvciAqIGludGVydmFsLnNpemUpKSA8PSBjYXBhY2l0eSkge1xuICAgICAgICAgICAgcmV0dXJuIFVOSVRTW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBVTklUU1tpbGVuIC0gMV07XG59XG4gZnVuY3Rpb24gZGV0ZXJtaW5lVW5pdEZvckZvcm1hdHRpbmcoc2NhbGUsIG51bVRpY2tzLCBtaW5Vbml0LCBtaW4sIG1heCkge1xuICAgIGZvcihsZXQgaSA9IFVOSVRTLmxlbmd0aCAtIDE7IGkgPj0gVU5JVFMuaW5kZXhPZihtaW5Vbml0KTsgaS0tKXtcbiAgICAgICAgY29uc3QgdW5pdCA9IFVOSVRTW2ldO1xuICAgICAgICBpZiAoSU5URVJWQUxTW3VuaXRdLmNvbW1vbiAmJiBzY2FsZS5fYWRhcHRlci5kaWZmKG1heCwgbWluLCB1bml0KSA+PSBudW1UaWNrcyAtIDEpIHtcbiAgICAgICAgICAgIHJldHVybiB1bml0O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBVTklUU1ttaW5Vbml0ID8gVU5JVFMuaW5kZXhPZihtaW5Vbml0KSA6IDBdO1xufVxuIGZ1bmN0aW9uIGRldGVybWluZU1ham9yVW5pdCh1bml0KSB7XG4gICAgZm9yKGxldCBpID0gVU5JVFMuaW5kZXhPZih1bml0KSArIDEsIGlsZW4gPSBVTklUUy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBpZiAoSU5URVJWQUxTW1VOSVRTW2ldXS5jb21tb24pIHtcbiAgICAgICAgICAgIHJldHVybiBVTklUU1tpXTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiBmdW5jdGlvbiBhZGRUaWNrKHRpY2tzLCB0aW1lLCB0aW1lc3RhbXBzKSB7XG4gICAgaWYgKCF0aW1lc3RhbXBzKSB7XG4gICAgICAgIHRpY2tzW3RpbWVdID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHRpbWVzdGFtcHMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHsgbG8gLCBoaSAgfSA9IF9sb29rdXAodGltZXN0YW1wcywgdGltZSk7XG4gICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IHRpbWVzdGFtcHNbbG9dID49IHRpbWUgPyB0aW1lc3RhbXBzW2xvXSA6IHRpbWVzdGFtcHNbaGldO1xuICAgICAgICB0aWNrc1t0aW1lc3RhbXBdID0gdHJ1ZTtcbiAgICB9XG59XG4gZnVuY3Rpb24gc2V0TWFqb3JUaWNrcyhzY2FsZSwgdGlja3MsIG1hcCwgbWFqb3JVbml0KSB7XG4gICAgY29uc3QgYWRhcHRlciA9IHNjYWxlLl9hZGFwdGVyO1xuICAgIGNvbnN0IGZpcnN0ID0gK2FkYXB0ZXIuc3RhcnRPZih0aWNrc1swXS52YWx1ZSwgbWFqb3JVbml0KTtcbiAgICBjb25zdCBsYXN0ID0gdGlja3NbdGlja3MubGVuZ3RoIC0gMV0udmFsdWU7XG4gICAgbGV0IG1ham9yLCBpbmRleDtcbiAgICBmb3IobWFqb3IgPSBmaXJzdDsgbWFqb3IgPD0gbGFzdDsgbWFqb3IgPSArYWRhcHRlci5hZGQobWFqb3IsIDEsIG1ham9yVW5pdCkpe1xuICAgICAgICBpbmRleCA9IG1hcFttYWpvcl07XG4gICAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgICAgICB0aWNrc1tpbmRleF0ubWFqb3IgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aWNrcztcbn1cbiBmdW5jdGlvbiB0aWNrc0Zyb21UaW1lc3RhbXBzKHNjYWxlLCB2YWx1ZXMsIG1ham9yVW5pdCkge1xuICAgIGNvbnN0IHRpY2tzID0gW107XG4gICAgIGNvbnN0IG1hcCA9IHt9O1xuICAgIGNvbnN0IGlsZW4gPSB2YWx1ZXMubGVuZ3RoO1xuICAgIGxldCBpLCB2YWx1ZTtcbiAgICBmb3IoaSA9IDA7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICB2YWx1ZSA9IHZhbHVlc1tpXTtcbiAgICAgICAgbWFwW3ZhbHVlXSA9IGk7XG4gICAgICAgIHRpY2tzLnB1c2goe1xuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICBtYWpvcjogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBpbGVuID09PSAwIHx8ICFtYWpvclVuaXQgPyB0aWNrcyA6IHNldE1ham9yVGlja3Moc2NhbGUsIHRpY2tzLCBtYXAsIG1ham9yVW5pdCk7XG59XG5jbGFzcyBUaW1lU2NhbGUgZXh0ZW5kcyBTY2FsZSB7XG4gICAgc3RhdGljIGlkID0gJ3RpbWUnO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiBib3VuZHM6ICdkYXRhJyxcbiAgICAgICAgYWRhcHRlcnM6IHt9LFxuICAgICAgICB0aW1lOiB7XG4gICAgICAgICAgICBwYXJzZXI6IGZhbHNlLFxuICAgICAgICAgICAgdW5pdDogZmFsc2UsXG4gICAgICAgICAgICByb3VuZDogZmFsc2UsXG4gICAgICAgICAgICBpc29XZWVrZGF5OiBmYWxzZSxcbiAgICAgICAgICAgIG1pblVuaXQ6ICdtaWxsaXNlY29uZCcsXG4gICAgICAgICAgICBkaXNwbGF5Rm9ybWF0czoge31cbiAgICAgICAgfSxcbiAgICAgICAgdGlja3M6IHtcbiBzb3VyY2U6ICdhdXRvJyxcbiAgICAgICAgICAgIGNhbGxiYWNrOiBmYWxzZSxcbiAgICAgICAgICAgIG1ham9yOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gY29uc3RydWN0b3IocHJvcHMpe1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgICB0aGlzLl9jYWNoZSA9IHtcbiAgICAgICAgICAgIGRhdGE6IFtdLFxuICAgICAgICAgICAgbGFiZWxzOiBbXSxcbiAgICAgICAgICAgIGFsbDogW11cbiAgICAgICAgfTtcbiAgICAgICAgIHRoaXMuX3VuaXQgPSAnZGF5JztcbiAgICAgICAgIHRoaXMuX21ham9yVW5pdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fb2Zmc2V0cyA9IHt9O1xuICAgICAgICB0aGlzLl9ub3JtYWxpemVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3BhcnNlT3B0cyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaW5pdChzY2FsZU9wdHMsIG9wdHMgPSB7fSkge1xuICAgICAgICBjb25zdCB0aW1lID0gc2NhbGVPcHRzLnRpbWUgfHwgKHNjYWxlT3B0cy50aW1lID0ge30pO1xuICAgICAgICAgY29uc3QgYWRhcHRlciA9IHRoaXMuX2FkYXB0ZXIgPSBuZXcgYWRhcHRlcnMuX2RhdGUoc2NhbGVPcHRzLmFkYXB0ZXJzLmRhdGUpO1xuICAgICAgICBhZGFwdGVyLmluaXQob3B0cyk7XG4gICAgICAgIG1lcmdlSWYodGltZS5kaXNwbGF5Rm9ybWF0cywgYWRhcHRlci5mb3JtYXRzKCkpO1xuICAgICAgICB0aGlzLl9wYXJzZU9wdHMgPSB7XG4gICAgICAgICAgICBwYXJzZXI6IHRpbWUucGFyc2VyLFxuICAgICAgICAgICAgcm91bmQ6IHRpbWUucm91bmQsXG4gICAgICAgICAgICBpc29XZWVrZGF5OiB0aW1lLmlzb1dlZWtkYXlcbiAgICAgICAgfTtcbiAgICAgICAgc3VwZXIuaW5pdChzY2FsZU9wdHMpO1xuICAgICAgICB0aGlzLl9ub3JtYWxpemVkID0gb3B0cy5ub3JtYWxpemVkO1xuICAgIH1cbiBwYXJzZShyYXcsIGluZGV4KSB7XG4gICAgICAgIGlmIChyYXcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcnNlKHRoaXMsIHJhdyk7XG4gICAgfVxuICAgIGJlZm9yZUxheW91dCgpIHtcbiAgICAgICAgc3VwZXIuYmVmb3JlTGF5b3V0KCk7XG4gICAgICAgIHRoaXMuX2NhY2hlID0ge1xuICAgICAgICAgICAgZGF0YTogW10sXG4gICAgICAgICAgICBsYWJlbHM6IFtdLFxuICAgICAgICAgICAgYWxsOiBbXVxuICAgICAgICB9O1xuICAgIH1cbiAgICBkZXRlcm1pbmVEYXRhTGltaXRzKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBhZGFwdGVyID0gdGhpcy5fYWRhcHRlcjtcbiAgICAgICAgY29uc3QgdW5pdCA9IG9wdGlvbnMudGltZS51bml0IHx8ICdkYXknO1xuICAgICAgICBsZXQgeyBtaW4gLCBtYXggLCBtaW5EZWZpbmVkICwgbWF4RGVmaW5lZCAgfSA9IHRoaXMuZ2V0VXNlckJvdW5kcygpO1xuIGZ1bmN0aW9uIF9hcHBseUJvdW5kcyhib3VuZHMpIHtcbiAgICAgICAgICAgIGlmICghbWluRGVmaW5lZCAmJiAhaXNOYU4oYm91bmRzLm1pbikpIHtcbiAgICAgICAgICAgICAgICBtaW4gPSBNYXRoLm1pbihtaW4sIGJvdW5kcy5taW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFtYXhEZWZpbmVkICYmICFpc05hTihib3VuZHMubWF4KSkge1xuICAgICAgICAgICAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgYm91bmRzLm1heCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFtaW5EZWZpbmVkIHx8ICFtYXhEZWZpbmVkKSB7XG4gICAgICAgICAgICBfYXBwbHlCb3VuZHModGhpcy5fZ2V0TGFiZWxCb3VuZHMoKSk7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5ib3VuZHMgIT09ICd0aWNrcycgfHwgb3B0aW9ucy50aWNrcy5zb3VyY2UgIT09ICdsYWJlbHMnKSB7XG4gICAgICAgICAgICAgICAgX2FwcGx5Qm91bmRzKHRoaXMuZ2V0TWluTWF4KGZhbHNlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbWluID0gaXNOdW1iZXJGaW5pdGUobWluKSAmJiAhaXNOYU4obWluKSA/IG1pbiA6ICthZGFwdGVyLnN0YXJ0T2YoRGF0ZS5ub3coKSwgdW5pdCk7XG4gICAgICAgIG1heCA9IGlzTnVtYmVyRmluaXRlKG1heCkgJiYgIWlzTmFOKG1heCkgPyBtYXggOiArYWRhcHRlci5lbmRPZihEYXRlLm5vdygpLCB1bml0KSArIDE7XG4gICAgICAgIHRoaXMubWluID0gTWF0aC5taW4obWluLCBtYXggLSAxKTtcbiAgICAgICAgdGhpcy5tYXggPSBNYXRoLm1heChtaW4gKyAxLCBtYXgpO1xuICAgIH1cbiBfZ2V0TGFiZWxCb3VuZHMoKSB7XG4gICAgICAgIGNvbnN0IGFyciA9IHRoaXMuZ2V0TGFiZWxUaW1lc3RhbXBzKCk7XG4gICAgICAgIGxldCBtaW4gPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgICAgIGxldCBtYXggPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7XG4gICAgICAgIGlmIChhcnIubGVuZ3RoKSB7XG4gICAgICAgICAgICBtaW4gPSBhcnJbMF07XG4gICAgICAgICAgICBtYXggPSBhcnJbYXJyLmxlbmd0aCAtIDFdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtaW4sXG4gICAgICAgICAgICBtYXhcbiAgICAgICAgfTtcbiAgICB9XG4gYnVpbGRUaWNrcygpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgdGltZU9wdHMgPSBvcHRpb25zLnRpbWU7XG4gICAgICAgIGNvbnN0IHRpY2tPcHRzID0gb3B0aW9ucy50aWNrcztcbiAgICAgICAgY29uc3QgdGltZXN0YW1wcyA9IHRpY2tPcHRzLnNvdXJjZSA9PT0gJ2xhYmVscycgPyB0aGlzLmdldExhYmVsVGltZXN0YW1wcygpIDogdGhpcy5fZ2VuZXJhdGUoKTtcbiAgICAgICAgaWYgKG9wdGlvbnMuYm91bmRzID09PSAndGlja3MnICYmIHRpbWVzdGFtcHMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLm1pbiA9IHRoaXMuX3VzZXJNaW4gfHwgdGltZXN0YW1wc1swXTtcbiAgICAgICAgICAgIHRoaXMubWF4ID0gdGhpcy5fdXNlck1heCB8fCB0aW1lc3RhbXBzW3RpbWVzdGFtcHMubGVuZ3RoIC0gMV07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWluID0gdGhpcy5taW47XG4gICAgICAgIGNvbnN0IG1heCA9IHRoaXMubWF4O1xuICAgICAgICBjb25zdCB0aWNrcyA9IF9maWx0ZXJCZXR3ZWVuKHRpbWVzdGFtcHMsIG1pbiwgbWF4KTtcbiAgICAgICAgdGhpcy5fdW5pdCA9IHRpbWVPcHRzLnVuaXQgfHwgKHRpY2tPcHRzLmF1dG9Ta2lwID8gZGV0ZXJtaW5lVW5pdEZvckF1dG9UaWNrcyh0aW1lT3B0cy5taW5Vbml0LCB0aGlzLm1pbiwgdGhpcy5tYXgsIHRoaXMuX2dldExhYmVsQ2FwYWNpdHkobWluKSkgOiBkZXRlcm1pbmVVbml0Rm9yRm9ybWF0dGluZyh0aGlzLCB0aWNrcy5sZW5ndGgsIHRpbWVPcHRzLm1pblVuaXQsIHRoaXMubWluLCB0aGlzLm1heCkpO1xuICAgICAgICB0aGlzLl9tYWpvclVuaXQgPSAhdGlja09wdHMubWFqb3IuZW5hYmxlZCB8fCB0aGlzLl91bml0ID09PSAneWVhcicgPyB1bmRlZmluZWQgOiBkZXRlcm1pbmVNYWpvclVuaXQodGhpcy5fdW5pdCk7XG4gICAgICAgIHRoaXMuaW5pdE9mZnNldHModGltZXN0YW1wcyk7XG4gICAgICAgIGlmIChvcHRpb25zLnJldmVyc2UpIHtcbiAgICAgICAgICAgIHRpY2tzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGlja3NGcm9tVGltZXN0YW1wcyh0aGlzLCB0aWNrcywgdGhpcy5fbWFqb3JVbml0KTtcbiAgICB9XG4gICAgYWZ0ZXJBdXRvU2tpcCgpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5vZmZzZXRBZnRlckF1dG9za2lwKSB7XG4gICAgICAgICAgICB0aGlzLmluaXRPZmZzZXRzKHRoaXMudGlja3MubWFwKCh0aWNrKT0+K3RpY2sudmFsdWUpKTtcbiAgICAgICAgfVxuICAgIH1cbiBpbml0T2Zmc2V0cyh0aW1lc3RhbXBzID0gW10pIHtcbiAgICAgICAgbGV0IHN0YXJ0ID0gMDtcbiAgICAgICAgbGV0IGVuZCA9IDA7XG4gICAgICAgIGxldCBmaXJzdCwgbGFzdDtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5vZmZzZXQgJiYgdGltZXN0YW1wcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGZpcnN0ID0gdGhpcy5nZXREZWNpbWFsRm9yVmFsdWUodGltZXN0YW1wc1swXSk7XG4gICAgICAgICAgICBpZiAodGltZXN0YW1wcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICBzdGFydCA9IDEgLSBmaXJzdDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RhcnQgPSAodGhpcy5nZXREZWNpbWFsRm9yVmFsdWUodGltZXN0YW1wc1sxXSkgLSBmaXJzdCkgLyAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGFzdCA9IHRoaXMuZ2V0RGVjaW1hbEZvclZhbHVlKHRpbWVzdGFtcHNbdGltZXN0YW1wcy5sZW5ndGggLSAxXSk7XG4gICAgICAgICAgICBpZiAodGltZXN0YW1wcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICBlbmQgPSBsYXN0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbmQgPSAobGFzdCAtIHRoaXMuZ2V0RGVjaW1hbEZvclZhbHVlKHRpbWVzdGFtcHNbdGltZXN0YW1wcy5sZW5ndGggLSAyXSkpIC8gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsaW1pdCA9IHRpbWVzdGFtcHMubGVuZ3RoIDwgMyA/IDAuNSA6IDAuMjU7XG4gICAgICAgIHN0YXJ0ID0gX2xpbWl0VmFsdWUoc3RhcnQsIDAsIGxpbWl0KTtcbiAgICAgICAgZW5kID0gX2xpbWl0VmFsdWUoZW5kLCAwLCBsaW1pdCk7XG4gICAgICAgIHRoaXMuX29mZnNldHMgPSB7XG4gICAgICAgICAgICBzdGFydCxcbiAgICAgICAgICAgIGVuZCxcbiAgICAgICAgICAgIGZhY3RvcjogMSAvIChzdGFydCArIDEgKyBlbmQpXG4gICAgICAgIH07XG4gICAgfVxuIF9nZW5lcmF0ZSgpIHtcbiAgICAgICAgY29uc3QgYWRhcHRlciA9IHRoaXMuX2FkYXB0ZXI7XG4gICAgICAgIGNvbnN0IG1pbiA9IHRoaXMubWluO1xuICAgICAgICBjb25zdCBtYXggPSB0aGlzLm1heDtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgdGltZU9wdHMgPSBvcHRpb25zLnRpbWU7XG4gICAgICAgIGNvbnN0IG1pbm9yID0gdGltZU9wdHMudW5pdCB8fCBkZXRlcm1pbmVVbml0Rm9yQXV0b1RpY2tzKHRpbWVPcHRzLm1pblVuaXQsIG1pbiwgbWF4LCB0aGlzLl9nZXRMYWJlbENhcGFjaXR5KG1pbikpO1xuICAgICAgICBjb25zdCBzdGVwU2l6ZSA9IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMudGlja3Muc3RlcFNpemUsIDEpO1xuICAgICAgICBjb25zdCB3ZWVrZGF5ID0gbWlub3IgPT09ICd3ZWVrJyA/IHRpbWVPcHRzLmlzb1dlZWtkYXkgOiBmYWxzZTtcbiAgICAgICAgY29uc3QgaGFzV2Vla2RheSA9IGlzTnVtYmVyKHdlZWtkYXkpIHx8IHdlZWtkYXkgPT09IHRydWU7XG4gICAgICAgIGNvbnN0IHRpY2tzID0ge307XG4gICAgICAgIGxldCBmaXJzdCA9IG1pbjtcbiAgICAgICAgbGV0IHRpbWUsIGNvdW50O1xuICAgICAgICBpZiAoaGFzV2Vla2RheSkge1xuICAgICAgICAgICAgZmlyc3QgPSArYWRhcHRlci5zdGFydE9mKGZpcnN0LCAnaXNvV2VlaycsIHdlZWtkYXkpO1xuICAgICAgICB9XG4gICAgICAgIGZpcnN0ID0gK2FkYXB0ZXIuc3RhcnRPZihmaXJzdCwgaGFzV2Vla2RheSA/ICdkYXknIDogbWlub3IpO1xuICAgICAgICBpZiAoYWRhcHRlci5kaWZmKG1heCwgbWluLCBtaW5vcikgPiAxMDAwMDAgKiBzdGVwU2l6ZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1pbiArICcgYW5kICcgKyBtYXggKyAnIGFyZSB0b28gZmFyIGFwYXJ0IHdpdGggc3RlcFNpemUgb2YgJyArIHN0ZXBTaXplICsgJyAnICsgbWlub3IpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRpbWVzdGFtcHMgPSBvcHRpb25zLnRpY2tzLnNvdXJjZSA9PT0gJ2RhdGEnICYmIHRoaXMuZ2V0RGF0YVRpbWVzdGFtcHMoKTtcbiAgICAgICAgZm9yKHRpbWUgPSBmaXJzdCwgY291bnQgPSAwOyB0aW1lIDwgbWF4OyB0aW1lID0gK2FkYXB0ZXIuYWRkKHRpbWUsIHN0ZXBTaXplLCBtaW5vciksIGNvdW50Kyspe1xuICAgICAgICAgICAgYWRkVGljayh0aWNrcywgdGltZSwgdGltZXN0YW1wcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWUgPT09IG1heCB8fCBvcHRpb25zLmJvdW5kcyA9PT0gJ3RpY2tzJyB8fCBjb3VudCA9PT0gMSkge1xuICAgICAgICAgICAgYWRkVGljayh0aWNrcywgdGltZSwgdGltZXN0YW1wcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRpY2tzKS5zb3J0KHNvcnRlcikubWFwKCh4KT0+K3gpO1xuICAgIH1cbiBnZXRMYWJlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGFkYXB0ZXIgPSB0aGlzLl9hZGFwdGVyO1xuICAgICAgICBjb25zdCB0aW1lT3B0cyA9IHRoaXMub3B0aW9ucy50aW1lO1xuICAgICAgICBpZiAodGltZU9wdHMudG9vbHRpcEZvcm1hdCkge1xuICAgICAgICAgICAgcmV0dXJuIGFkYXB0ZXIuZm9ybWF0KHZhbHVlLCB0aW1lT3B0cy50b29sdGlwRm9ybWF0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWRhcHRlci5mb3JtYXQodmFsdWUsIHRpbWVPcHRzLmRpc3BsYXlGb3JtYXRzLmRhdGV0aW1lKTtcbiAgICB9XG4gZm9ybWF0KHZhbHVlLCBmb3JtYXQpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgZm9ybWF0cyA9IG9wdGlvbnMudGltZS5kaXNwbGF5Rm9ybWF0cztcbiAgICAgICAgY29uc3QgdW5pdCA9IHRoaXMuX3VuaXQ7XG4gICAgICAgIGNvbnN0IGZtdCA9IGZvcm1hdCB8fCBmb3JtYXRzW3VuaXRdO1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRhcHRlci5mb3JtYXQodmFsdWUsIGZtdCk7XG4gICAgfVxuIF90aWNrRm9ybWF0RnVuY3Rpb24odGltZSwgaW5kZXgsIHRpY2tzLCBmb3JtYXQpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgZm9ybWF0dGVyID0gb3B0aW9ucy50aWNrcy5jYWxsYmFjaztcbiAgICAgICAgaWYgKGZvcm1hdHRlcikge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGZvcm1hdHRlciwgW1xuICAgICAgICAgICAgICAgIHRpbWUsXG4gICAgICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICAgICAgdGlja3NcbiAgICAgICAgICAgIF0sIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZvcm1hdHMgPSBvcHRpb25zLnRpbWUuZGlzcGxheUZvcm1hdHM7XG4gICAgICAgIGNvbnN0IHVuaXQgPSB0aGlzLl91bml0O1xuICAgICAgICBjb25zdCBtYWpvclVuaXQgPSB0aGlzLl9tYWpvclVuaXQ7XG4gICAgICAgIGNvbnN0IG1pbm9yRm9ybWF0ID0gdW5pdCAmJiBmb3JtYXRzW3VuaXRdO1xuICAgICAgICBjb25zdCBtYWpvckZvcm1hdCA9IG1ham9yVW5pdCAmJiBmb3JtYXRzW21ham9yVW5pdF07XG4gICAgICAgIGNvbnN0IHRpY2sgPSB0aWNrc1tpbmRleF07XG4gICAgICAgIGNvbnN0IG1ham9yID0gbWFqb3JVbml0ICYmIG1ham9yRm9ybWF0ICYmIHRpY2sgJiYgdGljay5tYWpvcjtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkYXB0ZXIuZm9ybWF0KHRpbWUsIGZvcm1hdCB8fCAobWFqb3IgPyBtYWpvckZvcm1hdCA6IG1pbm9yRm9ybWF0KSk7XG4gICAgfVxuIGdlbmVyYXRlVGlja0xhYmVscyh0aWNrcykge1xuICAgICAgICBsZXQgaSwgaWxlbiwgdGljaztcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gdGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIHRpY2sgPSB0aWNrc1tpXTtcbiAgICAgICAgICAgIHRpY2subGFiZWwgPSB0aGlzLl90aWNrRm9ybWF0RnVuY3Rpb24odGljay52YWx1ZSwgaSwgdGlja3MpO1xuICAgICAgICB9XG4gICAgfVxuIGdldERlY2ltYWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgPyBOYU4gOiAodmFsdWUgLSB0aGlzLm1pbikgLyAodGhpcy5tYXggLSB0aGlzLm1pbik7XG4gICAgfVxuIGdldFBpeGVsRm9yVmFsdWUodmFsdWUpIHtcbiAgICAgICAgY29uc3Qgb2Zmc2V0cyA9IHRoaXMuX29mZnNldHM7XG4gICAgICAgIGNvbnN0IHBvcyA9IHRoaXMuZ2V0RGVjaW1hbEZvclZhbHVlKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGl4ZWxGb3JEZWNpbWFsKChvZmZzZXRzLnN0YXJ0ICsgcG9zKSAqIG9mZnNldHMuZmFjdG9yKTtcbiAgICB9XG4gZ2V0VmFsdWVGb3JQaXhlbChwaXhlbCkge1xuICAgICAgICBjb25zdCBvZmZzZXRzID0gdGhpcy5fb2Zmc2V0cztcbiAgICAgICAgY29uc3QgcG9zID0gdGhpcy5nZXREZWNpbWFsRm9yUGl4ZWwocGl4ZWwpIC8gb2Zmc2V0cy5mYWN0b3IgLSBvZmZzZXRzLmVuZDtcbiAgICAgICAgcmV0dXJuIHRoaXMubWluICsgcG9zICogKHRoaXMubWF4IC0gdGhpcy5taW4pO1xuICAgIH1cbiBfZ2V0TGFiZWxTaXplKGxhYmVsKSB7XG4gICAgICAgIGNvbnN0IHRpY2tzT3B0cyA9IHRoaXMub3B0aW9ucy50aWNrcztcbiAgICAgICAgY29uc3QgdGlja0xhYmVsV2lkdGggPSB0aGlzLmN0eC5tZWFzdXJlVGV4dChsYWJlbCkud2lkdGg7XG4gICAgICAgIGNvbnN0IGFuZ2xlID0gdG9SYWRpYW5zKHRoaXMuaXNIb3Jpem9udGFsKCkgPyB0aWNrc09wdHMubWF4Um90YXRpb24gOiB0aWNrc09wdHMubWluUm90YXRpb24pO1xuICAgICAgICBjb25zdCBjb3NSb3RhdGlvbiA9IE1hdGguY29zKGFuZ2xlKTtcbiAgICAgICAgY29uc3Qgc2luUm90YXRpb24gPSBNYXRoLnNpbihhbmdsZSk7XG4gICAgICAgIGNvbnN0IHRpY2tGb250U2l6ZSA9IHRoaXMuX3Jlc29sdmVUaWNrRm9udE9wdGlvbnMoMCkuc2l6ZTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHc6IHRpY2tMYWJlbFdpZHRoICogY29zUm90YXRpb24gKyB0aWNrRm9udFNpemUgKiBzaW5Sb3RhdGlvbixcbiAgICAgICAgICAgIGg6IHRpY2tMYWJlbFdpZHRoICogc2luUm90YXRpb24gKyB0aWNrRm9udFNpemUgKiBjb3NSb3RhdGlvblxuICAgICAgICB9O1xuICAgIH1cbiBfZ2V0TGFiZWxDYXBhY2l0eShleGFtcGxlVGltZSkge1xuICAgICAgICBjb25zdCB0aW1lT3B0cyA9IHRoaXMub3B0aW9ucy50aW1lO1xuICAgICAgICBjb25zdCBkaXNwbGF5Rm9ybWF0cyA9IHRpbWVPcHRzLmRpc3BsYXlGb3JtYXRzO1xuICAgICAgICBjb25zdCBmb3JtYXQgPSBkaXNwbGF5Rm9ybWF0c1t0aW1lT3B0cy51bml0XSB8fCBkaXNwbGF5Rm9ybWF0cy5taWxsaXNlY29uZDtcbiAgICAgICAgY29uc3QgZXhhbXBsZUxhYmVsID0gdGhpcy5fdGlja0Zvcm1hdEZ1bmN0aW9uKGV4YW1wbGVUaW1lLCAwLCB0aWNrc0Zyb21UaW1lc3RhbXBzKHRoaXMsIFtcbiAgICAgICAgICAgIGV4YW1wbGVUaW1lXG4gICAgICAgIF0sIHRoaXMuX21ham9yVW5pdCksIGZvcm1hdCk7XG4gICAgICAgIGNvbnN0IHNpemUgPSB0aGlzLl9nZXRMYWJlbFNpemUoZXhhbXBsZUxhYmVsKTtcbiAgICAgICAgY29uc3QgY2FwYWNpdHkgPSBNYXRoLmZsb29yKHRoaXMuaXNIb3Jpem9udGFsKCkgPyB0aGlzLndpZHRoIC8gc2l6ZS53IDogdGhpcy5oZWlnaHQgLyBzaXplLmgpIC0gMTtcbiAgICAgICAgcmV0dXJuIGNhcGFjaXR5ID4gMCA/IGNhcGFjaXR5IDogMTtcbiAgICB9XG4gZ2V0RGF0YVRpbWVzdGFtcHMoKSB7XG4gICAgICAgIGxldCB0aW1lc3RhbXBzID0gdGhpcy5fY2FjaGUuZGF0YSB8fCBbXTtcbiAgICAgICAgbGV0IGksIGlsZW47XG4gICAgICAgIGlmICh0aW1lc3RhbXBzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHRpbWVzdGFtcHM7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWV0YXMgPSB0aGlzLmdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKCk7XG4gICAgICAgIGlmICh0aGlzLl9ub3JtYWxpemVkICYmIG1ldGFzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlLmRhdGEgPSBtZXRhc1swXS5jb250cm9sbGVyLmdldEFsbFBhcnNlZFZhbHVlcyh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBtZXRhcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgdGltZXN0YW1wcyA9IHRpbWVzdGFtcHMuY29uY2F0KG1ldGFzW2ldLmNvbnRyb2xsZXIuZ2V0QWxsUGFyc2VkVmFsdWVzKHRoaXMpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGUuZGF0YSA9IHRoaXMubm9ybWFsaXplKHRpbWVzdGFtcHMpO1xuICAgIH1cbiBnZXRMYWJlbFRpbWVzdGFtcHMoKSB7XG4gICAgICAgIGNvbnN0IHRpbWVzdGFtcHMgPSB0aGlzLl9jYWNoZS5sYWJlbHMgfHwgW107XG4gICAgICAgIGxldCBpLCBpbGVuO1xuICAgICAgICBpZiAodGltZXN0YW1wcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aW1lc3RhbXBzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxhYmVscyA9IHRoaXMuZ2V0TGFiZWxzKCk7XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IGxhYmVscy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgdGltZXN0YW1wcy5wdXNoKHBhcnNlKHRoaXMsIGxhYmVsc1tpXSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jYWNoZS5sYWJlbHMgPSB0aGlzLl9ub3JtYWxpemVkID8gdGltZXN0YW1wcyA6IHRoaXMubm9ybWFsaXplKHRpbWVzdGFtcHMpO1xuICAgIH1cbiBub3JtYWxpemUodmFsdWVzKSB7XG4gICAgICAgIHJldHVybiBfYXJyYXlVbmlxdWUodmFsdWVzLnNvcnQoc29ydGVyKSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpbnRlcnBvbGF0ZSh0YWJsZSwgdmFsLCByZXZlcnNlKSB7XG4gICAgbGV0IGxvID0gMDtcbiAgICBsZXQgaGkgPSB0YWJsZS5sZW5ndGggLSAxO1xuICAgIGxldCBwcmV2U291cmNlLCBuZXh0U291cmNlLCBwcmV2VGFyZ2V0LCBuZXh0VGFyZ2V0O1xuICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgIGlmICh2YWwgPj0gdGFibGVbbG9dLnBvcyAmJiB2YWwgPD0gdGFibGVbaGldLnBvcykge1xuICAgICAgICAgICAgKHsgbG8gLCBoaSAgfSA9IF9sb29rdXBCeUtleSh0YWJsZSwgJ3BvcycsIHZhbCkpO1xuICAgICAgICB9XG4gICAgICAgICh7IHBvczogcHJldlNvdXJjZSAsIHRpbWU6IHByZXZUYXJnZXQgIH0gPSB0YWJsZVtsb10pO1xuICAgICAgICAoeyBwb3M6IG5leHRTb3VyY2UgLCB0aW1lOiBuZXh0VGFyZ2V0ICB9ID0gdGFibGVbaGldKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodmFsID49IHRhYmxlW2xvXS50aW1lICYmIHZhbCA8PSB0YWJsZVtoaV0udGltZSkge1xuICAgICAgICAgICAgKHsgbG8gLCBoaSAgfSA9IF9sb29rdXBCeUtleSh0YWJsZSwgJ3RpbWUnLCB2YWwpKTtcbiAgICAgICAgfVxuICAgICAgICAoeyB0aW1lOiBwcmV2U291cmNlICwgcG9zOiBwcmV2VGFyZ2V0ICB9ID0gdGFibGVbbG9dKTtcbiAgICAgICAgKHsgdGltZTogbmV4dFNvdXJjZSAsIHBvczogbmV4dFRhcmdldCAgfSA9IHRhYmxlW2hpXSk7XG4gICAgfVxuICAgIGNvbnN0IHNwYW4gPSBuZXh0U291cmNlIC0gcHJldlNvdXJjZTtcbiAgICByZXR1cm4gc3BhbiA/IHByZXZUYXJnZXQgKyAobmV4dFRhcmdldCAtIHByZXZUYXJnZXQpICogKHZhbCAtIHByZXZTb3VyY2UpIC8gc3BhbiA6IHByZXZUYXJnZXQ7XG59XG5jbGFzcyBUaW1lU2VyaWVzU2NhbGUgZXh0ZW5kcyBUaW1lU2NhbGUge1xuICAgIHN0YXRpYyBpZCA9ICd0aW1lc2VyaWVzJztcbiBzdGF0aWMgZGVmYXVsdHMgPSBUaW1lU2NhbGUuZGVmYXVsdHM7XG4gY29uc3RydWN0b3IocHJvcHMpe1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgICB0aGlzLl90YWJsZSA9IFtdO1xuICAgICAgICAgdGhpcy5fbWluUG9zID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5fdGFibGVSYW5nZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gaW5pdE9mZnNldHMoKSB7XG4gICAgICAgIGNvbnN0IHRpbWVzdGFtcHMgPSB0aGlzLl9nZXRUaW1lc3RhbXBzRm9yVGFibGUoKTtcbiAgICAgICAgY29uc3QgdGFibGUgPSB0aGlzLl90YWJsZSA9IHRoaXMuYnVpbGRMb29rdXBUYWJsZSh0aW1lc3RhbXBzKTtcbiAgICAgICAgdGhpcy5fbWluUG9zID0gaW50ZXJwb2xhdGUodGFibGUsIHRoaXMubWluKTtcbiAgICAgICAgdGhpcy5fdGFibGVSYW5nZSA9IGludGVycG9sYXRlKHRhYmxlLCB0aGlzLm1heCkgLSB0aGlzLl9taW5Qb3M7XG4gICAgICAgIHN1cGVyLmluaXRPZmZzZXRzKHRpbWVzdGFtcHMpO1xuICAgIH1cbiBidWlsZExvb2t1cFRhYmxlKHRpbWVzdGFtcHMpIHtcbiAgICAgICAgY29uc3QgeyBtaW4gLCBtYXggIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBpdGVtcyA9IFtdO1xuICAgICAgICBjb25zdCB0YWJsZSA9IFtdO1xuICAgICAgICBsZXQgaSwgaWxlbiwgcHJldiwgY3VyciwgbmV4dDtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gdGltZXN0YW1wcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgY3VyciA9IHRpbWVzdGFtcHNbaV07XG4gICAgICAgICAgICBpZiAoY3VyciA+PSBtaW4gJiYgY3VyciA8PSBtYXgpIHtcbiAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKGN1cnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpdGVtcy5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdGltZTogbWluLFxuICAgICAgICAgICAgICAgICAgICBwb3M6IDBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdGltZTogbWF4LFxuICAgICAgICAgICAgICAgICAgICBwb3M6IDFcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IGl0ZW1zLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBuZXh0ID0gaXRlbXNbaSArIDFdO1xuICAgICAgICAgICAgcHJldiA9IGl0ZW1zW2kgLSAxXTtcbiAgICAgICAgICAgIGN1cnIgPSBpdGVtc1tpXTtcbiAgICAgICAgICAgIGlmIChNYXRoLnJvdW5kKChuZXh0ICsgcHJldikgLyAyKSAhPT0gY3Vycikge1xuICAgICAgICAgICAgICAgIHRhYmxlLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0aW1lOiBjdXJyLFxuICAgICAgICAgICAgICAgICAgICBwb3M6IGkgLyAoaWxlbiAtIDEpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhYmxlO1xuICAgIH1cbiBfZ2VuZXJhdGUoKSB7XG4gICAgICAgIGNvbnN0IG1pbiA9IHRoaXMubWluO1xuICAgICAgICBjb25zdCBtYXggPSB0aGlzLm1heDtcbiAgICAgICAgbGV0IHRpbWVzdGFtcHMgPSBzdXBlci5nZXREYXRhVGltZXN0YW1wcygpO1xuICAgICAgICBpZiAoIXRpbWVzdGFtcHMuaW5jbHVkZXMobWluKSB8fCAhdGltZXN0YW1wcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRpbWVzdGFtcHMuc3BsaWNlKDAsIDAsIG1pbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aW1lc3RhbXBzLmluY2x1ZGVzKG1heCkgfHwgdGltZXN0YW1wcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHRpbWVzdGFtcHMucHVzaChtYXgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aW1lc3RhbXBzLnNvcnQoKGEsIGIpPT5hIC0gYik7XG4gICAgfVxuIF9nZXRUaW1lc3RhbXBzRm9yVGFibGUoKSB7XG4gICAgICAgIGxldCB0aW1lc3RhbXBzID0gdGhpcy5fY2FjaGUuYWxsIHx8IFtdO1xuICAgICAgICBpZiAodGltZXN0YW1wcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aW1lc3RhbXBzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmdldERhdGFUaW1lc3RhbXBzKCk7XG4gICAgICAgIGNvbnN0IGxhYmVsID0gdGhpcy5nZXRMYWJlbFRpbWVzdGFtcHMoKTtcbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoICYmIGxhYmVsLmxlbmd0aCkge1xuICAgICAgICAgICAgdGltZXN0YW1wcyA9IHRoaXMubm9ybWFsaXplKGRhdGEuY29uY2F0KGxhYmVsKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aW1lc3RhbXBzID0gZGF0YS5sZW5ndGggPyBkYXRhIDogbGFiZWw7XG4gICAgICAgIH1cbiAgICAgICAgdGltZXN0YW1wcyA9IHRoaXMuX2NhY2hlLmFsbCA9IHRpbWVzdGFtcHM7XG4gICAgICAgIHJldHVybiB0aW1lc3RhbXBzO1xuICAgIH1cbiBnZXREZWNpbWFsRm9yVmFsdWUodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIChpbnRlcnBvbGF0ZSh0aGlzLl90YWJsZSwgdmFsdWUpIC0gdGhpcy5fbWluUG9zKSAvIHRoaXMuX3RhYmxlUmFuZ2U7XG4gICAgfVxuIGdldFZhbHVlRm9yUGl4ZWwocGl4ZWwpIHtcbiAgICAgICAgY29uc3Qgb2Zmc2V0cyA9IHRoaXMuX29mZnNldHM7XG4gICAgICAgIGNvbnN0IGRlY2ltYWwgPSB0aGlzLmdldERlY2ltYWxGb3JQaXhlbChwaXhlbCkgLyBvZmZzZXRzLmZhY3RvciAtIG9mZnNldHMuZW5kO1xuICAgICAgICByZXR1cm4gaW50ZXJwb2xhdGUodGhpcy5fdGFibGUsIGRlY2ltYWwgKiB0aGlzLl90YWJsZVJhbmdlICsgdGhpcy5fbWluUG9zLCB0cnVlKTtcbiAgICB9XG59XG5cbnZhciBzY2FsZXMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG5fX3Byb3RvX186IG51bGwsXG5DYXRlZ29yeVNjYWxlOiBDYXRlZ29yeVNjYWxlLFxuTGluZWFyU2NhbGU6IExpbmVhclNjYWxlLFxuTG9nYXJpdGhtaWNTY2FsZTogTG9nYXJpdGhtaWNTY2FsZSxcblJhZGlhbExpbmVhclNjYWxlOiBSYWRpYWxMaW5lYXJTY2FsZSxcblRpbWVTY2FsZTogVGltZVNjYWxlLFxuVGltZVNlcmllc1NjYWxlOiBUaW1lU2VyaWVzU2NhbGVcbn0pO1xuXG5jb25zdCByZWdpc3RlcmFibGVzID0gW1xuICAgIGNvbnRyb2xsZXJzLFxuICAgIGVsZW1lbnRzLFxuICAgIHBsdWdpbnMsXG4gICAgc2NhbGVzXG5dO1xuXG5leHBvcnQgeyBBbmltYXRpb24sIEFuaW1hdGlvbnMsIEFyY0VsZW1lbnQsIEJhckNvbnRyb2xsZXIsIEJhckVsZW1lbnQsIEJhc2VQbGF0Zm9ybSwgQmFzaWNQbGF0Zm9ybSwgQnViYmxlQ29udHJvbGxlciwgQ2F0ZWdvcnlTY2FsZSwgQ2hhcnQsIHBsdWdpbl9jb2xvcnMgYXMgQ29sb3JzLCBEYXRhc2V0Q29udHJvbGxlciwgcGx1Z2luX2RlY2ltYXRpb24gYXMgRGVjaW1hdGlvbiwgRG9tUGxhdGZvcm0sIERvdWdobnV0Q29udHJvbGxlciwgRWxlbWVudCwgaW5kZXggYXMgRmlsbGVyLCBJbnRlcmFjdGlvbiwgcGx1Z2luX2xlZ2VuZCBhcyBMZWdlbmQsIExpbmVDb250cm9sbGVyLCBMaW5lRWxlbWVudCwgTGluZWFyU2NhbGUsIExvZ2FyaXRobWljU2NhbGUsIFBpZUNvbnRyb2xsZXIsIFBvaW50RWxlbWVudCwgUG9sYXJBcmVhQ29udHJvbGxlciwgUmFkYXJDb250cm9sbGVyLCBSYWRpYWxMaW5lYXJTY2FsZSwgU2NhbGUsIFNjYXR0ZXJDb250cm9sbGVyLCBwbHVnaW5fc3VidGl0bGUgYXMgU3ViVGl0bGUsIFRpY2tzLCBUaW1lU2NhbGUsIFRpbWVTZXJpZXNTY2FsZSwgcGx1Z2luX3RpdGxlIGFzIFRpdGxlLCBwbHVnaW5fdG9vbHRpcCBhcyBUb29sdGlwLCBhZGFwdGVycyBhcyBfYWRhcHRlcnMsIF9kZXRlY3RQbGF0Zm9ybSwgYW5pbWF0b3IsIGNvbnRyb2xsZXJzLCBkZWZhdWx0cywgZWxlbWVudHMsIGxheW91dHMsIHBsdWdpbnMsIHJlZ2lzdGVyYWJsZXMsIHJlZ2lzdHJ5LCBzY2FsZXMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNoYXJ0LmpzLm1hcFxuIiwiaW1wb3J0IHtDaGFydCwgcmVnaXN0ZXJhYmxlc30gZnJvbSAnLi4vZGlzdC9jaGFydC5qcyc7XG5cbkNoYXJ0LnJlZ2lzdGVyKC4uLnJlZ2lzdGVyYWJsZXMpO1xuXG5leHBvcnQgKiBmcm9tICcuLi9kaXN0L2NoYXJ0LmpzJztcbmV4cG9ydCBkZWZhdWx0IENoYXJ0O1xuIiwiLyohXG4qIGNoYXJ0anMtcGx1Z2luLWFubm90YXRpb24gdjMuMC4xXG4qIGh0dHBzOi8vd3d3LmNoYXJ0anMub3JnL2NoYXJ0anMtcGx1Z2luLWFubm90YXRpb24vaW5kZXhcbiAqIChjKSAyMDIzIGNoYXJ0anMtcGx1Z2luLWFubm90YXRpb24gQ29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgRWxlbWVudCwgZGVmYXVsdHMsIEFuaW1hdGlvbnMsIENoYXJ0IH0gZnJvbSAnY2hhcnQuanMnO1xuaW1wb3J0IHsgZGlzdGFuY2VCZXR3ZWVuUG9pbnRzLCBkZWZpbmVkLCBpc0Z1bmN0aW9uLCBjYWxsYmFjaywgaXNPYmplY3QsIHZhbHVlT3JEZWZhdWx0LCB0b1JhZGlhbnMsIGlzQXJyYXksIHRvRm9udCwgYWRkUm91bmRlZFJlY3RQYXRoLCB0b1RSQkxDb3JuZXJzLCBRVUFSVEVSX1BJLCBQSSwgSEFMRl9QSSwgVFdPX1RISVJEU19QSSwgVEFVLCBpc051bWJlciwgUkFEX1BFUl9ERUcsIHRvUGFkZGluZywgaXNGaW5pdGUsIHRvRGVncmVlcywgY2xpcEFyZWEsIHVuY2xpcEFyZWEgfSBmcm9tICdjaGFydC5qcy9oZWxwZXJzJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7IGltcG9ydChcImNoYXJ0LmpzXCIpLkNoYXJ0RXZlbnQgfSBDaGFydEV2ZW50XG4gKiBAdHlwZWRlZiB7IGltcG9ydCgnLi4vLi4vdHlwZXMvZWxlbWVudCcpLkFubm90YXRpb25FbGVtZW50IH0gQW5ub3RhdGlvbkVsZW1lbnRcbiAqL1xuXG5jb25zdCBpbnRlcmFjdGlvbiA9IHtcbiAgbW9kZXM6IHtcbiAgICAvKipcbiAgICAgKiBQb2ludCBtb2RlIHJldHVybnMgYWxsIGVsZW1lbnRzIHRoYXQgaGl0IHRlc3QgYmFzZWQgb24gdGhlIGV2ZW50IHBvc2l0aW9uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YXRlIC0gdGhlIHN0YXRlIG9mIHRoZSBwbHVnaW5cbiAgICAgKiBAcGFyYW0ge0NoYXJ0RXZlbnR9IGV2ZW50IC0gdGhlIGV2ZW50IHdlIGFyZSBmaW5kIHRoaW5ncyBhdFxuICAgICAqIEByZXR1cm4ge0Fubm90YXRpb25FbGVtZW50W119IC0gZWxlbWVudHMgdGhhdCBhcmUgZm91bmRcbiAgICAgKi9cbiAgICBwb2ludChzdGF0ZSwgZXZlbnQpIHtcbiAgICAgIHJldHVybiBmaWx0ZXJFbGVtZW50cyhzdGF0ZSwgZXZlbnQsIHtpbnRlcnNlY3Q6IHRydWV9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTmVhcmVzdCBtb2RlIHJldHVybnMgdGhlIGVsZW1lbnQgY2xvc2VzdCB0byB0aGUgZXZlbnQgcG9zaXRpb25cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhdGUgLSB0aGUgc3RhdGUgb2YgdGhlIHBsdWdpblxuICAgICAqIEBwYXJhbSB7Q2hhcnRFdmVudH0gZXZlbnQgLSB0aGUgZXZlbnQgd2UgYXJlIGZpbmQgdGhpbmdzIGF0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBpbnRlcmFjdGlvbiBvcHRpb25zIHRvIHVzZVxuICAgICAqIEByZXR1cm4ge0Fubm90YXRpb25FbGVtZW50W119IC0gZWxlbWVudHMgdGhhdCBhcmUgZm91bmQgKG9ubHkgMSBlbGVtZW50KVxuICAgICAqL1xuICAgIG5lYXJlc3Qoc3RhdGUsIGV2ZW50LCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gZ2V0TmVhcmVzdEl0ZW0oc3RhdGUsIGV2ZW50LCBvcHRpb25zKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIHggbW9kZSByZXR1cm5zIHRoZSBlbGVtZW50cyB0aGF0IGhpdC10ZXN0IGF0IHRoZSBjdXJyZW50IHggY29vcmRpbmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdGF0ZSAtIHRoZSBzdGF0ZSBvZiB0aGUgcGx1Z2luXG4gICAgICogQHBhcmFtIHtDaGFydEV2ZW50fSBldmVudCAtIHRoZSBldmVudCB3ZSBhcmUgZmluZCB0aGluZ3MgYXRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIGludGVyYWN0aW9uIG9wdGlvbnMgdG8gdXNlXG4gICAgICogQHJldHVybiB7QW5ub3RhdGlvbkVsZW1lbnRbXX0gLSBlbGVtZW50cyB0aGF0IGFyZSBmb3VuZFxuICAgICAqL1xuICAgIHgoc3RhdGUsIGV2ZW50LCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gZmlsdGVyRWxlbWVudHMoc3RhdGUsIGV2ZW50LCB7aW50ZXJzZWN0OiBvcHRpb25zLmludGVyc2VjdCwgYXhpczogJ3gnfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHkgbW9kZSByZXR1cm5zIHRoZSBlbGVtZW50cyB0aGF0IGhpdC10ZXN0IGF0IHRoZSBjdXJyZW50IHkgY29vcmRpbmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdGF0ZSAtIHRoZSBzdGF0ZSBvZiB0aGUgcGx1Z2luXG4gICAgICogQHBhcmFtIHtDaGFydEV2ZW50fSBldmVudCAtIHRoZSBldmVudCB3ZSBhcmUgZmluZCB0aGluZ3MgYXRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIGludGVyYWN0aW9uIG9wdGlvbnMgdG8gdXNlXG4gICAgICogQHJldHVybiB7QW5ub3RhdGlvbkVsZW1lbnRbXX0gLSBlbGVtZW50cyB0aGF0IGFyZSBmb3VuZFxuICAgICAqL1xuICAgIHkoc3RhdGUsIGV2ZW50LCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gZmlsdGVyRWxlbWVudHMoc3RhdGUsIGV2ZW50LCB7aW50ZXJzZWN0OiBvcHRpb25zLmludGVyc2VjdCwgYXhpczogJ3knfSk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYWxsIGVsZW1lbnRzIHRoYXQgaGl0IHRlc3QgYmFzZWQgb24gdGhlIGV2ZW50IHBvc2l0aW9uXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhdGUgLSB0aGUgc3RhdGUgb2YgdGhlIHBsdWdpblxuICogQHBhcmFtIHtDaGFydEV2ZW50fSBldmVudCAtIHRoZSBldmVudCB3ZSBhcmUgZmluZCB0aGluZ3MgYXRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gaW50ZXJhY3Rpb24gb3B0aW9ucyB0byB1c2VcbiAqIEByZXR1cm4ge0Fubm90YXRpb25FbGVtZW50W119IC0gZWxlbWVudHMgdGhhdCBhcmUgZm91bmRcbiAqL1xuZnVuY3Rpb24gZ2V0RWxlbWVudHMoc3RhdGUsIGV2ZW50LCBvcHRpb25zKSB7XG4gIGNvbnN0IG1vZGUgPSBpbnRlcmFjdGlvbi5tb2Rlc1tvcHRpb25zLm1vZGVdIHx8IGludGVyYWN0aW9uLm1vZGVzLm5lYXJlc3Q7XG4gIHJldHVybiBtb2RlKHN0YXRlLCBldmVudCwgb3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIGluUmFuZ2VCeUF4aXMoZWxlbWVudCwgZXZlbnQsIGF4aXMpIHtcbiAgaWYgKGF4aXMgIT09ICd4JyAmJiBheGlzICE9PSAneScpIHtcbiAgICByZXR1cm4gZWxlbWVudC5pblJhbmdlKGV2ZW50LngsIGV2ZW50LnksICd4JywgdHJ1ZSkgfHwgZWxlbWVudC5pblJhbmdlKGV2ZW50LngsIGV2ZW50LnksICd5JywgdHJ1ZSk7XG4gIH1cbiAgcmV0dXJuIGVsZW1lbnQuaW5SYW5nZShldmVudC54LCBldmVudC55LCBheGlzLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gZ2V0UG9pbnRCeUF4aXMoZXZlbnQsIGNlbnRlciwgYXhpcykge1xuICBpZiAoYXhpcyA9PT0gJ3gnKSB7XG4gICAgcmV0dXJuIHt4OiBldmVudC54LCB5OiBjZW50ZXIueX07XG4gIH0gZWxzZSBpZiAoYXhpcyA9PT0gJ3knKSB7XG4gICAgcmV0dXJuIHt4OiBjZW50ZXIueCwgeTogZXZlbnQueX07XG4gIH1cbiAgcmV0dXJuIGNlbnRlcjtcbn1cblxuZnVuY3Rpb24gZmlsdGVyRWxlbWVudHMoc3RhdGUsIGV2ZW50LCBvcHRpb25zKSB7XG4gIHJldHVybiBzdGF0ZS52aXNpYmxlRWxlbWVudHMuZmlsdGVyKChlbGVtZW50KSA9PiBvcHRpb25zLmludGVyc2VjdCA/IGVsZW1lbnQuaW5SYW5nZShldmVudC54LCBldmVudC55KSA6IGluUmFuZ2VCeUF4aXMoZWxlbWVudCwgZXZlbnQsIG9wdGlvbnMuYXhpcykpO1xufVxuXG5mdW5jdGlvbiBnZXROZWFyZXN0SXRlbShzdGF0ZSwgZXZlbnQsIG9wdGlvbnMpIHtcbiAgbGV0IG1pbkRpc3RhbmNlID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuXG4gIHJldHVybiBmaWx0ZXJFbGVtZW50cyhzdGF0ZSwgZXZlbnQsIG9wdGlvbnMpXG4gICAgLnJlZHVjZSgobmVhcmVzdEl0ZW1zLCBlbGVtZW50KSA9PiB7XG4gICAgICBjb25zdCBjZW50ZXIgPSBlbGVtZW50LmdldENlbnRlclBvaW50KCk7XG4gICAgICBjb25zdCBldmVuUG9pbnQgPSBnZXRQb2ludEJ5QXhpcyhldmVudCwgY2VudGVyLCBvcHRpb25zLmF4aXMpO1xuICAgICAgY29uc3QgZGlzdGFuY2UgPSBkaXN0YW5jZUJldHdlZW5Qb2ludHMoZXZlbnQsIGV2ZW5Qb2ludCk7XG4gICAgICBpZiAoZGlzdGFuY2UgPCBtaW5EaXN0YW5jZSkge1xuICAgICAgICBuZWFyZXN0SXRlbXMgPSBbZWxlbWVudF07XG4gICAgICAgIG1pbkRpc3RhbmNlID0gZGlzdGFuY2U7XG4gICAgICB9IGVsc2UgaWYgKGRpc3RhbmNlID09PSBtaW5EaXN0YW5jZSkge1xuICAgICAgICAvLyBDYW4gaGF2ZSBtdWx0aXBsZSBpdGVtcyBhdCB0aGUgc2FtZSBkaXN0YW5jZSBpbiB3aGljaCBjYXNlIHdlIHNvcnQgYnkgc2l6ZVxuICAgICAgICBuZWFyZXN0SXRlbXMucHVzaChlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5lYXJlc3RJdGVtcztcbiAgICB9LCBbXSlcbiAgICAuc29ydCgoYSwgYikgPT4gYS5faW5kZXggLSBiLl9pbmRleClcbiAgICAuc2xpY2UoMCwgMSk7IC8vIHJldHVybiBvbmx5IHRoZSB0b3AgaXRlbTtcbn1cblxuY29uc3QgaXNPbGRlclBhcnQgPSAoYWN0LCByZXEpID0+IHJlcSA+IGFjdCB8fCAoYWN0Lmxlbmd0aCA+IHJlcS5sZW5ndGggJiYgYWN0LnNsaWNlKDAsIHJlcS5sZW5ndGgpID09PSByZXEpO1xuXG4vKipcbiAqIEB0eXBlZGVmIHsgaW1wb3J0KCdjaGFydC5qcycpLlBvaW50IH0gUG9pbnRcbiAqIEB0eXBlZGVmIHsgaW1wb3J0KCdjaGFydC5qcycpLkludGVyYWN0aW9uQXhpcyB9IEludGVyYWN0aW9uQXhpc1xuICogQHR5cGVkZWYgeyBpbXBvcnQoJy4uLy4uL3R5cGVzL2VsZW1lbnQnKS5Bbm5vdGF0aW9uRWxlbWVudCB9IEFubm90YXRpb25FbGVtZW50XG4gKi9cblxuY29uc3QgRVBTSUxPTiA9IDAuMDAxO1xuY29uc3QgY2xhbXAgPSAoeCwgZnJvbSwgdG8pID0+IE1hdGgubWluKHRvLCBNYXRoLm1heChmcm9tLCB4KSk7XG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21cbiAqIEBwYXJhbSB7bnVtYmVyfSB0b1xuICogQHJldHVybnMge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gY2xhbXBBbGwob2JqLCBmcm9tLCB0bykge1xuICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhvYmopKSB7XG4gICAgb2JqW2tleV0gPSBjbGFtcChvYmpba2V5XSwgZnJvbSwgdG8pO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbi8qKlxuICogQHBhcmFtIHtQb2ludH0gcG9pbnRcbiAqIEBwYXJhbSB7UG9pbnR9IGNlbnRlclxuICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1c1xuICogQHBhcmFtIHtudW1iZXJ9IGJvcmRlcldpZHRoXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaW5Qb2ludFJhbmdlKHBvaW50LCBjZW50ZXIsIHJhZGl1cywgYm9yZGVyV2lkdGgpIHtcbiAgaWYgKCFwb2ludCB8fCAhY2VudGVyIHx8IHJhZGl1cyA8PSAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGhCb3JkZXJXaWR0aCA9IGJvcmRlcldpZHRoIC8gMjtcbiAgcmV0dXJuIChNYXRoLnBvdyhwb2ludC54IC0gY2VudGVyLngsIDIpICsgTWF0aC5wb3cocG9pbnQueSAtIGNlbnRlci55LCAyKSkgPD0gTWF0aC5wb3cocmFkaXVzICsgaEJvcmRlcldpZHRoLCAyKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1BvaW50fSBwb2ludFxuICogQHBhcmFtIHt7eDogbnVtYmVyLCB5OiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXJ9fSByZWN0XG4gKiBAcGFyYW0ge0ludGVyYWN0aW9uQXhpc30gYXhpc1xuICogQHBhcmFtIHtudW1iZXJ9IGJvcmRlcldpZHRoXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaW5Cb3hSYW5nZShwb2ludCwge3gsIHksIHgyLCB5Mn0sIGF4aXMsIGJvcmRlcldpZHRoKSB7XG4gIGNvbnN0IGhCb3JkZXJXaWR0aCA9IGJvcmRlcldpZHRoIC8gMjtcbiAgY29uc3QgaW5SYW5nZVggPSBwb2ludC54ID49IHggLSBoQm9yZGVyV2lkdGggLSBFUFNJTE9OICYmIHBvaW50LnggPD0geDIgKyBoQm9yZGVyV2lkdGggKyBFUFNJTE9OO1xuICBjb25zdCBpblJhbmdlWSA9IHBvaW50LnkgPj0geSAtIGhCb3JkZXJXaWR0aCAtIEVQU0lMT04gJiYgcG9pbnQueSA8PSB5MiArIGhCb3JkZXJXaWR0aCArIEVQU0lMT047XG4gIGlmIChheGlzID09PSAneCcpIHtcbiAgICByZXR1cm4gaW5SYW5nZVg7XG4gIH0gZWxzZSBpZiAoYXhpcyA9PT0gJ3knKSB7XG4gICAgcmV0dXJuIGluUmFuZ2VZO1xuICB9XG4gIHJldHVybiBpblJhbmdlWCAmJiBpblJhbmdlWTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0Fubm90YXRpb25FbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge2Jvb2xlYW59IHVzZUZpbmFsUG9zaXRpb25cbiAqIEByZXR1cm5zIHtQb2ludH1cbiAqL1xuZnVuY3Rpb24gZ2V0RWxlbWVudENlbnRlclBvaW50KGVsZW1lbnQsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgY29uc3Qge2NlbnRlclgsIGNlbnRlcll9ID0gZWxlbWVudC5nZXRQcm9wcyhbJ2NlbnRlclgnLCAnY2VudGVyWSddLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgcmV0dXJuIHt4OiBjZW50ZXJYLCB5OiBjZW50ZXJZfTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGtnXG4gKiBAcGFyYW0ge3N0cmluZ30gbWluXG4gKiBAcGFyYW0ge3N0cmluZ30gdmVyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtzdHJpY3Q9dHJ1ZV1cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiByZXF1aXJlVmVyc2lvbihwa2csIG1pbiwgdmVyLCBzdHJpY3QgPSB0cnVlKSB7XG4gIGNvbnN0IHBhcnRzID0gdmVyLnNwbGl0KCcuJyk7XG4gIGxldCBpID0gMDtcbiAgZm9yIChjb25zdCByZXEgb2YgbWluLnNwbGl0KCcuJykpIHtcbiAgICBjb25zdCBhY3QgPSBwYXJ0c1tpKytdO1xuICAgIGlmIChwYXJzZUludChyZXEsIDEwKSA8IHBhcnNlSW50KGFjdCwgMTApKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaWYgKGlzT2xkZXJQYXJ0KGFjdCwgcmVxKSkge1xuICAgICAgaWYgKHN0cmljdCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7cGtnfSB2JHt2ZXJ9IGlzIG5vdCBzdXBwb3J0ZWQuIHYke21pbn0gb3IgbmV3ZXIgaXMgcmVxdWlyZWQuYCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5jb25zdCBpc1BlcmNlbnRTdHJpbmcgPSAocykgPT4gdHlwZW9mIHMgPT09ICdzdHJpbmcnICYmIHMuZW5kc1dpdGgoJyUnKTtcbmNvbnN0IHRvUGVyY2VudCA9IChzKSA9PiBwYXJzZUZsb2F0KHMpIC8gMTAwO1xuY29uc3QgdG9Qb3NpdGl2ZVBlcmNlbnQgPSAocykgPT4gY2xhbXAodG9QZXJjZW50KHMpLCAwLCAxKTtcblxuY29uc3QgYm94QXBwZXJpbmcgPSAoeCwgeSkgPT4gKHt4LCB5LCB4MjogeCwgeTI6IHksIHdpZHRoOiAwLCBoZWlnaHQ6IDB9KTtcbmNvbnN0IGRlZmF1bHRJbml0QW5pbWF0aW9uID0ge1xuICBib3g6IChwcm9wZXJ0aWVzKSA9PiBib3hBcHBlcmluZyhwcm9wZXJ0aWVzLmNlbnRlclgsIHByb3BlcnRpZXMuY2VudGVyWSksXG4gIGVsbGlwc2U6IChwcm9wZXJ0aWVzKSA9PiAoe2NlbnRlclg6IHByb3BlcnRpZXMuY2VudGVyWCwgY2VudGVyWTogcHJvcGVydGllcy5jZW50ZXJYLCByYWRpdXM6IDAsIHdpZHRoOiAwLCBoZWlnaHQ6IDB9KSxcbiAgbGFiZWw6IChwcm9wZXJ0aWVzKSA9PiBib3hBcHBlcmluZyhwcm9wZXJ0aWVzLmNlbnRlclgsIHByb3BlcnRpZXMuY2VudGVyWSksXG4gIGxpbmU6IChwcm9wZXJ0aWVzKSA9PiBib3hBcHBlcmluZyhwcm9wZXJ0aWVzLngsIHByb3BlcnRpZXMueSksXG4gIHBvaW50OiAocHJvcGVydGllcykgPT4gKHtjZW50ZXJYOiBwcm9wZXJ0aWVzLmNlbnRlclgsIGNlbnRlclk6IHByb3BlcnRpZXMuY2VudGVyWSwgcmFkaXVzOiAwLCB3aWR0aDogMCwgaGVpZ2h0OiAwfSksXG4gIHBvbHlnb246IChwcm9wZXJ0aWVzKSA9PiBib3hBcHBlcmluZyhwcm9wZXJ0aWVzLmNlbnRlclgsIHByb3BlcnRpZXMuY2VudGVyWSlcbn07XG5cbi8qKlxuICogQHR5cGVkZWYgeyBpbXBvcnQoXCJjaGFydC5qc1wiKS5DaGFydCB9IENoYXJ0XG4gKiBAdHlwZWRlZiB7IGltcG9ydCgnLi4vLi4vdHlwZXMvZWxlbWVudCcpLkFubm90YXRpb25Cb3hNb2RlbCB9IEFubm90YXRpb25Cb3hNb2RlbFxuICogQHR5cGVkZWYgeyBpbXBvcnQoJy4uLy4uL3R5cGVzL2VsZW1lbnQnKS5Bbm5vdGF0aW9uRWxlbWVudCB9IEFubm90YXRpb25FbGVtZW50XG4gKiBAdHlwZWRlZiB7IGltcG9ydCgnLi4vLi4vdHlwZXMvb3B0aW9ucycpLkFubm90YXRpb25Qb2ludENvb3JkaW5hdGVzIH0gQW5ub3RhdGlvblBvaW50Q29vcmRpbmF0ZXNcbiAqIEB0eXBlZGVmIHsgaW1wb3J0KCcuLi8uLi90eXBlcy9sYWJlbCcpLkNvcmVMYWJlbE9wdGlvbnMgfSBDb3JlTGFiZWxPcHRpb25zXG4gKiBAdHlwZWRlZiB7IGltcG9ydCgnLi4vLi4vdHlwZXMvbGFiZWwnKS5MYWJlbFBvc2l0aW9uT2JqZWN0IH0gTGFiZWxQb3NpdGlvbk9iamVjdFxuICovXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHNpemVcbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gcG9zaXRpb25cbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGdldFJlbGF0aXZlUG9zaXRpb24oc2l6ZSwgcG9zaXRpb24pIHtcbiAgaWYgKHBvc2l0aW9uID09PSAnc3RhcnQnKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgaWYgKHBvc2l0aW9uID09PSAnZW5kJykge1xuICAgIHJldHVybiBzaXplO1xuICB9XG4gIGlmIChpc1BlcmNlbnRTdHJpbmcocG9zaXRpb24pKSB7XG4gICAgcmV0dXJuIHRvUG9zaXRpdmVQZXJjZW50KHBvc2l0aW9uKSAqIHNpemU7XG4gIH1cbiAgcmV0dXJuIHNpemUgLyAyO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBzaXplXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtwb3NpdGl2ZVBlcmNlbnQ9dHJ1ZV1cbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGdldFNpemUoc2l6ZSwgdmFsdWUsIHBvc2l0aXZlUGVyY2VudCA9IHRydWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH0gZWxzZSBpZiAoaXNQZXJjZW50U3RyaW5nKHZhbHVlKSkge1xuICAgIHJldHVybiAocG9zaXRpdmVQZXJjZW50ID8gdG9Qb3NpdGl2ZVBlcmNlbnQodmFsdWUpIDogdG9QZXJjZW50KHZhbHVlKSkgKiBzaXplO1xuICB9XG4gIHJldHVybiBzaXplO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7e3g6IG51bWJlciwgd2lkdGg6IG51bWJlcn19IHNpemVcbiAqIEBwYXJhbSB7Q29yZUxhYmVsT3B0aW9uc30gb3B0aW9uc1xuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZnVuY3Rpb24gY2FsY3VsYXRlVGV4dEFsaWdubWVudChzaXplLCBvcHRpb25zKSB7XG4gIGNvbnN0IHt4LCB3aWR0aH0gPSBzaXplO1xuICBjb25zdCB0ZXh0QWxpZ24gPSBvcHRpb25zLnRleHRBbGlnbjtcbiAgaWYgKHRleHRBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICByZXR1cm4geCArIHdpZHRoIC8gMjtcbiAgfSBlbHNlIGlmICh0ZXh0QWxpZ24gPT09ICdlbmQnIHx8IHRleHRBbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgIHJldHVybiB4ICsgd2lkdGg7XG4gIH1cbiAgcmV0dXJuIHg7XG59XG5cbi8qKlxuICogQHBhcmFtIHt7eDogbnVtYmVyfHN0cmluZywgeTogbnVtYmVyfHN0cmluZ318c3RyaW5nfG51bWJlcn0gdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gZGVmYXVsdFZhbHVlXG4gKiBAcmV0dXJucyB7e3g6IG51bWJlcnxzdHJpbmcsIHk6IG51bWJlcnxzdHJpbmd9fVxuICovXG5mdW5jdGlvbiB0b1Bvc2l0aW9uKHZhbHVlLCBkZWZhdWx0VmFsdWUgPSAnY2VudGVyJykge1xuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHZhbHVlT3JEZWZhdWx0KHZhbHVlLngsIGRlZmF1bHRWYWx1ZSksXG4gICAgICB5OiB2YWx1ZU9yRGVmYXVsdCh2YWx1ZS55LCBkZWZhdWx0VmFsdWUpLFxuICAgIH07XG4gIH1cbiAgdmFsdWUgPSB2YWx1ZU9yRGVmYXVsdCh2YWx1ZSwgZGVmYXVsdFZhbHVlKTtcbiAgcmV0dXJuIHtcbiAgICB4OiB2YWx1ZSxcbiAgICB5OiB2YWx1ZVxuICB9O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7QW5ub3RhdGlvblBvaW50Q29vcmRpbmF0ZXN9IG9wdGlvbnNcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0JvdW5kVG9Qb2ludChvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zICYmIChkZWZpbmVkKG9wdGlvbnMueFZhbHVlKSB8fCBkZWZpbmVkKG9wdGlvbnMueVZhbHVlKSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtDaGFydH0gY2hhcnRcbiAqIEBwYXJhbSB7QW5ub3RhdGlvbkJveE1vZGVsfSBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0ge0NvcmVBbm5vdGF0aW9uT3B0aW9uc30gb3B0aW9uc1xuICogQHJldHVybnMge0Fubm90YXRpb25FbGVtZW50fVxuICovXG5mdW5jdGlvbiBpbml0QW5pbWF0aW9uUHJvcGVydGllcyhjaGFydCwgcHJvcGVydGllcywgb3B0aW9ucykge1xuICBjb25zdCBpbml0QW5pbSA9IG9wdGlvbnMuaW5pdDtcbiAgaWYgKCFpbml0QW5pbSkge1xuICAgIHJldHVybjtcbiAgfSBlbHNlIGlmIChpbml0QW5pbSA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiBhcHBseURlZmF1bHQocHJvcGVydGllcywgb3B0aW9ucyk7XG4gIH1cbiAgcmV0dXJuIGV4ZWNDYWxsYmFjayhjaGFydCwgcHJvcGVydGllcywgb3B0aW9ucyk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7QXJyYXl9IGhvb2tzXG4gKiBAcGFyYW0ge09iamVjdH0gaG9va3NDb250YWluZXJcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBsb2FkSG9va3Mob3B0aW9ucywgaG9va3MsIGhvb2tzQ29udGFpbmVyKSB7XG4gIGxldCBhY3RpdmF0ZWQgPSBmYWxzZTtcbiAgaG9va3MuZm9yRWFjaChob29rID0+IHtcbiAgICBpZiAoaXNGdW5jdGlvbihvcHRpb25zW2hvb2tdKSkge1xuICAgICAgYWN0aXZhdGVkID0gdHJ1ZTtcbiAgICAgIGhvb2tzQ29udGFpbmVyW2hvb2tdID0gb3B0aW9uc1tob29rXTtcbiAgICB9IGVsc2UgaWYgKGRlZmluZWQoaG9va3NDb250YWluZXJbaG9va10pKSB7XG4gICAgICBkZWxldGUgaG9va3NDb250YWluZXJbaG9va107XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGFjdGl2YXRlZDtcbn1cblxuZnVuY3Rpb24gYXBwbHlEZWZhdWx0KHByb3BlcnRpZXMsIG9wdGlvbnMpIHtcbiAgY29uc3QgdHlwZSA9IG9wdGlvbnMudHlwZSB8fCAnbGluZSc7XG4gIHJldHVybiBkZWZhdWx0SW5pdEFuaW1hdGlvblt0eXBlXShwcm9wZXJ0aWVzKTtcbn1cblxuZnVuY3Rpb24gZXhlY0NhbGxiYWNrKGNoYXJ0LCBwcm9wZXJ0aWVzLCBvcHRpb25zKSB7XG4gIGNvbnN0IHJlc3VsdCA9IGNhbGxiYWNrKG9wdGlvbnMuaW5pdCwgW3tjaGFydCwgcHJvcGVydGllcywgb3B0aW9uc31dKTtcbiAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiBhcHBseURlZmF1bHQocHJvcGVydGllcywgb3B0aW9ucyk7XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QocmVzdWx0KSkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn1cblxuY29uc3Qgd2lkdGhDYWNoZSA9IG5ldyBNYXAoKTtcbmNvbnN0IG5vdFJhZGl1cyA9IChyYWRpdXMpID0+IGlzTmFOKHJhZGl1cykgfHwgcmFkaXVzIDw9IDA7XG5jb25zdCBmb250c0tleSA9IChmb250cykgPT4gZm9udHMucmVkdWNlKGZ1bmN0aW9uKHByZXYsIGl0ZW0pIHtcbiAgcHJldiArPSBpdGVtLnN0cmluZztcbiAgcmV0dXJuIHByZXY7XG59LCAnJyk7XG5cbi8qKlxuICogQHR5cGVkZWYgeyBpbXBvcnQoJ2NoYXJ0LmpzJykuUG9pbnQgfSBQb2ludFxuICogQHR5cGVkZWYgeyBpbXBvcnQoJy4uLy4uL3R5cGVzL2xhYmVsJykuQ29yZUxhYmVsT3B0aW9ucyB9IENvcmVMYWJlbE9wdGlvbnNcbiAqIEB0eXBlZGVmIHsgaW1wb3J0KCcuLi8uLi90eXBlcy9vcHRpb25zJykuUG9pbnRBbm5vdGF0aW9uT3B0aW9ucyB9IFBvaW50QW5ub3RhdGlvbk9wdGlvbnNcbiAqL1xuXG4vKipcbiAqIERldGVybWluZSBpZiBjb250ZW50IGlzIGFuIGltYWdlIG9yIGEgY2FudmFzLlxuICogQHBhcmFtIHsqfSBjb250ZW50XG4gKiBAcmV0dXJucyBib29sZWFufHVuZGVmaW5lZFxuICogQHRvZG8gbW92ZSB0aGlzIGZ1bmN0aW9uIHRvIGNoYXJ0LmpzIGhlbHBlcnNcbiAqL1xuZnVuY3Rpb24gaXNJbWFnZU9yQ2FudmFzKGNvbnRlbnQpIHtcbiAgaWYgKGNvbnRlbnQgJiYgdHlwZW9mIGNvbnRlbnQgPT09ICdvYmplY3QnKSB7XG4gICAgY29uc3QgdHlwZSA9IGNvbnRlbnQudG9TdHJpbmcoKTtcbiAgICByZXR1cm4gKHR5cGUgPT09ICdbb2JqZWN0IEhUTUxJbWFnZUVsZW1lbnRdJyB8fCB0eXBlID09PSAnW29iamVjdCBIVE1MQ2FudmFzRWxlbWVudF0nKTtcbiAgfVxufVxuXG4vKipcbiAqIFNldCB0aGUgdHJhbnNsYXRpb24gb24gdGhlIGNhbnZhcyBpZiB0aGUgcm90YXRpb24gbXVzdCBiZSBhcHBsaWVkLlxuICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCAtIGNoYXJ0IGNhbnZhcyBjb250ZXh0XG4gKiBAcGFyYW0ge1BvaW50fSBwb2ludCAtIHRoZSBwb2ludCBvZiB0cmFuc2xhdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IHJvdGF0aW9uIC0gcm90YXRpb24gKGluIGRlZ3JlZXMpIHRvIGFwcGx5XG4gKi9cbmZ1bmN0aW9uIHRyYW5zbGF0ZShjdHgsIHt4LCB5fSwgcm90YXRpb24pIHtcbiAgaWYgKHJvdGF0aW9uKSB7XG4gICAgY3R4LnRyYW5zbGF0ZSh4LCB5KTtcbiAgICBjdHgucm90YXRlKHRvUmFkaWFucyhyb3RhdGlvbikpO1xuICAgIGN0eC50cmFuc2xhdGUoLXgsIC15KTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHhcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJucyB7Ym9vbGVhbnx1bmRlZmluZWR9XG4gKi9cbmZ1bmN0aW9uIHNldEJvcmRlclN0eWxlKGN0eCwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmJvcmRlcldpZHRoKSB7XG4gICAgY3R4LmxpbmVDYXAgPSBvcHRpb25zLmJvcmRlckNhcFN0eWxlO1xuICAgIGN0eC5zZXRMaW5lRGFzaChvcHRpb25zLmJvcmRlckRhc2gpO1xuICAgIGN0eC5saW5lRGFzaE9mZnNldCA9IG9wdGlvbnMuYm9yZGVyRGFzaE9mZnNldDtcbiAgICBjdHgubGluZUpvaW4gPSBvcHRpb25zLmJvcmRlckpvaW5TdHlsZTtcbiAgICBjdHgubGluZVdpZHRoID0gb3B0aW9ucy5ib3JkZXJXaWR0aDtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSBvcHRpb25zLmJvcmRlckNvbG9yO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gc2V0U2hhZG93U3R5bGUoY3R4LCBvcHRpb25zKSB7XG4gIGN0eC5zaGFkb3dDb2xvciA9IG9wdGlvbnMuYmFja2dyb3VuZFNoYWRvd0NvbG9yO1xuICBjdHguc2hhZG93Qmx1ciA9IG9wdGlvbnMuc2hhZG93Qmx1cjtcbiAgY3R4LnNoYWRvd09mZnNldFggPSBvcHRpb25zLnNoYWRvd09mZnNldFg7XG4gIGN0eC5zaGFkb3dPZmZzZXRZID0gb3B0aW9ucy5zaGFkb3dPZmZzZXRZO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHhcbiAqIEBwYXJhbSB7Q29yZUxhYmVsT3B0aW9uc30gb3B0aW9uc1xuICogQHJldHVybnMge3t3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcn19XG4gKi9cbmZ1bmN0aW9uIG1lYXN1cmVMYWJlbFNpemUoY3R4LCBvcHRpb25zKSB7XG4gIGNvbnN0IGNvbnRlbnQgPSBvcHRpb25zLmNvbnRlbnQ7XG4gIGlmIChpc0ltYWdlT3JDYW52YXMoY29udGVudCkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd2lkdGg6IGdldFNpemUoY29udGVudC53aWR0aCwgb3B0aW9ucy53aWR0aCksXG4gICAgICBoZWlnaHQ6IGdldFNpemUoY29udGVudC5oZWlnaHQsIG9wdGlvbnMuaGVpZ2h0KVxuICAgIH07XG4gIH1cbiAgY29uc3Qgb3B0Rm9udCA9IG9wdGlvbnMuZm9udDtcbiAgY29uc3QgZm9udHMgPSBpc0FycmF5KG9wdEZvbnQpID8gb3B0Rm9udC5tYXAoZiA9PiB0b0ZvbnQoZikpIDogW3RvRm9udChvcHRGb250KV07XG4gIGNvbnN0IHN0cm9rZVdpZHRoID0gb3B0aW9ucy50ZXh0U3Ryb2tlV2lkdGg7XG4gIGNvbnN0IGxpbmVzID0gaXNBcnJheShjb250ZW50KSA/IGNvbnRlbnQgOiBbY29udGVudF07XG4gIGNvbnN0IG1hcEtleSA9IGxpbmVzLmpvaW4oKSArIGZvbnRzS2V5KGZvbnRzKSArIHN0cm9rZVdpZHRoICsgKGN0eC5fbWVhc3VyZVRleHQgPyAnLXNwcml0aW5nJyA6ICcnKTtcbiAgaWYgKCF3aWR0aENhY2hlLmhhcyhtYXBLZXkpKSB7XG4gICAgd2lkdGhDYWNoZS5zZXQobWFwS2V5LCBjYWxjdWxhdGVMYWJlbFNpemUoY3R4LCBsaW5lcywgZm9udHMsIHN0cm9rZVdpZHRoKSk7XG4gIH1cbiAgcmV0dXJuIHdpZHRoQ2FjaGUuZ2V0KG1hcEtleSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eFxuICogQHBhcmFtIHt7eDogbnVtYmVyLCB5OiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyfX0gcmVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gZHJhd0JveChjdHgsIHJlY3QsIG9wdGlvbnMpIHtcbiAgY29uc3Qge3gsIHksIHdpZHRoLCBoZWlnaHR9ID0gcmVjdDtcbiAgY3R4LnNhdmUoKTtcbiAgc2V0U2hhZG93U3R5bGUoY3R4LCBvcHRpb25zKTtcbiAgY29uc3Qgc3Ryb2tlID0gc2V0Qm9yZGVyU3R5bGUoY3R4LCBvcHRpb25zKTtcbiAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yO1xuICBjdHguYmVnaW5QYXRoKCk7XG4gIGFkZFJvdW5kZWRSZWN0UGF0aChjdHgsIHtcbiAgICB4LCB5LCB3OiB3aWR0aCwgaDogaGVpZ2h0LFxuICAgIHJhZGl1czogY2xhbXBBbGwodG9UUkJMQ29ybmVycyhvcHRpb25zLmJvcmRlclJhZGl1cyksIDAsIE1hdGgubWluKHdpZHRoLCBoZWlnaHQpIC8gMilcbiAgfSk7XG4gIGN0eC5jbG9zZVBhdGgoKTtcbiAgY3R4LmZpbGwoKTtcbiAgaWYgKHN0cm9rZSkge1xuICAgIGN0eC5zaGFkb3dDb2xvciA9IG9wdGlvbnMuYm9yZGVyU2hhZG93Q29sb3I7XG4gICAgY3R4LnN0cm9rZSgpO1xuICB9XG4gIGN0eC5yZXN0b3JlKCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eFxuICogQHBhcmFtIHt7eDogbnVtYmVyLCB5OiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyfX0gcmVjdFxuICogQHBhcmFtIHtDb3JlTGFiZWxPcHRpb25zfSBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIGRyYXdMYWJlbChjdHgsIHJlY3QsIG9wdGlvbnMpIHtcbiAgY29uc3QgY29udGVudCA9IG9wdGlvbnMuY29udGVudDtcbiAgaWYgKGlzSW1hZ2VPckNhbnZhcyhjb250ZW50KSkge1xuICAgIGN0eC5zYXZlKCk7XG4gICAgY3R4Lmdsb2JhbEFscGhhID0gZ2V0T3BhY2l0eShvcHRpb25zLm9wYWNpdHksIGNvbnRlbnQuc3R5bGUub3BhY2l0eSk7XG4gICAgY3R4LmRyYXdJbWFnZShjb250ZW50LCByZWN0LngsIHJlY3QueSwgcmVjdC53aWR0aCwgcmVjdC5oZWlnaHQpO1xuICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGxhYmVscyA9IGlzQXJyYXkoY29udGVudCkgPyBjb250ZW50IDogW2NvbnRlbnRdO1xuICBjb25zdCBvcHRGb250ID0gb3B0aW9ucy5mb250O1xuICBjb25zdCBmb250cyA9IGlzQXJyYXkob3B0Rm9udCkgPyBvcHRGb250Lm1hcChmID0+IHRvRm9udChmKSkgOiBbdG9Gb250KG9wdEZvbnQpXTtcbiAgY29uc3Qgb3B0Q29sb3IgPSBvcHRpb25zLmNvbG9yO1xuICBjb25zdCBjb2xvcnMgPSBpc0FycmF5KG9wdENvbG9yKSA/IG9wdENvbG9yIDogW29wdENvbG9yXTtcbiAgY29uc3QgeCA9IGNhbGN1bGF0ZVRleHRBbGlnbm1lbnQocmVjdCwgb3B0aW9ucyk7XG4gIGNvbnN0IHkgPSByZWN0LnkgKyBvcHRpb25zLnRleHRTdHJva2VXaWR0aCAvIDI7XG4gIGN0eC5zYXZlKCk7XG4gIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgY3R4LnRleHRBbGlnbiA9IG9wdGlvbnMudGV4dEFsaWduO1xuICBpZiAoc2V0VGV4dFN0cm9rZVN0eWxlKGN0eCwgb3B0aW9ucykpIHtcbiAgICBhcHBseUxhYmVsRGVjb3JhdGlvbihjdHgsIHt4LCB5fSwgbGFiZWxzLCBmb250cyk7XG4gIH1cbiAgYXBwbHlMYWJlbENvbnRlbnQoY3R4LCB7eCwgeX0sIGxhYmVscywge2ZvbnRzLCBjb2xvcnN9KTtcbiAgY3R4LnJlc3RvcmUoKTtcbn1cblxuZnVuY3Rpb24gc2V0VGV4dFN0cm9rZVN0eWxlKGN0eCwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucy50ZXh0U3Ryb2tlV2lkdGggPiAwKSB7XG4gICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTM2MjcxMTEvZHJhd2luZy10ZXh0LXdpdGgtYW4tb3V0ZXItc3Ryb2tlLXdpdGgtaHRtbDVzLWNhbnZhc1xuICAgIGN0eC5saW5lSm9pbiA9ICdyb3VuZCc7XG4gICAgY3R4Lm1pdGVyTGltaXQgPSAyO1xuICAgIGN0eC5saW5lV2lkdGggPSBvcHRpb25zLnRleHRTdHJva2VXaWR0aDtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSBvcHRpb25zLnRleHRTdHJva2VDb2xvcjtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHhcbiAqIEBwYXJhbSB7e3JhZGl1czogbnVtYmVyLCBvcHRpb25zOiBQb2ludEFubm90YXRpb25PcHRpb25zfX0gZWxlbWVudFxuICogQHBhcmFtIHtudW1iZXJ9IHhcbiAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gKi9cbmZ1bmN0aW9uIGRyYXdQb2ludChjdHgsIGVsZW1lbnQsIHgsIHkpIHtcbiAgY29uc3Qge3JhZGl1cywgb3B0aW9uc30gPSBlbGVtZW50O1xuICBjb25zdCBzdHlsZSA9IG9wdGlvbnMucG9pbnRTdHlsZTtcbiAgY29uc3Qgcm90YXRpb24gPSBvcHRpb25zLnJvdGF0aW9uO1xuICBsZXQgcmFkID0gKHJvdGF0aW9uIHx8IDApICogUkFEX1BFUl9ERUc7XG5cbiAgaWYgKGlzSW1hZ2VPckNhbnZhcyhzdHlsZSkpIHtcbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC50cmFuc2xhdGUoeCwgeSk7XG4gICAgY3R4LnJvdGF0ZShyYWQpO1xuICAgIGN0eC5kcmF3SW1hZ2Uoc3R5bGUsIC1zdHlsZS53aWR0aCAvIDIsIC1zdHlsZS5oZWlnaHQgLyAyLCBzdHlsZS53aWR0aCwgc3R5bGUuaGVpZ2h0KTtcbiAgICBjdHgucmVzdG9yZSgpO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAobm90UmFkaXVzKHJhZGl1cykpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZHJhd1BvaW50U3R5bGUoY3R4LCB7eCwgeSwgcmFkaXVzLCByb3RhdGlvbiwgc3R5bGUsIHJhZH0pO1xufVxuXG5mdW5jdGlvbiBkcmF3UG9pbnRTdHlsZShjdHgsIHt4LCB5LCByYWRpdXMsIHJvdGF0aW9uLCBzdHlsZSwgcmFkfSkge1xuICBsZXQgeE9mZnNldCwgeU9mZnNldCwgc2l6ZSwgY29ybmVyUmFkaXVzO1xuICBjdHguYmVnaW5QYXRoKCk7XG5cbiAgc3dpdGNoIChzdHlsZSkge1xuICAvLyBEZWZhdWx0IGluY2x1ZGVzIGNpcmNsZVxuICBkZWZhdWx0OlxuICAgIGN0eC5hcmMoeCwgeSwgcmFkaXVzLCAwLCBUQVUpO1xuICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICBicmVhaztcbiAgY2FzZSAndHJpYW5nbGUnOlxuICAgIGN0eC5tb3ZlVG8oeCArIE1hdGguc2luKHJhZCkgKiByYWRpdXMsIHkgLSBNYXRoLmNvcyhyYWQpICogcmFkaXVzKTtcbiAgICByYWQgKz0gVFdPX1RISVJEU19QSTtcbiAgICBjdHgubGluZVRvKHggKyBNYXRoLnNpbihyYWQpICogcmFkaXVzLCB5IC0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cyk7XG4gICAgcmFkICs9IFRXT19USElSRFNfUEk7XG4gICAgY3R4LmxpbmVUbyh4ICsgTWF0aC5zaW4ocmFkKSAqIHJhZGl1cywgeSAtIE1hdGguY29zKHJhZCkgKiByYWRpdXMpO1xuICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICBicmVhaztcbiAgY2FzZSAncmVjdFJvdW5kZWQnOlxuICAgIC8vIE5PVEU6IHRoZSByb3VuZGVkIHJlY3QgaW1wbGVtZW50YXRpb24gY2hhbmdlZCB0byB1c2UgYGFyY2AgaW5zdGVhZCBvZlxuICAgIC8vIGBxdWFkcmF0aWNDdXJ2ZVRvYCBzaW5jZSBpdCBnZW5lcmF0ZXMgYmV0dGVyIHJlc3VsdHMgd2hlbiByZWN0IGlzXG4gICAgLy8gYWxtb3N0IGEgY2lyY2xlLiAwLjUxNiAoaW5zdGVhZCBvZiAwLjUpIHByb2R1Y2VzIHJlc3VsdHMgd2l0aCB2aXN1YWxseVxuICAgIC8vIGNsb3NlciBwcm9wb3J0aW9uIHRvIHRoZSBwcmV2aW91cyBpbXBsIGFuZCBpdCBpcyBpbnNjcmliZWQgaW4gdGhlXG4gICAgLy8gY2lyY2xlIHdpdGggYHJhZGl1c2AuIEZvciBtb3JlIGRldGFpbHMsIHNlZSB0aGUgZm9sbG93aW5nIFBSczpcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9pc3N1ZXMvNTU5N1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy81ODU4XG4gICAgY29ybmVyUmFkaXVzID0gcmFkaXVzICogMC41MTY7XG4gICAgc2l6ZSA9IHJhZGl1cyAtIGNvcm5lclJhZGl1cztcbiAgICB4T2Zmc2V0ID0gTWF0aC5jb3MocmFkICsgUVVBUlRFUl9QSSkgKiBzaXplO1xuICAgIHlPZmZzZXQgPSBNYXRoLnNpbihyYWQgKyBRVUFSVEVSX1BJKSAqIHNpemU7XG4gICAgY3R4LmFyYyh4IC0geE9mZnNldCwgeSAtIHlPZmZzZXQsIGNvcm5lclJhZGl1cywgcmFkIC0gUEksIHJhZCAtIEhBTEZfUEkpO1xuICAgIGN0eC5hcmMoeCArIHlPZmZzZXQsIHkgLSB4T2Zmc2V0LCBjb3JuZXJSYWRpdXMsIHJhZCAtIEhBTEZfUEksIHJhZCk7XG4gICAgY3R4LmFyYyh4ICsgeE9mZnNldCwgeSArIHlPZmZzZXQsIGNvcm5lclJhZGl1cywgcmFkLCByYWQgKyBIQUxGX1BJKTtcbiAgICBjdHguYXJjKHggLSB5T2Zmc2V0LCB5ICsgeE9mZnNldCwgY29ybmVyUmFkaXVzLCByYWQgKyBIQUxGX1BJLCByYWQgKyBQSSk7XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIGJyZWFrO1xuICBjYXNlICdyZWN0JzpcbiAgICBpZiAoIXJvdGF0aW9uKSB7XG4gICAgICBzaXplID0gTWF0aC5TUVJUMV8yICogcmFkaXVzO1xuICAgICAgY3R4LnJlY3QoeCAtIHNpemUsIHkgLSBzaXplLCAyICogc2l6ZSwgMiAqIHNpemUpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJhZCArPSBRVUFSVEVSX1BJO1xuICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgY2FzZSAncmVjdFJvdCc6XG4gICAgeE9mZnNldCA9IE1hdGguY29zKHJhZCkgKiByYWRpdXM7XG4gICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG4gICAgY3R4Lm1vdmVUbyh4IC0geE9mZnNldCwgeSAtIHlPZmZzZXQpO1xuICAgIGN0eC5saW5lVG8oeCArIHlPZmZzZXQsIHkgLSB4T2Zmc2V0KTtcbiAgICBjdHgubGluZVRvKHggKyB4T2Zmc2V0LCB5ICsgeU9mZnNldCk7XG4gICAgY3R4LmxpbmVUbyh4IC0geU9mZnNldCwgeSArIHhPZmZzZXQpO1xuICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICBicmVhaztcbiAgY2FzZSAnY3Jvc3NSb3QnOlxuICAgIHJhZCArPSBRVUFSVEVSX1BJO1xuICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgY2FzZSAnY3Jvc3MnOlxuICAgIHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuICAgIHlPZmZzZXQgPSBNYXRoLnNpbihyYWQpICogcmFkaXVzO1xuICAgIGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXQsIHkgLSB5T2Zmc2V0KTtcbiAgICBjdHgubGluZVRvKHggKyB4T2Zmc2V0LCB5ICsgeU9mZnNldCk7XG4gICAgY3R4Lm1vdmVUbyh4ICsgeU9mZnNldCwgeSAtIHhPZmZzZXQpO1xuICAgIGN0eC5saW5lVG8oeCAtIHlPZmZzZXQsIHkgKyB4T2Zmc2V0KTtcbiAgICBicmVhaztcbiAgY2FzZSAnc3Rhcic6XG4gICAgeE9mZnNldCA9IE1hdGguY29zKHJhZCkgKiByYWRpdXM7XG4gICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG4gICAgY3R4Lm1vdmVUbyh4IC0geE9mZnNldCwgeSAtIHlPZmZzZXQpO1xuICAgIGN0eC5saW5lVG8oeCArIHhPZmZzZXQsIHkgKyB5T2Zmc2V0KTtcbiAgICBjdHgubW92ZVRvKHggKyB5T2Zmc2V0LCB5IC0geE9mZnNldCk7XG4gICAgY3R4LmxpbmVUbyh4IC0geU9mZnNldCwgeSArIHhPZmZzZXQpO1xuICAgIHJhZCArPSBRVUFSVEVSX1BJO1xuICAgIHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuICAgIHlPZmZzZXQgPSBNYXRoLnNpbihyYWQpICogcmFkaXVzO1xuICAgIGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXQsIHkgLSB5T2Zmc2V0KTtcbiAgICBjdHgubGluZVRvKHggKyB4T2Zmc2V0LCB5ICsgeU9mZnNldCk7XG4gICAgY3R4Lm1vdmVUbyh4ICsgeU9mZnNldCwgeSAtIHhPZmZzZXQpO1xuICAgIGN0eC5saW5lVG8oeCAtIHlPZmZzZXQsIHkgKyB4T2Zmc2V0KTtcbiAgICBicmVhaztcbiAgY2FzZSAnbGluZSc6XG4gICAgeE9mZnNldCA9IE1hdGguY29zKHJhZCkgKiByYWRpdXM7XG4gICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG4gICAgY3R4Lm1vdmVUbyh4IC0geE9mZnNldCwgeSAtIHlPZmZzZXQpO1xuICAgIGN0eC5saW5lVG8oeCArIHhPZmZzZXQsIHkgKyB5T2Zmc2V0KTtcbiAgICBicmVhaztcbiAgY2FzZSAnZGFzaCc6XG4gICAgY3R4Lm1vdmVUbyh4LCB5KTtcbiAgICBjdHgubGluZVRvKHggKyBNYXRoLmNvcyhyYWQpICogcmFkaXVzLCB5ICsgTWF0aC5zaW4ocmFkKSAqIHJhZGl1cyk7XG4gICAgYnJlYWs7XG4gIH1cblxuICBjdHguZmlsbCgpO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVMYWJlbFNpemUoY3R4LCBsaW5lcywgZm9udHMsIHN0cm9rZVdpZHRoKSB7XG4gIGN0eC5zYXZlKCk7XG4gIGNvbnN0IGNvdW50ID0gbGluZXMubGVuZ3RoO1xuICBsZXQgd2lkdGggPSAwO1xuICBsZXQgaGVpZ2h0ID0gc3Ryb2tlV2lkdGg7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgIGNvbnN0IGZvbnQgPSBmb250c1tNYXRoLm1pbihpLCBmb250cy5sZW5ndGggLSAxKV07XG4gICAgY3R4LmZvbnQgPSBmb250LnN0cmluZztcbiAgICBjb25zdCB0ZXh0ID0gbGluZXNbaV07XG4gICAgd2lkdGggPSBNYXRoLm1heCh3aWR0aCwgY3R4Lm1lYXN1cmVUZXh0KHRleHQpLndpZHRoICsgc3Ryb2tlV2lkdGgpO1xuICAgIGhlaWdodCArPSBmb250LmxpbmVIZWlnaHQ7XG4gIH1cbiAgY3R4LnJlc3RvcmUoKTtcbiAgcmV0dXJuIHt3aWR0aCwgaGVpZ2h0fTtcbn1cblxuZnVuY3Rpb24gYXBwbHlMYWJlbERlY29yYXRpb24oY3R4LCB7eCwgeX0sIGxhYmVscywgZm9udHMpIHtcbiAgY3R4LmJlZ2luUGF0aCgpO1xuICBsZXQgbGhzID0gMDtcbiAgbGFiZWxzLmZvckVhY2goZnVuY3Rpb24obCwgaSkge1xuICAgIGNvbnN0IGYgPSBmb250c1tNYXRoLm1pbihpLCBmb250cy5sZW5ndGggLSAxKV07XG4gICAgY29uc3QgbGggPSBmLmxpbmVIZWlnaHQ7XG4gICAgY3R4LmZvbnQgPSBmLnN0cmluZztcbiAgICBjdHguc3Ryb2tlVGV4dChsLCB4LCB5ICsgbGggLyAyICsgbGhzKTtcbiAgICBsaHMgKz0gbGg7XG4gIH0pO1xuICBjdHguc3Ryb2tlKCk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5TGFiZWxDb250ZW50KGN0eCwge3gsIHl9LCBsYWJlbHMsIHtmb250cywgY29sb3JzfSkge1xuICBsZXQgbGhzID0gMDtcbiAgbGFiZWxzLmZvckVhY2goZnVuY3Rpb24obCwgaSkge1xuICAgIGNvbnN0IGMgPSBjb2xvcnNbTWF0aC5taW4oaSwgY29sb3JzLmxlbmd0aCAtIDEpXTtcbiAgICBjb25zdCBmID0gZm9udHNbTWF0aC5taW4oaSwgZm9udHMubGVuZ3RoIC0gMSldO1xuICAgIGNvbnN0IGxoID0gZi5saW5lSGVpZ2h0O1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHguZm9udCA9IGYuc3RyaW5nO1xuICAgIGN0eC5maWxsU3R5bGUgPSBjO1xuICAgIGN0eC5maWxsVGV4dChsLCB4LCB5ICsgbGggLyAyICsgbGhzKTtcbiAgICBsaHMgKz0gbGg7XG4gICAgY3R4LmZpbGwoKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldE9wYWNpdHkodmFsdWUsIGVsZW1lbnRWYWx1ZSkge1xuICBjb25zdCBvcGFjaXR5ID0gaXNOdW1iZXIodmFsdWUpID8gdmFsdWUgOiBlbGVtZW50VmFsdWU7XG4gIHJldHVybiBpc051bWJlcihvcGFjaXR5KSA/IGNsYW1wKG9wYWNpdHksIDAsIDEpIDogMTtcbn1cblxuY29uc3QgbGltaXRlZExpbmVTY2FsZSA9IHtcbiAgeFNjYWxlSUQ6IHttaW46ICd4TWluJywgbWF4OiAneE1heCcsIHN0YXJ0OiAnbGVmdCcsIGVuZDogJ3JpZ2h0Jywgc3RhcnRQcm9wOiAneCcsIGVuZFByb3A6ICd4Mid9LFxuICB5U2NhbGVJRDoge21pbjogJ3lNaW4nLCBtYXg6ICd5TWF4Jywgc3RhcnQ6ICdib3R0b20nLCBlbmQ6ICd0b3AnLCBzdGFydFByb3A6ICd5JywgZW5kUHJvcDogJ3kyJ31cbn07XG5cbi8qKlxuICogQHR5cGVkZWYgeyBpbXBvcnQoXCJjaGFydC5qc1wiKS5DaGFydCB9IENoYXJ0XG4gKiBAdHlwZWRlZiB7IGltcG9ydChcImNoYXJ0LmpzXCIpLlNjYWxlIH0gU2NhbGVcbiAqIEB0eXBlZGVmIHsgaW1wb3J0KFwiY2hhcnQuanNcIikuUG9pbnQgfSBQb2ludFxuICogQHR5cGVkZWYgeyBpbXBvcnQoJy4uLy4uL3R5cGVzL2VsZW1lbnQnKS5Bbm5vdGF0aW9uQm94TW9kZWwgfSBBbm5vdGF0aW9uQm94TW9kZWxcbiAqIEB0eXBlZGVmIHsgaW1wb3J0KCcuLi8uLi90eXBlcy9vcHRpb25zJykuQ29yZUFubm90YXRpb25PcHRpb25zIH0gQ29yZUFubm90YXRpb25PcHRpb25zXG4gKiBAdHlwZWRlZiB7IGltcG9ydCgnLi4vLi4vdHlwZXMvb3B0aW9ucycpLkxpbmVBbm5vdGF0aW9uT3B0aW9ucyB9IExpbmVBbm5vdGF0aW9uT3B0aW9uc1xuICogQHR5cGVkZWYgeyBpbXBvcnQoJy4uLy4uL3R5cGVzL29wdGlvbnMnKS5Qb2ludEFubm90YXRpb25PcHRpb25zIH0gUG9pbnRBbm5vdGF0aW9uT3B0aW9uc1xuICogQHR5cGVkZWYgeyBpbXBvcnQoJy4uLy4uL3R5cGVzL29wdGlvbnMnKS5Qb2x5Z29uQW5ub3RhdGlvbk9wdGlvbnMgfSBQb2x5Z29uQW5ub3RhdGlvbk9wdGlvbnNcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7U2NhbGV9IHNjYWxlXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcn0gZmFsbGJhY2tcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIHNjYWxlVmFsdWUoc2NhbGUsIHZhbHVlLCBmYWxsYmFjaykge1xuICB2YWx1ZSA9IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgPyB2YWx1ZSA6IHNjYWxlLnBhcnNlKHZhbHVlKTtcbiAgcmV0dXJuIGlzRmluaXRlKHZhbHVlKSA/IHNjYWxlLmdldFBpeGVsRm9yVmFsdWUodmFsdWUpIDogZmFsbGJhY2s7XG59XG5cbi8qKlxuICogU2VhcmNoIHRoZSBzY2FsZSBkZWZpbmVkIGluIGNoYXJ0anMgYnkgdGhlIGF4aXMgcmVsYXRlZCB0byB0aGUgYW5ub3RhdGlvbiBvcHRpb25zIGtleS5cbiAqIEBwYXJhbSB7eyBba2V5OiBzdHJpbmddOiBTY2FsZSB9fSBzY2FsZXNcbiAqIEBwYXJhbSB7Q29yZUFubm90YXRpb25PcHRpb25zfSBvcHRpb25zXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiByZXRyaWV2ZVNjYWxlSUQoc2NhbGVzLCBvcHRpb25zLCBrZXkpIHtcbiAgY29uc3Qgc2NhbGVJRCA9IG9wdGlvbnNba2V5XTtcbiAgaWYgKHNjYWxlSUQgfHwga2V5ID09PSAnc2NhbGVJRCcpIHtcbiAgICByZXR1cm4gc2NhbGVJRDtcbiAgfVxuICBjb25zdCBheGlzID0ga2V5LmNoYXJBdCgwKTtcbiAgY29uc3QgYXhlcyA9IE9iamVjdC52YWx1ZXMoc2NhbGVzKS5maWx0ZXIoKHNjYWxlKSA9PiBzY2FsZS5heGlzICYmIHNjYWxlLmF4aXMgPT09IGF4aXMpO1xuICBpZiAoYXhlcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gYXhlc1swXS5pZDtcbiAgfVxuICByZXR1cm4gYXhpcztcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1NjYWxlfSBzY2FsZVxuICogQHBhcmFtIHt7bWluOiBudW1iZXIsIG1heDogbnVtYmVyLCBzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlcn19IG9wdGlvbnNcbiAqIEByZXR1cm5zIHt7c3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXJ9fHVuZGVmaW5lZH1cbiAqL1xuZnVuY3Rpb24gZ2V0RGltZW5zaW9uQnlTY2FsZShzY2FsZSwgb3B0aW9ucykge1xuICBpZiAoc2NhbGUpIHtcbiAgICBjb25zdCByZXZlcnNlID0gc2NhbGUub3B0aW9ucy5yZXZlcnNlO1xuICAgIGNvbnN0IHN0YXJ0ID0gc2NhbGVWYWx1ZShzY2FsZSwgb3B0aW9ucy5taW4sIHJldmVyc2UgPyBvcHRpb25zLmVuZCA6IG9wdGlvbnMuc3RhcnQpO1xuICAgIGNvbnN0IGVuZCA9IHNjYWxlVmFsdWUoc2NhbGUsIG9wdGlvbnMubWF4LCByZXZlcnNlID8gb3B0aW9ucy5zdGFydCA6IG9wdGlvbnMuZW5kKTtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhcnQsXG4gICAgICBlbmRcbiAgICB9O1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtDaGFydH0gY2hhcnRcbiAqIEBwYXJhbSB7Q29yZUFubm90YXRpb25PcHRpb25zfSBvcHRpb25zXG4gKiBAcmV0dXJucyB7UG9pbnR9XG4gKi9cbmZ1bmN0aW9uIGdldENoYXJ0UG9pbnQoY2hhcnQsIG9wdGlvbnMpIHtcbiAgY29uc3Qge2NoYXJ0QXJlYSwgc2NhbGVzfSA9IGNoYXJ0O1xuICBjb25zdCB4U2NhbGUgPSBzY2FsZXNbcmV0cmlldmVTY2FsZUlEKHNjYWxlcywgb3B0aW9ucywgJ3hTY2FsZUlEJyldO1xuICBjb25zdCB5U2NhbGUgPSBzY2FsZXNbcmV0cmlldmVTY2FsZUlEKHNjYWxlcywgb3B0aW9ucywgJ3lTY2FsZUlEJyldO1xuICBsZXQgeCA9IGNoYXJ0QXJlYS53aWR0aCAvIDI7XG4gIGxldCB5ID0gY2hhcnRBcmVhLmhlaWdodCAvIDI7XG5cbiAgaWYgKHhTY2FsZSkge1xuICAgIHggPSBzY2FsZVZhbHVlKHhTY2FsZSwgb3B0aW9ucy54VmFsdWUsIHhTY2FsZS5sZWZ0ICsgeFNjYWxlLndpZHRoIC8gMik7XG4gIH1cblxuICBpZiAoeVNjYWxlKSB7XG4gICAgeSA9IHNjYWxlVmFsdWUoeVNjYWxlLCBvcHRpb25zLnlWYWx1ZSwgeVNjYWxlLnRvcCArIHlTY2FsZS5oZWlnaHQgLyAyKTtcbiAgfVxuICByZXR1cm4ge3gsIHl9O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0XG4gKiBAcGFyYW0ge0NvcmVBbm5vdGF0aW9uT3B0aW9uc30gb3B0aW9uc1xuICogQHJldHVybnMge0Fubm90YXRpb25Cb3hNb2RlbH1cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUJveFByb3BlcnRpZXMoY2hhcnQsIG9wdGlvbnMpIHtcbiAgY29uc3Qgc2NhbGVzID0gY2hhcnQuc2NhbGVzO1xuICBjb25zdCB4U2NhbGUgPSBzY2FsZXNbcmV0cmlldmVTY2FsZUlEKHNjYWxlcywgb3B0aW9ucywgJ3hTY2FsZUlEJyldO1xuICBjb25zdCB5U2NhbGUgPSBzY2FsZXNbcmV0cmlldmVTY2FsZUlEKHNjYWxlcywgb3B0aW9ucywgJ3lTY2FsZUlEJyldO1xuXG4gIGlmICgheFNjYWxlICYmICF5U2NhbGUpIHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICBsZXQge2xlZnQ6IHgsIHJpZ2h0OiB4Mn0gPSB4U2NhbGUgfHwgY2hhcnQuY2hhcnRBcmVhO1xuICBsZXQge3RvcDogeSwgYm90dG9tOiB5Mn0gPSB5U2NhbGUgfHwgY2hhcnQuY2hhcnRBcmVhO1xuICBjb25zdCB4RGltID0gZ2V0Q2hhcnREaW1lbnNpb25CeVNjYWxlKHhTY2FsZSwge21pbjogb3B0aW9ucy54TWluLCBtYXg6IG9wdGlvbnMueE1heCwgc3RhcnQ6IHgsIGVuZDogeDJ9KTtcbiAgeCA9IHhEaW0uc3RhcnQ7XG4gIHgyID0geERpbS5lbmQ7XG4gIGNvbnN0IHlEaW0gPSBnZXRDaGFydERpbWVuc2lvbkJ5U2NhbGUoeVNjYWxlLCB7bWluOiBvcHRpb25zLnlNaW4sIG1heDogb3B0aW9ucy55TWF4LCBzdGFydDogeTIsIGVuZDogeX0pO1xuICB5ID0geURpbS5zdGFydDtcbiAgeTIgPSB5RGltLmVuZDtcblxuICByZXR1cm4ge1xuICAgIHgsXG4gICAgeSxcbiAgICB4MixcbiAgICB5MixcbiAgICB3aWR0aDogeDIgLSB4LFxuICAgIGhlaWdodDogeTIgLSB5LFxuICAgIGNlbnRlclg6IHggKyAoeDIgLSB4KSAvIDIsXG4gICAgY2VudGVyWTogeSArICh5MiAtIHkpIC8gMlxuICB9O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0XG4gKiBAcGFyYW0ge1BvaW50QW5ub3RhdGlvbk9wdGlvbnN8UG9seWdvbkFubm90YXRpb25PcHRpb25zfSBvcHRpb25zXG4gKiBAcmV0dXJucyB7QW5ub3RhdGlvbkJveE1vZGVsfVxuICovXG5mdW5jdGlvbiByZXNvbHZlUG9pbnRQcm9wZXJ0aWVzKGNoYXJ0LCBvcHRpb25zKSB7XG4gIGlmICghaXNCb3VuZFRvUG9pbnQob3B0aW9ucykpIHtcbiAgICBjb25zdCBib3ggPSByZXNvbHZlQm94UHJvcGVydGllcyhjaGFydCwgb3B0aW9ucyk7XG4gICAgbGV0IHJhZGl1cyA9IG9wdGlvbnMucmFkaXVzO1xuICAgIGlmICghcmFkaXVzIHx8IGlzTmFOKHJhZGl1cykpIHtcbiAgICAgIHJhZGl1cyA9IE1hdGgubWluKGJveC53aWR0aCwgYm94LmhlaWdodCkgLyAyO1xuICAgICAgb3B0aW9ucy5yYWRpdXMgPSByYWRpdXM7XG4gICAgfVxuICAgIGNvbnN0IHNpemUgPSByYWRpdXMgKiAyO1xuICAgIGNvbnN0IGFkanVzdENlbnRlclggPSBib3guY2VudGVyWCArIG9wdGlvbnMueEFkanVzdDtcbiAgICBjb25zdCBhZGp1c3RDZW50ZXJZID0gYm94LmNlbnRlclkgKyBvcHRpb25zLnlBZGp1c3Q7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IGFkanVzdENlbnRlclggLSByYWRpdXMsXG4gICAgICB5OiBhZGp1c3RDZW50ZXJZIC0gcmFkaXVzLFxuICAgICAgeDI6IGFkanVzdENlbnRlclggKyByYWRpdXMsXG4gICAgICB5MjogYWRqdXN0Q2VudGVyWSArIHJhZGl1cyxcbiAgICAgIGNlbnRlclg6IGFkanVzdENlbnRlclgsXG4gICAgICBjZW50ZXJZOiBhZGp1c3RDZW50ZXJZLFxuICAgICAgd2lkdGg6IHNpemUsXG4gICAgICBoZWlnaHQ6IHNpemUsXG4gICAgICByYWRpdXNcbiAgICB9O1xuICB9XG4gIHJldHVybiBnZXRDaGFydENpcmNsZShjaGFydCwgb3B0aW9ucyk7XG59XG4vKipcbiAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0XG4gKiBAcGFyYW0ge0xpbmVBbm5vdGF0aW9uT3B0aW9uc30gb3B0aW9uc1xuICogQHJldHVybnMge0Fubm90YXRpb25Cb3hNb2RlbH1cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUxpbmVQcm9wZXJ0aWVzKGNoYXJ0LCBvcHRpb25zKSB7XG4gIGNvbnN0IHtzY2FsZXMsIGNoYXJ0QXJlYX0gPSBjaGFydDtcbiAgY29uc3Qgc2NhbGUgPSBzY2FsZXNbb3B0aW9ucy5zY2FsZUlEXTtcbiAgY29uc3QgYXJlYSA9IHt4OiBjaGFydEFyZWEubGVmdCwgeTogY2hhcnRBcmVhLnRvcCwgeDI6IGNoYXJ0QXJlYS5yaWdodCwgeTI6IGNoYXJ0QXJlYS5ib3R0b219O1xuXG4gIGlmIChzY2FsZSkge1xuICAgIHJlc29sdmVGdWxsTGluZVByb3BlcnRpZXMoc2NhbGUsIGFyZWEsIG9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIHJlc29sdmVMaW1pdGVkTGluZVByb3BlcnRpZXMoc2NhbGVzLCBhcmVhLCBvcHRpb25zKTtcbiAgfVxuICByZXR1cm4gYXJlYTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0NoYXJ0fSBjaGFydFxuICogQHBhcmFtIHtDb3JlQW5ub3RhdGlvbk9wdGlvbnN9IG9wdGlvbnNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2NlbnRlckJhc2VkPWZhbHNlXVxuICogQHJldHVybnMge0Fubm90YXRpb25Cb3hNb2RlbH1cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUJveEFuZExhYmVsUHJvcGVydGllcyhjaGFydCwgb3B0aW9ucykge1xuICBjb25zdCBwcm9wZXJ0aWVzID0gcmVzb2x2ZUJveFByb3BlcnRpZXMoY2hhcnQsIG9wdGlvbnMpO1xuICBwcm9wZXJ0aWVzLmluaXRQcm9wZXJ0aWVzID0gaW5pdEFuaW1hdGlvblByb3BlcnRpZXMoY2hhcnQsIHByb3BlcnRpZXMsIG9wdGlvbnMpO1xuICBwcm9wZXJ0aWVzLmVsZW1lbnRzID0gW3tcbiAgICB0eXBlOiAnbGFiZWwnLFxuICAgIG9wdGlvblNjb3BlOiAnbGFiZWwnLFxuICAgIHByb3BlcnRpZXM6IHJlc29sdmVMYWJlbEVsZW1lbnRQcm9wZXJ0aWVzJDEoY2hhcnQsIHByb3BlcnRpZXMsIG9wdGlvbnMpLFxuICAgIGluaXRQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLmluaXRQcm9wZXJ0aWVzXG4gIH1dO1xuICByZXR1cm4gcHJvcGVydGllcztcbn1cblxuZnVuY3Rpb24gZ2V0Q2hhcnRDaXJjbGUoY2hhcnQsIG9wdGlvbnMpIHtcbiAgY29uc3QgcG9pbnQgPSBnZXRDaGFydFBvaW50KGNoYXJ0LCBvcHRpb25zKTtcbiAgY29uc3Qgc2l6ZSA9IG9wdGlvbnMucmFkaXVzICogMjtcbiAgcmV0dXJuIHtcbiAgICB4OiBwb2ludC54IC0gb3B0aW9ucy5yYWRpdXMgKyBvcHRpb25zLnhBZGp1c3QsXG4gICAgeTogcG9pbnQueSAtIG9wdGlvbnMucmFkaXVzICsgb3B0aW9ucy55QWRqdXN0LFxuICAgIHgyOiBwb2ludC54ICsgb3B0aW9ucy5yYWRpdXMgKyBvcHRpb25zLnhBZGp1c3QsXG4gICAgeTI6IHBvaW50LnkgKyBvcHRpb25zLnJhZGl1cyArIG9wdGlvbnMueUFkanVzdCxcbiAgICBjZW50ZXJYOiBwb2ludC54ICsgb3B0aW9ucy54QWRqdXN0LFxuICAgIGNlbnRlclk6IHBvaW50LnkgKyBvcHRpb25zLnlBZGp1c3QsXG4gICAgcmFkaXVzOiBvcHRpb25zLnJhZGl1cyxcbiAgICB3aWR0aDogc2l6ZSxcbiAgICBoZWlnaHQ6IHNpemVcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2hhcnREaW1lbnNpb25CeVNjYWxlKHNjYWxlLCBvcHRpb25zKSB7XG4gIGNvbnN0IHJlc3VsdCA9IGdldERpbWVuc2lvbkJ5U2NhbGUoc2NhbGUsIG9wdGlvbnMpIHx8IG9wdGlvbnM7XG4gIHJldHVybiB7XG4gICAgc3RhcnQ6IE1hdGgubWluKHJlc3VsdC5zdGFydCwgcmVzdWx0LmVuZCksXG4gICAgZW5kOiBNYXRoLm1heChyZXN1bHQuc3RhcnQsIHJlc3VsdC5lbmQpXG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVGdWxsTGluZVByb3BlcnRpZXMoc2NhbGUsIGFyZWEsIG9wdGlvbnMpIHtcbiAgY29uc3QgbWluID0gc2NhbGVWYWx1ZShzY2FsZSwgb3B0aW9ucy52YWx1ZSwgTmFOKTtcbiAgY29uc3QgbWF4ID0gc2NhbGVWYWx1ZShzY2FsZSwgb3B0aW9ucy5lbmRWYWx1ZSwgbWluKTtcbiAgaWYgKHNjYWxlLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgYXJlYS54ID0gbWluO1xuICAgIGFyZWEueDIgPSBtYXg7XG4gIH0gZWxzZSB7XG4gICAgYXJlYS55ID0gbWluO1xuICAgIGFyZWEueTIgPSBtYXg7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUxpbWl0ZWRMaW5lUHJvcGVydGllcyhzY2FsZXMsIGFyZWEsIG9wdGlvbnMpIHtcbiAgZm9yIChjb25zdCBzY2FsZUlkIG9mIE9iamVjdC5rZXlzKGxpbWl0ZWRMaW5lU2NhbGUpKSB7XG4gICAgY29uc3Qgc2NhbGUgPSBzY2FsZXNbcmV0cmlldmVTY2FsZUlEKHNjYWxlcywgb3B0aW9ucywgc2NhbGVJZCldO1xuICAgIGlmIChzY2FsZSkge1xuICAgICAgY29uc3Qge21pbiwgbWF4LCBzdGFydCwgZW5kLCBzdGFydFByb3AsIGVuZFByb3B9ID0gbGltaXRlZExpbmVTY2FsZVtzY2FsZUlkXTtcbiAgICAgIGNvbnN0IGRpbSA9IGdldERpbWVuc2lvbkJ5U2NhbGUoc2NhbGUsIHttaW46IG9wdGlvbnNbbWluXSwgbWF4OiBvcHRpb25zW21heF0sIHN0YXJ0OiBzY2FsZVtzdGFydF0sIGVuZDogc2NhbGVbZW5kXX0pO1xuICAgICAgYXJlYVtzdGFydFByb3BdID0gZGltLnN0YXJ0O1xuICAgICAgYXJlYVtlbmRQcm9wXSA9IGRpbS5lbmQ7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZVgoe3Byb3BlcnRpZXMsIG9wdGlvbnN9LCBsYWJlbFNpemUsIHBvc2l0aW9uLCBwYWRkaW5nKSB7XG4gIGNvbnN0IHt4OiBzdGFydCwgeDI6IGVuZCwgd2lkdGg6IHNpemV9ID0gcHJvcGVydGllcztcbiAgcmV0dXJuIGNhbGN1bGF0ZVBvc2l0aW9uJDEoe3N0YXJ0LCBlbmQsIHNpemUsIGJvcmRlcldpZHRoOiBvcHRpb25zLmJvcmRlcldpZHRofSwge1xuICAgIHBvc2l0aW9uOiBwb3NpdGlvbi54LFxuICAgIHBhZGRpbmc6IHtzdGFydDogcGFkZGluZy5sZWZ0LCBlbmQ6IHBhZGRpbmcucmlnaHR9LFxuICAgIGFkanVzdDogb3B0aW9ucy5sYWJlbC54QWRqdXN0LFxuICAgIHNpemU6IGxhYmVsU2l6ZS53aWR0aFxuICB9KTtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlWSh7cHJvcGVydGllcywgb3B0aW9uc30sIGxhYmVsU2l6ZSwgcG9zaXRpb24sIHBhZGRpbmcpIHtcbiAgY29uc3Qge3k6IHN0YXJ0LCB5MjogZW5kLCBoZWlnaHQ6IHNpemV9ID0gcHJvcGVydGllcztcbiAgcmV0dXJuIGNhbGN1bGF0ZVBvc2l0aW9uJDEoe3N0YXJ0LCBlbmQsIHNpemUsIGJvcmRlcldpZHRoOiBvcHRpb25zLmJvcmRlcldpZHRofSwge1xuICAgIHBvc2l0aW9uOiBwb3NpdGlvbi55LFxuICAgIHBhZGRpbmc6IHtzdGFydDogcGFkZGluZy50b3AsIGVuZDogcGFkZGluZy5ib3R0b219LFxuICAgIGFkanVzdDogb3B0aW9ucy5sYWJlbC55QWRqdXN0LFxuICAgIHNpemU6IGxhYmVsU2l6ZS5oZWlnaHRcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZVBvc2l0aW9uJDEoYm94T3B0cywgbGFiZWxPcHRzKSB7XG4gIGNvbnN0IHtzdGFydCwgZW5kLCBib3JkZXJXaWR0aH0gPSBib3hPcHRzO1xuICBjb25zdCB7cG9zaXRpb24sIHBhZGRpbmc6IHtzdGFydDogcGFkU3RhcnQsIGVuZDogcGFkRW5kfSwgYWRqdXN0fSA9IGxhYmVsT3B0cztcbiAgY29uc3QgYXZhaWxhYmxlU2l6ZSA9IGVuZCAtIGJvcmRlcldpZHRoIC0gc3RhcnQgLSBwYWRTdGFydCAtIHBhZEVuZCAtIGxhYmVsT3B0cy5zaXplO1xuICByZXR1cm4gc3RhcnQgKyBib3JkZXJXaWR0aCAvIDIgKyBhZGp1c3QgKyBnZXRSZWxhdGl2ZVBvc2l0aW9uKGF2YWlsYWJsZVNpemUsIHBvc2l0aW9uKTtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUxhYmVsRWxlbWVudFByb3BlcnRpZXMkMShjaGFydCwgcHJvcGVydGllcywgb3B0aW9ucykge1xuICBjb25zdCBsYWJlbCA9IG9wdGlvbnMubGFiZWw7XG4gIGxhYmVsLmJhY2tncm91bmRDb2xvciA9ICd0cmFuc3BhcmVudCc7XG4gIGxhYmVsLmNhbGxvdXQuZGlzcGxheSA9IGZhbHNlO1xuICBjb25zdCBwb3NpdGlvbiA9IHRvUG9zaXRpb24obGFiZWwucG9zaXRpb24pO1xuICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKGxhYmVsLnBhZGRpbmcpO1xuICBjb25zdCBsYWJlbFNpemUgPSBtZWFzdXJlTGFiZWxTaXplKGNoYXJ0LmN0eCwgbGFiZWwpO1xuICBjb25zdCB4ID0gY2FsY3VsYXRlWCh7cHJvcGVydGllcywgb3B0aW9uc30sIGxhYmVsU2l6ZSwgcG9zaXRpb24sIHBhZGRpbmcpO1xuICBjb25zdCB5ID0gY2FsY3VsYXRlWSh7cHJvcGVydGllcywgb3B0aW9uc30sIGxhYmVsU2l6ZSwgcG9zaXRpb24sIHBhZGRpbmcpO1xuICBjb25zdCB3aWR0aCA9IGxhYmVsU2l6ZS53aWR0aCArIHBhZGRpbmcud2lkdGg7XG4gIGNvbnN0IGhlaWdodCA9IGxhYmVsU2l6ZS5oZWlnaHQgKyBwYWRkaW5nLmhlaWdodDtcbiAgcmV0dXJuIHtcbiAgICB4LFxuICAgIHksXG4gICAgeDI6IHggKyB3aWR0aCxcbiAgICB5MjogeSArIGhlaWdodCxcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgY2VudGVyWDogeCArIHdpZHRoIC8gMixcbiAgICBjZW50ZXJZOiB5ICsgaGVpZ2h0IC8gMixcbiAgICByb3RhdGlvbjogbGFiZWwucm90YXRpb25cbiAgfTtcblxufVxuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2NoYXJ0LmpzJykuUG9pbnR9IFBvaW50XG4gKi9cblxuLyoqXG4gKiBSb3RhdGUgYSBgcG9pbnRgIHJlbGF0aXZlIHRvIGBjZW50ZXJgIHBvaW50IGJ5IGBhbmdsZWBcbiAqIEBwYXJhbSB7UG9pbnR9IHBvaW50IC0gdGhlIHBvaW50IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtQb2ludH0gY2VudGVyIC0gY2VudGVyIHBvaW50IGZvciByb3RhdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlIC0gYW5nbGUgZm9yIHJvdGF0aW9uLCBpbiByYWRpYW5zXG4gKiBAcmV0dXJucyB7UG9pbnR9IHJvdGF0ZWQgcG9pbnRcbiAqL1xuZnVuY3Rpb24gcm90YXRlZChwb2ludCwgY2VudGVyLCBhbmdsZSkge1xuICBjb25zdCBjb3MgPSBNYXRoLmNvcyhhbmdsZSk7XG4gIGNvbnN0IHNpbiA9IE1hdGguc2luKGFuZ2xlKTtcbiAgY29uc3QgY3ggPSBjZW50ZXIueDtcbiAgY29uc3QgY3kgPSBjZW50ZXIueTtcblxuICByZXR1cm4ge1xuICAgIHg6IGN4ICsgY29zICogKHBvaW50LnggLSBjeCkgLSBzaW4gKiAocG9pbnQueSAtIGN5KSxcbiAgICB5OiBjeSArIHNpbiAqIChwb2ludC54IC0gY3gpICsgY29zICogKHBvaW50LnkgLSBjeSlcbiAgfTtcbn1cblxuY29uc3QgbW92ZUhvb2tzID0gWydlbnRlcicsICdsZWF2ZSddO1xuXG4vKipcbiAqIEB0eXBlZGVmIHsgaW1wb3J0KFwiY2hhcnQuanNcIikuQ2hhcnQgfSBDaGFydFxuICogQHR5cGVkZWYgeyBpbXBvcnQoJy4uLy4uL3R5cGVzL29wdGlvbnMnKS5Bbm5vdGF0aW9uUGx1Z2luT3B0aW9ucyB9IEFubm90YXRpb25QbHVnaW5PcHRpb25zXG4gKi9cblxuY29uc3QgZXZlbnRIb29rcyA9IG1vdmVIb29rcy5jb25jYXQoJ2NsaWNrJyk7XG5cbi8qKlxuICogQHBhcmFtIHtDaGFydH0gY2hhcnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGF0ZVxuICogQHBhcmFtIHtBbm5vdGF0aW9uUGx1Z2luT3B0aW9uc30gb3B0aW9uc1xuICovXG5mdW5jdGlvbiB1cGRhdGVMaXN0ZW5lcnMoY2hhcnQsIHN0YXRlLCBvcHRpb25zKSB7XG4gIHN0YXRlLmxpc3RlbmVkID0gbG9hZEhvb2tzKG9wdGlvbnMsIGV2ZW50SG9va3MsIHN0YXRlLmxpc3RlbmVycyk7XG4gIHN0YXRlLm1vdmVMaXN0ZW5lZCA9IGZhbHNlO1xuICBzdGF0ZS5fZ2V0RWxlbWVudHMgPSBnZXRFbGVtZW50czsgLy8gZm9yIHRlc3RpbmdcblxuICBtb3ZlSG9va3MuZm9yRWFjaChob29rID0+IHtcbiAgICBpZiAoaXNGdW5jdGlvbihvcHRpb25zW2hvb2tdKSkge1xuICAgICAgc3RhdGUubW92ZUxpc3RlbmVkID0gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIGlmICghc3RhdGUubGlzdGVuZWQgfHwgIXN0YXRlLm1vdmVMaXN0ZW5lZCkge1xuICAgIHN0YXRlLmFubm90YXRpb25zLmZvckVhY2goc2NvcGUgPT4ge1xuICAgICAgaWYgKCFzdGF0ZS5saXN0ZW5lZCAmJiBpc0Z1bmN0aW9uKHNjb3BlLmNsaWNrKSkge1xuICAgICAgICBzdGF0ZS5saXN0ZW5lZCA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoIXN0YXRlLm1vdmVMaXN0ZW5lZCkge1xuICAgICAgICBtb3ZlSG9va3MuZm9yRWFjaChob29rID0+IHtcbiAgICAgICAgICBpZiAoaXNGdW5jdGlvbihzY29wZVtob29rXSkpIHtcbiAgICAgICAgICAgIHN0YXRlLmxpc3RlbmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHN0YXRlLm1vdmVMaXN0ZW5lZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGF0ZVxuICogQHBhcmFtIHtDaGFydEV2ZW50fSBldmVudFxuICogQHBhcmFtIHtBbm5vdGF0aW9uUGx1Z2luT3B0aW9uc30gb3B0aW9uc1xuICogQHJldHVybiB7Ym9vbGVhbnx1bmRlZmluZWR9XG4gKi9cbmZ1bmN0aW9uIGhhbmRsZUV2ZW50KHN0YXRlLCBldmVudCwgb3B0aW9ucykge1xuICBpZiAoc3RhdGUubGlzdGVuZWQpIHtcbiAgICBzd2l0Y2ggKGV2ZW50LnR5cGUpIHtcbiAgICBjYXNlICdtb3VzZW1vdmUnOlxuICAgIGNhc2UgJ21vdXNlb3V0JzpcbiAgICAgIHJldHVybiBoYW5kbGVNb3ZlRXZlbnRzKHN0YXRlLCBldmVudCwgb3B0aW9ucyk7XG4gICAgY2FzZSAnY2xpY2snOlxuICAgICAgcmV0dXJuIGhhbmRsZUNsaWNrRXZlbnRzKHN0YXRlLCBldmVudCwgb3B0aW9ucyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZU1vdmVFdmVudHMoc3RhdGUsIGV2ZW50LCBvcHRpb25zKSB7XG4gIGlmICghc3RhdGUubW92ZUxpc3RlbmVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IGVsZW1lbnRzO1xuXG4gIGlmIChldmVudC50eXBlID09PSAnbW91c2Vtb3ZlJykge1xuICAgIGVsZW1lbnRzID0gZ2V0RWxlbWVudHMoc3RhdGUsIGV2ZW50LCBvcHRpb25zLmludGVyYWN0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICBlbGVtZW50cyA9IFtdO1xuICB9XG5cbiAgY29uc3QgcHJldmlvdXMgPSBzdGF0ZS5ob3ZlcmVkO1xuICBzdGF0ZS5ob3ZlcmVkID0gZWxlbWVudHM7XG5cbiAgY29uc3QgY29udGV4dCA9IHtzdGF0ZSwgZXZlbnR9O1xuICBsZXQgY2hhbmdlZCA9IGRpc3BhdGNoTW92ZUV2ZW50cyhjb250ZXh0LCAnbGVhdmUnLCBwcmV2aW91cywgZWxlbWVudHMpO1xuICByZXR1cm4gZGlzcGF0Y2hNb3ZlRXZlbnRzKGNvbnRleHQsICdlbnRlcicsIGVsZW1lbnRzLCBwcmV2aW91cykgfHwgY2hhbmdlZDtcbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hNb3ZlRXZlbnRzKHtzdGF0ZSwgZXZlbnR9LCBob29rLCBlbGVtZW50cywgY2hlY2tFbGVtZW50cykge1xuICBsZXQgY2hhbmdlZDtcbiAgZm9yIChjb25zdCBlbGVtZW50IG9mIGVsZW1lbnRzKSB7XG4gICAgaWYgKGNoZWNrRWxlbWVudHMuaW5kZXhPZihlbGVtZW50KSA8IDApIHtcbiAgICAgIGNoYW5nZWQgPSBkaXNwYXRjaEV2ZW50KGVsZW1lbnQub3B0aW9uc1tob29rXSB8fCBzdGF0ZS5saXN0ZW5lcnNbaG9va10sIGVsZW1lbnQsIGV2ZW50KSB8fCBjaGFuZ2VkO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY2hhbmdlZDtcbn1cblxuZnVuY3Rpb24gaGFuZGxlQ2xpY2tFdmVudHMoc3RhdGUsIGV2ZW50LCBvcHRpb25zKSB7XG4gIGNvbnN0IGxpc3RlbmVycyA9IHN0YXRlLmxpc3RlbmVycztcbiAgY29uc3QgZWxlbWVudHMgPSBnZXRFbGVtZW50cyhzdGF0ZSwgZXZlbnQsIG9wdGlvbnMuaW50ZXJhY3Rpb24pO1xuICBsZXQgY2hhbmdlZDtcbiAgZm9yIChjb25zdCBlbGVtZW50IG9mIGVsZW1lbnRzKSB7XG4gICAgY2hhbmdlZCA9IGRpc3BhdGNoRXZlbnQoZWxlbWVudC5vcHRpb25zLmNsaWNrIHx8IGxpc3RlbmVycy5jbGljaywgZWxlbWVudCwgZXZlbnQpIHx8IGNoYW5nZWQ7XG4gIH1cbiAgcmV0dXJuIGNoYW5nZWQ7XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQoaGFuZGxlciwgZWxlbWVudCwgZXZlbnQpIHtcbiAgcmV0dXJuIGNhbGxiYWNrKGhhbmRsZXIsIFtlbGVtZW50LiRjb250ZXh0LCBldmVudF0pID09PSB0cnVlO1xufVxuXG4vKipcbiAqIEB0eXBlZGVmIHsgaW1wb3J0KFwiY2hhcnQuanNcIikuQ2hhcnQgfSBDaGFydFxuICogQHR5cGVkZWYgeyBpbXBvcnQoJy4uLy4uL3R5cGVzL29wdGlvbnMnKS5Bbm5vdGF0aW9uUGx1Z2luT3B0aW9ucyB9IEFubm90YXRpb25QbHVnaW5PcHRpb25zXG4gKiBAdHlwZWRlZiB7IGltcG9ydCgnLi4vLi4vdHlwZXMvZWxlbWVudCcpLkFubm90YXRpb25FbGVtZW50IH0gQW5ub3RhdGlvbkVsZW1lbnRcbiAqL1xuXG5jb25zdCBlbGVtZW50SG9va3MgPSBbJ2FmdGVyRHJhdycsICdiZWZvcmVEcmF3J107XG5cbi8qKlxuICogQHBhcmFtIHtDaGFydH0gY2hhcnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGF0ZVxuICogQHBhcmFtIHtBbm5vdGF0aW9uUGx1Z2luT3B0aW9uc30gb3B0aW9uc1xuICovXG5mdW5jdGlvbiB1cGRhdGVIb29rcyhjaGFydCwgc3RhdGUsIG9wdGlvbnMpIHtcbiAgY29uc3QgdmlzaWJsZUVsZW1lbnRzID0gc3RhdGUudmlzaWJsZUVsZW1lbnRzO1xuICBzdGF0ZS5ob29rZWQgPSBsb2FkSG9va3Mob3B0aW9ucywgZWxlbWVudEhvb2tzLCBzdGF0ZS5ob29rcyk7XG5cbiAgaWYgKCFzdGF0ZS5ob29rZWQpIHtcbiAgICB2aXNpYmxlRWxlbWVudHMuZm9yRWFjaChzY29wZSA9PiB7XG4gICAgICBpZiAoIXN0YXRlLmhvb2tlZCkge1xuICAgICAgICBlbGVtZW50SG9va3MuZm9yRWFjaChob29rID0+IHtcbiAgICAgICAgICBpZiAoaXNGdW5jdGlvbihzY29wZS5vcHRpb25zW2hvb2tdKSkge1xuICAgICAgICAgICAgc3RhdGUuaG9va2VkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3R9IHN0YXRlXG4gKiBAcGFyYW0ge0Fubm90YXRpb25FbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gaG9va1xuICovXG5mdW5jdGlvbiBpbnZva2VIb29rKHN0YXRlLCBlbGVtZW50LCBob29rKSB7XG4gIGlmIChzdGF0ZS5ob29rZWQpIHtcbiAgICBjb25zdCBjYWxsYmFja0hvb2sgPSBlbGVtZW50Lm9wdGlvbnNbaG9va10gfHwgc3RhdGUuaG9va3NbaG9va107XG4gICAgcmV0dXJuIGNhbGxiYWNrKGNhbGxiYWNrSG9vaywgW2VsZW1lbnQuJGNvbnRleHRdKTtcbiAgfVxufVxuXG4vKipcbiAqIEB0eXBlZGVmIHsgaW1wb3J0KFwiY2hhcnQuanNcIikuQ2hhcnQgfSBDaGFydFxuICogQHR5cGVkZWYgeyBpbXBvcnQoXCJjaGFydC5qc1wiKS5TY2FsZSB9IFNjYWxlXG4gKiBAdHlwZWRlZiB7IGltcG9ydCgnLi4vLi4vdHlwZXMvb3B0aW9ucycpLkNvcmVBbm5vdGF0aW9uT3B0aW9ucyB9IENvcmVBbm5vdGF0aW9uT3B0aW9uc1xuICovXG5cbi8qKlxuICogQHBhcmFtIHtDaGFydH0gY2hhcnRcbiAqIEBwYXJhbSB7U2NhbGV9IHNjYWxlXG4gKiBAcGFyYW0ge0NvcmVBbm5vdGF0aW9uT3B0aW9uc1tdfSBhbm5vdGF0aW9uc1xuICovXG5mdW5jdGlvbiBhZGp1c3RTY2FsZVJhbmdlKGNoYXJ0LCBzY2FsZSwgYW5ub3RhdGlvbnMpIHtcbiAgY29uc3QgcmFuZ2UgPSBnZXRTY2FsZUxpbWl0cyhjaGFydC5zY2FsZXMsIHNjYWxlLCBhbm5vdGF0aW9ucyk7XG4gIGxldCBjaGFuZ2VkID0gY2hhbmdlU2NhbGVMaW1pdChzY2FsZSwgcmFuZ2UsICdtaW4nLCAnc3VnZ2VzdGVkTWluJyk7XG4gIGNoYW5nZWQgPSBjaGFuZ2VTY2FsZUxpbWl0KHNjYWxlLCByYW5nZSwgJ21heCcsICdzdWdnZXN0ZWRNYXgnKSB8fCBjaGFuZ2VkO1xuICBpZiAoY2hhbmdlZCAmJiBpc0Z1bmN0aW9uKHNjYWxlLmhhbmRsZVRpY2tSYW5nZU9wdGlvbnMpKSB7XG4gICAgc2NhbGUuaGFuZGxlVGlja1JhbmdlT3B0aW9ucygpO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtDb3JlQW5ub3RhdGlvbk9wdGlvbnNbXX0gYW5ub3RhdGlvbnNcbiAqIEBwYXJhbSB7eyBba2V5OiBzdHJpbmddOiBTY2FsZSB9fSBzY2FsZXNcbiAqL1xuZnVuY3Rpb24gdmVyaWZ5U2NhbGVPcHRpb25zKGFubm90YXRpb25zLCBzY2FsZXMpIHtcbiAgZm9yIChjb25zdCBhbm5vdGF0aW9uIG9mIGFubm90YXRpb25zKSB7XG4gICAgdmVyaWZ5U2NhbGVJRHMoYW5ub3RhdGlvbiwgc2NhbGVzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGFuZ2VTY2FsZUxpbWl0KHNjYWxlLCByYW5nZSwgbGltaXQsIHN1Z2dlc3RlZExpbWl0KSB7XG4gIGlmIChpc0Zpbml0ZShyYW5nZVtsaW1pdF0pICYmICFzY2FsZUxpbWl0RGVmaW5lZChzY2FsZS5vcHRpb25zLCBsaW1pdCwgc3VnZ2VzdGVkTGltaXQpKSB7XG4gICAgY29uc3QgY2hhbmdlZCA9IHNjYWxlW2xpbWl0XSAhPT0gcmFuZ2VbbGltaXRdO1xuICAgIHNjYWxlW2xpbWl0XSA9IHJhbmdlW2xpbWl0XTtcbiAgICByZXR1cm4gY2hhbmdlZDtcbiAgfVxufVxuXG5mdW5jdGlvbiBzY2FsZUxpbWl0RGVmaW5lZChzY2FsZU9wdGlvbnMsIGxpbWl0LCBzdWdnZXN0ZWRMaW1pdCkge1xuICByZXR1cm4gZGVmaW5lZChzY2FsZU9wdGlvbnNbbGltaXRdKSB8fCBkZWZpbmVkKHNjYWxlT3B0aW9uc1tzdWdnZXN0ZWRMaW1pdF0pO1xufVxuXG5mdW5jdGlvbiB2ZXJpZnlTY2FsZUlEcyhhbm5vdGF0aW9uLCBzY2FsZXMpIHtcbiAgZm9yIChjb25zdCBrZXkgb2YgWydzY2FsZUlEJywgJ3hTY2FsZUlEJywgJ3lTY2FsZUlEJ10pIHtcbiAgICBjb25zdCBzY2FsZUlEID0gcmV0cmlldmVTY2FsZUlEKHNjYWxlcywgYW5ub3RhdGlvbiwga2V5KTtcbiAgICBpZiAoc2NhbGVJRCAmJiAhc2NhbGVzW3NjYWxlSURdICYmIHZlcmlmeVByb3BlcnRpZXMoYW5ub3RhdGlvbiwga2V5KSkge1xuICAgICAgY29uc29sZS53YXJuKGBObyBzY2FsZSBmb3VuZCB3aXRoIGlkICcke3NjYWxlSUR9JyBmb3IgYW5ub3RhdGlvbiAnJHthbm5vdGF0aW9uLmlkfSdgKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdmVyaWZ5UHJvcGVydGllcyhhbm5vdGF0aW9uLCBrZXkpIHtcbiAgaWYgKGtleSA9PT0gJ3NjYWxlSUQnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgY29uc3QgYXhpcyA9IGtleS5jaGFyQXQoMCk7XG4gIGZvciAoY29uc3QgcHJvcCBvZiBbJ01pbicsICdNYXgnLCAnVmFsdWUnXSkge1xuICAgIGlmIChkZWZpbmVkKGFubm90YXRpb25bYXhpcyArIHByb3BdKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ2V0U2NhbGVMaW1pdHMoc2NhbGVzLCBzY2FsZSwgYW5ub3RhdGlvbnMpIHtcbiAgY29uc3QgYXhpcyA9IHNjYWxlLmF4aXM7XG4gIGNvbnN0IHNjYWxlSUQgPSBzY2FsZS5pZDtcbiAgY29uc3Qgc2NhbGVJRE9wdGlvbiA9IGF4aXMgKyAnU2NhbGVJRCc7XG4gIGNvbnN0IGxpbWl0cyA9IHtcbiAgICBtaW46IHZhbHVlT3JEZWZhdWx0KHNjYWxlLm1pbiwgTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZKSxcbiAgICBtYXg6IHZhbHVlT3JEZWZhdWx0KHNjYWxlLm1heCwgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKVxuICB9O1xuICBmb3IgKGNvbnN0IGFubm90YXRpb24gb2YgYW5ub3RhdGlvbnMpIHtcbiAgICBpZiAoYW5ub3RhdGlvbi5zY2FsZUlEID09PSBzY2FsZUlEKSB7XG4gICAgICB1cGRhdGVMaW1pdHMoYW5ub3RhdGlvbiwgc2NhbGUsIFsndmFsdWUnLCAnZW5kVmFsdWUnXSwgbGltaXRzKTtcbiAgICB9IGVsc2UgaWYgKHJldHJpZXZlU2NhbGVJRChzY2FsZXMsIGFubm90YXRpb24sIHNjYWxlSURPcHRpb24pID09PSBzY2FsZUlEKSB7XG4gICAgICB1cGRhdGVMaW1pdHMoYW5ub3RhdGlvbiwgc2NhbGUsIFtheGlzICsgJ01pbicsIGF4aXMgKyAnTWF4JywgYXhpcyArICdWYWx1ZSddLCBsaW1pdHMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbGltaXRzO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW1pdHMoYW5ub3RhdGlvbiwgc2NhbGUsIHByb3BzLCBsaW1pdHMpIHtcbiAgZm9yIChjb25zdCBwcm9wIG9mIHByb3BzKSB7XG4gICAgY29uc3QgcmF3ID0gYW5ub3RhdGlvbltwcm9wXTtcbiAgICBpZiAoZGVmaW5lZChyYXcpKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHNjYWxlLnBhcnNlKHJhdyk7XG4gICAgICBsaW1pdHMubWluID0gTWF0aC5taW4obGltaXRzLm1pbiwgdmFsdWUpO1xuICAgICAgbGltaXRzLm1heCA9IE1hdGgubWF4KGxpbWl0cy5tYXgsIHZhbHVlKTtcbiAgICB9XG4gIH1cbn1cblxuY2xhc3MgQm94QW5ub3RhdGlvbiBleHRlbmRzIEVsZW1lbnQge1xuXG4gIGluUmFuZ2UobW91c2VYLCBtb3VzZVksIGF4aXMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICBjb25zdCB7eCwgeX0gPSByb3RhdGVkKHt4OiBtb3VzZVgsIHk6IG1vdXNlWX0sIHRoaXMuZ2V0Q2VudGVyUG9pbnQodXNlRmluYWxQb3NpdGlvbiksIHRvUmFkaWFucygtdGhpcy5vcHRpb25zLnJvdGF0aW9uKSk7XG4gICAgcmV0dXJuIGluQm94UmFuZ2Uoe3gsIHl9LCB0aGlzLmdldFByb3BzKFsneCcsICd5JywgJ3gyJywgJ3kyJ10sIHVzZUZpbmFsUG9zaXRpb24pLCBheGlzLCB0aGlzLm9wdGlvbnMuYm9yZGVyV2lkdGgpO1xuICB9XG5cbiAgZ2V0Q2VudGVyUG9pbnQodXNlRmluYWxQb3NpdGlvbikge1xuICAgIHJldHVybiBnZXRFbGVtZW50Q2VudGVyUG9pbnQodGhpcywgdXNlRmluYWxQb3NpdGlvbik7XG4gIH1cblxuICBkcmF3KGN0eCkge1xuICAgIGN0eC5zYXZlKCk7XG4gICAgdHJhbnNsYXRlKGN0eCwgdGhpcy5nZXRDZW50ZXJQb2ludCgpLCB0aGlzLm9wdGlvbnMucm90YXRpb24pO1xuICAgIGRyYXdCb3goY3R4LCB0aGlzLCB0aGlzLm9wdGlvbnMpO1xuICAgIGN0eC5yZXN0b3JlKCk7XG4gIH1cblxuICBnZXQgbGFiZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudHMgJiYgdGhpcy5lbGVtZW50c1swXTtcbiAgfVxuXG4gIHJlc29sdmVFbGVtZW50UHJvcGVydGllcyhjaGFydCwgb3B0aW9ucykge1xuICAgIHJldHVybiByZXNvbHZlQm94QW5kTGFiZWxQcm9wZXJ0aWVzKGNoYXJ0LCBvcHRpb25zKTtcbiAgfVxufVxuXG5Cb3hBbm5vdGF0aW9uLmlkID0gJ2JveEFubm90YXRpb24nO1xuXG5Cb3hBbm5vdGF0aW9uLmRlZmF1bHRzID0ge1xuICBhZGp1c3RTY2FsZVJhbmdlOiB0cnVlLFxuICBiYWNrZ3JvdW5kU2hhZG93Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gIGJvcmRlckNhcFN0eWxlOiAnYnV0dCcsXG4gIGJvcmRlckRhc2g6IFtdLFxuICBib3JkZXJEYXNoT2Zmc2V0OiAwLFxuICBib3JkZXJKb2luU3R5bGU6ICdtaXRlcicsXG4gIGJvcmRlclJhZGl1czogMCxcbiAgYm9yZGVyU2hhZG93Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gIGJvcmRlcldpZHRoOiAxLFxuICBkaXNwbGF5OiB0cnVlLFxuICBpbml0OiB1bmRlZmluZWQsXG4gIGxhYmVsOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIGJvcmRlcldpZHRoOiAwLFxuICAgIGNhbGxvdXQ6IHtcbiAgICAgIGRpc3BsYXk6IGZhbHNlXG4gICAgfSxcbiAgICBjb2xvcjogJ2JsYWNrJyxcbiAgICBjb250ZW50OiBudWxsLFxuICAgIGRpc3BsYXk6IGZhbHNlLFxuICAgIGRyYXdUaW1lOiB1bmRlZmluZWQsXG4gICAgZm9udDoge1xuICAgICAgZmFtaWx5OiB1bmRlZmluZWQsXG4gICAgICBsaW5lSGVpZ2h0OiB1bmRlZmluZWQsXG4gICAgICBzaXplOiB1bmRlZmluZWQsXG4gICAgICBzdHlsZTogdW5kZWZpbmVkLFxuICAgICAgd2VpZ2h0OiAnYm9sZCdcbiAgICB9LFxuICAgIGhlaWdodDogdW5kZWZpbmVkLFxuICAgIG9wYWNpdHk6IHVuZGVmaW5lZCxcbiAgICBwYWRkaW5nOiA2LFxuICAgIHBvc2l0aW9uOiAnY2VudGVyJyxcbiAgICByb3RhdGlvbjogdW5kZWZpbmVkLFxuICAgIHRleHRBbGlnbjogJ3N0YXJ0JyxcbiAgICB0ZXh0U3Ryb2tlQ29sb3I6IHVuZGVmaW5lZCxcbiAgICB0ZXh0U3Ryb2tlV2lkdGg6IDAsXG4gICAgd2lkdGg6IHVuZGVmaW5lZCxcbiAgICB4QWRqdXN0OiAwLFxuICAgIHlBZGp1c3Q6IDAsXG4gICAgejogdW5kZWZpbmVkXG4gIH0sXG4gIHJvdGF0aW9uOiAwLFxuICBzaGFkb3dCbHVyOiAwLFxuICBzaGFkb3dPZmZzZXRYOiAwLFxuICBzaGFkb3dPZmZzZXRZOiAwLFxuICB4TWF4OiB1bmRlZmluZWQsXG4gIHhNaW46IHVuZGVmaW5lZCxcbiAgeFNjYWxlSUQ6IHVuZGVmaW5lZCxcbiAgeU1heDogdW5kZWZpbmVkLFxuICB5TWluOiB1bmRlZmluZWQsXG4gIHlTY2FsZUlEOiB1bmRlZmluZWQsXG4gIHo6IDBcbn07XG5cbkJveEFubm90YXRpb24uZGVmYXVsdFJvdXRlcyA9IHtcbiAgYm9yZGVyQ29sb3I6ICdjb2xvcicsXG4gIGJhY2tncm91bmRDb2xvcjogJ2NvbG9yJ1xufTtcblxuQm94QW5ub3RhdGlvbi5kZXNjcmlwdG9ycyA9IHtcbiAgbGFiZWw6IHtcbiAgICBfZmFsbGJhY2s6IHRydWVcbiAgfVxufTtcblxuY29uc3QgcG9zaXRpb25zID0gWydsZWZ0JywgJ2JvdHRvbScsICd0b3AnLCAncmlnaHQnXTtcblxuY2xhc3MgTGFiZWxBbm5vdGF0aW9uIGV4dGVuZHMgRWxlbWVudCB7XG5cbiAgaW5SYW5nZShtb3VzZVgsIG1vdXNlWSwgYXhpcywgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIGNvbnN0IHt4LCB5fSA9IHJvdGF0ZWQoe3g6IG1vdXNlWCwgeTogbW91c2VZfSwgdGhpcy5nZXRDZW50ZXJQb2ludCh1c2VGaW5hbFBvc2l0aW9uKSwgdG9SYWRpYW5zKC10aGlzLnJvdGF0aW9uKSk7XG4gICAgcmV0dXJuIGluQm94UmFuZ2Uoe3gsIHl9LCB0aGlzLmdldFByb3BzKFsneCcsICd5JywgJ3gyJywgJ3kyJ10sIHVzZUZpbmFsUG9zaXRpb24pLCBheGlzLCB0aGlzLm9wdGlvbnMuYm9yZGVyV2lkdGgpO1xuICB9XG5cbiAgZ2V0Q2VudGVyUG9pbnQodXNlRmluYWxQb3NpdGlvbikge1xuICAgIHJldHVybiBnZXRFbGVtZW50Q2VudGVyUG9pbnQodGhpcywgdXNlRmluYWxQb3NpdGlvbik7XG4gIH1cblxuICBkcmF3KGN0eCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgdmlzaWJsZSA9ICFkZWZpbmVkKHRoaXMuX3Zpc2libGUpIHx8IHRoaXMuX3Zpc2libGU7XG4gICAgaWYgKCFvcHRpb25zLmRpc3BsYXkgfHwgIW9wdGlvbnMuY29udGVudCB8fCAhdmlzaWJsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjdHguc2F2ZSgpO1xuICAgIHRyYW5zbGF0ZShjdHgsIHRoaXMuZ2V0Q2VudGVyUG9pbnQoKSwgdGhpcy5yb3RhdGlvbik7XG4gICAgZHJhd0NhbGxvdXQoY3R4LCB0aGlzKTtcbiAgICBkcmF3Qm94KGN0eCwgdGhpcywgb3B0aW9ucyk7XG4gICAgZHJhd0xhYmVsKGN0eCwgZ2V0TGFiZWxTaXplKHRoaXMpLCBvcHRpb25zKTtcbiAgICBjdHgucmVzdG9yZSgpO1xuICB9XG5cbiAgcmVzb2x2ZUVsZW1lbnRQcm9wZXJ0aWVzKGNoYXJ0LCBvcHRpb25zKSB7XG4gICAgbGV0IHBvaW50O1xuICAgIGlmICghaXNCb3VuZFRvUG9pbnQob3B0aW9ucykpIHtcbiAgICAgIGNvbnN0IHtjZW50ZXJYLCBjZW50ZXJZfSA9IHJlc29sdmVCb3hQcm9wZXJ0aWVzKGNoYXJ0LCBvcHRpb25zKTtcbiAgICAgIHBvaW50ID0ge3g6IGNlbnRlclgsIHk6IGNlbnRlcll9O1xuICAgIH0gZWxzZSB7XG4gICAgICBwb2ludCA9IGdldENoYXJ0UG9pbnQoY2hhcnQsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKG9wdGlvbnMucGFkZGluZyk7XG4gICAgY29uc3QgbGFiZWxTaXplID0gbWVhc3VyZUxhYmVsU2l6ZShjaGFydC5jdHgsIG9wdGlvbnMpO1xuICAgIGNvbnN0IGJveFNpemUgPSBtZWFzdXJlUmVjdChwb2ludCwgbGFiZWxTaXplLCBvcHRpb25zLCBwYWRkaW5nKTtcbiAgICByZXR1cm4ge1xuICAgICAgaW5pdFByb3BlcnRpZXM6IGluaXRBbmltYXRpb25Qcm9wZXJ0aWVzKGNoYXJ0LCBib3hTaXplLCBvcHRpb25zKSxcbiAgICAgIHBvaW50WDogcG9pbnQueCxcbiAgICAgIHBvaW50WTogcG9pbnQueSxcbiAgICAgIC4uLmJveFNpemUsXG4gICAgICByb3RhdGlvbjogb3B0aW9ucy5yb3RhdGlvblxuICAgIH07XG4gIH1cbn1cblxuTGFiZWxBbm5vdGF0aW9uLmlkID0gJ2xhYmVsQW5ub3RhdGlvbic7XG5cbkxhYmVsQW5ub3RhdGlvbi5kZWZhdWx0cyA9IHtcbiAgYWRqdXN0U2NhbGVSYW5nZTogdHJ1ZSxcbiAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICBiYWNrZ3JvdW5kU2hhZG93Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gIGJvcmRlckNhcFN0eWxlOiAnYnV0dCcsXG4gIGJvcmRlckRhc2g6IFtdLFxuICBib3JkZXJEYXNoT2Zmc2V0OiAwLFxuICBib3JkZXJKb2luU3R5bGU6ICdtaXRlcicsXG4gIGJvcmRlclJhZGl1czogMCxcbiAgYm9yZGVyU2hhZG93Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gIGJvcmRlcldpZHRoOiAwLFxuICBjYWxsb3V0OiB7XG4gICAgYm9yZGVyQ2FwU3R5bGU6ICdidXR0JyxcbiAgICBib3JkZXJDb2xvcjogdW5kZWZpbmVkLFxuICAgIGJvcmRlckRhc2g6IFtdLFxuICAgIGJvcmRlckRhc2hPZmZzZXQ6IDAsXG4gICAgYm9yZGVySm9pblN0eWxlOiAnbWl0ZXInLFxuICAgIGJvcmRlcldpZHRoOiAxLFxuICAgIGRpc3BsYXk6IGZhbHNlLFxuICAgIG1hcmdpbjogNSxcbiAgICBwb3NpdGlvbjogJ2F1dG8nLFxuICAgIHNpZGU6IDUsXG4gICAgc3RhcnQ6ICc1MCUnLFxuICB9LFxuICBjb2xvcjogJ2JsYWNrJyxcbiAgY29udGVudDogbnVsbCxcbiAgZGlzcGxheTogdHJ1ZSxcbiAgZm9udDoge1xuICAgIGZhbWlseTogdW5kZWZpbmVkLFxuICAgIGxpbmVIZWlnaHQ6IHVuZGVmaW5lZCxcbiAgICBzaXplOiB1bmRlZmluZWQsXG4gICAgc3R5bGU6IHVuZGVmaW5lZCxcbiAgICB3ZWlnaHQ6IHVuZGVmaW5lZFxuICB9LFxuICBoZWlnaHQ6IHVuZGVmaW5lZCxcbiAgaW5pdDogdW5kZWZpbmVkLFxuICBvcGFjaXR5OiB1bmRlZmluZWQsXG4gIHBhZGRpbmc6IDYsXG4gIHBvc2l0aW9uOiAnY2VudGVyJyxcbiAgcm90YXRpb246IDAsXG4gIHNoYWRvd0JsdXI6IDAsXG4gIHNoYWRvd09mZnNldFg6IDAsXG4gIHNoYWRvd09mZnNldFk6IDAsXG4gIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gIHRleHRTdHJva2VDb2xvcjogdW5kZWZpbmVkLFxuICB0ZXh0U3Ryb2tlV2lkdGg6IDAsXG4gIHdpZHRoOiB1bmRlZmluZWQsXG4gIHhBZGp1c3Q6IDAsXG4gIHhNYXg6IHVuZGVmaW5lZCxcbiAgeE1pbjogdW5kZWZpbmVkLFxuICB4U2NhbGVJRDogdW5kZWZpbmVkLFxuICB4VmFsdWU6IHVuZGVmaW5lZCxcbiAgeUFkanVzdDogMCxcbiAgeU1heDogdW5kZWZpbmVkLFxuICB5TWluOiB1bmRlZmluZWQsXG4gIHlTY2FsZUlEOiB1bmRlZmluZWQsXG4gIHlWYWx1ZTogdW5kZWZpbmVkLFxuICB6OiAwXG59O1xuXG5MYWJlbEFubm90YXRpb24uZGVmYXVsdFJvdXRlcyA9IHtcbiAgYm9yZGVyQ29sb3I6ICdjb2xvcidcbn07XG5cbmZ1bmN0aW9uIG1lYXN1cmVSZWN0KHBvaW50LCBzaXplLCBvcHRpb25zLCBwYWRkaW5nKSB7XG4gIGNvbnN0IHdpZHRoID0gc2l6ZS53aWR0aCArIHBhZGRpbmcud2lkdGggKyBvcHRpb25zLmJvcmRlcldpZHRoO1xuICBjb25zdCBoZWlnaHQgPSBzaXplLmhlaWdodCArIHBhZGRpbmcuaGVpZ2h0ICsgb3B0aW9ucy5ib3JkZXJXaWR0aDtcbiAgY29uc3QgcG9zaXRpb24gPSB0b1Bvc2l0aW9uKG9wdGlvbnMucG9zaXRpb24sICdjZW50ZXInKTtcbiAgY29uc3QgeCA9IGNhbGN1bGF0ZVBvc2l0aW9uKHBvaW50LngsIHdpZHRoLCBvcHRpb25zLnhBZGp1c3QsIHBvc2l0aW9uLngpO1xuICBjb25zdCB5ID0gY2FsY3VsYXRlUG9zaXRpb24ocG9pbnQueSwgaGVpZ2h0LCBvcHRpb25zLnlBZGp1c3QsIHBvc2l0aW9uLnkpO1xuXG4gIHJldHVybiB7XG4gICAgeCxcbiAgICB5LFxuICAgIHgyOiB4ICsgd2lkdGgsXG4gICAgeTI6IHkgKyBoZWlnaHQsXG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIGNlbnRlclg6IHggKyB3aWR0aCAvIDIsXG4gICAgY2VudGVyWTogeSArIGhlaWdodCAvIDJcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlUG9zaXRpb24oc3RhcnQsIHNpemUsIGFkanVzdCA9IDAsIHBvc2l0aW9uKSB7XG4gIHJldHVybiBzdGFydCAtIGdldFJlbGF0aXZlUG9zaXRpb24oc2l6ZSwgcG9zaXRpb24pICsgYWRqdXN0O1xufVxuXG5mdW5jdGlvbiBkcmF3Q2FsbG91dChjdHgsIGVsZW1lbnQpIHtcbiAgY29uc3Qge3BvaW50WCwgcG9pbnRZLCBvcHRpb25zfSA9IGVsZW1lbnQ7XG4gIGNvbnN0IGNhbGxvdXQgPSBvcHRpb25zLmNhbGxvdXQ7XG4gIGNvbnN0IGNhbGxvdXRQb3NpdGlvbiA9IGNhbGxvdXQgJiYgY2FsbG91dC5kaXNwbGF5ICYmIHJlc29sdmVDYWxsb3V0UG9zaXRpb24oZWxlbWVudCwgY2FsbG91dCk7XG4gIGlmICghY2FsbG91dFBvc2l0aW9uIHx8IGlzUG9pbnRJblJhbmdlKGVsZW1lbnQsIGNhbGxvdXQsIGNhbGxvdXRQb3NpdGlvbikpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjdHguc2F2ZSgpO1xuICBjdHguYmVnaW5QYXRoKCk7XG4gIGNvbnN0IHN0cm9rZSA9IHNldEJvcmRlclN0eWxlKGN0eCwgY2FsbG91dCk7XG4gIGlmICghc3Ryb2tlKSB7XG4gICAgcmV0dXJuIGN0eC5yZXN0b3JlKCk7XG4gIH1cbiAgY29uc3Qge3NlcGFyYXRvclN0YXJ0LCBzZXBhcmF0b3JFbmR9ID0gZ2V0Q2FsbG91dFNlcGFyYXRvckNvb3JkKGVsZW1lbnQsIGNhbGxvdXRQb3NpdGlvbik7XG4gIGNvbnN0IHtzaWRlU3RhcnQsIHNpZGVFbmR9ID0gZ2V0Q2FsbG91dFNpZGVDb29yZChlbGVtZW50LCBjYWxsb3V0UG9zaXRpb24sIHNlcGFyYXRvclN0YXJ0KTtcbiAgaWYgKGNhbGxvdXQubWFyZ2luID4gMCB8fCBvcHRpb25zLmJvcmRlcldpZHRoID09PSAwKSB7XG4gICAgY3R4Lm1vdmVUbyhzZXBhcmF0b3JTdGFydC54LCBzZXBhcmF0b3JTdGFydC55KTtcbiAgICBjdHgubGluZVRvKHNlcGFyYXRvckVuZC54LCBzZXBhcmF0b3JFbmQueSk7XG4gIH1cbiAgY3R4Lm1vdmVUbyhzaWRlU3RhcnQueCwgc2lkZVN0YXJ0LnkpO1xuICBjdHgubGluZVRvKHNpZGVFbmQueCwgc2lkZUVuZC55KTtcbiAgY29uc3Qgcm90YXRlZFBvaW50ID0gcm90YXRlZCh7eDogcG9pbnRYLCB5OiBwb2ludFl9LCBlbGVtZW50LmdldENlbnRlclBvaW50KCksIHRvUmFkaWFucygtZWxlbWVudC5yb3RhdGlvbikpO1xuICBjdHgubGluZVRvKHJvdGF0ZWRQb2ludC54LCByb3RhdGVkUG9pbnQueSk7XG4gIGN0eC5zdHJva2UoKTtcbiAgY3R4LnJlc3RvcmUoKTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2FsbG91dFNlcGFyYXRvckNvb3JkKGVsZW1lbnQsIHBvc2l0aW9uKSB7XG4gIGNvbnN0IHt4LCB5LCB4MiwgeTJ9ID0gZWxlbWVudDtcbiAgY29uc3QgYWRqdXN0ID0gZ2V0Q2FsbG91dFNlcGFyYXRvckFkanVzdChlbGVtZW50LCBwb3NpdGlvbik7XG4gIGxldCBzZXBhcmF0b3JTdGFydCwgc2VwYXJhdG9yRW5kO1xuICBpZiAocG9zaXRpb24gPT09ICdsZWZ0JyB8fCBwb3NpdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgIHNlcGFyYXRvclN0YXJ0ID0ge3g6IHggKyBhZGp1c3QsIHl9O1xuICAgIHNlcGFyYXRvckVuZCA9IHt4OiBzZXBhcmF0b3JTdGFydC54LCB5OiB5Mn07XG4gIH0gZWxzZSB7XG4gICAgLy8gIHBvc2l0aW9uICd0b3AnIG9yICdib3R0b20nXG4gICAgc2VwYXJhdG9yU3RhcnQgPSB7eCwgeTogeSArIGFkanVzdH07XG4gICAgc2VwYXJhdG9yRW5kID0ge3g6IHgyLCB5OiBzZXBhcmF0b3JTdGFydC55fTtcbiAgfVxuICByZXR1cm4ge3NlcGFyYXRvclN0YXJ0LCBzZXBhcmF0b3JFbmR9O1xufVxuXG5mdW5jdGlvbiBnZXRDYWxsb3V0U2VwYXJhdG9yQWRqdXN0KGVsZW1lbnQsIHBvc2l0aW9uKSB7XG4gIGNvbnN0IHt3aWR0aCwgaGVpZ2h0LCBvcHRpb25zfSA9IGVsZW1lbnQ7XG4gIGNvbnN0IGFkanVzdCA9IG9wdGlvbnMuY2FsbG91dC5tYXJnaW4gKyBvcHRpb25zLmJvcmRlcldpZHRoIC8gMjtcbiAgaWYgKHBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgcmV0dXJuIHdpZHRoICsgYWRqdXN0O1xuICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAnYm90dG9tJykge1xuICAgIHJldHVybiBoZWlnaHQgKyBhZGp1c3Q7XG4gIH1cbiAgcmV0dXJuIC1hZGp1c3Q7XG59XG5cbmZ1bmN0aW9uIGdldENhbGxvdXRTaWRlQ29vcmQoZWxlbWVudCwgcG9zaXRpb24sIHNlcGFyYXRvclN0YXJ0KSB7XG4gIGNvbnN0IHt5LCB3aWR0aCwgaGVpZ2h0LCBvcHRpb25zfSA9IGVsZW1lbnQ7XG4gIGNvbnN0IHN0YXJ0ID0gb3B0aW9ucy5jYWxsb3V0LnN0YXJ0O1xuICBjb25zdCBzaWRlID0gZ2V0Q2FsbG91dFNpZGVBZGp1c3QocG9zaXRpb24sIG9wdGlvbnMuY2FsbG91dCk7XG4gIGxldCBzaWRlU3RhcnQsIHNpZGVFbmQ7XG4gIGlmIChwb3NpdGlvbiA9PT0gJ2xlZnQnIHx8IHBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgc2lkZVN0YXJ0ID0ge3g6IHNlcGFyYXRvclN0YXJ0LngsIHk6IHkgKyBnZXRTaXplKGhlaWdodCwgc3RhcnQpfTtcbiAgICBzaWRlRW5kID0ge3g6IHNpZGVTdGFydC54ICsgc2lkZSwgeTogc2lkZVN0YXJ0Lnl9O1xuICB9IGVsc2Uge1xuICAgIC8vICBwb3NpdGlvbiAndG9wJyBvciAnYm90dG9tJ1xuICAgIHNpZGVTdGFydCA9IHt4OiBzZXBhcmF0b3JTdGFydC54ICsgZ2V0U2l6ZSh3aWR0aCwgc3RhcnQpLCB5OiBzZXBhcmF0b3JTdGFydC55fTtcbiAgICBzaWRlRW5kID0ge3g6IHNpZGVTdGFydC54LCB5OiBzaWRlU3RhcnQueSArIHNpZGV9O1xuICB9XG4gIHJldHVybiB7c2lkZVN0YXJ0LCBzaWRlRW5kfTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2FsbG91dFNpZGVBZGp1c3QocG9zaXRpb24sIG9wdGlvbnMpIHtcbiAgY29uc3Qgc2lkZSA9IG9wdGlvbnMuc2lkZTtcbiAgaWYgKHBvc2l0aW9uID09PSAnbGVmdCcgfHwgcG9zaXRpb24gPT09ICd0b3AnKSB7XG4gICAgcmV0dXJuIC1zaWRlO1xuICB9XG4gIHJldHVybiBzaWRlO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlQ2FsbG91dFBvc2l0aW9uKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgY29uc3QgcG9zaXRpb24gPSBvcHRpb25zLnBvc2l0aW9uO1xuICBpZiAocG9zaXRpb25zLmluY2x1ZGVzKHBvc2l0aW9uKSkge1xuICAgIHJldHVybiBwb3NpdGlvbjtcbiAgfVxuICByZXR1cm4gcmVzb2x2ZUNhbGxvdXRBdXRvUG9zaXRpb24oZWxlbWVudCwgb3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVDYWxsb3V0QXV0b1Bvc2l0aW9uKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgY29uc3Qge3gsIHksIHgyLCB5Miwgd2lkdGgsIGhlaWdodCwgcG9pbnRYLCBwb2ludFksIGNlbnRlclgsIGNlbnRlclksIHJvdGF0aW9ufSA9IGVsZW1lbnQ7XG4gIGNvbnN0IGNlbnRlciA9IHt4OiBjZW50ZXJYLCB5OiBjZW50ZXJZfTtcbiAgY29uc3Qgc3RhcnQgPSBvcHRpb25zLnN0YXJ0O1xuICBjb25zdCB4QWRqdXN0ID0gZ2V0U2l6ZSh3aWR0aCwgc3RhcnQpO1xuICBjb25zdCB5QWRqdXN0ID0gZ2V0U2l6ZShoZWlnaHQsIHN0YXJ0KTtcbiAgY29uc3QgeFBvaW50cyA9IFt4LCB4ICsgeEFkanVzdCwgeCArIHhBZGp1c3QsIHgyXTtcbiAgY29uc3QgeVBvaW50cyA9IFt5ICsgeUFkanVzdCwgeTIsIHksIHkyXTtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCA0OyBpbmRleCsrKSB7XG4gICAgY29uc3Qgcm90YXRlZFBvaW50ID0gcm90YXRlZCh7eDogeFBvaW50c1tpbmRleF0sIHk6IHlQb2ludHNbaW5kZXhdfSwgY2VudGVyLCB0b1JhZGlhbnMocm90YXRpb24pKTtcbiAgICByZXN1bHQucHVzaCh7XG4gICAgICBwb3NpdGlvbjogcG9zaXRpb25zW2luZGV4XSxcbiAgICAgIGRpc3RhbmNlOiBkaXN0YW5jZUJldHdlZW5Qb2ludHMocm90YXRlZFBvaW50LCB7eDogcG9pbnRYLCB5OiBwb2ludFl9KVxuICAgIH0pO1xuICB9XG4gIHJldHVybiByZXN1bHQuc29ydCgoYSwgYikgPT4gYS5kaXN0YW5jZSAtIGIuZGlzdGFuY2UpWzBdLnBvc2l0aW9uO1xufVxuXG5mdW5jdGlvbiBnZXRMYWJlbFNpemUoe3gsIHksIHdpZHRoLCBoZWlnaHQsIG9wdGlvbnN9KSB7XG4gIGNvbnN0IGhCb3JkZXJXaWR0aCA9IG9wdGlvbnMuYm9yZGVyV2lkdGggLyAyO1xuICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKG9wdGlvbnMucGFkZGluZyk7XG4gIHJldHVybiB7XG4gICAgeDogeCArIHBhZGRpbmcubGVmdCArIGhCb3JkZXJXaWR0aCxcbiAgICB5OiB5ICsgcGFkZGluZy50b3AgKyBoQm9yZGVyV2lkdGgsXG4gICAgd2lkdGg6IHdpZHRoIC0gcGFkZGluZy5sZWZ0IC0gcGFkZGluZy5yaWdodCAtIG9wdGlvbnMuYm9yZGVyV2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHQgLSBwYWRkaW5nLnRvcCAtIHBhZGRpbmcuYm90dG9tIC0gb3B0aW9ucy5ib3JkZXJXaWR0aFxuICB9O1xufVxuXG5mdW5jdGlvbiBpc1BvaW50SW5SYW5nZShlbGVtZW50LCBjYWxsb3V0LCBwb3NpdGlvbikge1xuICBjb25zdCB7cG9pbnRYLCBwb2ludFl9ID0gZWxlbWVudDtcbiAgY29uc3QgbWFyZ2luID0gY2FsbG91dC5tYXJnaW47XG4gIGxldCB4ID0gcG9pbnRYO1xuICBsZXQgeSA9IHBvaW50WTtcbiAgaWYgKHBvc2l0aW9uID09PSAnbGVmdCcpIHtcbiAgICB4ICs9IG1hcmdpbjtcbiAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgIHggLT0gbWFyZ2luO1xuICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAndG9wJykge1xuICAgIHkgKz0gbWFyZ2luO1xuICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAnYm90dG9tJykge1xuICAgIHkgLT0gbWFyZ2luO1xuICB9XG4gIHJldHVybiBlbGVtZW50LmluUmFuZ2UoeCwgeSk7XG59XG5cbmNvbnN0IHBvaW50SW5MaW5lID0gKHAxLCBwMiwgdCkgPT4gKHt4OiBwMS54ICsgdCAqIChwMi54IC0gcDEueCksIHk6IHAxLnkgKyB0ICogKHAyLnkgLSBwMS55KX0pO1xuY29uc3QgaW50ZXJwb2xhdGVYID0gKHksIHAxLCBwMikgPT4gcG9pbnRJbkxpbmUocDEsIHAyLCBNYXRoLmFicygoeSAtIHAxLnkpIC8gKHAyLnkgLSBwMS55KSkpLng7XG5jb25zdCBpbnRlcnBvbGF0ZVkgPSAoeCwgcDEsIHAyKSA9PiBwb2ludEluTGluZShwMSwgcDIsIE1hdGguYWJzKCh4IC0gcDEueCkgLyAocDIueCAtIHAxLngpKSkueTtcbmNvbnN0IHNxciA9IHYgPT4gdiAqIHY7XG5jb25zdCByYW5nZUxpbWl0ID0gKG1vdXNlWCwgbW91c2VZLCB7eCwgeSwgeDIsIHkyfSwgYXhpcykgPT4gYXhpcyA9PT0gJ3knID8ge3N0YXJ0OiBNYXRoLm1pbih5LCB5MiksIGVuZDogTWF0aC5tYXgoeSwgeTIpLCB2YWx1ZTogbW91c2VZfSA6IHtzdGFydDogTWF0aC5taW4oeCwgeDIpLCBlbmQ6IE1hdGgubWF4KHgsIHgyKSwgdmFsdWU6IG1vdXNlWH07XG4vLyBodHRwOi8vd3d3LmluZGVwZW5kZW50LXNvZnR3YXJlLmNvbS9kZXRlcm1pbmluZy1jb29yZGluYXRlcy1vbi1hLWh0bWwtY2FudmFzLWJlemllci1jdXJ2ZS5odG1sXG5jb25zdCBjb29yZEluQ3VydmUgPSAoc3RhcnQsIGNwLCBlbmQsIHQpID0+ICgxIC0gdCkgKiAoMSAtIHQpICogc3RhcnQgKyAyICogKDEgLSB0KSAqIHQgKiBjcCArIHQgKiB0ICogZW5kO1xuY29uc3QgcG9pbnRJbkN1cnZlID0gKHN0YXJ0LCBjcCwgZW5kLCB0KSA9PiAoe3g6IGNvb3JkSW5DdXJ2ZShzdGFydC54LCBjcC54LCBlbmQueCwgdCksIHk6IGNvb3JkSW5DdXJ2ZShzdGFydC55LCBjcC55LCBlbmQueSwgdCl9KTtcbmNvbnN0IGNvb3JkQW5nbGVJbkN1cnZlID0gKHN0YXJ0LCBjcCwgZW5kLCB0KSA9PiAyICogKDEgLSB0KSAqIChjcCAtIHN0YXJ0KSArIDIgKiB0ICogKGVuZCAtIGNwKTtcbmNvbnN0IGFuZ2xlSW5DdXJ2ZSA9IChzdGFydCwgY3AsIGVuZCwgdCkgPT4gLU1hdGguYXRhbjIoY29vcmRBbmdsZUluQ3VydmUoc3RhcnQueCwgY3AueCwgZW5kLngsIHQpLCBjb29yZEFuZ2xlSW5DdXJ2ZShzdGFydC55LCBjcC55LCBlbmQueSwgdCkpICsgMC41ICogUEk7XG5cbmNsYXNzIExpbmVBbm5vdGF0aW9uIGV4dGVuZHMgRWxlbWVudCB7XG5cbiAgaW5SYW5nZShtb3VzZVgsIG1vdXNlWSwgYXhpcywgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIGNvbnN0IGhCb3JkZXJXaWR0aCA9IHRoaXMub3B0aW9ucy5ib3JkZXJXaWR0aCAvIDI7XG4gICAgaWYgKGF4aXMgIT09ICd4JyAmJiBheGlzICE9PSAneScpIHtcbiAgICAgIGNvbnN0IHBvaW50ID0ge21vdXNlWCwgbW91c2VZfTtcbiAgICAgIGNvbnN0IHtwYXRoLCBjdHh9ID0gdGhpcztcbiAgICAgIGlmIChwYXRoKSB7XG4gICAgICAgIHNldEJvcmRlclN0eWxlKGN0eCwgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgY29uc3Qge2NoYXJ0fSA9IHRoaXMuJGNvbnRleHQ7XG4gICAgICAgIGNvbnN0IG14ID0gbW91c2VYICogY2hhcnQuY3VycmVudERldmljZVBpeGVsUmF0aW87XG4gICAgICAgIGNvbnN0IG15ID0gbW91c2VZICogY2hhcnQuY3VycmVudERldmljZVBpeGVsUmF0aW87XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGN0eC5pc1BvaW50SW5TdHJva2UocGF0aCwgbXgsIG15KSB8fCBpc09uTGFiZWwodGhpcywgcG9pbnQsIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgY29uc3QgZXBzaWxvbiA9IHNxcihoQm9yZGVyV2lkdGgpO1xuICAgICAgcmV0dXJuIGludGVyc2VjdHModGhpcywgcG9pbnQsIGVwc2lsb24sIHVzZUZpbmFsUG9zaXRpb24pIHx8IGlzT25MYWJlbCh0aGlzLCBwb2ludCwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgfVxuICAgIHJldHVybiBpbkF4aXNSYW5nZSh0aGlzLCB7bW91c2VYLCBtb3VzZVl9LCBheGlzLCB7aEJvcmRlcldpZHRoLCB1c2VGaW5hbFBvc2l0aW9ufSk7XG4gIH1cblxuICBnZXRDZW50ZXJQb2ludCh1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIGdldEVsZW1lbnRDZW50ZXJQb2ludCh0aGlzLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgfVxuXG4gIGRyYXcoY3R4KSB7XG4gICAgY29uc3Qge3gsIHksIHgyLCB5MiwgY3AsIG9wdGlvbnN9ID0gdGhpcztcblxuICAgIGN0eC5zYXZlKCk7XG4gICAgaWYgKCFzZXRCb3JkZXJTdHlsZShjdHgsIG9wdGlvbnMpKSB7XG4gICAgICAvLyBubyBib3JkZXIgd2lkdGgsIHRoZW4gbGluZSBpcyBub3QgZHJhd25cbiAgICAgIHJldHVybiBjdHgucmVzdG9yZSgpO1xuICAgIH1cbiAgICBzZXRTaGFkb3dTdHlsZShjdHgsIG9wdGlvbnMpO1xuXG4gICAgY29uc3QgbGVuZ3RoID0gTWF0aC5zcXJ0KE1hdGgucG93KHgyIC0geCwgMikgKyBNYXRoLnBvdyh5MiAtIHksIDIpKTtcbiAgICBpZiAob3B0aW9ucy5jdXJ2ZSAmJiBjcCkge1xuICAgICAgZHJhd0N1cnZlKGN0eCwgdGhpcywgY3AsIGxlbmd0aCk7XG4gICAgICByZXR1cm4gY3R4LnJlc3RvcmUoKTtcbiAgICB9XG4gICAgY29uc3Qge3N0YXJ0T3B0cywgZW5kT3B0cywgc3RhcnRBZGp1c3QsIGVuZEFkanVzdH0gPSBnZXRBcnJvd0hlYWRzKHRoaXMpO1xuICAgIGNvbnN0IGFuZ2xlID0gTWF0aC5hdGFuMih5MiAtIHksIHgyIC0geCk7XG4gICAgY3R4LnRyYW5zbGF0ZSh4LCB5KTtcbiAgICBjdHgucm90YXRlKGFuZ2xlKTtcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4Lm1vdmVUbygwICsgc3RhcnRBZGp1c3QsIDApO1xuICAgIGN0eC5saW5lVG8obGVuZ3RoIC0gZW5kQWRqdXN0LCAwKTtcbiAgICBjdHguc2hhZG93Q29sb3IgPSBvcHRpb25zLmJvcmRlclNoYWRvd0NvbG9yO1xuICAgIGN0eC5zdHJva2UoKTtcbiAgICBkcmF3QXJyb3dIZWFkKGN0eCwgMCwgc3RhcnRBZGp1c3QsIHN0YXJ0T3B0cyk7XG4gICAgZHJhd0Fycm93SGVhZChjdHgsIGxlbmd0aCwgLWVuZEFkanVzdCwgZW5kT3B0cyk7XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgfVxuXG4gIGdldCBsYWJlbCgpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50cyAmJiB0aGlzLmVsZW1lbnRzWzBdO1xuICB9XG5cbiAgcmVzb2x2ZUVsZW1lbnRQcm9wZXJ0aWVzKGNoYXJ0LCBvcHRpb25zKSB7XG4gICAgY29uc3QgYXJlYSA9IHJlc29sdmVMaW5lUHJvcGVydGllcyhjaGFydCwgb3B0aW9ucyk7XG4gICAgY29uc3Qge3gsIHksIHgyLCB5Mn0gPSBhcmVhO1xuICAgIGNvbnN0IGluc2lkZSA9IGlzTGluZUluQXJlYShhcmVhLCBjaGFydC5jaGFydEFyZWEpO1xuICAgIGNvbnN0IHByb3BlcnRpZXMgPSBpbnNpZGVcbiAgICAgID8gbGltaXRMaW5lVG9BcmVhKHt4LCB5fSwge3g6IHgyLCB5OiB5Mn0sIGNoYXJ0LmNoYXJ0QXJlYSlcbiAgICAgIDoge3gsIHksIHgyLCB5Miwgd2lkdGg6IE1hdGguYWJzKHgyIC0geCksIGhlaWdodDogTWF0aC5hYnMoeTIgLSB5KX07XG4gICAgcHJvcGVydGllcy5jZW50ZXJYID0gKHgyICsgeCkgLyAyO1xuICAgIHByb3BlcnRpZXMuY2VudGVyWSA9ICh5MiArIHkpIC8gMjtcbiAgICBwcm9wZXJ0aWVzLmluaXRQcm9wZXJ0aWVzID0gaW5pdEFuaW1hdGlvblByb3BlcnRpZXMoY2hhcnQsIHByb3BlcnRpZXMsIG9wdGlvbnMpO1xuICAgIGlmIChvcHRpb25zLmN1cnZlKSB7XG4gICAgICBjb25zdCBwMSA9IHt4OiBwcm9wZXJ0aWVzLngsIHk6IHByb3BlcnRpZXMueX07XG4gICAgICBjb25zdCBwMiA9IHt4OiBwcm9wZXJ0aWVzLngyLCB5OiBwcm9wZXJ0aWVzLnkyfTtcbiAgICAgIHByb3BlcnRpZXMuY3AgPSBnZXRDb250cm9sUG9pbnQocHJvcGVydGllcywgb3B0aW9ucywgZGlzdGFuY2VCZXR3ZWVuUG9pbnRzKHAxLCBwMikpO1xuICAgIH1cbiAgICBjb25zdCBsYWJlbFByb3BlcnRpZXMgPSByZXNvbHZlTGFiZWxFbGVtZW50UHJvcGVydGllcyhjaGFydCwgcHJvcGVydGllcywgb3B0aW9ucy5sYWJlbCk7XG4gICAgLy8gYWRkaXRvbmFsIHByb3AgdG8gbWFuYWdlIHpvb20vcGFuXG4gICAgbGFiZWxQcm9wZXJ0aWVzLl92aXNpYmxlID0gaW5zaWRlO1xuXG4gICAgcHJvcGVydGllcy5lbGVtZW50cyA9IFt7XG4gICAgICB0eXBlOiAnbGFiZWwnLFxuICAgICAgb3B0aW9uU2NvcGU6ICdsYWJlbCcsXG4gICAgICBwcm9wZXJ0aWVzOiBsYWJlbFByb3BlcnRpZXMsXG4gICAgICBpbml0UHJvcGVydGllczogcHJvcGVydGllcy5pbml0UHJvcGVydGllc1xuICAgIH1dO1xuICAgIHJldHVybiBwcm9wZXJ0aWVzO1xuICB9XG59XG5cbkxpbmVBbm5vdGF0aW9uLmlkID0gJ2xpbmVBbm5vdGF0aW9uJztcblxuY29uc3QgYXJyb3dIZWFkc0RlZmF1bHRzID0ge1xuICBiYWNrZ3JvdW5kQ29sb3I6IHVuZGVmaW5lZCxcbiAgYmFja2dyb3VuZFNoYWRvd0NvbG9yOiB1bmRlZmluZWQsXG4gIGJvcmRlckNvbG9yOiB1bmRlZmluZWQsXG4gIGJvcmRlckRhc2g6IHVuZGVmaW5lZCxcbiAgYm9yZGVyRGFzaE9mZnNldDogdW5kZWZpbmVkLFxuICBib3JkZXJTaGFkb3dDb2xvcjogdW5kZWZpbmVkLFxuICBib3JkZXJXaWR0aDogdW5kZWZpbmVkLFxuICBkaXNwbGF5OiB1bmRlZmluZWQsXG4gIGZpbGw6IHVuZGVmaW5lZCxcbiAgbGVuZ3RoOiB1bmRlZmluZWQsXG4gIHNoYWRvd0JsdXI6IHVuZGVmaW5lZCxcbiAgc2hhZG93T2Zmc2V0WDogdW5kZWZpbmVkLFxuICBzaGFkb3dPZmZzZXRZOiB1bmRlZmluZWQsXG4gIHdpZHRoOiB1bmRlZmluZWRcbn07XG5cbkxpbmVBbm5vdGF0aW9uLmRlZmF1bHRzID0ge1xuICBhZGp1c3RTY2FsZVJhbmdlOiB0cnVlLFxuICBhcnJvd0hlYWRzOiB7XG4gICAgZGlzcGxheTogZmFsc2UsXG4gICAgZW5kOiBPYmplY3QuYXNzaWduKHt9LCBhcnJvd0hlYWRzRGVmYXVsdHMpLFxuICAgIGZpbGw6IGZhbHNlLFxuICAgIGxlbmd0aDogMTIsXG4gICAgc3RhcnQ6IE9iamVjdC5hc3NpZ24oe30sIGFycm93SGVhZHNEZWZhdWx0cyksXG4gICAgd2lkdGg6IDZcbiAgfSxcbiAgYm9yZGVyRGFzaDogW10sXG4gIGJvcmRlckRhc2hPZmZzZXQ6IDAsXG4gIGJvcmRlclNoYWRvd0NvbG9yOiAndHJhbnNwYXJlbnQnLFxuICBib3JkZXJXaWR0aDogMixcbiAgY3VydmU6IGZhbHNlLFxuICBjb250cm9sUG9pbnQ6IHtcbiAgICB5OiAnLTUwJSdcbiAgfSxcbiAgZGlzcGxheTogdHJ1ZSxcbiAgZW5kVmFsdWU6IHVuZGVmaW5lZCxcbiAgaW5pdDogdW5kZWZpbmVkLFxuICBsYWJlbDoge1xuICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwwLDAsMC44KScsXG4gICAgYmFja2dyb3VuZFNoYWRvd0NvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIGJvcmRlckNhcFN0eWxlOiAnYnV0dCcsXG4gICAgYm9yZGVyQ29sb3I6ICdibGFjaycsXG4gICAgYm9yZGVyRGFzaDogW10sXG4gICAgYm9yZGVyRGFzaE9mZnNldDogMCxcbiAgICBib3JkZXJKb2luU3R5bGU6ICdtaXRlcicsXG4gICAgYm9yZGVyUmFkaXVzOiA2LFxuICAgIGJvcmRlclNoYWRvd0NvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIGJvcmRlcldpZHRoOiAwLFxuICAgIGNhbGxvdXQ6IE9iamVjdC5hc3NpZ24oe30sIExhYmVsQW5ub3RhdGlvbi5kZWZhdWx0cy5jYWxsb3V0KSxcbiAgICBjb2xvcjogJyNmZmYnLFxuICAgIGNvbnRlbnQ6IG51bGwsXG4gICAgZGlzcGxheTogZmFsc2UsXG4gICAgZHJhd1RpbWU6IHVuZGVmaW5lZCxcbiAgICBmb250OiB7XG4gICAgICBmYW1pbHk6IHVuZGVmaW5lZCxcbiAgICAgIGxpbmVIZWlnaHQ6IHVuZGVmaW5lZCxcbiAgICAgIHNpemU6IHVuZGVmaW5lZCxcbiAgICAgIHN0eWxlOiB1bmRlZmluZWQsXG4gICAgICB3ZWlnaHQ6ICdib2xkJ1xuICAgIH0sXG4gICAgaGVpZ2h0OiB1bmRlZmluZWQsXG4gICAgb3BhY2l0eTogdW5kZWZpbmVkLFxuICAgIHBhZGRpbmc6IDYsXG4gICAgcG9zaXRpb246ICdjZW50ZXInLFxuICAgIHJvdGF0aW9uOiAwLFxuICAgIHNoYWRvd0JsdXI6IDAsXG4gICAgc2hhZG93T2Zmc2V0WDogMCxcbiAgICBzaGFkb3dPZmZzZXRZOiAwLFxuICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgdGV4dFN0cm9rZUNvbG9yOiB1bmRlZmluZWQsXG4gICAgdGV4dFN0cm9rZVdpZHRoOiAwLFxuICAgIHdpZHRoOiB1bmRlZmluZWQsXG4gICAgeEFkanVzdDogMCxcbiAgICB5QWRqdXN0OiAwLFxuICAgIHo6IHVuZGVmaW5lZFxuICB9LFxuICBzY2FsZUlEOiB1bmRlZmluZWQsXG4gIHNoYWRvd0JsdXI6IDAsXG4gIHNoYWRvd09mZnNldFg6IDAsXG4gIHNoYWRvd09mZnNldFk6IDAsXG4gIHZhbHVlOiB1bmRlZmluZWQsXG4gIHhNYXg6IHVuZGVmaW5lZCxcbiAgeE1pbjogdW5kZWZpbmVkLFxuICB4U2NhbGVJRDogdW5kZWZpbmVkLFxuICB5TWF4OiB1bmRlZmluZWQsXG4gIHlNaW46IHVuZGVmaW5lZCxcbiAgeVNjYWxlSUQ6IHVuZGVmaW5lZCxcbiAgejogMFxufTtcblxuTGluZUFubm90YXRpb24uZGVzY3JpcHRvcnMgPSB7XG4gIGFycm93SGVhZHM6IHtcbiAgICBzdGFydDoge1xuICAgICAgX2ZhbGxiYWNrOiB0cnVlXG4gICAgfSxcbiAgICBlbmQ6IHtcbiAgICAgIF9mYWxsYmFjazogdHJ1ZVxuICAgIH0sXG4gICAgX2ZhbGxiYWNrOiB0cnVlXG4gIH1cbn07XG5cbkxpbmVBbm5vdGF0aW9uLmRlZmF1bHRSb3V0ZXMgPSB7XG4gIGJvcmRlckNvbG9yOiAnY29sb3InXG59O1xuXG5mdW5jdGlvbiBpbkF4aXNSYW5nZShlbGVtZW50LCB7bW91c2VYLCBtb3VzZVl9LCBheGlzLCB7aEJvcmRlcldpZHRoLCB1c2VGaW5hbFBvc2l0aW9ufSkge1xuICBjb25zdCBsaW1pdCA9IHJhbmdlTGltaXQobW91c2VYLCBtb3VzZVksIGVsZW1lbnQuZ2V0UHJvcHMoWyd4JywgJ3knLCAneDInLCAneTInXSwgdXNlRmluYWxQb3NpdGlvbiksIGF4aXMpO1xuICByZXR1cm4gKGxpbWl0LnZhbHVlID49IGxpbWl0LnN0YXJ0IC0gaEJvcmRlcldpZHRoICYmIGxpbWl0LnZhbHVlIDw9IGxpbWl0LmVuZCArIGhCb3JkZXJXaWR0aCkgfHwgaXNPbkxhYmVsKGVsZW1lbnQsIHttb3VzZVgsIG1vdXNlWX0sIHVzZUZpbmFsUG9zaXRpb24sIGF4aXMpO1xufVxuXG5mdW5jdGlvbiBpc0xpbmVJbkFyZWEoe3gsIHksIHgyLCB5Mn0sIHt0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnR9KSB7XG4gIHJldHVybiAhKFxuICAgICh4IDwgbGVmdCAmJiB4MiA8IGxlZnQpIHx8XG4gICAgKHggPiByaWdodCAmJiB4MiA+IHJpZ2h0KSB8fFxuICAgICh5IDwgdG9wICYmIHkyIDwgdG9wKSB8fFxuICAgICh5ID4gYm90dG9tICYmIHkyID4gYm90dG9tKVxuICApO1xufVxuXG5mdW5jdGlvbiBsaW1pdFBvaW50VG9BcmVhKHt4LCB5fSwgcDIsIHt0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnR9KSB7XG4gIGlmICh4IDwgbGVmdCkge1xuICAgIHkgPSBpbnRlcnBvbGF0ZVkobGVmdCwge3gsIHl9LCBwMik7XG4gICAgeCA9IGxlZnQ7XG4gIH1cbiAgaWYgKHggPiByaWdodCkge1xuICAgIHkgPSBpbnRlcnBvbGF0ZVkocmlnaHQsIHt4LCB5fSwgcDIpO1xuICAgIHggPSByaWdodDtcbiAgfVxuICBpZiAoeSA8IHRvcCkge1xuICAgIHggPSBpbnRlcnBvbGF0ZVgodG9wLCB7eCwgeX0sIHAyKTtcbiAgICB5ID0gdG9wO1xuICB9XG4gIGlmICh5ID4gYm90dG9tKSB7XG4gICAgeCA9IGludGVycG9sYXRlWChib3R0b20sIHt4LCB5fSwgcDIpO1xuICAgIHkgPSBib3R0b207XG4gIH1cbiAgcmV0dXJuIHt4LCB5fTtcbn1cblxuZnVuY3Rpb24gbGltaXRMaW5lVG9BcmVhKHAxLCBwMiwgYXJlYSkge1xuICBjb25zdCB7eCwgeX0gPSBsaW1pdFBvaW50VG9BcmVhKHAxLCBwMiwgYXJlYSk7XG4gIGNvbnN0IHt4OiB4MiwgeTogeTJ9ID0gbGltaXRQb2ludFRvQXJlYShwMiwgcDEsIGFyZWEpO1xuICByZXR1cm4ge3gsIHksIHgyLCB5Miwgd2lkdGg6IE1hdGguYWJzKHgyIC0geCksIGhlaWdodDogTWF0aC5hYnMoeTIgLSB5KX07XG59XG5cbmZ1bmN0aW9uIGludGVyc2VjdHMoZWxlbWVudCwge21vdXNlWCwgbW91c2VZfSwgZXBzaWxvbiA9IEVQU0lMT04sIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgLy8gQWRhcHRlZCBmcm9tIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS82ODUzOTI2LzI1NTA3XG4gIGNvbnN0IHt4OiB4MSwgeTogeTEsIHgyLCB5Mn0gPSBlbGVtZW50LmdldFByb3BzKFsneCcsICd5JywgJ3gyJywgJ3kyJ10sIHVzZUZpbmFsUG9zaXRpb24pO1xuICBjb25zdCBkeCA9IHgyIC0geDE7XG4gIGNvbnN0IGR5ID0geTIgLSB5MTtcbiAgY29uc3QgbGVuU3EgPSBzcXIoZHgpICsgc3FyKGR5KTtcbiAgY29uc3QgdCA9IGxlblNxID09PSAwID8gLTEgOiAoKG1vdXNlWCAtIHgxKSAqIGR4ICsgKG1vdXNlWSAtIHkxKSAqIGR5KSAvIGxlblNxO1xuICBsZXQgeHgsIHl5O1xuICBpZiAodCA8IDApIHtcbiAgICB4eCA9IHgxO1xuICAgIHl5ID0geTE7XG4gIH0gZWxzZSBpZiAodCA+IDEpIHtcbiAgICB4eCA9IHgyO1xuICAgIHl5ID0geTI7XG4gIH0gZWxzZSB7XG4gICAgeHggPSB4MSArIHQgKiBkeDtcbiAgICB5eSA9IHkxICsgdCAqIGR5O1xuICB9XG4gIHJldHVybiAoc3FyKG1vdXNlWCAtIHh4KSArIHNxcihtb3VzZVkgLSB5eSkpIDw9IGVwc2lsb247XG59XG5cbmZ1bmN0aW9uIGlzT25MYWJlbChlbGVtZW50LCB7bW91c2VYLCBtb3VzZVl9LCB1c2VGaW5hbFBvc2l0aW9uLCBheGlzKSB7XG4gIGNvbnN0IGxhYmVsID0gZWxlbWVudC5sYWJlbDtcbiAgcmV0dXJuIGxhYmVsLm9wdGlvbnMuZGlzcGxheSAmJiBsYWJlbC5pblJhbmdlKG1vdXNlWCwgbW91c2VZLCBheGlzLCB1c2VGaW5hbFBvc2l0aW9uKTtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUxhYmVsRWxlbWVudFByb3BlcnRpZXMoY2hhcnQsIHByb3BlcnRpZXMsIG9wdGlvbnMpIHtcbiAgY29uc3QgYm9yZGVyV2lkdGggPSBvcHRpb25zLmJvcmRlcldpZHRoO1xuICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKG9wdGlvbnMucGFkZGluZyk7XG4gIGNvbnN0IHRleHRTaXplID0gbWVhc3VyZUxhYmVsU2l6ZShjaGFydC5jdHgsIG9wdGlvbnMpO1xuICBjb25zdCB3aWR0aCA9IHRleHRTaXplLndpZHRoICsgcGFkZGluZy53aWR0aCArIGJvcmRlcldpZHRoO1xuICBjb25zdCBoZWlnaHQgPSB0ZXh0U2l6ZS5oZWlnaHQgKyBwYWRkaW5nLmhlaWdodCArIGJvcmRlcldpZHRoO1xuICByZXR1cm4gY2FsY3VsYXRlTGFiZWxQb3NpdGlvbihwcm9wZXJ0aWVzLCBvcHRpb25zLCB7d2lkdGgsIGhlaWdodCwgcGFkZGluZ30sIGNoYXJ0LmNoYXJ0QXJlYSk7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZUF1dG9Sb3RhdGlvbihwcm9wZXJ0aWVzKSB7XG4gIGNvbnN0IHt4LCB5LCB4MiwgeTJ9ID0gcHJvcGVydGllcztcbiAgY29uc3Qgcm90YXRpb24gPSBNYXRoLmF0YW4yKHkyIC0geSwgeDIgLSB4KTtcbiAgLy8gRmxpcCB0aGUgcm90YXRpb24gaWYgaXQgZ29lcyA+IFBJLzIgb3IgPCAtUEkvMiwgc28gbGFiZWwgc3RheXMgdXByaWdodFxuICByZXR1cm4gcm90YXRpb24gPiBQSSAvIDIgPyByb3RhdGlvbiAtIFBJIDogcm90YXRpb24gPCBQSSAvIC0yID8gcm90YXRpb24gKyBQSSA6IHJvdGF0aW9uO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVMYWJlbFBvc2l0aW9uKHByb3BlcnRpZXMsIGxhYmVsLCBzaXplcywgY2hhcnRBcmVhKSB7XG4gIGNvbnN0IHt3aWR0aCwgaGVpZ2h0LCBwYWRkaW5nfSA9IHNpemVzO1xuICBjb25zdCB7eEFkanVzdCwgeUFkanVzdH0gPSBsYWJlbDtcbiAgY29uc3QgcDEgPSB7eDogcHJvcGVydGllcy54LCB5OiBwcm9wZXJ0aWVzLnl9O1xuICBjb25zdCBwMiA9IHt4OiBwcm9wZXJ0aWVzLngyLCB5OiBwcm9wZXJ0aWVzLnkyfTtcbiAgY29uc3Qgcm90YXRpb24gPSBsYWJlbC5yb3RhdGlvbiA9PT0gJ2F1dG8nID8gY2FsY3VsYXRlQXV0b1JvdGF0aW9uKHByb3BlcnRpZXMpIDogdG9SYWRpYW5zKGxhYmVsLnJvdGF0aW9uKTtcbiAgY29uc3Qgc2l6ZSA9IHJvdGF0ZWRTaXplKHdpZHRoLCBoZWlnaHQsIHJvdGF0aW9uKTtcbiAgY29uc3QgdCA9IGNhbGN1bGF0ZVQocHJvcGVydGllcywgbGFiZWwsIHtsYWJlbFNpemU6IHNpemUsIHBhZGRpbmd9LCBjaGFydEFyZWEpO1xuICBjb25zdCBwdCA9IHByb3BlcnRpZXMuY3AgPyBwb2ludEluQ3VydmUocDEsIHByb3BlcnRpZXMuY3AsIHAyLCB0KSA6IHBvaW50SW5MaW5lKHAxLCBwMiwgdCk7XG4gIGNvbnN0IHhDb29yZGluYXRlU2l6ZXMgPSB7c2l6ZTogc2l6ZS53LCBtaW46IGNoYXJ0QXJlYS5sZWZ0LCBtYXg6IGNoYXJ0QXJlYS5yaWdodCwgcGFkZGluZzogcGFkZGluZy5sZWZ0fTtcbiAgY29uc3QgeUNvb3JkaW5hdGVTaXplcyA9IHtzaXplOiBzaXplLmgsIG1pbjogY2hhcnRBcmVhLnRvcCwgbWF4OiBjaGFydEFyZWEuYm90dG9tLCBwYWRkaW5nOiBwYWRkaW5nLnRvcH07XG4gIGNvbnN0IGNlbnRlclggPSBhZGp1c3RMYWJlbENvb3JkaW5hdGUocHQueCwgeENvb3JkaW5hdGVTaXplcykgKyB4QWRqdXN0O1xuICBjb25zdCBjZW50ZXJZID0gYWRqdXN0TGFiZWxDb29yZGluYXRlKHB0LnksIHlDb29yZGluYXRlU2l6ZXMpICsgeUFkanVzdDtcbiAgcmV0dXJuIHtcbiAgICB4OiBjZW50ZXJYIC0gKHdpZHRoIC8gMiksXG4gICAgeTogY2VudGVyWSAtIChoZWlnaHQgLyAyKSxcbiAgICB4MjogY2VudGVyWCArICh3aWR0aCAvIDIpLFxuICAgIHkyOiBjZW50ZXJZICsgKGhlaWdodCAvIDIpLFxuICAgIGNlbnRlclgsXG4gICAgY2VudGVyWSxcbiAgICBwb2ludFg6IHB0LngsXG4gICAgcG9pbnRZOiBwdC55LFxuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICByb3RhdGlvbjogdG9EZWdyZWVzKHJvdGF0aW9uKVxuICB9O1xufVxuXG5mdW5jdGlvbiByb3RhdGVkU2l6ZSh3aWR0aCwgaGVpZ2h0LCByb3RhdGlvbikge1xuICBjb25zdCBjb3MgPSBNYXRoLmNvcyhyb3RhdGlvbik7XG4gIGNvbnN0IHNpbiA9IE1hdGguc2luKHJvdGF0aW9uKTtcbiAgcmV0dXJuIHtcbiAgICB3OiBNYXRoLmFicyh3aWR0aCAqIGNvcykgKyBNYXRoLmFicyhoZWlnaHQgKiBzaW4pLFxuICAgIGg6IE1hdGguYWJzKHdpZHRoICogc2luKSArIE1hdGguYWJzKGhlaWdodCAqIGNvcylcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlVChwcm9wZXJ0aWVzLCBsYWJlbCwgc2l6ZXMsIGNoYXJ0QXJlYSkge1xuICBsZXQgdDtcbiAgY29uc3Qgc3BhY2UgPSBzcGFjZUFyb3VuZChwcm9wZXJ0aWVzLCBjaGFydEFyZWEpO1xuICBpZiAobGFiZWwucG9zaXRpb24gPT09ICdzdGFydCcpIHtcbiAgICB0ID0gY2FsY3VsYXRlVEFkanVzdCh7dzogcHJvcGVydGllcy54MiAtIHByb3BlcnRpZXMueCwgaDogcHJvcGVydGllcy55MiAtIHByb3BlcnRpZXMueX0sIHNpemVzLCBsYWJlbCwgc3BhY2UpO1xuICB9IGVsc2UgaWYgKGxhYmVsLnBvc2l0aW9uID09PSAnZW5kJykge1xuICAgIHQgPSAxIC0gY2FsY3VsYXRlVEFkanVzdCh7dzogcHJvcGVydGllcy54IC0gcHJvcGVydGllcy54MiwgaDogcHJvcGVydGllcy55IC0gcHJvcGVydGllcy55Mn0sIHNpemVzLCBsYWJlbCwgc3BhY2UpO1xuICB9IGVsc2Uge1xuICAgIHQgPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKDEsIGxhYmVsLnBvc2l0aW9uKTtcbiAgfVxuICByZXR1cm4gdDtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlVEFkanVzdChsaW5lU2l6ZSwgc2l6ZXMsIGxhYmVsLCBzcGFjZSkge1xuICBjb25zdCB7bGFiZWxTaXplLCBwYWRkaW5nfSA9IHNpemVzO1xuICBjb25zdCBsaW5lVyA9IGxpbmVTaXplLncgKiBzcGFjZS5keDtcbiAgY29uc3QgbGluZUggPSBsaW5lU2l6ZS5oICogc3BhY2UuZHk7XG4gIGNvbnN0IHggPSAobGluZVcgPiAwKSAmJiAoKGxhYmVsU2l6ZS53IC8gMiArIHBhZGRpbmcubGVmdCAtIHNwYWNlLngpIC8gbGluZVcpO1xuICBjb25zdCB5ID0gKGxpbmVIID4gMCkgJiYgKChsYWJlbFNpemUuaCAvIDIgKyBwYWRkaW5nLnRvcCAtIHNwYWNlLnkpIC8gbGluZUgpO1xuICByZXR1cm4gY2xhbXAoTWF0aC5tYXgoeCwgeSksIDAsIDAuMjUpO1xufVxuXG5mdW5jdGlvbiBzcGFjZUFyb3VuZChwcm9wZXJ0aWVzLCBjaGFydEFyZWEpIHtcbiAgY29uc3Qge3gsIHgyLCB5LCB5Mn0gPSBwcm9wZXJ0aWVzO1xuICBjb25zdCB0ID0gTWF0aC5taW4oeSwgeTIpIC0gY2hhcnRBcmVhLnRvcDtcbiAgY29uc3QgbCA9IE1hdGgubWluKHgsIHgyKSAtIGNoYXJ0QXJlYS5sZWZ0O1xuICBjb25zdCBiID0gY2hhcnRBcmVhLmJvdHRvbSAtIE1hdGgubWF4KHksIHkyKTtcbiAgY29uc3QgciA9IGNoYXJ0QXJlYS5yaWdodCAtIE1hdGgubWF4KHgsIHgyKTtcbiAgcmV0dXJuIHtcbiAgICB4OiBNYXRoLm1pbihsLCByKSxcbiAgICB5OiBNYXRoLm1pbih0LCBiKSxcbiAgICBkeDogbCA8PSByID8gMSA6IC0xLFxuICAgIGR5OiB0IDw9IGIgPyAxIDogLTFcbiAgfTtcbn1cblxuZnVuY3Rpb24gYWRqdXN0TGFiZWxDb29yZGluYXRlKGNvb3JkaW5hdGUsIGxhYmVsU2l6ZXMpIHtcbiAgY29uc3Qge3NpemUsIG1pbiwgbWF4LCBwYWRkaW5nfSA9IGxhYmVsU2l6ZXM7XG4gIGNvbnN0IGhhbGZTaXplID0gc2l6ZSAvIDI7XG4gIGlmIChzaXplID4gbWF4IC0gbWluKSB7XG4gICAgLy8gaWYgaXQgZG9lcyBub3QgZml0LCBkaXNwbGF5IGFzIG11Y2ggYXMgcG9zc2libGVcbiAgICByZXR1cm4gKG1heCArIG1pbikgLyAyO1xuICB9XG4gIGlmIChtaW4gPj0gKGNvb3JkaW5hdGUgLSBwYWRkaW5nIC0gaGFsZlNpemUpKSB7XG4gICAgY29vcmRpbmF0ZSA9IG1pbiArIHBhZGRpbmcgKyBoYWxmU2l6ZTtcbiAgfVxuICBpZiAobWF4IDw9IChjb29yZGluYXRlICsgcGFkZGluZyArIGhhbGZTaXplKSkge1xuICAgIGNvb3JkaW5hdGUgPSBtYXggLSBwYWRkaW5nIC0gaGFsZlNpemU7XG4gIH1cbiAgcmV0dXJuIGNvb3JkaW5hdGU7XG59XG5cbmZ1bmN0aW9uIGdldEFycm93SGVhZHMobGluZSkge1xuICBjb25zdCBvcHRpb25zID0gbGluZS5vcHRpb25zO1xuICBjb25zdCBhcnJvd1N0YXJ0T3B0cyA9IG9wdGlvbnMuYXJyb3dIZWFkcyAmJiBvcHRpb25zLmFycm93SGVhZHMuc3RhcnQ7XG4gIGNvbnN0IGFycm93RW5kT3B0cyA9IG9wdGlvbnMuYXJyb3dIZWFkcyAmJiBvcHRpb25zLmFycm93SGVhZHMuZW5kO1xuICByZXR1cm4ge1xuICAgIHN0YXJ0T3B0czogYXJyb3dTdGFydE9wdHMsXG4gICAgZW5kT3B0czogYXJyb3dFbmRPcHRzLFxuICAgIHN0YXJ0QWRqdXN0OiBnZXRMaW5lQWRqdXN0KGxpbmUsIGFycm93U3RhcnRPcHRzKSxcbiAgICBlbmRBZGp1c3Q6IGdldExpbmVBZGp1c3QobGluZSwgYXJyb3dFbmRPcHRzKVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRMaW5lQWRqdXN0KGxpbmUsIGFycm93T3B0cykge1xuICBpZiAoIWFycm93T3B0cyB8fCAhYXJyb3dPcHRzLmRpc3BsYXkpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBjb25zdCB7bGVuZ3RoLCB3aWR0aH0gPSBhcnJvd09wdHM7XG4gIGNvbnN0IGFkanVzdCA9IGxpbmUub3B0aW9ucy5ib3JkZXJXaWR0aCAvIDI7XG4gIGNvbnN0IHAxID0ge3g6IGxlbmd0aCwgeTogd2lkdGggKyBhZGp1c3R9O1xuICBjb25zdCBwMiA9IHt4OiAwLCB5OiBhZGp1c3R9O1xuICByZXR1cm4gTWF0aC5hYnMoaW50ZXJwb2xhdGVYKDAsIHAxLCBwMikpO1xufVxuXG5mdW5jdGlvbiBkcmF3QXJyb3dIZWFkKGN0eCwgb2Zmc2V0LCBhZGp1c3QsIGFycm93T3B0cykge1xuICBpZiAoIWFycm93T3B0cyB8fCAhYXJyb3dPcHRzLmRpc3BsYXkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3Qge2xlbmd0aCwgd2lkdGgsIGZpbGwsIGJhY2tncm91bmRDb2xvciwgYm9yZGVyQ29sb3J9ID0gYXJyb3dPcHRzO1xuICBjb25zdCBhcnJvd09mZnNldFggPSBNYXRoLmFicyhvZmZzZXQgLSBsZW5ndGgpICsgYWRqdXN0O1xuICBjdHguYmVnaW5QYXRoKCk7XG4gIHNldFNoYWRvd1N0eWxlKGN0eCwgYXJyb3dPcHRzKTtcbiAgc2V0Qm9yZGVyU3R5bGUoY3R4LCBhcnJvd09wdHMpO1xuICBjdHgubW92ZVRvKGFycm93T2Zmc2V0WCwgLXdpZHRoKTtcbiAgY3R4LmxpbmVUbyhvZmZzZXQgKyBhZGp1c3QsIDApO1xuICBjdHgubGluZVRvKGFycm93T2Zmc2V0WCwgd2lkdGgpO1xuICBpZiAoZmlsbCA9PT0gdHJ1ZSkge1xuICAgIGN0eC5maWxsU3R5bGUgPSBiYWNrZ3JvdW5kQ29sb3IgfHwgYm9yZGVyQ29sb3I7XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIGN0eC5maWxsKCk7XG4gICAgY3R4LnNoYWRvd0NvbG9yID0gJ3RyYW5zcGFyZW50JztcbiAgfSBlbHNlIHtcbiAgICBjdHguc2hhZG93Q29sb3IgPSBhcnJvd09wdHMuYm9yZGVyU2hhZG93Q29sb3I7XG4gIH1cbiAgY3R4LnN0cm9rZSgpO1xufVxuXG5mdW5jdGlvbiBnZXRDb250cm9sUG9pbnQocHJvcGVydGllcywgb3B0aW9ucywgZGlzdGFuY2UpIHtcbiAgY29uc3Qge3gsIHksIHgyLCB5MiwgY2VudGVyWCwgY2VudGVyWX0gPSBwcm9wZXJ0aWVzO1xuICBjb25zdCBhbmdsZSA9IE1hdGguYXRhbjIoeTIgLSB5LCB4MiAtIHgpO1xuICBjb25zdCBjcCA9IHRvUG9zaXRpb24ob3B0aW9ucy5jb250cm9sUG9pbnQsIDApO1xuICBjb25zdCBwb2ludCA9IHtcbiAgICB4OiBjZW50ZXJYICsgZ2V0U2l6ZShkaXN0YW5jZSwgY3AueCwgZmFsc2UpLFxuICAgIHk6IGNlbnRlclkgKyBnZXRTaXplKGRpc3RhbmNlLCBjcC55LCBmYWxzZSlcbiAgfTtcbiAgcmV0dXJuIHJvdGF0ZWQocG9pbnQsIHt4OiBjZW50ZXJYLCB5OiBjZW50ZXJZfSwgYW5nbGUpO1xufVxuXG5mdW5jdGlvbiBkcmF3QXJyb3dIZWFkT25DdXJ2ZShjdHgsIHt4LCB5fSwge2FuZ2xlLCBhZGp1c3R9LCBhcnJvd09wdHMpIHtcbiAgaWYgKCFhcnJvd09wdHMgfHwgIWFycm93T3B0cy5kaXNwbGF5KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGN0eC5zYXZlKCk7XG4gIGN0eC50cmFuc2xhdGUoeCwgeSk7XG4gIGN0eC5yb3RhdGUoYW5nbGUpO1xuICBkcmF3QXJyb3dIZWFkKGN0eCwgMCwgLWFkanVzdCwgYXJyb3dPcHRzKTtcbiAgY3R4LnJlc3RvcmUoKTtcbn1cblxuZnVuY3Rpb24gZHJhd0N1cnZlKGN0eCwgZWxlbWVudCwgY3AsIGxlbmd0aCkge1xuICBjb25zdCB7eCwgeSwgeDIsIHkyLCBvcHRpb25zfSA9IGVsZW1lbnQ7XG4gIGNvbnN0IHtzdGFydE9wdHMsIGVuZE9wdHMsIHN0YXJ0QWRqdXN0LCBlbmRBZGp1c3R9ID0gZ2V0QXJyb3dIZWFkcyhlbGVtZW50KTtcbiAgY29uc3QgcDEgPSB7eCwgeX07XG4gIGNvbnN0IHAyID0ge3g6IHgyLCB5OiB5Mn07XG4gIGNvbnN0IHN0YXJ0QW5nbGUgPSBhbmdsZUluQ3VydmUocDEsIGNwLCBwMiwgMCk7XG4gIGNvbnN0IGVuZEFuZ2xlID0gYW5nbGVJbkN1cnZlKHAxLCBjcCwgcDIsIDEpIC0gUEk7XG4gIGNvbnN0IHBzID0gcG9pbnRJbkN1cnZlKHAxLCBjcCwgcDIsIHN0YXJ0QWRqdXN0IC8gbGVuZ3RoKTtcbiAgY29uc3QgcGUgPSBwb2ludEluQ3VydmUocDEsIGNwLCBwMiwgMSAtIGVuZEFkanVzdCAvIGxlbmd0aCk7XG5cbiAgY29uc3QgcGF0aCA9IG5ldyBQYXRoMkQoKTtcbiAgY3R4LmJlZ2luUGF0aCgpO1xuICBwYXRoLm1vdmVUbyhwcy54LCBwcy55KTtcbiAgcGF0aC5xdWFkcmF0aWNDdXJ2ZVRvKGNwLngsIGNwLnksIHBlLngsIHBlLnkpO1xuICBjdHguc2hhZG93Q29sb3IgPSBvcHRpb25zLmJvcmRlclNoYWRvd0NvbG9yO1xuICBjdHguc3Ryb2tlKHBhdGgpO1xuICBlbGVtZW50LnBhdGggPSBwYXRoO1xuICBlbGVtZW50LmN0eCA9IGN0eDtcbiAgZHJhd0Fycm93SGVhZE9uQ3VydmUoY3R4LCBwcywge2FuZ2xlOiBzdGFydEFuZ2xlLCBhZGp1c3Q6IHN0YXJ0QWRqdXN0fSwgc3RhcnRPcHRzKTtcbiAgZHJhd0Fycm93SGVhZE9uQ3VydmUoY3R4LCBwZSwge2FuZ2xlOiBlbmRBbmdsZSwgYWRqdXN0OiBlbmRBZGp1c3R9LCBlbmRPcHRzKTtcbn1cblxuY2xhc3MgRWxsaXBzZUFubm90YXRpb24gZXh0ZW5kcyBFbGVtZW50IHtcblxuICBpblJhbmdlKG1vdXNlWCwgbW91c2VZLCBheGlzLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgY29uc3Qgcm90YXRpb24gPSB0aGlzLm9wdGlvbnMucm90YXRpb247XG4gICAgY29uc3QgYm9yZGVyV2lkdGggPSB0aGlzLm9wdGlvbnMuYm9yZGVyV2lkdGg7XG4gICAgaWYgKGF4aXMgIT09ICd4JyAmJiBheGlzICE9PSAneScpIHtcbiAgICAgIHJldHVybiBwb2ludEluRWxsaXBzZSh7eDogbW91c2VYLCB5OiBtb3VzZVl9LCB0aGlzLmdldFByb3BzKFsnd2lkdGgnLCAnaGVpZ2h0JywgJ2NlbnRlclgnLCAnY2VudGVyWSddLCB1c2VGaW5hbFBvc2l0aW9uKSwgcm90YXRpb24sIGJvcmRlcldpZHRoKTtcbiAgICB9XG4gICAgY29uc3Qge3gsIHksIHgyLCB5Mn0gPSB0aGlzLmdldFByb3BzKFsneCcsICd5JywgJ3gyJywgJ3kyJ10sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIGNvbnN0IGhCb3JkZXJXaWR0aCA9IGJvcmRlcldpZHRoIC8gMjtcbiAgICBjb25zdCBsaW1pdCA9IGF4aXMgPT09ICd5JyA/IHtzdGFydDogeSwgZW5kOiB5Mn0gOiB7c3RhcnQ6IHgsIGVuZDogeDJ9O1xuICAgIGNvbnN0IHJvdGF0ZWRQb2ludCA9IHJvdGF0ZWQoe3g6IG1vdXNlWCwgeTogbW91c2VZfSwgdGhpcy5nZXRDZW50ZXJQb2ludCh1c2VGaW5hbFBvc2l0aW9uKSwgdG9SYWRpYW5zKC1yb3RhdGlvbikpO1xuICAgIHJldHVybiByb3RhdGVkUG9pbnRbYXhpc10gPj0gbGltaXQuc3RhcnQgLSBoQm9yZGVyV2lkdGggLSBFUFNJTE9OICYmIHJvdGF0ZWRQb2ludFtheGlzXSA8PSBsaW1pdC5lbmQgKyBoQm9yZGVyV2lkdGggKyBFUFNJTE9OO1xuICB9XG5cbiAgZ2V0Q2VudGVyUG9pbnQodXNlRmluYWxQb3NpdGlvbikge1xuICAgIHJldHVybiBnZXRFbGVtZW50Q2VudGVyUG9pbnQodGhpcywgdXNlRmluYWxQb3NpdGlvbik7XG4gIH1cblxuICBkcmF3KGN0eCkge1xuICAgIGNvbnN0IHt3aWR0aCwgaGVpZ2h0LCBjZW50ZXJYLCBjZW50ZXJZLCBvcHRpb25zfSA9IHRoaXM7XG4gICAgY3R4LnNhdmUoKTtcbiAgICB0cmFuc2xhdGUoY3R4LCB0aGlzLmdldENlbnRlclBvaW50KCksIG9wdGlvbnMucm90YXRpb24pO1xuICAgIHNldFNoYWRvd1N0eWxlKGN0eCwgdGhpcy5vcHRpb25zKTtcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yO1xuICAgIGNvbnN0IHN0cm9rZSA9IHNldEJvcmRlclN0eWxlKGN0eCwgb3B0aW9ucyk7XG4gICAgY3R4LmVsbGlwc2UoY2VudGVyWCwgY2VudGVyWSwgaGVpZ2h0IC8gMiwgd2lkdGggLyAyLCBQSSAvIDIsIDAsIDIgKiBQSSk7XG4gICAgY3R4LmZpbGwoKTtcbiAgICBpZiAoc3Ryb2tlKSB7XG4gICAgICBjdHguc2hhZG93Q29sb3IgPSBvcHRpb25zLmJvcmRlclNoYWRvd0NvbG9yO1xuICAgICAgY3R4LnN0cm9rZSgpO1xuICAgIH1cbiAgICBjdHgucmVzdG9yZSgpO1xuICB9XG5cbiAgZ2V0IGxhYmVsKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRzICYmIHRoaXMuZWxlbWVudHNbMF07XG4gIH1cblxuICByZXNvbHZlRWxlbWVudFByb3BlcnRpZXMoY2hhcnQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gcmVzb2x2ZUJveEFuZExhYmVsUHJvcGVydGllcyhjaGFydCwgb3B0aW9ucyk7XG4gIH1cblxufVxuXG5FbGxpcHNlQW5ub3RhdGlvbi5pZCA9ICdlbGxpcHNlQW5ub3RhdGlvbic7XG5cbkVsbGlwc2VBbm5vdGF0aW9uLmRlZmF1bHRzID0ge1xuICBhZGp1c3RTY2FsZVJhbmdlOiB0cnVlLFxuICBiYWNrZ3JvdW5kU2hhZG93Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gIGJvcmRlckRhc2g6IFtdLFxuICBib3JkZXJEYXNoT2Zmc2V0OiAwLFxuICBib3JkZXJTaGFkb3dDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgYm9yZGVyV2lkdGg6IDEsXG4gIGRpc3BsYXk6IHRydWUsXG4gIGluaXQ6IHVuZGVmaW5lZCxcbiAgbGFiZWw6IE9iamVjdC5hc3NpZ24oe30sIEJveEFubm90YXRpb24uZGVmYXVsdHMubGFiZWwpLFxuICByb3RhdGlvbjogMCxcbiAgc2hhZG93Qmx1cjogMCxcbiAgc2hhZG93T2Zmc2V0WDogMCxcbiAgc2hhZG93T2Zmc2V0WTogMCxcbiAgeE1heDogdW5kZWZpbmVkLFxuICB4TWluOiB1bmRlZmluZWQsXG4gIHhTY2FsZUlEOiB1bmRlZmluZWQsXG4gIHlNYXg6IHVuZGVmaW5lZCxcbiAgeU1pbjogdW5kZWZpbmVkLFxuICB5U2NhbGVJRDogdW5kZWZpbmVkLFxuICB6OiAwXG59O1xuXG5FbGxpcHNlQW5ub3RhdGlvbi5kZWZhdWx0Um91dGVzID0ge1xuICBib3JkZXJDb2xvcjogJ2NvbG9yJyxcbiAgYmFja2dyb3VuZENvbG9yOiAnY29sb3InXG59O1xuXG5FbGxpcHNlQW5ub3RhdGlvbi5kZXNjcmlwdG9ycyA9IHtcbiAgbGFiZWw6IHtcbiAgICBfZmFsbGJhY2s6IHRydWVcbiAgfVxufTtcblxuZnVuY3Rpb24gcG9pbnRJbkVsbGlwc2UocCwgZWxsaXBzZSwgcm90YXRpb24sIGJvcmRlcldpZHRoKSB7XG4gIGNvbnN0IHt3aWR0aCwgaGVpZ2h0LCBjZW50ZXJYLCBjZW50ZXJZfSA9IGVsbGlwc2U7XG4gIGNvbnN0IHhSYWRpdXMgPSB3aWR0aCAvIDI7XG4gIGNvbnN0IHlSYWRpdXMgPSBoZWlnaHQgLyAyO1xuXG4gIGlmICh4UmFkaXVzIDw9IDAgfHwgeVJhZGl1cyA8PSAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzc5NDYxODcvcG9pbnQtYW5kLWVsbGlwc2Utcm90YXRlZC1wb3NpdGlvbi10ZXN0LWFsZ29yaXRobVxuICBjb25zdCBhbmdsZSA9IHRvUmFkaWFucyhyb3RhdGlvbiB8fCAwKTtcbiAgY29uc3QgaEJvcmRlcldpZHRoID0gYm9yZGVyV2lkdGggLyAyIHx8IDA7XG4gIGNvbnN0IGNvc0FuZ2xlID0gTWF0aC5jb3MoYW5nbGUpO1xuICBjb25zdCBzaW5BbmdsZSA9IE1hdGguc2luKGFuZ2xlKTtcbiAgY29uc3QgYSA9IE1hdGgucG93KGNvc0FuZ2xlICogKHAueCAtIGNlbnRlclgpICsgc2luQW5nbGUgKiAocC55IC0gY2VudGVyWSksIDIpO1xuICBjb25zdCBiID0gTWF0aC5wb3coc2luQW5nbGUgKiAocC54IC0gY2VudGVyWCkgLSBjb3NBbmdsZSAqIChwLnkgLSBjZW50ZXJZKSwgMik7XG4gIHJldHVybiAoYSAvIE1hdGgucG93KHhSYWRpdXMgKyBoQm9yZGVyV2lkdGgsIDIpKSArIChiIC8gTWF0aC5wb3coeVJhZGl1cyArIGhCb3JkZXJXaWR0aCwgMikpIDw9IDEuMDAwMTtcbn1cblxuY2xhc3MgUG9pbnRBbm5vdGF0aW9uIGV4dGVuZHMgRWxlbWVudCB7XG5cbiAgaW5SYW5nZShtb3VzZVgsIG1vdXNlWSwgYXhpcywgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIGNvbnN0IHt4LCB5LCB4MiwgeTIsIHdpZHRofSA9IHRoaXMuZ2V0UHJvcHMoWyd4JywgJ3knLCAneDInLCAneTInLCAnd2lkdGgnXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgY29uc3QgYm9yZGVyV2lkdGggPSB0aGlzLm9wdGlvbnMuYm9yZGVyV2lkdGg7XG4gICAgaWYgKGF4aXMgIT09ICd4JyAmJiBheGlzICE9PSAneScpIHtcbiAgICAgIHJldHVybiBpblBvaW50UmFuZ2Uoe3g6IG1vdXNlWCwgeTogbW91c2VZfSwgdGhpcy5nZXRDZW50ZXJQb2ludCh1c2VGaW5hbFBvc2l0aW9uKSwgd2lkdGggLyAyLCBib3JkZXJXaWR0aCk7XG4gICAgfVxuICAgIGNvbnN0IGhCb3JkZXJXaWR0aCA9IGJvcmRlcldpZHRoIC8gMjtcbiAgICBjb25zdCBsaW1pdCA9IGF4aXMgPT09ICd5JyA/IHtzdGFydDogeSwgZW5kOiB5MiwgdmFsdWU6IG1vdXNlWX0gOiB7c3RhcnQ6IHgsIGVuZDogeDIsIHZhbHVlOiBtb3VzZVh9O1xuICAgIHJldHVybiBsaW1pdC52YWx1ZSA+PSBsaW1pdC5zdGFydCAtIGhCb3JkZXJXaWR0aCAmJiBsaW1pdC52YWx1ZSA8PSBsaW1pdC5lbmQgKyBoQm9yZGVyV2lkdGg7XG4gIH1cblxuICBnZXRDZW50ZXJQb2ludCh1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIGdldEVsZW1lbnRDZW50ZXJQb2ludCh0aGlzLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgfVxuXG4gIGRyYXcoY3R4KSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBib3JkZXJXaWR0aCA9IG9wdGlvbnMuYm9yZGVyV2lkdGg7XG4gICAgaWYgKG9wdGlvbnMucmFkaXVzIDwgMC4xKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGN0eC5zYXZlKCk7XG4gICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yO1xuICAgIHNldFNoYWRvd1N0eWxlKGN0eCwgb3B0aW9ucyk7XG4gICAgY29uc3Qgc3Ryb2tlID0gc2V0Qm9yZGVyU3R5bGUoY3R4LCBvcHRpb25zKTtcbiAgICBkcmF3UG9pbnQoY3R4LCB0aGlzLCB0aGlzLmNlbnRlclgsIHRoaXMuY2VudGVyWSk7XG4gICAgaWYgKHN0cm9rZSAmJiAhaXNJbWFnZU9yQ2FudmFzKG9wdGlvbnMucG9pbnRTdHlsZSkpIHtcbiAgICAgIGN0eC5zaGFkb3dDb2xvciA9IG9wdGlvbnMuYm9yZGVyU2hhZG93Q29sb3I7XG4gICAgICBjdHguc3Ryb2tlKCk7XG4gICAgfVxuICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgb3B0aW9ucy5ib3JkZXJXaWR0aCA9IGJvcmRlcldpZHRoO1xuICB9XG5cbiAgcmVzb2x2ZUVsZW1lbnRQcm9wZXJ0aWVzKGNoYXJ0LCBvcHRpb25zKSB7XG4gICAgY29uc3QgcHJvcGVydGllcyA9IHJlc29sdmVQb2ludFByb3BlcnRpZXMoY2hhcnQsIG9wdGlvbnMpO1xuICAgIHByb3BlcnRpZXMuaW5pdFByb3BlcnRpZXMgPSBpbml0QW5pbWF0aW9uUHJvcGVydGllcyhjaGFydCwgcHJvcGVydGllcywgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHByb3BlcnRpZXM7XG4gIH1cbn1cblxuUG9pbnRBbm5vdGF0aW9uLmlkID0gJ3BvaW50QW5ub3RhdGlvbic7XG5cblBvaW50QW5ub3RhdGlvbi5kZWZhdWx0cyA9IHtcbiAgYWRqdXN0U2NhbGVSYW5nZTogdHJ1ZSxcbiAgYmFja2dyb3VuZFNoYWRvd0NvbG9yOiAndHJhbnNwYXJlbnQnLFxuICBib3JkZXJEYXNoOiBbXSxcbiAgYm9yZGVyRGFzaE9mZnNldDogMCxcbiAgYm9yZGVyU2hhZG93Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gIGJvcmRlcldpZHRoOiAxLFxuICBkaXNwbGF5OiB0cnVlLFxuICBpbml0OiB1bmRlZmluZWQsXG4gIHBvaW50U3R5bGU6ICdjaXJjbGUnLFxuICByYWRpdXM6IDEwLFxuICByb3RhdGlvbjogMCxcbiAgc2hhZG93Qmx1cjogMCxcbiAgc2hhZG93T2Zmc2V0WDogMCxcbiAgc2hhZG93T2Zmc2V0WTogMCxcbiAgeEFkanVzdDogMCxcbiAgeE1heDogdW5kZWZpbmVkLFxuICB4TWluOiB1bmRlZmluZWQsXG4gIHhTY2FsZUlEOiB1bmRlZmluZWQsXG4gIHhWYWx1ZTogdW5kZWZpbmVkLFxuICB5QWRqdXN0OiAwLFxuICB5TWF4OiB1bmRlZmluZWQsXG4gIHlNaW46IHVuZGVmaW5lZCxcbiAgeVNjYWxlSUQ6IHVuZGVmaW5lZCxcbiAgeVZhbHVlOiB1bmRlZmluZWQsXG4gIHo6IDBcbn07XG5cblBvaW50QW5ub3RhdGlvbi5kZWZhdWx0Um91dGVzID0ge1xuICBib3JkZXJDb2xvcjogJ2NvbG9yJyxcbiAgYmFja2dyb3VuZENvbG9yOiAnY29sb3InXG59O1xuXG5jbGFzcyBQb2x5Z29uQW5ub3RhdGlvbiBleHRlbmRzIEVsZW1lbnQge1xuXG4gIGluUmFuZ2UobW91c2VYLCBtb3VzZVksIGF4aXMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICBpZiAoYXhpcyAhPT0gJ3gnICYmIGF4aXMgIT09ICd5Jykge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5yYWRpdXMgPj0gMC4xICYmIHRoaXMuZWxlbWVudHMubGVuZ3RoID4gMSAmJiBwb2ludElzSW5Qb2x5Z29uKHRoaXMuZWxlbWVudHMsIG1vdXNlWCwgbW91c2VZLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICB9XG4gICAgY29uc3Qgcm90YXRlZFBvaW50ID0gcm90YXRlZCh7eDogbW91c2VYLCB5OiBtb3VzZVl9LCB0aGlzLmdldENlbnRlclBvaW50KHVzZUZpbmFsUG9zaXRpb24pLCB0b1JhZGlhbnMoLXRoaXMub3B0aW9ucy5yb3RhdGlvbikpO1xuICAgIGNvbnN0IGF4aXNQb2ludHMgPSB0aGlzLmVsZW1lbnRzLm1hcCgocG9pbnQpID0+IGF4aXMgPT09ICd5JyA/IHBvaW50LmJZIDogcG9pbnQuYlgpO1xuICAgIGNvbnN0IHN0YXJ0ID0gTWF0aC5taW4oLi4uYXhpc1BvaW50cyk7XG4gICAgY29uc3QgZW5kID0gTWF0aC5tYXgoLi4uYXhpc1BvaW50cyk7XG4gICAgcmV0dXJuIHJvdGF0ZWRQb2ludFtheGlzXSA+PSBzdGFydCAmJiByb3RhdGVkUG9pbnRbYXhpc10gPD0gZW5kO1xuICB9XG5cbiAgZ2V0Q2VudGVyUG9pbnQodXNlRmluYWxQb3NpdGlvbikge1xuICAgIHJldHVybiBnZXRFbGVtZW50Q2VudGVyUG9pbnQodGhpcywgdXNlRmluYWxQb3NpdGlvbik7XG4gIH1cblxuICBkcmF3KGN0eCkge1xuICAgIGNvbnN0IHtlbGVtZW50cywgb3B0aW9uc30gPSB0aGlzO1xuICAgIGN0eC5zYXZlKCk7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLmJhY2tncm91bmRDb2xvcjtcbiAgICBzZXRTaGFkb3dTdHlsZShjdHgsIG9wdGlvbnMpO1xuICAgIGNvbnN0IHN0cm9rZSA9IHNldEJvcmRlclN0eWxlKGN0eCwgb3B0aW9ucyk7XG4gICAgbGV0IGZpcnN0ID0gdHJ1ZTtcbiAgICBmb3IgKGNvbnN0IGVsIG9mIGVsZW1lbnRzKSB7XG4gICAgICBpZiAoZmlyc3QpIHtcbiAgICAgICAgY3R4Lm1vdmVUbyhlbC54LCBlbC55KTtcbiAgICAgICAgZmlyc3QgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN0eC5saW5lVG8oZWwueCwgZWwueSk7XG4gICAgICB9XG4gICAgfVxuICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICBjdHguZmlsbCgpO1xuICAgIC8vIElmIG5vIGJvcmRlciwgZG9uJ3QgZHJhdyBpdFxuICAgIGlmIChzdHJva2UpIHtcbiAgICAgIGN0eC5zaGFkb3dDb2xvciA9IG9wdGlvbnMuYm9yZGVyU2hhZG93Q29sb3I7XG4gICAgICBjdHguc3Ryb2tlKCk7XG4gICAgfVxuICAgIGN0eC5yZXN0b3JlKCk7XG4gIH1cblxuICByZXNvbHZlRWxlbWVudFByb3BlcnRpZXMoY2hhcnQsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBwcm9wZXJ0aWVzID0gcmVzb2x2ZVBvaW50UHJvcGVydGllcyhjaGFydCwgb3B0aW9ucyk7XG4gICAgY29uc3Qge3NpZGVzLCByb3RhdGlvbn0gPSBvcHRpb25zO1xuICAgIGNvbnN0IGVsZW1lbnRzID0gW107XG4gICAgY29uc3QgYW5nbGUgPSAoMiAqIFBJKSAvIHNpZGVzO1xuICAgIGxldCByYWQgPSByb3RhdGlvbiAqIFJBRF9QRVJfREVHO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2lkZXM7IGkrKywgcmFkICs9IGFuZ2xlKSB7XG4gICAgICBjb25zdCBlbFByb3BzID0gYnVpbGRQb2ludEVsZW1lbnQocHJvcGVydGllcywgb3B0aW9ucywgcmFkKTtcbiAgICAgIGVsUHJvcHMuaW5pdFByb3BlcnRpZXMgPSBpbml0QW5pbWF0aW9uUHJvcGVydGllcyhjaGFydCwgcHJvcGVydGllcywgb3B0aW9ucyk7XG4gICAgICBlbGVtZW50cy5wdXNoKGVsUHJvcHMpO1xuICAgIH1cbiAgICBwcm9wZXJ0aWVzLmVsZW1lbnRzID0gZWxlbWVudHM7XG4gICAgcmV0dXJuIHByb3BlcnRpZXM7XG4gIH1cbn1cblxuUG9seWdvbkFubm90YXRpb24uaWQgPSAncG9seWdvbkFubm90YXRpb24nO1xuXG5Qb2x5Z29uQW5ub3RhdGlvbi5kZWZhdWx0cyA9IHtcbiAgYWRqdXN0U2NhbGVSYW5nZTogdHJ1ZSxcbiAgYmFja2dyb3VuZFNoYWRvd0NvbG9yOiAndHJhbnNwYXJlbnQnLFxuICBib3JkZXJDYXBTdHlsZTogJ2J1dHQnLFxuICBib3JkZXJEYXNoOiBbXSxcbiAgYm9yZGVyRGFzaE9mZnNldDogMCxcbiAgYm9yZGVySm9pblN0eWxlOiAnbWl0ZXInLFxuICBib3JkZXJTaGFkb3dDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgYm9yZGVyV2lkdGg6IDEsXG4gIGRpc3BsYXk6IHRydWUsXG4gIGluaXQ6IHVuZGVmaW5lZCxcbiAgcG9pbnQ6IHtcbiAgICByYWRpdXM6IDBcbiAgfSxcbiAgcmFkaXVzOiAxMCxcbiAgcm90YXRpb246IDAsXG4gIHNoYWRvd0JsdXI6IDAsXG4gIHNoYWRvd09mZnNldFg6IDAsXG4gIHNoYWRvd09mZnNldFk6IDAsXG4gIHNpZGVzOiAzLFxuICB4QWRqdXN0OiAwLFxuICB4TWF4OiB1bmRlZmluZWQsXG4gIHhNaW46IHVuZGVmaW5lZCxcbiAgeFNjYWxlSUQ6IHVuZGVmaW5lZCxcbiAgeFZhbHVlOiB1bmRlZmluZWQsXG4gIHlBZGp1c3Q6IDAsXG4gIHlNYXg6IHVuZGVmaW5lZCxcbiAgeU1pbjogdW5kZWZpbmVkLFxuICB5U2NhbGVJRDogdW5kZWZpbmVkLFxuICB5VmFsdWU6IHVuZGVmaW5lZCxcbiAgejogMFxufTtcblxuUG9seWdvbkFubm90YXRpb24uZGVmYXVsdFJvdXRlcyA9IHtcbiAgYm9yZGVyQ29sb3I6ICdjb2xvcicsXG4gIGJhY2tncm91bmRDb2xvcjogJ2NvbG9yJ1xufTtcblxuZnVuY3Rpb24gYnVpbGRQb2ludEVsZW1lbnQoe2NlbnRlclgsIGNlbnRlcll9LCB7cmFkaXVzLCBib3JkZXJXaWR0aH0sIHJhZCkge1xuICBjb25zdCBoYWxmQm9yZGVyID0gYm9yZGVyV2lkdGggLyAyO1xuICBjb25zdCBzaW4gPSBNYXRoLnNpbihyYWQpO1xuICBjb25zdCBjb3MgPSBNYXRoLmNvcyhyYWQpO1xuICBjb25zdCBwb2ludCA9IHt4OiBjZW50ZXJYICsgc2luICogcmFkaXVzLCB5OiBjZW50ZXJZIC0gY29zICogcmFkaXVzfTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAncG9pbnQnLFxuICAgIG9wdGlvblNjb3BlOiAncG9pbnQnLFxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgIHg6IHBvaW50LngsXG4gICAgICB5OiBwb2ludC55LFxuICAgICAgY2VudGVyWDogcG9pbnQueCxcbiAgICAgIGNlbnRlclk6IHBvaW50LnksXG4gICAgICBiWDogY2VudGVyWCArIHNpbiAqIChyYWRpdXMgKyBoYWxmQm9yZGVyKSxcbiAgICAgIGJZOiBjZW50ZXJZIC0gY29zICogKHJhZGl1cyArIGhhbGZCb3JkZXIpXG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBwb2ludElzSW5Qb2x5Z29uKHBvaW50cywgeCwgeSwgdXNlRmluYWxQb3NpdGlvbikge1xuICBsZXQgaXNJbnNpZGUgPSBmYWxzZTtcbiAgbGV0IEEgPSBwb2ludHNbcG9pbnRzLmxlbmd0aCAtIDFdLmdldFByb3BzKFsnYlgnLCAnYlknXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gIGZvciAoY29uc3QgcG9pbnQgb2YgcG9pbnRzKSB7XG4gICAgY29uc3QgQiA9IHBvaW50LmdldFByb3BzKFsnYlgnLCAnYlknXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgaWYgKChCLmJZID4geSkgIT09IChBLmJZID4geSkgJiYgeCA8IChBLmJYIC0gQi5iWCkgKiAoeSAtIEIuYlkpIC8gKEEuYlkgLSBCLmJZKSArIEIuYlgpIHtcbiAgICAgIGlzSW5zaWRlID0gIWlzSW5zaWRlO1xuICAgIH1cbiAgICBBID0gQjtcbiAgfVxuICByZXR1cm4gaXNJbnNpZGU7XG59XG5cbmNvbnN0IGFubm90YXRpb25UeXBlcyA9IHtcbiAgYm94OiBCb3hBbm5vdGF0aW9uLFxuICBlbGxpcHNlOiBFbGxpcHNlQW5ub3RhdGlvbixcbiAgbGFiZWw6IExhYmVsQW5ub3RhdGlvbixcbiAgbGluZTogTGluZUFubm90YXRpb24sXG4gIHBvaW50OiBQb2ludEFubm90YXRpb24sXG4gIHBvbHlnb246IFBvbHlnb25Bbm5vdGF0aW9uXG59O1xuXG4vKipcbiAqIFJlZ2lzdGVyIGZhbGxiYWNrIGZvciBhbm5vdGF0aW9uIGVsZW1lbnRzXG4gKiBGb3IgZXhhbXBsZSBsaW5lQW5ub3RhdGlvbiBvcHRpb25zIHdvdWxkIGJlIGxvb2tlZCB0aHJvdWdoOlxuICogLSB0aGUgYW5ub3RhdGlvbiBvYmplY3QgKG9wdGlvbnMucGx1Z2lucy5hbm5vdGF0aW9uLmFubm90YXRpb25zW2lkXSlcbiAqIC0gZWxlbWVudCBvcHRpb25zIChvcHRpb25zLmVsZW1lbnRzLmxpbmVBbm5vdGF0aW9uKVxuICogLSBlbGVtZW50IGRlZmF1bHRzIChkZWZhdWx0cy5lbGVtZW50cy5saW5lQW5ub3RhdGlvbilcbiAqIC0gYW5ub3RhdGlvbiBwbHVnaW4gZGVmYXVsdHMgKGRlZmF1bHRzLnBsdWdpbnMuYW5ub3RhdGlvbiwgdGhpcyBpcyB3aGF0IHdlIGFyZSByZWdpc3RlcmluZyBoZXJlKVxuICovXG5PYmplY3Qua2V5cyhhbm5vdGF0aW9uVHlwZXMpLmZvckVhY2goa2V5ID0+IHtcbiAgZGVmYXVsdHMuZGVzY3JpYmUoYGVsZW1lbnRzLiR7YW5ub3RhdGlvblR5cGVzW2tleV0uaWR9YCwge1xuICAgIF9mYWxsYmFjazogJ3BsdWdpbnMuYW5ub3RhdGlvbi5jb21tb24nXG4gIH0pO1xufSk7XG5cbmNvbnN0IGRpcmVjdFVwZGF0ZXIgPSB7XG4gIHVwZGF0ZTogT2JqZWN0LmFzc2lnblxufTtcblxuY29uc3QgaG9va3MkMSA9IGV2ZW50SG9va3MuY29uY2F0KGVsZW1lbnRIb29rcyk7XG5jb25zdCByZXNvbHZlID0gKHZhbHVlLCBvcHREZWZzKSA9PiBpc09iamVjdChvcHREZWZzKSA/IHJlc29sdmVPYmoodmFsdWUsIG9wdERlZnMpIDogdmFsdWU7XG5cblxuLyoqXG4gKiBAdHlwZWRlZiB7IGltcG9ydChcImNoYXJ0LmpzXCIpLkNoYXJ0IH0gQ2hhcnRcbiAqIEB0eXBlZGVmIHsgaW1wb3J0KFwiY2hhcnQuanNcIikuVXBkYXRlTW9kZSB9IFVwZGF0ZU1vZGVcbiAqIEB0eXBlZGVmIHsgaW1wb3J0KCcuLi8uLi90eXBlcy9vcHRpb25zJykuQW5ub3RhdGlvblBsdWdpbk9wdGlvbnMgfSBBbm5vdGF0aW9uUGx1Z2luT3B0aW9uc1xuICovXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHByb3BcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5jb25zdCBpc0luZGV4YWJsZSA9IChwcm9wKSA9PiBwcm9wID09PSAnY29sb3InIHx8IHByb3AgPT09ICdmb250JztcblxuLyoqXG4gKiBSZXNvbHZlIHRoZSBhbm5vdGF0aW9uIHR5cGUsIGNoZWNraW5nIGlmIGlzIHN1cHBvcnRlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbdHlwZT1saW5lXSAtIGFubm90YXRpb24gdHlwZVxuICogQHJldHVybnMge3N0cmluZ30gcmVzb2x2ZWQgYW5ub3RhdGlvbiB0eXBlXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVUeXBlKHR5cGUgPSAnbGluZScpIHtcbiAgaWYgKGFubm90YXRpb25UeXBlc1t0eXBlXSkge1xuICAgIHJldHVybiB0eXBlO1xuICB9XG4gIGNvbnNvbGUud2FybihgVW5rbm93biBhbm5vdGF0aW9uIHR5cGU6ICcke3R5cGV9JywgZGVmYXVsdGluZyB0byAnbGluZSdgKTtcbiAgcmV0dXJuICdsaW5lJztcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0NoYXJ0fSBjaGFydFxuICogQHBhcmFtIHtPYmplY3R9IHN0YXRlXG4gKiBAcGFyYW0ge0Fubm90YXRpb25QbHVnaW5PcHRpb25zfSBvcHRpb25zXG4gKiBAcGFyYW0ge1VwZGF0ZU1vZGV9IG1vZGVcbiAqL1xuZnVuY3Rpb24gdXBkYXRlRWxlbWVudHMoY2hhcnQsIHN0YXRlLCBvcHRpb25zLCBtb2RlKSB7XG4gIGNvbnN0IGFuaW1hdGlvbnMgPSByZXNvbHZlQW5pbWF0aW9ucyhjaGFydCwgb3B0aW9ucy5hbmltYXRpb25zLCBtb2RlKTtcblxuICBjb25zdCBhbm5vdGF0aW9ucyA9IHN0YXRlLmFubm90YXRpb25zO1xuICBjb25zdCBlbGVtZW50cyA9IHJlc3luY0VsZW1lbnRzKHN0YXRlLmVsZW1lbnRzLCBhbm5vdGF0aW9ucyk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbm5vdGF0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGFubm90YXRpb25PcHRpb25zID0gYW5ub3RhdGlvbnNbaV07XG4gICAgY29uc3QgZWxlbWVudCA9IGdldE9yQ3JlYXRlRWxlbWVudChlbGVtZW50cywgaSwgYW5ub3RhdGlvbk9wdGlvbnMudHlwZSk7XG4gICAgY29uc3QgcmVzb2x2ZXIgPSBhbm5vdGF0aW9uT3B0aW9ucy5zZXRDb250ZXh0KGdldENvbnRleHQoY2hhcnQsIGVsZW1lbnQsIGFubm90YXRpb25PcHRpb25zKSk7XG4gICAgY29uc3QgcHJvcGVydGllcyA9IGVsZW1lbnQucmVzb2x2ZUVsZW1lbnRQcm9wZXJ0aWVzKGNoYXJ0LCByZXNvbHZlcik7XG5cbiAgICBwcm9wZXJ0aWVzLnNraXAgPSB0b1NraXAocHJvcGVydGllcyk7XG5cbiAgICBpZiAoJ2VsZW1lbnRzJyBpbiBwcm9wZXJ0aWVzKSB7XG4gICAgICB1cGRhdGVTdWJFbGVtZW50cyhlbGVtZW50LCBwcm9wZXJ0aWVzLmVsZW1lbnRzLCByZXNvbHZlciwgYW5pbWF0aW9ucyk7XG4gICAgICAvLyBSZW1vdmUgdGhlIHN1Yi1lbGVtZW50IGRlZmluaXRpb25zIGZyb20gcHJvcGVydGllcywgc28gdGhlIGFjdHVhbCBlbGVtZW50c1xuICAgICAgLy8gYXJlIG5vdCBvdmVyd3JpdHRlbiBieSB0aGVpciBkZWZpbml0aW9uc1xuICAgICAgZGVsZXRlIHByb3BlcnRpZXMuZWxlbWVudHM7XG4gICAgfVxuXG4gICAgaWYgKCFkZWZpbmVkKGVsZW1lbnQueCkpIHtcbiAgICAgIC8vIElmIHRoZSBlbGVtZW50IGlzIG5ld2x5IGNyZWF0ZWQsIGFzc2luZyB0aGUgcHJvcGVydGllcyBkaXJlY3RseSAtIHRvXG4gICAgICAvLyBtYWtlIHRoZW0gcmVhZGlseSBhd2FpbGFibGUgdG8gYW55IHNjcmlwdGFibGUgb3B0aW9ucy4gSWYgd2UgZG8gbm90IGRvIHRoaXMsXG4gICAgICAvLyB0aGUgcHJvcGVydGllcyByZXRydW5lZCBieSBgcmVzb2x2ZUVsZW1lbnRQcm9wZXJ0aWVzYCBhcmUgYXZhaWxhYmxlIG9ubHlcbiAgICAgIC8vIGFmdGVyIG9wdGlvbnMgcmVzb2x1dGlvbi5cbiAgICAgIE9iamVjdC5hc3NpZ24oZWxlbWVudCwgcHJvcGVydGllcyk7XG4gICAgfVxuXG4gICAgT2JqZWN0LmFzc2lnbihlbGVtZW50LCBwcm9wZXJ0aWVzLmluaXRQcm9wZXJ0aWVzKTtcbiAgICBwcm9wZXJ0aWVzLm9wdGlvbnMgPSByZXNvbHZlQW5ub3RhdGlvbk9wdGlvbnMocmVzb2x2ZXIpO1xuXG4gICAgYW5pbWF0aW9ucy51cGRhdGUoZWxlbWVudCwgcHJvcGVydGllcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdG9Ta2lwKHByb3BlcnRpZXMpIHtcbiAgcmV0dXJuIGlzTmFOKHByb3BlcnRpZXMueCkgfHwgaXNOYU4ocHJvcGVydGllcy55KTtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUFuaW1hdGlvbnMoY2hhcnQsIGFuaW1PcHRzLCBtb2RlKSB7XG4gIGlmIChtb2RlID09PSAncmVzZXQnIHx8IG1vZGUgPT09ICdub25lJyB8fCBtb2RlID09PSAncmVzaXplJykge1xuICAgIHJldHVybiBkaXJlY3RVcGRhdGVyO1xuICB9XG4gIHJldHVybiBuZXcgQW5pbWF0aW9ucyhjaGFydCwgYW5pbU9wdHMpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVTdWJFbGVtZW50cyhtYWluRWxlbWVudCwgZWxlbWVudHMsIHJlc29sdmVyLCBhbmltYXRpb25zKSB7XG4gIGNvbnN0IHN1YkVsZW1lbnRzID0gbWFpbkVsZW1lbnQuZWxlbWVudHMgfHwgKG1haW5FbGVtZW50LmVsZW1lbnRzID0gW10pO1xuICBzdWJFbGVtZW50cy5sZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBkZWZpbml0aW9uID0gZWxlbWVudHNbaV07XG4gICAgY29uc3QgcHJvcGVydGllcyA9IGRlZmluaXRpb24ucHJvcGVydGllcztcbiAgICBjb25zdCBzdWJFbGVtZW50ID0gZ2V0T3JDcmVhdGVFbGVtZW50KHN1YkVsZW1lbnRzLCBpLCBkZWZpbml0aW9uLnR5cGUsIGRlZmluaXRpb24uaW5pdFByb3BlcnRpZXMpO1xuICAgIGNvbnN0IHN1YlJlc29sdmVyID0gcmVzb2x2ZXJbZGVmaW5pdGlvbi5vcHRpb25TY29wZV0ub3ZlcnJpZGUoZGVmaW5pdGlvbik7XG4gICAgcHJvcGVydGllcy5vcHRpb25zID0gcmVzb2x2ZUFubm90YXRpb25PcHRpb25zKHN1YlJlc29sdmVyKTtcbiAgICBhbmltYXRpb25zLnVwZGF0ZShzdWJFbGVtZW50LCBwcm9wZXJ0aWVzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRPckNyZWF0ZUVsZW1lbnQoZWxlbWVudHMsIGluZGV4LCB0eXBlLCBpbml0UHJvcGVydGllcykge1xuICBjb25zdCBlbGVtZW50Q2xhc3MgPSBhbm5vdGF0aW9uVHlwZXNbcmVzb2x2ZVR5cGUodHlwZSldO1xuICBsZXQgZWxlbWVudCA9IGVsZW1lbnRzW2luZGV4XTtcbiAgaWYgKCFlbGVtZW50IHx8ICEoZWxlbWVudCBpbnN0YW5jZW9mIGVsZW1lbnRDbGFzcykpIHtcbiAgICBlbGVtZW50ID0gZWxlbWVudHNbaW5kZXhdID0gbmV3IGVsZW1lbnRDbGFzcygpO1xuICAgIE9iamVjdC5hc3NpZ24oZWxlbWVudCwgaW5pdFByb3BlcnRpZXMpO1xuICB9XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5mdW5jdGlvbiByZXNvbHZlQW5ub3RhdGlvbk9wdGlvbnMocmVzb2x2ZXIpIHtcbiAgY29uc3QgZWxlbWVudENsYXNzID0gYW5ub3RhdGlvblR5cGVzW3Jlc29sdmVUeXBlKHJlc29sdmVyLnR5cGUpXTtcbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIHJlc3VsdC5pZCA9IHJlc29sdmVyLmlkO1xuICByZXN1bHQudHlwZSA9IHJlc29sdmVyLnR5cGU7XG4gIHJlc3VsdC5kcmF3VGltZSA9IHJlc29sdmVyLmRyYXdUaW1lO1xuICBPYmplY3QuYXNzaWduKHJlc3VsdCxcbiAgICByZXNvbHZlT2JqKHJlc29sdmVyLCBlbGVtZW50Q2xhc3MuZGVmYXVsdHMpLFxuICAgIHJlc29sdmVPYmoocmVzb2x2ZXIsIGVsZW1lbnRDbGFzcy5kZWZhdWx0Um91dGVzKSk7XG4gIGZvciAoY29uc3QgaG9vayBvZiBob29rcyQxKSB7XG4gICAgcmVzdWx0W2hvb2tdID0gcmVzb2x2ZXJbaG9va107XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZU9iaihyZXNvbHZlciwgZGVmcykge1xuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgZm9yIChjb25zdCBwcm9wIG9mIE9iamVjdC5rZXlzKGRlZnMpKSB7XG4gICAgY29uc3Qgb3B0RGVmcyA9IGRlZnNbcHJvcF07XG4gICAgY29uc3QgdmFsdWUgPSByZXNvbHZlcltwcm9wXTtcbiAgICBpZiAoaXNJbmRleGFibGUocHJvcCkgJiYgaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHJlc3VsdFtwcm9wXSA9IHZhbHVlLm1hcCgoaXRlbSkgPT4gcmVzb2x2ZShpdGVtLCBvcHREZWZzKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtwcm9wXSA9IHJlc29sdmUodmFsdWUsIG9wdERlZnMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBnZXRDb250ZXh0KGNoYXJ0LCBlbGVtZW50LCBhbm5vdGF0aW9uKSB7XG4gIHJldHVybiBlbGVtZW50LiRjb250ZXh0IHx8IChlbGVtZW50LiRjb250ZXh0ID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKGNoYXJ0LmdldENvbnRleHQoKSksIHtcbiAgICBlbGVtZW50LFxuICAgIGlkOiBhbm5vdGF0aW9uLmlkLFxuICAgIHR5cGU6ICdhbm5vdGF0aW9uJ1xuICB9KSk7XG59XG5cbmZ1bmN0aW9uIHJlc3luY0VsZW1lbnRzKGVsZW1lbnRzLCBhbm5vdGF0aW9ucykge1xuICBjb25zdCBjb3VudCA9IGFubm90YXRpb25zLmxlbmd0aDtcbiAgY29uc3Qgc3RhcnQgPSBlbGVtZW50cy5sZW5ndGg7XG5cbiAgaWYgKHN0YXJ0IDwgY291bnQpIHtcbiAgICBjb25zdCBhZGQgPSBjb3VudCAtIHN0YXJ0O1xuICAgIGVsZW1lbnRzLnNwbGljZShzdGFydCwgMCwgLi4ubmV3IEFycmF5KGFkZCkpO1xuICB9IGVsc2UgaWYgKHN0YXJ0ID4gY291bnQpIHtcbiAgICBlbGVtZW50cy5zcGxpY2UoY291bnQsIHN0YXJ0IC0gY291bnQpO1xuICB9XG4gIHJldHVybiBlbGVtZW50cztcbn1cblxudmFyIHZlcnNpb24gPSBcIjMuMC4xXCI7XG5cbmNvbnN0IGNoYXJ0U3RhdGVzID0gbmV3IE1hcCgpO1xuY29uc3QgaG9va3MgPSBldmVudEhvb2tzLmNvbmNhdChlbGVtZW50SG9va3MpO1xuXG52YXIgYW5ub3RhdGlvbiA9IHtcbiAgaWQ6ICdhbm5vdGF0aW9uJyxcblxuICB2ZXJzaW9uLFxuXG4gIGJlZm9yZVJlZ2lzdGVyKCkge1xuICAgIHJlcXVpcmVWZXJzaW9uKCdjaGFydC5qcycsICc0LjAnLCBDaGFydC52ZXJzaW9uKTtcbiAgfSxcblxuICBhZnRlclJlZ2lzdGVyKCkge1xuICAgIENoYXJ0LnJlZ2lzdGVyKGFubm90YXRpb25UeXBlcyk7XG4gIH0sXG5cbiAgYWZ0ZXJVbnJlZ2lzdGVyKCkge1xuICAgIENoYXJ0LnVucmVnaXN0ZXIoYW5ub3RhdGlvblR5cGVzKTtcbiAgfSxcblxuICBiZWZvcmVJbml0KGNoYXJ0KSB7XG4gICAgY2hhcnRTdGF0ZXMuc2V0KGNoYXJ0LCB7XG4gICAgICBhbm5vdGF0aW9uczogW10sXG4gICAgICBlbGVtZW50czogW10sXG4gICAgICB2aXNpYmxlRWxlbWVudHM6IFtdLFxuICAgICAgbGlzdGVuZXJzOiB7fSxcbiAgICAgIGxpc3RlbmVkOiBmYWxzZSxcbiAgICAgIG1vdmVMaXN0ZW5lZDogZmFsc2UsXG4gICAgICBob29rczoge30sXG4gICAgICBob29rZWQ6IGZhbHNlLFxuICAgICAgaG92ZXJlZDogW11cbiAgICB9KTtcbiAgfSxcblxuICBiZWZvcmVVcGRhdGUoY2hhcnQsIGFyZ3MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBzdGF0ZSA9IGNoYXJ0U3RhdGVzLmdldChjaGFydCk7XG4gICAgY29uc3QgYW5ub3RhdGlvbnMgPSBzdGF0ZS5hbm5vdGF0aW9ucyA9IFtdO1xuXG4gICAgbGV0IGFubm90YXRpb25PcHRpb25zID0gb3B0aW9ucy5hbm5vdGF0aW9ucztcbiAgICBpZiAoaXNPYmplY3QoYW5ub3RhdGlvbk9wdGlvbnMpKSB7XG4gICAgICBPYmplY3Qua2V5cyhhbm5vdGF0aW9uT3B0aW9ucykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGFubm90YXRpb25PcHRpb25zW2tleV07XG4gICAgICAgIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgICB2YWx1ZS5pZCA9IGtleTtcbiAgICAgICAgICBhbm5vdGF0aW9ucy5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KGFubm90YXRpb25PcHRpb25zKSkge1xuICAgICAgYW5ub3RhdGlvbnMucHVzaCguLi5hbm5vdGF0aW9uT3B0aW9ucyk7XG4gICAgfVxuICAgIHZlcmlmeVNjYWxlT3B0aW9ucyhhbm5vdGF0aW9ucywgY2hhcnQuc2NhbGVzKTtcbiAgfSxcblxuICBhZnRlckRhdGFMaW1pdHMoY2hhcnQsIGFyZ3MpIHtcbiAgICBjb25zdCBzdGF0ZSA9IGNoYXJ0U3RhdGVzLmdldChjaGFydCk7XG4gICAgYWRqdXN0U2NhbGVSYW5nZShjaGFydCwgYXJncy5zY2FsZSwgc3RhdGUuYW5ub3RhdGlvbnMuZmlsdGVyKGEgPT4gYS5kaXNwbGF5ICYmIGEuYWRqdXN0U2NhbGVSYW5nZSkpO1xuICB9LFxuXG4gIGFmdGVyVXBkYXRlKGNoYXJ0LCBhcmdzLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgc3RhdGUgPSBjaGFydFN0YXRlcy5nZXQoY2hhcnQpO1xuICAgIHVwZGF0ZUxpc3RlbmVycyhjaGFydCwgc3RhdGUsIG9wdGlvbnMpO1xuICAgIHVwZGF0ZUVsZW1lbnRzKGNoYXJ0LCBzdGF0ZSwgb3B0aW9ucywgYXJncy5tb2RlKTtcbiAgICBzdGF0ZS52aXNpYmxlRWxlbWVudHMgPSBzdGF0ZS5lbGVtZW50cy5maWx0ZXIoZWwgPT4gIWVsLnNraXAgJiYgZWwub3B0aW9ucy5kaXNwbGF5KTtcbiAgICB1cGRhdGVIb29rcyhjaGFydCwgc3RhdGUsIG9wdGlvbnMpO1xuICB9LFxuXG4gIGJlZm9yZURhdGFzZXRzRHJhdyhjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICBkcmF3KGNoYXJ0LCAnYmVmb3JlRGF0YXNldHNEcmF3Jywgb3B0aW9ucy5jbGlwKTtcbiAgfSxcblxuICBhZnRlckRhdGFzZXRzRHJhdyhjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICBkcmF3KGNoYXJ0LCAnYWZ0ZXJEYXRhc2V0c0RyYXcnLCBvcHRpb25zLmNsaXApO1xuICB9LFxuXG4gIGJlZm9yZURyYXcoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgZHJhdyhjaGFydCwgJ2JlZm9yZURyYXcnLCBvcHRpb25zLmNsaXApO1xuICB9LFxuXG4gIGFmdGVyRHJhdyhjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICBkcmF3KGNoYXJ0LCAnYWZ0ZXJEcmF3Jywgb3B0aW9ucy5jbGlwKTtcbiAgfSxcblxuICBiZWZvcmVFdmVudChjaGFydCwgYXJncywgb3B0aW9ucykge1xuICAgIGNvbnN0IHN0YXRlID0gY2hhcnRTdGF0ZXMuZ2V0KGNoYXJ0KTtcbiAgICBpZiAoaGFuZGxlRXZlbnQoc3RhdGUsIGFyZ3MuZXZlbnQsIG9wdGlvbnMpKSB7XG4gICAgICBhcmdzLmNoYW5nZWQgPSB0cnVlO1xuICAgIH1cbiAgfSxcblxuICBhZnRlckRlc3Ryb3koY2hhcnQpIHtcbiAgICBjaGFydFN0YXRlcy5kZWxldGUoY2hhcnQpO1xuICB9LFxuXG4gIF9nZXRTdGF0ZShjaGFydCkge1xuICAgIHJldHVybiBjaGFydFN0YXRlcy5nZXQoY2hhcnQpO1xuICB9LFxuXG4gIGRlZmF1bHRzOiB7XG4gICAgYW5pbWF0aW9uczoge1xuICAgICAgbnVtYmVyczoge1xuICAgICAgICBwcm9wZXJ0aWVzOiBbJ3gnLCAneScsICd4MicsICd5MicsICd3aWR0aCcsICdoZWlnaHQnLCAnY2VudGVyWCcsICdjZW50ZXJZJywgJ3BvaW50WCcsICdwb2ludFknLCAncmFkaXVzJ10sXG4gICAgICAgIHR5cGU6ICdudW1iZXInXG4gICAgICB9LFxuICAgIH0sXG4gICAgY2xpcDogdHJ1ZSxcbiAgICBpbnRlcmFjdGlvbjoge1xuICAgICAgbW9kZTogdW5kZWZpbmVkLFxuICAgICAgYXhpczogdW5kZWZpbmVkLFxuICAgICAgaW50ZXJzZWN0OiB1bmRlZmluZWRcbiAgICB9LFxuICAgIGNvbW1vbjoge1xuICAgICAgZHJhd1RpbWU6ICdhZnRlckRhdGFzZXRzRHJhdycsXG4gICAgICBpbml0OiBmYWxzZSxcbiAgICAgIGxhYmVsOiB7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGRlc2NyaXB0b3JzOiB7XG4gICAgX2luZGV4YWJsZTogZmFsc2UsXG4gICAgX3NjcmlwdGFibGU6IChwcm9wKSA9PiAhaG9va3MuaW5jbHVkZXMocHJvcCkgJiYgcHJvcCAhPT0gJ2luaXQnLFxuICAgIGFubm90YXRpb25zOiB7XG4gICAgICBfYWxsS2V5czogZmFsc2UsXG4gICAgICBfZmFsbGJhY2s6IChwcm9wLCBvcHRzKSA9PiBgZWxlbWVudHMuJHthbm5vdGF0aW9uVHlwZXNbcmVzb2x2ZVR5cGUob3B0cy50eXBlKV0uaWR9YFxuICAgIH0sXG4gICAgaW50ZXJhY3Rpb246IHtcbiAgICAgIF9mYWxsYmFjazogdHJ1ZVxuICAgIH0sXG4gICAgY29tbW9uOiB7XG4gICAgICBsYWJlbDoge1xuICAgICAgICBfaW5kZXhhYmxlOiBpc0luZGV4YWJsZSxcbiAgICAgICAgX2ZhbGxiYWNrOiB0cnVlXG4gICAgICB9LFxuICAgICAgX2luZGV4YWJsZTogaXNJbmRleGFibGVcbiAgICB9XG4gIH0sXG5cbiAgYWRkaXRpb25hbE9wdGlvblNjb3BlczogWycnXVxufTtcblxuZnVuY3Rpb24gZHJhdyhjaGFydCwgY2FsbGVyLCBjbGlwKSB7XG4gIGNvbnN0IHtjdHgsIGNoYXJ0QXJlYX0gPSBjaGFydDtcbiAgY29uc3Qgc3RhdGUgPSBjaGFydFN0YXRlcy5nZXQoY2hhcnQpO1xuXG4gIGlmIChjbGlwKSB7XG4gICAgY2xpcEFyZWEoY3R4LCBjaGFydEFyZWEpO1xuICB9XG5cbiAgY29uc3QgZHJhd2FibGVFbGVtZW50cyA9IGdldERyYXdhYmxlRWxlbWVudHMoc3RhdGUudmlzaWJsZUVsZW1lbnRzLCBjYWxsZXIpLnNvcnQoKGEsIGIpID0+IGEuZWxlbWVudC5vcHRpb25zLnogLSBiLmVsZW1lbnQub3B0aW9ucy56KTtcbiAgZm9yIChjb25zdCBpdGVtIG9mIGRyYXdhYmxlRWxlbWVudHMpIHtcbiAgICBkcmF3RWxlbWVudChjdHgsIGNoYXJ0QXJlYSwgc3RhdGUsIGl0ZW0pO1xuICB9XG5cbiAgaWYgKGNsaXApIHtcbiAgICB1bmNsaXBBcmVhKGN0eCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RHJhd2FibGVFbGVtZW50cyhlbGVtZW50cywgY2FsbGVyKSB7XG4gIGNvbnN0IGRyYXdhYmxlRWxlbWVudHMgPSBbXTtcbiAgZm9yIChjb25zdCBlbCBvZiBlbGVtZW50cykge1xuICAgIGlmIChlbC5vcHRpb25zLmRyYXdUaW1lID09PSBjYWxsZXIpIHtcbiAgICAgIGRyYXdhYmxlRWxlbWVudHMucHVzaCh7ZWxlbWVudDogZWwsIG1haW46IHRydWV9KTtcbiAgICB9XG4gICAgaWYgKGVsLmVsZW1lbnRzICYmIGVsLmVsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgZm9yIChjb25zdCBzdWIgb2YgZWwuZWxlbWVudHMpIHtcbiAgICAgICAgaWYgKHN1Yi5vcHRpb25zLmRpc3BsYXkgJiYgc3ViLm9wdGlvbnMuZHJhd1RpbWUgPT09IGNhbGxlcikge1xuICAgICAgICAgIGRyYXdhYmxlRWxlbWVudHMucHVzaCh7ZWxlbWVudDogc3VifSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRyYXdhYmxlRWxlbWVudHM7XG59XG5cbmZ1bmN0aW9uIGRyYXdFbGVtZW50KGN0eCwgY2hhcnRBcmVhLCBzdGF0ZSwgaXRlbSkge1xuICBjb25zdCBlbCA9IGl0ZW0uZWxlbWVudDtcbiAgaWYgKGl0ZW0ubWFpbikge1xuICAgIGludm9rZUhvb2soc3RhdGUsIGVsLCAnYmVmb3JlRHJhdycpO1xuICAgIGVsLmRyYXcoY3R4LCBjaGFydEFyZWEpO1xuICAgIGludm9rZUhvb2soc3RhdGUsIGVsLCAnYWZ0ZXJEcmF3Jyk7XG4gIH0gZWxzZSB7XG4gICAgZWwuZHJhdyhjdHgsIGNoYXJ0QXJlYSk7XG4gIH1cbn1cblxuZXhwb3J0IHsgYW5ub3RhdGlvbiBhcyBkZWZhdWx0IH07XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vR3JhcGguY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9HcmFwaC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgQ2hhcnQgZnJvbSBcImNoYXJ0LmpzL2F1dG9cIjtcbi8vIGl0J3MgYWxyZWFkeSBpbiBkZXBlbmRlbmNpZXMsIHRoaXMgaXMgd2VpcmQuLi5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXNcbmltcG9ydCBhbm5vdGF0aW9uUGx1Z2luIGZyb20gXCJjaGFydGpzLXBsdWdpbi1hbm5vdGF0aW9uXCI7XG5pbXBvcnQgUHVic3ViIGZyb20gXCIuLi9QdWJzdWJcIjtcbmltcG9ydCBDYWNoZSBmcm9tIFwiLi9DYWNoZVwiO1xuaW1wb3J0IFwiLi4vLi4vY3NzL2NvbXBvbmVudHMvR3JhcGguY3NzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdyYXBoIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgQ2hhcnQucmVnaXN0ZXIoYW5ub3RhdGlvblBsdWdpbik7XG4gICAgdGhpcy5jb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRoaXMuY29udGFpbmVyLmlkID0gXCJncmFwaENvbnRhaW5lclwiO1xuXG4gICAgdGhpcy5idG5CYXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRoaXMuYnRuQmFyLmlkID0gXCJidG5CYXJcIjtcblxuICAgIHRoaXMuYnRuVGVtcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGhpcy5idG5UZW1wLmlubmVyVGV4dCA9IFwiVGVtcGVyYXR1cmVcIjtcbiAgICB0aGlzLmJ0blRlbXAuaWQgPSBcImJ0blRlbXBcIjtcbiAgICB0aGlzLmJ0blRlbXAuY2xhc3NMaXN0LmFkZChcInNlbGVjdGVkXCIpO1xuXG4gICAgdGhpcy5idG5SYWluID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0aGlzLmJ0blJhaW4uaW5uZXJUZXh0ID0gXCJDaGFuY2Ugb2YgcmFpblwiO1xuICAgIHRoaXMuYnRuUmFpbi5pZCA9IFwiYnRuUmFpblwiO1xuXG4gICAgdGhpcy5zZXR0aW5nV2hpY2hHcmFwaCA9IFwidGVtcFwiOyAvLyBvciAncmFpbidcblxuICAgIHRoaXMuYnRuQmFyLmFwcGVuZCh0aGlzLmJ0blRlbXAsIHRoaXMuYnRuUmFpbik7XG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kKHRoaXMuYnRuQmFyKTtcbiAgICB0aGlzLmJpbmRFdmVudHMoKTtcbiAgfVxuXG4gIGJpbmRFdmVudHMoKSB7XG4gICAgUHVic3ViLm9uKFwicmVuZGVyR3JhcGhcIiwgKGluZGV4KSA9PiB7XG4gICAgICBsZXQgcHJvcGVydHk7XG4gICAgICBpZiAodGhpcy5zZXR0aW5nV2hpY2hHcmFwaCA9PT0gXCJ0ZW1wXCIpIHtcbiAgICAgICAgcHJvcGVydHkgPSBgdGVtcF8ke0NhY2hlLnRlbXBVbml0c31gO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnNldHRpbmdXaGljaEdyYXBoID09PSBcInJhaW5cIikge1xuICAgICAgICBwcm9wZXJ0eSA9IGBjaGFuY2Vfb2ZfcmFpbmA7XG4gICAgICB9XG4gICAgICBjb25zdCB0b1BhcnNlID0gT2JqZWN0LnZhbHVlcyhcbiAgICAgICAgQ2FjaGUuY2FjaGVkRGF0YS5mb3JlY2FzdC5mb3JlY2FzdGRheVtpbmRleF0uaG91cixcbiAgICAgICk7XG4gICAgICBjb25zdCBwYXJzZWREYXRhID0gW107XG4gICAgICB0b1BhcnNlLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgaG91ciA9IG5ldyBEYXRlKGVsZW1lbnQudGltZSkuZ2V0SG91cnMoKTtcbiAgICAgICAgcGFyc2VkRGF0YS5wdXNoKHtcbiAgICAgICAgICBob3VyLFxuICAgICAgICAgIHRlbXA6IGVsZW1lbnRbcHJvcGVydHldLFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgY29uc3QgaXNDdXJyZW50RGF5ID0gaW5kZXggPT09IDA7XG4gICAgICB0aGlzLnJlbmRlcih7IHBhcnNlZERhdGEsIGlzQ3VycmVudERheSB9KTtcbiAgICB9KTtcblxuICAgIHRoaXMuYnRuVGVtcC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5zZXR0aW5nV2hpY2hHcmFwaCA9IFwidGVtcFwiO1xuICAgICAgdGhpcy5idG5UZW1wLmNsYXNzTGlzdC5hZGQoXCJzZWxlY3RlZFwiKTtcbiAgICAgIHRoaXMuYnRuUmFpbi5jbGFzc0xpc3QucmVtb3ZlKFwic2VsZWN0ZWRcIik7XG5cbiAgICAgIFB1YnN1Yi5lbWl0KFwicmVuZGVyR3JhcGhcIiwgQ2FjaGUuc2VsZWN0ZWREYXkpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5idG5SYWluLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICB0aGlzLnNldHRpbmdXaGljaEdyYXBoID0gXCJyYWluXCI7XG4gICAgICB0aGlzLmJ0blJhaW4uY2xhc3NMaXN0LmFkZChcInNlbGVjdGVkXCIpO1xuICAgICAgdGhpcy5idG5UZW1wLmNsYXNzTGlzdC5yZW1vdmUoXCJzZWxlY3RlZFwiKTtcblxuICAgICAgUHVic3ViLmVtaXQoXCJyZW5kZXJHcmFwaFwiLCBDYWNoZS5zZWxlY3RlZERheSk7XG4gICAgfSk7XG4gIH1cblxuICByZW5kZXIoZGF0YSkge1xuICAgIGNvbnN0IGxpbmVOb3cgPSBkYXRhLmlzQ3VycmVudERheSA/IDEgOiAwO1xuICAgIGNvbnN0IGxpbmVOb3dWYWx1ZSA9IG5ldyBEYXRlKFxuICAgICAgQ2FjaGUuY2FjaGVkRGF0YS5jdXJyZW50Lmxhc3RfdXBkYXRlZCxcbiAgICApLmdldEhvdXJzKCk7XG4gICAgbGV0IHVuaXRzO1xuICAgIGxldCBjb2xvcjtcbiAgICBpZiAodGhpcy5zZXR0aW5nV2hpY2hHcmFwaCA9PT0gXCJ0ZW1wXCIpIHtcbiAgICAgIHVuaXRzID0gXCLCsFwiO1xuICAgICAgY29sb3IgPSBcIiMxQTgzRERcIjtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc2V0dGluZ1doaWNoR3JhcGggPT09IFwicmFpblwiKSB7XG4gICAgICB1bml0cyA9IFwiJVwiO1xuICAgICAgY29sb3IgPSBcIiNkZDFhNzlcIjtcbiAgICB9XG4gICAgaWYgKHRoaXMuY29udGFpbmVyLmNvbnRhaW5zKHRoaXMuY2FudmFzKSkge1xuICAgICAgdGhpcy5jb250YWluZXIucmVtb3ZlQ2hpbGQodGhpcy5jYW52YXMpO1xuICAgIH1cbiAgICB0aGlzLmNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kKHRoaXMuY2FudmFzKTtcblxuICAgIHRoaXMuY2FjaGVkQ2hhcnQgPSBuZXcgQ2hhcnQodGhpcy5jYW52YXMsIHtcbiAgICAgIHR5cGU6IFwibGluZVwiLFxuICAgICAgZGF0YToge1xuICAgICAgICBsYWJlbHM6IGRhdGEucGFyc2VkRGF0YS5tYXAoKHJvdykgPT4gYCR7cm93LmhvdXJ9OjAwYCksXG4gICAgICAgIGRhdGFzZXRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZGF0YTogZGF0YS5wYXJzZWREYXRhLm1hcCgocm93KSA9PiByb3cudGVtcCksXG4gICAgICAgICAgICBib3JkZXJDb2xvcjogY29sb3IsXG4gICAgICAgICAgICB0ZW5zaW9uOiAwLjIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH0sXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIHNjYWxlczoge1xuICAgICAgICAgIHk6IHtcbiAgICAgICAgICAgIGJlZ2luQXRaZXJvOiBmYWxzZSxcbiAgICAgICAgICAgIHRpY2tzOiB7XG4gICAgICAgICAgICAgIC8vIEFkZCB1bml0cyB0byB5LWF4aXMgbGFiZWxzXG4gICAgICAgICAgICAgIGNhbGxiYWNrKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke3ZhbHVlfSR7dW5pdHN9YDtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgc3RlcFNpemU6IDEsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIG1haW50YWluQXNwZWN0UmF0aW86IGZhbHNlLFxuICAgICAgICByZXNwb25zaXZlOiB0cnVlLFxuICAgICAgICBwbHVnaW5zOiB7XG4gICAgICAgICAgYW5ub3RhdGlvbjoge1xuICAgICAgICAgICAgYW5ub3RhdGlvbnM6IHtcbiAgICAgICAgICAgICAgbGluZTE6IHtcbiAgICAgICAgICAgICAgICBhZGp1c3RTY2FsZVJhbmdlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGRyYXdUaW1lOiBcImFmdGVyRGF0YXNldHNEcmF3XCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJsaW5lXCIsXG4gICAgICAgICAgICAgICAgc2NhbGVJRDogXCJ4XCIsXG4gICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IFwib3JhbmdlXCIsXG4gICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IGxpbmVOb3csXG4gICAgICAgICAgICAgICAgdmFsdWU6IGxpbmVOb3dWYWx1ZSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGZhbHNlLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIGFubm90YXRpb25zOiB7XG4gICAgICAgICAgbGluZTE6IHtcbiAgICAgICAgICAgIC8qIGxhYmVsOiB7XG4gICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgICAgICAgIGNvbnRlbnQ6IFwiTk9XXCIsIFxuICAgICAgICAgICAgICBjb2xvcjogXCJ3aGl0ZVwiLFxuICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwib3JhbmdlXCIsXG4gICAgICAgICAgICAgIHBvc2l0aW9uOiBcImNlbnRlclwiLFxuICAgICAgICAgICAgfSwgKi9cbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgRm9vdGVyIHtcbiAgI3llYXI7XG5cbiAgI291dHB1dDtcblxuICBjb25zdHJ1Y3Rvcih5ZWFyKSB7XG4gICAgdGhpcy4jeWVhciA9IHllYXI7XG4gICAgdGhpcy4jb3V0cHV0ID0gdGhpcy4jcmVuZGVyKCk7XG4gICAgLy8gdGhpcy4jYmluZEV2ZW50cygpO1xuICB9XG5cbiAgI3JlbmRlcigpIHtcbiAgICBjb25zdCBjdXJyZW50WWVhciA9IG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKTtcbiAgICBsZXQgZm9vdGVyU3RyaW5nO1xuICAgIGNvbnN0IHllYXIgPSB0aGlzLiN5ZWFyLnRvU3RyaW5nKCk7XG4gICAgZm9vdGVyU3RyaW5nID0geWVhcjtcbiAgICBpZiAoIXllYXIuaW5jbHVkZXMoY3VycmVudFllYXIpKSB7XG4gICAgICBmb290ZXJTdHJpbmcgPSBgJHtmb290ZXJTdHJpbmd9LSR7Y3VycmVudFllYXJ9IC0gYDtcbiAgICB9XG4gICAgY29uc3QgZGl2Rm9vdGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZvb3RlclwiKTtcbiAgICBkaXZGb290ZXIuaW5uZXJIVE1MID0gYFxuICAgICAgICAgICAgPHNtYWxsPlxuICAgICAgICAgICAgICAgICZjb3B5OyBDb3B5cmlnaHQgJHtmb290ZXJTdHJpbmd9XG4gICAgICAgICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vZ2l0aHViLmNvbS9wb3JrZW52b2xmXCIgdGFyZ2V0PVwi4oCdX2JsYW5r4oCdXCI+XG4gICAgICAgICAgICAgICAgICAgIFBvcmtlbnbDtmxmXG4gICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgPC9zbWFsbD5cbiAgICAgICAgICAgIGA7XG4gICAgZGl2Rm9vdGVyLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcbiAgICBkaXZGb290ZXIuc3R5bGUuanVzdGlmeUNvbnRlbnQgPSBcImNlbnRlclwiO1xuICAgIGRpdkZvb3Rlci5zdHlsZS5hbGlnbkl0ZW1zID0gXCJjZW50ZXJcIjtcbiAgICBkaXZGb290ZXIuc3R5bGUuY29sb3IgPSBcImdyZXlcIjtcbiAgICBkaXZGb290ZXIuc3R5bGUuZm9udFNpemUgPSBcIjAuOXJlbVwiO1xuXG4gICAgZGl2Rm9vdGVyLnF1ZXJ5U2VsZWN0b3IoXCJhXCIpLnN0eWxlLmNvbG9yID0gXCJncmV5XCI7XG5cbiAgICByZXR1cm4gZGl2Rm9vdGVyO1xuICB9XG5cbiAgLy8gI2JpbmRFdmVudHMoKSB7fVxuXG4gIGdldCBvdXRwdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuI291dHB1dDtcbiAgfVxufVxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1RpdGxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vVGl0bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IGJvYXIgZnJvbSBcIi4uLy4uL2ltZy9ib2FyLnBuZ1wiO1xuaW1wb3J0IFwiLi4vLi4vY3NzL2NvbXBvbmVudHMvVGl0bGUuY3NzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRpdGxlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRoaXMuY29udGFpbmVyLmlkID0gXCJ0aXRsZUNvbnRhaW5lclwiO1xuXG4gICAgdGhpcy5pY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcbiAgICB0aGlzLmljb24uc3JjID0gYm9hcjtcblxuICAgIHRoaXMudGl0bGVUZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0aGlzLnRpdGxlVGV4dC5pbm5lclRleHQgPSBcIlN3aW5lU2t5XCI7XG5cbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmQodGhpcy50aXRsZVRleHQsIHRoaXMuaWNvbik7XG4gIH1cbn1cbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9BcHAuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9BcHAuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IEhlYWRlciBmcm9tIFwiLi9IZWFkZXJcIjtcbmltcG9ydCBEYXlzQmFyIGZyb20gXCIuL0RheXNCYXJcIjtcbmltcG9ydCBMb2FkaW5nIGZyb20gXCIuL0xvYWRpbmdcIjtcbmltcG9ydCBHcmFwaCBmcm9tIFwiLi9HcmFwaFwiO1xuaW1wb3J0IHF1ZXJ5V2VhdGhlckFQSSBmcm9tIFwiLi9BUElcIjtcbmltcG9ydCBQdWJzdWIgZnJvbSBcIi4uL1B1YnN1YlwiO1xuaW1wb3J0IENhY2hlIGZyb20gXCIuL0NhY2hlXCI7XG5pbXBvcnQgRm9vdGVyIGZyb20gXCIuL0Zvb3RlclwiO1xuaW1wb3J0IFRpdGxlIGZyb20gXCIuL1RpdGxlXCI7XG5pbXBvcnQgXCIuLi8uLi9jc3MvY29tcG9uZW50cy9BcHAuY3NzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwcCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIC8vIERPTVxuICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0aGlzLmNvbnRhaW5lci5pZCA9IFwiYXBwQ29udGFpbmVyXCI7XG4gICAgdGhpcy5sb2FkaW5nID0gbmV3IExvYWRpbmcoKTtcbiAgICB0aGlzLnRpdGxlID0gbmV3IFRpdGxlKCk7XG4gICAgdGhpcy5oZWFkZXIgPSBuZXcgSGVhZGVyKCk7XG4gICAgdGhpcy5ncmFwaCA9IG5ldyBHcmFwaCgpO1xuICAgIHRoaXMuZGF5c0JhciA9IG5ldyBEYXlzQmFyKDgpO1xuICAgIHRoaXMuZm9vdGVyID0gbmV3IEZvb3RlcigyMDIzKTtcbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmQoXG4gICAgICB0aGlzLnRpdGxlLmNvbnRhaW5lcixcbiAgICAgIHRoaXMuaGVhZGVyLmNvbnRhaW5lcixcbiAgICAgIHRoaXMuZ3JhcGguY29udGFpbmVyLFxuICAgICAgdGhpcy5kYXlzQmFyLmNvbnRhaW5lcixcbiAgICAgIHRoaXMuZm9vdGVyLm91dHB1dCxcbiAgICApO1xuICAgIEFwcC5iaW5kRXZlbnRzKHRoaXMpO1xuICAgIEFwcC5hcGlDYWxsKCk7XG4gIH1cblxuICBzdGF0aWMgYXBpQ2FsbChsb2NhdGlvbikge1xuICAgIHF1ZXJ5V2VhdGhlckFQSShsb2NhdGlvbilcbiAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgIENhY2hlLmNhY2hlZERhdGEgPSBkYXRhO1xuICAgICAgICBQdWJzdWIuZW1pdChcInJlbmRlckhlYWRlclwiLCAwKTtcbiAgICAgICAgUHVic3ViLmVtaXQoXCJyZW5kZXJEYXlzQmFyXCIpO1xuICAgICAgICBQdWJzdWIuZW1pdChcInJlbmRlckdyYXBoXCIsIDApO1xuICAgICAgICBQdWJzdWIuZW1pdChcInJlbmRlckhvdXJseVwiLCAwKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goY29uc29sZS5sb2cpO1xuICB9XG5cbiAgc3RhdGljIGJpbmRFdmVudHMoaW5zdGFuY2UpIHtcbiAgICBQdWJzdWIub24oXCJhcGlDYWxsXCIsIChsb2NhdGlvbikgPT4ge1xuICAgICAgQXBwLmFwaUNhbGwobG9jYXRpb24pO1xuICAgIH0pO1xuICAgIFB1YnN1Yi5vbihcImxvYWRpbmdcIiwgKCkgPT4ge1xuICAgICAgaW5zdGFuY2UuY29udGFpbmVyLmFwcGVuZChpbnN0YW5jZS5sb2FkaW5nLmNvbnRhaW5lcik7XG4gICAgfSk7XG4gICAgUHVic3ViLm9uKFwic3RvcExvYWRpbmdcIiwgKCkgPT4ge1xuICAgICAgaW5zdGFuY2UubG9hZGluZy5jb250YWluZXIucmVtb3ZlKCk7XG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCBQdWJzdWIgZnJvbSBcIi4uL1B1YnN1YlwiO1xuaW1wb3J0IENhY2hlIGZyb20gXCIuL0NhY2hlXCI7XG5cbmFzeW5jIGZ1bmN0aW9uIHF1ZXJ5TG9jYXRpb25BUEkoKSB7XG4gIGNvbnN0IHJlcXVlc3RMb2NhdGlvbiA9IGF3YWl0IGZldGNoKFwiaHR0cHM6Ly9pcGFwaS5jby9qc29uL1wiKTtcbiAgY29uc3QgcGFyc2VkUmVxdWVzdCA9IGF3YWl0IHJlcXVlc3RMb2NhdGlvbi5qc29uKCk7XG4gIGlmIChcbiAgICByZXF1ZXN0TG9jYXRpb24uY291bnRyeV9jb2RlX2lzbzMgPT09IFwiTEJSXCIgfHxcbiAgICByZXF1ZXN0TG9jYXRpb24uY291bnRyeV9jb2RlX2lzbzMgPT09IFwiTU1SXCIgfHxcbiAgICByZXF1ZXN0TG9jYXRpb24uY291bnRyeV9jb2RlX2lzbzMgPT09IFwiVVNBXCJcbiAgKSB7XG4gICAgQ2FjaGUudGVtcFVuaXRzID0gXCJmXCI7XG4gICAgQ2FjaGUud2luZFVuaXRzID0gXCJtcGhcIjtcbiAgfVxuICByZXR1cm4gcGFyc2VkUmVxdWVzdC5jaXR5O1xufVxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gcXVlcnlXZWF0aGVyQVBJKF9sb2NhdGlvbikge1xuICBQdWJzdWIuZW1pdChcImxvYWRpbmdcIik7XG4gIGNvbnN0IGxvY2F0aW9uID0gX2xvY2F0aW9uIHx8IChhd2FpdCBxdWVyeUxvY2F0aW9uQVBJKCkuY2F0Y2goY29uc29sZS5sb2cpKTtcbiAgY29uc3QgcmVxdWVzdFdlYXRoZXIgPVxuICAgIGF3YWl0IGZldGNoKGBodHRwczovL2FwaS53ZWF0aGVyYXBpLmNvbS92MS9mb3JlY2FzdC5qc29uP2tleT02YjUwZDU5MzhmMGI0MTczYTA2MjAyMTQ4MjMxMjA4JnE9JHtsb2NhdGlvbn0mZGF5cz0xMCZhcWk9bm8mYWxlcnRzPW5vXG4gICAgYCk7XG4gIGNvbnN0IGRhdGEgPSBhd2FpdCByZXF1ZXN0V2VhdGhlci5qc29uKCk7XG4gIFB1YnN1Yi5lbWl0KFwic3RvcExvYWRpbmdcIik7XG4gIHJldHVybiBkYXRhO1xufVxuIiwiaW1wb3J0IFwiLi9jc3MvZm9udC5jc3NcIjtcbmltcG9ydCBcIi4vY3NzL3N0eWxlLmNzc1wiO1xuaW1wb3J0IEFwcCBmcm9tIFwiLi9qcy9jb21wb25lbnRzL0FwcFwiO1xuXG5jb25zdCBib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJvZHlcIik7XG5jb25zdCBhcHAgPSBuZXcgQXBwKCk7XG5ib2R5LmFwcGVuZChhcHAuY29udGFpbmVyKTtcbiJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsImkiLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJsb2NhdGlvbiIsImN1cnJlbnRTY3JpcHQiLCJzcmMiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJyZXBsYWNlIiwicCIsIm5jIiwibG9jYWxzIiwiUHVic3ViIiwib24iLCJldmVudE5hbWUiLCJmbiIsIm9mZiIsImVtaXQiLCJmb3JFYWNoIiwiU2VhcmNoQmFyIiwiY29uc3RydWN0b3IiLCJjb250YWluZXIiLCJzZWFyY2hCYXIiLCJ0eXBlIiwicGxhY2Vob2xkZXIiLCJhcHBlbmQiLCJiaW5kRXZlbnRzIiwiYWRkRXZlbnRMaXN0ZW5lciIsInZhbHVlIiwiQ2FjaGUiLCJzdGF0aWMiLCJVbml0U2VsZWN0b3IiLCJkaXZDIiwiaW5uZXJUZXh0IiwiZGl2RiIsInRlbXBVbml0cyIsImNsYXNzTGlzdCIsInRvZ2dsZSIsImFkZCIsIndpbmRVbml0cyIsInNlbGVjdGVkRGF5IiwiSGVhZGVyIiwiaW1nSWNvbiIsImRpdlRlbXBlcmF0dXJlIiwiZGl2SHVtaWRpdHkiLCJkaXZXaW5kU3BlZWQiLCJkaXZDaGFuY2VSYWluIiwiZGl2RGF5IiwiZGl2Q29uZGl0aW9uIiwiZGl2TG9jYXRpb24iLCJ1bml0U2VsZWN0b3IiLCJpY29uIiwiY2FjaGVkRGF0YSIsImZvcmVjYXN0IiwiZm9yZWNhc3RkYXkiLCJkYXkiLCJjb25kaXRpb24iLCJjaGFuY2VPZlJhaW4iLCJkYWlseV9jaGFuY2Vfb2ZfcmFpbiIsInRleHQiLCJEYXRlIiwiZGF0ZSIsInRvTG9jYWxlRGF0ZVN0cmluZyIsIndlZWtkYXkiLCJtb250aCIsInRpbWVab25lIiwibmFtZSIsImNvdW50cnkiLCJ0ZW1wIiwiaHVtaWRpdHkiLCJ3aW5kIiwiTWF0aCIsImZsb29yIiwiY3VycmVudCIsImF2Z2h1bWlkaXR5IiwicmVuZGVyIiwiRGF5IiwiYXJndW1lbnRzIiwiaXNDdXJyZW50RGF5IiwiZGl2RGF5T2ZXZWVrIiwiZGl2VGVtcGVyYXR1cmVNQVgiLCJkaXZUZW1wZXJhdHVyZU1JTiIsImRhdGVfZXBvY2giLCJEYXlzQmFyIiwiZGF5cyIsImFtb3VudCIsIkxvYWRpbmciLCJ3aGVlbCIsImltZ0xvYWRpbmciLCJyb3VuZCIsInYiLCJsaW0iLCJsIiwiaCIsIm1heCIsIm1pbiIsInAyYiIsIm4yYiIsImIybiIsIm4ycCIsIm1hcCQxIiwiQSIsIkIiLCJDIiwiRCIsIkUiLCJGIiwiYiIsImMiLCJmIiwiaGV4IiwiaDEiLCJoMiIsImVxIiwiSFVFX1JFIiwiaHNsMnJnYm4iLCJzIiwiaHN2MnJnYm4iLCJod2IycmdibiIsInciLCJyZ2IiLCJyZ2IyaHNsIiwiciIsImh1ZVZhbHVlIiwiY2FsbG4iLCJBcnJheSIsImlzQXJyYXkiLCJoc2wycmdiIiwiaHVlIiwieCIsIloiLCJZIiwiWCIsIlciLCJWIiwiVSIsIlQiLCJTIiwiUiIsIlEiLCJQIiwiTyIsIk4iLCJNIiwiTCIsIksiLCJHIiwiSCIsIkkiLCJKIiwibmFtZXMkMSIsIk9pY2VYZSIsImFudGlxdWV3RXRlIiwiYXF1YSIsImFxdWFtYXJSZSIsImF6dVkiLCJiZWlnZSIsImJpc3F1ZSIsImJsYWNrIiwiYmxhbktlZE9tb25kIiwiWGUiLCJYZXZpVGV0IiwiYlB3biIsImJ1cmx5d29vZCIsImNhTXRYZSIsIkthcnRZdXNlIiwiS29jVGF0ZSIsImNTTyIsImNTbmZsb3dlclhlIiwiY1Nuc2lsayIsImNyaW1zb24iLCJjeWFuIiwieFhlIiwieGN5YW4iLCJ4Z1RNblBkIiwieFdheSIsInhnWUYiLCJ4Z1l5IiwieGtoYWtpIiwieG1hZ0Z0YSIsInhUaXZlZ1lGIiwieFNhbmdlIiwieFNjRWQiLCJ4WWQiLCJ4c09tb24iLCJ4c0hnWUYiLCJ4VVhlIiwieFVXYXkiLCJ4VWdZeSIsInhRZSIsInh2aVRldCIsImRBcHBSayIsImRBcHNreVhlIiwiZGltV2F5IiwiZGltZ1l5IiwiZG9kZ2VyWGUiLCJmaVlicmljayIsImZsU093RXRlIiwiZm9Zc3RXQW4iLCJmdUtzaWEiLCJnYVJzYlNvIiwiZ2hvc3R3RXRlIiwiZ1RkIiwiZ1RNblBkIiwiV2F5IiwiZ1lGIiwiZ1lGTHciLCJnWXkiLCJob25leU13IiwiaG90cFJrIiwiUmRpYW5ZZCIsIlJkaWdvIiwiaXZTeSIsImtoYWtpIiwibGF2Rk1yIiwibGF2Rk1yWHNoIiwibGF3bmdZRiIsIk5tb25jRWZmb24iLCJaWGUiLCJaY1NPIiwiWmN5YW4iLCJaZ1RNblBkTHciLCJaV2F5IiwiWmdZRiIsIlpnWXkiLCJacFJrIiwiWnNPbW9uIiwiWnNIZ1lGIiwiWnNreVhlIiwiWlVXYXkiLCJaVWdZeSIsIlpzdEFsWGUiLCJaTHciLCJsaW1lIiwibGltZWdZRiIsImxSRiIsIm1hZ0Z0YSIsIm1hUG9uIiwiVmFxdWFtYXJSZSIsIlZYZSIsIlZTY0VkIiwiVnB1cnBOIiwiVnNIZ1lGIiwiVlVYZSIsIlZzcHJSZ2dZRiIsIlZRZSIsIlZ2aVRldFlkIiwibWlkbmlnaHRYZSIsIm1SdGNZYW0iLCJtaXN0eVBzZSIsIm1vY2Nhc1IiLCJuYXZham93RXRlIiwibmF2eSIsIlRkbGFjZSIsIlRpdmUiLCJUaXZlZEJiIiwiU2FuZ2UiLCJTYW5nZVlkIiwiU2NFZCIsInBPZWdUTW5QZCIsInBPZWdZRiIsInBPZVFlIiwicE9ldmlUZXRZZCIsInBhcGF5YXdFcCIsInBIS3B1ZmYiLCJwZXJ1IiwicFJrIiwicGx1bSIsInBvd01yWGUiLCJwdXJwTiIsIlliZWNjYXB1cnBOIiwiWWQiLCJQc3licm93biIsIlB5T1hlIiwic2FkZE5iUHduIiwic09tb24iLCJzYW5keWJQd24iLCJzSGdZRiIsInNIc2hlbGwiLCJzaUZuYSIsInNpbHZlciIsInNreVhlIiwiVVhlIiwiVVdheSIsIlVnWXkiLCJzbm93Iiwic3ByUmdnWUYiLCJzdEFsWGUiLCJ0YW4iLCJ0ZU8iLCJ0RXN0TiIsInRvbWF0byIsIlFlIiwidmlUZXQiLCJKSHQiLCJ3RXRlIiwid0V0ZXNtb2tlIiwiTHciLCJMd2dZRiIsIm5hbWVzIiwiUkdCX1JFIiwidG8iLCJwb3ciLCJmcm9tIiwibW9kSFNMIiwicmF0aW8iLCJ0bXAiLCJjbG9uZSIsInByb3RvIiwiYXNzaWduIiwiZnJvbU9iamVjdCIsImlucHV0IiwiZnVuY3Rpb25QYXJzZSIsInN0ciIsImNoYXJBdCIsIm0iLCJleGVjIiwicmdiUGFyc2UiLCJwMSIsInAyIiwiaHdiMnJnYiIsImhzdjJyZ2IiLCJodWVQYXJzZSIsIkNvbG9yIiwicmV0IiwibGVuIiwidW5wYWNrZWQiLCJrZXlzIiwidGtleXMiLCJqIiwib2siLCJuayIsInBhcnNlSW50IiwidW5wYWNrIiwidHJhbnNwYXJlbnQiLCJ0b0xvd2VyQ2FzZSIsIm5hbWVQYXJzZSIsIl9yZ2IiLCJfdmFsaWQiLCJ2YWxpZCIsInJnYlN0cmluZyIsImhleFN0cmluZyIsImlzU2hvcnQiLCJhbHBoYSIsImhzbFN0cmluZyIsIm1peCIsImNvbG9yIiwid2VpZ2h0IiwiYzEiLCJjMiIsIncyIiwidzEiLCJpbnRlcnBvbGF0ZSIsInQiLCJyZ2IxIiwicmdiMiIsImNsZWFyZXIiLCJncmV5c2NhbGUiLCJ2YWwiLCJvcGFxdWVyIiwibmVnYXRlIiwibGlnaHRlbiIsImRhcmtlbiIsInNhdHVyYXRlIiwiZGVzYXR1cmF0ZSIsInJvdGF0ZSIsImRlZyIsIm5vb3AiLCJ1aWQiLCJpc051bGxPclVuZGVmIiwic2xpY2UiLCJpc09iamVjdCIsImlzTnVtYmVyRmluaXRlIiwiTnVtYmVyIiwiaXNGaW5pdGUiLCJmaW5pdGVPckRlZmF1bHQiLCJkZWZhdWx0VmFsdWUiLCJ2YWx1ZU9yRGVmYXVsdCIsInRvRGltZW5zaW9uIiwiZGltZW5zaW9uIiwiZW5kc1dpdGgiLCJwYXJzZUZsb2F0IiwiY2FsbGJhY2siLCJhcmdzIiwidGhpc0FyZyIsImVhY2giLCJsb29wYWJsZSIsInJldmVyc2UiLCJfZWxlbWVudHNFcXVhbCIsImEwIiwiYTEiLCJpbGVuIiwidjAiLCJ2MSIsImRhdGFzZXRJbmRleCIsInNvdXJjZSIsImNyZWF0ZSIsImtsZW4iLCJpc1ZhbGlkS2V5IiwiaW5kZXhPZiIsIl9tZXJnZXIiLCJ0dmFsIiwic3ZhbCIsIm1lcmdlIiwic291cmNlcyIsIm1lcmdlciIsIm1lcmdlSWYiLCJfbWVyZ2VySWYiLCJrZXlSZXNvbHZlcnMiLCJ5IiwicmVzb2x2ZU9iamVjdEtleSIsInJlc29sdmVyIiwicGFydHMiLCJzcGxpdCIsInBhcnQiLCJfc3BsaXRLZXkiLCJfZ2V0S2V5UmVzb2x2ZXIiLCJfY2FwaXRhbGl6ZSIsInRvVXBwZXJDYXNlIiwiZGVmaW5lZCIsImlzRnVuY3Rpb24iLCJzZXRzRXF1YWwiLCJzaXplIiwiaGFzIiwiUEkiLCJUQVUiLCJQSVRBVSIsIklORklOSVRZIiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJSQURfUEVSX0RFRyIsIkhBTEZfUEkiLCJRVUFSVEVSX1BJIiwiVFdPX1RISVJEU19QSSIsImxvZzEwIiwic2lnbiIsImFsbW9zdEVxdWFscyIsImVwc2lsb24iLCJhYnMiLCJuaWNlTnVtIiwicmFuZ2UiLCJyb3VuZGVkUmFuZ2UiLCJuaWNlUmFuZ2UiLCJmcmFjdGlvbiIsImlzTnVtYmVyIiwiaXNOYU4iLCJfc2V0TWluQW5kTWF4QnlLZXkiLCJhcnJheSIsInByb3BlcnR5IiwidG9SYWRpYW5zIiwiZGVncmVlcyIsInRvRGVncmVlcyIsInJhZGlhbnMiLCJfZGVjaW1hbFBsYWNlcyIsImdldEFuZ2xlRnJvbVBvaW50IiwiY2VudHJlUG9pbnQiLCJhbmdsZVBvaW50IiwiZGlzdGFuY2VGcm9tWENlbnRlciIsImRpc3RhbmNlRnJvbVlDZW50ZXIiLCJyYWRpYWxEaXN0YW5jZUZyb21DZW50ZXIiLCJzcXJ0IiwiYW5nbGUiLCJhdGFuMiIsImRpc3RhbmNlIiwiZGlzdGFuY2VCZXR3ZWVuUG9pbnRzIiwicHQxIiwicHQyIiwiX2FuZ2xlRGlmZiIsIl9ub3JtYWxpemVBbmdsZSIsIl9hbmdsZUJldHdlZW4iLCJzdGFydCIsImVuZCIsInNhbWVBbmdsZUlzRnVsbENpcmNsZSIsImFuZ2xlVG9TdGFydCIsImFuZ2xlVG9FbmQiLCJzdGFydFRvQW5nbGUiLCJlbmRUb0FuZ2xlIiwiX2xpbWl0VmFsdWUiLCJfaXNCZXR3ZWVuIiwiX2xvb2t1cCIsInRhYmxlIiwiY21wIiwibWlkIiwiaGkiLCJsbyIsIl9sb29rdXBCeUtleSIsImxhc3QiLCJ0aSIsIl9ybG9va3VwQnlLZXkiLCJhcnJheUV2ZW50cyIsInVubGlzdGVuQXJyYXlFdmVudHMiLCJsaXN0ZW5lciIsInN0dWIiLCJfY2hhcnRqcyIsImxpc3RlbmVycyIsIl9hcnJheVVuaXF1ZSIsIml0ZW1zIiwic2V0IiwiU2V0IiwicmVxdWVzdEFuaW1GcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInRocm90dGxlZCIsImFyZ3NUb1VzZSIsInRpY2tpbmciLCJfdG9MZWZ0UmlnaHRDZW50ZXIiLCJhbGlnbiIsIl9hbGlnblN0YXJ0RW5kIiwiX2dldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHMiLCJtZXRhIiwicG9pbnRzIiwiYW5pbWF0aW9uc0Rpc2FibGVkIiwicG9pbnRDb3VudCIsIl9zb3J0ZWQiLCJpU2NhbGUiLCJfcGFyc2VkIiwiYXhpcyIsIm1pbkRlZmluZWQiLCJtYXhEZWZpbmVkIiwiZ2V0VXNlckJvdW5kcyIsImdldFBpeGVsRm9yVmFsdWUiLCJfc2NhbGVSYW5nZXNDaGFuZ2VkIiwieFNjYWxlIiwieVNjYWxlIiwiX3NjYWxlUmFuZ2VzIiwibmV3UmFuZ2VzIiwieG1pbiIsInhtYXgiLCJ5bWluIiwieW1heCIsImNoYW5nZWQiLCJhdEVkZ2UiLCJlbGFzdGljSW4iLCJzaW4iLCJlbGFzdGljT3V0IiwiZWZmZWN0cyIsImxpbmVhciIsImVhc2VJblF1YWQiLCJlYXNlT3V0UXVhZCIsImVhc2VJbk91dFF1YWQiLCJlYXNlSW5DdWJpYyIsImVhc2VPdXRDdWJpYyIsImVhc2VJbk91dEN1YmljIiwiZWFzZUluUXVhcnQiLCJlYXNlT3V0UXVhcnQiLCJlYXNlSW5PdXRRdWFydCIsImVhc2VJblF1aW50IiwiZWFzZU91dFF1aW50IiwiZWFzZUluT3V0UXVpbnQiLCJlYXNlSW5TaW5lIiwiY29zIiwiZWFzZU91dFNpbmUiLCJlYXNlSW5PdXRTaW5lIiwiZWFzZUluRXhwbyIsImVhc2VPdXRFeHBvIiwiZWFzZUluT3V0RXhwbyIsImVhc2VJbkNpcmMiLCJlYXNlT3V0Q2lyYyIsImVhc2VJbk91dENpcmMiLCJlYXNlSW5FbGFzdGljIiwiZWFzZU91dEVsYXN0aWMiLCJlYXNlSW5PdXRFbGFzdGljIiwiZWFzZUluQmFjayIsImVhc2VPdXRCYWNrIiwiZWFzZUluT3V0QmFjayIsImVhc2VJbkJvdW5jZSIsImVhc2VPdXRCb3VuY2UiLCJlYXNlSW5PdXRCb3VuY2UiLCJpc1BhdHRlcm5PckdyYWRpZW50IiwiZ2V0SG92ZXJDb2xvciIsIm51bWJlcnMiLCJjb2xvcnMiLCJpbnRsQ2FjaGUiLCJNYXAiLCJmb3JtYXROdW1iZXIiLCJudW0iLCJsb2NhbGUiLCJjYWNoZUtleSIsImZvcm1hdHRlciIsIkludGwiLCJOdW1iZXJGb3JtYXQiLCJnZXROdW1iZXJGb3JtYXQiLCJmb3JtYXQiLCJmb3JtYXR0ZXJzIiwidmFsdWVzIiwibnVtZXJpYyIsInRpY2tWYWx1ZSIsInRpY2tzIiwiY2hhcnQiLCJub3RhdGlvbiIsImRlbHRhIiwibWF4VGljayIsImNhbGN1bGF0ZURlbHRhIiwibG9nRGVsdGEiLCJudW1EZWNpbWFsIiwibWluaW11bUZyYWN0aW9uRGlnaXRzIiwibWF4aW11bUZyYWN0aW9uRGlnaXRzIiwibG9nYXJpdGhtaWMiLCJyZW1haW4iLCJzaWduaWZpY2FuZCIsImluY2x1ZGVzIiwiVGlja3MiLCJvdmVycmlkZXMiLCJkZXNjcmlwdG9ycyIsImdldFNjb3BlJDEiLCJub2RlIiwicm9vdCIsInNjb3BlIiwiRGVmYXVsdHMiLCJfZGVzY3JpcHRvcnMiLCJfYXBwbGllcnMiLCJhbmltYXRpb24iLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJDb2xvciIsImRhdGFzZXRzIiwiZGV2aWNlUGl4ZWxSYXRpbyIsImNvbnRleHQiLCJwbGF0Zm9ybSIsImdldERldmljZVBpeGVsUmF0aW8iLCJlbGVtZW50cyIsImV2ZW50cyIsImZvbnQiLCJmYW1pbHkiLCJsaW5lSGVpZ2h0IiwiaG92ZXIiLCJob3ZlckJhY2tncm91bmRDb2xvciIsImN0eCIsImhvdmVyQm9yZGVyQ29sb3IiLCJob3ZlckNvbG9yIiwiaW5kZXhBeGlzIiwiaW50ZXJhY3Rpb24iLCJtb2RlIiwiaW50ZXJzZWN0IiwiaW5jbHVkZUludmlzaWJsZSIsIm1haW50YWluQXNwZWN0UmF0aW8iLCJvbkhvdmVyIiwib25DbGljayIsInBhcnNpbmciLCJwbHVnaW5zIiwicmVzcG9uc2l2ZSIsInNjYWxlIiwic2NhbGVzIiwic2hvd0xpbmUiLCJkcmF3QWN0aXZlRWxlbWVudHNPblRvcCIsImRlc2NyaWJlIiwib3ZlcnJpZGUiLCJyb3V0ZSIsInRhcmdldFNjb3BlIiwidGFyZ2V0TmFtZSIsInNjb3BlT2JqZWN0IiwidGFyZ2V0U2NvcGVPYmplY3QiLCJwcml2YXRlTmFtZSIsImRlZmluZVByb3BlcnRpZXMiLCJ3cml0YWJsZSIsImxvY2FsIiwiYXBwbGllcnMiLCJkZWZhdWx0cyIsIl9zY3JpcHRhYmxlIiwic3RhcnRzV2l0aCIsIl9pbmRleGFibGUiLCJfZmFsbGJhY2siLCJkZWxheSIsImR1cmF0aW9uIiwiZWFzaW5nIiwibG9vcCIsInByb3BlcnRpZXMiLCJhY3RpdmUiLCJyZXNpemUiLCJzaG93IiwiYW5pbWF0aW9ucyIsInZpc2libGUiLCJoaWRlIiwiYXV0b1BhZGRpbmciLCJwYWRkaW5nIiwidG9wIiwicmlnaHQiLCJib3R0b20iLCJsZWZ0IiwiZGlzcGxheSIsIm9mZnNldCIsImJlZ2luQXRaZXJvIiwiYm91bmRzIiwiZ3JhY2UiLCJncmlkIiwibGluZVdpZHRoIiwiZHJhd09uQ2hhcnRBcmVhIiwiZHJhd1RpY2tzIiwidGlja0xlbmd0aCIsInRpY2tXaWR0aCIsIl9jdHgiLCJ0aWNrQ29sb3IiLCJib3JkZXIiLCJkYXNoIiwiZGFzaE9mZnNldCIsIndpZHRoIiwidGl0bGUiLCJtaW5Sb3RhdGlvbiIsIm1heFJvdGF0aW9uIiwibWlycm9yIiwidGV4dFN0cm9rZVdpZHRoIiwidGV4dFN0cm9rZUNvbG9yIiwiYXV0b1NraXAiLCJhdXRvU2tpcFBhZGRpbmciLCJsYWJlbE9mZnNldCIsIm1pbm9yIiwibWFqb3IiLCJjcm9zc0FsaWduIiwic2hvd0xhYmVsQmFja2Ryb3AiLCJiYWNrZHJvcENvbG9yIiwiYmFja2Ryb3BQYWRkaW5nIiwiX21lYXN1cmVUZXh0IiwiZ2MiLCJsb25nZXN0Iiwic3RyaW5nIiwidGV4dFdpZHRoIiwibWVhc3VyZVRleHQiLCJfbG9uZ2VzdFRleHQiLCJhcnJheU9mVGhpbmdzIiwiY2FjaGUiLCJnYXJiYWdlQ29sbGVjdCIsInNhdmUiLCJqbGVuIiwidGhpbmciLCJuZXN0ZWRUaGluZyIsInJlc3RvcmUiLCJnY0xlbiIsIl9hbGlnblBpeGVsIiwicGl4ZWwiLCJjdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyIsImhhbGZXaWR0aCIsImNsZWFyQ2FudmFzIiwiY2FudmFzIiwiZ2V0Q29udGV4dCIsInJlc2V0VHJhbnNmb3JtIiwiY2xlYXJSZWN0IiwiaGVpZ2h0IiwiZHJhd1BvaW50IiwiZHJhd1BvaW50TGVnZW5kIiwieE9mZnNldCIsInlPZmZzZXQiLCJjb3JuZXJSYWRpdXMiLCJ4T2Zmc2V0VyIsInlPZmZzZXRXIiwicG9pbnRTdHlsZSIsInJvdGF0aW9uIiwicmFkaXVzIiwicmFkIiwidHJhbnNsYXRlIiwiZHJhd0ltYWdlIiwiYmVnaW5QYXRoIiwiZWxsaXBzZSIsImFyYyIsImNsb3NlUGF0aCIsIm1vdmVUbyIsImxpbmVUbyIsIlNRUlQxXzIiLCJyZWN0IiwiZmlsbCIsImJvcmRlcldpZHRoIiwic3Ryb2tlIiwiX2lzUG9pbnRJbkFyZWEiLCJwb2ludCIsImFyZWEiLCJtYXJnaW4iLCJjbGlwQXJlYSIsImNsaXAiLCJ1bmNsaXBBcmVhIiwiX3N0ZXBwZWRMaW5lVG8iLCJwcmV2aW91cyIsImZsaXAiLCJtaWRwb2ludCIsIl9iZXppZXJDdXJ2ZVRvIiwiYmV6aWVyQ3VydmVUbyIsImNwMXgiLCJjcDJ4IiwiY3AxeSIsImNwMnkiLCJkZWNvcmF0ZVRleHQiLCJsaW5lIiwib3B0cyIsInN0cmlrZXRocm91Z2giLCJ1bmRlcmxpbmUiLCJtZXRyaWNzIiwiYWN0dWFsQm91bmRpbmdCb3hMZWZ0IiwiYWN0dWFsQm91bmRpbmdCb3hSaWdodCIsImFjdHVhbEJvdW5kaW5nQm94QXNjZW50IiwiYWN0dWFsQm91bmRpbmdCb3hEZXNjZW50IiwieURlY29yYXRpb24iLCJzdHJva2VTdHlsZSIsImZpbGxTdHlsZSIsImRlY29yYXRpb25XaWR0aCIsImRyYXdCYWNrZHJvcCIsIm9sZENvbG9yIiwiZmlsbFJlY3QiLCJyZW5kZXJUZXh0IiwibGluZXMiLCJzdHJva2VXaWR0aCIsInN0cm9rZUNvbG9yIiwidHJhbnNsYXRpb24iLCJ0ZXh0QWxpZ24iLCJ0ZXh0QmFzZWxpbmUiLCJzZXRSZW5kZXJPcHRzIiwiYmFja2Ryb3AiLCJzdHJva2VUZXh0IiwibWF4V2lkdGgiLCJmaWxsVGV4dCIsImFkZFJvdW5kZWRSZWN0UGF0aCIsInRvcExlZnQiLCJib3R0b21MZWZ0IiwiYm90dG9tUmlnaHQiLCJ0b3BSaWdodCIsIkxJTkVfSEVJR0hUIiwiRk9OVF9TVFlMRSIsInRvTGluZUhlaWdodCIsIm1hdGNoZXMiLCJtYXRjaCIsIm51bWJlck9yWmVybyIsIl9yZWFkVmFsdWVUb1Byb3BzIiwicHJvcHMiLCJvYmpQcm9wcyIsInJlYWQiLCJ0b1RSQkwiLCJ0b1RSQkxDb3JuZXJzIiwidG9QYWRkaW5nIiwidG9Gb250IiwiZmFsbGJhY2siLCJjb25zb2xlIiwid2FybiIsInRvRm9udFN0cmluZyIsInJlc29sdmUiLCJpbnB1dHMiLCJpbmZvIiwiY2FjaGVhYmxlIiwiY3JlYXRlQ29udGV4dCIsInBhcmVudENvbnRleHQiLCJfY3JlYXRlUmVzb2x2ZXIiLCJzY29wZXMiLCJwcmVmaXhlcyIsInJvb3RTY29wZXMiLCJmaW5hbFJvb3RTY29wZXMiLCJfcmVzb2x2ZSIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiX2NhY2hlYWJsZSIsIl9zY29wZXMiLCJfcm9vdFNjb3BlcyIsIl9nZXRUYXJnZXQiLCJQcm94eSIsImRlbGV0ZVByb3BlcnR5IiwiX2tleXMiLCJfY2FjaGVkIiwicHJveHkiLCJwcmVmaXgiLCJyZWFkS2V5IiwibmVlZHNTdWJSZXNvbHZlciIsImNyZWF0ZVN1YlJlc29sdmVyIiwiX3Jlc29sdmVXaXRoUHJlZml4ZXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJSZWZsZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJnZXRLZXlzRnJvbUFsbFNjb3BlcyIsIm93bktleXMiLCJzdG9yYWdlIiwiX3N0b3JhZ2UiLCJfYXR0YWNoQ29udGV4dCIsInN1YlByb3h5IiwiZGVzY3JpcHRvckRlZmF1bHRzIiwiX3Byb3h5IiwiX2NvbnRleHQiLCJfc3ViUHJveHkiLCJfc3RhY2siLCJzZXRDb250ZXh0IiwicmVjZWl2ZXIiLCJpc1NjcmlwdGFibGUiLCJnZXRWYWx1ZSIsImRlbGV0ZSIsIl9yZXNvbHZlU2NyaXB0YWJsZSIsImlzSW5kZXhhYmxlIiwiYXJyIiwiZmlsdGVyIiwiX3Jlc29sdmVBcnJheSIsIl9yZXNvbHZlV2l0aENvbnRleHQiLCJhbGxLZXlzIiwiY29uZmlndXJhYmxlIiwic2NyaXB0YWJsZSIsImluZGV4YWJsZSIsIl9hbGxLZXlzIiwicmVzb2x2ZUZhbGxiYWNrIiwiZ2V0U2NvcGUiLCJwYXJlbnQiLCJhZGRTY29wZXMiLCJwYXJlbnRTY29wZXMiLCJwYXJlbnRGYWxsYmFjayIsImFsbFNjb3BlcyIsImFkZFNjb3Blc0Zyb21LZXkiLCJzdWJHZXRUYXJnZXQiLCJyZXNvbHZlS2V5c0Zyb21BbGxTY29wZXMiLCJfcGFyc2VPYmplY3REYXRhUmFkaWFsU2NhbGUiLCJfcGFyc2luZyIsInBhcnNlZCIsInBhcnNlIiwiRVBTSUxPTiIsImdldFBvaW50Iiwic2tpcCIsImdldFZhbHVlQXhpcyIsInNwbGluZUN1cnZlIiwiZmlyc3RQb2ludCIsIm1pZGRsZVBvaW50IiwiYWZ0ZXJQb2ludCIsIm5leHQiLCJkMDEiLCJkMTIiLCJzMDEiLCJzMTIiLCJmYSIsImZiIiwiY2FwQ29udHJvbFBvaW50IiwicHQiLCJfdXBkYXRlQmV6aWVyQ29udHJvbFBvaW50cyIsImNvbnRyb2xQb2ludHMiLCJzcGFuR2FwcyIsImN1YmljSW50ZXJwb2xhdGlvbk1vZGUiLCJ2YWx1ZUF4aXMiLCJwb2ludHNMZW4iLCJkZWx0YUsiLCJtSyIsInBvaW50QmVmb3JlIiwicG9pbnRDdXJyZW50IiwicG9pbnRBZnRlciIsInNsb3BlRGVsdGEiLCJhbHBoYUsiLCJiZXRhSyIsInRhdUsiLCJzcXVhcmVkTWFnbml0dWRlIiwibW9ub3RvbmVBZGp1c3QiLCJpUGl4ZWwiLCJ2UGl4ZWwiLCJtb25vdG9uZUNvbXB1dGUiLCJzcGxpbmVDdXJ2ZU1vbm90b25lIiwicHJldiIsInRlbnNpb24iLCJjYXBCZXppZXJQb2ludHMiLCJpbkFyZWEiLCJpbkFyZWFQcmV2IiwiaW5BcmVhTmV4dCIsIl9pc0RvbVN1cHBvcnRlZCIsIl9nZXRQYXJlbnROb2RlIiwiZG9tTm9kZSIsImhvc3QiLCJwYXJzZU1heFN0eWxlIiwic3R5bGVWYWx1ZSIsInBhcmVudFByb3BlcnR5IiwidmFsdWVJblBpeGVscyIsImdldENvbXB1dGVkU3R5bGUiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJwb3NpdGlvbnMiLCJnZXRQb3NpdGlvbmVkU3R5bGUiLCJzdHlsZXMiLCJzdWZmaXgiLCJwb3MiLCJ1c2VPZmZzZXRQb3MiLCJzaGFkb3dSb290IiwiZ2V0UmVsYXRpdmVQb3NpdGlvbiIsImV2ZW50IiwiYm9yZGVyQm94IiwiYm94U2l6aW5nIiwicGFkZGluZ3MiLCJib3JkZXJzIiwiYm94IiwidG91Y2hlcyIsIm9mZnNldFgiLCJvZmZzZXRZIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2xpZW50WCIsImNsaWVudFkiLCJnZXRDYW52YXNQb3NpdGlvbiIsInJvdW5kMSIsInJldGluYVNjYWxlIiwiZm9yY2VSYXRpbyIsImZvcmNlU3R5bGUiLCJwaXhlbFJhdGlvIiwiZGV2aWNlSGVpZ2h0IiwiZGV2aWNlV2lkdGgiLCJzZXRUcmFuc2Zvcm0iLCJzdXBwb3J0c0V2ZW50TGlzdGVuZXJPcHRpb25zIiwicGFzc2l2ZVN1cHBvcnRlZCIsInBhc3NpdmUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVhZFVzZWRTaXplIiwiZWwiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiZ2V0U3R5bGUiLCJfcG9pbnRJbkxpbmUiLCJfc3RlcHBlZEludGVycG9sYXRpb24iLCJfYmV6aWVySW50ZXJwb2xhdGlvbiIsImNwMSIsImNwMiIsImdldFJ0bEFkYXB0ZXIiLCJydGwiLCJyZWN0WCIsInNldFdpZHRoIiwieFBsdXMiLCJsZWZ0Rm9yTHRyIiwiaXRlbVdpZHRoIiwiZ2V0UmlnaHRUb0xlZnRBZGFwdGVyIiwiX2l0ZW1XaWR0aCIsIm92ZXJyaWRlVGV4dERpcmVjdGlvbiIsImRpcmVjdGlvbiIsIm9yaWdpbmFsIiwiZ2V0UHJvcGVydHlQcmlvcml0eSIsInNldFByb3BlcnR5IiwicHJldlRleHREaXJlY3Rpb24iLCJyZXN0b3JlVGV4dERpcmVjdGlvbiIsInByb3BlcnR5Rm4iLCJiZXR3ZWVuIiwiY29tcGFyZSIsIm5vcm1hbGl6ZSIsIm5vcm1hbGl6ZVNlZ21lbnQiLCJfYm91bmRTZWdtZW50Iiwic2VnbWVudCIsInN0YXJ0Qm91bmQiLCJlbmRCb3VuZCIsImdldFNlZ21lbnQiLCJwcmV2VmFsdWUiLCJpbnNpZGUiLCJzdWJTdGFydCIsIl9ib3VuZFNlZ21lbnRzIiwic2VnbWVudHMiLCJzdWIiLCJyZWFkU3R5bGUiLCJib3JkZXJDYXBTdHlsZSIsImJvcmRlckRhc2giLCJib3JkZXJEYXNoT2Zmc2V0IiwiYm9yZGVySm9pblN0eWxlIiwic3R5bGVDaGFuZ2VkIiwicHJldlN0eWxlIiwicmVwbGFjZXIiLCJBbmltYXRvciIsIl9yZXF1ZXN0IiwiX2NoYXJ0cyIsIl9ydW5uaW5nIiwiX2xhc3REYXRlIiwiX25vdGlmeSIsImFuaW1zIiwiY2FsbGJhY2tzIiwibnVtU3RlcHMiLCJpbml0aWFsIiwiY3VycmVudFN0ZXAiLCJfcmVmcmVzaCIsIl91cGRhdGUiLCJub3ciLCJyZW1haW5pbmciLCJydW5uaW5nIiwiZHJhdyIsIl9hY3RpdmUiLCJfdG90YWwiLCJ0aWNrIiwicG9wIiwiX2dldEFuaW1zIiwiY2hhcnRzIiwiY29tcGxldGUiLCJwcm9ncmVzcyIsImxpc3RlbiIsImNiIiwicmVkdWNlIiwiYWNjIiwiY3VyIiwiX2R1cmF0aW9uIiwic3RvcCIsImNhbmNlbCIsImFuaW1hdG9yIiwiaW50ZXJwb2xhdG9ycyIsImJvb2xlYW4iLCJmYWN0b3IiLCJjMCIsIm51bWJlciIsIkFuaW1hdGlvbiIsImNmZyIsImN1cnJlbnRWYWx1ZSIsIl9mbiIsIl9lYXNpbmciLCJfc3RhcnQiLCJfbG9vcCIsIl90YXJnZXQiLCJfcHJvcCIsIl9mcm9tIiwiX3RvIiwiX3Byb21pc2VzIiwiZWxhcHNlZCIsIndhaXQiLCJwcm9taXNlcyIsIlByb21pc2UiLCJyZXMiLCJyZWoiLCJyZXNvbHZlZCIsIm1ldGhvZCIsIkFuaW1hdGlvbnMiLCJjb25maWciLCJfY2hhcnQiLCJfcHJvcGVydGllcyIsImNvbmZpZ3VyZSIsImFuaW1hdGlvbk9wdGlvbnMiLCJhbmltYXRlZFByb3BzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIm9wdGlvbiIsIl9hbmltYXRlT3B0aW9ucyIsIm5ld09wdGlvbnMiLCIkc2hhcmVkIiwiJGFuaW1hdGlvbnMiLCJyZXNvbHZlVGFyZ2V0T3B0aW9ucyIsIl9jcmVhdGVBbmltYXRpb25zIiwiYW5pbSIsImFsbCIsImF3YWl0QWxsIiwidGhlbiIsInNjYWxlQ2xpcCIsImFsbG93ZWRPdmVyZmxvdyIsImdldFNvcnRlZERhdGFzZXRJbmRpY2VzIiwiZmlsdGVyVmlzaWJsZSIsIm1ldGFzZXRzIiwiX2dldFNvcnRlZERhdGFzZXRNZXRhcyIsImFwcGx5U3RhY2siLCJzdGFjayIsImRzSW5kZXgiLCJzaW5nbGVNb2RlIiwib3RoZXJWYWx1ZSIsImlzU3RhY2tlZCIsInN0YWNrZWQiLCJnZXRPckNyZWF0ZVN0YWNrIiwic3RhY2tzIiwic3RhY2tLZXkiLCJpbmRleFZhbHVlIiwic3ViU3RhY2siLCJnZXRMYXN0SW5kZXhJblN0YWNrIiwidlNjYWxlIiwicG9zaXRpdmUiLCJnZXRNYXRjaGluZ1Zpc2libGVNZXRhcyIsInVwZGF0ZVN0YWNrcyIsImNvbnRyb2xsZXIiLCJfY2FjaGVkTWV0YSIsIl9zdGFja3MiLCJpQXhpcyIsInZBeGlzIiwiaW5kZXhTY2FsZSIsInZhbHVlU2NhbGUiLCJnZXRTdGFja0tleSIsIl90b3AiLCJfYm90dG9tIiwiX3Zpc3VhbFZhbHVlcyIsImdldEZpcnN0U2NhbGVJZCIsInNoaWZ0IiwiY2xlYXJTdGFja3MiLCJpc0RpcmVjdFVwZGF0ZU1vZGUiLCJjbG9uZUlmTm90U2hhcmVkIiwiY2FjaGVkIiwic2hhcmVkIiwiRGF0YXNldENvbnRyb2xsZXIiLCJfY2FjaGVkRGF0YU9wdHMiLCJnZXRNZXRhIiwiX3R5cGUiLCJfZGF0YSIsIl9vYmplY3REYXRhIiwiX3NoYXJlZE9wdGlvbnMiLCJfZHJhd1N0YXJ0IiwiX2RyYXdDb3VudCIsImVuYWJsZU9wdGlvblNoYXJpbmciLCJzdXBwb3J0c0RlY2ltYXRpb24iLCIkY29udGV4dCIsIl9zeW5jTGlzdCIsImRhdGFzZXRFbGVtZW50VHlwZSIsImRhdGFFbGVtZW50VHlwZSIsImluaXRpYWxpemUiLCJsaW5rU2NhbGVzIiwiX3N0YWNrZWQiLCJhZGRFbGVtZW50cyIsImlzUGx1Z2luRW5hYmxlZCIsInVwZGF0ZUluZGV4IiwiZGF0YXNldCIsImdldERhdGFzZXQiLCJjaG9vc2VJZCIsInhpZCIsInhBeGlzSUQiLCJ5aWQiLCJ5QXhpc0lEIiwicmlkIiwickF4aXNJRCIsImlpZCIsImlBeGlzSUQiLCJ2aWQiLCJ2QXhpc0lEIiwiZ2V0U2NhbGVGb3JJZCIsInJTY2FsZSIsImdldERhdGFzZXRNZXRhIiwic2NhbGVJRCIsIl9nZXRPdGhlclNjYWxlIiwicmVzZXQiLCJfZGVzdHJveSIsIl9kYXRhQ2hlY2siLCJhZGF0YSIsImNvbnZlcnRPYmplY3REYXRhVG9BcnJheSIsImlzRXh0ZW5zaWJsZSIsIm9iamVjdCIsImJ1aWxkT3JVcGRhdGVFbGVtZW50cyIsInJlc2V0TmV3RWxlbWVudHMiLCJzdGFja0NoYW5nZWQiLCJvbGRTdGFja2VkIiwiX3Jlc3luY0VsZW1lbnRzIiwic2NvcGVLZXlzIiwiZGF0YXNldFNjb3BlS2V5cyIsImdldE9wdGlvblNjb3BlcyIsImNyZWF0ZVJlc29sdmVyIiwic29ydGVkIiwicGFyc2VBcnJheURhdGEiLCJwYXJzZU9iamVjdERhdGEiLCJwYXJzZVByaW1pdGl2ZURhdGEiLCJpc05vdEluT3JkZXJDb21wYXJlZFRvUHJldiIsImxhYmVscyIsImdldExhYmVscyIsInNpbmdsZVNjYWxlIiwieEF4aXNLZXkiLCJ5QXhpc0tleSIsImdldFBhcnNlZCIsImdldERhdGFFbGVtZW50IiwidXBkYXRlUmFuZ2VGcm9tUGFyc2VkIiwicGFyc2VkVmFsdWUiLCJOYU4iLCJnZXRNaW5NYXgiLCJjYW5TdGFjayIsIm90aGVyU2NhbGUiLCJoaWRkZW4iLCJjcmVhdGVTdGFjayIsIk5FR0FUSVZFX0lORklOSVRZIiwib3RoZXJNaW4iLCJvdGhlck1heCIsIl9za2lwIiwiZ2V0QWxsUGFyc2VkVmFsdWVzIiwiZ2V0TWF4T3ZlcmZsb3ciLCJnZXRMYWJlbEFuZFZhbHVlIiwibGFiZWwiLCJnZXRMYWJlbEZvclZhbHVlIiwiX2NsaXAiLCJkaXNhYmxlZCIsInRvQ2xpcCIsImRlZmF1bHRDbGlwIiwiY2hhcnRBcmVhIiwicmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9ucyIsInJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMiLCJkYXRhSW5kZXgiLCJyYXciLCJjcmVhdGVEYXRhQ29udGV4dCIsImNyZWF0ZURhdGFzZXRDb250ZXh0IiwiX3Jlc29sdmVFbGVtZW50T3B0aW9ucyIsImVsZW1lbnRUeXBlIiwic2hhcmluZyIsImRhdGFzZXRFbGVtZW50U2NvcGVLZXlzIiwicmVzb2x2ZU5hbWVkT3B0aW9ucyIsImZyZWV6ZSIsIl9yZXNvbHZlQW5pbWF0aW9ucyIsInRyYW5zaXRpb24iLCJkYXRhc2V0QW5pbWF0aW9uU2NvcGVLZXlzIiwiZ2V0U2hhcmVkT3B0aW9ucyIsImluY2x1ZGVPcHRpb25zIiwic2hhcmVkT3B0aW9ucyIsIl9hbmltYXRpb25zRGlzYWJsZWQiLCJfZ2V0U2hhcmVkT3B0aW9ucyIsImZpcnN0T3B0cyIsInByZXZpb3VzbHlTaGFyZWRPcHRpb25zIiwidXBkYXRlU2hhcmVkT3B0aW9ucyIsInVwZGF0ZUVsZW1lbnQiLCJfc2V0U3R5bGUiLCJyZW1vdmVIb3ZlclN0eWxlIiwic2V0SG92ZXJTdHlsZSIsIl9yZW1vdmVEYXRhc2V0SG92ZXJTdHlsZSIsIl9zZXREYXRhc2V0SG92ZXJTdHlsZSIsImFyZzEiLCJhcmcyIiwibnVtTWV0YSIsIm51bURhdGEiLCJfaW5zZXJ0RWxlbWVudHMiLCJfcmVtb3ZlRWxlbWVudHMiLCJtb3ZlIiwidXBkYXRlRWxlbWVudHMiLCJyZW1vdmVkIiwiX3N5bmMiLCJfZGF0YUNoYW5nZXMiLCJfb25EYXRhUHVzaCIsIl9vbkRhdGFQb3AiLCJfb25EYXRhU2hpZnQiLCJfb25EYXRhU3BsaWNlIiwibmV3Q291bnQiLCJfb25EYXRhVW5zaGlmdCIsImNvbXB1dGVNaW5TYW1wbGVTaXplIiwiX2NhY2hlIiwiJGJhciIsInZpc2libGVNZXRhcyIsInNvcnQiLCJnZXRBbGxTY2FsZVZhbHVlcyIsImN1cnIiLCJfbGVuZ3RoIiwidXBkYXRlTWluQW5kUHJldiIsImdldFBpeGVsRm9yVGljayIsInBhcnNlVmFsdWUiLCJlbnRyeSIsInN0YXJ0VmFsdWUiLCJlbmRWYWx1ZSIsImJhclN0YXJ0IiwiYmFyRW5kIiwiX2N1c3RvbSIsInBhcnNlRmxvYXRCYXIiLCJwYXJzZUFycmF5T3JQcmltaXRpdmUiLCJpc0Zsb2F0QmFyIiwiY3VzdG9tIiwic2V0Qm9yZGVyU2tpcHBlZCIsImVkZ2UiLCJib3JkZXJTa2lwcGVkIiwiaG9yaXpvbnRhbCIsImJvcmRlclByb3BzIiwiZW5hYmxlQm9yZGVyUmFkaXVzIiwicGFyc2VFZGdlIiwib3JpZyIsInYyIiwic3RhcnRFbmQiLCJzZXRJbmZsYXRlQW1vdW50IiwiaW5mbGF0ZUFtb3VudCIsIkRvdWdobnV0Q29udHJvbGxlciIsImFuaW1hdGVSb3RhdGUiLCJhbmltYXRlU2NhbGUiLCJjdXRvdXQiLCJjaXJjdW1mZXJlbmNlIiwic3BhY2luZyIsImFzcGVjdFJhdGlvIiwibGVnZW5kIiwiZ2VuZXJhdGVMYWJlbHMiLCJmb250Q29sb3IiLCJnZXREYXRhVmlzaWJpbGl0eSIsImxlZ2VuZEl0ZW0iLCJ0b2dnbGVEYXRhVmlzaWJpbGl0eSIsInN1cGVyIiwiaW5uZXJSYWRpdXMiLCJvdXRlclJhZGl1cyIsIl9nZXRSb3RhdGlvbiIsIl9nZXRDaXJjdW1mZXJlbmNlIiwiX2dldFJvdGF0aW9uRXh0ZW50cyIsImlzRGF0YXNldFZpc2libGUiLCJhcmNzIiwiZ2V0TWF4Qm9yZGVyV2lkdGgiLCJnZXRNYXhPZmZzZXQiLCJtYXhTaXplIiwiY2hhcnRXZWlnaHQiLCJfZ2V0UmluZ1dlaWdodCIsInJhdGlvWCIsInJhdGlvWSIsInN0YXJ0QW5nbGUiLCJlbmRBbmdsZSIsInN0YXJ0WCIsInN0YXJ0WSIsImVuZFgiLCJlbmRZIiwiY2FsY01heCIsImNhbGNNaW4iLCJtYXhYIiwibWF4WSIsIm1pblgiLCJtaW5ZIiwiZ2V0UmF0aW9BbmRPZmZzZXQiLCJtYXhIZWlnaHQiLCJtYXhSYWRpdXMiLCJyYWRpdXNMZW5ndGgiLCJfZ2V0VmlzaWJsZURhdGFzZXRXZWlnaHRUb3RhbCIsInRvdGFsIiwiY2FsY3VsYXRlVG90YWwiLCJfZ2V0UmluZ1dlaWdodE9mZnNldCIsIl9jaXJjdW1mZXJlbmNlIiwiY2FsY3VsYXRlQ2lyY3VtZmVyZW5jZSIsImFuaW1hdGlvbk9wdHMiLCJjZW50ZXJYIiwiY2VudGVyWSIsIm1ldGFEYXRhIiwiYm9yZGVyQWxpZ24iLCJob3ZlckJvcmRlcldpZHRoIiwiaG92ZXJPZmZzZXQiLCJyaW5nV2VpZ2h0T2Zmc2V0IiwiUG9sYXJBcmVhQ29udHJvbGxlciIsImFuZ2xlTGluZXMiLCJjaXJjdWxhciIsInBvaW50TGFiZWxzIiwiYmluZCIsIl91cGRhdGVSYWRpdXMiLCJtaW5TaXplIiwiY3V0b3V0UGVyY2VudGFnZSIsImdldFZpc2libGVEYXRhc2V0Q291bnQiLCJ4Q2VudGVyIiwieUNlbnRlciIsImRhdGFzZXRTdGFydEFuZ2xlIiwiZ2V0SW5kZXhBbmdsZSIsImRlZmF1bHRBbmdsZSIsImNvdW50VmlzaWJsZUVsZW1lbnRzIiwiX2NvbXB1dGVBbmdsZSIsImdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlIiwiY29udHJvbGxlcnMiLCJfX3Byb3RvX18iLCJCYXJDb250cm9sbGVyIiwiY2F0ZWdvcnlQZXJjZW50YWdlIiwiYmFyUGVyY2VudGFnZSIsImdyb3VwZWQiLCJfaW5kZXhfIiwiX3ZhbHVlXyIsImlBeGlzS2V5IiwidkF4aXNLZXkiLCJiYXJzIiwiZ2V0QmFzZVBpeGVsIiwiaXNIb3Jpem9udGFsIiwicnVsZXIiLCJfZ2V0UnVsZXIiLCJ2cGl4ZWxzIiwiX2NhbGN1bGF0ZUJhclZhbHVlUGl4ZWxzIiwiaXBpeGVscyIsIl9jYWxjdWxhdGVCYXJJbmRleFBpeGVscyIsImNlbnRlciIsIl9nZXRTdGFja3MiLCJza2lwTnVsbCIsIl9nZXRTdGFja0NvdW50IiwiX2dldFN0YWNrSW5kZXgiLCJwaXhlbHMiLCJiYXJUaGlja25lc3MiLCJfc3RhcnRQaXhlbCIsIl9lbmRQaXhlbCIsInN0YWNrQ291bnQiLCJiYXNlVmFsdWUiLCJtaW5CYXJMZW5ndGgiLCJhY3R1YWxCYXNlIiwiZmxvYXRpbmciLCJiYXJTaWduIiwic3RhcnRQaXhlbCIsImdldFBpeGVsRm9yRGVjaW1hbCIsImVuZFBpeGVsIiwiZ2V0VmFsdWVGb3JQaXhlbCIsImhhbGZHcmlkIiwiZ2V0TGluZVdpZHRoRm9yVmFsdWUiLCJtYXhCYXJUaGlja25lc3MiLCJJbmZpbml0eSIsInBlcmNlbnQiLCJjaHVuayIsImNvbXB1dGVGbGV4Q2F0ZWdvcnlUcmFpdHMiLCJ0aGlja25lc3MiLCJjb21wdXRlRml0Q2F0ZWdvcnlUcmFpdHMiLCJzdGFja0luZGV4IiwicmVjdHMiLCJCdWJibGVDb250cm9sbGVyIiwiTGluZUNvbnRyb2xsZXIiLCJfZGF0YXNldCIsIl9kYXRhc2V0SW5kZXgiLCJfZGVjaW1hdGVkIiwiYW5pbWF0ZWQiLCJtYXhHYXBMZW5ndGgiLCJkaXJlY3RVcGRhdGUiLCJwb2ludHNDb3VudCIsInByZXZQYXJzZWQiLCJudWxsRGF0YSIsImxhc3RQb2ludCIsInVwZGF0ZUNvbnRyb2xQb2ludHMiLCJQaWVDb250cm9sbGVyIiwiUmFkYXJDb250cm9sbGVyIiwiX2Z1bGxMb29wIiwicG9pbnRQb3NpdGlvbiIsImdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZSIsIlNjYXR0ZXJDb250cm9sbGVyIiwicmVnaXN0cnkiLCJnZXRFbGVtZW50IiwiRGF0ZUFkYXB0ZXJCYXNlIiwibWVtYmVycyIsImluaXQiLCJmb3JtYXRzIiwiZGlmZiIsInN0YXJ0T2YiLCJlbmRPZiIsImFkYXB0ZXJzIiwiYmluYXJ5U2VhcmNoIiwibWV0YXNldCIsImxvb2t1cE1ldGhvZCIsIl9yZXZlcnNlUGl4ZWxzIiwiZ2V0UmFuZ2UiLCJldmFsdWF0ZUludGVyYWN0aW9uSXRlbXMiLCJwb3NpdGlvbiIsImhhbmRsZXIiLCJnZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzIiwiZ2V0SW50ZXJzZWN0SXRlbXMiLCJ1c2VGaW5hbFBvc2l0aW9uIiwiaXNQb2ludEluQXJlYSIsImluUmFuZ2UiLCJnZXROZWFyZXN0SXRlbXMiLCJkaXN0YW5jZU1ldHJpYyIsInVzZVgiLCJ1c2VZIiwiZGVsdGFYIiwiZGVsdGFZIiwiZ2V0RGlzdGFuY2VNZXRyaWNGb3JBeGlzIiwibWluRGlzdGFuY2UiLCJnZXRDZW50ZXJQb2ludCIsImdldE5lYXJlc3RDYXJ0ZXNpYW5JdGVtcyIsImdldFByb3BzIiwiZ2V0TmVhcmVzdFJhZGlhbEl0ZW1zIiwiZ2V0QXhpc0l0ZW1zIiwicmFuZ2VNZXRob2QiLCJpbnRlcnNlY3RzSXRlbSIsIkludGVyYWN0aW9uIiwibW9kZXMiLCJuZWFyZXN0IiwiU1RBVElDX1BPU0lUSU9OUyIsImZpbHRlckJ5UG9zaXRpb24iLCJmaWx0ZXJEeW5hbWljUG9zaXRpb25CeUF4aXMiLCJzb3J0QnlXZWlnaHQiLCJnZXRDb21iaW5lZE1heCIsIm1heFBhZGRpbmciLCJ1cGRhdGVNYXhQYWRkaW5nIiwiYm94UGFkZGluZyIsInVwZGF0ZURpbXMiLCJwYXJhbXMiLCJsYXlvdXQiLCJnZXRQYWRkaW5nIiwibmV3V2lkdGgiLCJvdXRlcldpZHRoIiwibmV3SGVpZ2h0Iiwib3V0ZXJIZWlnaHQiLCJ3aWR0aENoYW5nZWQiLCJoZWlnaHRDaGFuZ2VkIiwic2FtZSIsIm90aGVyIiwiZ2V0TWFyZ2lucyIsIm1hcmdpbkZvclBvc2l0aW9ucyIsImZpdEJveGVzIiwiYm94ZXMiLCJyZWZpdEJveGVzIiwicmVmaXQiLCJmdWxsU2l6ZSIsInNldEJveERpbXMiLCJwbGFjZUJveGVzIiwidXNlclBhZGRpbmciLCJwbGFjZWQiLCJzdGFja1dlaWdodCIsImxheW91dHMiLCJhZGRCb3giLCJfbGF5ZXJzIiwieiIsInJlbW92ZUJveCIsImxheW91dEl0ZW0iLCJtaW5QYWRkaW5nIiwiYXZhaWxhYmxlV2lkdGgiLCJhdmFpbGFibGVIZWlnaHQiLCJsYXlvdXRCb3hlcyIsIndyYXBCb3hlcyIsIndyYXAiLCJjZW50ZXJIb3Jpem9udGFsIiwiY2VudGVyVmVydGljYWwiLCJsZWZ0QW5kVG9wIiwicmlnaHRBbmRCb3R0b20iLCJ2ZXJ0aWNhbCIsImJ1aWxkTGF5b3V0Qm94ZXMiLCJ2ZXJ0aWNhbEJveGVzIiwiaG9yaXpvbnRhbEJveGVzIiwiYmVmb3JlTGF5b3V0IiwidmlzaWJsZVZlcnRpY2FsQm94Q291bnQiLCJ2Qm94TWF4V2lkdGgiLCJoQm94TWF4SGVpZ2h0IiwiYnVpbGRTdGFja3MiLCJzZXRMYXlvdXREaW1zIiwidXBkYXRlUG9zIiwiY2hhbmdlIiwiaGFuZGxlTWF4UGFkZGluZyIsIkJhc2VQbGF0Zm9ybSIsImFjcXVpcmVDb250ZXh0IiwicmVsZWFzZUNvbnRleHQiLCJnZXRNYXhpbXVtU2l6ZSIsImlzQXR0YWNoZWQiLCJ1cGRhdGVDb25maWciLCJCYXNpY1BsYXRmb3JtIiwiRVhQQU5ET19LRVkiLCJFVkVOVF9UWVBFUyIsInRvdWNoc3RhcnQiLCJ0b3VjaG1vdmUiLCJ0b3VjaGVuZCIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJkb3duIiwicG9pbnRlcm1vdmUiLCJwb2ludGVydXAiLCJwb2ludGVybGVhdmUiLCJwb2ludGVyb3V0IiwiaXNOdWxsT3JFbXB0eSIsImV2ZW50TGlzdGVuZXJPcHRpb25zIiwicmVtb3ZlTGlzdGVuZXIiLCJub2RlTGlzdENvbnRhaW5zIiwibm9kZUxpc3QiLCJjb250YWlucyIsImNyZWF0ZUF0dGFjaE9ic2VydmVyIiwib2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwiZW50cmllcyIsInRyaWdnZXIiLCJhZGRlZE5vZGVzIiwicmVtb3ZlZE5vZGVzIiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJjcmVhdGVEZXRhY2hPYnNlcnZlciIsImRycExpc3RlbmluZ0NoYXJ0cyIsIm9sZERldmljZVBpeGVsUmF0aW8iLCJvbldpbmRvd1Jlc2l6ZSIsImRwciIsImNyZWF0ZVJlc2l6ZU9ic2VydmVyIiwiY2xpZW50V2lkdGgiLCJSZXNpemVPYnNlcnZlciIsImNvbnRlbnRSZWN0IiwibGlzdGVuRGV2aWNlUGl4ZWxSYXRpb0NoYW5nZXMiLCJyZWxlYXNlT2JzZXJ2ZXIiLCJkaXNjb25uZWN0IiwidW5saXN0ZW5EZXZpY2VQaXhlbFJhdGlvQ2hhbmdlcyIsImNyZWF0ZVByb3h5QW5kTGlzdGVuIiwibmF0aXZlIiwiZnJvbU5hdGl2ZUV2ZW50IiwiYWRkTGlzdGVuZXIiLCJEb21QbGF0Zm9ybSIsInJlbmRlckhlaWdodCIsImdldEF0dHJpYnV0ZSIsInJlbmRlcldpZHRoIiwiZGlzcGxheVdpZHRoIiwiZGlzcGxheUhlaWdodCIsImluaXRDYW52YXMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJwcm94aWVzIiwiJHByb3hpZXMiLCJhdHRhY2giLCJkZXRhY2giLCJiYldpZHRoIiwiYmJIZWlnaHQiLCJtYXJnaW5zIiwiY29udGFpbmVyU2l6ZSIsImNvbnRhaW5lclN0eWxlIiwiY29udGFpbmVyQm9yZGVyIiwiY29udGFpbmVyUGFkZGluZyIsImNsaWVudEhlaWdodCIsImdldENvbnRhaW5lclNpemUiLCJpc0Nvbm5lY3RlZCIsIkVsZW1lbnQiLCJ0b29sdGlwUG9zaXRpb24iLCJoYXNWYWx1ZSIsImZpbmFsIiwibmV3VGlja3MiLCJtYWpvclN0YXJ0IiwibWFqb3JFbmQiLCJjZWlsIiwib2Zmc2V0RnJvbUVkZ2UiLCJnZXRUaWNrc0xpbWl0IiwidGlja3NMZW5ndGgiLCJtYXhUaWNrc0xpbWl0Iiwic2FtcGxlIiwibnVtSXRlbXMiLCJpbmNyZW1lbnQiLCJnZXRQaXhlbEZvckdyaWRMaW5lIiwib2Zmc2V0R3JpZExpbmVzIiwidmFsaWRJbmRleCIsImxpbmVWYWx1ZSIsImdldFRpY2tNYXJrTGVuZ3RoIiwiZ2V0VGl0bGVIZWlnaHQiLCJ0aXRsZUFsaWduIiwicmV2ZXJzZUFsaWduIiwiU2NhbGUiLCJfbWFyZ2lucyIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJsYWJlbFJvdGF0aW9uIiwiX3JhbmdlIiwiX2dyaWRMaW5lSXRlbXMiLCJfbGFiZWxJdGVtcyIsIl9sYWJlbFNpemVzIiwiX21heExlbmd0aCIsIl9sb25nZXN0VGV4dENhY2hlIiwiX3VzZXJNYXgiLCJfdXNlck1pbiIsIl9zdWdnZXN0ZWRNYXgiLCJfc3VnZ2VzdGVkTWluIiwiX3RpY2tzTGVuZ3RoIiwiX2JvcmRlclZhbHVlIiwiX2RhdGFMaW1pdHNDYWNoZWQiLCJzdWdnZXN0ZWRNaW4iLCJzdWdnZXN0ZWRNYXgiLCJtZXRhcyIsImdldFRpY2tzIiwieExhYmVscyIsInlMYWJlbHMiLCJnZXRMYWJlbEl0ZW1zIiwiX2NvbXB1dGVMYWJlbEl0ZW1zIiwiYmVmb3JlVXBkYXRlIiwidGlja09wdHMiLCJzYW1wbGVTaXplIiwiYmVmb3JlU2V0RGltZW5zaW9ucyIsInNldERpbWVuc2lvbnMiLCJhZnRlclNldERpbWVuc2lvbnMiLCJiZWZvcmVEYXRhTGltaXRzIiwiZGV0ZXJtaW5lRGF0YUxpbWl0cyIsImFmdGVyRGF0YUxpbWl0cyIsIm1pbm1heCIsImtlZXBaZXJvIiwiX2FkZEdyYWNlIiwiYmVmb3JlQnVpbGRUaWNrcyIsImJ1aWxkVGlja3MiLCJhZnRlckJ1aWxkVGlja3MiLCJzYW1wbGluZ0VuYWJsZWQiLCJfY29udmVydFRpY2tzVG9MYWJlbHMiLCJiZWZvcmVDYWxjdWxhdGVMYWJlbFJvdGF0aW9uIiwiY2FsY3VsYXRlTGFiZWxSb3RhdGlvbiIsImFmdGVyQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbiIsImRldGVybWluZWRNYXhUaWNrcyIsIl90aWNrU2l6ZSIsIm1heFNjYWxlIiwibWF4Q2hhcnQiLCJkZXRlcm1pbmVNYXhUaWNrcyIsInRpY2tzTGltaXQiLCJtYWpvckluZGljZXMiLCJlbmFibGVkIiwiZ2V0TWFqb3JJbmRpY2VzIiwibnVtTWFqb3JJbmRpY2VzIiwiZmlyc3QiLCJza2lwTWFqb3JzIiwiZXZlbk1ham9yU3BhY2luZyIsImdldEV2ZW5TcGFjaW5nIiwiZmFjdG9ycyIsIl9mYWN0b3JpemUiLCJjYWxjdWxhdGVTcGFjaW5nIiwiYXZnTWFqb3JTcGFjaW5nIiwiYWZ0ZXJBdXRvU2tpcCIsImJlZm9yZUZpdCIsImZpdCIsImFmdGVyRml0IiwiYWZ0ZXJVcGRhdGUiLCJyZXZlcnNlUGl4ZWxzIiwiX2FsaWduVG9QaXhlbHMiLCJhbGlnblRvUGl4ZWxzIiwiX2NhbGxIb29rcyIsIm5vdGlmeVBsdWdpbnMiLCJiZWZvcmVUaWNrVG9MYWJlbENvbnZlcnNpb24iLCJnZW5lcmF0ZVRpY2tMYWJlbHMiLCJhZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbiIsIm51bVRpY2tzIiwibWF4TGFiZWxEaWFnb25hbCIsIl9pc1Zpc2libGUiLCJsYWJlbFNpemVzIiwiX2dldExhYmVsU2l6ZXMiLCJtYXhMYWJlbFdpZHRoIiwid2lkZXN0IiwibWF4TGFiZWxIZWlnaHQiLCJoaWdoZXN0IiwiYXNpbiIsInRpdGxlT3B0cyIsImdyaWRPcHRzIiwidGl0bGVIZWlnaHQiLCJ0aWNrUGFkZGluZyIsImFuZ2xlUmFkaWFucyIsImxhYmVsSGVpZ2h0IiwibGFiZWxXaWR0aCIsIl9jYWxjdWxhdGVQYWRkaW5nIiwiX2hhbmRsZU1hcmdpbnMiLCJpc1JvdGF0ZWQiLCJsYWJlbHNCZWxvd1RpY2tzIiwib2Zmc2V0TGVmdCIsIm9mZnNldFJpZ2h0IiwiaXNGdWxsU2l6ZSIsIl9jb21wdXRlTGFiZWxTaXplcyIsImNhY2hlcyIsIndpZHRocyIsImhlaWdodHMiLCJ0aWNrRm9udCIsImZvbnRTdHJpbmciLCJuZXN0ZWRMYWJlbCIsIndpZGVzdExhYmVsU2l6ZSIsImhpZ2hlc3RMYWJlbFNpemUiLCJfcmVzb2x2ZVRpY2tGb250T3B0aW9ucyIsInZhbHVlQXQiLCJpZHgiLCJkZWNpbWFsIiwiZ2V0RGVjaW1hbEZvclBpeGVsIiwiZ2V0QmFzZVZhbHVlIiwiY3JlYXRlVGlja0NvbnRleHQiLCJvcHRpb25UaWNrcyIsInJvdCIsIl9jb21wdXRlR3JpZExpbmVJdGVtcyIsInRsIiwiYm9yZGVyT3B0cyIsImF4aXNXaWR0aCIsImF4aXNIYWxmV2lkdGgiLCJhbGlnbkJvcmRlclZhbHVlIiwiYm9yZGVyVmFsdWUiLCJhbGlnbmVkTGluZVZhbHVlIiwidHgxIiwidHkxIiwidHgyIiwidHkyIiwieDEiLCJ5MSIsIngyIiwieTIiLCJwb3NpdGlvbkF4aXNJRCIsImxpbWl0Iiwic3RlcCIsIm9wdHNBdEluZGV4Iiwib3B0c0F0SW5kZXhCb3JkZXIiLCJsaW5lQ29sb3IiLCJ0aWNrQm9yZGVyRGFzaCIsInRpY2tCb3JkZXJEYXNoT2Zmc2V0IiwidGlja0FuZFBhZGRpbmciLCJoVGlja0FuZFBhZGRpbmciLCJsaW5lQ291bnQiLCJ0ZXh0T2Zmc2V0IiwiX2dldFhBeGlzTGFiZWxBbGlnbm1lbnQiLCJfZ2V0WUF4aXNMYWJlbEFsaWdubWVudCIsImhhbGZDb3VudCIsInRpY2tUZXh0QWxpZ24iLCJsYWJlbFBhZGRpbmciLCJfY29tcHV0ZUxhYmVsQXJlYSIsImRyYXdCYWNrZ3JvdW5kIiwiZmluZEluZGV4IiwiZHJhd0dyaWQiLCJkcmF3TGluZSIsInNldExpbmVEYXNoIiwibGluZURhc2hPZmZzZXQiLCJkcmF3Qm9yZGVyIiwibGFzdExpbmVXaWR0aCIsImRyYXdMYWJlbHMiLCJyZW5kZXJUZXh0T3B0aW9ucyIsImRyYXdUaXRsZSIsInRpdGxlWCIsInRpdGxlWSIsInRpdGxlQXJncyIsInR6IiwiZ3oiLCJieiIsImF4aXNJRCIsIl9tYXhEaWdpdHMiLCJmb250U2l6ZSIsIlR5cGVkUmVnaXN0cnkiLCJpc0ZvclR5cGUiLCJpc1Byb3RvdHlwZU9mIiwicmVnaXN0ZXIiLCJwYXJlbnRTY29wZSIsImlzSUNoYXJ0Q29tcG9uZW50IiwiaXRlbURlZmF1bHRzIiwiZGVmYXVsdFJvdXRlcyIsInJvdXRlcyIsInByb3BlcnR5UGFydHMiLCJzb3VyY2VOYW1lIiwic291cmNlU2NvcGUiLCJyb3V0ZURlZmF1bHRzIiwicmVnaXN0ZXJEZWZhdWx0cyIsInVucmVnaXN0ZXIiLCJSZWdpc3RyeSIsIl90eXBlZFJlZ2lzdHJpZXMiLCJfZWFjaCIsImFkZENvbnRyb2xsZXJzIiwiYWRkUGx1Z2lucyIsImFkZFNjYWxlcyIsImdldENvbnRyb2xsZXIiLCJfZ2V0IiwiZ2V0UGx1Z2luIiwiZ2V0U2NhbGUiLCJyZW1vdmVDb250cm9sbGVycyIsInJlbW92ZUVsZW1lbnRzIiwicmVtb3ZlUGx1Z2lucyIsInJlbW92ZVNjYWxlcyIsInR5cGVkUmVnaXN0cnkiLCJhcmciLCJyZWciLCJfZ2V0UmVnaXN0cnlGb3JUeXBlIiwiX2V4ZWMiLCJpdGVtUmVnIiwiY29tcG9uZW50IiwiY2FtZWxNZXRob2QiLCJQbHVnaW5TZXJ2aWNlIiwiX2luaXQiLCJub3RpZnkiLCJob29rIiwiX2NyZWF0ZURlc2NyaXB0b3JzIiwiZGVzY3JpcHRvciIsInBsdWdpbiIsImNhbmNlbGFibGUiLCJpbnZhbGlkYXRlIiwiX29sZENhY2hlIiwiX25vdGlmeVN0YXRlQ2hhbmdlcyIsImxvY2FsSWRzIiwiYWxsUGx1Z2lucyIsImdldE9wdHMiLCJwbHVnaW5PcHRzIiwiY3JlYXRlRGVzY3JpcHRvcnMiLCJwcmV2aW91c0Rlc2NyaXB0b3JzIiwic29tZSIsInBsdWdpblNjb3BlS2V5cyIsImdldEluZGV4QXhpcyIsImRhdGFzZXREZWZhdWx0cyIsImlkTWF0Y2hlc0F4aXMiLCJkZXRlcm1pbmVBeGlzIiwic2NhbGVPcHRpb25zIiwiZ2V0QXhpc0Zyb21EYXRhc2V0IiwiaW5pdE9wdGlvbnMiLCJjaGFydERlZmF1bHRzIiwiY29uZmlnU2NhbGVzIiwiY2hhcnRJbmRleEF4aXMiLCJzY2FsZUNvbmYiLCJlcnJvciIsImJvdW5kRHMiLCJyZXRyaWV2ZUF4aXNGcm9tRGF0YXNldHMiLCJkZWZhdWx0SWQiLCJnZXREZWZhdWx0U2NhbGVJREZyb21BeGlzIiwiZGVmYXVsdFNjYWxlT3B0aW9ucyIsImRlZmF1bHRJRCIsImdldEF4aXNGcm9tRGVmYXVsdFNjYWxlSUQiLCJtZXJnZVNjYWxlQ29uZmlnIiwiaW5pdERhdGEiLCJrZXlDYWNoZSIsImtleXNDYWNoZWQiLCJjYWNoZWRLZXlzIiwiZ2VuZXJhdGUiLCJhZGRJZkZvdW5kIiwiQ29uZmlnIiwiX2NvbmZpZyIsImluaXRDb25maWciLCJfc2NvcGVDYWNoZSIsIl9yZXNvbHZlckNhY2hlIiwiY2xlYXJDYWNoZSIsImNsZWFyIiwiZGF0YXNldFR5cGUiLCJhZGRpdGlvbmFsT3B0aW9uU2NvcGVzIiwiX2NhY2hlZFNjb3BlcyIsIm1haW5TY29wZSIsInJlc2V0Q2FjaGUiLCJrZXlMaXN0cyIsImNoYXJ0T3B0aW9uU2NvcGVzIiwic3ViUHJlZml4ZXMiLCJnZXRSZXNvbHZlciIsImhhc0Z1bmN0aW9uIiwibmVlZENvbnRleHQiLCJyZXNvbHZlckNhY2hlIiwiS05PV05fUE9TSVRJT05TIiwicG9zaXRpb25Jc0hvcml6b250YWwiLCJjb21wYXJlMkxldmVsIiwibDEiLCJsMiIsIm9uQW5pbWF0aW9uc0NvbXBsZXRlIiwib25Db21wbGV0ZSIsIm9uQW5pbWF0aW9uUHJvZ3Jlc3MiLCJvblByb2dyZXNzIiwiZ2V0Q2FudmFzIiwiZ2V0RWxlbWVudEJ5SWQiLCJpbnN0YW5jZXMiLCJnZXRDaGFydCIsIm1vdmVOdW1lcmljS2V5cyIsImludEtleSIsIkNoYXJ0IiwiaW52YWxpZGF0ZVBsdWdpbnMiLCJ1c2VyQ29uZmlnIiwiaW5pdGlhbENhbnZhcyIsImV4aXN0aW5nQ2hhcnQiLCJPZmZzY3JlZW5DYW52YXMiLCJfZGV0ZWN0UGxhdGZvcm0iLCJfb3B0aW9ucyIsIl9hc3BlY3RSYXRpbyIsIl9tZXRhc2V0cyIsIl9sYXN0RXZlbnQiLCJfbGlzdGVuZXJzIiwiX3Jlc3BvbnNpdmVMaXN0ZW5lcnMiLCJfc29ydGVkTWV0YXNldHMiLCJfcGx1Z2lucyIsIl9oaWRkZW5JbmRpY2VzIiwiYXR0YWNoZWQiLCJfZG9SZXNpemUiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImRlYm91bmNlIiwicmVzaXplRGVsYXkiLCJfaW5pdGlhbGl6ZSIsIl9yZXNpemVCZWZvcmVEcmF3IiwiX3Jlc2l6ZSIsIm5ld1NpemUiLCJuZXdSYXRpbyIsIm9uUmVzaXplIiwiZW5zdXJlU2NhbGVzSGF2ZUlEcyIsImF4aXNPcHRpb25zIiwiYnVpbGRPclVwZGF0ZVNjYWxlcyIsInNjYWxlT3B0cyIsInVwZGF0ZWQiLCJpc1JhZGlhbCIsImRwb3NpdGlvbiIsImR0eXBlIiwic2NhbGVUeXBlIiwiaGFzVXBkYXRlZCIsIl91cGRhdGVNZXRhc2V0cyIsIl9kZXN0cm95RGF0YXNldE1ldGEiLCJfcmVtb3ZlVW5yZWZlcmVuY2VkTWV0YXNldHMiLCJidWlsZE9yVXBkYXRlQ29udHJvbGxlcnMiLCJuZXdDb250cm9sbGVycyIsIm9yZGVyIiwiQ29udHJvbGxlckNsYXNzIiwiX3Jlc2V0RWxlbWVudHMiLCJhbmltc0Rpc2FibGVkIiwiX3VwZGF0ZVNjYWxlcyIsIl9jaGVja0V2ZW50QmluZGluZ3MiLCJfdXBkYXRlSGlkZGVuSW5kaWNlcyIsIl9taW5QYWRkaW5nIiwiX3VwZGF0ZUxheW91dCIsIl91cGRhdGVEYXRhc2V0cyIsIl9ldmVudEhhbmRsZXIiLCJfdXBkYXRlSG92ZXJTdHlsZXMiLCJleGlzdGluZ0V2ZW50cyIsIm5ld0V2ZW50cyIsInVuYmluZEV2ZW50cyIsImNoYW5nZXMiLCJfZ2V0VW5pZm9ybURhdGFDaGFuZ2VzIiwiZGF0YXNldENvdW50IiwibWFrZVNldCIsImNoYW5nZVNldCIsIm5vQXJlYSIsIl9pZHgiLCJfdXBkYXRlRGF0YXNldCIsImxheWVycyIsIl9kcmF3RGF0YXNldHMiLCJfZHJhd0RhdGFzZXQiLCJ1c2VDbGlwIiwiZ2V0RGF0YXNldEFyZWEiLCJnZXRFbGVtZW50c0F0RXZlbnRGb3JNb2RlIiwic2V0RGF0YXNldFZpc2liaWxpdHkiLCJfdXBkYXRlVmlzaWJpbGl0eSIsIl9zdG9wIiwiZGVzdHJveSIsInRvQmFzZTY0SW1hZ2UiLCJ0b0RhdGFVUkwiLCJiaW5kVXNlckV2ZW50cyIsImJpbmRSZXNwb25zaXZlRXZlbnRzIiwiX2FkZCIsIl9yZW1vdmUiLCJkZXRhY2hlZCIsInVwZGF0ZUhvdmVyU3R5bGUiLCJnZXRBY3RpdmVFbGVtZW50cyIsInNldEFjdGl2ZUVsZW1lbnRzIiwiYWN0aXZlRWxlbWVudHMiLCJsYXN0QWN0aXZlIiwicGx1Z2luSWQiLCJyZXBsYXkiLCJob3Zlck9wdGlvbnMiLCJkZWFjdGl2YXRlZCIsImFjdGl2YXRlZCIsImluQ2hhcnRBcmVhIiwiZXZlbnRGaWx0ZXIiLCJfaGFuZGxlRXZlbnQiLCJfZ2V0QWN0aXZlRWxlbWVudHMiLCJpc0NsaWNrIiwiX2lzQ2xpY2tFdmVudCIsImxhc3RFdmVudCIsImRldGVybWluZUxhc3RFdmVudCIsInJUaGV0YVRvWFkiLCJ0aGV0YSIsInBhdGhBcmMiLCJwaXhlbE1hcmdpbiIsImlubmVyUiIsInNwYWNpbmdPZmZzZXQiLCJhdk5vZ1NwYWNpbmdSYWRpdXMiLCJhbmdsZU9mZnNldCIsIm91dGVyU3RhcnQiLCJvdXRlckVuZCIsImlubmVyU3RhcnQiLCJpbm5lckVuZCIsImFuZ2xlRGVsdGEiLCJib3JkZXJSYWRpdXMiLCJoYWxmVGhpY2tuZXNzIiwiaW5uZXJMaW1pdCIsImNvbXB1dGVPdXRlckxpbWl0Iiwib3V0ZXJBcmNMaW1pdCIsInBhcnNlQm9yZGVyUmFkaXVzJDEiLCJvdXRlclN0YXJ0QWRqdXN0ZWRSYWRpdXMiLCJvdXRlckVuZEFkanVzdGVkUmFkaXVzIiwib3V0ZXJTdGFydEFkanVzdGVkQW5nbGUiLCJvdXRlckVuZEFkanVzdGVkQW5nbGUiLCJpbm5lclN0YXJ0QWRqdXN0ZWRSYWRpdXMiLCJpbm5lckVuZEFkanVzdGVkUmFkaXVzIiwiaW5uZXJTdGFydEFkanVzdGVkQW5nbGUiLCJpbm5lckVuZEFkanVzdGVkQW5nbGUiLCJvdXRlck1pZEFkanVzdGVkQW5nbGUiLCJwQ2VudGVyIiwicDQiLCJpbm5lck1pZEFkanVzdGVkQW5nbGUiLCJwOCIsIm91dGVyU3RhcnRYIiwib3V0ZXJTdGFydFkiLCJvdXRlckVuZFgiLCJvdXRlckVuZFkiLCJzZXRTdHlsZSIsImxpbmVDYXAiLCJsaW5lSm9pbiIsInBhdGhWYXJzIiwicGFyYW1zU3RhcnQiLCJwYXJhbXNFbmQiLCJzZWdtZW50U3RhcnQiLCJzZWdtZW50RW5kIiwib3V0c2lkZSIsInBhdGhTZWdtZW50IiwibGluZU1ldGhvZCIsInN0ZXBwZWQiLCJnZXRMaW5lTWV0aG9kIiwiZmFzdFBhdGhTZWdtZW50IiwicHJldlgiLCJsYXN0WSIsImF2Z1giLCJjb3VudFgiLCJwb2ludEluZGV4IiwiZHJhd1giLCJ0cnVuY1giLCJfZ2V0U2VnbWVudE1ldGhvZCIsInVzZVBhdGgyRCIsIlBhdGgyRCIsIkxpbmVFbGVtZW50IiwiX3BhdGgiLCJfcG9pbnRzIiwiX3NlZ21lbnRzIiwiX3BvaW50c1VwZGF0ZWQiLCJzZWdtZW50T3B0aW9ucyIsImZpbmRTdGFydEFuZEVuZCIsImNoYXJ0Q29udGV4dCIsImJhc2VTdHlsZSIsImFkZFN0eWxlIiwic3QiLCJkaXIiLCJwMCIsInAwRGF0YUluZGV4IiwicDFEYXRhSW5kZXgiLCJkb1NwbGl0QnlTdHlsZXMiLCJzcGxpdEJ5U3R5bGVzIiwic29saWRTZWdtZW50cyIsIl9jb21wdXRlU2VnbWVudHMiLCJfaW50ZXJwb2xhdGUiLCJfZ2V0SW50ZXJwb2xhdGlvbk1ldGhvZCIsImludGVycG9sYXRlZCIsInNlZ21lbnRNZXRob2QiLCJwYXRoIiwic3Ryb2tlUGF0aFdpdGhDYWNoZSIsInN0cm9rZVBhdGhEaXJlY3QiLCJpblJhbmdlJDEiLCJoaXRSYWRpdXMiLCJnZXRCYXJCb3VuZHMiLCJiYXIiLCJoYWxmIiwic2tpcE9yTGltaXQiLCJza2lwWCIsInNraXBZIiwiYWRkTm9ybWFsUmVjdFBhdGgiLCJpbmZsYXRlUmVjdCIsInJlZlJlY3QiLCJBcmNFbGVtZW50IiwiZnVsbENpcmNsZXMiLCJjaGFydFgiLCJjaGFydFkiLCJyQWRqdXN0IiwiYmV0d2VlbkFuZ2xlcyIsIndpdGhpblJhZGl1cyIsImhhbGZBbmdsZSIsImhhbGZSYWRpdXMiLCJyYWRpdXNPZmZzZXQiLCJkcmF3QXJjIiwiaW5uZXIiLCJhbmdsZU1hcmdpbiIsImNsaXBBcmMiLCJCYXJFbGVtZW50Iiwib3V0ZXIiLCJtYXhXIiwibWF4SCIsInBhcnNlQm9yZGVyV2lkdGgiLCJtYXhSIiwiZW5hYmxlQm9yZGVyIiwicGFyc2VCb3JkZXJSYWRpdXMiLCJib3VuZGluZ1JlY3RzIiwiYWRkUmVjdFBhdGgiLCJtb3VzZVgiLCJtb3VzZVkiLCJpblhSYW5nZSIsImluWVJhbmdlIiwiUG9pbnRFbGVtZW50IiwiaG92ZXJSYWRpdXMiLCJCT1JERVJfQ09MT1JTIiwiQkFDS0dST1VORF9DT0xPUlMiLCJnZXRCb3JkZXJDb2xvciIsImdldEJhY2tncm91bmRDb2xvciIsImNvbnRhaW5zQ29sb3JzRGVmaW5pdGlvbnMiLCJwbHVnaW5fY29sb3JzIiwiZm9yY2VPdmVycmlkZSIsIl9hcmdzIiwiY2hhcnRPcHRpb25zIiwiY29sb3JpemVyIiwiY29sb3JpemVEb3VnaG51dERhdGFzZXQiLCJjb2xvcml6ZVBvbGFyQXJlYURhdGFzZXQiLCJjb2xvcml6ZURlZmF1bHREYXRhc2V0IiwiZ2V0Q29sb3JpemVyIiwiY2xlYW5EZWNpbWF0ZWREYXRhc2V0IiwiY2xlYW5EZWNpbWF0ZWREYXRhIiwicGx1Z2luX2RlY2ltYXRpb24iLCJhbGdvcml0aG0iLCJiZWZvcmVFbGVtZW50c1VwZGF0ZSIsInhBeGlzIiwiZGVjaW1hdGVkIiwiZ2V0U3RhcnRBbmRDb3VudE9mVmlzaWJsZVBvaW50c1NpbXBsaWZpZWQiLCJ0aHJlc2hvbGQiLCJzYW1wbGVzIiwiYnVja2V0V2lkdGgiLCJzYW1wbGVkSW5kZXgiLCJlbmRJbmRleCIsIm1heEFyZWFQb2ludCIsIm1heEFyZWEiLCJuZXh0QSIsImF2Z1kiLCJhdmdSYW5nZVN0YXJ0IiwiYXZnUmFuZ2VFbmQiLCJhdmdSYW5nZUxlbmd0aCIsInJhbmdlT2ZmcyIsInJhbmdlVG8iLCJwb2ludEF4IiwicG9pbnRBeSIsImx0dGJEZWNpbWF0aW9uIiwibWluSW5kZXgiLCJtYXhJbmRleCIsInN0YXJ0SW5kZXgiLCJ4TWluIiwiZHgiLCJsYXN0SW5kZXgiLCJpbnRlcm1lZGlhdGVJbmRleDEiLCJpbnRlcm1lZGlhdGVJbmRleDIiLCJtaW5NYXhEZWNpbWF0aW9uIiwiX2dldEJvdW5kcyIsIl9maW5kU2VnbWVudEVuZCIsIl9nZXRFZGdlIiwiX2NyZWF0ZUJvdW5kYXJ5TGluZSIsImJvdW5kYXJ5IiwibGluZVBvaW50cyIsIl9wb2ludHNGcm9tU2VnbWVudHMiLCJfc2hvdWxkQXBwbHlGaWxsIiwiX3Jlc29sdmVUYXJnZXQiLCJwcm9wYWdhdGUiLCJ2aXNpdGVkIiwiX2RlY29kZUZpbGwiLCJmaWxsT3B0aW9uIiwicGFyc2VGaWxsT3B0aW9uIiwiZmlyc3RDaCIsImRlY29kZVRhcmdldEluZGV4IiwiYWRkUG9pbnRzQmVsb3ciLCJzb3VyY2VQb2ludCIsImxpbmVzQmVsb3ciLCJwb3N0cG9uZWQiLCJmaW5kUG9pbnQiLCJ1bnNoaWZ0IiwicG9pbnRWYWx1ZSIsImZpcnN0VmFsdWUiLCJsYXN0VmFsdWUiLCJzaW1wbGVBcmMiLCJfZHJhd2ZpbGwiLCJnZXRMaW5lQnlJbmRleCIsInNvdXJjZVBvaW50cyIsImJlbG93IiwiZ2V0TGluZXNCZWxvdyIsIl9idWlsZFN0YWNrTGluZSIsIl9nZXRUYXJnZXRWYWx1ZSIsImNvbXB1dGVDaXJjdWxhckJvdW5kYXJ5IiwiX2dldFRhcmdldFBpeGVsIiwiY29tcHV0ZUxpbmVhckJvdW5kYXJ5IiwiY29tcHV0ZUJvdW5kYXJ5IiwibGluZU9wdHMiLCJhYm92ZSIsImNsaXBWZXJ0aWNhbCIsImRvRmlsbCIsImNsaXBZIiwibGluZUxvb3AiLCJ0cG9pbnRzIiwidGFyZ2V0U2VnbWVudHMiLCJ0Z3QiLCJzdWJCb3VuZHMiLCJmaWxsU291cmNlcyIsImZpbGxTb3VyY2UiLCJub3RTaGFwZSIsImNsaXBCb3VuZHMiLCJpbnRlcnBvbGF0ZWRMaW5lVG8iLCJ0YXJnZXRMb29wIiwiaW50ZXJwb2xhdGVkUG9pbnQiLCJhZnRlckRhdGFzZXRzVXBkYXRlIiwiJGZpbGxlciIsImJlZm9yZURyYXciLCJkcmF3VGltZSIsImJlZm9yZURhdGFzZXRzRHJhdyIsImJlZm9yZURhdGFzZXREcmF3IiwiZ2V0Qm94U2l6ZSIsImxhYmVsT3B0cyIsImJveEhlaWdodCIsImJveFdpZHRoIiwidXNlUG9pbnRTdHlsZSIsInBvaW50U3R5bGVXaWR0aCIsIml0ZW1IZWlnaHQiLCJMZWdlbmQiLCJfYWRkZWQiLCJsZWdlbmRIaXRCb3hlcyIsIl9ob3ZlcmVkSXRlbSIsImRvdWdobnV0TW9kZSIsImxlZ2VuZEl0ZW1zIiwiY29sdW1uU2l6ZXMiLCJsaW5lV2lkdGhzIiwiYnVpbGRMYWJlbHMiLCJsYWJlbEZvbnQiLCJfY29tcHV0ZVRpdGxlSGVpZ2h0IiwiX2ZpdFJvd3MiLCJfZml0Q29scyIsImhpdGJveGVzIiwidG90YWxIZWlnaHQiLCJyb3ciLCJfaXRlbUhlaWdodCIsImhlaWdodExpbWl0IiwidG90YWxXaWR0aCIsImN1cnJlbnRDb2xXaWR0aCIsImN1cnJlbnRDb2xIZWlnaHQiLCJjb2wiLCJsZWdlbmRJdGVtVGV4dCIsImNhbGN1bGF0ZUl0ZW1XaWR0aCIsImZvbnRMaW5lSGVpZ2h0IiwiY2FsY3VsYXRlTGVnZW5kSXRlbUhlaWdodCIsImNhbGN1bGF0ZUl0ZW1IZWlnaHQiLCJjYWxjdWxhdGVJdGVtU2l6ZSIsImFkanVzdEhpdEJveGVzIiwicnRsSGVscGVyIiwiaGl0Ym94IiwiX2RyYXciLCJkZWZhdWx0Q29sb3IiLCJoYWxmRm9udFNpemUiLCJjdXJzb3IiLCJ0ZXh0RGlyZWN0aW9uIiwibGluZURhc2giLCJkcmF3T3B0aW9ucyIsIlNRUlQyIiwieUJveFRvcCIsInhCb3hMZWZ0IiwiZHJhd0xlZ2VuZEJveCIsIl90ZXh0WCIsInRpdGxlRm9udCIsInRpdGxlUGFkZGluZyIsInRvcFBhZGRpbmdQbHVzSGFsZkZvbnRTaXplIiwiX2dldExlZ2VuZEl0ZW1BdCIsImhpdEJveCIsImxoIiwiaGFuZGxlRXZlbnQiLCJvbkxlYXZlIiwiaXNMaXN0ZW5lZCIsImhvdmVyZWRJdGVtIiwic2FtZUl0ZW0iLCJwbHVnaW5fbGVnZW5kIiwiX2VsZW1lbnQiLCJhZnRlckV2ZW50IiwiY2kiLCJ1c2VCb3JkZXJSYWRpdXMiLCJUaXRsZSIsIl9wYWRkaW5nIiwidGV4dFNpemUiLCJfZHJhd0FyZ3MiLCJmb250T3B0cyIsInBsdWdpbl90aXRsZSIsInRpdGxlQmxvY2siLCJjcmVhdGVUaXRsZSIsIldlYWtNYXAiLCJwbHVnaW5fc3VidGl0bGUiLCJwb3NpdGlvbmVycyIsImF2ZXJhZ2UiLCJldmVudFBvc2l0aW9uIiwibmVhcmVzdEVsZW1lbnQiLCJ0cCIsInB1c2hPckNvbmNhdCIsInRvUHVzaCIsInNwbGl0TmV3bGluZXMiLCJTdHJpbmciLCJjcmVhdGVUb29sdGlwSXRlbSIsImZvcm1hdHRlZFZhbHVlIiwiZ2V0VG9vbHRpcFNpemUiLCJ0b29sdGlwIiwiYm9keSIsImZvb3RlciIsImJvZHlGb250IiwiZm9vdGVyRm9udCIsInRpdGxlTGluZUNvdW50IiwiZm9vdGVyTGluZUNvdW50IiwiYm9keUxpbmVJdGVtQ291bnQiLCJjb21iaW5lZEJvZHlMZW5ndGgiLCJib2R5SXRlbSIsImJlZm9yZSIsImFmdGVyIiwiYmVmb3JlQm9keSIsImFmdGVyQm9keSIsInRpdGxlU3BhY2luZyIsInRpdGxlTWFyZ2luQm90dG9tIiwiZGlzcGxheUNvbG9ycyIsImJvZHlTcGFjaW5nIiwiZm9vdGVyTWFyZ2luVG9wIiwiZm9vdGVyU3BhY2luZyIsIndpZHRoUGFkZGluZyIsIm1heExpbmVXaWR0aCIsImRldGVybWluZVhBbGlnbiIsInlBbGlnbiIsImNoYXJ0V2lkdGgiLCJ4QWxpZ24iLCJjYXJldCIsImNhcmV0U2l6ZSIsImNhcmV0UGFkZGluZyIsImRvZXNOb3RGaXRXaXRoQWxpZ24iLCJkZXRlcm1pbmVBbGlnbm1lbnQiLCJkZXRlcm1pbmVZQWxpZ24iLCJnZXRCYWNrZ3JvdW5kUG9pbnQiLCJhbGlnbm1lbnQiLCJwYWRkaW5nQW5kU2l6ZSIsImFsaWduWCIsImFsaWduWSIsImdldEFsaWduZWRYIiwiZ2V0QmVmb3JlQWZ0ZXJCb2R5TGluZXMiLCJvdmVycmlkZUNhbGxiYWNrcyIsImRlZmF1bHRDYWxsYmFja3MiLCJiZWZvcmVUaXRsZSIsInRvb2x0aXBJdGVtcyIsImxhYmVsQ291bnQiLCJhZnRlclRpdGxlIiwiYmVmb3JlTGFiZWwiLCJ0b29sdGlwSXRlbSIsImxhYmVsQ29sb3IiLCJsYWJlbFRleHRDb2xvciIsImJvZHlDb2xvciIsImxhYmVsUG9pbnRTdHlsZSIsImFmdGVyTGFiZWwiLCJiZWZvcmVGb290ZXIiLCJhZnRlckZvb3RlciIsImludm9rZUNhbGxiYWNrV2l0aEZhbGxiYWNrIiwiVG9vbHRpcCIsIm9wYWNpdHkiLCJfZXZlbnRQb3NpdGlvbiIsIl9zaXplIiwiX2NhY2hlZEFuaW1hdGlvbnMiLCJfdG9vbHRpcEl0ZW1zIiwiZGF0YVBvaW50cyIsImNhcmV0WCIsImNhcmV0WSIsImxhYmVsQ29sb3JzIiwibGFiZWxQb2ludFN0eWxlcyIsImxhYmVsVGV4dENvbG9ycyIsImdldFRpdGxlIiwiZ2V0QmVmb3JlQm9keSIsImdldEJvZHkiLCJib2R5SXRlbXMiLCJzY29wZWQiLCJnZXRBZnRlckJvZHkiLCJnZXRGb290ZXIiLCJfY3JlYXRlSXRlbXMiLCJpdGVtU29ydCIsInBvc2l0aW9uQW5kU2l6ZSIsImJhY2tncm91bmRQb2ludCIsImV4dGVybmFsIiwiZHJhd0NhcmV0IiwidG9vbHRpcFBvaW50IiwiY2FyZXRQb3NpdGlvbiIsImdldENhcmV0UG9zaXRpb24iLCJ4MyIsInkzIiwicHRYIiwicHRZIiwidGl0bGVDb2xvciIsIl9kcmF3Q29sb3JCb3giLCJjb2xvclgiLCJydGxDb2xvclgiLCJ5T2ZmU2V0IiwiY29sb3JZIiwibXVsdGlLZXlCYWNrZ3JvdW5kIiwib3V0ZXJYIiwiaW5uZXJYIiwic3Ryb2tlUmVjdCIsImRyYXdCb2R5IiwiYm9keUFsaWduIiwiYm9keUxpbmVIZWlnaHQiLCJ4TGluZVBhZGRpbmciLCJmaWxsTGluZU9mVGV4dCIsImJvZHlBbGlnbkZvckNhbGN1bGF0aW9uIiwidGV4dENvbG9yIiwiZHJhd0Zvb3RlciIsImZvb3RlckFsaWduIiwiZm9vdGVyQ29sb3IiLCJ0b29sdGlwU2l6ZSIsInF1YWRyYXRpY0N1cnZlVG8iLCJfdXBkYXRlQW5pbWF0aW9uVGFyZ2V0IiwiYW5pbVgiLCJhbmltWSIsIl93aWxsUmVuZGVyIiwiaGFzVG9vbHRpcENvbnRlbnQiLCJnbG9iYWxBbHBoYSIsInBvc2l0aW9uQ2hhbmdlZCIsIl9wb3NpdGlvbkNoYW5nZWQiLCJfaWdub3JlUmVwbGF5RXZlbnRzIiwicGx1Z2luX3Rvb2x0aXAiLCJhZnRlckluaXQiLCJhZnRlckRyYXciLCJDb2xvcnMiLCJEZWNpbWF0aW9uIiwiRmlsbGVyIiwiU3ViVGl0bGUiLCJfZ2V0TGFiZWxGb3JWYWx1ZSIsInJlbGF0aXZlTGFiZWxTaXplIiwibWluU3BhY2luZyIsIkxpbmVhclNjYWxlQmFzZSIsIl9zdGFydFZhbHVlIiwiX2VuZFZhbHVlIiwiX3ZhbHVlUmFuZ2UiLCJoYW5kbGVUaWNrUmFuZ2VPcHRpb25zIiwic2V0TWluIiwic2V0TWF4IiwibWluU2lnbiIsIm1heFNpZ24iLCJnZXRUaWNrTGltaXQiLCJtYXhUaWNrcyIsInN0ZXBTaXplIiwiY29tcHV0ZVRpY2tMaW1pdCIsImdlbmVyYXRpb25PcHRpb25zIiwiZGF0YVJhbmdlIiwicHJlY2lzaW9uIiwibWF4RGlnaXRzIiwiaW5jbHVkZUJvdW5kcyIsInVuaXQiLCJtYXhTcGFjZXMiLCJybWluIiwicm1heCIsImNvdW50RGVmaW5lZCIsIm5pY2VNaW4iLCJuaWNlTWF4IiwibnVtU3BhY2VzIiwicm91bmRlZCIsImFsbW9zdFdob2xlIiwiZGVjaW1hbFBsYWNlcyIsImdlbmVyYXRlVGlja3MkMSIsIkxpbmVhclNjYWxlIiwibG9nMTBGbG9vciIsImNoYW5nZUV4cG9uZW50IiwiaXNNYWpvciIsInRpY2tWYWwiLCJzdGVwcyIsInJhbmdlRXhwIiwicmFuZ2VTdGVwIiwiTG9nYXJpdGhtaWNTY2FsZSIsIl96ZXJvIiwibWluRXhwIiwiZXhwIiwic3RhcnRFeHAiLCJsYXN0VGljayIsImdlbmVyYXRlVGlja3MiLCJnZXRUaWNrQmFja2Ryb3BIZWlnaHQiLCJtZWFzdXJlTGFiZWxTaXplIiwiZGV0ZXJtaW5lTGltaXRzIiwidXBkYXRlTGltaXRzIiwibGltaXRzIiwiaExpbWl0cyIsInZMaW1pdHMiLCJjcmVhdGVQb2ludExhYmVsSXRlbSIsIml0ZW1PcHRzIiwib3V0ZXJEaXN0YW5jZSIsImRyYXdpbmdBcmVhIiwiZXh0cmEiLCJhZGRpdGlvbmFsQW5nbGUiLCJwb2ludExhYmVsUG9zaXRpb24iLCJnZXRQb2ludFBvc2l0aW9uIiwieUZvckFuZ2xlIiwiZ2V0VGV4dEFsaWduRm9yQW5nbGUiLCJpc05vdE92ZXJsYXBwZWQiLCJkcmF3UG9pbnRMYWJlbEJveCIsImJhY2tkcm9wTGVmdCIsImJhY2tkcm9wVG9wIiwiYmFja2Ryb3BXaWR0aCIsImJhY2tkcm9wSGVpZ2h0IiwicGF0aFJhZGl1c0xpbmUiLCJSYWRpYWxMaW5lYXJTY2FsZSIsImFuaW1hdGUiLCJjZW50ZXJQb2ludExhYmVscyIsIl9wb2ludExhYmVscyIsIl9wb2ludExhYmVsSXRlbXMiLCJ2YWx1ZUNvdW50IiwicG9pbnRMYWJlbE9wdHMiLCJnZXRQb2ludExhYmVsQ29udGV4dCIsInBsRm9udCIsInNldENlbnRlclBvaW50IiwiYnVpbGRQb2ludExhYmVsSXRlbXMiLCJmaXRXaXRoUG9pbnRMYWJlbHMiLCJsZWZ0TW92ZW1lbnQiLCJyaWdodE1vdmVtZW50IiwidG9wTW92ZW1lbnQiLCJib3R0b21Nb3ZlbWVudCIsInNjYWxpbmdGYWN0b3IiLCJnZXRWYWx1ZUZvckRpc3RhbmNlRnJvbUNlbnRlciIsInNjYWxlZERpc3RhbmNlIiwicG9pbnRMYWJlbCIsImNyZWF0ZVBvaW50TGFiZWxDb250ZXh0IiwiZGlzdGFuY2VGcm9tQ2VudGVyIiwiZ2V0QmFzZVBvc2l0aW9uIiwiZ2V0UG9pbnRMYWJlbFBvc2l0aW9uIiwiZHJhd1BvaW50TGFiZWxzIiwiZ3JpZExpbmVPcHRzIiwiZHJhd1JhZGl1c0xpbmUiLCJJTlRFUlZBTFMiLCJtaWxsaXNlY29uZCIsImNvbW1vbiIsInNlY29uZCIsIm1pbnV0ZSIsImhvdXIiLCJ3ZWVrIiwicXVhcnRlciIsInllYXIiLCJVTklUUyIsInNvcnRlciIsImFkYXB0ZXIiLCJfYWRhcHRlciIsInBhcnNlciIsImlzb1dlZWtkYXkiLCJfcGFyc2VPcHRzIiwiZGV0ZXJtaW5lVW5pdEZvckF1dG9UaWNrcyIsIm1pblVuaXQiLCJjYXBhY2l0eSIsImludGVydmFsIiwiTUFYX1NBRkVfSU5URUdFUiIsImFkZFRpY2siLCJ0aW1lIiwidGltZXN0YW1wcyIsInRpY2tzRnJvbVRpbWVzdGFtcHMiLCJtYWpvclVuaXQiLCJzZXRNYWpvclRpY2tzIiwiVGltZVNjYWxlIiwiZGlzcGxheUZvcm1hdHMiLCJfdW5pdCIsIl9tYWpvclVuaXQiLCJfb2Zmc2V0cyIsIl9ub3JtYWxpemVkIiwibm9ybWFsaXplZCIsIl9hcHBseUJvdW5kcyIsIl9nZXRMYWJlbEJvdW5kcyIsImdldExhYmVsVGltZXN0YW1wcyIsInRpbWVPcHRzIiwiX2dlbmVyYXRlIiwiX2ZpbHRlckJldHdlZW4iLCJfZ2V0TGFiZWxDYXBhY2l0eSIsImRldGVybWluZVVuaXRGb3JGb3JtYXR0aW5nIiwiZGV0ZXJtaW5lTWFqb3JVbml0IiwiaW5pdE9mZnNldHMiLCJvZmZzZXRBZnRlckF1dG9za2lwIiwiZ2V0RGVjaW1hbEZvclZhbHVlIiwiaGFzV2Vla2RheSIsImdldERhdGFUaW1lc3RhbXBzIiwidG9vbHRpcEZvcm1hdCIsImRhdGV0aW1lIiwiZm10IiwiX3RpY2tGb3JtYXRGdW5jdGlvbiIsIm1pbm9yRm9ybWF0IiwibWFqb3JGb3JtYXQiLCJvZmZzZXRzIiwiX2dldExhYmVsU2l6ZSIsInRpY2tzT3B0cyIsInRpY2tMYWJlbFdpZHRoIiwiY29zUm90YXRpb24iLCJzaW5Sb3RhdGlvbiIsInRpY2tGb250U2l6ZSIsImV4YW1wbGVUaW1lIiwiZXhhbXBsZUxhYmVsIiwicHJldlNvdXJjZSIsIm5leHRTb3VyY2UiLCJwcmV2VGFyZ2V0IiwibmV4dFRhcmdldCIsInNwYW4iLCJDYXRlZ29yeVNjYWxlIiwiX2FkZGVkTGFiZWxzIiwiYWRkZWQiLCJhZGRlZExhYmVscyIsImFkZElmU3RyaW5nIiwibGFzdEluZGV4T2YiLCJmaW5kT3JBZGRMYWJlbCIsIlRpbWVTZXJpZXNTY2FsZSIsIl90YWJsZSIsIl9taW5Qb3MiLCJfdGFibGVSYW5nZSIsIl9nZXRUaW1lc3RhbXBzRm9yVGFibGUiLCJidWlsZExvb2t1cFRhYmxlIiwicmVnaXN0ZXJhYmxlcyIsInN0YXRlIiwiZmlsdGVyRWxlbWVudHMiLCJuZWFyZXN0SXRlbXMiLCJldmVuUG9pbnQiLCJnZXRQb2ludEJ5QXhpcyIsImdldE5lYXJlc3RJdGVtIiwiZ2V0RWxlbWVudHMiLCJ2aXNpYmxlRWxlbWVudHMiLCJpblJhbmdlQnlBeGlzIiwiaXNPbGRlclBhcnQiLCJhY3QiLCJyZXEiLCJjbGFtcCIsImNsYW1wQWxsIiwiaW5Cb3hSYW5nZSIsImhCb3JkZXJXaWR0aCIsImluUmFuZ2VYIiwiaW5SYW5nZVkiLCJnZXRFbGVtZW50Q2VudGVyUG9pbnQiLCJpc1BlcmNlbnRTdHJpbmciLCJ0b1BlcmNlbnQiLCJ0b1Bvc2l0aXZlUGVyY2VudCIsImJveEFwcGVyaW5nIiwiZGVmYXVsdEluaXRBbmltYXRpb24iLCJwb2x5Z29uIiwiZ2V0U2l6ZSIsInBvc2l0aXZlUGVyY2VudCIsInRvUG9zaXRpb24iLCJpc0JvdW5kVG9Qb2ludCIsInhWYWx1ZSIsInlWYWx1ZSIsImluaXRBbmltYXRpb25Qcm9wZXJ0aWVzIiwiaW5pdEFuaW0iLCJhcHBseURlZmF1bHQiLCJleGVjQ2FsbGJhY2siLCJsb2FkSG9va3MiLCJob29rcyIsImhvb2tzQ29udGFpbmVyIiwid2lkdGhDYWNoZSIsImZvbnRzS2V5IiwiZm9udHMiLCJpc0ltYWdlT3JDYW52YXMiLCJzZXRCb3JkZXJTdHlsZSIsInNldFNoYWRvd1N0eWxlIiwic2hhZG93Q29sb3IiLCJiYWNrZ3JvdW5kU2hhZG93Q29sb3IiLCJzaGFkb3dCbHVyIiwic2hhZG93T2Zmc2V0WCIsInNoYWRvd09mZnNldFkiLCJvcHRGb250IiwibWFwS2V5IiwiY2FsY3VsYXRlTGFiZWxTaXplIiwiZHJhd0JveCIsImJvcmRlclNoYWRvd0NvbG9yIiwibGltaXRlZExpbmVTY2FsZSIsInhTY2FsZUlEIiwic3RhcnRQcm9wIiwiZW5kUHJvcCIsInlTY2FsZUlEIiwic2NhbGVWYWx1ZSIsInJldHJpZXZlU2NhbGVJRCIsImF4ZXMiLCJnZXREaW1lbnNpb25CeVNjYWxlIiwiZ2V0Q2hhcnRQb2ludCIsInJlc29sdmVCb3hQcm9wZXJ0aWVzIiwieERpbSIsImdldENoYXJ0RGltZW5zaW9uQnlTY2FsZSIsInhNYXgiLCJ5RGltIiwieU1pbiIsInlNYXgiLCJyZXNvbHZlUG9pbnRQcm9wZXJ0aWVzIiwiYWRqdXN0Q2VudGVyWCIsInhBZGp1c3QiLCJhZGp1c3RDZW50ZXJZIiwieUFkanVzdCIsImdldENoYXJ0Q2lyY2xlIiwicmVzb2x2ZUJveEFuZExhYmVsUHJvcGVydGllcyIsImluaXRQcm9wZXJ0aWVzIiwib3B0aW9uU2NvcGUiLCJyZXNvbHZlTGFiZWxFbGVtZW50UHJvcGVydGllcyQxIiwiY2FsY3VsYXRlUG9zaXRpb24kMSIsImJveE9wdHMiLCJwYWRTdGFydCIsInBhZEVuZCIsImFkanVzdCIsImNhbGxvdXQiLCJsYWJlbFNpemUiLCJjYWxjdWxhdGVYIiwiY2FsY3VsYXRlWSIsInJvdGF0ZWQiLCJjeCIsImN5IiwibW92ZUhvb2tzIiwiZXZlbnRIb29rcyIsImRpc3BhdGNoTW92ZUV2ZW50cyIsImNoZWNrRWxlbWVudHMiLCJkaXNwYXRjaEV2ZW50IiwiZWxlbWVudEhvb2tzIiwiaW52b2tlSG9vayIsImhvb2tlZCIsImNoYW5nZVNjYWxlTGltaXQiLCJzdWdnZXN0ZWRMaW1pdCIsInNjYWxlTGltaXREZWZpbmVkIiwidmVyaWZ5U2NhbGVJRHMiLCJhbm5vdGF0aW9uIiwidmVyaWZ5UHJvcGVydGllcyIsIkJveEFubm90YXRpb24iLCJyZXNvbHZlRWxlbWVudFByb3BlcnRpZXMiLCJhZGp1c3RTY2FsZVJhbmdlIiwiTGFiZWxBbm5vdGF0aW9uIiwiX3Zpc2libGUiLCJwb2ludFgiLCJwb2ludFkiLCJjYWxsb3V0UG9zaXRpb24iLCJ4UG9pbnRzIiwieVBvaW50cyIsInJvdGF0ZWRQb2ludCIsInJlc29sdmVDYWxsb3V0QXV0b1Bvc2l0aW9uIiwicmVzb2x2ZUNhbGxvdXRQb3NpdGlvbiIsImlzUG9pbnRJblJhbmdlIiwic2VwYXJhdG9yU3RhcnQiLCJzZXBhcmF0b3JFbmQiLCJnZXRDYWxsb3V0U2VwYXJhdG9yQWRqdXN0IiwiZ2V0Q2FsbG91dFNlcGFyYXRvckNvb3JkIiwic2lkZVN0YXJ0Iiwic2lkZUVuZCIsInNpZGUiLCJnZXRDYWxsb3V0U2lkZUFkanVzdCIsImdldENhbGxvdXRTaWRlQ29vcmQiLCJkcmF3Q2FsbG91dCIsImVsZW1lbnRWYWx1ZSIsImdldE9wYWNpdHkiLCJvcHRDb2xvciIsImNhbGN1bGF0ZVRleHRBbGlnbm1lbnQiLCJtaXRlckxpbWl0Iiwic2V0VGV4dFN0cm9rZVN0eWxlIiwibGhzIiwiYXBwbHlMYWJlbERlY29yYXRpb24iLCJhcHBseUxhYmVsQ29udGVudCIsImRyYXdMYWJlbCIsImdldExhYmVsU2l6ZSIsImJveFNpemUiLCJjYWxjdWxhdGVQb3NpdGlvbiIsIm1lYXN1cmVSZWN0IiwicG9pbnRJbkxpbmUiLCJpbnRlcnBvbGF0ZVgiLCJpbnRlcnBvbGF0ZVkiLCJzcXIiLCJjb29yZEluQ3VydmUiLCJjcCIsInBvaW50SW5DdXJ2ZSIsImNvb3JkQW5nbGVJbkN1cnZlIiwiYW5nbGVJbkN1cnZlIiwiTGluZUFubm90YXRpb24iLCJteCIsIm15IiwiaXNQb2ludEluU3Ryb2tlIiwiaXNPbkxhYmVsIiwiZHkiLCJsZW5TcSIsInh4IiwieXkiLCJpbnRlcnNlY3RzIiwicmFuZ2VMaW1pdCIsImluQXhpc1JhbmdlIiwiY3VydmUiLCJzdGFydE9wdHMiLCJlbmRPcHRzIiwic3RhcnRBZGp1c3QiLCJlbmRBZGp1c3QiLCJnZXRBcnJvd0hlYWRzIiwicHMiLCJwZSIsImRyYXdBcnJvd0hlYWRPbkN1cnZlIiwiZHJhd0N1cnZlIiwiZHJhd0Fycm93SGVhZCIsInJlc29sdmVGdWxsTGluZVByb3BlcnRpZXMiLCJzY2FsZUlkIiwiZGltIiwicmVzb2x2ZUxpbWl0ZWRMaW5lUHJvcGVydGllcyIsInJlc29sdmVMaW5lUHJvcGVydGllcyIsImlzTGluZUluQXJlYSIsImxpbWl0UG9pbnRUb0FyZWEiLCJsaW1pdExpbmVUb0FyZWEiLCJjb250cm9sUG9pbnQiLCJnZXRDb250cm9sUG9pbnQiLCJsYWJlbFByb3BlcnRpZXMiLCJzaXplcyIsImNhbGN1bGF0ZUF1dG9Sb3RhdGlvbiIsInJvdGF0ZWRTaXplIiwic3BhY2UiLCJzcGFjZUFyb3VuZCIsImNhbGN1bGF0ZVRBZGp1c3QiLCJjYWxjdWxhdGVUIiwieENvb3JkaW5hdGVTaXplcyIsInlDb29yZGluYXRlU2l6ZXMiLCJhZGp1c3RMYWJlbENvb3JkaW5hdGUiLCJjYWxjdWxhdGVMYWJlbFBvc2l0aW9uIiwicmVzb2x2ZUxhYmVsRWxlbWVudFByb3BlcnRpZXMiLCJhcnJvd0hlYWRzRGVmYXVsdHMiLCJsaW5lU2l6ZSIsImxpbmVXIiwibGluZUgiLCJjb29yZGluYXRlIiwiaGFsZlNpemUiLCJhcnJvd1N0YXJ0T3B0cyIsImFycm93SGVhZHMiLCJhcnJvd0VuZE9wdHMiLCJnZXRMaW5lQWRqdXN0IiwiYXJyb3dPcHRzIiwiYXJyb3dPZmZzZXRYIiwiRWxsaXBzZUFubm90YXRpb24iLCJ4UmFkaXVzIiwieVJhZGl1cyIsImNvc0FuZ2xlIiwic2luQW5nbGUiLCJwb2ludEluRWxsaXBzZSIsIlBvaW50QW5ub3RhdGlvbiIsImluUG9pbnRSYW5nZSIsIm5vdFJhZGl1cyIsImRyYXdQb2ludFN0eWxlIiwiUG9seWdvbkFubm90YXRpb24iLCJpc0luc2lkZSIsImJZIiwiYlgiLCJwb2ludElzSW5Qb2x5Z29uIiwiYXhpc1BvaW50cyIsInNpZGVzIiwiZWxQcm9wcyIsImJ1aWxkUG9pbnRFbGVtZW50IiwiaGFsZkJvcmRlciIsImFubm90YXRpb25UeXBlcyIsImRpcmVjdFVwZGF0ZXIiLCJob29rcyQxIiwib3B0RGVmcyIsInJlc29sdmVPYmoiLCJyZXNvbHZlVHlwZSIsInRvU2tpcCIsInVwZGF0ZVN1YkVsZW1lbnRzIiwibWFpbkVsZW1lbnQiLCJzdWJFbGVtZW50cyIsInN1YkVsZW1lbnQiLCJnZXRPckNyZWF0ZUVsZW1lbnQiLCJzdWJSZXNvbHZlciIsInJlc29sdmVBbm5vdGF0aW9uT3B0aW9ucyIsImVsZW1lbnRDbGFzcyIsImRlZnMiLCJjaGFydFN0YXRlcyIsInZlcnNpb24iLCJiZWZvcmVSZWdpc3RlciIsInBrZyIsInZlciIsInN0cmljdCIsInJlcXVpcmVWZXJzaW9uIiwiYWZ0ZXJSZWdpc3RlciIsImFmdGVyVW5yZWdpc3RlciIsImJlZm9yZUluaXQiLCJhbm5vdGF0aW9ucyIsImxpc3RlbmVkIiwibW92ZUxpc3RlbmVkIiwiaG92ZXJlZCIsImFubm90YXRpb25PcHRpb25zIiwidmVyaWZ5U2NhbGVPcHRpb25zIiwic2NhbGVJRE9wdGlvbiIsImdldFNjYWxlTGltaXRzIiwiX2dldEVsZW1lbnRzIiwiY2xpY2siLCJ1cGRhdGVMaXN0ZW5lcnMiLCJhbmltT3B0cyIsInJlc29sdmVBbmltYXRpb25zIiwicmVzeW5jRWxlbWVudHMiLCJ1cGRhdGVIb29rcyIsImFmdGVyRGF0YXNldHNEcmF3IiwiYmVmb3JlRXZlbnQiLCJoYW5kbGVNb3ZlRXZlbnRzIiwiaGFuZGxlQ2xpY2tFdmVudHMiLCJhZnRlckRlc3Ryb3kiLCJfZ2V0U3RhdGUiLCJjYWxsZXIiLCJkcmF3YWJsZUVsZW1lbnRzIiwibWFpbiIsImdldERyYXdhYmxlRWxlbWVudHMiLCJkcmF3RWxlbWVudCIsIkdyYXBoIiwiYW5ub3RhdGlvblBsdWdpbiIsImJ0bkJhciIsImJ0blRlbXAiLCJidG5SYWluIiwic2V0dGluZ1doaWNoR3JhcGgiLCJ0b1BhcnNlIiwicGFyc2VkRGF0YSIsImdldEhvdXJzIiwibGluZU5vdyIsImxpbmVOb3dWYWx1ZSIsImxhc3RfdXBkYXRlZCIsInVuaXRzIiwiY2FjaGVkQ2hhcnQiLCJsaW5lMSIsIkZvb3RlciIsImN1cnJlbnRZZWFyIiwiZ2V0RnVsbFllYXIiLCJmb290ZXJTdHJpbmciLCJkaXZGb290ZXIiLCJpbm5lckhUTUwiLCJqdXN0aWZ5Q29udGVudCIsImFsaWduSXRlbXMiLCJvdXRwdXQiLCJib2FyIiwidGl0bGVUZXh0IiwiQXBwIiwibG9hZGluZyIsImhlYWRlciIsImdyYXBoIiwiZGF5c0JhciIsImFwaUNhbGwiLCJhc3luYyIsIl9sb2NhdGlvbiIsInJlcXVlc3RMb2NhdGlvbiIsImZldGNoIiwicGFyc2VkUmVxdWVzdCIsImpzb24iLCJjb3VudHJ5X2NvZGVfaXNvMyIsImNpdHkiLCJxdWVyeUxvY2F0aW9uQVBJIiwiY2F0Y2giLCJsb2ciLCJyZXF1ZXN0V2VhdGhlciIsInF1ZXJ5V2VhdGhlckFQSSIsImluc3RhbmNlIiwiYXBwIl0sInNvdXJjZVJvb3QiOiIifQ==