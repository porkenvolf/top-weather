/*! For license information please see index.bundle.js.LICENSE.txt */
(()=>{"use strict";var t={514:(t,e,i)=>{i.d(e,{Z:()=>h});var n=i(537),s=i.n(n),o=i(645),r=i.n(o),a=i(728),l=r()(s());l.i(a.Z),l.push([t.id,"#appContainer {\n  position: relative;\n  border-radius: 10px;\n  display: flex;\n  flex-direction: column;\n  width: min(var(--minWidth), 100%);\n  padding: 10px;\n  gap: 15px;\n  overflow: hidden;\n}\n","",{version:3,sources:["webpack://./src/css/components/App.css"],names:[],mappings:"AAEA;EACE,kBAAkB;EAClB,mBAAmB;EACnB,aAAa;EACb,sBAAsB;EACtB,iCAAiC;EACjC,aAAa;EACb,SAAS;EACT,gBAAgB;AAClB",sourcesContent:["@import url(../variables.css);\n\n#appContainer {\n  position: relative;\n  border-radius: 10px;\n  display: flex;\n  flex-direction: column;\n  width: min(var(--minWidth), 100%);\n  padding: 10px;\n  gap: 15px;\n  overflow: hidden;\n}\n"],sourceRoot:""}]);const h=l},738:(t,e,i)=>{i.d(e,{Z:()=>h});var n=i(537),s=i.n(n),o=i(645),r=i.n(o),a=i(728),l=r()(s());l.i(a.Z),l.push([t.id,"#dayContainer {\n  flex: 1 0 auto;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: 1rem 1fr 1rem;\n  padding: 5px; /* \n  border: 2px solid grey; */\n  border-radius: 10px;\n  gap: 5px;\n  cursor: pointer;\n}\n\n#dayDay {\n  grid-row: 1;\n  grid-column: 1/-1;\n  text-align: center;\n}\n#dayIcon {\n  grid-row: 2;\n  grid-column: 1/-1;\n  align-self: center;\n  justify-self: center;\n  width: 100%;\n}\n#dayMax {\n  grid-row: 3;\n  grid-column: 1;\n  text-align: center;\n\n  font-size: 0.8rem;\n}\n#dayMin {\n  grid-row: 3;\n  grid-column: 2;\n  text-align: center;\n  font-size: 0.8rem;\n  color: var(--textMid);\n}\n#dayContainer.selected {\n  background: var(--bgMid);\n}\n","",{version:3,sources:["webpack://./src/css/components/Day.css"],names:[],mappings:"AAEA;EACE,cAAc;EACd,aAAa;EACb,8BAA8B;EAC9B,iCAAiC;EACjC,YAAY,EAAE;2BACW;EACzB,mBAAmB;EACnB,QAAQ;EACR,eAAe;AACjB;;AAEA;EACE,WAAW;EACX,iBAAiB;EACjB,kBAAkB;AACpB;AACA;EACE,WAAW;EACX,iBAAiB;EACjB,kBAAkB;EAClB,oBAAoB;EACpB,WAAW;AACb;AACA;EACE,WAAW;EACX,cAAc;EACd,kBAAkB;;EAElB,iBAAiB;AACnB;AACA;EACE,WAAW;EACX,cAAc;EACd,kBAAkB;EAClB,iBAAiB;EACjB,qBAAqB;AACvB;AACA;EACE,wBAAwB;AAC1B",sourcesContent:['@import url("../variables.css");\n\n#dayContainer {\n  flex: 1 0 auto;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: 1rem 1fr 1rem;\n  padding: 5px; /* \n  border: 2px solid grey; */\n  border-radius: 10px;\n  gap: 5px;\n  cursor: pointer;\n}\n\n#dayDay {\n  grid-row: 1;\n  grid-column: 1/-1;\n  text-align: center;\n}\n#dayIcon {\n  grid-row: 2;\n  grid-column: 1/-1;\n  align-self: center;\n  justify-self: center;\n  width: 100%;\n}\n#dayMax {\n  grid-row: 3;\n  grid-column: 1;\n  text-align: center;\n\n  font-size: 0.8rem;\n}\n#dayMin {\n  grid-row: 3;\n  grid-column: 2;\n  text-align: center;\n  font-size: 0.8rem;\n  color: var(--textMid);\n}\n#dayContainer.selected {\n  background: var(--bgMid);\n}\n'],sourceRoot:""}]);const h=l},132:(t,e,i)=>{i.d(e,{Z:()=>h});var n=i(537),s=i.n(n),o=i(645),r=i.n(o),a=i(728),l=r()(s());l.i(a.Z),l.push([t.id,"#container {\n  margin: 10px 0;\n  display: flex;\n  gap: 10px;\n  scroll-margin: 20px;\n}\n\n@media (max-width: 725px) {\n  /*  FIX: doesn't work witn var() */\n  #container {\n    overflow-x: scroll;\n  }\n}\n","",{version:3,sources:["webpack://./src/css/components/DaysBar.css"],names:[],mappings:"AAEA;EACE,cAAc;EACd,aAAa;EACb,SAAS;EACT,mBAAmB;AACrB;;AAEA;EACE,kCAAkC;EAClC;IACE,kBAAkB;EACpB;AACF",sourcesContent:['@import url("../variables.css");\n\n#container {\n  margin: 10px 0;\n  display: flex;\n  gap: 10px;\n  scroll-margin: 20px;\n}\n\n@media (max-width: 725px) {\n  /*  FIX: doesn\'t work witn var() */\n  #container {\n    overflow-x: scroll;\n  }\n}\n'],sourceRoot:""}]);const h=l},884:(t,e,i)=>{i.d(e,{Z:()=>h});var n=i(537),s=i.n(n),o=i(645),r=i.n(o),a=i(728),l=r()(s());l.i(a.Z),l.push([t.id,"#graphContainer {\n  position: relative;\n  width: 100%;\n  height: 200px;\n  color: var(--textDark);\n  font-size: 0.8rem;\n}\n#graphContainer #btnBar {\n  display: flex;\n  gap: 15px;\n}\n#graphContainer #btnBar div {\n  cursor: pointer;\n}\n#graphContainer #btnTemp.selected {\n  border-bottom: 3px solid #1a83dd;\n  color: var(--textLight);\n}\n#graphContainer #btnRain.selected {\n  border-bottom: 3px solid #dd1a79;\n  color: var(--textLight);\n}\n","",{version:3,sources:["webpack://./src/css/components/Graph.css"],names:[],mappings:"AACA;EACE,kBAAkB;EAClB,WAAW;EACX,aAAa;EACb,sBAAsB;EACtB,iBAAiB;AACnB;AACA;EACE,aAAa;EACb,SAAS;AACX;AACA;EACE,eAAe;AACjB;AACA;EACE,gCAAgC;EAChC,uBAAuB;AACzB;AACA;EACE,gCAAgC;EAChC,uBAAuB;AACzB",sourcesContent:['@import url("../variables.css");\n#graphContainer {\n  position: relative;\n  width: 100%;\n  height: 200px;\n  color: var(--textDark);\n  font-size: 0.8rem;\n}\n#graphContainer #btnBar {\n  display: flex;\n  gap: 15px;\n}\n#graphContainer #btnBar div {\n  cursor: pointer;\n}\n#graphContainer #btnTemp.selected {\n  border-bottom: 3px solid #1a83dd;\n  color: var(--textLight);\n}\n#graphContainer #btnRain.selected {\n  border-bottom: 3px solid #dd1a79;\n  color: var(--textLight);\n}\n'],sourceRoot:""}]);const h=l},874:(t,e,i)=>{i.d(e,{Z:()=>h});var n=i(537),s=i.n(n),o=i(645),r=i.n(o),a=i(728),l=r()(s());l.i(a.Z),l.push([t.id,"#headerContainer {\n  display: grid;\n  grid-template-columns: 5rem 5rem 1fr 1fr;\n}\n#headerIcon {\n  grid-column: 1;\n  grid-row: 1;\n  width: 100%;\n  align-self: center;\n  justify-self: center;\n}\n#headerTemperature {\n  grid-column: 2;\n  grid-row: 1;\n  font-size: 3rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n#headerHumidity {\n  grid-column: 1/3;\n  grid-row: 3;\n  font-size: 0.8rem;\n  color: var(--textMid);\n}\n#headerWind {\n  grid-column: 1/3;\n  grid-row: 5;\n  font-size: 0.8rem;\n  color: var(--textMid);\n}\n\n#headerChanceRain {\n  grid-column: 1/3;\n  grid-row: 4;\n  color: var(--textMid);\n  font-size: 0.8rem;\n}\n\n#headerDay {\n  grid-column: 3/6;\n  grid-row: 4;\n  text-align: end;\n  color: var(--textMid);\n  font-size: 0.8rem;\n}\n\n#headerCondition {\n  grid-column: 3/6;\n  grid-row: 5;\n  text-align: end;\n  color: var(--textMid);\n  font-size: 0.8rem;\n}\n\n#searchContainer {\n  grid-column: 5/6;\n  grid-row: 1;\n}\n\n#headerLocation {\n  grid-column: 3/6;\n  grid-row: 3;\n  text-align: end;\n  color: var(--textMid);\n  font-size: 0.8rem;\n}\n\n#unitSelectorContainer {\n  grid-row: 1;\n  grid-column: 3/5;\n}\n\n@media (max-width: 475px) {\n  #searchContainer {\n    grid-row: 2;\n    grid-column: 1/6;\n    margin: 10px 0;\n  }\n}\n","",{version:3,sources:["webpack://./src/css/components/Header.css"],names:[],mappings:"AAEA;EACE,aAAa;EACb,wCAAwC;AAC1C;AACA;EACE,cAAc;EACd,WAAW;EACX,WAAW;EACX,kBAAkB;EAClB,oBAAoB;AACtB;AACA;EACE,cAAc;EACd,WAAW;EACX,eAAe;EACf,aAAa;EACb,mBAAmB;EACnB,uBAAuB;AACzB;AACA;EACE,gBAAgB;EAChB,WAAW;EACX,iBAAiB;EACjB,qBAAqB;AACvB;AACA;EACE,gBAAgB;EAChB,WAAW;EACX,iBAAiB;EACjB,qBAAqB;AACvB;;AAEA;EACE,gBAAgB;EAChB,WAAW;EACX,qBAAqB;EACrB,iBAAiB;AACnB;;AAEA;EACE,gBAAgB;EAChB,WAAW;EACX,eAAe;EACf,qBAAqB;EACrB,iBAAiB;AACnB;;AAEA;EACE,gBAAgB;EAChB,WAAW;EACX,eAAe;EACf,qBAAqB;EACrB,iBAAiB;AACnB;;AAEA;EACE,gBAAgB;EAChB,WAAW;AACb;;AAEA;EACE,gBAAgB;EAChB,WAAW;EACX,eAAe;EACf,qBAAqB;EACrB,iBAAiB;AACnB;;AAEA;EACE,WAAW;EACX,gBAAgB;AAClB;;AAEA;EACE;IACE,WAAW;IACX,gBAAgB;IAChB,cAAc;EAChB;AACF",sourcesContent:['@import url("../variables.css");\n\n#headerContainer {\n  display: grid;\n  grid-template-columns: 5rem 5rem 1fr 1fr;\n}\n#headerIcon {\n  grid-column: 1;\n  grid-row: 1;\n  width: 100%;\n  align-self: center;\n  justify-self: center;\n}\n#headerTemperature {\n  grid-column: 2;\n  grid-row: 1;\n  font-size: 3rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n#headerHumidity {\n  grid-column: 1/3;\n  grid-row: 3;\n  font-size: 0.8rem;\n  color: var(--textMid);\n}\n#headerWind {\n  grid-column: 1/3;\n  grid-row: 5;\n  font-size: 0.8rem;\n  color: var(--textMid);\n}\n\n#headerChanceRain {\n  grid-column: 1/3;\n  grid-row: 4;\n  color: var(--textMid);\n  font-size: 0.8rem;\n}\n\n#headerDay {\n  grid-column: 3/6;\n  grid-row: 4;\n  text-align: end;\n  color: var(--textMid);\n  font-size: 0.8rem;\n}\n\n#headerCondition {\n  grid-column: 3/6;\n  grid-row: 5;\n  text-align: end;\n  color: var(--textMid);\n  font-size: 0.8rem;\n}\n\n#searchContainer {\n  grid-column: 5/6;\n  grid-row: 1;\n}\n\n#headerLocation {\n  grid-column: 3/6;\n  grid-row: 3;\n  text-align: end;\n  color: var(--textMid);\n  font-size: 0.8rem;\n}\n\n#unitSelectorContainer {\n  grid-row: 1;\n  grid-column: 3/5;\n}\n\n@media (max-width: 475px) {\n  #searchContainer {\n    grid-row: 2;\n    grid-column: 1/6;\n    margin: 10px 0;\n  }\n}\n'],sourceRoot:""}]);const h=l},55:(t,e,i)=>{i.d(e,{Z:()=>h});var n=i(537),s=i.n(n),o=i(645),r=i.n(o),a=i(728),l=r()(s());l.i(a.Z),l.push([t.id,"#loadingContainer {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: var(--bgDark);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\nimg.loadingWheel {\n  animation: rotate 1s infinite linear;\n  height: 10rem;\n  width: auto;\n  filter: invert(1) brightness(0.8);\n}\n@keyframes rotate {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n","",{version:3,sources:["webpack://./src/css/components/Loading.css"],names:[],mappings:"AAEA;EACE,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,WAAW;EACX,YAAY;EACZ,yBAAyB;EACzB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;AACA;EACE,oCAAoC;EACpC,aAAa;EACb,WAAW;EACX,iCAAiC;AACnC;AACA;EACE;IACE,uBAAuB;EACzB;EACA;IACE,yBAAyB;EAC3B;AACF",sourcesContent:['@import url("../variables.css");\n\n#loadingContainer {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: var(--bgDark);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\nimg.loadingWheel {\n  animation: rotate 1s infinite linear;\n  height: 10rem;\n  width: auto;\n  filter: invert(1) brightness(0.8);\n}\n@keyframes rotate {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n'],sourceRoot:""}]);const h=l},558:(t,e,i)=>{i.d(e,{Z:()=>h});var n=i(537),s=i.n(n),o=i(645),r=i.n(o),a=i(728),l=r()(s());l.i(a.Z),l.push([t.id,"#searchContainer {\n  display: flex;\n  justify-content: flex-end;\n}\ninput {\n  flex: 1 1 100%;\n  /* max-width: calc(var(--minWidth) / 2); */\n  padding: 10px;\n  border-radius: 50px;\n  border: 2px solid var(--textDark);\n  background: var(--bgMid);\n  color: var(--textLight);\n  height: 1rem;\n  align-self: center;\n}\n","",{version:3,sources:["webpack://./src/css/components/SearchBar.css"],names:[],mappings:"AACA;EACE,aAAa;EACb,yBAAyB;AAC3B;AACA;EACE,cAAc;EACd,0CAA0C;EAC1C,aAAa;EACb,mBAAmB;EACnB,iCAAiC;EACjC,wBAAwB;EACxB,uBAAuB;EACvB,YAAY;EACZ,kBAAkB;AACpB",sourcesContent:['@import url("../variables.css");\n#searchContainer {\n  display: flex;\n  justify-content: flex-end;\n}\ninput {\n  flex: 1 1 100%;\n  /* max-width: calc(var(--minWidth) / 2); */\n  padding: 10px;\n  border-radius: 50px;\n  border: 2px solid var(--textDark);\n  background: var(--bgMid);\n  color: var(--textLight);\n  height: 1rem;\n  align-self: center;\n}\n'],sourceRoot:""}]);const h=l},629:(t,e,i)=>{i.d(e,{Z:()=>h});var n=i(537),s=i.n(n),o=i(645),r=i.n(o),a=i(728),l=r()(s());l.i(a.Z),l.push([t.id,'#unitSelectorContainer {\n  display: flex;\n  align-items: start;\n}\n\n#unitSelectorContainer div {\n  padding-left: 5px;\n  margin-top: 1.15rem;\n  color: var(--textDark);\n  cursor: pointer;\n}\n\n#unitSelectorContainer div:last-child::before {\n  content: "|";\n  color: var(--textDark);\n}\n\n#unitSelectorContainer .selected {\n  color: var(--textLight);\n}\n',"",{version:3,sources:["webpack://./src/css/components/UnitSelector.css"],names:[],mappings:"AAEA;EACE,aAAa;EACb,kBAAkB;AACpB;;AAEA;EACE,iBAAiB;EACjB,mBAAmB;EACnB,sBAAsB;EACtB,eAAe;AACjB;;AAEA;EACE,YAAY;EACZ,sBAAsB;AACxB;;AAEA;EACE,uBAAuB;AACzB",sourcesContent:['@import url("../variables.css");\n\n#unitSelectorContainer {\n  display: flex;\n  align-items: start;\n}\n\n#unitSelectorContainer div {\n  padding-left: 5px;\n  margin-top: 1.15rem;\n  color: var(--textDark);\n  cursor: pointer;\n}\n\n#unitSelectorContainer div:last-child::before {\n  content: "|";\n  color: var(--textDark);\n}\n\n#unitSelectorContainer .selected {\n  color: var(--textLight);\n}\n'],sourceRoot:""}]);const h=l},217:(t,e,i)=>{i.d(e,{Z:()=>a});var n=i(537),s=i.n(n),o=i(645),r=i.n(o)()(s());r.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;1,300;1,400;1,500;1,600&display=swap);"]),r.push([t.id,':root {\n  font-family: "Open Sans", sans-serif;\n}\n',"",{version:3,sources:["webpack://./src/css/font.css"],names:[],mappings:"AAEA;EACE,oCAAoC;AACtC",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;1,300;1,400;1,500;1,600&display=swap");\n\n:root {\n  font-family: "Open Sans", sans-serif;\n}\n'],sourceRoot:""}]);const a=r},195:(t,e,i)=>{i.d(e,{Z:()=>h});var n=i(537),s=i.n(n),o=i(645),r=i.n(o),a=i(728),l=r()(s());l.i(a.Z),l.push([t.id,":root {\n  scrollbar-color: #acacac transparent;\n}\n::-webkit-scrollbar {\n  height: 17px;\n  width: 17px;\n  background: var(--bgDark);\n}\n\n::-webkit-scrollbar-thumb {\n  background: var(--textDark);\n  -webkit-border-radius: 1ex;\n  border: solid 5px var(--bgDark);\n}\n\n::-webkit-scrollbar-corner {\n  background: var(--bgDark);\n}\n\n::-webkit-scrollbar-track {\n  box-shadow: inset 0 0 10px 10px var(--bgDark);\n  border: solid 5px var(--bgDark);\n}\n","",{version:3,sources:["webpack://./src/css/scrollbar.css"],names:[],mappings:"AAEA;EACE,oCAAoC;AACtC;AACA;EACE,YAAY;EACZ,WAAW;EACX,yBAAyB;AAC3B;;AAEA;EACE,2BAA2B;EAC3B,0BAA0B;EAC1B,+BAA+B;AACjC;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,6CAA6C;EAC7C,+BAA+B;AACjC",sourcesContent:['@import url("./variables.css");\n\n:root {\n  scrollbar-color: #acacac transparent;\n}\n::-webkit-scrollbar {\n  height: 17px;\n  width: 17px;\n  background: var(--bgDark);\n}\n\n::-webkit-scrollbar-thumb {\n  background: var(--textDark);\n  -webkit-border-radius: 1ex;\n  border: solid 5px var(--bgDark);\n}\n\n::-webkit-scrollbar-corner {\n  background: var(--bgDark);\n}\n\n::-webkit-scrollbar-track {\n  box-shadow: inset 0 0 10px 10px var(--bgDark);\n  border: solid 5px var(--bgDark);\n}\n'],sourceRoot:""}]);const h=l},402:(t,e,i)=>{i.d(e,{Z:()=>c});var n=i(537),s=i.n(n),o=i(645),r=i.n(o),a=i(728),l=i(195),h=r()(s());h.i(a.Z),h.i(l.Z),h.push([t.id,"* {\n  -webkit-user-select: none; /* Safari */\n  -ms-user-select: none; /* IE 10 and IE 11 */\n  user-select: none; /* Standard syntax */\n}\nbody {\n  background: var(--bgDark);\n  color: var(--textLight);\n  /* min-height: 100vh; */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n","",{version:3,sources:["webpack://./src/css/style.css"],names:[],mappings:"AAGA;EACE,yBAAyB,EAAE,WAAW;EACtC,qBAAqB,EAAE,oBAAoB;EAC3C,iBAAiB,EAAE,oBAAoB;AACzC;AACA;EACE,yBAAyB;EACzB,uBAAuB;EACvB,uBAAuB;EACvB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB",sourcesContent:['@import url("./variables.css");\n@import url("./scrollbar.css");\n\n* {\n  -webkit-user-select: none; /* Safari */\n  -ms-user-select: none; /* IE 10 and IE 11 */\n  user-select: none; /* Standard syntax */\n}\nbody {\n  background: var(--bgDark);\n  color: var(--textLight);\n  /* min-height: 100vh; */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n'],sourceRoot:""}]);const c=h},728:(t,e,i)=>{i.d(e,{Z:()=>a});var n=i(537),s=i.n(n),o=i(645),r=i.n(o)()(s());r.push([t.id,":root {\n  --bgDark: #202124;\n  --bgMid: #2b2e36;\n\n  --textDark: #70717a;\n  --textMid: #7f8089;\n  --textLight: #e8eaed;\n\n  --minWidth: 700px;\n}\n","",{version:3,sources:["webpack://./src/css/variables.css"],names:[],mappings:"AAAA;EACE,iBAAiB;EACjB,gBAAgB;;EAEhB,mBAAmB;EACnB,kBAAkB;EAClB,oBAAoB;;EAEpB,iBAAiB;AACnB",sourcesContent:[":root {\n  --bgDark: #202124;\n  --bgMid: #2b2e36;\n\n  --textDark: #70717a;\n  --textMid: #7f8089;\n  --textLight: #e8eaed;\n\n  --minWidth: 700px;\n}\n"],sourceRoot:""}]);const a=r},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i="",n=void 0!==e[5];return e[4]&&(i+="@supports (".concat(e[4],") {")),e[2]&&(i+="@media ".concat(e[2]," {")),n&&(i+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),i+=t(e),n&&(i+="}"),e[2]&&(i+="}"),e[4]&&(i+="}"),i})).join("")},e.i=function(t,i,n,s,o){"string"==typeof t&&(t=[[null,t,void 0]]);var r={};if(n)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(r[l]=!0)}for(var h=0;h<t.length;h++){var c=[].concat(t[h]);n&&r[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),i&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=i):c[2]=i),s&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=s):c[4]="".concat(s)),e.push(c))}},e}},537:t=>{t.exports=function(t){var e=t[1],i=t[3];if(!i)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),o="/*# ".concat(s," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function i(t){for(var i=-1,n=0;n<e.length;n++)if(e[n].identifier===t){i=n;break}return i}function n(t,n){for(var o={},r=[],a=0;a<t.length;a++){var l=t[a],h=n.base?l[0]+n.base:l[0],c=o[h]||0,d="".concat(h," ").concat(c);o[h]=c+1;var u=i(d),f={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)e[u].references++,e[u].updater(f);else{var p=s(f,n);n.byIndex=a,e.splice(a,0,{identifier:d,updater:p,references:1})}r.push(d)}return r}function s(t,e){var i=e.domAPI(e);return i.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;i.update(t=e)}else i.remove()}}t.exports=function(t,s){var o=n(t=t||[],s=s||{});return function(t){t=t||[];for(var r=0;r<o.length;r++){var a=i(o[r]);e[a].references--}for(var l=n(t,s),h=0;h<o.length;h++){var c=i(o[h]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}o=l}}},569:t=>{var e={};t.exports=function(t,i){var n=function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}e[t]=i}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(i)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,i)=>{t.exports=function(t){var e=i.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(i){!function(t,e,i){var n="";i.supports&&(n+="@supports (".concat(i.supports,") {")),i.media&&(n+="@media ".concat(i.media," {"));var s=void 0!==i.layer;s&&(n+="@layer".concat(i.layer.length>0?" ".concat(i.layer):""," {")),n+=i.css,s&&(n+="}"),i.media&&(n+="}"),i.supports&&(n+="}");var o=i.sourceMap;o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,i)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function i(n){var s=e[n];if(void 0!==s)return s.exports;var o=e[n]={id:n,exports:{}};return t[n](o,o.exports,i),o.exports}i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;i.g.importScripts&&(t=i.g.location+"");var e=i.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");if(n.length)for(var s=n.length-1;s>-1&&!t;)t=n[s--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=t})(),i.nc=void 0,(()=>{var t=i(379),e=i.n(t),n=i(795),s=i.n(n),o=i(569),r=i.n(o),a=i(565),l=i.n(a),h=i(216),c=i.n(h),d=i(589),u=i.n(d),f=i(217),p={};p.styleTagTransform=u(),p.setAttributes=l(),p.insert=r().bind(null,"head"),p.domAPI=s(),p.insertStyleElement=c(),e()(f.Z,p),f.Z&&f.Z.locals&&f.Z.locals;var g=i(402),m={};m.styleTagTransform=u(),m.setAttributes=l(),m.insert=r().bind(null,"head"),m.domAPI=s(),m.insertStyleElement=c(),e()(g.Z,m),g.Z&&g.Z.locals&&g.Z.locals;const x={Pubsub:{},on(t,e){this.Pubsub[t]=this.Pubsub[t]||[],this.Pubsub[t].push(e)},off(t,e){if(this.Pubsub[t])for(let i=0;i<this.Pubsub[t].length;i++)if(this.Pubsub[t][i]===e){this.Pubsub[t].splice(i,1);break}},emit(t,e){this.Pubsub[t]&&this.Pubsub[t].forEach((t=>{t(e)}))}};var b=i(558),y={};y.styleTagTransform=u(),y.setAttributes=l(),y.insert=r().bind(null,"head"),y.domAPI=s(),y.insertStyleElement=c(),e()(b.Z,y),b.Z&&b.Z.locals&&b.Z.locals;class v{constructor(){this.container=document.createElement("div"),this.container.id="searchContainer",this.searchBar=document.createElement("input"),this.searchBar.type="text",this.searchBar.placeholder="Search location",this.container.append(this.searchBar),this.bindEvents()}bindEvents(){this.searchBar.addEventListener("change",(()=>{x.emit("apiCall",this.searchBar.value),x.emit("selectedDay",0)}))}}class _{static cachedData;static tempUnits="c";static windUnits="kph";static selectedDay=0}var A=i(629),w={};w.styleTagTransform=u(),w.setAttributes=l(),w.insert=r().bind(null,"head"),w.domAPI=s(),w.insertStyleElement=c(),e()(A.Z,w),A.Z&&A.Z.locals&&A.Z.locals;class C{constructor(){this.container=document.createElement("div"),this.container.id="unitSelectorContainer",this.divC=document.createElement("div"),this.divC.innerText="°C",this.divF=document.createElement("div"),this.divF.innerText="°F",this.container.append(this.divC,this.divF),"c"===_.tempUnits?this.divC.classList.toggle("selected"):this.divF.classList.toggle("selected"),this.bindEvents()}bindEvents(){this.divC.addEventListener("click",(()=>{this.divF.classList.remove("selected"),this.divC.classList.add("selected"),_.tempUnits="c",_.windUnits="kph",x.emit("renderHeader",_.selectedDay),x.emit("renderDaysBar"),x.emit("renderGraph",_.selectedDay)})),this.divF.addEventListener("click",(()=>{this.divC.classList.remove("selected"),this.divF.classList.add("selected"),_.tempUnits="f",_.windUnits="mph",x.emit("renderHeader",_.selectedDay),x.emit("renderDaysBar"),x.emit("renderGraph",_.selectedDay)}))}}var M=i(874),k={};k.styleTagTransform=u(),k.setAttributes=l(),k.insert=r().bind(null,"head"),k.domAPI=s(),k.insertStyleElement=c(),e()(M.Z,k),M.Z&&M.Z.locals&&M.Z.locals;class E{constructor(){this.container=document.createElement("div"),this.container.id="headerContainer",this.imgIcon=document.createElement("img"),this.imgIcon.id="headerIcon",this.divTemperature=document.createElement("div"),this.divTemperature.id="headerTemperature",this.divHumidity=document.createElement("div"),this.divHumidity.id="headerHumidity",this.divWindSpeed=document.createElement("div"),this.divWindSpeed.id="headerWind",this.divChanceRain=document.createElement("div"),this.divChanceRain.id="headerChanceRain",this.divDay=document.createElement("div"),this.divDay.id="headerDay",this.divCondition=document.createElement("div"),this.divCondition.id="headerCondition",this.divLocation=document.createElement("div"),this.divLocation.id="headerLocation",this.searchBar=new v,this.unitSelector=new C,this.container.append(this.imgIcon,this.divTemperature,this.divHumidity,this.divWindSpeed,this.divChanceRain,this.divDay,this.divCondition,this.searchBar.container,this.divLocation,this.unitSelector.container),this.bindEvents()}bindEvents(){x.on("renderHeader",(t=>{const{icon:e}=_.cachedData.forecast.forecastday[t].day.condition,i=_.cachedData.forecast.forecastday[t].day.daily_chance_of_rain,n=_.cachedData.forecast.forecastday[t].day.condition.text,s=new Date(_.cachedData.forecast.forecastday[t].date).toLocaleDateString("en-US",{weekday:"long",day:"numeric",month:"long",timeZone:"UTC"}),o=`${_.cachedData.location.name}, ${_.cachedData.location.country}`;let r,a,l;0===t?(r=Math.floor(_.cachedData.current[`temp_${_.tempUnits}`]),a=_.cachedData.current.humidity,l=_.cachedData.current[`wind_${_.windUnits}`]):(r=Math.floor(_.cachedData.forecast.forecastday[t].day[`avgtemp_${_.tempUnits}`]),a=_.cachedData.forecast.forecastday[t].day.avghumidity,l=_.cachedData.forecast.forecastday[t].day[`maxwind_${_.windUnits}`]),this.render({icon:e,temp:r,humidity:a,wind:l,chanceOfRain:i,day:s,condition:n,location:o})}))}render(t){this.imgIcon.src=t.icon,this.divTemperature.innerText=`${t.temp}°`,this.divHumidity.innerText=`Humidity: ${t.humidity}%`,this.divWindSpeed.innerText=`Wind speed: ${t.wind} ${_.windUnits}`,this.divChanceRain.innerText=`Chance of rain: ${t.chanceOfRain}%`,this.divDay.innerText=t.day,this.divCondition.innerText=t.condition,this.divLocation.innerText=t.location}}var S=i(738),D={};D.styleTagTransform=u(),D.setAttributes=l(),D.insert=r().bind(null,"head"),D.domAPI=s(),D.insertStyleElement=c(),e()(S.Z,D),S.Z&&S.Z.locals&&S.Z.locals;class P{constructor(t){let e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this.index=t,this.isCurrentDay=e,this.container=document.createElement("div"),this.container.id="dayContainer",e&&this.container.classList.add("selected"),this.imgIcon=document.createElement("img"),this.imgIcon.id="dayIcon",this.divDayOfWeek=document.createElement("div"),this.divDayOfWeek.id="dayDay",this.divTemperatureMAX=document.createElement("div"),this.divTemperatureMAX.id="dayMax",this.divTemperatureMIN=document.createElement("div"),this.divTemperatureMIN.id="dayMin",this.container.append(this.imgIcon,this.divDayOfWeek,this.divTemperatureMAX,this.divTemperatureMIN),this.bindEvents()}render(t){this.cachedData=t,this.imgIcon.src=t.day.condition.icon,this.divDayOfWeek.innerText=new Date(1e3*t.date_epoch).toLocaleDateString("en-US",{weekday:"short",timeZone:"UTC"}),this.divTemperatureMAX.innerText=`${t.day[`maxtemp_${_.tempUnits}`]}°`,this.divTemperatureMIN.innerText=`${t.day[`mintemp_${_.tempUnits}`]}°`}bindEvents(){this.container.addEventListener("click",(()=>{x.emit("renderHeader",this.index),x.emit("renderGraph",this.index),x.emit("renderHourly",this.index),x.emit("selectedDay",this.index)}))}}var B=i(132),T={};T.styleTagTransform=u(),T.setAttributes=l(),T.insert=r().bind(null,"head"),T.domAPI=s(),T.insertStyleElement=c(),e()(B.Z,T),B.Z&&B.Z.locals&&B.Z.locals;class O{days=[];constructor(t){this.container=document.createElement("div"),this.container.id="container";for(let e=0;e<t;e++){const t=0===e;this.days.push(new P(e,t)),this.container.append(this.days[e].container)}this.bindEvents()}bindEvents(){x.on("selectedDay",(t=>{this.days.forEach((t=>{t.container.classList.remove("selected")})),this.days[t].container.classList.add("selected"),_.selectedDay=t})),x.on("renderDaysBar",(()=>{this.render(_.cachedData)}))}render(t){this.days.forEach((e=>{e.render(t.forecast.forecastday[e.index])}))}}const L=i.p+"fb33b006dd56733dd60b.svg";var R=i(55),I={};I.styleTagTransform=u(),I.setAttributes=l(),I.insert=r().bind(null,"head"),I.domAPI=s(),I.insertStyleElement=c(),e()(R.Z,I),R.Z&&R.Z.locals&&R.Z.locals;class z{constructor(){this.container=document.createElement("div"),this.container.id="loadingContainer",this.wheel=document.createElement("img"),this.wheel.classList="loadingWheel",this.wheel.src=L,this.container.append(this.wheel)}}function W(t){return t+.5|0}const F=(t,e,i)=>Math.max(Math.min(t,i),e);function j(t){return F(W(2.55*t),0,255)}function V(t){return F(W(255*t),0,255)}function N(t){return F(W(t/2.55)/100,0,1)}function H(t){return F(W(100*t),0,100)}const Y={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},$=[..."0123456789ABCDEF"],X=t=>$[15&t],U=t=>$[(240&t)>>4]+$[15&t],Z=t=>(240&t)>>4==(15&t);const q=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function G(t,e,i){const n=e*Math.min(i,1-i),s=(e,s=(e+t/30)%12)=>i-n*Math.max(Math.min(s-3,9-s,1),-1);return[s(0),s(8),s(4)]}function K(t,e,i){const n=(n,s=(n+t/60)%6)=>i-i*e*Math.max(Math.min(s,4-s,1),0);return[n(5),n(3),n(1)]}function J(t,e,i){const n=G(t,1,.5);let s;for(e+i>1&&(s=1/(e+i),e*=s,i*=s),s=0;s<3;s++)n[s]*=1-e-i,n[s]+=e;return n}function Q(t){const e=t.r/255,i=t.g/255,n=t.b/255,s=Math.max(e,i,n),o=Math.min(e,i,n),r=(s+o)/2;let a,l,h;return s!==o&&(h=s-o,l=r>.5?h/(2-s-o):h/(s+o),a=function(t,e,i,n,s){return t===s?(e-i)/n+(e<i?6:0):e===s?(i-t)/n+2:(t-e)/n+4}(e,i,n,h,s),a=60*a+.5),[0|a,l||0,r]}function tt(t,e,i,n){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,i,n)).map(V)}function et(t,e,i){return tt(G,t,e,i)}function it(t){return(t%360+360)%360}const nt={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},st={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let ot;const rt=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,at=t=>t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055,lt=t=>t<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4);function ht(t,e,i){if(t){let n=Q(t);n[e]=Math.max(0,Math.min(n[e]+n[e]*i,0===e?360:1)),n=et(n),t.r=n[0],t.g=n[1],t.b=n[2]}}function ct(t,e){return t?Object.assign(e||{},t):t}function dt(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=V(t[3]))):(e=ct(t,{r:0,g:0,b:0,a:1})).a=V(e.a),e}function ut(t){return"r"===t.charAt(0)?function(t){const e=rt.exec(t);let i,n,s,o=255;if(e){if(e[7]!==i){const t=+e[7];o=e[8]?j(t):F(255*t,0,255)}return i=+e[1],n=+e[3],s=+e[5],i=255&(e[2]?j(i):F(i,0,255)),n=255&(e[4]?j(n):F(n,0,255)),s=255&(e[6]?j(s):F(s,0,255)),{r:i,g:n,b:s,a:o}}}(t):function(t){const e=q.exec(t);let i,n=255;if(!e)return;e[5]!==i&&(n=e[6]?j(+e[5]):V(+e[5]));const s=it(+e[2]),o=+e[3]/100,r=+e[4]/100;return i="hwb"===e[1]?function(t,e,i){return tt(J,t,e,i)}(s,o,r):"hsv"===e[1]?function(t,e,i){return tt(K,t,e,i)}(s,o,r):et(s,o,r),{r:i[0],g:i[1],b:i[2],a:n}}(t)}class ft{constructor(t){if(t instanceof ft)return t;const e=typeof t;let i;var n,s,o;"object"===e?i=dt(t):"string"===e&&(o=(n=t).length,"#"===n[0]&&(4===o||5===o?s={r:255&17*Y[n[1]],g:255&17*Y[n[2]],b:255&17*Y[n[3]],a:5===o?17*Y[n[4]]:255}:7!==o&&9!==o||(s={r:Y[n[1]]<<4|Y[n[2]],g:Y[n[3]]<<4|Y[n[4]],b:Y[n[5]]<<4|Y[n[6]],a:9===o?Y[n[7]]<<4|Y[n[8]]:255})),i=s||function(t){ot||(ot=function(){const t={},e=Object.keys(st),i=Object.keys(nt);let n,s,o,r,a;for(n=0;n<e.length;n++){for(r=a=e[n],s=0;s<i.length;s++)o=i[s],a=a.replace(o,nt[o]);o=parseInt(st[r],16),t[a]=[o>>16&255,o>>8&255,255&o]}return t}(),ot.transparent=[0,0,0,0]);const e=ot[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}(t)||ut(t)),this._rgb=i,this._valid=!!i}get valid(){return this._valid}get rgb(){var t=ct(this._rgb);return t&&(t.a=N(t.a)),t}set rgb(t){this._rgb=dt(t)}rgbString(){return this._valid?(t=this._rgb)&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${N(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`):void 0;var t}hexString(){return this._valid?(t=this._rgb,e=(t=>Z(t.r)&&Z(t.g)&&Z(t.b)&&Z(t.a))(t)?X:U,t?"#"+e(t.r)+e(t.g)+e(t.b)+((t,e)=>t<255?e(t):"")(t.a,e):void 0):void 0;var t,e}hslString(){return this._valid?function(t){if(!t)return;const e=Q(t),i=e[0],n=H(e[1]),s=H(e[2]);return t.a<255?`hsla(${i}, ${n}%, ${s}%, ${N(t.a)})`:`hsl(${i}, ${n}%, ${s}%)`}(this._rgb):void 0}mix(t,e){if(t){const i=this.rgb,n=t.rgb;let s;const o=e===s?.5:e,r=2*o-1,a=i.a-n.a,l=((r*a==-1?r:(r+a)/(1+r*a))+1)/2;s=1-l,i.r=255&l*i.r+s*n.r+.5,i.g=255&l*i.g+s*n.g+.5,i.b=255&l*i.b+s*n.b+.5,i.a=o*i.a+(1-o)*n.a,this.rgb=i}return this}interpolate(t,e){return t&&(this._rgb=function(t,e,i){const n=lt(N(t.r)),s=lt(N(t.g)),o=lt(N(t.b));return{r:V(at(n+i*(lt(N(e.r))-n))),g:V(at(s+i*(lt(N(e.g))-s))),b:V(at(o+i*(lt(N(e.b))-o))),a:t.a+i*(e.a-t.a)}}(this._rgb,t._rgb,e)),this}clone(){return new ft(this.rgb)}alpha(t){return this._rgb.a=V(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=W(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return ht(this._rgb,2,t),this}darken(t){return ht(this._rgb,2,-t),this}saturate(t){return ht(this._rgb,1,t),this}desaturate(t){return ht(this._rgb,1,-t),this}rotate(t){return function(t,e){var i=Q(t);i[0]=it(i[0]+e),i=et(i),t.r=i[0],t.g=i[1],t.b=i[2]}(this._rgb,t),this}}function pt(){}const gt=(()=>{let t=0;return()=>t++})();function mt(t){return null==t}function xt(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.slice(0,7)&&"Array]"===e.slice(-6)}function bt(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}function yt(t){return("number"==typeof t||t instanceof Number)&&isFinite(+t)}function vt(t,e){return yt(t)?t:e}function _t(t,e){return void 0===t?e:t}const At=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function wt(t,e,i){if(t&&"function"==typeof t.call)return t.apply(i,e)}function Ct(t,e,i,n){let s,o,r;if(xt(t))if(o=t.length,n)for(s=o-1;s>=0;s--)e.call(i,t[s],s);else for(s=0;s<o;s++)e.call(i,t[s],s);else if(bt(t))for(r=Object.keys(t),o=r.length,s=0;s<o;s++)e.call(i,t[r[s]],r[s])}function Mt(t,e){let i,n,s,o;if(!t||!e||t.length!==e.length)return!1;for(i=0,n=t.length;i<n;++i)if(s=t[i],o=e[i],s.datasetIndex!==o.datasetIndex||s.index!==o.index)return!1;return!0}function kt(t){if(xt(t))return t.map(kt);if(bt(t)){const e=Object.create(null),i=Object.keys(t),n=i.length;let s=0;for(;s<n;++s)e[i[s]]=kt(t[i[s]]);return e}return t}function Et(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function St(t,e,i,n){if(!Et(t))return;const s=e[t],o=i[t];bt(s)&&bt(o)?Dt(s,o,n):e[t]=kt(o)}function Dt(t,e,i){const n=xt(e)?e:[e],s=n.length;if(!bt(t))return t;const o=(i=i||{}).merger||St;let r;for(let e=0;e<s;++e){if(r=n[e],!bt(r))continue;const s=Object.keys(r);for(let e=0,n=s.length;e<n;++e)o(s[e],t,r,i)}return t}function Pt(t,e){return Dt(t,e,{merger:Bt})}function Bt(t,e,i){if(!Et(t))return;const n=e[t],s=i[t];bt(n)&&bt(s)?Pt(n,s):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=kt(s))}const Tt={"":t=>t,x:t=>t.x,y:t=>t.y};function Ot(t,e){const i=Tt[e]||(Tt[e]=function(t){const e=function(t){const e=t.split("."),i=[];let n="";for(const t of e)n+=t,n.endsWith("\\")?n=n.slice(0,-1)+".":(i.push(n),n="");return i}(t);return t=>{for(const i of e){if(""===i)break;t=t&&t[i]}return t}}(e));return i(t)}function Lt(t){return t.charAt(0).toUpperCase()+t.slice(1)}const Rt=t=>void 0!==t,It=t=>"function"==typeof t,zt=(t,e)=>{if(t.size!==e.size)return!1;for(const i of t)if(!e.has(i))return!1;return!0},Wt=Math.PI,Ft=2*Wt,jt=Ft+Wt,Vt=Number.POSITIVE_INFINITY,Nt=Wt/180,Ht=Wt/2,Yt=Wt/4,$t=2*Wt/3,Xt=Math.log10,Ut=Math.sign;function Zt(t,e,i){return Math.abs(t-e)<i}function qt(t){const e=Math.round(t);t=Zt(t,e,t/1e3)?e:t;const i=Math.pow(10,Math.floor(Xt(t))),n=t/i;return(n<=1?1:n<=2?2:n<=5?5:10)*i}function Gt(t){return!isNaN(parseFloat(t))&&isFinite(t)}function Kt(t,e,i){let n,s,o;for(n=0,s=t.length;n<s;n++)o=t[n][i],isNaN(o)||(e.min=Math.min(e.min,o),e.max=Math.max(e.max,o))}function Jt(t){return t*(Wt/180)}function Qt(t){return t*(180/Wt)}function te(t){if(!yt(t))return;let e=1,i=0;for(;Math.round(t*e)/e!==t;)e*=10,i++;return i}function ee(t,e){const i=e.x-t.x,n=e.y-t.y,s=Math.sqrt(i*i+n*n);let o=Math.atan2(n,i);return o<-.5*Wt&&(o+=Ft),{angle:o,distance:s}}function ie(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function ne(t,e){return(t-e+jt)%Ft-Wt}function se(t){return(t%Ft+Ft)%Ft}function oe(t,e,i,n){const s=se(t),o=se(e),r=se(i),a=se(o-s),l=se(r-s),h=se(s-o),c=se(s-r);return s===o||s===r||n&&o===r||a>l&&h<c}function re(t,e,i){return Math.max(e,Math.min(i,t))}function ae(t,e,i,n=1e-6){return t>=Math.min(e,i)-n&&t<=Math.max(e,i)+n}function le(t,e,i){i=i||(i=>t[i]<e);let n,s=t.length-1,o=0;for(;s-o>1;)n=o+s>>1,i(n)?o=n:s=n;return{lo:o,hi:s}}const he=(t,e,i,n)=>le(t,i,n?n=>{const s=t[n][e];return s<i||s===i&&t[n+1][e]===i}:n=>t[n][e]<i),ce=(t,e,i)=>le(t,i,(n=>t[n][e]>=i)),de=["push","pop","shift","splice","unshift"];function ue(t,e){const i=t._chartjs;if(!i)return;const n=i.listeners,s=n.indexOf(e);-1!==s&&n.splice(s,1),n.length>0||(de.forEach((e=>{delete t[e]})),delete t._chartjs)}function fe(t){const e=new Set(t);return e.size===t.length?t:Array.from(e)}const pe="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function ge(t,e){let i=[],n=!1;return function(...s){i=s,n||(n=!0,pe.call(window,(()=>{n=!1,t.apply(e,i)})))}}const me=t=>"start"===t?"left":"end"===t?"right":"center",xe=(t,e,i)=>"start"===t?e:"end"===t?i:(e+i)/2;function be(t,e,i){const n=e.length;let s=0,o=n;if(t._sorted){const{iScale:r,_parsed:a}=t,l=r.axis,{min:h,max:c,minDefined:d,maxDefined:u}=r.getUserBounds();d&&(s=re(Math.min(he(a,l,h).lo,i?n:he(e,l,r.getPixelForValue(h)).lo),0,n-1)),o=u?re(Math.max(he(a,r.axis,c,!0).hi+1,i?0:he(e,l,r.getPixelForValue(c),!0).hi+1),s,n)-s:n-s}return{start:s,count:o}}function ye(t){const{xScale:e,yScale:i,_scaleRanges:n}=t,s={xmin:e.min,xmax:e.max,ymin:i.min,ymax:i.max};if(!n)return t._scaleRanges=s,!0;const o=n.xmin!==e.min||n.xmax!==e.max||n.ymin!==i.min||n.ymax!==i.max;return Object.assign(n,s),o}const ve=t=>0===t||1===t,_e=(t,e,i)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*Ft/i),Ae=(t,e,i)=>Math.pow(2,-10*t)*Math.sin((t-e)*Ft/i)+1,we={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*Ht),easeOutSine:t=>Math.sin(t*Ht),easeInOutSine:t=>-.5*(Math.cos(Wt*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>ve(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>ve(t)?t:_e(t,.075,.3),easeOutElastic:t=>ve(t)?t:Ae(t,.075,.3),easeInOutElastic(t){const e=.1125;return ve(t)?t:t<.5?.5*_e(2*t,e,.45):.5+.5*Ae(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-we.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,i=2.75;return t<1/i?e*t*t:t<2/i?e*(t-=1.5/i)*t+.75:t<2.5/i?e*(t-=2.25/i)*t+.9375:e*(t-=2.625/i)*t+.984375},easeInOutBounce:t=>t<.5?.5*we.easeInBounce(2*t):.5*we.easeOutBounce(2*t-1)+.5};function Ce(t){if(t&&"object"==typeof t){const e=t.toString();return"[object CanvasPattern]"===e||"[object CanvasGradient]"===e}return!1}function Me(t){return Ce(t)?t:new ft(t)}function ke(t){return Ce(t)?t:new ft(t).saturate(.5).darken(.1).hexString()}const Ee=["x","y","borderWidth","radius","tension"],Se=["color","borderColor","backgroundColor"],De=new Map;function Pe(t,e,i){return function(t,e){e=e||{};const i=t+JSON.stringify(e);let n=De.get(i);return n||(n=new Intl.NumberFormat(t,e),De.set(i,n)),n}(e,i).format(t)}const Be={values:t=>xt(t)?t:""+t,numeric(t,e,i){if(0===t)return"0";const n=this.chart.options.locale;let s,o=t;if(i.length>1){const e=Math.max(Math.abs(i[0].value),Math.abs(i[i.length-1].value));(e<1e-4||e>1e15)&&(s="scientific"),o=function(t,e){let i=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;return Math.abs(i)>=1&&t!==Math.floor(t)&&(i=t-Math.floor(t)),i}(t,i)}const r=Xt(Math.abs(o)),a=isNaN(r)?1:Math.max(Math.min(-1*Math.floor(r),20),0),l={notation:s,minimumFractionDigits:a,maximumFractionDigits:a};return Object.assign(l,this.options.ticks.format),Pe(t,n,l)},logarithmic(t,e,i){if(0===t)return"0";const n=i[e].significand||t/Math.pow(10,Math.floor(Xt(t)));return[1,2,3,5,10,15].includes(n)||e>.8*i.length?Be.numeric.call(this,t,e,i):""}};var Te={formatters:Be};const Oe=Object.create(null),Le=Object.create(null);function Re(t,e){if(!e)return t;const i=e.split(".");for(let e=0,n=i.length;e<n;++e){const n=i[e];t=t[n]||(t[n]=Object.create(null))}return t}function Ie(t,e,i){return"string"==typeof e?Dt(Re(t,e),i):Dt(Re(t,""),e)}class ze{constructor(t,e){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>ke(e.backgroundColor),this.hoverBorderColor=(t,e)=>ke(e.borderColor),this.hoverColor=(t,e)=>ke(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0,includeInvisible:!1},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t),this.apply(e)}set(t,e){return Ie(this,t,e)}get(t){return Re(this,t)}describe(t,e){return Ie(Le,t,e)}override(t,e){return Ie(Oe,t,e)}route(t,e,i,n){const s=Re(this,t),o=Re(this,i),r="_"+e;Object.defineProperties(s,{[r]:{value:s[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[r],e=o[n];return bt(t)?Object.assign({},e,t):_t(t,e)},set(t){this[r]=t}}})}apply(t){t.forEach((t=>t(this)))}}var We=new ze({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}},[function(t){t.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0}),t.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),t.set("animations",{colors:{type:"color",properties:Se},numbers:{type:"number",properties:Ee}}),t.describe("animations",{_fallback:"animation"}),t.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}})},function(t){t.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}})},function(t){t.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1},border:{display:!0,dash:[],dashOffset:0,width:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:Te.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),t.route("scale.ticks","color","","color"),t.route("scale.grid","color","","borderColor"),t.route("scale.border","color","","borderColor"),t.route("scale.title","color","","color"),t.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t&&"dash"!==t}),t.describe("scales",{_fallback:"scale"}),t.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t})}]);function Fe(t,e,i,n,s){let o=e[s];return o||(o=e[s]=t.measureText(s).width,i.push(s)),o>n&&(n=o),n}function je(t,e,i,n){let s=(n=n||{}).data=n.data||{},o=n.garbageCollect=n.garbageCollect||[];n.font!==e&&(s=n.data={},o=n.garbageCollect=[],n.font=e),t.save(),t.font=e;let r=0;const a=i.length;let l,h,c,d,u;for(l=0;l<a;l++)if(d=i[l],null==d||xt(d)){if(xt(d))for(h=0,c=d.length;h<c;h++)u=d[h],null==u||xt(u)||(r=Fe(t,s,o,r,u))}else r=Fe(t,s,o,r,d);t.restore();const f=o.length/2;if(f>i.length){for(l=0;l<f;l++)delete s[o[l]];o.splice(0,f)}return r}function Ve(t,e,i){const n=t.currentDevicePixelRatio,s=0!==i?Math.max(i/2,.5):0;return Math.round((e-s)*n)/n+s}function Ne(t,e){(e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore()}function He(t,e,i,n){Ye(t,e,i,n,null)}function Ye(t,e,i,n,s){let o,r,a,l,h,c,d,u;const f=e.pointStyle,p=e.rotation,g=e.radius;let m=(p||0)*Nt;if(f&&"object"==typeof f&&(o=f.toString(),"[object HTMLImageElement]"===o||"[object HTMLCanvasElement]"===o))return t.save(),t.translate(i,n),t.rotate(m),t.drawImage(f,-f.width/2,-f.height/2,f.width,f.height),void t.restore();if(!(isNaN(g)||g<=0)){switch(t.beginPath(),f){default:s?t.ellipse(i,n,s/2,g,0,0,Ft):t.arc(i,n,g,0,Ft),t.closePath();break;case"triangle":c=s?s/2:g,t.moveTo(i+Math.sin(m)*c,n-Math.cos(m)*g),m+=$t,t.lineTo(i+Math.sin(m)*c,n-Math.cos(m)*g),m+=$t,t.lineTo(i+Math.sin(m)*c,n-Math.cos(m)*g),t.closePath();break;case"rectRounded":h=.516*g,l=g-h,r=Math.cos(m+Yt)*l,d=Math.cos(m+Yt)*(s?s/2-h:l),a=Math.sin(m+Yt)*l,u=Math.sin(m+Yt)*(s?s/2-h:l),t.arc(i-d,n-a,h,m-Wt,m-Ht),t.arc(i+u,n-r,h,m-Ht,m),t.arc(i+d,n+a,h,m,m+Ht),t.arc(i-u,n+r,h,m+Ht,m+Wt),t.closePath();break;case"rect":if(!p){l=Math.SQRT1_2*g,c=s?s/2:l,t.rect(i-c,n-l,2*c,2*l);break}m+=Yt;case"rectRot":d=Math.cos(m)*(s?s/2:g),r=Math.cos(m)*g,a=Math.sin(m)*g,u=Math.sin(m)*(s?s/2:g),t.moveTo(i-d,n-a),t.lineTo(i+u,n-r),t.lineTo(i+d,n+a),t.lineTo(i-u,n+r),t.closePath();break;case"crossRot":m+=Yt;case"cross":d=Math.cos(m)*(s?s/2:g),r=Math.cos(m)*g,a=Math.sin(m)*g,u=Math.sin(m)*(s?s/2:g),t.moveTo(i-d,n-a),t.lineTo(i+d,n+a),t.moveTo(i+u,n-r),t.lineTo(i-u,n+r);break;case"star":d=Math.cos(m)*(s?s/2:g),r=Math.cos(m)*g,a=Math.sin(m)*g,u=Math.sin(m)*(s?s/2:g),t.moveTo(i-d,n-a),t.lineTo(i+d,n+a),t.moveTo(i+u,n-r),t.lineTo(i-u,n+r),m+=Yt,d=Math.cos(m)*(s?s/2:g),r=Math.cos(m)*g,a=Math.sin(m)*g,u=Math.sin(m)*(s?s/2:g),t.moveTo(i-d,n-a),t.lineTo(i+d,n+a),t.moveTo(i+u,n-r),t.lineTo(i-u,n+r);break;case"line":r=s?s/2:Math.cos(m)*g,a=Math.sin(m)*g,t.moveTo(i-r,n-a),t.lineTo(i+r,n+a);break;case"dash":t.moveTo(i,n),t.lineTo(i+Math.cos(m)*(s?s/2:g),n+Math.sin(m)*g);break;case!1:t.closePath()}t.fill(),e.borderWidth>0&&t.stroke()}}function $e(t,e,i){return i=i||.5,!e||t&&t.x>e.left-i&&t.x<e.right+i&&t.y>e.top-i&&t.y<e.bottom+i}function Xe(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function Ue(t){t.restore()}function Ze(t,e,i,n,s){if(!e)return t.lineTo(i.x,i.y);if("middle"===s){const n=(e.x+i.x)/2;t.lineTo(n,e.y),t.lineTo(n,i.y)}else"after"===s!=!!n?t.lineTo(e.x,i.y):t.lineTo(i.x,e.y);t.lineTo(i.x,i.y)}function qe(t,e,i,n){if(!e)return t.lineTo(i.x,i.y);t.bezierCurveTo(n?e.cp1x:e.cp2x,n?e.cp1y:e.cp2y,n?i.cp2x:i.cp1x,n?i.cp2y:i.cp1y,i.x,i.y)}function Ge(t,e,i,n,s){if(s.strikethrough||s.underline){const o=t.measureText(n),r=e-o.actualBoundingBoxLeft,a=e+o.actualBoundingBoxRight,l=i-o.actualBoundingBoxAscent,h=i+o.actualBoundingBoxDescent,c=s.strikethrough?(l+h)/2:h;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=s.decorationWidth||2,t.moveTo(r,c),t.lineTo(a,c),t.stroke()}}function Ke(t,e){const i=t.fillStyle;t.fillStyle=e.color,t.fillRect(e.left,e.top,e.width,e.height),t.fillStyle=i}function Je(t,e,i,n,s,o={}){const r=xt(e)?e:[e],a=o.strokeWidth>0&&""!==o.strokeColor;let l,h;for(t.save(),t.font=s.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]),mt(e.rotation)||t.rotate(e.rotation),e.color&&(t.fillStyle=e.color),e.textAlign&&(t.textAlign=e.textAlign),e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,o),l=0;l<r.length;++l)h=r[l],o.backdrop&&Ke(t,o.backdrop),a&&(o.strokeColor&&(t.strokeStyle=o.strokeColor),mt(o.strokeWidth)||(t.lineWidth=o.strokeWidth),t.strokeText(h,i,n,o.maxWidth)),t.fillText(h,i,n,o.maxWidth),Ge(t,i,n,h,o),n+=Number(s.lineHeight);t.restore()}function Qe(t,e){const{x:i,y:n,w:s,h:o,radius:r}=e;t.arc(i+r.topLeft,n+r.topLeft,r.topLeft,-Ht,Wt,!0),t.lineTo(i,n+o-r.bottomLeft),t.arc(i+r.bottomLeft,n+o-r.bottomLeft,r.bottomLeft,Wt,Ht,!0),t.lineTo(i+s-r.bottomRight,n+o),t.arc(i+s-r.bottomRight,n+o-r.bottomRight,r.bottomRight,Ht,0,!0),t.lineTo(i+s,n+r.topRight),t.arc(i+s-r.topRight,n+r.topRight,r.topRight,0,-Ht,!0),t.lineTo(i+r.topLeft,n)}const ti=/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/,ei=/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;function ii(t,e){const i=(""+t).match(ti);if(!i||"normal"===i[1])return 1.2*e;switch(t=+i[2],i[3]){case"px":return t;case"%":t/=100}return e*t}const ni=t=>+t||0;function si(t,e){const i={},n=bt(e),s=n?Object.keys(e):e,o=bt(t)?n?i=>_t(t[i],t[e[i]]):e=>t[e]:()=>t;for(const t of s)i[t]=ni(o(t));return i}function oi(t){return si(t,{top:"y",right:"x",bottom:"y",left:"x"})}function ri(t){return si(t,["topLeft","topRight","bottomLeft","bottomRight"])}function ai(t){const e=oi(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function li(t,e){t=t||{},e=e||We.font;let i=_t(t.size,e.size);"string"==typeof i&&(i=parseInt(i,10));let n=_t(t.style,e.style);n&&!(""+n).match(ei)&&(console.warn('Invalid font style specified: "'+n+'"'),n=void 0);const s={family:_t(t.family,e.family),lineHeight:ii(_t(t.lineHeight,e.lineHeight),i),size:i,style:n,weight:_t(t.weight,e.weight),string:""};return s.string=function(t){return!t||mt(t.size)||mt(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}(s),s}function hi(t,e,i,n){let s,o,r,a=!0;for(s=0,o=t.length;s<o;++s)if(r=t[s],void 0!==r&&(void 0!==e&&"function"==typeof r&&(r=r(e),a=!1),void 0!==i&&xt(r)&&(r=r[i%r.length],a=!1),void 0!==r))return n&&!a&&(n.cacheable=!1),r}function ci(t,e){return Object.assign(Object.create(t),e)}function di(t,e=[""],i,n,s=(()=>t[0])){const o=i||t;void 0===n&&(n=Ai("_fallback",t));const r={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:o,_fallback:n,_getTarget:s,override:i=>di([i,...t],e,o,n)};return new Proxy(r,{deleteProperty:(e,i)=>(delete e[i],delete e._keys,delete t[0][i],!0),get:(i,n)=>mi(i,n,(()=>function(t,e,i,n){let s;for(const o of e)if(s=Ai(pi(o,t),i),void 0!==s)return gi(t,s)?vi(i,n,t,s):s}(n,e,t,i))),getOwnPropertyDescriptor:(t,e)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],e),getPrototypeOf:()=>Reflect.getPrototypeOf(t[0]),has:(t,e)=>wi(t).includes(e),ownKeys:t=>wi(t),set(t,e,i){const n=t._storage||(t._storage=s());return t[e]=n[e]=i,delete t._keys,!0}})}function ui(t,e,i,n){const s={_cacheable:!1,_proxy:t,_context:e,_subProxy:i,_stack:new Set,_descriptors:fi(t,n),setContext:e=>ui(t,e,i,n),override:s=>ui(t.override(s),e,i,n)};return new Proxy(s,{deleteProperty:(e,i)=>(delete e[i],delete t[i],!0),get:(t,e,i)=>mi(t,e,(()=>function(t,e,i){const{_proxy:n,_context:s,_subProxy:o,_descriptors:r}=t;let a=n[e];return It(a)&&r.isScriptable(e)&&(a=function(t,e,i,n){const{_proxy:s,_context:o,_subProxy:r,_stack:a}=i;if(a.has(t))throw new Error("Recursion detected: "+Array.from(a).join("->")+"->"+t);a.add(t);let l=e(o,r||n);return a.delete(t),gi(t,l)&&(l=vi(s._scopes,s,t,l)),l}(e,a,t,i)),xt(a)&&a.length&&(a=function(t,e,i,n){const{_proxy:s,_context:o,_subProxy:r,_descriptors:a}=i;if(void 0!==o.index&&n(t))return e[o.index%e.length];if(bt(e[0])){const i=e,n=s._scopes.filter((t=>t!==i));e=[];for(const l of i){const i=vi(n,s,t,l);e.push(ui(i,o,r&&r[t],a))}}return e}(e,a,t,r.isIndexable)),gi(e,a)&&(a=ui(a,s,o&&o[e],r)),a}(t,e,i))),getOwnPropertyDescriptor:(e,i)=>e._descriptors.allKeys?Reflect.has(t,i)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,i),getPrototypeOf:()=>Reflect.getPrototypeOf(t),has:(e,i)=>Reflect.has(t,i),ownKeys:()=>Reflect.ownKeys(t),set:(e,i,n)=>(t[i]=n,delete e[i],!0)})}function fi(t,e={scriptable:!0,indexable:!0}){const{_scriptable:i=e.scriptable,_indexable:n=e.indexable,_allKeys:s=e.allKeys}=t;return{allKeys:s,scriptable:i,indexable:n,isScriptable:It(i)?i:()=>i,isIndexable:It(n)?n:()=>n}}const pi=(t,e)=>t?t+Lt(e):e,gi=(t,e)=>bt(e)&&"adapters"!==t&&(null===Object.getPrototypeOf(e)||e.constructor===Object);function mi(t,e,i){if(Object.prototype.hasOwnProperty.call(t,e))return t[e];const n=i();return t[e]=n,n}function xi(t,e,i){return It(t)?t(e,i):t}const bi=(t,e)=>!0===t?e:"string"==typeof t?Ot(e,t):void 0;function yi(t,e,i,n,s){for(const o of e){const e=bi(i,o);if(e){t.add(e);const o=xi(e._fallback,i,s);if(void 0!==o&&o!==i&&o!==n)return o}else if(!1===e&&void 0!==n&&i!==n)return null}return!1}function vi(t,e,i,n){const s=e._rootScopes,o=xi(e._fallback,i,n),r=[...t,...s],a=new Set;a.add(n);let l=_i(a,r,i,o||i,n);return null!==l&&(void 0===o||o===i||(l=_i(a,r,o,l,n),null!==l))&&di(Array.from(a),[""],s,o,(()=>function(t,e,i){const n=t._getTarget();e in n||(n[e]={});const s=n[e];return xt(s)&&bt(i)?i:s||{}}(e,i,n)))}function _i(t,e,i,n,s){for(;i;)i=yi(t,e,i,n,s);return i}function Ai(t,e){for(const i of e){if(!i)continue;const e=i[t];if(void 0!==e)return e}}function wi(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const i of t)for(const t of Object.keys(i).filter((t=>!t.startsWith("_"))))e.add(t);return Array.from(e)}(t._scopes)),e}function Ci(t,e,i,n){const{iScale:s}=t,{key:o="r"}=this._parsing,r=new Array(n);let a,l,h,c;for(a=0,l=n;a<l;++a)h=a+i,c=e[h],r[a]={r:s.parse(Ot(c,o),h)};return r}const Mi=Number.EPSILON||1e-14,ki=(t,e)=>e<t.length&&!t[e].skip&&t[e],Ei=t=>"x"===t?"y":"x";function Si(t,e,i,n){const s=t.skip?e:t,o=e,r=i.skip?e:i,a=ie(o,s),l=ie(r,o);let h=a/(a+l),c=l/(a+l);h=isNaN(h)?0:h,c=isNaN(c)?0:c;const d=n*h,u=n*c;return{previous:{x:o.x-d*(r.x-s.x),y:o.y-d*(r.y-s.y)},next:{x:o.x+u*(r.x-s.x),y:o.y+u*(r.y-s.y)}}}function Di(t,e,i){return Math.max(Math.min(t,i),e)}function Pi(t,e,i,n,s){let o,r,a,l;if(e.spanGaps&&(t=t.filter((t=>!t.skip))),"monotone"===e.cubicInterpolationMode)!function(t,e="x"){const i=Ei(e),n=t.length,s=Array(n).fill(0),o=Array(n);let r,a,l,h=ki(t,0);for(r=0;r<n;++r)if(a=l,l=h,h=ki(t,r+1),l){if(h){const t=h[e]-l[e];s[r]=0!==t?(h[i]-l[i])/t:0}o[r]=a?h?Ut(s[r-1])!==Ut(s[r])?0:(s[r-1]+s[r])/2:s[r-1]:s[r]}!function(t,e,i){const n=t.length;let s,o,r,a,l,h=ki(t,0);for(let c=0;c<n-1;++c)l=h,h=ki(t,c+1),l&&h&&(Zt(e[c],0,Mi)?i[c]=i[c+1]=0:(s=i[c]/e[c],o=i[c+1]/e[c],a=Math.pow(s,2)+Math.pow(o,2),a<=9||(r=3/Math.sqrt(a),i[c]=s*r*e[c],i[c+1]=o*r*e[c])))}(t,s,o),function(t,e,i="x"){const n=Ei(i),s=t.length;let o,r,a,l=ki(t,0);for(let h=0;h<s;++h){if(r=a,a=l,l=ki(t,h+1),!a)continue;const s=a[i],c=a[n];r&&(o=(s-r[i])/3,a[`cp1${i}`]=s-o,a[`cp1${n}`]=c-o*e[h]),l&&(o=(l[i]-s)/3,a[`cp2${i}`]=s+o,a[`cp2${n}`]=c+o*e[h])}}(t,o,e)}(t,s);else{let i=n?t[t.length-1]:t[0];for(o=0,r=t.length;o<r;++o)a=t[o],l=Si(i,a,t[Math.min(o+1,r-(n?0:1))%r],e.tension),a.cp1x=l.previous.x,a.cp1y=l.previous.y,a.cp2x=l.next.x,a.cp2y=l.next.y,i=a}e.capBezierPoints&&function(t,e){let i,n,s,o,r,a=$e(t[0],e);for(i=0,n=t.length;i<n;++i)r=o,o=a,a=i<n-1&&$e(t[i+1],e),o&&(s=t[i],r&&(s.cp1x=Di(s.cp1x,e.left,e.right),s.cp1y=Di(s.cp1y,e.top,e.bottom)),a&&(s.cp2x=Di(s.cp2x,e.left,e.right),s.cp2y=Di(s.cp2y,e.top,e.bottom)))}(t,i)}function Bi(){return"undefined"!=typeof window&&"undefined"!=typeof document}function Ti(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function Oi(t,e,i){let n;return"string"==typeof t?(n=parseInt(t,10),-1!==t.indexOf("%")&&(n=n/100*e.parentNode[i])):n=t,n}const Li=t=>t.ownerDocument.defaultView.getComputedStyle(t,null),Ri=["top","right","bottom","left"];function Ii(t,e,i){const n={};i=i?"-"+i:"";for(let s=0;s<4;s++){const o=Ri[s];n[o]=parseFloat(t[e+"-"+o+i])||0}return n.width=n.left+n.right,n.height=n.top+n.bottom,n}const zi=(t,e,i)=>(t>0||e>0)&&(!i||!i.shadowRoot);function Wi(t,e){if("native"in t)return t;const{canvas:i,currentDevicePixelRatio:n}=e,s=Li(i),o="border-box"===s.boxSizing,r=Ii(s,"padding"),a=Ii(s,"border","width"),{x:l,y:h,box:c}=function(t,e){const i=t.touches,n=i&&i.length?i[0]:t,{offsetX:s,offsetY:o}=n;let r,a,l=!1;if(zi(s,o,t.target))r=s,a=o;else{const t=e.getBoundingClientRect();r=n.clientX-t.left,a=n.clientY-t.top,l=!0}return{x:r,y:a,box:l}}(t,i),d=r.left+(c&&a.left),u=r.top+(c&&a.top);let{width:f,height:p}=e;return o&&(f-=r.width+a.width,p-=r.height+a.height),{x:Math.round((l-d)/f*i.width/n),y:Math.round((h-u)/p*i.height/n)}}const Fi=t=>Math.round(10*t)/10;function ji(t,e,i){const n=e||1,s=Math.floor(t.height*n),o=Math.floor(t.width*n);t.height=Math.floor(t.height),t.width=Math.floor(t.width);const r=t.canvas;return r.style&&(i||!r.style.height&&!r.style.width)&&(r.style.height=`${t.height}px`,r.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==n||r.height!==s||r.width!==o)&&(t.currentDevicePixelRatio=n,r.height=s,r.width=o,t.ctx.setTransform(n,0,0,n,0,0),!0)}const Vi=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};window.addEventListener("test",null,e),window.removeEventListener("test",null,e)}catch(t){}return t}();function Ni(t,e){const i=function(t,e){return Li(t).getPropertyValue(e)}(t,e),n=i&&i.match(/^(\d+)(\.\d+)?px$/);return n?+n[1]:void 0}function Hi(t,e,i,n){return{x:t.x+i*(e.x-t.x),y:t.y+i*(e.y-t.y)}}function Yi(t,e,i,n){return{x:t.x+i*(e.x-t.x),y:"middle"===n?i<.5?t.y:e.y:"after"===n?i<1?t.y:e.y:i>0?e.y:t.y}}function $i(t,e,i,n){const s={x:t.cp2x,y:t.cp2y},o={x:e.cp1x,y:e.cp1y},r=Hi(t,s,i),a=Hi(s,o,i),l=Hi(o,e,i),h=Hi(r,a,i),c=Hi(a,l,i);return Hi(h,c,i)}function Xi(t,e,i){return t?function(t,e){return{x:i=>t+t+e-i,setWidth(t){e=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,e)=>t-e,leftForLtr:(t,e)=>t-e}}(e,i):{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,e)=>t+e,leftForLtr:(t,e)=>t}}function Ui(t,e){let i,n;"ltr"!==e&&"rtl"!==e||(i=t.canvas.style,n=[i.getPropertyValue("direction"),i.getPropertyPriority("direction")],i.setProperty("direction",e,"important"),t.prevTextDirection=n)}function Zi(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function qi(t){return"angle"===t?{between:oe,compare:ne,normalize:se}:{between:ae,compare:(t,e)=>t-e,normalize:t=>t}}function Gi({start:t,end:e,count:i,loop:n,style:s}){return{start:t%i,end:e%i,loop:n&&(e-t+1)%i==0,style:s}}function Ki(t,e,i){if(!i)return[t];const{property:n,start:s,end:o}=i,r=e.length,{compare:a,between:l,normalize:h}=qi(n),{start:c,end:d,loop:u,style:f}=function(t,e,i){const{property:n,start:s,end:o}=i,{between:r,normalize:a}=qi(n),l=e.length;let h,c,{start:d,end:u,loop:f}=t;if(f){for(d+=l,u+=l,h=0,c=l;h<c&&r(a(e[d%l][n]),s,o);++h)d--,u--;d%=l,u%=l}return u<d&&(u+=l),{start:d,end:u,loop:f,style:t.style}}(t,e,i),p=[];let g,m,x,b=!1,y=null;for(let t=c,i=c;t<=d;++t)m=e[t%r],m.skip||(g=h(m[n]),g!==x&&(b=l(g,s,o),null===y&&(b||l(s,x,g)&&0!==a(s,x))&&(y=0===a(g,s)?t:i),null!==y&&(!b||0===a(o,g)||l(o,x,g))&&(p.push(Gi({start:y,end:t,loop:u,count:r,style:f})),y=null),i=t,x=g));return null!==y&&p.push(Gi({start:y,end:d,loop:u,count:r,style:f})),p}function Ji(t,e){const i=[],n=t.segments;for(let s=0;s<n.length;s++){const o=Ki(n[s],t.points,e);o.length&&i.push(...o)}return i}function Qi(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function tn(t,e){if(!e)return!1;const i=[],n=function(t,e){return Ce(e)?(i.includes(e)||i.push(e),i.indexOf(e)):e};return JSON.stringify(t,n)!==JSON.stringify(e,n)}class en{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,i,n){const s=e.listeners[n],o=e.duration;s.forEach((n=>n({chart:t,initial:e.initial,numSteps:o,currentStep:Math.min(i-e.start,o)})))}_refresh(){this._request||(this._running=!0,this._request=pe.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(t=Date.now()){let e=0;this._charts.forEach(((i,n)=>{if(!i.running||!i.items.length)return;const s=i.items;let o,r=s.length-1,a=!1;for(;r>=0;--r)o=s[r],o._active?(o._total>i.duration&&(i.duration=o._total),o.tick(t),a=!0):(s[r]=s[s.length-1],s.pop());a&&(n.draw(),this._notify(n,i,t,"progress")),s.length||(i.running=!1,this._notify(n,i,t,"complete"),i.initial=!1),e+=s.length})),this._lastDate=t,0===e&&(this._running=!1)}_getAnims(t){const e=this._charts;let i=e.get(t);return i||(i={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,i)),i}listen(t,e,i){this._getAnims(t).listeners[e].push(i)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce(((t,e)=>Math.max(t,e._duration)),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const i=e.items;let n=i.length-1;for(;n>=0;--n)i[n].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}}var nn=new en;const sn="transparent",on={boolean:(t,e,i)=>i>.5?e:t,color(t,e,i){const n=Me(t||sn),s=n.valid&&Me(e||sn);return s&&s.valid?s.mix(n,i).hexString():e},number:(t,e,i)=>t+(e-t)*i};class rn{constructor(t,e,i,n){const s=e[i];n=hi([t.to,n,s,t.from]);const o=hi([t.from,s,n]);this._active=!0,this._fn=t.fn||on[t.type||typeof o],this._easing=we[t.easing]||we.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=i,this._from=o,this._to=n,this._promises=void 0}active(){return this._active}update(t,e,i){if(this._active){this._notify(!1);const n=this._target[this._prop],s=i-this._start,o=this._duration-s;this._start=i,this._duration=Math.floor(Math.max(o,t.duration)),this._total+=s,this._loop=!!t.loop,this._to=hi([t.to,e,n,t.from]),this._from=hi([t.from,n,e])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){const e=t-this._start,i=this._duration,n=this._prop,s=this._from,o=this._loop,r=this._to;let a;if(this._active=s!==r&&(o||e<i),!this._active)return this._target[n]=r,void this._notify(!0);e<0?this._target[n]=s:(a=e/i%2,a=o&&a>1?2-a:a,a=this._easing(Math.min(1,Math.max(0,a))),this._target[n]=this._fn(s,r,a))}wait(){const t=this._promises||(this._promises=[]);return new Promise(((e,i)=>{t.push({res:e,rej:i})}))}_notify(t){const e=t?"res":"rej",i=this._promises||[];for(let t=0;t<i.length;t++)i[t][e]()}}class an{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!bt(t))return;const e=Object.keys(We.animation),i=this._properties;Object.getOwnPropertyNames(t).forEach((n=>{const s=t[n];if(!bt(s))return;const o={};for(const t of e)o[t]=s[t];(xt(s.properties)&&s.properties||[n]).forEach((t=>{t!==n&&i.has(t)||i.set(t,o)}))}))}_animateOptions(t,e){const i=e.options,n=function(t,e){if(!e)return;let i=t.options;if(i)return i.$shared&&(t.options=i=Object.assign({},i,{$shared:!1,$animations:{}})),i;t.options=e}(t,i);if(!n)return[];const s=this._createAnimations(n,i);return i.$shared&&function(t,e){const i=[],n=Object.keys(e);for(let e=0;e<n.length;e++){const s=t[n[e]];s&&s.active()&&i.push(s.wait())}return Promise.all(i)}(t.options.$animations,i).then((()=>{t.options=i}),(()=>{})),s}_createAnimations(t,e){const i=this._properties,n=[],s=t.$animations||(t.$animations={}),o=Object.keys(e),r=Date.now();let a;for(a=o.length-1;a>=0;--a){const l=o[a];if("$"===l.charAt(0))continue;if("options"===l){n.push(...this._animateOptions(t,e));continue}const h=e[l];let c=s[l];const d=i.get(l);if(c){if(d&&c.active()){c.update(d,h,r);continue}c.cancel()}d&&d.duration?(s[l]=c=new rn(d,t,l,h),n.push(c)):t[l]=h}return n}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const i=this._createAnimations(t,e);return i.length?(nn.add(this._chart,i),!0):void 0}}function ln(t,e){const i=t&&t.options||{},n=i.reverse,s=void 0===i.min?e:0,o=void 0===i.max?e:0;return{start:n?o:s,end:n?s:o}}function hn(t,e){const i=[],n=t._getSortedDatasetMetas(e);let s,o;for(s=0,o=n.length;s<o;++s)i.push(n[s].index);return i}function cn(t,e,i,n={}){const s=t.keys,o="single"===n.mode;let r,a,l,h;if(null!==e){for(r=0,a=s.length;r<a;++r){if(l=+s[r],l===i){if(n.all)continue;break}h=t.values[l],yt(h)&&(o||0===e||Ut(e)===Ut(h))&&(e+=h)}return e}}function dn(t,e){const i=t&&t.options.stacked;return i||void 0===i&&void 0!==e.stack}function un(t,e,i){const n=t[e]||(t[e]={});return n[i]||(n[i]={})}function fn(t,e,i,n){for(const s of e.getMatchingVisibleMetas(n).reverse()){const e=t[s.index];if(i&&e>0||!i&&e<0)return s.index}return null}function pn(t,e){const{chart:i,_cachedMeta:n}=t,s=i._stacks||(i._stacks={}),{iScale:o,vScale:r,index:a}=n,l=o.axis,h=r.axis,c=function(t,e,i){return`${t.id}.${e.id}.${i.stack||i.type}`}(o,r,n),d=e.length;let u;for(let t=0;t<d;++t){const i=e[t],{[l]:o,[h]:d}=i;u=(i._stacks||(i._stacks={}))[h]=un(s,c,o),u[a]=d,u._top=fn(u,r,!0,n.type),u._bottom=fn(u,r,!1,n.type),(u._visualValues||(u._visualValues={}))[a]=d}}function gn(t,e){const i=t.scales;return Object.keys(i).filter((t=>i[t].axis===e)).shift()}function mn(t,e){const i=t.controller.index,n=t.vScale&&t.vScale.axis;if(n){e=e||t._parsed;for(const t of e){const e=t._stacks;if(!e||void 0===e[n]||void 0===e[n][i])return;delete e[n][i],void 0!==e[n]._visualValues&&void 0!==e[n]._visualValues[i]&&delete e[n]._visualValues[i]}}}const xn=t=>"reset"===t||"none"===t,bn=(t,e)=>e?t:Object.assign({},t);class yn{static defaults={};static datasetElementType=null;static dataElementType=null;constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.supportsDecimation=!1,this.$context=void 0,this._syncList=[],this.datasetElementType=new.target.datasetElementType,this.dataElementType=new.target.dataElementType,this.initialize()}initialize(){const t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=dn(t.vScale,t),this.addElements(),this.options.fill&&!this.chart.isPluginEnabled("filler")&&console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options")}updateIndex(t){this.index!==t&&mn(this._cachedMeta),this.index=t}linkScales(){const t=this.chart,e=this._cachedMeta,i=this.getDataset(),n=(t,e,i,n)=>"x"===t?e:"r"===t?n:i,s=e.xAxisID=_t(i.xAxisID,gn(t,"x")),o=e.yAxisID=_t(i.yAxisID,gn(t,"y")),r=e.rAxisID=_t(i.rAxisID,gn(t,"r")),a=e.indexAxis,l=e.iAxisID=n(a,s,o,r),h=e.vAxisID=n(a,o,s,r);e.xScale=this.getScaleForId(s),e.yScale=this.getScaleForId(o),e.rScale=this.getScaleForId(r),e.iScale=this.getScaleForId(l),e.vScale=this.getScaleForId(h)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&ue(this._data,this),t._stacked&&mn(t)}_dataCheck(){const t=this.getDataset(),e=t.data||(t.data=[]),i=this._data;if(bt(e))this._data=function(t){const e=Object.keys(t),i=new Array(e.length);let n,s,o;for(n=0,s=e.length;n<s;++n)o=e[n],i[n]={x:o,y:t[o]};return i}(e);else if(i!==e){if(i){ue(i,this);const t=this._cachedMeta;mn(t),t._parsed=[]}e&&Object.isExtensible(e)&&(this,(n=e)._chartjs?n._chartjs.listeners.push(this):(Object.defineProperty(n,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[this]}}),de.forEach((t=>{const e="_onData"+Lt(t),i=n[t];Object.defineProperty(n,t,{configurable:!0,enumerable:!1,value(...t){const s=i.apply(this,t);return n._chartjs.listeners.forEach((i=>{"function"==typeof i[e]&&i[e](...t)})),s}})})))),this._syncList=[],this._data=e}var n}addElements(){const t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){const e=this._cachedMeta,i=this.getDataset();let n=!1;this._dataCheck();const s=e._stacked;e._stacked=dn(e.vScale,e),e.stack!==i.stack&&(n=!0,mn(e),e.stack=i.stack),this._resyncElements(t),(n||s!==e._stacked)&&pn(this,e._parsed)}configure(){const t=this.chart.config,e=t.datasetScopeKeys(this._type),i=t.getOptionScopes(this.getDataset(),e,!0);this.options=t.createResolver(i,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,e){const{_cachedMeta:i,_data:n}=this,{iScale:s,_stacked:o}=i,r=s.axis;let a,l,h,c=0===t&&e===n.length||i._sorted,d=t>0&&i._parsed[t-1];if(!1===this._parsing)i._parsed=n,i._sorted=!0,h=n;else{h=xt(n[t])?this.parseArrayData(i,n,t,e):bt(n[t])?this.parseObjectData(i,n,t,e):this.parsePrimitiveData(i,n,t,e);const s=()=>null===l[r]||d&&l[r]<d[r];for(a=0;a<e;++a)i._parsed[a+t]=l=h[a],c&&(s()&&(c=!1),d=l);i._sorted=c}o&&pn(this,h)}parsePrimitiveData(t,e,i,n){const{iScale:s,vScale:o}=t,r=s.axis,a=o.axis,l=s.getLabels(),h=s===o,c=new Array(n);let d,u,f;for(d=0,u=n;d<u;++d)f=d+i,c[d]={[r]:h||s.parse(l[f],f),[a]:o.parse(e[f],f)};return c}parseArrayData(t,e,i,n){const{xScale:s,yScale:o}=t,r=new Array(n);let a,l,h,c;for(a=0,l=n;a<l;++a)h=a+i,c=e[h],r[a]={x:s.parse(c[0],h),y:o.parse(c[1],h)};return r}parseObjectData(t,e,i,n){const{xScale:s,yScale:o}=t,{xAxisKey:r="x",yAxisKey:a="y"}=this._parsing,l=new Array(n);let h,c,d,u;for(h=0,c=n;h<c;++h)d=h+i,u=e[d],l[h]={x:s.parse(Ot(u,r),d),y:o.parse(Ot(u,a),d)};return l}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,i){const n=this.chart,s=this._cachedMeta,o=e[t.axis];return cn({keys:hn(n,!0),values:e._stacks[t.axis]._visualValues},o,s.index,{mode:i})}updateRangeFromParsed(t,e,i,n){const s=i[e.axis];let o=null===s?NaN:s;const r=n&&i._stacks[e.axis];n&&r&&(n.values=r,o=cn(n,s,this._cachedMeta.index)),t.min=Math.min(t.min,o),t.max=Math.max(t.max,o)}getMinMax(t,e){const i=this._cachedMeta,n=i._parsed,s=i._sorted&&t===i.iScale,o=n.length,r=this._getOtherScale(t),a=((t,e,i)=>t&&!e.hidden&&e._stacked&&{keys:hn(i,!0),values:null})(e,i,this.chart),l={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:h,max:c}=function(t){const{min:e,max:i,minDefined:n,maxDefined:s}=t.getUserBounds();return{min:n?e:Number.NEGATIVE_INFINITY,max:s?i:Number.POSITIVE_INFINITY}}(r);let d,u;function f(){u=n[d];const e=u[r.axis];return!yt(u[t.axis])||h>e||c<e}for(d=0;d<o&&(f()||(this.updateRangeFromParsed(l,t,u,a),!s));++d);if(s)for(d=o-1;d>=0;--d)if(!f()){this.updateRangeFromParsed(l,t,u,a);break}return l}getAllParsedValues(t){const e=this._cachedMeta._parsed,i=[];let n,s,o;for(n=0,s=e.length;n<s;++n)o=e[n][t.axis],yt(o)&&i.push(o);return i}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,i=e.iScale,n=e.vScale,s=this.getParsed(t);return{label:i?""+i.getLabelForValue(s[i.axis]):"",value:n?""+n.getLabelForValue(s[n.axis]):""}}_update(t){const e=this._cachedMeta;this.update(t||"default"),e._clip=function(t){let e,i,n,s;return bt(t)?(e=t.top,i=t.right,n=t.bottom,s=t.left):e=i=n=s=t,{top:e,right:i,bottom:n,left:s,disabled:!1===t}}(_t(this.options.clip,function(t,e,i){if(!1===i)return!1;const n=ln(t,i),s=ln(e,i);return{top:s.end,right:n.end,bottom:s.start,left:n.start}}(e.xScale,e.yScale,this.getMaxOverflow())))}update(t){}draw(){const t=this._ctx,e=this.chart,i=this._cachedMeta,n=i.data||[],s=e.chartArea,o=[],r=this._drawStart||0,a=this._drawCount||n.length-r,l=this.options.drawActiveElementsOnTop;let h;for(i.dataset&&i.dataset.draw(t,s,r,a),h=r;h<r+a;++h){const e=n[h];e.hidden||(e.active&&l?o.push(e):e.draw(t,s))}for(h=0;h<o.length;++h)o[h].draw(t,s)}getStyle(t,e){const i=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(i):this.resolveDataElementOptions(t||0,i)}getContext(t,e,i){const n=this.getDataset();let s;if(t>=0&&t<this._cachedMeta.data.length){const e=this._cachedMeta.data[t];s=e.$context||(e.$context=function(t,e,i){return ci(t,{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:i,index:e,mode:"default",type:"data"})}(this.getContext(),t,e)),s.parsed=this.getParsed(t),s.raw=n.data[t],s.index=s.dataIndex=t}else s=this.$context||(this.$context=function(t,e){return ci(t,{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),s.dataset=n,s.index=s.datasetIndex=this.index;return s.active=!!e,s.mode=i,s}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",i){const n="active"===e,s=this._cachedDataOpts,o=t+"-"+e,r=s[o],a=this.enableOptionSharing&&Rt(i);if(r)return bn(r,a);const l=this.chart.config,h=l.datasetElementScopeKeys(this._type,t),c=n?[`${t}Hover`,"hover",t,""]:[t,""],d=l.getOptionScopes(this.getDataset(),h),u=Object.keys(We.elements[t]),f=l.resolveNamedOptions(d,u,(()=>this.getContext(i,n,e)),c);return f.$shared&&(f.$shared=a,s[o]=Object.freeze(bn(f,a))),f}_resolveAnimations(t,e,i){const n=this.chart,s=this._cachedDataOpts,o=`animation-${e}`,r=s[o];if(r)return r;let a;if(!1!==n.options.animation){const n=this.chart.config,s=n.datasetAnimationScopeKeys(this._type,e),o=n.getOptionScopes(this.getDataset(),s);a=n.createResolver(o,this.getContext(t,i,e))}const l=new an(n,a&&a.animations);return a&&a._cacheable&&(s[o]=Object.freeze(l)),l}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||xn(t)||this.chart._animationsDisabled}_getSharedOptions(t,e){const i=this.resolveDataElementOptions(t,e),n=this._sharedOptions,s=this.getSharedOptions(i),o=this.includeOptions(e,s)||s!==n;return this.updateSharedOptions(s,e,i),{sharedOptions:s,includeOptions:o}}updateElement(t,e,i,n){xn(n)?Object.assign(t,i):this._resolveAnimations(e,n).update(t,i)}updateSharedOptions(t,e,i){t&&!xn(e)&&this._resolveAnimations(void 0,e).update(t,i)}_setStyle(t,e,i,n){t.active=n;const s=this.getStyle(e,n);this._resolveAnimations(e,i,n).update(t,{options:!n&&this.getSharedOptions(s)||s})}removeHoverStyle(t,e,i){this._setStyle(t,i,"active",!1)}setHoverStyle(t,e,i){this._setStyle(t,i,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this._data,i=this._cachedMeta.data;for(const[t,e,i]of this._syncList)this[t](e,i);this._syncList=[];const n=i.length,s=e.length,o=Math.min(s,n);o&&this.parse(0,o),s>n?this._insertElements(n,s-n,t):s<n&&this._removeElements(s,n-s)}_insertElements(t,e,i=!0){const n=this._cachedMeta,s=n.data,o=t+e;let r;const a=t=>{for(t.length+=e,r=t.length-1;r>=o;r--)t[r]=t[r-e]};for(a(s),r=t;r<o;++r)s[r]=new this.dataElementType;this._parsing&&a(n._parsed),this.parse(t,e),i&&this.updateElements(s,t,e,"reset")}updateElements(t,e,i,n){}_removeElements(t,e){const i=this._cachedMeta;if(this._parsing){const n=i._parsed.splice(t,e);i._stacked&&mn(i,n)}i.data.splice(t,e)}_sync(t){if(this._parsing)this._syncList.push(t);else{const[e,i,n]=t;this[e](i,n)}this.chart._dataChanges.push([this.index,...t])}_onDataPush(){const t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){e&&this._sync(["_removeElements",t,e]);const i=arguments.length-2;i&&this._sync(["_insertElements",t,i])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function vn(t){const e=t.iScale,i=function(t,e){if(!t._cache.$bar){const i=t.getMatchingVisibleMetas(e);let n=[];for(let e=0,s=i.length;e<s;e++)n=n.concat(i[e].controller.getAllParsedValues(t));t._cache.$bar=fe(n.sort(((t,e)=>t-e)))}return t._cache.$bar}(e,t.type);let n,s,o,r,a=e._length;const l=()=>{32767!==o&&-32768!==o&&(Rt(r)&&(a=Math.min(a,Math.abs(o-r)||a)),r=o)};for(n=0,s=i.length;n<s;++n)o=e.getPixelForValue(i[n]),l();for(r=void 0,n=0,s=e.ticks.length;n<s;++n)o=e.getPixelForTick(n),l();return a}function _n(t,e,i,n){return xt(t)?function(t,e,i,n){const s=i.parse(t[0],n),o=i.parse(t[1],n),r=Math.min(s,o),a=Math.max(s,o);let l=r,h=a;Math.abs(r)>Math.abs(a)&&(l=a,h=r),e[i.axis]=h,e._custom={barStart:l,barEnd:h,start:s,end:o,min:r,max:a}}(t,e,i,n):e[i.axis]=i.parse(t,n),e}function An(t,e,i,n){const s=t.iScale,o=t.vScale,r=s.getLabels(),a=s===o,l=[];let h,c,d,u;for(h=i,c=i+n;h<c;++h)u=e[h],d={},d[s.axis]=a||s.parse(r[h],h),l.push(_n(u,d,o,h));return l}function wn(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function Cn(t,e,i,n){let s=e.borderSkipped;const o={};if(!s)return void(t.borderSkipped=o);if(!0===s)return void(t.borderSkipped={top:!0,right:!0,bottom:!0,left:!0});const{start:r,end:a,reverse:l,top:h,bottom:c}=function(t){let e,i,n,s,o;return t.horizontal?(e=t.base>t.x,i="left",n="right"):(e=t.base<t.y,i="bottom",n="top"),e?(s="end",o="start"):(s="start",o="end"),{start:i,end:n,reverse:e,top:s,bottom:o}}(t);"middle"===s&&i&&(t.enableBorderRadius=!0,(i._top||0)===n?s=h:(i._bottom||0)===n?s=c:(o[Mn(c,r,a,l)]=!0,s=h)),o[Mn(s,r,a,l)]=!0,t.borderSkipped=o}function Mn(t,e,i,n){var s,o,r;return n?(r=i,t=kn(t=(s=t)===(o=e)?r:s===r?o:s,i,e)):t=kn(t,e,i),t}function kn(t,e,i){return"start"===t?e:"end"===t?i:t}function En(t,{inflateAmount:e},i){t.inflateAmount="auto"===e?1===i?.33:0:e}class Sn extends yn{static id="doughnut";static defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"};static descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t&&!t.startsWith("borderDash")&&!t.startsWith("hoverBorderDash")};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i,color:n}}=t.legend.options;return e.labels.map(((e,s)=>{const o=t.getDatasetMeta(0).controller.getStyle(s);return{text:e,fillStyle:o.backgroundColor,strokeStyle:o.borderColor,fontColor:n,lineWidth:o.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(s),index:s}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}}}};constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){const i=this.getDataset().data,n=this._cachedMeta;if(!1===this._parsing)n._parsed=i;else{let s,o,r=t=>+i[t];if(bt(i[t])){const{key:t="value"}=this._parsing;r=e=>+Ot(i[e],t)}for(s=t,o=t+e;s<o;++s)n._parsed[s]=r(s)}}_getRotation(){return Jt(this.options.rotation-90)}_getCircumference(){return Jt(this.options.circumference)}_getRotationExtents(){let t=Ft,e=-Ft;for(let i=0;i<this.chart.data.datasets.length;++i)if(this.chart.isDatasetVisible(i)&&this.chart.getDatasetMeta(i).type===this._type){const n=this.chart.getDatasetMeta(i).controller,s=n._getRotation(),o=n._getCircumference();t=Math.min(t,s),e=Math.max(e,s+o)}return{rotation:t,circumference:e-t}}update(t){const e=this.chart,{chartArea:i}=e,n=this._cachedMeta,s=n.data,o=this.getMaxBorderWidth()+this.getMaxOffset(s)+this.options.spacing,r=Math.max((Math.min(i.width,i.height)-o)/2,0),a=Math.min((h=r,"string"==typeof(l=this.options.cutout)&&l.endsWith("%")?parseFloat(l)/100:+l/h),1);var l,h;const c=this._getRingWeight(this.index),{circumference:d,rotation:u}=this._getRotationExtents(),{ratioX:f,ratioY:p,offsetX:g,offsetY:m}=function(t,e,i){let n=1,s=1,o=0,r=0;if(e<Ft){const a=t,l=a+e,h=Math.cos(a),c=Math.sin(a),d=Math.cos(l),u=Math.sin(l),f=(t,e,n)=>oe(t,a,l,!0)?1:Math.max(e,e*i,n,n*i),p=(t,e,n)=>oe(t,a,l,!0)?-1:Math.min(e,e*i,n,n*i),g=f(0,h,d),m=f(Ht,c,u),x=p(Wt,h,d),b=p(Wt+Ht,c,u);n=(g-x)/2,s=(m-b)/2,o=-(g+x)/2,r=-(m+b)/2}return{ratioX:n,ratioY:s,offsetX:o,offsetY:r}}(u,d,a),x=(i.width-o)/f,b=(i.height-o)/p,y=Math.max(Math.min(x,b)/2,0),v=At(this.options.radius,y),_=(v-Math.max(v*a,0))/this._getVisibleDatasetWeightTotal();this.offsetX=g*v,this.offsetY=m*v,n.total=this.calculateTotal(),this.outerRadius=v-_*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-_*c,0),this.updateElements(s,0,s.length,t)}_circumference(t,e){const i=this.options,n=this._cachedMeta,s=this._getCircumference();return e&&i.animation.animateRotate||!this.chart.getDataVisibility(t)||null===n._parsed[t]||n.data[t].hidden?0:this.calculateCircumference(n._parsed[t]*s/Ft)}updateElements(t,e,i,n){const s="reset"===n,o=this.chart,r=o.chartArea,a=o.options.animation,l=(r.left+r.right)/2,h=(r.top+r.bottom)/2,c=s&&a.animateScale,d=c?0:this.innerRadius,u=c?0:this.outerRadius,{sharedOptions:f,includeOptions:p}=this._getSharedOptions(e,n);let g,m=this._getRotation();for(g=0;g<e;++g)m+=this._circumference(g,s);for(g=e;g<e+i;++g){const e=this._circumference(g,s),i=t[g],o={x:l+this.offsetX,y:h+this.offsetY,startAngle:m,endAngle:m+e,circumference:e,outerRadius:u,innerRadius:d};p&&(o.options=f||this.resolveDataElementOptions(g,i.active?"active":n)),m+=e,this.updateElement(i,g,o,n)}}calculateTotal(){const t=this._cachedMeta,e=t.data;let i,n=0;for(i=0;i<e.length;i++){const s=t._parsed[i];null===s||isNaN(s)||!this.chart.getDataVisibility(i)||e[i].hidden||(n+=Math.abs(s))}return n}calculateCircumference(t){const e=this._cachedMeta.total;return e>0&&!isNaN(t)?Ft*(Math.abs(t)/e):0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,n=i.data.labels||[],s=Pe(e._parsed[t],i.options.locale);return{label:n[t]||"",value:s}}getMaxBorderWidth(t){let e=0;const i=this.chart;let n,s,o,r,a;if(!t)for(n=0,s=i.data.datasets.length;n<s;++n)if(i.isDatasetVisible(n)){o=i.getDatasetMeta(n),t=o.data,r=o.controller;break}if(!t)return 0;for(n=0,s=t.length;n<s;++n)a=r.resolveDataElementOptions(n),"inner"!==a.borderAlign&&(e=Math.max(e,a.borderWidth||0,a.hoverBorderWidth||0));return e}getMaxOffset(t){let e=0;for(let i=0,n=t.length;i<n;++i){const t=this.resolveDataElementOptions(i);e=Math.max(e,t.offset||0,t.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let i=0;i<t;++i)this.chart.isDatasetVisible(i)&&(e+=this._getRingWeight(i));return e}_getRingWeight(t){return Math.max(_t(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}class Dn extends yn{static id="polarArea";static defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i,color:n}}=t.legend.options;return e.labels.map(((e,s)=>{const o=t.getDatasetMeta(0).controller.getStyle(s);return{text:e,fillStyle:o.backgroundColor,strokeStyle:o.borderColor,fontColor:n,lineWidth:o.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(s),index:s}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,n=i.data.labels||[],s=Pe(e._parsed[t].r,i.options.locale);return{label:n[t]||"",value:s}}parseObjectData(t,e,i,n){return Ci.bind(this)(t,e,i,n)}update(t){const e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}getMinMax(){const t=this._cachedMeta,e={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY};return t.data.forEach(((t,i)=>{const n=this.getParsed(i).r;!isNaN(n)&&this.chart.getDataVisibility(i)&&(n<e.min&&(e.min=n),n>e.max&&(e.max=n))})),e}_updateRadius(){const t=this.chart,e=t.chartArea,i=t.options,n=Math.min(e.right-e.left,e.bottom-e.top),s=Math.max(n/2,0),o=(s-Math.max(i.cutoutPercentage?s/100*i.cutoutPercentage:1,0))/t.getVisibleDatasetCount();this.outerRadius=s-o*this.index,this.innerRadius=this.outerRadius-o}updateElements(t,e,i,n){const s="reset"===n,o=this.chart,r=o.options.animation,a=this._cachedMeta.rScale,l=a.xCenter,h=a.yCenter,c=a.getIndexAngle(0)-.5*Wt;let d,u=c;const f=360/this.countVisibleElements();for(d=0;d<e;++d)u+=this._computeAngle(d,n,f);for(d=e;d<e+i;d++){const e=t[d];let i=u,p=u+this._computeAngle(d,n,f),g=o.getDataVisibility(d)?a.getDistanceFromCenterForValue(this.getParsed(d).r):0;u=p,s&&(r.animateScale&&(g=0),r.animateRotate&&(i=p=c));const m={x:l,y:h,innerRadius:0,outerRadius:g,startAngle:i,endAngle:p,options:this.resolveDataElementOptions(d,e.active?"active":n)};this.updateElement(e,d,m,n)}}countVisibleElements(){const t=this._cachedMeta;let e=0;return t.data.forEach(((t,i)=>{!isNaN(this.getParsed(i).r)&&this.chart.getDataVisibility(i)&&e++})),e}_computeAngle(t,e,i){return this.chart.getDataVisibility(t)?Jt(this.resolveDataElementOptions(t,e).angle||i):0}}var Pn=Object.freeze({__proto__:null,BarController:class extends yn{static id="bar";static defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}};static overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};parsePrimitiveData(t,e,i,n){return An(t,e,i,n)}parseArrayData(t,e,i,n){return An(t,e,i,n)}parseObjectData(t,e,i,n){const{iScale:s,vScale:o}=t,{xAxisKey:r="x",yAxisKey:a="y"}=this._parsing,l="x"===s.axis?r:a,h="x"===o.axis?r:a,c=[];let d,u,f,p;for(d=i,u=i+n;d<u;++d)p=e[d],f={},f[s.axis]=s.parse(Ot(p,l),d),c.push(_n(Ot(p,h),f,o,d));return c}updateRangeFromParsed(t,e,i,n){super.updateRangeFromParsed(t,e,i,n);const s=i._custom;s&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,s.min),t.max=Math.max(t.max,s.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:i,vScale:n}=e,s=this.getParsed(t),o=s._custom,r=wn(o)?"["+o.start+", "+o.end+"]":""+n.getLabelForValue(s[n.axis]);return{label:""+i.getLabelForValue(s[i.axis]),value:r}}initialize(){this.enableOptionSharing=!0,super.initialize(),this._cachedMeta.stack=this.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,i,n){const s="reset"===n,{index:o,_cachedMeta:{vScale:r}}=this,a=r.getBasePixel(),l=r.isHorizontal(),h=this._getRuler(),{sharedOptions:c,includeOptions:d}=this._getSharedOptions(e,n);for(let u=e;u<e+i;u++){const e=this.getParsed(u),i=s||mt(e[r.axis])?{base:a,head:a}:this._calculateBarValuePixels(u),f=this._calculateBarIndexPixels(u,h),p=(e._stacks||{})[r.axis],g={horizontal:l,base:i.base,enableBorderRadius:!p||wn(e._custom)||o===p._top||o===p._bottom,x:l?i.head:f.center,y:l?f.center:i.head,height:l?f.size:Math.abs(i.size),width:l?Math.abs(i.size):f.size};d&&(g.options=c||this.resolveDataElementOptions(u,t[u].active?"active":n));const m=g.options||t[u].options;Cn(g,m,p,o),En(g,m,h.ratio),this.updateElement(t[u],u,g,n)}}_getStacks(t,e){const{iScale:i}=this._cachedMeta,n=i.getMatchingVisibleMetas(this._type).filter((t=>t.controller.options.grouped)),s=i.options.stacked,o=[],r=t=>{const i=t.controller.getParsed(e),n=i&&i[t.vScale.axis];if(mt(n)||isNaN(n))return!0};for(const i of n)if((void 0===e||!r(i))&&((!1===s||-1===o.indexOf(i.stack)||void 0===s&&void 0===i.stack)&&o.push(i.stack),i.index===t))break;return o.length||o.push(void 0),o}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,i){const n=this._getStacks(t,i),s=void 0!==e?n.indexOf(e):-1;return-1===s?n.length-1:s}_getRuler(){const t=this.options,e=this._cachedMeta,i=e.iScale,n=[];let s,o;for(s=0,o=e.data.length;s<o;++s)n.push(i.getPixelForValue(this.getParsed(s)[i.axis],s));const r=t.barThickness;return{min:r||vn(e),pixels:n,start:i._startPixel,end:i._endPixel,stackCount:this._getStackCount(),scale:i,grouped:t.grouped,ratio:r?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){const{_cachedMeta:{vScale:e,_stacked:i,index:n},options:{base:s,minBarLength:o}}=this,r=s||0,a=this.getParsed(t),l=a._custom,h=wn(l);let c,d,u=a[e.axis],f=0,p=i?this.applyStack(e,a,i):u;p!==u&&(f=p-u,p=u),h&&(u=l.barStart,p=l.barEnd-l.barStart,0!==u&&Ut(u)!==Ut(l.barEnd)&&(f=0),f+=u);const g=mt(s)||h?f:s;let m=e.getPixelForValue(g);if(c=this.chart.getDataVisibility(t)?e.getPixelForValue(f+p):m,d=c-m,Math.abs(d)<o){d=function(t,e,i){return 0!==t?Ut(t):(e.isHorizontal()?1:-1)*(e.min>=i?1:-1)}(d,e,r)*o,u===r&&(m-=d/2);const t=e.getPixelForDecimal(0),s=e.getPixelForDecimal(1),l=Math.min(t,s),f=Math.max(t,s);m=Math.max(Math.min(m,f),l),c=m+d,i&&!h&&(a._stacks[e.axis]._visualValues[n]=e.getValueForPixel(c)-e.getValueForPixel(m))}if(m===e.getPixelForValue(r)){const t=Ut(d)*e.getLineWidthForValue(r)/2;m+=t,d-=t}return{size:d,base:m,head:c,center:c+d/2}}_calculateBarIndexPixels(t,e){const i=e.scale,n=this.options,s=n.skipNull,o=_t(n.maxBarThickness,1/0);let r,a;if(e.grouped){const i=s?this._getStackCount(t):e.stackCount,l="flex"===n.barThickness?function(t,e,i,n){const s=e.pixels,o=s[t];let r=t>0?s[t-1]:null,a=t<s.length-1?s[t+1]:null;const l=i.categoryPercentage;null===r&&(r=o-(null===a?e.end-e.start:a-o)),null===a&&(a=o+o-r);const h=o-(o-Math.min(r,a))/2*l;return{chunk:Math.abs(a-r)/2*l/n,ratio:i.barPercentage,start:h}}(t,e,n,i):function(t,e,i,n){const s=i.barThickness;let o,r;return mt(s)?(o=e.min*i.categoryPercentage,r=i.barPercentage):(o=s*n,r=1),{chunk:o/n,ratio:r,start:e.pixels[t]-o/2}}(t,e,n,i),h=this._getStackIndex(this.index,this._cachedMeta.stack,s?t:void 0);r=l.start+l.chunk*h+l.chunk/2,a=Math.min(o,l.chunk*l.ratio)}else r=i.getPixelForValue(this.getParsed(t)[i.axis],t),a=Math.min(o,e.min*e.ratio);return{base:r-a/2,head:r+a/2,center:r,size:a}}draw(){const t=this._cachedMeta,e=t.vScale,i=t.data,n=i.length;let s=0;for(;s<n;++s)null!==this.getParsed(s)[e.axis]&&i[s].draw(this._ctx)}},BubbleController:class extends yn{static id="bubble";static defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}};static overrides={scales:{x:{type:"linear"},y:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,e,i,n){const s=super.parsePrimitiveData(t,e,i,n);for(let t=0;t<s.length;t++)s[t]._custom=this.resolveDataElementOptions(t+i).radius;return s}parseArrayData(t,e,i,n){const s=super.parseArrayData(t,e,i,n);for(let t=0;t<s.length;t++){const n=e[i+t];s[t]._custom=_t(n[2],this.resolveDataElementOptions(t+i).radius)}return s}parseObjectData(t,e,i,n){const s=super.parseObjectData(t,e,i,n);for(let t=0;t<s.length;t++){const n=e[i+t];s[t]._custom=_t(n&&n.r&&+n.r,this.resolveDataElementOptions(t+i).radius)}return s}getMaxOverflow(){const t=this._cachedMeta.data;let e=0;for(let i=t.length-1;i>=0;--i)e=Math.max(e,t[i].size(this.resolveDataElementOptions(i))/2);return e>0&&e}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart.data.labels||[],{xScale:n,yScale:s}=e,o=this.getParsed(t),r=n.getLabelForValue(o.x),a=s.getLabelForValue(o.y),l=o._custom;return{label:i[t]||"",value:"("+r+", "+a+(l?", "+l:"")+")"}}update(t){const e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,i,n){const s="reset"===n,{iScale:o,vScale:r}=this._cachedMeta,{sharedOptions:a,includeOptions:l}=this._getSharedOptions(e,n),h=o.axis,c=r.axis;for(let d=e;d<e+i;d++){const e=t[d],i=!s&&this.getParsed(d),u={},f=u[h]=s?o.getPixelForDecimal(.5):o.getPixelForValue(i[h]),p=u[c]=s?r.getBasePixel():r.getPixelForValue(i[c]);u.skip=isNaN(f)||isNaN(p),l&&(u.options=a||this.resolveDataElementOptions(d,e.active?"active":n),s&&(u.options.radius=0)),this.updateElement(e,d,u,n)}}resolveDataElementOptions(t,e){const i=this.getParsed(t);let n=super.resolveDataElementOptions(t,e);n.$shared&&(n=Object.assign({},n,{$shared:!1}));const s=n.radius;return"active"!==e&&(n.radius=0),n.radius+=_t(i&&i._custom,s),n}},DoughnutController:Sn,LineController:class extends yn{static id="line";static defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1};static overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,this.supportsDecimation=!0,super.initialize()}update(t){const e=this._cachedMeta,{dataset:i,data:n=[],_dataset:s}=e,o=this.chart._animationsDisabled;let{start:r,count:a}=be(e,n,o);this._drawStart=r,this._drawCount=a,ye(e)&&(r=0,a=n.length),i._chart=this.chart,i._datasetIndex=this.index,i._decimated=!!s._decimated,i.points=n;const l=this.resolveDatasetElementOptions(t);this.options.showLine||(l.borderWidth=0),l.segment=this.options.segment,this.updateElement(i,void 0,{animated:!o,options:l},t),this.updateElements(n,r,a,t)}updateElements(t,e,i,n){const s="reset"===n,{iScale:o,vScale:r,_stacked:a,_dataset:l}=this._cachedMeta,{sharedOptions:h,includeOptions:c}=this._getSharedOptions(e,n),d=o.axis,u=r.axis,{spanGaps:f,segment:p}=this.options,g=Gt(f)?f:Number.POSITIVE_INFINITY,m=this.chart._animationsDisabled||s||"none"===n,x=e+i,b=t.length;let y=e>0&&this.getParsed(e-1);for(let i=0;i<b;++i){const f=t[i],b=m?f:{};if(i<e||i>=x){b.skip=!0;continue}const v=this.getParsed(i),_=mt(v[u]),A=b[d]=o.getPixelForValue(v[d],i),w=b[u]=s||_?r.getBasePixel():r.getPixelForValue(a?this.applyStack(r,v,a):v[u],i);b.skip=isNaN(A)||isNaN(w)||_,b.stop=i>0&&Math.abs(v[d]-y[d])>g,p&&(b.parsed=v,b.raw=l.data[i]),c&&(b.options=h||this.resolveDataElementOptions(i,f.active?"active":n)),m||this.updateElement(f,i,b,n),y=v}}getMaxOverflow(){const t=this._cachedMeta,e=t.dataset,i=e.options&&e.options.borderWidth||0,n=t.data||[];if(!n.length)return i;const s=n[0].size(this.resolveDataElementOptions(0)),o=n[n.length-1].size(this.resolveDataElementOptions(n.length-1));return Math.max(i,s,o)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}},PieController:class extends Sn{static id="pie";static defaults={cutout:0,rotation:0,circumference:360,radius:"100%"}},PolarAreaController:Dn,RadarController:class extends yn{static id="radar";static defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}};static overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};getLabelAndValue(t){const e=this._cachedMeta.vScale,i=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(i[e.axis])}}parseObjectData(t,e,i,n){return Ci.bind(this)(t,e,i,n)}update(t){const e=this._cachedMeta,i=e.dataset,n=e.data||[],s=e.iScale.getLabels();if(i.points=n,"resize"!==t){const e=this.resolveDatasetElementOptions(t);this.options.showLine||(e.borderWidth=0);const o={_loop:!0,_fullLoop:s.length===n.length,options:e};this.updateElement(i,void 0,o,t)}this.updateElements(n,0,n.length,t)}updateElements(t,e,i,n){const s=this._cachedMeta.rScale,o="reset"===n;for(let r=e;r<e+i;r++){const e=t[r],i=this.resolveDataElementOptions(r,e.active?"active":n),a=s.getPointPositionForValue(r,this.getParsed(r).r),l=o?s.xCenter:a.x,h=o?s.yCenter:a.y,c={x:l,y:h,angle:a.angle,skip:isNaN(l)||isNaN(h),options:i};this.updateElement(e,r,c,n)}}},ScatterController:class extends yn{static id="scatter";static defaults={datasetElementType:!1,dataElementType:"point",showLine:!1,fill:!1};static overrides={interaction:{mode:"point"},scales:{x:{type:"linear"},y:{type:"linear"}}};getLabelAndValue(t){const e=this._cachedMeta,i=this.chart.data.labels||[],{xScale:n,yScale:s}=e,o=this.getParsed(t),r=n.getLabelForValue(o.x),a=s.getLabelForValue(o.y);return{label:i[t]||"",value:"("+r+", "+a+")"}}update(t){const e=this._cachedMeta,{data:i=[]}=e,n=this.chart._animationsDisabled;let{start:s,count:o}=be(e,i,n);if(this._drawStart=s,this._drawCount=o,ye(e)&&(s=0,o=i.length),this.options.showLine){this.datasetElementType||this.addElements();const{dataset:s,_dataset:o}=e;s._chart=this.chart,s._datasetIndex=this.index,s._decimated=!!o._decimated,s.points=i;const r=this.resolveDatasetElementOptions(t);r.segment=this.options.segment,this.updateElement(s,void 0,{animated:!n,options:r},t)}else this.datasetElementType&&(delete e.dataset,this.datasetElementType=!1);this.updateElements(i,s,o,t)}addElements(){const{showLine:t}=this.options;!this.datasetElementType&&t&&(this.datasetElementType=this.chart.registry.getElement("line")),super.addElements()}updateElements(t,e,i,n){const s="reset"===n,{iScale:o,vScale:r,_stacked:a,_dataset:l}=this._cachedMeta,h=this.resolveDataElementOptions(e,n),c=this.getSharedOptions(h),d=this.includeOptions(n,c),u=o.axis,f=r.axis,{spanGaps:p,segment:g}=this.options,m=Gt(p)?p:Number.POSITIVE_INFINITY,x=this.chart._animationsDisabled||s||"none"===n;let b=e>0&&this.getParsed(e-1);for(let h=e;h<e+i;++h){const e=t[h],i=this.getParsed(h),p=x?e:{},y=mt(i[f]),v=p[u]=o.getPixelForValue(i[u],h),_=p[f]=s||y?r.getBasePixel():r.getPixelForValue(a?this.applyStack(r,i,a):i[f],h);p.skip=isNaN(v)||isNaN(_)||y,p.stop=h>0&&Math.abs(i[u]-b[u])>m,g&&(p.parsed=i,p.raw=l.data[h]),d&&(p.options=c||this.resolveDataElementOptions(h,e.active?"active":n)),x||this.updateElement(e,h,p,n),b=i}this.updateSharedOptions(c,n,h)}getMaxOverflow(){const t=this._cachedMeta,e=t.data||[];if(!this.options.showLine){let t=0;for(let i=e.length-1;i>=0;--i)t=Math.max(t,e[i].size(this.resolveDataElementOptions(i))/2);return t>0&&t}const i=t.dataset,n=i.options&&i.options.borderWidth||0;if(!e.length)return n;const s=e[0].size(this.resolveDataElementOptions(0)),o=e[e.length-1].size(this.resolveDataElementOptions(e.length-1));return Math.max(n,s,o)/2}}});function Bn(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class Tn{static override(t){Object.assign(Tn.prototype,t)}options;constructor(t){this.options=t||{}}init(){}formats(){return Bn()}parse(){return Bn()}format(){return Bn()}add(){return Bn()}diff(){return Bn()}startOf(){return Bn()}endOf(){return Bn()}}var On=Tn;function Ln(t,e,i,n){const{controller:s,data:o,_sorted:r}=t,a=s._cachedMeta.iScale;if(a&&e===a.axis&&"r"!==e&&r&&o.length){const t=a._reversePixels?ce:he;if(!n)return t(o,e,i);if(s._sharedOptions){const n=o[0],s="function"==typeof n.getRange&&n.getRange(e);if(s){const n=t(o,e,i-s),r=t(o,e,i+s);return{lo:n.lo,hi:r.hi}}}}return{lo:0,hi:o.length-1}}function Rn(t,e,i,n,s){const o=t.getSortedVisibleDatasetMetas(),r=i[e];for(let t=0,i=o.length;t<i;++t){const{index:i,data:a}=o[t],{lo:l,hi:h}=Ln(o[t],e,r,s);for(let t=l;t<=h;++t){const e=a[t];e.skip||n(e,i,t)}}}function In(t,e,i,n,s){const o=[];return s||t.isPointInArea(e)?(Rn(t,i,e,(function(i,r,a){(s||$e(i,t.chartArea,0))&&i.inRange(e.x,e.y,n)&&o.push({element:i,datasetIndex:r,index:a})}),!0),o):o}function zn(t,e,i,n,s,o){return o||t.isPointInArea(e)?"r"!==i||n?function(t,e,i,n,s,o){let r=[];const a=function(t){const e=-1!==t.indexOf("x"),i=-1!==t.indexOf("y");return function(t,n){const s=e?Math.abs(t.x-n.x):0,o=i?Math.abs(t.y-n.y):0;return Math.sqrt(Math.pow(s,2)+Math.pow(o,2))}}(i);let l=Number.POSITIVE_INFINITY;return Rn(t,i,e,(function(i,h,c){const d=i.inRange(e.x,e.y,s);if(n&&!d)return;const u=i.getCenterPoint(s);if(!o&&!t.isPointInArea(u)&&!d)return;const f=a(e,u);f<l?(r=[{element:i,datasetIndex:h,index:c}],l=f):f===l&&r.push({element:i,datasetIndex:h,index:c})})),r}(t,e,i,n,s,o):function(t,e,i,n){let s=[];return Rn(t,i,e,(function(t,i,o){const{startAngle:r,endAngle:a}=t.getProps(["startAngle","endAngle"],n),{angle:l}=ee(t,{x:e.x,y:e.y});oe(l,r,a)&&s.push({element:t,datasetIndex:i,index:o})})),s}(t,e,i,s):[]}function Wn(t,e,i,n,s){const o=[],r="x"===i?"inXRange":"inYRange";let a=!1;return Rn(t,i,e,((t,n,l)=>{t[r](e[i],s)&&(o.push({element:t,datasetIndex:n,index:l}),a=a||t.inRange(e.x,e.y,s))})),n&&!a?[]:o}var Fn={evaluateInteractionItems:Rn,modes:{index(t,e,i,n){const s=Wi(e,t),o=i.axis||"x",r=i.includeInvisible||!1,a=i.intersect?In(t,s,o,n,r):zn(t,s,o,!1,n,r),l=[];return a.length?(t.getSortedVisibleDatasetMetas().forEach((t=>{const e=a[0].index,i=t.data[e];i&&!i.skip&&l.push({element:i,datasetIndex:t.index,index:e})})),l):[]},dataset(t,e,i,n){const s=Wi(e,t),o=i.axis||"xy",r=i.includeInvisible||!1;let a=i.intersect?In(t,s,o,n,r):zn(t,s,o,!1,n,r);if(a.length>0){const e=a[0].datasetIndex,i=t.getDatasetMeta(e).data;a=[];for(let t=0;t<i.length;++t)a.push({element:i[t],datasetIndex:e,index:t})}return a},point:(t,e,i,n)=>In(t,Wi(e,t),i.axis||"xy",n,i.includeInvisible||!1),nearest(t,e,i,n){const s=Wi(e,t),o=i.axis||"xy",r=i.includeInvisible||!1;return zn(t,s,o,i.intersect,n,r)},x:(t,e,i,n)=>Wn(t,Wi(e,t),"x",i.intersect,n),y:(t,e,i,n)=>Wn(t,Wi(e,t),"y",i.intersect,n)}};const jn=["left","top","right","bottom"];function Vn(t,e){return t.filter((t=>t.pos===e))}function Nn(t,e){return t.filter((t=>-1===jn.indexOf(t.pos)&&t.box.axis===e))}function Hn(t,e){return t.sort(((t,i)=>{const n=e?i:t,s=e?t:i;return n.weight===s.weight?n.index-s.index:n.weight-s.weight}))}function Yn(t,e,i,n){return Math.max(t[i],e[i])+Math.max(t[n],e[n])}function $n(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function Xn(t,e,i,n){const{pos:s,box:o}=i,r=t.maxPadding;if(!bt(s)){i.size&&(t[s]-=i.size);const e=n[i.stack]||{size:0,count:1};e.size=Math.max(e.size,i.horizontal?o.height:o.width),i.size=e.size/e.count,t[s]+=i.size}o.getPadding&&$n(r,o.getPadding());const a=Math.max(0,e.outerWidth-Yn(r,t,"left","right")),l=Math.max(0,e.outerHeight-Yn(r,t,"top","bottom")),h=a!==t.w,c=l!==t.h;return t.w=a,t.h=l,i.horizontal?{same:h,other:c}:{same:c,other:h}}function Un(t,e){const i=e.maxPadding;return function(t){const n={left:0,top:0,right:0,bottom:0};return t.forEach((t=>{n[t]=Math.max(e[t],i[t])})),n}(t?["left","right"]:["top","bottom"])}function Zn(t,e,i,n){const s=[];let o,r,a,l,h,c;for(o=0,r=t.length,h=0;o<r;++o){a=t[o],l=a.box,l.update(a.width||e.w,a.height||e.h,Un(a.horizontal,e));const{same:r,other:d}=Xn(e,i,a,n);h|=r&&s.length,c=c||d,l.fullSize||s.push(a)}return h&&Zn(s,e,i,n)||c}function qn(t,e,i,n,s){t.top=i,t.left=e,t.right=e+n,t.bottom=i+s,t.width=n,t.height=s}function Gn(t,e,i,n){const s=i.padding;let{x:o,y:r}=e;for(const a of t){const t=a.box,l=n[a.stack]||{count:1,placed:0,weight:1},h=a.stackWeight/l.weight||1;if(a.horizontal){const n=e.w*h,o=l.size||t.height;Rt(l.start)&&(r=l.start),t.fullSize?qn(t,s.left,r,i.outerWidth-s.right-s.left,o):qn(t,e.left+l.placed,r,n,o),l.start=r,l.placed+=n,r=t.bottom}else{const n=e.h*h,r=l.size||t.width;Rt(l.start)&&(o=l.start),t.fullSize?qn(t,o,s.top,r,i.outerHeight-s.bottom-s.top):qn(t,o,e.top+l.placed,r,n),l.start=o,l.placed+=n,o=t.right}}e.x=o,e.y=r}var Kn={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const i=t.boxes?t.boxes.indexOf(e):-1;-1!==i&&t.boxes.splice(i,1)},configure(t,e,i){e.fullSize=i.fullSize,e.position=i.position,e.weight=i.weight},update(t,e,i,n){if(!t)return;const s=ai(t.options.layout.padding),o=Math.max(e-s.width,0),r=Math.max(i-s.height,0),a=function(t){const e=function(t){const e=[];let i,n,s,o,r,a;for(i=0,n=(t||[]).length;i<n;++i)s=t[i],({position:o,options:{stack:r,stackWeight:a=1}}=s),e.push({index:i,box:s,pos:o,horizontal:s.isHorizontal(),weight:s.weight,stack:r&&o+r,stackWeight:a});return e}(t),i=Hn(e.filter((t=>t.box.fullSize)),!0),n=Hn(Vn(e,"left"),!0),s=Hn(Vn(e,"right")),o=Hn(Vn(e,"top"),!0),r=Hn(Vn(e,"bottom")),a=Nn(e,"x"),l=Nn(e,"y");return{fullSize:i,leftAndTop:n.concat(o),rightAndBottom:s.concat(l).concat(r).concat(a),chartArea:Vn(e,"chartArea"),vertical:n.concat(s).concat(l),horizontal:o.concat(r).concat(a)}}(t.boxes),l=a.vertical,h=a.horizontal;Ct(t.boxes,(t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}));const c=l.reduce(((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1),0)||1,d=Object.freeze({outerWidth:e,outerHeight:i,padding:s,availableWidth:o,availableHeight:r,vBoxMaxWidth:o/2/c,hBoxMaxHeight:r/2}),u=Object.assign({},s);$n(u,ai(n));const f=Object.assign({maxPadding:u,w:o,h:r,x:s.left,y:s.top},s),p=function(t,e){const i=function(t){const e={};for(const i of t){const{stack:t,pos:n,stackWeight:s}=i;if(!t||!jn.includes(n))continue;const o=e[t]||(e[t]={count:0,placed:0,weight:0,size:0});o.count++,o.weight+=s}return e}(t),{vBoxMaxWidth:n,hBoxMaxHeight:s}=e;let o,r,a;for(o=0,r=t.length;o<r;++o){a=t[o];const{fullSize:r}=a.box,l=i[a.stack],h=l&&a.stackWeight/l.weight;a.horizontal?(a.width=h?h*n:r&&e.availableWidth,a.height=s):(a.width=n,a.height=h?h*s:r&&e.availableHeight)}return i}(l.concat(h),d);Zn(a.fullSize,f,d,p),Zn(l,f,d,p),Zn(h,f,d,p)&&Zn(l,f,d,p),function(t){const e=t.maxPadding;function i(i){const n=Math.max(e[i]-t[i],0);return t[i]+=n,n}t.y+=i("top"),t.x+=i("left"),i("right"),i("bottom")}(f),Gn(a.leftAndTop,f,d,p),f.x+=f.w,f.y+=f.h,Gn(a.rightAndBottom,f,d,p),t.chartArea={left:f.left,top:f.top,right:f.left+f.w,bottom:f.top+f.h,height:f.h,width:f.w},Ct(a.chartArea,(e=>{const i=e.box;Object.assign(i,t.chartArea),i.update(f.w,f.h,{left:0,top:0,right:0,bottom:0})}))}};class Jn{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,i){}removeEventListener(t,e,i){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,i,n){return e=Math.max(0,e||t.width),i=i||t.height,{width:e,height:Math.max(0,n?Math.floor(e/n):i)}}isAttached(t){return!0}updateConfig(t){}}class Qn extends Jn{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}}const ts="$chartjs",es={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},is=t=>null===t||""===t,ns=!!Vi&&{passive:!0};function ss(t,e,i){t.canvas.removeEventListener(e,i,ns)}function os(t,e){for(const i of t)if(i===e||i.contains(e))return!0}function rs(t,e,i){const n=t.canvas,s=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||os(i.addedNodes,n),e=e&&!os(i.removedNodes,n);e&&i()}));return s.observe(document,{childList:!0,subtree:!0}),s}function as(t,e,i){const n=t.canvas,s=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||os(i.removedNodes,n),e=e&&!os(i.addedNodes,n);e&&i()}));return s.observe(document,{childList:!0,subtree:!0}),s}const ls=new Map;let hs=0;function cs(){const t=window.devicePixelRatio;t!==hs&&(hs=t,ls.forEach(((e,i)=>{i.currentDevicePixelRatio!==t&&e()})))}function ds(t,e,i){const n=t.canvas,s=n&&Ti(n);if(!s)return;const o=ge(((t,e)=>{const n=s.clientWidth;i(t,e),n<s.clientWidth&&i()}),window),r=new ResizeObserver((t=>{const e=t[0],i=e.contentRect.width,n=e.contentRect.height;0===i&&0===n||o(i,n)}));return r.observe(s),function(t,e){ls.size||window.addEventListener("resize",cs),ls.set(t,e)}(t,o),r}function us(t,e,i){i&&i.disconnect(),"resize"===e&&function(t){ls.delete(t),ls.size||window.removeEventListener("resize",cs)}(t)}function fs(t,e,i){const n=t.canvas,s=ge((e=>{null!==t.ctx&&i(function(t,e){const i=es[t.type]||t.type,{x:n,y:s}=Wi(t,e);return{type:i,chart:e,native:t,x:void 0!==n?n:null,y:void 0!==s?s:null}}(e,t))}),t);return function(t,e,i){t.addEventListener(e,i,ns)}(n,e,s),s}class ps extends Jn{acquireContext(t,e){const i=t&&t.getContext&&t.getContext("2d");return i&&i.canvas===t?(function(t,e){const i=t.style,n=t.getAttribute("height"),s=t.getAttribute("width");if(t[ts]={initial:{height:n,width:s,style:{display:i.display,height:i.height,width:i.width}}},i.display=i.display||"block",i.boxSizing=i.boxSizing||"border-box",is(s)){const e=Ni(t,"width");void 0!==e&&(t.width=e)}if(is(n))if(""===t.style.height)t.height=t.width/(e||2);else{const e=Ni(t,"height");void 0!==e&&(t.height=e)}}(t,e),i):null}releaseContext(t){const e=t.canvas;if(!e[ts])return!1;const i=e[ts].initial;["height","width"].forEach((t=>{const n=i[t];mt(n)?e.removeAttribute(t):e.setAttribute(t,n)}));const n=i.style||{};return Object.keys(n).forEach((t=>{e.style[t]=n[t]})),e.width=e.width,delete e[ts],!0}addEventListener(t,e,i){this.removeEventListener(t,e);const n=t.$proxies||(t.$proxies={}),s={attach:rs,detach:as,resize:ds}[e]||fs;n[e]=s(t,e,i)}removeEventListener(t,e){const i=t.$proxies||(t.$proxies={}),n=i[e];n&&(({attach:us,detach:us,resize:us}[e]||ss)(t,e,n),i[e]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,i,n){return function(t,e,i,n){const s=Li(t),o=Ii(s,"margin"),r=Oi(s.maxWidth,t,"clientWidth")||Vt,a=Oi(s.maxHeight,t,"clientHeight")||Vt,l=function(t,e,i){let n,s;if(void 0===e||void 0===i){const o=Ti(t);if(o){const t=o.getBoundingClientRect(),r=Li(o),a=Ii(r,"border","width"),l=Ii(r,"padding");e=t.width-l.width-a.width,i=t.height-l.height-a.height,n=Oi(r.maxWidth,o,"clientWidth"),s=Oi(r.maxHeight,o,"clientHeight")}else e=t.clientWidth,i=t.clientHeight}return{width:e,height:i,maxWidth:n||Vt,maxHeight:s||Vt}}(t,e,i);let{width:h,height:c}=l;if("content-box"===s.boxSizing){const t=Ii(s,"border","width"),e=Ii(s,"padding");h-=e.width+t.width,c-=e.height+t.height}return h=Math.max(0,h-o.width),c=Math.max(0,n?h/n:c-o.height),h=Fi(Math.min(h,r,l.maxWidth)),c=Fi(Math.min(c,a,l.maxHeight)),h&&!c&&(c=Fi(h/2)),(void 0!==e||void 0!==i)&&n&&l.height&&c>l.height&&(c=l.height,h=Fi(Math.floor(c*n))),{width:h,height:c}}(t,e,i,n)}isAttached(t){const e=Ti(t);return!(!e||!e.isConnected)}}class gs{static defaults={};static defaultRoutes=void 0;x;y;active=!1;options;$animations;tooltipPosition(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}hasValue(){return Gt(this.x)&&Gt(this.y)}getProps(t,e){const i=this.$animations;if(!e||!i)return this;const n={};return t.forEach((t=>{n[t]=i[t]&&i[t].active()?i[t]._to:this[t]})),n}}function ms(t,e,i,n,s){const o=_t(n,0),r=Math.min(_t(s,t.length),t.length);let a,l,h,c=0;for(i=Math.ceil(i),s&&(a=s-n,i=a/Math.floor(a/i)),h=o;h<0;)c++,h=Math.round(o+c*i);for(l=Math.max(o,0);l<r;l++)l===h&&(e.push(t[l]),c++,h=Math.round(o+c*i))}const xs=(t,e,i)=>"top"===e||"left"===e?t[e]+i:t[e]-i,bs=(t,e)=>Math.min(e||t,t);function ys(t,e){const i=[],n=t.length/e,s=t.length;let o=0;for(;o<s;o+=n)i.push(t[Math.floor(o)]);return i}function vs(t,e,i){const n=t.ticks.length,s=Math.min(e,n-1),o=t._startPixel,r=t._endPixel,a=1e-6;let l,h=t.getPixelForTick(s);if(!(i&&(l=1===n?Math.max(h-o,r-h):0===e?(t.getPixelForTick(1)-h)/2:(h-t.getPixelForTick(s-1))/2,h+=s<e?l:-l,h<o-a||h>r+a)))return h}function _s(t){return t.drawTicks?t.tickLength:0}function As(t,e){if(!t.display)return 0;const i=li(t.font,e),n=ai(t.padding);return(xt(t.text)?t.text.length:1)*i.lineHeight+n.height}function ws(t,e,i){let n=me(t);return(i&&"right"!==e||!i&&"right"===e)&&(n=(t=>"left"===t?"right":"right"===t?"left":t)(n)),n}class Cs extends gs{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:i,_suggestedMax:n}=this;return t=vt(t,Number.POSITIVE_INFINITY),e=vt(e,Number.NEGATIVE_INFINITY),i=vt(i,Number.POSITIVE_INFINITY),n=vt(n,Number.NEGATIVE_INFINITY),{min:vt(t,i),max:vt(e,n),minDefined:yt(t),maxDefined:yt(e)}}getMinMax(t){let e,{min:i,max:n,minDefined:s,maxDefined:o}=this.getUserBounds();if(s&&o)return{min:i,max:n};const r=this.getMatchingVisibleMetas();for(let a=0,l=r.length;a<l;++a)e=r[a].controller.getMinMax(this,t),s||(i=Math.min(i,e.min)),o||(n=Math.max(n,e.max));return i=o&&i>n?n:i,n=s&&i>n?i:n,{min:vt(i,vt(n,i)),max:vt(n,vt(i,n))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}getLabelItems(t=this.chart.chartArea){return this._labelItems||(this._labelItems=this._computeLabelItems(t))}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){wt(this.options.beforeUpdate,[this])}update(t,e,i){const{beginAtZero:n,grace:s,ticks:o}=this.options,r=o.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this._margins=i=Object.assign({left:0,right:0,top:0,bottom:0},i),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+i.left+i.right:this.height+i.top+i.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=function(t,e,i){const{min:n,max:s}=t,o=At(e,(s-n)/2),r=(t,e)=>i&&0===t?0:t+e;return{min:r(n,-Math.abs(o)),max:r(s,o)}}(this,s,n),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const a=r<this.ticks.length;this._convertTicksToLabels(a?ys(this.ticks,r):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),o.display&&(o.autoSkip||"auto"===o.source)&&(this.ticks=function(t,e){const i=t.options.ticks,n=function(t){const e=t.options.offset,i=t._tickSize(),n=t._length/i+(e?0:1),s=t._maxLength/i;return Math.floor(Math.min(n,s))}(t),s=Math.min(i.maxTicksLimit||n,n),o=i.major.enabled?function(t){const e=[];let i,n;for(i=0,n=t.length;i<n;i++)t[i].major&&e.push(i);return e}(e):[],r=o.length,a=o[0],l=o[r-1],h=[];if(r>s)return function(t,e,i,n){let s,o=0,r=i[0];for(n=Math.ceil(n),s=0;s<t.length;s++)s===r&&(e.push(t[s]),o++,r=i[o*n])}(e,h,o,r/s),h;const c=function(t,e,i){const n=function(t){const e=t.length;let i,n;if(e<2)return!1;for(n=t[0],i=1;i<e;++i)if(t[i]-t[i-1]!==n)return!1;return n}(t),s=e.length/i;if(!n)return Math.max(s,1);const o=function(t){const e=[],i=Math.sqrt(t);let n;for(n=1;n<i;n++)t%n==0&&(e.push(n),e.push(t/n));return i===(0|i)&&e.push(i),e.sort(((t,e)=>t-e)).pop(),e}(n);for(let t=0,e=o.length-1;t<e;t++){const e=o[t];if(e>s)return e}return Math.max(s,1)}(o,e,s);if(r>0){let t,i;const n=r>1?Math.round((l-a)/(r-1)):null;for(ms(e,h,c,mt(n)?0:a-n,a),t=0,i=r-1;t<i;t++)ms(e,h,c,o[t],o[t+1]);return ms(e,h,c,l,mt(n)?e.length:l+n),h}return ms(e,h,c),h}(this,this.ticks),this._labelSizes=null,this.afterAutoSkip()),a&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t,e,i=this.options.reverse;this.isHorizontal()?(t=this.left,e=this.right):(t=this.top,e=this.bottom,i=!i),this._startPixel=t,this._endPixel=e,this._reversePixels=i,this._length=e-t,this._alignToPixels=this.options.alignToPixels}afterUpdate(){wt(this.options.afterUpdate,[this])}beforeSetDimensions(){wt(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){wt(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),wt(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){wt(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this.options.ticks;let i,n,s;for(i=0,n=t.length;i<n;i++)s=t[i],s.label=wt(e.callback,[s.value,i,t],this)}afterTickToLabelConversion(){wt(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){wt(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this.options,e=t.ticks,i=bs(this.ticks.length,t.ticks.maxTicksLimit),n=e.minRotation||0,s=e.maxRotation;let o,r,a,l=n;if(!this._isVisible()||!e.display||n>=s||i<=1||!this.isHorizontal())return void(this.labelRotation=n);const h=this._getLabelSizes(),c=h.widest.width,d=h.highest.height,u=re(this.chart.width-c,0,this.maxWidth);o=t.offset?this.maxWidth/i:u/(i-1),c+6>o&&(o=u/(i-(t.offset?.5:1)),r=this.maxHeight-_s(t.grid)-e.padding-As(t.title,this.chart.options.font),a=Math.sqrt(c*c+d*d),l=Qt(Math.min(Math.asin(re((h.highest.height+6)/o,-1,1)),Math.asin(re(r/a,-1,1))-Math.asin(re(d/a,-1,1)))),l=Math.max(n,Math.min(s,l))),this.labelRotation=l}afterCalculateLabelRotation(){wt(this.options.afterCalculateLabelRotation,[this])}afterAutoSkip(){}beforeFit(){wt(this.options.beforeFit,[this])}fit(){const t={width:0,height:0},{chart:e,options:{ticks:i,title:n,grid:s}}=this,o=this._isVisible(),r=this.isHorizontal();if(o){const o=As(n,e.options.font);if(r?(t.width=this.maxWidth,t.height=_s(s)+o):(t.height=this.maxHeight,t.width=_s(s)+o),i.display&&this.ticks.length){const{first:e,last:n,widest:s,highest:o}=this._getLabelSizes(),a=2*i.padding,l=Jt(this.labelRotation),h=Math.cos(l),c=Math.sin(l);if(r){const e=i.mirror?0:c*s.width+h*o.height;t.height=Math.min(this.maxHeight,t.height+e+a)}else{const e=i.mirror?0:h*s.width+c*o.height;t.width=Math.min(this.maxWidth,t.width+e+a)}this._calculatePadding(e,n,c,h)}}this._handleMargins(),r?(this.width=this._length=e.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=e.height-this._margins.top-this._margins.bottom)}_calculatePadding(t,e,i,n){const{ticks:{align:s,padding:o},position:r}=this.options,a=0!==this.labelRotation,l="top"!==r&&"x"===this.axis;if(this.isHorizontal()){const r=this.getPixelForTick(0)-this.left,h=this.right-this.getPixelForTick(this.ticks.length-1);let c=0,d=0;a?l?(c=n*t.width,d=i*e.height):(c=i*t.height,d=n*e.width):"start"===s?d=e.width:"end"===s?c=t.width:"inner"!==s&&(c=t.width/2,d=e.width/2),this.paddingLeft=Math.max((c-r+o)*this.width/(this.width-r),0),this.paddingRight=Math.max((d-h+o)*this.width/(this.width-h),0)}else{let i=e.height/2,n=t.height/2;"start"===s?(i=0,n=t.height):"end"===s&&(i=e.height,n=0),this.paddingTop=i+o,this.paddingBottom=n+o}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){wt(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){let e,i;for(this.beforeTickToLabelConversion(),this.generateTickLabels(t),e=0,i=t.length;e<i;e++)mt(t[e].label)&&(t.splice(e,1),i--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){let t=this._labelSizes;if(!t){const e=this.options.ticks.sampleSize;let i=this.ticks;e<i.length&&(i=ys(i,e)),this._labelSizes=t=this._computeLabelSizes(i,i.length,this.options.ticks.maxTicksLimit)}return t}_computeLabelSizes(t,e,i){const{ctx:n,_longestTextCache:s}=this,o=[],r=[],a=Math.floor(e/bs(e,i));let l,h,c,d,u,f,p,g,m,x,b,y=0,v=0;for(l=0;l<e;l+=a){if(d=t[l].label,u=this._resolveTickFontOptions(l),n.font=f=u.string,p=s[f]=s[f]||{data:{},gc:[]},g=u.lineHeight,m=x=0,mt(d)||xt(d)){if(xt(d))for(h=0,c=d.length;h<c;++h)b=d[h],mt(b)||xt(b)||(m=Fe(n,p.data,p.gc,m,b),x+=g)}else m=Fe(n,p.data,p.gc,m,d),x=g;o.push(m),r.push(x),y=Math.max(m,y),v=Math.max(x,v)}!function(t,e){Ct(t,(t=>{const i=t.gc,n=i.length/2;let s;if(n>e){for(s=0;s<n;++s)delete t.data[i[s]];i.splice(0,n)}}))}(s,e);const _=o.indexOf(y),A=r.indexOf(v),w=t=>({width:o[t]||0,height:r[t]||0});return{first:w(0),last:w(e-1),widest:w(_),highest:w(A),widths:o,heights:r}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);const e=this._startPixel+t*this._length;return re(this._alignToPixels?Ve(this.chart,e,0):e,-32768,32767)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this.ticks||[];if(t>=0&&t<e.length){const i=e[t];return i.$context||(i.$context=function(t,e,i){return ci(t,{tick:i,index:e,type:"tick"})}(this.getContext(),t,i))}return this.$context||(this.$context=ci(this.chart.getContext(),{scale:this,type:"scale"}))}_tickSize(){const t=this.options.ticks,e=Jt(this.labelRotation),i=Math.abs(Math.cos(e)),n=Math.abs(Math.sin(e)),s=this._getLabelSizes(),o=t.autoSkipPadding||0,r=s?s.widest.width+o:0,a=s?s.highest.height+o:0;return this.isHorizontal()?a*i>r*n?r/i:a/n:a*n<r*i?a/i:r/n}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this.axis,i=this.chart,n=this.options,{grid:s,position:o,border:r}=n,a=s.offset,l=this.isHorizontal(),h=this.ticks.length+(a?1:0),c=_s(s),d=[],u=r.setContext(this.getContext()),f=u.display?u.width:0,p=f/2,g=function(t){return Ve(i,t,f)};let m,x,b,y,v,_,A,w,C,M,k,E;if("top"===o)m=g(this.bottom),_=this.bottom-c,w=m-p,M=g(t.top)+p,E=t.bottom;else if("bottom"===o)m=g(this.top),M=t.top,E=g(t.bottom)-p,_=m+p,w=this.top+c;else if("left"===o)m=g(this.right),v=this.right-c,A=m-p,C=g(t.left)+p,k=t.right;else if("right"===o)m=g(this.left),C=t.left,k=g(t.right)-p,v=m+p,A=this.left+c;else if("x"===e){if("center"===o)m=g((t.top+t.bottom)/2+.5);else if(bt(o)){const t=Object.keys(o)[0],e=o[t];m=g(this.chart.scales[t].getPixelForValue(e))}M=t.top,E=t.bottom,_=m+p,w=_+c}else if("y"===e){if("center"===o)m=g((t.left+t.right)/2);else if(bt(o)){const t=Object.keys(o)[0],e=o[t];m=g(this.chart.scales[t].getPixelForValue(e))}v=m-p,A=v-c,C=t.left,k=t.right}const S=_t(n.ticks.maxTicksLimit,h),D=Math.max(1,Math.ceil(h/S));for(x=0;x<h;x+=D){const t=this.getContext(x),e=s.setContext(t),n=r.setContext(t),o=e.lineWidth,h=e.color,c=n.dash||[],u=n.dashOffset,f=e.tickWidth,p=e.tickColor,g=e.tickBorderDash||[],m=e.tickBorderDashOffset;b=vs(this,x,a),void 0!==b&&(y=Ve(i,b,o),l?v=A=C=k=y:_=w=M=E=y,d.push({tx1:v,ty1:_,tx2:A,ty2:w,x1:C,y1:M,x2:k,y2:E,width:o,color:h,borderDash:c,borderDashOffset:u,tickWidth:f,tickColor:p,tickBorderDash:g,tickBorderDashOffset:m}))}return this._ticksLength=h,this._borderValue=m,d}_computeLabelItems(t){const e=this.axis,i=this.options,{position:n,ticks:s}=i,o=this.isHorizontal(),r=this.ticks,{align:a,crossAlign:l,padding:h,mirror:c}=s,d=_s(i.grid),u=d+h,f=c?-h:u,p=-Jt(this.labelRotation),g=[];let m,x,b,y,v,_,A,w,C,M,k,E,S="middle";if("top"===n)_=this.bottom-f,A=this._getXAxisLabelAlignment();else if("bottom"===n)_=this.top+f,A=this._getXAxisLabelAlignment();else if("left"===n){const t=this._getYAxisLabelAlignment(d);A=t.textAlign,v=t.x}else if("right"===n){const t=this._getYAxisLabelAlignment(d);A=t.textAlign,v=t.x}else if("x"===e){if("center"===n)_=(t.top+t.bottom)/2+u;else if(bt(n)){const t=Object.keys(n)[0],e=n[t];_=this.chart.scales[t].getPixelForValue(e)+u}A=this._getXAxisLabelAlignment()}else if("y"===e){if("center"===n)v=(t.left+t.right)/2-u;else if(bt(n)){const t=Object.keys(n)[0],e=n[t];v=this.chart.scales[t].getPixelForValue(e)}A=this._getYAxisLabelAlignment(d).textAlign}"y"===e&&("start"===a?S="top":"end"===a&&(S="bottom"));const D=this._getLabelSizes();for(m=0,x=r.length;m<x;++m){b=r[m],y=b.label;const t=s.setContext(this.getContext(m));w=this.getPixelForTick(m)+s.labelOffset,C=this._resolveTickFontOptions(m),M=C.lineHeight,k=xt(y)?y.length:1;const e=k/2,i=t.color,a=t.textStrokeColor,h=t.textStrokeWidth;let d,u=A;if(o?(v=w,"inner"===A&&(u=m===x-1?this.options.reverse?"left":"right":0===m?this.options.reverse?"right":"left":"center"),E="top"===n?"near"===l||0!==p?-k*M+M/2:"center"===l?-D.highest.height/2-e*M+M:-D.highest.height+M/2:"near"===l||0!==p?M/2:"center"===l?D.highest.height/2-e*M:D.highest.height-k*M,c&&(E*=-1),0===p||t.showLabelBackdrop||(v+=M/2*Math.sin(p))):(_=w,E=(1-k)*M/2),t.showLabelBackdrop){const e=ai(t.backdropPadding),i=D.heights[m],n=D.widths[m];let s=E-e.top,o=0-e.left;switch(S){case"middle":s-=i/2;break;case"bottom":s-=i}switch(A){case"center":o-=n/2;break;case"right":o-=n}d={left:o,top:s,width:n+e.width,height:i+e.height,color:t.backdropColor}}g.push({label:y,font:C,textOffset:E,options:{rotation:p,color:i,strokeColor:a,strokeWidth:h,textAlign:u,textBaseline:S,translation:[v,_],backdrop:d}})}return g}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-Jt(this.labelRotation))return"top"===t?"left":"right";let i="center";return"start"===e.align?i="left":"end"===e.align?i="right":"inner"===e.align&&(i="inner"),i}_getYAxisLabelAlignment(t){const{position:e,ticks:{crossAlign:i,mirror:n,padding:s}}=this.options,o=t+s,r=this._getLabelSizes().widest.width;let a,l;return"left"===e?n?(l=this.right+s,"near"===i?a="left":"center"===i?(a="center",l+=r/2):(a="right",l+=r)):(l=this.right-o,"near"===i?a="right":"center"===i?(a="center",l-=r/2):(a="left",l=this.left)):"right"===e?n?(l=this.left+s,"near"===i?a="right":"center"===i?(a="center",l-=r/2):(a="left",l-=r)):(l=this.left+o,"near"===i?a="left":"center"===i?(a="center",l+=r/2):(a="right",l=this.right)):a="right",{textAlign:a,x:l}}_computeLabelArea(){if(this.options.ticks.mirror)return;const t=this.chart,e=this.options.position;return"left"===e||"right"===e?{top:0,left:this.left,bottom:t.height,right:this.right}:"top"===e||"bottom"===e?{top:this.top,left:0,bottom:this.bottom,right:t.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:i,top:n,width:s,height:o}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(i,n,s,o),t.restore())}getLineWidthForValue(t){const e=this.options.grid;if(!this._isVisible()||!e.display)return 0;const i=this.ticks.findIndex((e=>e.value===t));return i>=0?e.setContext(this.getContext(i)).lineWidth:0}drawGrid(t){const e=this.options.grid,i=this.ctx,n=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t));let s,o;const r=(t,e,n)=>{n.width&&n.color&&(i.save(),i.lineWidth=n.width,i.strokeStyle=n.color,i.setLineDash(n.borderDash||[]),i.lineDashOffset=n.borderDashOffset,i.beginPath(),i.moveTo(t.x,t.y),i.lineTo(e.x,e.y),i.stroke(),i.restore())};if(e.display)for(s=0,o=n.length;s<o;++s){const t=n[s];e.drawOnChartArea&&r({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),e.drawTicks&&r({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const{chart:t,ctx:e,options:{border:i,grid:n}}=this,s=i.setContext(this.getContext()),o=i.display?s.width:0;if(!o)return;const r=n.setContext(this.getContext(0)).lineWidth,a=this._borderValue;let l,h,c,d;this.isHorizontal()?(l=Ve(t,this.left,o)-o/2,h=Ve(t,this.right,r)+r/2,c=d=a):(c=Ve(t,this.top,o)-o/2,d=Ve(t,this.bottom,r)+r/2,l=h=a),e.save(),e.lineWidth=s.width,e.strokeStyle=s.color,e.beginPath(),e.moveTo(l,c),e.lineTo(h,d),e.stroke(),e.restore()}drawLabels(t){if(!this.options.ticks.display)return;const e=this.ctx,i=this._computeLabelArea();i&&Xe(e,i);const n=this.getLabelItems(t);for(const t of n){const i=t.options,n=t.font;Je(e,t.label,0,t.textOffset,n,i)}i&&Ue(e)}drawTitle(){const{ctx:t,options:{position:e,title:i,reverse:n}}=this;if(!i.display)return;const s=li(i.font),o=ai(i.padding),r=i.align;let a=s.lineHeight/2;"bottom"===e||"center"===e||bt(e)?(a+=o.bottom,xt(i.text)&&(a+=s.lineHeight*(i.text.length-1))):a+=o.top;const{titleX:l,titleY:h,maxWidth:c,rotation:d}=function(t,e,i,n){const{top:s,left:o,bottom:r,right:a,chart:l}=t,{chartArea:h,scales:c}=l;let d,u,f,p=0;const g=r-s,m=a-o;if(t.isHorizontal()){if(u=xe(n,o,a),bt(i)){const t=Object.keys(i)[0],n=i[t];f=c[t].getPixelForValue(n)+g-e}else f="center"===i?(h.bottom+h.top)/2+g-e:xs(t,i,e);d=a-o}else{if(bt(i)){const t=Object.keys(i)[0],n=i[t];u=c[t].getPixelForValue(n)-m+e}else u="center"===i?(h.left+h.right)/2-m+e:xs(t,i,e);f=xe(n,r,s),p="left"===i?-Ht:Ht}return{titleX:u,titleY:f,maxWidth:d,rotation:p}}(this,a,e,r);Je(t,i.text,0,0,s,{color:i.color,maxWidth:c,rotation:d,textAlign:ws(r,e,n),textBaseline:"middle",translation:[l,h]})}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){const t=this.options,e=t.ticks&&t.ticks.z||0,i=_t(t.grid&&t.grid.z,-1),n=_t(t.border&&t.border.z,0);return this._isVisible()&&this.draw===Cs.prototype.draw?[{z:i,draw:t=>{this.drawBackground(),this.drawGrid(t),this.drawTitle()}},{z:n,draw:()=>{this.drawBorder()}},{z:e,draw:t=>{this.drawLabels(t)}}]:[{z:e,draw:t=>{this.draw(t)}}]}getMatchingVisibleMetas(t){const e=this.chart.getSortedVisibleDatasetMetas(),i=this.axis+"AxisID",n=[];let s,o;for(s=0,o=e.length;s<o;++s){const o=e[s];o[i]!==this.id||t&&o.type!==t||n.push(o)}return n}_resolveTickFontOptions(t){return li(this.options.ticks.setContext(this.getContext(t)).font)}_maxDigits(){const t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}class Ms{constructor(t,e,i){this.type=t,this.scope=e,this.override=i,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=Object.getPrototypeOf(t);let i;(function(t){return"id"in t&&"defaults"in t})(e)&&(i=this.register(e));const n=this.items,s=t.id,o=this.scope+"."+s;if(!s)throw new Error("class does not have id: "+t);return s in n||(n[s]=t,function(t,e,i){const n=Dt(Object.create(null),[i?We.get(i):{},We.get(e),t.defaults]);We.set(e,n),t.defaultRoutes&&function(t,e){Object.keys(e).forEach((i=>{const n=i.split("."),s=n.pop(),o=[t].concat(n).join("."),r=e[i].split("."),a=r.pop(),l=r.join(".");We.route(o,s,l,a)}))}(e,t.defaultRoutes),t.descriptors&&We.describe(e,t.descriptors)}(t,o,i),this.override&&We.override(t.id,t.overrides)),o}get(t){return this.items[t]}unregister(t){const e=this.items,i=t.id,n=this.scope;i in e&&delete e[i],n&&i in We[n]&&(delete We[n][i],this.override&&delete Oe[i])}}class ks{constructor(){this.controllers=new Ms(yn,"datasets",!0),this.elements=new Ms(gs,"elements"),this.plugins=new Ms(Object,"plugins"),this.scales=new Ms(Cs,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,i){[...e].forEach((e=>{const n=i||this._getRegistryForType(e);i||n.isForType(e)||n===this.plugins&&e.id?this._exec(t,n,e):Ct(e,(e=>{const n=i||this._getRegistryForType(e);this._exec(t,n,e)}))}))}_exec(t,e,i){const n=Lt(t);wt(i["before"+n],[],i),e[t](i),wt(i["after"+n],[],i)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const i=this._typedRegistries[e];if(i.isForType(t))return i}return this.plugins}_get(t,e,i){const n=e.get(t);if(void 0===n)throw new Error('"'+t+'" is not a registered '+i+".");return n}}var Es=new ks;class Ss{constructor(){this._init=[]}notify(t,e,i,n){"beforeInit"===e&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));const s=n?this._descriptors(t).filter(n):this._descriptors(t),o=this._notify(s,t,e,i);return"afterDestroy"===e&&(this._notify(s,t,"stop"),this._notify(this._init,t,"uninstall")),o}_notify(t,e,i,n){n=n||{};for(const s of t){const t=s.plugin;if(!1===wt(t[i],[e,n,s.options],t)&&n.cancelable)return!1}return!0}invalidate(){mt(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const i=t&&t.config,n=_t(i.options&&i.options.plugins,{}),s=function(t){const e={},i=[],n=Object.keys(Es.plugins.items);for(let t=0;t<n.length;t++)i.push(Es.getPlugin(n[t]));const s=t.plugins||[];for(let t=0;t<s.length;t++){const n=s[t];-1===i.indexOf(n)&&(i.push(n),e[n.id]=!0)}return{plugins:i,localIds:e}}(i);return!1!==n||e?function(t,{plugins:e,localIds:i},n,s){const o=[],r=t.getContext();for(const a of e){const e=a.id,l=Ds(n[e],s);null!==l&&o.push({plugin:a,options:Ps(t.config,{plugin:a,local:i[e]},l,r)})}return o}(t,s,n,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],i=this._cache,n=(t,e)=>t.filter((t=>!e.some((e=>t.plugin.id===e.plugin.id))));this._notify(n(e,i),t,"stop"),this._notify(n(i,e),t,"start")}}function Ds(t,e){return e||!1!==t?!0===t?{}:t:null}function Ps(t,{plugin:e,local:i},n,s){const o=t.pluginScopeKeys(e),r=t.getOptionScopes(n,o);return i&&e.defaults&&r.push(e.defaults),t.createResolver(r,s,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function Bs(t,e){const i=We.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||i.indexAxis||"x"}function Ts(t){if("x"===t||"y"===t||"r"===t)return t}function Os(t,...e){if(Ts(t))return t;for(const n of e){const e=n.axis||("top"===(i=n.position)||"bottom"===i?"x":"left"===i||"right"===i?"y":void 0)||t.length>1&&Ts(t[0].toLowerCase());if(e)return e}var i;throw new Error(`Cannot determine type of '${t}' axis. Please provide 'axis' or 'position' option.`)}function Ls(t,e,i){if(i[e+"AxisID"]===t)return{axis:e}}function Rs(t){const e=t.options||(t.options={});e.plugins=_t(e.plugins,{}),e.scales=function(t,e){const i=Oe[t.type]||{scales:{}},n=e.scales||{},s=Bs(t.type,e),o=Object.create(null);return Object.keys(n).forEach((e=>{const r=n[e];if(!bt(r))return console.error(`Invalid scale configuration for scale: ${e}`);if(r._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${e}`);const a=Os(e,r,function(t,e){if(e.data&&e.data.datasets){const i=e.data.datasets.filter((e=>e.xAxisID===t||e.yAxisID===t));if(i.length)return Ls(t,"x",i[0])||Ls(t,"y",i[0])}return{}}(e,t),We.scales[r.type]),l=function(t,e){return t===e?"_index_":"_value_"}(a,s),h=i.scales||{};o[e]=Pt(Object.create(null),[{axis:a},r,h[a],h[l]])})),t.data.datasets.forEach((i=>{const s=i.type||t.type,r=i.indexAxis||Bs(s,e),a=(Oe[s]||{}).scales||{};Object.keys(a).forEach((t=>{const e=function(t,e){let i=t;return"_index_"===t?i=e:"_value_"===t&&(i="x"===e?"y":"x"),i}(t,r),s=i[e+"AxisID"]||e;o[s]=o[s]||Object.create(null),Pt(o[s],[{axis:e},n[s],a[t]])}))})),Object.keys(o).forEach((t=>{const e=o[t];Pt(e,[We.scales[e.type],We.scale])})),o}(t,e)}function Is(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const zs=new Map,Ws=new Set;function Fs(t,e){let i=zs.get(t);return i||(i=e(),zs.set(t,i),Ws.add(i)),i}const js=(t,e,i)=>{const n=Ot(e,i);void 0!==n&&t.add(n)};class Vs{constructor(t){this._config=function(t){return(t=t||{}).data=Is(t.data),Rs(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=Is(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),Rs(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return Fs(t,(()=>[[`datasets.${t}`,""]]))}datasetAnimationScopeKeys(t,e){return Fs(`${t}.transition.${e}`,(()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]]))}datasetElementScopeKeys(t,e){return Fs(`${t}-${e}`,(()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]]))}pluginScopeKeys(t){const e=t.id;return Fs(`${this.type}-plugin-${e}`,(()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]]))}_cachedScopes(t,e){const i=this._scopeCache;let n=i.get(t);return n&&!e||(n=new Map,i.set(t,n)),n}getOptionScopes(t,e,i){const{options:n,type:s}=this,o=this._cachedScopes(t,i),r=o.get(e);if(r)return r;const a=new Set;e.forEach((e=>{t&&(a.add(t),e.forEach((e=>js(a,t,e)))),e.forEach((t=>js(a,n,t))),e.forEach((t=>js(a,Oe[s]||{},t))),e.forEach((t=>js(a,We,t))),e.forEach((t=>js(a,Le,t)))}));const l=Array.from(a);return 0===l.length&&l.push(Object.create(null)),Ws.has(e)&&o.set(e,l),l}chartOptionScopes(){const{options:t,type:e}=this;return[t,Oe[e]||{},We.datasets[e]||{},{type:e},We,Le]}resolveNamedOptions(t,e,i,n=[""]){const s={$shared:!0},{resolver:o,subPrefixes:r}=Ns(this._resolverCache,t,n);let a=o;(function(t,e){const{isScriptable:i,isIndexable:n}=fi(t);for(const s of e){const e=i(s),o=n(s),r=(o||e)&&t[s];if(e&&(It(r)||Hs(r))||o&&xt(r))return!0}return!1})(o,e)&&(s.$shared=!1,a=ui(o,i=It(i)?i():i,this.createResolver(t,i,r)));for(const t of e)s[t]=a[t];return s}createResolver(t,e,i=[""],n){const{resolver:s}=Ns(this._resolverCache,t,i);return bt(e)?ui(s,e,void 0,n):s}}function Ns(t,e,i){let n=t.get(e);n||(n=new Map,t.set(e,n));const s=i.join();let o=n.get(s);return o||(o={resolver:di(e,i),subPrefixes:i.filter((t=>!t.toLowerCase().includes("hover")))},n.set(s,o)),o}const Hs=t=>bt(t)&&Object.getOwnPropertyNames(t).reduce(((e,i)=>e||It(t[i])),!1),Ys=["top","bottom","left","right","chartArea"];function $s(t,e){return"top"===t||"bottom"===t||-1===Ys.indexOf(t)&&"x"===e}function Xs(t,e){return function(i,n){return i[t]===n[t]?i[e]-n[e]:i[t]-n[t]}}function Us(t){const e=t.chart,i=e.options.animation;e.notifyPlugins("afterRender"),wt(i&&i.onComplete,[t],e)}function Zs(t){const e=t.chart,i=e.options.animation;wt(i&&i.onProgress,[t],e)}function qs(t){return Bi()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const Gs={},Ks=t=>{const e=qs(t);return Object.values(Gs).filter((t=>t.canvas===e)).pop()};function Js(t,e,i){const n=Object.keys(t);for(const s of n){const n=+s;if(n>=e){const o=t[s];delete t[s],(i>0||n>e)&&(t[n+i]=o)}}}class Qs{static defaults=We;static instances=Gs;static overrides=Oe;static registry=Es;static version="4.3.3";static getChart=Ks;static register(...t){Es.add(...t),to()}static unregister(...t){Es.remove(...t),to()}constructor(t,e){const i=this.config=new Vs(e),n=qs(t),s=Ks(n);if(s)throw new Error("Canvas is already in use. Chart with ID '"+s.id+"' must be destroyed before the canvas with ID '"+s.canvas.id+"' can be reused.");const o=i.createResolver(i.chartOptionScopes(),this.getContext());this.platform=new(i.platform||function(t){return!Bi()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?Qn:ps}(n)),this.platform.updateConfig(i);const r=this.platform.acquireContext(n,o.aspectRatio),a=r&&r.canvas,l=a&&a.height,h=a&&a.width;this.id=gt(),this.ctx=r,this.canvas=a,this.width=h,this.height=l,this._options=o,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new Ss,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=function(t,e){let i;return function(...n){return e?(clearTimeout(i),i=setTimeout(t,e,n)):t.apply(this,n),e}}((t=>this.update(t)),o.resizeDelay||0),this._dataChanges=[],Gs[this.id]=this,r&&a?(nn.listen(this,"complete",Us),nn.listen(this,"progress",Zs),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:i,height:n,_aspectRatio:s}=this;return mt(t)?e&&s?s:n?i/n:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}get registry(){return Es}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():ji(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return Ne(this.canvas,this.ctx),this}stop(){return nn.stop(this),this}resize(t,e){nn.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const i=this.options,n=this.canvas,s=i.maintainAspectRatio&&this.aspectRatio,o=this.platform.getMaximumSize(n,t,e,s),r=i.devicePixelRatio||this.platform.getDevicePixelRatio(),a=this.width?"resize":"attach";this.width=o.width,this.height=o.height,this._aspectRatio=this.aspectRatio,ji(this,r,!0)&&(this.notifyPlugins("resize",{size:o}),wt(i.onResize,[this,o],this),this.attached&&this._doResize(a)&&this.render())}ensureScalesHaveIDs(){Ct(this.options.scales||{},((t,e)=>{t.id=e}))}buildOrUpdateScales(){const t=this.options,e=t.scales,i=this.scales,n=Object.keys(i).reduce(((t,e)=>(t[e]=!1,t)),{});let s=[];e&&(s=s.concat(Object.keys(e).map((t=>{const i=e[t],n=Os(t,i),s="r"===n,o="x"===n;return{options:i,dposition:s?"chartArea":o?"bottom":"left",dtype:s?"radialLinear":o?"category":"linear"}})))),Ct(s,(e=>{const s=e.options,o=s.id,r=Os(o,s),a=_t(s.type,e.dtype);void 0!==s.position&&$s(s.position,r)===$s(e.dposition)||(s.position=e.dposition),n[o]=!0;let l=null;o in i&&i[o].type===a?l=i[o]:(l=new(Es.getScale(a))({id:o,type:a,ctx:this.ctx,chart:this}),i[l.id]=l),l.init(s,t)})),Ct(n,((t,e)=>{t||delete i[e]})),Ct(i,(t=>{Kn.configure(this,t,t.options),Kn.addBox(this,t)}))}_updateMetasets(){const t=this._metasets,e=this.data.datasets.length,i=t.length;if(t.sort(((t,e)=>t.index-e.index)),i>e){for(let t=e;t<i;++t)this._destroyDatasetMeta(t);t.splice(e,i-e)}this._sortedMetasets=t.slice(0).sort(Xs("order","index"))}_removeUnreferencedMetasets(){const{_metasets:t,data:{datasets:e}}=this;t.length>e.length&&delete this._stacks,t.forEach(((t,i)=>{0===e.filter((e=>e===t._dataset)).length&&this._destroyDatasetMeta(i)}))}buildOrUpdateControllers(){const t=[],e=this.data.datasets;let i,n;for(this._removeUnreferencedMetasets(),i=0,n=e.length;i<n;i++){const n=e[i];let s=this.getDatasetMeta(i);const o=n.type||this.config.type;if(s.type&&s.type!==o&&(this._destroyDatasetMeta(i),s=this.getDatasetMeta(i)),s.type=o,s.indexAxis=n.indexAxis||Bs(o,this.options),s.order=n.order||0,s.index=i,s.label=""+n.label,s.visible=this.isDatasetVisible(i),s.controller)s.controller.updateIndex(i),s.controller.linkScales();else{const e=Es.getController(o),{datasetElementType:n,dataElementType:r}=We.datasets[o];Object.assign(e,{dataElementType:Es.getElement(r),datasetElementType:n&&Es.getElement(n)}),s.controller=new e(this,i),t.push(s.controller)}}return this._updateMetasets(),t}_resetElements(){Ct(this.data.datasets,((t,e)=>{this.getDatasetMeta(e).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this.config;e.update();const i=this._options=e.createResolver(e.chartOptionScopes(),this.getContext()),n=this._animationsDisabled=!i.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const s=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let o=0;for(let t=0,e=this.data.datasets.length;t<e;t++){const{controller:e}=this.getDatasetMeta(t),i=!n&&-1===s.indexOf(e);e.buildOrUpdateElements(i),o=Math.max(+e.getMaxOverflow(),o)}o=this._minPadding=i.layout.autoPadding?o:0,this._updateLayout(o),n||Ct(s,(t=>{t.reset()})),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(Xs("z","_idx"));const{_active:r,_lastEvent:a}=this;a?this._eventHandler(a,!0):r.length&&this._updateHoverStyles(r,r,!0),this.render()}_updateScales(){Ct(this.scales,(t=>{Kn.removeBox(this,t)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const t=this.options,e=new Set(Object.keys(this._listeners)),i=new Set(t.events);zt(e,i)&&!!this._responsiveListeners===t.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:t}=this,e=this._getUniformDataChanges()||[];for(const{method:i,start:n,count:s}of e)Js(t,n,"_removeElements"===i?-s:s)}_getUniformDataChanges(){const t=this._dataChanges;if(!t||!t.length)return;this._dataChanges=[];const e=this.data.datasets.length,i=e=>new Set(t.filter((t=>t[0]===e)).map(((t,e)=>e+","+t.splice(1).join(",")))),n=i(0);for(let t=1;t<e;t++)if(!zt(n,i(t)))return;return Array.from(n).map((t=>t.split(","))).map((t=>({method:t[1],start:+t[2],count:+t[3]})))}_updateLayout(t){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;Kn.update(this,this.width,this.height,t);const e=this.chartArea,i=e.width<=0||e.height<=0;this._layers=[],Ct(this.boxes,(t=>{i&&"chartArea"===t.position||(t.configure&&t.configure(),this._layers.push(...t._layers()))}),this),this._layers.forEach(((t,e)=>{t._idx=e})),this.notifyPlugins("afterLayout")}_updateDatasets(t){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let t=0,e=this.data.datasets.length;t<e;++t)this.getDatasetMeta(t).controller.configure();for(let e=0,i=this.data.datasets.length;e<i;++e)this._updateDataset(e,It(t)?t({datasetIndex:e}):t);this.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const i=this.getDatasetMeta(t),n={meta:i,index:t,mode:e,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",n)&&(i.controller._update(e),n.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",n))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(nn.has(this)?this.attached&&!nn.running(this)&&nn.start(this):(this.draw(),Us({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){const{width:t,height:e}=this._resizeBeforeDraw;this._resize(t,e),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const e=this._layers;for(t=0;t<e.length&&e[t].z<=0;++t)e[t].draw(this.chartArea);for(this._drawDatasets();t<e.length;++t)e[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,i=[];let n,s;for(n=0,s=e.length;n<s;++n){const s=e[n];t&&!s.visible||i.push(s)}return i}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=this.getSortedVisibleDatasetMetas();for(let e=t.length-1;e>=0;--e)this._drawDataset(t[e]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this.ctx,i=t._clip,n=!i.disabled,s=function(t){const{xScale:e,yScale:i}=t;if(e&&i)return{left:e.left,right:e.right,top:i.top,bottom:i.bottom}}(t)||this.chartArea,o={meta:t,index:t.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",o)&&(n&&Xe(e,{left:!1===i.left?0:s.left-i.left,right:!1===i.right?this.width:s.right+i.right,top:!1===i.top?0:s.top-i.top,bottom:!1===i.bottom?this.height:s.bottom+i.bottom}),t.controller.draw(),n&&Ue(e),o.cancelable=!1,this.notifyPlugins("afterDatasetDraw",o))}isPointInArea(t){return $e(t,this.chartArea,this._minPadding)}getElementsAtEventForMode(t,e,i,n){const s=Fn.modes[e];return"function"==typeof s?s(this,t,i,n):[]}getDatasetMeta(t){const e=this.data.datasets[t],i=this._metasets;let n=i.filter((t=>t&&t._dataset===e)).pop();return n||(n={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},i.push(n)),n}getContext(){return this.$context||(this.$context=ci(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const i=this.getDatasetMeta(t);return"boolean"==typeof i.hidden?!i.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,e,i){const n=i?"show":"hide",s=this.getDatasetMeta(t),o=s.controller._resolveAnimations(void 0,n);Rt(e)?(s.data[e].hidden=!i,this.update()):(this.setDatasetVisibility(t,i),o.update(s,{visible:i}),this.update((e=>e.datasetIndex===t?n:void 0)))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){const e=this._metasets[t];e&&e.controller&&e.controller._destroy(),delete this._metasets[t]}_stop(){let t,e;for(this.stop(),nn.remove(this),t=0,e=this.data.datasets.length;t<e;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:t,ctx:e}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),Ne(t,e),this.platform.releaseContext(e),this.canvas=null,this.ctx=null),delete Gs[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this._listeners,e=this.platform,i=(i,n)=>{e.addEventListener(this,i,n),t[i]=n},n=(t,e,i)=>{t.offsetX=e,t.offsetY=i,this._eventHandler(t)};Ct(this.options.events,(t=>i(t,n)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const t=this._responsiveListeners,e=this.platform,i=(i,n)=>{e.addEventListener(this,i,n),t[i]=n},n=(i,n)=>{t[i]&&(e.removeEventListener(this,i,n),delete t[i])},s=(t,e)=>{this.canvas&&this.resize(t,e)};let o;const r=()=>{n("attach",r),this.attached=!0,this.resize(),i("resize",s),i("detach",o)};o=()=>{this.attached=!1,n("resize",s),this._stop(),this._resize(0,0),i("attach",r)},e.isAttached(this.canvas)?r():o()}unbindEvents(){Ct(this._listeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._listeners={},Ct(this._responsiveListeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._responsiveListeners=void 0}updateHoverStyle(t,e,i){const n=i?"set":"remove";let s,o,r,a;for("dataset"===e&&(s=this.getDatasetMeta(t[0].datasetIndex),s.controller["_"+n+"DatasetHoverStyle"]()),r=0,a=t.length;r<a;++r){o=t[r];const e=o&&this.getDatasetMeta(o.datasetIndex).controller;e&&e[n+"HoverStyle"](o.element,o.datasetIndex,o.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this._active||[],i=t.map((({datasetIndex:t,index:e})=>{const i=this.getDatasetMeta(t);if(!i)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:i.data[e],index:e}}));!Mt(i,e)&&(this._active=i,this._lastEvent=null,this._updateHoverStyles(i,e))}notifyPlugins(t,e,i){return this._plugins.notify(this,t,e,i)}isPluginEnabled(t){return 1===this._plugins._cache.filter((e=>e.plugin.id===t)).length}_updateHoverStyles(t,e,i){const n=this.options.hover,s=(t,e)=>t.filter((t=>!e.some((e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)))),o=s(e,t),r=i?t:s(t,e);o.length&&this.updateHoverStyle(o,n.mode,!1),r.length&&n.mode&&this.updateHoverStyle(r,n.mode,!0)}_eventHandler(t,e){const i={event:t,replay:e,cancelable:!0,inChartArea:this.isPointInArea(t)},n=e=>(e.options.events||this.options.events).includes(t.native.type);if(!1===this.notifyPlugins("beforeEvent",i,n))return;const s=this._handleEvent(t,e,i.inChartArea);return i.cancelable=!1,this.notifyPlugins("afterEvent",i,n),(s||i.changed)&&this.render(),this}_handleEvent(t,e,i){const{_active:n=[],options:s}=this,o=e,r=this._getActiveElements(t,n,i,o),a=function(t){return"mouseup"===t.type||"click"===t.type||"contextmenu"===t.type}(t),l=function(t,e,i,n){return i&&"mouseout"!==t.type?n?e:t:null}(t,this._lastEvent,i,a);i&&(this._lastEvent=null,wt(s.onHover,[t,r,this],this),a&&wt(s.onClick,[t,r,this],this));const h=!Mt(r,n);return(h||e)&&(this._active=r,this._updateHoverStyles(r,n,e)),this._lastEvent=l,h}_getActiveElements(t,e,i,n){if("mouseout"===t.type)return[];if(!i)return e;const s=this.options.hover;return this.getElementsAtEventForMode(t,s.mode,s,n)}}function to(){return Ct(Qs.instances,(t=>t._plugins.invalidate()))}function eo(t,e,i,n){return{x:i+t*Math.cos(e),y:n+t*Math.sin(e)}}function io(t,e,i,n,s,o){const{x:r,y:a,startAngle:l,pixelMargin:h,innerRadius:c}=e,d=Math.max(e.outerRadius+n+i-h,0),u=c>0?c+n+i+h:0;let f=0;const p=s-l;if(n){const t=((c>0?c-n:0)+(d>0?d-n:0))/2;f=(p-(0!==t?p*t/(t+n):p))/2}const g=(p-Math.max(.001,p*d-i/Wt)/d)/2,m=l+g+f,x=s-g-f,{outerStart:b,outerEnd:y,innerStart:v,innerEnd:_}=function(t,e,i,n){const s=si(t.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]),o=(i-e)/2,r=Math.min(o,n*e/2),a=t=>{const e=(i-Math.min(o,t))*n/2;return re(t,0,Math.min(o,e))};return{outerStart:a(s.outerStart),outerEnd:a(s.outerEnd),innerStart:re(s.innerStart,0,r),innerEnd:re(s.innerEnd,0,r)}}(e,u,d,x-m),A=d-b,w=d-y,C=m+b/A,M=x-y/w,k=u+v,E=u+_,S=m+v/k,D=x-_/E;if(t.beginPath(),o){const e=(C+M)/2;if(t.arc(r,a,d,C,e),t.arc(r,a,d,e,M),y>0){const e=eo(w,M,r,a);t.arc(e.x,e.y,y,M,x+Ht)}const i=eo(E,x,r,a);if(t.lineTo(i.x,i.y),_>0){const e=eo(E,D,r,a);t.arc(e.x,e.y,_,x+Ht,D+Math.PI)}const n=(x-_/u+(m+v/u))/2;if(t.arc(r,a,u,x-_/u,n,!0),t.arc(r,a,u,n,m+v/u,!0),v>0){const e=eo(k,S,r,a);t.arc(e.x,e.y,v,S+Math.PI,m-Ht)}const s=eo(A,m,r,a);if(t.lineTo(s.x,s.y),b>0){const e=eo(A,C,r,a);t.arc(e.x,e.y,b,m-Ht,C)}}else{t.moveTo(r,a);const e=Math.cos(C)*d+r,i=Math.sin(C)*d+a;t.lineTo(e,i);const n=Math.cos(M)*d+r,s=Math.sin(M)*d+a;t.lineTo(n,s)}t.closePath()}function no(t,e,i=e){t.lineCap=_t(i.borderCapStyle,e.borderCapStyle),t.setLineDash(_t(i.borderDash,e.borderDash)),t.lineDashOffset=_t(i.borderDashOffset,e.borderDashOffset),t.lineJoin=_t(i.borderJoinStyle,e.borderJoinStyle),t.lineWidth=_t(i.borderWidth,e.borderWidth),t.strokeStyle=_t(i.borderColor,e.borderColor)}function so(t,e,i){t.lineTo(i.x,i.y)}function oo(t,e,i={}){const n=t.length,{start:s=0,end:o=n-1}=i,{start:r,end:a}=e,l=Math.max(s,r),h=Math.min(o,a),c=s<r&&o<r||s>a&&o>a;return{count:n,start:l,loop:e.loop,ilen:h<l&&!c?n+h-l:h-l}}function ro(t,e,i,n){const{points:s,options:o}=e,{count:r,start:a,loop:l,ilen:h}=oo(s,i,n),c=function(t){return t.stepped?Ze:t.tension||"monotone"===t.cubicInterpolationMode?qe:so}(o);let d,u,f,{move:p=!0,reverse:g}=n||{};for(d=0;d<=h;++d)u=s[(a+(g?h-d:d))%r],u.skip||(p?(t.moveTo(u.x,u.y),p=!1):c(t,f,u,g,o.stepped),f=u);return l&&(u=s[(a+(g?h:0))%r],c(t,f,u,g,o.stepped)),!!l}function ao(t,e,i,n){const s=e.points,{count:o,start:r,ilen:a}=oo(s,i,n),{move:l=!0,reverse:h}=n||{};let c,d,u,f,p,g,m=0,x=0;const b=t=>(r+(h?a-t:t))%o,y=()=>{f!==p&&(t.lineTo(m,p),t.lineTo(m,f),t.lineTo(m,g))};for(l&&(d=s[b(0)],t.moveTo(d.x,d.y)),c=0;c<=a;++c){if(d=s[b(c)],d.skip)continue;const e=d.x,i=d.y,n=0|e;n===u?(i<f?f=i:i>p&&(p=i),m=(x*m+e)/++x):(y(),t.lineTo(e,i),u=n,x=0,f=p=i),g=i}y()}function lo(t){const e=t.options,i=e.borderDash&&e.borderDash.length;return t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||i?ro:ao}const ho="function"==typeof Path2D;class co extends gs{static id="line";static defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};static descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){const i=this.options;if((i.tension||"monotone"===i.cubicInterpolationMode)&&!i.stepped&&!this._pointsUpdated){const n=i.spanGaps?this._loop:this._fullLoop;Pi(this._points,i,t,n,e),this._pointsUpdated=!0}}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=function(t,e){const i=t.points,n=t.options.spanGaps,s=i.length;if(!s)return[];const o=!!t._loop,{start:r,end:a}=function(t,e,i,n){let s=0,o=e-1;if(i&&!n)for(;s<e&&!t[s].skip;)s++;for(;s<e&&t[s].skip;)s++;for(s%=e,i&&(o+=s);o>s&&t[o%e].skip;)o--;return o%=e,{start:s,end:o}}(i,s,o,n);return function(t,e,i,n){return n&&n.setContext&&i?function(t,e,i,n){const s=t._chart.getContext(),o=Qi(t.options),{_datasetIndex:r,options:{spanGaps:a}}=t,l=i.length,h=[];let c=o,d=e[0].start,u=d;function f(t,e,n,s){const o=a?-1:1;if(t!==e){for(t+=l;i[t%l].skip;)t-=o;for(;i[e%l].skip;)e+=o;t%l!=e%l&&(h.push({start:t%l,end:e%l,loop:n,style:s}),c=s,d=e%l)}}for(const t of e){d=a?d:t.start;let e,o=i[d%l];for(u=d+1;u<=t.end;u++){const a=i[u%l];e=Qi(n.setContext(ci(s,{type:"segment",p0:o,p1:a,p0DataIndex:(u-1)%l,p1DataIndex:u%l,datasetIndex:r}))),tn(e,c)&&f(d,u-1,t.loop,c),o=a,c=e}d<u-1&&f(d,u-1,t.loop,c)}return h}(t,e,i,n):e}(t,!0===n?[{start:r,end:a,loop:o}]:function(t,e,i,n){const s=t.length,o=[];let r,a=e,l=t[e];for(r=e+1;r<=i;++r){const i=t[r%s];i.skip||i.stop?l.skip||(n=!1,o.push({start:e%s,end:(r-1)%s,loop:n}),e=a=i.stop?r:null):(a=r,l.skip&&(e=r)),l=i}return null!==a&&o.push({start:e%s,end:a%s,loop:n}),o}(i,r,a<r?a+s:a,!!t._fullLoop&&0===r&&a===s-1),i,e)}(this,this.options.segment))}first(){const t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){const t=this.segments,e=this.points,i=t.length;return i&&e[t[i-1].end]}interpolate(t,e){const i=this.options,n=t[e],s=this.points,o=Ji(this,{property:e,start:n,end:n});if(!o.length)return;const r=[],a=function(t){return t.stepped?Yi:t.tension||"monotone"===t.cubicInterpolationMode?$i:Hi}(i);let l,h;for(l=0,h=o.length;l<h;++l){const{start:h,end:c}=o[l],d=s[h],u=s[c];if(d===u){r.push(d);continue}const f=a(d,u,Math.abs((n-d[e])/(u[e]-d[e])),i.stepped);f[e]=t[e],r.push(f)}return 1===r.length?r[0]:r}pathSegment(t,e,i){return lo(this)(t,this,e,i)}path(t,e,i){const n=this.segments,s=lo(this);let o=this._loop;e=e||0,i=i||this.points.length-e;for(const r of n)o&=s(t,this,r,{start:e,end:e+i-1});return!!o}draw(t,e,i,n){const s=this.options||{};(this.points||[]).length&&s.borderWidth&&(t.save(),function(t,e,i,n){ho&&!e.options.segment?function(t,e,i,n){let s=e._path;s||(s=e._path=new Path2D,e.path(s,i,n)&&s.closePath()),no(t,e.options),t.stroke(s)}(t,e,i,n):function(t,e,i,n){const{segments:s,options:o}=e,r=lo(e);for(const a of s)no(t,o,a.style),t.beginPath(),r(t,e,a,{start:i,end:i+n-1})&&t.closePath(),t.stroke()}(t,e,i,n)}(t,this,i,n),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function uo(t,e,i,n){const s=t.options,{[i]:o}=t.getProps([i],n);return Math.abs(e-o)<s.radius+s.hitRadius}function fo(t,e){const{x:i,y:n,base:s,width:o,height:r}=t.getProps(["x","y","base","width","height"],e);let a,l,h,c,d;return t.horizontal?(d=r/2,a=Math.min(i,s),l=Math.max(i,s),h=n-d,c=n+d):(d=o/2,a=i-d,l=i+d,h=Math.min(n,s),c=Math.max(n,s)),{left:a,top:h,right:l,bottom:c}}function po(t,e,i,n){return t?0:re(e,i,n)}function go(t,e,i,n){const s=null===e,o=null===i,r=t&&!(s&&o)&&fo(t,n);return r&&(s||ae(e,r.left,r.right))&&(o||ae(i,r.top,r.bottom))}function mo(t,e){t.rect(e.x,e.y,e.w,e.h)}function xo(t,e,i={}){const n=t.x!==i.x?-e:0,s=t.y!==i.y?-e:0,o=(t.x+t.w!==i.x+i.w?e:0)-n,r=(t.y+t.h!==i.y+i.h?e:0)-s;return{x:t.x+n,y:t.y+s,w:t.w+o,h:t.h+r,radius:t.radius}}var bo=Object.freeze({__proto__:null,ArcElement:class extends gs{static id="arc";static defaults={borderAlign:"center",borderColor:"#fff",borderDash:[],borderDashOffset:0,borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0,circular:!0};static defaultRoutes={backgroundColor:"backgroundColor"};static descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t};circumference;endAngle;fullCircles;innerRadius;outerRadius;pixelMargin;startAngle;constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,i){const n=this.getProps(["x","y"],i),{angle:s,distance:o}=ee(n,{x:t,y:e}),{startAngle:r,endAngle:a,innerRadius:l,outerRadius:h,circumference:c}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],i),d=(this.options.spacing+this.options.borderWidth)/2,u=_t(c,a-r)>=Ft||oe(s,r,a),f=ae(o,l+d,h+d);return u&&f}getCenterPoint(t){const{x:e,y:i,startAngle:n,endAngle:s,innerRadius:o,outerRadius:r}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius"],t),{offset:a,spacing:l}=this.options,h=(n+s)/2,c=(o+r+l+a)/2;return{x:e+Math.cos(h)*c,y:i+Math.sin(h)*c}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const{options:e,circumference:i}=this,n=(e.offset||0)/4,s=(e.spacing||0)/2,o=e.circular;if(this.pixelMargin="inner"===e.borderAlign?.33:0,this.fullCircles=i>Ft?Math.floor(i/Ft):0,0===i||this.innerRadius<0||this.outerRadius<0)return;t.save();const r=(this.startAngle+this.endAngle)/2;t.translate(Math.cos(r)*n,Math.sin(r)*n);const a=n*(1-Math.sin(Math.min(Wt,i||0)));t.fillStyle=e.backgroundColor,t.strokeStyle=e.borderColor,function(t,e,i,n,s){const{fullCircles:o,startAngle:r,circumference:a}=e;let l=e.endAngle;if(o){io(t,e,i,n,l,s);for(let e=0;e<o;++e)t.fill();isNaN(a)||(l=r+(a%Ft||Ft))}io(t,e,i,n,l,s),t.fill()}(t,this,a,s,o),function(t,e,i,n,s){const{fullCircles:o,startAngle:r,circumference:a,options:l}=e,{borderWidth:h,borderJoinStyle:c,borderDash:d,borderDashOffset:u}=l,f="inner"===l.borderAlign;if(!h)return;t.setLineDash(d||[]),t.lineDashOffset=u,f?(t.lineWidth=2*h,t.lineJoin=c||"round"):(t.lineWidth=h,t.lineJoin=c||"bevel");let p=e.endAngle;if(o){io(t,e,i,n,p,s);for(let e=0;e<o;++e)t.stroke();isNaN(a)||(p=r+(a%Ft||Ft))}f&&function(t,e,i){const{startAngle:n,pixelMargin:s,x:o,y:r,outerRadius:a,innerRadius:l}=e;let h=s/a;t.beginPath(),t.arc(o,r,a,n-h,i+h),l>s?(h=s/l,t.arc(o,r,l,i+h,n-h,!0)):t.arc(o,r,s,i+Ht,n-Ht),t.closePath(),t.clip()}(t,e,p),o||(io(t,e,i,n,p,s),t.stroke())}(t,this,a,s,o),t.restore()}},BarElement:class extends gs{static id="bar";static defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){const{inflateAmount:e,options:{borderColor:i,backgroundColor:n}}=this,{inner:s,outer:o}=function(t){const e=fo(t),i=e.right-e.left,n=e.bottom-e.top,s=function(t,e,i){const n=t.options.borderWidth,s=t.borderSkipped,o=oi(n);return{t:po(s.top,o.top,0,i),r:po(s.right,o.right,0,e),b:po(s.bottom,o.bottom,0,i),l:po(s.left,o.left,0,e)}}(t,i/2,n/2),o=function(t,e,i){const{enableBorderRadius:n}=t.getProps(["enableBorderRadius"]),s=t.options.borderRadius,o=ri(s),r=Math.min(e,i),a=t.borderSkipped,l=n||bt(s);return{topLeft:po(!l||a.top||a.left,o.topLeft,0,r),topRight:po(!l||a.top||a.right,o.topRight,0,r),bottomLeft:po(!l||a.bottom||a.left,o.bottomLeft,0,r),bottomRight:po(!l||a.bottom||a.right,o.bottomRight,0,r)}}(t,i/2,n/2);return{outer:{x:e.left,y:e.top,w:i,h:n,radius:o},inner:{x:e.left+s.l,y:e.top+s.t,w:i-s.l-s.r,h:n-s.t-s.b,radius:{topLeft:Math.max(0,o.topLeft-Math.max(s.t,s.l)),topRight:Math.max(0,o.topRight-Math.max(s.t,s.r)),bottomLeft:Math.max(0,o.bottomLeft-Math.max(s.b,s.l)),bottomRight:Math.max(0,o.bottomRight-Math.max(s.b,s.r))}}}}(this),r=(a=o.radius).topLeft||a.topRight||a.bottomLeft||a.bottomRight?Qe:mo;var a;t.save(),o.w===s.w&&o.h===s.h||(t.beginPath(),r(t,xo(o,e,s)),t.clip(),r(t,xo(s,-e,o)),t.fillStyle=i,t.fill("evenodd")),t.beginPath(),r(t,xo(s,e)),t.fillStyle=n,t.fill(),t.restore()}inRange(t,e,i){return go(this,t,e,i)}inXRange(t,e){return go(this,t,null,e)}inYRange(t,e){return go(this,null,t,e)}getCenterPoint(t){const{x:e,y:i,base:n,horizontal:s}=this.getProps(["x","y","base","horizontal"],t);return{x:s?(e+n)/2:e,y:s?i:(i+n)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}},LineElement:co,PointElement:class extends gs{static id="point";parsed;skip;stop;static defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,i){const n=this.options,{x:s,y:o}=this.getProps(["x","y"],i);return Math.pow(t-s,2)+Math.pow(e-o,2)<Math.pow(n.hitRadius+n.radius,2)}inXRange(t,e){return uo(this,t,"x",e)}inYRange(t,e){return uo(this,t,"y",e)}getCenterPoint(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}size(t){let e=(t=t||this.options||{}).radius||0;return e=Math.max(e,e&&t.hoverRadius||0),2*(e+(e&&t.borderWidth||0))}draw(t,e){const i=this.options;this.skip||i.radius<.1||!$e(this,e,this.size(i)/2)||(t.strokeStyle=i.borderColor,t.lineWidth=i.borderWidth,t.fillStyle=i.backgroundColor,He(t,i,this.x,this.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}}});const yo=["rgb(54, 162, 235)","rgb(255, 99, 132)","rgb(255, 159, 64)","rgb(255, 205, 86)","rgb(75, 192, 192)","rgb(153, 102, 255)","rgb(201, 203, 207)"],vo=yo.map((t=>t.replace("rgb(","rgba(").replace(")",", 0.5)")));function _o(t){return yo[t%yo.length]}function Ao(t){return vo[t%vo.length]}function wo(t){let e;for(e in t)if(t[e].borderColor||t[e].backgroundColor)return!0;return!1}var Co={id:"colors",defaults:{enabled:!0,forceOverride:!1},beforeLayout(t,e,i){if(!i.enabled)return;const{data:{datasets:n},options:s}=t.config,{elements:o}=s;if(!i.forceOverride&&(wo(n)||(r=s)&&(r.borderColor||r.backgroundColor)||o&&wo(o)))return;var r;const a=function(t){let e=0;return(i,n)=>{const s=t.getDatasetMeta(n).controller;s instanceof Sn?e=function(t,e){return t.backgroundColor=t.data.map((()=>_o(e++))),e}(i,e):s instanceof Dn?e=function(t,e){return t.backgroundColor=t.data.map((()=>Ao(e++))),e}(i,e):s&&(e=function(t,e){return t.borderColor=_o(e),t.backgroundColor=Ao(e),++e}(i,e))}}(t);n.forEach(a)}};function Mo(t){if(t._decimated){const e=t._data;delete t._decimated,delete t._data,Object.defineProperty(t,"data",{configurable:!0,enumerable:!0,writable:!0,value:e})}}function ko(t){t.data.datasets.forEach((t=>{Mo(t)}))}var Eo={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(t,e,i)=>{if(!i.enabled)return void ko(t);const n=t.width;t.data.datasets.forEach(((e,s)=>{const{_data:o,indexAxis:r}=e,a=t.getDatasetMeta(s),l=o||e.data;if("y"===hi([r,t.options.indexAxis]))return;if(!a.controller.supportsDecimation)return;const h=t.scales[a.xAxisID];if("linear"!==h.type&&"time"!==h.type)return;if(t.options.parsing)return;let c,{start:d,count:u}=function(t,e){const i=e.length;let n,s=0;const{iScale:o}=t,{min:r,max:a,minDefined:l,maxDefined:h}=o.getUserBounds();return l&&(s=re(he(e,o.axis,r).lo,0,i-1)),n=h?re(he(e,o.axis,a).hi+1,s,i)-s:i-s,{start:s,count:n}}(a,l);if(u<=(i.threshold||4*n))Mo(e);else{switch(mt(o)&&(e._data=l,delete e.data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(t){this._data=t}})),i.algorithm){case"lttb":c=function(t,e,i,n,s){const o=s.samples||n;if(o>=i)return t.slice(e,e+i);const r=[],a=(i-2)/(o-2);let l=0;const h=e+i-1;let c,d,u,f,p,g=e;for(r[l++]=t[g],c=0;c<o-2;c++){let n,s=0,o=0;const h=Math.floor((c+1)*a)+1+e,m=Math.min(Math.floor((c+2)*a)+1,i)+e,x=m-h;for(n=h;n<m;n++)s+=t[n].x,o+=t[n].y;s/=x,o/=x;const b=Math.floor(c*a)+1+e,y=Math.min(Math.floor((c+1)*a)+1,i)+e,{x:v,y:_}=t[g];for(u=f=-1,n=b;n<y;n++)f=.5*Math.abs((v-s)*(t[n].y-_)-(v-t[n].x)*(o-_)),f>u&&(u=f,d=t[n],p=n);r[l++]=d,g=p}return r[l++]=t[h],r}(l,d,u,n,i);break;case"min-max":c=function(t,e,i,n){let s,o,r,a,l,h,c,d,u,f,p=0,g=0;const m=[],x=e+i-1,b=t[e].x,y=t[x].x-b;for(s=e;s<e+i;++s){o=t[s],r=(o.x-b)/y*n,a=o.y;const e=0|r;if(e===l)a<u?(u=a,h=s):a>f&&(f=a,c=s),p=(g*p+o.x)/++g;else{const i=s-1;if(!mt(h)&&!mt(c)){const e=Math.min(h,c),n=Math.max(h,c);e!==d&&e!==i&&m.push({...t[e],x:p}),n!==d&&n!==i&&m.push({...t[n],x:p})}s>0&&i!==d&&m.push(t[i]),m.push(o),l=e,g=0,u=f=a,h=c=d=s}}return m}(l,d,u,n);break;default:throw new Error(`Unsupported decimation algorithm '${i.algorithm}'`)}e._decimated=c}}))},destroy(t){ko(t)}};function So(t,e,i,n){if(n)return;let s=e[t],o=i[t];return"angle"===t&&(s=se(s),o=se(o)),{property:t,start:s,end:o}}function Do(t,e,i){for(;e>t;e--){const t=i[e];if(!isNaN(t.x)&&!isNaN(t.y))break}return e}function Po(t,e,i,n){return t&&e?n(t[i],e[i]):t?t[i]:e?e[i]:0}function Bo(t,e){let i=[],n=!1;return xt(t)?(n=!0,i=t):i=function(t,e){const{x:i=null,y:n=null}=t||{},s=e.points,o=[];return e.segments.forEach((({start:t,end:e})=>{e=Do(t,e,s);const r=s[t],a=s[e];null!==n?(o.push({x:r.x,y:n}),o.push({x:a.x,y:n})):null!==i&&(o.push({x:i,y:r.y}),o.push({x:i,y:a.y}))})),o}(t,e),i.length?new co({points:i,options:{tension:0},_loop:n,_fullLoop:n}):null}function To(t){return t&&!1!==t.fill}function Oo(t,e,i){let n=t[e].fill;const s=[e];let o;if(!i)return n;for(;!1!==n&&-1===s.indexOf(n);){if(!yt(n))return n;if(o=t[n],!o)return!1;if(o.visible)return n;s.push(n),n=o.fill}return!1}function Lo(t,e,i){const n=function(t){const e=t.options,i=e.fill;let n=_t(i&&i.target,i);return void 0===n&&(n=!!e.backgroundColor),!1!==n&&null!==n&&(!0===n?"origin":n)}(t);if(bt(n))return!isNaN(n.value)&&n;let s=parseFloat(n);return yt(s)&&Math.floor(s)===s?function(t,e,i,n){return"-"!==t&&"+"!==t||(i=e+i),!(i===e||i<0||i>=n)&&i}(n[0],e,s,i):["origin","start","end","stack","shape"].indexOf(n)>=0&&n}function Ro(t,e,i){const n=[];for(let s=0;s<i.length;s++){const o=i[s],{first:r,last:a,point:l}=Io(o,e,"x");if(!(!l||r&&a))if(r)n.unshift(l);else if(t.push(l),!a)break}t.push(...n)}function Io(t,e,i){const n=t.interpolate(e,i);if(!n)return{};const s=n[i],o=t.segments,r=t.points;let a=!1,l=!1;for(let t=0;t<o.length;t++){const e=o[t],n=r[e.start][i],h=r[e.end][i];if(ae(s,n,h)){a=s===n,l=s===h;break}}return{first:a,last:l,point:n}}class zo{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,e,i){const{x:n,y:s,radius:o}=this;return e=e||{start:0,end:Ft},t.arc(n,s,o,e.end,e.start,!0),!i.bounds}interpolate(t){const{x:e,y:i,radius:n}=this,s=t.angle;return{x:e+Math.cos(s)*n,y:i+Math.sin(s)*n,angle:s}}}function Wo(t,e,i){const n=function(t){const{chart:e,fill:i,line:n}=t;if(yt(i))return function(t,e){const i=t.getDatasetMeta(e);return i&&t.isDatasetVisible(e)?i.dataset:null}(e,i);if("stack"===i)return function(t){const{scale:e,index:i,line:n}=t,s=[],o=n.segments,r=n.points,a=function(t,e){const i=[],n=t.getMatchingVisibleMetas("line");for(let t=0;t<n.length;t++){const s=n[t];if(s.index===e)break;s.hidden||i.unshift(s.dataset)}return i}(e,i);a.push(Bo({x:null,y:e.bottom},n));for(let t=0;t<o.length;t++){const e=o[t];for(let t=e.start;t<=e.end;t++)Ro(s,r[t],a)}return new co({points:s,options:{}})}(t);if("shape"===i)return!0;const s=function(t){return(t.scale||{}).getPointPositionForValue?function(t){const{scale:e,fill:i}=t,n=e.options,s=e.getLabels().length,o=n.reverse?e.max:e.min,r=function(t,e,i){let n;return n="start"===t?i:"end"===t?e.options.reverse?e.min:e.max:bt(t)?t.value:e.getBaseValue(),n}(i,e,o),a=[];if(n.grid.circular){const t=e.getPointPositionForValue(0,o);return new zo({x:t.x,y:t.y,radius:e.getDistanceFromCenterForValue(r)})}for(let t=0;t<s;++t)a.push(e.getPointPositionForValue(t,r));return a}(t):function(t){const{scale:e={},fill:i}=t,n=function(t,e){let i=null;return"start"===t?i=e.bottom:"end"===t?i=e.top:bt(t)?i=e.getPixelForValue(t.value):e.getBasePixel&&(i=e.getBasePixel()),i}(i,e);if(yt(n)){const t=e.isHorizontal();return{x:t?n:null,y:t?null:n}}return null}(t)}(t);return s instanceof zo?s:Bo(s,n)}(e),{line:s,scale:o,axis:r}=e,a=s.options,l=a.fill,h=a.backgroundColor,{above:c=h,below:d=h}=l||{};n&&s.points.length&&(Xe(t,i),function(t,e){const{line:i,target:n,above:s,below:o,area:r,scale:a}=e,l=i._loop?"angle":e.axis;t.save(),"x"===l&&o!==s&&(Fo(t,n,r.top),jo(t,{line:i,target:n,color:s,scale:a,property:l}),t.restore(),t.save(),Fo(t,n,r.bottom)),jo(t,{line:i,target:n,color:o,scale:a,property:l}),t.restore()}(t,{line:s,target:n,above:c,below:d,area:i,scale:o,axis:r}),Ue(t))}function Fo(t,e,i){const{segments:n,points:s}=e;let o=!0,r=!1;t.beginPath();for(const a of n){const{start:n,end:l}=a,h=s[n],c=s[Do(n,l,s)];o?(t.moveTo(h.x,h.y),o=!1):(t.lineTo(h.x,i),t.lineTo(h.x,h.y)),r=!!e.pathSegment(t,a,{move:r}),r?t.closePath():t.lineTo(c.x,i)}t.lineTo(e.first().x,i),t.closePath(),t.clip()}function jo(t,e){const{line:i,target:n,property:s,color:o,scale:r}=e,a=function(t,e,i){const n=t.segments,s=t.points,o=e.points,r=[];for(const t of n){let{start:n,end:a}=t;a=Do(n,a,s);const l=So(i,s[n],s[a],t.loop);if(!e.segments){r.push({source:t,target:l,start:s[n],end:s[a]});continue}const h=Ji(e,l);for(const e of h){const n=So(i,o[e.start],o[e.end],e.loop),a=Ki(t,s,n);for(const t of a)r.push({source:t,target:e,start:{[i]:Po(l,n,"start",Math.max)},end:{[i]:Po(l,n,"end",Math.min)}})}}return r}(i,n,s);for(const{source:e,target:l,start:h,end:c}of a){const{style:{backgroundColor:a=o}={}}=e,d=!0!==n;t.save(),t.fillStyle=a,Vo(t,r,d&&So(s,h,c)),t.beginPath();const u=!!i.pathSegment(t,e);let f;if(d){u?t.closePath():No(t,n,c,s);const e=!!n.pathSegment(t,l,{move:u,reverse:!0});f=u&&e,f||No(t,n,h,s)}t.closePath(),t.fill(f?"evenodd":"nonzero"),t.restore()}}function Vo(t,e,i){const{top:n,bottom:s}=e.chart.chartArea,{property:o,start:r,end:a}=i||{};"x"===o&&(t.beginPath(),t.rect(r,n,a-r,s-n),t.clip())}function No(t,e,i,n){const s=e.interpolate(i,n);s&&t.lineTo(s.x,s.y)}var Ho={id:"filler",afterDatasetsUpdate(t,e,i){const n=(t.data.datasets||[]).length,s=[];let o,r,a,l;for(r=0;r<n;++r)o=t.getDatasetMeta(r),a=o.dataset,l=null,a&&a.options&&a instanceof co&&(l={visible:t.isDatasetVisible(r),index:r,fill:Lo(a,r,n),chart:t,axis:o.controller.options.indexAxis,scale:o.vScale,line:a}),o.$filler=l,s.push(l);for(r=0;r<n;++r)l=s[r],l&&!1!==l.fill&&(l.fill=Oo(s,r,i.propagate))},beforeDraw(t,e,i){const n="beforeDraw"===i.drawTime,s=t.getSortedVisibleDatasetMetas(),o=t.chartArea;for(let e=s.length-1;e>=0;--e){const i=s[e].$filler;i&&(i.line.updateControlPoints(o,i.axis),n&&i.fill&&Wo(t.ctx,i,o))}},beforeDatasetsDraw(t,e,i){if("beforeDatasetsDraw"!==i.drawTime)return;const n=t.getSortedVisibleDatasetMetas();for(let e=n.length-1;e>=0;--e){const i=n[e].$filler;To(i)&&Wo(t.ctx,i,t.chartArea)}},beforeDatasetDraw(t,e,i){const n=e.meta.$filler;To(n)&&"beforeDatasetDraw"===i.drawTime&&Wo(t.ctx,n,t.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const Yo=(t,e)=>{let{boxHeight:i=e,boxWidth:n=e}=t;return t.usePointStyle&&(i=Math.min(i,e),n=t.pointStyleWidth||Math.min(n,e)),{boxWidth:n,boxHeight:i,itemHeight:Math.max(e,i)}};class $o extends gs{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,i){this.maxWidth=t,this.maxHeight=e,this._margins=i,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const t=this.options.labels||{};let e=wt(t.generateLabels,[this.chart],this)||[];t.filter&&(e=e.filter((e=>t.filter(e,this.chart.data)))),t.sort&&(e=e.sort(((e,i)=>t.sort(e,i,this.chart.data)))),this.options.reverse&&e.reverse(),this.legendItems=e}fit(){const{options:t,ctx:e}=this;if(!t.display)return void(this.width=this.height=0);const i=t.labels,n=li(i.font),s=n.size,o=this._computeTitleHeight(),{boxWidth:r,itemHeight:a}=Yo(i,s);let l,h;e.font=n.string,this.isHorizontal()?(l=this.maxWidth,h=this._fitRows(o,s,r,a)+10):(h=this.maxHeight,l=this._fitCols(o,n,r,a)+10),this.width=Math.min(l,t.maxWidth||this.maxWidth),this.height=Math.min(h,t.maxHeight||this.maxHeight)}_fitRows(t,e,i,n){const{ctx:s,maxWidth:o,options:{labels:{padding:r}}}=this,a=this.legendHitBoxes=[],l=this.lineWidths=[0],h=n+r;let c=t;s.textAlign="left",s.textBaseline="middle";let d=-1,u=-h;return this.legendItems.forEach(((t,f)=>{const p=i+e/2+s.measureText(t.text).width;(0===f||l[l.length-1]+p+2*r>o)&&(c+=h,l[l.length-(f>0?0:1)]=0,u+=h,d++),a[f]={left:0,top:u,row:d,width:p,height:n},l[l.length-1]+=p+r})),c}_fitCols(t,e,i,n){const{ctx:s,maxHeight:o,options:{labels:{padding:r}}}=this,a=this.legendHitBoxes=[],l=this.columnSizes=[],h=o-t;let c=r,d=0,u=0,f=0,p=0;return this.legendItems.forEach(((t,o)=>{const{itemWidth:g,itemHeight:m}=function(t,e,i,n,s){const o=function(t,e,i,n){let s=t.text;return s&&"string"!=typeof s&&(s=s.reduce(((t,e)=>t.length>e.length?t:e))),e+i.size/2+n.measureText(s).width}(n,t,e,i),r=function(t,e,i){let n=t;return"string"!=typeof e.text&&(n=Xo(e,i)),n}(s,n,e.lineHeight);return{itemWidth:o,itemHeight:r}}(i,e,s,t,n);o>0&&u+m+2*r>h&&(c+=d+r,l.push({width:d,height:u}),f+=d+r,p++,d=u=0),a[o]={left:f,top:u,col:p,width:g,height:m},d=Math.max(d,g),u+=m+r})),c+=d,l.push({width:d,height:u}),c}adjustHitBoxes(){if(!this.options.display)return;const t=this._computeTitleHeight(),{legendHitBoxes:e,options:{align:i,labels:{padding:n},rtl:s}}=this,o=Xi(s,this.left,this.width);if(this.isHorizontal()){let s=0,r=xe(i,this.left+n,this.right-this.lineWidths[s]);for(const a of e)s!==a.row&&(s=a.row,r=xe(i,this.left+n,this.right-this.lineWidths[s])),a.top+=this.top+t+n,a.left=o.leftForLtr(o.x(r),a.width),r+=a.width+n}else{let s=0,r=xe(i,this.top+t+n,this.bottom-this.columnSizes[s].height);for(const a of e)a.col!==s&&(s=a.col,r=xe(i,this.top+t+n,this.bottom-this.columnSizes[s].height)),a.top=r,a.left+=this.left+n,a.left=o.leftForLtr(o.x(a.left),a.width),r+=a.height+n}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const t=this.ctx;Xe(t,this),this._draw(),Ue(t)}}_draw(){const{options:t,columnSizes:e,lineWidths:i,ctx:n}=this,{align:s,labels:o}=t,r=We.color,a=Xi(t.rtl,this.left,this.width),l=li(o.font),{padding:h}=o,c=l.size,d=c/2;let u;this.drawTitle(),n.textAlign=a.textAlign("left"),n.textBaseline="middle",n.lineWidth=.5,n.font=l.string;const{boxWidth:f,boxHeight:p,itemHeight:g}=Yo(o,c),m=this.isHorizontal(),x=this._computeTitleHeight();u=m?{x:xe(s,this.left+h,this.right-i[0]),y:this.top+h+x,line:0}:{x:this.left+h,y:xe(s,this.top+x+h,this.bottom-e[0].height),line:0},Ui(this.ctx,t.textDirection);const b=g+h;this.legendItems.forEach(((y,v)=>{n.strokeStyle=y.fontColor,n.fillStyle=y.fontColor;const _=n.measureText(y.text).width,A=a.textAlign(y.textAlign||(y.textAlign=o.textAlign)),w=f+d+_;let C=u.x,M=u.y;if(a.setWidth(this.width),m?v>0&&C+w+h>this.right&&(M=u.y+=b,u.line++,C=u.x=xe(s,this.left+h,this.right-i[u.line])):v>0&&M+b>this.bottom&&(C=u.x=C+e[u.line].width+h,u.line++,M=u.y=xe(s,this.top+x+h,this.bottom-e[u.line].height)),function(t,e,i){if(isNaN(f)||f<=0||isNaN(p)||p<0)return;n.save();const s=_t(i.lineWidth,1);if(n.fillStyle=_t(i.fillStyle,r),n.lineCap=_t(i.lineCap,"butt"),n.lineDashOffset=_t(i.lineDashOffset,0),n.lineJoin=_t(i.lineJoin,"miter"),n.lineWidth=s,n.strokeStyle=_t(i.strokeStyle,r),n.setLineDash(_t(i.lineDash,[])),o.usePointStyle){const r={radius:p*Math.SQRT2/2,pointStyle:i.pointStyle,rotation:i.rotation,borderWidth:s},l=a.xPlus(t,f/2);Ye(n,r,l,e+d,o.pointStyleWidth&&f)}else{const o=e+Math.max((c-p)/2,0),r=a.leftForLtr(t,f),l=ri(i.borderRadius);n.beginPath(),Object.values(l).some((t=>0!==t))?Qe(n,{x:r,y:o,w:f,h:p,radius:l}):n.rect(r,o,f,p),n.fill(),0!==s&&n.stroke()}n.restore()}(a.x(C),M,y),C=((t,e,i,n)=>t===(n?"left":"right")?i:"center"===t?(e+i)/2:e)(A,C+f+d,m?C+w:this.right,t.rtl),function(t,e,i){Je(n,i.text,t,e+g/2,l,{strikethrough:i.hidden,textAlign:a.textAlign(i.textAlign)})}(a.x(C),M,y),m)u.x+=w+h;else if("string"!=typeof y.text){const t=l.lineHeight;u.y+=Xo(y,t)+h}else u.y+=b})),Zi(this.ctx,t.textDirection)}drawTitle(){const t=this.options,e=t.title,i=li(e.font),n=ai(e.padding);if(!e.display)return;const s=Xi(t.rtl,this.left,this.width),o=this.ctx,r=e.position,a=i.size/2,l=n.top+a;let h,c=this.left,d=this.width;if(this.isHorizontal())d=Math.max(...this.lineWidths),h=this.top+l,c=xe(t.align,c,this.right-d);else{const e=this.columnSizes.reduce(((t,e)=>Math.max(t,e.height)),0);h=l+xe(t.align,this.top,this.bottom-e-t.labels.padding-this._computeTitleHeight())}const u=xe(r,c,c+d);o.textAlign=s.textAlign(me(r)),o.textBaseline="middle",o.strokeStyle=e.color,o.fillStyle=e.color,o.font=i.string,Je(o,e.text,u,h,i)}_computeTitleHeight(){const t=this.options.title,e=li(t.font),i=ai(t.padding);return t.display?e.lineHeight+i.height:0}_getLegendItemAt(t,e){let i,n,s;if(ae(t,this.left,this.right)&&ae(e,this.top,this.bottom))for(s=this.legendHitBoxes,i=0;i<s.length;++i)if(n=s[i],ae(t,n.left,n.left+n.width)&&ae(e,n.top,n.top+n.height))return this.legendItems[i];return null}handleEvent(t){const e=this.options;if(!function(t,e){return!("mousemove"!==t&&"mouseout"!==t||!e.onHover&&!e.onLeave)||!(!e.onClick||"click"!==t&&"mouseup"!==t)}(t.type,e))return;const i=this._getLegendItemAt(t.x,t.y);if("mousemove"===t.type||"mouseout"===t.type){const o=this._hoveredItem,r=(s=i,null!==(n=o)&&null!==s&&n.datasetIndex===s.datasetIndex&&n.index===s.index);o&&!r&&wt(e.onLeave,[t,o,this],this),this._hoveredItem=i,i&&!r&&wt(e.onHover,[t,i,this],this)}else i&&wt(e.onClick,[t,i,this],this);var n,s}}function Xo(t,e){return e*(t.text?t.text.length:0)}var Uo={id:"legend",_element:$o,start(t,e,i){const n=t.legend=new $o({ctx:t.ctx,options:i,chart:t});Kn.configure(t,n,i),Kn.addBox(t,n)},stop(t){Kn.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,i){const n=t.legend;Kn.configure(t,n,i),n.options=i},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,i){const n=e.datasetIndex,s=i.chart;s.isDatasetVisible(n)?(s.hide(n),e.hidden=!0):(s.show(n),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const e=t.data.datasets,{labels:{usePointStyle:i,pointStyle:n,textAlign:s,color:o,useBorderRadius:r,borderRadius:a}}=t.legend.options;return t._getSortedDatasetMetas().map((t=>{const l=t.controller.getStyle(i?0:void 0),h=ai(l.borderWidth);return{text:e[t.index].label,fillStyle:l.backgroundColor,fontColor:o,hidden:!t.visible,lineCap:l.borderCapStyle,lineDash:l.borderDash,lineDashOffset:l.borderDashOffset,lineJoin:l.borderJoinStyle,lineWidth:(h.width+h.height)/4,strokeStyle:l.borderColor,pointStyle:n||l.pointStyle,rotation:l.rotation,textAlign:s||l.textAlign,borderRadius:r&&(a||l.borderRadius),datasetIndex:t.index}}),this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class Zo extends gs{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){const i=this.options;if(this.left=0,this.top=0,!i.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=t,this.height=this.bottom=e;const n=xt(i.text)?i.text.length:1;this._padding=ai(i.padding);const s=n*li(i.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=s:this.width=s}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:e,left:i,bottom:n,right:s,options:o}=this,r=o.align;let a,l,h,c=0;return this.isHorizontal()?(l=xe(r,i,s),h=e+t,a=s-i):("left"===o.position?(l=i+t,h=xe(r,n,e),c=-.5*Wt):(l=s-t,h=xe(r,e,n),c=.5*Wt),a=n-e),{titleX:l,titleY:h,maxWidth:a,rotation:c}}draw(){const t=this.ctx,e=this.options;if(!e.display)return;const i=li(e.font),n=i.lineHeight/2+this._padding.top,{titleX:s,titleY:o,maxWidth:r,rotation:a}=this._drawArgs(n);Je(t,e.text,0,0,i,{color:e.color,maxWidth:r,rotation:a,textAlign:me(e.align),textBaseline:"middle",translation:[s,o]})}}var qo={id:"title",_element:Zo,start(t,e,i){!function(t,e){const i=new Zo({ctx:t.ctx,options:e,chart:t});Kn.configure(t,i,e),Kn.addBox(t,i),t.titleBlock=i}(t,i)},stop(t){const e=t.titleBlock;Kn.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,i){const n=t.titleBlock;Kn.configure(t,n,i),n.options=i},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const Go=new WeakMap;var Ko={id:"subtitle",start(t,e,i){const n=new Zo({ctx:t.ctx,options:i,chart:t});Kn.configure(t,n,i),Kn.addBox(t,n),Go.set(t,n)},stop(t){Kn.removeBox(t,Go.get(t)),Go.delete(t)},beforeUpdate(t,e,i){const n=Go.get(t);Kn.configure(t,n,i),n.options=i},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const Jo={average(t){if(!t.length)return!1;let e,i,n=0,s=0,o=0;for(e=0,i=t.length;e<i;++e){const i=t[e].element;if(i&&i.hasValue()){const t=i.tooltipPosition();n+=t.x,s+=t.y,++o}}return{x:n/o,y:s/o}},nearest(t,e){if(!t.length)return!1;let i,n,s,o=e.x,r=e.y,a=Number.POSITIVE_INFINITY;for(i=0,n=t.length;i<n;++i){const n=t[i].element;if(n&&n.hasValue()){const t=ie(e,n.getCenterPoint());t<a&&(a=t,s=n)}}if(s){const t=s.tooltipPosition();o=t.x,r=t.y}return{x:o,y:r}}};function Qo(t,e){return e&&(xt(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function tr(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function er(t,e){const{element:i,datasetIndex:n,index:s}=e,o=t.getDatasetMeta(n).controller,{label:r,value:a}=o.getLabelAndValue(s);return{chart:t,label:r,parsed:o.getParsed(s),raw:t.data.datasets[n].data[s],formattedValue:a,dataset:o.getDataset(),dataIndex:s,datasetIndex:n,element:i}}function ir(t,e){const i=t.chart.ctx,{body:n,footer:s,title:o}=t,{boxWidth:r,boxHeight:a}=e,l=li(e.bodyFont),h=li(e.titleFont),c=li(e.footerFont),d=o.length,u=s.length,f=n.length,p=ai(e.padding);let g=p.height,m=0,x=n.reduce(((t,e)=>t+e.before.length+e.lines.length+e.after.length),0);x+=t.beforeBody.length+t.afterBody.length,d&&(g+=d*h.lineHeight+(d-1)*e.titleSpacing+e.titleMarginBottom),x&&(g+=f*(e.displayColors?Math.max(a,l.lineHeight):l.lineHeight)+(x-f)*l.lineHeight+(x-1)*e.bodySpacing),u&&(g+=e.footerMarginTop+u*c.lineHeight+(u-1)*e.footerSpacing);let b=0;const y=function(t){m=Math.max(m,i.measureText(t).width+b)};return i.save(),i.font=h.string,Ct(t.title,y),i.font=l.string,Ct(t.beforeBody.concat(t.afterBody),y),b=e.displayColors?r+2+e.boxPadding:0,Ct(n,(t=>{Ct(t.before,y),Ct(t.lines,y),Ct(t.after,y)})),b=0,i.font=c.string,Ct(t.footer,y),i.restore(),m+=p.width,{width:m,height:g}}function nr(t,e,i,n){const{x:s,width:o}=i,{width:r,chartArea:{left:a,right:l}}=t;let h="center";return"center"===n?h=s<=(a+l)/2?"left":"right":s<=o/2?h="left":s>=r-o/2&&(h="right"),function(t,e,i,n){const{x:s,width:o}=n,r=i.caretSize+i.caretPadding;return"left"===t&&s+o+r>e.width||"right"===t&&s-o-r<0||void 0}(h,t,e,i)&&(h="center"),h}function sr(t,e,i){const n=i.yAlign||e.yAlign||function(t,e){const{y:i,height:n}=e;return i<n/2?"top":i>t.height-n/2?"bottom":"center"}(t,i);return{xAlign:i.xAlign||e.xAlign||nr(t,e,i,n),yAlign:n}}function or(t,e,i,n){const{caretSize:s,caretPadding:o,cornerRadius:r}=t,{xAlign:a,yAlign:l}=i,h=s+o,{topLeft:c,topRight:d,bottomLeft:u,bottomRight:f}=ri(r);let p=function(t,e){let{x:i,width:n}=t;return"right"===e?i-=n:"center"===e&&(i-=n/2),i}(e,a);const g=function(t,e,i){let{y:n,height:s}=t;return"top"===e?n+=i:n-="bottom"===e?s+i:s/2,n}(e,l,h);return"center"===l?"left"===a?p+=h:"right"===a&&(p-=h):"left"===a?p-=Math.max(c,u)+s:"right"===a&&(p+=Math.max(d,f)+s),{x:re(p,0,n.width-e.width),y:re(g,0,n.height-e.height)}}function rr(t,e,i){const n=ai(i.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-n.right:t.x+n.left}function ar(t){return Qo([],tr(t))}function lr(t,e){const i=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return i?t.override(i):t}const hr={beforeTitle:pt,title(t){if(t.length>0){const e=t[0],i=e.chart.data.labels,n=i?i.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(n>0&&e.dataIndex<n)return i[e.dataIndex]}return""},afterTitle:pt,beforeBody:pt,beforeLabel:pt,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");const i=t.formattedValue;return mt(i)||(e+=i),e},labelColor(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:pt,afterBody:pt,beforeFooter:pt,footer:pt,afterFooter:pt};function cr(t,e,i,n){const s=t[e].call(i,n);return void 0===s?hr[e].call(i,n):s}class dr extends gs{static positioners=Jo;constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this._cachedAnimations;if(t)return t;const e=this.chart,i=this.options.setContext(this.getContext()),n=i.enabled&&e.options.animation&&i.animations,s=new an(this.chart,n);return n._cacheable&&(this._cachedAnimations=Object.freeze(s)),s}getContext(){return this.$context||(this.$context=(this,ci(this.chart.getContext(),{tooltip:this,tooltipItems:this._tooltipItems,type:"tooltip"})))}getTitle(t,e){const{callbacks:i}=e,n=cr(i,"beforeTitle",this,t),s=cr(i,"title",this,t),o=cr(i,"afterTitle",this,t);let r=[];return r=Qo(r,tr(n)),r=Qo(r,tr(s)),r=Qo(r,tr(o)),r}getBeforeBody(t,e){return ar(cr(e.callbacks,"beforeBody",this,t))}getBody(t,e){const{callbacks:i}=e,n=[];return Ct(t,(t=>{const e={before:[],lines:[],after:[]},s=lr(i,t);Qo(e.before,tr(cr(s,"beforeLabel",this,t))),Qo(e.lines,cr(s,"label",this,t)),Qo(e.after,tr(cr(s,"afterLabel",this,t))),n.push(e)})),n}getAfterBody(t,e){return ar(cr(e.callbacks,"afterBody",this,t))}getFooter(t,e){const{callbacks:i}=e,n=cr(i,"beforeFooter",this,t),s=cr(i,"footer",this,t),o=cr(i,"afterFooter",this,t);let r=[];return r=Qo(r,tr(n)),r=Qo(r,tr(s)),r=Qo(r,tr(o)),r}_createItems(t){const e=this._active,i=this.chart.data,n=[],s=[],o=[];let r,a,l=[];for(r=0,a=e.length;r<a;++r)l.push(er(this.chart,e[r]));return t.filter&&(l=l.filter(((e,n,s)=>t.filter(e,n,s,i)))),t.itemSort&&(l=l.sort(((e,n)=>t.itemSort(e,n,i)))),Ct(l,(e=>{const i=lr(t.callbacks,e);n.push(cr(i,"labelColor",this,e)),s.push(cr(i,"labelPointStyle",this,e)),o.push(cr(i,"labelTextColor",this,e))})),this.labelColors=n,this.labelPointStyles=s,this.labelTextColors=o,this.dataPoints=l,l}update(t,e){const i=this.options.setContext(this.getContext()),n=this._active;let s,o=[];if(n.length){const t=Jo[i.position].call(this,n,this._eventPosition);o=this._createItems(i),this.title=this.getTitle(o,i),this.beforeBody=this.getBeforeBody(o,i),this.body=this.getBody(o,i),this.afterBody=this.getAfterBody(o,i),this.footer=this.getFooter(o,i);const e=this._size=ir(this,i),r=Object.assign({},t,e),a=sr(this.chart,i,r),l=or(i,r,a,this.chart);this.xAlign=a.xAlign,this.yAlign=a.yAlign,s={opacity:1,x:l.x,y:l.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==this.opacity&&(s={opacity:0});this._tooltipItems=o,this.$context=void 0,s&&this._resolveAnimations().update(this,s),t&&i.external&&i.external.call(this,{chart:this.chart,tooltip:this,replay:e})}drawCaret(t,e,i,n){const s=this.getCaretPosition(t,i,n);e.lineTo(s.x1,s.y1),e.lineTo(s.x2,s.y2),e.lineTo(s.x3,s.y3)}getCaretPosition(t,e,i){const{xAlign:n,yAlign:s}=this,{caretSize:o,cornerRadius:r}=i,{topLeft:a,topRight:l,bottomLeft:h,bottomRight:c}=ri(r),{x:d,y:u}=t,{width:f,height:p}=e;let g,m,x,b,y,v;return"center"===s?(y=u+p/2,"left"===n?(g=d,m=g-o,b=y+o,v=y-o):(g=d+f,m=g+o,b=y-o,v=y+o),x=g):(m="left"===n?d+Math.max(a,h)+o:"right"===n?d+f-Math.max(l,c)-o:this.caretX,"top"===s?(b=u,y=b-o,g=m-o,x=m+o):(b=u+p,y=b+o,g=m+o,x=m-o),v=b),{x1:g,x2:m,x3:x,y1:b,y2:y,y3:v}}drawTitle(t,e,i){const n=this.title,s=n.length;let o,r,a;if(s){const l=Xi(i.rtl,this.x,this.width);for(t.x=rr(this,i.titleAlign,i),e.textAlign=l.textAlign(i.titleAlign),e.textBaseline="middle",o=li(i.titleFont),r=i.titleSpacing,e.fillStyle=i.titleColor,e.font=o.string,a=0;a<s;++a)e.fillText(n[a],l.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+r,a+1===s&&(t.y+=i.titleMarginBottom-r)}}_drawColorBox(t,e,i,n,s){const o=this.labelColors[i],r=this.labelPointStyles[i],{boxHeight:a,boxWidth:l}=s,h=li(s.bodyFont),c=rr(this,"left",s),d=n.x(c),u=a<h.lineHeight?(h.lineHeight-a)/2:0,f=e.y+u;if(s.usePointStyle){const e={radius:Math.min(l,a)/2,pointStyle:r.pointStyle,rotation:r.rotation,borderWidth:1},i=n.leftForLtr(d,l)+l/2,h=f+a/2;t.strokeStyle=s.multiKeyBackground,t.fillStyle=s.multiKeyBackground,He(t,e,i,h),t.strokeStyle=o.borderColor,t.fillStyle=o.backgroundColor,He(t,e,i,h)}else{t.lineWidth=bt(o.borderWidth)?Math.max(...Object.values(o.borderWidth)):o.borderWidth||1,t.strokeStyle=o.borderColor,t.setLineDash(o.borderDash||[]),t.lineDashOffset=o.borderDashOffset||0;const e=n.leftForLtr(d,l),i=n.leftForLtr(n.xPlus(d,1),l-2),r=ri(o.borderRadius);Object.values(r).some((t=>0!==t))?(t.beginPath(),t.fillStyle=s.multiKeyBackground,Qe(t,{x:e,y:f,w:l,h:a,radius:r}),t.fill(),t.stroke(),t.fillStyle=o.backgroundColor,t.beginPath(),Qe(t,{x:i,y:f+1,w:l-2,h:a-2,radius:r}),t.fill()):(t.fillStyle=s.multiKeyBackground,t.fillRect(e,f,l,a),t.strokeRect(e,f,l,a),t.fillStyle=o.backgroundColor,t.fillRect(i,f+1,l-2,a-2))}t.fillStyle=this.labelTextColors[i]}drawBody(t,e,i){const{body:n}=this,{bodySpacing:s,bodyAlign:o,displayColors:r,boxHeight:a,boxWidth:l,boxPadding:h}=i,c=li(i.bodyFont);let d=c.lineHeight,u=0;const f=Xi(i.rtl,this.x,this.width),p=function(i){e.fillText(i,f.x(t.x+u),t.y+d/2),t.y+=d+s},g=f.textAlign(o);let m,x,b,y,v,_,A;for(e.textAlign=o,e.textBaseline="middle",e.font=c.string,t.x=rr(this,g,i),e.fillStyle=i.bodyColor,Ct(this.beforeBody,p),u=r&&"right"!==g?"center"===o?l/2+h:l+2+h:0,y=0,_=n.length;y<_;++y){for(m=n[y],x=this.labelTextColors[y],e.fillStyle=x,Ct(m.before,p),b=m.lines,r&&b.length&&(this._drawColorBox(e,t,y,f,i),d=Math.max(c.lineHeight,a)),v=0,A=b.length;v<A;++v)p(b[v]),d=c.lineHeight;Ct(m.after,p)}u=0,d=c.lineHeight,Ct(this.afterBody,p),t.y-=s}drawFooter(t,e,i){const n=this.footer,s=n.length;let o,r;if(s){const a=Xi(i.rtl,this.x,this.width);for(t.x=rr(this,i.footerAlign,i),t.y+=i.footerMarginTop,e.textAlign=a.textAlign(i.footerAlign),e.textBaseline="middle",o=li(i.footerFont),e.fillStyle=i.footerColor,e.font=o.string,r=0;r<s;++r)e.fillText(n[r],a.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+i.footerSpacing}}drawBackground(t,e,i,n){const{xAlign:s,yAlign:o}=this,{x:r,y:a}=t,{width:l,height:h}=i,{topLeft:c,topRight:d,bottomLeft:u,bottomRight:f}=ri(n.cornerRadius);e.fillStyle=n.backgroundColor,e.strokeStyle=n.borderColor,e.lineWidth=n.borderWidth,e.beginPath(),e.moveTo(r+c,a),"top"===o&&this.drawCaret(t,e,i,n),e.lineTo(r+l-d,a),e.quadraticCurveTo(r+l,a,r+l,a+d),"center"===o&&"right"===s&&this.drawCaret(t,e,i,n),e.lineTo(r+l,a+h-f),e.quadraticCurveTo(r+l,a+h,r+l-f,a+h),"bottom"===o&&this.drawCaret(t,e,i,n),e.lineTo(r+u,a+h),e.quadraticCurveTo(r,a+h,r,a+h-u),"center"===o&&"left"===s&&this.drawCaret(t,e,i,n),e.lineTo(r,a+c),e.quadraticCurveTo(r,a,r+c,a),e.closePath(),e.fill(),n.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this.chart,i=this.$animations,n=i&&i.x,s=i&&i.y;if(n||s){const i=Jo[t.position].call(this,this._active,this._eventPosition);if(!i)return;const o=this._size=ir(this,t),r=Object.assign({},i,this._size),a=sr(e,t,r),l=or(t,r,a,e);n._to===l.x&&s._to===l.y||(this.xAlign=a.xAlign,this.yAlign=a.yAlign,this.width=o.width,this.height=o.height,this.caretX=i.x,this.caretY=i.y,this._resolveAnimations().update(this,l))}}_willRender(){return!!this.opacity}draw(t){const e=this.options.setContext(this.getContext());let i=this.opacity;if(!i)return;this._updateAnimationTarget(e);const n={width:this.width,height:this.height},s={x:this.x,y:this.y};i=Math.abs(i)<.001?0:i;const o=ai(e.padding),r=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;e.enabled&&r&&(t.save(),t.globalAlpha=i,this.drawBackground(s,t,n,e),Ui(t,e.textDirection),s.y+=o.top,this.drawTitle(s,t,e),this.drawBody(s,t,e),this.drawFooter(s,t,e),Zi(t,e.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const i=this._active,n=t.map((({datasetIndex:t,index:e})=>{const i=this.chart.getDatasetMeta(t);if(!i)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:i.data[e],index:e}})),s=!Mt(i,n),o=this._positionChanged(n,e);(s||o)&&(this._active=n,this._eventPosition=e,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,e,i=!0){if(e&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const n=this.options,s=this._active||[],o=this._getActiveElements(t,s,e,i),r=this._positionChanged(o,t),a=e||!Mt(o,s)||r;return a&&(this._active=o,(n.enabled||n.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,e))),a}_getActiveElements(t,e,i,n){const s=this.options;if("mouseout"===t.type)return[];if(!n)return e;const o=this.chart.getElementsAtEventForMode(t,s.mode,s,i);return s.reverse&&o.reverse(),o}_positionChanged(t,e){const{caretX:i,caretY:n,options:s}=this,o=Jo[s.position].call(this,t,e);return!1!==o&&(i!==o.x||n!==o.y)}}var ur={id:"tooltip",_element:dr,positioners:Jo,afterInit(t,e,i){i&&(t.tooltip=new dr({chart:t,options:i}))},beforeUpdate(t,e,i){t.tooltip&&t.tooltip.initialize(i)},reset(t,e,i){t.tooltip&&t.tooltip.initialize(i)},afterDraw(t){const e=t.tooltip;if(e&&e._willRender()){const i={tooltip:e};if(!1===t.notifyPlugins("beforeTooltipDraw",{...i,cancelable:!0}))return;e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",i)}},afterEvent(t,e){if(t.tooltip){const i=e.replay;t.tooltip.handleEvent(e.event,i,e.inChartArea)&&(e.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:hr},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},fr=Object.freeze({__proto__:null,Colors:Co,Decimation:Eo,Filler:Ho,Legend:Uo,SubTitle:Ko,Title:qo,Tooltip:ur});function pr(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}function gr(t,e,{horizontal:i,minRotation:n}){const s=Jt(n),o=(i?Math.sin(s):Math.cos(s))||.001,r=.75*e*(""+t).length;return Math.min(e/o,r)}class mr extends Cs{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return mt(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const{beginAtZero:t}=this.options,{minDefined:e,maxDefined:i}=this.getUserBounds();let{min:n,max:s}=this;const o=t=>n=e?n:t,r=t=>s=i?s:t;if(t){const t=Ut(n),e=Ut(s);t<0&&e<0?r(0):t>0&&e>0&&o(0)}if(n===s){let e=0===s?1:Math.abs(.05*s);r(s+e),t||o(n-e)}this.min=n,this.max=s}getTickLimit(){const t=this.options.ticks;let e,{maxTicksLimit:i,stepSize:n}=t;return n?(e=Math.ceil(this.max/n)-Math.floor(this.min/n)+1,e>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${n} would result generating up to ${e} ticks. Limiting to 1000.`),e=1e3)):(e=this.computeTickLimit(),i=i||11),i&&(e=Math.min(i,e)),e}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this.options,e=t.ticks;let i=this.getTickLimit();i=Math.max(2,i);const n=function(t,e){const i=[],{bounds:n,step:s,min:o,max:r,precision:a,count:l,maxTicks:h,maxDigits:c,includeBounds:d}=t,u=s||1,f=h-1,{min:p,max:g}=e,m=!mt(o),x=!mt(r),b=!mt(l),y=(g-p)/(c+1);let v,_,A,w,C=qt((g-p)/f/u)*u;if(C<1e-14&&!m&&!x)return[{value:p},{value:g}];w=Math.ceil(g/C)-Math.floor(p/C),w>f&&(C=qt(w*C/f/u)*u),mt(a)||(v=Math.pow(10,a),C=Math.ceil(C*v)/v),"ticks"===n?(_=Math.floor(p/C)*C,A=Math.ceil(g/C)*C):(_=p,A=g),m&&x&&s&&function(t,e){const i=Math.round(t);return i-e<=t&&i+e>=t}((r-o)/s,C/1e3)?(w=Math.round(Math.min((r-o)/C,h)),C=(r-o)/w,_=o,A=r):b?(_=m?o:_,A=x?r:A,w=l-1,C=(A-_)/w):(w=(A-_)/C,w=Zt(w,Math.round(w),C/1e3)?Math.round(w):Math.ceil(w));const M=Math.max(te(C),te(_));v=Math.pow(10,mt(a)?M:a),_=Math.round(_*v)/v,A=Math.round(A*v)/v;let k=0;for(m&&(d&&_!==o?(i.push({value:o}),_<o&&k++,Zt(Math.round((_+k*C)*v)/v,o,gr(o,y,t))&&k++):_<o&&k++);k<w;++k){const t=Math.round((_+k*C)*v)/v;if(x&&t>r)break;i.push({value:t})}return x&&d&&A!==r?i.length&&Zt(i[i.length-1].value,r,gr(r,y,t))?i[i.length-1].value=r:i.push({value:r}):x&&A!==r||i.push({value:A}),i}({maxTicks:i,bounds:t.bounds,min:t.min,max:t.max,precision:e.precision,step:e.stepSize,count:e.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:e.minRotation||0,includeBounds:!1!==e.includeBounds},this._range||this);return"ticks"===t.bounds&&Kt(n,this,"value"),t.reverse?(n.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),n}configure(){const t=this.ticks;let e=this.min,i=this.max;if(super.configure(),this.options.offset&&t.length){const n=(i-e)/Math.max(t.length-1,1)/2;e-=n,i+=n}this._startValue=e,this._endValue=i,this._valueRange=i-e}getLabelForValue(t){return Pe(t,this.chart.options.locale,this.options.ticks.format)}}class xr extends mr{static id="linear";static defaults={ticks:{callback:Te.formatters.numeric}};determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=yt(t)?t:0,this.max=yt(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){const t=this.isHorizontal(),e=t?this.width:this.height,i=Jt(this.options.ticks.minRotation),n=(t?Math.sin(i):Math.cos(i))||.001,s=this._resolveTickFontOptions(0);return Math.ceil(e/Math.min(40,s.lineHeight/n))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}const br=t=>Math.floor(Xt(t)),yr=(t,e)=>Math.pow(10,br(t)+e);function vr(t){return 1==t/Math.pow(10,br(t))}function _r(t,e,i){const n=Math.pow(10,i),s=Math.floor(t/n);return Math.ceil(e/n)-s}class Ar extends Cs{static id="logarithmic";static defaults={ticks:{callback:Te.formatters.logarithmic,major:{enabled:!0}}};constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){const i=mr.prototype.parse.apply(this,[t,e]);if(0!==i)return yt(i)&&i>0?i:null;this._zero=!0}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=yt(t)?Math.max(0,t):null,this.max=yt(e)?Math.max(0,e):null,this.options.beginAtZero&&(this._zero=!0),this._zero&&this.min!==this._suggestedMin&&!yt(this._userMin)&&(this.min=t===yr(this.min,0)?yr(this.min,-1):yr(this.min,0)),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let i=this.min,n=this.max;const s=e=>i=t?i:e,o=t=>n=e?n:t;i===n&&(i<=0?(s(1),o(10)):(s(yr(i,-1)),o(yr(n,1)))),i<=0&&s(yr(n,-1)),n<=0&&o(yr(i,1)),this.min=i,this.max=n}buildTicks(){const t=this.options,e=function(t,{min:e,max:i}){e=vt(t.min,e);const n=[],s=br(e);let o=function(t,e){let i=br(e-t);for(;_r(t,e,i)>10;)i++;for(;_r(t,e,i)<10;)i--;return Math.min(i,br(t))}(e,i),r=o<0?Math.pow(10,Math.abs(o)):1;const a=Math.pow(10,o),l=s>o?Math.pow(10,s):0,h=Math.round((e-l)*r)/r,c=Math.floor((e-l)/a/10)*a*10;let d=Math.floor((h-c)/Math.pow(10,o)),u=vt(t.min,Math.round((l+c+d*Math.pow(10,o))*r)/r);for(;u<i;)n.push({value:u,major:vr(u),significand:d}),d>=10?d=d<15?15:20:d++,d>=20&&(o++,d=2,r=o>=0?1:r),u=Math.round((l+c+d*Math.pow(10,o))*r)/r;const f=vt(t.max,u);return n.push({value:f,major:vr(f),significand:d}),n}({min:this._userMin,max:this._userMax},this);return"ticks"===t.bounds&&Kt(e,this,"value"),t.reverse?(e.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),e}getLabelForValue(t){return void 0===t?"0":Pe(t,this.chart.options.locale,this.options.ticks.format)}configure(){const t=this.min;super.configure(),this._startValue=Xt(t),this._valueRange=Xt(this.max)-Xt(t)}getPixelForValue(t){return void 0!==t&&0!==t||(t=this.min),null===t||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:(Xt(t)-this._startValue)/this._valueRange)}getValueForPixel(t){const e=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+e*this._valueRange)}}function wr(t){const e=t.ticks;if(e.display&&t.display){const t=ai(e.backdropPadding);return _t(e.font&&e.font.size,We.font.size)+t.height}return 0}function Cr(t,e,i){return i=xt(i)?i:[i],{w:je(t,e.string,i),h:i.length*e.lineHeight}}function Mr(t,e,i,n,s){return t===n||t===s?{start:e-i/2,end:e+i/2}:t<n||t>s?{start:e-i,end:e}:{start:e,end:e+i}}function kr(t,e,i,n,s){const o=Math.abs(Math.sin(i)),r=Math.abs(Math.cos(i));let a=0,l=0;n.start<e.l?(a=(e.l-n.start)/o,t.l=Math.min(t.l,e.l-a)):n.end>e.r&&(a=(n.end-e.r)/o,t.r=Math.max(t.r,e.r+a)),s.start<e.t?(l=(e.t-s.start)/r,t.t=Math.min(t.t,e.t-l)):s.end>e.b&&(l=(s.end-e.b)/r,t.b=Math.max(t.b,e.b+l))}function Er(t,e,i){const n=t.drawingArea,{extra:s,additionalAngle:o,padding:r,size:a}=i,l=t.getPointPosition(e,n+s+r,o),h=Math.round(Qt(se(l.angle+Ht))),c=function(t,e,i){return 90===i||270===i?t-=e/2:(i>270||i<90)&&(t-=e),t}(l.y,a.h,h),d=function(t){return 0===t||180===t?"center":t<180?"left":"right"}(h),u=(f=l.x,p=a.w,"right"===(g=d)?f-=p:"center"===g&&(f-=p/2),f);var f,p,g;return{visible:!0,x:l.x,y:c,textAlign:d,left:u,top:c,right:u+a.w,bottom:c+a.h}}function Sr(t,e){if(!e)return!0;const{left:i,top:n,right:s,bottom:o}=t;return!($e({x:i,y:n},e)||$e({x:i,y:o},e)||$e({x:s,y:n},e)||$e({x:s,y:o},e))}function Dr(t,e,i){const{left:n,top:s,right:o,bottom:r}=i,{backdropColor:a}=e;if(!mt(a)){const i=ri(e.borderRadius),l=ai(e.backdropPadding);t.fillStyle=a;const h=n-l.left,c=s-l.top,d=o-n+l.width,u=r-s+l.height;Object.values(i).some((t=>0!==t))?(t.beginPath(),Qe(t,{x:h,y:c,w:d,h:u,radius:i}),t.fill()):t.fillRect(h,c,d,u)}}function Pr(t,e,i,n){const{ctx:s}=t;if(i)s.arc(t.xCenter,t.yCenter,e,0,Ft);else{let i=t.getPointPosition(0,e);s.moveTo(i.x,i.y);for(let o=1;o<n;o++)i=t.getPointPosition(o,e),s.lineTo(i.x,i.y)}}class Br extends mr{static id="radialLinear";static defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:Te.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:t=>t,padding:5,centerPointLabels:!1}};static defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"};static descriptors={angleLines:{_fallback:"grid"}};constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this._padding=ai(wr(this.options)/2),e=this.width=this.maxWidth-t.width,i=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+e/2+t.left),this.yCenter=Math.floor(this.top+i/2+t.top),this.drawingArea=Math.floor(Math.min(e,i)/2)}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!1);this.min=yt(t)&&!isNaN(t)?t:0,this.max=yt(e)&&!isNaN(e)?e:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/wr(this.options))}generateTickLabels(t){mr.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map(((t,e)=>{const i=wt(this.options.pointLabels.callback,[t,e],this);return i||0===i?i:""})).filter(((t,e)=>this.chart.getDataVisibility(e)))}fit(){const t=this.options;t.display&&t.pointLabels.display?function(t){const e={l:t.left+t._padding.left,r:t.right-t._padding.right,t:t.top+t._padding.top,b:t.bottom-t._padding.bottom},i=Object.assign({},e),n=[],s=[],o=t._pointLabels.length,r=t.options.pointLabels,a=r.centerPointLabels?Wt/o:0;for(let l=0;l<o;l++){const o=r.setContext(t.getPointLabelContext(l));s[l]=o.padding;const h=t.getPointPosition(l,t.drawingArea+s[l],a),c=li(o.font),d=Cr(t.ctx,c,t._pointLabels[l]);n[l]=d;const u=se(t.getIndexAngle(l)+a),f=Math.round(Qt(u));kr(i,e,u,Mr(f,h.x,d.w,0,180),Mr(f,h.y,d.h,90,270))}t.setCenterPoint(e.l-i.l,i.r-e.r,e.t-i.t,i.b-e.b),t._pointLabelItems=function(t,e,i){const n=[],s=t._pointLabels.length,o=t.options,{centerPointLabels:r,display:a}=o.pointLabels,l={extra:wr(o)/2,additionalAngle:r?Wt/s:0};let h;for(let o=0;o<s;o++){l.padding=i[o],l.size=e[o];const s=Er(t,o,l);n.push(s),"auto"===a&&(s.visible=Sr(s,h),s.visible&&(h=s))}return n}(t,n,s)}(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,e,i,n){this.xCenter+=Math.floor((t-e)/2),this.yCenter+=Math.floor((i-n)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,e,i,n))}getIndexAngle(t){return se(t*(Ft/(this._pointLabels.length||1))+Jt(this.options.startAngle||0))}getDistanceFromCenterForValue(t){if(mt(t))return NaN;const e=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*e:(t-this.min)*e}getValueForDistanceFromCenter(t){if(mt(t))return NaN;const e=t/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-e:this.min+e}getPointLabelContext(t){const e=this._pointLabels||[];if(t>=0&&t<e.length){const i=e[t];return function(t,e,i){return ci(t,{label:i,index:e,type:"pointLabel"})}(this.getContext(),t,i)}}getPointPosition(t,e,i=0){const n=this.getIndexAngle(t)-Ht+i;return{x:Math.cos(n)*e+this.xCenter,y:Math.sin(n)*e+this.yCenter,angle:n}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:e,top:i,right:n,bottom:s}=this._pointLabelItems[t];return{left:e,top:i,right:n,bottom:s}}drawBackground(){const{backgroundColor:t,grid:{circular:e}}=this.options;if(t){const i=this.ctx;i.save(),i.beginPath(),Pr(this,this.getDistanceFromCenterForValue(this._endValue),e,this._pointLabels.length),i.closePath(),i.fillStyle=t,i.fill(),i.restore()}}drawGrid(){const t=this.ctx,e=this.options,{angleLines:i,grid:n,border:s}=e,o=this._pointLabels.length;let r,a,l;if(e.pointLabels.display&&function(t,e){const{ctx:i,options:{pointLabels:n}}=t;for(let s=e-1;s>=0;s--){const e=t._pointLabelItems[s];if(!e.visible)continue;const o=n.setContext(t.getPointLabelContext(s));Dr(i,o,e);const r=li(o.font),{x:a,y:l,textAlign:h}=e;Je(i,t._pointLabels[s],a,l+r.lineHeight/2,r,{color:o.color,textAlign:h,textBaseline:"middle"})}}(this,o),n.display&&this.ticks.forEach(((t,e)=>{if(0!==e){a=this.getDistanceFromCenterForValue(t.value);const i=this.getContext(e),r=n.setContext(i),l=s.setContext(i);!function(t,e,i,n,s){const o=t.ctx,r=e.circular,{color:a,lineWidth:l}=e;!r&&!n||!a||!l||i<0||(o.save(),o.strokeStyle=a,o.lineWidth=l,o.setLineDash(s.dash),o.lineDashOffset=s.dashOffset,o.beginPath(),Pr(t,i,r,n),o.closePath(),o.stroke(),o.restore())}(this,r,a,o,l)}})),i.display){for(t.save(),r=o-1;r>=0;r--){const n=i.setContext(this.getPointLabelContext(r)),{color:s,lineWidth:o}=n;o&&s&&(t.lineWidth=o,t.strokeStyle=s,t.setLineDash(n.borderDash),t.lineDashOffset=n.borderDashOffset,a=this.getDistanceFromCenterForValue(e.ticks.reverse?this.min:this.max),l=this.getPointPosition(r,a),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(l.x,l.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const t=this.ctx,e=this.options,i=e.ticks;if(!i.display)return;const n=this.getIndexAngle(0);let s,o;t.save(),t.translate(this.xCenter,this.yCenter),t.rotate(n),t.textAlign="center",t.textBaseline="middle",this.ticks.forEach(((n,r)=>{if(0===r&&!e.reverse)return;const a=i.setContext(this.getContext(r)),l=li(a.font);if(s=this.getDistanceFromCenterForValue(this.ticks[r].value),a.showLabelBackdrop){t.font=l.string,o=t.measureText(n.label).width,t.fillStyle=a.backdropColor;const e=ai(a.backdropPadding);t.fillRect(-o/2-e.left,-s-l.size/2-e.top,o+e.width,l.size+e.height)}Je(t,n.label,0,-s,l,{color:a.color,strokeColor:a.textStrokeColor,strokeWidth:a.textStrokeWidth})})),t.restore()}drawTitle(){}}const Tr={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},Or=Object.keys(Tr);function Lr(t,e){return t-e}function Rr(t,e){if(mt(e))return null;const i=t._adapter,{parser:n,round:s,isoWeekday:o}=t._parseOpts;let r=e;return"function"==typeof n&&(r=n(r)),yt(r)||(r="string"==typeof n?i.parse(r,n):i.parse(r)),null===r?null:(s&&(r="week"!==s||!Gt(o)&&!0!==o?i.startOf(r,s):i.startOf(r,"isoWeek",o)),+r)}function Ir(t,e,i,n){const s=Or.length;for(let o=Or.indexOf(t);o<s-1;++o){const t=Tr[Or[o]],s=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((i-e)/(s*t.size))<=n)return Or[o]}return Or[s-1]}function zr(t,e,i){if(i){if(i.length){const{lo:n,hi:s}=le(i,e);t[i[n]>=e?i[n]:i[s]]=!0}}else t[e]=!0}function Wr(t,e,i){const n=[],s={},o=e.length;let r,a;for(r=0;r<o;++r)a=e[r],s[a]=r,n.push({value:a,major:!1});return 0!==o&&i?function(t,e,i,n){const s=t._adapter,o=+s.startOf(e[0].value,n),r=e[e.length-1].value;let a,l;for(a=o;a<=r;a=+s.add(a,1,n))l=i[a],l>=0&&(e[l].major=!0);return e}(t,n,s,i):n}class Fr extends Cs{static id="time";static defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",callback:!1,major:{enabled:!1}}};constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e={}){const i=t.time||(t.time={}),n=this._adapter=new On(t.adapters.date);n.init(e),Pt(i.displayFormats,n.formats()),this._parseOpts={parser:i.parser,round:i.round,isoWeekday:i.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:Rr(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this.options,e=this._adapter,i=t.time.unit||"day";let{min:n,max:s,minDefined:o,maxDefined:r}=this.getUserBounds();function a(t){o||isNaN(t.min)||(n=Math.min(n,t.min)),r||isNaN(t.max)||(s=Math.max(s,t.max))}o&&r||(a(this._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||a(this.getMinMax(!1))),n=yt(n)&&!isNaN(n)?n:+e.startOf(Date.now(),i),s=yt(s)&&!isNaN(s)?s:+e.endOf(Date.now(),i)+1,this.min=Math.min(n,s-1),this.max=Math.max(n+1,s)}_getLabelBounds(){const t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],i=t[t.length-1]),{min:e,max:i}}buildTicks(){const t=this.options,e=t.time,i=t.ticks,n="labels"===i.source?this.getLabelTimestamps():this._generate();"ticks"===t.bounds&&n.length&&(this.min=this._userMin||n[0],this.max=this._userMax||n[n.length-1]);const s=this.min,o=function(t,e,i){let n=0,s=t.length;for(;n<s&&t[n]<e;)n++;for(;s>n&&t[s-1]>i;)s--;return n>0||s<t.length?t.slice(n,s):t}(n,s,this.max);return this._unit=e.unit||(i.autoSkip?Ir(e.minUnit,this.min,this.max,this._getLabelCapacity(s)):function(t,e,i,n,s){for(let o=Or.length-1;o>=Or.indexOf(i);o--){const i=Or[o];if(Tr[i].common&&t._adapter.diff(s,n,i)>=e-1)return i}return Or[i?Or.indexOf(i):0]}(this,o.length,e.minUnit,this.min,this.max)),this._majorUnit=i.major.enabled&&"year"!==this._unit?function(t){for(let e=Or.indexOf(t)+1,i=Or.length;e<i;++e)if(Tr[Or[e]].common)return Or[e]}(this._unit):void 0,this.initOffsets(n),t.reverse&&o.reverse(),Wr(this,o,this._majorUnit)}afterAutoSkip(){this.options.offsetAfterAutoskip&&this.initOffsets(this.ticks.map((t=>+t.value)))}initOffsets(t=[]){let e,i,n=0,s=0;this.options.offset&&t.length&&(e=this.getDecimalForValue(t[0]),n=1===t.length?1-e:(this.getDecimalForValue(t[1])-e)/2,i=this.getDecimalForValue(t[t.length-1]),s=1===t.length?i:(i-this.getDecimalForValue(t[t.length-2]))/2);const o=t.length<3?.5:.25;n=re(n,0,o),s=re(s,0,o),this._offsets={start:n,end:s,factor:1/(n+1+s)}}_generate(){const t=this._adapter,e=this.min,i=this.max,n=this.options,s=n.time,o=s.unit||Ir(s.minUnit,e,i,this._getLabelCapacity(e)),r=_t(n.ticks.stepSize,1),a="week"===o&&s.isoWeekday,l=Gt(a)||!0===a,h={};let c,d,u=e;if(l&&(u=+t.startOf(u,"isoWeek",a)),u=+t.startOf(u,l?"day":o),t.diff(i,e,o)>1e5*r)throw new Error(e+" and "+i+" are too far apart with stepSize of "+r+" "+o);const f="data"===n.ticks.source&&this.getDataTimestamps();for(c=u,d=0;c<i;c=+t.add(c,r,o),d++)zr(h,c,f);return c!==i&&"ticks"!==n.bounds&&1!==d||zr(h,c,f),Object.keys(h).sort(Lr).map((t=>+t))}getLabelForValue(t){const e=this._adapter,i=this.options.time;return i.tooltipFormat?e.format(t,i.tooltipFormat):e.format(t,i.displayFormats.datetime)}format(t,e){const i=this.options.time.displayFormats,n=this._unit,s=e||i[n];return this._adapter.format(t,s)}_tickFormatFunction(t,e,i,n){const s=this.options,o=s.ticks.callback;if(o)return wt(o,[t,e,i],this);const r=s.time.displayFormats,a=this._unit,l=this._majorUnit,h=a&&r[a],c=l&&r[l],d=i[e],u=l&&c&&d&&d.major;return this._adapter.format(t,n||(u?c:h))}generateTickLabels(t){let e,i,n;for(e=0,i=t.length;e<i;++e)n=t[e],n.label=this._tickFormatFunction(n.value,e,t)}getDecimalForValue(t){return null===t?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){const e=this._offsets,i=this.getDecimalForValue(t);return this.getPixelForDecimal((e.start+i)*e.factor)}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return this.min+i*(this.max-this.min)}_getLabelSize(t){const e=this.options.ticks,i=this.ctx.measureText(t).width,n=Jt(this.isHorizontal()?e.maxRotation:e.minRotation),s=Math.cos(n),o=Math.sin(n),r=this._resolveTickFontOptions(0).size;return{w:i*s+r*o,h:i*o+r*s}}_getLabelCapacity(t){const e=this.options.time,i=e.displayFormats,n=i[e.unit]||i.millisecond,s=this._tickFormatFunction(t,0,Wr(this,[t],this._majorUnit),n),o=this._getLabelSize(s),r=Math.floor(this.isHorizontal()?this.width/o.w:this.height/o.h)-1;return r>0?r:1}getDataTimestamps(){let t,e,i=this._cache.data||[];if(i.length)return i;const n=this.getMatchingVisibleMetas();if(this._normalized&&n.length)return this._cache.data=n[0].controller.getAllParsedValues(this);for(t=0,e=n.length;t<e;++t)i=i.concat(n[t].controller.getAllParsedValues(this));return this._cache.data=this.normalize(i)}getLabelTimestamps(){const t=this._cache.labels||[];let e,i;if(t.length)return t;const n=this.getLabels();for(e=0,i=n.length;e<i;++e)t.push(Rr(this,n[e]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return fe(t.sort(Lr))}}function jr(t,e,i){let n,s,o,r,a=0,l=t.length-1;i?(e>=t[a].pos&&e<=t[l].pos&&({lo:a,hi:l}=he(t,"pos",e)),({pos:n,time:o}=t[a]),({pos:s,time:r}=t[l])):(e>=t[a].time&&e<=t[l].time&&({lo:a,hi:l}=he(t,"time",e)),({time:n,pos:o}=t[a]),({time:s,pos:r}=t[l]));const h=s-n;return h?o+(r-o)*(e-n)/h:o}var Vr=Object.freeze({__proto__:null,CategoryScale:class extends Cs{static id="category";static defaults={ticks:{callback:pr}};constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){const e=this._addedLabels;if(e.length){const t=this.getLabels();for(const{index:i,label:n}of e)t[i]===n&&t.splice(i,1);this._addedLabels=[]}super.init(t)}parse(t,e){if(mt(t))return null;const i=this.getLabels();return((t,e)=>null===t?null:re(Math.round(t),0,e))(e=isFinite(e)&&i[e]===t?e:function(t,e,i,n){const s=t.indexOf(e);return-1===s?((t,e,i,n)=>("string"==typeof e?(i=t.push(e)-1,n.unshift({index:i,label:e})):isNaN(e)&&(i=null),i))(t,e,i,n):s!==t.lastIndexOf(e)?i:s}(i,t,_t(e,t),this._addedLabels),i.length-1)}determineDataLimits(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let{min:i,max:n}=this.getMinMax(!0);"ticks"===this.options.bounds&&(t||(i=0),e||(n=this.getLabels().length-1)),this.min=i,this.max=n}buildTicks(){const t=this.min,e=this.max,i=this.options.offset,n=[];let s=this.getLabels();s=0===t&&e===s.length-1?s:s.slice(t,e+1),this._valueRange=Math.max(s.length-(i?0:1),1),this._startValue=this.min-(i?.5:0);for(let i=t;i<=e;i++)n.push({value:i});return n}getLabelForValue(t){return pr.call(this,t)}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return"number"!=typeof t&&(t=this.parse(t)),null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}},LinearScale:xr,LogarithmicScale:Ar,RadialLinearScale:Br,TimeScale:Fr,TimeSeriesScale:class extends Fr{static id="timeseries";static defaults=Fr.defaults;constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this._getTimestampsForTable(),e=this._table=this.buildLookupTable(t);this._minPos=jr(e,this.min),this._tableRange=jr(e,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){const{min:e,max:i}=this,n=[],s=[];let o,r,a,l,h;for(o=0,r=t.length;o<r;++o)l=t[o],l>=e&&l<=i&&n.push(l);if(n.length<2)return[{time:e,pos:0},{time:i,pos:1}];for(o=0,r=n.length;o<r;++o)h=n[o+1],a=n[o-1],l=n[o],Math.round((h+a)/2)!==l&&s.push({time:l,pos:o/(r-1)});return s}_generate(){const t=this.min,e=this.max;let i=super.getDataTimestamps();return i.includes(t)&&i.length||i.splice(0,0,t),i.includes(e)&&1!==i.length||i.push(e),i.sort(((t,e)=>t-e))}_getTimestampsForTable(){let t=this._cache.all||[];if(t.length)return t;const e=this.getDataTimestamps(),i=this.getLabelTimestamps();return t=e.length&&i.length?this.normalize(e.concat(i)):e.length?e:i,t=this._cache.all=t,t}getDecimalForValue(t){return(jr(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return jr(this._table,i*this._tableRange+this._minPos,!0)}}});const Nr=[Pn,bo,fr,Vr];Qs.register(...Nr);const Hr=Qs,Yr={modes:{point:(t,e)=>Xr(t,e,{intersect:!0}),nearest:(t,e,i)=>function(t,e,i){let n=Number.POSITIVE_INFINITY;return Xr(t,e,i).reduce(((t,s)=>{const o=s.getCenterPoint(),r=function(t,e,i){return"x"===i?{x:t.x,y:e.y}:"y"===i?{x:e.x,y:t.y}:e}(e,o,i.axis),a=ie(e,r);return a<n?(t=[s],n=a):a===n&&t.push(s),t}),[]).sort(((t,e)=>t._index-e._index)).slice(0,1)}(t,e,i),x:(t,e,i)=>Xr(t,e,{intersect:i.intersect,axis:"x"}),y:(t,e,i)=>Xr(t,e,{intersect:i.intersect,axis:"y"})}};function $r(t,e,i){return(Yr.modes[i.mode]||Yr.modes.nearest)(t,e,i)}function Xr(t,e,i){return t.visibleElements.filter((t=>i.intersect?t.inRange(e.x,e.y):function(t,e,i){return"x"!==i&&"y"!==i?t.inRange(e.x,e.y,"x",!0)||t.inRange(e.x,e.y,"y",!0):t.inRange(e.x,e.y,i,!0)}(t,e,i.axis)))}const Ur=(t,e)=>e>t||t.length>e.length&&t.slice(0,e.length)===e,Zr=.001,qr=(t,e,i)=>Math.min(i,Math.max(e,t));function Gr(t,e,i){for(const n of Object.keys(t))t[n]=qr(t[n],e,i);return t}function Kr(t,{x:e,y:i,x2:n,y2:s},o,r){const a=r/2,l=t.x>=e-a-Zr&&t.x<=n+a+Zr,h=t.y>=i-a-Zr&&t.y<=s+a+Zr;return"x"===o?l:("y"===o||l)&&h}function Jr(t,e){const{centerX:i,centerY:n}=t.getProps(["centerX","centerY"],e);return{x:i,y:n}}const Qr=t=>"string"==typeof t&&t.endsWith("%"),ta=t=>parseFloat(t)/100,ea=t=>qr(ta(t),0,1),ia=(t,e)=>({x:t,y:e,x2:t,y2:e,width:0,height:0}),na={box:t=>ia(t.centerX,t.centerY),ellipse:t=>({centerX:t.centerX,centerY:t.centerX,radius:0,width:0,height:0}),label:t=>ia(t.centerX,t.centerY),line:t=>ia(t.x,t.y),point:t=>({centerX:t.centerX,centerY:t.centerY,radius:0,width:0,height:0}),polygon:t=>ia(t.centerX,t.centerY)};function sa(t,e){return"start"===e?0:"end"===e?t:Qr(e)?ea(e)*t:t/2}function oa(t,e,i=!0){return"number"==typeof e?e:Qr(e)?(i?ea(e):ta(e))*t:t}function ra(t,e="center"){return bt(t)?{x:_t(t.x,e),y:_t(t.y,e)}:{x:t=_t(t,e),y:t}}function aa(t){return t&&(Rt(t.xValue)||Rt(t.yValue))}function la(t,e,i){const n=i.init;if(n)return!0===n?ca(e,i):function(t,e,i){const n=wt(i.init,[{chart:t,properties:e,options:i}]);return!0===n?ca(e,i):bt(n)?n:void 0}(t,e,i)}function ha(t,e,i){let n=!1;return e.forEach((e=>{It(t[e])?(n=!0,i[e]=t[e]):Rt(i[e])&&delete i[e]})),n}function ca(t,e){const i=e.type||"line";return na[i](t)}const da=new Map,ua=t=>t.reduce((function(t,e){return t+e.string}),"");function fa(t){if(t&&"object"==typeof t){const e=t.toString();return"[object HTMLImageElement]"===e||"[object HTMLCanvasElement]"===e}}function pa(t,{x:e,y:i},n){n&&(t.translate(e,i),t.rotate(Jt(n)),t.translate(-e,-i))}function ga(t,e){if(e&&e.borderWidth)return t.lineCap=e.borderCapStyle,t.setLineDash(e.borderDash),t.lineDashOffset=e.borderDashOffset,t.lineJoin=e.borderJoinStyle,t.lineWidth=e.borderWidth,t.strokeStyle=e.borderColor,!0}function ma(t,e){t.shadowColor=e.backgroundShadowColor,t.shadowBlur=e.shadowBlur,t.shadowOffsetX=e.shadowOffsetX,t.shadowOffsetY=e.shadowOffsetY}function xa(t,e){const i=e.content;if(fa(i))return{width:oa(i.width,e.width),height:oa(i.height,e.height)};const n=e.font,s=xt(n)?n.map((t=>li(t))):[li(n)],o=e.textStrokeWidth,r=xt(i)?i:[i],a=r.join()+ua(s)+o+(t._measureText?"-spriting":"");return da.has(a)||da.set(a,function(t,e,i,n){t.save();const s=e.length;let o=0,r=n;for(let a=0;a<s;a++){const s=i[Math.min(a,i.length-1)];t.font=s.string;const l=e[a];o=Math.max(o,t.measureText(l).width+n),r+=s.lineHeight}return t.restore(),{width:o,height:r}}(t,r,s,o)),da.get(a)}function ba(t,e,i){const{x:n,y:s,width:o,height:r}=e;t.save(),ma(t,i);const a=ga(t,i);t.fillStyle=i.backgroundColor,t.beginPath(),Qe(t,{x:n,y:s,w:o,h:r,radius:Gr(ri(i.borderRadius),0,Math.min(o,r)/2)}),t.closePath(),t.fill(),a&&(t.shadowColor=i.borderShadowColor,t.stroke()),t.restore()}const ya={xScaleID:{min:"xMin",max:"xMax",start:"left",end:"right",startProp:"x",endProp:"x2"},yScaleID:{min:"yMin",max:"yMax",start:"bottom",end:"top",startProp:"y",endProp:"y2"}};function va(t,e,i){return yt(e="number"==typeof e?e:t.parse(e))?t.getPixelForValue(e):i}function _a(t,e,i){const n=e[i];if(n||"scaleID"===i)return n;const s=i.charAt(0),o=Object.values(t).filter((t=>t.axis&&t.axis===s));return o.length?o[0].id:s}function Aa(t,e){if(t){const i=t.options.reverse;return{start:va(t,e.min,i?e.end:e.start),end:va(t,e.max,i?e.start:e.end)}}}function wa(t,e){const{chartArea:i,scales:n}=t,s=n[_a(n,e,"xScaleID")],o=n[_a(n,e,"yScaleID")];let r=i.width/2,a=i.height/2;return s&&(r=va(s,e.xValue,s.left+s.width/2)),o&&(a=va(o,e.yValue,o.top+o.height/2)),{x:r,y:a}}function Ca(t,e){const i=t.scales,n=i[_a(i,e,"xScaleID")],s=i[_a(i,e,"yScaleID")];if(!n&&!s)return{};let{left:o,right:r}=n||t.chartArea,{top:a,bottom:l}=s||t.chartArea;const h=Ea(n,{min:e.xMin,max:e.xMax,start:o,end:r});o=h.start,r=h.end;const c=Ea(s,{min:e.yMin,max:e.yMax,start:l,end:a});return a=c.start,l=c.end,{x:o,y:a,x2:r,y2:l,width:r-o,height:l-a,centerX:o+(r-o)/2,centerY:a+(l-a)/2}}function Ma(t,e){if(!aa(e)){const i=Ca(t,e);let n=e.radius;n&&!isNaN(n)||(n=Math.min(i.width,i.height)/2,e.radius=n);const s=2*n,o=i.centerX+e.xAdjust,r=i.centerY+e.yAdjust;return{x:o-n,y:r-n,x2:o+n,y2:r+n,centerX:o,centerY:r,width:s,height:s,radius:n}}return function(t,e){const i=wa(t,e),n=2*e.radius;return{x:i.x-e.radius+e.xAdjust,y:i.y-e.radius+e.yAdjust,x2:i.x+e.radius+e.xAdjust,y2:i.y+e.radius+e.yAdjust,centerX:i.x+e.xAdjust,centerY:i.y+e.yAdjust,radius:e.radius,width:n,height:n}}(t,e)}function ka(t,e){const i=Ca(t,e);return i.initProperties=la(t,i,e),i.elements=[{type:"label",optionScope:"label",properties:Da(t,i,e),initProperties:i.initProperties}],i}function Ea(t,e){const i=Aa(t,e)||e;return{start:Math.min(i.start,i.end),end:Math.max(i.start,i.end)}}function Sa(t,e){const{start:i,end:n,borderWidth:s}=t,{position:o,padding:{start:r,end:a},adjust:l}=e;return i+s/2+l+sa(n-s-i-r-a-e.size,o)}function Da(t,e,i){const n=i.label;n.backgroundColor="transparent",n.callout.display=!1;const s=ra(n.position),o=ai(n.padding),r=xa(t.ctx,n),a=function({properties:t,options:e},i,n,s){const{x:o,x2:r,width:a}=t;return Sa({start:o,end:r,size:a,borderWidth:e.borderWidth},{position:n.x,padding:{start:s.left,end:s.right},adjust:e.label.xAdjust,size:i.width})}({properties:e,options:i},r,s,o),l=function({properties:t,options:e},i,n,s){const{y:o,y2:r,height:a}=t;return Sa({start:o,end:r,size:a,borderWidth:e.borderWidth},{position:n.y,padding:{start:s.top,end:s.bottom},adjust:e.label.yAdjust,size:i.height})}({properties:e,options:i},r,s,o),h=r.width+o.width,c=r.height+o.height;return{x:a,y:l,x2:a+h,y2:l+c,width:h,height:c,centerX:a+h/2,centerY:l+c/2,rotation:n.rotation}}function Pa(t,e,i){const n=Math.cos(i),s=Math.sin(i),o=e.x,r=e.y;return{x:o+n*(t.x-o)-s*(t.y-r),y:r+s*(t.x-o)+n*(t.y-r)}}const Ba=["enter","leave"],Ta=Ba.concat("click");function Oa({state:t,event:e},i,n,s){let o;for(const r of n)s.indexOf(r)<0&&(o=La(r.options[i]||t.listeners[i],r,e)||o);return o}function La(t,e,i){return!0===wt(t,[e.$context,i])}const Ra=["afterDraw","beforeDraw"];function Ia(t,e,i){if(t.hooked)return wt(e.options[i]||t.hooks[i],[e.$context])}function za(t,e,i,n){if(yt(e[i])&&!function(t,e,i){return Rt(t[e])||Rt(t[i])}(t.options,i,n)){const n=t[i]!==e[i];return t[i]=e[i],n}}function Wa(t,e){for(const i of["scaleID","xScaleID","yScaleID"]){const n=_a(e,t,i);n&&!e[n]&&Fa(t,i)&&console.warn(`No scale found with id '${n}' for annotation '${t.id}'`)}}function Fa(t,e){if("scaleID"===e)return!0;const i=e.charAt(0);for(const e of["Min","Max","Value"])if(Rt(t[i+e]))return!0;return!1}function ja(t,e,i,n){for(const s of i){const i=t[s];if(Rt(i)){const t=e.parse(i);n.min=Math.min(n.min,t),n.max=Math.max(n.max,t)}}}class Va extends gs{inRange(t,e,i,n){const{x:s,y:o}=Pa({x:t,y:e},this.getCenterPoint(n),Jt(-this.options.rotation));return Kr({x:s,y:o},this.getProps(["x","y","x2","y2"],n),i,this.options.borderWidth)}getCenterPoint(t){return Jr(this,t)}draw(t){t.save(),pa(t,this.getCenterPoint(),this.options.rotation),ba(t,this,this.options),t.restore()}get label(){return this.elements&&this.elements[0]}resolveElementProperties(t,e){return ka(t,e)}}Va.id="boxAnnotation",Va.defaults={adjustScaleRange:!0,backgroundShadowColor:"transparent",borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderRadius:0,borderShadowColor:"transparent",borderWidth:1,display:!0,init:void 0,label:{backgroundColor:"transparent",borderWidth:0,callout:{display:!1},color:"black",content:null,display:!1,drawTime:void 0,font:{family:void 0,lineHeight:void 0,size:void 0,style:void 0,weight:"bold"},height:void 0,opacity:void 0,padding:6,position:"center",rotation:void 0,textAlign:"start",textStrokeColor:void 0,textStrokeWidth:0,width:void 0,xAdjust:0,yAdjust:0,z:void 0},rotation:0,shadowBlur:0,shadowOffsetX:0,shadowOffsetY:0,xMax:void 0,xMin:void 0,xScaleID:void 0,yMax:void 0,yMin:void 0,yScaleID:void 0,z:0},Va.defaultRoutes={borderColor:"color",backgroundColor:"color"},Va.descriptors={label:{_fallback:!0}};const Na=["left","bottom","top","right"];class Ha extends gs{inRange(t,e,i,n){const{x:s,y:o}=Pa({x:t,y:e},this.getCenterPoint(n),Jt(-this.rotation));return Kr({x:s,y:o},this.getProps(["x","y","x2","y2"],n),i,this.options.borderWidth)}getCenterPoint(t){return Jr(this,t)}draw(t){const e=this.options,i=!Rt(this._visible)||this._visible;e.display&&e.content&&i&&(t.save(),pa(t,this.getCenterPoint(),this.rotation),function(t,e){const{pointX:i,pointY:n,options:s}=e,o=s.callout,r=o&&o.display&&function(t,e){const i=e.position;return Na.includes(i)?i:function(t,e){const{x:i,y:n,x2:s,y2:o,width:r,height:a,pointX:l,pointY:h,centerX:c,centerY:d,rotation:u}=t,f={x:c,y:d},p=e.start,g=oa(r,p),m=[i,i+g,i+g,s],x=[n+oa(a,p),o,n,o],b=[];for(let t=0;t<4;t++){const e=Pa({x:m[t],y:x[t]},f,Jt(u));b.push({position:Na[t],distance:ie(e,{x:l,y:h})})}return b.sort(((t,e)=>t.distance-e.distance))[0].position}(t,e)}(e,o);if(!r||function(t,e,i){const{pointX:n,pointY:s}=t,o=e.margin;let r=n,a=s;return"left"===i?r+=o:"right"===i?r-=o:"top"===i?a+=o:"bottom"===i&&(a-=o),t.inRange(r,a)}(e,o,r))return;t.save(),t.beginPath();if(!ga(t,o))return t.restore();const{separatorStart:a,separatorEnd:l}=function(t,e){const{x:i,y:n,x2:s,y2:o}=t,r=function(t,e){const{width:i,height:n,options:s}=t,o=s.callout.margin+s.borderWidth/2;return"right"===e?i+o:"bottom"===e?n+o:-o}(t,e);let a,l;return"left"===e||"right"===e?(a={x:i+r,y:n},l={x:a.x,y:o}):(a={x:i,y:n+r},l={x:s,y:a.y}),{separatorStart:a,separatorEnd:l}}(e,r),{sideStart:h,sideEnd:c}=function(t,e,i){const{y:n,width:s,height:o,options:r}=t,a=r.callout.start,l=function(t,e){const i=e.side;return"left"===t||"top"===t?-i:i}(e,r.callout);let h,c;return"left"===e||"right"===e?(h={x:i.x,y:n+oa(o,a)},c={x:h.x+l,y:h.y}):(h={x:i.x+oa(s,a),y:i.y},c={x:h.x,y:h.y+l}),{sideStart:h,sideEnd:c}}(e,r,a);(o.margin>0||0===s.borderWidth)&&(t.moveTo(a.x,a.y),t.lineTo(l.x,l.y)),t.moveTo(h.x,h.y),t.lineTo(c.x,c.y);const d=Pa({x:i,y:n},e.getCenterPoint(),Jt(-e.rotation));t.lineTo(d.x,d.y),t.stroke(),t.restore()}(t,this),ba(t,this,e),function(t,e,i){const n=i.content;if(fa(n))return t.save(),t.globalAlpha=function(t,e){const i=Gt(t)?t:e;return Gt(i)?qr(i,0,1):1}(i.opacity,n.style.opacity),t.drawImage(n,e.x,e.y,e.width,e.height),void t.restore();const s=xt(n)?n:[n],o=i.font,r=xt(o)?o.map((t=>li(t))):[li(o)],a=i.color,l=xt(a)?a:[a],h=function(t,e){const{x:i,width:n}=t,s=e.textAlign;return"center"===s?i+n/2:"end"===s||"right"===s?i+n:i}(e,i),c=e.y+i.textStrokeWidth/2;t.save(),t.textBaseline="middle",t.textAlign=i.textAlign,function(t,e){if(e.textStrokeWidth>0)return t.lineJoin="round",t.miterLimit=2,t.lineWidth=e.textStrokeWidth,t.strokeStyle=e.textStrokeColor,!0}(t,i)&&function(t,{x:e,y:i},n,s){t.beginPath();let o=0;n.forEach((function(n,r){const a=s[Math.min(r,s.length-1)],l=a.lineHeight;t.font=a.string,t.strokeText(n,e,i+l/2+o),o+=l})),t.stroke()}(t,{x:h,y:c},s,r),function(t,{x:e,y:i},n,{fonts:s,colors:o}){let r=0;n.forEach((function(n,a){const l=o[Math.min(a,o.length-1)],h=s[Math.min(a,s.length-1)],c=h.lineHeight;t.beginPath(),t.font=h.string,t.fillStyle=l,t.fillText(n,e,i+c/2+r),r+=c,t.fill()}))}(t,{x:h,y:c},s,{fonts:r,colors:l}),t.restore()}(t,function({x:t,y:e,width:i,height:n,options:s}){const o=s.borderWidth/2,r=ai(s.padding);return{x:t+r.left+o,y:e+r.top+o,width:i-r.left-r.right-s.borderWidth,height:n-r.top-r.bottom-s.borderWidth}}(this),e),t.restore())}resolveElementProperties(t,e){let i;if(aa(e))i=wa(t,e);else{const{centerX:n,centerY:s}=Ca(t,e);i={x:n,y:s}}const n=ai(e.padding),s=function(t,e,i,n){const s=e.width+n.width+i.borderWidth,o=e.height+n.height+i.borderWidth,r=ra(i.position,"center"),a=Ya(t.x,s,i.xAdjust,r.x),l=Ya(t.y,o,i.yAdjust,r.y);return{x:a,y:l,x2:a+s,y2:l+o,width:s,height:o,centerX:a+s/2,centerY:l+o/2}}(i,xa(t.ctx,e),e,n);return{initProperties:la(t,s,e),pointX:i.x,pointY:i.y,...s,rotation:e.rotation}}}function Ya(t,e,i=0,n){return t-sa(e,n)+i}Ha.id="labelAnnotation",Ha.defaults={adjustScaleRange:!0,backgroundColor:"transparent",backgroundShadowColor:"transparent",borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderRadius:0,borderShadowColor:"transparent",borderWidth:0,callout:{borderCapStyle:"butt",borderColor:void 0,borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:1,display:!1,margin:5,position:"auto",side:5,start:"50%"},color:"black",content:null,display:!0,font:{family:void 0,lineHeight:void 0,size:void 0,style:void 0,weight:void 0},height:void 0,init:void 0,opacity:void 0,padding:6,position:"center",rotation:0,shadowBlur:0,shadowOffsetX:0,shadowOffsetY:0,textAlign:"center",textStrokeColor:void 0,textStrokeWidth:0,width:void 0,xAdjust:0,xMax:void 0,xMin:void 0,xScaleID:void 0,xValue:void 0,yAdjust:0,yMax:void 0,yMin:void 0,yScaleID:void 0,yValue:void 0,z:0},Ha.defaultRoutes={borderColor:"color"};const $a=(t,e,i)=>({x:t.x+i*(e.x-t.x),y:t.y+i*(e.y-t.y)}),Xa=(t,e,i)=>$a(e,i,Math.abs((t-e.y)/(i.y-e.y))).x,Ua=(t,e,i)=>$a(e,i,Math.abs((t-e.x)/(i.x-e.x))).y,Za=t=>t*t,qa=(t,e,i,n)=>(1-n)*(1-n)*t+2*(1-n)*n*e+n*n*i,Ga=(t,e,i,n)=>({x:qa(t.x,e.x,i.x,n),y:qa(t.y,e.y,i.y,n)}),Ka=(t,e,i,n)=>2*(1-n)*(e-t)+2*n*(i-e),Ja=(t,e,i,n)=>-Math.atan2(Ka(t.x,e.x,i.x,n),Ka(t.y,e.y,i.y,n))+.5*Wt;class Qa extends gs{inRange(t,e,i,n){const s=this.options.borderWidth/2;if("x"!==i&&"y"!==i){const i={mouseX:t,mouseY:e},{path:o,ctx:r}=this;if(o){ga(r,this.options);const{chart:s}=this.$context,a=t*s.currentDevicePixelRatio,l=e*s.currentDevicePixelRatio,h=r.isPointInStroke(o,a,l)||il(this,i,n);return r.restore(),h}return function(t,{mouseX:e,mouseY:i},n=.001,s){const{x:o,y:r,x2:a,y2:l}=t.getProps(["x","y","x2","y2"],s),h=a-o,c=l-r,d=Za(h)+Za(c),u=0===d?-1:((e-o)*h+(i-r)*c)/d;let f,p;return u<0?(f=o,p=r):u>1?(f=a,p=l):(f=o+u*h,p=r+u*c),Za(e-f)+Za(i-p)<=n}(this,i,Za(s),n)||il(this,i,n)}return function(t,{mouseX:e,mouseY:i},n,{hBorderWidth:s,useFinalPosition:o}){const r=((t,e,{x:i,y:n,x2:s,y2:o},r)=>"y"===r?{start:Math.min(n,o),end:Math.max(n,o),value:e}:{start:Math.min(i,s),end:Math.max(i,s),value:t})(e,i,t.getProps(["x","y","x2","y2"],o),n);return r.value>=r.start-s&&r.value<=r.end+s||il(t,{mouseX:e,mouseY:i},o,n)}(this,{mouseX:t,mouseY:e},i,{hBorderWidth:s,useFinalPosition:n})}getCenterPoint(t){return Jr(this,t)}draw(t){const{x:e,y:i,x2:n,y2:s,cp:o,options:r}=this;if(t.save(),!ga(t,r))return t.restore();ma(t,r);const a=Math.sqrt(Math.pow(n-e,2)+Math.pow(s-i,2));if(r.curve&&o)return function(t,e,i,n){const{x:s,y:o,x2:r,y2:a,options:l}=e,{startOpts:h,endOpts:c,startAdjust:d,endAdjust:u}=ol(e),f={x:s,y:o},p={x:r,y:a},g=Ja(f,i,p,0),m=Ja(f,i,p,1)-Wt,x=Ga(f,i,p,d/n),b=Ga(f,i,p,1-u/n),y=new Path2D;t.beginPath(),y.moveTo(x.x,x.y),y.quadraticCurveTo(i.x,i.y,b.x,b.y),t.shadowColor=l.borderShadowColor,t.stroke(y),e.path=y,e.ctx=t,ll(t,x,{angle:g,adjust:d},h),ll(t,b,{angle:m,adjust:u},c)}(t,this,o,a),t.restore();const{startOpts:l,endOpts:h,startAdjust:c,endAdjust:d}=ol(this),u=Math.atan2(s-i,n-e);t.translate(e,i),t.rotate(u),t.beginPath(),t.moveTo(0+c,0),t.lineTo(a-d,0),t.shadowColor=r.borderShadowColor,t.stroke(),al(t,0,c,l),al(t,a,-d,h),t.restore()}get label(){return this.elements&&this.elements[0]}resolveElementProperties(t,e){const i=function(t,e){const{scales:i,chartArea:n}=t,s=i[e.scaleID],o={x:n.left,y:n.top,x2:n.right,y2:n.bottom};return s?function(t,e,i){const n=va(t,i.value,NaN),s=va(t,i.endValue,n);t.isHorizontal()?(e.x=n,e.x2=s):(e.y=n,e.y2=s)}(s,o,e):function(t,e,i){for(const n of Object.keys(ya)){const s=t[_a(t,i,n)];if(s){const{min:t,max:o,start:r,end:a,startProp:l,endProp:h}=ya[n],c=Aa(s,{min:i[t],max:i[o],start:s[r],end:s[a]});e[l]=c.start,e[h]=c.end}}}(i,o,e),o}(t,e),{x:n,y:s,x2:o,y2:r}=i,a=function({x:t,y:e,x2:i,y2:n},{top:s,right:o,bottom:r,left:a}){return!(t<a&&i<a||t>o&&i>o||e<s&&n<s||e>r&&n>r)}(i,t.chartArea),l=a?function(t,e,i){const{x:n,y:s}=el(t,e,i),{x:o,y:r}=el(e,t,i);return{x:n,y:s,x2:o,y2:r,width:Math.abs(o-n),height:Math.abs(r-s)}}({x:n,y:s},{x:o,y:r},t.chartArea):{x:n,y:s,x2:o,y2:r,width:Math.abs(o-n),height:Math.abs(r-s)};if(l.centerX=(o+n)/2,l.centerY=(r+s)/2,l.initProperties=la(t,l,e),e.curve){const t={x:l.x,y:l.y},i={x:l.x2,y:l.y2};l.cp=function(t,e,i){const{x:n,y:s,x2:o,y2:r,centerX:a,centerY:l}=t,h=Math.atan2(r-s,o-n),c=ra(e.controlPoint,0);return Pa({x:a+oa(i,c.x,!1),y:l+oa(i,c.y,!1)},{x:a,y:l},h)}(l,e,ie(t,i))}const h=function(t,e,i){const n=i.borderWidth,s=ai(i.padding),o=xa(t.ctx,i);return function(t,e,i,n){const{width:s,height:o,padding:r}=i,{xAdjust:a,yAdjust:l}=e,h={x:t.x,y:t.y},c={x:t.x2,y:t.y2},d="auto"===e.rotation?function(t){const{x:e,y:i,x2:n,y2:s}=t,o=Math.atan2(s-i,n-e);return o>Wt/2?o-Wt:o<Wt/-2?o+Wt:o}(t):Jt(e.rotation),u=function(t,e,i){const n=Math.cos(i),s=Math.sin(i);return{w:Math.abs(t*n)+Math.abs(e*s),h:Math.abs(t*s)+Math.abs(e*n)}}(s,o,d),f=function(t,e,i,n){let s;const o=function(t,e){const{x:i,x2:n,y:s,y2:o}=t,r=Math.min(s,o)-e.top,a=Math.min(i,n)-e.left,l=e.bottom-Math.max(s,o),h=e.right-Math.max(i,n);return{x:Math.min(a,h),y:Math.min(r,l),dx:a<=h?1:-1,dy:r<=l?1:-1}}(t,n);return s="start"===e.position?nl({w:t.x2-t.x,h:t.y2-t.y},i,0,o):"end"===e.position?1-nl({w:t.x-t.x2,h:t.y-t.y2},i,0,o):sa(1,e.position),s}(t,e,{labelSize:u,padding:r},n),p=t.cp?Ga(h,t.cp,c,f):$a(h,c,f),g={size:u.w,min:n.left,max:n.right,padding:r.left},m={size:u.h,min:n.top,max:n.bottom,padding:r.top},x=sl(p.x,g)+a,b=sl(p.y,m)+l;return{x:x-s/2,y:b-o/2,x2:x+s/2,y2:b+o/2,centerX:x,centerY:b,pointX:p.x,pointY:p.y,width:s,height:o,rotation:Qt(d)}}(e,i,{width:o.width+s.width+n,height:o.height+s.height+n,padding:s},t.chartArea)}(t,l,e.label);return h._visible=a,l.elements=[{type:"label",optionScope:"label",properties:h,initProperties:l.initProperties}],l}}Qa.id="lineAnnotation";const tl={backgroundColor:void 0,backgroundShadowColor:void 0,borderColor:void 0,borderDash:void 0,borderDashOffset:void 0,borderShadowColor:void 0,borderWidth:void 0,display:void 0,fill:void 0,length:void 0,shadowBlur:void 0,shadowOffsetX:void 0,shadowOffsetY:void 0,width:void 0};function el({x:t,y:e},i,{top:n,right:s,bottom:o,left:r}){return t<r&&(e=Ua(r,{x:t,y:e},i),t=r),t>s&&(e=Ua(s,{x:t,y:e},i),t=s),e<n&&(t=Xa(n,{x:t,y:e},i),e=n),e>o&&(t=Xa(o,{x:t,y:e},i),e=o),{x:t,y:e}}function il(t,{mouseX:e,mouseY:i},n,s){const o=t.label;return o.options.display&&o.inRange(e,i,s,n)}function nl(t,e,i,n){const{labelSize:s,padding:o}=e,r=t.w*n.dx,a=t.h*n.dy,l=r>0&&(s.w/2+o.left-n.x)/r,h=a>0&&(s.h/2+o.top-n.y)/a;return qr(Math.max(l,h),0,.25)}function sl(t,e){const{size:i,min:n,max:s,padding:o}=e,r=i/2;return i>s-n?(s+n)/2:(n>=t-o-r&&(t=n+o+r),s<=t+o+r&&(t=s-o-r),t)}function ol(t){const e=t.options,i=e.arrowHeads&&e.arrowHeads.start,n=e.arrowHeads&&e.arrowHeads.end;return{startOpts:i,endOpts:n,startAdjust:rl(t,i),endAdjust:rl(t,n)}}function rl(t,e){if(!e||!e.display)return 0;const{length:i,width:n}=e,s=t.options.borderWidth/2,o={x:i,y:n+s},r={x:0,y:s};return Math.abs(Xa(0,o,r))}function al(t,e,i,n){if(!n||!n.display)return;const{length:s,width:o,fill:r,backgroundColor:a,borderColor:l}=n,h=Math.abs(e-s)+i;t.beginPath(),ma(t,n),ga(t,n),t.moveTo(h,-o),t.lineTo(e+i,0),t.lineTo(h,o),!0===r?(t.fillStyle=a||l,t.closePath(),t.fill(),t.shadowColor="transparent"):t.shadowColor=n.borderShadowColor,t.stroke()}function ll(t,{x:e,y:i},{angle:n,adjust:s},o){o&&o.display&&(t.save(),t.translate(e,i),t.rotate(n),al(t,0,-s,o),t.restore())}Qa.defaults={adjustScaleRange:!0,arrowHeads:{display:!1,end:Object.assign({},tl),fill:!1,length:12,start:Object.assign({},tl),width:6},borderDash:[],borderDashOffset:0,borderShadowColor:"transparent",borderWidth:2,curve:!1,controlPoint:{y:"-50%"},display:!0,endValue:void 0,init:void 0,label:{backgroundColor:"rgba(0,0,0,0.8)",backgroundShadowColor:"transparent",borderCapStyle:"butt",borderColor:"black",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderRadius:6,borderShadowColor:"transparent",borderWidth:0,callout:Object.assign({},Ha.defaults.callout),color:"#fff",content:null,display:!1,drawTime:void 0,font:{family:void 0,lineHeight:void 0,size:void 0,style:void 0,weight:"bold"},height:void 0,opacity:void 0,padding:6,position:"center",rotation:0,shadowBlur:0,shadowOffsetX:0,shadowOffsetY:0,textAlign:"center",textStrokeColor:void 0,textStrokeWidth:0,width:void 0,xAdjust:0,yAdjust:0,z:void 0},scaleID:void 0,shadowBlur:0,shadowOffsetX:0,shadowOffsetY:0,value:void 0,xMax:void 0,xMin:void 0,xScaleID:void 0,yMax:void 0,yMin:void 0,yScaleID:void 0,z:0},Qa.descriptors={arrowHeads:{start:{_fallback:!0},end:{_fallback:!0},_fallback:!0}},Qa.defaultRoutes={borderColor:"color"};class hl extends gs{inRange(t,e,i,n){const s=this.options.rotation,o=this.options.borderWidth;if("x"!==i&&"y"!==i)return function(t,e,i,n){const{width:s,height:o,centerX:r,centerY:a}=e,l=s/2,h=o/2;if(l<=0||h<=0)return!1;const c=Jt(i||0),d=n/2||0,u=Math.cos(c),f=Math.sin(c),p=Math.pow(u*(t.x-r)+f*(t.y-a),2),g=Math.pow(f*(t.x-r)-u*(t.y-a),2);return p/Math.pow(l+d,2)+g/Math.pow(h+d,2)<=1.0001}({x:t,y:e},this.getProps(["width","height","centerX","centerY"],n),s,o);const{x:r,y:a,x2:l,y2:h}=this.getProps(["x","y","x2","y2"],n),c=o/2,d="y"===i?{start:a,end:h}:{start:r,end:l},u=Pa({x:t,y:e},this.getCenterPoint(n),Jt(-s));return u[i]>=d.start-c-Zr&&u[i]<=d.end+c+Zr}getCenterPoint(t){return Jr(this,t)}draw(t){const{width:e,height:i,centerX:n,centerY:s,options:o}=this;t.save(),pa(t,this.getCenterPoint(),o.rotation),ma(t,this.options),t.beginPath(),t.fillStyle=o.backgroundColor;const r=ga(t,o);t.ellipse(n,s,i/2,e/2,Wt/2,0,2*Wt),t.fill(),r&&(t.shadowColor=o.borderShadowColor,t.stroke()),t.restore()}get label(){return this.elements&&this.elements[0]}resolveElementProperties(t,e){return ka(t,e)}}hl.id="ellipseAnnotation",hl.defaults={adjustScaleRange:!0,backgroundShadowColor:"transparent",borderDash:[],borderDashOffset:0,borderShadowColor:"transparent",borderWidth:1,display:!0,init:void 0,label:Object.assign({},Va.defaults.label),rotation:0,shadowBlur:0,shadowOffsetX:0,shadowOffsetY:0,xMax:void 0,xMin:void 0,xScaleID:void 0,yMax:void 0,yMin:void 0,yScaleID:void 0,z:0},hl.defaultRoutes={borderColor:"color",backgroundColor:"color"},hl.descriptors={label:{_fallback:!0}};class cl extends gs{inRange(t,e,i,n){const{x:s,y:o,x2:r,y2:a,width:l}=this.getProps(["x","y","x2","y2","width"],n),h=this.options.borderWidth;if("x"!==i&&"y"!==i)return function(t,e,i,n){if(!t||!e||i<=0)return!1;const s=n/2;return Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2)<=Math.pow(i+s,2)}({x:t,y:e},this.getCenterPoint(n),l/2,h);const c=h/2,d="y"===i?{start:o,end:a,value:e}:{start:s,end:r,value:t};return d.value>=d.start-c&&d.value<=d.end+c}getCenterPoint(t){return Jr(this,t)}draw(t){const e=this.options,i=e.borderWidth;if(e.radius<.1)return;t.save(),t.fillStyle=e.backgroundColor,ma(t,e);const n=ga(t,e);(function(t,e,i,n){const{radius:s,options:o}=e,r=o.pointStyle,a=o.rotation;let l=(a||0)*Nt;if(fa(r))return t.save(),t.translate(i,n),t.rotate(l),t.drawImage(r,-r.width/2,-r.height/2,r.width,r.height),void t.restore();(t=>isNaN(t)||t<=0)(s)||function(t,{x:e,y:i,radius:n,rotation:s,style:o,rad:r}){let a,l,h,c;switch(t.beginPath(),o){default:t.arc(e,i,n,0,Ft),t.closePath();break;case"triangle":t.moveTo(e+Math.sin(r)*n,i-Math.cos(r)*n),r+=$t,t.lineTo(e+Math.sin(r)*n,i-Math.cos(r)*n),r+=$t,t.lineTo(e+Math.sin(r)*n,i-Math.cos(r)*n),t.closePath();break;case"rectRounded":c=.516*n,h=n-c,a=Math.cos(r+Yt)*h,l=Math.sin(r+Yt)*h,t.arc(e-a,i-l,c,r-Wt,r-Ht),t.arc(e+l,i-a,c,r-Ht,r),t.arc(e+a,i+l,c,r,r+Ht),t.arc(e-l,i+a,c,r+Ht,r+Wt),t.closePath();break;case"rect":if(!s){h=Math.SQRT1_2*n,t.rect(e-h,i-h,2*h,2*h);break}r+=Yt;case"rectRot":a=Math.cos(r)*n,l=Math.sin(r)*n,t.moveTo(e-a,i-l),t.lineTo(e+l,i-a),t.lineTo(e+a,i+l),t.lineTo(e-l,i+a),t.closePath();break;case"crossRot":r+=Yt;case"cross":a=Math.cos(r)*n,l=Math.sin(r)*n,t.moveTo(e-a,i-l),t.lineTo(e+a,i+l),t.moveTo(e+l,i-a),t.lineTo(e-l,i+a);break;case"star":a=Math.cos(r)*n,l=Math.sin(r)*n,t.moveTo(e-a,i-l),t.lineTo(e+a,i+l),t.moveTo(e+l,i-a),t.lineTo(e-l,i+a),r+=Yt,a=Math.cos(r)*n,l=Math.sin(r)*n,t.moveTo(e-a,i-l),t.lineTo(e+a,i+l),t.moveTo(e+l,i-a),t.lineTo(e-l,i+a);break;case"line":a=Math.cos(r)*n,l=Math.sin(r)*n,t.moveTo(e-a,i-l),t.lineTo(e+a,i+l);break;case"dash":t.moveTo(e,i),t.lineTo(e+Math.cos(r)*n,i+Math.sin(r)*n)}t.fill()}(t,{x:i,y:n,radius:s,rotation:a,style:r,rad:l})})(t,this,this.centerX,this.centerY),n&&!fa(e.pointStyle)&&(t.shadowColor=e.borderShadowColor,t.stroke()),t.restore(),e.borderWidth=i}resolveElementProperties(t,e){const i=Ma(t,e);return i.initProperties=la(t,i,e),i}}cl.id="pointAnnotation",cl.defaults={adjustScaleRange:!0,backgroundShadowColor:"transparent",borderDash:[],borderDashOffset:0,borderShadowColor:"transparent",borderWidth:1,display:!0,init:void 0,pointStyle:"circle",radius:10,rotation:0,shadowBlur:0,shadowOffsetX:0,shadowOffsetY:0,xAdjust:0,xMax:void 0,xMin:void 0,xScaleID:void 0,xValue:void 0,yAdjust:0,yMax:void 0,yMin:void 0,yScaleID:void 0,yValue:void 0,z:0},cl.defaultRoutes={borderColor:"color",backgroundColor:"color"};class dl extends gs{inRange(t,e,i,n){if("x"!==i&&"y"!==i)return this.options.radius>=.1&&this.elements.length>1&&function(t,e,i,n){let s=!1,o=t[t.length-1].getProps(["bX","bY"],n);for(const r of t){const t=r.getProps(["bX","bY"],n);t.bY>i!=o.bY>i&&e<(o.bX-t.bX)*(i-t.bY)/(o.bY-t.bY)+t.bX&&(s=!s),o=t}return s}(this.elements,t,e,n);const s=Pa({x:t,y:e},this.getCenterPoint(n),Jt(-this.options.rotation)),o=this.elements.map((t=>"y"===i?t.bY:t.bX)),r=Math.min(...o),a=Math.max(...o);return s[i]>=r&&s[i]<=a}getCenterPoint(t){return Jr(this,t)}draw(t){const{elements:e,options:i}=this;t.save(),t.beginPath(),t.fillStyle=i.backgroundColor,ma(t,i);const n=ga(t,i);let s=!0;for(const i of e)s?(t.moveTo(i.x,i.y),s=!1):t.lineTo(i.x,i.y);t.closePath(),t.fill(),n&&(t.shadowColor=i.borderShadowColor,t.stroke()),t.restore()}resolveElementProperties(t,e){const i=Ma(t,e),{sides:n,rotation:s}=e,o=[],r=2*Wt/n;let a=s*Nt;for(let s=0;s<n;s++,a+=r){const n=ul(i,e,a);n.initProperties=la(t,i,e),o.push(n)}return i.elements=o,i}}function ul({centerX:t,centerY:e},{radius:i,borderWidth:n},s){const o=n/2,r=Math.sin(s),a=Math.cos(s),l={x:t+r*i,y:e-a*i};return{type:"point",optionScope:"point",properties:{x:l.x,y:l.y,centerX:l.x,centerY:l.y,bX:t+r*(i+o),bY:e-a*(i+o)}}}dl.id="polygonAnnotation",dl.defaults={adjustScaleRange:!0,backgroundShadowColor:"transparent",borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderShadowColor:"transparent",borderWidth:1,display:!0,init:void 0,point:{radius:0},radius:10,rotation:0,shadowBlur:0,shadowOffsetX:0,shadowOffsetY:0,sides:3,xAdjust:0,xMax:void 0,xMin:void 0,xScaleID:void 0,xValue:void 0,yAdjust:0,yMax:void 0,yMin:void 0,yScaleID:void 0,yValue:void 0,z:0},dl.defaultRoutes={borderColor:"color",backgroundColor:"color"};const fl={box:Va,ellipse:hl,label:Ha,line:Qa,point:cl,polygon:dl};Object.keys(fl).forEach((t=>{We.describe(`elements.${fl[t].id}`,{_fallback:"plugins.annotation.common"})}));const pl={update:Object.assign},gl=Ta.concat(Ra),ml=(t,e)=>bt(e)?wl(t,e):t,xl=t=>"color"===t||"font"===t;function bl(t="line"){return fl[t]?t:(console.warn(`Unknown annotation type: '${t}', defaulting to 'line'`),"line")}function yl(t){return isNaN(t.x)||isNaN(t.y)}function vl(t,e,i,n){const s=t.elements||(t.elements=[]);s.length=e.length;for(let t=0;t<e.length;t++){const o=e[t],r=o.properties,a=_l(s,t,o.type,o.initProperties),l=i[o.optionScope].override(o);r.options=Al(l),n.update(a,r)}}function _l(t,e,i,n){const s=fl[bl(i)];let o=t[e];return o&&o instanceof s||(o=t[e]=new s,Object.assign(o,n)),o}function Al(t){const e=fl[bl(t.type)],i={};i.id=t.id,i.type=t.type,i.drawTime=t.drawTime,Object.assign(i,wl(t,e.defaults),wl(t,e.defaultRoutes));for(const e of gl)i[e]=t[e];return i}function wl(t,e){const i={};for(const n of Object.keys(e)){const s=e[n],o=t[n];xl(n)&&xt(o)?i[n]=o.map((t=>ml(t,s))):i[n]=ml(o,s)}return i}function Cl(t,e,i){return e.$context||(e.$context=Object.assign(Object.create(t.getContext()),{element:e,id:i.id,type:"annotation"}))}const Ml=new Map,kl=Ta.concat(Ra);var El={id:"annotation",version:"3.0.1",beforeRegister(){!function(t,e,i,n=!0){const s=i.split(".");let o=0;for(const r of e.split(".")){const a=s[o++];if(parseInt(r,10)<parseInt(a,10))break;if(Ur(a,r)){if(n)throw new Error(`${t} v${i} is not supported. v${e} or newer is required.`);return!1}}}("chart.js","4.0",Qs.version)},afterRegister(){Qs.register(fl)},afterUnregister(){Qs.unregister(fl)},beforeInit(t){Ml.set(t,{annotations:[],elements:[],visibleElements:[],listeners:{},listened:!1,moveListened:!1,hooks:{},hooked:!1,hovered:[]})},beforeUpdate(t,e,i){const n=Ml.get(t).annotations=[];let s=i.annotations;bt(s)?Object.keys(s).forEach((t=>{const e=s[t];bt(e)&&(e.id=t,n.push(e))})):xt(s)&&n.push(...s),function(t,e){for(const i of t)Wa(i,e)}(n,t.scales)},afterDataLimits(t,e){const i=Ml.get(t);!function(t,e,i){const n=function(t,e,i){const n=e.axis,s=e.id,o=n+"ScaleID",r={min:_t(e.min,Number.NEGATIVE_INFINITY),max:_t(e.max,Number.POSITIVE_INFINITY)};for(const a of i)a.scaleID===s?ja(a,e,["value","endValue"],r):_a(t,a,o)===s&&ja(a,e,[n+"Min",n+"Max",n+"Value"],r);return r}(t.scales,e,i);let s=za(e,n,"min","suggestedMin");s=za(e,n,"max","suggestedMax")||s,s&&It(e.handleTickRangeOptions)&&e.handleTickRangeOptions()}(t,e.scale,i.annotations.filter((t=>t.display&&t.adjustScaleRange)))},afterUpdate(t,e,i){const n=Ml.get(t);!function(t,e,i){e.listened=ha(i,Ta,e.listeners),e.moveListened=!1,e._getElements=$r,Ba.forEach((t=>{It(i[t])&&(e.moveListened=!0)})),e.listened&&e.moveListened||e.annotations.forEach((t=>{!e.listened&&It(t.click)&&(e.listened=!0),e.moveListened||Ba.forEach((i=>{It(t[i])&&(e.listened=!0,e.moveListened=!0)}))}))}(0,n,i),function(t,e,i,n){const s=function(t,e,i){return"reset"===i||"none"===i||"resize"===i?pl:new an(t,e)}(t,i.animations,n),o=e.annotations,r=function(t,e){const i=e.length,n=t.length;if(n<i){const e=i-n;t.splice(n,0,...new Array(e))}else n>i&&t.splice(i,n-i);return t}(e.elements,o);for(let e=0;e<o.length;e++){const i=o[e],n=_l(r,e,i.type),a=i.setContext(Cl(t,n,i)),l=n.resolveElementProperties(t,a);l.skip=yl(l),"elements"in l&&(vl(n,l.elements,a,s),delete l.elements),Rt(n.x)||Object.assign(n,l),Object.assign(n,l.initProperties),l.options=Al(a),s.update(n,l)}}(t,n,i,e.mode),n.visibleElements=n.elements.filter((t=>!t.skip&&t.options.display)),function(t,e,i){const n=e.visibleElements;e.hooked=ha(i,Ra,e.hooks),e.hooked||n.forEach((t=>{e.hooked||Ra.forEach((i=>{It(t.options[i])&&(e.hooked=!0)}))}))}(0,n,i)},beforeDatasetsDraw(t,e,i){Sl(t,"beforeDatasetsDraw",i.clip)},afterDatasetsDraw(t,e,i){Sl(t,"afterDatasetsDraw",i.clip)},beforeDraw(t,e,i){Sl(t,"beforeDraw",i.clip)},afterDraw(t,e,i){Sl(t,"afterDraw",i.clip)},beforeEvent(t,e,i){(function(t,e,i){if(t.listened)switch(e.type){case"mousemove":case"mouseout":return function(t,e,i){if(!t.moveListened)return;let n;n="mousemove"===e.type?$r(t,e,i.interaction):[];const s=t.hovered;t.hovered=n;const o={state:t,event:e};let r=Oa(o,"leave",s,n);return Oa(o,"enter",n,s)||r}(t,e,i);case"click":return function(t,e,i){const n=t.listeners,s=$r(t,e,i.interaction);let o;for(const t of s)o=La(t.options.click||n.click,t,e)||o;return o}(t,e,i)}})(Ml.get(t),e.event,i)&&(e.changed=!0)},afterDestroy(t){Ml.delete(t)},_getState:t=>Ml.get(t),defaults:{animations:{numbers:{properties:["x","y","x2","y2","width","height","centerX","centerY","pointX","pointY","radius"],type:"number"}},clip:!0,interaction:{mode:void 0,axis:void 0,intersect:void 0},common:{drawTime:"afterDatasetsDraw",init:!1,label:{}}},descriptors:{_indexable:!1,_scriptable:t=>!kl.includes(t)&&"init"!==t,annotations:{_allKeys:!1,_fallback:(t,e)=>`elements.${fl[bl(e.type)].id}`},interaction:{_fallback:!0},common:{label:{_indexable:xl,_fallback:!0},_indexable:xl}},additionalOptionScopes:[""]};function Sl(t,e,i){const{ctx:n,chartArea:s}=t,o=Ml.get(t);i&&Xe(n,s);const r=function(t,e){const i=[];for(const n of t)if(n.options.drawTime===e&&i.push({element:n,main:!0}),n.elements&&n.elements.length)for(const t of n.elements)t.options.display&&t.options.drawTime===e&&i.push({element:t});return i}(o.visibleElements,e).sort(((t,e)=>t.element.options.z-e.element.options.z));for(const t of r)Dl(n,s,o,t);i&&Ue(n)}function Dl(t,e,i,n){const s=n.element;n.main?(Ia(i,s,"beforeDraw"),s.draw(t,e),Ia(i,s,"afterDraw")):s.draw(t,e)}var Pl=i(884),Bl={};Bl.styleTagTransform=u(),Bl.setAttributes=l(),Bl.insert=r().bind(null,"head"),Bl.domAPI=s(),Bl.insertStyleElement=c(),e()(Pl.Z,Bl),Pl.Z&&Pl.Z.locals&&Pl.Z.locals;class Tl{constructor(){Hr.register(El),this.container=document.createElement("div"),this.container.id="graphContainer",this.btnBar=document.createElement("div"),this.btnBar.id="btnBar",this.btnTemp=document.createElement("div"),this.btnTemp.innerText="Temperature",this.btnTemp.id="btnTemp",this.btnTemp.classList.add("selected"),this.btnRain=document.createElement("div"),this.btnRain.innerText="Chance of rain",this.btnRain.id="btnRain",this.settingWhichGraph="temp",this.btnBar.append(this.btnTemp,this.btnRain),this.container.append(this.btnBar),this.bindEvents()}bindEvents(){x.on("renderGraph",(t=>{let e;"temp"===this.settingWhichGraph?e=`temp_${_.tempUnits}`:"rain"===this.settingWhichGraph&&(e="chance_of_rain");const i=Object.values(_.cachedData.forecast.forecastday[t].hour),n=[];i.forEach((t=>{const i=new Date(t.time).getHours();n.push({hour:i,temp:t[e]})}));const s=0===t;this.render({parsedData:n,isCurrentDay:s})})),this.btnTemp.addEventListener("click",(()=>{this.settingWhichGraph="temp",this.btnTemp.classList.add("selected"),this.btnRain.classList.remove("selected"),x.emit("renderGraph",_.selectedDay)})),this.btnRain.addEventListener("click",(()=>{this.settingWhichGraph="rain",this.btnRain.classList.add("selected"),this.btnTemp.classList.remove("selected"),x.emit("renderGraph",_.selectedDay)}))}render(t){const e=t.isCurrentDay?1:0,i=new Date(_.cachedData.current.last_updated).getHours();let n,s;"temp"===this.settingWhichGraph?(n="°",s="#1A83DD"):"rain"===this.settingWhichGraph&&(n="%",s="#dd1a79"),this.container.contains(this.canvas)&&this.container.removeChild(this.canvas),this.canvas=document.createElement("canvas"),this.container.append(this.canvas),this.cachedChart=new Hr(this.canvas,{type:"line",data:{labels:t.parsedData.map((t=>`${t.hour}:00`)),datasets:[{data:t.parsedData.map((t=>t.temp)),borderColor:s,tension:.2}]},options:{scales:{y:{beginAtZero:!1,ticks:{callback:t=>`${t}${n}`,stepSize:1}}},maintainAspectRatio:!1,responsive:!0,plugins:{annotation:{annotations:{line1:{adjustScaleRange:!0,drawTime:"afterDatasetsDraw",type:"line",scaleID:"x",borderColor:"orange",borderWidth:e,value:i}}},legend:{display:!1}},annotations:{line1:{}}}})}}class Ol{#t;#e;constructor(t){this.#t=t,this.#e=this.#i()}#i(){const t=(new Date).getFullYear();let e;const i=this.#t.toString();e=i,i.includes(t)||(e=`${e}-${t} - `);const n=document.createElement("footer");return n.innerHTML=`\n            <small>\n                &copy; Copyright ${e}\n                <a href="https://github.com/porkenvolf" target="”_blank”">\n                    Porkenvölf\n                </a>\n            </small>\n            `,n.style.display="flex",n.style.justifyContent="center",n.style.alignItems="center",n.style.color="grey",n.style.fontSize="0.9rem",n.style.position="fixed",n.style.bottom="0",n.style.left="50%",n.style.transform="translateX(-50%)",n.style.padding="10px",n.querySelector("a").style.color="grey",n}get output(){return this.#e}}var Ll=i(514),Rl={};Rl.styleTagTransform=u(),Rl.setAttributes=l(),Rl.insert=r().bind(null,"head"),Rl.domAPI=s(),Rl.insertStyleElement=c(),e()(Ll.Z,Rl),Ll.Z&&Ll.Z.locals&&Ll.Z.locals;class Il{constructor(){this.container=document.createElement("div"),this.container.id="appContainer",this.loading=new z,this.header=new E,this.graph=new Tl,this.daysBar=new O(8),this.footer=new Ol(2023),this.container.append(this.header.container,this.graph.container,this.daysBar.container,this.footer.output),Il.bindEvents(this),Il.apiCall()}static apiCall(t){(async function(t){x.emit("loading");const e=t||await async function(){const t=await fetch("https://ipapi.co/json/"),e=await t.json();return"LBR"!==t.country_code_iso3&&"MMR"!==t.country_code_iso3&&"USA"!==t.country_code_iso3||(_.tempUnits="f",_.windUnits="mph"),e.city}().catch(console.log),i=await fetch(`https://api.weatherapi.com/v1/forecast.json?key=6b50d5938f0b4173a06202148231208&q=${e}&days=10&aqi=no&alerts=no\n    `),n=await i.json();return x.emit("stopLoading"),n})(t).then((t=>{_.cachedData=t,x.emit("renderHeader",0),x.emit("renderDaysBar"),x.emit("renderGraph",0),x.emit("renderHourly",0)})).catch(console.log)}static bindEvents(t){x.on("apiCall",(t=>{Il.apiCall(t)})),x.on("loading",(()=>{t.container.append(t.loading.container)})),x.on("stopLoading",(()=>{t.loading.container.remove()}))}}const zl=document.querySelector("body"),Wl=new Il;zl.append(Wl.container)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFNLFNBQ05DLE9BQVEsU0FDUkMsUUFBUyxTQUNUQyxTQUFVLFNBQ1ZDLE9BQVEsU0FDUkMsTUFBTyxTQUNQQyxJQUFLLFNBQ0xDLE9BQVEsU0FDUkMsT0FBUSxTQUNSQyxLQUFNLFNBQ05DLE1BQU8sU0FDUEMsTUFBTyxTQUNQQyxJQUFLLE9BQ0xDLE9BQVEsU0FDUkMsT0FBUSxTQUNSQyxTQUFVLE9BQ1ZDLE9BQVEsU0FDUkMsT0FBUSxTQUNSQyxTQUFVLFNBQ1ZDLFNBQVUsU0FDVkMsU0FBVSxTQUNWQyxTQUFVLFNBQ1ZDLE9BQVEsU0FDUkMsUUFBUyxTQUNUQyxVQUFXLFNBQ1hDLElBQUssU0FDTEMsT0FBUSxTQUNSQyxJQUFLLFNBQ0xDLElBQUssT0FDTEMsTUFBTyxTQUNQQyxJQUFLLFNBQ0xDLFFBQVMsU0FDVEMsT0FBUSxTQUNSQyxRQUFTLFNBQ1RDLE1BQU8sU0FDUEMsS0FBTSxTQUNOQyxNQUFPLFNBQ1BDLE9BQVEsU0FDUkMsVUFBVyxTQUNYQyxRQUFTLFNBQ1RDLFdBQVksU0FDWkMsSUFBSyxTQUNMQyxLQUFNLFNBQ05DLE1BQU8sU0FDUEMsVUFBVyxTQUNYQyxLQUFNLFNBQ05DLEtBQU0sU0FDTkMsS0FBTSxTQUNOQyxLQUFNLFNBQ05DLE9BQVEsU0FDUkMsT0FBUSxTQUNSQyxPQUFRLFNBQ1JDLE1BQU8sU0FDUEMsTUFBTyxTQUNQQyxRQUFTLFNBQ1RDLElBQUssU0FDTEMsS0FBTSxPQUNOQyxRQUFTLFNBQ1RDLElBQUssU0FDTEMsT0FBUSxTQUNSQyxNQUFPLFNBQ1BDLFdBQVksU0FDWkMsSUFBSyxLQUNMQyxNQUFPLFNBQ1BDLE9BQVEsU0FDUkMsT0FBUSxTQUNSQyxLQUFNLFNBQ05DLFVBQVcsT0FDWEMsSUFBSyxTQUNMQyxTQUFVLFNBQ1ZDLFdBQVksU0FDWkMsUUFBUyxTQUNUQyxTQUFVLFNBQ1ZDLFFBQVMsU0FDVEMsV0FBWSxTQUNaQyxLQUFNLEtBQ05DLE9BQVEsU0FDUkMsS0FBTSxTQUNOQyxRQUFTLFNBQ1RDLE1BQU8sU0FDUEMsUUFBUyxTQUNUQyxLQUFNLFNBQ05D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aTdGLE1BQU0xb0UsUUFBUTJvRSxJQUNuQixDQUVBLGlCQUFPejZGLENBQVc0NkYsR0FDaEIxN0YsRUFBT0MsR0FBRyxXQUFZVixJQUNwQmc3RixHQUFJSyxRQUFRcjdGLEVBQVMsSUFFdkJTLEVBQU9DLEdBQUcsV0FBVyxLQUNuQnk3RixFQUFTajdGLFVBQVVJLE9BQU82NkYsRUFBU2xCLFFBQVEvNUYsVUFBVSxJQUV2RFQsRUFBT0MsR0FBRyxlQUFlLEtBQ3ZCeTdGLEVBQVNsQixRQUFRLzVGLFVBQVVuRixRQUFRLEdBRXZDLEVFaERGLE1BQU0yNEUsR0FBTy8zRSxTQUFTQyxjQUFjLFFBQzlCdy9GLEdBQU0sSUFBSXBCLEdBQ2hCdG1CLEdBQUtwekUsT0FBTzg2RixHQUFJbDdGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9jc3MvY29tcG9uZW50cy9BcHAuY3NzIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvY3NzL2NvbXBvbmVudHMvRGF5LmNzcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL2Nzcy9jb21wb25lbnRzL0RheXNCYXIuY3NzIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvY3NzL2NvbXBvbmVudHMvR3JhcGguY3NzIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvY3NzL2NvbXBvbmVudHMvSGVhZGVyLmNzcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL2Nzcy9jb21wb25lbnRzL0xvYWRpbmcuY3NzIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvY3NzL2NvbXBvbmVudHMvU2VhcmNoQmFyLmNzcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL2Nzcy9jb21wb25lbnRzL1VuaXRTZWxlY3Rvci5jc3MiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9jc3MvZm9udC5jc3MiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9jc3Mvc2Nyb2xsYmFyLmNzcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL2Nzcy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9jc3MvdmFyaWFibGVzLmNzcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3dlYXRoZXIvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vd2VhdGhlci93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vd2VhdGhlci93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3dlYXRoZXIvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly93ZWF0aGVyL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL3dlYXRoZXIvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvY3NzL2ZvbnQuY3NzPzI5YTQiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9jc3Mvc3R5bGUuY3NzPzlmY2QiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9qcy9QdWJzdWIuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9jc3MvY29tcG9uZW50cy9TZWFyY2hCYXIuY3NzP2RiNjciLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9qcy9jb21wb25lbnRzL1NlYXJjaEJhci5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL2pzL2NvbXBvbmVudHMvQ2FjaGUuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9jc3MvY29tcG9uZW50cy9Vbml0U2VsZWN0b3IuY3NzP2M0YWIiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9qcy9jb21wb25lbnRzL1VuaXRTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL2Nzcy9jb21wb25lbnRzL0hlYWRlci5jc3M/NTRhZiIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL2pzL2NvbXBvbmVudHMvSGVhZGVyLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvY3NzL2NvbXBvbmVudHMvRGF5LmNzcz8zYjg1Iiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvanMvY29tcG9uZW50cy9EYXkuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9jc3MvY29tcG9uZW50cy9EYXlzQmFyLmNzcz9lNzhjIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvanMvY29tcG9uZW50cy9EYXlzQmFyLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvY3NzL2NvbXBvbmVudHMvTG9hZGluZy5jc3M/NzM3MyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL2pzL2NvbXBvbmVudHMvTG9hZGluZy5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vbm9kZV9tb2R1bGVzL0BrdXJrbGUvY29sb3IvZGlzdC9jb2xvci5lc20uanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9kaXN0L2NodW5rcy9oZWxwZXJzLnNlZ21lbnQuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9kaXN0L2NoYXJ0LmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvYXV0by9hdXRvLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9ub2RlX21vZHVsZXMvY2hhcnRqcy1wbHVnaW4tYW5ub3RhdGlvbi9kaXN0L2NoYXJ0anMtcGx1Z2luLWFubm90YXRpb24uZXNtLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvY3NzL2NvbXBvbmVudHMvR3JhcGguY3NzPzg4OTMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9qcy9jb21wb25lbnRzL0dyYXBoLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvanMvY29tcG9uZW50cy9Gb290ZXIuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9jc3MvY29tcG9uZW50cy9BcHAuY3NzPzBlZDAiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9qcy9jb21wb25lbnRzL0FwcC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL2pzL2NvbXBvbmVudHMvQVBJLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL3ZhcmlhYmxlcy5jc3NcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmkoX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgI2FwcENvbnRhaW5lciB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgd2lkdGg6IG1pbih2YXIoLS1taW5XaWR0aCksIDEwMCUpO1xuICBwYWRkaW5nOiAxMHB4O1xuICBnYXA6IDE1cHg7XG4gIG92ZXJmbG93OiBoaWRkZW47XG59XG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jc3MvY29tcG9uZW50cy9BcHAuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLG1CQUFtQjtFQUNuQixhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLGlDQUFpQztFQUNqQyxhQUFhO0VBQ2IsU0FBUztFQUNULGdCQUFnQjtBQUNsQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IHVybCguLi92YXJpYWJsZXMuY3NzKTtcXG5cXG4jYXBwQ29udGFpbmVyIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIHdpZHRoOiBtaW4odmFyKC0tbWluV2lkdGgpLCAxMDAlKTtcXG4gIHBhZGRpbmc6IDEwcHg7XFxuICBnYXA6IDE1cHg7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL3ZhcmlhYmxlcy5jc3NcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmkoX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgI2RheUNvbnRhaW5lciB7XG4gIGZsZXg6IDEgMCBhdXRvO1xuICBkaXNwbGF5OiBncmlkO1xuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnI7XG4gIGdyaWQtdGVtcGxhdGUtcm93czogMXJlbSAxZnIgMXJlbTtcbiAgcGFkZGluZzogNXB4OyAvKiBcbiAgYm9yZGVyOiAycHggc29saWQgZ3JleTsgKi9cbiAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgZ2FwOiA1cHg7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuI2RheURheSB7XG4gIGdyaWQtcm93OiAxO1xuICBncmlkLWNvbHVtbjogMS8tMTtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuI2RheUljb24ge1xuICBncmlkLXJvdzogMjtcbiAgZ3JpZC1jb2x1bW46IDEvLTE7XG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAganVzdGlmeS1zZWxmOiBjZW50ZXI7XG4gIHdpZHRoOiAxMDAlO1xufVxuI2RheU1heCB7XG4gIGdyaWQtcm93OiAzO1xuICBncmlkLWNvbHVtbjogMTtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuXG4gIGZvbnQtc2l6ZTogMC44cmVtO1xufVxuI2RheU1pbiB7XG4gIGdyaWQtcm93OiAzO1xuICBncmlkLWNvbHVtbjogMjtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBmb250LXNpemU6IDAuOHJlbTtcbiAgY29sb3I6IHZhcigtLXRleHRNaWQpO1xufVxuI2RheUNvbnRhaW5lci5zZWxlY3RlZCB7XG4gIGJhY2tncm91bmQ6IHZhcigtLWJnTWlkKTtcbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Nzcy9jb21wb25lbnRzL0RheS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUE7RUFDRSxjQUFjO0VBQ2QsYUFBYTtFQUNiLDhCQUE4QjtFQUM5QixpQ0FBaUM7RUFDakMsWUFBWSxFQUFFOzJCQUNXO0VBQ3pCLG1CQUFtQjtFQUNuQixRQUFRO0VBQ1IsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLFdBQVc7RUFDWCxpQkFBaUI7RUFDakIsa0JBQWtCO0FBQ3BCO0FBQ0E7RUFDRSxXQUFXO0VBQ1gsaUJBQWlCO0VBQ2pCLGtCQUFrQjtFQUNsQixvQkFBb0I7RUFDcEIsV0FBVztBQUNiO0FBQ0E7RUFDRSxXQUFXO0VBQ1gsY0FBYztFQUNkLGtCQUFrQjs7RUFFbEIsaUJBQWlCO0FBQ25CO0FBQ0E7RUFDRSxXQUFXO0VBQ1gsY0FBYztFQUNkLGtCQUFrQjtFQUNsQixpQkFBaUI7RUFDakIscUJBQXFCO0FBQ3ZCO0FBQ0E7RUFDRSx3QkFBd0I7QUFDMUJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCB1cmwoXFxcIi4uL3ZhcmlhYmxlcy5jc3NcXFwiKTtcXG5cXG4jZGF5Q29udGFpbmVyIHtcXG4gIGZsZXg6IDEgMCBhdXRvO1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmcjtcXG4gIGdyaWQtdGVtcGxhdGUtcm93czogMXJlbSAxZnIgMXJlbTtcXG4gIHBhZGRpbmc6IDVweDsgLyogXFxuICBib3JkZXI6IDJweCBzb2xpZCBncmV5OyAqL1xcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gIGdhcDogNXB4O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4jZGF5RGF5IHtcXG4gIGdyaWQtcm93OiAxO1xcbiAgZ3JpZC1jb2x1bW46IDEvLTE7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcbiNkYXlJY29uIHtcXG4gIGdyaWQtcm93OiAyO1xcbiAgZ3JpZC1jb2x1bW46IDEvLTE7XFxuICBhbGlnbi1zZWxmOiBjZW50ZXI7XFxuICBqdXN0aWZ5LXNlbGY6IGNlbnRlcjtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4jZGF5TWF4IHtcXG4gIGdyaWQtcm93OiAzO1xcbiAgZ3JpZC1jb2x1bW46IDE7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuXFxuICBmb250LXNpemU6IDAuOHJlbTtcXG59XFxuI2RheU1pbiB7XFxuICBncmlkLXJvdzogMztcXG4gIGdyaWQtY29sdW1uOiAyO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgZm9udC1zaXplOiAwLjhyZW07XFxuICBjb2xvcjogdmFyKC0tdGV4dE1pZCk7XFxufVxcbiNkYXlDb250YWluZXIuc2VsZWN0ZWQge1xcbiAgYmFja2dyb3VuZDogdmFyKC0tYmdNaWQpO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL3ZhcmlhYmxlcy5jc3NcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmkoX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgI2NvbnRhaW5lciB7XG4gIG1hcmdpbjogMTBweCAwO1xuICBkaXNwbGF5OiBmbGV4O1xuICBnYXA6IDEwcHg7XG4gIHNjcm9sbC1tYXJnaW46IDIwcHg7XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiA3MjVweCkge1xuICAvKiAgRklYOiBkb2Vzbid0IHdvcmsgd2l0biB2YXIoKSAqL1xuICAjY29udGFpbmVyIHtcbiAgICBvdmVyZmxvdy14OiBzY3JvbGw7XG4gIH1cbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Nzcy9jb21wb25lbnRzL0RheXNCYXIuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUVBO0VBQ0UsY0FBYztFQUNkLGFBQWE7RUFDYixTQUFTO0VBQ1QsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0Usa0NBQWtDO0VBQ2xDO0lBQ0Usa0JBQWtCO0VBQ3BCO0FBQ0ZcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCB1cmwoXFxcIi4uL3ZhcmlhYmxlcy5jc3NcXFwiKTtcXG5cXG4jY29udGFpbmVyIHtcXG4gIG1hcmdpbjogMTBweCAwO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGdhcDogMTBweDtcXG4gIHNjcm9sbC1tYXJnaW46IDIwcHg7XFxufVxcblxcbkBtZWRpYSAobWF4LXdpZHRoOiA3MjVweCkge1xcbiAgLyogIEZJWDogZG9lc24ndCB3b3JrIHdpdG4gdmFyKCkgKi9cXG4gICNjb250YWluZXIge1xcbiAgICBvdmVyZmxvdy14OiBzY3JvbGw7XFxuICB9XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18gZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vdmFyaWFibGVzLmNzc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18uaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAjZ3JhcGhDb250YWluZXIge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDIwMHB4O1xuICBjb2xvcjogdmFyKC0tdGV4dERhcmspO1xuICBmb250LXNpemU6IDAuOHJlbTtcbn1cbiNncmFwaENvbnRhaW5lciAjYnRuQmFyIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZ2FwOiAxNXB4O1xufVxuI2dyYXBoQ29udGFpbmVyICNidG5CYXIgZGl2IHtcbiAgY3Vyc29yOiBwb2ludGVyO1xufVxuI2dyYXBoQ29udGFpbmVyICNidG5UZW1wLnNlbGVjdGVkIHtcbiAgYm9yZGVyLWJvdHRvbTogM3B4IHNvbGlkICMxYTgzZGQ7XG4gIGNvbG9yOiB2YXIoLS10ZXh0TGlnaHQpO1xufVxuI2dyYXBoQ29udGFpbmVyICNidG5SYWluLnNlbGVjdGVkIHtcbiAgYm9yZGVyLWJvdHRvbTogM3B4IHNvbGlkICNkZDFhNzk7XG4gIGNvbG9yOiB2YXIoLS10ZXh0TGlnaHQpO1xufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzL2NvbXBvbmVudHMvR3JhcGguY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUNBO0VBQ0Usa0JBQWtCO0VBQ2xCLFdBQVc7RUFDWCxhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLGlCQUFpQjtBQUNuQjtBQUNBO0VBQ0UsYUFBYTtFQUNiLFNBQVM7QUFDWDtBQUNBO0VBQ0UsZUFBZTtBQUNqQjtBQUNBO0VBQ0UsZ0NBQWdDO0VBQ2hDLHVCQUF1QjtBQUN6QjtBQUNBO0VBQ0UsZ0NBQWdDO0VBQ2hDLHVCQUF1QjtBQUN6QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IHVybChcXFwiLi4vdmFyaWFibGVzLmNzc1xcXCIpO1xcbiNncmFwaENvbnRhaW5lciB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMjAwcHg7XFxuICBjb2xvcjogdmFyKC0tdGV4dERhcmspO1xcbiAgZm9udC1zaXplOiAwLjhyZW07XFxufVxcbiNncmFwaENvbnRhaW5lciAjYnRuQmFyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBnYXA6IDE1cHg7XFxufVxcbiNncmFwaENvbnRhaW5lciAjYnRuQmFyIGRpdiB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcbiNncmFwaENvbnRhaW5lciAjYnRuVGVtcC5zZWxlY3RlZCB7XFxuICBib3JkZXItYm90dG9tOiAzcHggc29saWQgIzFhODNkZDtcXG4gIGNvbG9yOiB2YXIoLS10ZXh0TGlnaHQpO1xcbn1cXG4jZ3JhcGhDb250YWluZXIgI2J0blJhaW4uc2VsZWN0ZWQge1xcbiAgYm9yZGVyLWJvdHRvbTogM3B4IHNvbGlkICNkZDFhNzk7XFxuICBjb2xvcjogdmFyKC0tdGV4dExpZ2h0KTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi92YXJpYWJsZXMuY3NzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYCNoZWFkZXJDb250YWluZXIge1xuICBkaXNwbGF5OiBncmlkO1xuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDVyZW0gNXJlbSAxZnIgMWZyO1xufVxuI2hlYWRlckljb24ge1xuICBncmlkLWNvbHVtbjogMTtcbiAgZ3JpZC1yb3c6IDE7XG4gIHdpZHRoOiAxMDAlO1xuICBhbGlnbi1zZWxmOiBjZW50ZXI7XG4gIGp1c3RpZnktc2VsZjogY2VudGVyO1xufVxuI2hlYWRlclRlbXBlcmF0dXJlIHtcbiAgZ3JpZC1jb2x1bW46IDI7XG4gIGdyaWQtcm93OiAxO1xuICBmb250LXNpemU6IDNyZW07XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xufVxuI2hlYWRlckh1bWlkaXR5IHtcbiAgZ3JpZC1jb2x1bW46IDEvMztcbiAgZ3JpZC1yb3c6IDM7XG4gIGZvbnQtc2l6ZTogMC44cmVtO1xuICBjb2xvcjogdmFyKC0tdGV4dE1pZCk7XG59XG4jaGVhZGVyV2luZCB7XG4gIGdyaWQtY29sdW1uOiAxLzM7XG4gIGdyaWQtcm93OiA1O1xuICBmb250LXNpemU6IDAuOHJlbTtcbiAgY29sb3I6IHZhcigtLXRleHRNaWQpO1xufVxuXG4jaGVhZGVyQ2hhbmNlUmFpbiB7XG4gIGdyaWQtY29sdW1uOiAxLzM7XG4gIGdyaWQtcm93OiA0O1xuICBjb2xvcjogdmFyKC0tdGV4dE1pZCk7XG4gIGZvbnQtc2l6ZTogMC44cmVtO1xufVxuXG4jaGVhZGVyRGF5IHtcbiAgZ3JpZC1jb2x1bW46IDMvNjtcbiAgZ3JpZC1yb3c6IDQ7XG4gIHRleHQtYWxpZ246IGVuZDtcbiAgY29sb3I6IHZhcigtLXRleHRNaWQpO1xuICBmb250LXNpemU6IDAuOHJlbTtcbn1cblxuI2hlYWRlckNvbmRpdGlvbiB7XG4gIGdyaWQtY29sdW1uOiAzLzY7XG4gIGdyaWQtcm93OiA1O1xuICB0ZXh0LWFsaWduOiBlbmQ7XG4gIGNvbG9yOiB2YXIoLS10ZXh0TWlkKTtcbiAgZm9udC1zaXplOiAwLjhyZW07XG59XG5cbiNzZWFyY2hDb250YWluZXIge1xuICBncmlkLWNvbHVtbjogNS82O1xuICBncmlkLXJvdzogMTtcbn1cblxuI2hlYWRlckxvY2F0aW9uIHtcbiAgZ3JpZC1jb2x1bW46IDMvNjtcbiAgZ3JpZC1yb3c6IDM7XG4gIHRleHQtYWxpZ246IGVuZDtcbiAgY29sb3I6IHZhcigtLXRleHRNaWQpO1xuICBmb250LXNpemU6IDAuOHJlbTtcbn1cblxuI3VuaXRTZWxlY3RvckNvbnRhaW5lciB7XG4gIGdyaWQtcm93OiAxO1xuICBncmlkLWNvbHVtbjogMy81O1xufVxuXG5AbWVkaWEgKG1heC13aWR0aDogNDc1cHgpIHtcbiAgI3NlYXJjaENvbnRhaW5lciB7XG4gICAgZ3JpZC1yb3c6IDI7XG4gICAgZ3JpZC1jb2x1bW46IDEvNjtcbiAgICBtYXJnaW46IDEwcHggMDtcbiAgfVxufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzL2NvbXBvbmVudHMvSGVhZGVyLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFFQTtFQUNFLGFBQWE7RUFDYix3Q0FBd0M7QUFDMUM7QUFDQTtFQUNFLGNBQWM7RUFDZCxXQUFXO0VBQ1gsV0FBVztFQUNYLGtCQUFrQjtFQUNsQixvQkFBb0I7QUFDdEI7QUFDQTtFQUNFLGNBQWM7RUFDZCxXQUFXO0VBQ1gsZUFBZTtFQUNmLGFBQWE7RUFDYixtQkFBbUI7RUFDbkIsdUJBQXVCO0FBQ3pCO0FBQ0E7RUFDRSxnQkFBZ0I7RUFDaEIsV0FBVztFQUNYLGlCQUFpQjtFQUNqQixxQkFBcUI7QUFDdkI7QUFDQTtFQUNFLGdCQUFnQjtFQUNoQixXQUFXO0VBQ1gsaUJBQWlCO0VBQ2pCLHFCQUFxQjtBQUN2Qjs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixXQUFXO0VBQ1gscUJBQXFCO0VBQ3JCLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixXQUFXO0VBQ1gsZUFBZTtFQUNmLHFCQUFxQjtFQUNyQixpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsV0FBVztFQUNYLGVBQWU7RUFDZixxQkFBcUI7RUFDckIsaUJBQWlCO0FBQ25COztBQUVBO0VBQ0UsZ0JBQWdCO0VBQ2hCLFdBQVc7QUFDYjs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixXQUFXO0VBQ1gsZUFBZTtFQUNmLHFCQUFxQjtFQUNyQixpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0U7SUFDRSxXQUFXO0lBQ1gsZ0JBQWdCO0lBQ2hCLGNBQWM7RUFDaEI7QUFDRlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IHVybChcXFwiLi4vdmFyaWFibGVzLmNzc1xcXCIpO1xcblxcbiNoZWFkZXJDb250YWluZXIge1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogNXJlbSA1cmVtIDFmciAxZnI7XFxufVxcbiNoZWFkZXJJY29uIHtcXG4gIGdyaWQtY29sdW1uOiAxO1xcbiAgZ3JpZC1yb3c6IDE7XFxuICB3aWR0aDogMTAwJTtcXG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcXG4gIGp1c3RpZnktc2VsZjogY2VudGVyO1xcbn1cXG4jaGVhZGVyVGVtcGVyYXR1cmUge1xcbiAgZ3JpZC1jb2x1bW46IDI7XFxuICBncmlkLXJvdzogMTtcXG4gIGZvbnQtc2l6ZTogM3JlbTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxufVxcbiNoZWFkZXJIdW1pZGl0eSB7XFxuICBncmlkLWNvbHVtbjogMS8zO1xcbiAgZ3JpZC1yb3c6IDM7XFxuICBmb250LXNpemU6IDAuOHJlbTtcXG4gIGNvbG9yOiB2YXIoLS10ZXh0TWlkKTtcXG59XFxuI2hlYWRlcldpbmQge1xcbiAgZ3JpZC1jb2x1bW46IDEvMztcXG4gIGdyaWQtcm93OiA1O1xcbiAgZm9udC1zaXplOiAwLjhyZW07XFxuICBjb2xvcjogdmFyKC0tdGV4dE1pZCk7XFxufVxcblxcbiNoZWFkZXJDaGFuY2VSYWluIHtcXG4gIGdyaWQtY29sdW1uOiAxLzM7XFxuICBncmlkLXJvdzogNDtcXG4gIGNvbG9yOiB2YXIoLS10ZXh0TWlkKTtcXG4gIGZvbnQtc2l6ZTogMC44cmVtO1xcbn1cXG5cXG4jaGVhZGVyRGF5IHtcXG4gIGdyaWQtY29sdW1uOiAzLzY7XFxuICBncmlkLXJvdzogNDtcXG4gIHRleHQtYWxpZ246IGVuZDtcXG4gIGNvbG9yOiB2YXIoLS10ZXh0TWlkKTtcXG4gIGZvbnQtc2l6ZTogMC44cmVtO1xcbn1cXG5cXG4jaGVhZGVyQ29uZGl0aW9uIHtcXG4gIGdyaWQtY29sdW1uOiAzLzY7XFxuICBncmlkLXJvdzogNTtcXG4gIHRleHQtYWxpZ246IGVuZDtcXG4gIGNvbG9yOiB2YXIoLS10ZXh0TWlkKTtcXG4gIGZvbnQtc2l6ZTogMC44cmVtO1xcbn1cXG5cXG4jc2VhcmNoQ29udGFpbmVyIHtcXG4gIGdyaWQtY29sdW1uOiA1LzY7XFxuICBncmlkLXJvdzogMTtcXG59XFxuXFxuI2hlYWRlckxvY2F0aW9uIHtcXG4gIGdyaWQtY29sdW1uOiAzLzY7XFxuICBncmlkLXJvdzogMztcXG4gIHRleHQtYWxpZ246IGVuZDtcXG4gIGNvbG9yOiB2YXIoLS10ZXh0TWlkKTtcXG4gIGZvbnQtc2l6ZTogMC44cmVtO1xcbn1cXG5cXG4jdW5pdFNlbGVjdG9yQ29udGFpbmVyIHtcXG4gIGdyaWQtcm93OiAxO1xcbiAgZ3JpZC1jb2x1bW46IDMvNTtcXG59XFxuXFxuQG1lZGlhIChtYXgtd2lkdGg6IDQ3NXB4KSB7XFxuICAjc2VhcmNoQ29udGFpbmVyIHtcXG4gICAgZ3JpZC1yb3c6IDI7XFxuICAgIGdyaWQtY29sdW1uOiAxLzY7XFxuICAgIG1hcmdpbjogMTBweCAwO1xcbiAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL3ZhcmlhYmxlcy5jc3NcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmkoX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgI2xvYWRpbmdDb250YWluZXIge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgYmFja2dyb3VuZDogdmFyKC0tYmdEYXJrKTtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG59XG5pbWcubG9hZGluZ1doZWVsIHtcbiAgYW5pbWF0aW9uOiByb3RhdGUgMXMgaW5maW5pdGUgbGluZWFyO1xuICBoZWlnaHQ6IDEwcmVtO1xuICB3aWR0aDogYXV0bztcbiAgZmlsdGVyOiBpbnZlcnQoMSkgYnJpZ2h0bmVzcygwLjgpO1xufVxuQGtleWZyYW1lcyByb3RhdGUge1xuICBmcm9tIHtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcbiAgfVxuICB0byB7XG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcbiAgfVxufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzL2NvbXBvbmVudHMvTG9hZGluZy5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUE7RUFDRSxrQkFBa0I7RUFDbEIsTUFBTTtFQUNOLE9BQU87RUFDUCxXQUFXO0VBQ1gsWUFBWTtFQUNaLHlCQUF5QjtFQUN6QixhQUFhO0VBQ2IsdUJBQXVCO0VBQ3ZCLG1CQUFtQjtBQUNyQjtBQUNBO0VBQ0Usb0NBQW9DO0VBQ3BDLGFBQWE7RUFDYixXQUFXO0VBQ1gsaUNBQWlDO0FBQ25DO0FBQ0E7RUFDRTtJQUNFLHVCQUF1QjtFQUN6QjtFQUNBO0lBQ0UseUJBQXlCO0VBQzNCO0FBQ0ZcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCB1cmwoXFxcIi4uL3ZhcmlhYmxlcy5jc3NcXFwiKTtcXG5cXG4jbG9hZGluZ0NvbnRhaW5lciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiAwO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBiYWNrZ3JvdW5kOiB2YXIoLS1iZ0RhcmspO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuaW1nLmxvYWRpbmdXaGVlbCB7XFxuICBhbmltYXRpb246IHJvdGF0ZSAxcyBpbmZpbml0ZSBsaW5lYXI7XFxuICBoZWlnaHQ6IDEwcmVtO1xcbiAgd2lkdGg6IGF1dG87XFxuICBmaWx0ZXI6IGludmVydCgxKSBicmlnaHRuZXNzKDAuOCk7XFxufVxcbkBrZXlmcmFtZXMgcm90YXRlIHtcXG4gIGZyb20ge1xcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcXG4gIH1cXG4gIHRvIHtcXG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcXG4gIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi92YXJpYWJsZXMuY3NzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYCNzZWFyY2hDb250YWluZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xufVxuaW5wdXQge1xuICBmbGV4OiAxIDEgMTAwJTtcbiAgLyogbWF4LXdpZHRoOiBjYWxjKHZhcigtLW1pbldpZHRoKSAvIDIpOyAqL1xuICBwYWRkaW5nOiAxMHB4O1xuICBib3JkZXItcmFkaXVzOiA1MHB4O1xuICBib3JkZXI6IDJweCBzb2xpZCB2YXIoLS10ZXh0RGFyayk7XG4gIGJhY2tncm91bmQ6IHZhcigtLWJnTWlkKTtcbiAgY29sb3I6IHZhcigtLXRleHRMaWdodCk7XG4gIGhlaWdodDogMXJlbTtcbiAgYWxpZ24tc2VsZjogY2VudGVyO1xufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzL2NvbXBvbmVudHMvU2VhcmNoQmFyLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFDQTtFQUNFLGFBQWE7RUFDYix5QkFBeUI7QUFDM0I7QUFDQTtFQUNFLGNBQWM7RUFDZCwwQ0FBMEM7RUFDMUMsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQixpQ0FBaUM7RUFDakMsd0JBQXdCO0VBQ3hCLHVCQUF1QjtFQUN2QixZQUFZO0VBQ1osa0JBQWtCO0FBQ3BCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgdXJsKFxcXCIuLi92YXJpYWJsZXMuY3NzXFxcIik7XFxuI3NlYXJjaENvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcXG59XFxuaW5wdXQge1xcbiAgZmxleDogMSAxIDEwMCU7XFxuICAvKiBtYXgtd2lkdGg6IGNhbGModmFyKC0tbWluV2lkdGgpIC8gMik7ICovXFxuICBwYWRkaW5nOiAxMHB4O1xcbiAgYm9yZGVyLXJhZGl1czogNTBweDtcXG4gIGJvcmRlcjogMnB4IHNvbGlkIHZhcigtLXRleHREYXJrKTtcXG4gIGJhY2tncm91bmQ6IHZhcigtLWJnTWlkKTtcXG4gIGNvbG9yOiB2YXIoLS10ZXh0TGlnaHQpO1xcbiAgaGVpZ2h0OiAxcmVtO1xcbiAgYWxpZ24tc2VsZjogY2VudGVyO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL3ZhcmlhYmxlcy5jc3NcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmkoX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgI3VuaXRTZWxlY3RvckNvbnRhaW5lciB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBzdGFydDtcbn1cblxuI3VuaXRTZWxlY3RvckNvbnRhaW5lciBkaXYge1xuICBwYWRkaW5nLWxlZnQ6IDVweDtcbiAgbWFyZ2luLXRvcDogMS4xNXJlbTtcbiAgY29sb3I6IHZhcigtLXRleHREYXJrKTtcbiAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG4jdW5pdFNlbGVjdG9yQ29udGFpbmVyIGRpdjpsYXN0LWNoaWxkOjpiZWZvcmUge1xuICBjb250ZW50OiBcInxcIjtcbiAgY29sb3I6IHZhcigtLXRleHREYXJrKTtcbn1cblxuI3VuaXRTZWxlY3RvckNvbnRhaW5lciAuc2VsZWN0ZWQge1xuICBjb2xvcjogdmFyKC0tdGV4dExpZ2h0KTtcbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Nzcy9jb21wb25lbnRzL1VuaXRTZWxlY3Rvci5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUE7RUFDRSxhQUFhO0VBQ2Isa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsaUJBQWlCO0VBQ2pCLG1CQUFtQjtFQUNuQixzQkFBc0I7RUFDdEIsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLFlBQVk7RUFDWixzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSx1QkFBdUI7QUFDekJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCB1cmwoXFxcIi4uL3ZhcmlhYmxlcy5jc3NcXFwiKTtcXG5cXG4jdW5pdFNlbGVjdG9yQ29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogc3RhcnQ7XFxufVxcblxcbiN1bml0U2VsZWN0b3JDb250YWluZXIgZGl2IHtcXG4gIHBhZGRpbmctbGVmdDogNXB4O1xcbiAgbWFyZ2luLXRvcDogMS4xNXJlbTtcXG4gIGNvbG9yOiB2YXIoLS10ZXh0RGFyayk7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbiN1bml0U2VsZWN0b3JDb250YWluZXIgZGl2Omxhc3QtY2hpbGQ6OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwifFxcXCI7XFxuICBjb2xvcjogdmFyKC0tdGV4dERhcmspO1xcbn1cXG5cXG4jdW5pdFNlbGVjdG9yQ29udGFpbmVyIC5zZWxlY3RlZCB7XFxuICBjb2xvcjogdmFyKC0tdGV4dExpZ2h0KTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIkBpbXBvcnQgdXJsKGh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9T3BlbitTYW5zOml0YWwsd2dodEAwLDMwMDswLDQwMDswLDUwMDswLDYwMDsxLDMwMDsxLDQwMDsxLDUwMDsxLDYwMCZkaXNwbGF5PXN3YXApO1wiXSk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYDpyb290IHtcbiAgZm9udC1mYW1pbHk6IFwiT3BlbiBTYW5zXCIsIHNhbnMtc2VyaWY7XG59XG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jc3MvZm9udC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUE7RUFDRSxvQ0FBb0M7QUFDdENcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCB1cmwoXFxcImh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9T3BlbitTYW5zOml0YWwsd2dodEAwLDMwMDswLDQwMDswLDUwMDswLDYwMDsxLDMwMDsxLDQwMDsxLDUwMDsxLDYwMCZkaXNwbGF5PXN3YXBcXFwiKTtcXG5cXG46cm9vdCB7XFxuICBmb250LWZhbWlseTogXFxcIk9wZW4gU2Fuc1xcXCIsIHNhbnMtc2VyaWY7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18gZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi92YXJpYWJsZXMuY3NzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYDpyb290IHtcbiAgc2Nyb2xsYmFyLWNvbG9yOiAjYWNhY2FjIHRyYW5zcGFyZW50O1xufVxuOjotd2Via2l0LXNjcm9sbGJhciB7XG4gIGhlaWdodDogMTdweDtcbiAgd2lkdGg6IDE3cHg7XG4gIGJhY2tncm91bmQ6IHZhcigtLWJnRGFyayk7XG59XG5cbjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIge1xuICBiYWNrZ3JvdW5kOiB2YXIoLS10ZXh0RGFyayk7XG4gIC13ZWJraXQtYm9yZGVyLXJhZGl1czogMWV4O1xuICBib3JkZXI6IHNvbGlkIDVweCB2YXIoLS1iZ0RhcmspO1xufVxuXG46Oi13ZWJraXQtc2Nyb2xsYmFyLWNvcm5lciB7XG4gIGJhY2tncm91bmQ6IHZhcigtLWJnRGFyayk7XG59XG5cbjo6LXdlYmtpdC1zY3JvbGxiYXItdHJhY2sge1xuICBib3gtc2hhZG93OiBpbnNldCAwIDAgMTBweCAxMHB4IHZhcigtLWJnRGFyayk7XG4gIGJvcmRlcjogc29saWQgNXB4IHZhcigtLWJnRGFyayk7XG59XG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jc3Mvc2Nyb2xsYmFyLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFFQTtFQUNFLG9DQUFvQztBQUN0QztBQUNBO0VBQ0UsWUFBWTtFQUNaLFdBQVc7RUFDWCx5QkFBeUI7QUFDM0I7O0FBRUE7RUFDRSwyQkFBMkI7RUFDM0IsMEJBQTBCO0VBQzFCLCtCQUErQjtBQUNqQzs7QUFFQTtFQUNFLHlCQUF5QjtBQUMzQjs7QUFFQTtFQUNFLDZDQUE2QztFQUM3QywrQkFBK0I7QUFDakNcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCB1cmwoXFxcIi4vdmFyaWFibGVzLmNzc1xcXCIpO1xcblxcbjpyb290IHtcXG4gIHNjcm9sbGJhci1jb2xvcjogI2FjYWNhYyB0cmFuc3BhcmVudDtcXG59XFxuOjotd2Via2l0LXNjcm9sbGJhciB7XFxuICBoZWlnaHQ6IDE3cHg7XFxuICB3aWR0aDogMTdweDtcXG4gIGJhY2tncm91bmQ6IHZhcigtLWJnRGFyayk7XFxufVxcblxcbjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIge1xcbiAgYmFja2dyb3VuZDogdmFyKC0tdGV4dERhcmspO1xcbiAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiAxZXg7XFxuICBib3JkZXI6IHNvbGlkIDVweCB2YXIoLS1iZ0RhcmspO1xcbn1cXG5cXG46Oi13ZWJraXQtc2Nyb2xsYmFyLWNvcm5lciB7XFxuICBiYWNrZ3JvdW5kOiB2YXIoLS1iZ0RhcmspO1xcbn1cXG5cXG46Oi13ZWJraXQtc2Nyb2xsYmFyLXRyYWNrIHtcXG4gIGJveC1zaGFkb3c6IGluc2V0IDAgMCAxMHB4IDEwcHggdmFyKC0tYmdEYXJrKTtcXG4gIGJvcmRlcjogc29saWQgNXB4IHZhcigtLWJnRGFyayk7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18gZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi92YXJpYWJsZXMuY3NzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8xX19fIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc2Nyb2xsYmFyLmNzc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18uaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18uaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzFfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAqIHtcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTsgLyogU2FmYXJpICovXG4gIC1tcy11c2VyLXNlbGVjdDogbm9uZTsgLyogSUUgMTAgYW5kIElFIDExICovXG4gIHVzZXItc2VsZWN0OiBub25lOyAvKiBTdGFuZGFyZCBzeW50YXggKi9cbn1cbmJvZHkge1xuICBiYWNrZ3JvdW5kOiB2YXIoLS1iZ0RhcmspO1xuICBjb2xvcjogdmFyKC0tdGV4dExpZ2h0KTtcbiAgLyogbWluLWhlaWdodDogMTAwdmg7ICovXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzL3N0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFHQTtFQUNFLHlCQUF5QixFQUFFLFdBQVc7RUFDdEMscUJBQXFCLEVBQUUsb0JBQW9CO0VBQzNDLGlCQUFpQixFQUFFLG9CQUFvQjtBQUN6QztBQUNBO0VBQ0UseUJBQXlCO0VBQ3pCLHVCQUF1QjtFQUN2Qix1QkFBdUI7RUFDdkIsYUFBYTtFQUNiLHVCQUF1QjtFQUN2QixtQkFBbUI7QUFDckJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCB1cmwoXFxcIi4vdmFyaWFibGVzLmNzc1xcXCIpO1xcbkBpbXBvcnQgdXJsKFxcXCIuL3Njcm9sbGJhci5jc3NcXFwiKTtcXG5cXG4qIHtcXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7IC8qIFNhZmFyaSAqL1xcbiAgLW1zLXVzZXItc2VsZWN0OiBub25lOyAvKiBJRSAxMCBhbmQgSUUgMTEgKi9cXG4gIHVzZXItc2VsZWN0OiBub25lOyAvKiBTdGFuZGFyZCBzeW50YXggKi9cXG59XFxuYm9keSB7XFxuICBiYWNrZ3JvdW5kOiB2YXIoLS1iZ0RhcmspO1xcbiAgY29sb3I6IHZhcigtLXRleHRMaWdodCk7XFxuICAvKiBtaW4taGVpZ2h0OiAxMDB2aDsgKi9cXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgOnJvb3Qge1xuICAtLWJnRGFyazogIzIwMjEyNDtcbiAgLS1iZ01pZDogIzJiMmUzNjtcblxuICAtLXRleHREYXJrOiAjNzA3MTdhO1xuICAtLXRleHRNaWQ6ICM3ZjgwODk7XG4gIC0tdGV4dExpZ2h0OiAjZThlYWVkO1xuXG4gIC0tbWluV2lkdGg6IDcwMHB4O1xufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzL3ZhcmlhYmxlcy5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxpQkFBaUI7RUFDakIsZ0JBQWdCOztFQUVoQixtQkFBbUI7RUFDbkIsa0JBQWtCO0VBQ2xCLG9CQUFvQjs7RUFFcEIsaUJBQWlCO0FBQ25CXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIjpyb290IHtcXG4gIC0tYmdEYXJrOiAjMjAyMTI0O1xcbiAgLS1iZ01pZDogIzJiMmUzNjtcXG5cXG4gIC0tdGV4dERhcms6ICM3MDcxN2E7XFxuICAtLXRleHRNaWQ6ICM3ZjgwODk7XFxuICAtLXRleHRMaWdodDogI2U4ZWFlZDtcXG5cXG4gIC0tbWluV2lkdGg6IDcwMHB4O1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjO1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHtcblx0XHRcdHZhciBpID0gc2NyaXB0cy5sZW5ndGggLSAxO1xuXHRcdFx0d2hpbGUgKGkgPiAtMSAmJiAhc2NyaXB0VXJsKSBzY3JpcHRVcmwgPSBzY3JpcHRzW2ktLV0uc3JjO1xuXHRcdH1cblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZm9udC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2ZvbnQuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiLyogaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vbGVhcm5jb2RlYWNhZGVteS83NzczNDk3NDdkODM4MmJmYjcyMiAqL1xuY29uc3QgUHVic3ViID0ge1xuICBQdWJzdWI6IHt9LFxuICBvbihldmVudE5hbWUsIGZuKSB7XG4gICAgdGhpcy5QdWJzdWJbZXZlbnROYW1lXSA9IHRoaXMuUHVic3ViW2V2ZW50TmFtZV0gfHwgW107XG4gICAgdGhpcy5QdWJzdWJbZXZlbnROYW1lXS5wdXNoKGZuKTtcbiAgfSxcbiAgb2ZmKGV2ZW50TmFtZSwgZm4pIHtcbiAgICBpZiAodGhpcy5QdWJzdWJbZXZlbnROYW1lXSkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLlB1YnN1YltldmVudE5hbWVdLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICh0aGlzLlB1YnN1YltldmVudE5hbWVdW2ldID09PSBmbikge1xuICAgICAgICAgIHRoaXMuUHVic3ViW2V2ZW50TmFtZV0uc3BsaWNlKGksIDEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBlbWl0KGV2ZW50TmFtZSwgZGF0YSkge1xuICAgIGlmICh0aGlzLlB1YnN1YltldmVudE5hbWVdKSB7XG4gICAgICB0aGlzLlB1YnN1YltldmVudE5hbWVdLmZvckVhY2goKGZuKSA9PiB7XG4gICAgICAgIGZuKGRhdGEpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgUHVic3ViO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1NlYXJjaEJhci5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1NlYXJjaEJhci5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgXCIuLi8uLi9jc3MvY29tcG9uZW50cy9TZWFyY2hCYXIuY3NzXCI7XG5pbXBvcnQgUHVic3ViIGZyb20gXCIuLi9QdWJzdWJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VhcmNoQmFyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRoaXMuY29udGFpbmVyLmlkID0gXCJzZWFyY2hDb250YWluZXJcIjtcblxuICAgIHRoaXMuc2VhcmNoQmFyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgIHRoaXMuc2VhcmNoQmFyLnR5cGUgPSBcInRleHRcIjtcbiAgICB0aGlzLnNlYXJjaEJhci5wbGFjZWhvbGRlciA9IFwiU2VhcmNoIGxvY2F0aW9uXCI7XG5cbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmQodGhpcy5zZWFyY2hCYXIpO1xuXG4gICAgdGhpcy5iaW5kRXZlbnRzKCk7XG4gIH1cblxuICBiaW5kRXZlbnRzKCkge1xuICAgIHRoaXMuc2VhcmNoQmFyLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgKCkgPT4ge1xuICAgICAgUHVic3ViLmVtaXQoXCJhcGlDYWxsXCIsIHRoaXMuc2VhcmNoQmFyLnZhbHVlKTtcbiAgICAgIFB1YnN1Yi5lbWl0KFwic2VsZWN0ZWREYXlcIiwgMCk7XG4gICAgfSk7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIENhY2hlIHtcbiAgc3RhdGljIGNhY2hlZERhdGE7XG5cbiAgc3RhdGljIHRlbXBVbml0cyA9IFwiY1wiOyAvLyBvciAnZidcblxuICBzdGF0aWMgd2luZFVuaXRzID0gXCJrcGhcIjsgLy8gb3IgbXBoXG5cbiAgc3RhdGljIHNlbGVjdGVkRGF5ID0gMDtcbn1cbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Vbml0U2VsZWN0b3IuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Vbml0U2VsZWN0b3IuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IENhY2hlIGZyb20gXCIuL0NhY2hlXCI7XG5pbXBvcnQgXCIuLi8uLi9jc3MvY29tcG9uZW50cy9Vbml0U2VsZWN0b3IuY3NzXCI7XG5pbXBvcnQgUHVic3ViIGZyb20gXCIuLi9QdWJzdWJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVW5pdFNlbGVjdG9yIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRoaXMuY29udGFpbmVyLmlkID0gXCJ1bml0U2VsZWN0b3JDb250YWluZXJcIjtcblxuICAgIHRoaXMuZGl2QyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGhpcy5kaXZDLmlubmVyVGV4dCA9IFwiwrBDXCI7XG5cbiAgICB0aGlzLmRpdkYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRoaXMuZGl2Ri5pbm5lclRleHQgPSBcIsKwRlwiO1xuXG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kKHRoaXMuZGl2QywgdGhpcy5kaXZGKTtcblxuICAgIGlmIChDYWNoZS50ZW1wVW5pdHMgPT09IFwiY1wiKSB7XG4gICAgICB0aGlzLmRpdkMuY2xhc3NMaXN0LnRvZ2dsZShcInNlbGVjdGVkXCIpO1xuICAgIH0gZWxzZSB0aGlzLmRpdkYuY2xhc3NMaXN0LnRvZ2dsZShcInNlbGVjdGVkXCIpO1xuXG4gICAgdGhpcy5iaW5kRXZlbnRzKCk7XG4gIH1cblxuICBiaW5kRXZlbnRzKCkge1xuICAgIHRoaXMuZGl2Qy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5kaXZGLmNsYXNzTGlzdC5yZW1vdmUoXCJzZWxlY3RlZFwiKTtcbiAgICAgIHRoaXMuZGl2Qy5jbGFzc0xpc3QuYWRkKFwic2VsZWN0ZWRcIik7XG4gICAgICBDYWNoZS50ZW1wVW5pdHMgPSBcImNcIjtcbiAgICAgIENhY2hlLndpbmRVbml0cyA9IFwia3BoXCI7XG4gICAgICBQdWJzdWIuZW1pdChcInJlbmRlckhlYWRlclwiLCBDYWNoZS5zZWxlY3RlZERheSk7XG4gICAgICBQdWJzdWIuZW1pdChcInJlbmRlckRheXNCYXJcIik7XG4gICAgICBQdWJzdWIuZW1pdChcInJlbmRlckdyYXBoXCIsIENhY2hlLnNlbGVjdGVkRGF5KTtcbiAgICB9KTtcbiAgICB0aGlzLmRpdkYuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIHRoaXMuZGl2Qy5jbGFzc0xpc3QucmVtb3ZlKFwic2VsZWN0ZWRcIik7XG4gICAgICB0aGlzLmRpdkYuY2xhc3NMaXN0LmFkZChcInNlbGVjdGVkXCIpO1xuICAgICAgQ2FjaGUudGVtcFVuaXRzID0gXCJmXCI7XG4gICAgICBDYWNoZS53aW5kVW5pdHMgPSBcIm1waFwiO1xuICAgICAgUHVic3ViLmVtaXQoXCJyZW5kZXJIZWFkZXJcIiwgQ2FjaGUuc2VsZWN0ZWREYXkpO1xuICAgICAgUHVic3ViLmVtaXQoXCJyZW5kZXJEYXlzQmFyXCIpO1xuICAgICAgUHVic3ViLmVtaXQoXCJyZW5kZXJHcmFwaFwiLCBDYWNoZS5zZWxlY3RlZERheSk7XG4gICAgfSk7XG4gIH1cbn1cbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9IZWFkZXIuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9IZWFkZXIuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFB1YnN1YiBmcm9tIFwiLi4vUHVic3ViXCI7XG5pbXBvcnQgU2VhcmNoQmFyIGZyb20gXCIuL1NlYXJjaEJhclwiO1xuaW1wb3J0IFVuaXRTZWxlY3RvciBmcm9tIFwiLi9Vbml0U2VsZWN0b3JcIjtcbmltcG9ydCBDYWNoZSBmcm9tIFwiLi9DYWNoZVwiO1xuaW1wb3J0IFwiLi4vLi4vY3NzL2NvbXBvbmVudHMvSGVhZGVyLmNzc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIZWFkZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvLyBET01cbiAgICB0aGlzLmNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGhpcy5jb250YWluZXIuaWQgPSBcImhlYWRlckNvbnRhaW5lclwiO1xuXG4gICAgdGhpcy5pbWdJY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcbiAgICB0aGlzLmltZ0ljb24uaWQgPSBcImhlYWRlckljb25cIjtcblxuICAgIHRoaXMuZGl2VGVtcGVyYXR1cmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRoaXMuZGl2VGVtcGVyYXR1cmUuaWQgPSBcImhlYWRlclRlbXBlcmF0dXJlXCI7XG5cbiAgICB0aGlzLmRpdkh1bWlkaXR5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0aGlzLmRpdkh1bWlkaXR5LmlkID0gXCJoZWFkZXJIdW1pZGl0eVwiO1xuXG4gICAgdGhpcy5kaXZXaW5kU3BlZWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRoaXMuZGl2V2luZFNwZWVkLmlkID0gXCJoZWFkZXJXaW5kXCI7XG5cbiAgICB0aGlzLmRpdkNoYW5jZVJhaW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRoaXMuZGl2Q2hhbmNlUmFpbi5pZCA9IFwiaGVhZGVyQ2hhbmNlUmFpblwiO1xuXG4gICAgdGhpcy5kaXZEYXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRoaXMuZGl2RGF5LmlkID0gXCJoZWFkZXJEYXlcIjtcblxuICAgIHRoaXMuZGl2Q29uZGl0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0aGlzLmRpdkNvbmRpdGlvbi5pZCA9IFwiaGVhZGVyQ29uZGl0aW9uXCI7XG5cbiAgICB0aGlzLmRpdkxvY2F0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0aGlzLmRpdkxvY2F0aW9uLmlkID0gXCJoZWFkZXJMb2NhdGlvblwiO1xuXG4gICAgdGhpcy5zZWFyY2hCYXIgPSBuZXcgU2VhcmNoQmFyKCk7XG5cbiAgICB0aGlzLnVuaXRTZWxlY3RvciA9IG5ldyBVbml0U2VsZWN0b3IoKTtcblxuICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZChcbiAgICAgIHRoaXMuaW1nSWNvbixcbiAgICAgIHRoaXMuZGl2VGVtcGVyYXR1cmUsXG4gICAgICB0aGlzLmRpdkh1bWlkaXR5LFxuICAgICAgdGhpcy5kaXZXaW5kU3BlZWQsXG4gICAgICB0aGlzLmRpdkNoYW5jZVJhaW4sXG4gICAgICB0aGlzLmRpdkRheSxcbiAgICAgIHRoaXMuZGl2Q29uZGl0aW9uLFxuICAgICAgdGhpcy5zZWFyY2hCYXIuY29udGFpbmVyLFxuICAgICAgdGhpcy5kaXZMb2NhdGlvbixcbiAgICAgIHRoaXMudW5pdFNlbGVjdG9yLmNvbnRhaW5lcixcbiAgICApO1xuICAgIHRoaXMuYmluZEV2ZW50cygpO1xuICB9XG5cbiAgYmluZEV2ZW50cygpIHtcbiAgICBQdWJzdWIub24oXCJyZW5kZXJIZWFkZXJcIiwgKGluZGV4KSA9PiB7XG4gICAgICAvLyBUaGlzIGRhdGEgaXMgYWNjZXNzZWQgdGhlIHNhbWUgd2F5IGlycmVzcGVjdGl2ZSBvZiBpbmRleFxuICAgICAgY29uc3QgeyBpY29uIH0gPVxuICAgICAgICBDYWNoZS5jYWNoZWREYXRhLmZvcmVjYXN0LmZvcmVjYXN0ZGF5W2luZGV4XS5kYXkuY29uZGl0aW9uO1xuICAgICAgY29uc3QgY2hhbmNlT2ZSYWluID1cbiAgICAgICAgQ2FjaGUuY2FjaGVkRGF0YS5mb3JlY2FzdC5mb3JlY2FzdGRheVtpbmRleF0uZGF5LmRhaWx5X2NoYW5jZV9vZl9yYWluO1xuICAgICAgY29uc3QgY29uZGl0aW9uID1cbiAgICAgICAgQ2FjaGUuY2FjaGVkRGF0YS5mb3JlY2FzdC5mb3JlY2FzdGRheVtpbmRleF0uZGF5LmNvbmRpdGlvbi50ZXh0O1xuICAgICAgY29uc3QgZGF5ID0gbmV3IERhdGUoXG4gICAgICAgIENhY2hlLmNhY2hlZERhdGEuZm9yZWNhc3QuZm9yZWNhc3RkYXlbaW5kZXhdLmRhdGUsXG4gICAgICApLnRvTG9jYWxlRGF0ZVN0cmluZyhcImVuLVVTXCIsIHtcbiAgICAgICAgd2Vla2RheTogXCJsb25nXCIsXG4gICAgICAgIGRheTogXCJudW1lcmljXCIsXG4gICAgICAgIG1vbnRoOiBcImxvbmdcIixcbiAgICAgICAgdGltZVpvbmU6IFwiVVRDXCIsXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGxvY2F0aW9uID0gYCR7Q2FjaGUuY2FjaGVkRGF0YS5sb2NhdGlvbi5uYW1lfSwgJHtDYWNoZS5jYWNoZWREYXRhLmxvY2F0aW9uLmNvdW50cnl9YDtcblxuICAgICAgLy8gVGhpcyBkYXRhIGlzIGFjY2Vzc2VkIGRpZmZlcmVudGx5IGlmIGluZGV4ID09PSAwXG4gICAgICBsZXQgdGVtcDtcbiAgICAgIGxldCBodW1pZGl0eTtcbiAgICAgIGxldCB3aW5kO1xuICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgIC8vIGluZGV4IDAgZGVub3RlcyB0aGUgQ3VycmVudCBkYXksIGFzIG9wcG9zZWQgdG8gYSBmb3JlY2FzdGVkIGRheVxuICAgICAgICB0ZW1wID0gTWF0aC5mbG9vcihDYWNoZS5jYWNoZWREYXRhLmN1cnJlbnRbYHRlbXBfJHtDYWNoZS50ZW1wVW5pdHN9YF0pO1xuICAgICAgICBodW1pZGl0eSA9IENhY2hlLmNhY2hlZERhdGEuY3VycmVudC5odW1pZGl0eTtcbiAgICAgICAgd2luZCA9IENhY2hlLmNhY2hlZERhdGEuY3VycmVudFtgd2luZF8ke0NhY2hlLndpbmRVbml0c31gXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGlmIGluZGV4ICE9PSAwIGl0IG11c3QgYWNjZXNzIGRhdGEgZnJvbSB0aGUgZm9yY2FzdCBzZWN0aW9uXG4gICAgICAgIHRlbXAgPSBNYXRoLmZsb29yKFxuICAgICAgICAgIENhY2hlLmNhY2hlZERhdGEuZm9yZWNhc3QuZm9yZWNhc3RkYXlbaW5kZXhdLmRheVtcbiAgICAgICAgICAgIGBhdmd0ZW1wXyR7Q2FjaGUudGVtcFVuaXRzfWBcbiAgICAgICAgICBdLFxuICAgICAgICApO1xuICAgICAgICBodW1pZGl0eSA9IENhY2hlLmNhY2hlZERhdGEuZm9yZWNhc3QuZm9yZWNhc3RkYXlbaW5kZXhdLmRheS5hdmdodW1pZGl0eTtcbiAgICAgICAgd2luZCA9XG4gICAgICAgICAgQ2FjaGUuY2FjaGVkRGF0YS5mb3JlY2FzdC5mb3JlY2FzdGRheVtpbmRleF0uZGF5W1xuICAgICAgICAgICAgYG1heHdpbmRfJHtDYWNoZS53aW5kVW5pdHN9YFxuICAgICAgICAgIF07XG4gICAgICB9XG5cbiAgICAgIHRoaXMucmVuZGVyKHtcbiAgICAgICAgaWNvbixcbiAgICAgICAgdGVtcCxcbiAgICAgICAgaHVtaWRpdHksXG4gICAgICAgIHdpbmQsXG4gICAgICAgIGNoYW5jZU9mUmFpbixcbiAgICAgICAgZGF5LFxuICAgICAgICBjb25kaXRpb24sXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICByZW5kZXIoZGF0YSkge1xuICAgIHRoaXMuaW1nSWNvbi5zcmMgPSBkYXRhLmljb247XG4gICAgdGhpcy5kaXZUZW1wZXJhdHVyZS5pbm5lclRleHQgPSBgJHtkYXRhLnRlbXB9wrBgO1xuICAgIHRoaXMuZGl2SHVtaWRpdHkuaW5uZXJUZXh0ID0gYEh1bWlkaXR5OiAke2RhdGEuaHVtaWRpdHl9JWA7XG4gICAgdGhpcy5kaXZXaW5kU3BlZWQuaW5uZXJUZXh0ID0gYFdpbmQgc3BlZWQ6ICR7ZGF0YS53aW5kfSAke0NhY2hlLndpbmRVbml0c31gO1xuICAgIHRoaXMuZGl2Q2hhbmNlUmFpbi5pbm5lclRleHQgPSBgQ2hhbmNlIG9mIHJhaW46ICR7ZGF0YS5jaGFuY2VPZlJhaW59JWA7XG4gICAgdGhpcy5kaXZEYXkuaW5uZXJUZXh0ID0gZGF0YS5kYXk7XG4gICAgdGhpcy5kaXZDb25kaXRpb24uaW5uZXJUZXh0ID0gZGF0YS5jb25kaXRpb247XG4gICAgdGhpcy5kaXZMb2NhdGlvbi5pbm5lclRleHQgPSBkYXRhLmxvY2F0aW9uO1xuICB9XG59XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vRGF5LmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vRGF5LmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBcIi4uLy4uL2Nzcy9jb21wb25lbnRzL0RheS5jc3NcIjtcbmltcG9ydCBQdWJzdWIgZnJvbSBcIi4uL1B1YnN1YlwiO1xuaW1wb3J0IENhY2hlIGZyb20gXCIuL0NhY2hlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERheSB7XG4gIGNvbnN0cnVjdG9yKGluZGV4LCBjdXJyZW50ID0gZmFsc2UpIHtcbiAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgdGhpcy5pc0N1cnJlbnREYXkgPSBjdXJyZW50O1xuICAgIC8vIERPTVxuICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0aGlzLmNvbnRhaW5lci5pZCA9IFwiZGF5Q29udGFpbmVyXCI7XG4gICAgaWYgKGN1cnJlbnQpIHtcbiAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJzZWxlY3RlZFwiKTtcbiAgICB9XG5cbiAgICB0aGlzLmltZ0ljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xuICAgIHRoaXMuaW1nSWNvbi5pZCA9IFwiZGF5SWNvblwiO1xuXG4gICAgdGhpcy5kaXZEYXlPZldlZWsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRoaXMuZGl2RGF5T2ZXZWVrLmlkID0gXCJkYXlEYXlcIjtcblxuICAgIHRoaXMuZGl2VGVtcGVyYXR1cmVNQVggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRoaXMuZGl2VGVtcGVyYXR1cmVNQVguaWQgPSBcImRheU1heFwiO1xuXG4gICAgdGhpcy5kaXZUZW1wZXJhdHVyZU1JTiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGhpcy5kaXZUZW1wZXJhdHVyZU1JTi5pZCA9IFwiZGF5TWluXCI7XG5cbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmQoXG4gICAgICB0aGlzLmltZ0ljb24sXG4gICAgICB0aGlzLmRpdkRheU9mV2VlayxcbiAgICAgIHRoaXMuZGl2VGVtcGVyYXR1cmVNQVgsXG4gICAgICB0aGlzLmRpdlRlbXBlcmF0dXJlTUlOLFxuICAgICk7XG5cbiAgICAvLyBFVkVOVFNcbiAgICB0aGlzLmJpbmRFdmVudHMoKTtcbiAgfVxuXG4gIHJlbmRlcihkYXRhKSB7XG4gICAgdGhpcy5jYWNoZWREYXRhID0gZGF0YTtcbiAgICB0aGlzLmltZ0ljb24uc3JjID0gZGF0YS5kYXkuY29uZGl0aW9uLmljb247XG4gICAgdGhpcy5kaXZEYXlPZldlZWsuaW5uZXJUZXh0ID0gbmV3IERhdGUoXG4gICAgICBkYXRhLmRhdGVfZXBvY2ggKiAxMDAwLFxuICAgICkudG9Mb2NhbGVEYXRlU3RyaW5nKFwiZW4tVVNcIiwgeyB3ZWVrZGF5OiBcInNob3J0XCIsIHRpbWVab25lOiBcIlVUQ1wiIH0pO1xuICAgIHRoaXMuZGl2VGVtcGVyYXR1cmVNQVguaW5uZXJUZXh0ID0gYCR7XG4gICAgICBkYXRhLmRheVtgbWF4dGVtcF8ke0NhY2hlLnRlbXBVbml0c31gXVxuICAgIH3CsGA7XG4gICAgdGhpcy5kaXZUZW1wZXJhdHVyZU1JTi5pbm5lclRleHQgPSBgJHtcbiAgICAgIGRhdGEuZGF5W2BtaW50ZW1wXyR7Q2FjaGUudGVtcFVuaXRzfWBdXG4gICAgfcKwYDtcbiAgfVxuXG4gIGJpbmRFdmVudHMoKSB7XG4gICAgdGhpcy5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIFB1YnN1Yi5lbWl0KFwicmVuZGVySGVhZGVyXCIsIHRoaXMuaW5kZXgpO1xuICAgICAgUHVic3ViLmVtaXQoXCJyZW5kZXJHcmFwaFwiLCB0aGlzLmluZGV4KTtcbiAgICAgIFB1YnN1Yi5lbWl0KFwicmVuZGVySG91cmx5XCIsIHRoaXMuaW5kZXgpO1xuICAgICAgUHVic3ViLmVtaXQoXCJzZWxlY3RlZERheVwiLCB0aGlzLmluZGV4KTtcbiAgICB9KTtcbiAgfVxufVxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0RheXNCYXIuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9EYXlzQmFyLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBQdWJzdWIgZnJvbSBcIi4uL1B1YnN1YlwiO1xuaW1wb3J0IERheSBmcm9tIFwiLi9EYXlcIjtcbmltcG9ydCBDYWNoZSBmcm9tIFwiLi9DYWNoZVwiO1xuaW1wb3J0IFwiLi4vLi4vY3NzL2NvbXBvbmVudHMvRGF5c0Jhci5jc3NcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGF5c0JhciB7XG4gIGRheXMgPSBbXTtcblxuICBjb25zdHJ1Y3RvcihhbW91bnQpIHtcbiAgICAvLyBET01cbiAgICB0aGlzLmNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGhpcy5jb250YWluZXIuaWQgPSBcImNvbnRhaW5lclwiO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbW91bnQ7IGkrKykge1xuICAgICAgY29uc3QgaXNDdXJyZW50RGF5ID0gaSA9PT0gMDtcbiAgICAgIHRoaXMuZGF5cy5wdXNoKG5ldyBEYXkoaSwgaXNDdXJyZW50RGF5KSk7XG4gICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmQodGhpcy5kYXlzW2ldLmNvbnRhaW5lcik7XG4gICAgfVxuXG4gICAgLy8gRVZFTlRTXG4gICAgdGhpcy5iaW5kRXZlbnRzKCk7XG4gIH1cblxuICBiaW5kRXZlbnRzKCkge1xuICAgIFB1YnN1Yi5vbihcInNlbGVjdGVkRGF5XCIsIChpbmRleCkgPT4ge1xuICAgICAgdGhpcy5kYXlzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgZWxlbWVudC5jb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZShcInNlbGVjdGVkXCIpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmRheXNbaW5kZXhdLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwic2VsZWN0ZWRcIik7XG5cbiAgICAgIENhY2hlLnNlbGVjdGVkRGF5ID0gaW5kZXg7XG4gICAgfSk7XG4gICAgUHVic3ViLm9uKFwicmVuZGVyRGF5c0JhclwiLCAoKSA9PiB7XG4gICAgICB0aGlzLnJlbmRlcihDYWNoZS5jYWNoZWREYXRhKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJlbmRlcihkYXRhKSB7XG4gICAgdGhpcy5kYXlzLmZvckVhY2goKGRheSkgPT4ge1xuICAgICAgZGF5LnJlbmRlcihkYXRhLmZvcmVjYXN0LmZvcmVjYXN0ZGF5W2RheS5pbmRleF0pO1xuICAgIH0pO1xuICB9XG59XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTG9hZGluZy5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0xvYWRpbmcuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IGltZ0xvYWRpbmcgZnJvbSBcIi4uLy4uL2ltZy9sb2FkaW5nLnN2Z1wiO1xuaW1wb3J0IFwiLi4vLi4vY3NzL2NvbXBvbmVudHMvTG9hZGluZy5jc3NcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9hZGluZyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0aGlzLmNvbnRhaW5lci5pZCA9IFwibG9hZGluZ0NvbnRhaW5lclwiO1xuICAgIHRoaXMud2hlZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xuICAgIHRoaXMud2hlZWwuY2xhc3NMaXN0ID0gXCJsb2FkaW5nV2hlZWxcIjtcbiAgICB0aGlzLndoZWVsLnNyYyA9IGltZ0xvYWRpbmc7XG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kKHRoaXMud2hlZWwpO1xuICB9XG59XG4iLCIvKiFcbiAqIEBrdXJrbGUvY29sb3IgdjAuMy4yXG4gKiBodHRwczovL2dpdGh1Yi5jb20va3Vya2xlL2NvbG9yI3JlYWRtZVxuICogKGMpIDIwMjMgSnVra2EgS3Vya2VsYVxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKi9cbmZ1bmN0aW9uIHJvdW5kKHYpIHtcbiAgcmV0dXJuIHYgKyAwLjUgfCAwO1xufVxuY29uc3QgbGltID0gKHYsIGwsIGgpID0+IE1hdGgubWF4KE1hdGgubWluKHYsIGgpLCBsKTtcbmZ1bmN0aW9uIHAyYih2KSB7XG4gIHJldHVybiBsaW0ocm91bmQodiAqIDIuNTUpLCAwLCAyNTUpO1xufVxuZnVuY3Rpb24gYjJwKHYpIHtcbiAgcmV0dXJuIGxpbShyb3VuZCh2IC8gMi41NSksIDAsIDEwMCk7XG59XG5mdW5jdGlvbiBuMmIodikge1xuICByZXR1cm4gbGltKHJvdW5kKHYgKiAyNTUpLCAwLCAyNTUpO1xufVxuZnVuY3Rpb24gYjJuKHYpIHtcbiAgcmV0dXJuIGxpbShyb3VuZCh2IC8gMi41NSkgLyAxMDAsIDAsIDEpO1xufVxuZnVuY3Rpb24gbjJwKHYpIHtcbiAgcmV0dXJuIGxpbShyb3VuZCh2ICogMTAwKSwgMCwgMTAwKTtcbn1cblxuY29uc3QgbWFwJDEgPSB7MDogMCwgMTogMSwgMjogMiwgMzogMywgNDogNCwgNTogNSwgNjogNiwgNzogNywgODogOCwgOTogOSwgQTogMTAsIEI6IDExLCBDOiAxMiwgRDogMTMsIEU6IDE0LCBGOiAxNSwgYTogMTAsIGI6IDExLCBjOiAxMiwgZDogMTMsIGU6IDE0LCBmOiAxNX07XG5jb25zdCBoZXggPSBbLi4uJzAxMjM0NTY3ODlBQkNERUYnXTtcbmNvbnN0IGgxID0gYiA9PiBoZXhbYiAmIDB4Rl07XG5jb25zdCBoMiA9IGIgPT4gaGV4WyhiICYgMHhGMCkgPj4gNF0gKyBoZXhbYiAmIDB4Rl07XG5jb25zdCBlcSA9IGIgPT4gKChiICYgMHhGMCkgPj4gNCkgPT09IChiICYgMHhGKTtcbmNvbnN0IGlzU2hvcnQgPSB2ID0+IGVxKHYucikgJiYgZXEodi5nKSAmJiBlcSh2LmIpICYmIGVxKHYuYSk7XG5mdW5jdGlvbiBoZXhQYXJzZShzdHIpIHtcbiAgdmFyIGxlbiA9IHN0ci5sZW5ndGg7XG4gIHZhciByZXQ7XG4gIGlmIChzdHJbMF0gPT09ICcjJykge1xuICAgIGlmIChsZW4gPT09IDQgfHwgbGVuID09PSA1KSB7XG4gICAgICByZXQgPSB7XG4gICAgICAgIHI6IDI1NSAmIG1hcCQxW3N0clsxXV0gKiAxNyxcbiAgICAgICAgZzogMjU1ICYgbWFwJDFbc3RyWzJdXSAqIDE3LFxuICAgICAgICBiOiAyNTUgJiBtYXAkMVtzdHJbM11dICogMTcsXG4gICAgICAgIGE6IGxlbiA9PT0gNSA/IG1hcCQxW3N0cls0XV0gKiAxNyA6IDI1NVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGxlbiA9PT0gNyB8fCBsZW4gPT09IDkpIHtcbiAgICAgIHJldCA9IHtcbiAgICAgICAgcjogbWFwJDFbc3RyWzFdXSA8PCA0IHwgbWFwJDFbc3RyWzJdXSxcbiAgICAgICAgZzogbWFwJDFbc3RyWzNdXSA8PCA0IHwgbWFwJDFbc3RyWzRdXSxcbiAgICAgICAgYjogbWFwJDFbc3RyWzVdXSA8PCA0IHwgbWFwJDFbc3RyWzZdXSxcbiAgICAgICAgYTogbGVuID09PSA5ID8gKG1hcCQxW3N0cls3XV0gPDwgNCB8IG1hcCQxW3N0cls4XV0pIDogMjU1XG4gICAgICB9O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmV0O1xufVxuY29uc3QgYWxwaGEgPSAoYSwgZikgPT4gYSA8IDI1NSA/IGYoYSkgOiAnJztcbmZ1bmN0aW9uIGhleFN0cmluZyh2KSB7XG4gIHZhciBmID0gaXNTaG9ydCh2KSA/IGgxIDogaDI7XG4gIHJldHVybiB2XG4gICAgPyAnIycgKyBmKHYucikgKyBmKHYuZykgKyBmKHYuYikgKyBhbHBoYSh2LmEsIGYpXG4gICAgOiB1bmRlZmluZWQ7XG59XG5cbmNvbnN0IEhVRV9SRSA9IC9eKGhzbGE/fGh3Ynxoc3YpXFwoXFxzKihbLSsuZVxcZF0rKSg/OmRlZyk/W1xccyxdKyhbLSsuZVxcZF0rKSVbXFxzLF0rKFstKy5lXFxkXSspJSg/OltcXHMsXSsoWy0rLmVcXGRdKykoJSk/KT9cXHMqXFwpJC87XG5mdW5jdGlvbiBoc2wycmdibihoLCBzLCBsKSB7XG4gIGNvbnN0IGEgPSBzICogTWF0aC5taW4obCwgMSAtIGwpO1xuICBjb25zdCBmID0gKG4sIGsgPSAobiArIGggLyAzMCkgJSAxMikgPT4gbCAtIGEgKiBNYXRoLm1heChNYXRoLm1pbihrIC0gMywgOSAtIGssIDEpLCAtMSk7XG4gIHJldHVybiBbZigwKSwgZig4KSwgZig0KV07XG59XG5mdW5jdGlvbiBoc3YycmdibihoLCBzLCB2KSB7XG4gIGNvbnN0IGYgPSAobiwgayA9IChuICsgaCAvIDYwKSAlIDYpID0+IHYgLSB2ICogcyAqIE1hdGgubWF4KE1hdGgubWluKGssIDQgLSBrLCAxKSwgMCk7XG4gIHJldHVybiBbZig1KSwgZigzKSwgZigxKV07XG59XG5mdW5jdGlvbiBod2IycmdibihoLCB3LCBiKSB7XG4gIGNvbnN0IHJnYiA9IGhzbDJyZ2JuKGgsIDEsIDAuNSk7XG4gIGxldCBpO1xuICBpZiAodyArIGIgPiAxKSB7XG4gICAgaSA9IDEgLyAodyArIGIpO1xuICAgIHcgKj0gaTtcbiAgICBiICo9IGk7XG4gIH1cbiAgZm9yIChpID0gMDsgaSA8IDM7IGkrKykge1xuICAgIHJnYltpXSAqPSAxIC0gdyAtIGI7XG4gICAgcmdiW2ldICs9IHc7XG4gIH1cbiAgcmV0dXJuIHJnYjtcbn1cbmZ1bmN0aW9uIGh1ZVZhbHVlKHIsIGcsIGIsIGQsIG1heCkge1xuICBpZiAociA9PT0gbWF4KSB7XG4gICAgcmV0dXJuICgoZyAtIGIpIC8gZCkgKyAoZyA8IGIgPyA2IDogMCk7XG4gIH1cbiAgaWYgKGcgPT09IG1heCkge1xuICAgIHJldHVybiAoYiAtIHIpIC8gZCArIDI7XG4gIH1cbiAgcmV0dXJuIChyIC0gZykgLyBkICsgNDtcbn1cbmZ1bmN0aW9uIHJnYjJoc2wodikge1xuICBjb25zdCByYW5nZSA9IDI1NTtcbiAgY29uc3QgciA9IHYuciAvIHJhbmdlO1xuICBjb25zdCBnID0gdi5nIC8gcmFuZ2U7XG4gIGNvbnN0IGIgPSB2LmIgLyByYW5nZTtcbiAgY29uc3QgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG4gIGNvbnN0IG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuICBjb25zdCBsID0gKG1heCArIG1pbikgLyAyO1xuICBsZXQgaCwgcywgZDtcbiAgaWYgKG1heCAhPT0gbWluKSB7XG4gICAgZCA9IG1heCAtIG1pbjtcbiAgICBzID0gbCA+IDAuNSA/IGQgLyAoMiAtIG1heCAtIG1pbikgOiBkIC8gKG1heCArIG1pbik7XG4gICAgaCA9IGh1ZVZhbHVlKHIsIGcsIGIsIGQsIG1heCk7XG4gICAgaCA9IGggKiA2MCArIDAuNTtcbiAgfVxuICByZXR1cm4gW2ggfCAwLCBzIHx8IDAsIGxdO1xufVxuZnVuY3Rpb24gY2FsbG4oZiwgYSwgYiwgYykge1xuICByZXR1cm4gKFxuICAgIEFycmF5LmlzQXJyYXkoYSlcbiAgICAgID8gZihhWzBdLCBhWzFdLCBhWzJdKVxuICAgICAgOiBmKGEsIGIsIGMpXG4gICkubWFwKG4yYik7XG59XG5mdW5jdGlvbiBoc2wycmdiKGgsIHMsIGwpIHtcbiAgcmV0dXJuIGNhbGxuKGhzbDJyZ2JuLCBoLCBzLCBsKTtcbn1cbmZ1bmN0aW9uIGh3YjJyZ2IoaCwgdywgYikge1xuICByZXR1cm4gY2FsbG4oaHdiMnJnYm4sIGgsIHcsIGIpO1xufVxuZnVuY3Rpb24gaHN2MnJnYihoLCBzLCB2KSB7XG4gIHJldHVybiBjYWxsbihoc3YycmdibiwgaCwgcywgdik7XG59XG5mdW5jdGlvbiBodWUoaCkge1xuICByZXR1cm4gKGggJSAzNjAgKyAzNjApICUgMzYwO1xufVxuZnVuY3Rpb24gaHVlUGFyc2Uoc3RyKSB7XG4gIGNvbnN0IG0gPSBIVUVfUkUuZXhlYyhzdHIpO1xuICBsZXQgYSA9IDI1NTtcbiAgbGV0IHY7XG4gIGlmICghbSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAobVs1XSAhPT0gdikge1xuICAgIGEgPSBtWzZdID8gcDJiKCttWzVdKSA6IG4yYigrbVs1XSk7XG4gIH1cbiAgY29uc3QgaCA9IGh1ZSgrbVsyXSk7XG4gIGNvbnN0IHAxID0gK21bM10gLyAxMDA7XG4gIGNvbnN0IHAyID0gK21bNF0gLyAxMDA7XG4gIGlmIChtWzFdID09PSAnaHdiJykge1xuICAgIHYgPSBod2IycmdiKGgsIHAxLCBwMik7XG4gIH0gZWxzZSBpZiAobVsxXSA9PT0gJ2hzdicpIHtcbiAgICB2ID0gaHN2MnJnYihoLCBwMSwgcDIpO1xuICB9IGVsc2Uge1xuICAgIHYgPSBoc2wycmdiKGgsIHAxLCBwMik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICByOiB2WzBdLFxuICAgIGc6IHZbMV0sXG4gICAgYjogdlsyXSxcbiAgICBhOiBhXG4gIH07XG59XG5mdW5jdGlvbiByb3RhdGUodiwgZGVnKSB7XG4gIHZhciBoID0gcmdiMmhzbCh2KTtcbiAgaFswXSA9IGh1ZShoWzBdICsgZGVnKTtcbiAgaCA9IGhzbDJyZ2IoaCk7XG4gIHYuciA9IGhbMF07XG4gIHYuZyA9IGhbMV07XG4gIHYuYiA9IGhbMl07XG59XG5mdW5jdGlvbiBoc2xTdHJpbmcodikge1xuICBpZiAoIXYpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgYSA9IHJnYjJoc2wodik7XG4gIGNvbnN0IGggPSBhWzBdO1xuICBjb25zdCBzID0gbjJwKGFbMV0pO1xuICBjb25zdCBsID0gbjJwKGFbMl0pO1xuICByZXR1cm4gdi5hIDwgMjU1XG4gICAgPyBgaHNsYSgke2h9LCAke3N9JSwgJHtsfSUsICR7YjJuKHYuYSl9KWBcbiAgICA6IGBoc2woJHtofSwgJHtzfSUsICR7bH0lKWA7XG59XG5cbmNvbnN0IG1hcCA9IHtcbiAgeDogJ2RhcmsnLFxuICBaOiAnbGlnaHQnLFxuICBZOiAncmUnLFxuICBYOiAnYmx1JyxcbiAgVzogJ2dyJyxcbiAgVjogJ21lZGl1bScsXG4gIFU6ICdzbGF0ZScsXG4gIEE6ICdlZScsXG4gIFQ6ICdvbCcsXG4gIFM6ICdvcicsXG4gIEI6ICdyYScsXG4gIEM6ICdsYXRlZycsXG4gIEQ6ICdpZ2h0cycsXG4gIFI6ICdpbicsXG4gIFE6ICd0dXJxdW9pcycsXG4gIEU6ICdoaScsXG4gIFA6ICdybycsXG4gIE86ICdhbCcsXG4gIE46ICdsZScsXG4gIE06ICdkZScsXG4gIEw6ICd5ZWxsbycsXG4gIEY6ICdlbicsXG4gIEs6ICdjaCcsXG4gIEc6ICdhcmtzJyxcbiAgSDogJ2VhJyxcbiAgSTogJ2lnaHRnJyxcbiAgSjogJ3doJ1xufTtcbmNvbnN0IG5hbWVzJDEgPSB7XG4gIE9pY2VYZTogJ2YwZjhmZicsXG4gIGFudGlxdWV3RXRlOiAnZmFlYmQ3JyxcbiAgYXF1YTogJ2ZmZmYnLFxuICBhcXVhbWFyUmU6ICc3ZmZmZDQnLFxuICBhenVZOiAnZjBmZmZmJyxcbiAgYmVpZ2U6ICdmNWY1ZGMnLFxuICBiaXNxdWU6ICdmZmU0YzQnLFxuICBibGFjazogJzAnLFxuICBibGFuS2VkT21vbmQ6ICdmZmViY2QnLFxuICBYZTogJ2ZmJyxcbiAgWGV2aVRldDogJzhhMmJlMicsXG4gIGJQd246ICdhNTJhMmEnLFxuICBidXJseXdvb2Q6ICdkZWI4ODcnLFxuICBjYU10WGU6ICc1ZjllYTAnLFxuICBLYXJ0WXVzZTogJzdmZmYwMCcsXG4gIEtvY1RhdGU6ICdkMjY5MWUnLFxuICBjU086ICdmZjdmNTAnLFxuICBjU25mbG93ZXJYZTogJzY0OTVlZCcsXG4gIGNTbnNpbGs6ICdmZmY4ZGMnLFxuICBjcmltc29uOiAnZGMxNDNjJyxcbiAgY3lhbjogJ2ZmZmYnLFxuICB4WGU6ICc4YicsXG4gIHhjeWFuOiAnOGI4YicsXG4gIHhnVE1uUGQ6ICdiODg2MGInLFxuICB4V2F5OiAnYTlhOWE5JyxcbiAgeGdZRjogJzY0MDAnLFxuICB4Z1l5OiAnYTlhOWE5JyxcbiAgeGtoYWtpOiAnYmRiNzZiJyxcbiAgeG1hZ0Z0YTogJzhiMDA4YicsXG4gIHhUaXZlZ1lGOiAnNTU2YjJmJyxcbiAgeFNhbmdlOiAnZmY4YzAwJyxcbiAgeFNjRWQ6ICc5OTMyY2MnLFxuICB4WWQ6ICc4YjAwMDAnLFxuICB4c09tb246ICdlOTk2N2EnLFxuICB4c0hnWUY6ICc4ZmJjOGYnLFxuICB4VVhlOiAnNDgzZDhiJyxcbiAgeFVXYXk6ICcyZjRmNGYnLFxuICB4VWdZeTogJzJmNGY0ZicsXG4gIHhRZTogJ2NlZDEnLFxuICB4dmlUZXQ6ICc5NDAwZDMnLFxuICBkQXBwUms6ICdmZjE0OTMnLFxuICBkQXBza3lYZTogJ2JmZmYnLFxuICBkaW1XYXk6ICc2OTY5NjknLFxuICBkaW1nWXk6ICc2OTY5NjknLFxuICBkb2RnZXJYZTogJzFlOTBmZicsXG4gIGZpWWJyaWNrOiAnYjIyMjIyJyxcbiAgZmxTT3dFdGU6ICdmZmZhZjAnLFxuICBmb1lzdFdBbjogJzIyOGIyMicsXG4gIGZ1S3NpYTogJ2ZmMDBmZicsXG4gIGdhUnNiU286ICdkY2RjZGMnLFxuICBnaG9zdHdFdGU6ICdmOGY4ZmYnLFxuICBnVGQ6ICdmZmQ3MDAnLFxuICBnVE1uUGQ6ICdkYWE1MjAnLFxuICBXYXk6ICc4MDgwODAnLFxuICBnWUY6ICc4MDAwJyxcbiAgZ1lGTHc6ICdhZGZmMmYnLFxuICBnWXk6ICc4MDgwODAnLFxuICBob25leU13OiAnZjBmZmYwJyxcbiAgaG90cFJrOiAnZmY2OWI0JyxcbiAgUmRpYW5ZZDogJ2NkNWM1YycsXG4gIFJkaWdvOiAnNGIwMDgyJyxcbiAgaXZTeTogJ2ZmZmZmMCcsXG4gIGtoYWtpOiAnZjBlNjhjJyxcbiAgbGF2Rk1yOiAnZTZlNmZhJyxcbiAgbGF2Rk1yWHNoOiAnZmZmMGY1JyxcbiAgbGF3bmdZRjogJzdjZmMwMCcsXG4gIE5tb25jRWZmb246ICdmZmZhY2QnLFxuICBaWGU6ICdhZGQ4ZTYnLFxuICBaY1NPOiAnZjA4MDgwJyxcbiAgWmN5YW46ICdlMGZmZmYnLFxuICBaZ1RNblBkTHc6ICdmYWZhZDInLFxuICBaV2F5OiAnZDNkM2QzJyxcbiAgWmdZRjogJzkwZWU5MCcsXG4gIFpnWXk6ICdkM2QzZDMnLFxuICBacFJrOiAnZmZiNmMxJyxcbiAgWnNPbW9uOiAnZmZhMDdhJyxcbiAgWnNIZ1lGOiAnMjBiMmFhJyxcbiAgWnNreVhlOiAnODdjZWZhJyxcbiAgWlVXYXk6ICc3Nzg4OTknLFxuICBaVWdZeTogJzc3ODg5OScsXG4gIFpzdEFsWGU6ICdiMGM0ZGUnLFxuICBaTHc6ICdmZmZmZTAnLFxuICBsaW1lOiAnZmYwMCcsXG4gIGxpbWVnWUY6ICczMmNkMzInLFxuICBsUkY6ICdmYWYwZTYnLFxuICBtYWdGdGE6ICdmZjAwZmYnLFxuICBtYVBvbjogJzgwMDAwMCcsXG4gIFZhcXVhbWFyUmU6ICc2NmNkYWEnLFxuICBWWGU6ICdjZCcsXG4gIFZTY0VkOiAnYmE1NWQzJyxcbiAgVnB1cnBOOiAnOTM3MGRiJyxcbiAgVnNIZ1lGOiAnM2NiMzcxJyxcbiAgVlVYZTogJzdiNjhlZScsXG4gIFZzcHJSZ2dZRjogJ2ZhOWEnLFxuICBWUWU6ICc0OGQxY2MnLFxuICBWdmlUZXRZZDogJ2M3MTU4NScsXG4gIG1pZG5pZ2h0WGU6ICcxOTE5NzAnLFxuICBtUnRjWWFtOiAnZjVmZmZhJyxcbiAgbWlzdHlQc2U6ICdmZmU0ZTEnLFxuICBtb2NjYXNSOiAnZmZlNGI1JyxcbiAgbmF2YWpvd0V0ZTogJ2ZmZGVhZCcsXG4gIG5hdnk6ICc4MCcsXG4gIFRkbGFjZTogJ2ZkZjVlNicsXG4gIFRpdmU6ICc4MDgwMDAnLFxuICBUaXZlZEJiOiAnNmI4ZTIzJyxcbiAgU2FuZ2U6ICdmZmE1MDAnLFxuICBTYW5nZVlkOiAnZmY0NTAwJyxcbiAgU2NFZDogJ2RhNzBkNicsXG4gIHBPZWdUTW5QZDogJ2VlZThhYScsXG4gIHBPZWdZRjogJzk4ZmI5OCcsXG4gIHBPZVFlOiAnYWZlZWVlJyxcbiAgcE9ldmlUZXRZZDogJ2RiNzA5MycsXG4gIHBhcGF5YXdFcDogJ2ZmZWZkNScsXG4gIHBIS3B1ZmY6ICdmZmRhYjknLFxuICBwZXJ1OiAnY2Q4NTNmJyxcbiAgcFJrOiAnZmZjMGNiJyxcbiAgcGx1bTogJ2RkYTBkZCcsXG4gIHBvd01yWGU6ICdiMGUwZTYnLFxuICBwdXJwTjogJzgwMDA4MCcsXG4gIFliZWNjYXB1cnBOOiAnNjYzMzk5JyxcbiAgWWQ6ICdmZjAwMDAnLFxuICBQc3licm93bjogJ2JjOGY4ZicsXG4gIFB5T1hlOiAnNDE2OWUxJyxcbiAgc2FkZE5iUHduOiAnOGI0NTEzJyxcbiAgc09tb246ICdmYTgwNzInLFxuICBzYW5keWJQd246ICdmNGE0NjAnLFxuICBzSGdZRjogJzJlOGI1NycsXG4gIHNIc2hlbGw6ICdmZmY1ZWUnLFxuICBzaUZuYTogJ2EwNTIyZCcsXG4gIHNpbHZlcjogJ2MwYzBjMCcsXG4gIHNreVhlOiAnODdjZWViJyxcbiAgVVhlOiAnNmE1YWNkJyxcbiAgVVdheTogJzcwODA5MCcsXG4gIFVnWXk6ICc3MDgwOTAnLFxuICBzbm93OiAnZmZmYWZhJyxcbiAgc3ByUmdnWUY6ICdmZjdmJyxcbiAgc3RBbFhlOiAnNDY4MmI0JyxcbiAgdGFuOiAnZDJiNDhjJyxcbiAgdGVPOiAnODA4MCcsXG4gIHRFc3ROOiAnZDhiZmQ4JyxcbiAgdG9tYXRvOiAnZmY2MzQ3JyxcbiAgUWU6ICc0MGUwZDAnLFxuICB2aVRldDogJ2VlODJlZScsXG4gIEpIdDogJ2Y1ZGViMycsXG4gIHdFdGU6ICdmZmZmZmYnLFxuICB3RXRlc21va2U6ICdmNWY1ZjUnLFxuICBMdzogJ2ZmZmYwMCcsXG4gIEx3Z1lGOiAnOWFjZDMyJ1xufTtcbmZ1bmN0aW9uIHVucGFjaygpIHtcbiAgY29uc3QgdW5wYWNrZWQgPSB7fTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG5hbWVzJDEpO1xuICBjb25zdCB0a2V5cyA9IE9iamVjdC5rZXlzKG1hcCk7XG4gIGxldCBpLCBqLCBrLCBvaywgbms7XG4gIGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgb2sgPSBuayA9IGtleXNbaV07XG4gICAgZm9yIChqID0gMDsgaiA8IHRrZXlzLmxlbmd0aDsgaisrKSB7XG4gICAgICBrID0gdGtleXNbal07XG4gICAgICBuayA9IG5rLnJlcGxhY2UoaywgbWFwW2tdKTtcbiAgICB9XG4gICAgayA9IHBhcnNlSW50KG5hbWVzJDFbb2tdLCAxNik7XG4gICAgdW5wYWNrZWRbbmtdID0gW2sgPj4gMTYgJiAweEZGLCBrID4+IDggJiAweEZGLCBrICYgMHhGRl07XG4gIH1cbiAgcmV0dXJuIHVucGFja2VkO1xufVxuXG5sZXQgbmFtZXM7XG5mdW5jdGlvbiBuYW1lUGFyc2Uoc3RyKSB7XG4gIGlmICghbmFtZXMpIHtcbiAgICBuYW1lcyA9IHVucGFjaygpO1xuICAgIG5hbWVzLnRyYW5zcGFyZW50ID0gWzAsIDAsIDAsIDBdO1xuICB9XG4gIGNvbnN0IGEgPSBuYW1lc1tzdHIudG9Mb3dlckNhc2UoKV07XG4gIHJldHVybiBhICYmIHtcbiAgICByOiBhWzBdLFxuICAgIGc6IGFbMV0sXG4gICAgYjogYVsyXSxcbiAgICBhOiBhLmxlbmd0aCA9PT0gNCA/IGFbM10gOiAyNTVcbiAgfTtcbn1cblxuY29uc3QgUkdCX1JFID0gL15yZ2JhP1xcKFxccyooWy0rLlxcZF0rKSglKT9bXFxzLF0rKFstKy5lXFxkXSspKCUpP1tcXHMsXSsoWy0rLmVcXGRdKykoJSk/KD86W1xccywvXSsoWy0rLmVcXGRdKykoJSk/KT9cXHMqXFwpJC87XG5mdW5jdGlvbiByZ2JQYXJzZShzdHIpIHtcbiAgY29uc3QgbSA9IFJHQl9SRS5leGVjKHN0cik7XG4gIGxldCBhID0gMjU1O1xuICBsZXQgciwgZywgYjtcbiAgaWYgKCFtKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChtWzddICE9PSByKSB7XG4gICAgY29uc3QgdiA9ICttWzddO1xuICAgIGEgPSBtWzhdID8gcDJiKHYpIDogbGltKHYgKiAyNTUsIDAsIDI1NSk7XG4gIH1cbiAgciA9ICttWzFdO1xuICBnID0gK21bM107XG4gIGIgPSArbVs1XTtcbiAgciA9IDI1NSAmIChtWzJdID8gcDJiKHIpIDogbGltKHIsIDAsIDI1NSkpO1xuICBnID0gMjU1ICYgKG1bNF0gPyBwMmIoZykgOiBsaW0oZywgMCwgMjU1KSk7XG4gIGIgPSAyNTUgJiAobVs2XSA/IHAyYihiKSA6IGxpbShiLCAwLCAyNTUpKTtcbiAgcmV0dXJuIHtcbiAgICByOiByLFxuICAgIGc6IGcsXG4gICAgYjogYixcbiAgICBhOiBhXG4gIH07XG59XG5mdW5jdGlvbiByZ2JTdHJpbmcodikge1xuICByZXR1cm4gdiAmJiAoXG4gICAgdi5hIDwgMjU1XG4gICAgICA/IGByZ2JhKCR7di5yfSwgJHt2Lmd9LCAke3YuYn0sICR7YjJuKHYuYSl9KWBcbiAgICAgIDogYHJnYigke3Yucn0sICR7di5nfSwgJHt2LmJ9KWBcbiAgKTtcbn1cblxuY29uc3QgdG8gPSB2ID0+IHYgPD0gMC4wMDMxMzA4ID8gdiAqIDEyLjkyIDogTWF0aC5wb3codiwgMS4wIC8gMi40KSAqIDEuMDU1IC0gMC4wNTU7XG5jb25zdCBmcm9tID0gdiA9PiB2IDw9IDAuMDQwNDUgPyB2IC8gMTIuOTIgOiBNYXRoLnBvdygodiArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xuZnVuY3Rpb24gaW50ZXJwb2xhdGUocmdiMSwgcmdiMiwgdCkge1xuICBjb25zdCByID0gZnJvbShiMm4ocmdiMS5yKSk7XG4gIGNvbnN0IGcgPSBmcm9tKGIybihyZ2IxLmcpKTtcbiAgY29uc3QgYiA9IGZyb20oYjJuKHJnYjEuYikpO1xuICByZXR1cm4ge1xuICAgIHI6IG4yYih0byhyICsgdCAqIChmcm9tKGIybihyZ2IyLnIpKSAtIHIpKSksXG4gICAgZzogbjJiKHRvKGcgKyB0ICogKGZyb20oYjJuKHJnYjIuZykpIC0gZykpKSxcbiAgICBiOiBuMmIodG8oYiArIHQgKiAoZnJvbShiMm4ocmdiMi5iKSkgLSBiKSkpLFxuICAgIGE6IHJnYjEuYSArIHQgKiAocmdiMi5hIC0gcmdiMS5hKVxuICB9O1xufVxuXG5mdW5jdGlvbiBtb2RIU0wodiwgaSwgcmF0aW8pIHtcbiAgaWYgKHYpIHtcbiAgICBsZXQgdG1wID0gcmdiMmhzbCh2KTtcbiAgICB0bXBbaV0gPSBNYXRoLm1heCgwLCBNYXRoLm1pbih0bXBbaV0gKyB0bXBbaV0gKiByYXRpbywgaSA9PT0gMCA/IDM2MCA6IDEpKTtcbiAgICB0bXAgPSBoc2wycmdiKHRtcCk7XG4gICAgdi5yID0gdG1wWzBdO1xuICAgIHYuZyA9IHRtcFsxXTtcbiAgICB2LmIgPSB0bXBbMl07XG4gIH1cbn1cbmZ1bmN0aW9uIGNsb25lKHYsIHByb3RvKSB7XG4gIHJldHVybiB2ID8gT2JqZWN0LmFzc2lnbihwcm90byB8fCB7fSwgdikgOiB2O1xufVxuZnVuY3Rpb24gZnJvbU9iamVjdChpbnB1dCkge1xuICB2YXIgdiA9IHtyOiAwLCBnOiAwLCBiOiAwLCBhOiAyNTV9O1xuICBpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcbiAgICBpZiAoaW5wdXQubGVuZ3RoID49IDMpIHtcbiAgICAgIHYgPSB7cjogaW5wdXRbMF0sIGc6IGlucHV0WzFdLCBiOiBpbnB1dFsyXSwgYTogMjU1fTtcbiAgICAgIGlmIChpbnB1dC5sZW5ndGggPiAzKSB7XG4gICAgICAgIHYuYSA9IG4yYihpbnB1dFszXSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHYgPSBjbG9uZShpbnB1dCwge3I6IDAsIGc6IDAsIGI6IDAsIGE6IDF9KTtcbiAgICB2LmEgPSBuMmIodi5hKTtcbiAgfVxuICByZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIGZ1bmN0aW9uUGFyc2Uoc3RyKSB7XG4gIGlmIChzdHIuY2hhckF0KDApID09PSAncicpIHtcbiAgICByZXR1cm4gcmdiUGFyc2Uoc3RyKTtcbiAgfVxuICByZXR1cm4gaHVlUGFyc2Uoc3RyKTtcbn1cbmNsYXNzIENvbG9yIHtcbiAgY29uc3RydWN0b3IoaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBDb2xvcikge1xuICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cbiAgICBjb25zdCB0eXBlID0gdHlwZW9mIGlucHV0O1xuICAgIGxldCB2O1xuICAgIGlmICh0eXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgdiA9IGZyb21PYmplY3QoaW5wdXQpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHYgPSBoZXhQYXJzZShpbnB1dCkgfHwgbmFtZVBhcnNlKGlucHV0KSB8fCBmdW5jdGlvblBhcnNlKGlucHV0KTtcbiAgICB9XG4gICAgdGhpcy5fcmdiID0gdjtcbiAgICB0aGlzLl92YWxpZCA9ICEhdjtcbiAgfVxuICBnZXQgdmFsaWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbGlkO1xuICB9XG4gIGdldCByZ2IoKSB7XG4gICAgdmFyIHYgPSBjbG9uZSh0aGlzLl9yZ2IpO1xuICAgIGlmICh2KSB7XG4gICAgICB2LmEgPSBiMm4odi5hKTtcbiAgICB9XG4gICAgcmV0dXJuIHY7XG4gIH1cbiAgc2V0IHJnYihvYmopIHtcbiAgICB0aGlzLl9yZ2IgPSBmcm9tT2JqZWN0KG9iaik7XG4gIH1cbiAgcmdiU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLl92YWxpZCA/IHJnYlN0cmluZyh0aGlzLl9yZ2IpIDogdW5kZWZpbmVkO1xuICB9XG4gIGhleFN0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsaWQgPyBoZXhTdHJpbmcodGhpcy5fcmdiKSA6IHVuZGVmaW5lZDtcbiAgfVxuICBoc2xTdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbGlkID8gaHNsU3RyaW5nKHRoaXMuX3JnYikgOiB1bmRlZmluZWQ7XG4gIH1cbiAgbWl4KGNvbG9yLCB3ZWlnaHQpIHtcbiAgICBpZiAoY29sb3IpIHtcbiAgICAgIGNvbnN0IGMxID0gdGhpcy5yZ2I7XG4gICAgICBjb25zdCBjMiA9IGNvbG9yLnJnYjtcbiAgICAgIGxldCB3MjtcbiAgICAgIGNvbnN0IHAgPSB3ZWlnaHQgPT09IHcyID8gMC41IDogd2VpZ2h0O1xuICAgICAgY29uc3QgdyA9IDIgKiBwIC0gMTtcbiAgICAgIGNvbnN0IGEgPSBjMS5hIC0gYzIuYTtcbiAgICAgIGNvbnN0IHcxID0gKCh3ICogYSA9PT0gLTEgPyB3IDogKHcgKyBhKSAvICgxICsgdyAqIGEpKSArIDEpIC8gMi4wO1xuICAgICAgdzIgPSAxIC0gdzE7XG4gICAgICBjMS5yID0gMHhGRiAmIHcxICogYzEuciArIHcyICogYzIuciArIDAuNTtcbiAgICAgIGMxLmcgPSAweEZGICYgdzEgKiBjMS5nICsgdzIgKiBjMi5nICsgMC41O1xuICAgICAgYzEuYiA9IDB4RkYgJiB3MSAqIGMxLmIgKyB3MiAqIGMyLmIgKyAwLjU7XG4gICAgICBjMS5hID0gcCAqIGMxLmEgKyAoMSAtIHApICogYzIuYTtcbiAgICAgIHRoaXMucmdiID0gYzE7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGludGVycG9sYXRlKGNvbG9yLCB0KSB7XG4gICAgaWYgKGNvbG9yKSB7XG4gICAgICB0aGlzLl9yZ2IgPSBpbnRlcnBvbGF0ZSh0aGlzLl9yZ2IsIGNvbG9yLl9yZ2IsIHQpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IENvbG9yKHRoaXMucmdiKTtcbiAgfVxuICBhbHBoYShhKSB7XG4gICAgdGhpcy5fcmdiLmEgPSBuMmIoYSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgY2xlYXJlcihyYXRpbykge1xuICAgIGNvbnN0IHJnYiA9IHRoaXMuX3JnYjtcbiAgICByZ2IuYSAqPSAxIC0gcmF0aW87XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZ3JleXNjYWxlKCkge1xuICAgIGNvbnN0IHJnYiA9IHRoaXMuX3JnYjtcbiAgICBjb25zdCB2YWwgPSByb3VuZChyZ2IuciAqIDAuMyArIHJnYi5nICogMC41OSArIHJnYi5iICogMC4xMSk7XG4gICAgcmdiLnIgPSByZ2IuZyA9IHJnYi5iID0gdmFsO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIG9wYXF1ZXIocmF0aW8pIHtcbiAgICBjb25zdCByZ2IgPSB0aGlzLl9yZ2I7XG4gICAgcmdiLmEgKj0gMSArIHJhdGlvO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIG5lZ2F0ZSgpIHtcbiAgICBjb25zdCB2ID0gdGhpcy5fcmdiO1xuICAgIHYuciA9IDI1NSAtIHYucjtcbiAgICB2LmcgPSAyNTUgLSB2Lmc7XG4gICAgdi5iID0gMjU1IC0gdi5iO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGxpZ2h0ZW4ocmF0aW8pIHtcbiAgICBtb2RIU0wodGhpcy5fcmdiLCAyLCByYXRpbyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZGFya2VuKHJhdGlvKSB7XG4gICAgbW9kSFNMKHRoaXMuX3JnYiwgMiwgLXJhdGlvKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBzYXR1cmF0ZShyYXRpbykge1xuICAgIG1vZEhTTCh0aGlzLl9yZ2IsIDEsIHJhdGlvKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBkZXNhdHVyYXRlKHJhdGlvKSB7XG4gICAgbW9kSFNMKHRoaXMuX3JnYiwgMSwgLXJhdGlvKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICByb3RhdGUoZGVnKSB7XG4gICAgcm90YXRlKHRoaXMuX3JnYiwgZGVnKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG5mdW5jdGlvbiBpbmRleF9lc20oaW5wdXQpIHtcbiAgcmV0dXJuIG5ldyBDb2xvcihpbnB1dCk7XG59XG5cbmV4cG9ydCB7IENvbG9yLCBiMm4sIGIycCwgaW5kZXhfZXNtIGFzIGRlZmF1bHQsIGhleFBhcnNlLCBoZXhTdHJpbmcsIGhzbDJyZ2IsIGhzbFN0cmluZywgaHN2MnJnYiwgaHVlUGFyc2UsIGh3YjJyZ2IsIGxpbSwgbjJiLCBuMnAsIG5hbWVQYXJzZSwgcDJiLCByZ2IyaHNsLCByZ2JQYXJzZSwgcmdiU3RyaW5nLCByb3RhdGUsIHJvdW5kIH07XG4iLCIvKiFcbiAqIENoYXJ0LmpzIHY0LjMuM1xuICogaHR0cHM6Ly93d3cuY2hhcnRqcy5vcmdcbiAqIChjKSAyMDIzIENoYXJ0LmpzIENvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKi9cbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnQGt1cmtsZS9jb2xvcic7XG5cbi8qKlxuICogQG5hbWVzcGFjZSBDaGFydC5oZWxwZXJzXG4gKi8gLyoqXG4gKiBBbiBlbXB0eSBmdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkLCBmb3IgZXhhbXBsZSwgZm9yIG9wdGlvbmFsIGNhbGxiYWNrLlxuICovIGZ1bmN0aW9uIG5vb3AoKSB7XG4vKiBub29wICovIH1cbi8qKlxuICogUmV0dXJucyBhIHVuaXF1ZSBpZCwgc2VxdWVudGlhbGx5IGdlbmVyYXRlZCBmcm9tIGEgZ2xvYmFsIHZhcmlhYmxlLlxuICovIGNvbnN0IHVpZCA9ICgoKT0+e1xuICAgIGxldCBpZCA9IDA7XG4gICAgcmV0dXJuICgpPT5pZCsrO1xufSkoKTtcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGB2YWx1ZWAgaXMgbmVpdGhlciBudWxsIG5vciB1bmRlZmluZWQsIGVsc2UgcmV0dXJucyBmYWxzZS5cbiAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byB0ZXN0LlxuICogQHNpbmNlIDIuNy4wXG4gKi8gZnVuY3Rpb24gaXNOdWxsT3JVbmRlZih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSAoaW5jbHVkaW5nIHR5cGVkIGFycmF5cyksIGVsc2UgcmV0dXJucyBmYWxzZS5cbiAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byB0ZXN0LlxuICogQGZ1bmN0aW9uXG4gKi8gZnVuY3Rpb24gaXNBcnJheSh2YWx1ZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5ICYmIEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCB0eXBlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICBpZiAodHlwZS5zbGljZSgwLCA3KSA9PT0gJ1tvYmplY3QnICYmIHR5cGUuc2xpY2UoLTYpID09PSAnQXJyYXldJykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QgKGV4Y2x1ZGluZyBudWxsKSwgZWxzZSByZXR1cm5zIGZhbHNlLlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIHRlc3QuXG4gKiBAc2luY2UgMi43LjBcbiAqLyBmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBPYmplY3RdJztcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGB2YWx1ZWAgaXMgYSBmaW5pdGUgbnVtYmVyLCBlbHNlIHJldHVybnMgZmFsc2VcbiAqIEBwYXJhbSB2YWx1ZSAgLSBUaGUgdmFsdWUgdG8gdGVzdC5cbiAqLyBmdW5jdGlvbiBpc051bWJlckZpbml0ZSh2YWx1ZSkge1xuICAgIHJldHVybiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCB2YWx1ZSBpbnN0YW5jZW9mIE51bWJlcikgJiYgaXNGaW5pdGUoK3ZhbHVlKTtcbn1cbi8qKlxuICogUmV0dXJucyBgdmFsdWVgIGlmIGZpbml0ZSwgZWxzZSByZXR1cm5zIGBkZWZhdWx0VmFsdWVgLlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIHJldHVybiBpZiBkZWZpbmVkLlxuICogQHBhcmFtIGRlZmF1bHRWYWx1ZSAtIFRoZSB2YWx1ZSB0byByZXR1cm4gaWYgYHZhbHVlYCBpcyBub3QgZmluaXRlLlxuICovIGZ1bmN0aW9uIGZpbml0ZU9yRGVmYXVsdCh2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgcmV0dXJuIGlzTnVtYmVyRmluaXRlKHZhbHVlKSA/IHZhbHVlIDogZGVmYXVsdFZhbHVlO1xufVxuLyoqXG4gKiBSZXR1cm5zIGB2YWx1ZWAgaWYgZGVmaW5lZCwgZWxzZSByZXR1cm5zIGBkZWZhdWx0VmFsdWVgLlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIHJldHVybiBpZiBkZWZpbmVkLlxuICogQHBhcmFtIGRlZmF1bHRWYWx1ZSAtIFRoZSB2YWx1ZSB0byByZXR1cm4gaWYgYHZhbHVlYCBpcyB1bmRlZmluZWQuXG4gKi8gZnVuY3Rpb24gdmFsdWVPckRlZmF1bHQodmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gZGVmYXVsdFZhbHVlIDogdmFsdWU7XG59XG5jb25zdCB0b1BlcmNlbnRhZ2UgPSAodmFsdWUsIGRpbWVuc2lvbik9PnR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUuZW5kc1dpdGgoJyUnKSA/IHBhcnNlRmxvYXQodmFsdWUpIC8gMTAwIDogK3ZhbHVlIC8gZGltZW5zaW9uO1xuY29uc3QgdG9EaW1lbnNpb24gPSAodmFsdWUsIGRpbWVuc2lvbik9PnR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUuZW5kc1dpdGgoJyUnKSA/IHBhcnNlRmxvYXQodmFsdWUpIC8gMTAwICogZGltZW5zaW9uIDogK3ZhbHVlO1xuLyoqXG4gKiBDYWxscyBgZm5gIHdpdGggdGhlIGdpdmVuIGBhcmdzYCBpbiB0aGUgc2NvcGUgZGVmaW5lZCBieSBgdGhpc0FyZ2AgYW5kIHJldHVybnMgdGhlXG4gKiB2YWx1ZSByZXR1cm5lZCBieSBgZm5gLiBJZiBgZm5gIGlzIG5vdCBhIGZ1bmN0aW9uLCB0aGlzIG1ldGhvZCByZXR1cm5zIHVuZGVmaW5lZC5cbiAqIEBwYXJhbSBmbiAtIFRoZSBmdW5jdGlvbiB0byBjYWxsLlxuICogQHBhcmFtIGFyZ3MgLSBUaGUgYXJndW1lbnRzIHdpdGggd2hpY2ggYGZuYCBzaG91bGQgYmUgY2FsbGVkLlxuICogQHBhcmFtIFt0aGlzQXJnXSAtIFRoZSB2YWx1ZSBvZiBgdGhpc2AgcHJvdmlkZWQgZm9yIHRoZSBjYWxsIHRvIGBmbmAuXG4gKi8gZnVuY3Rpb24gY2FsbGJhY2soZm4sIGFyZ3MsIHRoaXNBcmcpIHtcbiAgICBpZiAoZm4gJiYgdHlwZW9mIGZuLmNhbGwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGVhY2gobG9vcGFibGUsIGZuLCB0aGlzQXJnLCByZXZlcnNlKSB7XG4gICAgbGV0IGksIGxlbiwga2V5cztcbiAgICBpZiAoaXNBcnJheShsb29wYWJsZSkpIHtcbiAgICAgICAgbGVuID0gbG9vcGFibGUubGVuZ3RoO1xuICAgICAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICAgICAgZm9yKGkgPSBsZW4gLSAxOyBpID49IDA7IGktLSl7XG4gICAgICAgICAgICAgICAgZm4uY2FsbCh0aGlzQXJnLCBsb29wYWJsZVtpXSwgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBsZW47IGkrKyl7XG4gICAgICAgICAgICAgICAgZm4uY2FsbCh0aGlzQXJnLCBsb29wYWJsZVtpXSwgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGxvb3BhYmxlKSkge1xuICAgICAgICBrZXlzID0gT2JqZWN0LmtleXMobG9vcGFibGUpO1xuICAgICAgICBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgbGVuOyBpKyspe1xuICAgICAgICAgICAgZm4uY2FsbCh0aGlzQXJnLCBsb29wYWJsZVtrZXlzW2ldXSwga2V5c1tpXSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgYGEwYCBhbmQgYGExYCBhcnJheXMgaGF2ZSB0aGUgc2FtZSBjb250ZW50LCBlbHNlIHJldHVybnMgZmFsc2UuXG4gKiBAcGFyYW0gYTAgLSBUaGUgYXJyYXkgdG8gY29tcGFyZVxuICogQHBhcmFtIGExIC0gVGhlIGFycmF5IHRvIGNvbXBhcmVcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2VsZW1lbnRzRXF1YWwoYTAsIGExKSB7XG4gICAgbGV0IGksIGlsZW4sIHYwLCB2MTtcbiAgICBpZiAoIWEwIHx8ICFhMSB8fCBhMC5sZW5ndGggIT09IGExLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvcihpID0gMCwgaWxlbiA9IGEwLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIHYwID0gYTBbaV07XG4gICAgICAgIHYxID0gYTFbaV07XG4gICAgICAgIGlmICh2MC5kYXRhc2V0SW5kZXggIT09IHYxLmRhdGFzZXRJbmRleCB8fCB2MC5pbmRleCAhPT0gdjEuaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbi8qKlxuICogUmV0dXJucyBhIGRlZXAgY29weSBvZiBgc291cmNlYCB3aXRob3V0IGtlZXBpbmcgcmVmZXJlbmNlcyBvbiBvYmplY3RzIGFuZCBhcnJheXMuXG4gKiBAcGFyYW0gc291cmNlIC0gVGhlIHZhbHVlIHRvIGNsb25lLlxuICovIGZ1bmN0aW9uIGNsb25lKHNvdXJjZSkge1xuICAgIGlmIChpc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5tYXAoY2xvbmUpO1xuICAgIH1cbiAgICBpZiAoaXNPYmplY3Qoc291cmNlKSkge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgICAgICAgY29uc3Qga2xlbiA9IGtleXMubGVuZ3RoO1xuICAgICAgICBsZXQgayA9IDA7XG4gICAgICAgIGZvcig7IGsgPCBrbGVuOyArK2spe1xuICAgICAgICAgICAgdGFyZ2V0W2tleXNba11dID0gY2xvbmUoc291cmNlW2tleXNba11dKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xufVxuZnVuY3Rpb24gaXNWYWxpZEtleShrZXkpIHtcbiAgICByZXR1cm4gW1xuICAgICAgICAnX19wcm90b19fJyxcbiAgICAgICAgJ3Byb3RvdHlwZScsXG4gICAgICAgICdjb25zdHJ1Y3RvcidcbiAgICBdLmluZGV4T2Yoa2V5KSA9PT0gLTE7XG59XG4vKipcbiAqIFRoZSBkZWZhdWx0IG1lcmdlciB3aGVuIENoYXJ0LmhlbHBlcnMubWVyZ2UgaXMgY2FsbGVkIHdpdGhvdXQgbWVyZ2VyIG9wdGlvbi5cbiAqIE5vdGUoU0IpOiBhbHNvIHVzZWQgYnkgbWVyZ2VDb25maWcgYW5kIG1lcmdlU2NhbGVDb25maWcgYXMgZmFsbGJhY2suXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9tZXJnZXIoa2V5LCB0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuICAgIGlmICghaXNWYWxpZEtleShrZXkpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdHZhbCA9IHRhcmdldFtrZXldO1xuICAgIGNvbnN0IHN2YWwgPSBzb3VyY2Vba2V5XTtcbiAgICBpZiAoaXNPYmplY3QodHZhbCkgJiYgaXNPYmplY3Qoc3ZhbCkpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11c2UtYmVmb3JlLWRlZmluZVxuICAgICAgICBtZXJnZSh0dmFsLCBzdmFsLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXRba2V5XSA9IGNsb25lKHN2YWwpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgc291cmNlcyA9IGlzQXJyYXkoc291cmNlKSA/IHNvdXJjZSA6IFtcbiAgICAgICAgc291cmNlXG4gICAgXTtcbiAgICBjb25zdCBpbGVuID0gc291cmNlcy5sZW5ndGg7XG4gICAgaWYgKCFpc09iamVjdCh0YXJnZXQpKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIGNvbnN0IG1lcmdlciA9IG9wdGlvbnMubWVyZ2VyIHx8IF9tZXJnZXI7XG4gICAgbGV0IGN1cnJlbnQ7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIGN1cnJlbnQgPSBzb3VyY2VzW2ldO1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGN1cnJlbnQpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoY3VycmVudCk7XG4gICAgICAgIGZvcihsZXQgayA9IDAsIGtsZW4gPSBrZXlzLmxlbmd0aDsgayA8IGtsZW47ICsrayl7XG4gICAgICAgICAgICBtZXJnZXIoa2V5c1trXSwgdGFyZ2V0LCBjdXJyZW50LCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xufVxuZnVuY3Rpb24gbWVyZ2VJZih0YXJnZXQsIHNvdXJjZSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgICByZXR1cm4gbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIHtcbiAgICAgICAgbWVyZ2VyOiBfbWVyZ2VySWZcbiAgICB9KTtcbn1cbi8qKlxuICogTWVyZ2VzIHNvdXJjZVtrZXldIGluIHRhcmdldFtrZXldIG9ubHkgaWYgdGFyZ2V0W2tleV0gaXMgdW5kZWZpbmVkLlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfbWVyZ2VySWYoa2V5LCB0YXJnZXQsIHNvdXJjZSkge1xuICAgIGlmICghaXNWYWxpZEtleShrZXkpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdHZhbCA9IHRhcmdldFtrZXldO1xuICAgIGNvbnN0IHN2YWwgPSBzb3VyY2Vba2V5XTtcbiAgICBpZiAoaXNPYmplY3QodHZhbCkgJiYgaXNPYmplY3Qoc3ZhbCkpIHtcbiAgICAgICAgbWVyZ2VJZih0dmFsLCBzdmFsKTtcbiAgICB9IGVsc2UgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGFyZ2V0LCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gY2xvbmUoc3ZhbCk7XG4gICAgfVxufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9kZXByZWNhdGVkKHNjb3BlLCB2YWx1ZSwgcHJldmlvdXMsIGN1cnJlbnQpIHtcbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zb2xlLndhcm4oc2NvcGUgKyAnOiBcIicgKyBwcmV2aW91cyArICdcIiBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIFwiJyArIGN1cnJlbnQgKyAnXCIgaW5zdGVhZCcpO1xuICAgIH1cbn1cbi8vIHJlc29sdmVPYmplY3RLZXkgcmVzb2x2ZXIgY2FjaGVcbmNvbnN0IGtleVJlc29sdmVycyA9IHtcbiAgICAvLyBDaGFydC5oZWxwZXJzLmNvcmUgcmVzb2x2ZU9iamVjdEtleSBzaG91bGQgcmVzb2x2ZSBlbXB0eSBrZXkgdG8gcm9vdCBvYmplY3RcbiAgICAnJzogKHYpPT52LFxuICAgIC8vIGRlZmF1bHQgcmVzb2x2ZXJzXG4gICAgeDogKG8pPT5vLngsXG4gICAgeTogKG8pPT5vLnlcbn07XG4vKipcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX3NwbGl0S2V5KGtleSkge1xuICAgIGNvbnN0IHBhcnRzID0ga2V5LnNwbGl0KCcuJyk7XG4gICAgY29uc3Qga2V5cyA9IFtdO1xuICAgIGxldCB0bXAgPSAnJztcbiAgICBmb3IgKGNvbnN0IHBhcnQgb2YgcGFydHMpe1xuICAgICAgICB0bXAgKz0gcGFydDtcbiAgICAgICAgaWYgKHRtcC5lbmRzV2l0aCgnXFxcXCcpKSB7XG4gICAgICAgICAgICB0bXAgPSB0bXAuc2xpY2UoMCwgLTEpICsgJy4nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAga2V5cy5wdXNoKHRtcCk7XG4gICAgICAgICAgICB0bXAgPSAnJztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ga2V5cztcbn1cbmZ1bmN0aW9uIF9nZXRLZXlSZXNvbHZlcihrZXkpIHtcbiAgICBjb25zdCBrZXlzID0gX3NwbGl0S2V5KGtleSk7XG4gICAgcmV0dXJuIChvYmopPT57XG4gICAgICAgIGZvciAoY29uc3QgayBvZiBrZXlzKXtcbiAgICAgICAgICAgIGlmIChrID09PSAnJykge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb2JqID0gb2JqICYmIG9ialtrXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH07XG59XG5mdW5jdGlvbiByZXNvbHZlT2JqZWN0S2V5KG9iaiwga2V5KSB7XG4gICAgY29uc3QgcmVzb2x2ZXIgPSBrZXlSZXNvbHZlcnNba2V5XSB8fCAoa2V5UmVzb2x2ZXJzW2tleV0gPSBfZ2V0S2V5UmVzb2x2ZXIoa2V5KSk7XG4gICAgcmV0dXJuIHJlc29sdmVyKG9iaik7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2NhcGl0YWxpemUoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKTtcbn1cbmNvbnN0IGRlZmluZWQgPSAodmFsdWUpPT50eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnO1xuY29uc3QgaXNGdW5jdGlvbiA9ICh2YWx1ZSk9PnR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbi8vIEFkYXB0ZWQgZnJvbSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zMTEyODg1NS9jb21wYXJpbmctZWNtYTYtc2V0cy1mb3ItZXF1YWxpdHkjMzExMjkzODRcbmNvbnN0IHNldHNFcXVhbCA9IChhLCBiKT0+e1xuICAgIGlmIChhLnNpemUgIT09IGIuc2l6ZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAoY29uc3QgaXRlbSBvZiBhKXtcbiAgICAgICAgaWYgKCFiLmhhcyhpdGVtKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufTtcbi8qKlxuICogQHBhcmFtIGUgLSBUaGUgZXZlbnRcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2lzQ2xpY2tFdmVudChlKSB7XG4gICAgcmV0dXJuIGUudHlwZSA9PT0gJ21vdXNldXAnIHx8IGUudHlwZSA9PT0gJ2NsaWNrJyB8fCBlLnR5cGUgPT09ICdjb250ZXh0bWVudSc7XG59XG5cbi8qKlxuICogQGFsaWFzIENoYXJ0LmhlbHBlcnMubWF0aFxuICogQG5hbWVzcGFjZVxuICovIGNvbnN0IFBJID0gTWF0aC5QSTtcbmNvbnN0IFRBVSA9IDIgKiBQSTtcbmNvbnN0IFBJVEFVID0gVEFVICsgUEk7XG5jb25zdCBJTkZJTklUWSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbmNvbnN0IFJBRF9QRVJfREVHID0gUEkgLyAxODA7XG5jb25zdCBIQUxGX1BJID0gUEkgLyAyO1xuY29uc3QgUVVBUlRFUl9QSSA9IFBJIC8gNDtcbmNvbnN0IFRXT19USElSRFNfUEkgPSBQSSAqIDIgLyAzO1xuY29uc3QgbG9nMTAgPSBNYXRoLmxvZzEwO1xuY29uc3Qgc2lnbiA9IE1hdGguc2lnbjtcbmZ1bmN0aW9uIGFsbW9zdEVxdWFscyh4LCB5LCBlcHNpbG9uKSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKHggLSB5KSA8IGVwc2lsb247XG59XG4vKipcbiAqIEltcGxlbWVudGF0aW9uIG9mIHRoZSBuaWNlIG51bWJlciBhbGdvcml0aG0gdXNlZCBpbiBkZXRlcm1pbmluZyB3aGVyZSBheGlzIGxhYmVscyB3aWxsIGdvXG4gKi8gZnVuY3Rpb24gbmljZU51bShyYW5nZSkge1xuICAgIGNvbnN0IHJvdW5kZWRSYW5nZSA9IE1hdGgucm91bmQocmFuZ2UpO1xuICAgIHJhbmdlID0gYWxtb3N0RXF1YWxzKHJhbmdlLCByb3VuZGVkUmFuZ2UsIHJhbmdlIC8gMTAwMCkgPyByb3VuZGVkUmFuZ2UgOiByYW5nZTtcbiAgICBjb25zdCBuaWNlUmFuZ2UgPSBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihsb2cxMChyYW5nZSkpKTtcbiAgICBjb25zdCBmcmFjdGlvbiA9IHJhbmdlIC8gbmljZVJhbmdlO1xuICAgIGNvbnN0IG5pY2VGcmFjdGlvbiA9IGZyYWN0aW9uIDw9IDEgPyAxIDogZnJhY3Rpb24gPD0gMiA/IDIgOiBmcmFjdGlvbiA8PSA1ID8gNSA6IDEwO1xuICAgIHJldHVybiBuaWNlRnJhY3Rpb24gKiBuaWNlUmFuZ2U7XG59XG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgb2YgZmFjdG9ycyBzb3J0ZWQgZnJvbSAxIHRvIHNxcnQodmFsdWUpXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9mYWN0b3JpemUodmFsdWUpIHtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBjb25zdCBzcXJ0ID0gTWF0aC5zcXJ0KHZhbHVlKTtcbiAgICBsZXQgaTtcbiAgICBmb3IoaSA9IDE7IGkgPCBzcXJ0OyBpKyspe1xuICAgICAgICBpZiAodmFsdWUgJSBpID09PSAwKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChpKTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlIC8gaSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNxcnQgPT09IChzcXJ0IHwgMCkpIHtcbiAgICAgICAgcmVzdWx0LnB1c2goc3FydCk7XG4gICAgfVxuICAgIHJlc3VsdC5zb3J0KChhLCBiKT0+YSAtIGIpLnBvcCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBpc051bWJlcihuKSB7XG4gICAgcmV0dXJuICFpc05hTihwYXJzZUZsb2F0KG4pKSAmJiBpc0Zpbml0ZShuKTtcbn1cbmZ1bmN0aW9uIGFsbW9zdFdob2xlKHgsIGVwc2lsb24pIHtcbiAgICBjb25zdCByb3VuZGVkID0gTWF0aC5yb3VuZCh4KTtcbiAgICByZXR1cm4gcm91bmRlZCAtIGVwc2lsb24gPD0geCAmJiByb3VuZGVkICsgZXBzaWxvbiA+PSB4O1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9zZXRNaW5BbmRNYXhCeUtleShhcnJheSwgdGFyZ2V0LCBwcm9wZXJ0eSkge1xuICAgIGxldCBpLCBpbGVuLCB2YWx1ZTtcbiAgICBmb3IoaSA9IDAsIGlsZW4gPSBhcnJheS5sZW5ndGg7IGkgPCBpbGVuOyBpKyspe1xuICAgICAgICB2YWx1ZSA9IGFycmF5W2ldW3Byb3BlcnR5XTtcbiAgICAgICAgaWYgKCFpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRhcmdldC5taW4gPSBNYXRoLm1pbih0YXJnZXQubWluLCB2YWx1ZSk7XG4gICAgICAgICAgICB0YXJnZXQubWF4ID0gTWF0aC5tYXgodGFyZ2V0Lm1heCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gdG9SYWRpYW5zKGRlZ3JlZXMpIHtcbiAgICByZXR1cm4gZGVncmVlcyAqIChQSSAvIDE4MCk7XG59XG5mdW5jdGlvbiB0b0RlZ3JlZXMocmFkaWFucykge1xuICAgIHJldHVybiByYWRpYW5zICogKDE4MCAvIFBJKTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzXG4gKiBpLmUuIHRoZSBudW1iZXIgb2YgZGlnaXRzIGFmdGVyIHRoZSBkZWNpbWFsIHBvaW50LCBvZiB0aGUgdmFsdWUgb2YgdGhpcyBOdW1iZXIuXG4gKiBAcGFyYW0geCAtIEEgbnVtYmVyLlxuICogQHJldHVybnMgVGhlIG51bWJlciBvZiBkZWNpbWFsIHBsYWNlcy5cbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2RlY2ltYWxQbGFjZXMoeCkge1xuICAgIGlmICghaXNOdW1iZXJGaW5pdGUoeCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgZSA9IDE7XG4gICAgbGV0IHAgPSAwO1xuICAgIHdoaWxlKE1hdGgucm91bmQoeCAqIGUpIC8gZSAhPT0geCl7XG4gICAgICAgIGUgKj0gMTA7XG4gICAgICAgIHArKztcbiAgICB9XG4gICAgcmV0dXJuIHA7XG59XG4vLyBHZXRzIHRoZSBhbmdsZSBmcm9tIHZlcnRpY2FsIHVwcmlnaHQgdG8gdGhlIHBvaW50IGFib3V0IGEgY2VudHJlLlxuZnVuY3Rpb24gZ2V0QW5nbGVGcm9tUG9pbnQoY2VudHJlUG9pbnQsIGFuZ2xlUG9pbnQpIHtcbiAgICBjb25zdCBkaXN0YW5jZUZyb21YQ2VudGVyID0gYW5nbGVQb2ludC54IC0gY2VudHJlUG9pbnQueDtcbiAgICBjb25zdCBkaXN0YW5jZUZyb21ZQ2VudGVyID0gYW5nbGVQb2ludC55IC0gY2VudHJlUG9pbnQueTtcbiAgICBjb25zdCByYWRpYWxEaXN0YW5jZUZyb21DZW50ZXIgPSBNYXRoLnNxcnQoZGlzdGFuY2VGcm9tWENlbnRlciAqIGRpc3RhbmNlRnJvbVhDZW50ZXIgKyBkaXN0YW5jZUZyb21ZQ2VudGVyICogZGlzdGFuY2VGcm9tWUNlbnRlcik7XG4gICAgbGV0IGFuZ2xlID0gTWF0aC5hdGFuMihkaXN0YW5jZUZyb21ZQ2VudGVyLCBkaXN0YW5jZUZyb21YQ2VudGVyKTtcbiAgICBpZiAoYW5nbGUgPCAtMC41ICogUEkpIHtcbiAgICAgICAgYW5nbGUgKz0gVEFVOyAvLyBtYWtlIHN1cmUgdGhlIHJldHVybmVkIGFuZ2xlIGlzIGluIHRoZSByYW5nZSBvZiAoLVBJLzIsIDNQSS8yXVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBhbmdsZSxcbiAgICAgICAgZGlzdGFuY2U6IHJhZGlhbERpc3RhbmNlRnJvbUNlbnRlclxuICAgIH07XG59XG5mdW5jdGlvbiBkaXN0YW5jZUJldHdlZW5Qb2ludHMocHQxLCBwdDIpIHtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHB0Mi54IC0gcHQxLngsIDIpICsgTWF0aC5wb3cocHQyLnkgLSBwdDEueSwgMikpO1xufVxuLyoqXG4gKiBTaG9ydGVzdCBkaXN0YW5jZSBiZXR3ZWVuIGFuZ2xlcywgaW4gZWl0aGVyIGRpcmVjdGlvbi5cbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2FuZ2xlRGlmZihhLCBiKSB7XG4gICAgcmV0dXJuIChhIC0gYiArIFBJVEFVKSAlIFRBVSAtIFBJO1xufVxuLyoqXG4gKiBOb3JtYWxpemUgYW5nbGUgdG8gYmUgYmV0d2VlbiAwIGFuZCAyKlBJXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9ub3JtYWxpemVBbmdsZShhKSB7XG4gICAgcmV0dXJuIChhICUgVEFVICsgVEFVKSAlIFRBVTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfYW5nbGVCZXR3ZWVuKGFuZ2xlLCBzdGFydCwgZW5kLCBzYW1lQW5nbGVJc0Z1bGxDaXJjbGUpIHtcbiAgICBjb25zdCBhID0gX25vcm1hbGl6ZUFuZ2xlKGFuZ2xlKTtcbiAgICBjb25zdCBzID0gX25vcm1hbGl6ZUFuZ2xlKHN0YXJ0KTtcbiAgICBjb25zdCBlID0gX25vcm1hbGl6ZUFuZ2xlKGVuZCk7XG4gICAgY29uc3QgYW5nbGVUb1N0YXJ0ID0gX25vcm1hbGl6ZUFuZ2xlKHMgLSBhKTtcbiAgICBjb25zdCBhbmdsZVRvRW5kID0gX25vcm1hbGl6ZUFuZ2xlKGUgLSBhKTtcbiAgICBjb25zdCBzdGFydFRvQW5nbGUgPSBfbm9ybWFsaXplQW5nbGUoYSAtIHMpO1xuICAgIGNvbnN0IGVuZFRvQW5nbGUgPSBfbm9ybWFsaXplQW5nbGUoYSAtIGUpO1xuICAgIHJldHVybiBhID09PSBzIHx8IGEgPT09IGUgfHwgc2FtZUFuZ2xlSXNGdWxsQ2lyY2xlICYmIHMgPT09IGUgfHwgYW5nbGVUb1N0YXJ0ID4gYW5nbGVUb0VuZCAmJiBzdGFydFRvQW5nbGUgPCBlbmRUb0FuZ2xlO1xufVxuLyoqXG4gKiBMaW1pdCBgdmFsdWVgIGJldHdlZW4gYG1pbmAgYW5kIGBtYXhgXG4gKiBAcGFyYW0gdmFsdWVcbiAqIEBwYXJhbSBtaW5cbiAqIEBwYXJhbSBtYXhcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2xpbWl0VmFsdWUodmFsdWUsIG1pbiwgbWF4KSB7XG4gICAgcmV0dXJuIE1hdGgubWF4KG1pbiwgTWF0aC5taW4obWF4LCB2YWx1ZSkpO1xufVxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2ludDE2UmFuZ2UodmFsdWUpIHtcbiAgICByZXR1cm4gX2xpbWl0VmFsdWUodmFsdWUsIC0zMjc2OCwgMzI3NjcpO1xufVxuLyoqXG4gKiBAcGFyYW0gdmFsdWVcbiAqIEBwYXJhbSBzdGFydFxuICogQHBhcmFtIGVuZFxuICogQHBhcmFtIFtlcHNpbG9uXVxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfaXNCZXR3ZWVuKHZhbHVlLCBzdGFydCwgZW5kLCBlcHNpbG9uID0gMWUtNikge1xuICAgIHJldHVybiB2YWx1ZSA+PSBNYXRoLm1pbihzdGFydCwgZW5kKSAtIGVwc2lsb24gJiYgdmFsdWUgPD0gTWF0aC5tYXgoc3RhcnQsIGVuZCkgKyBlcHNpbG9uO1xufVxuXG5mdW5jdGlvbiBfbG9va3VwKHRhYmxlLCB2YWx1ZSwgY21wKSB7XG4gICAgY21wID0gY21wIHx8ICgoaW5kZXgpPT50YWJsZVtpbmRleF0gPCB2YWx1ZSk7XG4gICAgbGV0IGhpID0gdGFibGUubGVuZ3RoIC0gMTtcbiAgICBsZXQgbG8gPSAwO1xuICAgIGxldCBtaWQ7XG4gICAgd2hpbGUoaGkgLSBsbyA+IDEpe1xuICAgICAgICBtaWQgPSBsbyArIGhpID4+IDE7XG4gICAgICAgIGlmIChjbXAobWlkKSkge1xuICAgICAgICAgICAgbG8gPSBtaWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoaSA9IG1pZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBsbyxcbiAgICAgICAgaGlcbiAgICB9O1xufVxuLyoqXG4gKiBCaW5hcnkgc2VhcmNoXG4gKiBAcGFyYW0gdGFibGUgLSB0aGUgdGFibGUgc2VhcmNoLiBtdXN0IGJlIHNvcnRlZCFcbiAqIEBwYXJhbSBrZXkgLSBwcm9wZXJ0eSBuYW1lIGZvciB0aGUgdmFsdWUgaW4gZWFjaCBlbnRyeVxuICogQHBhcmFtIHZhbHVlIC0gdmFsdWUgdG8gZmluZFxuICogQHBhcmFtIGxhc3QgLSBsb29rdXAgbGFzdCBpbmRleFxuICogQHByaXZhdGVcbiAqLyBjb25zdCBfbG9va3VwQnlLZXkgPSAodGFibGUsIGtleSwgdmFsdWUsIGxhc3QpPT5fbG9va3VwKHRhYmxlLCB2YWx1ZSwgbGFzdCA/IChpbmRleCk9PntcbiAgICAgICAgY29uc3QgdGkgPSB0YWJsZVtpbmRleF1ba2V5XTtcbiAgICAgICAgcmV0dXJuIHRpIDwgdmFsdWUgfHwgdGkgPT09IHZhbHVlICYmIHRhYmxlW2luZGV4ICsgMV1ba2V5XSA9PT0gdmFsdWU7XG4gICAgfSA6IChpbmRleCk9PnRhYmxlW2luZGV4XVtrZXldIDwgdmFsdWUpO1xuLyoqXG4gKiBSZXZlcnNlIGJpbmFyeSBzZWFyY2hcbiAqIEBwYXJhbSB0YWJsZSAtIHRoZSB0YWJsZSBzZWFyY2guIG11c3QgYmUgc29ydGVkIVxuICogQHBhcmFtIGtleSAtIHByb3BlcnR5IG5hbWUgZm9yIHRoZSB2YWx1ZSBpbiBlYWNoIGVudHJ5XG4gKiBAcGFyYW0gdmFsdWUgLSB2YWx1ZSB0byBmaW5kXG4gKiBAcHJpdmF0ZVxuICovIGNvbnN0IF9ybG9va3VwQnlLZXkgPSAodGFibGUsIGtleSwgdmFsdWUpPT5fbG9va3VwKHRhYmxlLCB2YWx1ZSwgKGluZGV4KT0+dGFibGVbaW5kZXhdW2tleV0gPj0gdmFsdWUpO1xuLyoqXG4gKiBSZXR1cm4gc3Vic2V0IG9mIGB2YWx1ZXNgIGJldHdlZW4gYG1pbmAgYW5kIGBtYXhgIGluY2x1c2l2ZS5cbiAqIFZhbHVlcyBhcmUgYXNzdW1lZCB0byBiZSBpbiBzb3J0ZWQgb3JkZXIuXG4gKiBAcGFyYW0gdmFsdWVzIC0gc29ydGVkIGFycmF5IG9mIHZhbHVlc1xuICogQHBhcmFtIG1pbiAtIG1pbiB2YWx1ZVxuICogQHBhcmFtIG1heCAtIG1heCB2YWx1ZVxuICovIGZ1bmN0aW9uIF9maWx0ZXJCZXR3ZWVuKHZhbHVlcywgbWluLCBtYXgpIHtcbiAgICBsZXQgc3RhcnQgPSAwO1xuICAgIGxldCBlbmQgPSB2YWx1ZXMubGVuZ3RoO1xuICAgIHdoaWxlKHN0YXJ0IDwgZW5kICYmIHZhbHVlc1tzdGFydF0gPCBtaW4pe1xuICAgICAgICBzdGFydCsrO1xuICAgIH1cbiAgICB3aGlsZShlbmQgPiBzdGFydCAmJiB2YWx1ZXNbZW5kIC0gMV0gPiBtYXgpe1xuICAgICAgICBlbmQtLTtcbiAgICB9XG4gICAgcmV0dXJuIHN0YXJ0ID4gMCB8fCBlbmQgPCB2YWx1ZXMubGVuZ3RoID8gdmFsdWVzLnNsaWNlKHN0YXJ0LCBlbmQpIDogdmFsdWVzO1xufVxuY29uc3QgYXJyYXlFdmVudHMgPSBbXG4gICAgJ3B1c2gnLFxuICAgICdwb3AnLFxuICAgICdzaGlmdCcsXG4gICAgJ3NwbGljZScsXG4gICAgJ3Vuc2hpZnQnXG5dO1xuZnVuY3Rpb24gbGlzdGVuQXJyYXlFdmVudHMoYXJyYXksIGxpc3RlbmVyKSB7XG4gICAgaWYgKGFycmF5Ll9jaGFydGpzKSB7XG4gICAgICAgIGFycmF5Ll9jaGFydGpzLmxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYXJyYXksICdfY2hhcnRqcycsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgIGxpc3RlbmVyczogW1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyXG4gICAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBhcnJheUV2ZW50cy5mb3JFYWNoKChrZXkpPT57XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9ICdfb25EYXRhJyArIF9jYXBpdGFsaXplKGtleSk7XG4gICAgICAgIGNvbnN0IGJhc2UgPSBhcnJheVtrZXldO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYXJyYXksIGtleSwge1xuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICB2YWx1ZSAoLi4uYXJncykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IGJhc2UuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICAgICAgYXJyYXkuX2NoYXJ0anMubGlzdGVuZXJzLmZvckVhY2goKG9iamVjdCk9PntcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvYmplY3RbbWV0aG9kXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0W21ldGhvZF0oLi4uYXJncyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHVubGlzdGVuQXJyYXlFdmVudHMoYXJyYXksIGxpc3RlbmVyKSB7XG4gICAgY29uc3Qgc3R1YiA9IGFycmF5Ll9jaGFydGpzO1xuICAgIGlmICghc3R1Yikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGxpc3RlbmVycyA9IHN0dWIubGlzdGVuZXJzO1xuICAgIGNvbnN0IGluZGV4ID0gbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICAgIGlmIChsaXN0ZW5lcnMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGFycmF5RXZlbnRzLmZvckVhY2goKGtleSk9PntcbiAgICAgICAgZGVsZXRlIGFycmF5W2tleV07XG4gICAgfSk7XG4gICAgZGVsZXRlIGFycmF5Ll9jaGFydGpzO1xufVxuLyoqXG4gKiBAcGFyYW0gaXRlbXNcbiAqLyBmdW5jdGlvbiBfYXJyYXlVbmlxdWUoaXRlbXMpIHtcbiAgICBjb25zdCBzZXQgPSBuZXcgU2V0KGl0ZW1zKTtcbiAgICBpZiAoc2V0LnNpemUgPT09IGl0ZW1zLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gaXRlbXM7XG4gICAgfVxuICAgIHJldHVybiBBcnJheS5mcm9tKHNldCk7XG59XG5cbmZ1bmN0aW9uIGZvbnRTdHJpbmcocGl4ZWxTaXplLCBmb250U3R5bGUsIGZvbnRGYW1pbHkpIHtcbiAgICByZXR1cm4gZm9udFN0eWxlICsgJyAnICsgcGl4ZWxTaXplICsgJ3B4ICcgKyBmb250RmFtaWx5O1xufVxuLyoqXG4qIFJlcXVlc3QgYW5pbWF0aW9uIHBvbHlmaWxsXG4qLyBjb25zdCByZXF1ZXN0QW5pbUZyYW1lID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xufSgpO1xuLyoqXG4gKiBUaHJvdHRsZXMgY2FsbGluZyBgZm5gIG9uY2UgcGVyIGFuaW1hdGlvbiBmcmFtZVxuICogTGF0ZXN0IGFyZ3VtZW50cyBhcmUgdXNlZCBvbiB0aGUgYWN0dWFsIGNhbGxcbiAqLyBmdW5jdGlvbiB0aHJvdHRsZWQoZm4sIHRoaXNBcmcpIHtcbiAgICBsZXQgYXJnc1RvVXNlID0gW107XG4gICAgbGV0IHRpY2tpbmcgPSBmYWxzZTtcbiAgICByZXR1cm4gZnVuY3Rpb24oLi4uYXJncykge1xuICAgICAgICAvLyBTYXZlIHRoZSBhcmdzIGZvciB1c2UgbGF0ZXJcbiAgICAgICAgYXJnc1RvVXNlID0gYXJncztcbiAgICAgICAgaWYgKCF0aWNraW5nKSB7XG4gICAgICAgICAgICB0aWNraW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHJlcXVlc3RBbmltRnJhbWUuY2FsbCh3aW5kb3csICgpPT57XG4gICAgICAgICAgICAgICAgdGlja2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3NUb1VzZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG59XG4vKipcbiAqIERlYm91bmNlcyBjYWxsaW5nIGBmbmAgZm9yIGBkZWxheWAgbXNcbiAqLyBmdW5jdGlvbiBkZWJvdW5jZShmbiwgZGVsYXkpIHtcbiAgICBsZXQgdGltZW91dDtcbiAgICByZXR1cm4gZnVuY3Rpb24oLi4uYXJncykge1xuICAgICAgICBpZiAoZGVsYXkpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZuLCBkZWxheSwgYXJncyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmbi5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVsYXk7XG4gICAgfTtcbn1cbi8qKlxuICogQ29udmVydHMgJ3N0YXJ0JyB0byAnbGVmdCcsICdlbmQnIHRvICdyaWdodCcgYW5kIG90aGVycyB0byAnY2VudGVyJ1xuICogQHByaXZhdGVcbiAqLyBjb25zdCBfdG9MZWZ0UmlnaHRDZW50ZXIgPSAoYWxpZ24pPT5hbGlnbiA9PT0gJ3N0YXJ0JyA/ICdsZWZ0JyA6IGFsaWduID09PSAnZW5kJyA/ICdyaWdodCcgOiAnY2VudGVyJztcbi8qKlxuICogUmV0dXJucyBgc3RhcnRgLCBgZW5kYCBvciBgKHN0YXJ0ICsgZW5kKSAvIDJgIGRlcGVuZGluZyBvbiBgYWxpZ25gLiBEZWZhdWx0cyB0byBgY2VudGVyYFxuICogQHByaXZhdGVcbiAqLyBjb25zdCBfYWxpZ25TdGFydEVuZCA9IChhbGlnbiwgc3RhcnQsIGVuZCk9PmFsaWduID09PSAnc3RhcnQnID8gc3RhcnQgOiBhbGlnbiA9PT0gJ2VuZCcgPyBlbmQgOiAoc3RhcnQgKyBlbmQpIC8gMjtcbi8qKlxuICogUmV0dXJucyBgbGVmdGAsIGByaWdodGAgb3IgYChsZWZ0ICsgcmlnaHQpIC8gMmAgZGVwZW5kaW5nIG9uIGBhbGlnbmAuIERlZmF1bHRzIHRvIGBsZWZ0YFxuICogQHByaXZhdGVcbiAqLyBjb25zdCBfdGV4dFggPSAoYWxpZ24sIGxlZnQsIHJpZ2h0LCBydGwpPT57XG4gICAgY29uc3QgY2hlY2sgPSBydGwgPyAnbGVmdCcgOiAncmlnaHQnO1xuICAgIHJldHVybiBhbGlnbiA9PT0gY2hlY2sgPyByaWdodCA6IGFsaWduID09PSAnY2VudGVyJyA/IChsZWZ0ICsgcmlnaHQpIC8gMiA6IGxlZnQ7XG59O1xuLyoqXG4gKiBSZXR1cm4gc3RhcnQgYW5kIGNvdW50IG9mIHZpc2libGUgcG9pbnRzLlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfZ2V0U3RhcnRBbmRDb3VudE9mVmlzaWJsZVBvaW50cyhtZXRhLCBwb2ludHMsIGFuaW1hdGlvbnNEaXNhYmxlZCkge1xuICAgIGNvbnN0IHBvaW50Q291bnQgPSBwb2ludHMubGVuZ3RoO1xuICAgIGxldCBzdGFydCA9IDA7XG4gICAgbGV0IGNvdW50ID0gcG9pbnRDb3VudDtcbiAgICBpZiAobWV0YS5fc29ydGVkKSB7XG4gICAgICAgIGNvbnN0IHsgaVNjYWxlICwgX3BhcnNlZCAgfSA9IG1ldGE7XG4gICAgICAgIGNvbnN0IGF4aXMgPSBpU2NhbGUuYXhpcztcbiAgICAgICAgY29uc3QgeyBtaW4gLCBtYXggLCBtaW5EZWZpbmVkICwgbWF4RGVmaW5lZCAgfSA9IGlTY2FsZS5nZXRVc2VyQm91bmRzKCk7XG4gICAgICAgIGlmIChtaW5EZWZpbmVkKSB7XG4gICAgICAgICAgICBzdGFydCA9IF9saW1pdFZhbHVlKE1hdGgubWluKC8vIEB0cy1leHBlY3QtZXJyb3IgTmVlZCB0byB0eXBlIF9wYXJzZWRcbiAgICAgICAgICAgIF9sb29rdXBCeUtleShfcGFyc2VkLCBheGlzLCBtaW4pLmxvLCAvLyBAdHMtZXhwZWN0LWVycm9yIE5lZWQgdG8gZml4IHR5cGVzIG9uIF9sb29rdXBCeUtleVxuICAgICAgICAgICAgYW5pbWF0aW9uc0Rpc2FibGVkID8gcG9pbnRDb3VudCA6IF9sb29rdXBCeUtleShwb2ludHMsIGF4aXMsIGlTY2FsZS5nZXRQaXhlbEZvclZhbHVlKG1pbikpLmxvKSwgMCwgcG9pbnRDb3VudCAtIDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXhEZWZpbmVkKSB7XG4gICAgICAgICAgICBjb3VudCA9IF9saW1pdFZhbHVlKE1hdGgubWF4KC8vIEB0cy1leHBlY3QtZXJyb3IgTmVlZCB0byB0eXBlIF9wYXJzZWRcbiAgICAgICAgICAgIF9sb29rdXBCeUtleShfcGFyc2VkLCBpU2NhbGUuYXhpcywgbWF4LCB0cnVlKS5oaSArIDEsIC8vIEB0cy1leHBlY3QtZXJyb3IgTmVlZCB0byBmaXggdHlwZXMgb24gX2xvb2t1cEJ5S2V5XG4gICAgICAgICAgICBhbmltYXRpb25zRGlzYWJsZWQgPyAwIDogX2xvb2t1cEJ5S2V5KHBvaW50cywgYXhpcywgaVNjYWxlLmdldFBpeGVsRm9yVmFsdWUobWF4KSwgdHJ1ZSkuaGkgKyAxKSwgc3RhcnQsIHBvaW50Q291bnQpIC0gc3RhcnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb3VudCA9IHBvaW50Q291bnQgLSBzdGFydDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydCxcbiAgICAgICAgY291bnRcbiAgICB9O1xufVxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIHNjYWxlIHJhbmdlcyBoYXZlIGNoYW5nZWQuXG4gKiBAcGFyYW0ge29iamVjdH0gbWV0YSAtIGRhdGFzZXQgbWV0YS5cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfc2NhbGVSYW5nZXNDaGFuZ2VkKG1ldGEpIHtcbiAgICBjb25zdCB7IHhTY2FsZSAsIHlTY2FsZSAsIF9zY2FsZVJhbmdlcyAgfSA9IG1ldGE7XG4gICAgY29uc3QgbmV3UmFuZ2VzID0ge1xuICAgICAgICB4bWluOiB4U2NhbGUubWluLFxuICAgICAgICB4bWF4OiB4U2NhbGUubWF4LFxuICAgICAgICB5bWluOiB5U2NhbGUubWluLFxuICAgICAgICB5bWF4OiB5U2NhbGUubWF4XG4gICAgfTtcbiAgICBpZiAoIV9zY2FsZVJhbmdlcykge1xuICAgICAgICBtZXRhLl9zY2FsZVJhbmdlcyA9IG5ld1JhbmdlcztcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNvbnN0IGNoYW5nZWQgPSBfc2NhbGVSYW5nZXMueG1pbiAhPT0geFNjYWxlLm1pbiB8fCBfc2NhbGVSYW5nZXMueG1heCAhPT0geFNjYWxlLm1heCB8fCBfc2NhbGVSYW5nZXMueW1pbiAhPT0geVNjYWxlLm1pbiB8fCBfc2NhbGVSYW5nZXMueW1heCAhPT0geVNjYWxlLm1heDtcbiAgICBPYmplY3QuYXNzaWduKF9zY2FsZVJhbmdlcywgbmV3UmFuZ2VzKTtcbiAgICByZXR1cm4gY2hhbmdlZDtcbn1cblxuY29uc3QgYXRFZGdlID0gKHQpPT50ID09PSAwIHx8IHQgPT09IDE7XG5jb25zdCBlbGFzdGljSW4gPSAodCwgcywgcCk9Pi0oTWF0aC5wb3coMiwgMTAgKiAodCAtPSAxKSkgKiBNYXRoLnNpbigodCAtIHMpICogVEFVIC8gcCkpO1xuY29uc3QgZWxhc3RpY091dCA9ICh0LCBzLCBwKT0+TWF0aC5wb3coMiwgLTEwICogdCkgKiBNYXRoLnNpbigodCAtIHMpICogVEFVIC8gcCkgKyAxO1xuLyoqXG4gKiBFYXNpbmcgZnVuY3Rpb25zIGFkYXB0ZWQgZnJvbSBSb2JlcnQgUGVubmVyJ3MgZWFzaW5nIGVxdWF0aW9ucy5cbiAqIEBuYW1lc3BhY2UgQ2hhcnQuaGVscGVycy5lYXNpbmcuZWZmZWN0c1xuICogQHNlZSBodHRwOi8vd3d3LnJvYmVydHBlbm5lci5jb20vZWFzaW5nL1xuICovIGNvbnN0IGVmZmVjdHMgPSB7XG4gICAgbGluZWFyOiAodCk9PnQsXG4gICAgZWFzZUluUXVhZDogKHQpPT50ICogdCxcbiAgICBlYXNlT3V0UXVhZDogKHQpPT4tdCAqICh0IC0gMiksXG4gICAgZWFzZUluT3V0UXVhZDogKHQpPT4odCAvPSAwLjUpIDwgMSA/IDAuNSAqIHQgKiB0IDogLTAuNSAqICgtLXQgKiAodCAtIDIpIC0gMSksXG4gICAgZWFzZUluQ3ViaWM6ICh0KT0+dCAqIHQgKiB0LFxuICAgIGVhc2VPdXRDdWJpYzogKHQpPT4odCAtPSAxKSAqIHQgKiB0ICsgMSxcbiAgICBlYXNlSW5PdXRDdWJpYzogKHQpPT4odCAvPSAwLjUpIDwgMSA/IDAuNSAqIHQgKiB0ICogdCA6IDAuNSAqICgodCAtPSAyKSAqIHQgKiB0ICsgMiksXG4gICAgZWFzZUluUXVhcnQ6ICh0KT0+dCAqIHQgKiB0ICogdCxcbiAgICBlYXNlT3V0UXVhcnQ6ICh0KT0+LSgodCAtPSAxKSAqIHQgKiB0ICogdCAtIDEpLFxuICAgIGVhc2VJbk91dFF1YXJ0OiAodCk9Pih0IC89IDAuNSkgPCAxID8gMC41ICogdCAqIHQgKiB0ICogdCA6IC0wLjUgKiAoKHQgLT0gMikgKiB0ICogdCAqIHQgLSAyKSxcbiAgICBlYXNlSW5RdWludDogKHQpPT50ICogdCAqIHQgKiB0ICogdCxcbiAgICBlYXNlT3V0UXVpbnQ6ICh0KT0+KHQgLT0gMSkgKiB0ICogdCAqIHQgKiB0ICsgMSxcbiAgICBlYXNlSW5PdXRRdWludDogKHQpPT4odCAvPSAwLjUpIDwgMSA/IDAuNSAqIHQgKiB0ICogdCAqIHQgKiB0IDogMC41ICogKCh0IC09IDIpICogdCAqIHQgKiB0ICogdCArIDIpLFxuICAgIGVhc2VJblNpbmU6ICh0KT0+LU1hdGguY29zKHQgKiBIQUxGX1BJKSArIDEsXG4gICAgZWFzZU91dFNpbmU6ICh0KT0+TWF0aC5zaW4odCAqIEhBTEZfUEkpLFxuICAgIGVhc2VJbk91dFNpbmU6ICh0KT0+LTAuNSAqIChNYXRoLmNvcyhQSSAqIHQpIC0gMSksXG4gICAgZWFzZUluRXhwbzogKHQpPT50ID09PSAwID8gMCA6IE1hdGgucG93KDIsIDEwICogKHQgLSAxKSksXG4gICAgZWFzZU91dEV4cG86ICh0KT0+dCA9PT0gMSA/IDEgOiAtTWF0aC5wb3coMiwgLTEwICogdCkgKyAxLFxuICAgIGVhc2VJbk91dEV4cG86ICh0KT0+YXRFZGdlKHQpID8gdCA6IHQgPCAwLjUgPyAwLjUgKiBNYXRoLnBvdygyLCAxMCAqICh0ICogMiAtIDEpKSA6IDAuNSAqICgtTWF0aC5wb3coMiwgLTEwICogKHQgKiAyIC0gMSkpICsgMiksXG4gICAgZWFzZUluQ2lyYzogKHQpPT50ID49IDEgPyB0IDogLShNYXRoLnNxcnQoMSAtIHQgKiB0KSAtIDEpLFxuICAgIGVhc2VPdXRDaXJjOiAodCk9Pk1hdGguc3FydCgxIC0gKHQgLT0gMSkgKiB0KSxcbiAgICBlYXNlSW5PdXRDaXJjOiAodCk9Pih0IC89IDAuNSkgPCAxID8gLTAuNSAqIChNYXRoLnNxcnQoMSAtIHQgKiB0KSAtIDEpIDogMC41ICogKE1hdGguc3FydCgxIC0gKHQgLT0gMikgKiB0KSArIDEpLFxuICAgIGVhc2VJbkVsYXN0aWM6ICh0KT0+YXRFZGdlKHQpID8gdCA6IGVsYXN0aWNJbih0LCAwLjA3NSwgMC4zKSxcbiAgICBlYXNlT3V0RWxhc3RpYzogKHQpPT5hdEVkZ2UodCkgPyB0IDogZWxhc3RpY091dCh0LCAwLjA3NSwgMC4zKSxcbiAgICBlYXNlSW5PdXRFbGFzdGljICh0KSB7XG4gICAgICAgIGNvbnN0IHMgPSAwLjExMjU7XG4gICAgICAgIGNvbnN0IHAgPSAwLjQ1O1xuICAgICAgICByZXR1cm4gYXRFZGdlKHQpID8gdCA6IHQgPCAwLjUgPyAwLjUgKiBlbGFzdGljSW4odCAqIDIsIHMsIHApIDogMC41ICsgMC41ICogZWxhc3RpY091dCh0ICogMiAtIDEsIHMsIHApO1xuICAgIH0sXG4gICAgZWFzZUluQmFjayAodCkge1xuICAgICAgICBjb25zdCBzID0gMS43MDE1ODtcbiAgICAgICAgcmV0dXJuIHQgKiB0ICogKChzICsgMSkgKiB0IC0gcyk7XG4gICAgfSxcbiAgICBlYXNlT3V0QmFjayAodCkge1xuICAgICAgICBjb25zdCBzID0gMS43MDE1ODtcbiAgICAgICAgcmV0dXJuICh0IC09IDEpICogdCAqICgocyArIDEpICogdCArIHMpICsgMTtcbiAgICB9LFxuICAgIGVhc2VJbk91dEJhY2sgKHQpIHtcbiAgICAgICAgbGV0IHMgPSAxLjcwMTU4O1xuICAgICAgICBpZiAoKHQgLz0gMC41KSA8IDEpIHtcbiAgICAgICAgICAgIHJldHVybiAwLjUgKiAodCAqIHQgKiAoKChzICo9IDEuNTI1KSArIDEpICogdCAtIHMpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMC41ICogKCh0IC09IDIpICogdCAqICgoKHMgKj0gMS41MjUpICsgMSkgKiB0ICsgcykgKyAyKTtcbiAgICB9LFxuICAgIGVhc2VJbkJvdW5jZTogKHQpPT4xIC0gZWZmZWN0cy5lYXNlT3V0Qm91bmNlKDEgLSB0KSxcbiAgICBlYXNlT3V0Qm91bmNlICh0KSB7XG4gICAgICAgIGNvbnN0IG0gPSA3LjU2MjU7XG4gICAgICAgIGNvbnN0IGQgPSAyLjc1O1xuICAgICAgICBpZiAodCA8IDEgLyBkKSB7XG4gICAgICAgICAgICByZXR1cm4gbSAqIHQgKiB0O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0IDwgMiAvIGQpIHtcbiAgICAgICAgICAgIHJldHVybiBtICogKHQgLT0gMS41IC8gZCkgKiB0ICsgMC43NTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodCA8IDIuNSAvIGQpIHtcbiAgICAgICAgICAgIHJldHVybiBtICogKHQgLT0gMi4yNSAvIGQpICogdCArIDAuOTM3NTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbSAqICh0IC09IDIuNjI1IC8gZCkgKiB0ICsgMC45ODQzNzU7XG4gICAgfSxcbiAgICBlYXNlSW5PdXRCb3VuY2U6ICh0KT0+dCA8IDAuNSA/IGVmZmVjdHMuZWFzZUluQm91bmNlKHQgKiAyKSAqIDAuNSA6IGVmZmVjdHMuZWFzZU91dEJvdW5jZSh0ICogMiAtIDEpICogMC41ICsgMC41XG59O1xuXG5mdW5jdGlvbiBpc1BhdHRlcm5PckdyYWRpZW50KHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgIHJldHVybiB0eXBlID09PSAnW29iamVjdCBDYW52YXNQYXR0ZXJuXScgfHwgdHlwZSA9PT0gJ1tvYmplY3QgQ2FudmFzR3JhZGllbnRdJztcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gY29sb3IodmFsdWUpIHtcbiAgICByZXR1cm4gaXNQYXR0ZXJuT3JHcmFkaWVudCh2YWx1ZSkgPyB2YWx1ZSA6IG5ldyBDb2xvcih2YWx1ZSk7XG59XG5mdW5jdGlvbiBnZXRIb3ZlckNvbG9yKHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzUGF0dGVybk9yR3JhZGllbnQodmFsdWUpID8gdmFsdWUgOiBuZXcgQ29sb3IodmFsdWUpLnNhdHVyYXRlKDAuNSkuZGFya2VuKDAuMSkuaGV4U3RyaW5nKCk7XG59XG5cbmNvbnN0IG51bWJlcnMgPSBbXG4gICAgJ3gnLFxuICAgICd5JyxcbiAgICAnYm9yZGVyV2lkdGgnLFxuICAgICdyYWRpdXMnLFxuICAgICd0ZW5zaW9uJ1xuXTtcbmNvbnN0IGNvbG9ycyA9IFtcbiAgICAnY29sb3InLFxuICAgICdib3JkZXJDb2xvcicsXG4gICAgJ2JhY2tncm91bmRDb2xvcidcbl07XG5mdW5jdGlvbiBhcHBseUFuaW1hdGlvbnNEZWZhdWx0cyhkZWZhdWx0cykge1xuICAgIGRlZmF1bHRzLnNldCgnYW5pbWF0aW9uJywge1xuICAgICAgICBkZWxheTogdW5kZWZpbmVkLFxuICAgICAgICBkdXJhdGlvbjogMTAwMCxcbiAgICAgICAgZWFzaW5nOiAnZWFzZU91dFF1YXJ0JyxcbiAgICAgICAgZm46IHVuZGVmaW5lZCxcbiAgICAgICAgZnJvbTogdW5kZWZpbmVkLFxuICAgICAgICBsb29wOiB1bmRlZmluZWQsXG4gICAgICAgIHRvOiB1bmRlZmluZWQsXG4gICAgICAgIHR5cGU6IHVuZGVmaW5lZFxuICAgIH0pO1xuICAgIGRlZmF1bHRzLmRlc2NyaWJlKCdhbmltYXRpb24nLCB7XG4gICAgICAgIF9mYWxsYmFjazogZmFsc2UsXG4gICAgICAgIF9pbmRleGFibGU6IGZhbHNlLFxuICAgICAgICBfc2NyaXB0YWJsZTogKG5hbWUpPT5uYW1lICE9PSAnb25Qcm9ncmVzcycgJiYgbmFtZSAhPT0gJ29uQ29tcGxldGUnICYmIG5hbWUgIT09ICdmbidcbiAgICB9KTtcbiAgICBkZWZhdWx0cy5zZXQoJ2FuaW1hdGlvbnMnLCB7XG4gICAgICAgIGNvbG9yczoge1xuICAgICAgICAgICAgdHlwZTogJ2NvbG9yJyxcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IGNvbG9yc1xuICAgICAgICB9LFxuICAgICAgICBudW1iZXJzOiB7XG4gICAgICAgICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IG51bWJlcnNcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGRlZmF1bHRzLmRlc2NyaWJlKCdhbmltYXRpb25zJywge1xuICAgICAgICBfZmFsbGJhY2s6ICdhbmltYXRpb24nXG4gICAgfSk7XG4gICAgZGVmYXVsdHMuc2V0KCd0cmFuc2l0aW9ucycsIHtcbiAgICAgICAgYWN0aXZlOiB7XG4gICAgICAgICAgICBhbmltYXRpb246IHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogNDAwXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlc2l6ZToge1xuICAgICAgICAgICAgYW5pbWF0aW9uOiB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc2hvdzoge1xuICAgICAgICAgICAgYW5pbWF0aW9uczoge1xuICAgICAgICAgICAgICAgIGNvbG9yczoge1xuICAgICAgICAgICAgICAgICAgICBmcm9tOiAndHJhbnNwYXJlbnQnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB2aXNpYmxlOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGhpZGU6IHtcbiAgICAgICAgICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBjb2xvcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgdG86ICd0cmFuc3BhcmVudCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHZpc2libGU6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgICAgICAgICAgICAgICBlYXNpbmc6ICdsaW5lYXInLFxuICAgICAgICAgICAgICAgICAgICBmbjogKHYpPT52IHwgMFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBhcHBseUxheW91dHNEZWZhdWx0cyhkZWZhdWx0cykge1xuICAgIGRlZmF1bHRzLnNldCgnbGF5b3V0Jywge1xuICAgICAgICBhdXRvUGFkZGluZzogdHJ1ZSxcbiAgICAgICAgcGFkZGluZzoge1xuICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgICAgICBib3R0b206IDAsXG4gICAgICAgICAgICBsZWZ0OiAwXG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuY29uc3QgaW50bENhY2hlID0gbmV3IE1hcCgpO1xuZnVuY3Rpb24gZ2V0TnVtYmVyRm9ybWF0KGxvY2FsZSwgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gbG9jYWxlICsgSlNPTi5zdHJpbmdpZnkob3B0aW9ucyk7XG4gICAgbGV0IGZvcm1hdHRlciA9IGludGxDYWNoZS5nZXQoY2FjaGVLZXkpO1xuICAgIGlmICghZm9ybWF0dGVyKSB7XG4gICAgICAgIGZvcm1hdHRlciA9IG5ldyBJbnRsLk51bWJlckZvcm1hdChsb2NhbGUsIG9wdGlvbnMpO1xuICAgICAgICBpbnRsQ2FjaGUuc2V0KGNhY2hlS2V5LCBmb3JtYXR0ZXIpO1xuICAgIH1cbiAgICByZXR1cm4gZm9ybWF0dGVyO1xufVxuZnVuY3Rpb24gZm9ybWF0TnVtYmVyKG51bSwgbG9jYWxlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGdldE51bWJlckZvcm1hdChsb2NhbGUsIG9wdGlvbnMpLmZvcm1hdChudW0pO1xufVxuXG5jb25zdCBmb3JtYXR0ZXJzID0ge1xuIHZhbHVlcyAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpID8gIHZhbHVlIDogJycgKyB2YWx1ZTtcbiAgICB9LFxuIG51bWVyaWMgKHRpY2tWYWx1ZSwgaW5kZXgsIHRpY2tzKSB7XG4gICAgICAgIGlmICh0aWNrVmFsdWUgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAnMCc7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbG9jYWxlID0gdGhpcy5jaGFydC5vcHRpb25zLmxvY2FsZTtcbiAgICAgICAgbGV0IG5vdGF0aW9uO1xuICAgICAgICBsZXQgZGVsdGEgPSB0aWNrVmFsdWU7XG4gICAgICAgIGlmICh0aWNrcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBjb25zdCBtYXhUaWNrID0gTWF0aC5tYXgoTWF0aC5hYnModGlja3NbMF0udmFsdWUpLCBNYXRoLmFicyh0aWNrc1t0aWNrcy5sZW5ndGggLSAxXS52YWx1ZSkpO1xuICAgICAgICAgICAgaWYgKG1heFRpY2sgPCAxZS00IHx8IG1heFRpY2sgPiAxZSsxNSkge1xuICAgICAgICAgICAgICAgIG5vdGF0aW9uID0gJ3NjaWVudGlmaWMnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVsdGEgPSBjYWxjdWxhdGVEZWx0YSh0aWNrVmFsdWUsIHRpY2tzKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsb2dEZWx0YSA9IGxvZzEwKE1hdGguYWJzKGRlbHRhKSk7XG4gICAgICAgIGNvbnN0IG51bURlY2ltYWwgPSBpc05hTihsb2dEZWx0YSkgPyAxIDogTWF0aC5tYXgoTWF0aC5taW4oLTEgKiBNYXRoLmZsb29yKGxvZ0RlbHRhKSwgMjApLCAwKTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIG5vdGF0aW9uLFxuICAgICAgICAgICAgbWluaW11bUZyYWN0aW9uRGlnaXRzOiBudW1EZWNpbWFsLFxuICAgICAgICAgICAgbWF4aW11bUZyYWN0aW9uRGlnaXRzOiBudW1EZWNpbWFsXG4gICAgICAgIH07XG4gICAgICAgIE9iamVjdC5hc3NpZ24ob3B0aW9ucywgdGhpcy5vcHRpb25zLnRpY2tzLmZvcm1hdCk7XG4gICAgICAgIHJldHVybiBmb3JtYXROdW1iZXIodGlja1ZhbHVlLCBsb2NhbGUsIG9wdGlvbnMpO1xuICAgIH0sXG4gbG9nYXJpdGhtaWMgKHRpY2tWYWx1ZSwgaW5kZXgsIHRpY2tzKSB7XG4gICAgICAgIGlmICh0aWNrVmFsdWUgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAnMCc7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVtYWluID0gdGlja3NbaW5kZXhdLnNpZ25pZmljYW5kIHx8IHRpY2tWYWx1ZSAvIE1hdGgucG93KDEwLCBNYXRoLmZsb29yKGxvZzEwKHRpY2tWYWx1ZSkpKTtcbiAgICAgICAgaWYgKFtcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDE1XG4gICAgICAgIF0uaW5jbHVkZXMocmVtYWluKSB8fCBpbmRleCA+IDAuOCAqIHRpY2tzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdHRlcnMubnVtZXJpYy5jYWxsKHRoaXMsIHRpY2tWYWx1ZSwgaW5kZXgsIHRpY2tzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxufTtcbmZ1bmN0aW9uIGNhbGN1bGF0ZURlbHRhKHRpY2tWYWx1ZSwgdGlja3MpIHtcbiAgICBsZXQgZGVsdGEgPSB0aWNrcy5sZW5ndGggPiAzID8gdGlja3NbMl0udmFsdWUgLSB0aWNrc1sxXS52YWx1ZSA6IHRpY2tzWzFdLnZhbHVlIC0gdGlja3NbMF0udmFsdWU7XG4gICAgaWYgKE1hdGguYWJzKGRlbHRhKSA+PSAxICYmIHRpY2tWYWx1ZSAhPT0gTWF0aC5mbG9vcih0aWNrVmFsdWUpKSB7XG4gICAgICAgIGRlbHRhID0gdGlja1ZhbHVlIC0gTWF0aC5mbG9vcih0aWNrVmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gZGVsdGE7XG59XG4gdmFyIFRpY2tzID0ge1xuICAgIGZvcm1hdHRlcnNcbn07XG5cbmZ1bmN0aW9uIGFwcGx5U2NhbGVEZWZhdWx0cyhkZWZhdWx0cykge1xuICAgIGRlZmF1bHRzLnNldCgnc2NhbGUnLCB7XG4gICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgIG9mZnNldDogZmFsc2UsXG4gICAgICAgIHJldmVyc2U6IGZhbHNlLFxuICAgICAgICBiZWdpbkF0WmVybzogZmFsc2UsXG4gYm91bmRzOiAndGlja3MnLFxuIGdyYWNlOiAwLFxuICAgICAgICBncmlkOiB7XG4gICAgICAgICAgICBkaXNwbGF5OiB0cnVlLFxuICAgICAgICAgICAgbGluZVdpZHRoOiAxLFxuICAgICAgICAgICAgZHJhd09uQ2hhcnRBcmVhOiB0cnVlLFxuICAgICAgICAgICAgZHJhd1RpY2tzOiB0cnVlLFxuICAgICAgICAgICAgdGlja0xlbmd0aDogOCxcbiAgICAgICAgICAgIHRpY2tXaWR0aDogKF9jdHgsIG9wdGlvbnMpPT5vcHRpb25zLmxpbmVXaWR0aCxcbiAgICAgICAgICAgIHRpY2tDb2xvcjogKF9jdHgsIG9wdGlvbnMpPT5vcHRpb25zLmNvbG9yLFxuICAgICAgICAgICAgb2Zmc2V0OiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBib3JkZXI6IHtcbiAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgICAgICBkYXNoOiBbXSxcbiAgICAgICAgICAgIGRhc2hPZmZzZXQ6IDAuMCxcbiAgICAgICAgICAgIHdpZHRoOiAxXG4gICAgICAgIH0sXG4gICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICAgICAgICAgIHRleHQ6ICcnLFxuICAgICAgICAgICAgcGFkZGluZzoge1xuICAgICAgICAgICAgICAgIHRvcDogNCxcbiAgICAgICAgICAgICAgICBib3R0b206IDRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgIG1pblJvdGF0aW9uOiAwLFxuICAgICAgICAgICAgbWF4Um90YXRpb246IDUwLFxuICAgICAgICAgICAgbWlycm9yOiBmYWxzZSxcbiAgICAgICAgICAgIHRleHRTdHJva2VXaWR0aDogMCxcbiAgICAgICAgICAgIHRleHRTdHJva2VDb2xvcjogJycsXG4gICAgICAgICAgICBwYWRkaW5nOiAzLFxuICAgICAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgICAgIGF1dG9Ta2lwOiB0cnVlLFxuICAgICAgICAgICAgYXV0b1NraXBQYWRkaW5nOiAzLFxuICAgICAgICAgICAgbGFiZWxPZmZzZXQ6IDAsXG4gICAgICAgICAgICBjYWxsYmFjazogVGlja3MuZm9ybWF0dGVycy52YWx1ZXMsXG4gICAgICAgICAgICBtaW5vcjoge30sXG4gICAgICAgICAgICBtYWpvcjoge30sXG4gICAgICAgICAgICBhbGlnbjogJ2NlbnRlcicsXG4gICAgICAgICAgICBjcm9zc0FsaWduOiAnbmVhcicsXG4gICAgICAgICAgICBzaG93TGFiZWxCYWNrZHJvcDogZmFsc2UsXG4gICAgICAgICAgICBiYWNrZHJvcENvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjc1KScsXG4gICAgICAgICAgICBiYWNrZHJvcFBhZGRpbmc6IDJcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGRlZmF1bHRzLnJvdXRlKCdzY2FsZS50aWNrcycsICdjb2xvcicsICcnLCAnY29sb3InKTtcbiAgICBkZWZhdWx0cy5yb3V0ZSgnc2NhbGUuZ3JpZCcsICdjb2xvcicsICcnLCAnYm9yZGVyQ29sb3InKTtcbiAgICBkZWZhdWx0cy5yb3V0ZSgnc2NhbGUuYm9yZGVyJywgJ2NvbG9yJywgJycsICdib3JkZXJDb2xvcicpO1xuICAgIGRlZmF1bHRzLnJvdXRlKCdzY2FsZS50aXRsZScsICdjb2xvcicsICcnLCAnY29sb3InKTtcbiAgICBkZWZhdWx0cy5kZXNjcmliZSgnc2NhbGUnLCB7XG4gICAgICAgIF9mYWxsYmFjazogZmFsc2UsXG4gICAgICAgIF9zY3JpcHRhYmxlOiAobmFtZSk9PiFuYW1lLnN0YXJ0c1dpdGgoJ2JlZm9yZScpICYmICFuYW1lLnN0YXJ0c1dpdGgoJ2FmdGVyJykgJiYgbmFtZSAhPT0gJ2NhbGxiYWNrJyAmJiBuYW1lICE9PSAncGFyc2VyJyxcbiAgICAgICAgX2luZGV4YWJsZTogKG5hbWUpPT5uYW1lICE9PSAnYm9yZGVyRGFzaCcgJiYgbmFtZSAhPT0gJ3RpY2tCb3JkZXJEYXNoJyAmJiBuYW1lICE9PSAnZGFzaCdcbiAgICB9KTtcbiAgICBkZWZhdWx0cy5kZXNjcmliZSgnc2NhbGVzJywge1xuICAgICAgICBfZmFsbGJhY2s6ICdzY2FsZSdcbiAgICB9KTtcbiAgICBkZWZhdWx0cy5kZXNjcmliZSgnc2NhbGUudGlja3MnLCB7XG4gICAgICAgIF9zY3JpcHRhYmxlOiAobmFtZSk9Pm5hbWUgIT09ICdiYWNrZHJvcFBhZGRpbmcnICYmIG5hbWUgIT09ICdjYWxsYmFjaycsXG4gICAgICAgIF9pbmRleGFibGU6IChuYW1lKT0+bmFtZSAhPT0gJ2JhY2tkcm9wUGFkZGluZydcbiAgICB9KTtcbn1cblxuY29uc3Qgb3ZlcnJpZGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmNvbnN0IGRlc2NyaXB0b3JzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBmdW5jdGlvbiBnZXRTY29wZSQxKG5vZGUsIGtleSkge1xuICAgIGlmICgha2V5KSB7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgICBjb25zdCBrZXlzID0ga2V5LnNwbGl0KCcuJyk7XG4gICAgZm9yKGxldCBpID0gMCwgbiA9IGtleXMubGVuZ3RoOyBpIDwgbjsgKytpKXtcbiAgICAgICAgY29uc3QgayA9IGtleXNbaV07XG4gICAgICAgIG5vZGUgPSBub2RlW2tdIHx8IChub2RlW2tdID0gT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gICAgfVxuICAgIHJldHVybiBub2RlO1xufVxuZnVuY3Rpb24gc2V0KHJvb3QsIHNjb3BlLCB2YWx1ZXMpIHtcbiAgICBpZiAodHlwZW9mIHNjb3BlID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gbWVyZ2UoZ2V0U2NvcGUkMShyb290LCBzY29wZSksIHZhbHVlcyk7XG4gICAgfVxuICAgIHJldHVybiBtZXJnZShnZXRTY29wZSQxKHJvb3QsICcnKSwgc2NvcGUpO1xufVxuIGNsYXNzIERlZmF1bHRzIHtcbiAgICBjb25zdHJ1Y3RvcihfZGVzY3JpcHRvcnMsIF9hcHBsaWVycyl7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmJhY2tncm91bmRDb2xvciA9ICdyZ2JhKDAsMCwwLDAuMSknO1xuICAgICAgICB0aGlzLmJvcmRlckNvbG9yID0gJ3JnYmEoMCwwLDAsMC4xKSc7XG4gICAgICAgIHRoaXMuY29sb3IgPSAnIzY2Nic7XG4gICAgICAgIHRoaXMuZGF0YXNldHMgPSB7fTtcbiAgICAgICAgdGhpcy5kZXZpY2VQaXhlbFJhdGlvID0gKGNvbnRleHQpPT5jb250ZXh0LmNoYXJ0LnBsYXRmb3JtLmdldERldmljZVBpeGVsUmF0aW8oKTtcbiAgICAgICAgdGhpcy5lbGVtZW50cyA9IHt9O1xuICAgICAgICB0aGlzLmV2ZW50cyA9IFtcbiAgICAgICAgICAgICdtb3VzZW1vdmUnLFxuICAgICAgICAgICAgJ21vdXNlb3V0JyxcbiAgICAgICAgICAgICdjbGljaycsXG4gICAgICAgICAgICAndG91Y2hzdGFydCcsXG4gICAgICAgICAgICAndG91Y2htb3ZlJ1xuICAgICAgICBdO1xuICAgICAgICB0aGlzLmZvbnQgPSB7XG4gICAgICAgICAgICBmYW1pbHk6IFwiJ0hlbHZldGljYSBOZXVlJywgJ0hlbHZldGljYScsICdBcmlhbCcsIHNhbnMtc2VyaWZcIixcbiAgICAgICAgICAgIHNpemU6IDEyLFxuICAgICAgICAgICAgc3R5bGU6ICdub3JtYWwnLFxuICAgICAgICAgICAgbGluZUhlaWdodDogMS4yLFxuICAgICAgICAgICAgd2VpZ2h0OiBudWxsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaG92ZXIgPSB7fTtcbiAgICAgICAgdGhpcy5ob3ZlckJhY2tncm91bmRDb2xvciA9IChjdHgsIG9wdGlvbnMpPT5nZXRIb3ZlckNvbG9yKG9wdGlvbnMuYmFja2dyb3VuZENvbG9yKTtcbiAgICAgICAgdGhpcy5ob3ZlckJvcmRlckNvbG9yID0gKGN0eCwgb3B0aW9ucyk9PmdldEhvdmVyQ29sb3Iob3B0aW9ucy5ib3JkZXJDb2xvcik7XG4gICAgICAgIHRoaXMuaG92ZXJDb2xvciA9IChjdHgsIG9wdGlvbnMpPT5nZXRIb3ZlckNvbG9yKG9wdGlvbnMuY29sb3IpO1xuICAgICAgICB0aGlzLmluZGV4QXhpcyA9ICd4JztcbiAgICAgICAgdGhpcy5pbnRlcmFjdGlvbiA9IHtcbiAgICAgICAgICAgIG1vZGU6ICduZWFyZXN0JyxcbiAgICAgICAgICAgIGludGVyc2VjdDogdHJ1ZSxcbiAgICAgICAgICAgIGluY2x1ZGVJbnZpc2libGU6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMubWFpbnRhaW5Bc3BlY3RSYXRpbyA9IHRydWU7XG4gICAgICAgIHRoaXMub25Ib3ZlciA9IG51bGw7XG4gICAgICAgIHRoaXMub25DbGljayA9IG51bGw7XG4gICAgICAgIHRoaXMucGFyc2luZyA9IHRydWU7XG4gICAgICAgIHRoaXMucGx1Z2lucyA9IHt9O1xuICAgICAgICB0aGlzLnJlc3BvbnNpdmUgPSB0cnVlO1xuICAgICAgICB0aGlzLnNjYWxlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnNjYWxlcyA9IHt9O1xuICAgICAgICB0aGlzLnNob3dMaW5lID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kcmF3QWN0aXZlRWxlbWVudHNPblRvcCA9IHRydWU7XG4gICAgICAgIHRoaXMuZGVzY3JpYmUoX2Rlc2NyaXB0b3JzKTtcbiAgICAgICAgdGhpcy5hcHBseShfYXBwbGllcnMpO1xuICAgIH1cbiBzZXQoc2NvcGUsIHZhbHVlcykge1xuICAgICAgICByZXR1cm4gc2V0KHRoaXMsIHNjb3BlLCB2YWx1ZXMpO1xuICAgIH1cbiBnZXQoc2NvcGUpIHtcbiAgICAgICAgcmV0dXJuIGdldFNjb3BlJDEodGhpcywgc2NvcGUpO1xuICAgIH1cbiBkZXNjcmliZShzY29wZSwgdmFsdWVzKSB7XG4gICAgICAgIHJldHVybiBzZXQoZGVzY3JpcHRvcnMsIHNjb3BlLCB2YWx1ZXMpO1xuICAgIH1cbiAgICBvdmVycmlkZShzY29wZSwgdmFsdWVzKSB7XG4gICAgICAgIHJldHVybiBzZXQob3ZlcnJpZGVzLCBzY29wZSwgdmFsdWVzKTtcbiAgICB9XG4gcm91dGUoc2NvcGUsIG5hbWUsIHRhcmdldFNjb3BlLCB0YXJnZXROYW1lKSB7XG4gICAgICAgIGNvbnN0IHNjb3BlT2JqZWN0ID0gZ2V0U2NvcGUkMSh0aGlzLCBzY29wZSk7XG4gICAgICAgIGNvbnN0IHRhcmdldFNjb3BlT2JqZWN0ID0gZ2V0U2NvcGUkMSh0aGlzLCB0YXJnZXRTY29wZSk7XG4gICAgICAgIGNvbnN0IHByaXZhdGVOYW1lID0gJ18nICsgbmFtZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoc2NvcGVPYmplY3QsIHtcbiAgICAgICAgICAgIFtwcml2YXRlTmFtZV06IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogc2NvcGVPYmplY3RbbmFtZV0sXG4gICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbbmFtZV06IHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGdldCAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsID0gdGhpc1twcml2YXRlTmFtZV07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IHRhcmdldFNjb3BlT2JqZWN0W3RhcmdldE5hbWVdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNPYmplY3QobG9jYWwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgdGFyZ2V0LCBsb2NhbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlT3JEZWZhdWx0KGxvY2FsLCB0YXJnZXQpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0ICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzW3ByaXZhdGVOYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFwcGx5KGFwcGxpZXJzKSB7XG4gICAgICAgIGFwcGxpZXJzLmZvckVhY2goKGFwcGx5KT0+YXBwbHkodGhpcykpO1xuICAgIH1cbn1cbnZhciBkZWZhdWx0cyA9IC8qICNfX1BVUkVfXyAqLyBuZXcgRGVmYXVsdHMoe1xuICAgIF9zY3JpcHRhYmxlOiAobmFtZSk9PiFuYW1lLnN0YXJ0c1dpdGgoJ29uJyksXG4gICAgX2luZGV4YWJsZTogKG5hbWUpPT5uYW1lICE9PSAnZXZlbnRzJyxcbiAgICBob3Zlcjoge1xuICAgICAgICBfZmFsbGJhY2s6ICdpbnRlcmFjdGlvbidcbiAgICB9LFxuICAgIGludGVyYWN0aW9uOiB7XG4gICAgICAgIF9zY3JpcHRhYmxlOiBmYWxzZSxcbiAgICAgICAgX2luZGV4YWJsZTogZmFsc2VcbiAgICB9XG59LCBbXG4gICAgYXBwbHlBbmltYXRpb25zRGVmYXVsdHMsXG4gICAgYXBwbHlMYXlvdXRzRGVmYXVsdHMsXG4gICAgYXBwbHlTY2FsZURlZmF1bHRzXG5dKTtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gZm9udCBvYmplY3QgaW50byBhIENTUyBmb250IHN0cmluZy5cbiAqIEBwYXJhbSBmb250IC0gQSBmb250IG9iamVjdC5cbiAqIEByZXR1cm4gVGhlIENTUyBmb250IHN0cmluZy4gU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9mb250XG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIHRvRm9udFN0cmluZyhmb250KSB7XG4gICAgaWYgKCFmb250IHx8IGlzTnVsbE9yVW5kZWYoZm9udC5zaXplKSB8fCBpc051bGxPclVuZGVmKGZvbnQuZmFtaWx5KSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIChmb250LnN0eWxlID8gZm9udC5zdHlsZSArICcgJyA6ICcnKSArIChmb250LndlaWdodCA/IGZvbnQud2VpZ2h0ICsgJyAnIDogJycpICsgZm9udC5zaXplICsgJ3B4ICcgKyBmb250LmZhbWlseTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfbWVhc3VyZVRleHQoY3R4LCBkYXRhLCBnYywgbG9uZ2VzdCwgc3RyaW5nKSB7XG4gICAgbGV0IHRleHRXaWR0aCA9IGRhdGFbc3RyaW5nXTtcbiAgICBpZiAoIXRleHRXaWR0aCkge1xuICAgICAgICB0ZXh0V2lkdGggPSBkYXRhW3N0cmluZ10gPSBjdHgubWVhc3VyZVRleHQoc3RyaW5nKS53aWR0aDtcbiAgICAgICAgZ2MucHVzaChzdHJpbmcpO1xuICAgIH1cbiAgICBpZiAodGV4dFdpZHRoID4gbG9uZ2VzdCkge1xuICAgICAgICBsb25nZXN0ID0gdGV4dFdpZHRoO1xuICAgIH1cbiAgICByZXR1cm4gbG9uZ2VzdDtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqLyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eVxuZnVuY3Rpb24gX2xvbmdlc3RUZXh0KGN0eCwgZm9udCwgYXJyYXlPZlRoaW5ncywgY2FjaGUpIHtcbiAgICBjYWNoZSA9IGNhY2hlIHx8IHt9O1xuICAgIGxldCBkYXRhID0gY2FjaGUuZGF0YSA9IGNhY2hlLmRhdGEgfHwge307XG4gICAgbGV0IGdjID0gY2FjaGUuZ2FyYmFnZUNvbGxlY3QgPSBjYWNoZS5nYXJiYWdlQ29sbGVjdCB8fCBbXTtcbiAgICBpZiAoY2FjaGUuZm9udCAhPT0gZm9udCkge1xuICAgICAgICBkYXRhID0gY2FjaGUuZGF0YSA9IHt9O1xuICAgICAgICBnYyA9IGNhY2hlLmdhcmJhZ2VDb2xsZWN0ID0gW107XG4gICAgICAgIGNhY2hlLmZvbnQgPSBmb250O1xuICAgIH1cbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC5mb250ID0gZm9udDtcbiAgICBsZXQgbG9uZ2VzdCA9IDA7XG4gICAgY29uc3QgaWxlbiA9IGFycmF5T2ZUaGluZ3MubGVuZ3RoO1xuICAgIGxldCBpLCBqLCBqbGVuLCB0aGluZywgbmVzdGVkVGhpbmc7XG4gICAgZm9yKGkgPSAwOyBpIDwgaWxlbjsgaSsrKXtcbiAgICAgICAgdGhpbmcgPSBhcnJheU9mVGhpbmdzW2ldO1xuICAgICAgICAvLyBVbmRlZmluZWQgc3RyaW5ncyBhbmQgYXJyYXlzIHNob3VsZCBub3QgYmUgbWVhc3VyZWRcbiAgICAgICAgaWYgKHRoaW5nICE9PSB1bmRlZmluZWQgJiYgdGhpbmcgIT09IG51bGwgJiYgIWlzQXJyYXkodGhpbmcpKSB7XG4gICAgICAgICAgICBsb25nZXN0ID0gX21lYXN1cmVUZXh0KGN0eCwgZGF0YSwgZ2MsIGxvbmdlc3QsIHRoaW5nKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KHRoaW5nKSkge1xuICAgICAgICAgICAgLy8gaWYgaXQgaXMgYW4gYXJyYXkgbGV0cyBtZWFzdXJlIGVhY2ggZWxlbWVudFxuICAgICAgICAgICAgLy8gdG8gZG8gbWF5YmUgc2ltcGxpZnkgdGhpcyBmdW5jdGlvbiBhIGJpdCBzbyB3ZSBjYW4gZG8gdGhpcyBtb3JlIHJlY3Vyc2l2ZWx5P1xuICAgICAgICAgICAgZm9yKGogPSAwLCBqbGVuID0gdGhpbmcubGVuZ3RoOyBqIDwgamxlbjsgaisrKXtcbiAgICAgICAgICAgICAgICBuZXN0ZWRUaGluZyA9IHRoaW5nW2pdO1xuICAgICAgICAgICAgICAgIC8vIFVuZGVmaW5lZCBzdHJpbmdzIGFuZCBhcnJheXMgc2hvdWxkIG5vdCBiZSBtZWFzdXJlZFxuICAgICAgICAgICAgICAgIGlmIChuZXN0ZWRUaGluZyAhPT0gdW5kZWZpbmVkICYmIG5lc3RlZFRoaW5nICE9PSBudWxsICYmICFpc0FycmF5KG5lc3RlZFRoaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICBsb25nZXN0ID0gX21lYXN1cmVUZXh0KGN0eCwgZGF0YSwgZ2MsIGxvbmdlc3QsIG5lc3RlZFRoaW5nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgICBjb25zdCBnY0xlbiA9IGdjLmxlbmd0aCAvIDI7XG4gICAgaWYgKGdjTGVuID4gYXJyYXlPZlRoaW5ncy5sZW5ndGgpIHtcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgZ2NMZW47IGkrKyl7XG4gICAgICAgICAgICBkZWxldGUgZGF0YVtnY1tpXV07XG4gICAgICAgIH1cbiAgICAgICAgZ2Muc3BsaWNlKDAsIGdjTGVuKTtcbiAgICB9XG4gICAgcmV0dXJuIGxvbmdlc3Q7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGFsaWduZWQgcGl4ZWwgdmFsdWUgdG8gYXZvaWQgYW50aS1hbGlhc2luZyBibHVyXG4gKiBAcGFyYW0gY2hhcnQgLSBUaGUgY2hhcnQgaW5zdGFuY2UuXG4gKiBAcGFyYW0gcGl4ZWwgLSBBIHBpeGVsIHZhbHVlLlxuICogQHBhcmFtIHdpZHRoIC0gVGhlIHdpZHRoIG9mIHRoZSBlbGVtZW50LlxuICogQHJldHVybnMgVGhlIGFsaWduZWQgcGl4ZWwgdmFsdWUuXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9hbGlnblBpeGVsKGNoYXJ0LCBwaXhlbCwgd2lkdGgpIHtcbiAgICBjb25zdCBkZXZpY2VQaXhlbFJhdGlvID0gY2hhcnQuY3VycmVudERldmljZVBpeGVsUmF0aW87XG4gICAgY29uc3QgaGFsZldpZHRoID0gd2lkdGggIT09IDAgPyBNYXRoLm1heCh3aWR0aCAvIDIsIDAuNSkgOiAwO1xuICAgIHJldHVybiBNYXRoLnJvdW5kKChwaXhlbCAtIGhhbGZXaWR0aCkgKiBkZXZpY2VQaXhlbFJhdGlvKSAvIGRldmljZVBpeGVsUmF0aW8gKyBoYWxmV2lkdGg7XG59XG4vKipcbiAqIENsZWFycyB0aGUgZW50aXJlIGNhbnZhcy5cbiAqLyBmdW5jdGlvbiBjbGVhckNhbnZhcyhjYW52YXMsIGN0eCkge1xuICAgIGN0eCA9IGN0eCB8fCBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBjdHguc2F2ZSgpO1xuICAgIC8vIGNhbnZhcy53aWR0aCBhbmQgY2FudmFzLmhlaWdodCBkbyBub3QgY29uc2lkZXIgdGhlIGNhbnZhcyB0cmFuc2Zvcm0sXG4gICAgLy8gd2hpbGUgY2xlYXJSZWN0IGRvZXNcbiAgICBjdHgucmVzZXRUcmFuc2Zvcm0oKTtcbiAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgY3R4LnJlc3RvcmUoKTtcbn1cbmZ1bmN0aW9uIGRyYXdQb2ludChjdHgsIG9wdGlvbnMsIHgsIHkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVzZS1iZWZvcmUtZGVmaW5lXG4gICAgZHJhd1BvaW50TGVnZW5kKGN0eCwgb3B0aW9ucywgeCwgeSwgbnVsbCk7XG59XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eVxuZnVuY3Rpb24gZHJhd1BvaW50TGVnZW5kKGN0eCwgb3B0aW9ucywgeCwgeSwgdykge1xuICAgIGxldCB0eXBlLCB4T2Zmc2V0LCB5T2Zmc2V0LCBzaXplLCBjb3JuZXJSYWRpdXMsIHdpZHRoLCB4T2Zmc2V0VywgeU9mZnNldFc7XG4gICAgY29uc3Qgc3R5bGUgPSBvcHRpb25zLnBvaW50U3R5bGU7XG4gICAgY29uc3Qgcm90YXRpb24gPSBvcHRpb25zLnJvdGF0aW9uO1xuICAgIGNvbnN0IHJhZGl1cyA9IG9wdGlvbnMucmFkaXVzO1xuICAgIGxldCByYWQgPSAocm90YXRpb24gfHwgMCkgKiBSQURfUEVSX0RFRztcbiAgICBpZiAoc3R5bGUgJiYgdHlwZW9mIHN0eWxlID09PSAnb2JqZWN0Jykge1xuICAgICAgICB0eXBlID0gc3R5bGUudG9TdHJpbmcoKTtcbiAgICAgICAgaWYgKHR5cGUgPT09ICdbb2JqZWN0IEhUTUxJbWFnZUVsZW1lbnRdJyB8fCB0eXBlID09PSAnW29iamVjdCBIVE1MQ2FudmFzRWxlbWVudF0nKSB7XG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZSh4LCB5KTtcbiAgICAgICAgICAgIGN0eC5yb3RhdGUocmFkKTtcbiAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2Uoc3R5bGUsIC1zdHlsZS53aWR0aCAvIDIsIC1zdHlsZS5oZWlnaHQgLyAyLCBzdHlsZS53aWR0aCwgc3R5bGUuaGVpZ2h0KTtcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzTmFOKHJhZGl1cykgfHwgcmFkaXVzIDw9IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgc3dpdGNoKHN0eWxlKXtcbiAgICAgICAgLy8gRGVmYXVsdCBpbmNsdWRlcyBjaXJjbGVcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGlmICh3KSB7XG4gICAgICAgICAgICAgICAgY3R4LmVsbGlwc2UoeCwgeSwgdyAvIDIsIHJhZGl1cywgMCwgMCwgVEFVKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY3R4LmFyYyh4LCB5LCByYWRpdXMsIDAsIFRBVSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndHJpYW5nbGUnOlxuICAgICAgICAgICAgd2lkdGggPSB3ID8gdyAvIDIgOiByYWRpdXM7XG4gICAgICAgICAgICBjdHgubW92ZVRvKHggKyBNYXRoLnNpbihyYWQpICogd2lkdGgsIHkgLSBNYXRoLmNvcyhyYWQpICogcmFkaXVzKTtcbiAgICAgICAgICAgIHJhZCArPSBUV09fVEhJUkRTX1BJO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh4ICsgTWF0aC5zaW4ocmFkKSAqIHdpZHRoLCB5IC0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cyk7XG4gICAgICAgICAgICByYWQgKz0gVFdPX1RISVJEU19QSTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeCArIE1hdGguc2luKHJhZCkgKiB3aWR0aCwgeSAtIE1hdGguY29zKHJhZCkgKiByYWRpdXMpO1xuICAgICAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3JlY3RSb3VuZGVkJzpcbiAgICAgICAgICAgIC8vIE5PVEU6IHRoZSByb3VuZGVkIHJlY3QgaW1wbGVtZW50YXRpb24gY2hhbmdlZCB0byB1c2UgYGFyY2AgaW5zdGVhZCBvZlxuICAgICAgICAgICAgLy8gYHF1YWRyYXRpY0N1cnZlVG9gIHNpbmNlIGl0IGdlbmVyYXRlcyBiZXR0ZXIgcmVzdWx0cyB3aGVuIHJlY3QgaXNcbiAgICAgICAgICAgIC8vIGFsbW9zdCBhIGNpcmNsZS4gMC41MTYgKGluc3RlYWQgb2YgMC41KSBwcm9kdWNlcyByZXN1bHRzIHdpdGggdmlzdWFsbHlcbiAgICAgICAgICAgIC8vIGNsb3NlciBwcm9wb3J0aW9uIHRvIHRoZSBwcmV2aW91cyBpbXBsIGFuZCBpdCBpcyBpbnNjcmliZWQgaW4gdGhlXG4gICAgICAgICAgICAvLyBjaXJjbGUgd2l0aCBgcmFkaXVzYC4gRm9yIG1vcmUgZGV0YWlscywgc2VlIHRoZSBmb2xsb3dpbmcgUFJzOlxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzU1OTdcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy81ODU4XG4gICAgICAgICAgICBjb3JuZXJSYWRpdXMgPSByYWRpdXMgKiAwLjUxNjtcbiAgICAgICAgICAgIHNpemUgPSByYWRpdXMgLSBjb3JuZXJSYWRpdXM7XG4gICAgICAgICAgICB4T2Zmc2V0ID0gTWF0aC5jb3MocmFkICsgUVVBUlRFUl9QSSkgKiBzaXplO1xuICAgICAgICAgICAgeE9mZnNldFcgPSBNYXRoLmNvcyhyYWQgKyBRVUFSVEVSX1BJKSAqICh3ID8gdyAvIDIgLSBjb3JuZXJSYWRpdXMgOiBzaXplKTtcbiAgICAgICAgICAgIHlPZmZzZXQgPSBNYXRoLnNpbihyYWQgKyBRVUFSVEVSX1BJKSAqIHNpemU7XG4gICAgICAgICAgICB5T2Zmc2V0VyA9IE1hdGguc2luKHJhZCArIFFVQVJURVJfUEkpICogKHcgPyB3IC8gMiAtIGNvcm5lclJhZGl1cyA6IHNpemUpO1xuICAgICAgICAgICAgY3R4LmFyYyh4IC0geE9mZnNldFcsIHkgLSB5T2Zmc2V0LCBjb3JuZXJSYWRpdXMsIHJhZCAtIFBJLCByYWQgLSBIQUxGX1BJKTtcbiAgICAgICAgICAgIGN0eC5hcmMoeCArIHlPZmZzZXRXLCB5IC0geE9mZnNldCwgY29ybmVyUmFkaXVzLCByYWQgLSBIQUxGX1BJLCByYWQpO1xuICAgICAgICAgICAgY3R4LmFyYyh4ICsgeE9mZnNldFcsIHkgKyB5T2Zmc2V0LCBjb3JuZXJSYWRpdXMsIHJhZCwgcmFkICsgSEFMRl9QSSk7XG4gICAgICAgICAgICBjdHguYXJjKHggLSB5T2Zmc2V0VywgeSArIHhPZmZzZXQsIGNvcm5lclJhZGl1cywgcmFkICsgSEFMRl9QSSwgcmFkICsgUEkpO1xuICAgICAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3JlY3QnOlxuICAgICAgICAgICAgaWYgKCFyb3RhdGlvbikge1xuICAgICAgICAgICAgICAgIHNpemUgPSBNYXRoLlNRUlQxXzIgKiByYWRpdXM7XG4gICAgICAgICAgICAgICAgd2lkdGggPSB3ID8gdyAvIDIgOiBzaXplO1xuICAgICAgICAgICAgICAgIGN0eC5yZWN0KHggLSB3aWR0aCwgeSAtIHNpemUsIDIgKiB3aWR0aCwgMiAqIHNpemUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmFkICs9IFFVQVJURVJfUEk7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi8gY2FzZSAncmVjdFJvdCc6XG4gICAgICAgICAgICB4T2Zmc2V0VyA9IE1hdGguY29zKHJhZCkgKiAodyA/IHcgLyAyIDogcmFkaXVzKTtcbiAgICAgICAgICAgIHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuICAgICAgICAgICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG4gICAgICAgICAgICB5T2Zmc2V0VyA9IE1hdGguc2luKHJhZCkgKiAodyA/IHcgLyAyIDogcmFkaXVzKTtcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXRXLCB5IC0geU9mZnNldCk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHggKyB5T2Zmc2V0VywgeSAtIHhPZmZzZXQpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh4ICsgeE9mZnNldFcsIHkgKyB5T2Zmc2V0KTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeCAtIHlPZmZzZXRXLCB5ICsgeE9mZnNldCk7XG4gICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnY3Jvc3NSb3QnOlxuICAgICAgICAgICAgcmFkICs9IFFVQVJURVJfUEk7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi8gY2FzZSAnY3Jvc3MnOlxuICAgICAgICAgICAgeE9mZnNldFcgPSBNYXRoLmNvcyhyYWQpICogKHcgPyB3IC8gMiA6IHJhZGl1cyk7XG4gICAgICAgICAgICB4T2Zmc2V0ID0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cztcbiAgICAgICAgICAgIHlPZmZzZXQgPSBNYXRoLnNpbihyYWQpICogcmFkaXVzO1xuICAgICAgICAgICAgeU9mZnNldFcgPSBNYXRoLnNpbihyYWQpICogKHcgPyB3IC8gMiA6IHJhZGl1cyk7XG4gICAgICAgICAgICBjdHgubW92ZVRvKHggLSB4T2Zmc2V0VywgeSAtIHlPZmZzZXQpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh4ICsgeE9mZnNldFcsIHkgKyB5T2Zmc2V0KTtcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8oeCArIHlPZmZzZXRXLCB5IC0geE9mZnNldCk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHggLSB5T2Zmc2V0VywgeSArIHhPZmZzZXQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3N0YXInOlxuICAgICAgICAgICAgeE9mZnNldFcgPSBNYXRoLmNvcyhyYWQpICogKHcgPyB3IC8gMiA6IHJhZGl1cyk7XG4gICAgICAgICAgICB4T2Zmc2V0ID0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cztcbiAgICAgICAgICAgIHlPZmZzZXQgPSBNYXRoLnNpbihyYWQpICogcmFkaXVzO1xuICAgICAgICAgICAgeU9mZnNldFcgPSBNYXRoLnNpbihyYWQpICogKHcgPyB3IC8gMiA6IHJhZGl1cyk7XG4gICAgICAgICAgICBjdHgubW92ZVRvKHggLSB4T2Zmc2V0VywgeSAtIHlPZmZzZXQpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh4ICsgeE9mZnNldFcsIHkgKyB5T2Zmc2V0KTtcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8oeCArIHlPZmZzZXRXLCB5IC0geE9mZnNldCk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHggLSB5T2Zmc2V0VywgeSArIHhPZmZzZXQpO1xuICAgICAgICAgICAgcmFkICs9IFFVQVJURVJfUEk7XG4gICAgICAgICAgICB4T2Zmc2V0VyA9IE1hdGguY29zKHJhZCkgKiAodyA/IHcgLyAyIDogcmFkaXVzKTtcbiAgICAgICAgICAgIHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuICAgICAgICAgICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG4gICAgICAgICAgICB5T2Zmc2V0VyA9IE1hdGguc2luKHJhZCkgKiAodyA/IHcgLyAyIDogcmFkaXVzKTtcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXRXLCB5IC0geU9mZnNldCk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHggKyB4T2Zmc2V0VywgeSArIHlPZmZzZXQpO1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyh4ICsgeU9mZnNldFcsIHkgLSB4T2Zmc2V0KTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeCAtIHlPZmZzZXRXLCB5ICsgeE9mZnNldCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbGluZSc6XG4gICAgICAgICAgICB4T2Zmc2V0ID0gdyA/IHcgLyAyIDogTWF0aC5jb3MocmFkKSAqIHJhZGl1cztcbiAgICAgICAgICAgIHlPZmZzZXQgPSBNYXRoLnNpbihyYWQpICogcmFkaXVzO1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyh4IC0geE9mZnNldCwgeSAtIHlPZmZzZXQpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh4ICsgeE9mZnNldCwgeSArIHlPZmZzZXQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2Rhc2gnOlxuICAgICAgICAgICAgY3R4Lm1vdmVUbyh4LCB5KTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeCArIE1hdGguY29zKHJhZCkgKiAodyA/IHcgLyAyIDogcmFkaXVzKSwgeSArIE1hdGguc2luKHJhZCkgKiByYWRpdXMpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgZmFsc2U6XG4gICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgY3R4LmZpbGwoKTtcbiAgICBpZiAob3B0aW9ucy5ib3JkZXJXaWR0aCA+IDApIHtcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgIH1cbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBwb2ludCBpcyBpbnNpZGUgdGhlIHJlY3RhbmdsZVxuICogQHBhcmFtIHBvaW50IC0gVGhlIHBvaW50IHRvIHRlc3RcbiAqIEBwYXJhbSBhcmVhIC0gVGhlIHJlY3RhbmdsZVxuICogQHBhcmFtIG1hcmdpbiAtIGFsbG93ZWQgbWFyZ2luXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9pc1BvaW50SW5BcmVhKHBvaW50LCBhcmVhLCBtYXJnaW4pIHtcbiAgICBtYXJnaW4gPSBtYXJnaW4gfHwgMC41OyAvLyBtYXJnaW4gLSBkZWZhdWx0IGlzIHRvIG1hdGNoIHJvdW5kZWQgZGVjaW1hbHNcbiAgICByZXR1cm4gIWFyZWEgfHwgcG9pbnQgJiYgcG9pbnQueCA+IGFyZWEubGVmdCAtIG1hcmdpbiAmJiBwb2ludC54IDwgYXJlYS5yaWdodCArIG1hcmdpbiAmJiBwb2ludC55ID4gYXJlYS50b3AgLSBtYXJnaW4gJiYgcG9pbnQueSA8IGFyZWEuYm90dG9tICsgbWFyZ2luO1xufVxuZnVuY3Rpb24gY2xpcEFyZWEoY3R4LCBhcmVhKSB7XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4LnJlY3QoYXJlYS5sZWZ0LCBhcmVhLnRvcCwgYXJlYS5yaWdodCAtIGFyZWEubGVmdCwgYXJlYS5ib3R0b20gLSBhcmVhLnRvcCk7XG4gICAgY3R4LmNsaXAoKTtcbn1cbmZ1bmN0aW9uIHVuY2xpcEFyZWEoY3R4KSB7XG4gICAgY3R4LnJlc3RvcmUoKTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfc3RlcHBlZExpbmVUbyhjdHgsIHByZXZpb3VzLCB0YXJnZXQsIGZsaXAsIG1vZGUpIHtcbiAgICBpZiAoIXByZXZpb3VzKSB7XG4gICAgICAgIHJldHVybiBjdHgubGluZVRvKHRhcmdldC54LCB0YXJnZXQueSk7XG4gICAgfVxuICAgIGlmIChtb2RlID09PSAnbWlkZGxlJykge1xuICAgICAgICBjb25zdCBtaWRwb2ludCA9IChwcmV2aW91cy54ICsgdGFyZ2V0LngpIC8gMi4wO1xuICAgICAgICBjdHgubGluZVRvKG1pZHBvaW50LCBwcmV2aW91cy55KTtcbiAgICAgICAgY3R4LmxpbmVUbyhtaWRwb2ludCwgdGFyZ2V0LnkpO1xuICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2FmdGVyJyAhPT0gISFmbGlwKSB7XG4gICAgICAgIGN0eC5saW5lVG8ocHJldmlvdXMueCwgdGFyZ2V0LnkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGN0eC5saW5lVG8odGFyZ2V0LngsIHByZXZpb3VzLnkpO1xuICAgIH1cbiAgICBjdHgubGluZVRvKHRhcmdldC54LCB0YXJnZXQueSk7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2JlemllckN1cnZlVG8oY3R4LCBwcmV2aW91cywgdGFyZ2V0LCBmbGlwKSB7XG4gICAgaWYgKCFwcmV2aW91cykge1xuICAgICAgICByZXR1cm4gY3R4LmxpbmVUbyh0YXJnZXQueCwgdGFyZ2V0LnkpO1xuICAgIH1cbiAgICBjdHguYmV6aWVyQ3VydmVUbyhmbGlwID8gcHJldmlvdXMuY3AxeCA6IHByZXZpb3VzLmNwMngsIGZsaXAgPyBwcmV2aW91cy5jcDF5IDogcHJldmlvdXMuY3AyeSwgZmxpcCA/IHRhcmdldC5jcDJ4IDogdGFyZ2V0LmNwMXgsIGZsaXAgPyB0YXJnZXQuY3AyeSA6IHRhcmdldC5jcDF5LCB0YXJnZXQueCwgdGFyZ2V0LnkpO1xufVxuZnVuY3Rpb24gc2V0UmVuZGVyT3B0cyhjdHgsIG9wdHMpIHtcbiAgICBpZiAob3B0cy50cmFuc2xhdGlvbikge1xuICAgICAgICBjdHgudHJhbnNsYXRlKG9wdHMudHJhbnNsYXRpb25bMF0sIG9wdHMudHJhbnNsYXRpb25bMV0pO1xuICAgIH1cbiAgICBpZiAoIWlzTnVsbE9yVW5kZWYob3B0cy5yb3RhdGlvbikpIHtcbiAgICAgICAgY3R4LnJvdGF0ZShvcHRzLnJvdGF0aW9uKTtcbiAgICB9XG4gICAgaWYgKG9wdHMuY29sb3IpIHtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdHMuY29sb3I7XG4gICAgfVxuICAgIGlmIChvcHRzLnRleHRBbGlnbikge1xuICAgICAgICBjdHgudGV4dEFsaWduID0gb3B0cy50ZXh0QWxpZ247XG4gICAgfVxuICAgIGlmIChvcHRzLnRleHRCYXNlbGluZSkge1xuICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gb3B0cy50ZXh0QmFzZWxpbmU7XG4gICAgfVxufVxuZnVuY3Rpb24gZGVjb3JhdGVUZXh0KGN0eCwgeCwgeSwgbGluZSwgb3B0cykge1xuICAgIGlmIChvcHRzLnN0cmlrZXRocm91Z2ggfHwgb3B0cy51bmRlcmxpbmUpIHtcbiAgICAgICAgLyoqXG4gICAgICogTm93IHRoYXQgSUUxMSBzdXBwb3J0IGhhcyBiZWVuIGRyb3BwZWQsIHdlIGNhbiB1c2UgbW9yZVxuICAgICAqIG9mIHRoZSBUZXh0TWV0cmljcyBvYmplY3QuIFRoZSBhY3R1YWwgYm91bmRpbmcgYm94ZXNcbiAgICAgKiBhcmUgdW5mbGFnZ2VkIGluIENocm9tZSwgRmlyZWZveCwgRWRnZSwgYW5kIFNhZmFyaSBzbyB0aGV5XG4gICAgICogY2FuIGJlIHNhZmVseSB1c2VkLlxuICAgICAqIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvVGV4dE1ldHJpY3MjQnJvd3Nlcl9jb21wYXRpYmlsaXR5XG4gICAgICovIGNvbnN0IG1ldHJpY3MgPSBjdHgubWVhc3VyZVRleHQobGluZSk7XG4gICAgICAgIGNvbnN0IGxlZnQgPSB4IC0gbWV0cmljcy5hY3R1YWxCb3VuZGluZ0JveExlZnQ7XG4gICAgICAgIGNvbnN0IHJpZ2h0ID0geCArIG1ldHJpY3MuYWN0dWFsQm91bmRpbmdCb3hSaWdodDtcbiAgICAgICAgY29uc3QgdG9wID0geSAtIG1ldHJpY3MuYWN0dWFsQm91bmRpbmdCb3hBc2NlbnQ7XG4gICAgICAgIGNvbnN0IGJvdHRvbSA9IHkgKyBtZXRyaWNzLmFjdHVhbEJvdW5kaW5nQm94RGVzY2VudDtcbiAgICAgICAgY29uc3QgeURlY29yYXRpb24gPSBvcHRzLnN0cmlrZXRocm91Z2ggPyAodG9wICsgYm90dG9tKSAvIDIgOiBib3R0b207XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGN0eC5maWxsU3R5bGU7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IG9wdHMuZGVjb3JhdGlvbldpZHRoIHx8IDI7XG4gICAgICAgIGN0eC5tb3ZlVG8obGVmdCwgeURlY29yYXRpb24pO1xuICAgICAgICBjdHgubGluZVRvKHJpZ2h0LCB5RGVjb3JhdGlvbik7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkcmF3QmFja2Ryb3AoY3R4LCBvcHRzKSB7XG4gICAgY29uc3Qgb2xkQ29sb3IgPSBjdHguZmlsbFN0eWxlO1xuICAgIGN0eC5maWxsU3R5bGUgPSBvcHRzLmNvbG9yO1xuICAgIGN0eC5maWxsUmVjdChvcHRzLmxlZnQsIG9wdHMudG9wLCBvcHRzLndpZHRoLCBvcHRzLmhlaWdodCk7XG4gICAgY3R4LmZpbGxTdHlsZSA9IG9sZENvbG9yO1xufVxuLyoqXG4gKiBSZW5kZXIgdGV4dCBvbnRvIHRoZSBjYW52YXNcbiAqLyBmdW5jdGlvbiByZW5kZXJUZXh0KGN0eCwgdGV4dCwgeCwgeSwgZm9udCwgb3B0cyA9IHt9KSB7XG4gICAgY29uc3QgbGluZXMgPSBpc0FycmF5KHRleHQpID8gdGV4dCA6IFtcbiAgICAgICAgdGV4dFxuICAgIF07XG4gICAgY29uc3Qgc3Ryb2tlID0gb3B0cy5zdHJva2VXaWR0aCA+IDAgJiYgb3B0cy5zdHJva2VDb2xvciAhPT0gJyc7XG4gICAgbGV0IGksIGxpbmU7XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHguZm9udCA9IGZvbnQuc3RyaW5nO1xuICAgIHNldFJlbmRlck9wdHMoY3R4LCBvcHRzKTtcbiAgICBmb3IoaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7ICsraSl7XG4gICAgICAgIGxpbmUgPSBsaW5lc1tpXTtcbiAgICAgICAgaWYgKG9wdHMuYmFja2Ryb3ApIHtcbiAgICAgICAgICAgIGRyYXdCYWNrZHJvcChjdHgsIG9wdHMuYmFja2Ryb3ApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdHJva2UpIHtcbiAgICAgICAgICAgIGlmIChvcHRzLnN0cm9rZUNvbG9yKSB7XG4gICAgICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gb3B0cy5zdHJva2VDb2xvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNOdWxsT3JVbmRlZihvcHRzLnN0cm9rZVdpZHRoKSkge1xuICAgICAgICAgICAgICAgIGN0eC5saW5lV2lkdGggPSBvcHRzLnN0cm9rZVdpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3R4LnN0cm9rZVRleHQobGluZSwgeCwgeSwgb3B0cy5tYXhXaWR0aCk7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LmZpbGxUZXh0KGxpbmUsIHgsIHksIG9wdHMubWF4V2lkdGgpO1xuICAgICAgICBkZWNvcmF0ZVRleHQoY3R4LCB4LCB5LCBsaW5lLCBvcHRzKTtcbiAgICAgICAgeSArPSBOdW1iZXIoZm9udC5saW5lSGVpZ2h0KTtcbiAgICB9XG4gICAgY3R4LnJlc3RvcmUoKTtcbn1cbi8qKlxuICogQWRkIGEgcGF0aCBvZiBhIHJlY3RhbmdsZSB3aXRoIHJvdW5kZWQgY29ybmVycyB0byB0aGUgY3VycmVudCBzdWItcGF0aFxuICogQHBhcmFtIGN0eCAtIENvbnRleHRcbiAqIEBwYXJhbSByZWN0IC0gQm91bmRpbmcgcmVjdFxuICovIGZ1bmN0aW9uIGFkZFJvdW5kZWRSZWN0UGF0aChjdHgsIHJlY3QpIHtcbiAgICBjb25zdCB7IHggLCB5ICwgdyAsIGggLCByYWRpdXMgIH0gPSByZWN0O1xuICAgIC8vIHRvcCBsZWZ0IGFyY1xuICAgIGN0eC5hcmMoeCArIHJhZGl1cy50b3BMZWZ0LCB5ICsgcmFkaXVzLnRvcExlZnQsIHJhZGl1cy50b3BMZWZ0LCAtSEFMRl9QSSwgUEksIHRydWUpO1xuICAgIC8vIGxpbmUgZnJvbSB0b3AgbGVmdCB0byBib3R0b20gbGVmdFxuICAgIGN0eC5saW5lVG8oeCwgeSArIGggLSByYWRpdXMuYm90dG9tTGVmdCk7XG4gICAgLy8gYm90dG9tIGxlZnQgYXJjXG4gICAgY3R4LmFyYyh4ICsgcmFkaXVzLmJvdHRvbUxlZnQsIHkgKyBoIC0gcmFkaXVzLmJvdHRvbUxlZnQsIHJhZGl1cy5ib3R0b21MZWZ0LCBQSSwgSEFMRl9QSSwgdHJ1ZSk7XG4gICAgLy8gbGluZSBmcm9tIGJvdHRvbSBsZWZ0IHRvIGJvdHRvbSByaWdodFxuICAgIGN0eC5saW5lVG8oeCArIHcgLSByYWRpdXMuYm90dG9tUmlnaHQsIHkgKyBoKTtcbiAgICAvLyBib3R0b20gcmlnaHQgYXJjXG4gICAgY3R4LmFyYyh4ICsgdyAtIHJhZGl1cy5ib3R0b21SaWdodCwgeSArIGggLSByYWRpdXMuYm90dG9tUmlnaHQsIHJhZGl1cy5ib3R0b21SaWdodCwgSEFMRl9QSSwgMCwgdHJ1ZSk7XG4gICAgLy8gbGluZSBmcm9tIGJvdHRvbSByaWdodCB0byB0b3AgcmlnaHRcbiAgICBjdHgubGluZVRvKHggKyB3LCB5ICsgcmFkaXVzLnRvcFJpZ2h0KTtcbiAgICAvLyB0b3AgcmlnaHQgYXJjXG4gICAgY3R4LmFyYyh4ICsgdyAtIHJhZGl1cy50b3BSaWdodCwgeSArIHJhZGl1cy50b3BSaWdodCwgcmFkaXVzLnRvcFJpZ2h0LCAwLCAtSEFMRl9QSSwgdHJ1ZSk7XG4gICAgLy8gbGluZSBmcm9tIHRvcCByaWdodCB0byB0b3AgbGVmdFxuICAgIGN0eC5saW5lVG8oeCArIHJhZGl1cy50b3BMZWZ0LCB5KTtcbn1cblxuY29uc3QgTElORV9IRUlHSFQgPSAvXihub3JtYWx8KFxcZCsoPzpcXC5cXGQrKT8pKHB4fGVtfCUpPykkLztcbmNvbnN0IEZPTlRfU1RZTEUgPSAvXihub3JtYWx8aXRhbGljfGluaXRpYWx8aW5oZXJpdHx1bnNldHwob2JsaXF1ZSggLT9bMC05XT9bMC05XWRlZyk/KSkkLztcbi8qKlxuICogQGFsaWFzIENoYXJ0LmhlbHBlcnMub3B0aW9uc1xuICogQG5hbWVzcGFjZVxuICovIC8qKlxuICogQ29udmVydHMgdGhlIGdpdmVuIGxpbmUgaGVpZ2h0IGB2YWx1ZWAgaW4gcGl4ZWxzIGZvciBhIHNwZWNpZmljIGZvbnQgYHNpemVgLlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIGxpbmVIZWlnaHQgdG8gcGFyc2UgKGVnLiAxLjYsICcxNHB4JywgJzc1JScsICcxLjZlbScpLlxuICogQHBhcmFtIHNpemUgLSBUaGUgZm9udCBzaXplIChpbiBwaXhlbHMpIHVzZWQgdG8gcmVzb2x2ZSByZWxhdGl2ZSBgdmFsdWVgLlxuICogQHJldHVybnMgVGhlIGVmZmVjdGl2ZSBsaW5lIGhlaWdodCBpbiBwaXhlbHMgKHNpemUgKiAxLjIgaWYgdmFsdWUgaXMgaW52YWxpZCkuXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9saW5lLWhlaWdodFxuICogQHNpbmNlIDIuNy4wXG4gKi8gZnVuY3Rpb24gdG9MaW5lSGVpZ2h0KHZhbHVlLCBzaXplKSB7XG4gICAgY29uc3QgbWF0Y2hlcyA9ICgnJyArIHZhbHVlKS5tYXRjaChMSU5FX0hFSUdIVCk7XG4gICAgaWYgKCFtYXRjaGVzIHx8IG1hdGNoZXNbMV0gPT09ICdub3JtYWwnKSB7XG4gICAgICAgIHJldHVybiBzaXplICogMS4yO1xuICAgIH1cbiAgICB2YWx1ZSA9ICttYXRjaGVzWzJdO1xuICAgIHN3aXRjaChtYXRjaGVzWzNdKXtcbiAgICAgICAgY2FzZSAncHgnOlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICBjYXNlICclJzpcbiAgICAgICAgICAgIHZhbHVlIC89IDEwMDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gc2l6ZSAqIHZhbHVlO1xufVxuY29uc3QgbnVtYmVyT3JaZXJvID0gKHYpPT4rdiB8fCAwO1xuZnVuY3Rpb24gX3JlYWRWYWx1ZVRvUHJvcHModmFsdWUsIHByb3BzKSB7XG4gICAgY29uc3QgcmV0ID0ge307XG4gICAgY29uc3Qgb2JqUHJvcHMgPSBpc09iamVjdChwcm9wcyk7XG4gICAgY29uc3Qga2V5cyA9IG9ialByb3BzID8gT2JqZWN0LmtleXMocHJvcHMpIDogcHJvcHM7XG4gICAgY29uc3QgcmVhZCA9IGlzT2JqZWN0KHZhbHVlKSA/IG9ialByb3BzID8gKHByb3ApPT52YWx1ZU9yRGVmYXVsdCh2YWx1ZVtwcm9wXSwgdmFsdWVbcHJvcHNbcHJvcF1dKSA6IChwcm9wKT0+dmFsdWVbcHJvcF0gOiAoKT0+dmFsdWU7XG4gICAgZm9yIChjb25zdCBwcm9wIG9mIGtleXMpe1xuICAgICAgICByZXRbcHJvcF0gPSBudW1iZXJPclplcm8ocmVhZChwcm9wKSk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59XG4vKipcbiAqIENvbnZlcnRzIHRoZSBnaXZlbiB2YWx1ZSBpbnRvIGEgVFJCTCBvYmplY3QuXG4gKiBAcGFyYW0gdmFsdWUgLSBJZiBhIG51bWJlciwgc2V0IHRoZSB2YWx1ZSB0byBhbGwgVFJCTCBjb21wb25lbnQsXG4gKiAgZWxzZSwgaWYgYW4gb2JqZWN0LCB1c2UgZGVmaW5lZCBwcm9wZXJ0aWVzIGFuZCBzZXRzIHVuZGVmaW5lZCBvbmVzIHRvIDAuXG4gKiAgeCAvIHkgYXJlIHNob3J0aGFuZHMgZm9yIHNhbWUgdmFsdWUgZm9yIGxlZnQvcmlnaHQgYW5kIHRvcC9ib3R0b20uXG4gKiBAcmV0dXJucyBUaGUgcGFkZGluZyB2YWx1ZXMgKHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdClcbiAqIEBzaW5jZSAzLjAuMFxuICovIGZ1bmN0aW9uIHRvVFJCTCh2YWx1ZSkge1xuICAgIHJldHVybiBfcmVhZFZhbHVlVG9Qcm9wcyh2YWx1ZSwge1xuICAgICAgICB0b3A6ICd5JyxcbiAgICAgICAgcmlnaHQ6ICd4JyxcbiAgICAgICAgYm90dG9tOiAneScsXG4gICAgICAgIGxlZnQ6ICd4J1xuICAgIH0pO1xufVxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gdmFsdWUgaW50byBhIFRSQkwgY29ybmVycyBvYmplY3QgKHNpbWlsYXIgd2l0aCBjc3MgYm9yZGVyLXJhZGl1cykuXG4gKiBAcGFyYW0gdmFsdWUgLSBJZiBhIG51bWJlciwgc2V0IHRoZSB2YWx1ZSB0byBhbGwgVFJCTCBjb3JuZXIgY29tcG9uZW50cyxcbiAqICBlbHNlLCBpZiBhbiBvYmplY3QsIHVzZSBkZWZpbmVkIHByb3BlcnRpZXMgYW5kIHNldHMgdW5kZWZpbmVkIG9uZXMgdG8gMC5cbiAqIEByZXR1cm5zIFRoZSBUUkJMIGNvcm5lciB2YWx1ZXMgKHRvcExlZnQsIHRvcFJpZ2h0LCBib3R0b21MZWZ0LCBib3R0b21SaWdodClcbiAqIEBzaW5jZSAzLjAuMFxuICovIGZ1bmN0aW9uIHRvVFJCTENvcm5lcnModmFsdWUpIHtcbiAgICByZXR1cm4gX3JlYWRWYWx1ZVRvUHJvcHModmFsdWUsIFtcbiAgICAgICAgJ3RvcExlZnQnLFxuICAgICAgICAndG9wUmlnaHQnLFxuICAgICAgICAnYm90dG9tTGVmdCcsXG4gICAgICAgICdib3R0b21SaWdodCdcbiAgICBdKTtcbn1cbi8qKlxuICogQ29udmVydHMgdGhlIGdpdmVuIHZhbHVlIGludG8gYSBwYWRkaW5nIG9iamVjdCB3aXRoIHByZS1jb21wdXRlZCB3aWR0aC9oZWlnaHQuXG4gKiBAcGFyYW0gdmFsdWUgLSBJZiBhIG51bWJlciwgc2V0IHRoZSB2YWx1ZSB0byBhbGwgVFJCTCBjb21wb25lbnQsXG4gKiAgZWxzZSwgaWYgYW4gb2JqZWN0LCB1c2UgZGVmaW5lZCBwcm9wZXJ0aWVzIGFuZCBzZXRzIHVuZGVmaW5lZCBvbmVzIHRvIDAuXG4gKiAgeCAvIHkgYXJlIHNob3J0aGFuZHMgZm9yIHNhbWUgdmFsdWUgZm9yIGxlZnQvcmlnaHQgYW5kIHRvcC9ib3R0b20uXG4gKiBAcmV0dXJucyBUaGUgcGFkZGluZyB2YWx1ZXMgKHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdCwgd2lkdGgsIGhlaWdodClcbiAqIEBzaW5jZSAyLjcuMFxuICovIGZ1bmN0aW9uIHRvUGFkZGluZyh2YWx1ZSkge1xuICAgIGNvbnN0IG9iaiA9IHRvVFJCTCh2YWx1ZSk7XG4gICAgb2JqLndpZHRoID0gb2JqLmxlZnQgKyBvYmoucmlnaHQ7XG4gICAgb2JqLmhlaWdodCA9IG9iai50b3AgKyBvYmouYm90dG9tO1xuICAgIHJldHVybiBvYmo7XG59XG4vKipcbiAqIFBhcnNlcyBmb250IG9wdGlvbnMgYW5kIHJldHVybnMgdGhlIGZvbnQgb2JqZWN0LlxuICogQHBhcmFtIG9wdGlvbnMgLSBBIG9iamVjdCB0aGF0IGNvbnRhaW5zIGZvbnQgb3B0aW9ucyB0byBiZSBwYXJzZWQuXG4gKiBAcGFyYW0gZmFsbGJhY2sgLSBBIG9iamVjdCB0aGF0IGNvbnRhaW5zIGZhbGxiYWNrIGZvbnQgb3B0aW9ucy5cbiAqIEByZXR1cm4gVGhlIGZvbnQgb2JqZWN0LlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiB0b0ZvbnQob3B0aW9ucywgZmFsbGJhY2spIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBmYWxsYmFjayA9IGZhbGxiYWNrIHx8IGRlZmF1bHRzLmZvbnQ7XG4gICAgbGV0IHNpemUgPSB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLnNpemUsIGZhbGxiYWNrLnNpemUpO1xuICAgIGlmICh0eXBlb2Ygc2l6ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgc2l6ZSA9IHBhcnNlSW50KHNpemUsIDEwKTtcbiAgICB9XG4gICAgbGV0IHN0eWxlID0gdmFsdWVPckRlZmF1bHQob3B0aW9ucy5zdHlsZSwgZmFsbGJhY2suc3R5bGUpO1xuICAgIGlmIChzdHlsZSAmJiAhKCcnICsgc3R5bGUpLm1hdGNoKEZPTlRfU1RZTEUpKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignSW52YWxpZCBmb250IHN0eWxlIHNwZWNpZmllZDogXCInICsgc3R5bGUgKyAnXCInKTtcbiAgICAgICAgc3R5bGUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IGZvbnQgPSB7XG4gICAgICAgIGZhbWlseTogdmFsdWVPckRlZmF1bHQob3B0aW9ucy5mYW1pbHksIGZhbGxiYWNrLmZhbWlseSksXG4gICAgICAgIGxpbmVIZWlnaHQ6IHRvTGluZUhlaWdodCh2YWx1ZU9yRGVmYXVsdChvcHRpb25zLmxpbmVIZWlnaHQsIGZhbGxiYWNrLmxpbmVIZWlnaHQpLCBzaXplKSxcbiAgICAgICAgc2l6ZSxcbiAgICAgICAgc3R5bGUsXG4gICAgICAgIHdlaWdodDogdmFsdWVPckRlZmF1bHQob3B0aW9ucy53ZWlnaHQsIGZhbGxiYWNrLndlaWdodCksXG4gICAgICAgIHN0cmluZzogJydcbiAgICB9O1xuICAgIGZvbnQuc3RyaW5nID0gdG9Gb250U3RyaW5nKGZvbnQpO1xuICAgIHJldHVybiBmb250O1xufVxuLyoqXG4gKiBFdmFsdWF0ZXMgdGhlIGdpdmVuIGBpbnB1dHNgIHNlcXVlbnRpYWxseSBhbmQgcmV0dXJucyB0aGUgZmlyc3QgZGVmaW5lZCB2YWx1ZS5cbiAqIEBwYXJhbSBpbnB1dHMgLSBBbiBhcnJheSBvZiB2YWx1ZXMsIGZhbGxpbmcgYmFjayB0byB0aGUgbGFzdCB2YWx1ZS5cbiAqIEBwYXJhbSBjb250ZXh0IC0gSWYgZGVmaW5lZCBhbmQgdGhlIGN1cnJlbnQgdmFsdWUgaXMgYSBmdW5jdGlvbiwgdGhlIHZhbHVlXG4gKiBpcyBjYWxsZWQgd2l0aCBgY29udGV4dGAgYXMgZmlyc3QgYXJndW1lbnQgYW5kIHRoZSByZXN1bHQgYmVjb21lcyB0aGUgbmV3IGlucHV0LlxuICogQHBhcmFtIGluZGV4IC0gSWYgZGVmaW5lZCBhbmQgdGhlIGN1cnJlbnQgdmFsdWUgaXMgYW4gYXJyYXksIHRoZSB2YWx1ZVxuICogYXQgYGluZGV4YCBiZWNvbWUgdGhlIG5ldyBpbnB1dC5cbiAqIEBwYXJhbSBpbmZvIC0gb2JqZWN0IHRvIHJldHVybiBpbmZvcm1hdGlvbiBhYm91dCByZXNvbHV0aW9uIGluXG4gKiBAcGFyYW0gaW5mby5jYWNoZWFibGUgLSBXaWxsIGJlIHNldCB0byBgZmFsc2VgIGlmIG9wdGlvbiBpcyBub3QgY2FjaGVhYmxlLlxuICogQHNpbmNlIDIuNy4wXG4gKi8gZnVuY3Rpb24gcmVzb2x2ZShpbnB1dHMsIGNvbnRleHQsIGluZGV4LCBpbmZvKSB7XG4gICAgbGV0IGNhY2hlYWJsZSA9IHRydWU7XG4gICAgbGV0IGksIGlsZW4sIHZhbHVlO1xuICAgIGZvcihpID0gMCwgaWxlbiA9IGlucHV0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICB2YWx1ZSA9IGlucHV0c1tpXTtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250ZXh0ICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlKGNvbnRleHQpO1xuICAgICAgICAgICAgY2FjaGVhYmxlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluZGV4ICE9PSB1bmRlZmluZWQgJiYgaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWVbaW5kZXggJSB2YWx1ZS5sZW5ndGhdO1xuICAgICAgICAgICAgY2FjaGVhYmxlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmIChpbmZvICYmICFjYWNoZWFibGUpIHtcbiAgICAgICAgICAgICAgICBpbmZvLmNhY2hlYWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBAcGFyYW0gbWlubWF4XG4gKiBAcGFyYW0gZ3JhY2VcbiAqIEBwYXJhbSBiZWdpbkF0WmVyb1xuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfYWRkR3JhY2UobWlubWF4LCBncmFjZSwgYmVnaW5BdFplcm8pIHtcbiAgICBjb25zdCB7IG1pbiAsIG1heCAgfSA9IG1pbm1heDtcbiAgICBjb25zdCBjaGFuZ2UgPSB0b0RpbWVuc2lvbihncmFjZSwgKG1heCAtIG1pbikgLyAyKTtcbiAgICBjb25zdCBrZWVwWmVybyA9ICh2YWx1ZSwgYWRkKT0+YmVnaW5BdFplcm8gJiYgdmFsdWUgPT09IDAgPyAwIDogdmFsdWUgKyBhZGQ7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWluOiBrZWVwWmVybyhtaW4sIC1NYXRoLmFicyhjaGFuZ2UpKSxcbiAgICAgICAgbWF4OiBrZWVwWmVybyhtYXgsIGNoYW5nZSlcbiAgICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlQ29udGV4dChwYXJlbnRDb250ZXh0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShwYXJlbnRDb250ZXh0KSwgY29udGV4dCk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIFByb3h5IGZvciByZXNvbHZpbmcgcmF3IHZhbHVlcyBmb3Igb3B0aW9ucy5cbiAqIEBwYXJhbSBzY29wZXMgLSBUaGUgb3B0aW9uIHNjb3BlcyB0byBsb29rIGZvciB2YWx1ZXMsIGluIHJlc29sdXRpb24gb3JkZXJcbiAqIEBwYXJhbSBwcmVmaXhlcyAtIFRoZSBwcmVmaXhlcyBmb3IgdmFsdWVzLCBpbiByZXNvbHV0aW9uIG9yZGVyLlxuICogQHBhcmFtIHJvb3RTY29wZXMgLSBUaGUgcm9vdCBvcHRpb24gc2NvcGVzXG4gKiBAcGFyYW0gZmFsbGJhY2sgLSBQYXJlbnQgc2NvcGVzIGZhbGxiYWNrXG4gKiBAcGFyYW0gZ2V0VGFyZ2V0IC0gY2FsbGJhY2sgZm9yIGdldHRpbmcgdGhlIHRhcmdldCBmb3IgY2hhbmdlZCB2YWx1ZXNcbiAqIEByZXR1cm5zIFByb3h5XG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9jcmVhdGVSZXNvbHZlcihzY29wZXMsIHByZWZpeGVzID0gW1xuICAgICcnXG5dLCByb290U2NvcGVzLCBmYWxsYmFjaywgZ2V0VGFyZ2V0ID0gKCk9PnNjb3Blc1swXSkge1xuICAgIGNvbnN0IGZpbmFsUm9vdFNjb3BlcyA9IHJvb3RTY29wZXMgfHwgc2NvcGVzO1xuICAgIGlmICh0eXBlb2YgZmFsbGJhY2sgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGZhbGxiYWNrID0gX3Jlc29sdmUoJ19mYWxsYmFjaycsIHNjb3Blcyk7XG4gICAgfVxuICAgIGNvbnN0IGNhY2hlID0ge1xuICAgICAgICBbU3ltYm9sLnRvU3RyaW5nVGFnXTogJ09iamVjdCcsXG4gICAgICAgIF9jYWNoZWFibGU6IHRydWUsXG4gICAgICAgIF9zY29wZXM6IHNjb3BlcyxcbiAgICAgICAgX3Jvb3RTY29wZXM6IGZpbmFsUm9vdFNjb3BlcyxcbiAgICAgICAgX2ZhbGxiYWNrOiBmYWxsYmFjayxcbiAgICAgICAgX2dldFRhcmdldDogZ2V0VGFyZ2V0LFxuICAgICAgICBvdmVycmlkZTogKHNjb3BlKT0+X2NyZWF0ZVJlc29sdmVyKFtcbiAgICAgICAgICAgICAgICBzY29wZSxcbiAgICAgICAgICAgICAgICAuLi5zY29wZXNcbiAgICAgICAgICAgIF0sIHByZWZpeGVzLCBmaW5hbFJvb3RTY29wZXMsIGZhbGxiYWNrKVxuICAgIH07XG4gICAgcmV0dXJuIG5ldyBQcm94eShjYWNoZSwge1xuICAgICAgICAvKipcbiAgICAgKiBBIHRyYXAgZm9yIHRoZSBkZWxldGUgb3BlcmF0b3IuXG4gICAgICovIGRlbGV0ZVByb3BlcnR5ICh0YXJnZXQsIHByb3ApIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0YXJnZXRbcHJvcF07IC8vIHJlbW92ZSBmcm9tIGNhY2hlXG4gICAgICAgICAgICBkZWxldGUgdGFyZ2V0Ll9rZXlzOyAvLyByZW1vdmUgY2FjaGVkIGtleXNcbiAgICAgICAgICAgIGRlbGV0ZSBzY29wZXNbMF1bcHJvcF07IC8vIHJlbW92ZSBmcm9tIHRvcCBsZXZlbCBzY29wZVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAqIEEgdHJhcCBmb3IgZ2V0dGluZyBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICovIGdldCAodGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgICAgICByZXR1cm4gX2NhY2hlZCh0YXJnZXQsIHByb3AsICgpPT5fcmVzb2x2ZVdpdGhQcmVmaXhlcyhwcm9wLCBwcmVmaXhlcywgc2NvcGVzLCB0YXJnZXQpKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICogQSB0cmFwIGZvciBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLlxuICAgICAqIEFsc28gdXNlZCBieSBPYmplY3QuaGFzT3duUHJvcGVydHkuXG4gICAgICovIGdldE93blByb3BlcnR5RGVzY3JpcHRvciAodGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0Ll9zY29wZXNbMF0sIHByb3ApO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgKiBBIHRyYXAgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZi5cbiAgICAgKi8gZ2V0UHJvdG90eXBlT2YgKCkge1xuICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0UHJvdG90eXBlT2Yoc2NvcGVzWzBdKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICogQSB0cmFwIGZvciB0aGUgaW4gb3BlcmF0b3IuXG4gICAgICovIGhhcyAodGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0S2V5c0Zyb21BbGxTY29wZXModGFyZ2V0KS5pbmNsdWRlcyhwcm9wKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICogQSB0cmFwIGZvciBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyBhbmQgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scy5cbiAgICAgKi8gb3duS2V5cyAodGFyZ2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0S2V5c0Zyb21BbGxTY29wZXModGFyZ2V0KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICogQSB0cmFwIGZvciBzZXR0aW5nIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKi8gc2V0ICh0YXJnZXQsIHByb3AsIHZhbHVlKSB7XG4gICAgICAgICAgICBjb25zdCBzdG9yYWdlID0gdGFyZ2V0Ll9zdG9yYWdlIHx8ICh0YXJnZXQuX3N0b3JhZ2UgPSBnZXRUYXJnZXQoKSk7XG4gICAgICAgICAgICB0YXJnZXRbcHJvcF0gPSBzdG9yYWdlW3Byb3BdID0gdmFsdWU7IC8vIHNldCB0byB0b3AgbGV2ZWwgc2NvcGUgKyBjYWNoZVxuICAgICAgICAgICAgZGVsZXRlIHRhcmdldC5fa2V5czsgLy8gcmVtb3ZlIGNhY2hlZCBrZXlzXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuLyoqXG4gKiBSZXR1cm5zIGFuIFByb3h5IGZvciByZXNvbHZpbmcgb3B0aW9uIHZhbHVlcyB3aXRoIGNvbnRleHQuXG4gKiBAcGFyYW0gcHJveHkgLSBUaGUgUHJveHkgcmV0dXJuZWQgYnkgYF9jcmVhdGVSZXNvbHZlcmBcbiAqIEBwYXJhbSBjb250ZXh0IC0gQ29udGV4dCBvYmplY3QgZm9yIHNjcmlwdGFibGUvaW5kZXhhYmxlIG9wdGlvbnNcbiAqIEBwYXJhbSBzdWJQcm94eSAtIFRoZSBwcm94eSBwcm92aWRlZCBmb3Igc2NyaXB0YWJsZSBvcHRpb25zXG4gKiBAcGFyYW0gZGVzY3JpcHRvckRlZmF1bHRzIC0gRGVmYXVsdHMgZm9yIGRlc2NyaXB0b3JzXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9hdHRhY2hDb250ZXh0KHByb3h5LCBjb250ZXh0LCBzdWJQcm94eSwgZGVzY3JpcHRvckRlZmF1bHRzKSB7XG4gICAgY29uc3QgY2FjaGUgPSB7XG4gICAgICAgIF9jYWNoZWFibGU6IGZhbHNlLFxuICAgICAgICBfcHJveHk6IHByb3h5LFxuICAgICAgICBfY29udGV4dDogY29udGV4dCxcbiAgICAgICAgX3N1YlByb3h5OiBzdWJQcm94eSxcbiAgICAgICAgX3N0YWNrOiBuZXcgU2V0KCksXG4gICAgICAgIF9kZXNjcmlwdG9yczogX2Rlc2NyaXB0b3JzKHByb3h5LCBkZXNjcmlwdG9yRGVmYXVsdHMpLFxuICAgICAgICBzZXRDb250ZXh0OiAoY3R4KT0+X2F0dGFjaENvbnRleHQocHJveHksIGN0eCwgc3ViUHJveHksIGRlc2NyaXB0b3JEZWZhdWx0cyksXG4gICAgICAgIG92ZXJyaWRlOiAoc2NvcGUpPT5fYXR0YWNoQ29udGV4dChwcm94eS5vdmVycmlkZShzY29wZSksIGNvbnRleHQsIHN1YlByb3h5LCBkZXNjcmlwdG9yRGVmYXVsdHMpXG4gICAgfTtcbiAgICByZXR1cm4gbmV3IFByb3h5KGNhY2hlLCB7XG4gICAgICAgIC8qKlxuICAgICAqIEEgdHJhcCBmb3IgdGhlIGRlbGV0ZSBvcGVyYXRvci5cbiAgICAgKi8gZGVsZXRlUHJvcGVydHkgKHRhcmdldCwgcHJvcCkge1xuICAgICAgICAgICAgZGVsZXRlIHRhcmdldFtwcm9wXTsgLy8gcmVtb3ZlIGZyb20gY2FjaGVcbiAgICAgICAgICAgIGRlbGV0ZSBwcm94eVtwcm9wXTsgLy8gcmVtb3ZlIGZyb20gcHJveHlcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgKiBBIHRyYXAgZm9yIGdldHRpbmcgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqLyBnZXQgKHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBfY2FjaGVkKHRhcmdldCwgcHJvcCwgKCk9Pl9yZXNvbHZlV2l0aENvbnRleHQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgKiBBIHRyYXAgZm9yIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IuXG4gICAgICogQWxzbyB1c2VkIGJ5IE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5cbiAgICAgKi8gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICh0YXJnZXQsIHByb3ApIHtcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQuX2Rlc2NyaXB0b3JzLmFsbEtleXMgPyBSZWZsZWN0Lmhhcyhwcm94eSwgcHJvcCkgPyB7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICAgIH0gOiB1bmRlZmluZWQgOiBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwcm94eSwgcHJvcCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAqIEEgdHJhcCBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mLlxuICAgICAqLyBnZXRQcm90b3R5cGVPZiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5nZXRQcm90b3R5cGVPZihwcm94eSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAqIEEgdHJhcCBmb3IgdGhlIGluIG9wZXJhdG9yLlxuICAgICAqLyBoYXMgKHRhcmdldCwgcHJvcCkge1xuICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuaGFzKHByb3h5LCBwcm9wKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICogQSB0cmFwIGZvciBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyBhbmQgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scy5cbiAgICAgKi8gb3duS2V5cyAoKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5vd25LZXlzKHByb3h5KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICogQSB0cmFwIGZvciBzZXR0aW5nIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKi8gc2V0ICh0YXJnZXQsIHByb3AsIHZhbHVlKSB7XG4gICAgICAgICAgICBwcm94eVtwcm9wXSA9IHZhbHVlOyAvLyBzZXQgdG8gcHJveHlcbiAgICAgICAgICAgIGRlbGV0ZSB0YXJnZXRbcHJvcF07IC8vIHJlbW92ZSBmcm9tIGNhY2hlXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9kZXNjcmlwdG9ycyhwcm94eSwgZGVmYXVsdHMgPSB7XG4gICAgc2NyaXB0YWJsZTogdHJ1ZSxcbiAgICBpbmRleGFibGU6IHRydWVcbn0pIHtcbiAgICBjb25zdCB7IF9zY3JpcHRhYmxlID1kZWZhdWx0cy5zY3JpcHRhYmxlICwgX2luZGV4YWJsZSA9ZGVmYXVsdHMuaW5kZXhhYmxlICwgX2FsbEtleXMgPWRlZmF1bHRzLmFsbEtleXMgIH0gPSBwcm94eTtcbiAgICByZXR1cm4ge1xuICAgICAgICBhbGxLZXlzOiBfYWxsS2V5cyxcbiAgICAgICAgc2NyaXB0YWJsZTogX3NjcmlwdGFibGUsXG4gICAgICAgIGluZGV4YWJsZTogX2luZGV4YWJsZSxcbiAgICAgICAgaXNTY3JpcHRhYmxlOiBpc0Z1bmN0aW9uKF9zY3JpcHRhYmxlKSA/IF9zY3JpcHRhYmxlIDogKCk9Pl9zY3JpcHRhYmxlLFxuICAgICAgICBpc0luZGV4YWJsZTogaXNGdW5jdGlvbihfaW5kZXhhYmxlKSA/IF9pbmRleGFibGUgOiAoKT0+X2luZGV4YWJsZVxuICAgIH07XG59XG5jb25zdCByZWFkS2V5ID0gKHByZWZpeCwgbmFtZSk9PnByZWZpeCA/IHByZWZpeCArIF9jYXBpdGFsaXplKG5hbWUpIDogbmFtZTtcbmNvbnN0IG5lZWRzU3ViUmVzb2x2ZXIgPSAocHJvcCwgdmFsdWUpPT5pc09iamVjdCh2YWx1ZSkgJiYgcHJvcCAhPT0gJ2FkYXB0ZXJzJyAmJiAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKSA9PT0gbnVsbCB8fCB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KTtcbmZ1bmN0aW9uIF9jYWNoZWQodGFyZ2V0LCBwcm9wLCByZXNvbHZlKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIHByb3ApKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXRbcHJvcF07XG4gICAgfVxuICAgIGNvbnN0IHZhbHVlID0gcmVzb2x2ZSgpO1xuICAgIC8vIGNhY2hlIHRoZSByZXNvbHZlZCB2YWx1ZVxuICAgIHRhcmdldFtwcm9wXSA9IHZhbHVlO1xuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIF9yZXNvbHZlV2l0aENvbnRleHQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikge1xuICAgIGNvbnN0IHsgX3Byb3h5ICwgX2NvbnRleHQgLCBfc3ViUHJveHkgLCBfZGVzY3JpcHRvcnM6IGRlc2NyaXB0b3JzICB9ID0gdGFyZ2V0O1xuICAgIGxldCB2YWx1ZSA9IF9wcm94eVtwcm9wXTsgLy8gcmVzb2x2ZSBmcm9tIHByb3h5XG4gICAgLy8gcmVzb2x2ZSB3aXRoIGNvbnRleHRcbiAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkgJiYgZGVzY3JpcHRvcnMuaXNTY3JpcHRhYmxlKHByb3ApKSB7XG4gICAgICAgIHZhbHVlID0gX3Jlc29sdmVTY3JpcHRhYmxlKHByb3AsIHZhbHVlLCB0YXJnZXQsIHJlY2VpdmVyKTtcbiAgICB9XG4gICAgaWYgKGlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCkge1xuICAgICAgICB2YWx1ZSA9IF9yZXNvbHZlQXJyYXkocHJvcCwgdmFsdWUsIHRhcmdldCwgZGVzY3JpcHRvcnMuaXNJbmRleGFibGUpO1xuICAgIH1cbiAgICBpZiAobmVlZHNTdWJSZXNvbHZlcihwcm9wLCB2YWx1ZSkpIHtcbiAgICAgICAgLy8gaWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzIGFuIG9iamVjdCwgY3JlYXRlIGEgc3ViIHJlc29sdmVyIGZvciBpdFxuICAgICAgICB2YWx1ZSA9IF9hdHRhY2hDb250ZXh0KHZhbHVlLCBfY29udGV4dCwgX3N1YlByb3h5ICYmIF9zdWJQcm94eVtwcm9wXSwgZGVzY3JpcHRvcnMpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBfcmVzb2x2ZVNjcmlwdGFibGUocHJvcCwgZ2V0VmFsdWUsIHRhcmdldCwgcmVjZWl2ZXIpIHtcbiAgICBjb25zdCB7IF9wcm94eSAsIF9jb250ZXh0ICwgX3N1YlByb3h5ICwgX3N0YWNrICB9ID0gdGFyZ2V0O1xuICAgIGlmIChfc3RhY2suaGFzKHByb3ApKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUmVjdXJzaW9uIGRldGVjdGVkOiAnICsgQXJyYXkuZnJvbShfc3RhY2spLmpvaW4oJy0+JykgKyAnLT4nICsgcHJvcCk7XG4gICAgfVxuICAgIF9zdGFjay5hZGQocHJvcCk7XG4gICAgbGV0IHZhbHVlID0gZ2V0VmFsdWUoX2NvbnRleHQsIF9zdWJQcm94eSB8fCByZWNlaXZlcik7XG4gICAgX3N0YWNrLmRlbGV0ZShwcm9wKTtcbiAgICBpZiAobmVlZHNTdWJSZXNvbHZlcihwcm9wLCB2YWx1ZSkpIHtcbiAgICAgICAgLy8gV2hlbiBzY3JpcHRhYmxlIG9wdGlvbiByZXR1cm5zIGFuIG9iamVjdCwgY3JlYXRlIGEgcmVzb2x2ZXIgb24gdGhhdC5cbiAgICAgICAgdmFsdWUgPSBjcmVhdGVTdWJSZXNvbHZlcihfcHJveHkuX3Njb3BlcywgX3Byb3h5LCBwcm9wLCB2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIF9yZXNvbHZlQXJyYXkocHJvcCwgdmFsdWUsIHRhcmdldCwgaXNJbmRleGFibGUpIHtcbiAgICBjb25zdCB7IF9wcm94eSAsIF9jb250ZXh0ICwgX3N1YlByb3h5ICwgX2Rlc2NyaXB0b3JzOiBkZXNjcmlwdG9ycyAgfSA9IHRhcmdldDtcbiAgICBpZiAodHlwZW9mIF9jb250ZXh0LmluZGV4ICE9PSAndW5kZWZpbmVkJyAmJiBpc0luZGV4YWJsZShwcm9wKSkge1xuICAgICAgICByZXR1cm4gdmFsdWVbX2NvbnRleHQuaW5kZXggJSB2YWx1ZS5sZW5ndGhdO1xuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsdWVbMF0pKSB7XG4gICAgICAgIC8vIEFycmF5IG9mIG9iamVjdHMsIHJldHVybiBhcnJheSBvciByZXNvbHZlcnNcbiAgICAgICAgY29uc3QgYXJyID0gdmFsdWU7XG4gICAgICAgIGNvbnN0IHNjb3BlcyA9IF9wcm94eS5fc2NvcGVzLmZpbHRlcigocyk9PnMgIT09IGFycik7XG4gICAgICAgIHZhbHVlID0gW107XG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBhcnIpe1xuICAgICAgICAgICAgY29uc3QgcmVzb2x2ZXIgPSBjcmVhdGVTdWJSZXNvbHZlcihzY29wZXMsIF9wcm94eSwgcHJvcCwgaXRlbSk7XG4gICAgICAgICAgICB2YWx1ZS5wdXNoKF9hdHRhY2hDb250ZXh0KHJlc29sdmVyLCBfY29udGV4dCwgX3N1YlByb3h5ICYmIF9zdWJQcm94eVtwcm9wXSwgZGVzY3JpcHRvcnMpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiByZXNvbHZlRmFsbGJhY2soZmFsbGJhY2ssIHByb3AsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oZmFsbGJhY2spID8gZmFsbGJhY2socHJvcCwgdmFsdWUpIDogZmFsbGJhY2s7XG59XG5jb25zdCBnZXRTY29wZSA9IChrZXksIHBhcmVudCk9PmtleSA9PT0gdHJ1ZSA/IHBhcmVudCA6IHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnID8gcmVzb2x2ZU9iamVjdEtleShwYXJlbnQsIGtleSkgOiB1bmRlZmluZWQ7XG5mdW5jdGlvbiBhZGRTY29wZXMoc2V0LCBwYXJlbnRTY29wZXMsIGtleSwgcGFyZW50RmFsbGJhY2ssIHZhbHVlKSB7XG4gICAgZm9yIChjb25zdCBwYXJlbnQgb2YgcGFyZW50U2NvcGVzKXtcbiAgICAgICAgY29uc3Qgc2NvcGUgPSBnZXRTY29wZShrZXksIHBhcmVudCk7XG4gICAgICAgIGlmIChzY29wZSkge1xuICAgICAgICAgICAgc2V0LmFkZChzY29wZSk7XG4gICAgICAgICAgICBjb25zdCBmYWxsYmFjayA9IHJlc29sdmVGYWxsYmFjayhzY29wZS5fZmFsbGJhY2ssIGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBmYWxsYmFjayAhPT0gJ3VuZGVmaW5lZCcgJiYgZmFsbGJhY2sgIT09IGtleSAmJiBmYWxsYmFjayAhPT0gcGFyZW50RmFsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAvLyBXaGVuIHdlIHJlYWNoIHRoZSBkZXNjcmlwdG9yIHRoYXQgZGVmaW5lcyBhIG5ldyBfZmFsbGJhY2ssIHJldHVybiB0aGF0LlxuICAgICAgICAgICAgICAgIC8vIFRoZSBmYWxsYmFjayB3aWxsIHJlc3VtZSB0byB0aGF0IG5ldyBzY29wZS5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsbGJhY2s7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoc2NvcGUgPT09IGZhbHNlICYmIHR5cGVvZiBwYXJlbnRGYWxsYmFjayAhPT0gJ3VuZGVmaW5lZCcgJiYga2V5ICE9PSBwYXJlbnRGYWxsYmFjaykge1xuICAgICAgICAgICAgLy8gRmFsbGJhY2sgdG8gYGZhbHNlYCByZXN1bHRzIHRvIGBmYWxzZWAsIHdoZW4gZmFsbGluZyBiYWNrIHRvIGRpZmZlcmVudCBrZXkuXG4gICAgICAgICAgICAvLyBGb3IgZXhhbXBsZSBgaW50ZXJhY3Rpb25gIGZyb20gYGhvdmVyYCBvciBgcGx1Z2lucy50b29sdGlwYCBhbmQgYGFuaW1hdGlvbmAgZnJvbSBgYW5pbWF0aW9uc2BcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVN1YlJlc29sdmVyKHBhcmVudFNjb3BlcywgcmVzb2x2ZXIsIHByb3AsIHZhbHVlKSB7XG4gICAgY29uc3Qgcm9vdFNjb3BlcyA9IHJlc29sdmVyLl9yb290U2NvcGVzO1xuICAgIGNvbnN0IGZhbGxiYWNrID0gcmVzb2x2ZUZhbGxiYWNrKHJlc29sdmVyLl9mYWxsYmFjaywgcHJvcCwgdmFsdWUpO1xuICAgIGNvbnN0IGFsbFNjb3BlcyA9IFtcbiAgICAgICAgLi4ucGFyZW50U2NvcGVzLFxuICAgICAgICAuLi5yb290U2NvcGVzXG4gICAgXTtcbiAgICBjb25zdCBzZXQgPSBuZXcgU2V0KCk7XG4gICAgc2V0LmFkZCh2YWx1ZSk7XG4gICAgbGV0IGtleSA9IGFkZFNjb3Blc0Zyb21LZXkoc2V0LCBhbGxTY29wZXMsIHByb3AsIGZhbGxiYWNrIHx8IHByb3AsIHZhbHVlKTtcbiAgICBpZiAoa2V5ID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBmYWxsYmFjayAhPT0gJ3VuZGVmaW5lZCcgJiYgZmFsbGJhY2sgIT09IHByb3ApIHtcbiAgICAgICAga2V5ID0gYWRkU2NvcGVzRnJvbUtleShzZXQsIGFsbFNjb3BlcywgZmFsbGJhY2ssIGtleSwgdmFsdWUpO1xuICAgICAgICBpZiAoa2V5ID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIF9jcmVhdGVSZXNvbHZlcihBcnJheS5mcm9tKHNldCksIFtcbiAgICAgICAgJydcbiAgICBdLCByb290U2NvcGVzLCBmYWxsYmFjaywgKCk9PnN1YkdldFRhcmdldChyZXNvbHZlciwgcHJvcCwgdmFsdWUpKTtcbn1cbmZ1bmN0aW9uIGFkZFNjb3Blc0Zyb21LZXkoc2V0LCBhbGxTY29wZXMsIGtleSwgZmFsbGJhY2ssIGl0ZW0pIHtcbiAgICB3aGlsZShrZXkpe1xuICAgICAgICBrZXkgPSBhZGRTY29wZXMoc2V0LCBhbGxTY29wZXMsIGtleSwgZmFsbGJhY2ssIGl0ZW0pO1xuICAgIH1cbiAgICByZXR1cm4ga2V5O1xufVxuZnVuY3Rpb24gc3ViR2V0VGFyZ2V0KHJlc29sdmVyLCBwcm9wLCB2YWx1ZSkge1xuICAgIGNvbnN0IHBhcmVudCA9IHJlc29sdmVyLl9nZXRUYXJnZXQoKTtcbiAgICBpZiAoIShwcm9wIGluIHBhcmVudCkpIHtcbiAgICAgICAgcGFyZW50W3Byb3BdID0ge307XG4gICAgfVxuICAgIGNvbnN0IHRhcmdldCA9IHBhcmVudFtwcm9wXTtcbiAgICBpZiAoaXNBcnJheSh0YXJnZXQpICYmIGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICAvLyBGb3IgYXJyYXkgb2Ygb2JqZWN0cywgdGhlIG9iamVjdCBpcyB1c2VkIHRvIHN0b3JlIHVwZGF0ZWQgdmFsdWVzXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldCB8fCB7fTtcbn1cbmZ1bmN0aW9uIF9yZXNvbHZlV2l0aFByZWZpeGVzKHByb3AsIHByZWZpeGVzLCBzY29wZXMsIHByb3h5KSB7XG4gICAgbGV0IHZhbHVlO1xuICAgIGZvciAoY29uc3QgcHJlZml4IG9mIHByZWZpeGVzKXtcbiAgICAgICAgdmFsdWUgPSBfcmVzb2x2ZShyZWFkS2V5KHByZWZpeCwgcHJvcCksIHNjb3Blcyk7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gbmVlZHNTdWJSZXNvbHZlcihwcm9wLCB2YWx1ZSkgPyBjcmVhdGVTdWJSZXNvbHZlcihzY29wZXMsIHByb3h5LCBwcm9wLCB2YWx1ZSkgOiB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIF9yZXNvbHZlKGtleSwgc2NvcGVzKSB7XG4gICAgZm9yIChjb25zdCBzY29wZSBvZiBzY29wZXMpe1xuICAgICAgICBpZiAoIXNjb3BlKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2YWx1ZSA9IHNjb3BlW2tleV07XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBnZXRLZXlzRnJvbUFsbFNjb3Blcyh0YXJnZXQpIHtcbiAgICBsZXQga2V5cyA9IHRhcmdldC5fa2V5cztcbiAgICBpZiAoIWtleXMpIHtcbiAgICAgICAga2V5cyA9IHRhcmdldC5fa2V5cyA9IHJlc29sdmVLZXlzRnJvbUFsbFNjb3Blcyh0YXJnZXQuX3Njb3Blcyk7XG4gICAgfVxuICAgIHJldHVybiBrZXlzO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUtleXNGcm9tQWxsU2NvcGVzKHNjb3Blcykge1xuICAgIGNvbnN0IHNldCA9IG5ldyBTZXQoKTtcbiAgICBmb3IgKGNvbnN0IHNjb3BlIG9mIHNjb3Blcyl7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHNjb3BlKS5maWx0ZXIoKGspPT4hay5zdGFydHNXaXRoKCdfJykpKXtcbiAgICAgICAgICAgIHNldC5hZGQoa2V5KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gQXJyYXkuZnJvbShzZXQpO1xufVxuZnVuY3Rpb24gX3BhcnNlT2JqZWN0RGF0YVJhZGlhbFNjYWxlKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgIGNvbnN0IHsgaVNjYWxlICB9ID0gbWV0YTtcbiAgICBjb25zdCB7IGtleSA9J3InICB9ID0gdGhpcy5fcGFyc2luZztcbiAgICBjb25zdCBwYXJzZWQgPSBuZXcgQXJyYXkoY291bnQpO1xuICAgIGxldCBpLCBpbGVuLCBpbmRleCwgaXRlbTtcbiAgICBmb3IoaSA9IDAsIGlsZW4gPSBjb3VudDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIGluZGV4ID0gaSArIHN0YXJ0O1xuICAgICAgICBpdGVtID0gZGF0YVtpbmRleF07XG4gICAgICAgIHBhcnNlZFtpXSA9IHtcbiAgICAgICAgICAgIHI6IGlTY2FsZS5wYXJzZShyZXNvbHZlT2JqZWN0S2V5KGl0ZW0sIGtleSksIGluZGV4KVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VkO1xufVxuXG5jb25zdCBFUFNJTE9OID0gTnVtYmVyLkVQU0lMT04gfHwgMWUtMTQ7XG5jb25zdCBnZXRQb2ludCA9IChwb2ludHMsIGkpPT5pIDwgcG9pbnRzLmxlbmd0aCAmJiAhcG9pbnRzW2ldLnNraXAgJiYgcG9pbnRzW2ldO1xuY29uc3QgZ2V0VmFsdWVBeGlzID0gKGluZGV4QXhpcyk9PmluZGV4QXhpcyA9PT0gJ3gnID8gJ3knIDogJ3gnO1xuZnVuY3Rpb24gc3BsaW5lQ3VydmUoZmlyc3RQb2ludCwgbWlkZGxlUG9pbnQsIGFmdGVyUG9pbnQsIHQpIHtcbiAgICAvLyBQcm9wcyB0byBSb2IgU3BlbmNlciBhdCBzY2FsZWQgaW5ub3ZhdGlvbiBmb3IgaGlzIHBvc3Qgb24gc3BsaW5pbmcgYmV0d2VlbiBwb2ludHNcbiAgICAvLyBodHRwOi8vc2NhbGVkaW5ub3ZhdGlvbi5jb20vYW5hbHl0aWNzL3NwbGluZXMvYWJvdXRTcGxpbmVzLmh0bWxcbiAgICAvLyBUaGlzIGZ1bmN0aW9uIG11c3QgYWxzbyByZXNwZWN0IFwic2tpcHBlZFwiIHBvaW50c1xuICAgIGNvbnN0IHByZXZpb3VzID0gZmlyc3RQb2ludC5za2lwID8gbWlkZGxlUG9pbnQgOiBmaXJzdFBvaW50O1xuICAgIGNvbnN0IGN1cnJlbnQgPSBtaWRkbGVQb2ludDtcbiAgICBjb25zdCBuZXh0ID0gYWZ0ZXJQb2ludC5za2lwID8gbWlkZGxlUG9pbnQgOiBhZnRlclBvaW50O1xuICAgIGNvbnN0IGQwMSA9IGRpc3RhbmNlQmV0d2VlblBvaW50cyhjdXJyZW50LCBwcmV2aW91cyk7XG4gICAgY29uc3QgZDEyID0gZGlzdGFuY2VCZXR3ZWVuUG9pbnRzKG5leHQsIGN1cnJlbnQpO1xuICAgIGxldCBzMDEgPSBkMDEgLyAoZDAxICsgZDEyKTtcbiAgICBsZXQgczEyID0gZDEyIC8gKGQwMSArIGQxMik7XG4gICAgLy8gSWYgYWxsIHBvaW50cyBhcmUgdGhlIHNhbWUsIHMwMSAmIHMwMiB3aWxsIGJlIGluZlxuICAgIHMwMSA9IGlzTmFOKHMwMSkgPyAwIDogczAxO1xuICAgIHMxMiA9IGlzTmFOKHMxMikgPyAwIDogczEyO1xuICAgIGNvbnN0IGZhID0gdCAqIHMwMTsgLy8gc2NhbGluZyBmYWN0b3IgZm9yIHRyaWFuZ2xlIFRhXG4gICAgY29uc3QgZmIgPSB0ICogczEyO1xuICAgIHJldHVybiB7XG4gICAgICAgIHByZXZpb3VzOiB7XG4gICAgICAgICAgICB4OiBjdXJyZW50LnggLSBmYSAqIChuZXh0LnggLSBwcmV2aW91cy54KSxcbiAgICAgICAgICAgIHk6IGN1cnJlbnQueSAtIGZhICogKG5leHQueSAtIHByZXZpb3VzLnkpXG4gICAgICAgIH0sXG4gICAgICAgIG5leHQ6IHtcbiAgICAgICAgICAgIHg6IGN1cnJlbnQueCArIGZiICogKG5leHQueCAtIHByZXZpb3VzLngpLFxuICAgICAgICAgICAgeTogY3VycmVudC55ICsgZmIgKiAobmV4dC55IC0gcHJldmlvdXMueSlcbiAgICAgICAgfVxuICAgIH07XG59XG4vKipcbiAqIEFkanVzdCB0YW5nZW50cyB0byBlbnN1cmUgbW9ub3RvbmljIHByb3BlcnRpZXNcbiAqLyBmdW5jdGlvbiBtb25vdG9uZUFkanVzdChwb2ludHMsIGRlbHRhSywgbUspIHtcbiAgICBjb25zdCBwb2ludHNMZW4gPSBwb2ludHMubGVuZ3RoO1xuICAgIGxldCBhbHBoYUssIGJldGFLLCB0YXVLLCBzcXVhcmVkTWFnbml0dWRlLCBwb2ludEN1cnJlbnQ7XG4gICAgbGV0IHBvaW50QWZ0ZXIgPSBnZXRQb2ludChwb2ludHMsIDApO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBwb2ludHNMZW4gLSAxOyArK2kpe1xuICAgICAgICBwb2ludEN1cnJlbnQgPSBwb2ludEFmdGVyO1xuICAgICAgICBwb2ludEFmdGVyID0gZ2V0UG9pbnQocG9pbnRzLCBpICsgMSk7XG4gICAgICAgIGlmICghcG9pbnRDdXJyZW50IHx8ICFwb2ludEFmdGVyKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWxtb3N0RXF1YWxzKGRlbHRhS1tpXSwgMCwgRVBTSUxPTikpIHtcbiAgICAgICAgICAgIG1LW2ldID0gbUtbaSArIDFdID0gMDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGFscGhhSyA9IG1LW2ldIC8gZGVsdGFLW2ldO1xuICAgICAgICBiZXRhSyA9IG1LW2kgKyAxXSAvIGRlbHRhS1tpXTtcbiAgICAgICAgc3F1YXJlZE1hZ25pdHVkZSA9IE1hdGgucG93KGFscGhhSywgMikgKyBNYXRoLnBvdyhiZXRhSywgMik7XG4gICAgICAgIGlmIChzcXVhcmVkTWFnbml0dWRlIDw9IDkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHRhdUsgPSAzIC8gTWF0aC5zcXJ0KHNxdWFyZWRNYWduaXR1ZGUpO1xuICAgICAgICBtS1tpXSA9IGFscGhhSyAqIHRhdUsgKiBkZWx0YUtbaV07XG4gICAgICAgIG1LW2kgKyAxXSA9IGJldGFLICogdGF1SyAqIGRlbHRhS1tpXTtcbiAgICB9XG59XG5mdW5jdGlvbiBtb25vdG9uZUNvbXB1dGUocG9pbnRzLCBtSywgaW5kZXhBeGlzID0gJ3gnKSB7XG4gICAgY29uc3QgdmFsdWVBeGlzID0gZ2V0VmFsdWVBeGlzKGluZGV4QXhpcyk7XG4gICAgY29uc3QgcG9pbnRzTGVuID0gcG9pbnRzLmxlbmd0aDtcbiAgICBsZXQgZGVsdGEsIHBvaW50QmVmb3JlLCBwb2ludEN1cnJlbnQ7XG4gICAgbGV0IHBvaW50QWZ0ZXIgPSBnZXRQb2ludChwb2ludHMsIDApO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBwb2ludHNMZW47ICsraSl7XG4gICAgICAgIHBvaW50QmVmb3JlID0gcG9pbnRDdXJyZW50O1xuICAgICAgICBwb2ludEN1cnJlbnQgPSBwb2ludEFmdGVyO1xuICAgICAgICBwb2ludEFmdGVyID0gZ2V0UG9pbnQocG9pbnRzLCBpICsgMSk7XG4gICAgICAgIGlmICghcG9pbnRDdXJyZW50KSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpUGl4ZWwgPSBwb2ludEN1cnJlbnRbaW5kZXhBeGlzXTtcbiAgICAgICAgY29uc3QgdlBpeGVsID0gcG9pbnRDdXJyZW50W3ZhbHVlQXhpc107XG4gICAgICAgIGlmIChwb2ludEJlZm9yZSkge1xuICAgICAgICAgICAgZGVsdGEgPSAoaVBpeGVsIC0gcG9pbnRCZWZvcmVbaW5kZXhBeGlzXSkgLyAzO1xuICAgICAgICAgICAgcG9pbnRDdXJyZW50W2BjcDEke2luZGV4QXhpc31gXSA9IGlQaXhlbCAtIGRlbHRhO1xuICAgICAgICAgICAgcG9pbnRDdXJyZW50W2BjcDEke3ZhbHVlQXhpc31gXSA9IHZQaXhlbCAtIGRlbHRhICogbUtbaV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvaW50QWZ0ZXIpIHtcbiAgICAgICAgICAgIGRlbHRhID0gKHBvaW50QWZ0ZXJbaW5kZXhBeGlzXSAtIGlQaXhlbCkgLyAzO1xuICAgICAgICAgICAgcG9pbnRDdXJyZW50W2BjcDIke2luZGV4QXhpc31gXSA9IGlQaXhlbCArIGRlbHRhO1xuICAgICAgICAgICAgcG9pbnRDdXJyZW50W2BjcDIke3ZhbHVlQXhpc31gXSA9IHZQaXhlbCArIGRlbHRhICogbUtbaV07XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gY2FsY3VsYXRlcyBCw6l6aWVyIGNvbnRyb2wgcG9pbnRzIGluIGEgc2ltaWxhciB3YXkgdGhhbiB8c3BsaW5lQ3VydmV8LFxuICogYnV0IHByZXNlcnZlcyBtb25vdG9uaWNpdHkgb2YgdGhlIHByb3ZpZGVkIGRhdGEgYW5kIGVuc3VyZXMgbm8gbG9jYWwgZXh0cmVtdW1zIGFyZSBhZGRlZFxuICogYmV0d2VlbiB0aGUgZGF0YXNldCBkaXNjcmV0ZSBwb2ludHMgZHVlIHRvIHRoZSBpbnRlcnBvbGF0aW9uLlxuICogU2VlIDogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTW9ub3RvbmVfY3ViaWNfaW50ZXJwb2xhdGlvblxuICovIGZ1bmN0aW9uIHNwbGluZUN1cnZlTW9ub3RvbmUocG9pbnRzLCBpbmRleEF4aXMgPSAneCcpIHtcbiAgICBjb25zdCB2YWx1ZUF4aXMgPSBnZXRWYWx1ZUF4aXMoaW5kZXhBeGlzKTtcbiAgICBjb25zdCBwb2ludHNMZW4gPSBwb2ludHMubGVuZ3RoO1xuICAgIGNvbnN0IGRlbHRhSyA9IEFycmF5KHBvaW50c0xlbikuZmlsbCgwKTtcbiAgICBjb25zdCBtSyA9IEFycmF5KHBvaW50c0xlbik7XG4gICAgLy8gQ2FsY3VsYXRlIHNsb3BlcyAoZGVsdGFLKSBhbmQgaW5pdGlhbGl6ZSB0YW5nZW50cyAobUspXG4gICAgbGV0IGksIHBvaW50QmVmb3JlLCBwb2ludEN1cnJlbnQ7XG4gICAgbGV0IHBvaW50QWZ0ZXIgPSBnZXRQb2ludChwb2ludHMsIDApO1xuICAgIGZvcihpID0gMDsgaSA8IHBvaW50c0xlbjsgKytpKXtcbiAgICAgICAgcG9pbnRCZWZvcmUgPSBwb2ludEN1cnJlbnQ7XG4gICAgICAgIHBvaW50Q3VycmVudCA9IHBvaW50QWZ0ZXI7XG4gICAgICAgIHBvaW50QWZ0ZXIgPSBnZXRQb2ludChwb2ludHMsIGkgKyAxKTtcbiAgICAgICAgaWYgKCFwb2ludEN1cnJlbnQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb2ludEFmdGVyKSB7XG4gICAgICAgICAgICBjb25zdCBzbG9wZURlbHRhID0gcG9pbnRBZnRlcltpbmRleEF4aXNdIC0gcG9pbnRDdXJyZW50W2luZGV4QXhpc107XG4gICAgICAgICAgICAvLyBJbiB0aGUgY2FzZSBvZiB0d28gcG9pbnRzIHRoYXQgYXBwZWFyIGF0IHRoZSBzYW1lIHggcGl4ZWwsIHNsb3BlRGVsdGFYIGlzIDBcbiAgICAgICAgICAgIGRlbHRhS1tpXSA9IHNsb3BlRGVsdGEgIT09IDAgPyAocG9pbnRBZnRlclt2YWx1ZUF4aXNdIC0gcG9pbnRDdXJyZW50W3ZhbHVlQXhpc10pIC8gc2xvcGVEZWx0YSA6IDA7XG4gICAgICAgIH1cbiAgICAgICAgbUtbaV0gPSAhcG9pbnRCZWZvcmUgPyBkZWx0YUtbaV0gOiAhcG9pbnRBZnRlciA/IGRlbHRhS1tpIC0gMV0gOiBzaWduKGRlbHRhS1tpIC0gMV0pICE9PSBzaWduKGRlbHRhS1tpXSkgPyAwIDogKGRlbHRhS1tpIC0gMV0gKyBkZWx0YUtbaV0pIC8gMjtcbiAgICB9XG4gICAgbW9ub3RvbmVBZGp1c3QocG9pbnRzLCBkZWx0YUssIG1LKTtcbiAgICBtb25vdG9uZUNvbXB1dGUocG9pbnRzLCBtSywgaW5kZXhBeGlzKTtcbn1cbmZ1bmN0aW9uIGNhcENvbnRyb2xQb2ludChwdCwgbWluLCBtYXgpIHtcbiAgICByZXR1cm4gTWF0aC5tYXgoTWF0aC5taW4ocHQsIG1heCksIG1pbik7XG59XG5mdW5jdGlvbiBjYXBCZXppZXJQb2ludHMocG9pbnRzLCBhcmVhKSB7XG4gICAgbGV0IGksIGlsZW4sIHBvaW50LCBpbkFyZWEsIGluQXJlYVByZXY7XG4gICAgbGV0IGluQXJlYU5leHQgPSBfaXNQb2ludEluQXJlYShwb2ludHNbMF0sIGFyZWEpO1xuICAgIGZvcihpID0gMCwgaWxlbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBpbkFyZWFQcmV2ID0gaW5BcmVhO1xuICAgICAgICBpbkFyZWEgPSBpbkFyZWFOZXh0O1xuICAgICAgICBpbkFyZWFOZXh0ID0gaSA8IGlsZW4gLSAxICYmIF9pc1BvaW50SW5BcmVhKHBvaW50c1tpICsgMV0sIGFyZWEpO1xuICAgICAgICBpZiAoIWluQXJlYSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICAgIGlmIChpbkFyZWFQcmV2KSB7XG4gICAgICAgICAgICBwb2ludC5jcDF4ID0gY2FwQ29udHJvbFBvaW50KHBvaW50LmNwMXgsIGFyZWEubGVmdCwgYXJlYS5yaWdodCk7XG4gICAgICAgICAgICBwb2ludC5jcDF5ID0gY2FwQ29udHJvbFBvaW50KHBvaW50LmNwMXksIGFyZWEudG9wLCBhcmVhLmJvdHRvbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluQXJlYU5leHQpIHtcbiAgICAgICAgICAgIHBvaW50LmNwMnggPSBjYXBDb250cm9sUG9pbnQocG9pbnQuY3AyeCwgYXJlYS5sZWZ0LCBhcmVhLnJpZ2h0KTtcbiAgICAgICAgICAgIHBvaW50LmNwMnkgPSBjYXBDb250cm9sUG9pbnQocG9pbnQuY3AyeSwgYXJlYS50b3AsIGFyZWEuYm90dG9tKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfdXBkYXRlQmV6aWVyQ29udHJvbFBvaW50cyhwb2ludHMsIG9wdGlvbnMsIGFyZWEsIGxvb3AsIGluZGV4QXhpcykge1xuICAgIGxldCBpLCBpbGVuLCBwb2ludCwgY29udHJvbFBvaW50cztcbiAgICAvLyBPbmx5IGNvbnNpZGVyIHBvaW50cyB0aGF0IGFyZSBkcmF3biBpbiBjYXNlIHRoZSBzcGFuR2FwcyBvcHRpb24gaXMgdXNlZFxuICAgIGlmIChvcHRpb25zLnNwYW5HYXBzKSB7XG4gICAgICAgIHBvaW50cyA9IHBvaW50cy5maWx0ZXIoKHB0KT0+IXB0LnNraXApO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5jdWJpY0ludGVycG9sYXRpb25Nb2RlID09PSAnbW9ub3RvbmUnKSB7XG4gICAgICAgIHNwbGluZUN1cnZlTW9ub3RvbmUocG9pbnRzLCBpbmRleEF4aXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBwcmV2ID0gbG9vcCA/IHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV0gOiBwb2ludHNbMF07XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICAgICAgICBjb250cm9sUG9pbnRzID0gc3BsaW5lQ3VydmUocHJldiwgcG9pbnQsIHBvaW50c1tNYXRoLm1pbihpICsgMSwgaWxlbiAtIChsb29wID8gMCA6IDEpKSAlIGlsZW5dLCBvcHRpb25zLnRlbnNpb24pO1xuICAgICAgICAgICAgcG9pbnQuY3AxeCA9IGNvbnRyb2xQb2ludHMucHJldmlvdXMueDtcbiAgICAgICAgICAgIHBvaW50LmNwMXkgPSBjb250cm9sUG9pbnRzLnByZXZpb3VzLnk7XG4gICAgICAgICAgICBwb2ludC5jcDJ4ID0gY29udHJvbFBvaW50cy5uZXh0Lng7XG4gICAgICAgICAgICBwb2ludC5jcDJ5ID0gY29udHJvbFBvaW50cy5uZXh0Lnk7XG4gICAgICAgICAgICBwcmV2ID0gcG9pbnQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuY2FwQmV6aWVyUG9pbnRzKSB7XG4gICAgICAgIGNhcEJlemllclBvaW50cyhwb2ludHMsIGFyZWEpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBOb3RlOiB0eXBlZGVmcyBhcmUgYXV0by1leHBvcnRlZCwgc28gdXNlIGEgbWFkZS11cCBgZG9tYCBuYW1lc3BhY2Ugd2hlcmVcbiAqIG5lY2Vzc2FyeSB0byBhdm9pZCBkdXBsaWNhdGVzIHdpdGggYGV4cG9ydCAqIGZyb20gJy4vaGVscGVyc2A7IHNlZVxuICogaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy80NjAxMVxuICogQHR5cGVkZWYgeyBpbXBvcnQoJy4uL2NvcmUvY29yZS5jb250cm9sbGVyLmpzJykuZGVmYXVsdCB9IGRvbS5DaGFydFxuICogQHR5cGVkZWYgeyBpbXBvcnQoJy4uLy4uL3R5cGVzJykuQ2hhcnRFdmVudCB9IENoYXJ0RXZlbnRcbiAqLyAvKipcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2lzRG9tU3VwcG9ydGVkKCkge1xuICAgIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9nZXRQYXJlbnROb2RlKGRvbU5vZGUpIHtcbiAgICBsZXQgcGFyZW50ID0gZG9tTm9kZS5wYXJlbnROb2RlO1xuICAgIGlmIChwYXJlbnQgJiYgcGFyZW50LnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IFNoYWRvd1Jvb3RdJykge1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQuaG9zdDtcbiAgICB9XG4gICAgcmV0dXJuIHBhcmVudDtcbn1cbi8qKlxuICogY29udmVydCBtYXgtd2lkdGgvbWF4LWhlaWdodCB2YWx1ZXMgdGhhdCBtYXkgYmUgcGVyY2VudGFnZXMgaW50byBhIG51bWJlclxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBwYXJzZU1heFN0eWxlKHN0eWxlVmFsdWUsIG5vZGUsIHBhcmVudFByb3BlcnR5KSB7XG4gICAgbGV0IHZhbHVlSW5QaXhlbHM7XG4gICAgaWYgKHR5cGVvZiBzdHlsZVZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YWx1ZUluUGl4ZWxzID0gcGFyc2VJbnQoc3R5bGVWYWx1ZSwgMTApO1xuICAgICAgICBpZiAoc3R5bGVWYWx1ZS5pbmRleE9mKCclJykgIT09IC0xKSB7XG4gICAgICAgICAgICAvLyBwZXJjZW50YWdlICogc2l6ZSBpbiBkaW1lbnNpb25cbiAgICAgICAgICAgIHZhbHVlSW5QaXhlbHMgPSB2YWx1ZUluUGl4ZWxzIC8gMTAwICogbm9kZS5wYXJlbnROb2RlW3BhcmVudFByb3BlcnR5XTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlSW5QaXhlbHMgPSBzdHlsZVZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWVJblBpeGVscztcbn1cbmNvbnN0IGdldENvbXB1dGVkU3R5bGUgPSAoZWxlbWVudCk9PmVsZW1lbnQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsIG51bGwpO1xuZnVuY3Rpb24gZ2V0U3R5bGUoZWwsIHByb3BlcnR5KSB7XG4gICAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGUoZWwpLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkpO1xufVxuY29uc3QgcG9zaXRpb25zID0gW1xuICAgICd0b3AnLFxuICAgICdyaWdodCcsXG4gICAgJ2JvdHRvbScsXG4gICAgJ2xlZnQnXG5dO1xuZnVuY3Rpb24gZ2V0UG9zaXRpb25lZFN0eWxlKHN0eWxlcywgc3R5bGUsIHN1ZmZpeCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIHN1ZmZpeCA9IHN1ZmZpeCA/ICctJyArIHN1ZmZpeCA6ICcnO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCA0OyBpKyspe1xuICAgICAgICBjb25zdCBwb3MgPSBwb3NpdGlvbnNbaV07XG4gICAgICAgIHJlc3VsdFtwb3NdID0gcGFyc2VGbG9hdChzdHlsZXNbc3R5bGUgKyAnLScgKyBwb3MgKyBzdWZmaXhdKSB8fCAwO1xuICAgIH1cbiAgICByZXN1bHQud2lkdGggPSByZXN1bHQubGVmdCArIHJlc3VsdC5yaWdodDtcbiAgICByZXN1bHQuaGVpZ2h0ID0gcmVzdWx0LnRvcCArIHJlc3VsdC5ib3R0b207XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmNvbnN0IHVzZU9mZnNldFBvcyA9ICh4LCB5LCB0YXJnZXQpPT4oeCA+IDAgfHwgeSA+IDApICYmICghdGFyZ2V0IHx8ICF0YXJnZXQuc2hhZG93Um9vdCk7XG4vKipcbiAqIEBwYXJhbSBlXG4gKiBAcGFyYW0gY2FudmFzXG4gKiBAcmV0dXJucyBDYW52YXMgcG9zaXRpb25cbiAqLyBmdW5jdGlvbiBnZXRDYW52YXNQb3NpdGlvbihlLCBjYW52YXMpIHtcbiAgICBjb25zdCB0b3VjaGVzID0gZS50b3VjaGVzO1xuICAgIGNvbnN0IHNvdXJjZSA9IHRvdWNoZXMgJiYgdG91Y2hlcy5sZW5ndGggPyB0b3VjaGVzWzBdIDogZTtcbiAgICBjb25zdCB7IG9mZnNldFggLCBvZmZzZXRZICB9ID0gc291cmNlO1xuICAgIGxldCBib3ggPSBmYWxzZTtcbiAgICBsZXQgeCwgeTtcbiAgICBpZiAodXNlT2Zmc2V0UG9zKG9mZnNldFgsIG9mZnNldFksIGUudGFyZ2V0KSkge1xuICAgICAgICB4ID0gb2Zmc2V0WDtcbiAgICAgICAgeSA9IG9mZnNldFk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgcmVjdCA9IGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgeCA9IHNvdXJjZS5jbGllbnRYIC0gcmVjdC5sZWZ0O1xuICAgICAgICB5ID0gc291cmNlLmNsaWVudFkgLSByZWN0LnRvcDtcbiAgICAgICAgYm94ID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeCxcbiAgICAgICAgeSxcbiAgICAgICAgYm94XG4gICAgfTtcbn1cbi8qKlxuICogR2V0cyBhbiBldmVudCdzIHgsIHkgY29vcmRpbmF0ZXMsIHJlbGF0aXZlIHRvIHRoZSBjaGFydCBhcmVhXG4gKiBAcGFyYW0gZXZlbnRcbiAqIEBwYXJhbSBjaGFydFxuICogQHJldHVybnMgeCBhbmQgeSBjb29yZGluYXRlcyBvZiB0aGUgZXZlbnRcbiAqLyBmdW5jdGlvbiBnZXRSZWxhdGl2ZVBvc2l0aW9uKGV2ZW50LCBjaGFydCkge1xuICAgIGlmICgnbmF0aXZlJyBpbiBldmVudCkge1xuICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfVxuICAgIGNvbnN0IHsgY2FudmFzICwgY3VycmVudERldmljZVBpeGVsUmF0aW8gIH0gPSBjaGFydDtcbiAgICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoY2FudmFzKTtcbiAgICBjb25zdCBib3JkZXJCb3ggPSBzdHlsZS5ib3hTaXppbmcgPT09ICdib3JkZXItYm94JztcbiAgICBjb25zdCBwYWRkaW5ncyA9IGdldFBvc2l0aW9uZWRTdHlsZShzdHlsZSwgJ3BhZGRpbmcnKTtcbiAgICBjb25zdCBib3JkZXJzID0gZ2V0UG9zaXRpb25lZFN0eWxlKHN0eWxlLCAnYm9yZGVyJywgJ3dpZHRoJyk7XG4gICAgY29uc3QgeyB4ICwgeSAsIGJveCAgfSA9IGdldENhbnZhc1Bvc2l0aW9uKGV2ZW50LCBjYW52YXMpO1xuICAgIGNvbnN0IHhPZmZzZXQgPSBwYWRkaW5ncy5sZWZ0ICsgKGJveCAmJiBib3JkZXJzLmxlZnQpO1xuICAgIGNvbnN0IHlPZmZzZXQgPSBwYWRkaW5ncy50b3AgKyAoYm94ICYmIGJvcmRlcnMudG9wKTtcbiAgICBsZXQgeyB3aWR0aCAsIGhlaWdodCAgfSA9IGNoYXJ0O1xuICAgIGlmIChib3JkZXJCb3gpIHtcbiAgICAgICAgd2lkdGggLT0gcGFkZGluZ3Mud2lkdGggKyBib3JkZXJzLndpZHRoO1xuICAgICAgICBoZWlnaHQgLT0gcGFkZGluZ3MuaGVpZ2h0ICsgYm9yZGVycy5oZWlnaHQ7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHg6IE1hdGgucm91bmQoKHggLSB4T2Zmc2V0KSAvIHdpZHRoICogY2FudmFzLndpZHRoIC8gY3VycmVudERldmljZVBpeGVsUmF0aW8pLFxuICAgICAgICB5OiBNYXRoLnJvdW5kKCh5IC0geU9mZnNldCkgLyBoZWlnaHQgKiBjYW52YXMuaGVpZ2h0IC8gY3VycmVudERldmljZVBpeGVsUmF0aW8pXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGdldENvbnRhaW5lclNpemUoY2FudmFzLCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgbGV0IG1heFdpZHRoLCBtYXhIZWlnaHQ7XG4gICAgaWYgKHdpZHRoID09PSB1bmRlZmluZWQgfHwgaGVpZ2h0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gX2dldFBhcmVudE5vZGUoY2FudmFzKTtcbiAgICAgICAgaWYgKCFjb250YWluZXIpIHtcbiAgICAgICAgICAgIHdpZHRoID0gY2FudmFzLmNsaWVudFdpZHRoO1xuICAgICAgICAgICAgaGVpZ2h0ID0gY2FudmFzLmNsaWVudEhlaWdodDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHJlY3QgPSBjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7IC8vIHRoaXMgaXMgdGhlIGJvcmRlciBib3ggb2YgdGhlIGNvbnRhaW5lclxuICAgICAgICAgICAgY29uc3QgY29udGFpbmVyU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGNvbnRhaW5lcik7XG4gICAgICAgICAgICBjb25zdCBjb250YWluZXJCb3JkZXIgPSBnZXRQb3NpdGlvbmVkU3R5bGUoY29udGFpbmVyU3R5bGUsICdib3JkZXInLCAnd2lkdGgnKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lclBhZGRpbmcgPSBnZXRQb3NpdGlvbmVkU3R5bGUoY29udGFpbmVyU3R5bGUsICdwYWRkaW5nJyk7XG4gICAgICAgICAgICB3aWR0aCA9IHJlY3Qud2lkdGggLSBjb250YWluZXJQYWRkaW5nLndpZHRoIC0gY29udGFpbmVyQm9yZGVyLndpZHRoO1xuICAgICAgICAgICAgaGVpZ2h0ID0gcmVjdC5oZWlnaHQgLSBjb250YWluZXJQYWRkaW5nLmhlaWdodCAtIGNvbnRhaW5lckJvcmRlci5oZWlnaHQ7XG4gICAgICAgICAgICBtYXhXaWR0aCA9IHBhcnNlTWF4U3R5bGUoY29udGFpbmVyU3R5bGUubWF4V2lkdGgsIGNvbnRhaW5lciwgJ2NsaWVudFdpZHRoJyk7XG4gICAgICAgICAgICBtYXhIZWlnaHQgPSBwYXJzZU1heFN0eWxlKGNvbnRhaW5lclN0eWxlLm1heEhlaWdodCwgY29udGFpbmVyLCAnY2xpZW50SGVpZ2h0Jyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgd2lkdGgsXG4gICAgICAgIGhlaWdodCxcbiAgICAgICAgbWF4V2lkdGg6IG1heFdpZHRoIHx8IElORklOSVRZLFxuICAgICAgICBtYXhIZWlnaHQ6IG1heEhlaWdodCB8fCBJTkZJTklUWVxuICAgIH07XG59XG5jb25zdCByb3VuZDEgPSAodik9Pk1hdGgucm91bmQodiAqIDEwKSAvIDEwO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbmZ1bmN0aW9uIGdldE1heGltdW1TaXplKGNhbnZhcywgYmJXaWR0aCwgYmJIZWlnaHQsIGFzcGVjdFJhdGlvKSB7XG4gICAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGNhbnZhcyk7XG4gICAgY29uc3QgbWFyZ2lucyA9IGdldFBvc2l0aW9uZWRTdHlsZShzdHlsZSwgJ21hcmdpbicpO1xuICAgIGNvbnN0IG1heFdpZHRoID0gcGFyc2VNYXhTdHlsZShzdHlsZS5tYXhXaWR0aCwgY2FudmFzLCAnY2xpZW50V2lkdGgnKSB8fCBJTkZJTklUWTtcbiAgICBjb25zdCBtYXhIZWlnaHQgPSBwYXJzZU1heFN0eWxlKHN0eWxlLm1heEhlaWdodCwgY2FudmFzLCAnY2xpZW50SGVpZ2h0JykgfHwgSU5GSU5JVFk7XG4gICAgY29uc3QgY29udGFpbmVyU2l6ZSA9IGdldENvbnRhaW5lclNpemUoY2FudmFzLCBiYldpZHRoLCBiYkhlaWdodCk7XG4gICAgbGV0IHsgd2lkdGggLCBoZWlnaHQgIH0gPSBjb250YWluZXJTaXplO1xuICAgIGlmIChzdHlsZS5ib3hTaXppbmcgPT09ICdjb250ZW50LWJveCcpIHtcbiAgICAgICAgY29uc3QgYm9yZGVycyA9IGdldFBvc2l0aW9uZWRTdHlsZShzdHlsZSwgJ2JvcmRlcicsICd3aWR0aCcpO1xuICAgICAgICBjb25zdCBwYWRkaW5ncyA9IGdldFBvc2l0aW9uZWRTdHlsZShzdHlsZSwgJ3BhZGRpbmcnKTtcbiAgICAgICAgd2lkdGggLT0gcGFkZGluZ3Mud2lkdGggKyBib3JkZXJzLndpZHRoO1xuICAgICAgICBoZWlnaHQgLT0gcGFkZGluZ3MuaGVpZ2h0ICsgYm9yZGVycy5oZWlnaHQ7XG4gICAgfVxuICAgIHdpZHRoID0gTWF0aC5tYXgoMCwgd2lkdGggLSBtYXJnaW5zLndpZHRoKTtcbiAgICBoZWlnaHQgPSBNYXRoLm1heCgwLCBhc3BlY3RSYXRpbyA/IHdpZHRoIC8gYXNwZWN0UmF0aW8gOiBoZWlnaHQgLSBtYXJnaW5zLmhlaWdodCk7XG4gICAgd2lkdGggPSByb3VuZDEoTWF0aC5taW4od2lkdGgsIG1heFdpZHRoLCBjb250YWluZXJTaXplLm1heFdpZHRoKSk7XG4gICAgaGVpZ2h0ID0gcm91bmQxKE1hdGgubWluKGhlaWdodCwgbWF4SGVpZ2h0LCBjb250YWluZXJTaXplLm1heEhlaWdodCkpO1xuICAgIGlmICh3aWR0aCAmJiAhaGVpZ2h0KSB7XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy80NjU5XG4gICAgICAgIC8vIElmIHRoZSBjYW52YXMgaGFzIHdpZHRoLCBidXQgbm8gaGVpZ2h0LCBkZWZhdWx0IHRvIGFzcGVjdFJhdGlvIG9mIDIgKGNhbnZhcyBkZWZhdWx0KVxuICAgICAgICBoZWlnaHQgPSByb3VuZDEod2lkdGggLyAyKTtcbiAgICB9XG4gICAgY29uc3QgbWFpbnRhaW5IZWlnaHQgPSBiYldpZHRoICE9PSB1bmRlZmluZWQgfHwgYmJIZWlnaHQgIT09IHVuZGVmaW5lZDtcbiAgICBpZiAobWFpbnRhaW5IZWlnaHQgJiYgYXNwZWN0UmF0aW8gJiYgY29udGFpbmVyU2l6ZS5oZWlnaHQgJiYgaGVpZ2h0ID4gY29udGFpbmVyU2l6ZS5oZWlnaHQpIHtcbiAgICAgICAgaGVpZ2h0ID0gY29udGFpbmVyU2l6ZS5oZWlnaHQ7XG4gICAgICAgIHdpZHRoID0gcm91bmQxKE1hdGguZmxvb3IoaGVpZ2h0ICogYXNwZWN0UmF0aW8pKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgd2lkdGgsXG4gICAgICAgIGhlaWdodFxuICAgIH07XG59XG4vKipcbiAqIEBwYXJhbSBjaGFydFxuICogQHBhcmFtIGZvcmNlUmF0aW9cbiAqIEBwYXJhbSBmb3JjZVN0eWxlXG4gKiBAcmV0dXJucyBUcnVlIGlmIHRoZSBjYW52YXMgY29udGV4dCBzaXplIG9yIHRyYW5zZm9ybWF0aW9uIGhhcyBjaGFuZ2VkLlxuICovIGZ1bmN0aW9uIHJldGluYVNjYWxlKGNoYXJ0LCBmb3JjZVJhdGlvLCBmb3JjZVN0eWxlKSB7XG4gICAgY29uc3QgcGl4ZWxSYXRpbyA9IGZvcmNlUmF0aW8gfHwgMTtcbiAgICBjb25zdCBkZXZpY2VIZWlnaHQgPSBNYXRoLmZsb29yKGNoYXJ0LmhlaWdodCAqIHBpeGVsUmF0aW8pO1xuICAgIGNvbnN0IGRldmljZVdpZHRoID0gTWF0aC5mbG9vcihjaGFydC53aWR0aCAqIHBpeGVsUmF0aW8pO1xuICAgIGNoYXJ0LmhlaWdodCA9IE1hdGguZmxvb3IoY2hhcnQuaGVpZ2h0KTtcbiAgICBjaGFydC53aWR0aCA9IE1hdGguZmxvb3IoY2hhcnQud2lkdGgpO1xuICAgIGNvbnN0IGNhbnZhcyA9IGNoYXJ0LmNhbnZhcztcbiAgICAvLyBJZiBubyBzdHlsZSBoYXMgYmVlbiBzZXQgb24gdGhlIGNhbnZhcywgdGhlIHJlbmRlciBzaXplIGlzIHVzZWQgYXMgZGlzcGxheSBzaXplLFxuICAgIC8vIG1ha2luZyB0aGUgY2hhcnQgdmlzdWFsbHkgYmlnZ2VyLCBzbyBsZXQncyBlbmZvcmNlIGl0IHRvIHRoZSBcImNvcnJlY3RcIiB2YWx1ZXMuXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy8zNTc1XG4gICAgaWYgKGNhbnZhcy5zdHlsZSAmJiAoZm9yY2VTdHlsZSB8fCAhY2FudmFzLnN0eWxlLmhlaWdodCAmJiAhY2FudmFzLnN0eWxlLndpZHRoKSkge1xuICAgICAgICBjYW52YXMuc3R5bGUuaGVpZ2h0ID0gYCR7Y2hhcnQuaGVpZ2h0fXB4YDtcbiAgICAgICAgY2FudmFzLnN0eWxlLndpZHRoID0gYCR7Y2hhcnQud2lkdGh9cHhgO1xuICAgIH1cbiAgICBpZiAoY2hhcnQuY3VycmVudERldmljZVBpeGVsUmF0aW8gIT09IHBpeGVsUmF0aW8gfHwgY2FudmFzLmhlaWdodCAhPT0gZGV2aWNlSGVpZ2h0IHx8IGNhbnZhcy53aWR0aCAhPT0gZGV2aWNlV2lkdGgpIHtcbiAgICAgICAgY2hhcnQuY3VycmVudERldmljZVBpeGVsUmF0aW8gPSBwaXhlbFJhdGlvO1xuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gZGV2aWNlSGVpZ2h0O1xuICAgICAgICBjYW52YXMud2lkdGggPSBkZXZpY2VXaWR0aDtcbiAgICAgICAgY2hhcnQuY3R4LnNldFRyYW5zZm9ybShwaXhlbFJhdGlvLCAwLCAwLCBwaXhlbFJhdGlvLCAwLCAwKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbi8qKlxuICogRGV0ZWN0cyBzdXBwb3J0IGZvciBvcHRpb25zIG9iamVjdCBhcmd1bWVudCBpbiBhZGRFdmVudExpc3RlbmVyLlxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0V2ZW50VGFyZ2V0L2FkZEV2ZW50TGlzdGVuZXIjU2FmZWx5X2RldGVjdGluZ19vcHRpb25fc3VwcG9ydFxuICogQHByaXZhdGVcbiAqLyBjb25zdCBzdXBwb3J0c0V2ZW50TGlzdGVuZXJPcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gICAgbGV0IHBhc3NpdmVTdXBwb3J0ZWQgPSBmYWxzZTtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgZ2V0IHBhc3NpdmUgKCkge1xuICAgICAgICAgICAgICAgIHBhc3NpdmVTdXBwb3J0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBudWxsLCBvcHRpb25zKTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBudWxsLCBvcHRpb25zKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgLy8gY29udGludWUgcmVnYXJkbGVzcyBvZiBlcnJvclxuICAgIH1cbiAgICByZXR1cm4gcGFzc2l2ZVN1cHBvcnRlZDtcbn0oKTtcbi8qKlxuICogVGhlIFwidXNlZFwiIHNpemUgaXMgdGhlIGZpbmFsIHZhbHVlIG9mIGEgZGltZW5zaW9uIHByb3BlcnR5IGFmdGVyIGFsbCBjYWxjdWxhdGlvbnMgaGF2ZVxuICogYmVlbiBwZXJmb3JtZWQuIFRoaXMgbWV0aG9kIHVzZXMgdGhlIGNvbXB1dGVkIHN0eWxlIG9mIGBlbGVtZW50YCBidXQgcmV0dXJucyB1bmRlZmluZWRcbiAqIGlmIHRoZSBjb21wdXRlZCBzdHlsZSBpcyBub3QgZXhwcmVzc2VkIGluIHBpeGVscy4gVGhhdCBjYW4gaGFwcGVuIGluIHNvbWUgY2FzZXMgd2hlcmVcbiAqIGBlbGVtZW50YCBoYXMgYSBzaXplIHJlbGF0aXZlIHRvIGl0cyBwYXJlbnQgYW5kIHRoaXMgbGFzdCBvbmUgaXMgbm90IHlldCBkaXNwbGF5ZWQsXG4gKiBmb3IgZXhhbXBsZSBiZWNhdXNlIG9mIGBkaXNwbGF5OiBub25lYCBvbiBhIHBhcmVudCBub2RlLlxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvdXNlZF92YWx1ZVxuICogQHJldHVybnMgU2l6ZSBpbiBwaXhlbHMgb3IgdW5kZWZpbmVkIGlmIHVua25vd24uXG4gKi8gZnVuY3Rpb24gcmVhZFVzZWRTaXplKGVsZW1lbnQsIHByb3BlcnR5KSB7XG4gICAgY29uc3QgdmFsdWUgPSBnZXRTdHlsZShlbGVtZW50LCBwcm9wZXJ0eSk7XG4gICAgY29uc3QgbWF0Y2hlcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKC9eKFxcZCspKFxcLlxcZCspP3B4JC8pO1xuICAgIHJldHVybiBtYXRjaGVzID8gK21hdGNoZXNbMV0gOiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfcG9pbnRJbkxpbmUocDEsIHAyLCB0LCBtb2RlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogcDEueCArIHQgKiAocDIueCAtIHAxLngpLFxuICAgICAgICB5OiBwMS55ICsgdCAqIChwMi55IC0gcDEueSlcbiAgICB9O1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9zdGVwcGVkSW50ZXJwb2xhdGlvbihwMSwgcDIsIHQsIG1vZGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiBwMS54ICsgdCAqIChwMi54IC0gcDEueCksXG4gICAgICAgIHk6IG1vZGUgPT09ICdtaWRkbGUnID8gdCA8IDAuNSA/IHAxLnkgOiBwMi55IDogbW9kZSA9PT0gJ2FmdGVyJyA/IHQgPCAxID8gcDEueSA6IHAyLnkgOiB0ID4gMCA/IHAyLnkgOiBwMS55XG4gICAgfTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfYmV6aWVySW50ZXJwb2xhdGlvbihwMSwgcDIsIHQsIG1vZGUpIHtcbiAgICBjb25zdCBjcDEgPSB7XG4gICAgICAgIHg6IHAxLmNwMngsXG4gICAgICAgIHk6IHAxLmNwMnlcbiAgICB9O1xuICAgIGNvbnN0IGNwMiA9IHtcbiAgICAgICAgeDogcDIuY3AxeCxcbiAgICAgICAgeTogcDIuY3AxeVxuICAgIH07XG4gICAgY29uc3QgYSA9IF9wb2ludEluTGluZShwMSwgY3AxLCB0KTtcbiAgICBjb25zdCBiID0gX3BvaW50SW5MaW5lKGNwMSwgY3AyLCB0KTtcbiAgICBjb25zdCBjID0gX3BvaW50SW5MaW5lKGNwMiwgcDIsIHQpO1xuICAgIGNvbnN0IGQgPSBfcG9pbnRJbkxpbmUoYSwgYiwgdCk7XG4gICAgY29uc3QgZSA9IF9wb2ludEluTGluZShiLCBjLCB0KTtcbiAgICByZXR1cm4gX3BvaW50SW5MaW5lKGQsIGUsIHQpO1xufVxuXG5jb25zdCBnZXRSaWdodFRvTGVmdEFkYXB0ZXIgPSBmdW5jdGlvbihyZWN0WCwgd2lkdGgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB4ICh4KSB7XG4gICAgICAgICAgICByZXR1cm4gcmVjdFggKyByZWN0WCArIHdpZHRoIC0geDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0V2lkdGggKHcpIHtcbiAgICAgICAgICAgIHdpZHRoID0gdztcbiAgICAgICAgfSxcbiAgICAgICAgdGV4dEFsaWduIChhbGlnbikge1xuICAgICAgICAgICAgaWYgKGFsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBhbGlnbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhbGlnbiA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gICAgICAgIH0sXG4gICAgICAgIHhQbHVzICh4LCB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHggLSB2YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgbGVmdEZvckx0ciAoeCwgaXRlbVdpZHRoKSB7XG4gICAgICAgICAgICByZXR1cm4geCAtIGl0ZW1XaWR0aDtcbiAgICAgICAgfVxuICAgIH07XG59O1xuY29uc3QgZ2V0TGVmdFRvUmlnaHRBZGFwdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeCAoeCkge1xuICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgIH0sXG4gICAgICAgIHNldFdpZHRoICh3KSB7fSxcbiAgICAgICAgdGV4dEFsaWduIChhbGlnbikge1xuICAgICAgICAgICAgcmV0dXJuIGFsaWduO1xuICAgICAgICB9LFxuICAgICAgICB4UGx1cyAoeCwgdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB4ICsgdmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIGxlZnRGb3JMdHIgKHgsIF9pdGVtV2lkdGgpIHtcbiAgICAgICAgICAgIHJldHVybiB4O1xuICAgICAgICB9XG4gICAgfTtcbn07XG5mdW5jdGlvbiBnZXRSdGxBZGFwdGVyKHJ0bCwgcmVjdFgsIHdpZHRoKSB7XG4gICAgcmV0dXJuIHJ0bCA/IGdldFJpZ2h0VG9MZWZ0QWRhcHRlcihyZWN0WCwgd2lkdGgpIDogZ2V0TGVmdFRvUmlnaHRBZGFwdGVyKCk7XG59XG5mdW5jdGlvbiBvdmVycmlkZVRleHREaXJlY3Rpb24oY3R4LCBkaXJlY3Rpb24pIHtcbiAgICBsZXQgc3R5bGUsIG9yaWdpbmFsO1xuICAgIGlmIChkaXJlY3Rpb24gPT09ICdsdHInIHx8IGRpcmVjdGlvbiA9PT0gJ3J0bCcpIHtcbiAgICAgICAgc3R5bGUgPSBjdHguY2FudmFzLnN0eWxlO1xuICAgICAgICBvcmlnaW5hbCA9IFtcbiAgICAgICAgICAgIHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2RpcmVjdGlvbicpLFxuICAgICAgICAgICAgc3R5bGUuZ2V0UHJvcGVydHlQcmlvcml0eSgnZGlyZWN0aW9uJylcbiAgICAgICAgXTtcbiAgICAgICAgc3R5bGUuc2V0UHJvcGVydHkoJ2RpcmVjdGlvbicsIGRpcmVjdGlvbiwgJ2ltcG9ydGFudCcpO1xuICAgICAgICBjdHgucHJldlRleHREaXJlY3Rpb24gPSBvcmlnaW5hbDtcbiAgICB9XG59XG5mdW5jdGlvbiByZXN0b3JlVGV4dERpcmVjdGlvbihjdHgsIG9yaWdpbmFsKSB7XG4gICAgaWYgKG9yaWdpbmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZGVsZXRlIGN0eC5wcmV2VGV4dERpcmVjdGlvbjtcbiAgICAgICAgY3R4LmNhbnZhcy5zdHlsZS5zZXRQcm9wZXJ0eSgnZGlyZWN0aW9uJywgb3JpZ2luYWxbMF0sIG9yaWdpbmFsWzFdKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5Rm4ocHJvcGVydHkpIHtcbiAgICBpZiAocHJvcGVydHkgPT09ICdhbmdsZScpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJldHdlZW46IF9hbmdsZUJldHdlZW4sXG4gICAgICAgICAgICBjb21wYXJlOiBfYW5nbGVEaWZmLFxuICAgICAgICAgICAgbm9ybWFsaXplOiBfbm9ybWFsaXplQW5nbGVcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYmV0d2VlbjogX2lzQmV0d2VlbixcbiAgICAgICAgY29tcGFyZTogKGEsIGIpPT5hIC0gYixcbiAgICAgICAgbm9ybWFsaXplOiAoeCk9PnhcbiAgICB9O1xufVxuZnVuY3Rpb24gbm9ybWFsaXplU2VnbWVudCh7IHN0YXJ0ICwgZW5kICwgY291bnQgLCBsb29wICwgc3R5bGUgIH0pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydDogc3RhcnQgJSBjb3VudCxcbiAgICAgICAgZW5kOiBlbmQgJSBjb3VudCxcbiAgICAgICAgbG9vcDogbG9vcCAmJiAoZW5kIC0gc3RhcnQgKyAxKSAlIGNvdW50ID09PSAwLFxuICAgICAgICBzdHlsZVxuICAgIH07XG59XG5mdW5jdGlvbiBnZXRTZWdtZW50KHNlZ21lbnQsIHBvaW50cywgYm91bmRzKSB7XG4gICAgY29uc3QgeyBwcm9wZXJ0eSAsIHN0YXJ0OiBzdGFydEJvdW5kICwgZW5kOiBlbmRCb3VuZCAgfSA9IGJvdW5kcztcbiAgICBjb25zdCB7IGJldHdlZW4gLCBub3JtYWxpemUgIH0gPSBwcm9wZXJ0eUZuKHByb3BlcnR5KTtcbiAgICBjb25zdCBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gICAgbGV0IHsgc3RhcnQgLCBlbmQgLCBsb29wICB9ID0gc2VnbWVudDtcbiAgICBsZXQgaSwgaWxlbjtcbiAgICBpZiAobG9vcCkge1xuICAgICAgICBzdGFydCArPSBjb3VudDtcbiAgICAgICAgZW5kICs9IGNvdW50O1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBjb3VudDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBpZiAoIWJldHdlZW4obm9ybWFsaXplKHBvaW50c1tzdGFydCAlIGNvdW50XVtwcm9wZXJ0eV0pLCBzdGFydEJvdW5kLCBlbmRCb3VuZCkpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YXJ0LS07XG4gICAgICAgICAgICBlbmQtLTtcbiAgICAgICAgfVxuICAgICAgICBzdGFydCAlPSBjb3VudDtcbiAgICAgICAgZW5kICU9IGNvdW50O1xuICAgIH1cbiAgICBpZiAoZW5kIDwgc3RhcnQpIHtcbiAgICAgICAgZW5kICs9IGNvdW50O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydCxcbiAgICAgICAgZW5kLFxuICAgICAgICBsb29wLFxuICAgICAgICBzdHlsZTogc2VnbWVudC5zdHlsZVxuICAgIH07XG59XG4gZnVuY3Rpb24gX2JvdW5kU2VnbWVudChzZWdtZW50LCBwb2ludHMsIGJvdW5kcykge1xuICAgIGlmICghYm91bmRzKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBzZWdtZW50XG4gICAgICAgIF07XG4gICAgfVxuICAgIGNvbnN0IHsgcHJvcGVydHkgLCBzdGFydDogc3RhcnRCb3VuZCAsIGVuZDogZW5kQm91bmQgIH0gPSBib3VuZHM7XG4gICAgY29uc3QgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuICAgIGNvbnN0IHsgY29tcGFyZSAsIGJldHdlZW4gLCBub3JtYWxpemUgIH0gPSBwcm9wZXJ0eUZuKHByb3BlcnR5KTtcbiAgICBjb25zdCB7IHN0YXJ0ICwgZW5kICwgbG9vcCAsIHN0eWxlICB9ID0gZ2V0U2VnbWVudChzZWdtZW50LCBwb2ludHMsIGJvdW5kcyk7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgbGV0IGluc2lkZSA9IGZhbHNlO1xuICAgIGxldCBzdWJTdGFydCA9IG51bGw7XG4gICAgbGV0IHZhbHVlLCBwb2ludCwgcHJldlZhbHVlO1xuICAgIGNvbnN0IHN0YXJ0SXNCZWZvcmUgPSAoKT0+YmV0d2VlbihzdGFydEJvdW5kLCBwcmV2VmFsdWUsIHZhbHVlKSAmJiBjb21wYXJlKHN0YXJ0Qm91bmQsIHByZXZWYWx1ZSkgIT09IDA7XG4gICAgY29uc3QgZW5kSXNCZWZvcmUgPSAoKT0+Y29tcGFyZShlbmRCb3VuZCwgdmFsdWUpID09PSAwIHx8IGJldHdlZW4oZW5kQm91bmQsIHByZXZWYWx1ZSwgdmFsdWUpO1xuICAgIGNvbnN0IHNob3VsZFN0YXJ0ID0gKCk9Pmluc2lkZSB8fCBzdGFydElzQmVmb3JlKCk7XG4gICAgY29uc3Qgc2hvdWxkU3RvcCA9ICgpPT4haW5zaWRlIHx8IGVuZElzQmVmb3JlKCk7XG4gICAgZm9yKGxldCBpID0gc3RhcnQsIHByZXYgPSBzdGFydDsgaSA8PSBlbmQ7ICsraSl7XG4gICAgICAgIHBvaW50ID0gcG9pbnRzW2kgJSBjb3VudF07XG4gICAgICAgIGlmIChwb2ludC5za2lwKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZSA9IG5vcm1hbGl6ZShwb2ludFtwcm9wZXJ0eV0pO1xuICAgICAgICBpZiAodmFsdWUgPT09IHByZXZWYWx1ZSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaW5zaWRlID0gYmV0d2Vlbih2YWx1ZSwgc3RhcnRCb3VuZCwgZW5kQm91bmQpO1xuICAgICAgICBpZiAoc3ViU3RhcnQgPT09IG51bGwgJiYgc2hvdWxkU3RhcnQoKSkge1xuICAgICAgICAgICAgc3ViU3RhcnQgPSBjb21wYXJlKHZhbHVlLCBzdGFydEJvdW5kKSA9PT0gMCA/IGkgOiBwcmV2O1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdWJTdGFydCAhPT0gbnVsbCAmJiBzaG91bGRTdG9wKCkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5vcm1hbGl6ZVNlZ21lbnQoe1xuICAgICAgICAgICAgICAgIHN0YXJ0OiBzdWJTdGFydCxcbiAgICAgICAgICAgICAgICBlbmQ6IGksXG4gICAgICAgICAgICAgICAgbG9vcCxcbiAgICAgICAgICAgICAgICBjb3VudCxcbiAgICAgICAgICAgICAgICBzdHlsZVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgc3ViU3RhcnQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHByZXYgPSBpO1xuICAgICAgICBwcmV2VmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKHN1YlN0YXJ0ICE9PSBudWxsKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKG5vcm1hbGl6ZVNlZ21lbnQoe1xuICAgICAgICAgICAgc3RhcnQ6IHN1YlN0YXJ0LFxuICAgICAgICAgICAgZW5kLFxuICAgICAgICAgICAgbG9vcCxcbiAgICAgICAgICAgIGNvdW50LFxuICAgICAgICAgICAgc3R5bGVcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIGZ1bmN0aW9uIF9ib3VuZFNlZ21lbnRzKGxpbmUsIGJvdW5kcykge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGNvbnN0IHNlZ21lbnRzID0gbGluZS5zZWdtZW50cztcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspe1xuICAgICAgICBjb25zdCBzdWIgPSBfYm91bmRTZWdtZW50KHNlZ21lbnRzW2ldLCBsaW5lLnBvaW50cywgYm91bmRzKTtcbiAgICAgICAgaWYgKHN1Yi5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKC4uLnN1Yik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbiBmdW5jdGlvbiBmaW5kU3RhcnRBbmRFbmQocG9pbnRzLCBjb3VudCwgbG9vcCwgc3BhbkdhcHMpIHtcbiAgICBsZXQgc3RhcnQgPSAwO1xuICAgIGxldCBlbmQgPSBjb3VudCAtIDE7XG4gICAgaWYgKGxvb3AgJiYgIXNwYW5HYXBzKSB7XG4gICAgICAgIHdoaWxlKHN0YXJ0IDwgY291bnQgJiYgIXBvaW50c1tzdGFydF0uc2tpcCl7XG4gICAgICAgICAgICBzdGFydCsrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHdoaWxlKHN0YXJ0IDwgY291bnQgJiYgcG9pbnRzW3N0YXJ0XS5za2lwKXtcbiAgICAgICAgc3RhcnQrKztcbiAgICB9XG4gICAgc3RhcnQgJT0gY291bnQ7XG4gICAgaWYgKGxvb3ApIHtcbiAgICAgICAgZW5kICs9IHN0YXJ0O1xuICAgIH1cbiAgICB3aGlsZShlbmQgPiBzdGFydCAmJiBwb2ludHNbZW5kICUgY291bnRdLnNraXApe1xuICAgICAgICBlbmQtLTtcbiAgICB9XG4gICAgZW5kICU9IGNvdW50O1xuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0LFxuICAgICAgICBlbmRcbiAgICB9O1xufVxuIGZ1bmN0aW9uIHNvbGlkU2VnbWVudHMocG9pbnRzLCBzdGFydCwgbWF4LCBsb29wKSB7XG4gICAgY29uc3QgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGxldCBsYXN0ID0gc3RhcnQ7XG4gICAgbGV0IHByZXYgPSBwb2ludHNbc3RhcnRdO1xuICAgIGxldCBlbmQ7XG4gICAgZm9yKGVuZCA9IHN0YXJ0ICsgMTsgZW5kIDw9IG1heDsgKytlbmQpe1xuICAgICAgICBjb25zdCBjdXIgPSBwb2ludHNbZW5kICUgY291bnRdO1xuICAgICAgICBpZiAoY3VyLnNraXAgfHwgY3VyLnN0b3ApIHtcbiAgICAgICAgICAgIGlmICghcHJldi5za2lwKSB7XG4gICAgICAgICAgICAgICAgbG9vcCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0ICUgY291bnQsXG4gICAgICAgICAgICAgICAgICAgIGVuZDogKGVuZCAtIDEpICUgY291bnQsXG4gICAgICAgICAgICAgICAgICAgIGxvb3BcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBzdGFydCA9IGxhc3QgPSBjdXIuc3RvcCA/IGVuZCA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsYXN0ID0gZW5kO1xuICAgICAgICAgICAgaWYgKHByZXYuc2tpcCkge1xuICAgICAgICAgICAgICAgIHN0YXJ0ID0gZW5kO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHByZXYgPSBjdXI7XG4gICAgfVxuICAgIGlmIChsYXN0ICE9PSBudWxsKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgIHN0YXJ0OiBzdGFydCAlIGNvdW50LFxuICAgICAgICAgICAgZW5kOiBsYXN0ICUgY291bnQsXG4gICAgICAgICAgICBsb29wXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIGZ1bmN0aW9uIF9jb21wdXRlU2VnbWVudHMobGluZSwgc2VnbWVudE9wdGlvbnMpIHtcbiAgICBjb25zdCBwb2ludHMgPSBsaW5lLnBvaW50cztcbiAgICBjb25zdCBzcGFuR2FwcyA9IGxpbmUub3B0aW9ucy5zcGFuR2FwcztcbiAgICBjb25zdCBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gICAgaWYgKCFjb3VudCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGNvbnN0IGxvb3AgPSAhIWxpbmUuX2xvb3A7XG4gICAgY29uc3QgeyBzdGFydCAsIGVuZCAgfSA9IGZpbmRTdGFydEFuZEVuZChwb2ludHMsIGNvdW50LCBsb29wLCBzcGFuR2Fwcyk7XG4gICAgaWYgKHNwYW5HYXBzID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiBzcGxpdEJ5U3R5bGVzKGxpbmUsIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGFydCxcbiAgICAgICAgICAgICAgICBlbmQsXG4gICAgICAgICAgICAgICAgbG9vcFxuICAgICAgICAgICAgfVxuICAgICAgICBdLCBwb2ludHMsIHNlZ21lbnRPcHRpb25zKTtcbiAgICB9XG4gICAgY29uc3QgbWF4ID0gZW5kIDwgc3RhcnQgPyBlbmQgKyBjb3VudCA6IGVuZDtcbiAgICBjb25zdCBjb21wbGV0ZUxvb3AgPSAhIWxpbmUuX2Z1bGxMb29wICYmIHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gY291bnQgLSAxO1xuICAgIHJldHVybiBzcGxpdEJ5U3R5bGVzKGxpbmUsIHNvbGlkU2VnbWVudHMocG9pbnRzLCBzdGFydCwgbWF4LCBjb21wbGV0ZUxvb3ApLCBwb2ludHMsIHNlZ21lbnRPcHRpb25zKTtcbn1cbiBmdW5jdGlvbiBzcGxpdEJ5U3R5bGVzKGxpbmUsIHNlZ21lbnRzLCBwb2ludHMsIHNlZ21lbnRPcHRpb25zKSB7XG4gICAgaWYgKCFzZWdtZW50T3B0aW9ucyB8fCAhc2VnbWVudE9wdGlvbnMuc2V0Q29udGV4dCB8fCAhcG9pbnRzKSB7XG4gICAgICAgIHJldHVybiBzZWdtZW50cztcbiAgICB9XG4gICAgcmV0dXJuIGRvU3BsaXRCeVN0eWxlcyhsaW5lLCBzZWdtZW50cywgcG9pbnRzLCBzZWdtZW50T3B0aW9ucyk7XG59XG4gZnVuY3Rpb24gZG9TcGxpdEJ5U3R5bGVzKGxpbmUsIHNlZ21lbnRzLCBwb2ludHMsIHNlZ21lbnRPcHRpb25zKSB7XG4gICAgY29uc3QgY2hhcnRDb250ZXh0ID0gbGluZS5fY2hhcnQuZ2V0Q29udGV4dCgpO1xuICAgIGNvbnN0IGJhc2VTdHlsZSA9IHJlYWRTdHlsZShsaW5lLm9wdGlvbnMpO1xuICAgIGNvbnN0IHsgX2RhdGFzZXRJbmRleDogZGF0YXNldEluZGV4ICwgb3B0aW9uczogeyBzcGFuR2FwcyAgfSAgfSA9IGxpbmU7XG4gICAgY29uc3QgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGxldCBwcmV2U3R5bGUgPSBiYXNlU3R5bGU7XG4gICAgbGV0IHN0YXJ0ID0gc2VnbWVudHNbMF0uc3RhcnQ7XG4gICAgbGV0IGkgPSBzdGFydDtcbiAgICBmdW5jdGlvbiBhZGRTdHlsZShzLCBlLCBsLCBzdCkge1xuICAgICAgICBjb25zdCBkaXIgPSBzcGFuR2FwcyA/IC0xIDogMTtcbiAgICAgICAgaWYgKHMgPT09IGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzICs9IGNvdW50O1xuICAgICAgICB3aGlsZShwb2ludHNbcyAlIGNvdW50XS5za2lwKXtcbiAgICAgICAgICAgIHMgLT0gZGlyO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlKHBvaW50c1tlICUgY291bnRdLnNraXApe1xuICAgICAgICAgICAgZSArPSBkaXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMgJSBjb3VudCAhPT0gZSAlIGNvdW50KSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IHMgJSBjb3VudCxcbiAgICAgICAgICAgICAgICBlbmQ6IGUgJSBjb3VudCxcbiAgICAgICAgICAgICAgICBsb29wOiBsLFxuICAgICAgICAgICAgICAgIHN0eWxlOiBzdFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwcmV2U3R5bGUgPSBzdDtcbiAgICAgICAgICAgIHN0YXJ0ID0gZSAlIGNvdW50O1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3Qgc2VnbWVudCBvZiBzZWdtZW50cyl7XG4gICAgICAgIHN0YXJ0ID0gc3BhbkdhcHMgPyBzdGFydCA6IHNlZ21lbnQuc3RhcnQ7XG4gICAgICAgIGxldCBwcmV2ID0gcG9pbnRzW3N0YXJ0ICUgY291bnRdO1xuICAgICAgICBsZXQgc3R5bGU7XG4gICAgICAgIGZvcihpID0gc3RhcnQgKyAxOyBpIDw9IHNlZ21lbnQuZW5kOyBpKyspe1xuICAgICAgICAgICAgY29uc3QgcHQgPSBwb2ludHNbaSAlIGNvdW50XTtcbiAgICAgICAgICAgIHN0eWxlID0gcmVhZFN0eWxlKHNlZ21lbnRPcHRpb25zLnNldENvbnRleHQoY3JlYXRlQ29udGV4dChjaGFydENvbnRleHQsIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnc2VnbWVudCcsXG4gICAgICAgICAgICAgICAgcDA6IHByZXYsXG4gICAgICAgICAgICAgICAgcDE6IHB0LFxuICAgICAgICAgICAgICAgIHAwRGF0YUluZGV4OiAoaSAtIDEpICUgY291bnQsXG4gICAgICAgICAgICAgICAgcDFEYXRhSW5kZXg6IGkgJSBjb3VudCxcbiAgICAgICAgICAgICAgICBkYXRhc2V0SW5kZXhcbiAgICAgICAgICAgIH0pKSk7XG4gICAgICAgICAgICBpZiAoc3R5bGVDaGFuZ2VkKHN0eWxlLCBwcmV2U3R5bGUpKSB7XG4gICAgICAgICAgICAgICAgYWRkU3R5bGUoc3RhcnQsIGkgLSAxLCBzZWdtZW50Lmxvb3AsIHByZXZTdHlsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcmV2ID0gcHQ7XG4gICAgICAgICAgICBwcmV2U3R5bGUgPSBzdHlsZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnQgPCBpIC0gMSkge1xuICAgICAgICAgICAgYWRkU3R5bGUoc3RhcnQsIGkgLSAxLCBzZWdtZW50Lmxvb3AsIHByZXZTdHlsZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHJlYWRTdHlsZShvcHRpb25zKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBvcHRpb25zLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgYm9yZGVyQ2FwU3R5bGU6IG9wdGlvbnMuYm9yZGVyQ2FwU3R5bGUsXG4gICAgICAgIGJvcmRlckRhc2g6IG9wdGlvbnMuYm9yZGVyRGFzaCxcbiAgICAgICAgYm9yZGVyRGFzaE9mZnNldDogb3B0aW9ucy5ib3JkZXJEYXNoT2Zmc2V0LFxuICAgICAgICBib3JkZXJKb2luU3R5bGU6IG9wdGlvbnMuYm9yZGVySm9pblN0eWxlLFxuICAgICAgICBib3JkZXJXaWR0aDogb3B0aW9ucy5ib3JkZXJXaWR0aCxcbiAgICAgICAgYm9yZGVyQ29sb3I6IG9wdGlvbnMuYm9yZGVyQ29sb3JcbiAgICB9O1xufVxuZnVuY3Rpb24gc3R5bGVDaGFuZ2VkKHN0eWxlLCBwcmV2U3R5bGUpIHtcbiAgICBpZiAoIXByZXZTdHlsZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGNhY2hlID0gW107XG4gICAgY29uc3QgcmVwbGFjZXIgPSBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmICghaXNQYXR0ZXJuT3JHcmFkaWVudCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNhY2hlLmluY2x1ZGVzKHZhbHVlKSkge1xuICAgICAgICAgICAgY2FjaGUucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNhY2hlLmluZGV4T2YodmFsdWUpO1xuICAgIH07XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHN0eWxlLCByZXBsYWNlcikgIT09IEpTT04uc3RyaW5naWZ5KHByZXZTdHlsZSwgcmVwbGFjZXIpO1xufVxuXG5leHBvcnQgeyB1bmNsaXBBcmVhIGFzICQsIF9ybG9va3VwQnlLZXkgYXMgQSwgX2xvb2t1cEJ5S2V5IGFzIEIsIF9pc1BvaW50SW5BcmVhIGFzIEMsIGdldEFuZ2xlRnJvbVBvaW50IGFzIEQsIHRvUGFkZGluZyBhcyBFLCBlYWNoIGFzIEYsIGdldE1heGltdW1TaXplIGFzIEcsIEhBTEZfUEkgYXMgSCwgX2dldFBhcmVudE5vZGUgYXMgSSwgcmVhZFVzZWRTaXplIGFzIEosIHN1cHBvcnRzRXZlbnRMaXN0ZW5lck9wdGlvbnMgYXMgSywgdGhyb3R0bGVkIGFzIEwsIF9pc0RvbVN1cHBvcnRlZCBhcyBNLCBfZmFjdG9yaXplIGFzIE4sIGZpbml0ZU9yRGVmYXVsdCBhcyBPLCBQSSBhcyBQLCBjYWxsYmFjayBhcyBRLCBfYWRkR3JhY2UgYXMgUiwgX2xpbWl0VmFsdWUgYXMgUywgVEFVIGFzIFQsIHRvRGVncmVlcyBhcyBVLCBfbWVhc3VyZVRleHQgYXMgViwgX2ludDE2UmFuZ2UgYXMgVywgX2FsaWduUGl4ZWwgYXMgWCwgY2xpcEFyZWEgYXMgWSwgcmVuZGVyVGV4dCBhcyBaLCBfYXJyYXlVbmlxdWUgYXMgXywgcmVzb2x2ZSBhcyBhLCBmb250U3RyaW5nIGFzIGEkLCB0b0ZvbnQgYXMgYTAsIF90b0xlZnRSaWdodENlbnRlciBhcyBhMSwgX2FsaWduU3RhcnRFbmQgYXMgYTIsIG92ZXJyaWRlcyBhcyBhMywgbWVyZ2UgYXMgYTQsIF9jYXBpdGFsaXplIGFzIGE1LCBkZXNjcmlwdG9ycyBhcyBhNiwgaXNGdW5jdGlvbiBhcyBhNywgX2F0dGFjaENvbnRleHQgYXMgYTgsIF9jcmVhdGVSZXNvbHZlciBhcyBhOSwgb3ZlcnJpZGVUZXh0RGlyZWN0aW9uIGFzIGFBLCBfdGV4dFggYXMgYUIsIHJlc3RvcmVUZXh0RGlyZWN0aW9uIGFzIGFDLCBkcmF3UG9pbnRMZWdlbmQgYXMgYUQsIGRpc3RhbmNlQmV0d2VlblBvaW50cyBhcyBhRSwgbm9vcCBhcyBhRiwgX3NldE1pbkFuZE1heEJ5S2V5IGFzIGFHLCBuaWNlTnVtIGFzIGFILCBhbG1vc3RXaG9sZSBhcyBhSSwgYWxtb3N0RXF1YWxzIGFzIGFKLCBfZGVjaW1hbFBsYWNlcyBhcyBhSywgVGlja3MgYXMgYUwsIGxvZzEwIGFzIGFNLCBfbG9uZ2VzdFRleHQgYXMgYU4sIF9maWx0ZXJCZXR3ZWVuIGFzIGFPLCBfbG9va3VwIGFzIGFQLCBpc1BhdHRlcm5PckdyYWRpZW50IGFzIGFRLCBnZXRIb3ZlckNvbG9yIGFzIGFSLCBjbG9uZSBhcyBhUywgX21lcmdlciBhcyBhVCwgX21lcmdlcklmIGFzIGFVLCBfZGVwcmVjYXRlZCBhcyBhViwgX3NwbGl0S2V5IGFzIGFXLCB0b0ZvbnRTdHJpbmcgYXMgYVgsIHNwbGluZUN1cnZlIGFzIGFZLCBzcGxpbmVDdXJ2ZU1vbm90b25lIGFzIGFaLCBnZXRTdHlsZSBhcyBhXywgX2Rlc2NyaXB0b3JzIGFzIGFhLCBtZXJnZUlmIGFzIGFiLCB1aWQgYXMgYWMsIGRlYm91bmNlIGFzIGFkLCByZXRpbmFTY2FsZSBhcyBhZSwgY2xlYXJDYW52YXMgYXMgYWYsIHNldHNFcXVhbCBhcyBhZywgX2VsZW1lbnRzRXF1YWwgYXMgYWgsIF9pc0NsaWNrRXZlbnQgYXMgYWksIF9pc0JldHdlZW4gYXMgYWosIF9yZWFkVmFsdWVUb1Byb3BzIGFzIGFrLCBfdXBkYXRlQmV6aWVyQ29udHJvbFBvaW50cyBhcyBhbCwgX2NvbXB1dGVTZWdtZW50cyBhcyBhbSwgX2JvdW5kU2VnbWVudHMgYXMgYW4sIF9zdGVwcGVkSW50ZXJwb2xhdGlvbiBhcyBhbywgX2JlemllckludGVycG9sYXRpb24gYXMgYXAsIF9wb2ludEluTGluZSBhcyBhcSwgX3N0ZXBwZWRMaW5lVG8gYXMgYXIsIF9iZXppZXJDdXJ2ZVRvIGFzIGFzLCBkcmF3UG9pbnQgYXMgYXQsIGFkZFJvdW5kZWRSZWN0UGF0aCBhcyBhdSwgdG9UUkJMIGFzIGF2LCB0b1RSQkxDb3JuZXJzIGFzIGF3LCBfYm91bmRTZWdtZW50IGFzIGF4LCBfbm9ybWFsaXplQW5nbGUgYXMgYXksIGdldFJ0bEFkYXB0ZXIgYXMgYXosIGlzQXJyYXkgYXMgYiwgdG9MaW5lSGVpZ2h0IGFzIGIwLCBQSVRBVSBhcyBiMSwgSU5GSU5JVFkgYXMgYjIsIFJBRF9QRVJfREVHIGFzIGIzLCBRVUFSVEVSX1BJIGFzIGI0LCBUV09fVEhJUkRTX1BJIGFzIGI1LCBfYW5nbGVEaWZmIGFzIGI2LCBjb2xvciBhcyBjLCBkZWZhdWx0cyBhcyBkLCBlZmZlY3RzIGFzIGUsIHJlc29sdmVPYmplY3RLZXkgYXMgZiwgaXNOdW1iZXJGaW5pdGUgYXMgZywgZGVmaW5lZCBhcyBoLCBpc09iamVjdCBhcyBpLCBjcmVhdGVDb250ZXh0IGFzIGosIGlzTnVsbE9yVW5kZWYgYXMgaywgbGlzdGVuQXJyYXlFdmVudHMgYXMgbCwgdG9QZXJjZW50YWdlIGFzIG0sIHRvRGltZW5zaW9uIGFzIG4sIGZvcm1hdE51bWJlciBhcyBvLCBfYW5nbGVCZXR3ZWVuIGFzIHAsIF9nZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzIGFzIHEsIHJlcXVlc3RBbmltRnJhbWUgYXMgciwgc2lnbiBhcyBzLCB0b1JhZGlhbnMgYXMgdCwgdW5saXN0ZW5BcnJheUV2ZW50cyBhcyB1LCB2YWx1ZU9yRGVmYXVsdCBhcyB2LCBfc2NhbGVSYW5nZXNDaGFuZ2VkIGFzIHcsIGlzTnVtYmVyIGFzIHgsIF9wYXJzZU9iamVjdERhdGFSYWRpYWxTY2FsZSBhcyB5LCBnZXRSZWxhdGl2ZVBvc2l0aW9uIGFzIHogfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhlbHBlcnMuc2VnbWVudC5qcy5tYXBcbiIsIi8qIVxuICogQ2hhcnQuanMgdjQuMy4zXG4gKiBodHRwczovL3d3dy5jaGFydGpzLm9yZ1xuICogKGMpIDIwMjMgQ2hhcnQuanMgQ29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgciBhcyByZXF1ZXN0QW5pbUZyYW1lLCBhIGFzIHJlc29sdmUsIGUgYXMgZWZmZWN0cywgYyBhcyBjb2xvciwgaSBhcyBpc09iamVjdCwgZCBhcyBkZWZhdWx0cywgYiBhcyBpc0FycmF5LCB2IGFzIHZhbHVlT3JEZWZhdWx0LCB1IGFzIHVubGlzdGVuQXJyYXlFdmVudHMsIGwgYXMgbGlzdGVuQXJyYXlFdmVudHMsIGYgYXMgcmVzb2x2ZU9iamVjdEtleSwgZyBhcyBpc051bWJlckZpbml0ZSwgaCBhcyBkZWZpbmVkLCBzIGFzIHNpZ24sIGogYXMgY3JlYXRlQ29udGV4dCwgayBhcyBpc051bGxPclVuZGVmLCBfIGFzIF9hcnJheVVuaXF1ZSwgdCBhcyB0b1JhZGlhbnMsIG0gYXMgdG9QZXJjZW50YWdlLCBuIGFzIHRvRGltZW5zaW9uLCBUIGFzIFRBVSwgbyBhcyBmb3JtYXROdW1iZXIsIHAgYXMgX2FuZ2xlQmV0d2VlbiwgSCBhcyBIQUxGX1BJLCBQIGFzIFBJLCBxIGFzIF9nZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzLCB3IGFzIF9zY2FsZVJhbmdlc0NoYW5nZWQsIHggYXMgaXNOdW1iZXIsIHkgYXMgX3BhcnNlT2JqZWN0RGF0YVJhZGlhbFNjYWxlLCB6IGFzIGdldFJlbGF0aXZlUG9zaXRpb24sIEEgYXMgX3Jsb29rdXBCeUtleSwgQiBhcyBfbG9va3VwQnlLZXksIEMgYXMgX2lzUG9pbnRJbkFyZWEsIEQgYXMgZ2V0QW5nbGVGcm9tUG9pbnQsIEUgYXMgdG9QYWRkaW5nLCBGIGFzIGVhY2gsIEcgYXMgZ2V0TWF4aW11bVNpemUsIEkgYXMgX2dldFBhcmVudE5vZGUsIEogYXMgcmVhZFVzZWRTaXplLCBLIGFzIHN1cHBvcnRzRXZlbnRMaXN0ZW5lck9wdGlvbnMsIEwgYXMgdGhyb3R0bGVkLCBNIGFzIF9pc0RvbVN1cHBvcnRlZCwgTiBhcyBfZmFjdG9yaXplLCBPIGFzIGZpbml0ZU9yRGVmYXVsdCwgUSBhcyBjYWxsYmFjaywgUiBhcyBfYWRkR3JhY2UsIFMgYXMgX2xpbWl0VmFsdWUsIFUgYXMgdG9EZWdyZWVzLCBWIGFzIF9tZWFzdXJlVGV4dCwgVyBhcyBfaW50MTZSYW5nZSwgWCBhcyBfYWxpZ25QaXhlbCwgWSBhcyBjbGlwQXJlYSwgWiBhcyByZW5kZXJUZXh0LCAkIGFzIHVuY2xpcEFyZWEsIGEwIGFzIHRvRm9udCwgYTEgYXMgX3RvTGVmdFJpZ2h0Q2VudGVyLCBhMiBhcyBfYWxpZ25TdGFydEVuZCwgYTMgYXMgb3ZlcnJpZGVzLCBhNCBhcyBtZXJnZSwgYTUgYXMgX2NhcGl0YWxpemUsIGE2IGFzIGRlc2NyaXB0b3JzLCBhNyBhcyBpc0Z1bmN0aW9uLCBhOCBhcyBfYXR0YWNoQ29udGV4dCwgYTkgYXMgX2NyZWF0ZVJlc29sdmVyLCBhYSBhcyBfZGVzY3JpcHRvcnMsIGFiIGFzIG1lcmdlSWYsIGFjIGFzIHVpZCwgYWQgYXMgZGVib3VuY2UsIGFlIGFzIHJldGluYVNjYWxlLCBhZiBhcyBjbGVhckNhbnZhcywgYWcgYXMgc2V0c0VxdWFsLCBhaCBhcyBfZWxlbWVudHNFcXVhbCwgYWkgYXMgX2lzQ2xpY2tFdmVudCwgYWogYXMgX2lzQmV0d2VlbiwgYWsgYXMgX3JlYWRWYWx1ZVRvUHJvcHMsIGFsIGFzIF91cGRhdGVCZXppZXJDb250cm9sUG9pbnRzLCBhbSBhcyBfY29tcHV0ZVNlZ21lbnRzLCBhbiBhcyBfYm91bmRTZWdtZW50cywgYW8gYXMgX3N0ZXBwZWRJbnRlcnBvbGF0aW9uLCBhcCBhcyBfYmV6aWVySW50ZXJwb2xhdGlvbiwgYXEgYXMgX3BvaW50SW5MaW5lLCBhciBhcyBfc3RlcHBlZExpbmVUbywgYXMgYXMgX2JlemllckN1cnZlVG8sIGF0IGFzIGRyYXdQb2ludCwgYXUgYXMgYWRkUm91bmRlZFJlY3RQYXRoLCBhdiBhcyB0b1RSQkwsIGF3IGFzIHRvVFJCTENvcm5lcnMsIGF4IGFzIF9ib3VuZFNlZ21lbnQsIGF5IGFzIF9ub3JtYWxpemVBbmdsZSwgYXogYXMgZ2V0UnRsQWRhcHRlciwgYUEgYXMgb3ZlcnJpZGVUZXh0RGlyZWN0aW9uLCBhQiBhcyBfdGV4dFgsIGFDIGFzIHJlc3RvcmVUZXh0RGlyZWN0aW9uLCBhRCBhcyBkcmF3UG9pbnRMZWdlbmQsIGFFIGFzIGRpc3RhbmNlQmV0d2VlblBvaW50cywgYUYgYXMgbm9vcCwgYUcgYXMgX3NldE1pbkFuZE1heEJ5S2V5LCBhSCBhcyBuaWNlTnVtLCBhSSBhcyBhbG1vc3RXaG9sZSwgYUogYXMgYWxtb3N0RXF1YWxzLCBhSyBhcyBfZGVjaW1hbFBsYWNlcywgYUwgYXMgVGlja3MsIGFNIGFzIGxvZzEwLCBhTiBhcyBfbG9uZ2VzdFRleHQsIGFPIGFzIF9maWx0ZXJCZXR3ZWVuLCBhUCBhcyBfbG9va3VwIH0gZnJvbSAnLi9jaHVua3MvaGVscGVycy5zZWdtZW50LmpzJztcbmltcG9ydCAnQGt1cmtsZS9jb2xvcic7XG5cbmNsYXNzIEFuaW1hdG9yIHtcbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICB0aGlzLl9yZXF1ZXN0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fY2hhcnRzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLl9ydW5uaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2xhc3REYXRlID0gdW5kZWZpbmVkO1xuICAgIH1cbiBfbm90aWZ5KGNoYXJ0LCBhbmltcywgZGF0ZSwgdHlwZSkge1xuICAgICAgICBjb25zdCBjYWxsYmFja3MgPSBhbmltcy5saXN0ZW5lcnNbdHlwZV07XG4gICAgICAgIGNvbnN0IG51bVN0ZXBzID0gYW5pbXMuZHVyYXRpb247XG4gICAgICAgIGNhbGxiYWNrcy5mb3JFYWNoKChmbik9PmZuKHtcbiAgICAgICAgICAgICAgICBjaGFydCxcbiAgICAgICAgICAgICAgICBpbml0aWFsOiBhbmltcy5pbml0aWFsLFxuICAgICAgICAgICAgICAgIG51bVN0ZXBzLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRTdGVwOiBNYXRoLm1pbihkYXRlIC0gYW5pbXMuc3RhcnQsIG51bVN0ZXBzKVxuICAgICAgICAgICAgfSkpO1xuICAgIH1cbiBfcmVmcmVzaCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3JlcXVlc3QpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9ydW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcmVxdWVzdCA9IHJlcXVlc3RBbmltRnJhbWUuY2FsbCh3aW5kb3csICgpPT57XG4gICAgICAgICAgICB0aGlzLl91cGRhdGUoKTtcbiAgICAgICAgICAgIHRoaXMuX3JlcXVlc3QgPSBudWxsO1xuICAgICAgICAgICAgaWYgKHRoaXMuX3J1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWZyZXNoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiBfdXBkYXRlKGRhdGUgPSBEYXRlLm5vdygpKSB7XG4gICAgICAgIGxldCByZW1haW5pbmcgPSAwO1xuICAgICAgICB0aGlzLl9jaGFydHMuZm9yRWFjaCgoYW5pbXMsIGNoYXJ0KT0+e1xuICAgICAgICAgICAgaWYgKCFhbmltcy5ydW5uaW5nIHx8ICFhbmltcy5pdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBpdGVtcyA9IGFuaW1zLml0ZW1zO1xuICAgICAgICAgICAgbGV0IGkgPSBpdGVtcy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgbGV0IGRyYXcgPSBmYWxzZTtcbiAgICAgICAgICAgIGxldCBpdGVtO1xuICAgICAgICAgICAgZm9yKDsgaSA+PSAwOyAtLWkpe1xuICAgICAgICAgICAgICAgIGl0ZW0gPSBpdGVtc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5fYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLl90b3RhbCA+IGFuaW1zLmR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltcy5kdXJhdGlvbiA9IGl0ZW0uX3RvdGFsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0udGljayhkYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgZHJhdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbXNbaV0gPSBpdGVtc1tpdGVtcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMucG9wKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRyYXcpIHtcbiAgICAgICAgICAgICAgICBjaGFydC5kcmF3KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbm90aWZ5KGNoYXJ0LCBhbmltcywgZGF0ZSwgJ3Byb2dyZXNzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWl0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGFuaW1zLnJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9ub3RpZnkoY2hhcnQsIGFuaW1zLCBkYXRlLCAnY29tcGxldGUnKTtcbiAgICAgICAgICAgICAgICBhbmltcy5pbml0aWFsID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZW1haW5pbmcgKz0gaXRlbXMubGVuZ3RoO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fbGFzdERhdGUgPSBkYXRlO1xuICAgICAgICBpZiAocmVtYWluaW5nID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl9ydW5uaW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gX2dldEFuaW1zKGNoYXJ0KSB7XG4gICAgICAgIGNvbnN0IGNoYXJ0cyA9IHRoaXMuX2NoYXJ0cztcbiAgICAgICAgbGV0IGFuaW1zID0gY2hhcnRzLmdldChjaGFydCk7XG4gICAgICAgIGlmICghYW5pbXMpIHtcbiAgICAgICAgICAgIGFuaW1zID0ge1xuICAgICAgICAgICAgICAgIHJ1bm5pbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGluaXRpYWw6IHRydWUsXG4gICAgICAgICAgICAgICAgaXRlbXM6IFtdLFxuICAgICAgICAgICAgICAgIGxpc3RlbmVyczoge1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogW10sXG4gICAgICAgICAgICAgICAgICAgIHByb2dyZXNzOiBbXVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjaGFydHMuc2V0KGNoYXJ0LCBhbmltcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFuaW1zO1xuICAgIH1cbiBsaXN0ZW4oY2hhcnQsIGV2ZW50LCBjYikge1xuICAgICAgICB0aGlzLl9nZXRBbmltcyhjaGFydCkubGlzdGVuZXJzW2V2ZW50XS5wdXNoKGNiKTtcbiAgICB9XG4gYWRkKGNoYXJ0LCBpdGVtcykge1xuICAgICAgICBpZiAoIWl0ZW1zIHx8ICFpdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9nZXRBbmltcyhjaGFydCkuaXRlbXMucHVzaCguLi5pdGVtcyk7XG4gICAgfVxuIGhhcyhjaGFydCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0QW5pbXMoY2hhcnQpLml0ZW1zLmxlbmd0aCA+IDA7XG4gICAgfVxuIHN0YXJ0KGNoYXJ0KSB7XG4gICAgICAgIGNvbnN0IGFuaW1zID0gdGhpcy5fY2hhcnRzLmdldChjaGFydCk7XG4gICAgICAgIGlmICghYW5pbXMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBhbmltcy5ydW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgYW5pbXMuc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgICAgICBhbmltcy5kdXJhdGlvbiA9IGFuaW1zLml0ZW1zLnJlZHVjZSgoYWNjLCBjdXIpPT5NYXRoLm1heChhY2MsIGN1ci5fZHVyYXRpb24pLCAwKTtcbiAgICAgICAgdGhpcy5fcmVmcmVzaCgpO1xuICAgIH1cbiAgICBydW5uaW5nKGNoYXJ0KSB7XG4gICAgICAgIGlmICghdGhpcy5fcnVubmluZykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFuaW1zID0gdGhpcy5fY2hhcnRzLmdldChjaGFydCk7XG4gICAgICAgIGlmICghYW5pbXMgfHwgIWFuaW1zLnJ1bm5pbmcgfHwgIWFuaW1zLml0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiBzdG9wKGNoYXJ0KSB7XG4gICAgICAgIGNvbnN0IGFuaW1zID0gdGhpcy5fY2hhcnRzLmdldChjaGFydCk7XG4gICAgICAgIGlmICghYW5pbXMgfHwgIWFuaW1zLml0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gYW5pbXMuaXRlbXM7XG4gICAgICAgIGxldCBpID0gaXRlbXMubGVuZ3RoIC0gMTtcbiAgICAgICAgZm9yKDsgaSA+PSAwOyAtLWkpe1xuICAgICAgICAgICAgaXRlbXNbaV0uY2FuY2VsKCk7XG4gICAgICAgIH1cbiAgICAgICAgYW5pbXMuaXRlbXMgPSBbXTtcbiAgICAgICAgdGhpcy5fbm90aWZ5KGNoYXJ0LCBhbmltcywgRGF0ZS5ub3coKSwgJ2NvbXBsZXRlJyk7XG4gICAgfVxuIHJlbW92ZShjaGFydCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2hhcnRzLmRlbGV0ZShjaGFydCk7XG4gICAgfVxufVxudmFyIGFuaW1hdG9yID0gLyogI19fUFVSRV9fICovIG5ldyBBbmltYXRvcigpO1xuXG5jb25zdCB0cmFuc3BhcmVudCA9ICd0cmFuc3BhcmVudCc7XG5jb25zdCBpbnRlcnBvbGF0b3JzID0ge1xuICAgIGJvb2xlYW4gKGZyb20sIHRvLCBmYWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGZhY3RvciA+IDAuNSA/IHRvIDogZnJvbTtcbiAgICB9LFxuIGNvbG9yIChmcm9tLCB0bywgZmFjdG9yKSB7XG4gICAgICAgIGNvbnN0IGMwID0gY29sb3IoZnJvbSB8fCB0cmFuc3BhcmVudCk7XG4gICAgICAgIGNvbnN0IGMxID0gYzAudmFsaWQgJiYgY29sb3IodG8gfHwgdHJhbnNwYXJlbnQpO1xuICAgICAgICByZXR1cm4gYzEgJiYgYzEudmFsaWQgPyBjMS5taXgoYzAsIGZhY3RvcikuaGV4U3RyaW5nKCkgOiB0bztcbiAgICB9LFxuICAgIG51bWJlciAoZnJvbSwgdG8sIGZhY3Rvcikge1xuICAgICAgICByZXR1cm4gZnJvbSArICh0byAtIGZyb20pICogZmFjdG9yO1xuICAgIH1cbn07XG5jbGFzcyBBbmltYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNmZywgdGFyZ2V0LCBwcm9wLCB0byl7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IHRhcmdldFtwcm9wXTtcbiAgICAgICAgdG8gPSByZXNvbHZlKFtcbiAgICAgICAgICAgIGNmZy50byxcbiAgICAgICAgICAgIHRvLFxuICAgICAgICAgICAgY3VycmVudFZhbHVlLFxuICAgICAgICAgICAgY2ZnLmZyb21cbiAgICAgICAgXSk7XG4gICAgICAgIGNvbnN0IGZyb20gPSByZXNvbHZlKFtcbiAgICAgICAgICAgIGNmZy5mcm9tLFxuICAgICAgICAgICAgY3VycmVudFZhbHVlLFxuICAgICAgICAgICAgdG9cbiAgICAgICAgXSk7XG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuX2ZuID0gY2ZnLmZuIHx8IGludGVycG9sYXRvcnNbY2ZnLnR5cGUgfHwgdHlwZW9mIGZyb21dO1xuICAgICAgICB0aGlzLl9lYXNpbmcgPSBlZmZlY3RzW2NmZy5lYXNpbmddIHx8IGVmZmVjdHMubGluZWFyO1xuICAgICAgICB0aGlzLl9zdGFydCA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSArIChjZmcuZGVsYXkgfHwgMCkpO1xuICAgICAgICB0aGlzLl9kdXJhdGlvbiA9IHRoaXMuX3RvdGFsID0gTWF0aC5mbG9vcihjZmcuZHVyYXRpb24pO1xuICAgICAgICB0aGlzLl9sb29wID0gISFjZmcubG9vcDtcbiAgICAgICAgdGhpcy5fdGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICB0aGlzLl9wcm9wID0gcHJvcDtcbiAgICAgICAgdGhpcy5fZnJvbSA9IGZyb207XG4gICAgICAgIHRoaXMuX3RvID0gdG87XG4gICAgICAgIHRoaXMuX3Byb21pc2VzID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBhY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmU7XG4gICAgfVxuICAgIHVwZGF0ZShjZmcsIHRvLCBkYXRlKSB7XG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmUpIHtcbiAgICAgICAgICAgIHRoaXMuX25vdGlmeShmYWxzZSk7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50VmFsdWUgPSB0aGlzLl90YXJnZXRbdGhpcy5fcHJvcF07XG4gICAgICAgICAgICBjb25zdCBlbGFwc2VkID0gZGF0ZSAtIHRoaXMuX3N0YXJ0O1xuICAgICAgICAgICAgY29uc3QgcmVtYWluID0gdGhpcy5fZHVyYXRpb24gLSBlbGFwc2VkO1xuICAgICAgICAgICAgdGhpcy5fc3RhcnQgPSBkYXRlO1xuICAgICAgICAgICAgdGhpcy5fZHVyYXRpb24gPSBNYXRoLmZsb29yKE1hdGgubWF4KHJlbWFpbiwgY2ZnLmR1cmF0aW9uKSk7XG4gICAgICAgICAgICB0aGlzLl90b3RhbCArPSBlbGFwc2VkO1xuICAgICAgICAgICAgdGhpcy5fbG9vcCA9ICEhY2ZnLmxvb3A7XG4gICAgICAgICAgICB0aGlzLl90byA9IHJlc29sdmUoW1xuICAgICAgICAgICAgICAgIGNmZy50byxcbiAgICAgICAgICAgICAgICB0byxcbiAgICAgICAgICAgICAgICBjdXJyZW50VmFsdWUsXG4gICAgICAgICAgICAgICAgY2ZnLmZyb21cbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgdGhpcy5fZnJvbSA9IHJlc29sdmUoW1xuICAgICAgICAgICAgICAgIGNmZy5mcm9tLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSxcbiAgICAgICAgICAgICAgICB0b1xuICAgICAgICAgICAgXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2FuY2VsKCkge1xuICAgICAgICBpZiAodGhpcy5fYWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLnRpY2soRGF0ZS5ub3coKSk7XG4gICAgICAgICAgICB0aGlzLl9hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuX25vdGlmeShmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGljayhkYXRlKSB7XG4gICAgICAgIGNvbnN0IGVsYXBzZWQgPSBkYXRlIC0gdGhpcy5fc3RhcnQ7XG4gICAgICAgIGNvbnN0IGR1cmF0aW9uID0gdGhpcy5fZHVyYXRpb247XG4gICAgICAgIGNvbnN0IHByb3AgPSB0aGlzLl9wcm9wO1xuICAgICAgICBjb25zdCBmcm9tID0gdGhpcy5fZnJvbTtcbiAgICAgICAgY29uc3QgbG9vcCA9IHRoaXMuX2xvb3A7XG4gICAgICAgIGNvbnN0IHRvID0gdGhpcy5fdG87XG4gICAgICAgIGxldCBmYWN0b3I7XG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IGZyb20gIT09IHRvICYmIChsb29wIHx8IGVsYXBzZWQgPCBkdXJhdGlvbik7XG4gICAgICAgIGlmICghdGhpcy5fYWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLl90YXJnZXRbcHJvcF0gPSB0bztcbiAgICAgICAgICAgIHRoaXMuX25vdGlmeSh0cnVlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxhcHNlZCA8IDApIHtcbiAgICAgICAgICAgIHRoaXMuX3RhcmdldFtwcm9wXSA9IGZyb207XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZmFjdG9yID0gZWxhcHNlZCAvIGR1cmF0aW9uICUgMjtcbiAgICAgICAgZmFjdG9yID0gbG9vcCAmJiBmYWN0b3IgPiAxID8gMiAtIGZhY3RvciA6IGZhY3RvcjtcbiAgICAgICAgZmFjdG9yID0gdGhpcy5fZWFzaW5nKE1hdGgubWluKDEsIE1hdGgubWF4KDAsIGZhY3RvcikpKTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0W3Byb3BdID0gdGhpcy5fZm4oZnJvbSwgdG8sIGZhY3Rvcik7XG4gICAgfVxuICAgIHdhaXQoKSB7XG4gICAgICAgIGNvbnN0IHByb21pc2VzID0gdGhpcy5fcHJvbWlzZXMgfHwgKHRoaXMuX3Byb21pc2VzID0gW10pO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlcywgcmVqKT0+e1xuICAgICAgICAgICAgcHJvbWlzZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgcmVzLFxuICAgICAgICAgICAgICAgIHJlalxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfbm90aWZ5KHJlc29sdmVkKSB7XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IHJlc29sdmVkID8gJ3JlcycgOiAncmVqJztcbiAgICAgICAgY29uc3QgcHJvbWlzZXMgPSB0aGlzLl9wcm9taXNlcyB8fCBbXTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHByb21pc2VzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIHByb21pc2VzW2ldW21ldGhvZF0oKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuY2xhc3MgQW5pbWF0aW9ucyB7XG4gICAgY29uc3RydWN0b3IoY2hhcnQsIGNvbmZpZyl7XG4gICAgICAgIHRoaXMuX2NoYXJ0ID0gY2hhcnQ7XG4gICAgICAgIHRoaXMuX3Byb3BlcnRpZXMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuY29uZmlndXJlKGNvbmZpZyk7XG4gICAgfVxuICAgIGNvbmZpZ3VyZShjb25maWcpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChjb25maWcpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYW5pbWF0aW9uT3B0aW9ucyA9IE9iamVjdC5rZXlzKGRlZmF1bHRzLmFuaW1hdGlvbik7XG4gICAgICAgIGNvbnN0IGFuaW1hdGVkUHJvcHMgPSB0aGlzLl9wcm9wZXJ0aWVzO1xuICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhjb25maWcpLmZvckVhY2goKGtleSk9PntcbiAgICAgICAgICAgIGNvbnN0IGNmZyA9IGNvbmZpZ1trZXldO1xuICAgICAgICAgICAgaWYgKCFpc09iamVjdChjZmcpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcmVzb2x2ZWQgPSB7fTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgb3B0aW9uIG9mIGFuaW1hdGlvbk9wdGlvbnMpe1xuICAgICAgICAgICAgICAgIHJlc29sdmVkW29wdGlvbl0gPSBjZmdbb3B0aW9uXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIChpc0FycmF5KGNmZy5wcm9wZXJ0aWVzKSAmJiBjZmcucHJvcGVydGllcyB8fCBbXG4gICAgICAgICAgICAgICAga2V5XG4gICAgICAgICAgICBdKS5mb3JFYWNoKChwcm9wKT0+e1xuICAgICAgICAgICAgICAgIGlmIChwcm9wID09PSBrZXkgfHwgIWFuaW1hdGVkUHJvcHMuaGFzKHByb3ApKSB7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGVkUHJvcHMuc2V0KHByb3AsIHJlc29sdmVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuIF9hbmltYXRlT3B0aW9ucyh0YXJnZXQsIHZhbHVlcykge1xuICAgICAgICBjb25zdCBuZXdPcHRpb25zID0gdmFsdWVzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSByZXNvbHZlVGFyZ2V0T3B0aW9ucyh0YXJnZXQsIG5ld09wdGlvbnMpO1xuICAgICAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhbmltYXRpb25zID0gdGhpcy5fY3JlYXRlQW5pbWF0aW9ucyhvcHRpb25zLCBuZXdPcHRpb25zKTtcbiAgICAgICAgaWYgKG5ld09wdGlvbnMuJHNoYXJlZCkge1xuICAgICAgICAgICAgYXdhaXRBbGwodGFyZ2V0Lm9wdGlvbnMuJGFuaW1hdGlvbnMsIG5ld09wdGlvbnMpLnRoZW4oKCk9PntcbiAgICAgICAgICAgICAgICB0YXJnZXQub3B0aW9ucyA9IG5ld09wdGlvbnM7XG4gICAgICAgICAgICB9LCAoKT0+e1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbnM7XG4gICAgfVxuIF9jcmVhdGVBbmltYXRpb25zKHRhcmdldCwgdmFsdWVzKSB7XG4gICAgICAgIGNvbnN0IGFuaW1hdGVkUHJvcHMgPSB0aGlzLl9wcm9wZXJ0aWVzO1xuICAgICAgICBjb25zdCBhbmltYXRpb25zID0gW107XG4gICAgICAgIGNvbnN0IHJ1bm5pbmcgPSB0YXJnZXQuJGFuaW1hdGlvbnMgfHwgKHRhcmdldC4kYW5pbWF0aW9ucyA9IHt9KTtcbiAgICAgICAgY29uc3QgcHJvcHMgPSBPYmplY3Qua2V5cyh2YWx1ZXMpO1xuICAgICAgICBjb25zdCBkYXRlID0gRGF0ZS5ub3coKTtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGZvcihpID0gcHJvcHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpe1xuICAgICAgICAgICAgY29uc3QgcHJvcCA9IHByb3BzW2ldO1xuICAgICAgICAgICAgaWYgKHByb3AuY2hhckF0KDApID09PSAnJCcpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcm9wID09PSAnb3B0aW9ucycpIHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb25zLnB1c2goLi4udGhpcy5fYW5pbWF0ZU9wdGlvbnModGFyZ2V0LCB2YWx1ZXMpKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdmFsdWVzW3Byb3BdO1xuICAgICAgICAgICAgbGV0IGFuaW1hdGlvbiA9IHJ1bm5pbmdbcHJvcF07XG4gICAgICAgICAgICBjb25zdCBjZmcgPSBhbmltYXRlZFByb3BzLmdldChwcm9wKTtcbiAgICAgICAgICAgIGlmIChhbmltYXRpb24pIHtcbiAgICAgICAgICAgICAgICBpZiAoY2ZnICYmIGFuaW1hdGlvbi5hY3RpdmUoKSkge1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24udXBkYXRlKGNmZywgdmFsdWUsIGRhdGUpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24uY2FuY2VsKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFjZmcgfHwgIWNmZy5kdXJhdGlvbikge1xuICAgICAgICAgICAgICAgIHRhcmdldFtwcm9wXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcnVubmluZ1twcm9wXSA9IGFuaW1hdGlvbiA9IG5ldyBBbmltYXRpb24oY2ZnLCB0YXJnZXQsIHByb3AsIHZhbHVlKTtcbiAgICAgICAgICAgIGFuaW1hdGlvbnMucHVzaChhbmltYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbmltYXRpb25zO1xuICAgIH1cbiB1cGRhdGUodGFyZ2V0LCB2YWx1ZXMpIHtcbiAgICAgICAgaWYgKHRoaXMuX3Byb3BlcnRpZXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHZhbHVlcyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYW5pbWF0aW9ucyA9IHRoaXMuX2NyZWF0ZUFuaW1hdGlvbnModGFyZ2V0LCB2YWx1ZXMpO1xuICAgICAgICBpZiAoYW5pbWF0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGFuaW1hdG9yLmFkZCh0aGlzLl9jaGFydCwgYW5pbWF0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGF3YWl0QWxsKGFuaW1hdGlvbnMsIHByb3BlcnRpZXMpIHtcbiAgICBjb25zdCBydW5uaW5nID0gW107XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHByb3BlcnRpZXMpO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgY29uc3QgYW5pbSA9IGFuaW1hdGlvbnNba2V5c1tpXV07XG4gICAgICAgIGlmIChhbmltICYmIGFuaW0uYWN0aXZlKCkpIHtcbiAgICAgICAgICAgIHJ1bm5pbmcucHVzaChhbmltLndhaXQoKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHJ1bm5pbmcpO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVRhcmdldE9wdGlvbnModGFyZ2V0LCBuZXdPcHRpb25zKSB7XG4gICAgaWYgKCFuZXdPcHRpb25zKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IG9wdGlvbnMgPSB0YXJnZXQub3B0aW9ucztcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgdGFyZ2V0Lm9wdGlvbnMgPSBuZXdPcHRpb25zO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChvcHRpb25zLiRzaGFyZWQpIHtcbiAgICAgICAgdGFyZ2V0Lm9wdGlvbnMgPSBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucywge1xuICAgICAgICAgICAgJHNoYXJlZDogZmFsc2UsXG4gICAgICAgICAgICAkYW5pbWF0aW9uczoge31cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zO1xufVxuXG5mdW5jdGlvbiBzY2FsZUNsaXAoc2NhbGUsIGFsbG93ZWRPdmVyZmxvdykge1xuICAgIGNvbnN0IG9wdHMgPSBzY2FsZSAmJiBzY2FsZS5vcHRpb25zIHx8IHt9O1xuICAgIGNvbnN0IHJldmVyc2UgPSBvcHRzLnJldmVyc2U7XG4gICAgY29uc3QgbWluID0gb3B0cy5taW4gPT09IHVuZGVmaW5lZCA/IGFsbG93ZWRPdmVyZmxvdyA6IDA7XG4gICAgY29uc3QgbWF4ID0gb3B0cy5tYXggPT09IHVuZGVmaW5lZCA/IGFsbG93ZWRPdmVyZmxvdyA6IDA7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQ6IHJldmVyc2UgPyBtYXggOiBtaW4sXG4gICAgICAgIGVuZDogcmV2ZXJzZSA/IG1pbiA6IG1heFxuICAgIH07XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xpcCh4U2NhbGUsIHlTY2FsZSwgYWxsb3dlZE92ZXJmbG93KSB7XG4gICAgaWYgKGFsbG93ZWRPdmVyZmxvdyA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCB4ID0gc2NhbGVDbGlwKHhTY2FsZSwgYWxsb3dlZE92ZXJmbG93KTtcbiAgICBjb25zdCB5ID0gc2NhbGVDbGlwKHlTY2FsZSwgYWxsb3dlZE92ZXJmbG93KTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IHkuZW5kLFxuICAgICAgICByaWdodDogeC5lbmQsXG4gICAgICAgIGJvdHRvbTogeS5zdGFydCxcbiAgICAgICAgbGVmdDogeC5zdGFydFxuICAgIH07XG59XG5mdW5jdGlvbiB0b0NsaXAodmFsdWUpIHtcbiAgICBsZXQgdCwgciwgYiwgbDtcbiAgICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHQgPSB2YWx1ZS50b3A7XG4gICAgICAgIHIgPSB2YWx1ZS5yaWdodDtcbiAgICAgICAgYiA9IHZhbHVlLmJvdHRvbTtcbiAgICAgICAgbCA9IHZhbHVlLmxlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdCA9IHIgPSBiID0gbCA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IHQsXG4gICAgICAgIHJpZ2h0OiByLFxuICAgICAgICBib3R0b206IGIsXG4gICAgICAgIGxlZnQ6IGwsXG4gICAgICAgIGRpc2FibGVkOiB2YWx1ZSA9PT0gZmFsc2VcbiAgICB9O1xufVxuZnVuY3Rpb24gZ2V0U29ydGVkRGF0YXNldEluZGljZXMoY2hhcnQsIGZpbHRlclZpc2libGUpIHtcbiAgICBjb25zdCBrZXlzID0gW107XG4gICAgY29uc3QgbWV0YXNldHMgPSBjaGFydC5fZ2V0U29ydGVkRGF0YXNldE1ldGFzKGZpbHRlclZpc2libGUpO1xuICAgIGxldCBpLCBpbGVuO1xuICAgIGZvcihpID0gMCwgaWxlbiA9IG1ldGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIGtleXMucHVzaChtZXRhc2V0c1tpXS5pbmRleCk7XG4gICAgfVxuICAgIHJldHVybiBrZXlzO1xufVxuZnVuY3Rpb24gYXBwbHlTdGFjayhzdGFjaywgdmFsdWUsIGRzSW5kZXgsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IGtleXMgPSBzdGFjay5rZXlzO1xuICAgIGNvbnN0IHNpbmdsZU1vZGUgPSBvcHRpb25zLm1vZGUgPT09ICdzaW5nbGUnO1xuICAgIGxldCBpLCBpbGVuLCBkYXRhc2V0SW5kZXgsIG90aGVyVmFsdWU7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9yKGkgPSAwLCBpbGVuID0ga2V5cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBkYXRhc2V0SW5kZXggPSAra2V5c1tpXTtcbiAgICAgICAgaWYgKGRhdGFzZXRJbmRleCA9PT0gZHNJbmRleCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYWxsKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBvdGhlclZhbHVlID0gc3RhY2sudmFsdWVzW2RhdGFzZXRJbmRleF07XG4gICAgICAgIGlmIChpc051bWJlckZpbml0ZShvdGhlclZhbHVlKSAmJiAoc2luZ2xlTW9kZSB8fCB2YWx1ZSA9PT0gMCB8fCBzaWduKHZhbHVlKSA9PT0gc2lnbihvdGhlclZhbHVlKSkpIHtcbiAgICAgICAgICAgIHZhbHVlICs9IG90aGVyVmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gY29udmVydE9iamVjdERhdGFUb0FycmF5KGRhdGEpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gICAgY29uc3QgYWRhdGEgPSBuZXcgQXJyYXkoa2V5cy5sZW5ndGgpO1xuICAgIGxldCBpLCBpbGVuLCBrZXk7XG4gICAgZm9yKGkgPSAwLCBpbGVuID0ga2V5cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICBhZGF0YVtpXSA9IHtcbiAgICAgICAgICAgIHg6IGtleSxcbiAgICAgICAgICAgIHk6IGRhdGFba2V5XVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gYWRhdGE7XG59XG5mdW5jdGlvbiBpc1N0YWNrZWQoc2NhbGUsIG1ldGEpIHtcbiAgICBjb25zdCBzdGFja2VkID0gc2NhbGUgJiYgc2NhbGUub3B0aW9ucy5zdGFja2VkO1xuICAgIHJldHVybiBzdGFja2VkIHx8IHN0YWNrZWQgPT09IHVuZGVmaW5lZCAmJiBtZXRhLnN0YWNrICE9PSB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBnZXRTdGFja0tleShpbmRleFNjYWxlLCB2YWx1ZVNjYWxlLCBtZXRhKSB7XG4gICAgcmV0dXJuIGAke2luZGV4U2NhbGUuaWR9LiR7dmFsdWVTY2FsZS5pZH0uJHttZXRhLnN0YWNrIHx8IG1ldGEudHlwZX1gO1xufVxuZnVuY3Rpb24gZ2V0VXNlckJvdW5kcyhzY2FsZSkge1xuICAgIGNvbnN0IHsgbWluICwgbWF4ICwgbWluRGVmaW5lZCAsIG1heERlZmluZWQgIH0gPSBzY2FsZS5nZXRVc2VyQm91bmRzKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWluOiBtaW5EZWZpbmVkID8gbWluIDogTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZLFxuICAgICAgICBtYXg6IG1heERlZmluZWQgPyBtYXggOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFlcbiAgICB9O1xufVxuZnVuY3Rpb24gZ2V0T3JDcmVhdGVTdGFjayhzdGFja3MsIHN0YWNrS2V5LCBpbmRleFZhbHVlKSB7XG4gICAgY29uc3Qgc3ViU3RhY2sgPSBzdGFja3Nbc3RhY2tLZXldIHx8IChzdGFja3Nbc3RhY2tLZXldID0ge30pO1xuICAgIHJldHVybiBzdWJTdGFja1tpbmRleFZhbHVlXSB8fCAoc3ViU3RhY2tbaW5kZXhWYWx1ZV0gPSB7fSk7XG59XG5mdW5jdGlvbiBnZXRMYXN0SW5kZXhJblN0YWNrKHN0YWNrLCB2U2NhbGUsIHBvc2l0aXZlLCB0eXBlKSB7XG4gICAgZm9yIChjb25zdCBtZXRhIG9mIHZTY2FsZS5nZXRNYXRjaGluZ1Zpc2libGVNZXRhcyh0eXBlKS5yZXZlcnNlKCkpe1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHN0YWNrW21ldGEuaW5kZXhdO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgdmFsdWUgPiAwIHx8ICFwb3NpdGl2ZSAmJiB2YWx1ZSA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBtZXRhLmluZGV4O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gdXBkYXRlU3RhY2tzKGNvbnRyb2xsZXIsIHBhcnNlZCkge1xuICAgIGNvbnN0IHsgY2hhcnQgLCBfY2FjaGVkTWV0YTogbWV0YSAgfSA9IGNvbnRyb2xsZXI7XG4gICAgY29uc3Qgc3RhY2tzID0gY2hhcnQuX3N0YWNrcyB8fCAoY2hhcnQuX3N0YWNrcyA9IHt9KTtcbiAgICBjb25zdCB7IGlTY2FsZSAsIHZTY2FsZSAsIGluZGV4OiBkYXRhc2V0SW5kZXggIH0gPSBtZXRhO1xuICAgIGNvbnN0IGlBeGlzID0gaVNjYWxlLmF4aXM7XG4gICAgY29uc3QgdkF4aXMgPSB2U2NhbGUuYXhpcztcbiAgICBjb25zdCBrZXkgPSBnZXRTdGFja0tleShpU2NhbGUsIHZTY2FsZSwgbWV0YSk7XG4gICAgY29uc3QgaWxlbiA9IHBhcnNlZC5sZW5ndGg7XG4gICAgbGV0IHN0YWNrO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBjb25zdCBpdGVtID0gcGFyc2VkW2ldO1xuICAgICAgICBjb25zdCB7IFtpQXhpc106IGluZGV4ICwgW3ZBeGlzXTogdmFsdWUgIH0gPSBpdGVtO1xuICAgICAgICBjb25zdCBpdGVtU3RhY2tzID0gaXRlbS5fc3RhY2tzIHx8IChpdGVtLl9zdGFja3MgPSB7fSk7XG4gICAgICAgIHN0YWNrID0gaXRlbVN0YWNrc1t2QXhpc10gPSBnZXRPckNyZWF0ZVN0YWNrKHN0YWNrcywga2V5LCBpbmRleCk7XG4gICAgICAgIHN0YWNrW2RhdGFzZXRJbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgc3RhY2suX3RvcCA9IGdldExhc3RJbmRleEluU3RhY2soc3RhY2ssIHZTY2FsZSwgdHJ1ZSwgbWV0YS50eXBlKTtcbiAgICAgICAgc3RhY2suX2JvdHRvbSA9IGdldExhc3RJbmRleEluU3RhY2soc3RhY2ssIHZTY2FsZSwgZmFsc2UsIG1ldGEudHlwZSk7XG4gICAgICAgIGNvbnN0IHZpc3VhbFZhbHVlcyA9IHN0YWNrLl92aXN1YWxWYWx1ZXMgfHwgKHN0YWNrLl92aXN1YWxWYWx1ZXMgPSB7fSk7XG4gICAgICAgIHZpc3VhbFZhbHVlc1tkYXRhc2V0SW5kZXhdID0gdmFsdWU7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0Rmlyc3RTY2FsZUlkKGNoYXJ0LCBheGlzKSB7XG4gICAgY29uc3Qgc2NhbGVzID0gY2hhcnQuc2NhbGVzO1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhzY2FsZXMpLmZpbHRlcigoa2V5KT0+c2NhbGVzW2tleV0uYXhpcyA9PT0gYXhpcykuc2hpZnQoKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZURhdGFzZXRDb250ZXh0KHBhcmVudCwgaW5kZXgpIHtcbiAgICByZXR1cm4gY3JlYXRlQ29udGV4dChwYXJlbnQsIHtcbiAgICAgICAgYWN0aXZlOiBmYWxzZSxcbiAgICAgICAgZGF0YXNldDogdW5kZWZpbmVkLFxuICAgICAgICBkYXRhc2V0SW5kZXg6IGluZGV4LFxuICAgICAgICBpbmRleCxcbiAgICAgICAgbW9kZTogJ2RlZmF1bHQnLFxuICAgICAgICB0eXBlOiAnZGF0YXNldCdcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZURhdGFDb250ZXh0KHBhcmVudCwgaW5kZXgsIGVsZW1lbnQpIHtcbiAgICByZXR1cm4gY3JlYXRlQ29udGV4dChwYXJlbnQsIHtcbiAgICAgICAgYWN0aXZlOiBmYWxzZSxcbiAgICAgICAgZGF0YUluZGV4OiBpbmRleCxcbiAgICAgICAgcGFyc2VkOiB1bmRlZmluZWQsXG4gICAgICAgIHJhdzogdW5kZWZpbmVkLFxuICAgICAgICBlbGVtZW50LFxuICAgICAgICBpbmRleCxcbiAgICAgICAgbW9kZTogJ2RlZmF1bHQnLFxuICAgICAgICB0eXBlOiAnZGF0YSdcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGNsZWFyU3RhY2tzKG1ldGEsIGl0ZW1zKSB7XG4gICAgY29uc3QgZGF0YXNldEluZGV4ID0gbWV0YS5jb250cm9sbGVyLmluZGV4O1xuICAgIGNvbnN0IGF4aXMgPSBtZXRhLnZTY2FsZSAmJiBtZXRhLnZTY2FsZS5heGlzO1xuICAgIGlmICghYXhpcykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGl0ZW1zID0gaXRlbXMgfHwgbWV0YS5fcGFyc2VkO1xuICAgIGZvciAoY29uc3QgcGFyc2VkIG9mIGl0ZW1zKXtcbiAgICAgICAgY29uc3Qgc3RhY2tzID0gcGFyc2VkLl9zdGFja3M7XG4gICAgICAgIGlmICghc3RhY2tzIHx8IHN0YWNrc1theGlzXSA9PT0gdW5kZWZpbmVkIHx8IHN0YWNrc1theGlzXVtkYXRhc2V0SW5kZXhdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgc3RhY2tzW2F4aXNdW2RhdGFzZXRJbmRleF07XG4gICAgICAgIGlmIChzdGFja3NbYXhpc10uX3Zpc3VhbFZhbHVlcyAhPT0gdW5kZWZpbmVkICYmIHN0YWNrc1theGlzXS5fdmlzdWFsVmFsdWVzW2RhdGFzZXRJbmRleF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZGVsZXRlIHN0YWNrc1theGlzXS5fdmlzdWFsVmFsdWVzW2RhdGFzZXRJbmRleF07XG4gICAgICAgIH1cbiAgICB9XG59XG5jb25zdCBpc0RpcmVjdFVwZGF0ZU1vZGUgPSAobW9kZSk9Pm1vZGUgPT09ICdyZXNldCcgfHwgbW9kZSA9PT0gJ25vbmUnO1xuY29uc3QgY2xvbmVJZk5vdFNoYXJlZCA9IChjYWNoZWQsIHNoYXJlZCk9PnNoYXJlZCA/IGNhY2hlZCA6IE9iamVjdC5hc3NpZ24oe30sIGNhY2hlZCk7XG5jb25zdCBjcmVhdGVTdGFjayA9IChjYW5TdGFjaywgbWV0YSwgY2hhcnQpPT5jYW5TdGFjayAmJiAhbWV0YS5oaWRkZW4gJiYgbWV0YS5fc3RhY2tlZCAmJiB7XG4gICAgICAgIGtleXM6IGdldFNvcnRlZERhdGFzZXRJbmRpY2VzKGNoYXJ0LCB0cnVlKSxcbiAgICAgICAgdmFsdWVzOiBudWxsXG4gICAgfTtcbmNsYXNzIERhdGFzZXRDb250cm9sbGVyIHtcbiBzdGF0aWMgZGVmYXVsdHMgPSB7fTtcbiBzdGF0aWMgZGF0YXNldEVsZW1lbnRUeXBlID0gbnVsbDtcbiBzdGF0aWMgZGF0YUVsZW1lbnRUeXBlID0gbnVsbDtcbiBjb25zdHJ1Y3RvcihjaGFydCwgZGF0YXNldEluZGV4KXtcbiAgICAgICAgdGhpcy5jaGFydCA9IGNoYXJ0O1xuICAgICAgICB0aGlzLl9jdHggPSBjaGFydC5jdHg7XG4gICAgICAgIHRoaXMuaW5kZXggPSBkYXRhc2V0SW5kZXg7XG4gICAgICAgIHRoaXMuX2NhY2hlZERhdGFPcHRzID0ge307XG4gICAgICAgIHRoaXMuX2NhY2hlZE1ldGEgPSB0aGlzLmdldE1ldGEoKTtcbiAgICAgICAgdGhpcy5fdHlwZSA9IHRoaXMuX2NhY2hlZE1ldGEudHlwZTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5fcGFyc2luZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9kYXRhID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9vYmplY3REYXRhID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9zaGFyZWRPcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9kcmF3U3RhcnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2RyYXdDb3VudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5lbmFibGVPcHRpb25TaGFyaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc3VwcG9ydHNEZWNpbWF0aW9uID0gZmFsc2U7XG4gICAgICAgIHRoaXMuJGNvbnRleHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3N5bmNMaXN0ID0gW107XG4gICAgICAgIHRoaXMuZGF0YXNldEVsZW1lbnRUeXBlID0gbmV3LnRhcmdldC5kYXRhc2V0RWxlbWVudFR5cGU7XG4gICAgICAgIHRoaXMuZGF0YUVsZW1lbnRUeXBlID0gbmV3LnRhcmdldC5kYXRhRWxlbWVudFR5cGU7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xuICAgIH1cbiAgICBpbml0aWFsaXplKCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgdGhpcy5jb25maWd1cmUoKTtcbiAgICAgICAgdGhpcy5saW5rU2NhbGVzKCk7XG4gICAgICAgIG1ldGEuX3N0YWNrZWQgPSBpc1N0YWNrZWQobWV0YS52U2NhbGUsIG1ldGEpO1xuICAgICAgICB0aGlzLmFkZEVsZW1lbnRzKCk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZmlsbCAmJiAhdGhpcy5jaGFydC5pc1BsdWdpbkVuYWJsZWQoJ2ZpbGxlcicpKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJUcmllZCB0byB1c2UgdGhlICdmaWxsJyBvcHRpb24gd2l0aG91dCB0aGUgJ0ZpbGxlcicgcGx1Z2luIGVuYWJsZWQuIFBsZWFzZSBpbXBvcnQgYW5kIHJlZ2lzdGVyIHRoZSAnRmlsbGVyJyBwbHVnaW4gYW5kIG1ha2Ugc3VyZSBpdCBpcyBub3QgZGlzYWJsZWQgaW4gdGhlIG9wdGlvbnNcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlSW5kZXgoZGF0YXNldEluZGV4KSB7XG4gICAgICAgIGlmICh0aGlzLmluZGV4ICE9PSBkYXRhc2V0SW5kZXgpIHtcbiAgICAgICAgICAgIGNsZWFyU3RhY2tzKHRoaXMuX2NhY2hlZE1ldGEpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5kZXggPSBkYXRhc2V0SW5kZXg7XG4gICAgfVxuICAgIGxpbmtTY2FsZXMoKSB7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGRhdGFzZXQgPSB0aGlzLmdldERhdGFzZXQoKTtcbiAgICAgICAgY29uc3QgY2hvb3NlSWQgPSAoYXhpcywgeCwgeSwgcik9PmF4aXMgPT09ICd4JyA/IHggOiBheGlzID09PSAncicgPyByIDogeTtcbiAgICAgICAgY29uc3QgeGlkID0gbWV0YS54QXhpc0lEID0gdmFsdWVPckRlZmF1bHQoZGF0YXNldC54QXhpc0lELCBnZXRGaXJzdFNjYWxlSWQoY2hhcnQsICd4JykpO1xuICAgICAgICBjb25zdCB5aWQgPSBtZXRhLnlBeGlzSUQgPSB2YWx1ZU9yRGVmYXVsdChkYXRhc2V0LnlBeGlzSUQsIGdldEZpcnN0U2NhbGVJZChjaGFydCwgJ3knKSk7XG4gICAgICAgIGNvbnN0IHJpZCA9IG1ldGEuckF4aXNJRCA9IHZhbHVlT3JEZWZhdWx0KGRhdGFzZXQuckF4aXNJRCwgZ2V0Rmlyc3RTY2FsZUlkKGNoYXJ0LCAncicpKTtcbiAgICAgICAgY29uc3QgaW5kZXhBeGlzID0gbWV0YS5pbmRleEF4aXM7XG4gICAgICAgIGNvbnN0IGlpZCA9IG1ldGEuaUF4aXNJRCA9IGNob29zZUlkKGluZGV4QXhpcywgeGlkLCB5aWQsIHJpZCk7XG4gICAgICAgIGNvbnN0IHZpZCA9IG1ldGEudkF4aXNJRCA9IGNob29zZUlkKGluZGV4QXhpcywgeWlkLCB4aWQsIHJpZCk7XG4gICAgICAgIG1ldGEueFNjYWxlID0gdGhpcy5nZXRTY2FsZUZvcklkKHhpZCk7XG4gICAgICAgIG1ldGEueVNjYWxlID0gdGhpcy5nZXRTY2FsZUZvcklkKHlpZCk7XG4gICAgICAgIG1ldGEuclNjYWxlID0gdGhpcy5nZXRTY2FsZUZvcklkKHJpZCk7XG4gICAgICAgIG1ldGEuaVNjYWxlID0gdGhpcy5nZXRTY2FsZUZvcklkKGlpZCk7XG4gICAgICAgIG1ldGEudlNjYWxlID0gdGhpcy5nZXRTY2FsZUZvcklkKHZpZCk7XG4gICAgfVxuICAgIGdldERhdGFzZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHNbdGhpcy5pbmRleF07XG4gICAgfVxuICAgIGdldE1ldGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJ0LmdldERhdGFzZXRNZXRhKHRoaXMuaW5kZXgpO1xuICAgIH1cbiBnZXRTY2FsZUZvcklkKHNjYWxlSUQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcnQuc2NhbGVzW3NjYWxlSURdO1xuICAgIH1cbiBfZ2V0T3RoZXJTY2FsZShzY2FsZSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgcmV0dXJuIHNjYWxlID09PSBtZXRhLmlTY2FsZSA/IG1ldGEudlNjYWxlIDogbWV0YS5pU2NhbGU7XG4gICAgfVxuICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLl91cGRhdGUoJ3Jlc2V0Jyk7XG4gICAgfVxuIF9kZXN0cm95KCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgaWYgKHRoaXMuX2RhdGEpIHtcbiAgICAgICAgICAgIHVubGlzdGVuQXJyYXlFdmVudHModGhpcy5fZGF0YSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1ldGEuX3N0YWNrZWQpIHtcbiAgICAgICAgICAgIGNsZWFyU3RhY2tzKG1ldGEpO1xuICAgICAgICB9XG4gICAgfVxuIF9kYXRhQ2hlY2soKSB7XG4gICAgICAgIGNvbnN0IGRhdGFzZXQgPSB0aGlzLmdldERhdGFzZXQoKTtcbiAgICAgICAgY29uc3QgZGF0YSA9IGRhdGFzZXQuZGF0YSB8fCAoZGF0YXNldC5kYXRhID0gW10pO1xuICAgICAgICBjb25zdCBfZGF0YSA9IHRoaXMuX2RhdGE7XG4gICAgICAgIGlmIChpc09iamVjdChkYXRhKSkge1xuICAgICAgICAgICAgdGhpcy5fZGF0YSA9IGNvbnZlcnRPYmplY3REYXRhVG9BcnJheShkYXRhKTtcbiAgICAgICAgfSBlbHNlIGlmIChfZGF0YSAhPT0gZGF0YSkge1xuICAgICAgICAgICAgaWYgKF9kYXRhKSB7XG4gICAgICAgICAgICAgICAgdW5saXN0ZW5BcnJheUV2ZW50cyhfZGF0YSwgdGhpcyk7XG4gICAgICAgICAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgICAgICAgICAgY2xlYXJTdGFja3MobWV0YSk7XG4gICAgICAgICAgICAgICAgbWV0YS5fcGFyc2VkID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0YSAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuQXJyYXlFdmVudHMoZGF0YSwgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9zeW5jTGlzdCA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fZGF0YSA9IGRhdGE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWRkRWxlbWVudHMoKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICB0aGlzLl9kYXRhQ2hlY2soKTtcbiAgICAgICAgaWYgKHRoaXMuZGF0YXNldEVsZW1lbnRUeXBlKSB7XG4gICAgICAgICAgICBtZXRhLmRhdGFzZXQgPSBuZXcgdGhpcy5kYXRhc2V0RWxlbWVudFR5cGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBidWlsZE9yVXBkYXRlRWxlbWVudHMocmVzZXROZXdFbGVtZW50cykge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgZGF0YXNldCA9IHRoaXMuZ2V0RGF0YXNldCgpO1xuICAgICAgICBsZXQgc3RhY2tDaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2RhdGFDaGVjaygpO1xuICAgICAgICBjb25zdCBvbGRTdGFja2VkID0gbWV0YS5fc3RhY2tlZDtcbiAgICAgICAgbWV0YS5fc3RhY2tlZCA9IGlzU3RhY2tlZChtZXRhLnZTY2FsZSwgbWV0YSk7XG4gICAgICAgIGlmIChtZXRhLnN0YWNrICE9PSBkYXRhc2V0LnN0YWNrKSB7XG4gICAgICAgICAgICBzdGFja0NoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgY2xlYXJTdGFja3MobWV0YSk7XG4gICAgICAgICAgICBtZXRhLnN0YWNrID0gZGF0YXNldC5zdGFjaztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yZXN5bmNFbGVtZW50cyhyZXNldE5ld0VsZW1lbnRzKTtcbiAgICAgICAgaWYgKHN0YWNrQ2hhbmdlZCB8fCBvbGRTdGFja2VkICE9PSBtZXRhLl9zdGFja2VkKSB7XG4gICAgICAgICAgICB1cGRhdGVTdGFja3ModGhpcywgbWV0YS5fcGFyc2VkKTtcbiAgICAgICAgfVxuICAgIH1cbiBjb25maWd1cmUoKSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY2hhcnQuY29uZmlnO1xuICAgICAgICBjb25zdCBzY29wZUtleXMgPSBjb25maWcuZGF0YXNldFNjb3BlS2V5cyh0aGlzLl90eXBlKTtcbiAgICAgICAgY29uc3Qgc2NvcGVzID0gY29uZmlnLmdldE9wdGlvblNjb3Blcyh0aGlzLmdldERhdGFzZXQoKSwgc2NvcGVLZXlzLCB0cnVlKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gY29uZmlnLmNyZWF0ZVJlc29sdmVyKHNjb3BlcywgdGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICB0aGlzLl9wYXJzaW5nID0gdGhpcy5vcHRpb25zLnBhcnNpbmc7XG4gICAgICAgIHRoaXMuX2NhY2hlZERhdGFPcHRzID0ge307XG4gICAgfVxuIHBhcnNlKHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCB7IF9jYWNoZWRNZXRhOiBtZXRhICwgX2RhdGE6IGRhdGEgIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IGlTY2FsZSAsIF9zdGFja2VkICB9ID0gbWV0YTtcbiAgICAgICAgY29uc3QgaUF4aXMgPSBpU2NhbGUuYXhpcztcbiAgICAgICAgbGV0IHNvcnRlZCA9IHN0YXJ0ID09PSAwICYmIGNvdW50ID09PSBkYXRhLmxlbmd0aCA/IHRydWUgOiBtZXRhLl9zb3J0ZWQ7XG4gICAgICAgIGxldCBwcmV2ID0gc3RhcnQgPiAwICYmIG1ldGEuX3BhcnNlZFtzdGFydCAtIDFdO1xuICAgICAgICBsZXQgaSwgY3VyLCBwYXJzZWQ7XG4gICAgICAgIGlmICh0aGlzLl9wYXJzaW5nID09PSBmYWxzZSkge1xuICAgICAgICAgICAgbWV0YS5fcGFyc2VkID0gZGF0YTtcbiAgICAgICAgICAgIG1ldGEuX3NvcnRlZCA9IHRydWU7XG4gICAgICAgICAgICBwYXJzZWQgPSBkYXRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGlzQXJyYXkoZGF0YVtzdGFydF0pKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VkID0gdGhpcy5wYXJzZUFycmF5RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdChkYXRhW3N0YXJ0XSkpIHtcbiAgICAgICAgICAgICAgICBwYXJzZWQgPSB0aGlzLnBhcnNlT2JqZWN0RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXJzZWQgPSB0aGlzLnBhcnNlUHJpbWl0aXZlRGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaXNOb3RJbk9yZGVyQ29tcGFyZWRUb1ByZXYgPSAoKT0+Y3VyW2lBeGlzXSA9PT0gbnVsbCB8fCBwcmV2ICYmIGN1cltpQXhpc10gPCBwcmV2W2lBeGlzXTtcbiAgICAgICAgICAgIGZvcihpID0gMDsgaSA8IGNvdW50OyArK2kpe1xuICAgICAgICAgICAgICAgIG1ldGEuX3BhcnNlZFtpICsgc3RhcnRdID0gY3VyID0gcGFyc2VkW2ldO1xuICAgICAgICAgICAgICAgIGlmIChzb3J0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTm90SW5PcmRlckNvbXBhcmVkVG9QcmV2KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvcnRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHByZXYgPSBjdXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWV0YS5fc29ydGVkID0gc29ydGVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfc3RhY2tlZCkge1xuICAgICAgICAgICAgdXBkYXRlU3RhY2tzKHRoaXMsIHBhcnNlZCk7XG4gICAgICAgIH1cbiAgICB9XG4gcGFyc2VQcmltaXRpdmVEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCB7IGlTY2FsZSAsIHZTY2FsZSAgfSA9IG1ldGE7XG4gICAgICAgIGNvbnN0IGlBeGlzID0gaVNjYWxlLmF4aXM7XG4gICAgICAgIGNvbnN0IHZBeGlzID0gdlNjYWxlLmF4aXM7XG4gICAgICAgIGNvbnN0IGxhYmVscyA9IGlTY2FsZS5nZXRMYWJlbHMoKTtcbiAgICAgICAgY29uc3Qgc2luZ2xlU2NhbGUgPSBpU2NhbGUgPT09IHZTY2FsZTtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gbmV3IEFycmF5KGNvdW50KTtcbiAgICAgICAgbGV0IGksIGlsZW4sIGluZGV4O1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBjb3VudDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBpbmRleCA9IGkgKyBzdGFydDtcbiAgICAgICAgICAgIHBhcnNlZFtpXSA9IHtcbiAgICAgICAgICAgICAgICBbaUF4aXNdOiBzaW5nbGVTY2FsZSB8fCBpU2NhbGUucGFyc2UobGFiZWxzW2luZGV4XSwgaW5kZXgpLFxuICAgICAgICAgICAgICAgIFt2QXhpc106IHZTY2FsZS5wYXJzZShkYXRhW2luZGV4XSwgaW5kZXgpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgfVxuIHBhcnNlQXJyYXlEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCB7IHhTY2FsZSAsIHlTY2FsZSAgfSA9IG1ldGE7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IG5ldyBBcnJheShjb3VudCk7XG4gICAgICAgIGxldCBpLCBpbGVuLCBpbmRleCwgaXRlbTtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gY291bnQ7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgaW5kZXggPSBpICsgc3RhcnQ7XG4gICAgICAgICAgICBpdGVtID0gZGF0YVtpbmRleF07XG4gICAgICAgICAgICBwYXJzZWRbaV0gPSB7XG4gICAgICAgICAgICAgICAgeDogeFNjYWxlLnBhcnNlKGl0ZW1bMF0sIGluZGV4KSxcbiAgICAgICAgICAgICAgICB5OiB5U2NhbGUucGFyc2UoaXRlbVsxXSwgaW5kZXgpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgfVxuIHBhcnNlT2JqZWN0RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICAgICAgY29uc3QgeyB4U2NhbGUgLCB5U2NhbGUgIH0gPSBtZXRhO1xuICAgICAgICBjb25zdCB7IHhBeGlzS2V5ID0neCcgLCB5QXhpc0tleSA9J3knICB9ID0gdGhpcy5fcGFyc2luZztcbiAgICAgICAgY29uc3QgcGFyc2VkID0gbmV3IEFycmF5KGNvdW50KTtcbiAgICAgICAgbGV0IGksIGlsZW4sIGluZGV4LCBpdGVtO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBjb3VudDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBpbmRleCA9IGkgKyBzdGFydDtcbiAgICAgICAgICAgIGl0ZW0gPSBkYXRhW2luZGV4XTtcbiAgICAgICAgICAgIHBhcnNlZFtpXSA9IHtcbiAgICAgICAgICAgICAgICB4OiB4U2NhbGUucGFyc2UocmVzb2x2ZU9iamVjdEtleShpdGVtLCB4QXhpc0tleSksIGluZGV4KSxcbiAgICAgICAgICAgICAgICB5OiB5U2NhbGUucGFyc2UocmVzb2x2ZU9iamVjdEtleShpdGVtLCB5QXhpc0tleSksIGluZGV4KVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgIH1cbiBnZXRQYXJzZWQoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlZE1ldGEuX3BhcnNlZFtpbmRleF07XG4gICAgfVxuIGdldERhdGFFbGVtZW50KGluZGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jYWNoZWRNZXRhLmRhdGFbaW5kZXhdO1xuICAgIH1cbiBhcHBseVN0YWNrKHNjYWxlLCBwYXJzZWQsIG1vZGUpIHtcbiAgICAgICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBwYXJzZWRbc2NhbGUuYXhpc107XG4gICAgICAgIGNvbnN0IHN0YWNrID0ge1xuICAgICAgICAgICAga2V5czogZ2V0U29ydGVkRGF0YXNldEluZGljZXMoY2hhcnQsIHRydWUpLFxuICAgICAgICAgICAgdmFsdWVzOiBwYXJzZWQuX3N0YWNrc1tzY2FsZS5heGlzXS5fdmlzdWFsVmFsdWVzXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBhcHBseVN0YWNrKHN0YWNrLCB2YWx1ZSwgbWV0YS5pbmRleCwge1xuICAgICAgICAgICAgbW9kZVxuICAgICAgICB9KTtcbiAgICB9XG4gdXBkYXRlUmFuZ2VGcm9tUGFyc2VkKHJhbmdlLCBzY2FsZSwgcGFyc2VkLCBzdGFjaykge1xuICAgICAgICBjb25zdCBwYXJzZWRWYWx1ZSA9IHBhcnNlZFtzY2FsZS5heGlzXTtcbiAgICAgICAgbGV0IHZhbHVlID0gcGFyc2VkVmFsdWUgPT09IG51bGwgPyBOYU4gOiBwYXJzZWRWYWx1ZTtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gc3RhY2sgJiYgcGFyc2VkLl9zdGFja3Nbc2NhbGUuYXhpc107XG4gICAgICAgIGlmIChzdGFjayAmJiB2YWx1ZXMpIHtcbiAgICAgICAgICAgIHN0YWNrLnZhbHVlcyA9IHZhbHVlcztcbiAgICAgICAgICAgIHZhbHVlID0gYXBwbHlTdGFjayhzdGFjaywgcGFyc2VkVmFsdWUsIHRoaXMuX2NhY2hlZE1ldGEuaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIHJhbmdlLm1pbiA9IE1hdGgubWluKHJhbmdlLm1pbiwgdmFsdWUpO1xuICAgICAgICByYW5nZS5tYXggPSBNYXRoLm1heChyYW5nZS5tYXgsIHZhbHVlKTtcbiAgICB9XG4gZ2V0TWluTWF4KHNjYWxlLCBjYW5TdGFjaykge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgX3BhcnNlZCA9IG1ldGEuX3BhcnNlZDtcbiAgICAgICAgY29uc3Qgc29ydGVkID0gbWV0YS5fc29ydGVkICYmIHNjYWxlID09PSBtZXRhLmlTY2FsZTtcbiAgICAgICAgY29uc3QgaWxlbiA9IF9wYXJzZWQubGVuZ3RoO1xuICAgICAgICBjb25zdCBvdGhlclNjYWxlID0gdGhpcy5fZ2V0T3RoZXJTY2FsZShzY2FsZSk7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gY3JlYXRlU3RhY2soY2FuU3RhY2ssIG1ldGEsIHRoaXMuY2hhcnQpO1xuICAgICAgICBjb25zdCByYW5nZSA9IHtcbiAgICAgICAgICAgIG1pbjogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLFxuICAgICAgICAgICAgbWF4OiBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFlcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgeyBtaW46IG90aGVyTWluICwgbWF4OiBvdGhlck1heCAgfSA9IGdldFVzZXJCb3VuZHMob3RoZXJTY2FsZSk7XG4gICAgICAgIGxldCBpLCBwYXJzZWQ7XG4gICAgICAgIGZ1bmN0aW9uIF9za2lwKCkge1xuICAgICAgICAgICAgcGFyc2VkID0gX3BhcnNlZFtpXTtcbiAgICAgICAgICAgIGNvbnN0IG90aGVyVmFsdWUgPSBwYXJzZWRbb3RoZXJTY2FsZS5heGlzXTtcbiAgICAgICAgICAgIHJldHVybiAhaXNOdW1iZXJGaW5pdGUocGFyc2VkW3NjYWxlLmF4aXNdKSB8fCBvdGhlck1pbiA+IG90aGVyVmFsdWUgfHwgb3RoZXJNYXggPCBvdGhlclZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGZvcihpID0gMDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBpZiAoX3NraXAoKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy51cGRhdGVSYW5nZUZyb21QYXJzZWQocmFuZ2UsIHNjYWxlLCBwYXJzZWQsIHN0YWNrKTtcbiAgICAgICAgICAgIGlmIChzb3J0ZWQpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc29ydGVkKSB7XG4gICAgICAgICAgICBmb3IoaSA9IGlsZW4gLSAxOyBpID49IDA7IC0taSl7XG4gICAgICAgICAgICAgICAgaWYgKF9za2lwKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUmFuZ2VGcm9tUGFyc2VkKHJhbmdlLCBzY2FsZSwgcGFyc2VkLCBzdGFjayk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJhbmdlO1xuICAgIH1cbiAgICBnZXRBbGxQYXJzZWRWYWx1ZXMoc2NhbGUpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gdGhpcy5fY2FjaGVkTWV0YS5fcGFyc2VkO1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgICAgICAgbGV0IGksIGlsZW4sIHZhbHVlO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBwYXJzZWQubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIHZhbHVlID0gcGFyc2VkW2ldW3NjYWxlLmF4aXNdO1xuICAgICAgICAgICAgaWYgKGlzTnVtYmVyRmluaXRlKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH1cbiBnZXRNYXhPdmVyZmxvdygpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiBnZXRMYWJlbEFuZFZhbHVlKGluZGV4KSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBpU2NhbGUgPSBtZXRhLmlTY2FsZTtcbiAgICAgICAgY29uc3QgdlNjYWxlID0gbWV0YS52U2NhbGU7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGluZGV4KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhYmVsOiBpU2NhbGUgPyAnJyArIGlTY2FsZS5nZXRMYWJlbEZvclZhbHVlKHBhcnNlZFtpU2NhbGUuYXhpc10pIDogJycsXG4gICAgICAgICAgICB2YWx1ZTogdlNjYWxlID8gJycgKyB2U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWRbdlNjYWxlLmF4aXNdKSA6ICcnXG4gICAgICAgIH07XG4gICAgfVxuIF91cGRhdGUobW9kZSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgdGhpcy51cGRhdGUobW9kZSB8fCAnZGVmYXVsdCcpO1xuICAgICAgICBtZXRhLl9jbGlwID0gdG9DbGlwKHZhbHVlT3JEZWZhdWx0KHRoaXMub3B0aW9ucy5jbGlwLCBkZWZhdWx0Q2xpcChtZXRhLnhTY2FsZSwgbWV0YS55U2NhbGUsIHRoaXMuZ2V0TWF4T3ZlcmZsb3coKSkpKTtcbiAgICB9XG4gdXBkYXRlKG1vZGUpIHt9XG4gICAgZHJhdygpIHtcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fY3R4O1xuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBlbGVtZW50cyA9IG1ldGEuZGF0YSB8fCBbXTtcbiAgICAgICAgY29uc3QgYXJlYSA9IGNoYXJ0LmNoYXJ0QXJlYTtcbiAgICAgICAgY29uc3QgYWN0aXZlID0gW107XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5fZHJhd1N0YXJ0IHx8IDA7XG4gICAgICAgIGNvbnN0IGNvdW50ID0gdGhpcy5fZHJhd0NvdW50IHx8IGVsZW1lbnRzLmxlbmd0aCAtIHN0YXJ0O1xuICAgICAgICBjb25zdCBkcmF3QWN0aXZlRWxlbWVudHNPblRvcCA9IHRoaXMub3B0aW9ucy5kcmF3QWN0aXZlRWxlbWVudHNPblRvcDtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGlmIChtZXRhLmRhdGFzZXQpIHtcbiAgICAgICAgICAgIG1ldGEuZGF0YXNldC5kcmF3KGN0eCwgYXJlYSwgc3RhcnQsIGNvdW50KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IoaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBjb3VudDsgKytpKXtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBlbGVtZW50c1tpXTtcbiAgICAgICAgICAgIGlmIChlbGVtZW50LmhpZGRlbikge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVsZW1lbnQuYWN0aXZlICYmIGRyYXdBY3RpdmVFbGVtZW50c09uVG9wKSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlLnB1c2goZWxlbWVudCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuZHJhdyhjdHgsIGFyZWEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvcihpID0gMDsgaSA8IGFjdGl2ZS5sZW5ndGg7ICsraSl7XG4gICAgICAgICAgICBhY3RpdmVbaV0uZHJhdyhjdHgsIGFyZWEpO1xuICAgICAgICB9XG4gICAgfVxuIGdldFN0eWxlKGluZGV4LCBhY3RpdmUpIHtcbiAgICAgICAgY29uc3QgbW9kZSA9IGFjdGl2ZSA/ICdhY3RpdmUnIDogJ2RlZmF1bHQnO1xuICAgICAgICByZXR1cm4gaW5kZXggPT09IHVuZGVmaW5lZCAmJiB0aGlzLl9jYWNoZWRNZXRhLmRhdGFzZXQgPyB0aGlzLnJlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMobW9kZSkgOiB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaW5kZXggfHwgMCwgbW9kZSk7XG4gICAgfVxuIGdldENvbnRleHQoaW5kZXgsIGFjdGl2ZSwgbW9kZSkge1xuICAgICAgICBjb25zdCBkYXRhc2V0ID0gdGhpcy5nZXREYXRhc2V0KCk7XG4gICAgICAgIGxldCBjb250ZXh0O1xuICAgICAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8IHRoaXMuX2NhY2hlZE1ldGEuZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLl9jYWNoZWRNZXRhLmRhdGFbaW5kZXhdO1xuICAgICAgICAgICAgY29udGV4dCA9IGVsZW1lbnQuJGNvbnRleHQgfHwgKGVsZW1lbnQuJGNvbnRleHQgPSBjcmVhdGVEYXRhQ29udGV4dCh0aGlzLmdldENvbnRleHQoKSwgaW5kZXgsIGVsZW1lbnQpKTtcbiAgICAgICAgICAgIGNvbnRleHQucGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaW5kZXgpO1xuICAgICAgICAgICAgY29udGV4dC5yYXcgPSBkYXRhc2V0LmRhdGFbaW5kZXhdO1xuICAgICAgICAgICAgY29udGV4dC5pbmRleCA9IGNvbnRleHQuZGF0YUluZGV4ID0gaW5kZXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb250ZXh0ID0gdGhpcy4kY29udGV4dCB8fCAodGhpcy4kY29udGV4dCA9IGNyZWF0ZURhdGFzZXRDb250ZXh0KHRoaXMuY2hhcnQuZ2V0Q29udGV4dCgpLCB0aGlzLmluZGV4KSk7XG4gICAgICAgICAgICBjb250ZXh0LmRhdGFzZXQgPSBkYXRhc2V0O1xuICAgICAgICAgICAgY29udGV4dC5pbmRleCA9IGNvbnRleHQuZGF0YXNldEluZGV4ID0gdGhpcy5pbmRleDtcbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0LmFjdGl2ZSA9ICEhYWN0aXZlO1xuICAgICAgICBjb250ZXh0Lm1vZGUgPSBtb2RlO1xuICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICB9XG4gcmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9ucyhtb2RlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXNvbHZlRWxlbWVudE9wdGlvbnModGhpcy5kYXRhc2V0RWxlbWVudFR5cGUuaWQsIG1vZGUpO1xuICAgIH1cbiByZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGluZGV4LCBtb2RlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXNvbHZlRWxlbWVudE9wdGlvbnModGhpcy5kYXRhRWxlbWVudFR5cGUuaWQsIG1vZGUsIGluZGV4KTtcbiAgICB9XG4gX3Jlc29sdmVFbGVtZW50T3B0aW9ucyhlbGVtZW50VHlwZSwgbW9kZSA9ICdkZWZhdWx0JywgaW5kZXgpIHtcbiAgICAgICAgY29uc3QgYWN0aXZlID0gbW9kZSA9PT0gJ2FjdGl2ZSc7XG4gICAgICAgIGNvbnN0IGNhY2hlID0gdGhpcy5fY2FjaGVkRGF0YU9wdHM7XG4gICAgICAgIGNvbnN0IGNhY2hlS2V5ID0gZWxlbWVudFR5cGUgKyAnLScgKyBtb2RlO1xuICAgICAgICBjb25zdCBjYWNoZWQgPSBjYWNoZVtjYWNoZUtleV07XG4gICAgICAgIGNvbnN0IHNoYXJpbmcgPSB0aGlzLmVuYWJsZU9wdGlvblNoYXJpbmcgJiYgZGVmaW5lZChpbmRleCk7XG4gICAgICAgIGlmIChjYWNoZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBjbG9uZUlmTm90U2hhcmVkKGNhY2hlZCwgc2hhcmluZyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29uZmlnID0gdGhpcy5jaGFydC5jb25maWc7XG4gICAgICAgIGNvbnN0IHNjb3BlS2V5cyA9IGNvbmZpZy5kYXRhc2V0RWxlbWVudFNjb3BlS2V5cyh0aGlzLl90eXBlLCBlbGVtZW50VHlwZSk7XG4gICAgICAgIGNvbnN0IHByZWZpeGVzID0gYWN0aXZlID8gW1xuICAgICAgICAgICAgYCR7ZWxlbWVudFR5cGV9SG92ZXJgLFxuICAgICAgICAgICAgJ2hvdmVyJyxcbiAgICAgICAgICAgIGVsZW1lbnRUeXBlLFxuICAgICAgICAgICAgJydcbiAgICAgICAgXSA6IFtcbiAgICAgICAgICAgIGVsZW1lbnRUeXBlLFxuICAgICAgICAgICAgJydcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3Qgc2NvcGVzID0gY29uZmlnLmdldE9wdGlvblNjb3Blcyh0aGlzLmdldERhdGFzZXQoKSwgc2NvcGVLZXlzKTtcbiAgICAgICAgY29uc3QgbmFtZXMgPSBPYmplY3Qua2V5cyhkZWZhdWx0cy5lbGVtZW50c1tlbGVtZW50VHlwZV0pO1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gKCk9PnRoaXMuZ2V0Q29udGV4dChpbmRleCwgYWN0aXZlLCBtb2RlKTtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gY29uZmlnLnJlc29sdmVOYW1lZE9wdGlvbnMoc2NvcGVzLCBuYW1lcywgY29udGV4dCwgcHJlZml4ZXMpO1xuICAgICAgICBpZiAodmFsdWVzLiRzaGFyZWQpIHtcbiAgICAgICAgICAgIHZhbHVlcy4kc2hhcmVkID0gc2hhcmluZztcbiAgICAgICAgICAgIGNhY2hlW2NhY2hlS2V5XSA9IE9iamVjdC5mcmVlemUoY2xvbmVJZk5vdFNoYXJlZCh2YWx1ZXMsIHNoYXJpbmcpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH1cbiBfcmVzb2x2ZUFuaW1hdGlvbnMoaW5kZXgsIHRyYW5zaXRpb24sIGFjdGl2ZSkge1xuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGNvbnN0IGNhY2hlID0gdGhpcy5fY2FjaGVkRGF0YU9wdHM7XG4gICAgICAgIGNvbnN0IGNhY2hlS2V5ID0gYGFuaW1hdGlvbi0ke3RyYW5zaXRpb259YDtcbiAgICAgICAgY29uc3QgY2FjaGVkID0gY2FjaGVbY2FjaGVLZXldO1xuICAgICAgICBpZiAoY2FjaGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkO1xuICAgICAgICB9XG4gICAgICAgIGxldCBvcHRpb25zO1xuICAgICAgICBpZiAoY2hhcnQub3B0aW9ucy5hbmltYXRpb24gIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBjb25zdCBjb25maWcgPSB0aGlzLmNoYXJ0LmNvbmZpZztcbiAgICAgICAgICAgIGNvbnN0IHNjb3BlS2V5cyA9IGNvbmZpZy5kYXRhc2V0QW5pbWF0aW9uU2NvcGVLZXlzKHRoaXMuX3R5cGUsIHRyYW5zaXRpb24pO1xuICAgICAgICAgICAgY29uc3Qgc2NvcGVzID0gY29uZmlnLmdldE9wdGlvblNjb3Blcyh0aGlzLmdldERhdGFzZXQoKSwgc2NvcGVLZXlzKTtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBjb25maWcuY3JlYXRlUmVzb2x2ZXIoc2NvcGVzLCB0aGlzLmdldENvbnRleHQoaW5kZXgsIGFjdGl2ZSwgdHJhbnNpdGlvbikpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbnMgPSBuZXcgQW5pbWF0aW9ucyhjaGFydCwgb3B0aW9ucyAmJiBvcHRpb25zLmFuaW1hdGlvbnMpO1xuICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLl9jYWNoZWFibGUpIHtcbiAgICAgICAgICAgIGNhY2hlW2NhY2hlS2V5XSA9IE9iamVjdC5mcmVlemUoYW5pbWF0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbnM7XG4gICAgfVxuIGdldFNoYXJlZE9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICBpZiAoIW9wdGlvbnMuJHNoYXJlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9zaGFyZWRPcHRpb25zIHx8ICh0aGlzLl9zaGFyZWRPcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucykpO1xuICAgIH1cbiBpbmNsdWRlT3B0aW9ucyhtb2RlLCBzaGFyZWRPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiAhc2hhcmVkT3B0aW9ucyB8fCBpc0RpcmVjdFVwZGF0ZU1vZGUobW9kZSkgfHwgdGhpcy5jaGFydC5fYW5pbWF0aW9uc0Rpc2FibGVkO1xuICAgIH1cbiBfZ2V0U2hhcmVkT3B0aW9ucyhzdGFydCwgbW9kZSkge1xuICAgICAgICBjb25zdCBmaXJzdE9wdHMgPSB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoc3RhcnQsIG1vZGUpO1xuICAgICAgICBjb25zdCBwcmV2aW91c2x5U2hhcmVkT3B0aW9ucyA9IHRoaXMuX3NoYXJlZE9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHNoYXJlZE9wdGlvbnMgPSB0aGlzLmdldFNoYXJlZE9wdGlvbnMoZmlyc3RPcHRzKTtcbiAgICAgICAgY29uc3QgaW5jbHVkZU9wdGlvbnMgPSB0aGlzLmluY2x1ZGVPcHRpb25zKG1vZGUsIHNoYXJlZE9wdGlvbnMpIHx8IHNoYXJlZE9wdGlvbnMgIT09IHByZXZpb3VzbHlTaGFyZWRPcHRpb25zO1xuICAgICAgICB0aGlzLnVwZGF0ZVNoYXJlZE9wdGlvbnMoc2hhcmVkT3B0aW9ucywgbW9kZSwgZmlyc3RPcHRzKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNoYXJlZE9wdGlvbnMsXG4gICAgICAgICAgICBpbmNsdWRlT3B0aW9uc1xuICAgICAgICB9O1xuICAgIH1cbiB1cGRhdGVFbGVtZW50KGVsZW1lbnQsIGluZGV4LCBwcm9wZXJ0aWVzLCBtb2RlKSB7XG4gICAgICAgIGlmIChpc0RpcmVjdFVwZGF0ZU1vZGUobW9kZSkpIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oZWxlbWVudCwgcHJvcGVydGllcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9yZXNvbHZlQW5pbWF0aW9ucyhpbmRleCwgbW9kZSkudXBkYXRlKGVsZW1lbnQsIHByb3BlcnRpZXMpO1xuICAgICAgICB9XG4gICAgfVxuIHVwZGF0ZVNoYXJlZE9wdGlvbnMoc2hhcmVkT3B0aW9ucywgbW9kZSwgbmV3T3B0aW9ucykge1xuICAgICAgICBpZiAoc2hhcmVkT3B0aW9ucyAmJiAhaXNEaXJlY3RVcGRhdGVNb2RlKG1vZGUpKSB7XG4gICAgICAgICAgICB0aGlzLl9yZXNvbHZlQW5pbWF0aW9ucyh1bmRlZmluZWQsIG1vZGUpLnVwZGF0ZShzaGFyZWRPcHRpb25zLCBuZXdPcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cbiBfc2V0U3R5bGUoZWxlbWVudCwgaW5kZXgsIG1vZGUsIGFjdGl2ZSkge1xuICAgICAgICBlbGVtZW50LmFjdGl2ZSA9IGFjdGl2ZTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuZ2V0U3R5bGUoaW5kZXgsIGFjdGl2ZSk7XG4gICAgICAgIHRoaXMuX3Jlc29sdmVBbmltYXRpb25zKGluZGV4LCBtb2RlLCBhY3RpdmUpLnVwZGF0ZShlbGVtZW50LCB7XG4gICAgICAgICAgICBvcHRpb25zOiAhYWN0aXZlICYmIHRoaXMuZ2V0U2hhcmVkT3B0aW9ucyhvcHRpb25zKSB8fCBvcHRpb25zXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZW1vdmVIb3ZlclN0eWxlKGVsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXgpIHtcbiAgICAgICAgdGhpcy5fc2V0U3R5bGUoZWxlbWVudCwgaW5kZXgsICdhY3RpdmUnLCBmYWxzZSk7XG4gICAgfVxuICAgIHNldEhvdmVyU3R5bGUoZWxlbWVudCwgZGF0YXNldEluZGV4LCBpbmRleCkge1xuICAgICAgICB0aGlzLl9zZXRTdHlsZShlbGVtZW50LCBpbmRleCwgJ2FjdGl2ZScsIHRydWUpO1xuICAgIH1cbiBfcmVtb3ZlRGF0YXNldEhvdmVyU3R5bGUoKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLl9jYWNoZWRNZXRhLmRhdGFzZXQ7XG4gICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9zZXRTdHlsZShlbGVtZW50LCB1bmRlZmluZWQsICdhY3RpdmUnLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG4gX3NldERhdGFzZXRIb3ZlclN0eWxlKCkge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhc2V0O1xuICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5fc2V0U3R5bGUoZWxlbWVudCwgdW5kZWZpbmVkLCAnYWN0aXZlJywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gX3Jlc3luY0VsZW1lbnRzKHJlc2V0TmV3RWxlbWVudHMpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuX2RhdGE7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhO1xuICAgICAgICBmb3IgKGNvbnN0IFttZXRob2QsIGFyZzEsIGFyZzJdIG9mIHRoaXMuX3N5bmNMaXN0KXtcbiAgICAgICAgICAgIHRoaXNbbWV0aG9kXShhcmcxLCBhcmcyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zeW5jTGlzdCA9IFtdO1xuICAgICAgICBjb25zdCBudW1NZXRhID0gZWxlbWVudHMubGVuZ3RoO1xuICAgICAgICBjb25zdCBudW1EYXRhID0gZGF0YS5sZW5ndGg7XG4gICAgICAgIGNvbnN0IGNvdW50ID0gTWF0aC5taW4obnVtRGF0YSwgbnVtTWV0YSk7XG4gICAgICAgIGlmIChjb3VudCkge1xuICAgICAgICAgICAgdGhpcy5wYXJzZSgwLCBjb3VudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG51bURhdGEgPiBudW1NZXRhKSB7XG4gICAgICAgICAgICB0aGlzLl9pbnNlcnRFbGVtZW50cyhudW1NZXRhLCBudW1EYXRhIC0gbnVtTWV0YSwgcmVzZXROZXdFbGVtZW50cyk7XG4gICAgICAgIH0gZWxzZSBpZiAobnVtRGF0YSA8IG51bU1ldGEpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbW92ZUVsZW1lbnRzKG51bURhdGEsIG51bU1ldGEgLSBudW1EYXRhKTtcbiAgICAgICAgfVxuICAgIH1cbiBfaW5zZXJ0RWxlbWVudHMoc3RhcnQsIGNvdW50LCByZXNldE5ld0VsZW1lbnRzID0gdHJ1ZSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgZGF0YSA9IG1ldGEuZGF0YTtcbiAgICAgICAgY29uc3QgZW5kID0gc3RhcnQgKyBjb3VudDtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGNvbnN0IG1vdmUgPSAoYXJyKT0+e1xuICAgICAgICAgICAgYXJyLmxlbmd0aCArPSBjb3VudDtcbiAgICAgICAgICAgIGZvcihpID0gYXJyLmxlbmd0aCAtIDE7IGkgPj0gZW5kOyBpLS0pe1xuICAgICAgICAgICAgICAgIGFycltpXSA9IGFycltpIC0gY291bnRdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBtb3ZlKGRhdGEpO1xuICAgICAgICBmb3IoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpe1xuICAgICAgICAgICAgZGF0YVtpXSA9IG5ldyB0aGlzLmRhdGFFbGVtZW50VHlwZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9wYXJzaW5nKSB7XG4gICAgICAgICAgICBtb3ZlKG1ldGEuX3BhcnNlZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYXJzZShzdGFydCwgY291bnQpO1xuICAgICAgICBpZiAocmVzZXROZXdFbGVtZW50cykge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50cyhkYXRhLCBzdGFydCwgY291bnQsICdyZXNldCcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZUVsZW1lbnRzKGVsZW1lbnQsIHN0YXJ0LCBjb3VudCwgbW9kZSkge31cbiBfcmVtb3ZlRWxlbWVudHMoc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBpZiAodGhpcy5fcGFyc2luZykge1xuICAgICAgICAgICAgY29uc3QgcmVtb3ZlZCA9IG1ldGEuX3BhcnNlZC5zcGxpY2Uoc3RhcnQsIGNvdW50KTtcbiAgICAgICAgICAgIGlmIChtZXRhLl9zdGFja2VkKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJTdGFja3MobWV0YSwgcmVtb3ZlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbWV0YS5kYXRhLnNwbGljZShzdGFydCwgY291bnQpO1xuICAgIH1cbiBfc3luYyhhcmdzKSB7XG4gICAgICAgIGlmICh0aGlzLl9wYXJzaW5nKSB7XG4gICAgICAgICAgICB0aGlzLl9zeW5jTGlzdC5wdXNoKGFyZ3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgW21ldGhvZCwgYXJnMSwgYXJnMl0gPSBhcmdzO1xuICAgICAgICAgICAgdGhpc1ttZXRob2RdKGFyZzEsIGFyZzIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2hhcnQuX2RhdGFDaGFuZ2VzLnB1c2goW1xuICAgICAgICAgICAgdGhpcy5pbmRleCxcbiAgICAgICAgICAgIC4uLmFyZ3NcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIF9vbkRhdGFQdXNoKCkge1xuICAgICAgICBjb25zdCBjb3VudCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHRoaXMuX3N5bmMoW1xuICAgICAgICAgICAgJ19pbnNlcnRFbGVtZW50cycsXG4gICAgICAgICAgICB0aGlzLmdldERhdGFzZXQoKS5kYXRhLmxlbmd0aCAtIGNvdW50LFxuICAgICAgICAgICAgY291bnRcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIF9vbkRhdGFQb3AoKSB7XG4gICAgICAgIHRoaXMuX3N5bmMoW1xuICAgICAgICAgICAgJ19yZW1vdmVFbGVtZW50cycsXG4gICAgICAgICAgICB0aGlzLl9jYWNoZWRNZXRhLmRhdGEubGVuZ3RoIC0gMSxcbiAgICAgICAgICAgIDFcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIF9vbkRhdGFTaGlmdCgpIHtcbiAgICAgICAgdGhpcy5fc3luYyhbXG4gICAgICAgICAgICAnX3JlbW92ZUVsZW1lbnRzJyxcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAxXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBfb25EYXRhU3BsaWNlKHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBpZiAoY291bnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3N5bmMoW1xuICAgICAgICAgICAgICAgICdfcmVtb3ZlRWxlbWVudHMnLFxuICAgICAgICAgICAgICAgIHN0YXJ0LFxuICAgICAgICAgICAgICAgIGNvdW50XG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdDb3VudCA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICAgICAgICBpZiAobmV3Q291bnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3N5bmMoW1xuICAgICAgICAgICAgICAgICdfaW5zZXJ0RWxlbWVudHMnLFxuICAgICAgICAgICAgICAgIHN0YXJ0LFxuICAgICAgICAgICAgICAgIG5ld0NvdW50XG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfb25EYXRhVW5zaGlmdCgpIHtcbiAgICAgICAgdGhpcy5fc3luYyhbXG4gICAgICAgICAgICAnX2luc2VydEVsZW1lbnRzJyxcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAgIF0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0QWxsU2NhbGVWYWx1ZXMoc2NhbGUsIHR5cGUpIHtcbiAgICBpZiAoIXNjYWxlLl9jYWNoZS4kYmFyKSB7XG4gICAgICAgIGNvbnN0IHZpc2libGVNZXRhcyA9IHNjYWxlLmdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKHR5cGUpO1xuICAgICAgICBsZXQgdmFsdWVzID0gW107XG4gICAgICAgIGZvcihsZXQgaSA9IDAsIGlsZW4gPSB2aXNpYmxlTWV0YXMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKXtcbiAgICAgICAgICAgIHZhbHVlcyA9IHZhbHVlcy5jb25jYXQodmlzaWJsZU1ldGFzW2ldLmNvbnRyb2xsZXIuZ2V0QWxsUGFyc2VkVmFsdWVzKHNjYWxlKSk7XG4gICAgICAgIH1cbiAgICAgICAgc2NhbGUuX2NhY2hlLiRiYXIgPSBfYXJyYXlVbmlxdWUodmFsdWVzLnNvcnQoKGEsIGIpPT5hIC0gYikpO1xuICAgIH1cbiAgICByZXR1cm4gc2NhbGUuX2NhY2hlLiRiYXI7XG59XG4gZnVuY3Rpb24gY29tcHV0ZU1pblNhbXBsZVNpemUobWV0YSkge1xuICAgIGNvbnN0IHNjYWxlID0gbWV0YS5pU2NhbGU7XG4gICAgY29uc3QgdmFsdWVzID0gZ2V0QWxsU2NhbGVWYWx1ZXMoc2NhbGUsIG1ldGEudHlwZSk7XG4gICAgbGV0IG1pbiA9IHNjYWxlLl9sZW5ndGg7XG4gICAgbGV0IGksIGlsZW4sIGN1cnIsIHByZXY7XG4gICAgY29uc3QgdXBkYXRlTWluQW5kUHJldiA9ICgpPT57XG4gICAgICAgIGlmIChjdXJyID09PSAzMjc2NyB8fCBjdXJyID09PSAtMzI3NjgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVmaW5lZChwcmV2KSkge1xuICAgICAgICAgICAgbWluID0gTWF0aC5taW4obWluLCBNYXRoLmFicyhjdXJyIC0gcHJldikgfHwgbWluKTtcbiAgICAgICAgfVxuICAgICAgICBwcmV2ID0gY3VycjtcbiAgICB9O1xuICAgIGZvcihpID0gMCwgaWxlbiA9IHZhbHVlcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBjdXJyID0gc2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZXNbaV0pO1xuICAgICAgICB1cGRhdGVNaW5BbmRQcmV2KCk7XG4gICAgfVxuICAgIHByZXYgPSB1bmRlZmluZWQ7XG4gICAgZm9yKGkgPSAwLCBpbGVuID0gc2NhbGUudGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgY3VyciA9IHNjYWxlLmdldFBpeGVsRm9yVGljayhpKTtcbiAgICAgICAgdXBkYXRlTWluQW5kUHJldigpO1xuICAgIH1cbiAgICByZXR1cm4gbWluO1xufVxuIGZ1bmN0aW9uIGNvbXB1dGVGaXRDYXRlZ29yeVRyYWl0cyhpbmRleCwgcnVsZXIsIG9wdGlvbnMsIHN0YWNrQ291bnQpIHtcbiAgICBjb25zdCB0aGlja25lc3MgPSBvcHRpb25zLmJhclRoaWNrbmVzcztcbiAgICBsZXQgc2l6ZSwgcmF0aW87XG4gICAgaWYgKGlzTnVsbE9yVW5kZWYodGhpY2tuZXNzKSkge1xuICAgICAgICBzaXplID0gcnVsZXIubWluICogb3B0aW9ucy5jYXRlZ29yeVBlcmNlbnRhZ2U7XG4gICAgICAgIHJhdGlvID0gb3B0aW9ucy5iYXJQZXJjZW50YWdlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHNpemUgPSB0aGlja25lc3MgKiBzdGFja0NvdW50O1xuICAgICAgICByYXRpbyA9IDE7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGNodW5rOiBzaXplIC8gc3RhY2tDb3VudCxcbiAgICAgICAgcmF0aW8sXG4gICAgICAgIHN0YXJ0OiBydWxlci5waXhlbHNbaW5kZXhdIC0gc2l6ZSAvIDJcbiAgICB9O1xufVxuIGZ1bmN0aW9uIGNvbXB1dGVGbGV4Q2F0ZWdvcnlUcmFpdHMoaW5kZXgsIHJ1bGVyLCBvcHRpb25zLCBzdGFja0NvdW50KSB7XG4gICAgY29uc3QgcGl4ZWxzID0gcnVsZXIucGl4ZWxzO1xuICAgIGNvbnN0IGN1cnIgPSBwaXhlbHNbaW5kZXhdO1xuICAgIGxldCBwcmV2ID0gaW5kZXggPiAwID8gcGl4ZWxzW2luZGV4IC0gMV0gOiBudWxsO1xuICAgIGxldCBuZXh0ID0gaW5kZXggPCBwaXhlbHMubGVuZ3RoIC0gMSA/IHBpeGVsc1tpbmRleCArIDFdIDogbnVsbDtcbiAgICBjb25zdCBwZXJjZW50ID0gb3B0aW9ucy5jYXRlZ29yeVBlcmNlbnRhZ2U7XG4gICAgaWYgKHByZXYgPT09IG51bGwpIHtcbiAgICAgICAgcHJldiA9IGN1cnIgLSAobmV4dCA9PT0gbnVsbCA/IHJ1bGVyLmVuZCAtIHJ1bGVyLnN0YXJ0IDogbmV4dCAtIGN1cnIpO1xuICAgIH1cbiAgICBpZiAobmV4dCA9PT0gbnVsbCkge1xuICAgICAgICBuZXh0ID0gY3VyciArIGN1cnIgLSBwcmV2O1xuICAgIH1cbiAgICBjb25zdCBzdGFydCA9IGN1cnIgLSAoY3VyciAtIE1hdGgubWluKHByZXYsIG5leHQpKSAvIDIgKiBwZXJjZW50O1xuICAgIGNvbnN0IHNpemUgPSBNYXRoLmFicyhuZXh0IC0gcHJldikgLyAyICogcGVyY2VudDtcbiAgICByZXR1cm4ge1xuICAgICAgICBjaHVuazogc2l6ZSAvIHN0YWNrQ291bnQsXG4gICAgICAgIHJhdGlvOiBvcHRpb25zLmJhclBlcmNlbnRhZ2UsXG4gICAgICAgIHN0YXJ0XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHBhcnNlRmxvYXRCYXIoZW50cnksIGl0ZW0sIHZTY2FsZSwgaSkge1xuICAgIGNvbnN0IHN0YXJ0VmFsdWUgPSB2U2NhbGUucGFyc2UoZW50cnlbMF0sIGkpO1xuICAgIGNvbnN0IGVuZFZhbHVlID0gdlNjYWxlLnBhcnNlKGVudHJ5WzFdLCBpKTtcbiAgICBjb25zdCBtaW4gPSBNYXRoLm1pbihzdGFydFZhbHVlLCBlbmRWYWx1ZSk7XG4gICAgY29uc3QgbWF4ID0gTWF0aC5tYXgoc3RhcnRWYWx1ZSwgZW5kVmFsdWUpO1xuICAgIGxldCBiYXJTdGFydCA9IG1pbjtcbiAgICBsZXQgYmFyRW5kID0gbWF4O1xuICAgIGlmIChNYXRoLmFicyhtaW4pID4gTWF0aC5hYnMobWF4KSkge1xuICAgICAgICBiYXJTdGFydCA9IG1heDtcbiAgICAgICAgYmFyRW5kID0gbWluO1xuICAgIH1cbiAgICBpdGVtW3ZTY2FsZS5heGlzXSA9IGJhckVuZDtcbiAgICBpdGVtLl9jdXN0b20gPSB7XG4gICAgICAgIGJhclN0YXJ0LFxuICAgICAgICBiYXJFbmQsXG4gICAgICAgIHN0YXJ0OiBzdGFydFZhbHVlLFxuICAgICAgICBlbmQ6IGVuZFZhbHVlLFxuICAgICAgICBtaW4sXG4gICAgICAgIG1heFxuICAgIH07XG59XG5mdW5jdGlvbiBwYXJzZVZhbHVlKGVudHJ5LCBpdGVtLCB2U2NhbGUsIGkpIHtcbiAgICBpZiAoaXNBcnJheShlbnRyeSkpIHtcbiAgICAgICAgcGFyc2VGbG9hdEJhcihlbnRyeSwgaXRlbSwgdlNjYWxlLCBpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpdGVtW3ZTY2FsZS5heGlzXSA9IHZTY2FsZS5wYXJzZShlbnRyeSwgaSk7XG4gICAgfVxuICAgIHJldHVybiBpdGVtO1xufVxuZnVuY3Rpb24gcGFyc2VBcnJheU9yUHJpbWl0aXZlKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgIGNvbnN0IGlTY2FsZSA9IG1ldGEuaVNjYWxlO1xuICAgIGNvbnN0IHZTY2FsZSA9IG1ldGEudlNjYWxlO1xuICAgIGNvbnN0IGxhYmVscyA9IGlTY2FsZS5nZXRMYWJlbHMoKTtcbiAgICBjb25zdCBzaW5nbGVTY2FsZSA9IGlTY2FsZSA9PT0gdlNjYWxlO1xuICAgIGNvbnN0IHBhcnNlZCA9IFtdO1xuICAgIGxldCBpLCBpbGVuLCBpdGVtLCBlbnRyeTtcbiAgICBmb3IoaSA9IHN0YXJ0LCBpbGVuID0gc3RhcnQgKyBjb3VudDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIGVudHJ5ID0gZGF0YVtpXTtcbiAgICAgICAgaXRlbSA9IHt9O1xuICAgICAgICBpdGVtW2lTY2FsZS5heGlzXSA9IHNpbmdsZVNjYWxlIHx8IGlTY2FsZS5wYXJzZShsYWJlbHNbaV0sIGkpO1xuICAgICAgICBwYXJzZWQucHVzaChwYXJzZVZhbHVlKGVudHJ5LCBpdGVtLCB2U2NhbGUsIGkpKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlZDtcbn1cbmZ1bmN0aW9uIGlzRmxvYXRCYXIoY3VzdG9tKSB7XG4gICAgcmV0dXJuIGN1c3RvbSAmJiBjdXN0b20uYmFyU3RhcnQgIT09IHVuZGVmaW5lZCAmJiBjdXN0b20uYmFyRW5kICE9PSB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBiYXJTaWduKHNpemUsIHZTY2FsZSwgYWN0dWFsQmFzZSkge1xuICAgIGlmIChzaXplICE9PSAwKSB7XG4gICAgICAgIHJldHVybiBzaWduKHNpemUpO1xuICAgIH1cbiAgICByZXR1cm4gKHZTY2FsZS5pc0hvcml6b250YWwoKSA/IDEgOiAtMSkgKiAodlNjYWxlLm1pbiA+PSBhY3R1YWxCYXNlID8gMSA6IC0xKTtcbn1cbmZ1bmN0aW9uIGJvcmRlclByb3BzKHByb3BlcnRpZXMpIHtcbiAgICBsZXQgcmV2ZXJzZSwgc3RhcnQsIGVuZCwgdG9wLCBib3R0b207XG4gICAgaWYgKHByb3BlcnRpZXMuaG9yaXpvbnRhbCkge1xuICAgICAgICByZXZlcnNlID0gcHJvcGVydGllcy5iYXNlID4gcHJvcGVydGllcy54O1xuICAgICAgICBzdGFydCA9ICdsZWZ0JztcbiAgICAgICAgZW5kID0gJ3JpZ2h0JztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXZlcnNlID0gcHJvcGVydGllcy5iYXNlIDwgcHJvcGVydGllcy55O1xuICAgICAgICBzdGFydCA9ICdib3R0b20nO1xuICAgICAgICBlbmQgPSAndG9wJztcbiAgICB9XG4gICAgaWYgKHJldmVyc2UpIHtcbiAgICAgICAgdG9wID0gJ2VuZCc7XG4gICAgICAgIGJvdHRvbSA9ICdzdGFydCc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdG9wID0gJ3N0YXJ0JztcbiAgICAgICAgYm90dG9tID0gJ2VuZCc7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0LFxuICAgICAgICBlbmQsXG4gICAgICAgIHJldmVyc2UsXG4gICAgICAgIHRvcCxcbiAgICAgICAgYm90dG9tXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHNldEJvcmRlclNraXBwZWQocHJvcGVydGllcywgb3B0aW9ucywgc3RhY2ssIGluZGV4KSB7XG4gICAgbGV0IGVkZ2UgPSBvcHRpb25zLmJvcmRlclNraXBwZWQ7XG4gICAgY29uc3QgcmVzID0ge307XG4gICAgaWYgKCFlZGdlKSB7XG4gICAgICAgIHByb3BlcnRpZXMuYm9yZGVyU2tpcHBlZCA9IHJlcztcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZWRnZSA9PT0gdHJ1ZSkge1xuICAgICAgICBwcm9wZXJ0aWVzLmJvcmRlclNraXBwZWQgPSB7XG4gICAgICAgICAgICB0b3A6IHRydWUsXG4gICAgICAgICAgICByaWdodDogdHJ1ZSxcbiAgICAgICAgICAgIGJvdHRvbTogdHJ1ZSxcbiAgICAgICAgICAgIGxlZnQ6IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB7IHN0YXJ0ICwgZW5kICwgcmV2ZXJzZSAsIHRvcCAsIGJvdHRvbSAgfSA9IGJvcmRlclByb3BzKHByb3BlcnRpZXMpO1xuICAgIGlmIChlZGdlID09PSAnbWlkZGxlJyAmJiBzdGFjaykge1xuICAgICAgICBwcm9wZXJ0aWVzLmVuYWJsZUJvcmRlclJhZGl1cyA9IHRydWU7XG4gICAgICAgIGlmICgoc3RhY2suX3RvcCB8fCAwKSA9PT0gaW5kZXgpIHtcbiAgICAgICAgICAgIGVkZ2UgPSB0b3A7XG4gICAgICAgIH0gZWxzZSBpZiAoKHN0YWNrLl9ib3R0b20gfHwgMCkgPT09IGluZGV4KSB7XG4gICAgICAgICAgICBlZGdlID0gYm90dG9tO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzW3BhcnNlRWRnZShib3R0b20sIHN0YXJ0LCBlbmQsIHJldmVyc2UpXSA9IHRydWU7XG4gICAgICAgICAgICBlZGdlID0gdG9wO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlc1twYXJzZUVkZ2UoZWRnZSwgc3RhcnQsIGVuZCwgcmV2ZXJzZSldID0gdHJ1ZTtcbiAgICBwcm9wZXJ0aWVzLmJvcmRlclNraXBwZWQgPSByZXM7XG59XG5mdW5jdGlvbiBwYXJzZUVkZ2UoZWRnZSwgYSwgYiwgcmV2ZXJzZSkge1xuICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgIGVkZ2UgPSBzd2FwKGVkZ2UsIGEsIGIpO1xuICAgICAgICBlZGdlID0gc3RhcnRFbmQoZWRnZSwgYiwgYSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZWRnZSA9IHN0YXJ0RW5kKGVkZ2UsIGEsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZWRnZTtcbn1cbmZ1bmN0aW9uIHN3YXAob3JpZywgdjEsIHYyKSB7XG4gICAgcmV0dXJuIG9yaWcgPT09IHYxID8gdjIgOiBvcmlnID09PSB2MiA/IHYxIDogb3JpZztcbn1cbmZ1bmN0aW9uIHN0YXJ0RW5kKHYsIHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gdiA9PT0gJ3N0YXJ0JyA/IHN0YXJ0IDogdiA9PT0gJ2VuZCcgPyBlbmQgOiB2O1xufVxuZnVuY3Rpb24gc2V0SW5mbGF0ZUFtb3VudChwcm9wZXJ0aWVzLCB7IGluZmxhdGVBbW91bnQgIH0sIHJhdGlvKSB7XG4gICAgcHJvcGVydGllcy5pbmZsYXRlQW1vdW50ID0gaW5mbGF0ZUFtb3VudCA9PT0gJ2F1dG8nID8gcmF0aW8gPT09IDEgPyAwLjMzIDogMCA6IGluZmxhdGVBbW91bnQ7XG59XG5jbGFzcyBCYXJDb250cm9sbGVyIGV4dGVuZHMgRGF0YXNldENvbnRyb2xsZXIge1xuICAgIHN0YXRpYyBpZCA9ICdiYXInO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgZGF0YXNldEVsZW1lbnRUeXBlOiBmYWxzZSxcbiAgICAgICAgZGF0YUVsZW1lbnRUeXBlOiAnYmFyJyxcbiAgICAgICAgY2F0ZWdvcnlQZXJjZW50YWdlOiAwLjgsXG4gICAgICAgIGJhclBlcmNlbnRhZ2U6IDAuOSxcbiAgICAgICAgZ3JvdXBlZDogdHJ1ZSxcbiAgICAgICAgYW5pbWF0aW9uczoge1xuICAgICAgICAgICAgbnVtYmVyczoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgJ3gnLFxuICAgICAgICAgICAgICAgICAgICAneScsXG4gICAgICAgICAgICAgICAgICAgICdiYXNlJyxcbiAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJyxcbiAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCdcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuIHN0YXRpYyBvdmVycmlkZXMgPSB7XG4gICAgICAgIHNjYWxlczoge1xuICAgICAgICAgICAgX2luZGV4Xzoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdjYXRlZ29yeScsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiB0cnVlLFxuICAgICAgICAgICAgICAgIGdyaWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF92YWx1ZV86IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbGluZWFyJyxcbiAgICAgICAgICAgICAgICBiZWdpbkF0WmVybzogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiBwYXJzZVByaW1pdGl2ZURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIHJldHVybiBwYXJzZUFycmF5T3JQcmltaXRpdmUobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICB9XG4gcGFyc2VBcnJheURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIHJldHVybiBwYXJzZUFycmF5T3JQcmltaXRpdmUobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICB9XG4gcGFyc2VPYmplY3REYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCB7IGlTY2FsZSAsIHZTY2FsZSAgfSA9IG1ldGE7XG4gICAgICAgIGNvbnN0IHsgeEF4aXNLZXkgPSd4JyAsIHlBeGlzS2V5ID0neScgIH0gPSB0aGlzLl9wYXJzaW5nO1xuICAgICAgICBjb25zdCBpQXhpc0tleSA9IGlTY2FsZS5heGlzID09PSAneCcgPyB4QXhpc0tleSA6IHlBeGlzS2V5O1xuICAgICAgICBjb25zdCB2QXhpc0tleSA9IHZTY2FsZS5heGlzID09PSAneCcgPyB4QXhpc0tleSA6IHlBeGlzS2V5O1xuICAgICAgICBjb25zdCBwYXJzZWQgPSBbXTtcbiAgICAgICAgbGV0IGksIGlsZW4sIGl0ZW0sIG9iajtcbiAgICAgICAgZm9yKGkgPSBzdGFydCwgaWxlbiA9IHN0YXJ0ICsgY291bnQ7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgb2JqID0gZGF0YVtpXTtcbiAgICAgICAgICAgIGl0ZW0gPSB7fTtcbiAgICAgICAgICAgIGl0ZW1baVNjYWxlLmF4aXNdID0gaVNjYWxlLnBhcnNlKHJlc29sdmVPYmplY3RLZXkob2JqLCBpQXhpc0tleSksIGkpO1xuICAgICAgICAgICAgcGFyc2VkLnB1c2gocGFyc2VWYWx1ZShyZXNvbHZlT2JqZWN0S2V5KG9iaiwgdkF4aXNLZXkpLCBpdGVtLCB2U2NhbGUsIGkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgIH1cbiB1cGRhdGVSYW5nZUZyb21QYXJzZWQocmFuZ2UsIHNjYWxlLCBwYXJzZWQsIHN0YWNrKSB7XG4gICAgICAgIHN1cGVyLnVwZGF0ZVJhbmdlRnJvbVBhcnNlZChyYW5nZSwgc2NhbGUsIHBhcnNlZCwgc3RhY2spO1xuICAgICAgICBjb25zdCBjdXN0b20gPSBwYXJzZWQuX2N1c3RvbTtcbiAgICAgICAgaWYgKGN1c3RvbSAmJiBzY2FsZSA9PT0gdGhpcy5fY2FjaGVkTWV0YS52U2NhbGUpIHtcbiAgICAgICAgICAgIHJhbmdlLm1pbiA9IE1hdGgubWluKHJhbmdlLm1pbiwgY3VzdG9tLm1pbik7XG4gICAgICAgICAgICByYW5nZS5tYXggPSBNYXRoLm1heChyYW5nZS5tYXgsIGN1c3RvbS5tYXgpO1xuICAgICAgICB9XG4gICAgfVxuIGdldE1heE92ZXJmbG93KCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gZ2V0TGFiZWxBbmRWYWx1ZShpbmRleCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgeyBpU2NhbGUgLCB2U2NhbGUgIH0gPSBtZXRhO1xuICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgICAgIGNvbnN0IGN1c3RvbSA9IHBhcnNlZC5fY3VzdG9tO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGlzRmxvYXRCYXIoY3VzdG9tKSA/ICdbJyArIGN1c3RvbS5zdGFydCArICcsICcgKyBjdXN0b20uZW5kICsgJ10nIDogJycgKyB2U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWRbdlNjYWxlLmF4aXNdKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhYmVsOiAnJyArIGlTY2FsZS5nZXRMYWJlbEZvclZhbHVlKHBhcnNlZFtpU2NhbGUuYXhpc10pLFxuICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgdGhpcy5lbmFibGVPcHRpb25TaGFyaW5nID0gdHJ1ZTtcbiAgICAgICAgc3VwZXIuaW5pdGlhbGl6ZSgpO1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgbWV0YS5zdGFjayA9IHRoaXMuZ2V0RGF0YXNldCgpLnN0YWNrO1xuICAgIH1cbiAgICB1cGRhdGUobW9kZSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50cyhtZXRhLmRhdGEsIDAsIG1ldGEuZGF0YS5sZW5ndGgsIG1vZGUpO1xuICAgIH1cbiAgICB1cGRhdGVFbGVtZW50cyhiYXJzLCBzdGFydCwgY291bnQsIG1vZGUpIHtcbiAgICAgICAgY29uc3QgcmVzZXQgPSBtb2RlID09PSAncmVzZXQnO1xuICAgICAgICBjb25zdCB7IGluZGV4ICwgX2NhY2hlZE1ldGE6IHsgdlNjYWxlICB9ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgYmFzZSA9IHZTY2FsZS5nZXRCYXNlUGl4ZWwoKTtcbiAgICAgICAgY29uc3QgaG9yaXpvbnRhbCA9IHZTY2FsZS5pc0hvcml6b250YWwoKTtcbiAgICAgICAgY29uc3QgcnVsZXIgPSB0aGlzLl9nZXRSdWxlcigpO1xuICAgICAgICBjb25zdCB7IHNoYXJlZE9wdGlvbnMgLCBpbmNsdWRlT3B0aW9ucyAgfSA9IHRoaXMuX2dldFNoYXJlZE9wdGlvbnMoc3RhcnQsIG1vZGUpO1xuICAgICAgICBmb3IobGV0IGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7IGkrKyl7XG4gICAgICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpKTtcbiAgICAgICAgICAgIGNvbnN0IHZwaXhlbHMgPSByZXNldCB8fCBpc051bGxPclVuZGVmKHBhcnNlZFt2U2NhbGUuYXhpc10pID8ge1xuICAgICAgICAgICAgICAgIGJhc2UsXG4gICAgICAgICAgICAgICAgaGVhZDogYmFzZVxuICAgICAgICAgICAgfSA6IHRoaXMuX2NhbGN1bGF0ZUJhclZhbHVlUGl4ZWxzKGkpO1xuICAgICAgICAgICAgY29uc3QgaXBpeGVscyA9IHRoaXMuX2NhbGN1bGF0ZUJhckluZGV4UGl4ZWxzKGksIHJ1bGVyKTtcbiAgICAgICAgICAgIGNvbnN0IHN0YWNrID0gKHBhcnNlZC5fc3RhY2tzIHx8IHt9KVt2U2NhbGUuYXhpc107XG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgICAgICAgICAgICAgIGhvcml6b250YWwsXG4gICAgICAgICAgICAgICAgYmFzZTogdnBpeGVscy5iYXNlLFxuICAgICAgICAgICAgICAgIGVuYWJsZUJvcmRlclJhZGl1czogIXN0YWNrIHx8IGlzRmxvYXRCYXIocGFyc2VkLl9jdXN0b20pIHx8IGluZGV4ID09PSBzdGFjay5fdG9wIHx8IGluZGV4ID09PSBzdGFjay5fYm90dG9tLFxuICAgICAgICAgICAgICAgIHg6IGhvcml6b250YWwgPyB2cGl4ZWxzLmhlYWQgOiBpcGl4ZWxzLmNlbnRlcixcbiAgICAgICAgICAgICAgICB5OiBob3Jpem9udGFsID8gaXBpeGVscy5jZW50ZXIgOiB2cGl4ZWxzLmhlYWQsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBob3Jpem9udGFsID8gaXBpeGVscy5zaXplIDogTWF0aC5hYnModnBpeGVscy5zaXplKSxcbiAgICAgICAgICAgICAgICB3aWR0aDogaG9yaXpvbnRhbCA/IE1hdGguYWJzKHZwaXhlbHMuc2l6ZSkgOiBpcGl4ZWxzLnNpemVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoaW5jbHVkZU9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLm9wdGlvbnMgPSBzaGFyZWRPcHRpb25zIHx8IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpLCBiYXJzW2ldLmFjdGl2ZSA/ICdhY3RpdmUnIDogbW9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBvcHRpb25zID0gcHJvcGVydGllcy5vcHRpb25zIHx8IGJhcnNbaV0ub3B0aW9ucztcbiAgICAgICAgICAgIHNldEJvcmRlclNraXBwZWQocHJvcGVydGllcywgb3B0aW9ucywgc3RhY2ssIGluZGV4KTtcbiAgICAgICAgICAgIHNldEluZmxhdGVBbW91bnQocHJvcGVydGllcywgb3B0aW9ucywgcnVsZXIucmF0aW8pO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50KGJhcnNbaV0sIGksIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgICAgICB9XG4gICAgfVxuIF9nZXRTdGFja3MobGFzdCwgZGF0YUluZGV4KSB7XG4gICAgICAgIGNvbnN0IHsgaVNjYWxlICB9ID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgbWV0YXNldHMgPSBpU2NhbGUuZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXModGhpcy5fdHlwZSkuZmlsdGVyKChtZXRhKT0+bWV0YS5jb250cm9sbGVyLm9wdGlvbnMuZ3JvdXBlZCk7XG4gICAgICAgIGNvbnN0IHN0YWNrZWQgPSBpU2NhbGUub3B0aW9ucy5zdGFja2VkO1xuICAgICAgICBjb25zdCBzdGFja3MgPSBbXTtcbiAgICAgICAgY29uc3Qgc2tpcE51bGwgPSAobWV0YSk9PntcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZCA9IG1ldGEuY29udHJvbGxlci5nZXRQYXJzZWQoZGF0YUluZGV4KTtcbiAgICAgICAgICAgIGNvbnN0IHZhbCA9IHBhcnNlZCAmJiBwYXJzZWRbbWV0YS52U2NhbGUuYXhpc107XG4gICAgICAgICAgICBpZiAoaXNOdWxsT3JVbmRlZih2YWwpIHx8IGlzTmFOKHZhbCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZm9yIChjb25zdCBtZXRhIG9mIG1ldGFzZXRzKXtcbiAgICAgICAgICAgIGlmIChkYXRhSW5kZXggIT09IHVuZGVmaW5lZCAmJiBza2lwTnVsbChtZXRhKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YWNrZWQgPT09IGZhbHNlIHx8IHN0YWNrcy5pbmRleE9mKG1ldGEuc3RhY2spID09PSAtMSB8fCBzdGFja2VkID09PSB1bmRlZmluZWQgJiYgbWV0YS5zdGFjayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgc3RhY2tzLnB1c2gobWV0YS5zdGFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWV0YS5pbmRleCA9PT0gbGFzdCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghc3RhY2tzLmxlbmd0aCkge1xuICAgICAgICAgICAgc3RhY2tzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RhY2tzO1xuICAgIH1cbiBfZ2V0U3RhY2tDb3VudChpbmRleCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0U3RhY2tzKHVuZGVmaW5lZCwgaW5kZXgpLmxlbmd0aDtcbiAgICB9XG4gX2dldFN0YWNrSW5kZXgoZGF0YXNldEluZGV4LCBuYW1lLCBkYXRhSW5kZXgpIHtcbiAgICAgICAgY29uc3Qgc3RhY2tzID0gdGhpcy5fZ2V0U3RhY2tzKGRhdGFzZXRJbmRleCwgZGF0YUluZGV4KTtcbiAgICAgICAgY29uc3QgaW5kZXggPSBuYW1lICE9PSB1bmRlZmluZWQgPyBzdGFja3MuaW5kZXhPZihuYW1lKSA6IC0xO1xuICAgICAgICByZXR1cm4gaW5kZXggPT09IC0xID8gc3RhY2tzLmxlbmd0aCAtIDEgOiBpbmRleDtcbiAgICB9XG4gX2dldFJ1bGVyKCkge1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgaVNjYWxlID0gbWV0YS5pU2NhbGU7XG4gICAgICAgIGNvbnN0IHBpeGVscyA9IFtdO1xuICAgICAgICBsZXQgaSwgaWxlbjtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gbWV0YS5kYXRhLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBwaXhlbHMucHVzaChpU2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZSh0aGlzLmdldFBhcnNlZChpKVtpU2NhbGUuYXhpc10sIGkpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBiYXJUaGlja25lc3MgPSBvcHRzLmJhclRoaWNrbmVzcztcbiAgICAgICAgY29uc3QgbWluID0gYmFyVGhpY2tuZXNzIHx8IGNvbXB1dGVNaW5TYW1wbGVTaXplKG1ldGEpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWluLFxuICAgICAgICAgICAgcGl4ZWxzLFxuICAgICAgICAgICAgc3RhcnQ6IGlTY2FsZS5fc3RhcnRQaXhlbCxcbiAgICAgICAgICAgIGVuZDogaVNjYWxlLl9lbmRQaXhlbCxcbiAgICAgICAgICAgIHN0YWNrQ291bnQ6IHRoaXMuX2dldFN0YWNrQ291bnQoKSxcbiAgICAgICAgICAgIHNjYWxlOiBpU2NhbGUsXG4gICAgICAgICAgICBncm91cGVkOiBvcHRzLmdyb3VwZWQsXG4gICAgICAgICAgICByYXRpbzogYmFyVGhpY2tuZXNzID8gMSA6IG9wdHMuY2F0ZWdvcnlQZXJjZW50YWdlICogb3B0cy5iYXJQZXJjZW50YWdlXG4gICAgICAgIH07XG4gICAgfVxuIF9jYWxjdWxhdGVCYXJWYWx1ZVBpeGVscyhpbmRleCkge1xuICAgICAgICBjb25zdCB7IF9jYWNoZWRNZXRhOiB7IHZTY2FsZSAsIF9zdGFja2VkICwgaW5kZXg6IGRhdGFzZXRJbmRleCAgfSAsIG9wdGlvbnM6IHsgYmFzZTogYmFzZVZhbHVlICwgbWluQmFyTGVuZ3RoICB9ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgYWN0dWFsQmFzZSA9IGJhc2VWYWx1ZSB8fCAwO1xuICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgICAgIGNvbnN0IGN1c3RvbSA9IHBhcnNlZC5fY3VzdG9tO1xuICAgICAgICBjb25zdCBmbG9hdGluZyA9IGlzRmxvYXRCYXIoY3VzdG9tKTtcbiAgICAgICAgbGV0IHZhbHVlID0gcGFyc2VkW3ZTY2FsZS5heGlzXTtcbiAgICAgICAgbGV0IHN0YXJ0ID0gMDtcbiAgICAgICAgbGV0IGxlbmd0aCA9IF9zdGFja2VkID8gdGhpcy5hcHBseVN0YWNrKHZTY2FsZSwgcGFyc2VkLCBfc3RhY2tlZCkgOiB2YWx1ZTtcbiAgICAgICAgbGV0IGhlYWQsIHNpemU7XG4gICAgICAgIGlmIChsZW5ndGggIT09IHZhbHVlKSB7XG4gICAgICAgICAgICBzdGFydCA9IGxlbmd0aCAtIHZhbHVlO1xuICAgICAgICAgICAgbGVuZ3RoID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZsb2F0aW5nKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGN1c3RvbS5iYXJTdGFydDtcbiAgICAgICAgICAgIGxlbmd0aCA9IGN1c3RvbS5iYXJFbmQgLSBjdXN0b20uYmFyU3RhcnQ7XG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IDAgJiYgc2lnbih2YWx1ZSkgIT09IHNpZ24oY3VzdG9tLmJhckVuZCkpIHtcbiAgICAgICAgICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGFydCArPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGFydFZhbHVlID0gIWlzTnVsbE9yVW5kZWYoYmFzZVZhbHVlKSAmJiAhZmxvYXRpbmcgPyBiYXNlVmFsdWUgOiBzdGFydDtcbiAgICAgICAgbGV0IGJhc2UgPSB2U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShzdGFydFZhbHVlKTtcbiAgICAgICAgaWYgKHRoaXMuY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaW5kZXgpKSB7XG4gICAgICAgICAgICBoZWFkID0gdlNjYWxlLmdldFBpeGVsRm9yVmFsdWUoc3RhcnQgKyBsZW5ndGgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGVhZCA9IGJhc2U7XG4gICAgICAgIH1cbiAgICAgICAgc2l6ZSA9IGhlYWQgLSBiYXNlO1xuICAgICAgICBpZiAoTWF0aC5hYnMoc2l6ZSkgPCBtaW5CYXJMZW5ndGgpIHtcbiAgICAgICAgICAgIHNpemUgPSBiYXJTaWduKHNpemUsIHZTY2FsZSwgYWN0dWFsQmFzZSkgKiBtaW5CYXJMZW5ndGg7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IGFjdHVhbEJhc2UpIHtcbiAgICAgICAgICAgICAgICBiYXNlIC09IHNpemUgLyAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc3RhcnRQaXhlbCA9IHZTY2FsZS5nZXRQaXhlbEZvckRlY2ltYWwoMCk7XG4gICAgICAgICAgICBjb25zdCBlbmRQaXhlbCA9IHZTY2FsZS5nZXRQaXhlbEZvckRlY2ltYWwoMSk7XG4gICAgICAgICAgICBjb25zdCBtaW4gPSBNYXRoLm1pbihzdGFydFBpeGVsLCBlbmRQaXhlbCk7XG4gICAgICAgICAgICBjb25zdCBtYXggPSBNYXRoLm1heChzdGFydFBpeGVsLCBlbmRQaXhlbCk7XG4gICAgICAgICAgICBiYXNlID0gTWF0aC5tYXgoTWF0aC5taW4oYmFzZSwgbWF4KSwgbWluKTtcbiAgICAgICAgICAgIGhlYWQgPSBiYXNlICsgc2l6ZTtcbiAgICAgICAgICAgIGlmIChfc3RhY2tlZCAmJiAhZmxvYXRpbmcpIHtcbiAgICAgICAgICAgICAgICBwYXJzZWQuX3N0YWNrc1t2U2NhbGUuYXhpc10uX3Zpc3VhbFZhbHVlc1tkYXRhc2V0SW5kZXhdID0gdlNjYWxlLmdldFZhbHVlRm9yUGl4ZWwoaGVhZCkgLSB2U2NhbGUuZ2V0VmFsdWVGb3JQaXhlbChiYXNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoYmFzZSA9PT0gdlNjYWxlLmdldFBpeGVsRm9yVmFsdWUoYWN0dWFsQmFzZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGhhbGZHcmlkID0gc2lnbihzaXplKSAqIHZTY2FsZS5nZXRMaW5lV2lkdGhGb3JWYWx1ZShhY3R1YWxCYXNlKSAvIDI7XG4gICAgICAgICAgICBiYXNlICs9IGhhbGZHcmlkO1xuICAgICAgICAgICAgc2l6ZSAtPSBoYWxmR3JpZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2l6ZSxcbiAgICAgICAgICAgIGJhc2UsXG4gICAgICAgICAgICBoZWFkLFxuICAgICAgICAgICAgY2VudGVyOiBoZWFkICsgc2l6ZSAvIDJcbiAgICAgICAgfTtcbiAgICB9XG4gX2NhbGN1bGF0ZUJhckluZGV4UGl4ZWxzKGluZGV4LCBydWxlcikge1xuICAgICAgICBjb25zdCBzY2FsZSA9IHJ1bGVyLnNjYWxlO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBza2lwTnVsbCA9IG9wdGlvbnMuc2tpcE51bGw7XG4gICAgICAgIGNvbnN0IG1heEJhclRoaWNrbmVzcyA9IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMubWF4QmFyVGhpY2tuZXNzLCBJbmZpbml0eSk7XG4gICAgICAgIGxldCBjZW50ZXIsIHNpemU7XG4gICAgICAgIGlmIChydWxlci5ncm91cGVkKSB7XG4gICAgICAgICAgICBjb25zdCBzdGFja0NvdW50ID0gc2tpcE51bGwgPyB0aGlzLl9nZXRTdGFja0NvdW50KGluZGV4KSA6IHJ1bGVyLnN0YWNrQ291bnQ7XG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IG9wdGlvbnMuYmFyVGhpY2tuZXNzID09PSAnZmxleCcgPyBjb21wdXRlRmxleENhdGVnb3J5VHJhaXRzKGluZGV4LCBydWxlciwgb3B0aW9ucywgc3RhY2tDb3VudCkgOiBjb21wdXRlRml0Q2F0ZWdvcnlUcmFpdHMoaW5kZXgsIHJ1bGVyLCBvcHRpb25zLCBzdGFja0NvdW50KTtcbiAgICAgICAgICAgIGNvbnN0IHN0YWNrSW5kZXggPSB0aGlzLl9nZXRTdGFja0luZGV4KHRoaXMuaW5kZXgsIHRoaXMuX2NhY2hlZE1ldGEuc3RhY2ssIHNraXBOdWxsID8gaW5kZXggOiB1bmRlZmluZWQpO1xuICAgICAgICAgICAgY2VudGVyID0gcmFuZ2Uuc3RhcnQgKyByYW5nZS5jaHVuayAqIHN0YWNrSW5kZXggKyByYW5nZS5jaHVuayAvIDI7XG4gICAgICAgICAgICBzaXplID0gTWF0aC5taW4obWF4QmFyVGhpY2tuZXNzLCByYW5nZS5jaHVuayAqIHJhbmdlLnJhdGlvKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNlbnRlciA9IHNjYWxlLmdldFBpeGVsRm9yVmFsdWUodGhpcy5nZXRQYXJzZWQoaW5kZXgpW3NjYWxlLmF4aXNdLCBpbmRleCk7XG4gICAgICAgICAgICBzaXplID0gTWF0aC5taW4obWF4QmFyVGhpY2tuZXNzLCBydWxlci5taW4gKiBydWxlci5yYXRpbyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJhc2U6IGNlbnRlciAtIHNpemUgLyAyLFxuICAgICAgICAgICAgaGVhZDogY2VudGVyICsgc2l6ZSAvIDIsXG4gICAgICAgICAgICBjZW50ZXIsXG4gICAgICAgICAgICBzaXplXG4gICAgICAgIH07XG4gICAgfVxuICAgIGRyYXcoKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCB2U2NhbGUgPSBtZXRhLnZTY2FsZTtcbiAgICAgICAgY29uc3QgcmVjdHMgPSBtZXRhLmRhdGE7XG4gICAgICAgIGNvbnN0IGlsZW4gPSByZWN0cy5sZW5ndGg7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgZm9yKDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBpZiAodGhpcy5nZXRQYXJzZWQoaSlbdlNjYWxlLmF4aXNdICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVjdHNbaV0uZHJhdyh0aGlzLl9jdHgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5jbGFzcyBCdWJibGVDb250cm9sbGVyIGV4dGVuZHMgRGF0YXNldENvbnRyb2xsZXIge1xuICAgIHN0YXRpYyBpZCA9ICdidWJibGUnO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgZGF0YXNldEVsZW1lbnRUeXBlOiBmYWxzZSxcbiAgICAgICAgZGF0YUVsZW1lbnRUeXBlOiAncG9pbnQnLFxuICAgICAgICBhbmltYXRpb25zOiB7XG4gICAgICAgICAgICBudW1iZXJzOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgICAgICAgICAgcHJvcGVydGllczogW1xuICAgICAgICAgICAgICAgICAgICAneCcsXG4gICAgICAgICAgICAgICAgICAgICd5JyxcbiAgICAgICAgICAgICAgICAgICAgJ2JvcmRlcldpZHRoJyxcbiAgICAgICAgICAgICAgICAgICAgJ3JhZGl1cydcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuIHN0YXRpYyBvdmVycmlkZXMgPSB7XG4gICAgICAgIHNjYWxlczoge1xuICAgICAgICAgICAgeDoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5lYXInXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeToge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5lYXInXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGluaXRpYWxpemUoKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlT3B0aW9uU2hhcmluZyA9IHRydWU7XG4gICAgICAgIHN1cGVyLmluaXRpYWxpemUoKTtcbiAgICB9XG4gcGFyc2VQcmltaXRpdmVEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCBwYXJzZWQgPSBzdXBlci5wYXJzZVByaW1pdGl2ZURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHBhcnNlZC5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBwYXJzZWRbaV0uX2N1c3RvbSA9IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpICsgc3RhcnQpLnJhZGl1cztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgIH1cbiBwYXJzZUFycmF5RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gc3VwZXIucGFyc2VBcnJheURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHBhcnNlZC5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gZGF0YVtzdGFydCArIGldO1xuICAgICAgICAgICAgcGFyc2VkW2ldLl9jdXN0b20gPSB2YWx1ZU9yRGVmYXVsdChpdGVtWzJdLCB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSArIHN0YXJ0KS5yYWRpdXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgfVxuIHBhcnNlT2JqZWN0RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gc3VwZXIucGFyc2VPYmplY3REYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCk7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBwYXJzZWQubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IGRhdGFbc3RhcnQgKyBpXTtcbiAgICAgICAgICAgIHBhcnNlZFtpXS5fY3VzdG9tID0gdmFsdWVPckRlZmF1bHQoaXRlbSAmJiBpdGVtLnIgJiYgK2l0ZW0uciwgdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGkgKyBzdGFydCkucmFkaXVzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgIH1cbiBnZXRNYXhPdmVyZmxvdygpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuX2NhY2hlZE1ldGEuZGF0YTtcbiAgICAgICAgbGV0IG1heCA9IDA7XG4gICAgICAgIGZvcihsZXQgaSA9IGRhdGEubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpe1xuICAgICAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCBkYXRhW2ldLnNpemUodGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGkpKSAvIDIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXggPiAwICYmIG1heDtcbiAgICB9XG4gZ2V0TGFiZWxBbmRWYWx1ZShpbmRleCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgbGFiZWxzID0gdGhpcy5jaGFydC5kYXRhLmxhYmVscyB8fCBbXTtcbiAgICAgICAgY29uc3QgeyB4U2NhbGUgLCB5U2NhbGUgIH0gPSBtZXRhO1xuICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgICAgIGNvbnN0IHggPSB4U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWQueCk7XG4gICAgICAgIGNvbnN0IHkgPSB5U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWQueSk7XG4gICAgICAgIGNvbnN0IHIgPSBwYXJzZWQuX2N1c3RvbTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhYmVsOiBsYWJlbHNbaW5kZXhdIHx8ICcnLFxuICAgICAgICAgICAgdmFsdWU6ICcoJyArIHggKyAnLCAnICsgeSArIChyID8gJywgJyArIHIgOiAnJykgKyAnKSdcbiAgICAgICAgfTtcbiAgICB9XG4gICAgdXBkYXRlKG1vZGUpIHtcbiAgICAgICAgY29uc3QgcG9pbnRzID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhO1xuICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnRzKHBvaW50cywgMCwgcG9pbnRzLmxlbmd0aCwgbW9kZSk7XG4gICAgfVxuICAgIHVwZGF0ZUVsZW1lbnRzKHBvaW50cywgc3RhcnQsIGNvdW50LCBtb2RlKSB7XG4gICAgICAgIGNvbnN0IHJlc2V0ID0gbW9kZSA9PT0gJ3Jlc2V0JztcbiAgICAgICAgY29uc3QgeyBpU2NhbGUgLCB2U2NhbGUgIH0gPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCB7IHNoYXJlZE9wdGlvbnMgLCBpbmNsdWRlT3B0aW9ucyAgfSA9IHRoaXMuX2dldFNoYXJlZE9wdGlvbnMoc3RhcnQsIG1vZGUpO1xuICAgICAgICBjb25zdCBpQXhpcyA9IGlTY2FsZS5heGlzO1xuICAgICAgICBjb25zdCB2QXhpcyA9IHZTY2FsZS5heGlzO1xuICAgICAgICBmb3IobGV0IGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7IGkrKyl7XG4gICAgICAgICAgICBjb25zdCBwb2ludCA9IHBvaW50c1tpXTtcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZCA9ICFyZXNldCAmJiB0aGlzLmdldFBhcnNlZChpKTtcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGlQaXhlbCA9IHByb3BlcnRpZXNbaUF4aXNdID0gcmVzZXQgPyBpU2NhbGUuZ2V0UGl4ZWxGb3JEZWNpbWFsKDAuNSkgOiBpU2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShwYXJzZWRbaUF4aXNdKTtcbiAgICAgICAgICAgIGNvbnN0IHZQaXhlbCA9IHByb3BlcnRpZXNbdkF4aXNdID0gcmVzZXQgPyB2U2NhbGUuZ2V0QmFzZVBpeGVsKCkgOiB2U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShwYXJzZWRbdkF4aXNdKTtcbiAgICAgICAgICAgIHByb3BlcnRpZXMuc2tpcCA9IGlzTmFOKGlQaXhlbCkgfHwgaXNOYU4odlBpeGVsKTtcbiAgICAgICAgICAgIGlmIChpbmNsdWRlT3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMub3B0aW9ucyA9IHNoYXJlZE9wdGlvbnMgfHwgdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGksIHBvaW50LmFjdGl2ZSA/ICdhY3RpdmUnIDogbW9kZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXMub3B0aW9ucy5yYWRpdXMgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudXBkYXRlRWxlbWVudChwb2ludCwgaSwgcHJvcGVydGllcywgbW9kZSk7XG4gICAgICAgIH1cbiAgICB9XG4gcmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpbmRleCwgbW9kZSkge1xuICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgICAgIGxldCB2YWx1ZXMgPSBzdXBlci5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGluZGV4LCBtb2RlKTtcbiAgICAgICAgaWYgKHZhbHVlcy4kc2hhcmVkKSB7XG4gICAgICAgICAgICB2YWx1ZXMgPSBPYmplY3QuYXNzaWduKHt9LCB2YWx1ZXMsIHtcbiAgICAgICAgICAgICAgICAkc2hhcmVkOiBmYWxzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmFkaXVzID0gdmFsdWVzLnJhZGl1cztcbiAgICAgICAgaWYgKG1vZGUgIT09ICdhY3RpdmUnKSB7XG4gICAgICAgICAgICB2YWx1ZXMucmFkaXVzID0gMDtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZXMucmFkaXVzICs9IHZhbHVlT3JEZWZhdWx0KHBhcnNlZCAmJiBwYXJzZWQuX2N1c3RvbSwgcmFkaXVzKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldFJhdGlvQW5kT2Zmc2V0KHJvdGF0aW9uLCBjaXJjdW1mZXJlbmNlLCBjdXRvdXQpIHtcbiAgICBsZXQgcmF0aW9YID0gMTtcbiAgICBsZXQgcmF0aW9ZID0gMTtcbiAgICBsZXQgb2Zmc2V0WCA9IDA7XG4gICAgbGV0IG9mZnNldFkgPSAwO1xuICAgIGlmIChjaXJjdW1mZXJlbmNlIDwgVEFVKSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0QW5nbGUgPSByb3RhdGlvbjtcbiAgICAgICAgY29uc3QgZW5kQW5nbGUgPSBzdGFydEFuZ2xlICsgY2lyY3VtZmVyZW5jZTtcbiAgICAgICAgY29uc3Qgc3RhcnRYID0gTWF0aC5jb3Moc3RhcnRBbmdsZSk7XG4gICAgICAgIGNvbnN0IHN0YXJ0WSA9IE1hdGguc2luKHN0YXJ0QW5nbGUpO1xuICAgICAgICBjb25zdCBlbmRYID0gTWF0aC5jb3MoZW5kQW5nbGUpO1xuICAgICAgICBjb25zdCBlbmRZID0gTWF0aC5zaW4oZW5kQW5nbGUpO1xuICAgICAgICBjb25zdCBjYWxjTWF4ID0gKGFuZ2xlLCBhLCBiKT0+X2FuZ2xlQmV0d2VlbihhbmdsZSwgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIHRydWUpID8gMSA6IE1hdGgubWF4KGEsIGEgKiBjdXRvdXQsIGIsIGIgKiBjdXRvdXQpO1xuICAgICAgICBjb25zdCBjYWxjTWluID0gKGFuZ2xlLCBhLCBiKT0+X2FuZ2xlQmV0d2VlbihhbmdsZSwgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIHRydWUpID8gLTEgOiBNYXRoLm1pbihhLCBhICogY3V0b3V0LCBiLCBiICogY3V0b3V0KTtcbiAgICAgICAgY29uc3QgbWF4WCA9IGNhbGNNYXgoMCwgc3RhcnRYLCBlbmRYKTtcbiAgICAgICAgY29uc3QgbWF4WSA9IGNhbGNNYXgoSEFMRl9QSSwgc3RhcnRZLCBlbmRZKTtcbiAgICAgICAgY29uc3QgbWluWCA9IGNhbGNNaW4oUEksIHN0YXJ0WCwgZW5kWCk7XG4gICAgICAgIGNvbnN0IG1pblkgPSBjYWxjTWluKFBJICsgSEFMRl9QSSwgc3RhcnRZLCBlbmRZKTtcbiAgICAgICAgcmF0aW9YID0gKG1heFggLSBtaW5YKSAvIDI7XG4gICAgICAgIHJhdGlvWSA9IChtYXhZIC0gbWluWSkgLyAyO1xuICAgICAgICBvZmZzZXRYID0gLShtYXhYICsgbWluWCkgLyAyO1xuICAgICAgICBvZmZzZXRZID0gLShtYXhZICsgbWluWSkgLyAyO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICByYXRpb1gsXG4gICAgICAgIHJhdGlvWSxcbiAgICAgICAgb2Zmc2V0WCxcbiAgICAgICAgb2Zmc2V0WVxuICAgIH07XG59XG5jbGFzcyBEb3VnaG51dENvbnRyb2xsZXIgZXh0ZW5kcyBEYXRhc2V0Q29udHJvbGxlciB7XG4gICAgc3RhdGljIGlkID0gJ2RvdWdobnV0JztcbiBzdGF0aWMgZGVmYXVsdHMgPSB7XG4gICAgICAgIGRhdGFzZXRFbGVtZW50VHlwZTogZmFsc2UsXG4gICAgICAgIGRhdGFFbGVtZW50VHlwZTogJ2FyYycsXG4gICAgICAgIGFuaW1hdGlvbjoge1xuICAgICAgICAgICAgYW5pbWF0ZVJvdGF0ZTogdHJ1ZSxcbiAgICAgICAgICAgIGFuaW1hdGVTY2FsZTogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgYW5pbWF0aW9uczoge1xuICAgICAgICAgICAgbnVtYmVyczoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgJ2NpcmN1bWZlcmVuY2UnLFxuICAgICAgICAgICAgICAgICAgICAnZW5kQW5nbGUnLFxuICAgICAgICAgICAgICAgICAgICAnaW5uZXJSYWRpdXMnLFxuICAgICAgICAgICAgICAgICAgICAnb3V0ZXJSYWRpdXMnLFxuICAgICAgICAgICAgICAgICAgICAnc3RhcnRBbmdsZScsXG4gICAgICAgICAgICAgICAgICAgICd4JyxcbiAgICAgICAgICAgICAgICAgICAgJ3knLFxuICAgICAgICAgICAgICAgICAgICAnb2Zmc2V0JyxcbiAgICAgICAgICAgICAgICAgICAgJ2JvcmRlcldpZHRoJyxcbiAgICAgICAgICAgICAgICAgICAgJ3NwYWNpbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjdXRvdXQ6ICc1MCUnLFxuICAgICAgICByb3RhdGlvbjogMCxcbiAgICAgICAgY2lyY3VtZmVyZW5jZTogMzYwLFxuICAgICAgICByYWRpdXM6ICcxMDAlJyxcbiAgICAgICAgc3BhY2luZzogMCxcbiAgICAgICAgaW5kZXhBeGlzOiAncidcbiAgICB9O1xuICAgIHN0YXRpYyBkZXNjcmlwdG9ycyA9IHtcbiAgICAgICAgX3NjcmlwdGFibGU6IChuYW1lKT0+bmFtZSAhPT0gJ3NwYWNpbmcnLFxuICAgICAgICBfaW5kZXhhYmxlOiAobmFtZSk9Pm5hbWUgIT09ICdzcGFjaW5nJyAmJiAhbmFtZS5zdGFydHNXaXRoKCdib3JkZXJEYXNoJykgJiYgIW5hbWUuc3RhcnRzV2l0aCgnaG92ZXJCb3JkZXJEYXNoJylcbiAgICB9O1xuIHN0YXRpYyBvdmVycmlkZXMgPSB7XG4gICAgICAgIGFzcGVjdFJhdGlvOiAxLFxuICAgICAgICBwbHVnaW5zOiB7XG4gICAgICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVMYWJlbHMgKGNoYXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gY2hhcnQuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmxhYmVscy5sZW5ndGggJiYgZGF0YS5kYXRhc2V0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGxhYmVsczogeyBwb2ludFN0eWxlICwgY29sb3IgIH0gIH0gPSBjaGFydC5sZWdlbmQub3B0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5sYWJlbHMubWFwKChsYWJlbCwgaSk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHlsZSA9IG1ldGEuY29udHJvbGxlci5nZXRTdHlsZShpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGxhYmVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbFN0eWxlOiBzdHlsZS5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VTdHlsZTogc3R5bGUuYm9yZGVyQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250Q29sb3I6IGNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZVdpZHRoOiBzdHlsZS5ib3JkZXJXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50U3R5bGU6IHBvaW50U3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWRkZW46ICFjaGFydC5nZXREYXRhVmlzaWJpbGl0eShpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uQ2xpY2sgKGUsIGxlZ2VuZEl0ZW0sIGxlZ2VuZCkge1xuICAgICAgICAgICAgICAgICAgICBsZWdlbmQuY2hhcnQudG9nZ2xlRGF0YVZpc2liaWxpdHkobGVnZW5kSXRlbS5pbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIGxlZ2VuZC5jaGFydC51cGRhdGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKGNoYXJ0LCBkYXRhc2V0SW5kZXgpe1xuICAgICAgICBzdXBlcihjaGFydCwgZGF0YXNldEluZGV4KTtcbiAgICAgICAgdGhpcy5lbmFibGVPcHRpb25TaGFyaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5pbm5lclJhZGl1cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5vdXRlclJhZGl1cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5vZmZzZXRYID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm9mZnNldFkgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGxpbmtTY2FsZXMoKSB7fVxuIHBhcnNlKHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5nZXREYXRhc2V0KCkuZGF0YTtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGlmICh0aGlzLl9wYXJzaW5nID09PSBmYWxzZSkge1xuICAgICAgICAgICAgbWV0YS5fcGFyc2VkID0gZGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBnZXR0ZXIgPSAoaSk9PitkYXRhW2ldO1xuICAgICAgICAgICAgaWYgKGlzT2JqZWN0KGRhdGFbc3RhcnRdKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsga2V5ID0ndmFsdWUnICB9ID0gdGhpcy5fcGFyc2luZztcbiAgICAgICAgICAgICAgICBnZXR0ZXIgPSAoaSk9PityZXNvbHZlT2JqZWN0S2V5KGRhdGFbaV0sIGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgaSwgaWxlbjtcbiAgICAgICAgICAgIGZvcihpID0gc3RhcnQsIGlsZW4gPSBzdGFydCArIGNvdW50OyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgICAgICBtZXRhLl9wYXJzZWRbaV0gPSBnZXR0ZXIoaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gX2dldFJvdGF0aW9uKCkge1xuICAgICAgICByZXR1cm4gdG9SYWRpYW5zKHRoaXMub3B0aW9ucy5yb3RhdGlvbiAtIDkwKTtcbiAgICB9XG4gX2dldENpcmN1bWZlcmVuY2UoKSB7XG4gICAgICAgIHJldHVybiB0b1JhZGlhbnModGhpcy5vcHRpb25zLmNpcmN1bWZlcmVuY2UpO1xuICAgIH1cbiBfZ2V0Um90YXRpb25FeHRlbnRzKCkge1xuICAgICAgICBsZXQgbWluID0gVEFVO1xuICAgICAgICBsZXQgbWF4ID0gLVRBVTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0cy5sZW5ndGg7ICsraSl7XG4gICAgICAgICAgICBpZiAodGhpcy5jaGFydC5pc0RhdGFzZXRWaXNpYmxlKGkpICYmIHRoaXMuY2hhcnQuZ2V0RGF0YXNldE1ldGEoaSkudHlwZSA9PT0gdGhpcy5fdHlwZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSB0aGlzLmNoYXJ0LmdldERhdGFzZXRNZXRhKGkpLmNvbnRyb2xsZXI7XG4gICAgICAgICAgICAgICAgY29uc3Qgcm90YXRpb24gPSBjb250cm9sbGVyLl9nZXRSb3RhdGlvbigpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNpcmN1bWZlcmVuY2UgPSBjb250cm9sbGVyLl9nZXRDaXJjdW1mZXJlbmNlKCk7XG4gICAgICAgICAgICAgICAgbWluID0gTWF0aC5taW4obWluLCByb3RhdGlvbik7XG4gICAgICAgICAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCByb3RhdGlvbiArIGNpcmN1bWZlcmVuY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByb3RhdGlvbjogbWluLFxuICAgICAgICAgICAgY2lyY3VtZmVyZW5jZTogbWF4IC0gbWluXG4gICAgICAgIH07XG4gICAgfVxuIHVwZGF0ZShtb2RlKSB7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3QgeyBjaGFydEFyZWEgIH0gPSBjaGFydDtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGFyY3MgPSBtZXRhLmRhdGE7XG4gICAgICAgIGNvbnN0IHNwYWNpbmcgPSB0aGlzLmdldE1heEJvcmRlcldpZHRoKCkgKyB0aGlzLmdldE1heE9mZnNldChhcmNzKSArIHRoaXMub3B0aW9ucy5zcGFjaW5nO1xuICAgICAgICBjb25zdCBtYXhTaXplID0gTWF0aC5tYXgoKE1hdGgubWluKGNoYXJ0QXJlYS53aWR0aCwgY2hhcnRBcmVhLmhlaWdodCkgLSBzcGFjaW5nKSAvIDIsIDApO1xuICAgICAgICBjb25zdCBjdXRvdXQgPSBNYXRoLm1pbih0b1BlcmNlbnRhZ2UodGhpcy5vcHRpb25zLmN1dG91dCwgbWF4U2l6ZSksIDEpO1xuICAgICAgICBjb25zdCBjaGFydFdlaWdodCA9IHRoaXMuX2dldFJpbmdXZWlnaHQodGhpcy5pbmRleCk7XG4gICAgICAgIGNvbnN0IHsgY2lyY3VtZmVyZW5jZSAsIHJvdGF0aW9uICB9ID0gdGhpcy5fZ2V0Um90YXRpb25FeHRlbnRzKCk7XG4gICAgICAgIGNvbnN0IHsgcmF0aW9YICwgcmF0aW9ZICwgb2Zmc2V0WCAsIG9mZnNldFkgIH0gPSBnZXRSYXRpb0FuZE9mZnNldChyb3RhdGlvbiwgY2lyY3VtZmVyZW5jZSwgY3V0b3V0KTtcbiAgICAgICAgY29uc3QgbWF4V2lkdGggPSAoY2hhcnRBcmVhLndpZHRoIC0gc3BhY2luZykgLyByYXRpb1g7XG4gICAgICAgIGNvbnN0IG1heEhlaWdodCA9IChjaGFydEFyZWEuaGVpZ2h0IC0gc3BhY2luZykgLyByYXRpb1k7XG4gICAgICAgIGNvbnN0IG1heFJhZGl1cyA9IE1hdGgubWF4KE1hdGgubWluKG1heFdpZHRoLCBtYXhIZWlnaHQpIC8gMiwgMCk7XG4gICAgICAgIGNvbnN0IG91dGVyUmFkaXVzID0gdG9EaW1lbnNpb24odGhpcy5vcHRpb25zLnJhZGl1cywgbWF4UmFkaXVzKTtcbiAgICAgICAgY29uc3QgaW5uZXJSYWRpdXMgPSBNYXRoLm1heChvdXRlclJhZGl1cyAqIGN1dG91dCwgMCk7XG4gICAgICAgIGNvbnN0IHJhZGl1c0xlbmd0aCA9IChvdXRlclJhZGl1cyAtIGlubmVyUmFkaXVzKSAvIHRoaXMuX2dldFZpc2libGVEYXRhc2V0V2VpZ2h0VG90YWwoKTtcbiAgICAgICAgdGhpcy5vZmZzZXRYID0gb2Zmc2V0WCAqIG91dGVyUmFkaXVzO1xuICAgICAgICB0aGlzLm9mZnNldFkgPSBvZmZzZXRZICogb3V0ZXJSYWRpdXM7XG4gICAgICAgIG1ldGEudG90YWwgPSB0aGlzLmNhbGN1bGF0ZVRvdGFsKCk7XG4gICAgICAgIHRoaXMub3V0ZXJSYWRpdXMgPSBvdXRlclJhZGl1cyAtIHJhZGl1c0xlbmd0aCAqIHRoaXMuX2dldFJpbmdXZWlnaHRPZmZzZXQodGhpcy5pbmRleCk7XG4gICAgICAgIHRoaXMuaW5uZXJSYWRpdXMgPSBNYXRoLm1heCh0aGlzLm91dGVyUmFkaXVzIC0gcmFkaXVzTGVuZ3RoICogY2hhcnRXZWlnaHQsIDApO1xuICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnRzKGFyY3MsIDAsIGFyY3MubGVuZ3RoLCBtb2RlKTtcbiAgICB9XG4gX2NpcmN1bWZlcmVuY2UoaSwgcmVzZXQpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGNpcmN1bWZlcmVuY2UgPSB0aGlzLl9nZXRDaXJjdW1mZXJlbmNlKCk7XG4gICAgICAgIGlmIChyZXNldCAmJiBvcHRzLmFuaW1hdGlvbi5hbmltYXRlUm90YXRlIHx8ICF0aGlzLmNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGkpIHx8IG1ldGEuX3BhcnNlZFtpXSA9PT0gbnVsbCB8fCBtZXRhLmRhdGFbaV0uaGlkZGVuKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5jYWxjdWxhdGVDaXJjdW1mZXJlbmNlKG1ldGEuX3BhcnNlZFtpXSAqIGNpcmN1bWZlcmVuY2UgLyBUQVUpO1xuICAgIH1cbiAgICB1cGRhdGVFbGVtZW50cyhhcmNzLCBzdGFydCwgY291bnQsIG1vZGUpIHtcbiAgICAgICAgY29uc3QgcmVzZXQgPSBtb2RlID09PSAncmVzZXQnO1xuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGNvbnN0IGNoYXJ0QXJlYSA9IGNoYXJ0LmNoYXJ0QXJlYTtcbiAgICAgICAgY29uc3Qgb3B0cyA9IGNoYXJ0Lm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbk9wdHMgPSBvcHRzLmFuaW1hdGlvbjtcbiAgICAgICAgY29uc3QgY2VudGVyWCA9IChjaGFydEFyZWEubGVmdCArIGNoYXJ0QXJlYS5yaWdodCkgLyAyO1xuICAgICAgICBjb25zdCBjZW50ZXJZID0gKGNoYXJ0QXJlYS50b3AgKyBjaGFydEFyZWEuYm90dG9tKSAvIDI7XG4gICAgICAgIGNvbnN0IGFuaW1hdGVTY2FsZSA9IHJlc2V0ICYmIGFuaW1hdGlvbk9wdHMuYW5pbWF0ZVNjYWxlO1xuICAgICAgICBjb25zdCBpbm5lclJhZGl1cyA9IGFuaW1hdGVTY2FsZSA/IDAgOiB0aGlzLmlubmVyUmFkaXVzO1xuICAgICAgICBjb25zdCBvdXRlclJhZGl1cyA9IGFuaW1hdGVTY2FsZSA/IDAgOiB0aGlzLm91dGVyUmFkaXVzO1xuICAgICAgICBjb25zdCB7IHNoYXJlZE9wdGlvbnMgLCBpbmNsdWRlT3B0aW9ucyAgfSA9IHRoaXMuX2dldFNoYXJlZE9wdGlvbnMoc3RhcnQsIG1vZGUpO1xuICAgICAgICBsZXQgc3RhcnRBbmdsZSA9IHRoaXMuX2dldFJvdGF0aW9uKCk7XG4gICAgICAgIGxldCBpO1xuICAgICAgICBmb3IoaSA9IDA7IGkgPCBzdGFydDsgKytpKXtcbiAgICAgICAgICAgIHN0YXJ0QW5nbGUgKz0gdGhpcy5fY2lyY3VtZmVyZW5jZShpLCByZXNldCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7ICsraSl7XG4gICAgICAgICAgICBjb25zdCBjaXJjdW1mZXJlbmNlID0gdGhpcy5fY2lyY3VtZmVyZW5jZShpLCByZXNldCk7XG4gICAgICAgICAgICBjb25zdCBhcmMgPSBhcmNzW2ldO1xuICAgICAgICAgICAgY29uc3QgcHJvcGVydGllcyA9IHtcbiAgICAgICAgICAgICAgICB4OiBjZW50ZXJYICsgdGhpcy5vZmZzZXRYLFxuICAgICAgICAgICAgICAgIHk6IGNlbnRlclkgKyB0aGlzLm9mZnNldFksXG4gICAgICAgICAgICAgICAgc3RhcnRBbmdsZSxcbiAgICAgICAgICAgICAgICBlbmRBbmdsZTogc3RhcnRBbmdsZSArIGNpcmN1bWZlcmVuY2UsXG4gICAgICAgICAgICAgICAgY2lyY3VtZmVyZW5jZSxcbiAgICAgICAgICAgICAgICBvdXRlclJhZGl1cyxcbiAgICAgICAgICAgICAgICBpbm5lclJhZGl1c1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChpbmNsdWRlT3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMub3B0aW9ucyA9IHNoYXJlZE9wdGlvbnMgfHwgdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGksIGFyYy5hY3RpdmUgPyAnYWN0aXZlJyA6IG1vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RhcnRBbmdsZSArPSBjaXJjdW1mZXJlbmNlO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50KGFyYywgaSwgcHJvcGVydGllcywgbW9kZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2FsY3VsYXRlVG90YWwoKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBtZXRhRGF0YSA9IG1ldGEuZGF0YTtcbiAgICAgICAgbGV0IHRvdGFsID0gMDtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGZvcihpID0gMDsgaSA8IG1ldGFEYXRhLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gbWV0YS5fcGFyc2VkW2ldO1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsICYmICFpc05hTih2YWx1ZSkgJiYgdGhpcy5jaGFydC5nZXREYXRhVmlzaWJpbGl0eShpKSAmJiAhbWV0YURhdGFbaV0uaGlkZGVuKSB7XG4gICAgICAgICAgICAgICAgdG90YWwgKz0gTWF0aC5hYnModmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbDtcbiAgICB9XG4gICAgY2FsY3VsYXRlQ2lyY3VtZmVyZW5jZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCB0b3RhbCA9IHRoaXMuX2NhY2hlZE1ldGEudG90YWw7XG4gICAgICAgIGlmICh0b3RhbCA+IDAgJiYgIWlzTmFOKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIFRBVSAqIChNYXRoLmFicyh2YWx1ZSkgLyB0b3RhbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGdldExhYmVsQW5kVmFsdWUoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3QgbGFiZWxzID0gY2hhcnQuZGF0YS5sYWJlbHMgfHwgW107XG4gICAgICAgIGNvbnN0IHZhbHVlID0gZm9ybWF0TnVtYmVyKG1ldGEuX3BhcnNlZFtpbmRleF0sIGNoYXJ0Lm9wdGlvbnMubG9jYWxlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhYmVsOiBsYWJlbHNbaW5kZXhdIHx8ICcnLFxuICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZ2V0TWF4Qm9yZGVyV2lkdGgoYXJjcykge1xuICAgICAgICBsZXQgbWF4ID0gMDtcbiAgICAgICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgICAgICBsZXQgaSwgaWxlbiwgbWV0YSwgY29udHJvbGxlciwgb3B0aW9ucztcbiAgICAgICAgaWYgKCFhcmNzKSB7XG4gICAgICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBjaGFydC5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICAgICAgaWYgKGNoYXJ0LmlzRGF0YXNldFZpc2libGUoaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGkpO1xuICAgICAgICAgICAgICAgICAgICBhcmNzID0gbWV0YS5kYXRhO1xuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyID0gbWV0YS5jb250cm9sbGVyO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFhcmNzKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBhcmNzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBvcHRpb25zID0gY29udHJvbGxlci5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGkpO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYm9yZGVyQWxpZ24gIT09ICdpbm5lcicpIHtcbiAgICAgICAgICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIG9wdGlvbnMuYm9yZGVyV2lkdGggfHwgMCwgb3B0aW9ucy5ob3ZlckJvcmRlcldpZHRoIHx8IDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXg7XG4gICAgfVxuICAgIGdldE1heE9mZnNldChhcmNzKSB7XG4gICAgICAgIGxldCBtYXggPSAwO1xuICAgICAgICBmb3IobGV0IGkgPSAwLCBpbGVuID0gYXJjcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpKTtcbiAgICAgICAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgb3B0aW9ucy5vZmZzZXQgfHwgMCwgb3B0aW9ucy5ob3Zlck9mZnNldCB8fCAwKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWF4O1xuICAgIH1cbiBfZ2V0UmluZ1dlaWdodE9mZnNldChkYXRhc2V0SW5kZXgpIHtcbiAgICAgICAgbGV0IHJpbmdXZWlnaHRPZmZzZXQgPSAwO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgZGF0YXNldEluZGV4OyArK2kpe1xuICAgICAgICAgICAgaWYgKHRoaXMuY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpKSkge1xuICAgICAgICAgICAgICAgIHJpbmdXZWlnaHRPZmZzZXQgKz0gdGhpcy5fZ2V0UmluZ1dlaWdodChpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmluZ1dlaWdodE9mZnNldDtcbiAgICB9XG4gX2dldFJpbmdXZWlnaHQoZGF0YXNldEluZGV4KSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1heCh2YWx1ZU9yRGVmYXVsdCh0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XS53ZWlnaHQsIDEpLCAwKTtcbiAgICB9XG4gX2dldFZpc2libGVEYXRhc2V0V2VpZ2h0VG90YWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRSaW5nV2VpZ2h0T2Zmc2V0KHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0cy5sZW5ndGgpIHx8IDE7XG4gICAgfVxufVxuXG5jbGFzcyBMaW5lQ29udHJvbGxlciBleHRlbmRzIERhdGFzZXRDb250cm9sbGVyIHtcbiAgICBzdGF0aWMgaWQgPSAnbGluZSc7XG4gc3RhdGljIGRlZmF1bHRzID0ge1xuICAgICAgICBkYXRhc2V0RWxlbWVudFR5cGU6ICdsaW5lJyxcbiAgICAgICAgZGF0YUVsZW1lbnRUeXBlOiAncG9pbnQnLFxuICAgICAgICBzaG93TGluZTogdHJ1ZSxcbiAgICAgICAgc3BhbkdhcHM6IGZhbHNlXG4gICAgfTtcbiBzdGF0aWMgb3ZlcnJpZGVzID0ge1xuICAgICAgICBzY2FsZXM6IHtcbiAgICAgICAgICAgIF9pbmRleF86IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnY2F0ZWdvcnknXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3ZhbHVlXzoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5lYXInXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGluaXRpYWxpemUoKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlT3B0aW9uU2hhcmluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuc3VwcG9ydHNEZWNpbWF0aW9uID0gdHJ1ZTtcbiAgICAgICAgc3VwZXIuaW5pdGlhbGl6ZSgpO1xuICAgIH1cbiAgICB1cGRhdGUobW9kZSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgeyBkYXRhc2V0OiBsaW5lICwgZGF0YTogcG9pbnRzID0gW10gLCBfZGF0YXNldCAgfSA9IG1ldGE7XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbnNEaXNhYmxlZCA9IHRoaXMuY2hhcnQuX2FuaW1hdGlvbnNEaXNhYmxlZDtcbiAgICAgICAgbGV0IHsgc3RhcnQgLCBjb3VudCAgfSA9IF9nZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzKG1ldGEsIHBvaW50cywgYW5pbWF0aW9uc0Rpc2FibGVkKTtcbiAgICAgICAgdGhpcy5fZHJhd1N0YXJ0ID0gc3RhcnQ7XG4gICAgICAgIHRoaXMuX2RyYXdDb3VudCA9IGNvdW50O1xuICAgICAgICBpZiAoX3NjYWxlUmFuZ2VzQ2hhbmdlZChtZXRhKSkge1xuICAgICAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICAgICAgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGxpbmUuX2NoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgbGluZS5fZGF0YXNldEluZGV4ID0gdGhpcy5pbmRleDtcbiAgICAgICAgbGluZS5fZGVjaW1hdGVkID0gISFfZGF0YXNldC5fZGVjaW1hdGVkO1xuICAgICAgICBsaW5lLnBvaW50cyA9IHBvaW50cztcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMucmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9ucyhtb2RlKTtcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuc2hvd0xpbmUpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuYm9yZGVyV2lkdGggPSAwO1xuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMuc2VnbWVudCA9IHRoaXMub3B0aW9ucy5zZWdtZW50O1xuICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQobGluZSwgdW5kZWZpbmVkLCB7XG4gICAgICAgICAgICBhbmltYXRlZDogIWFuaW1hdGlvbnNEaXNhYmxlZCxcbiAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgfSwgbW9kZSk7XG4gICAgICAgIHRoaXMudXBkYXRlRWxlbWVudHMocG9pbnRzLCBzdGFydCwgY291bnQsIG1vZGUpO1xuICAgIH1cbiAgICB1cGRhdGVFbGVtZW50cyhwb2ludHMsIHN0YXJ0LCBjb3VudCwgbW9kZSkge1xuICAgICAgICBjb25zdCByZXNldCA9IG1vZGUgPT09ICdyZXNldCc7XG4gICAgICAgIGNvbnN0IHsgaVNjYWxlICwgdlNjYWxlICwgX3N0YWNrZWQgLCBfZGF0YXNldCAgfSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IHsgc2hhcmVkT3B0aW9ucyAsIGluY2x1ZGVPcHRpb25zICB9ID0gdGhpcy5fZ2V0U2hhcmVkT3B0aW9ucyhzdGFydCwgbW9kZSk7XG4gICAgICAgIGNvbnN0IGlBeGlzID0gaVNjYWxlLmF4aXM7XG4gICAgICAgIGNvbnN0IHZBeGlzID0gdlNjYWxlLmF4aXM7XG4gICAgICAgIGNvbnN0IHsgc3BhbkdhcHMgLCBzZWdtZW50ICB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBtYXhHYXBMZW5ndGggPSBpc051bWJlcihzcGFuR2FwcykgPyBzcGFuR2FwcyA6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgICAgY29uc3QgZGlyZWN0VXBkYXRlID0gdGhpcy5jaGFydC5fYW5pbWF0aW9uc0Rpc2FibGVkIHx8IHJlc2V0IHx8IG1vZGUgPT09ICdub25lJztcbiAgICAgICAgY29uc3QgZW5kID0gc3RhcnQgKyBjb3VudDtcbiAgICAgICAgY29uc3QgcG9pbnRzQ291bnQgPSBwb2ludHMubGVuZ3RoO1xuICAgICAgICBsZXQgcHJldlBhcnNlZCA9IHN0YXJ0ID4gMCAmJiB0aGlzLmdldFBhcnNlZChzdGFydCAtIDEpO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgcG9pbnRzQ291bnQ7ICsraSl7XG4gICAgICAgICAgICBjb25zdCBwb2ludCA9IHBvaW50c1tpXTtcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSBkaXJlY3RVcGRhdGUgPyBwb2ludCA6IHt9O1xuICAgICAgICAgICAgaWYgKGkgPCBzdGFydCB8fCBpID49IGVuZCkge1xuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMuc2tpcCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpKTtcbiAgICAgICAgICAgIGNvbnN0IG51bGxEYXRhID0gaXNOdWxsT3JVbmRlZihwYXJzZWRbdkF4aXNdKTtcbiAgICAgICAgICAgIGNvbnN0IGlQaXhlbCA9IHByb3BlcnRpZXNbaUF4aXNdID0gaVNjYWxlLmdldFBpeGVsRm9yVmFsdWUocGFyc2VkW2lBeGlzXSwgaSk7XG4gICAgICAgICAgICBjb25zdCB2UGl4ZWwgPSBwcm9wZXJ0aWVzW3ZBeGlzXSA9IHJlc2V0IHx8IG51bGxEYXRhID8gdlNjYWxlLmdldEJhc2VQaXhlbCgpIDogdlNjYWxlLmdldFBpeGVsRm9yVmFsdWUoX3N0YWNrZWQgPyB0aGlzLmFwcGx5U3RhY2sodlNjYWxlLCBwYXJzZWQsIF9zdGFja2VkKSA6IHBhcnNlZFt2QXhpc10sIGkpO1xuICAgICAgICAgICAgcHJvcGVydGllcy5za2lwID0gaXNOYU4oaVBpeGVsKSB8fCBpc05hTih2UGl4ZWwpIHx8IG51bGxEYXRhO1xuICAgICAgICAgICAgcHJvcGVydGllcy5zdG9wID0gaSA+IDAgJiYgTWF0aC5hYnMocGFyc2VkW2lBeGlzXSAtIHByZXZQYXJzZWRbaUF4aXNdKSA+IG1heEdhcExlbmd0aDtcbiAgICAgICAgICAgIGlmIChzZWdtZW50KSB7XG4gICAgICAgICAgICAgICAgcHJvcGVydGllcy5wYXJzZWQgPSBwYXJzZWQ7XG4gICAgICAgICAgICAgICAgcHJvcGVydGllcy5yYXcgPSBfZGF0YXNldC5kYXRhW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGluY2x1ZGVPcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgcHJvcGVydGllcy5vcHRpb25zID0gc2hhcmVkT3B0aW9ucyB8fCB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSwgcG9pbnQuYWN0aXZlID8gJ2FjdGl2ZScgOiBtb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghZGlyZWN0VXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50KHBvaW50LCBpLCBwcm9wZXJ0aWVzLCBtb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByZXZQYXJzZWQgPSBwYXJzZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gZ2V0TWF4T3ZlcmZsb3coKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBkYXRhc2V0ID0gbWV0YS5kYXRhc2V0O1xuICAgICAgICBjb25zdCBib3JkZXIgPSBkYXRhc2V0Lm9wdGlvbnMgJiYgZGF0YXNldC5vcHRpb25zLmJvcmRlcldpZHRoIHx8IDA7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBtZXRhLmRhdGEgfHwgW107XG4gICAgICAgIGlmICghZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBib3JkZXI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZmlyc3RQb2ludCA9IGRhdGFbMF0uc2l6ZSh0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoMCkpO1xuICAgICAgICBjb25zdCBsYXN0UG9pbnQgPSBkYXRhW2RhdGEubGVuZ3RoIC0gMV0uc2l6ZSh0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoZGF0YS5sZW5ndGggLSAxKSk7XG4gICAgICAgIHJldHVybiBNYXRoLm1heChib3JkZXIsIGZpcnN0UG9pbnQsIGxhc3RQb2ludCkgLyAyO1xuICAgIH1cbiAgICBkcmF3KCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgbWV0YS5kYXRhc2V0LnVwZGF0ZUNvbnRyb2xQb2ludHModGhpcy5jaGFydC5jaGFydEFyZWEsIG1ldGEuaVNjYWxlLmF4aXMpO1xuICAgICAgICBzdXBlci5kcmF3KCk7XG4gICAgfVxufVxuXG5jbGFzcyBQb2xhckFyZWFDb250cm9sbGVyIGV4dGVuZHMgRGF0YXNldENvbnRyb2xsZXIge1xuICAgIHN0YXRpYyBpZCA9ICdwb2xhckFyZWEnO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgZGF0YUVsZW1lbnRUeXBlOiAnYXJjJyxcbiAgICAgICAgYW5pbWF0aW9uOiB7XG4gICAgICAgICAgICBhbmltYXRlUm90YXRlOiB0cnVlLFxuICAgICAgICAgICAgYW5pbWF0ZVNjYWxlOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgICAgICAgIG51bWJlcnM6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiBbXG4gICAgICAgICAgICAgICAgICAgICd4JyxcbiAgICAgICAgICAgICAgICAgICAgJ3knLFxuICAgICAgICAgICAgICAgICAgICAnc3RhcnRBbmdsZScsXG4gICAgICAgICAgICAgICAgICAgICdlbmRBbmdsZScsXG4gICAgICAgICAgICAgICAgICAgICdpbm5lclJhZGl1cycsXG4gICAgICAgICAgICAgICAgICAgICdvdXRlclJhZGl1cydcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGluZGV4QXhpczogJ3InLFxuICAgICAgICBzdGFydEFuZ2xlOiAwXG4gICAgfTtcbiBzdGF0aWMgb3ZlcnJpZGVzID0ge1xuICAgICAgICBhc3BlY3RSYXRpbzogMSxcbiAgICAgICAgcGx1Z2luczoge1xuICAgICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlTGFiZWxzIChjaGFydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IGNoYXJ0LmRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5sYWJlbHMubGVuZ3RoICYmIGRhdGEuZGF0YXNldHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBsYWJlbHM6IHsgcG9pbnRTdHlsZSAsIGNvbG9yICB9ICB9ID0gY2hhcnQubGVnZW5kLm9wdGlvbnM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEubGFiZWxzLm1hcCgobGFiZWwsIGkpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YSgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSBtZXRhLmNvbnRyb2xsZXIuZ2V0U3R5bGUoaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBsYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxTdHlsZTogc3R5bGUuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlU3R5bGU6IHN0eWxlLmJvcmRlckNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udENvbG9yOiBjb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVXaWR0aDogc3R5bGUuYm9yZGVyV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludFN0eWxlOiBwb2ludFN0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlkZGVuOiAhY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogaVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvbkNsaWNrIChlLCBsZWdlbmRJdGVtLCBsZWdlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGVnZW5kLmNoYXJ0LnRvZ2dsZURhdGFWaXNpYmlsaXR5KGxlZ2VuZEl0ZW0uaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBsZWdlbmQuY2hhcnQudXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzY2FsZXM6IHtcbiAgICAgICAgICAgIHI6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAncmFkaWFsTGluZWFyJyxcbiAgICAgICAgICAgICAgICBhbmdsZUxpbmVzOiB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBiZWdpbkF0WmVybzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBncmlkOiB7XG4gICAgICAgICAgICAgICAgICAgIGNpcmN1bGFyOiB0cnVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwb2ludExhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3RhcnRBbmdsZTogMFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdHJ1Y3RvcihjaGFydCwgZGF0YXNldEluZGV4KXtcbiAgICAgICAgc3VwZXIoY2hhcnQsIGRhdGFzZXRJbmRleCk7XG4gICAgICAgIHRoaXMuaW5uZXJSYWRpdXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMub3V0ZXJSYWRpdXMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGdldExhYmVsQW5kVmFsdWUoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3QgbGFiZWxzID0gY2hhcnQuZGF0YS5sYWJlbHMgfHwgW107XG4gICAgICAgIGNvbnN0IHZhbHVlID0gZm9ybWF0TnVtYmVyKG1ldGEuX3BhcnNlZFtpbmRleF0uciwgY2hhcnQub3B0aW9ucy5sb2NhbGUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGFiZWw6IGxhYmVsc1tpbmRleF0gfHwgJycsXG4gICAgICAgICAgICB2YWx1ZVxuICAgICAgICB9O1xuICAgIH1cbiAgICBwYXJzZU9iamVjdERhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIHJldHVybiBfcGFyc2VPYmplY3REYXRhUmFkaWFsU2NhbGUuYmluZCh0aGlzKShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgIH1cbiAgICB1cGRhdGUobW9kZSkge1xuICAgICAgICBjb25zdCBhcmNzID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhO1xuICAgICAgICB0aGlzLl91cGRhdGVSYWRpdXMoKTtcbiAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50cyhhcmNzLCAwLCBhcmNzLmxlbmd0aCwgbW9kZSk7XG4gICAgfVxuIGdldE1pbk1heCgpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IHJhbmdlID0ge1xuICAgICAgICAgICAgbWluOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksXG4gICAgICAgICAgICBtYXg6IE51bWJlci5ORUdBVElWRV9JTkZJTklUWVxuICAgICAgICB9O1xuICAgICAgICBtZXRhLmRhdGEuZm9yRWFjaCgoZWxlbWVudCwgaW5kZXgpPT57XG4gICAgICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCkucjtcbiAgICAgICAgICAgIGlmICghaXNOYU4ocGFyc2VkKSAmJiB0aGlzLmNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGluZGV4KSkge1xuICAgICAgICAgICAgICAgIGlmIChwYXJzZWQgPCByYW5nZS5taW4pIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UubWluID0gcGFyc2VkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocGFyc2VkID4gcmFuZ2UubWF4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlLm1heCA9IHBhcnNlZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmFuZ2U7XG4gICAgfVxuIF91cGRhdGVSYWRpdXMoKSB7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3QgY2hhcnRBcmVhID0gY2hhcnQuY2hhcnRBcmVhO1xuICAgICAgICBjb25zdCBvcHRzID0gY2hhcnQub3B0aW9ucztcbiAgICAgICAgY29uc3QgbWluU2l6ZSA9IE1hdGgubWluKGNoYXJ0QXJlYS5yaWdodCAtIGNoYXJ0QXJlYS5sZWZ0LCBjaGFydEFyZWEuYm90dG9tIC0gY2hhcnRBcmVhLnRvcCk7XG4gICAgICAgIGNvbnN0IG91dGVyUmFkaXVzID0gTWF0aC5tYXgobWluU2l6ZSAvIDIsIDApO1xuICAgICAgICBjb25zdCBpbm5lclJhZGl1cyA9IE1hdGgubWF4KG9wdHMuY3V0b3V0UGVyY2VudGFnZSA/IG91dGVyUmFkaXVzIC8gMTAwICogb3B0cy5jdXRvdXRQZXJjZW50YWdlIDogMSwgMCk7XG4gICAgICAgIGNvbnN0IHJhZGl1c0xlbmd0aCA9IChvdXRlclJhZGl1cyAtIGlubmVyUmFkaXVzKSAvIGNoYXJ0LmdldFZpc2libGVEYXRhc2V0Q291bnQoKTtcbiAgICAgICAgdGhpcy5vdXRlclJhZGl1cyA9IG91dGVyUmFkaXVzIC0gcmFkaXVzTGVuZ3RoICogdGhpcy5pbmRleDtcbiAgICAgICAgdGhpcy5pbm5lclJhZGl1cyA9IHRoaXMub3V0ZXJSYWRpdXMgLSByYWRpdXNMZW5ndGg7XG4gICAgfVxuICAgIHVwZGF0ZUVsZW1lbnRzKGFyY3MsIHN0YXJ0LCBjb3VudCwgbW9kZSkge1xuICAgICAgICBjb25zdCByZXNldCA9IG1vZGUgPT09ICdyZXNldCc7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3Qgb3B0cyA9IGNoYXJ0Lm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbk9wdHMgPSBvcHRzLmFuaW1hdGlvbjtcbiAgICAgICAgY29uc3Qgc2NhbGUgPSB0aGlzLl9jYWNoZWRNZXRhLnJTY2FsZTtcbiAgICAgICAgY29uc3QgY2VudGVyWCA9IHNjYWxlLnhDZW50ZXI7XG4gICAgICAgIGNvbnN0IGNlbnRlclkgPSBzY2FsZS55Q2VudGVyO1xuICAgICAgICBjb25zdCBkYXRhc2V0U3RhcnRBbmdsZSA9IHNjYWxlLmdldEluZGV4QW5nbGUoMCkgLSAwLjUgKiBQSTtcbiAgICAgICAgbGV0IGFuZ2xlID0gZGF0YXNldFN0YXJ0QW5nbGU7XG4gICAgICAgIGxldCBpO1xuICAgICAgICBjb25zdCBkZWZhdWx0QW5nbGUgPSAzNjAgLyB0aGlzLmNvdW50VmlzaWJsZUVsZW1lbnRzKCk7XG4gICAgICAgIGZvcihpID0gMDsgaSA8IHN0YXJ0OyArK2kpe1xuICAgICAgICAgICAgYW5nbGUgKz0gdGhpcy5fY29tcHV0ZUFuZ2xlKGksIG1vZGUsIGRlZmF1bHRBbmdsZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7IGkrKyl7XG4gICAgICAgICAgICBjb25zdCBhcmMgPSBhcmNzW2ldO1xuICAgICAgICAgICAgbGV0IHN0YXJ0QW5nbGUgPSBhbmdsZTtcbiAgICAgICAgICAgIGxldCBlbmRBbmdsZSA9IGFuZ2xlICsgdGhpcy5fY29tcHV0ZUFuZ2xlKGksIG1vZGUsIGRlZmF1bHRBbmdsZSk7XG4gICAgICAgICAgICBsZXQgb3V0ZXJSYWRpdXMgPSBjaGFydC5nZXREYXRhVmlzaWJpbGl0eShpKSA/IHNjYWxlLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHRoaXMuZ2V0UGFyc2VkKGkpLnIpIDogMDtcbiAgICAgICAgICAgIGFuZ2xlID0gZW5kQW5nbGU7XG4gICAgICAgICAgICBpZiAocmVzZXQpIHtcbiAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uT3B0cy5hbmltYXRlU2NhbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0ZXJSYWRpdXMgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uT3B0cy5hbmltYXRlUm90YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0QW5nbGUgPSBlbmRBbmdsZSA9IGRhdGFzZXRTdGFydEFuZ2xlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSB7XG4gICAgICAgICAgICAgICAgeDogY2VudGVyWCxcbiAgICAgICAgICAgICAgICB5OiBjZW50ZXJZLFxuICAgICAgICAgICAgICAgIGlubmVyUmFkaXVzOiAwLFxuICAgICAgICAgICAgICAgIG91dGVyUmFkaXVzLFxuICAgICAgICAgICAgICAgIHN0YXJ0QW5nbGUsXG4gICAgICAgICAgICAgICAgZW5kQW5nbGUsXG4gICAgICAgICAgICAgICAgb3B0aW9uczogdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGksIGFyYy5hY3RpdmUgPyAnYWN0aXZlJyA6IG1vZGUpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50KGFyYywgaSwgcHJvcGVydGllcywgbW9kZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY291bnRWaXNpYmxlRWxlbWVudHMoKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICBtZXRhLmRhdGEuZm9yRWFjaCgoZWxlbWVudCwgaW5kZXgpPT57XG4gICAgICAgICAgICBpZiAoIWlzTmFOKHRoaXMuZ2V0UGFyc2VkKGluZGV4KS5yKSAmJiB0aGlzLmNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGluZGV4KSkge1xuICAgICAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY291bnQ7XG4gICAgfVxuIF9jb21wdXRlQW5nbGUoaW5kZXgsIG1vZGUsIGRlZmF1bHRBbmdsZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFydC5nZXREYXRhVmlzaWJpbGl0eShpbmRleCkgPyB0b1JhZGlhbnModGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGluZGV4LCBtb2RlKS5hbmdsZSB8fCBkZWZhdWx0QW5nbGUpIDogMDtcbiAgICB9XG59XG5cbmNsYXNzIFBpZUNvbnRyb2xsZXIgZXh0ZW5kcyBEb3VnaG51dENvbnRyb2xsZXIge1xuICAgIHN0YXRpYyBpZCA9ICdwaWUnO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgY3V0b3V0OiAwLFxuICAgICAgICByb3RhdGlvbjogMCxcbiAgICAgICAgY2lyY3VtZmVyZW5jZTogMzYwLFxuICAgICAgICByYWRpdXM6ICcxMDAlJ1xuICAgIH07XG59XG5cbmNsYXNzIFJhZGFyQ29udHJvbGxlciBleHRlbmRzIERhdGFzZXRDb250cm9sbGVyIHtcbiAgICBzdGF0aWMgaWQgPSAncmFkYXInO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgZGF0YXNldEVsZW1lbnRUeXBlOiAnbGluZScsXG4gICAgICAgIGRhdGFFbGVtZW50VHlwZTogJ3BvaW50JyxcbiAgICAgICAgaW5kZXhBeGlzOiAncicsXG4gICAgICAgIHNob3dMaW5lOiB0cnVlLFxuICAgICAgICBlbGVtZW50czoge1xuICAgICAgICAgICAgbGluZToge1xuICAgICAgICAgICAgICAgIGZpbGw6ICdzdGFydCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gc3RhdGljIG92ZXJyaWRlcyA9IHtcbiAgICAgICAgYXNwZWN0UmF0aW86IDEsXG4gICAgICAgIHNjYWxlczoge1xuICAgICAgICAgICAgcjoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdyYWRpYWxMaW5lYXInXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuIGdldExhYmVsQW5kVmFsdWUoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgdlNjYWxlID0gdGhpcy5fY2FjaGVkTWV0YS52U2NhbGU7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGluZGV4KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhYmVsOiB2U2NhbGUuZ2V0TGFiZWxzKClbaW5kZXhdLFxuICAgICAgICAgICAgdmFsdWU6ICcnICsgdlNjYWxlLmdldExhYmVsRm9yVmFsdWUocGFyc2VkW3ZTY2FsZS5heGlzXSlcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcGFyc2VPYmplY3REYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgICAgICByZXR1cm4gX3BhcnNlT2JqZWN0RGF0YVJhZGlhbFNjYWxlLmJpbmQodGhpcykobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICB9XG4gICAgdXBkYXRlKG1vZGUpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGxpbmUgPSBtZXRhLmRhdGFzZXQ7XG4gICAgICAgIGNvbnN0IHBvaW50cyA9IG1ldGEuZGF0YSB8fCBbXTtcbiAgICAgICAgY29uc3QgbGFiZWxzID0gbWV0YS5pU2NhbGUuZ2V0TGFiZWxzKCk7XG4gICAgICAgIGxpbmUucG9pbnRzID0gcG9pbnRzO1xuICAgICAgICBpZiAobW9kZSAhPT0gJ3Jlc2l6ZScpIHtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnJlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMobW9kZSk7XG4gICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5zaG93TGluZSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuYm9yZGVyV2lkdGggPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcHJvcGVydGllcyA9IHtcbiAgICAgICAgICAgICAgICBfbG9vcDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBfZnVsbExvb3A6IGxhYmVscy5sZW5ndGggPT09IHBvaW50cy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlRWxlbWVudChsaW5lLCB1bmRlZmluZWQsIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlRWxlbWVudHMocG9pbnRzLCAwLCBwb2ludHMubGVuZ3RoLCBtb2RlKTtcbiAgICB9XG4gICAgdXBkYXRlRWxlbWVudHMocG9pbnRzLCBzdGFydCwgY291bnQsIG1vZGUpIHtcbiAgICAgICAgY29uc3Qgc2NhbGUgPSB0aGlzLl9jYWNoZWRNZXRhLnJTY2FsZTtcbiAgICAgICAgY29uc3QgcmVzZXQgPSBtb2RlID09PSAncmVzZXQnO1xuICAgICAgICBmb3IobGV0IGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7IGkrKyl7XG4gICAgICAgICAgICBjb25zdCBwb2ludCA9IHBvaW50c1tpXTtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSwgcG9pbnQuYWN0aXZlID8gJ2FjdGl2ZScgOiBtb2RlKTtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50UG9zaXRpb24gPSBzY2FsZS5nZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUoaSwgdGhpcy5nZXRQYXJzZWQoaSkucik7XG4gICAgICAgICAgICBjb25zdCB4ID0gcmVzZXQgPyBzY2FsZS54Q2VudGVyIDogcG9pbnRQb3NpdGlvbi54O1xuICAgICAgICAgICAgY29uc3QgeSA9IHJlc2V0ID8gc2NhbGUueUNlbnRlciA6IHBvaW50UG9zaXRpb24ueTtcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSB7XG4gICAgICAgICAgICAgICAgeCxcbiAgICAgICAgICAgICAgICB5LFxuICAgICAgICAgICAgICAgIGFuZ2xlOiBwb2ludFBvc2l0aW9uLmFuZ2xlLFxuICAgICAgICAgICAgICAgIHNraXA6IGlzTmFOKHgpIHx8IGlzTmFOKHkpLFxuICAgICAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQocG9pbnQsIGksIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5jbGFzcyBTY2F0dGVyQ29udHJvbGxlciBleHRlbmRzIERhdGFzZXRDb250cm9sbGVyIHtcbiAgICBzdGF0aWMgaWQgPSAnc2NhdHRlcic7XG4gc3RhdGljIGRlZmF1bHRzID0ge1xuICAgICAgICBkYXRhc2V0RWxlbWVudFR5cGU6IGZhbHNlLFxuICAgICAgICBkYXRhRWxlbWVudFR5cGU6ICdwb2ludCcsXG4gICAgICAgIHNob3dMaW5lOiBmYWxzZSxcbiAgICAgICAgZmlsbDogZmFsc2VcbiAgICB9O1xuIHN0YXRpYyBvdmVycmlkZXMgPSB7XG4gICAgICAgIGludGVyYWN0aW9uOiB7XG4gICAgICAgICAgICBtb2RlOiAncG9pbnQnXG4gICAgICAgIH0sXG4gICAgICAgIHNjYWxlczoge1xuICAgICAgICAgICAgeDoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5lYXInXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeToge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5lYXInXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuIGdldExhYmVsQW5kVmFsdWUoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGxhYmVscyA9IHRoaXMuY2hhcnQuZGF0YS5sYWJlbHMgfHwgW107XG4gICAgICAgIGNvbnN0IHsgeFNjYWxlICwgeVNjYWxlICB9ID0gbWV0YTtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaW5kZXgpO1xuICAgICAgICBjb25zdCB4ID0geFNjYWxlLmdldExhYmVsRm9yVmFsdWUocGFyc2VkLngpO1xuICAgICAgICBjb25zdCB5ID0geVNjYWxlLmdldExhYmVsRm9yVmFsdWUocGFyc2VkLnkpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGFiZWw6IGxhYmVsc1tpbmRleF0gfHwgJycsXG4gICAgICAgICAgICB2YWx1ZTogJygnICsgeCArICcsICcgKyB5ICsgJyknXG4gICAgICAgIH07XG4gICAgfVxuICAgIHVwZGF0ZShtb2RlKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCB7IGRhdGE6IHBvaW50cyA9IFtdICB9ID0gbWV0YTtcbiAgICAgICAgY29uc3QgYW5pbWF0aW9uc0Rpc2FibGVkID0gdGhpcy5jaGFydC5fYW5pbWF0aW9uc0Rpc2FibGVkO1xuICAgICAgICBsZXQgeyBzdGFydCAsIGNvdW50ICB9ID0gX2dldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHMobWV0YSwgcG9pbnRzLCBhbmltYXRpb25zRGlzYWJsZWQpO1xuICAgICAgICB0aGlzLl9kcmF3U3RhcnQgPSBzdGFydDtcbiAgICAgICAgdGhpcy5fZHJhd0NvdW50ID0gY291bnQ7XG4gICAgICAgIGlmIChfc2NhbGVSYW5nZXNDaGFuZ2VkKG1ldGEpKSB7XG4gICAgICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgICAgICBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaG93TGluZSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmRhdGFzZXRFbGVtZW50VHlwZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkRWxlbWVudHMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHsgZGF0YXNldDogbGluZSAsIF9kYXRhc2V0ICB9ID0gbWV0YTtcbiAgICAgICAgICAgIGxpbmUuX2NoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgICAgIGxpbmUuX2RhdGFzZXRJbmRleCA9IHRoaXMuaW5kZXg7XG4gICAgICAgICAgICBsaW5lLl9kZWNpbWF0ZWQgPSAhIV9kYXRhc2V0Ll9kZWNpbWF0ZWQ7XG4gICAgICAgICAgICBsaW5lLnBvaW50cyA9IHBvaW50cztcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnJlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMobW9kZSk7XG4gICAgICAgICAgICBvcHRpb25zLnNlZ21lbnQgPSB0aGlzLm9wdGlvbnMuc2VnbWVudDtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlRWxlbWVudChsaW5lLCB1bmRlZmluZWQsIHtcbiAgICAgICAgICAgICAgICBhbmltYXRlZDogIWFuaW1hdGlvbnNEaXNhYmxlZCxcbiAgICAgICAgICAgICAgICBvcHRpb25zXG4gICAgICAgICAgICB9LCBtb2RlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmRhdGFzZXRFbGVtZW50VHlwZSkge1xuICAgICAgICAgICAgZGVsZXRlIG1ldGEuZGF0YXNldDtcbiAgICAgICAgICAgIHRoaXMuZGF0YXNldEVsZW1lbnRUeXBlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50cyhwb2ludHMsIHN0YXJ0LCBjb3VudCwgbW9kZSk7XG4gICAgfVxuICAgIGFkZEVsZW1lbnRzKCkge1xuICAgICAgICBjb25zdCB7IHNob3dMaW5lICB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBpZiAoIXRoaXMuZGF0YXNldEVsZW1lbnRUeXBlICYmIHNob3dMaW5lKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGFzZXRFbGVtZW50VHlwZSA9IHRoaXMuY2hhcnQucmVnaXN0cnkuZ2V0RWxlbWVudCgnbGluZScpO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyLmFkZEVsZW1lbnRzKCk7XG4gICAgfVxuICAgIHVwZGF0ZUVsZW1lbnRzKHBvaW50cywgc3RhcnQsIGNvdW50LCBtb2RlKSB7XG4gICAgICAgIGNvbnN0IHJlc2V0ID0gbW9kZSA9PT0gJ3Jlc2V0JztcbiAgICAgICAgY29uc3QgeyBpU2NhbGUgLCB2U2NhbGUgLCBfc3RhY2tlZCAsIF9kYXRhc2V0ICB9ID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgZmlyc3RPcHRzID0gdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKHN0YXJ0LCBtb2RlKTtcbiAgICAgICAgY29uc3Qgc2hhcmVkT3B0aW9ucyA9IHRoaXMuZ2V0U2hhcmVkT3B0aW9ucyhmaXJzdE9wdHMpO1xuICAgICAgICBjb25zdCBpbmNsdWRlT3B0aW9ucyA9IHRoaXMuaW5jbHVkZU9wdGlvbnMobW9kZSwgc2hhcmVkT3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGlBeGlzID0gaVNjYWxlLmF4aXM7XG4gICAgICAgIGNvbnN0IHZBeGlzID0gdlNjYWxlLmF4aXM7XG4gICAgICAgIGNvbnN0IHsgc3BhbkdhcHMgLCBzZWdtZW50ICB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBtYXhHYXBMZW5ndGggPSBpc051bWJlcihzcGFuR2FwcykgPyBzcGFuR2FwcyA6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgICAgY29uc3QgZGlyZWN0VXBkYXRlID0gdGhpcy5jaGFydC5fYW5pbWF0aW9uc0Rpc2FibGVkIHx8IHJlc2V0IHx8IG1vZGUgPT09ICdub25lJztcbiAgICAgICAgbGV0IHByZXZQYXJzZWQgPSBzdGFydCA+IDAgJiYgdGhpcy5nZXRQYXJzZWQoc3RhcnQgLSAxKTtcbiAgICAgICAgZm9yKGxldCBpID0gc3RhcnQ7IGkgPCBzdGFydCArIGNvdW50OyArK2kpe1xuICAgICAgICAgICAgY29uc3QgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpKTtcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSBkaXJlY3RVcGRhdGUgPyBwb2ludCA6IHt9O1xuICAgICAgICAgICAgY29uc3QgbnVsbERhdGEgPSBpc051bGxPclVuZGVmKHBhcnNlZFt2QXhpc10pO1xuICAgICAgICAgICAgY29uc3QgaVBpeGVsID0gcHJvcGVydGllc1tpQXhpc10gPSBpU2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShwYXJzZWRbaUF4aXNdLCBpKTtcbiAgICAgICAgICAgIGNvbnN0IHZQaXhlbCA9IHByb3BlcnRpZXNbdkF4aXNdID0gcmVzZXQgfHwgbnVsbERhdGEgPyB2U2NhbGUuZ2V0QmFzZVBpeGVsKCkgOiB2U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShfc3RhY2tlZCA/IHRoaXMuYXBwbHlTdGFjayh2U2NhbGUsIHBhcnNlZCwgX3N0YWNrZWQpIDogcGFyc2VkW3ZBeGlzXSwgaSk7XG4gICAgICAgICAgICBwcm9wZXJ0aWVzLnNraXAgPSBpc05hTihpUGl4ZWwpIHx8IGlzTmFOKHZQaXhlbCkgfHwgbnVsbERhdGE7XG4gICAgICAgICAgICBwcm9wZXJ0aWVzLnN0b3AgPSBpID4gMCAmJiBNYXRoLmFicyhwYXJzZWRbaUF4aXNdIC0gcHJldlBhcnNlZFtpQXhpc10pID4gbWF4R2FwTGVuZ3RoO1xuICAgICAgICAgICAgaWYgKHNlZ21lbnQpIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLnBhcnNlZCA9IHBhcnNlZDtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLnJhdyA9IF9kYXRhc2V0LmRhdGFbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaW5jbHVkZU9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLm9wdGlvbnMgPSBzaGFyZWRPcHRpb25zIHx8IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpLCBwb2ludC5hY3RpdmUgPyAnYWN0aXZlJyA6IG1vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFkaXJlY3RVcGRhdGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQocG9pbnQsIGksIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJldlBhcnNlZCA9IHBhcnNlZDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZVNoYXJlZE9wdGlvbnMoc2hhcmVkT3B0aW9ucywgbW9kZSwgZmlyc3RPcHRzKTtcbiAgICB9XG4gZ2V0TWF4T3ZlcmZsb3coKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBkYXRhID0gbWV0YS5kYXRhIHx8IFtdO1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5zaG93TGluZSkge1xuICAgICAgICAgICAgbGV0IG1heCA9IDA7XG4gICAgICAgICAgICBmb3IobGV0IGkgPSBkYXRhLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKXtcbiAgICAgICAgICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIGRhdGFbaV0uc2l6ZSh0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSkpIC8gMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWF4ID4gMCAmJiBtYXg7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGF0YXNldCA9IG1ldGEuZGF0YXNldDtcbiAgICAgICAgY29uc3QgYm9yZGVyID0gZGF0YXNldC5vcHRpb25zICYmIGRhdGFzZXQub3B0aW9ucy5ib3JkZXJXaWR0aCB8fCAwO1xuICAgICAgICBpZiAoIWRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gYm9yZGVyO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZpcnN0UG9pbnQgPSBkYXRhWzBdLnNpemUodGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKDApKTtcbiAgICAgICAgY29uc3QgbGFzdFBvaW50ID0gZGF0YVtkYXRhLmxlbmd0aCAtIDFdLnNpemUodGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGRhdGEubGVuZ3RoIC0gMSkpO1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgoYm9yZGVyLCBmaXJzdFBvaW50LCBsYXN0UG9pbnQpIC8gMjtcbiAgICB9XG59XG5cbnZhciBjb250cm9sbGVycyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbl9fcHJvdG9fXzogbnVsbCxcbkJhckNvbnRyb2xsZXI6IEJhckNvbnRyb2xsZXIsXG5CdWJibGVDb250cm9sbGVyOiBCdWJibGVDb250cm9sbGVyLFxuRG91Z2hudXRDb250cm9sbGVyOiBEb3VnaG51dENvbnRyb2xsZXIsXG5MaW5lQ29udHJvbGxlcjogTGluZUNvbnRyb2xsZXIsXG5QaWVDb250cm9sbGVyOiBQaWVDb250cm9sbGVyLFxuUG9sYXJBcmVhQ29udHJvbGxlcjogUG9sYXJBcmVhQ29udHJvbGxlcixcblJhZGFyQ29udHJvbGxlcjogUmFkYXJDb250cm9sbGVyLFxuU2NhdHRlckNvbnRyb2xsZXI6IFNjYXR0ZXJDb250cm9sbGVyXG59KTtcblxuLyoqXG4gKiBAbmFtZXNwYWNlIENoYXJ0Ll9hZGFwdGVyc1xuICogQHNpbmNlIDIuOC4wXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIGFic3RyYWN0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkOiBDaGVjayB0aGF0IGEgY29tcGxldGUgZGF0ZSBhZGFwdGVyIGlzIHByb3ZpZGVkLicpO1xufVxuLyoqXG4gKiBEYXRlIGFkYXB0ZXIgKGN1cnJlbnQgdXNlZCBieSB0aGUgdGltZSBzY2FsZSlcbiAqIEBuYW1lc3BhY2UgQ2hhcnQuX2FkYXB0ZXJzLl9kYXRlXG4gKiBAbWVtYmVyb2YgQ2hhcnQuX2FkYXB0ZXJzXG4gKiBAcHJpdmF0ZVxuICovIGNsYXNzIERhdGVBZGFwdGVyQmFzZSB7XG4gICAgLyoqXG4gICAqIE92ZXJyaWRlIGRlZmF1bHQgZGF0ZSBhZGFwdGVyIG1ldGhvZHMuXG4gICAqIEFjY2VwdHMgdHlwZSBwYXJhbWV0ZXIgdG8gZGVmaW5lIG9wdGlvbnMgdHlwZS5cbiAgICogQGV4YW1wbGVcbiAgICogQ2hhcnQuX2FkYXB0ZXJzLl9kYXRlLm92ZXJyaWRlPHtteUFkYXB0ZXJPcHRpb246IHN0cmluZ30+KHtcbiAgICogICBpbml0KCkge1xuICAgKiAgICAgY29uc29sZS5sb2codGhpcy5vcHRpb25zLm15QWRhcHRlck9wdGlvbik7XG4gICAqICAgfVxuICAgKiB9KVxuICAgKi8gc3RhdGljIG92ZXJyaWRlKG1lbWJlcnMpIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihEYXRlQWRhcHRlckJhc2UucHJvdG90eXBlLCBtZW1iZXJzKTtcbiAgICB9XG4gICAgb3B0aW9ucztcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKXtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvblxuICAgIGluaXQoKSB7fVxuICAgIGZvcm1hdHMoKSB7XG4gICAgICAgIHJldHVybiBhYnN0cmFjdCgpO1xuICAgIH1cbiAgICBwYXJzZSgpIHtcbiAgICAgICAgcmV0dXJuIGFic3RyYWN0KCk7XG4gICAgfVxuICAgIGZvcm1hdCgpIHtcbiAgICAgICAgcmV0dXJuIGFic3RyYWN0KCk7XG4gICAgfVxuICAgIGFkZCgpIHtcbiAgICAgICAgcmV0dXJuIGFic3RyYWN0KCk7XG4gICAgfVxuICAgIGRpZmYoKSB7XG4gICAgICAgIHJldHVybiBhYnN0cmFjdCgpO1xuICAgIH1cbiAgICBzdGFydE9mKCkge1xuICAgICAgICByZXR1cm4gYWJzdHJhY3QoKTtcbiAgICB9XG4gICAgZW5kT2YoKSB7XG4gICAgICAgIHJldHVybiBhYnN0cmFjdCgpO1xuICAgIH1cbn1cbnZhciBhZGFwdGVycyA9IHtcbiAgICBfZGF0ZTogRGF0ZUFkYXB0ZXJCYXNlXG59O1xuXG5mdW5jdGlvbiBiaW5hcnlTZWFyY2gobWV0YXNldCwgYXhpcywgdmFsdWUsIGludGVyc2VjdCkge1xuICAgIGNvbnN0IHsgY29udHJvbGxlciAsIGRhdGEgLCBfc29ydGVkICB9ID0gbWV0YXNldDtcbiAgICBjb25zdCBpU2NhbGUgPSBjb250cm9sbGVyLl9jYWNoZWRNZXRhLmlTY2FsZTtcbiAgICBpZiAoaVNjYWxlICYmIGF4aXMgPT09IGlTY2FsZS5heGlzICYmIGF4aXMgIT09ICdyJyAmJiBfc29ydGVkICYmIGRhdGEubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGxvb2t1cE1ldGhvZCA9IGlTY2FsZS5fcmV2ZXJzZVBpeGVscyA/IF9ybG9va3VwQnlLZXkgOiBfbG9va3VwQnlLZXk7XG4gICAgICAgIGlmICghaW50ZXJzZWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gbG9va3VwTWV0aG9kKGRhdGEsIGF4aXMsIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChjb250cm9sbGVyLl9zaGFyZWRPcHRpb25zKSB7XG4gICAgICAgICAgICBjb25zdCBlbCA9IGRhdGFbMF07XG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IHR5cGVvZiBlbC5nZXRSYW5nZSA9PT0gJ2Z1bmN0aW9uJyAmJiBlbC5nZXRSYW5nZShheGlzKTtcbiAgICAgICAgICAgIGlmIChyYW5nZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gbG9va3VwTWV0aG9kKGRhdGEsIGF4aXMsIHZhbHVlIC0gcmFuZ2UpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVuZCA9IGxvb2t1cE1ldGhvZChkYXRhLCBheGlzLCB2YWx1ZSArIHJhbmdlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBsbzogc3RhcnQubG8sXG4gICAgICAgICAgICAgICAgICAgIGhpOiBlbmQuaGlcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGxvOiAwLFxuICAgICAgICBoaTogZGF0YS5sZW5ndGggLSAxXG4gICAgfTtcbn1cbiBmdW5jdGlvbiBldmFsdWF0ZUludGVyYWN0aW9uSXRlbXMoY2hhcnQsIGF4aXMsIHBvc2l0aW9uLCBoYW5kbGVyLCBpbnRlcnNlY3QpIHtcbiAgICBjb25zdCBtZXRhc2V0cyA9IGNoYXJ0LmdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKTtcbiAgICBjb25zdCB2YWx1ZSA9IHBvc2l0aW9uW2F4aXNdO1xuICAgIGZvcihsZXQgaSA9IDAsIGlsZW4gPSBtZXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBjb25zdCB7IGluZGV4ICwgZGF0YSAgfSA9IG1ldGFzZXRzW2ldO1xuICAgICAgICBjb25zdCB7IGxvICwgaGkgIH0gPSBiaW5hcnlTZWFyY2gobWV0YXNldHNbaV0sIGF4aXMsIHZhbHVlLCBpbnRlcnNlY3QpO1xuICAgICAgICBmb3IobGV0IGogPSBsbzsgaiA8PSBoaTsgKytqKXtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkYXRhW2pdO1xuICAgICAgICAgICAgaWYgKCFlbGVtZW50LnNraXApIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVyKGVsZW1lbnQsIGluZGV4LCBqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiBmdW5jdGlvbiBnZXREaXN0YW5jZU1ldHJpY0ZvckF4aXMoYXhpcykge1xuICAgIGNvbnN0IHVzZVggPSBheGlzLmluZGV4T2YoJ3gnKSAhPT0gLTE7XG4gICAgY29uc3QgdXNlWSA9IGF4aXMuaW5kZXhPZigneScpICE9PSAtMTtcbiAgICByZXR1cm4gZnVuY3Rpb24ocHQxLCBwdDIpIHtcbiAgICAgICAgY29uc3QgZGVsdGFYID0gdXNlWCA/IE1hdGguYWJzKHB0MS54IC0gcHQyLngpIDogMDtcbiAgICAgICAgY29uc3QgZGVsdGFZID0gdXNlWSA/IE1hdGguYWJzKHB0MS55IC0gcHQyLnkpIDogMDtcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydChNYXRoLnBvdyhkZWx0YVgsIDIpICsgTWF0aC5wb3coZGVsdGFZLCAyKSk7XG4gICAgfTtcbn1cbiBmdW5jdGlvbiBnZXRJbnRlcnNlY3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIHVzZUZpbmFsUG9zaXRpb24sIGluY2x1ZGVJbnZpc2libGUpIHtcbiAgICBjb25zdCBpdGVtcyA9IFtdO1xuICAgIGlmICghaW5jbHVkZUludmlzaWJsZSAmJiAhY2hhcnQuaXNQb2ludEluQXJlYShwb3NpdGlvbikpIHtcbiAgICAgICAgcmV0dXJuIGl0ZW1zO1xuICAgIH1cbiAgICBjb25zdCBldmFsdWF0aW9uRnVuYyA9IGZ1bmN0aW9uKGVsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXgpIHtcbiAgICAgICAgaWYgKCFpbmNsdWRlSW52aXNpYmxlICYmICFfaXNQb2ludEluQXJlYShlbGVtZW50LCBjaGFydC5jaGFydEFyZWEsIDApKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsZW1lbnQuaW5SYW5nZShwb3NpdGlvbi54LCBwb3NpdGlvbi55LCB1c2VGaW5hbFBvc2l0aW9uKSkge1xuICAgICAgICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICAgICAgICBkYXRhc2V0SW5kZXgsXG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBldmFsdWF0ZUludGVyYWN0aW9uSXRlbXMoY2hhcnQsIGF4aXMsIHBvc2l0aW9uLCBldmFsdWF0aW9uRnVuYywgdHJ1ZSk7XG4gICAgcmV0dXJuIGl0ZW1zO1xufVxuIGZ1bmN0aW9uIGdldE5lYXJlc3RSYWRpYWxJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICBsZXQgaXRlbXMgPSBbXTtcbiAgICBmdW5jdGlvbiBldmFsdWF0aW9uRnVuYyhlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4KSB7XG4gICAgICAgIGNvbnN0IHsgc3RhcnRBbmdsZSAsIGVuZEFuZ2xlICB9ID0gZWxlbWVudC5nZXRQcm9wcyhbXG4gICAgICAgICAgICAnc3RhcnRBbmdsZScsXG4gICAgICAgICAgICAnZW5kQW5nbGUnXG4gICAgICAgIF0sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgICBjb25zdCB7IGFuZ2xlICB9ID0gZ2V0QW5nbGVGcm9tUG9pbnQoZWxlbWVudCwge1xuICAgICAgICAgICAgeDogcG9zaXRpb24ueCxcbiAgICAgICAgICAgIHk6IHBvc2l0aW9uLnlcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChfYW5nbGVCZXR3ZWVuKGFuZ2xlLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSkpIHtcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgZGF0YXNldEluZGV4LFxuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBldmFsdWF0ZUludGVyYWN0aW9uSXRlbXMoY2hhcnQsIGF4aXMsIHBvc2l0aW9uLCBldmFsdWF0aW9uRnVuYyk7XG4gICAgcmV0dXJuIGl0ZW1zO1xufVxuIGZ1bmN0aW9uIGdldE5lYXJlc3RDYXJ0ZXNpYW5JdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIGludGVyc2VjdCwgdXNlRmluYWxQb3NpdGlvbiwgaW5jbHVkZUludmlzaWJsZSkge1xuICAgIGxldCBpdGVtcyA9IFtdO1xuICAgIGNvbnN0IGRpc3RhbmNlTWV0cmljID0gZ2V0RGlzdGFuY2VNZXRyaWNGb3JBeGlzKGF4aXMpO1xuICAgIGxldCBtaW5EaXN0YW5jZSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICBmdW5jdGlvbiBldmFsdWF0aW9uRnVuYyhlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4KSB7XG4gICAgICAgIGNvbnN0IGluUmFuZ2UgPSBlbGVtZW50LmluUmFuZ2UocG9zaXRpb24ueCwgcG9zaXRpb24ueSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgICAgIGlmIChpbnRlcnNlY3QgJiYgIWluUmFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjZW50ZXIgPSBlbGVtZW50LmdldENlbnRlclBvaW50KHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgICBjb25zdCBwb2ludEluQXJlYSA9ICEhaW5jbHVkZUludmlzaWJsZSB8fCBjaGFydC5pc1BvaW50SW5BcmVhKGNlbnRlcik7XG4gICAgICAgIGlmICghcG9pbnRJbkFyZWEgJiYgIWluUmFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkaXN0YW5jZSA9IGRpc3RhbmNlTWV0cmljKHBvc2l0aW9uLCBjZW50ZXIpO1xuICAgICAgICBpZiAoZGlzdGFuY2UgPCBtaW5EaXN0YW5jZSkge1xuICAgICAgICAgICAgaXRlbXMgPSBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICBkYXRhc2V0SW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIG1pbkRpc3RhbmNlID0gZGlzdGFuY2U7XG4gICAgICAgIH0gZWxzZSBpZiAoZGlzdGFuY2UgPT09IG1pbkRpc3RhbmNlKSB7XG4gICAgICAgICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgICAgICAgIGRhdGFzZXRJbmRleCxcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZXZhbHVhdGVJbnRlcmFjdGlvbkl0ZW1zKGNoYXJ0LCBheGlzLCBwb3NpdGlvbiwgZXZhbHVhdGlvbkZ1bmMpO1xuICAgIHJldHVybiBpdGVtcztcbn1cbiBmdW5jdGlvbiBnZXROZWFyZXN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCBpbnRlcnNlY3QsIHVzZUZpbmFsUG9zaXRpb24sIGluY2x1ZGVJbnZpc2libGUpIHtcbiAgICBpZiAoIWluY2x1ZGVJbnZpc2libGUgJiYgIWNoYXJ0LmlzUG9pbnRJbkFyZWEocG9zaXRpb24pKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgcmV0dXJuIGF4aXMgPT09ICdyJyAmJiAhaW50ZXJzZWN0ID8gZ2V0TmVhcmVzdFJhZGlhbEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgdXNlRmluYWxQb3NpdGlvbikgOiBnZXROZWFyZXN0Q2FydGVzaWFuSXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCBpbnRlcnNlY3QsIHVzZUZpbmFsUG9zaXRpb24sIGluY2x1ZGVJbnZpc2libGUpO1xufVxuIGZ1bmN0aW9uIGdldEF4aXNJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIGludGVyc2VjdCwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIGNvbnN0IGl0ZW1zID0gW107XG4gICAgY29uc3QgcmFuZ2VNZXRob2QgPSBheGlzID09PSAneCcgPyAnaW5YUmFuZ2UnIDogJ2luWVJhbmdlJztcbiAgICBsZXQgaW50ZXJzZWN0c0l0ZW0gPSBmYWxzZTtcbiAgICBldmFsdWF0ZUludGVyYWN0aW9uSXRlbXMoY2hhcnQsIGF4aXMsIHBvc2l0aW9uLCAoZWxlbWVudCwgZGF0YXNldEluZGV4LCBpbmRleCk9PntcbiAgICAgICAgaWYgKGVsZW1lbnRbcmFuZ2VNZXRob2RdKHBvc2l0aW9uW2F4aXNdLCB1c2VGaW5hbFBvc2l0aW9uKSkge1xuICAgICAgICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICAgICAgICBkYXRhc2V0SW5kZXgsXG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaW50ZXJzZWN0c0l0ZW0gPSBpbnRlcnNlY3RzSXRlbSB8fCBlbGVtZW50LmluUmFuZ2UocG9zaXRpb24ueCwgcG9zaXRpb24ueSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoaW50ZXJzZWN0ICYmICFpbnRlcnNlY3RzSXRlbSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHJldHVybiBpdGVtcztcbn1cbiB2YXIgSW50ZXJhY3Rpb24gPSB7XG4gICAgZXZhbHVhdGVJbnRlcmFjdGlvbkl0ZW1zLFxuICAgIG1vZGVzOiB7XG4gaW5kZXggKGNoYXJ0LCBlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuICAgICAgICAgICAgY29uc3QgYXhpcyA9IG9wdGlvbnMuYXhpcyB8fCAneCc7XG4gICAgICAgICAgICBjb25zdCBpbmNsdWRlSW52aXNpYmxlID0gb3B0aW9ucy5pbmNsdWRlSW52aXNpYmxlIHx8IGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgaXRlbXMgPSBvcHRpb25zLmludGVyc2VjdCA/IGdldEludGVyc2VjdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgdXNlRmluYWxQb3NpdGlvbiwgaW5jbHVkZUludmlzaWJsZSkgOiBnZXROZWFyZXN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCBmYWxzZSwgdXNlRmluYWxQb3NpdGlvbiwgaW5jbHVkZUludmlzaWJsZSk7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50cyA9IFtdO1xuICAgICAgICAgICAgaWYgKCFpdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaGFydC5nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCkuZm9yRWFjaCgobWV0YSk9PntcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGl0ZW1zWzBdLmluZGV4O1xuICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBtZXRhLmRhdGFbaW5kZXhdO1xuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50ICYmICFlbGVtZW50LnNraXApIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YXNldEluZGV4OiBtZXRhLmluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudHM7XG4gICAgICAgIH0sXG4gZGF0YXNldCAoY2hhcnQsIGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG4gICAgICAgICAgICBjb25zdCBheGlzID0gb3B0aW9ucy5heGlzIHx8ICd4eSc7XG4gICAgICAgICAgICBjb25zdCBpbmNsdWRlSW52aXNpYmxlID0gb3B0aW9ucy5pbmNsdWRlSW52aXNpYmxlIHx8IGZhbHNlO1xuICAgICAgICAgICAgbGV0IGl0ZW1zID0gb3B0aW9ucy5pbnRlcnNlY3QgPyBnZXRJbnRlcnNlY3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIHVzZUZpbmFsUG9zaXRpb24sIGluY2x1ZGVJbnZpc2libGUpIDogZ2V0TmVhcmVzdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgZmFsc2UsIHVzZUZpbmFsUG9zaXRpb24sIGluY2x1ZGVJbnZpc2libGUpO1xuICAgICAgICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhc2V0SW5kZXggPSBpdGVtc1swXS5kYXRhc2V0SW5kZXg7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCkuZGF0YTtcbiAgICAgICAgICAgICAgICBpdGVtcyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgKytpKXtcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiBkYXRhW2ldLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YXNldEluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGlcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGl0ZW1zO1xuICAgICAgICB9LFxuIHBvaW50IChjaGFydCwgZSwgb3B0aW9ucywgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICAgICAgY29uc3QgcG9zaXRpb24gPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGUsIGNoYXJ0KTtcbiAgICAgICAgICAgIGNvbnN0IGF4aXMgPSBvcHRpb25zLmF4aXMgfHwgJ3h5JztcbiAgICAgICAgICAgIGNvbnN0IGluY2x1ZGVJbnZpc2libGUgPSBvcHRpb25zLmluY2x1ZGVJbnZpc2libGUgfHwgZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gZ2V0SW50ZXJzZWN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCB1c2VGaW5hbFBvc2l0aW9uLCBpbmNsdWRlSW52aXNpYmxlKTtcbiAgICAgICAgfSxcbiBuZWFyZXN0IChjaGFydCwgZSwgb3B0aW9ucywgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICAgICAgY29uc3QgcG9zaXRpb24gPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGUsIGNoYXJ0KTtcbiAgICAgICAgICAgIGNvbnN0IGF4aXMgPSBvcHRpb25zLmF4aXMgfHwgJ3h5JztcbiAgICAgICAgICAgIGNvbnN0IGluY2x1ZGVJbnZpc2libGUgPSBvcHRpb25zLmluY2x1ZGVJbnZpc2libGUgfHwgZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gZ2V0TmVhcmVzdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgb3B0aW9ucy5pbnRlcnNlY3QsIHVzZUZpbmFsUG9zaXRpb24sIGluY2x1ZGVJbnZpc2libGUpO1xuICAgICAgICB9LFxuIHggKGNoYXJ0LCBlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuICAgICAgICAgICAgcmV0dXJuIGdldEF4aXNJdGVtcyhjaGFydCwgcG9zaXRpb24sICd4Jywgb3B0aW9ucy5pbnRlcnNlY3QsIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgICB9LFxuIHkgKGNoYXJ0LCBlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuICAgICAgICAgICAgcmV0dXJuIGdldEF4aXNJdGVtcyhjaGFydCwgcG9zaXRpb24sICd5Jywgb3B0aW9ucy5pbnRlcnNlY3QsIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuY29uc3QgU1RBVElDX1BPU0lUSU9OUyA9IFtcbiAgICAnbGVmdCcsXG4gICAgJ3RvcCcsXG4gICAgJ3JpZ2h0JyxcbiAgICAnYm90dG9tJ1xuXTtcbmZ1bmN0aW9uIGZpbHRlckJ5UG9zaXRpb24oYXJyYXksIHBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIGFycmF5LmZpbHRlcigodik9PnYucG9zID09PSBwb3NpdGlvbik7XG59XG5mdW5jdGlvbiBmaWx0ZXJEeW5hbWljUG9zaXRpb25CeUF4aXMoYXJyYXksIGF4aXMpIHtcbiAgICByZXR1cm4gYXJyYXkuZmlsdGVyKCh2KT0+U1RBVElDX1BPU0lUSU9OUy5pbmRleE9mKHYucG9zKSA9PT0gLTEgJiYgdi5ib3guYXhpcyA9PT0gYXhpcyk7XG59XG5mdW5jdGlvbiBzb3J0QnlXZWlnaHQoYXJyYXksIHJldmVyc2UpIHtcbiAgICByZXR1cm4gYXJyYXkuc29ydCgoYSwgYik9PntcbiAgICAgICAgY29uc3QgdjAgPSByZXZlcnNlID8gYiA6IGE7XG4gICAgICAgIGNvbnN0IHYxID0gcmV2ZXJzZSA/IGEgOiBiO1xuICAgICAgICByZXR1cm4gdjAud2VpZ2h0ID09PSB2MS53ZWlnaHQgPyB2MC5pbmRleCAtIHYxLmluZGV4IDogdjAud2VpZ2h0IC0gdjEud2VpZ2h0O1xuICAgIH0pO1xufVxuZnVuY3Rpb24gd3JhcEJveGVzKGJveGVzKSB7XG4gICAgY29uc3QgbGF5b3V0Qm94ZXMgPSBbXTtcbiAgICBsZXQgaSwgaWxlbiwgYm94LCBwb3MsIHN0YWNrLCBzdGFja1dlaWdodDtcbiAgICBmb3IoaSA9IDAsIGlsZW4gPSAoYm94ZXMgfHwgW10pLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIGJveCA9IGJveGVzW2ldO1xuICAgICAgICAoeyBwb3NpdGlvbjogcG9zICwgb3B0aW9uczogeyBzdGFjayAsIHN0YWNrV2VpZ2h0ID0xICB9ICB9ID0gYm94KTtcbiAgICAgICAgbGF5b3V0Qm94ZXMucHVzaCh7XG4gICAgICAgICAgICBpbmRleDogaSxcbiAgICAgICAgICAgIGJveCxcbiAgICAgICAgICAgIHBvcyxcbiAgICAgICAgICAgIGhvcml6b250YWw6IGJveC5pc0hvcml6b250YWwoKSxcbiAgICAgICAgICAgIHdlaWdodDogYm94LndlaWdodCxcbiAgICAgICAgICAgIHN0YWNrOiBzdGFjayAmJiBwb3MgKyBzdGFjayxcbiAgICAgICAgICAgIHN0YWNrV2VpZ2h0XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbGF5b3V0Qm94ZXM7XG59XG5mdW5jdGlvbiBidWlsZFN0YWNrcyhsYXlvdXRzKSB7XG4gICAgY29uc3Qgc3RhY2tzID0ge307XG4gICAgZm9yIChjb25zdCB3cmFwIG9mIGxheW91dHMpe1xuICAgICAgICBjb25zdCB7IHN0YWNrICwgcG9zICwgc3RhY2tXZWlnaHQgIH0gPSB3cmFwO1xuICAgICAgICBpZiAoIXN0YWNrIHx8ICFTVEFUSUNfUE9TSVRJT05TLmluY2x1ZGVzKHBvcykpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IF9zdGFjayA9IHN0YWNrc1tzdGFja10gfHwgKHN0YWNrc1tzdGFja10gPSB7XG4gICAgICAgICAgICBjb3VudDogMCxcbiAgICAgICAgICAgIHBsYWNlZDogMCxcbiAgICAgICAgICAgIHdlaWdodDogMCxcbiAgICAgICAgICAgIHNpemU6IDBcbiAgICAgICAgfSk7XG4gICAgICAgIF9zdGFjay5jb3VudCsrO1xuICAgICAgICBfc3RhY2sud2VpZ2h0ICs9IHN0YWNrV2VpZ2h0O1xuICAgIH1cbiAgICByZXR1cm4gc3RhY2tzO1xufVxuIGZ1bmN0aW9uIHNldExheW91dERpbXMobGF5b3V0cywgcGFyYW1zKSB7XG4gICAgY29uc3Qgc3RhY2tzID0gYnVpbGRTdGFja3MobGF5b3V0cyk7XG4gICAgY29uc3QgeyB2Qm94TWF4V2lkdGggLCBoQm94TWF4SGVpZ2h0ICB9ID0gcGFyYW1zO1xuICAgIGxldCBpLCBpbGVuLCBsYXlvdXQ7XG4gICAgZm9yKGkgPSAwLCBpbGVuID0gbGF5b3V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBsYXlvdXQgPSBsYXlvdXRzW2ldO1xuICAgICAgICBjb25zdCB7IGZ1bGxTaXplICB9ID0gbGF5b3V0LmJveDtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBzdGFja3NbbGF5b3V0LnN0YWNrXTtcbiAgICAgICAgY29uc3QgZmFjdG9yID0gc3RhY2sgJiYgbGF5b3V0LnN0YWNrV2VpZ2h0IC8gc3RhY2sud2VpZ2h0O1xuICAgICAgICBpZiAobGF5b3V0Lmhvcml6b250YWwpIHtcbiAgICAgICAgICAgIGxheW91dC53aWR0aCA9IGZhY3RvciA/IGZhY3RvciAqIHZCb3hNYXhXaWR0aCA6IGZ1bGxTaXplICYmIHBhcmFtcy5hdmFpbGFibGVXaWR0aDtcbiAgICAgICAgICAgIGxheW91dC5oZWlnaHQgPSBoQm94TWF4SGVpZ2h0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGF5b3V0LndpZHRoID0gdkJveE1heFdpZHRoO1xuICAgICAgICAgICAgbGF5b3V0LmhlaWdodCA9IGZhY3RvciA/IGZhY3RvciAqIGhCb3hNYXhIZWlnaHQgOiBmdWxsU2l6ZSAmJiBwYXJhbXMuYXZhaWxhYmxlSGVpZ2h0O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdGFja3M7XG59XG5mdW5jdGlvbiBidWlsZExheW91dEJveGVzKGJveGVzKSB7XG4gICAgY29uc3QgbGF5b3V0Qm94ZXMgPSB3cmFwQm94ZXMoYm94ZXMpO1xuICAgIGNvbnN0IGZ1bGxTaXplID0gc29ydEJ5V2VpZ2h0KGxheW91dEJveGVzLmZpbHRlcigod3JhcCk9PndyYXAuYm94LmZ1bGxTaXplKSwgdHJ1ZSk7XG4gICAgY29uc3QgbGVmdCA9IHNvcnRCeVdlaWdodChmaWx0ZXJCeVBvc2l0aW9uKGxheW91dEJveGVzLCAnbGVmdCcpLCB0cnVlKTtcbiAgICBjb25zdCByaWdodCA9IHNvcnRCeVdlaWdodChmaWx0ZXJCeVBvc2l0aW9uKGxheW91dEJveGVzLCAncmlnaHQnKSk7XG4gICAgY29uc3QgdG9wID0gc29ydEJ5V2VpZ2h0KGZpbHRlckJ5UG9zaXRpb24obGF5b3V0Qm94ZXMsICd0b3AnKSwgdHJ1ZSk7XG4gICAgY29uc3QgYm90dG9tID0gc29ydEJ5V2VpZ2h0KGZpbHRlckJ5UG9zaXRpb24obGF5b3V0Qm94ZXMsICdib3R0b20nKSk7XG4gICAgY29uc3QgY2VudGVySG9yaXpvbnRhbCA9IGZpbHRlckR5bmFtaWNQb3NpdGlvbkJ5QXhpcyhsYXlvdXRCb3hlcywgJ3gnKTtcbiAgICBjb25zdCBjZW50ZXJWZXJ0aWNhbCA9IGZpbHRlckR5bmFtaWNQb3NpdGlvbkJ5QXhpcyhsYXlvdXRCb3hlcywgJ3knKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBmdWxsU2l6ZSxcbiAgICAgICAgbGVmdEFuZFRvcDogbGVmdC5jb25jYXQodG9wKSxcbiAgICAgICAgcmlnaHRBbmRCb3R0b206IHJpZ2h0LmNvbmNhdChjZW50ZXJWZXJ0aWNhbCkuY29uY2F0KGJvdHRvbSkuY29uY2F0KGNlbnRlckhvcml6b250YWwpLFxuICAgICAgICBjaGFydEFyZWE6IGZpbHRlckJ5UG9zaXRpb24obGF5b3V0Qm94ZXMsICdjaGFydEFyZWEnKSxcbiAgICAgICAgdmVydGljYWw6IGxlZnQuY29uY2F0KHJpZ2h0KS5jb25jYXQoY2VudGVyVmVydGljYWwpLFxuICAgICAgICBob3Jpem9udGFsOiB0b3AuY29uY2F0KGJvdHRvbSkuY29uY2F0KGNlbnRlckhvcml6b250YWwpXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGdldENvbWJpbmVkTWF4KG1heFBhZGRpbmcsIGNoYXJ0QXJlYSwgYSwgYikge1xuICAgIHJldHVybiBNYXRoLm1heChtYXhQYWRkaW5nW2FdLCBjaGFydEFyZWFbYV0pICsgTWF0aC5tYXgobWF4UGFkZGluZ1tiXSwgY2hhcnRBcmVhW2JdKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZU1heFBhZGRpbmcobWF4UGFkZGluZywgYm94UGFkZGluZykge1xuICAgIG1heFBhZGRpbmcudG9wID0gTWF0aC5tYXgobWF4UGFkZGluZy50b3AsIGJveFBhZGRpbmcudG9wKTtcbiAgICBtYXhQYWRkaW5nLmxlZnQgPSBNYXRoLm1heChtYXhQYWRkaW5nLmxlZnQsIGJveFBhZGRpbmcubGVmdCk7XG4gICAgbWF4UGFkZGluZy5ib3R0b20gPSBNYXRoLm1heChtYXhQYWRkaW5nLmJvdHRvbSwgYm94UGFkZGluZy5ib3R0b20pO1xuICAgIG1heFBhZGRpbmcucmlnaHQgPSBNYXRoLm1heChtYXhQYWRkaW5nLnJpZ2h0LCBib3hQYWRkaW5nLnJpZ2h0KTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZURpbXMoY2hhcnRBcmVhLCBwYXJhbXMsIGxheW91dCwgc3RhY2tzKSB7XG4gICAgY29uc3QgeyBwb3MgLCBib3ggIH0gPSBsYXlvdXQ7XG4gICAgY29uc3QgbWF4UGFkZGluZyA9IGNoYXJ0QXJlYS5tYXhQYWRkaW5nO1xuICAgIGlmICghaXNPYmplY3QocG9zKSkge1xuICAgICAgICBpZiAobGF5b3V0LnNpemUpIHtcbiAgICAgICAgICAgIGNoYXJ0QXJlYVtwb3NdIC09IGxheW91dC5zaXplO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN0YWNrID0gc3RhY2tzW2xheW91dC5zdGFja10gfHwge1xuICAgICAgICAgICAgc2l6ZTogMCxcbiAgICAgICAgICAgIGNvdW50OiAxXG4gICAgICAgIH07XG4gICAgICAgIHN0YWNrLnNpemUgPSBNYXRoLm1heChzdGFjay5zaXplLCBsYXlvdXQuaG9yaXpvbnRhbCA/IGJveC5oZWlnaHQgOiBib3gud2lkdGgpO1xuICAgICAgICBsYXlvdXQuc2l6ZSA9IHN0YWNrLnNpemUgLyBzdGFjay5jb3VudDtcbiAgICAgICAgY2hhcnRBcmVhW3Bvc10gKz0gbGF5b3V0LnNpemU7XG4gICAgfVxuICAgIGlmIChib3guZ2V0UGFkZGluZykge1xuICAgICAgICB1cGRhdGVNYXhQYWRkaW5nKG1heFBhZGRpbmcsIGJveC5nZXRQYWRkaW5nKCkpO1xuICAgIH1cbiAgICBjb25zdCBuZXdXaWR0aCA9IE1hdGgubWF4KDAsIHBhcmFtcy5vdXRlcldpZHRoIC0gZ2V0Q29tYmluZWRNYXgobWF4UGFkZGluZywgY2hhcnRBcmVhLCAnbGVmdCcsICdyaWdodCcpKTtcbiAgICBjb25zdCBuZXdIZWlnaHQgPSBNYXRoLm1heCgwLCBwYXJhbXMub3V0ZXJIZWlnaHQgLSBnZXRDb21iaW5lZE1heChtYXhQYWRkaW5nLCBjaGFydEFyZWEsICd0b3AnLCAnYm90dG9tJykpO1xuICAgIGNvbnN0IHdpZHRoQ2hhbmdlZCA9IG5ld1dpZHRoICE9PSBjaGFydEFyZWEudztcbiAgICBjb25zdCBoZWlnaHRDaGFuZ2VkID0gbmV3SGVpZ2h0ICE9PSBjaGFydEFyZWEuaDtcbiAgICBjaGFydEFyZWEudyA9IG5ld1dpZHRoO1xuICAgIGNoYXJ0QXJlYS5oID0gbmV3SGVpZ2h0O1xuICAgIHJldHVybiBsYXlvdXQuaG9yaXpvbnRhbCA/IHtcbiAgICAgICAgc2FtZTogd2lkdGhDaGFuZ2VkLFxuICAgICAgICBvdGhlcjogaGVpZ2h0Q2hhbmdlZFxuICAgIH0gOiB7XG4gICAgICAgIHNhbWU6IGhlaWdodENoYW5nZWQsXG4gICAgICAgIG90aGVyOiB3aWR0aENoYW5nZWRcbiAgICB9O1xufVxuZnVuY3Rpb24gaGFuZGxlTWF4UGFkZGluZyhjaGFydEFyZWEpIHtcbiAgICBjb25zdCBtYXhQYWRkaW5nID0gY2hhcnRBcmVhLm1heFBhZGRpbmc7XG4gICAgZnVuY3Rpb24gdXBkYXRlUG9zKHBvcykge1xuICAgICAgICBjb25zdCBjaGFuZ2UgPSBNYXRoLm1heChtYXhQYWRkaW5nW3Bvc10gLSBjaGFydEFyZWFbcG9zXSwgMCk7XG4gICAgICAgIGNoYXJ0QXJlYVtwb3NdICs9IGNoYW5nZTtcbiAgICAgICAgcmV0dXJuIGNoYW5nZTtcbiAgICB9XG4gICAgY2hhcnRBcmVhLnkgKz0gdXBkYXRlUG9zKCd0b3AnKTtcbiAgICBjaGFydEFyZWEueCArPSB1cGRhdGVQb3MoJ2xlZnQnKTtcbiAgICB1cGRhdGVQb3MoJ3JpZ2h0Jyk7XG4gICAgdXBkYXRlUG9zKCdib3R0b20nKTtcbn1cbmZ1bmN0aW9uIGdldE1hcmdpbnMoaG9yaXpvbnRhbCwgY2hhcnRBcmVhKSB7XG4gICAgY29uc3QgbWF4UGFkZGluZyA9IGNoYXJ0QXJlYS5tYXhQYWRkaW5nO1xuICAgIGZ1bmN0aW9uIG1hcmdpbkZvclBvc2l0aW9ucyhwb3NpdGlvbnMpIHtcbiAgICAgICAgY29uc3QgbWFyZ2luID0ge1xuICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICAgICAgYm90dG9tOiAwXG4gICAgICAgIH07XG4gICAgICAgIHBvc2l0aW9ucy5mb3JFYWNoKChwb3MpPT57XG4gICAgICAgICAgICBtYXJnaW5bcG9zXSA9IE1hdGgubWF4KGNoYXJ0QXJlYVtwb3NdLCBtYXhQYWRkaW5nW3Bvc10pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG1hcmdpbjtcbiAgICB9XG4gICAgcmV0dXJuIGhvcml6b250YWwgPyBtYXJnaW5Gb3JQb3NpdGlvbnMoW1xuICAgICAgICAnbGVmdCcsXG4gICAgICAgICdyaWdodCdcbiAgICBdKSA6IG1hcmdpbkZvclBvc2l0aW9ucyhbXG4gICAgICAgICd0b3AnLFxuICAgICAgICAnYm90dG9tJ1xuICAgIF0pO1xufVxuZnVuY3Rpb24gZml0Qm94ZXMoYm94ZXMsIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpIHtcbiAgICBjb25zdCByZWZpdEJveGVzID0gW107XG4gICAgbGV0IGksIGlsZW4sIGxheW91dCwgYm94LCByZWZpdCwgY2hhbmdlZDtcbiAgICBmb3IoaSA9IDAsIGlsZW4gPSBib3hlcy5sZW5ndGgsIHJlZml0ID0gMDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIGxheW91dCA9IGJveGVzW2ldO1xuICAgICAgICBib3ggPSBsYXlvdXQuYm94O1xuICAgICAgICBib3gudXBkYXRlKGxheW91dC53aWR0aCB8fCBjaGFydEFyZWEudywgbGF5b3V0LmhlaWdodCB8fCBjaGFydEFyZWEuaCwgZ2V0TWFyZ2lucyhsYXlvdXQuaG9yaXpvbnRhbCwgY2hhcnRBcmVhKSk7XG4gICAgICAgIGNvbnN0IHsgc2FtZSAsIG90aGVyICB9ID0gdXBkYXRlRGltcyhjaGFydEFyZWEsIHBhcmFtcywgbGF5b3V0LCBzdGFja3MpO1xuICAgICAgICByZWZpdCB8PSBzYW1lICYmIHJlZml0Qm94ZXMubGVuZ3RoO1xuICAgICAgICBjaGFuZ2VkID0gY2hhbmdlZCB8fCBvdGhlcjtcbiAgICAgICAgaWYgKCFib3guZnVsbFNpemUpIHtcbiAgICAgICAgICAgIHJlZml0Qm94ZXMucHVzaChsYXlvdXQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZWZpdCAmJiBmaXRCb3hlcyhyZWZpdEJveGVzLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKSB8fCBjaGFuZ2VkO1xufVxuZnVuY3Rpb24gc2V0Qm94RGltcyhib3gsIGxlZnQsIHRvcCwgd2lkdGgsIGhlaWdodCkge1xuICAgIGJveC50b3AgPSB0b3A7XG4gICAgYm94LmxlZnQgPSBsZWZ0O1xuICAgIGJveC5yaWdodCA9IGxlZnQgKyB3aWR0aDtcbiAgICBib3guYm90dG9tID0gdG9wICsgaGVpZ2h0O1xuICAgIGJveC53aWR0aCA9IHdpZHRoO1xuICAgIGJveC5oZWlnaHQgPSBoZWlnaHQ7XG59XG5mdW5jdGlvbiBwbGFjZUJveGVzKGJveGVzLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKSB7XG4gICAgY29uc3QgdXNlclBhZGRpbmcgPSBwYXJhbXMucGFkZGluZztcbiAgICBsZXQgeyB4ICwgeSAgfSA9IGNoYXJ0QXJlYTtcbiAgICBmb3IgKGNvbnN0IGxheW91dCBvZiBib3hlcyl7XG4gICAgICAgIGNvbnN0IGJveCA9IGxheW91dC5ib3g7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gc3RhY2tzW2xheW91dC5zdGFja10gfHwge1xuICAgICAgICAgICAgY291bnQ6IDEsXG4gICAgICAgICAgICBwbGFjZWQ6IDAsXG4gICAgICAgICAgICB3ZWlnaHQ6IDFcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgd2VpZ2h0ID0gbGF5b3V0LnN0YWNrV2VpZ2h0IC8gc3RhY2sud2VpZ2h0IHx8IDE7XG4gICAgICAgIGlmIChsYXlvdXQuaG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBjaGFydEFyZWEudyAqIHdlaWdodDtcbiAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IHN0YWNrLnNpemUgfHwgYm94LmhlaWdodDtcbiAgICAgICAgICAgIGlmIChkZWZpbmVkKHN0YWNrLnN0YXJ0KSkge1xuICAgICAgICAgICAgICAgIHkgPSBzdGFjay5zdGFydDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChib3guZnVsbFNpemUpIHtcbiAgICAgICAgICAgICAgICBzZXRCb3hEaW1zKGJveCwgdXNlclBhZGRpbmcubGVmdCwgeSwgcGFyYW1zLm91dGVyV2lkdGggLSB1c2VyUGFkZGluZy5yaWdodCAtIHVzZXJQYWRkaW5nLmxlZnQsIGhlaWdodCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNldEJveERpbXMoYm94LCBjaGFydEFyZWEubGVmdCArIHN0YWNrLnBsYWNlZCwgeSwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGFjay5zdGFydCA9IHk7XG4gICAgICAgICAgICBzdGFjay5wbGFjZWQgKz0gd2lkdGg7XG4gICAgICAgICAgICB5ID0gYm94LmJvdHRvbTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IGNoYXJ0QXJlYS5oICogd2VpZ2h0O1xuICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBzdGFjay5zaXplIHx8IGJveC53aWR0aDtcbiAgICAgICAgICAgIGlmIChkZWZpbmVkKHN0YWNrLnN0YXJ0KSkge1xuICAgICAgICAgICAgICAgIHggPSBzdGFjay5zdGFydDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChib3guZnVsbFNpemUpIHtcbiAgICAgICAgICAgICAgICBzZXRCb3hEaW1zKGJveCwgeCwgdXNlclBhZGRpbmcudG9wLCB3aWR0aCwgcGFyYW1zLm91dGVySGVpZ2h0IC0gdXNlclBhZGRpbmcuYm90dG9tIC0gdXNlclBhZGRpbmcudG9wKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2V0Qm94RGltcyhib3gsIHgsIGNoYXJ0QXJlYS50b3AgKyBzdGFjay5wbGFjZWQsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RhY2suc3RhcnQgPSB4O1xuICAgICAgICAgICAgc3RhY2sucGxhY2VkICs9IGhlaWdodDtcbiAgICAgICAgICAgIHggPSBib3gucmlnaHQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2hhcnRBcmVhLnggPSB4O1xuICAgIGNoYXJ0QXJlYS55ID0geTtcbn1cbnZhciBsYXlvdXRzID0ge1xuIGFkZEJveCAoY2hhcnQsIGl0ZW0pIHtcbiAgICAgICAgaWYgKCFjaGFydC5ib3hlcykge1xuICAgICAgICAgICAgY2hhcnQuYm94ZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBpdGVtLmZ1bGxTaXplID0gaXRlbS5mdWxsU2l6ZSB8fCBmYWxzZTtcbiAgICAgICAgaXRlbS5wb3NpdGlvbiA9IGl0ZW0ucG9zaXRpb24gfHwgJ3RvcCc7XG4gICAgICAgIGl0ZW0ud2VpZ2h0ID0gaXRlbS53ZWlnaHQgfHwgMDtcbiAgICAgICAgaXRlbS5fbGF5ZXJzID0gaXRlbS5fbGF5ZXJzIHx8IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHo6IDAsXG4gICAgICAgICAgICAgICAgICAgIGRyYXcgKGNoYXJ0QXJlYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5kcmF3KGNoYXJ0QXJlYSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdO1xuICAgICAgICB9O1xuICAgICAgICBjaGFydC5ib3hlcy5wdXNoKGl0ZW0pO1xuICAgIH0sXG4gcmVtb3ZlQm94IChjaGFydCwgbGF5b3V0SXRlbSkge1xuICAgICAgICBjb25zdCBpbmRleCA9IGNoYXJ0LmJveGVzID8gY2hhcnQuYm94ZXMuaW5kZXhPZihsYXlvdXRJdGVtKSA6IC0xO1xuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICBjaGFydC5ib3hlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgfSxcbiBjb25maWd1cmUgKGNoYXJ0LCBpdGVtLCBvcHRpb25zKSB7XG4gICAgICAgIGl0ZW0uZnVsbFNpemUgPSBvcHRpb25zLmZ1bGxTaXplO1xuICAgICAgICBpdGVtLnBvc2l0aW9uID0gb3B0aW9ucy5wb3NpdGlvbjtcbiAgICAgICAgaXRlbS53ZWlnaHQgPSBvcHRpb25zLndlaWdodDtcbiAgICB9LFxuIHVwZGF0ZSAoY2hhcnQsIHdpZHRoLCBoZWlnaHQsIG1pblBhZGRpbmcpIHtcbiAgICAgICAgaWYgKCFjaGFydCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcoY2hhcnQub3B0aW9ucy5sYXlvdXQucGFkZGluZyk7XG4gICAgICAgIGNvbnN0IGF2YWlsYWJsZVdpZHRoID0gTWF0aC5tYXgod2lkdGggLSBwYWRkaW5nLndpZHRoLCAwKTtcbiAgICAgICAgY29uc3QgYXZhaWxhYmxlSGVpZ2h0ID0gTWF0aC5tYXgoaGVpZ2h0IC0gcGFkZGluZy5oZWlnaHQsIDApO1xuICAgICAgICBjb25zdCBib3hlcyA9IGJ1aWxkTGF5b3V0Qm94ZXMoY2hhcnQuYm94ZXMpO1xuICAgICAgICBjb25zdCB2ZXJ0aWNhbEJveGVzID0gYm94ZXMudmVydGljYWw7XG4gICAgICAgIGNvbnN0IGhvcml6b250YWxCb3hlcyA9IGJveGVzLmhvcml6b250YWw7XG4gICAgICAgIGVhY2goY2hhcnQuYm94ZXMsIChib3gpPT57XG4gICAgICAgICAgICBpZiAodHlwZW9mIGJveC5iZWZvcmVMYXlvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBib3guYmVmb3JlTGF5b3V0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB2aXNpYmxlVmVydGljYWxCb3hDb3VudCA9IHZlcnRpY2FsQm94ZXMucmVkdWNlKCh0b3RhbCwgd3JhcCk9PndyYXAuYm94Lm9wdGlvbnMgJiYgd3JhcC5ib3gub3B0aW9ucy5kaXNwbGF5ID09PSBmYWxzZSA/IHRvdGFsIDogdG90YWwgKyAxLCAwKSB8fCAxO1xuICAgICAgICBjb25zdCBwYXJhbXMgPSBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgICAgIG91dGVyV2lkdGg6IHdpZHRoLFxuICAgICAgICAgICAgb3V0ZXJIZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgICAgIHBhZGRpbmcsXG4gICAgICAgICAgICBhdmFpbGFibGVXaWR0aCxcbiAgICAgICAgICAgIGF2YWlsYWJsZUhlaWdodCxcbiAgICAgICAgICAgIHZCb3hNYXhXaWR0aDogYXZhaWxhYmxlV2lkdGggLyAyIC8gdmlzaWJsZVZlcnRpY2FsQm94Q291bnQsXG4gICAgICAgICAgICBoQm94TWF4SGVpZ2h0OiBhdmFpbGFibGVIZWlnaHQgLyAyXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBtYXhQYWRkaW5nID0gT2JqZWN0LmFzc2lnbih7fSwgcGFkZGluZyk7XG4gICAgICAgIHVwZGF0ZU1heFBhZGRpbmcobWF4UGFkZGluZywgdG9QYWRkaW5nKG1pblBhZGRpbmcpKTtcbiAgICAgICAgY29uc3QgY2hhcnRBcmVhID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgICAgICBtYXhQYWRkaW5nLFxuICAgICAgICAgICAgdzogYXZhaWxhYmxlV2lkdGgsXG4gICAgICAgICAgICBoOiBhdmFpbGFibGVIZWlnaHQsXG4gICAgICAgICAgICB4OiBwYWRkaW5nLmxlZnQsXG4gICAgICAgICAgICB5OiBwYWRkaW5nLnRvcFxuICAgICAgICB9LCBwYWRkaW5nKTtcbiAgICAgICAgY29uc3Qgc3RhY2tzID0gc2V0TGF5b3V0RGltcyh2ZXJ0aWNhbEJveGVzLmNvbmNhdChob3Jpem9udGFsQm94ZXMpLCBwYXJhbXMpO1xuICAgICAgICBmaXRCb3hlcyhib3hlcy5mdWxsU2l6ZSwgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcyk7XG4gICAgICAgIGZpdEJveGVzKHZlcnRpY2FsQm94ZXMsIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpO1xuICAgICAgICBpZiAoZml0Qm94ZXMoaG9yaXpvbnRhbEJveGVzLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKSkge1xuICAgICAgICAgICAgZml0Qm94ZXModmVydGljYWxCb3hlcywgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcyk7XG4gICAgICAgIH1cbiAgICAgICAgaGFuZGxlTWF4UGFkZGluZyhjaGFydEFyZWEpO1xuICAgICAgICBwbGFjZUJveGVzKGJveGVzLmxlZnRBbmRUb3AsIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpO1xuICAgICAgICBjaGFydEFyZWEueCArPSBjaGFydEFyZWEudztcbiAgICAgICAgY2hhcnRBcmVhLnkgKz0gY2hhcnRBcmVhLmg7XG4gICAgICAgIHBsYWNlQm94ZXMoYm94ZXMucmlnaHRBbmRCb3R0b20sIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpO1xuICAgICAgICBjaGFydC5jaGFydEFyZWEgPSB7XG4gICAgICAgICAgICBsZWZ0OiBjaGFydEFyZWEubGVmdCxcbiAgICAgICAgICAgIHRvcDogY2hhcnRBcmVhLnRvcCxcbiAgICAgICAgICAgIHJpZ2h0OiBjaGFydEFyZWEubGVmdCArIGNoYXJ0QXJlYS53LFxuICAgICAgICAgICAgYm90dG9tOiBjaGFydEFyZWEudG9wICsgY2hhcnRBcmVhLmgsXG4gICAgICAgICAgICBoZWlnaHQ6IGNoYXJ0QXJlYS5oLFxuICAgICAgICAgICAgd2lkdGg6IGNoYXJ0QXJlYS53XG4gICAgICAgIH07XG4gICAgICAgIGVhY2goYm94ZXMuY2hhcnRBcmVhLCAobGF5b3V0KT0+e1xuICAgICAgICAgICAgY29uc3QgYm94ID0gbGF5b3V0LmJveDtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYm94LCBjaGFydC5jaGFydEFyZWEpO1xuICAgICAgICAgICAgYm94LnVwZGF0ZShjaGFydEFyZWEudywgY2hhcnRBcmVhLmgsIHtcbiAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgICAgICAgICBib3R0b206IDBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59O1xuXG5jbGFzcyBCYXNlUGxhdGZvcm0ge1xuIGFjcXVpcmVDb250ZXh0KGNhbnZhcywgYXNwZWN0UmF0aW8pIHt9XG4gcmVsZWFzZUNvbnRleHQoY29udGV4dCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuIGFkZEV2ZW50TGlzdGVuZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7fVxuIHJlbW92ZUV2ZW50TGlzdGVuZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7fVxuIGdldERldmljZVBpeGVsUmF0aW8oKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH1cbiBnZXRNYXhpbXVtU2l6ZShlbGVtZW50LCB3aWR0aCwgaGVpZ2h0LCBhc3BlY3RSYXRpbykge1xuICAgICAgICB3aWR0aCA9IE1hdGgubWF4KDAsIHdpZHRoIHx8IGVsZW1lbnQud2lkdGgpO1xuICAgICAgICBoZWlnaHQgPSBoZWlnaHQgfHwgZWxlbWVudC5oZWlnaHQ7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogTWF0aC5tYXgoMCwgYXNwZWN0UmF0aW8gPyBNYXRoLmZsb29yKHdpZHRoIC8gYXNwZWN0UmF0aW8pIDogaGVpZ2h0KVxuICAgICAgICB9O1xuICAgIH1cbiBpc0F0dGFjaGVkKGNhbnZhcykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gdXBkYXRlQ29uZmlnKGNvbmZpZykge1xuICAgIH1cbn1cblxuY2xhc3MgQmFzaWNQbGF0Zm9ybSBleHRlbmRzIEJhc2VQbGF0Zm9ybSB7XG4gICAgYWNxdWlyZUNvbnRleHQoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAmJiBpdGVtLmdldENvbnRleHQgJiYgaXRlbS5nZXRDb250ZXh0KCcyZCcpIHx8IG51bGw7XG4gICAgfVxuICAgIHVwZGF0ZUNvbmZpZyhjb25maWcpIHtcbiAgICAgICAgY29uZmlnLm9wdGlvbnMuYW5pbWF0aW9uID0gZmFsc2U7XG4gICAgfVxufVxuXG5jb25zdCBFWFBBTkRPX0tFWSA9ICckY2hhcnRqcyc7XG4gY29uc3QgRVZFTlRfVFlQRVMgPSB7XG4gICAgdG91Y2hzdGFydDogJ21vdXNlZG93bicsXG4gICAgdG91Y2htb3ZlOiAnbW91c2Vtb3ZlJyxcbiAgICB0b3VjaGVuZDogJ21vdXNldXAnLFxuICAgIHBvaW50ZXJlbnRlcjogJ21vdXNlZW50ZXInLFxuICAgIHBvaW50ZXJkb3duOiAnbW91c2Vkb3duJyxcbiAgICBwb2ludGVybW92ZTogJ21vdXNlbW92ZScsXG4gICAgcG9pbnRlcnVwOiAnbW91c2V1cCcsXG4gICAgcG9pbnRlcmxlYXZlOiAnbW91c2VvdXQnLFxuICAgIHBvaW50ZXJvdXQ6ICdtb3VzZW91dCdcbn07XG5jb25zdCBpc051bGxPckVtcHR5ID0gKHZhbHVlKT0+dmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09ICcnO1xuIGZ1bmN0aW9uIGluaXRDYW52YXMoY2FudmFzLCBhc3BlY3RSYXRpbykge1xuICAgIGNvbnN0IHN0eWxlID0gY2FudmFzLnN0eWxlO1xuICAgIGNvbnN0IHJlbmRlckhlaWdodCA9IGNhbnZhcy5nZXRBdHRyaWJ1dGUoJ2hlaWdodCcpO1xuICAgIGNvbnN0IHJlbmRlcldpZHRoID0gY2FudmFzLmdldEF0dHJpYnV0ZSgnd2lkdGgnKTtcbiAgICBjYW52YXNbRVhQQU5ET19LRVldID0ge1xuICAgICAgICBpbml0aWFsOiB7XG4gICAgICAgICAgICBoZWlnaHQ6IHJlbmRlckhlaWdodCxcbiAgICAgICAgICAgIHdpZHRoOiByZW5kZXJXaWR0aCxcbiAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogc3R5bGUuZGlzcGxheSxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHN0eWxlLmhlaWdodCxcbiAgICAgICAgICAgICAgICB3aWR0aDogc3R5bGUud2lkdGhcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgc3R5bGUuZGlzcGxheSA9IHN0eWxlLmRpc3BsYXkgfHwgJ2Jsb2NrJztcbiAgICBzdHlsZS5ib3hTaXppbmcgPSBzdHlsZS5ib3hTaXppbmcgfHwgJ2JvcmRlci1ib3gnO1xuICAgIGlmIChpc051bGxPckVtcHR5KHJlbmRlcldpZHRoKSkge1xuICAgICAgICBjb25zdCBkaXNwbGF5V2lkdGggPSByZWFkVXNlZFNpemUoY2FudmFzLCAnd2lkdGgnKTtcbiAgICAgICAgaWYgKGRpc3BsYXlXaWR0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjYW52YXMud2lkdGggPSBkaXNwbGF5V2lkdGg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzTnVsbE9yRW1wdHkocmVuZGVySGVpZ2h0KSkge1xuICAgICAgICBpZiAoY2FudmFzLnN0eWxlLmhlaWdodCA9PT0gJycpIHtcbiAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBjYW52YXMud2lkdGggLyAoYXNwZWN0UmF0aW8gfHwgMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBkaXNwbGF5SGVpZ2h0ID0gcmVhZFVzZWRTaXplKGNhbnZhcywgJ2hlaWdodCcpO1xuICAgICAgICAgICAgaWYgKGRpc3BsYXlIZWlnaHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBkaXNwbGF5SGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjYW52YXM7XG59XG5jb25zdCBldmVudExpc3RlbmVyT3B0aW9ucyA9IHN1cHBvcnRzRXZlbnRMaXN0ZW5lck9wdGlvbnMgPyB7XG4gICAgcGFzc2l2ZTogdHJ1ZVxufSA6IGZhbHNlO1xuZnVuY3Rpb24gYWRkTGlzdGVuZXIobm9kZSwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIsIGV2ZW50TGlzdGVuZXJPcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKGNoYXJ0LCB0eXBlLCBsaXN0ZW5lcikge1xuICAgIGNoYXJ0LmNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCBldmVudExpc3RlbmVyT3B0aW9ucyk7XG59XG5mdW5jdGlvbiBmcm9tTmF0aXZlRXZlbnQoZXZlbnQsIGNoYXJ0KSB7XG4gICAgY29uc3QgdHlwZSA9IEVWRU5UX1RZUEVTW2V2ZW50LnR5cGVdIHx8IGV2ZW50LnR5cGU7XG4gICAgY29uc3QgeyB4ICwgeSAgfSA9IGdldFJlbGF0aXZlUG9zaXRpb24oZXZlbnQsIGNoYXJ0KTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlLFxuICAgICAgICBjaGFydCxcbiAgICAgICAgbmF0aXZlOiBldmVudCxcbiAgICAgICAgeDogeCAhPT0gdW5kZWZpbmVkID8geCA6IG51bGwsXG4gICAgICAgIHk6IHkgIT09IHVuZGVmaW5lZCA/IHkgOiBudWxsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIG5vZGVMaXN0Q29udGFpbnMobm9kZUxpc3QsIGNhbnZhcykge1xuICAgIGZvciAoY29uc3Qgbm9kZSBvZiBub2RlTGlzdCl7XG4gICAgICAgIGlmIChub2RlID09PSBjYW52YXMgfHwgbm9kZS5jb250YWlucyhjYW52YXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZUF0dGFjaE9ic2VydmVyKGNoYXJ0LCB0eXBlLCBsaXN0ZW5lcikge1xuICAgIGNvbnN0IGNhbnZhcyA9IGNoYXJ0LmNhbnZhcztcbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKChlbnRyaWVzKT0+e1xuICAgICAgICBsZXQgdHJpZ2dlciA9IGZhbHNlO1xuICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpe1xuICAgICAgICAgICAgdHJpZ2dlciA9IHRyaWdnZXIgfHwgbm9kZUxpc3RDb250YWlucyhlbnRyeS5hZGRlZE5vZGVzLCBjYW52YXMpO1xuICAgICAgICAgICAgdHJpZ2dlciA9IHRyaWdnZXIgJiYgIW5vZGVMaXN0Q29udGFpbnMoZW50cnkucmVtb3ZlZE5vZGVzLCBjYW52YXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cmlnZ2VyKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcigpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudCwge1xuICAgICAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgICAgIHN1YnRyZWU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gb2JzZXJ2ZXI7XG59XG5mdW5jdGlvbiBjcmVhdGVEZXRhY2hPYnNlcnZlcihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgICBjb25zdCBjYW52YXMgPSBjaGFydC5jYW52YXM7XG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigoZW50cmllcyk9PntcbiAgICAgICAgbGV0IHRyaWdnZXIgPSBmYWxzZTtcbiAgICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBlbnRyaWVzKXtcbiAgICAgICAgICAgIHRyaWdnZXIgPSB0cmlnZ2VyIHx8IG5vZGVMaXN0Q29udGFpbnMoZW50cnkucmVtb3ZlZE5vZGVzLCBjYW52YXMpO1xuICAgICAgICAgICAgdHJpZ2dlciA9IHRyaWdnZXIgJiYgIW5vZGVMaXN0Q29udGFpbnMoZW50cnkuYWRkZWROb2RlcywgY2FudmFzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHJpZ2dlcikge1xuICAgICAgICAgICAgbGlzdGVuZXIoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIG9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQsIHtcbiAgICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgICBzdWJ0cmVlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIG9ic2VydmVyO1xufVxuY29uc3QgZHJwTGlzdGVuaW5nQ2hhcnRzID0gbmV3IE1hcCgpO1xubGV0IG9sZERldmljZVBpeGVsUmF0aW8gPSAwO1xuZnVuY3Rpb24gb25XaW5kb3dSZXNpemUoKSB7XG4gICAgY29uc3QgZHByID0gd2luZG93LmRldmljZVBpeGVsUmF0aW87XG4gICAgaWYgKGRwciA9PT0gb2xkRGV2aWNlUGl4ZWxSYXRpbykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIG9sZERldmljZVBpeGVsUmF0aW8gPSBkcHI7XG4gICAgZHJwTGlzdGVuaW5nQ2hhcnRzLmZvckVhY2goKHJlc2l6ZSwgY2hhcnQpPT57XG4gICAgICAgIGlmIChjaGFydC5jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyAhPT0gZHByKSB7XG4gICAgICAgICAgICByZXNpemUoKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZnVuY3Rpb24gbGlzdGVuRGV2aWNlUGl4ZWxSYXRpb0NoYW5nZXMoY2hhcnQsIHJlc2l6ZSkge1xuICAgIGlmICghZHJwTGlzdGVuaW5nQ2hhcnRzLnNpemUpIHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uV2luZG93UmVzaXplKTtcbiAgICB9XG4gICAgZHJwTGlzdGVuaW5nQ2hhcnRzLnNldChjaGFydCwgcmVzaXplKTtcbn1cbmZ1bmN0aW9uIHVubGlzdGVuRGV2aWNlUGl4ZWxSYXRpb0NoYW5nZXMoY2hhcnQpIHtcbiAgICBkcnBMaXN0ZW5pbmdDaGFydHMuZGVsZXRlKGNoYXJ0KTtcbiAgICBpZiAoIWRycExpc3RlbmluZ0NoYXJ0cy5zaXplKSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvbldpbmRvd1Jlc2l6ZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlUmVzaXplT2JzZXJ2ZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgY29uc3QgY2FudmFzID0gY2hhcnQuY2FudmFzO1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IGNhbnZhcyAmJiBfZ2V0UGFyZW50Tm9kZShjYW52YXMpO1xuICAgIGlmICghY29udGFpbmVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcmVzaXplID0gdGhyb3R0bGVkKCh3aWR0aCwgaGVpZ2h0KT0+e1xuICAgICAgICBjb25zdCB3ID0gY29udGFpbmVyLmNsaWVudFdpZHRoO1xuICAgICAgICBsaXN0ZW5lcih3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgaWYgKHcgPCBjb250YWluZXIuY2xpZW50V2lkdGgpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyKCk7XG4gICAgICAgIH1cbiAgICB9LCB3aW5kb3cpO1xuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKChlbnRyaWVzKT0+e1xuICAgICAgICBjb25zdCBlbnRyeSA9IGVudHJpZXNbMF07XG4gICAgICAgIGNvbnN0IHdpZHRoID0gZW50cnkuY29udGVudFJlY3Qud2lkdGg7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IGVudHJ5LmNvbnRlbnRSZWN0LmhlaWdodDtcbiAgICAgICAgaWYgKHdpZHRoID09PSAwICYmIGhlaWdodCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICB9KTtcbiAgICBvYnNlcnZlci5vYnNlcnZlKGNvbnRhaW5lcik7XG4gICAgbGlzdGVuRGV2aWNlUGl4ZWxSYXRpb0NoYW5nZXMoY2hhcnQsIHJlc2l6ZSk7XG4gICAgcmV0dXJuIG9ic2VydmVyO1xufVxuZnVuY3Rpb24gcmVsZWFzZU9ic2VydmVyKGNoYXJ0LCB0eXBlLCBvYnNlcnZlcikge1xuICAgIGlmIChvYnNlcnZlcikge1xuICAgICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSAncmVzaXplJykge1xuICAgICAgICB1bmxpc3RlbkRldmljZVBpeGVsUmF0aW9DaGFuZ2VzKGNoYXJ0KTtcbiAgICB9XG59XG5mdW5jdGlvbiBjcmVhdGVQcm94eUFuZExpc3RlbihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgICBjb25zdCBjYW52YXMgPSBjaGFydC5jYW52YXM7XG4gICAgY29uc3QgcHJveHkgPSB0aHJvdHRsZWQoKGV2ZW50KT0+e1xuICAgICAgICBpZiAoY2hhcnQuY3R4ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcihmcm9tTmF0aXZlRXZlbnQoZXZlbnQsIGNoYXJ0KSk7XG4gICAgICAgIH1cbiAgICB9LCBjaGFydCk7XG4gICAgYWRkTGlzdGVuZXIoY2FudmFzLCB0eXBlLCBwcm94eSk7XG4gICAgcmV0dXJuIHByb3h5O1xufVxuIGNsYXNzIERvbVBsYXRmb3JtIGV4dGVuZHMgQmFzZVBsYXRmb3JtIHtcbiBhY3F1aXJlQ29udGV4dChjYW52YXMsIGFzcGVjdFJhdGlvKSB7XG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBjYW52YXMgJiYgY2FudmFzLmdldENvbnRleHQgJiYgY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgIGlmIChjb250ZXh0ICYmIGNvbnRleHQuY2FudmFzID09PSBjYW52YXMpIHtcbiAgICAgICAgICAgIGluaXRDYW52YXMoY2FudmFzLCBhc3BlY3RSYXRpbyk7XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gcmVsZWFzZUNvbnRleHQoY29udGV4dCkge1xuICAgICAgICBjb25zdCBjYW52YXMgPSBjb250ZXh0LmNhbnZhcztcbiAgICAgICAgaWYgKCFjYW52YXNbRVhQQU5ET19LRVldKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW5pdGlhbCA9IGNhbnZhc1tFWFBBTkRPX0tFWV0uaW5pdGlhbDtcbiAgICAgICAgW1xuICAgICAgICAgICAgJ2hlaWdodCcsXG4gICAgICAgICAgICAnd2lkdGgnXG4gICAgICAgIF0uZm9yRWFjaCgocHJvcCk9PntcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gaW5pdGlhbFtwcm9wXTtcbiAgICAgICAgICAgIGlmIChpc051bGxPclVuZGVmKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGNhbnZhcy5yZW1vdmVBdHRyaWJ1dGUocHJvcCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNhbnZhcy5zZXRBdHRyaWJ1dGUocHJvcCwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgc3R5bGUgPSBpbml0aWFsLnN0eWxlIHx8IHt9O1xuICAgICAgICBPYmplY3Qua2V5cyhzdHlsZSkuZm9yRWFjaCgoa2V5KT0+e1xuICAgICAgICAgICAgY2FudmFzLnN0eWxlW2tleV0gPSBzdHlsZVtrZXldO1xuICAgICAgICB9KTtcbiAgICAgICAgY2FudmFzLndpZHRoID0gY2FudmFzLndpZHRoO1xuICAgICAgICBkZWxldGUgY2FudmFzW0VYUEFORE9fS0VZXTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuIGFkZEV2ZW50TGlzdGVuZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihjaGFydCwgdHlwZSk7XG4gICAgICAgIGNvbnN0IHByb3hpZXMgPSBjaGFydC4kcHJveGllcyB8fCAoY2hhcnQuJHByb3hpZXMgPSB7fSk7XG4gICAgICAgIGNvbnN0IGhhbmRsZXJzID0ge1xuICAgICAgICAgICAgYXR0YWNoOiBjcmVhdGVBdHRhY2hPYnNlcnZlcixcbiAgICAgICAgICAgIGRldGFjaDogY3JlYXRlRGV0YWNoT2JzZXJ2ZXIsXG4gICAgICAgICAgICByZXNpemU6IGNyZWF0ZVJlc2l6ZU9ic2VydmVyXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBoYW5kbGVyc1t0eXBlXSB8fCBjcmVhdGVQcm94eUFuZExpc3RlbjtcbiAgICAgICAgcHJveGllc1t0eXBlXSA9IGhhbmRsZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKTtcbiAgICB9XG4gcmVtb3ZlRXZlbnRMaXN0ZW5lcihjaGFydCwgdHlwZSkge1xuICAgICAgICBjb25zdCBwcm94aWVzID0gY2hhcnQuJHByb3hpZXMgfHwgKGNoYXJ0LiRwcm94aWVzID0ge30pO1xuICAgICAgICBjb25zdCBwcm94eSA9IHByb3hpZXNbdHlwZV07XG4gICAgICAgIGlmICghcHJveHkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBoYW5kbGVycyA9IHtcbiAgICAgICAgICAgIGF0dGFjaDogcmVsZWFzZU9ic2VydmVyLFxuICAgICAgICAgICAgZGV0YWNoOiByZWxlYXNlT2JzZXJ2ZXIsXG4gICAgICAgICAgICByZXNpemU6IHJlbGVhc2VPYnNlcnZlclxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBoYW5kbGVyID0gaGFuZGxlcnNbdHlwZV0gfHwgcmVtb3ZlTGlzdGVuZXI7XG4gICAgICAgIGhhbmRsZXIoY2hhcnQsIHR5cGUsIHByb3h5KTtcbiAgICAgICAgcHJveGllc1t0eXBlXSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZ2V0RGV2aWNlUGl4ZWxSYXRpbygpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICAgIH1cbiBnZXRNYXhpbXVtU2l6ZShjYW52YXMsIHdpZHRoLCBoZWlnaHQsIGFzcGVjdFJhdGlvKSB7XG4gICAgICAgIHJldHVybiBnZXRNYXhpbXVtU2l6ZShjYW52YXMsIHdpZHRoLCBoZWlnaHQsIGFzcGVjdFJhdGlvKTtcbiAgICB9XG4gaXNBdHRhY2hlZChjYW52YXMpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gX2dldFBhcmVudE5vZGUoY2FudmFzKTtcbiAgICAgICAgcmV0dXJuICEhKGNvbnRhaW5lciAmJiBjb250YWluZXIuaXNDb25uZWN0ZWQpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gX2RldGVjdFBsYXRmb3JtKGNhbnZhcykge1xuICAgIGlmICghX2lzRG9tU3VwcG9ydGVkKCkgfHwgdHlwZW9mIE9mZnNjcmVlbkNhbnZhcyAhPT0gJ3VuZGVmaW5lZCcgJiYgY2FudmFzIGluc3RhbmNlb2YgT2Zmc2NyZWVuQ2FudmFzKSB7XG4gICAgICAgIHJldHVybiBCYXNpY1BsYXRmb3JtO1xuICAgIH1cbiAgICByZXR1cm4gRG9tUGxhdGZvcm07XG59XG5cbmNsYXNzIEVsZW1lbnQge1xuICAgIHN0YXRpYyBkZWZhdWx0cyA9IHt9O1xuICAgIHN0YXRpYyBkZWZhdWx0Um91dGVzID0gdW5kZWZpbmVkO1xuICAgIHg7XG4gICAgeTtcbiAgICBhY3RpdmUgPSBmYWxzZTtcbiAgICBvcHRpb25zO1xuICAgICRhbmltYXRpb25zO1xuICAgIHRvb2x0aXBQb3NpdGlvbih1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgIGNvbnN0IHsgeCAsIHkgIH0gPSB0aGlzLmdldFByb3BzKFtcbiAgICAgICAgICAgICd4JyxcbiAgICAgICAgICAgICd5J1xuICAgICAgICBdLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHgsXG4gICAgICAgICAgICB5XG4gICAgICAgIH07XG4gICAgfVxuICAgIGhhc1ZhbHVlKCkge1xuICAgICAgICByZXR1cm4gaXNOdW1iZXIodGhpcy54KSAmJiBpc051bWJlcih0aGlzLnkpO1xuICAgIH1cbiAgICBnZXRQcm9wcyhwcm9wcywgZmluYWwpIHtcbiAgICAgICAgY29uc3QgYW5pbXMgPSB0aGlzLiRhbmltYXRpb25zO1xuICAgICAgICBpZiAoIWZpbmFsIHx8ICFhbmltcykge1xuICAgICAgICAgICAgLy8gbGV0J3Mgbm90IGNyZWF0ZSBhbiBvYmplY3QsIGlmIG5vdCBuZWVkZWRcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJldCA9IHt9O1xuICAgICAgICBwcm9wcy5mb3JFYWNoKChwcm9wKT0+e1xuICAgICAgICAgICAgcmV0W3Byb3BdID0gYW5pbXNbcHJvcF0gJiYgYW5pbXNbcHJvcF0uYWN0aXZlKCkgPyBhbmltc1twcm9wXS5fdG8gOiB0aGlzW3Byb3BdO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGF1dG9Ta2lwKHNjYWxlLCB0aWNrcykge1xuICAgIGNvbnN0IHRpY2tPcHRzID0gc2NhbGUub3B0aW9ucy50aWNrcztcbiAgICBjb25zdCBkZXRlcm1pbmVkTWF4VGlja3MgPSBkZXRlcm1pbmVNYXhUaWNrcyhzY2FsZSk7XG4gICAgY29uc3QgdGlja3NMaW1pdCA9IE1hdGgubWluKHRpY2tPcHRzLm1heFRpY2tzTGltaXQgfHwgZGV0ZXJtaW5lZE1heFRpY2tzLCBkZXRlcm1pbmVkTWF4VGlja3MpO1xuICAgIGNvbnN0IG1ham9ySW5kaWNlcyA9IHRpY2tPcHRzLm1ham9yLmVuYWJsZWQgPyBnZXRNYWpvckluZGljZXModGlja3MpIDogW107XG4gICAgY29uc3QgbnVtTWFqb3JJbmRpY2VzID0gbWFqb3JJbmRpY2VzLmxlbmd0aDtcbiAgICBjb25zdCBmaXJzdCA9IG1ham9ySW5kaWNlc1swXTtcbiAgICBjb25zdCBsYXN0ID0gbWFqb3JJbmRpY2VzW251bU1ham9ySW5kaWNlcyAtIDFdO1xuICAgIGNvbnN0IG5ld1RpY2tzID0gW107XG4gICAgaWYgKG51bU1ham9ySW5kaWNlcyA+IHRpY2tzTGltaXQpIHtcbiAgICAgICAgc2tpcE1ham9ycyh0aWNrcywgbmV3VGlja3MsIG1ham9ySW5kaWNlcywgbnVtTWFqb3JJbmRpY2VzIC8gdGlja3NMaW1pdCk7XG4gICAgICAgIHJldHVybiBuZXdUaWNrcztcbiAgICB9XG4gICAgY29uc3Qgc3BhY2luZyA9IGNhbGN1bGF0ZVNwYWNpbmcobWFqb3JJbmRpY2VzLCB0aWNrcywgdGlja3NMaW1pdCk7XG4gICAgaWYgKG51bU1ham9ySW5kaWNlcyA+IDApIHtcbiAgICAgICAgbGV0IGksIGlsZW47XG4gICAgICAgIGNvbnN0IGF2Z01ham9yU3BhY2luZyA9IG51bU1ham9ySW5kaWNlcyA+IDEgPyBNYXRoLnJvdW5kKChsYXN0IC0gZmlyc3QpIC8gKG51bU1ham9ySW5kaWNlcyAtIDEpKSA6IG51bGw7XG4gICAgICAgIHNraXAodGlja3MsIG5ld1RpY2tzLCBzcGFjaW5nLCBpc051bGxPclVuZGVmKGF2Z01ham9yU3BhY2luZykgPyAwIDogZmlyc3QgLSBhdmdNYWpvclNwYWNpbmcsIGZpcnN0KTtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gbnVtTWFqb3JJbmRpY2VzIC0gMTsgaSA8IGlsZW47IGkrKyl7XG4gICAgICAgICAgICBza2lwKHRpY2tzLCBuZXdUaWNrcywgc3BhY2luZywgbWFqb3JJbmRpY2VzW2ldLCBtYWpvckluZGljZXNbaSArIDFdKTtcbiAgICAgICAgfVxuICAgICAgICBza2lwKHRpY2tzLCBuZXdUaWNrcywgc3BhY2luZywgbGFzdCwgaXNOdWxsT3JVbmRlZihhdmdNYWpvclNwYWNpbmcpID8gdGlja3MubGVuZ3RoIDogbGFzdCArIGF2Z01ham9yU3BhY2luZyk7XG4gICAgICAgIHJldHVybiBuZXdUaWNrcztcbiAgICB9XG4gICAgc2tpcCh0aWNrcywgbmV3VGlja3MsIHNwYWNpbmcpO1xuICAgIHJldHVybiBuZXdUaWNrcztcbn1cbmZ1bmN0aW9uIGRldGVybWluZU1heFRpY2tzKHNjYWxlKSB7XG4gICAgY29uc3Qgb2Zmc2V0ID0gc2NhbGUub3B0aW9ucy5vZmZzZXQ7XG4gICAgY29uc3QgdGlja0xlbmd0aCA9IHNjYWxlLl90aWNrU2l6ZSgpO1xuICAgIGNvbnN0IG1heFNjYWxlID0gc2NhbGUuX2xlbmd0aCAvIHRpY2tMZW5ndGggKyAob2Zmc2V0ID8gMCA6IDEpO1xuICAgIGNvbnN0IG1heENoYXJ0ID0gc2NhbGUuX21heExlbmd0aCAvIHRpY2tMZW5ndGg7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5taW4obWF4U2NhbGUsIG1heENoYXJ0KSk7XG59XG4gZnVuY3Rpb24gY2FsY3VsYXRlU3BhY2luZyhtYWpvckluZGljZXMsIHRpY2tzLCB0aWNrc0xpbWl0KSB7XG4gICAgY29uc3QgZXZlbk1ham9yU3BhY2luZyA9IGdldEV2ZW5TcGFjaW5nKG1ham9ySW5kaWNlcyk7XG4gICAgY29uc3Qgc3BhY2luZyA9IHRpY2tzLmxlbmd0aCAvIHRpY2tzTGltaXQ7XG4gICAgaWYgKCFldmVuTWFqb3JTcGFjaW5nKSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1heChzcGFjaW5nLCAxKTtcbiAgICB9XG4gICAgY29uc3QgZmFjdG9ycyA9IF9mYWN0b3JpemUoZXZlbk1ham9yU3BhY2luZyk7XG4gICAgZm9yKGxldCBpID0gMCwgaWxlbiA9IGZhY3RvcnMubGVuZ3RoIC0gMTsgaSA8IGlsZW47IGkrKyl7XG4gICAgICAgIGNvbnN0IGZhY3RvciA9IGZhY3RvcnNbaV07XG4gICAgICAgIGlmIChmYWN0b3IgPiBzcGFjaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFjdG9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBNYXRoLm1heChzcGFjaW5nLCAxKTtcbn1cbiBmdW5jdGlvbiBnZXRNYWpvckluZGljZXModGlja3MpIHtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBsZXQgaSwgaWxlbjtcbiAgICBmb3IoaSA9IDAsIGlsZW4gPSB0aWNrcy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspe1xuICAgICAgICBpZiAodGlja3NbaV0ubWFqb3IpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4gZnVuY3Rpb24gc2tpcE1ham9ycyh0aWNrcywgbmV3VGlja3MsIG1ham9ySW5kaWNlcywgc3BhY2luZykge1xuICAgIGxldCBjb3VudCA9IDA7XG4gICAgbGV0IG5leHQgPSBtYWpvckluZGljZXNbMF07XG4gICAgbGV0IGk7XG4gICAgc3BhY2luZyA9IE1hdGguY2VpbChzcGFjaW5nKTtcbiAgICBmb3IoaSA9IDA7IGkgPCB0aWNrcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGlmIChpID09PSBuZXh0KSB7XG4gICAgICAgICAgICBuZXdUaWNrcy5wdXNoKHRpY2tzW2ldKTtcbiAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICBuZXh0ID0gbWFqb3JJbmRpY2VzW2NvdW50ICogc3BhY2luZ107XG4gICAgICAgIH1cbiAgICB9XG59XG4gZnVuY3Rpb24gc2tpcCh0aWNrcywgbmV3VGlja3MsIHNwYWNpbmcsIG1ham9yU3RhcnQsIG1ham9yRW5kKSB7XG4gICAgY29uc3Qgc3RhcnQgPSB2YWx1ZU9yRGVmYXVsdChtYWpvclN0YXJ0LCAwKTtcbiAgICBjb25zdCBlbmQgPSBNYXRoLm1pbih2YWx1ZU9yRGVmYXVsdChtYWpvckVuZCwgdGlja3MubGVuZ3RoKSwgdGlja3MubGVuZ3RoKTtcbiAgICBsZXQgY291bnQgPSAwO1xuICAgIGxldCBsZW5ndGgsIGksIG5leHQ7XG4gICAgc3BhY2luZyA9IE1hdGguY2VpbChzcGFjaW5nKTtcbiAgICBpZiAobWFqb3JFbmQpIHtcbiAgICAgICAgbGVuZ3RoID0gbWFqb3JFbmQgLSBtYWpvclN0YXJ0O1xuICAgICAgICBzcGFjaW5nID0gbGVuZ3RoIC8gTWF0aC5mbG9vcihsZW5ndGggLyBzcGFjaW5nKTtcbiAgICB9XG4gICAgbmV4dCA9IHN0YXJ0O1xuICAgIHdoaWxlKG5leHQgPCAwKXtcbiAgICAgICAgY291bnQrKztcbiAgICAgICAgbmV4dCA9IE1hdGgucm91bmQoc3RhcnQgKyBjb3VudCAqIHNwYWNpbmcpO1xuICAgIH1cbiAgICBmb3IoaSA9IE1hdGgubWF4KHN0YXJ0LCAwKTsgaSA8IGVuZDsgaSsrKXtcbiAgICAgICAgaWYgKGkgPT09IG5leHQpIHtcbiAgICAgICAgICAgIG5ld1RpY2tzLnB1c2godGlja3NbaV0pO1xuICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgIG5leHQgPSBNYXRoLnJvdW5kKHN0YXJ0ICsgY291bnQgKiBzcGFjaW5nKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiBmdW5jdGlvbiBnZXRFdmVuU3BhY2luZyhhcnIpIHtcbiAgICBjb25zdCBsZW4gPSBhcnIubGVuZ3RoO1xuICAgIGxldCBpLCBkaWZmO1xuICAgIGlmIChsZW4gPCAyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yKGRpZmYgPSBhcnJbMF0sIGkgPSAxOyBpIDwgbGVuOyArK2kpe1xuICAgICAgICBpZiAoYXJyW2ldIC0gYXJyW2kgLSAxXSAhPT0gZGlmZikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkaWZmO1xufVxuXG5jb25zdCByZXZlcnNlQWxpZ24gPSAoYWxpZ24pPT5hbGlnbiA9PT0gJ2xlZnQnID8gJ3JpZ2h0JyA6IGFsaWduID09PSAncmlnaHQnID8gJ2xlZnQnIDogYWxpZ247XG5jb25zdCBvZmZzZXRGcm9tRWRnZSA9IChzY2FsZSwgZWRnZSwgb2Zmc2V0KT0+ZWRnZSA9PT0gJ3RvcCcgfHwgZWRnZSA9PT0gJ2xlZnQnID8gc2NhbGVbZWRnZV0gKyBvZmZzZXQgOiBzY2FsZVtlZGdlXSAtIG9mZnNldDtcbmNvbnN0IGdldFRpY2tzTGltaXQgPSAodGlja3NMZW5ndGgsIG1heFRpY2tzTGltaXQpPT5NYXRoLm1pbihtYXhUaWNrc0xpbWl0IHx8IHRpY2tzTGVuZ3RoLCB0aWNrc0xlbmd0aCk7XG4gZnVuY3Rpb24gc2FtcGxlKGFyciwgbnVtSXRlbXMpIHtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBjb25zdCBpbmNyZW1lbnQgPSBhcnIubGVuZ3RoIC8gbnVtSXRlbXM7XG4gICAgY29uc3QgbGVuID0gYXJyLmxlbmd0aDtcbiAgICBsZXQgaSA9IDA7XG4gICAgZm9yKDsgaSA8IGxlbjsgaSArPSBpbmNyZW1lbnQpe1xuICAgICAgICByZXN1bHQucHVzaChhcnJbTWF0aC5mbG9vcihpKV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIGZ1bmN0aW9uIGdldFBpeGVsRm9yR3JpZExpbmUoc2NhbGUsIGluZGV4LCBvZmZzZXRHcmlkTGluZXMpIHtcbiAgICBjb25zdCBsZW5ndGggPSBzY2FsZS50aWNrcy5sZW5ndGg7XG4gICAgY29uc3QgdmFsaWRJbmRleCA9IE1hdGgubWluKGluZGV4LCBsZW5ndGggLSAxKTtcbiAgICBjb25zdCBzdGFydCA9IHNjYWxlLl9zdGFydFBpeGVsO1xuICAgIGNvbnN0IGVuZCA9IHNjYWxlLl9lbmRQaXhlbDtcbiAgICBjb25zdCBlcHNpbG9uID0gMWUtNjtcbiAgICBsZXQgbGluZVZhbHVlID0gc2NhbGUuZ2V0UGl4ZWxGb3JUaWNrKHZhbGlkSW5kZXgpO1xuICAgIGxldCBvZmZzZXQ7XG4gICAgaWYgKG9mZnNldEdyaWRMaW5lcykge1xuICAgICAgICBpZiAobGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBvZmZzZXQgPSBNYXRoLm1heChsaW5lVmFsdWUgLSBzdGFydCwgZW5kIC0gbGluZVZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgb2Zmc2V0ID0gKHNjYWxlLmdldFBpeGVsRm9yVGljaygxKSAtIGxpbmVWYWx1ZSkgLyAyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2Zmc2V0ID0gKGxpbmVWYWx1ZSAtIHNjYWxlLmdldFBpeGVsRm9yVGljayh2YWxpZEluZGV4IC0gMSkpIC8gMjtcbiAgICAgICAgfVxuICAgICAgICBsaW5lVmFsdWUgKz0gdmFsaWRJbmRleCA8IGluZGV4ID8gb2Zmc2V0IDogLW9mZnNldDtcbiAgICAgICAgaWYgKGxpbmVWYWx1ZSA8IHN0YXJ0IC0gZXBzaWxvbiB8fCBsaW5lVmFsdWUgPiBlbmQgKyBlcHNpbG9uKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxpbmVWYWx1ZTtcbn1cbiBmdW5jdGlvbiBnYXJiYWdlQ29sbGVjdChjYWNoZXMsIGxlbmd0aCkge1xuICAgIGVhY2goY2FjaGVzLCAoY2FjaGUpPT57XG4gICAgICAgIGNvbnN0IGdjID0gY2FjaGUuZ2M7XG4gICAgICAgIGNvbnN0IGdjTGVuID0gZ2MubGVuZ3RoIC8gMjtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGlmIChnY0xlbiA+IGxlbmd0aCkge1xuICAgICAgICAgICAgZm9yKGkgPSAwOyBpIDwgZ2NMZW47ICsraSl7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGNhY2hlLmRhdGFbZ2NbaV1dO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ2Muc3BsaWNlKDAsIGdjTGVuKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuIGZ1bmN0aW9uIGdldFRpY2tNYXJrTGVuZ3RoKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5kcmF3VGlja3MgPyBvcHRpb25zLnRpY2tMZW5ndGggOiAwO1xufVxuIGZ1bmN0aW9uIGdldFRpdGxlSGVpZ2h0KG9wdGlvbnMsIGZhbGxiYWNrKSB7XG4gICAgaWYgKCFvcHRpb25zLmRpc3BsYXkpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGNvbnN0IGZvbnQgPSB0b0ZvbnQob3B0aW9ucy5mb250LCBmYWxsYmFjayk7XG4gICAgY29uc3QgcGFkZGluZyA9IHRvUGFkZGluZyhvcHRpb25zLnBhZGRpbmcpO1xuICAgIGNvbnN0IGxpbmVzID0gaXNBcnJheShvcHRpb25zLnRleHQpID8gb3B0aW9ucy50ZXh0Lmxlbmd0aCA6IDE7XG4gICAgcmV0dXJuIGxpbmVzICogZm9udC5saW5lSGVpZ2h0ICsgcGFkZGluZy5oZWlnaHQ7XG59XG5mdW5jdGlvbiBjcmVhdGVTY2FsZUNvbnRleHQocGFyZW50LCBzY2FsZSkge1xuICAgIHJldHVybiBjcmVhdGVDb250ZXh0KHBhcmVudCwge1xuICAgICAgICBzY2FsZSxcbiAgICAgICAgdHlwZTogJ3NjYWxlJ1xuICAgIH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlVGlja0NvbnRleHQocGFyZW50LCBpbmRleCwgdGljaykge1xuICAgIHJldHVybiBjcmVhdGVDb250ZXh0KHBhcmVudCwge1xuICAgICAgICB0aWNrLFxuICAgICAgICBpbmRleCxcbiAgICAgICAgdHlwZTogJ3RpY2snXG4gICAgfSk7XG59XG5mdW5jdGlvbiB0aXRsZUFsaWduKGFsaWduLCBwb3NpdGlvbiwgcmV2ZXJzZSkge1xuICAgICBsZXQgcmV0ID0gX3RvTGVmdFJpZ2h0Q2VudGVyKGFsaWduKTtcbiAgICBpZiAocmV2ZXJzZSAmJiBwb3NpdGlvbiAhPT0gJ3JpZ2h0JyB8fCAhcmV2ZXJzZSAmJiBwb3NpdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICByZXQgPSByZXZlcnNlQWxpZ24ocmV0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn1cbmZ1bmN0aW9uIHRpdGxlQXJncyhzY2FsZSwgb2Zmc2V0LCBwb3NpdGlvbiwgYWxpZ24pIHtcbiAgICBjb25zdCB7IHRvcCAsIGxlZnQgLCBib3R0b20gLCByaWdodCAsIGNoYXJ0ICB9ID0gc2NhbGU7XG4gICAgY29uc3QgeyBjaGFydEFyZWEgLCBzY2FsZXMgIH0gPSBjaGFydDtcbiAgICBsZXQgcm90YXRpb24gPSAwO1xuICAgIGxldCBtYXhXaWR0aCwgdGl0bGVYLCB0aXRsZVk7XG4gICAgY29uc3QgaGVpZ2h0ID0gYm90dG9tIC0gdG9wO1xuICAgIGNvbnN0IHdpZHRoID0gcmlnaHQgLSBsZWZ0O1xuICAgIGlmIChzY2FsZS5pc0hvcml6b250YWwoKSkge1xuICAgICAgICB0aXRsZVggPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgbGVmdCwgcmlnaHQpO1xuICAgICAgICBpZiAoaXNPYmplY3QocG9zaXRpb24pKSB7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbkF4aXNJRCA9IE9iamVjdC5rZXlzKHBvc2l0aW9uKVswXTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcG9zaXRpb25bcG9zaXRpb25BeGlzSURdO1xuICAgICAgICAgICAgdGl0bGVZID0gc2NhbGVzW3Bvc2l0aW9uQXhpc0lEXS5nZXRQaXhlbEZvclZhbHVlKHZhbHVlKSArIGhlaWdodCAtIG9mZnNldDtcbiAgICAgICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgIHRpdGxlWSA9IChjaGFydEFyZWEuYm90dG9tICsgY2hhcnRBcmVhLnRvcCkgLyAyICsgaGVpZ2h0IC0gb2Zmc2V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGl0bGVZID0gb2Zmc2V0RnJvbUVkZ2Uoc2NhbGUsIHBvc2l0aW9uLCBvZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIG1heFdpZHRoID0gcmlnaHQgLSBsZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc09iamVjdChwb3NpdGlvbikpIHtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uQXhpc0lEID0gT2JqZWN0LmtleXMocG9zaXRpb24pWzBdO1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBwb3NpdGlvbltwb3NpdGlvbkF4aXNJRF07XG4gICAgICAgICAgICB0aXRsZVggPSBzY2FsZXNbcG9zaXRpb25BeGlzSURdLmdldFBpeGVsRm9yVmFsdWUodmFsdWUpIC0gd2lkdGggKyBvZmZzZXQ7XG4gICAgICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICB0aXRsZVggPSAoY2hhcnRBcmVhLmxlZnQgKyBjaGFydEFyZWEucmlnaHQpIC8gMiAtIHdpZHRoICsgb2Zmc2V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGl0bGVYID0gb2Zmc2V0RnJvbUVkZ2Uoc2NhbGUsIHBvc2l0aW9uLCBvZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIHRpdGxlWSA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCBib3R0b20sIHRvcCk7XG4gICAgICAgIHJvdGF0aW9uID0gcG9zaXRpb24gPT09ICdsZWZ0JyA/IC1IQUxGX1BJIDogSEFMRl9QSTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGl0bGVYLFxuICAgICAgICB0aXRsZVksXG4gICAgICAgIG1heFdpZHRoLFxuICAgICAgICByb3RhdGlvblxuICAgIH07XG59XG5jbGFzcyBTY2FsZSBleHRlbmRzIEVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKGNmZyl7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgICB0aGlzLmlkID0gY2ZnLmlkO1xuICAgICAgICAgdGhpcy50eXBlID0gY2ZnLnR5cGU7XG4gICAgICAgICB0aGlzLm9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLmN0eCA9IGNmZy5jdHg7XG4gICAgICAgICB0aGlzLmNoYXJ0ID0gY2ZnLmNoYXJ0O1xuICAgICAgICAgdGhpcy50b3AgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLmJvdHRvbSA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMubGVmdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMucmlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLndpZHRoID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5oZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX21hcmdpbnMgPSB7XG4gICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICBib3R0b206IDBcbiAgICAgICAgfTtcbiAgICAgICAgIHRoaXMubWF4V2lkdGggPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLm1heEhlaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMucGFkZGluZ1RvcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMucGFkZGluZ0JvdHRvbSA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMucGFkZGluZ0xlZnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLnBhZGRpbmdSaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMuYXhpcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMubGFiZWxSb3RhdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5taW4gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubWF4ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9yYW5nZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMudGlja3MgPSBbXTtcbiAgICAgICAgIHRoaXMuX2dyaWRMaW5lSXRlbXMgPSBudWxsO1xuICAgICAgICAgdGhpcy5fbGFiZWxJdGVtcyA9IG51bGw7XG4gICAgICAgICB0aGlzLl9sYWJlbFNpemVzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fbGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5fbWF4TGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5fbG9uZ2VzdFRleHRDYWNoZSA9IHt9O1xuICAgICAgICAgdGhpcy5fc3RhcnRQaXhlbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMuX2VuZFBpeGVsID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9yZXZlcnNlUGl4ZWxzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3VzZXJNYXggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3VzZXJNaW4gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3N1Z2dlc3RlZE1heCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fc3VnZ2VzdGVkTWluID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl90aWNrc0xlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuX2JvcmRlclZhbHVlID0gMDtcbiAgICAgICAgdGhpcy5fY2FjaGUgPSB7fTtcbiAgICAgICAgdGhpcy5fZGF0YUxpbWl0c0NhY2hlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLiRjb250ZXh0ID0gdW5kZWZpbmVkO1xuICAgIH1cbiBpbml0KG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucy5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICAgICAgdGhpcy5heGlzID0gb3B0aW9ucy5heGlzO1xuICAgICAgICB0aGlzLl91c2VyTWluID0gdGhpcy5wYXJzZShvcHRpb25zLm1pbik7XG4gICAgICAgIHRoaXMuX3VzZXJNYXggPSB0aGlzLnBhcnNlKG9wdGlvbnMubWF4KTtcbiAgICAgICAgdGhpcy5fc3VnZ2VzdGVkTWluID0gdGhpcy5wYXJzZShvcHRpb25zLnN1Z2dlc3RlZE1pbik7XG4gICAgICAgIHRoaXMuX3N1Z2dlc3RlZE1heCA9IHRoaXMucGFyc2Uob3B0aW9ucy5zdWdnZXN0ZWRNYXgpO1xuICAgIH1cbiBwYXJzZShyYXcsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiByYXc7XG4gICAgfVxuIGdldFVzZXJCb3VuZHMoKSB7XG4gICAgICAgIGxldCB7IF91c2VyTWluICwgX3VzZXJNYXggLCBfc3VnZ2VzdGVkTWluICwgX3N1Z2dlc3RlZE1heCAgfSA9IHRoaXM7XG4gICAgICAgIF91c2VyTWluID0gZmluaXRlT3JEZWZhdWx0KF91c2VyTWluLCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpO1xuICAgICAgICBfdXNlck1heCA9IGZpbml0ZU9yRGVmYXVsdChfdXNlck1heCwgTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZKTtcbiAgICAgICAgX3N1Z2dlc3RlZE1pbiA9IGZpbml0ZU9yRGVmYXVsdChfc3VnZ2VzdGVkTWluLCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpO1xuICAgICAgICBfc3VnZ2VzdGVkTWF4ID0gZmluaXRlT3JEZWZhdWx0KF9zdWdnZXN0ZWRNYXgsIE51bWJlci5ORUdBVElWRV9JTkZJTklUWSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtaW46IGZpbml0ZU9yRGVmYXVsdChfdXNlck1pbiwgX3N1Z2dlc3RlZE1pbiksXG4gICAgICAgICAgICBtYXg6IGZpbml0ZU9yRGVmYXVsdChfdXNlck1heCwgX3N1Z2dlc3RlZE1heCksXG4gICAgICAgICAgICBtaW5EZWZpbmVkOiBpc051bWJlckZpbml0ZShfdXNlck1pbiksXG4gICAgICAgICAgICBtYXhEZWZpbmVkOiBpc051bWJlckZpbml0ZShfdXNlck1heClcbiAgICAgICAgfTtcbiAgICB9XG4gZ2V0TWluTWF4KGNhblN0YWNrKSB7XG4gICAgICAgIGxldCB7IG1pbiAsIG1heCAsIG1pbkRlZmluZWQgLCBtYXhEZWZpbmVkICB9ID0gdGhpcy5nZXRVc2VyQm91bmRzKCk7XG4gICAgICAgIGxldCByYW5nZTtcbiAgICAgICAgaWYgKG1pbkRlZmluZWQgJiYgbWF4RGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtaW4sXG4gICAgICAgICAgICAgICAgbWF4XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGFzID0gdGhpcy5nZXRNYXRjaGluZ1Zpc2libGVNZXRhcygpO1xuICAgICAgICBmb3IobGV0IGkgPSAwLCBpbGVuID0gbWV0YXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIHJhbmdlID0gbWV0YXNbaV0uY29udHJvbGxlci5nZXRNaW5NYXgodGhpcywgY2FuU3RhY2spO1xuICAgICAgICAgICAgaWYgKCFtaW5EZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbWluID0gTWF0aC5taW4obWluLCByYW5nZS5taW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFtYXhEZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCByYW5nZS5tYXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG1pbiA9IG1heERlZmluZWQgJiYgbWluID4gbWF4ID8gbWF4IDogbWluO1xuICAgICAgICBtYXggPSBtaW5EZWZpbmVkICYmIG1pbiA+IG1heCA/IG1pbiA6IG1heDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1pbjogZmluaXRlT3JEZWZhdWx0KG1pbiwgZmluaXRlT3JEZWZhdWx0KG1heCwgbWluKSksXG4gICAgICAgICAgICBtYXg6IGZpbml0ZU9yRGVmYXVsdChtYXgsIGZpbml0ZU9yRGVmYXVsdChtaW4sIG1heCkpXG4gICAgICAgIH07XG4gICAgfVxuIGdldFBhZGRpbmcoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsZWZ0OiB0aGlzLnBhZGRpbmdMZWZ0IHx8IDAsXG4gICAgICAgICAgICB0b3A6IHRoaXMucGFkZGluZ1RvcCB8fCAwLFxuICAgICAgICAgICAgcmlnaHQ6IHRoaXMucGFkZGluZ1JpZ2h0IHx8IDAsXG4gICAgICAgICAgICBib3R0b206IHRoaXMucGFkZGluZ0JvdHRvbSB8fCAwXG4gICAgICAgIH07XG4gICAgfVxuIGdldFRpY2tzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50aWNrcztcbiAgICB9XG4gZ2V0TGFiZWxzKCkge1xuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5jaGFydC5kYXRhO1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmxhYmVscyB8fCAodGhpcy5pc0hvcml6b250YWwoKSA/IGRhdGEueExhYmVscyA6IGRhdGEueUxhYmVscykgfHwgZGF0YS5sYWJlbHMgfHwgW107XG4gICAgfVxuIGdldExhYmVsSXRlbXMoY2hhcnRBcmVhID0gdGhpcy5jaGFydC5jaGFydEFyZWEpIHtcbiAgICAgICAgY29uc3QgaXRlbXMgPSB0aGlzLl9sYWJlbEl0ZW1zIHx8ICh0aGlzLl9sYWJlbEl0ZW1zID0gdGhpcy5fY29tcHV0ZUxhYmVsSXRlbXMoY2hhcnRBcmVhKSk7XG4gICAgICAgIHJldHVybiBpdGVtcztcbiAgICB9XG4gICAgYmVmb3JlTGF5b3V0KCkge1xuICAgICAgICB0aGlzLl9jYWNoZSA9IHt9O1xuICAgICAgICB0aGlzLl9kYXRhTGltaXRzQ2FjaGVkID0gZmFsc2U7XG4gICAgfVxuICAgIGJlZm9yZVVwZGF0ZSgpIHtcbiAgICAgICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZVVwZGF0ZSwgW1xuICAgICAgICAgICAgdGhpc1xuICAgICAgICBdKTtcbiAgICB9XG4gdXBkYXRlKG1heFdpZHRoLCBtYXhIZWlnaHQsIG1hcmdpbnMpIHtcbiAgICAgICAgY29uc3QgeyBiZWdpbkF0WmVybyAsIGdyYWNlICwgdGlja3M6IHRpY2tPcHRzICB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBzYW1wbGVTaXplID0gdGlja09wdHMuc2FtcGxlU2l6ZTtcbiAgICAgICAgdGhpcy5iZWZvcmVVcGRhdGUoKTtcbiAgICAgICAgdGhpcy5tYXhXaWR0aCA9IG1heFdpZHRoO1xuICAgICAgICB0aGlzLm1heEhlaWdodCA9IG1heEhlaWdodDtcbiAgICAgICAgdGhpcy5fbWFyZ2lucyA9IG1hcmdpbnMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgIGJvdHRvbTogMFxuICAgICAgICB9LCBtYXJnaW5zKTtcbiAgICAgICAgdGhpcy50aWNrcyA9IG51bGw7XG4gICAgICAgIHRoaXMuX2xhYmVsU2l6ZXMgPSBudWxsO1xuICAgICAgICB0aGlzLl9ncmlkTGluZUl0ZW1zID0gbnVsbDtcbiAgICAgICAgdGhpcy5fbGFiZWxJdGVtcyA9IG51bGw7XG4gICAgICAgIHRoaXMuYmVmb3JlU2V0RGltZW5zaW9ucygpO1xuICAgICAgICB0aGlzLnNldERpbWVuc2lvbnMoKTtcbiAgICAgICAgdGhpcy5hZnRlclNldERpbWVuc2lvbnMoKTtcbiAgICAgICAgdGhpcy5fbWF4TGVuZ3RoID0gdGhpcy5pc0hvcml6b250YWwoKSA/IHRoaXMud2lkdGggKyBtYXJnaW5zLmxlZnQgKyBtYXJnaW5zLnJpZ2h0IDogdGhpcy5oZWlnaHQgKyBtYXJnaW5zLnRvcCArIG1hcmdpbnMuYm90dG9tO1xuICAgICAgICBpZiAoIXRoaXMuX2RhdGFMaW1pdHNDYWNoZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYmVmb3JlRGF0YUxpbWl0cygpO1xuICAgICAgICAgICAgdGhpcy5kZXRlcm1pbmVEYXRhTGltaXRzKCk7XG4gICAgICAgICAgICB0aGlzLmFmdGVyRGF0YUxpbWl0cygpO1xuICAgICAgICAgICAgdGhpcy5fcmFuZ2UgPSBfYWRkR3JhY2UodGhpcywgZ3JhY2UsIGJlZ2luQXRaZXJvKTtcbiAgICAgICAgICAgIHRoaXMuX2RhdGFMaW1pdHNDYWNoZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYmVmb3JlQnVpbGRUaWNrcygpO1xuICAgICAgICB0aGlzLnRpY2tzID0gdGhpcy5idWlsZFRpY2tzKCkgfHwgW107XG4gICAgICAgIHRoaXMuYWZ0ZXJCdWlsZFRpY2tzKCk7XG4gICAgICAgIGNvbnN0IHNhbXBsaW5nRW5hYmxlZCA9IHNhbXBsZVNpemUgPCB0aGlzLnRpY2tzLmxlbmd0aDtcbiAgICAgICAgdGhpcy5fY29udmVydFRpY2tzVG9MYWJlbHMoc2FtcGxpbmdFbmFibGVkID8gc2FtcGxlKHRoaXMudGlja3MsIHNhbXBsZVNpemUpIDogdGhpcy50aWNrcyk7XG4gICAgICAgIHRoaXMuY29uZmlndXJlKCk7XG4gICAgICAgIHRoaXMuYmVmb3JlQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbigpO1xuICAgICAgICB0aGlzLmNhbGN1bGF0ZUxhYmVsUm90YXRpb24oKTtcbiAgICAgICAgdGhpcy5hZnRlckNhbGN1bGF0ZUxhYmVsUm90YXRpb24oKTtcbiAgICAgICAgaWYgKHRpY2tPcHRzLmRpc3BsYXkgJiYgKHRpY2tPcHRzLmF1dG9Ta2lwIHx8IHRpY2tPcHRzLnNvdXJjZSA9PT0gJ2F1dG8nKSkge1xuICAgICAgICAgICAgdGhpcy50aWNrcyA9IGF1dG9Ta2lwKHRoaXMsIHRoaXMudGlja3MpO1xuICAgICAgICAgICAgdGhpcy5fbGFiZWxTaXplcyA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmFmdGVyQXV0b1NraXAoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2FtcGxpbmdFbmFibGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9jb252ZXJ0VGlja3NUb0xhYmVscyh0aGlzLnRpY2tzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJlZm9yZUZpdCgpO1xuICAgICAgICB0aGlzLmZpdCgpO1xuICAgICAgICB0aGlzLmFmdGVyRml0KCk7XG4gICAgICAgIHRoaXMuYWZ0ZXJVcGRhdGUoKTtcbiAgICB9XG4gY29uZmlndXJlKCkge1xuICAgICAgICBsZXQgcmV2ZXJzZVBpeGVscyA9IHRoaXMub3B0aW9ucy5yZXZlcnNlO1xuICAgICAgICBsZXQgc3RhcnRQaXhlbCwgZW5kUGl4ZWw7XG4gICAgICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICBzdGFydFBpeGVsID0gdGhpcy5sZWZ0O1xuICAgICAgICAgICAgZW5kUGl4ZWwgPSB0aGlzLnJpZ2h0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RhcnRQaXhlbCA9IHRoaXMudG9wO1xuICAgICAgICAgICAgZW5kUGl4ZWwgPSB0aGlzLmJvdHRvbTtcbiAgICAgICAgICAgIHJldmVyc2VQaXhlbHMgPSAhcmV2ZXJzZVBpeGVscztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zdGFydFBpeGVsID0gc3RhcnRQaXhlbDtcbiAgICAgICAgdGhpcy5fZW5kUGl4ZWwgPSBlbmRQaXhlbDtcbiAgICAgICAgdGhpcy5fcmV2ZXJzZVBpeGVscyA9IHJldmVyc2VQaXhlbHM7XG4gICAgICAgIHRoaXMuX2xlbmd0aCA9IGVuZFBpeGVsIC0gc3RhcnRQaXhlbDtcbiAgICAgICAgdGhpcy5fYWxpZ25Ub1BpeGVscyA9IHRoaXMub3B0aW9ucy5hbGlnblRvUGl4ZWxzO1xuICAgIH1cbiAgICBhZnRlclVwZGF0ZSgpIHtcbiAgICAgICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyVXBkYXRlLCBbXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBiZWZvcmVTZXREaW1lbnNpb25zKCkge1xuICAgICAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlU2V0RGltZW5zaW9ucywgW1xuICAgICAgICAgICAgdGhpc1xuICAgICAgICBdKTtcbiAgICB9XG4gICAgc2V0RGltZW5zaW9ucygpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSB0aGlzLm1heFdpZHRoO1xuICAgICAgICAgICAgdGhpcy5sZWZ0ID0gMDtcbiAgICAgICAgICAgIHRoaXMucmlnaHQgPSB0aGlzLndpZHRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLm1heEhlaWdodDtcbiAgICAgICAgICAgIHRoaXMudG9wID0gMDtcbiAgICAgICAgICAgIHRoaXMuYm90dG9tID0gdGhpcy5oZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYWRkaW5nTGVmdCA9IDA7XG4gICAgICAgIHRoaXMucGFkZGluZ1RvcCA9IDA7XG4gICAgICAgIHRoaXMucGFkZGluZ1JpZ2h0ID0gMDtcbiAgICAgICAgdGhpcy5wYWRkaW5nQm90dG9tID0gMDtcbiAgICB9XG4gICAgYWZ0ZXJTZXREaW1lbnNpb25zKCkge1xuICAgICAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYWZ0ZXJTZXREaW1lbnNpb25zLCBbXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBfY2FsbEhvb2tzKG5hbWUpIHtcbiAgICAgICAgdGhpcy5jaGFydC5ub3RpZnlQbHVnaW5zKG5hbWUsIHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICAgICAgY2FsbGJhY2sodGhpcy5vcHRpb25zW25hbWVdLCBbXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBiZWZvcmVEYXRhTGltaXRzKCkge1xuICAgICAgICB0aGlzLl9jYWxsSG9va3MoJ2JlZm9yZURhdGFMaW1pdHMnKTtcbiAgICB9XG4gICAgZGV0ZXJtaW5lRGF0YUxpbWl0cygpIHt9XG4gICAgYWZ0ZXJEYXRhTGltaXRzKCkge1xuICAgICAgICB0aGlzLl9jYWxsSG9va3MoJ2FmdGVyRGF0YUxpbWl0cycpO1xuICAgIH1cbiAgICBiZWZvcmVCdWlsZFRpY2tzKCkge1xuICAgICAgICB0aGlzLl9jYWxsSG9va3MoJ2JlZm9yZUJ1aWxkVGlja3MnKTtcbiAgICB9XG4gYnVpbGRUaWNrcygpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBhZnRlckJ1aWxkVGlja3MoKSB7XG4gICAgICAgIHRoaXMuX2NhbGxIb29rcygnYWZ0ZXJCdWlsZFRpY2tzJyk7XG4gICAgfVxuICAgIGJlZm9yZVRpY2tUb0xhYmVsQ29udmVyc2lvbigpIHtcbiAgICAgICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZVRpY2tUb0xhYmVsQ29udmVyc2lvbiwgW1xuICAgICAgICAgICAgdGhpc1xuICAgICAgICBdKTtcbiAgICB9XG4gZ2VuZXJhdGVUaWNrTGFiZWxzKHRpY2tzKSB7XG4gICAgICAgIGNvbnN0IHRpY2tPcHRzID0gdGhpcy5vcHRpb25zLnRpY2tzO1xuICAgICAgICBsZXQgaSwgaWxlbiwgdGljaztcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gdGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKXtcbiAgICAgICAgICAgIHRpY2sgPSB0aWNrc1tpXTtcbiAgICAgICAgICAgIHRpY2subGFiZWwgPSBjYWxsYmFjayh0aWNrT3B0cy5jYWxsYmFjaywgW1xuICAgICAgICAgICAgICAgIHRpY2sudmFsdWUsXG4gICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICB0aWNrc1xuICAgICAgICAgICAgXSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWZ0ZXJUaWNrVG9MYWJlbENvbnZlcnNpb24oKSB7XG4gICAgICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbiwgW1xuICAgICAgICAgICAgdGhpc1xuICAgICAgICBdKTtcbiAgICB9XG4gICAgYmVmb3JlQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbigpIHtcbiAgICAgICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZUNhbGN1bGF0ZUxhYmVsUm90YXRpb24sIFtcbiAgICAgICAgICAgIHRoaXNcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGNhbGN1bGF0ZUxhYmVsUm90YXRpb24oKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHRpY2tPcHRzID0gb3B0aW9ucy50aWNrcztcbiAgICAgICAgY29uc3QgbnVtVGlja3MgPSBnZXRUaWNrc0xpbWl0KHRoaXMudGlja3MubGVuZ3RoLCBvcHRpb25zLnRpY2tzLm1heFRpY2tzTGltaXQpO1xuICAgICAgICBjb25zdCBtaW5Sb3RhdGlvbiA9IHRpY2tPcHRzLm1pblJvdGF0aW9uIHx8IDA7XG4gICAgICAgIGNvbnN0IG1heFJvdGF0aW9uID0gdGlja09wdHMubWF4Um90YXRpb247XG4gICAgICAgIGxldCBsYWJlbFJvdGF0aW9uID0gbWluUm90YXRpb247XG4gICAgICAgIGxldCB0aWNrV2lkdGgsIG1heEhlaWdodCwgbWF4TGFiZWxEaWFnb25hbDtcbiAgICAgICAgaWYgKCF0aGlzLl9pc1Zpc2libGUoKSB8fCAhdGlja09wdHMuZGlzcGxheSB8fCBtaW5Sb3RhdGlvbiA+PSBtYXhSb3RhdGlvbiB8fCBudW1UaWNrcyA8PSAxIHx8ICF0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICB0aGlzLmxhYmVsUm90YXRpb24gPSBtaW5Sb3RhdGlvbjtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYWJlbFNpemVzID0gdGhpcy5fZ2V0TGFiZWxTaXplcygpO1xuICAgICAgICBjb25zdCBtYXhMYWJlbFdpZHRoID0gbGFiZWxTaXplcy53aWRlc3Qud2lkdGg7XG4gICAgICAgIGNvbnN0IG1heExhYmVsSGVpZ2h0ID0gbGFiZWxTaXplcy5oaWdoZXN0LmhlaWdodDtcbiAgICAgICAgY29uc3QgbWF4V2lkdGggPSBfbGltaXRWYWx1ZSh0aGlzLmNoYXJ0LndpZHRoIC0gbWF4TGFiZWxXaWR0aCwgMCwgdGhpcy5tYXhXaWR0aCk7XG4gICAgICAgIHRpY2tXaWR0aCA9IG9wdGlvbnMub2Zmc2V0ID8gdGhpcy5tYXhXaWR0aCAvIG51bVRpY2tzIDogbWF4V2lkdGggLyAobnVtVGlja3MgLSAxKTtcbiAgICAgICAgaWYgKG1heExhYmVsV2lkdGggKyA2ID4gdGlja1dpZHRoKSB7XG4gICAgICAgICAgICB0aWNrV2lkdGggPSBtYXhXaWR0aCAvIChudW1UaWNrcyAtIChvcHRpb25zLm9mZnNldCA/IDAuNSA6IDEpKTtcbiAgICAgICAgICAgIG1heEhlaWdodCA9IHRoaXMubWF4SGVpZ2h0IC0gZ2V0VGlja01hcmtMZW5ndGgob3B0aW9ucy5ncmlkKSAtIHRpY2tPcHRzLnBhZGRpbmcgLSBnZXRUaXRsZUhlaWdodChvcHRpb25zLnRpdGxlLCB0aGlzLmNoYXJ0Lm9wdGlvbnMuZm9udCk7XG4gICAgICAgICAgICBtYXhMYWJlbERpYWdvbmFsID0gTWF0aC5zcXJ0KG1heExhYmVsV2lkdGggKiBtYXhMYWJlbFdpZHRoICsgbWF4TGFiZWxIZWlnaHQgKiBtYXhMYWJlbEhlaWdodCk7XG4gICAgICAgICAgICBsYWJlbFJvdGF0aW9uID0gdG9EZWdyZWVzKE1hdGgubWluKE1hdGguYXNpbihfbGltaXRWYWx1ZSgobGFiZWxTaXplcy5oaWdoZXN0LmhlaWdodCArIDYpIC8gdGlja1dpZHRoLCAtMSwgMSkpLCBNYXRoLmFzaW4oX2xpbWl0VmFsdWUobWF4SGVpZ2h0IC8gbWF4TGFiZWxEaWFnb25hbCwgLTEsIDEpKSAtIE1hdGguYXNpbihfbGltaXRWYWx1ZShtYXhMYWJlbEhlaWdodCAvIG1heExhYmVsRGlhZ29uYWwsIC0xLCAxKSkpKTtcbiAgICAgICAgICAgIGxhYmVsUm90YXRpb24gPSBNYXRoLm1heChtaW5Sb3RhdGlvbiwgTWF0aC5taW4obWF4Um90YXRpb24sIGxhYmVsUm90YXRpb24pKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxhYmVsUm90YXRpb24gPSBsYWJlbFJvdGF0aW9uO1xuICAgIH1cbiAgICBhZnRlckNhbGN1bGF0ZUxhYmVsUm90YXRpb24oKSB7XG4gICAgICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlckNhbGN1bGF0ZUxhYmVsUm90YXRpb24sIFtcbiAgICAgICAgICAgIHRoaXNcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGFmdGVyQXV0b1NraXAoKSB7fVxuICAgIGJlZm9yZUZpdCgpIHtcbiAgICAgICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZUZpdCwgW1xuICAgICAgICAgICAgdGhpc1xuICAgICAgICBdKTtcbiAgICB9XG4gICAgZml0KCkge1xuICAgICAgICBjb25zdCBtaW5TaXplID0ge1xuICAgICAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgICAgICBoZWlnaHQ6IDBcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgeyBjaGFydCAsIG9wdGlvbnM6IHsgdGlja3M6IHRpY2tPcHRzICwgdGl0bGU6IHRpdGxlT3B0cyAsIGdyaWQ6IGdyaWRPcHRzICB9ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgZGlzcGxheSA9IHRoaXMuX2lzVmlzaWJsZSgpO1xuICAgICAgICBjb25zdCBpc0hvcml6b250YWwgPSB0aGlzLmlzSG9yaXpvbnRhbCgpO1xuICAgICAgICBpZiAoZGlzcGxheSkge1xuICAgICAgICAgICAgY29uc3QgdGl0bGVIZWlnaHQgPSBnZXRUaXRsZUhlaWdodCh0aXRsZU9wdHMsIGNoYXJ0Lm9wdGlvbnMuZm9udCk7XG4gICAgICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICAgICAgbWluU2l6ZS53aWR0aCA9IHRoaXMubWF4V2lkdGg7XG4gICAgICAgICAgICAgICAgbWluU2l6ZS5oZWlnaHQgPSBnZXRUaWNrTWFya0xlbmd0aChncmlkT3B0cykgKyB0aXRsZUhlaWdodDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWluU2l6ZS5oZWlnaHQgPSB0aGlzLm1heEhlaWdodDtcbiAgICAgICAgICAgICAgICBtaW5TaXplLndpZHRoID0gZ2V0VGlja01hcmtMZW5ndGgoZ3JpZE9wdHMpICsgdGl0bGVIZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGlja09wdHMuZGlzcGxheSAmJiB0aGlzLnRpY2tzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZmlyc3QgLCBsYXN0ICwgd2lkZXN0ICwgaGlnaGVzdCAgfSA9IHRoaXMuX2dldExhYmVsU2l6ZXMoKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0aWNrUGFkZGluZyA9IHRpY2tPcHRzLnBhZGRpbmcgKiAyO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFuZ2xlUmFkaWFucyA9IHRvUmFkaWFucyh0aGlzLmxhYmVsUm90YXRpb24pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvcyA9IE1hdGguY29zKGFuZ2xlUmFkaWFucyk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2luID0gTWF0aC5zaW4oYW5nbGVSYWRpYW5zKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhYmVsSGVpZ2h0ID0gdGlja09wdHMubWlycm9yID8gMCA6IHNpbiAqIHdpZGVzdC53aWR0aCArIGNvcyAqIGhpZ2hlc3QuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICBtaW5TaXplLmhlaWdodCA9IE1hdGgubWluKHRoaXMubWF4SGVpZ2h0LCBtaW5TaXplLmhlaWdodCArIGxhYmVsSGVpZ2h0ICsgdGlja1BhZGRpbmcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhYmVsV2lkdGggPSB0aWNrT3B0cy5taXJyb3IgPyAwIDogY29zICogd2lkZXN0LndpZHRoICsgc2luICogaGlnaGVzdC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIG1pblNpemUud2lkdGggPSBNYXRoLm1pbih0aGlzLm1heFdpZHRoLCBtaW5TaXplLndpZHRoICsgbGFiZWxXaWR0aCArIHRpY2tQYWRkaW5nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fY2FsY3VsYXRlUGFkZGluZyhmaXJzdCwgbGFzdCwgc2luLCBjb3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2hhbmRsZU1hcmdpbnMoKTtcbiAgICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMuX2xlbmd0aCA9IGNoYXJ0LndpZHRoIC0gdGhpcy5fbWFyZ2lucy5sZWZ0IC0gdGhpcy5fbWFyZ2lucy5yaWdodDtcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gbWluU2l6ZS5oZWlnaHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLndpZHRoID0gbWluU2l6ZS53aWR0aDtcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5fbGVuZ3RoID0gY2hhcnQuaGVpZ2h0IC0gdGhpcy5fbWFyZ2lucy50b3AgLSB0aGlzLl9tYXJnaW5zLmJvdHRvbTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfY2FsY3VsYXRlUGFkZGluZyhmaXJzdCwgbGFzdCwgc2luLCBjb3MpIHtcbiAgICAgICAgY29uc3QgeyB0aWNrczogeyBhbGlnbiAsIHBhZGRpbmcgIH0gLCBwb3NpdGlvbiAgfSA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgaXNSb3RhdGVkID0gdGhpcy5sYWJlbFJvdGF0aW9uICE9PSAwO1xuICAgICAgICBjb25zdCBsYWJlbHNCZWxvd1RpY2tzID0gcG9zaXRpb24gIT09ICd0b3AnICYmIHRoaXMuYXhpcyA9PT0gJ3gnO1xuICAgICAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0TGVmdCA9IHRoaXMuZ2V0UGl4ZWxGb3JUaWNrKDApIC0gdGhpcy5sZWZ0O1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0UmlnaHQgPSB0aGlzLnJpZ2h0IC0gdGhpcy5nZXRQaXhlbEZvclRpY2sodGhpcy50aWNrcy5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgIGxldCBwYWRkaW5nTGVmdCA9IDA7XG4gICAgICAgICAgICBsZXQgcGFkZGluZ1JpZ2h0ID0gMDtcbiAgICAgICAgICAgIGlmIChpc1JvdGF0ZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAobGFiZWxzQmVsb3dUaWNrcykge1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nTGVmdCA9IGNvcyAqIGZpcnN0LndpZHRoO1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nUmlnaHQgPSBzaW4gKiBsYXN0LmhlaWdodDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nTGVmdCA9IHNpbiAqIGZpcnN0LmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZ1JpZ2h0ID0gY29zICogbGFzdC53aWR0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFsaWduID09PSAnc3RhcnQnKSB7XG4gICAgICAgICAgICAgICAgcGFkZGluZ1JpZ2h0ID0gbGFzdC53aWR0aDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWxpZ24gPT09ICdlbmQnKSB7XG4gICAgICAgICAgICAgICAgcGFkZGluZ0xlZnQgPSBmaXJzdC53aWR0aDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWxpZ24gIT09ICdpbm5lcicpIHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nTGVmdCA9IGZpcnN0LndpZHRoIC8gMjtcbiAgICAgICAgICAgICAgICBwYWRkaW5nUmlnaHQgPSBsYXN0LndpZHRoIC8gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucGFkZGluZ0xlZnQgPSBNYXRoLm1heCgocGFkZGluZ0xlZnQgLSBvZmZzZXRMZWZ0ICsgcGFkZGluZykgKiB0aGlzLndpZHRoIC8gKHRoaXMud2lkdGggLSBvZmZzZXRMZWZ0KSwgMCk7XG4gICAgICAgICAgICB0aGlzLnBhZGRpbmdSaWdodCA9IE1hdGgubWF4KChwYWRkaW5nUmlnaHQgLSBvZmZzZXRSaWdodCArIHBhZGRpbmcpICogdGhpcy53aWR0aCAvICh0aGlzLndpZHRoIC0gb2Zmc2V0UmlnaHQpLCAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBwYWRkaW5nVG9wID0gbGFzdC5oZWlnaHQgLyAyO1xuICAgICAgICAgICAgbGV0IHBhZGRpbmdCb3R0b20gPSBmaXJzdC5oZWlnaHQgLyAyO1xuICAgICAgICAgICAgaWYgKGFsaWduID09PSAnc3RhcnQnKSB7XG4gICAgICAgICAgICAgICAgcGFkZGluZ1RvcCA9IDA7XG4gICAgICAgICAgICAgICAgcGFkZGluZ0JvdHRvbSA9IGZpcnN0LmhlaWdodDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWxpZ24gPT09ICdlbmQnKSB7XG4gICAgICAgICAgICAgICAgcGFkZGluZ1RvcCA9IGxhc3QuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIHBhZGRpbmdCb3R0b20gPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5wYWRkaW5nVG9wID0gcGFkZGluZ1RvcCArIHBhZGRpbmc7XG4gICAgICAgICAgICB0aGlzLnBhZGRpbmdCb3R0b20gPSBwYWRkaW5nQm90dG9tICsgcGFkZGluZztcbiAgICAgICAgfVxuICAgIH1cbiBfaGFuZGxlTWFyZ2lucygpIHtcbiAgICAgICAgaWYgKHRoaXMuX21hcmdpbnMpIHtcbiAgICAgICAgICAgIHRoaXMuX21hcmdpbnMubGVmdCA9IE1hdGgubWF4KHRoaXMucGFkZGluZ0xlZnQsIHRoaXMuX21hcmdpbnMubGVmdCk7XG4gICAgICAgICAgICB0aGlzLl9tYXJnaW5zLnRvcCA9IE1hdGgubWF4KHRoaXMucGFkZGluZ1RvcCwgdGhpcy5fbWFyZ2lucy50b3ApO1xuICAgICAgICAgICAgdGhpcy5fbWFyZ2lucy5yaWdodCA9IE1hdGgubWF4KHRoaXMucGFkZGluZ1JpZ2h0LCB0aGlzLl9tYXJnaW5zLnJpZ2h0KTtcbiAgICAgICAgICAgIHRoaXMuX21hcmdpbnMuYm90dG9tID0gTWF0aC5tYXgodGhpcy5wYWRkaW5nQm90dG9tLCB0aGlzLl9tYXJnaW5zLmJvdHRvbSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWZ0ZXJGaXQoKSB7XG4gICAgICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlckZpdCwgW1xuICAgICAgICAgICAgdGhpc1xuICAgICAgICBdKTtcbiAgICB9XG4gaXNIb3Jpem9udGFsKCkge1xuICAgICAgICBjb25zdCB7IGF4aXMgLCBwb3NpdGlvbiAgfSA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgcmV0dXJuIHBvc2l0aW9uID09PSAndG9wJyB8fCBwb3NpdGlvbiA9PT0gJ2JvdHRvbScgfHwgYXhpcyA9PT0gJ3gnO1xuICAgIH1cbiBpc0Z1bGxTaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmZ1bGxTaXplO1xuICAgIH1cbiBfY29udmVydFRpY2tzVG9MYWJlbHModGlja3MpIHtcbiAgICAgICAgdGhpcy5iZWZvcmVUaWNrVG9MYWJlbENvbnZlcnNpb24oKTtcbiAgICAgICAgdGhpcy5nZW5lcmF0ZVRpY2tMYWJlbHModGlja3MpO1xuICAgICAgICBsZXQgaSwgaWxlbjtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gdGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKXtcbiAgICAgICAgICAgIGlmIChpc051bGxPclVuZGVmKHRpY2tzW2ldLmxhYmVsKSkge1xuICAgICAgICAgICAgICAgIHRpY2tzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICBpbGVuLS07XG4gICAgICAgICAgICAgICAgaS0tO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWZ0ZXJUaWNrVG9MYWJlbENvbnZlcnNpb24oKTtcbiAgICB9XG4gX2dldExhYmVsU2l6ZXMoKSB7XG4gICAgICAgIGxldCBsYWJlbFNpemVzID0gdGhpcy5fbGFiZWxTaXplcztcbiAgICAgICAgaWYgKCFsYWJlbFNpemVzKSB7XG4gICAgICAgICAgICBjb25zdCBzYW1wbGVTaXplID0gdGhpcy5vcHRpb25zLnRpY2tzLnNhbXBsZVNpemU7XG4gICAgICAgICAgICBsZXQgdGlja3MgPSB0aGlzLnRpY2tzO1xuICAgICAgICAgICAgaWYgKHNhbXBsZVNpemUgPCB0aWNrcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aWNrcyA9IHNhbXBsZSh0aWNrcywgc2FtcGxlU2l6ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9sYWJlbFNpemVzID0gbGFiZWxTaXplcyA9IHRoaXMuX2NvbXB1dGVMYWJlbFNpemVzKHRpY2tzLCB0aWNrcy5sZW5ndGgsIHRoaXMub3B0aW9ucy50aWNrcy5tYXhUaWNrc0xpbWl0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGFiZWxTaXplcztcbiAgICB9XG4gX2NvbXB1dGVMYWJlbFNpemVzKHRpY2tzLCBsZW5ndGgsIG1heFRpY2tzTGltaXQpIHtcbiAgICAgICAgY29uc3QgeyBjdHggLCBfbG9uZ2VzdFRleHRDYWNoZTogY2FjaGVzICB9ID0gdGhpcztcbiAgICAgICAgY29uc3Qgd2lkdGhzID0gW107XG4gICAgICAgIGNvbnN0IGhlaWdodHMgPSBbXTtcbiAgICAgICAgY29uc3QgaW5jcmVtZW50ID0gTWF0aC5mbG9vcihsZW5ndGggLyBnZXRUaWNrc0xpbWl0KGxlbmd0aCwgbWF4VGlja3NMaW1pdCkpO1xuICAgICAgICBsZXQgd2lkZXN0TGFiZWxTaXplID0gMDtcbiAgICAgICAgbGV0IGhpZ2hlc3RMYWJlbFNpemUgPSAwO1xuICAgICAgICBsZXQgaSwgaiwgamxlbiwgbGFiZWwsIHRpY2tGb250LCBmb250U3RyaW5nLCBjYWNoZSwgbGluZUhlaWdodCwgd2lkdGgsIGhlaWdodCwgbmVzdGVkTGFiZWw7XG4gICAgICAgIGZvcihpID0gMDsgaSA8IGxlbmd0aDsgaSArPSBpbmNyZW1lbnQpe1xuICAgICAgICAgICAgbGFiZWwgPSB0aWNrc1tpXS5sYWJlbDtcbiAgICAgICAgICAgIHRpY2tGb250ID0gdGhpcy5fcmVzb2x2ZVRpY2tGb250T3B0aW9ucyhpKTtcbiAgICAgICAgICAgIGN0eC5mb250ID0gZm9udFN0cmluZyA9IHRpY2tGb250LnN0cmluZztcbiAgICAgICAgICAgIGNhY2hlID0gY2FjaGVzW2ZvbnRTdHJpbmddID0gY2FjaGVzW2ZvbnRTdHJpbmddIHx8IHtcbiAgICAgICAgICAgICAgICBkYXRhOiB7fSxcbiAgICAgICAgICAgICAgICBnYzogW11cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBsaW5lSGVpZ2h0ID0gdGlja0ZvbnQubGluZUhlaWdodDtcbiAgICAgICAgICAgIHdpZHRoID0gaGVpZ2h0ID0gMDtcbiAgICAgICAgICAgIGlmICghaXNOdWxsT3JVbmRlZihsYWJlbCkgJiYgIWlzQXJyYXkobGFiZWwpKSB7XG4gICAgICAgICAgICAgICAgd2lkdGggPSBfbWVhc3VyZVRleHQoY3R4LCBjYWNoZS5kYXRhLCBjYWNoZS5nYywgd2lkdGgsIGxhYmVsKTtcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBsaW5lSGVpZ2h0O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KGxhYmVsKSkge1xuICAgICAgICAgICAgICAgIGZvcihqID0gMCwgamxlbiA9IGxhYmVsLmxlbmd0aDsgaiA8IGpsZW47ICsrail7XG4gICAgICAgICAgICAgICAgICAgIG5lc3RlZExhYmVsID0gIGxhYmVsW2pdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWYobmVzdGVkTGFiZWwpICYmICFpc0FycmF5KG5lc3RlZExhYmVsKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBfbWVhc3VyZVRleHQoY3R4LCBjYWNoZS5kYXRhLCBjYWNoZS5nYywgd2lkdGgsIG5lc3RlZExhYmVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodCArPSBsaW5lSGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2lkdGhzLnB1c2god2lkdGgpO1xuICAgICAgICAgICAgaGVpZ2h0cy5wdXNoKGhlaWdodCk7XG4gICAgICAgICAgICB3aWRlc3RMYWJlbFNpemUgPSBNYXRoLm1heCh3aWR0aCwgd2lkZXN0TGFiZWxTaXplKTtcbiAgICAgICAgICAgIGhpZ2hlc3RMYWJlbFNpemUgPSBNYXRoLm1heChoZWlnaHQsIGhpZ2hlc3RMYWJlbFNpemUpO1xuICAgICAgICB9XG4gICAgICAgIGdhcmJhZ2VDb2xsZWN0KGNhY2hlcywgbGVuZ3RoKTtcbiAgICAgICAgY29uc3Qgd2lkZXN0ID0gd2lkdGhzLmluZGV4T2Yod2lkZXN0TGFiZWxTaXplKTtcbiAgICAgICAgY29uc3QgaGlnaGVzdCA9IGhlaWdodHMuaW5kZXhPZihoaWdoZXN0TGFiZWxTaXplKTtcbiAgICAgICAgY29uc3QgdmFsdWVBdCA9IChpZHgpPT4oe1xuICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aHNbaWR4XSB8fCAwLFxuICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0c1tpZHhdIHx8IDBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZmlyc3Q6IHZhbHVlQXQoMCksXG4gICAgICAgICAgICBsYXN0OiB2YWx1ZUF0KGxlbmd0aCAtIDEpLFxuICAgICAgICAgICAgd2lkZXN0OiB2YWx1ZUF0KHdpZGVzdCksXG4gICAgICAgICAgICBoaWdoZXN0OiB2YWx1ZUF0KGhpZ2hlc3QpLFxuICAgICAgICAgICAgd2lkdGhzLFxuICAgICAgICAgICAgaGVpZ2h0c1xuICAgICAgICB9O1xuICAgIH1cbiBnZXRMYWJlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG4gZ2V0VmFsdWVGb3JQaXhlbChwaXhlbCkge31cbiBnZXRQaXhlbEZvclRpY2soaW5kZXgpIHtcbiAgICAgICAgY29uc3QgdGlja3MgPSB0aGlzLnRpY2tzO1xuICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID4gdGlja3MubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGl4ZWxGb3JWYWx1ZSh0aWNrc1tpbmRleF0udmFsdWUpO1xuICAgIH1cbiBnZXRQaXhlbEZvckRlY2ltYWwoZGVjaW1hbCkge1xuICAgICAgICBpZiAodGhpcy5fcmV2ZXJzZVBpeGVscykge1xuICAgICAgICAgICAgZGVjaW1hbCA9IDEgLSBkZWNpbWFsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBpeGVsID0gdGhpcy5fc3RhcnRQaXhlbCArIGRlY2ltYWwgKiB0aGlzLl9sZW5ndGg7XG4gICAgICAgIHJldHVybiBfaW50MTZSYW5nZSh0aGlzLl9hbGlnblRvUGl4ZWxzID8gX2FsaWduUGl4ZWwodGhpcy5jaGFydCwgcGl4ZWwsIDApIDogcGl4ZWwpO1xuICAgIH1cbiBnZXREZWNpbWFsRm9yUGl4ZWwocGl4ZWwpIHtcbiAgICAgICAgY29uc3QgZGVjaW1hbCA9IChwaXhlbCAtIHRoaXMuX3N0YXJ0UGl4ZWwpIC8gdGhpcy5fbGVuZ3RoO1xuICAgICAgICByZXR1cm4gdGhpcy5fcmV2ZXJzZVBpeGVscyA/IDEgLSBkZWNpbWFsIDogZGVjaW1hbDtcbiAgICB9XG4gZ2V0QmFzZVBpeGVsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQaXhlbEZvclZhbHVlKHRoaXMuZ2V0QmFzZVZhbHVlKCkpO1xuICAgIH1cbiBnZXRCYXNlVmFsdWUoKSB7XG4gICAgICAgIGNvbnN0IHsgbWluICwgbWF4ICB9ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG1pbiA8IDAgJiYgbWF4IDwgMCA/IG1heCA6IG1pbiA+IDAgJiYgbWF4ID4gMCA/IG1pbiA6IDA7XG4gICAgfVxuIGdldENvbnRleHQoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgdGlja3MgPSB0aGlzLnRpY2tzIHx8IFtdO1xuICAgICAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8IHRpY2tzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgdGljayA9IHRpY2tzW2luZGV4XTtcbiAgICAgICAgICAgIHJldHVybiB0aWNrLiRjb250ZXh0IHx8ICh0aWNrLiRjb250ZXh0ID0gY3JlYXRlVGlja0NvbnRleHQodGhpcy5nZXRDb250ZXh0KCksIGluZGV4LCB0aWNrKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuJGNvbnRleHQgfHwgKHRoaXMuJGNvbnRleHQgPSBjcmVhdGVTY2FsZUNvbnRleHQodGhpcy5jaGFydC5nZXRDb250ZXh0KCksIHRoaXMpKTtcbiAgICB9XG4gX3RpY2tTaXplKCkge1xuICAgICAgICBjb25zdCBvcHRpb25UaWNrcyA9IHRoaXMub3B0aW9ucy50aWNrcztcbiAgICAgICAgY29uc3Qgcm90ID0gdG9SYWRpYW5zKHRoaXMubGFiZWxSb3RhdGlvbik7XG4gICAgICAgIGNvbnN0IGNvcyA9IE1hdGguYWJzKE1hdGguY29zKHJvdCkpO1xuICAgICAgICBjb25zdCBzaW4gPSBNYXRoLmFicyhNYXRoLnNpbihyb3QpKTtcbiAgICAgICAgY29uc3QgbGFiZWxTaXplcyA9IHRoaXMuX2dldExhYmVsU2l6ZXMoKTtcbiAgICAgICAgY29uc3QgcGFkZGluZyA9IG9wdGlvblRpY2tzLmF1dG9Ta2lwUGFkZGluZyB8fCAwO1xuICAgICAgICBjb25zdCB3ID0gbGFiZWxTaXplcyA/IGxhYmVsU2l6ZXMud2lkZXN0LndpZHRoICsgcGFkZGluZyA6IDA7XG4gICAgICAgIGNvbnN0IGggPSBsYWJlbFNpemVzID8gbGFiZWxTaXplcy5oaWdoZXN0LmhlaWdodCArIHBhZGRpbmcgOiAwO1xuICAgICAgICByZXR1cm4gdGhpcy5pc0hvcml6b250YWwoKSA/IGggKiBjb3MgPiB3ICogc2luID8gdyAvIGNvcyA6IGggLyBzaW4gOiBoICogc2luIDwgdyAqIGNvcyA/IGggLyBjb3MgOiB3IC8gc2luO1xuICAgIH1cbiBfaXNWaXNpYmxlKCkge1xuICAgICAgICBjb25zdCBkaXNwbGF5ID0gdGhpcy5vcHRpb25zLmRpc3BsYXk7XG4gICAgICAgIGlmIChkaXNwbGF5ICE9PSAnYXV0bycpIHtcbiAgICAgICAgICAgIHJldHVybiAhIWRpc3BsYXk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXMoKS5sZW5ndGggPiAwO1xuICAgIH1cbiBfY29tcHV0ZUdyaWRMaW5lSXRlbXMoY2hhcnRBcmVhKSB7XG4gICAgICAgIGNvbnN0IGF4aXMgPSB0aGlzLmF4aXM7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgeyBncmlkICwgcG9zaXRpb24gLCBib3JkZXIgIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBvZmZzZXQgPSBncmlkLm9mZnNldDtcbiAgICAgICAgY29uc3QgaXNIb3Jpem9udGFsID0gdGhpcy5pc0hvcml6b250YWwoKTtcbiAgICAgICAgY29uc3QgdGlja3MgPSB0aGlzLnRpY2tzO1xuICAgICAgICBjb25zdCB0aWNrc0xlbmd0aCA9IHRpY2tzLmxlbmd0aCArIChvZmZzZXQgPyAxIDogMCk7XG4gICAgICAgIGNvbnN0IHRsID0gZ2V0VGlja01hcmtMZW5ndGgoZ3JpZCk7XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gW107XG4gICAgICAgIGNvbnN0IGJvcmRlck9wdHMgPSBib3JkZXIuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoKSk7XG4gICAgICAgIGNvbnN0IGF4aXNXaWR0aCA9IGJvcmRlck9wdHMuZGlzcGxheSA/IGJvcmRlck9wdHMud2lkdGggOiAwO1xuICAgICAgICBjb25zdCBheGlzSGFsZldpZHRoID0gYXhpc1dpZHRoIC8gMjtcbiAgICAgICAgY29uc3QgYWxpZ25Cb3JkZXJWYWx1ZSA9IGZ1bmN0aW9uKHBpeGVsKSB7XG4gICAgICAgICAgICByZXR1cm4gX2FsaWduUGl4ZWwoY2hhcnQsIHBpeGVsLCBheGlzV2lkdGgpO1xuICAgICAgICB9O1xuICAgICAgICBsZXQgYm9yZGVyVmFsdWUsIGksIGxpbmVWYWx1ZSwgYWxpZ25lZExpbmVWYWx1ZTtcbiAgICAgICAgbGV0IHR4MSwgdHkxLCB0eDIsIHR5MiwgeDEsIHkxLCB4MiwgeTI7XG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcpIHtcbiAgICAgICAgICAgIGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZSh0aGlzLmJvdHRvbSk7XG4gICAgICAgICAgICB0eTEgPSB0aGlzLmJvdHRvbSAtIHRsO1xuICAgICAgICAgICAgdHkyID0gYm9yZGVyVmFsdWUgLSBheGlzSGFsZldpZHRoO1xuICAgICAgICAgICAgeTEgPSBhbGlnbkJvcmRlclZhbHVlKGNoYXJ0QXJlYS50b3ApICsgYXhpc0hhbGZXaWR0aDtcbiAgICAgICAgICAgIHkyID0gY2hhcnRBcmVhLmJvdHRvbTtcbiAgICAgICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgICAgIGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZSh0aGlzLnRvcCk7XG4gICAgICAgICAgICB5MSA9IGNoYXJ0QXJlYS50b3A7XG4gICAgICAgICAgICB5MiA9IGFsaWduQm9yZGVyVmFsdWUoY2hhcnRBcmVhLmJvdHRvbSkgLSBheGlzSGFsZldpZHRoO1xuICAgICAgICAgICAgdHkxID0gYm9yZGVyVmFsdWUgKyBheGlzSGFsZldpZHRoO1xuICAgICAgICAgICAgdHkyID0gdGhpcy50b3AgKyB0bDtcbiAgICAgICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUodGhpcy5yaWdodCk7XG4gICAgICAgICAgICB0eDEgPSB0aGlzLnJpZ2h0IC0gdGw7XG4gICAgICAgICAgICB0eDIgPSBib3JkZXJWYWx1ZSAtIGF4aXNIYWxmV2lkdGg7XG4gICAgICAgICAgICB4MSA9IGFsaWduQm9yZGVyVmFsdWUoY2hhcnRBcmVhLmxlZnQpICsgYXhpc0hhbGZXaWR0aDtcbiAgICAgICAgICAgIHgyID0gY2hhcnRBcmVhLnJpZ2h0O1xuICAgICAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUodGhpcy5sZWZ0KTtcbiAgICAgICAgICAgIHgxID0gY2hhcnRBcmVhLmxlZnQ7XG4gICAgICAgICAgICB4MiA9IGFsaWduQm9yZGVyVmFsdWUoY2hhcnRBcmVhLnJpZ2h0KSAtIGF4aXNIYWxmV2lkdGg7XG4gICAgICAgICAgICB0eDEgPSBib3JkZXJWYWx1ZSArIGF4aXNIYWxmV2lkdGg7XG4gICAgICAgICAgICB0eDIgPSB0aGlzLmxlZnQgKyB0bDtcbiAgICAgICAgfSBlbHNlIGlmIChheGlzID09PSAneCcpIHtcbiAgICAgICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUoKGNoYXJ0QXJlYS50b3AgKyBjaGFydEFyZWEuYm90dG9tKSAvIDIgKyAwLjUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdChwb3NpdGlvbikpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwb3NpdGlvbkF4aXNJRCA9IE9iamVjdC5rZXlzKHBvc2l0aW9uKVswXTtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHBvc2l0aW9uW3Bvc2l0aW9uQXhpc0lEXTtcbiAgICAgICAgICAgICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUodGhpcy5jaGFydC5zY2FsZXNbcG9zaXRpb25BeGlzSURdLmdldFBpeGVsRm9yVmFsdWUodmFsdWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHkxID0gY2hhcnRBcmVhLnRvcDtcbiAgICAgICAgICAgIHkyID0gY2hhcnRBcmVhLmJvdHRvbTtcbiAgICAgICAgICAgIHR5MSA9IGJvcmRlclZhbHVlICsgYXhpc0hhbGZXaWR0aDtcbiAgICAgICAgICAgIHR5MiA9IHR5MSArIHRsO1xuICAgICAgICB9IGVsc2UgaWYgKGF4aXMgPT09ICd5Jykge1xuICAgICAgICAgICAgaWYgKHBvc2l0aW9uID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgICAgIGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZSgoY2hhcnRBcmVhLmxlZnQgKyBjaGFydEFyZWEucmlnaHQpIC8gMik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHBvc2l0aW9uKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uQXhpc0lEID0gT2JqZWN0LmtleXMocG9zaXRpb24pWzBdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcG9zaXRpb25bcG9zaXRpb25BeGlzSURdO1xuICAgICAgICAgICAgICAgIGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZSh0aGlzLmNoYXJ0LnNjYWxlc1twb3NpdGlvbkF4aXNJRF0uZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHgxID0gYm9yZGVyVmFsdWUgLSBheGlzSGFsZldpZHRoO1xuICAgICAgICAgICAgdHgyID0gdHgxIC0gdGw7XG4gICAgICAgICAgICB4MSA9IGNoYXJ0QXJlYS5sZWZ0O1xuICAgICAgICAgICAgeDIgPSBjaGFydEFyZWEucmlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGltaXQgPSB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLnRpY2tzLm1heFRpY2tzTGltaXQsIHRpY2tzTGVuZ3RoKTtcbiAgICAgICAgY29uc3Qgc3RlcCA9IE1hdGgubWF4KDEsIE1hdGguY2VpbCh0aWNrc0xlbmd0aCAvIGxpbWl0KSk7XG4gICAgICAgIGZvcihpID0gMDsgaSA8IHRpY2tzTGVuZ3RoOyBpICs9IHN0ZXApe1xuICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuZ2V0Q29udGV4dChpKTtcbiAgICAgICAgICAgIGNvbnN0IG9wdHNBdEluZGV4ID0gZ3JpZC5zZXRDb250ZXh0KGNvbnRleHQpO1xuICAgICAgICAgICAgY29uc3Qgb3B0c0F0SW5kZXhCb3JkZXIgPSBib3JkZXIuc2V0Q29udGV4dChjb250ZXh0KTtcbiAgICAgICAgICAgIGNvbnN0IGxpbmVXaWR0aCA9IG9wdHNBdEluZGV4LmxpbmVXaWR0aDtcbiAgICAgICAgICAgIGNvbnN0IGxpbmVDb2xvciA9IG9wdHNBdEluZGV4LmNvbG9yO1xuICAgICAgICAgICAgY29uc3QgYm9yZGVyRGFzaCA9IG9wdHNBdEluZGV4Qm9yZGVyLmRhc2ggfHwgW107XG4gICAgICAgICAgICBjb25zdCBib3JkZXJEYXNoT2Zmc2V0ID0gb3B0c0F0SW5kZXhCb3JkZXIuZGFzaE9mZnNldDtcbiAgICAgICAgICAgIGNvbnN0IHRpY2tXaWR0aCA9IG9wdHNBdEluZGV4LnRpY2tXaWR0aDtcbiAgICAgICAgICAgIGNvbnN0IHRpY2tDb2xvciA9IG9wdHNBdEluZGV4LnRpY2tDb2xvcjtcbiAgICAgICAgICAgIGNvbnN0IHRpY2tCb3JkZXJEYXNoID0gb3B0c0F0SW5kZXgudGlja0JvcmRlckRhc2ggfHwgW107XG4gICAgICAgICAgICBjb25zdCB0aWNrQm9yZGVyRGFzaE9mZnNldCA9IG9wdHNBdEluZGV4LnRpY2tCb3JkZXJEYXNoT2Zmc2V0O1xuICAgICAgICAgICAgbGluZVZhbHVlID0gZ2V0UGl4ZWxGb3JHcmlkTGluZSh0aGlzLCBpLCBvZmZzZXQpO1xuICAgICAgICAgICAgaWYgKGxpbmVWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbGlnbmVkTGluZVZhbHVlID0gX2FsaWduUGl4ZWwoY2hhcnQsIGxpbmVWYWx1ZSwgbGluZVdpZHRoKTtcbiAgICAgICAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgICAgICAgICB0eDEgPSB0eDIgPSB4MSA9IHgyID0gYWxpZ25lZExpbmVWYWx1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdHkxID0gdHkyID0geTEgPSB5MiA9IGFsaWduZWRMaW5lVmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICB0eDEsXG4gICAgICAgICAgICAgICAgdHkxLFxuICAgICAgICAgICAgICAgIHR4MixcbiAgICAgICAgICAgICAgICB0eTIsXG4gICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgeTEsXG4gICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgeTIsXG4gICAgICAgICAgICAgICAgd2lkdGg6IGxpbmVXaWR0aCxcbiAgICAgICAgICAgICAgICBjb2xvcjogbGluZUNvbG9yLFxuICAgICAgICAgICAgICAgIGJvcmRlckRhc2gsXG4gICAgICAgICAgICAgICAgYm9yZGVyRGFzaE9mZnNldCxcbiAgICAgICAgICAgICAgICB0aWNrV2lkdGgsXG4gICAgICAgICAgICAgICAgdGlja0NvbG9yLFxuICAgICAgICAgICAgICAgIHRpY2tCb3JkZXJEYXNoLFxuICAgICAgICAgICAgICAgIHRpY2tCb3JkZXJEYXNoT2Zmc2V0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90aWNrc0xlbmd0aCA9IHRpY2tzTGVuZ3RoO1xuICAgICAgICB0aGlzLl9ib3JkZXJWYWx1ZSA9IGJvcmRlclZhbHVlO1xuICAgICAgICByZXR1cm4gaXRlbXM7XG4gICAgfVxuIF9jb21wdXRlTGFiZWxJdGVtcyhjaGFydEFyZWEpIHtcbiAgICAgICAgY29uc3QgYXhpcyA9IHRoaXMuYXhpcztcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgeyBwb3NpdGlvbiAsIHRpY2tzOiBvcHRpb25UaWNrcyAgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IHRoaXMuaXNIb3Jpem9udGFsKCk7XG4gICAgICAgIGNvbnN0IHRpY2tzID0gdGhpcy50aWNrcztcbiAgICAgICAgY29uc3QgeyBhbGlnbiAsIGNyb3NzQWxpZ24gLCBwYWRkaW5nICwgbWlycm9yICB9ID0gb3B0aW9uVGlja3M7XG4gICAgICAgIGNvbnN0IHRsID0gZ2V0VGlja01hcmtMZW5ndGgob3B0aW9ucy5ncmlkKTtcbiAgICAgICAgY29uc3QgdGlja0FuZFBhZGRpbmcgPSB0bCArIHBhZGRpbmc7XG4gICAgICAgIGNvbnN0IGhUaWNrQW5kUGFkZGluZyA9IG1pcnJvciA/IC1wYWRkaW5nIDogdGlja0FuZFBhZGRpbmc7XG4gICAgICAgIGNvbnN0IHJvdGF0aW9uID0gLXRvUmFkaWFucyh0aGlzLmxhYmVsUm90YXRpb24pO1xuICAgICAgICBjb25zdCBpdGVtcyA9IFtdO1xuICAgICAgICBsZXQgaSwgaWxlbiwgdGljaywgbGFiZWwsIHgsIHksIHRleHRBbGlnbiwgcGl4ZWwsIGZvbnQsIGxpbmVIZWlnaHQsIGxpbmVDb3VudCwgdGV4dE9mZnNldDtcbiAgICAgICAgbGV0IHRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgICAgICBpZiAocG9zaXRpb24gPT09ICd0b3AnKSB7XG4gICAgICAgICAgICB5ID0gdGhpcy5ib3R0b20gLSBoVGlja0FuZFBhZGRpbmc7XG4gICAgICAgICAgICB0ZXh0QWxpZ24gPSB0aGlzLl9nZXRYQXhpc0xhYmVsQWxpZ25tZW50KCk7XG4gICAgICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgICB5ID0gdGhpcy50b3AgKyBoVGlja0FuZFBhZGRpbmc7XG4gICAgICAgICAgICB0ZXh0QWxpZ24gPSB0aGlzLl9nZXRYQXhpc0xhYmVsQWxpZ25tZW50KCk7XG4gICAgICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgY29uc3QgcmV0ID0gdGhpcy5fZ2V0WUF4aXNMYWJlbEFsaWdubWVudCh0bCk7XG4gICAgICAgICAgICB0ZXh0QWxpZ24gPSByZXQudGV4dEFsaWduO1xuICAgICAgICAgICAgeCA9IHJldC54O1xuICAgICAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgICBjb25zdCByZXQgPSB0aGlzLl9nZXRZQXhpc0xhYmVsQWxpZ25tZW50KHRsKTtcbiAgICAgICAgICAgIHRleHRBbGlnbiA9IHJldC50ZXh0QWxpZ247XG4gICAgICAgICAgICB4ID0gcmV0Lng7XG4gICAgICAgIH0gZWxzZSBpZiAoYXhpcyA9PT0gJ3gnKSB7XG4gICAgICAgICAgICBpZiAocG9zaXRpb24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgeSA9IChjaGFydEFyZWEudG9wICsgY2hhcnRBcmVhLmJvdHRvbSkgLyAyICsgdGlja0FuZFBhZGRpbmc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHBvc2l0aW9uKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uQXhpc0lEID0gT2JqZWN0LmtleXMocG9zaXRpb24pWzBdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcG9zaXRpb25bcG9zaXRpb25BeGlzSURdO1xuICAgICAgICAgICAgICAgIHkgPSB0aGlzLmNoYXJ0LnNjYWxlc1twb3NpdGlvbkF4aXNJRF0uZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkgKyB0aWNrQW5kUGFkZGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRleHRBbGlnbiA9IHRoaXMuX2dldFhBeGlzTGFiZWxBbGlnbm1lbnQoKTtcbiAgICAgICAgfSBlbHNlIGlmIChheGlzID09PSAneScpIHtcbiAgICAgICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgICAgICB4ID0gKGNoYXJ0QXJlYS5sZWZ0ICsgY2hhcnRBcmVhLnJpZ2h0KSAvIDIgLSB0aWNrQW5kUGFkZGluZztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QocG9zaXRpb24pKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcG9zaXRpb25BeGlzSUQgPSBPYmplY3Qua2V5cyhwb3NpdGlvbilbMF07XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBwb3NpdGlvbltwb3NpdGlvbkF4aXNJRF07XG4gICAgICAgICAgICAgICAgeCA9IHRoaXMuY2hhcnQuc2NhbGVzW3Bvc2l0aW9uQXhpc0lEXS5nZXRQaXhlbEZvclZhbHVlKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRleHRBbGlnbiA9IHRoaXMuX2dldFlBeGlzTGFiZWxBbGlnbm1lbnQodGwpLnRleHRBbGlnbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXhpcyA9PT0gJ3knKSB7XG4gICAgICAgICAgICBpZiAoYWxpZ24gPT09ICdzdGFydCcpIHtcbiAgICAgICAgICAgICAgICB0ZXh0QmFzZWxpbmUgPSAndG9wJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWxpZ24gPT09ICdlbmQnKSB7XG4gICAgICAgICAgICAgICAgdGV4dEJhc2VsaW5lID0gJ2JvdHRvbSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGFiZWxTaXplcyA9IHRoaXMuX2dldExhYmVsU2l6ZXMoKTtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gdGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIHRpY2sgPSB0aWNrc1tpXTtcbiAgICAgICAgICAgIGxhYmVsID0gdGljay5sYWJlbDtcbiAgICAgICAgICAgIGNvbnN0IG9wdHNBdEluZGV4ID0gb3B0aW9uVGlja3Muc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoaSkpO1xuICAgICAgICAgICAgcGl4ZWwgPSB0aGlzLmdldFBpeGVsRm9yVGljayhpKSArIG9wdGlvblRpY2tzLmxhYmVsT2Zmc2V0O1xuICAgICAgICAgICAgZm9udCA9IHRoaXMuX3Jlc29sdmVUaWNrRm9udE9wdGlvbnMoaSk7XG4gICAgICAgICAgICBsaW5lSGVpZ2h0ID0gZm9udC5saW5lSGVpZ2h0O1xuICAgICAgICAgICAgbGluZUNvdW50ID0gaXNBcnJheShsYWJlbCkgPyBsYWJlbC5sZW5ndGggOiAxO1xuICAgICAgICAgICAgY29uc3QgaGFsZkNvdW50ID0gbGluZUNvdW50IC8gMjtcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gb3B0c0F0SW5kZXguY29sb3I7XG4gICAgICAgICAgICBjb25zdCBzdHJva2VDb2xvciA9IG9wdHNBdEluZGV4LnRleHRTdHJva2VDb2xvcjtcbiAgICAgICAgICAgIGNvbnN0IHN0cm9rZVdpZHRoID0gb3B0c0F0SW5kZXgudGV4dFN0cm9rZVdpZHRoO1xuICAgICAgICAgICAgbGV0IHRpY2tUZXh0QWxpZ24gPSB0ZXh0QWxpZ247XG4gICAgICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICAgICAgeCA9IHBpeGVsO1xuICAgICAgICAgICAgICAgIGlmICh0ZXh0QWxpZ24gPT09ICdpbm5lcicpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IGlsZW4gLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aWNrVGV4dEFsaWduID0gIXRoaXMub3B0aW9ucy5yZXZlcnNlID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aWNrVGV4dEFsaWduID0gIXRoaXMub3B0aW9ucy5yZXZlcnNlID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpY2tUZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24gPT09ICd0b3AnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjcm9zc0FsaWduID09PSAnbmVhcicgfHwgcm90YXRpb24gIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRPZmZzZXQgPSAtbGluZUNvdW50ICogbGluZUhlaWdodCArIGxpbmVIZWlnaHQgLyAyO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNyb3NzQWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0T2Zmc2V0ID0gLWxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQgLyAyIC0gaGFsZkNvdW50ICogbGluZUhlaWdodCArIGxpbmVIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0T2Zmc2V0ID0gLWxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQgKyBsaW5lSGVpZ2h0IC8gMjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjcm9zc0FsaWduID09PSAnbmVhcicgfHwgcm90YXRpb24gIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRPZmZzZXQgPSBsaW5lSGVpZ2h0IC8gMjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjcm9zc0FsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dE9mZnNldCA9IGxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQgLyAyIC0gaGFsZkNvdW50ICogbGluZUhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRPZmZzZXQgPSBsYWJlbFNpemVzLmhpZ2hlc3QuaGVpZ2h0IC0gbGluZUNvdW50ICogbGluZUhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobWlycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHRPZmZzZXQgKj0gLTE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChyb3RhdGlvbiAhPT0gMCAmJiAhb3B0c0F0SW5kZXguc2hvd0xhYmVsQmFja2Ryb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgeCArPSBsaW5lSGVpZ2h0IC8gMiAqIE1hdGguc2luKHJvdGF0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHkgPSBwaXhlbDtcbiAgICAgICAgICAgICAgICB0ZXh0T2Zmc2V0ID0gKDEgLSBsaW5lQ291bnQpICogbGluZUhlaWdodCAvIDI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgYmFja2Ryb3A7XG4gICAgICAgICAgICBpZiAob3B0c0F0SW5kZXguc2hvd0xhYmVsQmFja2Ryb3ApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsYWJlbFBhZGRpbmcgPSB0b1BhZGRpbmcob3B0c0F0SW5kZXguYmFja2Ryb3BQYWRkaW5nKTtcbiAgICAgICAgICAgICAgICBjb25zdCBoZWlnaHQgPSBsYWJlbFNpemVzLmhlaWdodHNbaV07XG4gICAgICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBsYWJlbFNpemVzLndpZHRoc1tpXTtcbiAgICAgICAgICAgICAgICBsZXQgdG9wID0gdGV4dE9mZnNldCAtIGxhYmVsUGFkZGluZy50b3A7XG4gICAgICAgICAgICAgICAgbGV0IGxlZnQgPSAwIC0gbGFiZWxQYWRkaW5nLmxlZnQ7XG4gICAgICAgICAgICAgICAgc3dpdGNoKHRleHRCYXNlbGluZSl7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ21pZGRsZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3AgLT0gaGVpZ2h0IC8gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdib3R0b20nOlxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wIC09IGhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzd2l0Y2godGV4dEFsaWduKXtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnY2VudGVyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQgLT0gd2lkdGggLyAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQgLT0gd2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYmFja2Ryb3AgPSB7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgICAgICAgICAgIHRvcCxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoICsgbGFiZWxQYWRkaW5nLndpZHRoLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCArIGxhYmVsUGFkZGluZy5oZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBvcHRzQXRJbmRleC5iYWNrZHJvcENvbG9yXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICAgIGxhYmVsLFxuICAgICAgICAgICAgICAgIGZvbnQsXG4gICAgICAgICAgICAgICAgdGV4dE9mZnNldCxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcixcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ246IHRpY2tUZXh0QWxpZ24sXG4gICAgICAgICAgICAgICAgICAgIHRleHRCYXNlbGluZSxcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb246IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHgsXG4gICAgICAgICAgICAgICAgICAgICAgICB5XG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIGJhY2tkcm9wXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZW1zO1xuICAgIH1cbiAgICBfZ2V0WEF4aXNMYWJlbEFsaWdubWVudCgpIHtcbiAgICAgICAgY29uc3QgeyBwb3NpdGlvbiAsIHRpY2tzICB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCByb3RhdGlvbiA9IC10b1JhZGlhbnModGhpcy5sYWJlbFJvdGF0aW9uKTtcbiAgICAgICAgaWYgKHJvdGF0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gcG9zaXRpb24gPT09ICd0b3AnID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICAgICAgfVxuICAgICAgICBsZXQgYWxpZ24gPSAnY2VudGVyJztcbiAgICAgICAgaWYgKHRpY2tzLmFsaWduID09PSAnc3RhcnQnKSB7XG4gICAgICAgICAgICBhbGlnbiA9ICdsZWZ0JztcbiAgICAgICAgfSBlbHNlIGlmICh0aWNrcy5hbGlnbiA9PT0gJ2VuZCcpIHtcbiAgICAgICAgICAgIGFsaWduID0gJ3JpZ2h0JztcbiAgICAgICAgfSBlbHNlIGlmICh0aWNrcy5hbGlnbiA9PT0gJ2lubmVyJykge1xuICAgICAgICAgICAgYWxpZ24gPSAnaW5uZXInO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbGlnbjtcbiAgICB9XG4gICAgX2dldFlBeGlzTGFiZWxBbGlnbm1lbnQodGwpIHtcbiAgICAgICAgY29uc3QgeyBwb3NpdGlvbiAsIHRpY2tzOiB7IGNyb3NzQWxpZ24gLCBtaXJyb3IgLCBwYWRkaW5nICB9ICB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBsYWJlbFNpemVzID0gdGhpcy5fZ2V0TGFiZWxTaXplcygpO1xuICAgICAgICBjb25zdCB0aWNrQW5kUGFkZGluZyA9IHRsICsgcGFkZGluZztcbiAgICAgICAgY29uc3Qgd2lkZXN0ID0gbGFiZWxTaXplcy53aWRlc3Qud2lkdGg7XG4gICAgICAgIGxldCB0ZXh0QWxpZ247XG4gICAgICAgIGxldCB4O1xuICAgICAgICBpZiAocG9zaXRpb24gPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgaWYgKG1pcnJvcikge1xuICAgICAgICAgICAgICAgIHggPSB0aGlzLnJpZ2h0ICsgcGFkZGluZztcbiAgICAgICAgICAgICAgICBpZiAoY3Jvc3NBbGlnbiA9PT0gJ25lYXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbiA9ICdsZWZ0JztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNyb3NzQWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgICAgICAgICAgICB4ICs9IHdpZGVzdCAvIDI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduID0gJ3JpZ2h0JztcbiAgICAgICAgICAgICAgICAgICAgeCArPSB3aWRlc3Q7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB4ID0gdGhpcy5yaWdodCAtIHRpY2tBbmRQYWRkaW5nO1xuICAgICAgICAgICAgICAgIGlmIChjcm9zc0FsaWduID09PSAnbmVhcicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduID0gJ3JpZ2h0JztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNyb3NzQWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgICAgICAgICAgICB4IC09IHdpZGVzdCAvIDI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduID0gJ2xlZnQnO1xuICAgICAgICAgICAgICAgICAgICB4ID0gdGhpcy5sZWZ0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICAgaWYgKG1pcnJvcikge1xuICAgICAgICAgICAgICAgIHggPSB0aGlzLmxlZnQgKyBwYWRkaW5nO1xuICAgICAgICAgICAgICAgIGlmIChjcm9zc0FsaWduID09PSAnbmVhcicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduID0gJ3JpZ2h0JztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNyb3NzQWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgICAgICAgICAgICB4IC09IHdpZGVzdCAvIDI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduID0gJ2xlZnQnO1xuICAgICAgICAgICAgICAgICAgICB4IC09IHdpZGVzdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHggPSB0aGlzLmxlZnQgKyB0aWNrQW5kUGFkZGluZztcbiAgICAgICAgICAgICAgICBpZiAoY3Jvc3NBbGlnbiA9PT0gJ25lYXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbiA9ICdsZWZ0JztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNyb3NzQWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgICAgICAgICAgICB4ICs9IHdpZGVzdCAvIDI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduID0gJ3JpZ2h0JztcbiAgICAgICAgICAgICAgICAgICAgeCA9IHRoaXMucmlnaHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGV4dEFsaWduID0gJ3JpZ2h0JztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGV4dEFsaWduLFxuICAgICAgICAgICAgeFxuICAgICAgICB9O1xuICAgIH1cbiBfY29tcHV0ZUxhYmVsQXJlYSgpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy50aWNrcy5taXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uO1xuICAgICAgICBpZiAocG9zaXRpb24gPT09ICdsZWZ0JyB8fCBwb3NpdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICAgICAgbGVmdDogdGhpcy5sZWZ0LFxuICAgICAgICAgICAgICAgIGJvdHRvbTogY2hhcnQuaGVpZ2h0LFxuICAgICAgICAgICAgICAgIHJpZ2h0OiB0aGlzLnJpZ2h0XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcgfHwgcG9zaXRpb24gPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRvcDogdGhpcy50b3AsXG4gICAgICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgICAgICBib3R0b206IHRoaXMuYm90dG9tLFxuICAgICAgICAgICAgICAgIHJpZ2h0OiBjaGFydC53aWR0aFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiBkcmF3QmFja2dyb3VuZCgpIHtcbiAgICAgICAgY29uc3QgeyBjdHggLCBvcHRpb25zOiB7IGJhY2tncm91bmRDb2xvciAgfSAsIGxlZnQgLCB0b3AgLCB3aWR0aCAsIGhlaWdodCAgfSA9IHRoaXM7XG4gICAgICAgIGlmIChiYWNrZ3JvdW5kQ29sb3IpIHtcbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gYmFja2dyb3VuZENvbG9yO1xuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KGxlZnQsIHRvcCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldExpbmVXaWR0aEZvclZhbHVlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGdyaWQgPSB0aGlzLm9wdGlvbnMuZ3JpZDtcbiAgICAgICAgaWYgKCF0aGlzLl9pc1Zpc2libGUoKSB8fCAhZ3JpZC5kaXNwbGF5KSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0aWNrcyA9IHRoaXMudGlja3M7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGlja3MuZmluZEluZGV4KCh0KT0+dC52YWx1ZSA9PT0gdmFsdWUpO1xuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgY29uc3Qgb3B0cyA9IGdyaWQuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoaW5kZXgpKTtcbiAgICAgICAgICAgIHJldHVybiBvcHRzLmxpbmVXaWR0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gZHJhd0dyaWQoY2hhcnRBcmVhKSB7XG4gICAgICAgIGNvbnN0IGdyaWQgPSB0aGlzLm9wdGlvbnMuZ3JpZDtcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5fZ3JpZExpbmVJdGVtcyB8fCAodGhpcy5fZ3JpZExpbmVJdGVtcyA9IHRoaXMuX2NvbXB1dGVHcmlkTGluZUl0ZW1zKGNoYXJ0QXJlYSkpO1xuICAgICAgICBsZXQgaSwgaWxlbjtcbiAgICAgICAgY29uc3QgZHJhd0xpbmUgPSAocDEsIHAyLCBzdHlsZSk9PntcbiAgICAgICAgICAgIGlmICghc3R5bGUud2lkdGggfHwgIXN0eWxlLmNvbG9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgIGN0eC5saW5lV2lkdGggPSBzdHlsZS53aWR0aDtcbiAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHN0eWxlLmNvbG9yO1xuICAgICAgICAgICAgY3R4LnNldExpbmVEYXNoKHN0eWxlLmJvcmRlckRhc2ggfHwgW10pO1xuICAgICAgICAgICAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gc3R5bGUuYm9yZGVyRGFzaE9mZnNldDtcbiAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8ocDEueCwgcDEueSk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHAyLngsIHAyLnkpO1xuICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGdyaWQuZGlzcGxheSkge1xuICAgICAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0gaXRlbXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKGdyaWQuZHJhd09uQ2hhcnRBcmVhKSB7XG4gICAgICAgICAgICAgICAgICAgIGRyYXdMaW5lKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IGl0ZW0ueDEsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBpdGVtLnkxXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IGl0ZW0ueDIsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBpdGVtLnkyXG4gICAgICAgICAgICAgICAgICAgIH0sIGl0ZW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZ3JpZC5kcmF3VGlja3MpIHtcbiAgICAgICAgICAgICAgICAgICAgZHJhd0xpbmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogaXRlbS50eDEsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBpdGVtLnR5MVxuICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBpdGVtLnR4MixcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IGl0ZW0udHkyXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBpdGVtLnRpY2tDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBpdGVtLnRpY2tXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckRhc2g6IGl0ZW0udGlja0JvcmRlckRhc2gsXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJEYXNoT2Zmc2V0OiBpdGVtLnRpY2tCb3JkZXJEYXNoT2Zmc2V0XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiBkcmF3Qm9yZGVyKCkge1xuICAgICAgICBjb25zdCB7IGNoYXJ0ICwgY3R4ICwgb3B0aW9uczogeyBib3JkZXIgLCBncmlkICB9ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgYm9yZGVyT3B0cyA9IGJvcmRlci5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICAgICAgY29uc3QgYXhpc1dpZHRoID0gYm9yZGVyLmRpc3BsYXkgPyBib3JkZXJPcHRzLndpZHRoIDogMDtcbiAgICAgICAgaWYgKCFheGlzV2lkdGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYXN0TGluZVdpZHRoID0gZ3JpZC5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgwKSkubGluZVdpZHRoO1xuICAgICAgICBjb25zdCBib3JkZXJWYWx1ZSA9IHRoaXMuX2JvcmRlclZhbHVlO1xuICAgICAgICBsZXQgeDEsIHgyLCB5MSwgeTI7XG4gICAgICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICB4MSA9IF9hbGlnblBpeGVsKGNoYXJ0LCB0aGlzLmxlZnQsIGF4aXNXaWR0aCkgLSBheGlzV2lkdGggLyAyO1xuICAgICAgICAgICAgeDIgPSBfYWxpZ25QaXhlbChjaGFydCwgdGhpcy5yaWdodCwgbGFzdExpbmVXaWR0aCkgKyBsYXN0TGluZVdpZHRoIC8gMjtcbiAgICAgICAgICAgIHkxID0geTIgPSBib3JkZXJWYWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHkxID0gX2FsaWduUGl4ZWwoY2hhcnQsIHRoaXMudG9wLCBheGlzV2lkdGgpIC0gYXhpc1dpZHRoIC8gMjtcbiAgICAgICAgICAgIHkyID0gX2FsaWduUGl4ZWwoY2hhcnQsIHRoaXMuYm90dG9tLCBsYXN0TGluZVdpZHRoKSArIGxhc3RMaW5lV2lkdGggLyAyO1xuICAgICAgICAgICAgeDEgPSB4MiA9IGJvcmRlclZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSBib3JkZXJPcHRzLndpZHRoO1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBib3JkZXJPcHRzLmNvbG9yO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5tb3ZlVG8oeDEsIHkxKTtcbiAgICAgICAgY3R4LmxpbmVUbyh4MiwgeTIpO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfVxuIGRyYXdMYWJlbHMoY2hhcnRBcmVhKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvblRpY2tzID0gdGhpcy5vcHRpb25zLnRpY2tzO1xuICAgICAgICBpZiAoIW9wdGlvblRpY2tzLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICAgICAgY29uc3QgYXJlYSA9IHRoaXMuX2NvbXB1dGVMYWJlbEFyZWEoKTtcbiAgICAgICAgaWYgKGFyZWEpIHtcbiAgICAgICAgICAgIGNsaXBBcmVhKGN0eCwgYXJlYSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXRlbXMgPSB0aGlzLmdldExhYmVsSXRlbXMoY2hhcnRBcmVhKTtcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zKXtcbiAgICAgICAgICAgIGNvbnN0IHJlbmRlclRleHRPcHRpb25zID0gaXRlbS5vcHRpb25zO1xuICAgICAgICAgICAgY29uc3QgdGlja0ZvbnQgPSBpdGVtLmZvbnQ7XG4gICAgICAgICAgICBjb25zdCBsYWJlbCA9IGl0ZW0ubGFiZWw7XG4gICAgICAgICAgICBjb25zdCB5ID0gaXRlbS50ZXh0T2Zmc2V0O1xuICAgICAgICAgICAgcmVuZGVyVGV4dChjdHgsIGxhYmVsLCAwLCB5LCB0aWNrRm9udCwgcmVuZGVyVGV4dE9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhcmVhKSB7XG4gICAgICAgICAgICB1bmNsaXBBcmVhKGN0eCk7XG4gICAgICAgIH1cbiAgICB9XG4gZHJhd1RpdGxlKCkge1xuICAgICAgICBjb25zdCB7IGN0eCAsIG9wdGlvbnM6IHsgcG9zaXRpb24gLCB0aXRsZSAsIHJldmVyc2UgIH0gIH0gPSB0aGlzO1xuICAgICAgICBpZiAoIXRpdGxlLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmb250ID0gdG9Gb250KHRpdGxlLmZvbnQpO1xuICAgICAgICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKHRpdGxlLnBhZGRpbmcpO1xuICAgICAgICBjb25zdCBhbGlnbiA9IHRpdGxlLmFsaWduO1xuICAgICAgICBsZXQgb2Zmc2V0ID0gZm9udC5saW5lSGVpZ2h0IC8gMjtcbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAnYm90dG9tJyB8fCBwb3NpdGlvbiA9PT0gJ2NlbnRlcicgfHwgaXNPYmplY3QocG9zaXRpb24pKSB7XG4gICAgICAgICAgICBvZmZzZXQgKz0gcGFkZGluZy5ib3R0b207XG4gICAgICAgICAgICBpZiAoaXNBcnJheSh0aXRsZS50ZXh0KSkge1xuICAgICAgICAgICAgICAgIG9mZnNldCArPSBmb250LmxpbmVIZWlnaHQgKiAodGl0bGUudGV4dC5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9mZnNldCArPSBwYWRkaW5nLnRvcDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IHRpdGxlWCAsIHRpdGxlWSAsIG1heFdpZHRoICwgcm90YXRpb24gIH0gPSB0aXRsZUFyZ3ModGhpcywgb2Zmc2V0LCBwb3NpdGlvbiwgYWxpZ24pO1xuICAgICAgICByZW5kZXJUZXh0KGN0eCwgdGl0bGUudGV4dCwgMCwgMCwgZm9udCwge1xuICAgICAgICAgICAgY29sb3I6IHRpdGxlLmNvbG9yLFxuICAgICAgICAgICAgbWF4V2lkdGgsXG4gICAgICAgICAgICByb3RhdGlvbixcbiAgICAgICAgICAgIHRleHRBbGlnbjogdGl0bGVBbGlnbihhbGlnbiwgcG9zaXRpb24sIHJldmVyc2UpLFxuICAgICAgICAgICAgdGV4dEJhc2VsaW5lOiAnbWlkZGxlJyxcbiAgICAgICAgICAgIHRyYW5zbGF0aW9uOiBbXG4gICAgICAgICAgICAgICAgdGl0bGVYLFxuICAgICAgICAgICAgICAgIHRpdGxlWVxuICAgICAgICAgICAgXVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZHJhdyhjaGFydEFyZWEpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9pc1Zpc2libGUoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZHJhd0JhY2tncm91bmQoKTtcbiAgICAgICAgdGhpcy5kcmF3R3JpZChjaGFydEFyZWEpO1xuICAgICAgICB0aGlzLmRyYXdCb3JkZXIoKTtcbiAgICAgICAgdGhpcy5kcmF3VGl0bGUoKTtcbiAgICAgICAgdGhpcy5kcmF3TGFiZWxzKGNoYXJ0QXJlYSk7XG4gICAgfVxuIF9sYXllcnMoKSB7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHR6ID0gb3B0cy50aWNrcyAmJiBvcHRzLnRpY2tzLnogfHwgMDtcbiAgICAgICAgY29uc3QgZ3ogPSB2YWx1ZU9yRGVmYXVsdChvcHRzLmdyaWQgJiYgb3B0cy5ncmlkLnosIC0xKTtcbiAgICAgICAgY29uc3QgYnogPSB2YWx1ZU9yRGVmYXVsdChvcHRzLmJvcmRlciAmJiBvcHRzLmJvcmRlci56LCAwKTtcbiAgICAgICAgaWYgKCF0aGlzLl9pc1Zpc2libGUoKSB8fCB0aGlzLmRyYXcgIT09IFNjYWxlLnByb3RvdHlwZS5kcmF3KSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgejogdHosXG4gICAgICAgICAgICAgICAgICAgIGRyYXc6IChjaGFydEFyZWEpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXcoY2hhcnRBcmVhKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB6OiBneixcbiAgICAgICAgICAgICAgICBkcmF3OiAoY2hhcnRBcmVhKT0+e1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXdCYWNrZ3JvdW5kKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhd0dyaWQoY2hhcnRBcmVhKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3VGl0bGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHo6IGJ6LFxuICAgICAgICAgICAgICAgIGRyYXc6ICgpPT57XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhd0JvcmRlcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgejogdHosXG4gICAgICAgICAgICAgICAgZHJhdzogKGNoYXJ0QXJlYSk9PntcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3TGFiZWxzKGNoYXJ0QXJlYSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBdO1xuICAgIH1cbiBnZXRNYXRjaGluZ1Zpc2libGVNZXRhcyh0eXBlKSB7XG4gICAgICAgIGNvbnN0IG1ldGFzID0gdGhpcy5jaGFydC5nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCk7XG4gICAgICAgIGNvbnN0IGF4aXNJRCA9IHRoaXMuYXhpcyArICdBeGlzSUQnO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgbGV0IGksIGlsZW47XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IG1ldGFzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBjb25zdCBtZXRhID0gbWV0YXNbaV07XG4gICAgICAgICAgICBpZiAobWV0YVtheGlzSURdID09PSB0aGlzLmlkICYmICghdHlwZSB8fCBtZXRhLnR5cGUgPT09IHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobWV0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gX3Jlc29sdmVUaWNrRm9udE9wdGlvbnMoaW5kZXgpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucy50aWNrcy5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dChpbmRleCkpO1xuICAgICAgICByZXR1cm4gdG9Gb250KG9wdHMuZm9udCk7XG4gICAgfVxuIF9tYXhEaWdpdHMoKSB7XG4gICAgICAgIGNvbnN0IGZvbnRTaXplID0gdGhpcy5fcmVzb2x2ZVRpY2tGb250T3B0aW9ucygwKS5saW5lSGVpZ2h0O1xuICAgICAgICByZXR1cm4gKHRoaXMuaXNIb3Jpem9udGFsKCkgPyB0aGlzLndpZHRoIDogdGhpcy5oZWlnaHQpIC8gZm9udFNpemU7XG4gICAgfVxufVxuXG5jbGFzcyBUeXBlZFJlZ2lzdHJ5IHtcbiAgICBjb25zdHJ1Y3Rvcih0eXBlLCBzY29wZSwgb3ZlcnJpZGUpe1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMub3ZlcnJpZGUgPSBvdmVycmlkZTtcbiAgICAgICAgdGhpcy5pdGVtcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfVxuICAgIGlzRm9yVHlwZSh0eXBlKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmlzUHJvdG90eXBlT2YuY2FsbCh0aGlzLnR5cGUucHJvdG90eXBlLCB0eXBlLnByb3RvdHlwZSk7XG4gICAgfVxuIHJlZ2lzdGVyKGl0ZW0pIHtcbiAgICAgICAgY29uc3QgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoaXRlbSk7XG4gICAgICAgIGxldCBwYXJlbnRTY29wZTtcbiAgICAgICAgaWYgKGlzSUNoYXJ0Q29tcG9uZW50KHByb3RvKSkge1xuICAgICAgICAgICAgcGFyZW50U2NvcGUgPSB0aGlzLnJlZ2lzdGVyKHByb3RvKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpdGVtcyA9IHRoaXMuaXRlbXM7XG4gICAgICAgIGNvbnN0IGlkID0gaXRlbS5pZDtcbiAgICAgICAgY29uc3Qgc2NvcGUgPSB0aGlzLnNjb3BlICsgJy4nICsgaWQ7XG4gICAgICAgIGlmICghaWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY2xhc3MgZG9lcyBub3QgaGF2ZSBpZDogJyArIGl0ZW0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpZCBpbiBpdGVtcykge1xuICAgICAgICAgICAgcmV0dXJuIHNjb3BlO1xuICAgICAgICB9XG4gICAgICAgIGl0ZW1zW2lkXSA9IGl0ZW07XG4gICAgICAgIHJlZ2lzdGVyRGVmYXVsdHMoaXRlbSwgc2NvcGUsIHBhcmVudFNjb3BlKTtcbiAgICAgICAgaWYgKHRoaXMub3ZlcnJpZGUpIHtcbiAgICAgICAgICAgIGRlZmF1bHRzLm92ZXJyaWRlKGl0ZW0uaWQsIGl0ZW0ub3ZlcnJpZGVzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2NvcGU7XG4gICAgfVxuIGdldChpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pdGVtc1tpZF07XG4gICAgfVxuIHVucmVnaXN0ZXIoaXRlbSkge1xuICAgICAgICBjb25zdCBpdGVtcyA9IHRoaXMuaXRlbXM7XG4gICAgICAgIGNvbnN0IGlkID0gaXRlbS5pZDtcbiAgICAgICAgY29uc3Qgc2NvcGUgPSB0aGlzLnNjb3BlO1xuICAgICAgICBpZiAoaWQgaW4gaXRlbXMpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBpdGVtc1tpZF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNjb3BlICYmIGlkIGluIGRlZmF1bHRzW3Njb3BlXSkge1xuICAgICAgICAgICAgZGVsZXRlIGRlZmF1bHRzW3Njb3BlXVtpZF07XG4gICAgICAgICAgICBpZiAodGhpcy5vdmVycmlkZSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBvdmVycmlkZXNbaWRdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gcmVnaXN0ZXJEZWZhdWx0cyhpdGVtLCBzY29wZSwgcGFyZW50U2NvcGUpIHtcbiAgICBjb25zdCBpdGVtRGVmYXVsdHMgPSBtZXJnZShPYmplY3QuY3JlYXRlKG51bGwpLCBbXG4gICAgICAgIHBhcmVudFNjb3BlID8gZGVmYXVsdHMuZ2V0KHBhcmVudFNjb3BlKSA6IHt9LFxuICAgICAgICBkZWZhdWx0cy5nZXQoc2NvcGUpLFxuICAgICAgICBpdGVtLmRlZmF1bHRzXG4gICAgXSk7XG4gICAgZGVmYXVsdHMuc2V0KHNjb3BlLCBpdGVtRGVmYXVsdHMpO1xuICAgIGlmIChpdGVtLmRlZmF1bHRSb3V0ZXMpIHtcbiAgICAgICAgcm91dGVEZWZhdWx0cyhzY29wZSwgaXRlbS5kZWZhdWx0Um91dGVzKTtcbiAgICB9XG4gICAgaWYgKGl0ZW0uZGVzY3JpcHRvcnMpIHtcbiAgICAgICAgZGVmYXVsdHMuZGVzY3JpYmUoc2NvcGUsIGl0ZW0uZGVzY3JpcHRvcnMpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHJvdXRlRGVmYXVsdHMoc2NvcGUsIHJvdXRlcykge1xuICAgIE9iamVjdC5rZXlzKHJvdXRlcykuZm9yRWFjaCgocHJvcGVydHkpPT57XG4gICAgICAgIGNvbnN0IHByb3BlcnR5UGFydHMgPSBwcm9wZXJ0eS5zcGxpdCgnLicpO1xuICAgICAgICBjb25zdCBzb3VyY2VOYW1lID0gcHJvcGVydHlQYXJ0cy5wb3AoKTtcbiAgICAgICAgY29uc3Qgc291cmNlU2NvcGUgPSBbXG4gICAgICAgICAgICBzY29wZVxuICAgICAgICBdLmNvbmNhdChwcm9wZXJ0eVBhcnRzKS5qb2luKCcuJyk7XG4gICAgICAgIGNvbnN0IHBhcnRzID0gcm91dGVzW3Byb3BlcnR5XS5zcGxpdCgnLicpO1xuICAgICAgICBjb25zdCB0YXJnZXROYW1lID0gcGFydHMucG9wKCk7XG4gICAgICAgIGNvbnN0IHRhcmdldFNjb3BlID0gcGFydHMuam9pbignLicpO1xuICAgICAgICBkZWZhdWx0cy5yb3V0ZShzb3VyY2VTY29wZSwgc291cmNlTmFtZSwgdGFyZ2V0U2NvcGUsIHRhcmdldE5hbWUpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gaXNJQ2hhcnRDb21wb25lbnQocHJvdG8pIHtcbiAgICByZXR1cm4gJ2lkJyBpbiBwcm90byAmJiAnZGVmYXVsdHMnIGluIHByb3RvO1xufVxuXG5jbGFzcyBSZWdpc3RyeSB7XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgdGhpcy5jb250cm9sbGVycyA9IG5ldyBUeXBlZFJlZ2lzdHJ5KERhdGFzZXRDb250cm9sbGVyLCAnZGF0YXNldHMnLCB0cnVlKTtcbiAgICAgICAgdGhpcy5lbGVtZW50cyA9IG5ldyBUeXBlZFJlZ2lzdHJ5KEVsZW1lbnQsICdlbGVtZW50cycpO1xuICAgICAgICB0aGlzLnBsdWdpbnMgPSBuZXcgVHlwZWRSZWdpc3RyeShPYmplY3QsICdwbHVnaW5zJyk7XG4gICAgICAgIHRoaXMuc2NhbGVzID0gbmV3IFR5cGVkUmVnaXN0cnkoU2NhbGUsICdzY2FsZXMnKTtcbiAgICAgICAgdGhpcy5fdHlwZWRSZWdpc3RyaWVzID0gW1xuICAgICAgICAgICAgdGhpcy5jb250cm9sbGVycyxcbiAgICAgICAgICAgIHRoaXMuc2NhbGVzLFxuICAgICAgICAgICAgdGhpcy5lbGVtZW50c1xuICAgICAgICBdO1xuICAgIH1cbiBhZGQoLi4uYXJncykge1xuICAgICAgICB0aGlzLl9lYWNoKCdyZWdpc3RlcicsIGFyZ3MpO1xuICAgIH1cbiAgICByZW1vdmUoLi4uYXJncykge1xuICAgICAgICB0aGlzLl9lYWNoKCd1bnJlZ2lzdGVyJywgYXJncyk7XG4gICAgfVxuIGFkZENvbnRyb2xsZXJzKC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5fZWFjaCgncmVnaXN0ZXInLCBhcmdzLCB0aGlzLmNvbnRyb2xsZXJzKTtcbiAgICB9XG4gYWRkRWxlbWVudHMoLi4uYXJncykge1xuICAgICAgICB0aGlzLl9lYWNoKCdyZWdpc3RlcicsIGFyZ3MsIHRoaXMuZWxlbWVudHMpO1xuICAgIH1cbiBhZGRQbHVnaW5zKC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5fZWFjaCgncmVnaXN0ZXInLCBhcmdzLCB0aGlzLnBsdWdpbnMpO1xuICAgIH1cbiBhZGRTY2FsZXMoLi4uYXJncykge1xuICAgICAgICB0aGlzLl9lYWNoKCdyZWdpc3RlcicsIGFyZ3MsIHRoaXMuc2NhbGVzKTtcbiAgICB9XG4gZ2V0Q29udHJvbGxlcihpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0KGlkLCB0aGlzLmNvbnRyb2xsZXJzLCAnY29udHJvbGxlcicpO1xuICAgIH1cbiBnZXRFbGVtZW50KGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXQoaWQsIHRoaXMuZWxlbWVudHMsICdlbGVtZW50Jyk7XG4gICAgfVxuIGdldFBsdWdpbihpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0KGlkLCB0aGlzLnBsdWdpbnMsICdwbHVnaW4nKTtcbiAgICB9XG4gZ2V0U2NhbGUoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldChpZCwgdGhpcy5zY2FsZXMsICdzY2FsZScpO1xuICAgIH1cbiByZW1vdmVDb250cm9sbGVycyguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuX2VhY2goJ3VucmVnaXN0ZXInLCBhcmdzLCB0aGlzLmNvbnRyb2xsZXJzKTtcbiAgICB9XG4gcmVtb3ZlRWxlbWVudHMoLi4uYXJncykge1xuICAgICAgICB0aGlzLl9lYWNoKCd1bnJlZ2lzdGVyJywgYXJncywgdGhpcy5lbGVtZW50cyk7XG4gICAgfVxuIHJlbW92ZVBsdWdpbnMoLi4uYXJncykge1xuICAgICAgICB0aGlzLl9lYWNoKCd1bnJlZ2lzdGVyJywgYXJncywgdGhpcy5wbHVnaW5zKTtcbiAgICB9XG4gcmVtb3ZlU2NhbGVzKC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5fZWFjaCgndW5yZWdpc3RlcicsIGFyZ3MsIHRoaXMuc2NhbGVzKTtcbiAgICB9XG4gX2VhY2gobWV0aG9kLCBhcmdzLCB0eXBlZFJlZ2lzdHJ5KSB7XG4gICAgICAgIFtcbiAgICAgICAgICAgIC4uLmFyZ3NcbiAgICAgICAgXS5mb3JFYWNoKChhcmcpPT57XG4gICAgICAgICAgICBjb25zdCByZWcgPSB0eXBlZFJlZ2lzdHJ5IHx8IHRoaXMuX2dldFJlZ2lzdHJ5Rm9yVHlwZShhcmcpO1xuICAgICAgICAgICAgaWYgKHR5cGVkUmVnaXN0cnkgfHwgcmVnLmlzRm9yVHlwZShhcmcpIHx8IHJlZyA9PT0gdGhpcy5wbHVnaW5zICYmIGFyZy5pZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2V4ZWMobWV0aG9kLCByZWcsIGFyZyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVhY2goYXJnLCAoaXRlbSk9PntcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlbVJlZyA9IHR5cGVkUmVnaXN0cnkgfHwgdGhpcy5fZ2V0UmVnaXN0cnlGb3JUeXBlKGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9leGVjKG1ldGhvZCwgaXRlbVJlZywgaXRlbSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiBfZXhlYyhtZXRob2QsIHJlZ2lzdHJ5LCBjb21wb25lbnQpIHtcbiAgICAgICAgY29uc3QgY2FtZWxNZXRob2QgPSBfY2FwaXRhbGl6ZShtZXRob2QpO1xuICAgICAgICBjYWxsYmFjayhjb21wb25lbnRbJ2JlZm9yZScgKyBjYW1lbE1ldGhvZF0sIFtdLCBjb21wb25lbnQpO1xuICAgICAgICByZWdpc3RyeVttZXRob2RdKGNvbXBvbmVudCk7XG4gICAgICAgIGNhbGxiYWNrKGNvbXBvbmVudFsnYWZ0ZXInICsgY2FtZWxNZXRob2RdLCBbXSwgY29tcG9uZW50KTtcbiAgICB9XG4gX2dldFJlZ2lzdHJ5Rm9yVHlwZSh0eXBlKSB7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLl90eXBlZFJlZ2lzdHJpZXMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgY29uc3QgcmVnID0gdGhpcy5fdHlwZWRSZWdpc3RyaWVzW2ldO1xuICAgICAgICAgICAgaWYgKHJlZy5pc0ZvclR5cGUodHlwZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnBsdWdpbnM7XG4gICAgfVxuIF9nZXQoaWQsIHR5cGVkUmVnaXN0cnksIHR5cGUpIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IHR5cGVkUmVnaXN0cnkuZ2V0KGlkKTtcbiAgICAgICAgaWYgKGl0ZW0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyBpZCArICdcIiBpcyBub3QgYSByZWdpc3RlcmVkICcgKyB0eXBlICsgJy4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXRlbTtcbiAgICB9XG59XG52YXIgcmVnaXN0cnkgPSAvKiAjX19QVVJFX18gKi8gbmV3IFJlZ2lzdHJ5KCk7XG5cbmNsYXNzIFBsdWdpblNlcnZpY2Uge1xuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHRoaXMuX2luaXQgPSBbXTtcbiAgICB9XG4gbm90aWZ5KGNoYXJ0LCBob29rLCBhcmdzLCBmaWx0ZXIpIHtcbiAgICAgICAgaWYgKGhvb2sgPT09ICdiZWZvcmVJbml0Jykge1xuICAgICAgICAgICAgdGhpcy5faW5pdCA9IHRoaXMuX2NyZWF0ZURlc2NyaXB0b3JzKGNoYXJ0LCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuX25vdGlmeSh0aGlzLl9pbml0LCBjaGFydCwgJ2luc3RhbGwnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkZXNjcmlwdG9ycyA9IGZpbHRlciA/IHRoaXMuX2Rlc2NyaXB0b3JzKGNoYXJ0KS5maWx0ZXIoZmlsdGVyKSA6IHRoaXMuX2Rlc2NyaXB0b3JzKGNoYXJ0KTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fbm90aWZ5KGRlc2NyaXB0b3JzLCBjaGFydCwgaG9vaywgYXJncyk7XG4gICAgICAgIGlmIChob29rID09PSAnYWZ0ZXJEZXN0cm95Jykge1xuICAgICAgICAgICAgdGhpcy5fbm90aWZ5KGRlc2NyaXB0b3JzLCBjaGFydCwgJ3N0b3AnKTtcbiAgICAgICAgICAgIHRoaXMuX25vdGlmeSh0aGlzLl9pbml0LCBjaGFydCwgJ3VuaW5zdGFsbCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuIF9ub3RpZnkoZGVzY3JpcHRvcnMsIGNoYXJ0LCBob29rLCBhcmdzKSB7XG4gICAgICAgIGFyZ3MgPSBhcmdzIHx8IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGRlc2NyaXB0b3Igb2YgZGVzY3JpcHRvcnMpe1xuICAgICAgICAgICAgY29uc3QgcGx1Z2luID0gZGVzY3JpcHRvci5wbHVnaW47XG4gICAgICAgICAgICBjb25zdCBtZXRob2QgPSBwbHVnaW5baG9va107XG4gICAgICAgICAgICBjb25zdCBwYXJhbXMgPSBbXG4gICAgICAgICAgICAgICAgY2hhcnQsXG4gICAgICAgICAgICAgICAgYXJncyxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdG9yLm9wdGlvbnNcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sobWV0aG9kLCBwYXJhbXMsIHBsdWdpbikgPT09IGZhbHNlICYmIGFyZ3MuY2FuY2VsYWJsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaW52YWxpZGF0ZSgpIHtcbiAgICAgICAgaWYgKCFpc051bGxPclVuZGVmKHRoaXMuX2NhY2hlKSkge1xuICAgICAgICAgICAgdGhpcy5fb2xkQ2FjaGUgPSB0aGlzLl9jYWNoZTtcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuIF9kZXNjcmlwdG9ycyhjaGFydCkge1xuICAgICAgICBpZiAodGhpcy5fY2FjaGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkZXNjcmlwdG9ycyA9IHRoaXMuX2NhY2hlID0gdGhpcy5fY3JlYXRlRGVzY3JpcHRvcnMoY2hhcnQpO1xuICAgICAgICB0aGlzLl9ub3RpZnlTdGF0ZUNoYW5nZXMoY2hhcnQpO1xuICAgICAgICByZXR1cm4gZGVzY3JpcHRvcnM7XG4gICAgfVxuICAgIF9jcmVhdGVEZXNjcmlwdG9ycyhjaGFydCwgYWxsKSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IGNoYXJ0ICYmIGNoYXJ0LmNvbmZpZztcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHZhbHVlT3JEZWZhdWx0KGNvbmZpZy5vcHRpb25zICYmIGNvbmZpZy5vcHRpb25zLnBsdWdpbnMsIHt9KTtcbiAgICAgICAgY29uc3QgcGx1Z2lucyA9IGFsbFBsdWdpbnMoY29uZmlnKTtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMgPT09IGZhbHNlICYmICFhbGwgPyBbXSA6IGNyZWF0ZURlc2NyaXB0b3JzKGNoYXJ0LCBwbHVnaW5zLCBvcHRpb25zLCBhbGwpO1xuICAgIH1cbiBfbm90aWZ5U3RhdGVDaGFuZ2VzKGNoYXJ0KSB7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzRGVzY3JpcHRvcnMgPSB0aGlzLl9vbGRDYWNoZSB8fCBbXTtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRvcnMgPSB0aGlzLl9jYWNoZTtcbiAgICAgICAgY29uc3QgZGlmZiA9IChhLCBiKT0+YS5maWx0ZXIoKHgpPT4hYi5zb21lKCh5KT0+eC5wbHVnaW4uaWQgPT09IHkucGx1Z2luLmlkKSk7XG4gICAgICAgIHRoaXMuX25vdGlmeShkaWZmKHByZXZpb3VzRGVzY3JpcHRvcnMsIGRlc2NyaXB0b3JzKSwgY2hhcnQsICdzdG9wJyk7XG4gICAgICAgIHRoaXMuX25vdGlmeShkaWZmKGRlc2NyaXB0b3JzLCBwcmV2aW91c0Rlc2NyaXB0b3JzKSwgY2hhcnQsICdzdGFydCcpO1xuICAgIH1cbn1cbiBmdW5jdGlvbiBhbGxQbHVnaW5zKGNvbmZpZykge1xuICAgIGNvbnN0IGxvY2FsSWRzID0ge307XG4gICAgY29uc3QgcGx1Z2lucyA9IFtdO1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhyZWdpc3RyeS5wbHVnaW5zLml0ZW1zKTtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIHBsdWdpbnMucHVzaChyZWdpc3RyeS5nZXRQbHVnaW4oa2V5c1tpXSkpO1xuICAgIH1cbiAgICBjb25zdCBsb2NhbCA9IGNvbmZpZy5wbHVnaW5zIHx8IFtdO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsb2NhbC5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGNvbnN0IHBsdWdpbiA9IGxvY2FsW2ldO1xuICAgICAgICBpZiAocGx1Z2lucy5pbmRleE9mKHBsdWdpbikgPT09IC0xKSB7XG4gICAgICAgICAgICBwbHVnaW5zLnB1c2gocGx1Z2luKTtcbiAgICAgICAgICAgIGxvY2FsSWRzW3BsdWdpbi5pZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHBsdWdpbnMsXG4gICAgICAgIGxvY2FsSWRzXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGdldE9wdHMob3B0aW9ucywgYWxsKSB7XG4gICAgaWYgKCFhbGwgJiYgb3B0aW9ucyA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChvcHRpb25zID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgcmV0dXJuIG9wdGlvbnM7XG59XG5mdW5jdGlvbiBjcmVhdGVEZXNjcmlwdG9ycyhjaGFydCwgeyBwbHVnaW5zICwgbG9jYWxJZHMgIH0sIG9wdGlvbnMsIGFsbCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGNvbnN0IGNvbnRleHQgPSBjaGFydC5nZXRDb250ZXh0KCk7XG4gICAgZm9yIChjb25zdCBwbHVnaW4gb2YgcGx1Z2lucyl7XG4gICAgICAgIGNvbnN0IGlkID0gcGx1Z2luLmlkO1xuICAgICAgICBjb25zdCBvcHRzID0gZ2V0T3B0cyhvcHRpb25zW2lkXSwgYWxsKTtcbiAgICAgICAgaWYgKG9wdHMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgIHBsdWdpbixcbiAgICAgICAgICAgIG9wdGlvbnM6IHBsdWdpbk9wdHMoY2hhcnQuY29uZmlnLCB7XG4gICAgICAgICAgICAgICAgcGx1Z2luLFxuICAgICAgICAgICAgICAgIGxvY2FsOiBsb2NhbElkc1tpZF1cbiAgICAgICAgICAgIH0sIG9wdHMsIGNvbnRleHQpXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gcGx1Z2luT3B0cyhjb25maWcsIHsgcGx1Z2luICwgbG9jYWwgIH0sIG9wdHMsIGNvbnRleHQpIHtcbiAgICBjb25zdCBrZXlzID0gY29uZmlnLnBsdWdpblNjb3BlS2V5cyhwbHVnaW4pO1xuICAgIGNvbnN0IHNjb3BlcyA9IGNvbmZpZy5nZXRPcHRpb25TY29wZXMob3B0cywga2V5cyk7XG4gICAgaWYgKGxvY2FsICYmIHBsdWdpbi5kZWZhdWx0cykge1xuICAgICAgICBzY29wZXMucHVzaChwbHVnaW4uZGVmYXVsdHMpO1xuICAgIH1cbiAgICByZXR1cm4gY29uZmlnLmNyZWF0ZVJlc29sdmVyKHNjb3BlcywgY29udGV4dCwgW1xuICAgICAgICAnJ1xuICAgIF0sIHtcbiAgICAgICAgc2NyaXB0YWJsZTogZmFsc2UsXG4gICAgICAgIGluZGV4YWJsZTogZmFsc2UsXG4gICAgICAgIGFsbEtleXM6IHRydWVcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0SW5kZXhBeGlzKHR5cGUsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBkYXRhc2V0RGVmYXVsdHMgPSBkZWZhdWx0cy5kYXRhc2V0c1t0eXBlXSB8fCB7fTtcbiAgICBjb25zdCBkYXRhc2V0T3B0aW9ucyA9IChvcHRpb25zLmRhdGFzZXRzIHx8IHt9KVt0eXBlXSB8fCB7fTtcbiAgICByZXR1cm4gZGF0YXNldE9wdGlvbnMuaW5kZXhBeGlzIHx8IG9wdGlvbnMuaW5kZXhBeGlzIHx8IGRhdGFzZXREZWZhdWx0cy5pbmRleEF4aXMgfHwgJ3gnO1xufVxuZnVuY3Rpb24gZ2V0QXhpc0Zyb21EZWZhdWx0U2NhbGVJRChpZCwgaW5kZXhBeGlzKSB7XG4gICAgbGV0IGF4aXMgPSBpZDtcbiAgICBpZiAoaWQgPT09ICdfaW5kZXhfJykge1xuICAgICAgICBheGlzID0gaW5kZXhBeGlzO1xuICAgIH0gZWxzZSBpZiAoaWQgPT09ICdfdmFsdWVfJykge1xuICAgICAgICBheGlzID0gaW5kZXhBeGlzID09PSAneCcgPyAneScgOiAneCc7XG4gICAgfVxuICAgIHJldHVybiBheGlzO1xufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdFNjYWxlSURGcm9tQXhpcyhheGlzLCBpbmRleEF4aXMpIHtcbiAgICByZXR1cm4gYXhpcyA9PT0gaW5kZXhBeGlzID8gJ19pbmRleF8nIDogJ192YWx1ZV8nO1xufVxuZnVuY3Rpb24gaWRNYXRjaGVzQXhpcyhpZCkge1xuICAgIGlmIChpZCA9PT0gJ3gnIHx8IGlkID09PSAneScgfHwgaWQgPT09ICdyJykge1xuICAgICAgICByZXR1cm4gaWQ7XG4gICAgfVxufVxuZnVuY3Rpb24gYXhpc0Zyb21Qb3NpdGlvbihwb3NpdGlvbikge1xuICAgIGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcgfHwgcG9zaXRpb24gPT09ICdib3R0b20nKSB7XG4gICAgICAgIHJldHVybiAneCc7XG4gICAgfVxuICAgIGlmIChwb3NpdGlvbiA9PT0gJ2xlZnQnIHx8IHBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgIHJldHVybiAneSc7XG4gICAgfVxufVxuZnVuY3Rpb24gZGV0ZXJtaW5lQXhpcyhpZCwgLi4uc2NhbGVPcHRpb25zKSB7XG4gICAgaWYgKGlkTWF0Y2hlc0F4aXMoaWQpKSB7XG4gICAgICAgIHJldHVybiBpZDtcbiAgICB9XG4gICAgZm9yIChjb25zdCBvcHRzIG9mIHNjYWxlT3B0aW9ucyl7XG4gICAgICAgIGNvbnN0IGF4aXMgPSBvcHRzLmF4aXMgfHwgYXhpc0Zyb21Qb3NpdGlvbihvcHRzLnBvc2l0aW9uKSB8fCBpZC5sZW5ndGggPiAxICYmIGlkTWF0Y2hlc0F4aXMoaWRbMF0udG9Mb3dlckNhc2UoKSk7XG4gICAgICAgIGlmIChheGlzKSB7XG4gICAgICAgICAgICByZXR1cm4gYXhpcztcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBkZXRlcm1pbmUgdHlwZSBvZiAnJHtpZH0nIGF4aXMuIFBsZWFzZSBwcm92aWRlICdheGlzJyBvciAncG9zaXRpb24nIG9wdGlvbi5gKTtcbn1cbmZ1bmN0aW9uIGdldEF4aXNGcm9tRGF0YXNldChpZCwgYXhpcywgZGF0YXNldCkge1xuICAgIGlmIChkYXRhc2V0W2F4aXMgKyAnQXhpc0lEJ10gPT09IGlkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBheGlzXG4gICAgICAgIH07XG4gICAgfVxufVxuZnVuY3Rpb24gcmV0cmlldmVBeGlzRnJvbURhdGFzZXRzKGlkLCBjb25maWcpIHtcbiAgICBpZiAoY29uZmlnLmRhdGEgJiYgY29uZmlnLmRhdGEuZGF0YXNldHMpIHtcbiAgICAgICAgY29uc3QgYm91bmREcyA9IGNvbmZpZy5kYXRhLmRhdGFzZXRzLmZpbHRlcigoZCk9PmQueEF4aXNJRCA9PT0gaWQgfHwgZC55QXhpc0lEID09PSBpZCk7XG4gICAgICAgIGlmIChib3VuZERzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldEF4aXNGcm9tRGF0YXNldChpZCwgJ3gnLCBib3VuZERzWzBdKSB8fCBnZXRBeGlzRnJvbURhdGFzZXQoaWQsICd5JywgYm91bmREc1swXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHt9O1xufVxuZnVuY3Rpb24gbWVyZ2VTY2FsZUNvbmZpZyhjb25maWcsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBjaGFydERlZmF1bHRzID0gb3ZlcnJpZGVzW2NvbmZpZy50eXBlXSB8fCB7XG4gICAgICAgIHNjYWxlczoge31cbiAgICB9O1xuICAgIGNvbnN0IGNvbmZpZ1NjYWxlcyA9IG9wdGlvbnMuc2NhbGVzIHx8IHt9O1xuICAgIGNvbnN0IGNoYXJ0SW5kZXhBeGlzID0gZ2V0SW5kZXhBeGlzKGNvbmZpZy50eXBlLCBvcHRpb25zKTtcbiAgICBjb25zdCBzY2FsZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIE9iamVjdC5rZXlzKGNvbmZpZ1NjYWxlcykuZm9yRWFjaCgoaWQpPT57XG4gICAgICAgIGNvbnN0IHNjYWxlQ29uZiA9IGNvbmZpZ1NjYWxlc1tpZF07XG4gICAgICAgIGlmICghaXNPYmplY3Qoc2NhbGVDb25mKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoYEludmFsaWQgc2NhbGUgY29uZmlndXJhdGlvbiBmb3Igc2NhbGU6ICR7aWR9YCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNjYWxlQ29uZi5fcHJveHkpIHtcbiAgICAgICAgICAgIHJldHVybiBjb25zb2xlLndhcm4oYElnbm9yaW5nIHJlc29sdmVyIHBhc3NlZCBhcyBvcHRpb25zIGZvciBzY2FsZTogJHtpZH1gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBheGlzID0gZGV0ZXJtaW5lQXhpcyhpZCwgc2NhbGVDb25mLCByZXRyaWV2ZUF4aXNGcm9tRGF0YXNldHMoaWQsIGNvbmZpZyksIGRlZmF1bHRzLnNjYWxlc1tzY2FsZUNvbmYudHlwZV0pO1xuICAgICAgICBjb25zdCBkZWZhdWx0SWQgPSBnZXREZWZhdWx0U2NhbGVJREZyb21BeGlzKGF4aXMsIGNoYXJ0SW5kZXhBeGlzKTtcbiAgICAgICAgY29uc3QgZGVmYXVsdFNjYWxlT3B0aW9ucyA9IGNoYXJ0RGVmYXVsdHMuc2NhbGVzIHx8IHt9O1xuICAgICAgICBzY2FsZXNbaWRdID0gbWVyZ2VJZihPYmplY3QuY3JlYXRlKG51bGwpLCBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYXhpc1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNjYWxlQ29uZixcbiAgICAgICAgICAgIGRlZmF1bHRTY2FsZU9wdGlvbnNbYXhpc10sXG4gICAgICAgICAgICBkZWZhdWx0U2NhbGVPcHRpb25zW2RlZmF1bHRJZF1cbiAgICAgICAgXSk7XG4gICAgfSk7XG4gICAgY29uZmlnLmRhdGEuZGF0YXNldHMuZm9yRWFjaCgoZGF0YXNldCk9PntcbiAgICAgICAgY29uc3QgdHlwZSA9IGRhdGFzZXQudHlwZSB8fCBjb25maWcudHlwZTtcbiAgICAgICAgY29uc3QgaW5kZXhBeGlzID0gZGF0YXNldC5pbmRleEF4aXMgfHwgZ2V0SW5kZXhBeGlzKHR5cGUsIG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBkYXRhc2V0RGVmYXVsdHMgPSBvdmVycmlkZXNbdHlwZV0gfHwge307XG4gICAgICAgIGNvbnN0IGRlZmF1bHRTY2FsZU9wdGlvbnMgPSBkYXRhc2V0RGVmYXVsdHMuc2NhbGVzIHx8IHt9O1xuICAgICAgICBPYmplY3Qua2V5cyhkZWZhdWx0U2NhbGVPcHRpb25zKS5mb3JFYWNoKChkZWZhdWx0SUQpPT57XG4gICAgICAgICAgICBjb25zdCBheGlzID0gZ2V0QXhpc0Zyb21EZWZhdWx0U2NhbGVJRChkZWZhdWx0SUQsIGluZGV4QXhpcyk7XG4gICAgICAgICAgICBjb25zdCBpZCA9IGRhdGFzZXRbYXhpcyArICdBeGlzSUQnXSB8fCBheGlzO1xuICAgICAgICAgICAgc2NhbGVzW2lkXSA9IHNjYWxlc1tpZF0gfHwgT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICAgIG1lcmdlSWYoc2NhbGVzW2lkXSwgW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYXhpc1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY29uZmlnU2NhbGVzW2lkXSxcbiAgICAgICAgICAgICAgICBkZWZhdWx0U2NhbGVPcHRpb25zW2RlZmF1bHRJRF1cbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBPYmplY3Qua2V5cyhzY2FsZXMpLmZvckVhY2goKGtleSk9PntcbiAgICAgICAgY29uc3Qgc2NhbGUgPSBzY2FsZXNba2V5XTtcbiAgICAgICAgbWVyZ2VJZihzY2FsZSwgW1xuICAgICAgICAgICAgZGVmYXVsdHMuc2NhbGVzW3NjYWxlLnR5cGVdLFxuICAgICAgICAgICAgZGVmYXVsdHMuc2NhbGVcbiAgICAgICAgXSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNjYWxlcztcbn1cbmZ1bmN0aW9uIGluaXRPcHRpb25zKGNvbmZpZykge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBjb25maWcub3B0aW9ucyB8fCAoY29uZmlnLm9wdGlvbnMgPSB7fSk7XG4gICAgb3B0aW9ucy5wbHVnaW5zID0gdmFsdWVPckRlZmF1bHQob3B0aW9ucy5wbHVnaW5zLCB7fSk7XG4gICAgb3B0aW9ucy5zY2FsZXMgPSBtZXJnZVNjYWxlQ29uZmlnKGNvbmZpZywgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiBpbml0RGF0YShkYXRhKSB7XG4gICAgZGF0YSA9IGRhdGEgfHwge307XG4gICAgZGF0YS5kYXRhc2V0cyA9IGRhdGEuZGF0YXNldHMgfHwgW107XG4gICAgZGF0YS5sYWJlbHMgPSBkYXRhLmxhYmVscyB8fCBbXTtcbiAgICByZXR1cm4gZGF0YTtcbn1cbmZ1bmN0aW9uIGluaXRDb25maWcoY29uZmlnKSB7XG4gICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICAgIGNvbmZpZy5kYXRhID0gaW5pdERhdGEoY29uZmlnLmRhdGEpO1xuICAgIGluaXRPcHRpb25zKGNvbmZpZyk7XG4gICAgcmV0dXJuIGNvbmZpZztcbn1cbmNvbnN0IGtleUNhY2hlID0gbmV3IE1hcCgpO1xuY29uc3Qga2V5c0NhY2hlZCA9IG5ldyBTZXQoKTtcbmZ1bmN0aW9uIGNhY2hlZEtleXMoY2FjaGVLZXksIGdlbmVyYXRlKSB7XG4gICAgbGV0IGtleXMgPSBrZXlDYWNoZS5nZXQoY2FjaGVLZXkpO1xuICAgIGlmICgha2V5cykge1xuICAgICAgICBrZXlzID0gZ2VuZXJhdGUoKTtcbiAgICAgICAga2V5Q2FjaGUuc2V0KGNhY2hlS2V5LCBrZXlzKTtcbiAgICAgICAga2V5c0NhY2hlZC5hZGQoa2V5cyk7XG4gICAgfVxuICAgIHJldHVybiBrZXlzO1xufVxuY29uc3QgYWRkSWZGb3VuZCA9IChzZXQsIG9iaiwga2V5KT0+e1xuICAgIGNvbnN0IG9wdHMgPSByZXNvbHZlT2JqZWN0S2V5KG9iaiwga2V5KTtcbiAgICBpZiAob3B0cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHNldC5hZGQob3B0cyk7XG4gICAgfVxufTtcbmNsYXNzIENvbmZpZyB7XG4gICAgY29uc3RydWN0b3IoY29uZmlnKXtcbiAgICAgICAgdGhpcy5fY29uZmlnID0gaW5pdENvbmZpZyhjb25maWcpO1xuICAgICAgICB0aGlzLl9zY29wZUNhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLl9yZXNvbHZlckNhY2hlID0gbmV3IE1hcCgpO1xuICAgIH1cbiAgICBnZXQgcGxhdGZvcm0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb25maWcucGxhdGZvcm07XG4gICAgfVxuICAgIGdldCB0eXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29uZmlnLnR5cGU7XG4gICAgfVxuICAgIHNldCB0eXBlKHR5cGUpIHtcbiAgICAgICAgdGhpcy5fY29uZmlnLnR5cGUgPSB0eXBlO1xuICAgIH1cbiAgICBnZXQgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5kYXRhO1xuICAgIH1cbiAgICBzZXQgZGF0YShkYXRhKSB7XG4gICAgICAgIHRoaXMuX2NvbmZpZy5kYXRhID0gaW5pdERhdGEoZGF0YSk7XG4gICAgfVxuICAgIGdldCBvcHRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29uZmlnLm9wdGlvbnM7XG4gICAgfVxuICAgIHNldCBvcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5fY29uZmlnLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICBnZXQgcGx1Z2lucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5wbHVnaW5zO1xuICAgIH1cbiAgICB1cGRhdGUoKSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuX2NvbmZpZztcbiAgICAgICAgdGhpcy5jbGVhckNhY2hlKCk7XG4gICAgICAgIGluaXRPcHRpb25zKGNvbmZpZyk7XG4gICAgfVxuICAgIGNsZWFyQ2FjaGUoKSB7XG4gICAgICAgIHRoaXMuX3Njb3BlQ2FjaGUuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5fcmVzb2x2ZXJDYWNoZS5jbGVhcigpO1xuICAgIH1cbiBkYXRhc2V0U2NvcGVLZXlzKGRhdGFzZXRUeXBlKSB7XG4gICAgICAgIHJldHVybiBjYWNoZWRLZXlzKGRhdGFzZXRUeXBlLCAoKT0+W1xuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgYGRhdGFzZXRzLiR7ZGF0YXNldFR5cGV9YCxcbiAgICAgICAgICAgICAgICAgICAgJydcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdKTtcbiAgICB9XG4gZGF0YXNldEFuaW1hdGlvblNjb3BlS2V5cyhkYXRhc2V0VHlwZSwgdHJhbnNpdGlvbikge1xuICAgICAgICByZXR1cm4gY2FjaGVkS2V5cyhgJHtkYXRhc2V0VHlwZX0udHJhbnNpdGlvbi4ke3RyYW5zaXRpb259YCwgKCk9PltcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgIGBkYXRhc2V0cy4ke2RhdGFzZXRUeXBlfS50cmFuc2l0aW9ucy4ke3RyYW5zaXRpb259YCxcbiAgICAgICAgICAgICAgICAgICAgYHRyYW5zaXRpb25zLiR7dHJhbnNpdGlvbn1gXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgIGBkYXRhc2V0cy4ke2RhdGFzZXRUeXBlfWAsXG4gICAgICAgICAgICAgICAgICAgICcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgXSk7XG4gICAgfVxuIGRhdGFzZXRFbGVtZW50U2NvcGVLZXlzKGRhdGFzZXRUeXBlLCBlbGVtZW50VHlwZSkge1xuICAgICAgICByZXR1cm4gY2FjaGVkS2V5cyhgJHtkYXRhc2V0VHlwZX0tJHtlbGVtZW50VHlwZX1gLCAoKT0+W1xuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgYGRhdGFzZXRzLiR7ZGF0YXNldFR5cGV9LmVsZW1lbnRzLiR7ZWxlbWVudFR5cGV9YCxcbiAgICAgICAgICAgICAgICAgICAgYGRhdGFzZXRzLiR7ZGF0YXNldFR5cGV9YCxcbiAgICAgICAgICAgICAgICAgICAgYGVsZW1lbnRzLiR7ZWxlbWVudFR5cGV9YCxcbiAgICAgICAgICAgICAgICAgICAgJydcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdKTtcbiAgICB9XG4gcGx1Z2luU2NvcGVLZXlzKHBsdWdpbikge1xuICAgICAgICBjb25zdCBpZCA9IHBsdWdpbi5pZDtcbiAgICAgICAgY29uc3QgdHlwZSA9IHRoaXMudHlwZTtcbiAgICAgICAgcmV0dXJuIGNhY2hlZEtleXMoYCR7dHlwZX0tcGx1Z2luLSR7aWR9YCwgKCk9PltcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgIGBwbHVnaW5zLiR7aWR9YCxcbiAgICAgICAgICAgICAgICAgICAgLi4ucGx1Z2luLmFkZGl0aW9uYWxPcHRpb25TY29wZXMgfHwgW11cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdKTtcbiAgICB9XG4gX2NhY2hlZFNjb3BlcyhtYWluU2NvcGUsIHJlc2V0Q2FjaGUpIHtcbiAgICAgICAgY29uc3QgX3Njb3BlQ2FjaGUgPSB0aGlzLl9zY29wZUNhY2hlO1xuICAgICAgICBsZXQgY2FjaGUgPSBfc2NvcGVDYWNoZS5nZXQobWFpblNjb3BlKTtcbiAgICAgICAgaWYgKCFjYWNoZSB8fCByZXNldENhY2hlKSB7XG4gICAgICAgICAgICBjYWNoZSA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIF9zY29wZUNhY2hlLnNldChtYWluU2NvcGUsIGNhY2hlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2FjaGU7XG4gICAgfVxuIGdldE9wdGlvblNjb3BlcyhtYWluU2NvcGUsIGtleUxpc3RzLCByZXNldENhY2hlKSB7XG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucyAsIHR5cGUgIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBjYWNoZSA9IHRoaXMuX2NhY2hlZFNjb3BlcyhtYWluU2NvcGUsIHJlc2V0Q2FjaGUpO1xuICAgICAgICBjb25zdCBjYWNoZWQgPSBjYWNoZS5nZXQoa2V5TGlzdHMpO1xuICAgICAgICBpZiAoY2FjaGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNjb3BlcyA9IG5ldyBTZXQoKTtcbiAgICAgICAga2V5TGlzdHMuZm9yRWFjaCgoa2V5cyk9PntcbiAgICAgICAgICAgIGlmIChtYWluU2NvcGUpIHtcbiAgICAgICAgICAgICAgICBzY29wZXMuYWRkKG1haW5TY29wZSk7XG4gICAgICAgICAgICAgICAga2V5cy5mb3JFYWNoKChrZXkpPT5hZGRJZkZvdW5kKHNjb3BlcywgbWFpblNjb3BlLCBrZXkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGtleXMuZm9yRWFjaCgoa2V5KT0+YWRkSWZGb3VuZChzY29wZXMsIG9wdGlvbnMsIGtleSkpO1xuICAgICAgICAgICAga2V5cy5mb3JFYWNoKChrZXkpPT5hZGRJZkZvdW5kKHNjb3Blcywgb3ZlcnJpZGVzW3R5cGVdIHx8IHt9LCBrZXkpKTtcbiAgICAgICAgICAgIGtleXMuZm9yRWFjaCgoa2V5KT0+YWRkSWZGb3VuZChzY29wZXMsIGRlZmF1bHRzLCBrZXkpKTtcbiAgICAgICAgICAgIGtleXMuZm9yRWFjaCgoa2V5KT0+YWRkSWZGb3VuZChzY29wZXMsIGRlc2NyaXB0b3JzLCBrZXkpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGFycmF5ID0gQXJyYXkuZnJvbShzY29wZXMpO1xuICAgICAgICBpZiAoYXJyYXkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBhcnJheS5wdXNoKE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChrZXlzQ2FjaGVkLmhhcyhrZXlMaXN0cykpIHtcbiAgICAgICAgICAgIGNhY2hlLnNldChrZXlMaXN0cywgYXJyYXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG4gY2hhcnRPcHRpb25TY29wZXMoKSB7XG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucyAsIHR5cGUgIH0gPSB0aGlzO1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgIG92ZXJyaWRlc1t0eXBlXSB8fCB7fSxcbiAgICAgICAgICAgIGRlZmF1bHRzLmRhdGFzZXRzW3R5cGVdIHx8IHt9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHR5cGVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZWZhdWx0cyxcbiAgICAgICAgICAgIGRlc2NyaXB0b3JzXG4gICAgICAgIF07XG4gICAgfVxuIHJlc29sdmVOYW1lZE9wdGlvbnMoc2NvcGVzLCBuYW1lcywgY29udGV4dCwgcHJlZml4ZXMgPSBbXG4gICAgICAgICcnXG4gICAgXSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICAgICAgICAkc2hhcmVkOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHsgcmVzb2x2ZXIgLCBzdWJQcmVmaXhlcyAgfSA9IGdldFJlc29sdmVyKHRoaXMuX3Jlc29sdmVyQ2FjaGUsIHNjb3BlcywgcHJlZml4ZXMpO1xuICAgICAgICBsZXQgb3B0aW9ucyA9IHJlc29sdmVyO1xuICAgICAgICBpZiAobmVlZENvbnRleHQocmVzb2x2ZXIsIG5hbWVzKSkge1xuICAgICAgICAgICAgcmVzdWx0LiRzaGFyZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnRleHQgPSBpc0Z1bmN0aW9uKGNvbnRleHQpID8gY29udGV4dCgpIDogY29udGV4dDtcbiAgICAgICAgICAgIGNvbnN0IHN1YlJlc29sdmVyID0gdGhpcy5jcmVhdGVSZXNvbHZlcihzY29wZXMsIGNvbnRleHQsIHN1YlByZWZpeGVzKTtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBfYXR0YWNoQ29udGV4dChyZXNvbHZlciwgY29udGV4dCwgc3ViUmVzb2x2ZXIpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgcHJvcCBvZiBuYW1lcyl7XG4gICAgICAgICAgICByZXN1bHRbcHJvcF0gPSBvcHRpb25zW3Byb3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuIGNyZWF0ZVJlc29sdmVyKHNjb3BlcywgY29udGV4dCwgcHJlZml4ZXMgPSBbXG4gICAgICAgICcnXG4gICAgXSwgZGVzY3JpcHRvckRlZmF1bHRzKSB7XG4gICAgICAgIGNvbnN0IHsgcmVzb2x2ZXIgIH0gPSBnZXRSZXNvbHZlcih0aGlzLl9yZXNvbHZlckNhY2hlLCBzY29wZXMsIHByZWZpeGVzKTtcbiAgICAgICAgcmV0dXJuIGlzT2JqZWN0KGNvbnRleHQpID8gX2F0dGFjaENvbnRleHQocmVzb2x2ZXIsIGNvbnRleHQsIHVuZGVmaW5lZCwgZGVzY3JpcHRvckRlZmF1bHRzKSA6IHJlc29sdmVyO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldFJlc29sdmVyKHJlc29sdmVyQ2FjaGUsIHNjb3BlcywgcHJlZml4ZXMpIHtcbiAgICBsZXQgY2FjaGUgPSByZXNvbHZlckNhY2hlLmdldChzY29wZXMpO1xuICAgIGlmICghY2FjaGUpIHtcbiAgICAgICAgY2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgICAgIHJlc29sdmVyQ2FjaGUuc2V0KHNjb3BlcywgY2FjaGUpO1xuICAgIH1cbiAgICBjb25zdCBjYWNoZUtleSA9IHByZWZpeGVzLmpvaW4oKTtcbiAgICBsZXQgY2FjaGVkID0gY2FjaGUuZ2V0KGNhY2hlS2V5KTtcbiAgICBpZiAoIWNhY2hlZCkge1xuICAgICAgICBjb25zdCByZXNvbHZlciA9IF9jcmVhdGVSZXNvbHZlcihzY29wZXMsIHByZWZpeGVzKTtcbiAgICAgICAgY2FjaGVkID0ge1xuICAgICAgICAgICAgcmVzb2x2ZXIsXG4gICAgICAgICAgICBzdWJQcmVmaXhlczogcHJlZml4ZXMuZmlsdGVyKChwKT0+IXAudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnaG92ZXInKSlcbiAgICAgICAgfTtcbiAgICAgICAgY2FjaGUuc2V0KGNhY2hlS2V5LCBjYWNoZWQpO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGVkO1xufVxuY29uc3QgaGFzRnVuY3Rpb24gPSAodmFsdWUpPT5pc09iamVjdCh2YWx1ZSkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmFsdWUpLnJlZHVjZSgoYWNjLCBrZXkpPT5hY2MgfHwgaXNGdW5jdGlvbih2YWx1ZVtrZXldKSwgZmFsc2UpO1xuZnVuY3Rpb24gbmVlZENvbnRleHQocHJveHksIG5hbWVzKSB7XG4gICAgY29uc3QgeyBpc1NjcmlwdGFibGUgLCBpc0luZGV4YWJsZSAgfSA9IF9kZXNjcmlwdG9ycyhwcm94eSk7XG4gICAgZm9yIChjb25zdCBwcm9wIG9mIG5hbWVzKXtcbiAgICAgICAgY29uc3Qgc2NyaXB0YWJsZSA9IGlzU2NyaXB0YWJsZShwcm9wKTtcbiAgICAgICAgY29uc3QgaW5kZXhhYmxlID0gaXNJbmRleGFibGUocHJvcCk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gKGluZGV4YWJsZSB8fCBzY3JpcHRhYmxlKSAmJiBwcm94eVtwcm9wXTtcbiAgICAgICAgaWYgKHNjcmlwdGFibGUgJiYgKGlzRnVuY3Rpb24odmFsdWUpIHx8IGhhc0Z1bmN0aW9uKHZhbHVlKSkgfHwgaW5kZXhhYmxlICYmIGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbnZhciB2ZXJzaW9uID0gXCI0LjMuM1wiO1xuXG5jb25zdCBLTk9XTl9QT1NJVElPTlMgPSBbXG4gICAgJ3RvcCcsXG4gICAgJ2JvdHRvbScsXG4gICAgJ2xlZnQnLFxuICAgICdyaWdodCcsXG4gICAgJ2NoYXJ0QXJlYSdcbl07XG5mdW5jdGlvbiBwb3NpdGlvbklzSG9yaXpvbnRhbChwb3NpdGlvbiwgYXhpcykge1xuICAgIHJldHVybiBwb3NpdGlvbiA9PT0gJ3RvcCcgfHwgcG9zaXRpb24gPT09ICdib3R0b20nIHx8IEtOT1dOX1BPU0lUSU9OUy5pbmRleE9mKHBvc2l0aW9uKSA9PT0gLTEgJiYgYXhpcyA9PT0gJ3gnO1xufVxuZnVuY3Rpb24gY29tcGFyZTJMZXZlbChsMSwgbDIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgICAgICByZXR1cm4gYVtsMV0gPT09IGJbbDFdID8gYVtsMl0gLSBiW2wyXSA6IGFbbDFdIC0gYltsMV07XG4gICAgfTtcbn1cbmZ1bmN0aW9uIG9uQW5pbWF0aW9uc0NvbXBsZXRlKGNvbnRleHQpIHtcbiAgICBjb25zdCBjaGFydCA9IGNvbnRleHQuY2hhcnQ7XG4gICAgY29uc3QgYW5pbWF0aW9uT3B0aW9ucyA9IGNoYXJ0Lm9wdGlvbnMuYW5pbWF0aW9uO1xuICAgIGNoYXJ0Lm5vdGlmeVBsdWdpbnMoJ2FmdGVyUmVuZGVyJyk7XG4gICAgY2FsbGJhY2soYW5pbWF0aW9uT3B0aW9ucyAmJiBhbmltYXRpb25PcHRpb25zLm9uQ29tcGxldGUsIFtcbiAgICAgICAgY29udGV4dFxuICAgIF0sIGNoYXJ0KTtcbn1cbmZ1bmN0aW9uIG9uQW5pbWF0aW9uUHJvZ3Jlc3MoY29udGV4dCkge1xuICAgIGNvbnN0IGNoYXJ0ID0gY29udGV4dC5jaGFydDtcbiAgICBjb25zdCBhbmltYXRpb25PcHRpb25zID0gY2hhcnQub3B0aW9ucy5hbmltYXRpb247XG4gICAgY2FsbGJhY2soYW5pbWF0aW9uT3B0aW9ucyAmJiBhbmltYXRpb25PcHRpb25zLm9uUHJvZ3Jlc3MsIFtcbiAgICAgICAgY29udGV4dFxuICAgIF0sIGNoYXJ0KTtcbn1cbiBmdW5jdGlvbiBnZXRDYW52YXMoaXRlbSkge1xuICAgIGlmIChfaXNEb21TdXBwb3J0ZWQoKSAmJiB0eXBlb2YgaXRlbSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaXRlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGl0ZW0pO1xuICAgIH0gZWxzZSBpZiAoaXRlbSAmJiBpdGVtLmxlbmd0aCkge1xuICAgICAgICBpdGVtID0gaXRlbVswXTtcbiAgICB9XG4gICAgaWYgKGl0ZW0gJiYgaXRlbS5jYW52YXMpIHtcbiAgICAgICAgaXRlbSA9IGl0ZW0uY2FudmFzO1xuICAgIH1cbiAgICByZXR1cm4gaXRlbTtcbn1cbmNvbnN0IGluc3RhbmNlcyA9IHt9O1xuY29uc3QgZ2V0Q2hhcnQgPSAoa2V5KT0+e1xuICAgIGNvbnN0IGNhbnZhcyA9IGdldENhbnZhcyhrZXkpO1xuICAgIHJldHVybiBPYmplY3QudmFsdWVzKGluc3RhbmNlcykuZmlsdGVyKChjKT0+Yy5jYW52YXMgPT09IGNhbnZhcykucG9wKCk7XG59O1xuZnVuY3Rpb24gbW92ZU51bWVyaWNLZXlzKG9iaiwgc3RhcnQsIG1vdmUpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKXtcbiAgICAgICAgY29uc3QgaW50S2V5ID0gK2tleTtcbiAgICAgICAgaWYgKGludEtleSA+PSBzdGFydCkge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBvYmpba2V5XTtcbiAgICAgICAgICAgIGRlbGV0ZSBvYmpba2V5XTtcbiAgICAgICAgICAgIGlmIChtb3ZlID4gMCB8fCBpbnRLZXkgPiBzdGFydCkge1xuICAgICAgICAgICAgICAgIG9ialtpbnRLZXkgKyBtb3ZlXSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIGZ1bmN0aW9uIGRldGVybWluZUxhc3RFdmVudChlLCBsYXN0RXZlbnQsIGluQ2hhcnRBcmVhLCBpc0NsaWNrKSB7XG4gICAgaWYgKCFpbkNoYXJ0QXJlYSB8fCBlLnR5cGUgPT09ICdtb3VzZW91dCcpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChpc0NsaWNrKSB7XG4gICAgICAgIHJldHVybiBsYXN0RXZlbnQ7XG4gICAgfVxuICAgIHJldHVybiBlO1xufVxuZnVuY3Rpb24gZ2V0RGF0YXNldEFyZWEobWV0YSkge1xuICAgIGNvbnN0IHsgeFNjYWxlICwgeVNjYWxlICB9ID0gbWV0YTtcbiAgICBpZiAoeFNjYWxlICYmIHlTY2FsZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGVmdDogeFNjYWxlLmxlZnQsXG4gICAgICAgICAgICByaWdodDogeFNjYWxlLnJpZ2h0LFxuICAgICAgICAgICAgdG9wOiB5U2NhbGUudG9wLFxuICAgICAgICAgICAgYm90dG9tOiB5U2NhbGUuYm90dG9tXG4gICAgICAgIH07XG4gICAgfVxufVxuY2xhc3MgQ2hhcnQge1xuICAgIHN0YXRpYyBkZWZhdWx0cyA9IGRlZmF1bHRzO1xuICAgIHN0YXRpYyBpbnN0YW5jZXMgPSBpbnN0YW5jZXM7XG4gICAgc3RhdGljIG92ZXJyaWRlcyA9IG92ZXJyaWRlcztcbiAgICBzdGF0aWMgcmVnaXN0cnkgPSByZWdpc3RyeTtcbiAgICBzdGF0aWMgdmVyc2lvbiA9IHZlcnNpb247XG4gICAgc3RhdGljIGdldENoYXJ0ID0gZ2V0Q2hhcnQ7XG4gICAgc3RhdGljIHJlZ2lzdGVyKC4uLml0ZW1zKSB7XG4gICAgICAgIHJlZ2lzdHJ5LmFkZCguLi5pdGVtcyk7XG4gICAgICAgIGludmFsaWRhdGVQbHVnaW5zKCk7XG4gICAgfVxuICAgIHN0YXRpYyB1bnJlZ2lzdGVyKC4uLml0ZW1zKSB7XG4gICAgICAgIHJlZ2lzdHJ5LnJlbW92ZSguLi5pdGVtcyk7XG4gICAgICAgIGludmFsaWRhdGVQbHVnaW5zKCk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGl0ZW0sIHVzZXJDb25maWcpe1xuICAgICAgICBjb25zdCBjb25maWcgPSB0aGlzLmNvbmZpZyA9IG5ldyBDb25maWcodXNlckNvbmZpZyk7XG4gICAgICAgIGNvbnN0IGluaXRpYWxDYW52YXMgPSBnZXRDYW52YXMoaXRlbSk7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nQ2hhcnQgPSBnZXRDaGFydChpbml0aWFsQ2FudmFzKTtcbiAgICAgICAgaWYgKGV4aXN0aW5nQ2hhcnQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2FudmFzIGlzIGFscmVhZHkgaW4gdXNlLiBDaGFydCB3aXRoIElEIFxcJycgKyBleGlzdGluZ0NoYXJ0LmlkICsgJ1xcJycgKyAnIG11c3QgYmUgZGVzdHJveWVkIGJlZm9yZSB0aGUgY2FudmFzIHdpdGggSUQgXFwnJyArIGV4aXN0aW5nQ2hhcnQuY2FudmFzLmlkICsgJ1xcJyBjYW4gYmUgcmV1c2VkLicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBjb25maWcuY3JlYXRlUmVzb2x2ZXIoY29uZmlnLmNoYXJ0T3B0aW9uU2NvcGVzKCksIHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICAgICAgdGhpcy5wbGF0Zm9ybSA9IG5ldyAoY29uZmlnLnBsYXRmb3JtIHx8IF9kZXRlY3RQbGF0Zm9ybShpbml0aWFsQ2FudmFzKSkoKTtcbiAgICAgICAgdGhpcy5wbGF0Zm9ybS51cGRhdGVDb25maWcoY29uZmlnKTtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMucGxhdGZvcm0uYWNxdWlyZUNvbnRleHQoaW5pdGlhbENhbnZhcywgb3B0aW9ucy5hc3BlY3RSYXRpbyk7XG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IGNvbnRleHQgJiYgY29udGV4dC5jYW52YXM7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IGNhbnZhcyAmJiBjYW52YXMuaGVpZ2h0O1xuICAgICAgICBjb25zdCB3aWR0aCA9IGNhbnZhcyAmJiBjYW52YXMud2lkdGg7XG4gICAgICAgIHRoaXMuaWQgPSB1aWQoKTtcbiAgICAgICAgdGhpcy5jdHggPSBjb250ZXh0O1xuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuX2FzcGVjdFJhdGlvID0gdGhpcy5hc3BlY3RSYXRpbztcbiAgICAgICAgdGhpcy5fbGF5ZXJzID0gW107XG4gICAgICAgIHRoaXMuX21ldGFzZXRzID0gW107XG4gICAgICAgIHRoaXMuX3N0YWNrcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5ib3hlcyA9IFtdO1xuICAgICAgICB0aGlzLmN1cnJlbnREZXZpY2VQaXhlbFJhdGlvID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmNoYXJ0QXJlYSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fYWN0aXZlID0gW107XG4gICAgICAgIHRoaXMuX2xhc3RFdmVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzID0ge307XG4gICAgICAgICB0aGlzLl9yZXNwb25zaXZlTGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9zb3J0ZWRNZXRhc2V0cyA9IFtdO1xuICAgICAgICB0aGlzLnNjYWxlcyA9IHt9O1xuICAgICAgICB0aGlzLl9wbHVnaW5zID0gbmV3IFBsdWdpblNlcnZpY2UoKTtcbiAgICAgICAgdGhpcy4kcHJveGllcyA9IHt9O1xuICAgICAgICB0aGlzLl9oaWRkZW5JbmRpY2VzID0ge307XG4gICAgICAgIHRoaXMuYXR0YWNoZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fYW5pbWF0aW9uc0Rpc2FibGVkID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLiRjb250ZXh0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9kb1Jlc2l6ZSA9IGRlYm91bmNlKChtb2RlKT0+dGhpcy51cGRhdGUobW9kZSksIG9wdGlvbnMucmVzaXplRGVsYXkgfHwgMCk7XG4gICAgICAgIHRoaXMuX2RhdGFDaGFuZ2VzID0gW107XG4gICAgICAgIGluc3RhbmNlc1t0aGlzLmlkXSA9IHRoaXM7XG4gICAgICAgIGlmICghY29udGV4dCB8fCAhY2FudmFzKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIGNyZWF0ZSBjaGFydDogY2FuJ3QgYWNxdWlyZSBjb250ZXh0IGZyb20gdGhlIGdpdmVuIGl0ZW1cIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYW5pbWF0b3IubGlzdGVuKHRoaXMsICdjb21wbGV0ZScsIG9uQW5pbWF0aW9uc0NvbXBsZXRlKTtcbiAgICAgICAgYW5pbWF0b3IubGlzdGVuKHRoaXMsICdwcm9ncmVzcycsIG9uQW5pbWF0aW9uUHJvZ3Jlc3MpO1xuICAgICAgICB0aGlzLl9pbml0aWFsaXplKCk7XG4gICAgICAgIGlmICh0aGlzLmF0dGFjaGVkKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBhc3BlY3RSYXRpbygpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zOiB7IGFzcGVjdFJhdGlvICwgbWFpbnRhaW5Bc3BlY3RSYXRpbyAgfSAsIHdpZHRoICwgaGVpZ2h0ICwgX2FzcGVjdFJhdGlvICB9ID0gdGhpcztcbiAgICAgICAgaWYgKCFpc051bGxPclVuZGVmKGFzcGVjdFJhdGlvKSkge1xuICAgICAgICAgICAgcmV0dXJuIGFzcGVjdFJhdGlvO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYWludGFpbkFzcGVjdFJhdGlvICYmIF9hc3BlY3RSYXRpbykge1xuICAgICAgICAgICAgcmV0dXJuIF9hc3BlY3RSYXRpbztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGVpZ2h0ID8gd2lkdGggLyBoZWlnaHQgOiBudWxsO1xuICAgIH1cbiAgICBnZXQgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLmRhdGE7XG4gICAgfVxuICAgIHNldCBkYXRhKGRhdGEpIHtcbiAgICAgICAgdGhpcy5jb25maWcuZGF0YSA9IGRhdGE7XG4gICAgfVxuICAgIGdldCBvcHRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3B0aW9ucztcbiAgICB9XG4gICAgc2V0IG9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICB0aGlzLmNvbmZpZy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgZ2V0IHJlZ2lzdHJ5KCkge1xuICAgICAgICByZXR1cm4gcmVnaXN0cnk7XG4gICAgfVxuIF9pbml0aWFsaXplKCkge1xuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZUluaXQnKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yZXNwb25zaXZlKSB7XG4gICAgICAgICAgICB0aGlzLnJlc2l6ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0aW5hU2NhbGUodGhpcywgdGhpcy5vcHRpb25zLmRldmljZVBpeGVsUmF0aW8pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYmluZEV2ZW50cygpO1xuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVySW5pdCcpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgY2xlYXIoKSB7XG4gICAgICAgIGNsZWFyQ2FudmFzKHRoaXMuY2FudmFzLCB0aGlzLmN0eCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBzdG9wKCkge1xuICAgICAgICBhbmltYXRvci5zdG9wKHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gcmVzaXplKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgaWYgKCFhbmltYXRvci5ydW5uaW5nKHRoaXMpKSB7XG4gICAgICAgICAgICB0aGlzLl9yZXNpemUod2lkdGgsIGhlaWdodCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9yZXNpemVCZWZvcmVEcmF3ID0ge1xuICAgICAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfcmVzaXplKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgY2FudmFzID0gdGhpcy5jYW52YXM7XG4gICAgICAgIGNvbnN0IGFzcGVjdFJhdGlvID0gb3B0aW9ucy5tYWludGFpbkFzcGVjdFJhdGlvICYmIHRoaXMuYXNwZWN0UmF0aW87XG4gICAgICAgIGNvbnN0IG5ld1NpemUgPSB0aGlzLnBsYXRmb3JtLmdldE1heGltdW1TaXplKGNhbnZhcywgd2lkdGgsIGhlaWdodCwgYXNwZWN0UmF0aW8pO1xuICAgICAgICBjb25zdCBuZXdSYXRpbyA9IG9wdGlvbnMuZGV2aWNlUGl4ZWxSYXRpbyB8fCB0aGlzLnBsYXRmb3JtLmdldERldmljZVBpeGVsUmF0aW8oKTtcbiAgICAgICAgY29uc3QgbW9kZSA9IHRoaXMud2lkdGggPyAncmVzaXplJyA6ICdhdHRhY2gnO1xuICAgICAgICB0aGlzLndpZHRoID0gbmV3U2l6ZS53aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBuZXdTaXplLmhlaWdodDtcbiAgICAgICAgdGhpcy5fYXNwZWN0UmF0aW8gPSB0aGlzLmFzcGVjdFJhdGlvO1xuICAgICAgICBpZiAoIXJldGluYVNjYWxlKHRoaXMsIG5ld1JhdGlvLCB0cnVlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygncmVzaXplJywge1xuICAgICAgICAgICAgc2l6ZTogbmV3U2l6ZVxuICAgICAgICB9KTtcbiAgICAgICAgY2FsbGJhY2sob3B0aW9ucy5vblJlc2l6ZSwgW1xuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIG5ld1NpemVcbiAgICAgICAgXSwgdGhpcyk7XG4gICAgICAgIGlmICh0aGlzLmF0dGFjaGVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fZG9SZXNpemUobW9kZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVuc3VyZVNjYWxlc0hhdmVJRHMoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHNjYWxlc09wdGlvbnMgPSBvcHRpb25zLnNjYWxlcyB8fCB7fTtcbiAgICAgICAgZWFjaChzY2FsZXNPcHRpb25zLCAoYXhpc09wdGlvbnMsIGF4aXNJRCk9PntcbiAgICAgICAgICAgIGF4aXNPcHRpb25zLmlkID0gYXhpc0lEO1xuICAgICAgICB9KTtcbiAgICB9XG4gYnVpbGRPclVwZGF0ZVNjYWxlcygpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3Qgc2NhbGVPcHRzID0gb3B0aW9ucy5zY2FsZXM7XG4gICAgICAgIGNvbnN0IHNjYWxlcyA9IHRoaXMuc2NhbGVzO1xuICAgICAgICBjb25zdCB1cGRhdGVkID0gT2JqZWN0LmtleXMoc2NhbGVzKS5yZWR1Y2UoKG9iaiwgaWQpPT57XG4gICAgICAgICAgICBvYmpbaWRdID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9LCB7fSk7XG4gICAgICAgIGxldCBpdGVtcyA9IFtdO1xuICAgICAgICBpZiAoc2NhbGVPcHRzKSB7XG4gICAgICAgICAgICBpdGVtcyA9IGl0ZW1zLmNvbmNhdChPYmplY3Qua2V5cyhzY2FsZU9wdHMpLm1hcCgoaWQpPT57XG4gICAgICAgICAgICAgICAgY29uc3Qgc2NhbGVPcHRpb25zID0gc2NhbGVPcHRzW2lkXTtcbiAgICAgICAgICAgICAgICBjb25zdCBheGlzID0gZGV0ZXJtaW5lQXhpcyhpZCwgc2NhbGVPcHRpb25zKTtcbiAgICAgICAgICAgICAgICBjb25zdCBpc1JhZGlhbCA9IGF4aXMgPT09ICdyJztcbiAgICAgICAgICAgICAgICBjb25zdCBpc0hvcml6b250YWwgPSBheGlzID09PSAneCc7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogc2NhbGVPcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBkcG9zaXRpb246IGlzUmFkaWFsID8gJ2NoYXJ0QXJlYScgOiBpc0hvcml6b250YWwgPyAnYm90dG9tJyA6ICdsZWZ0JyxcbiAgICAgICAgICAgICAgICAgICAgZHR5cGU6IGlzUmFkaWFsID8gJ3JhZGlhbExpbmVhcicgOiBpc0hvcml6b250YWwgPyAnY2F0ZWdvcnknIDogJ2xpbmVhcidcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICAgIGVhY2goaXRlbXMsIChpdGVtKT0+e1xuICAgICAgICAgICAgY29uc3Qgc2NhbGVPcHRpb25zID0gaXRlbS5vcHRpb25zO1xuICAgICAgICAgICAgY29uc3QgaWQgPSBzY2FsZU9wdGlvbnMuaWQ7XG4gICAgICAgICAgICBjb25zdCBheGlzID0gZGV0ZXJtaW5lQXhpcyhpZCwgc2NhbGVPcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IHNjYWxlVHlwZSA9IHZhbHVlT3JEZWZhdWx0KHNjYWxlT3B0aW9ucy50eXBlLCBpdGVtLmR0eXBlKTtcbiAgICAgICAgICAgIGlmIChzY2FsZU9wdGlvbnMucG9zaXRpb24gPT09IHVuZGVmaW5lZCB8fCBwb3NpdGlvbklzSG9yaXpvbnRhbChzY2FsZU9wdGlvbnMucG9zaXRpb24sIGF4aXMpICE9PSBwb3NpdGlvbklzSG9yaXpvbnRhbChpdGVtLmRwb3NpdGlvbikpIHtcbiAgICAgICAgICAgICAgICBzY2FsZU9wdGlvbnMucG9zaXRpb24gPSBpdGVtLmRwb3NpdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVwZGF0ZWRbaWRdID0gdHJ1ZTtcbiAgICAgICAgICAgIGxldCBzY2FsZSA9IG51bGw7XG4gICAgICAgICAgICBpZiAoaWQgaW4gc2NhbGVzICYmIHNjYWxlc1tpZF0udHlwZSA9PT0gc2NhbGVUeXBlKSB7XG4gICAgICAgICAgICAgICAgc2NhbGUgPSBzY2FsZXNbaWRdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzY2FsZUNsYXNzID0gcmVnaXN0cnkuZ2V0U2NhbGUoc2NhbGVUeXBlKTtcbiAgICAgICAgICAgICAgICBzY2FsZSA9IG5ldyBzY2FsZUNsYXNzKHtcbiAgICAgICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IHNjYWxlVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgY3R4OiB0aGlzLmN0eCxcbiAgICAgICAgICAgICAgICAgICAgY2hhcnQ6IHRoaXNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBzY2FsZXNbc2NhbGUuaWRdID0gc2NhbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzY2FsZS5pbml0KHNjYWxlT3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIH0pO1xuICAgICAgICBlYWNoKHVwZGF0ZWQsIChoYXNVcGRhdGVkLCBpZCk9PntcbiAgICAgICAgICAgIGlmICghaGFzVXBkYXRlZCkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBzY2FsZXNbaWRdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgZWFjaChzY2FsZXMsIChzY2FsZSk9PntcbiAgICAgICAgICAgIGxheW91dHMuY29uZmlndXJlKHRoaXMsIHNjYWxlLCBzY2FsZS5vcHRpb25zKTtcbiAgICAgICAgICAgIGxheW91dHMuYWRkQm94KHRoaXMsIHNjYWxlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuIF91cGRhdGVNZXRhc2V0cygpIHtcbiAgICAgICAgY29uc3QgbWV0YXNldHMgPSB0aGlzLl9tZXRhc2V0cztcbiAgICAgICAgY29uc3QgbnVtRGF0YSA9IHRoaXMuZGF0YS5kYXRhc2V0cy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IG51bU1ldGEgPSBtZXRhc2V0cy5sZW5ndGg7XG4gICAgICAgIG1ldGFzZXRzLnNvcnQoKGEsIGIpPT5hLmluZGV4IC0gYi5pbmRleCk7XG4gICAgICAgIGlmIChudW1NZXRhID4gbnVtRGF0YSkge1xuICAgICAgICAgICAgZm9yKGxldCBpID0gbnVtRGF0YTsgaSA8IG51bU1ldGE7ICsraSl7XG4gICAgICAgICAgICAgICAgdGhpcy5fZGVzdHJveURhdGFzZXRNZXRhKGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWV0YXNldHMuc3BsaWNlKG51bURhdGEsIG51bU1ldGEgLSBudW1EYXRhKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zb3J0ZWRNZXRhc2V0cyA9IG1ldGFzZXRzLnNsaWNlKDApLnNvcnQoY29tcGFyZTJMZXZlbCgnb3JkZXInLCAnaW5kZXgnKSk7XG4gICAgfVxuIF9yZW1vdmVVbnJlZmVyZW5jZWRNZXRhc2V0cygpIHtcbiAgICAgICAgY29uc3QgeyBfbWV0YXNldHM6IG1ldGFzZXRzICwgZGF0YTogeyBkYXRhc2V0cyAgfSAgfSA9IHRoaXM7XG4gICAgICAgIGlmIChtZXRhc2V0cy5sZW5ndGggPiBkYXRhc2V0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9zdGFja3M7XG4gICAgICAgIH1cbiAgICAgICAgbWV0YXNldHMuZm9yRWFjaCgobWV0YSwgaW5kZXgpPT57XG4gICAgICAgICAgICBpZiAoZGF0YXNldHMuZmlsdGVyKCh4KT0+eCA9PT0gbWV0YS5fZGF0YXNldCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZGVzdHJveURhdGFzZXRNZXRhKGluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGJ1aWxkT3JVcGRhdGVDb250cm9sbGVycygpIHtcbiAgICAgICAgY29uc3QgbmV3Q29udHJvbGxlcnMgPSBbXTtcbiAgICAgICAgY29uc3QgZGF0YXNldHMgPSB0aGlzLmRhdGEuZGF0YXNldHM7XG4gICAgICAgIGxldCBpLCBpbGVuO1xuICAgICAgICB0aGlzLl9yZW1vdmVVbnJlZmVyZW5jZWRNZXRhc2V0cygpO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBkYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspe1xuICAgICAgICAgICAgY29uc3QgZGF0YXNldCA9IGRhdGFzZXRzW2ldO1xuICAgICAgICAgICAgbGV0IG1ldGEgPSB0aGlzLmdldERhdGFzZXRNZXRhKGkpO1xuICAgICAgICAgICAgY29uc3QgdHlwZSA9IGRhdGFzZXQudHlwZSB8fCB0aGlzLmNvbmZpZy50eXBlO1xuICAgICAgICAgICAgaWYgKG1ldGEudHlwZSAmJiBtZXRhLnR5cGUgIT09IHR5cGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kZXN0cm95RGF0YXNldE1ldGEoaSk7XG4gICAgICAgICAgICAgICAgbWV0YSA9IHRoaXMuZ2V0RGF0YXNldE1ldGEoaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtZXRhLnR5cGUgPSB0eXBlO1xuICAgICAgICAgICAgbWV0YS5pbmRleEF4aXMgPSBkYXRhc2V0LmluZGV4QXhpcyB8fCBnZXRJbmRleEF4aXModHlwZSwgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgICAgIG1ldGEub3JkZXIgPSBkYXRhc2V0Lm9yZGVyIHx8IDA7XG4gICAgICAgICAgICBtZXRhLmluZGV4ID0gaTtcbiAgICAgICAgICAgIG1ldGEubGFiZWwgPSAnJyArIGRhdGFzZXQubGFiZWw7XG4gICAgICAgICAgICBtZXRhLnZpc2libGUgPSB0aGlzLmlzRGF0YXNldFZpc2libGUoaSk7XG4gICAgICAgICAgICBpZiAobWV0YS5jb250cm9sbGVyKSB7XG4gICAgICAgICAgICAgICAgbWV0YS5jb250cm9sbGVyLnVwZGF0ZUluZGV4KGkpO1xuICAgICAgICAgICAgICAgIG1ldGEuY29udHJvbGxlci5saW5rU2NhbGVzKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IENvbnRyb2xsZXJDbGFzcyA9IHJlZ2lzdHJ5LmdldENvbnRyb2xsZXIodHlwZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBkYXRhc2V0RWxlbWVudFR5cGUgLCBkYXRhRWxlbWVudFR5cGUgIH0gPSBkZWZhdWx0cy5kYXRhc2V0c1t0eXBlXTtcbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKENvbnRyb2xsZXJDbGFzcywge1xuICAgICAgICAgICAgICAgICAgICBkYXRhRWxlbWVudFR5cGU6IHJlZ2lzdHJ5LmdldEVsZW1lbnQoZGF0YUVsZW1lbnRUeXBlKSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YXNldEVsZW1lbnRUeXBlOiBkYXRhc2V0RWxlbWVudFR5cGUgJiYgcmVnaXN0cnkuZ2V0RWxlbWVudChkYXRhc2V0RWxlbWVudFR5cGUpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgbWV0YS5jb250cm9sbGVyID0gbmV3IENvbnRyb2xsZXJDbGFzcyh0aGlzLCBpKTtcbiAgICAgICAgICAgICAgICBuZXdDb250cm9sbGVycy5wdXNoKG1ldGEuY29udHJvbGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdXBkYXRlTWV0YXNldHMoKTtcbiAgICAgICAgcmV0dXJuIG5ld0NvbnRyb2xsZXJzO1xuICAgIH1cbiBfcmVzZXRFbGVtZW50cygpIHtcbiAgICAgICAgZWFjaCh0aGlzLmRhdGEuZGF0YXNldHMsIChkYXRhc2V0LCBkYXRhc2V0SW5kZXgpPT57XG4gICAgICAgICAgICB0aGlzLmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCkuY29udHJvbGxlci5yZXNldCgpO1xuICAgICAgICB9LCB0aGlzKTtcbiAgICB9XG4gcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuX3Jlc2V0RWxlbWVudHMoKTtcbiAgICAgICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdyZXNldCcpO1xuICAgIH1cbiAgICB1cGRhdGUobW9kZSkge1xuICAgICAgICBjb25zdCBjb25maWcgPSB0aGlzLmNvbmZpZztcbiAgICAgICAgY29uZmlnLnVwZGF0ZSgpO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5fb3B0aW9ucyA9IGNvbmZpZy5jcmVhdGVSZXNvbHZlcihjb25maWcuY2hhcnRPcHRpb25TY29wZXMoKSwgdGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICBjb25zdCBhbmltc0Rpc2FibGVkID0gdGhpcy5fYW5pbWF0aW9uc0Rpc2FibGVkID0gIW9wdGlvbnMuYW5pbWF0aW9uO1xuICAgICAgICB0aGlzLl91cGRhdGVTY2FsZXMoKTtcbiAgICAgICAgdGhpcy5fY2hlY2tFdmVudEJpbmRpbmdzKCk7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUhpZGRlbkluZGljZXMoKTtcbiAgICAgICAgdGhpcy5fcGx1Z2lucy5pbnZhbGlkYXRlKCk7XG4gICAgICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZVVwZGF0ZScsIHtcbiAgICAgICAgICAgIG1vZGUsXG4gICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgIH0pID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5ld0NvbnRyb2xsZXJzID0gdGhpcy5idWlsZE9yVXBkYXRlQ29udHJvbGxlcnMoKTtcbiAgICAgICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVFbGVtZW50c1VwZGF0ZScpO1xuICAgICAgICBsZXQgbWluUGFkZGluZyA9IDA7XG4gICAgICAgIGZvcihsZXQgaSA9IDAsIGlsZW4gPSB0aGlzLmRhdGEuZGF0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKXtcbiAgICAgICAgICAgIGNvbnN0IHsgY29udHJvbGxlciAgfSA9IHRoaXMuZ2V0RGF0YXNldE1ldGEoaSk7XG4gICAgICAgICAgICBjb25zdCByZXNldCA9ICFhbmltc0Rpc2FibGVkICYmIG5ld0NvbnRyb2xsZXJzLmluZGV4T2YoY29udHJvbGxlcikgPT09IC0xO1xuICAgICAgICAgICAgY29udHJvbGxlci5idWlsZE9yVXBkYXRlRWxlbWVudHMocmVzZXQpO1xuICAgICAgICAgICAgbWluUGFkZGluZyA9IE1hdGgubWF4KCtjb250cm9sbGVyLmdldE1heE92ZXJmbG93KCksIG1pblBhZGRpbmcpO1xuICAgICAgICB9XG4gICAgICAgIG1pblBhZGRpbmcgPSB0aGlzLl9taW5QYWRkaW5nID0gb3B0aW9ucy5sYXlvdXQuYXV0b1BhZGRpbmcgPyBtaW5QYWRkaW5nIDogMDtcbiAgICAgICAgdGhpcy5fdXBkYXRlTGF5b3V0KG1pblBhZGRpbmcpO1xuICAgICAgICBpZiAoIWFuaW1zRGlzYWJsZWQpIHtcbiAgICAgICAgICAgIGVhY2gobmV3Q29udHJvbGxlcnMsIChjb250cm9sbGVyKT0+e1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIucmVzZXQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3VwZGF0ZURhdGFzZXRzKG1vZGUpO1xuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyVXBkYXRlJywge1xuICAgICAgICAgICAgbW9kZVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fbGF5ZXJzLnNvcnQoY29tcGFyZTJMZXZlbCgneicsICdfaWR4JykpO1xuICAgICAgICBjb25zdCB7IF9hY3RpdmUgLCBfbGFzdEV2ZW50ICB9ID0gdGhpcztcbiAgICAgICAgaWYgKF9sYXN0RXZlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50SGFuZGxlcihfbGFzdEV2ZW50LCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChfYWN0aXZlLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlSG92ZXJTdHlsZXMoX2FjdGl2ZSwgX2FjdGl2ZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9XG4gX3VwZGF0ZVNjYWxlcygpIHtcbiAgICAgICAgZWFjaCh0aGlzLnNjYWxlcywgKHNjYWxlKT0+e1xuICAgICAgICAgICAgbGF5b3V0cy5yZW1vdmVCb3godGhpcywgc2NhbGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lbnN1cmVTY2FsZXNIYXZlSURzKCk7XG4gICAgICAgIHRoaXMuYnVpbGRPclVwZGF0ZVNjYWxlcygpO1xuICAgIH1cbiBfY2hlY2tFdmVudEJpbmRpbmdzKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBleGlzdGluZ0V2ZW50cyA9IG5ldyBTZXQoT2JqZWN0LmtleXModGhpcy5fbGlzdGVuZXJzKSk7XG4gICAgICAgIGNvbnN0IG5ld0V2ZW50cyA9IG5ldyBTZXQob3B0aW9ucy5ldmVudHMpO1xuICAgICAgICBpZiAoIXNldHNFcXVhbChleGlzdGluZ0V2ZW50cywgbmV3RXZlbnRzKSB8fCAhIXRoaXMuX3Jlc3BvbnNpdmVMaXN0ZW5lcnMgIT09IG9wdGlvbnMucmVzcG9uc2l2ZSkge1xuICAgICAgICAgICAgdGhpcy51bmJpbmRFdmVudHMoKTtcbiAgICAgICAgICAgIHRoaXMuYmluZEV2ZW50cygpO1xuICAgICAgICB9XG4gICAgfVxuIF91cGRhdGVIaWRkZW5JbmRpY2VzKCkge1xuICAgICAgICBjb25zdCB7IF9oaWRkZW5JbmRpY2VzICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgY2hhbmdlcyA9IHRoaXMuX2dldFVuaWZvcm1EYXRhQ2hhbmdlcygpIHx8IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHsgbWV0aG9kICwgc3RhcnQgLCBjb3VudCAgfSBvZiBjaGFuZ2VzKXtcbiAgICAgICAgICAgIGNvbnN0IG1vdmUgPSBtZXRob2QgPT09ICdfcmVtb3ZlRWxlbWVudHMnID8gLWNvdW50IDogY291bnQ7XG4gICAgICAgICAgICBtb3ZlTnVtZXJpY0tleXMoX2hpZGRlbkluZGljZXMsIHN0YXJ0LCBtb3ZlKTtcbiAgICAgICAgfVxuICAgIH1cbiBfZ2V0VW5pZm9ybURhdGFDaGFuZ2VzKCkge1xuICAgICAgICBjb25zdCBfZGF0YUNoYW5nZXMgPSB0aGlzLl9kYXRhQ2hhbmdlcztcbiAgICAgICAgaWYgKCFfZGF0YUNoYW5nZXMgfHwgIV9kYXRhQ2hhbmdlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9kYXRhQ2hhbmdlcyA9IFtdO1xuICAgICAgICBjb25zdCBkYXRhc2V0Q291bnQgPSB0aGlzLmRhdGEuZGF0YXNldHMubGVuZ3RoO1xuICAgICAgICBjb25zdCBtYWtlU2V0ID0gKGlkeCk9Pm5ldyBTZXQoX2RhdGFDaGFuZ2VzLmZpbHRlcigoYyk9PmNbMF0gPT09IGlkeCkubWFwKChjLCBpKT0+aSArICcsJyArIGMuc3BsaWNlKDEpLmpvaW4oJywnKSkpO1xuICAgICAgICBjb25zdCBjaGFuZ2VTZXQgPSBtYWtlU2V0KDApO1xuICAgICAgICBmb3IobGV0IGkgPSAxOyBpIDwgZGF0YXNldENvdW50OyBpKyspe1xuICAgICAgICAgICAgaWYgKCFzZXRzRXF1YWwoY2hhbmdlU2V0LCBtYWtlU2V0KGkpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShjaGFuZ2VTZXQpLm1hcCgoYyk9PmMuc3BsaXQoJywnKSkubWFwKChhKT0+KHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6IGFbMV0sXG4gICAgICAgICAgICAgICAgc3RhcnQ6ICthWzJdLFxuICAgICAgICAgICAgICAgIGNvdW50OiArYVszXVxuICAgICAgICAgICAgfSkpO1xuICAgIH1cbiBfdXBkYXRlTGF5b3V0KG1pblBhZGRpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlTGF5b3V0Jywge1xuICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICB9KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsYXlvdXRzLnVwZGF0ZSh0aGlzLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgbWluUGFkZGluZyk7XG4gICAgICAgIGNvbnN0IGFyZWEgPSB0aGlzLmNoYXJ0QXJlYTtcbiAgICAgICAgY29uc3Qgbm9BcmVhID0gYXJlYS53aWR0aCA8PSAwIHx8IGFyZWEuaGVpZ2h0IDw9IDA7XG4gICAgICAgIHRoaXMuX2xheWVycyA9IFtdO1xuICAgICAgICBlYWNoKHRoaXMuYm94ZXMsIChib3gpPT57XG4gICAgICAgICAgICBpZiAobm9BcmVhICYmIGJveC5wb3NpdGlvbiA9PT0gJ2NoYXJ0QXJlYScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYm94LmNvbmZpZ3VyZSkge1xuICAgICAgICAgICAgICAgIGJveC5jb25maWd1cmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2xheWVycy5wdXNoKC4uLmJveC5fbGF5ZXJzKCkpO1xuICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgdGhpcy5fbGF5ZXJzLmZvckVhY2goKGl0ZW0sIGluZGV4KT0+e1xuICAgICAgICAgICAgaXRlbS5faWR4ID0gaW5kZXg7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyTGF5b3V0Jyk7XG4gICAgfVxuIF91cGRhdGVEYXRhc2V0cyhtb2RlKSB7XG4gICAgICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZURhdGFzZXRzVXBkYXRlJywge1xuICAgICAgICAgICAgbW9kZSxcbiAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICAgICAgfSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGxldCBpID0gMCwgaWxlbiA9IHRoaXMuZGF0YS5kYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgdGhpcy5nZXREYXRhc2V0TWV0YShpKS5jb250cm9sbGVyLmNvbmZpZ3VyZSgpO1xuICAgICAgICB9XG4gICAgICAgIGZvcihsZXQgaSA9IDAsIGlsZW4gPSB0aGlzLmRhdGEuZGF0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZURhdGFzZXQoaSwgaXNGdW5jdGlvbihtb2RlKSA/IG1vZGUoe1xuICAgICAgICAgICAgICAgIGRhdGFzZXRJbmRleDogaVxuICAgICAgICAgICAgfSkgOiBtb2RlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyRGF0YXNldHNVcGRhdGUnLCB7XG4gICAgICAgICAgICBtb2RlXG4gICAgICAgIH0pO1xuICAgIH1cbiBfdXBkYXRlRGF0YXNldChpbmRleCwgbW9kZSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShpbmRleCk7XG4gICAgICAgIGNvbnN0IGFyZ3MgPSB7XG4gICAgICAgICAgICBtZXRhLFxuICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICBtb2RlLFxuICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVEYXRhc2V0VXBkYXRlJywgYXJncykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbWV0YS5jb250cm9sbGVyLl91cGRhdGUobW9kZSk7XG4gICAgICAgIGFyZ3MuY2FuY2VsYWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyRGF0YXNldFVwZGF0ZScsIGFyZ3MpO1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZVJlbmRlcicsIHtcbiAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICAgICAgfSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFuaW1hdG9yLmhhcyh0aGlzKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYXR0YWNoZWQgJiYgIWFuaW1hdG9yLnJ1bm5pbmcodGhpcykpIHtcbiAgICAgICAgICAgICAgICBhbmltYXRvci5zdGFydCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZHJhdygpO1xuICAgICAgICAgICAgb25BbmltYXRpb25zQ29tcGxldGUoe1xuICAgICAgICAgICAgICAgIGNoYXJ0OiB0aGlzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkcmF3KCkge1xuICAgICAgICBsZXQgaTtcbiAgICAgICAgaWYgKHRoaXMuX3Jlc2l6ZUJlZm9yZURyYXcpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgd2lkdGggLCBoZWlnaHQgIH0gPSB0aGlzLl9yZXNpemVCZWZvcmVEcmF3O1xuICAgICAgICAgICAgdGhpcy5fcmVzaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgdGhpcy5fcmVzaXplQmVmb3JlRHJhdyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICBpZiAodGhpcy53aWR0aCA8PSAwIHx8IHRoaXMuaGVpZ2h0IDw9IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVEcmF3Jywge1xuICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICB9KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYXllcnMgPSB0aGlzLl9sYXllcnM7XG4gICAgICAgIGZvcihpID0gMDsgaSA8IGxheWVycy5sZW5ndGggJiYgbGF5ZXJzW2ldLnogPD0gMDsgKytpKXtcbiAgICAgICAgICAgIGxheWVyc1tpXS5kcmF3KHRoaXMuY2hhcnRBcmVhKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9kcmF3RGF0YXNldHMoKTtcbiAgICAgICAgZm9yKDsgaSA8IGxheWVycy5sZW5ndGg7ICsraSl7XG4gICAgICAgICAgICBsYXllcnNbaV0uZHJhdyh0aGlzLmNoYXJ0QXJlYSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdhZnRlckRyYXcnKTtcbiAgICB9XG4gX2dldFNvcnRlZERhdGFzZXRNZXRhcyhmaWx0ZXJWaXNpYmxlKSB7XG4gICAgICAgIGNvbnN0IG1ldGFzZXRzID0gdGhpcy5fc29ydGVkTWV0YXNldHM7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICBsZXQgaSwgaWxlbjtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gbWV0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIGNvbnN0IG1ldGEgPSBtZXRhc2V0c1tpXTtcbiAgICAgICAgICAgIGlmICghZmlsdGVyVmlzaWJsZSB8fCBtZXRhLnZpc2libGUpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChtZXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiBnZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0U29ydGVkRGF0YXNldE1ldGFzKHRydWUpO1xuICAgIH1cbiBfZHJhd0RhdGFzZXRzKCkge1xuICAgICAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVEYXRhc2V0c0RyYXcnLCB7XG4gICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgIH0pID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGFzZXRzID0gdGhpcy5nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCk7XG4gICAgICAgIGZvcihsZXQgaSA9IG1ldGFzZXRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKXtcbiAgICAgICAgICAgIHRoaXMuX2RyYXdEYXRhc2V0KG1ldGFzZXRzW2ldKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyRGF0YXNldHNEcmF3Jyk7XG4gICAgfVxuIF9kcmF3RGF0YXNldChtZXRhKSB7XG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgICAgICBjb25zdCBjbGlwID0gbWV0YS5fY2xpcDtcbiAgICAgICAgY29uc3QgdXNlQ2xpcCA9ICFjbGlwLmRpc2FibGVkO1xuICAgICAgICBjb25zdCBhcmVhID0gZ2V0RGF0YXNldEFyZWEobWV0YSkgfHwgdGhpcy5jaGFydEFyZWE7XG4gICAgICAgIGNvbnN0IGFyZ3MgPSB7XG4gICAgICAgICAgICBtZXRhLFxuICAgICAgICAgICAgaW5kZXg6IG1ldGEuaW5kZXgsXG4gICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZURhdGFzZXREcmF3JywgYXJncykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVzZUNsaXApIHtcbiAgICAgICAgICAgIGNsaXBBcmVhKGN0eCwge1xuICAgICAgICAgICAgICAgIGxlZnQ6IGNsaXAubGVmdCA9PT0gZmFsc2UgPyAwIDogYXJlYS5sZWZ0IC0gY2xpcC5sZWZ0LFxuICAgICAgICAgICAgICAgIHJpZ2h0OiBjbGlwLnJpZ2h0ID09PSBmYWxzZSA/IHRoaXMud2lkdGggOiBhcmVhLnJpZ2h0ICsgY2xpcC5yaWdodCxcbiAgICAgICAgICAgICAgICB0b3A6IGNsaXAudG9wID09PSBmYWxzZSA/IDAgOiBhcmVhLnRvcCAtIGNsaXAudG9wLFxuICAgICAgICAgICAgICAgIGJvdHRvbTogY2xpcC5ib3R0b20gPT09IGZhbHNlID8gdGhpcy5oZWlnaHQgOiBhcmVhLmJvdHRvbSArIGNsaXAuYm90dG9tXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBtZXRhLmNvbnRyb2xsZXIuZHJhdygpO1xuICAgICAgICBpZiAodXNlQ2xpcCkge1xuICAgICAgICAgICAgdW5jbGlwQXJlYShjdHgpO1xuICAgICAgICB9XG4gICAgICAgIGFyZ3MuY2FuY2VsYWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyRGF0YXNldERyYXcnLCBhcmdzKTtcbiAgICB9XG4gaXNQb2ludEluQXJlYShwb2ludCkge1xuICAgICAgICByZXR1cm4gX2lzUG9pbnRJbkFyZWEocG9pbnQsIHRoaXMuY2hhcnRBcmVhLCB0aGlzLl9taW5QYWRkaW5nKTtcbiAgICB9XG4gICAgZ2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZShlLCBtb2RlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IEludGVyYWN0aW9uLm1vZGVzW21vZGVdO1xuICAgICAgICBpZiAodHlwZW9mIG1ldGhvZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIG1ldGhvZCh0aGlzLCBlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCkge1xuICAgICAgICBjb25zdCBkYXRhc2V0ID0gdGhpcy5kYXRhLmRhdGFzZXRzW2RhdGFzZXRJbmRleF07XG4gICAgICAgIGNvbnN0IG1ldGFzZXRzID0gdGhpcy5fbWV0YXNldHM7XG4gICAgICAgIGxldCBtZXRhID0gbWV0YXNldHMuZmlsdGVyKCh4KT0+eCAmJiB4Ll9kYXRhc2V0ID09PSBkYXRhc2V0KS5wb3AoKTtcbiAgICAgICAgaWYgKCFtZXRhKSB7XG4gICAgICAgICAgICBtZXRhID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0YTogW10sXG4gICAgICAgICAgICAgICAgZGF0YXNldDogbnVsbCxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBudWxsLFxuICAgICAgICAgICAgICAgIGhpZGRlbjogbnVsbCxcbiAgICAgICAgICAgICAgICB4QXhpc0lEOiBudWxsLFxuICAgICAgICAgICAgICAgIHlBeGlzSUQ6IG51bGwsXG4gICAgICAgICAgICAgICAgb3JkZXI6IGRhdGFzZXQgJiYgZGF0YXNldC5vcmRlciB8fCAwLFxuICAgICAgICAgICAgICAgIGluZGV4OiBkYXRhc2V0SW5kZXgsXG4gICAgICAgICAgICAgICAgX2RhdGFzZXQ6IGRhdGFzZXQsXG4gICAgICAgICAgICAgICAgX3BhcnNlZDogW10sXG4gICAgICAgICAgICAgICAgX3NvcnRlZDogZmFsc2VcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBtZXRhc2V0cy5wdXNoKG1ldGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXRhO1xuICAgIH1cbiAgICBnZXRDb250ZXh0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy4kY29udGV4dCB8fCAodGhpcy4kY29udGV4dCA9IGNyZWF0ZUNvbnRleHQobnVsbCwge1xuICAgICAgICAgICAgY2hhcnQ6IHRoaXMsXG4gICAgICAgICAgICB0eXBlOiAnY2hhcnQnXG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgZ2V0VmlzaWJsZURhdGFzZXRDb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpLmxlbmd0aDtcbiAgICB9XG4gICAgaXNEYXRhc2V0VmlzaWJsZShkYXRhc2V0SW5kZXgpIHtcbiAgICAgICAgY29uc3QgZGF0YXNldCA9IHRoaXMuZGF0YS5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdO1xuICAgICAgICBpZiAoIWRhdGFzZXQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpO1xuICAgICAgICByZXR1cm4gdHlwZW9mIG1ldGEuaGlkZGVuID09PSAnYm9vbGVhbicgPyAhbWV0YS5oaWRkZW4gOiAhZGF0YXNldC5oaWRkZW47XG4gICAgfVxuICAgIHNldERhdGFzZXRWaXNpYmlsaXR5KGRhdGFzZXRJbmRleCwgdmlzaWJsZSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpO1xuICAgICAgICBtZXRhLmhpZGRlbiA9ICF2aXNpYmxlO1xuICAgIH1cbiAgICB0b2dnbGVEYXRhVmlzaWJpbGl0eShpbmRleCkge1xuICAgICAgICB0aGlzLl9oaWRkZW5JbmRpY2VzW2luZGV4XSA9ICF0aGlzLl9oaWRkZW5JbmRpY2VzW2luZGV4XTtcbiAgICB9XG4gICAgZ2V0RGF0YVZpc2liaWxpdHkoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLl9oaWRkZW5JbmRpY2VzW2luZGV4XTtcbiAgICB9XG4gX3VwZGF0ZVZpc2liaWxpdHkoZGF0YXNldEluZGV4LCBkYXRhSW5kZXgsIHZpc2libGUpIHtcbiAgICAgICAgY29uc3QgbW9kZSA9IHZpc2libGUgPyAnc2hvdycgOiAnaGlkZSc7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG4gICAgICAgIGNvbnN0IGFuaW1zID0gbWV0YS5jb250cm9sbGVyLl9yZXNvbHZlQW5pbWF0aW9ucyh1bmRlZmluZWQsIG1vZGUpO1xuICAgICAgICBpZiAoZGVmaW5lZChkYXRhSW5kZXgpKSB7XG4gICAgICAgICAgICBtZXRhLmRhdGFbZGF0YUluZGV4XS5oaWRkZW4gPSAhdmlzaWJsZTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNldERhdGFzZXRWaXNpYmlsaXR5KGRhdGFzZXRJbmRleCwgdmlzaWJsZSk7XG4gICAgICAgICAgICBhbmltcy51cGRhdGUobWV0YSwge1xuICAgICAgICAgICAgICAgIHZpc2libGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy51cGRhdGUoKGN0eCk9PmN0eC5kYXRhc2V0SW5kZXggPT09IGRhdGFzZXRJbmRleCA/IG1vZGUgOiB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGhpZGUoZGF0YXNldEluZGV4LCBkYXRhSW5kZXgpIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlVmlzaWJpbGl0eShkYXRhc2V0SW5kZXgsIGRhdGFJbmRleCwgZmFsc2UpO1xuICAgIH1cbiAgICBzaG93KGRhdGFzZXRJbmRleCwgZGF0YUluZGV4KSB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZVZpc2liaWxpdHkoZGF0YXNldEluZGV4LCBkYXRhSW5kZXgsIHRydWUpO1xuICAgIH1cbiBfZGVzdHJveURhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fbWV0YXNldHNbZGF0YXNldEluZGV4XTtcbiAgICAgICAgaWYgKG1ldGEgJiYgbWV0YS5jb250cm9sbGVyKSB7XG4gICAgICAgICAgICBtZXRhLmNvbnRyb2xsZXIuX2Rlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgdGhpcy5fbWV0YXNldHNbZGF0YXNldEluZGV4XTtcbiAgICB9XG4gICAgX3N0b3AoKSB7XG4gICAgICAgIGxldCBpLCBpbGVuO1xuICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgYW5pbWF0b3IucmVtb3ZlKHRoaXMpO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSB0aGlzLmRhdGEuZGF0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIHRoaXMuX2Rlc3Ryb3lEYXRhc2V0TWV0YShpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZURlc3Ryb3knKTtcbiAgICAgICAgY29uc3QgeyBjYW52YXMgLCBjdHggIH0gPSB0aGlzO1xuICAgICAgICB0aGlzLl9zdG9wKCk7XG4gICAgICAgIHRoaXMuY29uZmlnLmNsZWFyQ2FjaGUoKTtcbiAgICAgICAgaWYgKGNhbnZhcykge1xuICAgICAgICAgICAgdGhpcy51bmJpbmRFdmVudHMoKTtcbiAgICAgICAgICAgIGNsZWFyQ2FudmFzKGNhbnZhcywgY3R4KTtcbiAgICAgICAgICAgIHRoaXMucGxhdGZvcm0ucmVsZWFzZUNvbnRleHQoY3R4KTtcbiAgICAgICAgICAgIHRoaXMuY2FudmFzID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuY3R4ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgaW5zdGFuY2VzW3RoaXMuaWRdO1xuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyRGVzdHJveScpO1xuICAgIH1cbiAgICB0b0Jhc2U2NEltYWdlKC4uLmFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FudmFzLnRvRGF0YVVSTCguLi5hcmdzKTtcbiAgICB9XG4gYmluZEV2ZW50cygpIHtcbiAgICAgICAgdGhpcy5iaW5kVXNlckV2ZW50cygpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJlc3BvbnNpdmUpIHtcbiAgICAgICAgICAgIHRoaXMuYmluZFJlc3BvbnNpdmVFdmVudHMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYXR0YWNoZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuIGJpbmRVc2VyRXZlbnRzKCkge1xuICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XG4gICAgICAgIGNvbnN0IHBsYXRmb3JtID0gdGhpcy5wbGF0Zm9ybTtcbiAgICAgICAgY29uc3QgX2FkZCA9ICh0eXBlLCBsaXN0ZW5lcik9PntcbiAgICAgICAgICAgIHBsYXRmb3JtLmFkZEV2ZW50TGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIpO1xuICAgICAgICAgICAgbGlzdGVuZXJzW3R5cGVdID0gbGlzdGVuZXI7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGxpc3RlbmVyID0gKGUsIHgsIHkpPT57XG4gICAgICAgICAgICBlLm9mZnNldFggPSB4O1xuICAgICAgICAgICAgZS5vZmZzZXRZID0geTtcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50SGFuZGxlcihlKTtcbiAgICAgICAgfTtcbiAgICAgICAgZWFjaCh0aGlzLm9wdGlvbnMuZXZlbnRzLCAodHlwZSk9Pl9hZGQodHlwZSwgbGlzdGVuZXIpKTtcbiAgICB9XG4gYmluZFJlc3BvbnNpdmVFdmVudHMoKSB7XG4gICAgICAgIGlmICghdGhpcy5fcmVzcG9uc2l2ZUxpc3RlbmVycykge1xuICAgICAgICAgICAgdGhpcy5fcmVzcG9uc2l2ZUxpc3RlbmVycyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuX3Jlc3BvbnNpdmVMaXN0ZW5lcnM7XG4gICAgICAgIGNvbnN0IHBsYXRmb3JtID0gdGhpcy5wbGF0Zm9ybTtcbiAgICAgICAgY29uc3QgX2FkZCA9ICh0eXBlLCBsaXN0ZW5lcik9PntcbiAgICAgICAgICAgIHBsYXRmb3JtLmFkZEV2ZW50TGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIpO1xuICAgICAgICAgICAgbGlzdGVuZXJzW3R5cGVdID0gbGlzdGVuZXI7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IF9yZW1vdmUgPSAodHlwZSwgbGlzdGVuZXIpPT57XG4gICAgICAgICAgICBpZiAobGlzdGVuZXJzW3R5cGVdKSB7XG4gICAgICAgICAgICAgICAgcGxhdGZvcm0ucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGxpc3RlbmVyc1t0eXBlXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgbGlzdGVuZXIgPSAod2lkdGgsIGhlaWdodCk9PntcbiAgICAgICAgICAgIGlmICh0aGlzLmNhbnZhcykge1xuICAgICAgICAgICAgICAgIHRoaXMucmVzaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBsZXQgZGV0YWNoZWQ7XG4gICAgICAgIGNvbnN0IGF0dGFjaGVkID0gKCk9PntcbiAgICAgICAgICAgIF9yZW1vdmUoJ2F0dGFjaCcsIGF0dGFjaGVkKTtcbiAgICAgICAgICAgIHRoaXMuYXR0YWNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5yZXNpemUoKTtcbiAgICAgICAgICAgIF9hZGQoJ3Jlc2l6ZScsIGxpc3RlbmVyKTtcbiAgICAgICAgICAgIF9hZGQoJ2RldGFjaCcsIGRldGFjaGVkKTtcbiAgICAgICAgfTtcbiAgICAgICAgZGV0YWNoZWQgPSAoKT0+e1xuICAgICAgICAgICAgdGhpcy5hdHRhY2hlZCA9IGZhbHNlO1xuICAgICAgICAgICAgX3JlbW92ZSgncmVzaXplJywgbGlzdGVuZXIpO1xuICAgICAgICAgICAgdGhpcy5fc3RvcCgpO1xuICAgICAgICAgICAgdGhpcy5fcmVzaXplKDAsIDApO1xuICAgICAgICAgICAgX2FkZCgnYXR0YWNoJywgYXR0YWNoZWQpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAocGxhdGZvcm0uaXNBdHRhY2hlZCh0aGlzLmNhbnZhcykpIHtcbiAgICAgICAgICAgIGF0dGFjaGVkKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZXRhY2hlZCgpO1xuICAgICAgICB9XG4gICAgfVxuIHVuYmluZEV2ZW50cygpIHtcbiAgICAgICAgZWFjaCh0aGlzLl9saXN0ZW5lcnMsIChsaXN0ZW5lciwgdHlwZSk9PntcbiAgICAgICAgICAgIHRoaXMucGxhdGZvcm0ucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lcik7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcbiAgICAgICAgZWFjaCh0aGlzLl9yZXNwb25zaXZlTGlzdGVuZXJzLCAobGlzdGVuZXIsIHR5cGUpPT57XG4gICAgICAgICAgICB0aGlzLnBsYXRmb3JtLnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fcmVzcG9uc2l2ZUxpc3RlbmVycyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdXBkYXRlSG92ZXJTdHlsZShpdGVtcywgbW9kZSwgZW5hYmxlZCkge1xuICAgICAgICBjb25zdCBwcmVmaXggPSBlbmFibGVkID8gJ3NldCcgOiAncmVtb3ZlJztcbiAgICAgICAgbGV0IG1ldGEsIGl0ZW0sIGksIGlsZW47XG4gICAgICAgIGlmIChtb2RlID09PSAnZGF0YXNldCcpIHtcbiAgICAgICAgICAgIG1ldGEgPSB0aGlzLmdldERhdGFzZXRNZXRhKGl0ZW1zWzBdLmRhdGFzZXRJbmRleCk7XG4gICAgICAgICAgICBtZXRhLmNvbnRyb2xsZXJbJ18nICsgcHJlZml4ICsgJ0RhdGFzZXRIb3ZlclN0eWxlJ10oKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgaXRlbSA9IGl0ZW1zW2ldO1xuICAgICAgICAgICAgY29uc3QgY29udHJvbGxlciA9IGl0ZW0gJiYgdGhpcy5nZXREYXRhc2V0TWV0YShpdGVtLmRhdGFzZXRJbmRleCkuY29udHJvbGxlcjtcbiAgICAgICAgICAgIGlmIChjb250cm9sbGVyKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlcltwcmVmaXggKyAnSG92ZXJTdHlsZSddKGl0ZW0uZWxlbWVudCwgaXRlbS5kYXRhc2V0SW5kZXgsIGl0ZW0uaW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuIGdldEFjdGl2ZUVsZW1lbnRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aXZlIHx8IFtdO1xuICAgIH1cbiBzZXRBY3RpdmVFbGVtZW50cyhhY3RpdmVFbGVtZW50cykge1xuICAgICAgICBjb25zdCBsYXN0QWN0aXZlID0gdGhpcy5fYWN0aXZlIHx8IFtdO1xuICAgICAgICBjb25zdCBhY3RpdmUgPSBhY3RpdmVFbGVtZW50cy5tYXAoKHsgZGF0YXNldEluZGV4ICwgaW5kZXggIH0pPT57XG4gICAgICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpO1xuICAgICAgICAgICAgaWYgKCFtZXRhKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBkYXRhc2V0IGZvdW5kIGF0IGluZGV4ICcgKyBkYXRhc2V0SW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkYXRhc2V0SW5kZXgsXG4gICAgICAgICAgICAgICAgZWxlbWVudDogbWV0YS5kYXRhW2luZGV4XSxcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGNoYW5nZWQgPSAhX2VsZW1lbnRzRXF1YWwoYWN0aXZlLCBsYXN0QWN0aXZlKTtcbiAgICAgICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZSA9IGFjdGl2ZTtcbiAgICAgICAgICAgIHRoaXMuX2xhc3RFdmVudCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVIb3ZlclN0eWxlcyhhY3RpdmUsIGxhc3RBY3RpdmUpO1xuICAgICAgICB9XG4gICAgfVxuIG5vdGlmeVBsdWdpbnMoaG9vaywgYXJncywgZmlsdGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wbHVnaW5zLm5vdGlmeSh0aGlzLCBob29rLCBhcmdzLCBmaWx0ZXIpO1xuICAgIH1cbiBpc1BsdWdpbkVuYWJsZWQocGx1Z2luSWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BsdWdpbnMuX2NhY2hlLmZpbHRlcigocCk9PnAucGx1Z2luLmlkID09PSBwbHVnaW5JZCkubGVuZ3RoID09PSAxO1xuICAgIH1cbiBfdXBkYXRlSG92ZXJTdHlsZXMoYWN0aXZlLCBsYXN0QWN0aXZlLCByZXBsYXkpIHtcbiAgICAgICAgY29uc3QgaG92ZXJPcHRpb25zID0gdGhpcy5vcHRpb25zLmhvdmVyO1xuICAgICAgICBjb25zdCBkaWZmID0gKGEsIGIpPT5hLmZpbHRlcigoeCk9PiFiLnNvbWUoKHkpPT54LmRhdGFzZXRJbmRleCA9PT0geS5kYXRhc2V0SW5kZXggJiYgeC5pbmRleCA9PT0geS5pbmRleCkpO1xuICAgICAgICBjb25zdCBkZWFjdGl2YXRlZCA9IGRpZmYobGFzdEFjdGl2ZSwgYWN0aXZlKTtcbiAgICAgICAgY29uc3QgYWN0aXZhdGVkID0gcmVwbGF5ID8gYWN0aXZlIDogZGlmZihhY3RpdmUsIGxhc3RBY3RpdmUpO1xuICAgICAgICBpZiAoZGVhY3RpdmF0ZWQubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUhvdmVyU3R5bGUoZGVhY3RpdmF0ZWQsIGhvdmVyT3B0aW9ucy5tb2RlLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFjdGl2YXRlZC5sZW5ndGggJiYgaG92ZXJPcHRpb25zLm1vZGUpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlSG92ZXJTdHlsZShhY3RpdmF0ZWQsIGhvdmVyT3B0aW9ucy5tb2RlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cbiBfZXZlbnRIYW5kbGVyKGUsIHJlcGxheSkge1xuICAgICAgICBjb25zdCBhcmdzID0ge1xuICAgICAgICAgICAgZXZlbnQ6IGUsXG4gICAgICAgICAgICByZXBsYXksXG4gICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlLFxuICAgICAgICAgICAgaW5DaGFydEFyZWE6IHRoaXMuaXNQb2ludEluQXJlYShlKVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBldmVudEZpbHRlciA9IChwbHVnaW4pPT4ocGx1Z2luLm9wdGlvbnMuZXZlbnRzIHx8IHRoaXMub3B0aW9ucy5ldmVudHMpLmluY2x1ZGVzKGUubmF0aXZlLnR5cGUpO1xuICAgICAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVFdmVudCcsIGFyZ3MsIGV2ZW50RmlsdGVyKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaGFuZ2VkID0gdGhpcy5faGFuZGxlRXZlbnQoZSwgcmVwbGF5LCBhcmdzLmluQ2hhcnRBcmVhKTtcbiAgICAgICAgYXJncy5jYW5jZWxhYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJFdmVudCcsIGFyZ3MsIGV2ZW50RmlsdGVyKTtcbiAgICAgICAgaWYgKGNoYW5nZWQgfHwgYXJncy5jaGFuZ2VkKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiBfaGFuZGxlRXZlbnQoZSwgcmVwbGF5LCBpbkNoYXJ0QXJlYSkge1xuICAgICAgICBjb25zdCB7IF9hY3RpdmU6IGxhc3RBY3RpdmUgPSBbXSAsIG9wdGlvbnMgIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB1c2VGaW5hbFBvc2l0aW9uID0gcmVwbGF5O1xuICAgICAgICBjb25zdCBhY3RpdmUgPSB0aGlzLl9nZXRBY3RpdmVFbGVtZW50cyhlLCBsYXN0QWN0aXZlLCBpbkNoYXJ0QXJlYSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgICAgIGNvbnN0IGlzQ2xpY2sgPSBfaXNDbGlja0V2ZW50KGUpO1xuICAgICAgICBjb25zdCBsYXN0RXZlbnQgPSBkZXRlcm1pbmVMYXN0RXZlbnQoZSwgdGhpcy5fbGFzdEV2ZW50LCBpbkNoYXJ0QXJlYSwgaXNDbGljayk7XG4gICAgICAgIGlmIChpbkNoYXJ0QXJlYSkge1xuICAgICAgICAgICAgdGhpcy5fbGFzdEV2ZW50ID0gbnVsbDtcbiAgICAgICAgICAgIGNhbGxiYWNrKG9wdGlvbnMub25Ib3ZlciwgW1xuICAgICAgICAgICAgICAgIGUsXG4gICAgICAgICAgICAgICAgYWN0aXZlLFxuICAgICAgICAgICAgICAgIHRoaXNcbiAgICAgICAgICAgIF0sIHRoaXMpO1xuICAgICAgICAgICAgaWYgKGlzQ2xpY2spIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhvcHRpb25zLm9uQ2xpY2ssIFtcbiAgICAgICAgICAgICAgICAgICAgZSxcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlLFxuICAgICAgICAgICAgICAgICAgICB0aGlzXG4gICAgICAgICAgICAgICAgXSwgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2hhbmdlZCA9ICFfZWxlbWVudHNFcXVhbChhY3RpdmUsIGxhc3RBY3RpdmUpO1xuICAgICAgICBpZiAoY2hhbmdlZCB8fCByZXBsYXkpIHtcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZSA9IGFjdGl2ZTtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUhvdmVyU3R5bGVzKGFjdGl2ZSwgbGFzdEFjdGl2ZSwgcmVwbGF5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9sYXN0RXZlbnQgPSBsYXN0RXZlbnQ7XG4gICAgICAgIHJldHVybiBjaGFuZ2VkO1xuICAgIH1cbiBfZ2V0QWN0aXZlRWxlbWVudHMoZSwgbGFzdEFjdGl2ZSwgaW5DaGFydEFyZWEsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgaWYgKGUudHlwZSA9PT0gJ21vdXNlb3V0Jykge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaW5DaGFydEFyZWEpIHtcbiAgICAgICAgICAgIHJldHVybiBsYXN0QWN0aXZlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhvdmVyT3B0aW9ucyA9IHRoaXMub3B0aW9ucy5ob3ZlcjtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZShlLCBob3Zlck9wdGlvbnMubW9kZSwgaG92ZXJPcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICB9XG59XG5mdW5jdGlvbiBpbnZhbGlkYXRlUGx1Z2lucygpIHtcbiAgICByZXR1cm4gZWFjaChDaGFydC5pbnN0YW5jZXMsIChjaGFydCk9PmNoYXJ0Ll9wbHVnaW5zLmludmFsaWRhdGUoKSk7XG59XG5cbmZ1bmN0aW9uIGNsaXBBcmMoY3R4LCBlbGVtZW50LCBlbmRBbmdsZSkge1xuICAgIGNvbnN0IHsgc3RhcnRBbmdsZSAsIHBpeGVsTWFyZ2luICwgeCAsIHkgLCBvdXRlclJhZGl1cyAsIGlubmVyUmFkaXVzICB9ID0gZWxlbWVudDtcbiAgICBsZXQgYW5nbGVNYXJnaW4gPSBwaXhlbE1hcmdpbiAvIG91dGVyUmFkaXVzO1xuICAgIC8vIERyYXcgYW4gaW5uZXIgYm9yZGVyIGJ5IGNsaXBwaW5nIHRoZSBhcmMgYW5kIGRyYXdpbmcgYSBkb3VibGUtd2lkdGggYm9yZGVyXG4gICAgLy8gRW5sYXJnZSB0aGUgY2xpcHBpbmcgYXJjIGJ5IDAuMzMgcGl4ZWxzIHRvIGVsaW1pbmF0ZSBnbGl0Y2hlcyBiZXR3ZWVuIGJvcmRlcnNcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4LmFyYyh4LCB5LCBvdXRlclJhZGl1cywgc3RhcnRBbmdsZSAtIGFuZ2xlTWFyZ2luLCBlbmRBbmdsZSArIGFuZ2xlTWFyZ2luKTtcbiAgICBpZiAoaW5uZXJSYWRpdXMgPiBwaXhlbE1hcmdpbikge1xuICAgICAgICBhbmdsZU1hcmdpbiA9IHBpeGVsTWFyZ2luIC8gaW5uZXJSYWRpdXM7XG4gICAgICAgIGN0eC5hcmMoeCwgeSwgaW5uZXJSYWRpdXMsIGVuZEFuZ2xlICsgYW5nbGVNYXJnaW4sIHN0YXJ0QW5nbGUgLSBhbmdsZU1hcmdpbiwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY3R4LmFyYyh4LCB5LCBwaXhlbE1hcmdpbiwgZW5kQW5nbGUgKyBIQUxGX1BJLCBzdGFydEFuZ2xlIC0gSEFMRl9QSSk7XG4gICAgfVxuICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICBjdHguY2xpcCgpO1xufVxuZnVuY3Rpb24gdG9SYWRpdXNDb3JuZXJzKHZhbHVlKSB7XG4gICAgcmV0dXJuIF9yZWFkVmFsdWVUb1Byb3BzKHZhbHVlLCBbXG4gICAgICAgICdvdXRlclN0YXJ0JyxcbiAgICAgICAgJ291dGVyRW5kJyxcbiAgICAgICAgJ2lubmVyU3RhcnQnLFxuICAgICAgICAnaW5uZXJFbmQnXG4gICAgXSk7XG59XG4vKipcbiAqIFBhcnNlIGJvcmRlciByYWRpdXMgZnJvbSB0aGUgcHJvdmlkZWQgb3B0aW9uc1xuICovIGZ1bmN0aW9uIHBhcnNlQm9yZGVyUmFkaXVzJDEoYXJjLCBpbm5lclJhZGl1cywgb3V0ZXJSYWRpdXMsIGFuZ2xlRGVsdGEpIHtcbiAgICBjb25zdCBvID0gdG9SYWRpdXNDb3JuZXJzKGFyYy5vcHRpb25zLmJvcmRlclJhZGl1cyk7XG4gICAgY29uc3QgaGFsZlRoaWNrbmVzcyA9IChvdXRlclJhZGl1cyAtIGlubmVyUmFkaXVzKSAvIDI7XG4gICAgY29uc3QgaW5uZXJMaW1pdCA9IE1hdGgubWluKGhhbGZUaGlja25lc3MsIGFuZ2xlRGVsdGEgKiBpbm5lclJhZGl1cyAvIDIpO1xuICAgIC8vIE91dGVyIGxpbWl0cyBhcmUgY29tcGxpY2F0ZWQuIFdlIHdhbnQgdG8gY29tcHV0ZSB0aGUgYXZhaWxhYmxlIGFuZ3VsYXIgZGlzdGFuY2UgYXRcbiAgICAvLyBhIHJhZGl1cyBvZiBvdXRlclJhZGl1cyAtIGJvcmRlclJhZGl1cyBiZWNhdXNlIGZvciBzbWFsbCBhbmd1bGFyIGRpc3RhbmNlcywgdGhpcyB0ZXJtIGxpbWl0cy5cbiAgICAvLyBXZSBjb21wdXRlIGF0IHIgPSBvdXRlclJhZGl1cyAtIGJvcmRlclJhZGl1cyBiZWNhdXNlIHRoaXMgY2lyY2xlIGRlZmluZXMgdGhlIGNlbnRlciBvZiB0aGUgYm9yZGVyIGNvcm5lcnMuXG4gICAgLy9cbiAgICAvLyBJZiB0aGUgYm9yZGVyUmFkaXVzIGlzIGxhcmdlLCB0aGF0IHZhbHVlIGNhbiBiZWNvbWUgbmVnYXRpdmUuXG4gICAgLy8gVGhpcyBjYXVzZXMgdGhlIG91dGVyIGJvcmRlcnMgdG8gbG9zZSB0aGVpciByYWRpdXMgZW50aXJlbHksIHdoaWNoIGlzIHJhdGhlciB1bmV4cGVjdGVkLiBUbyBzb2x2ZSB0aGF0LCBpZiBib3JkZXJSYWRpdXMgPiBvdXRlclJhZGl1c1xuICAgIC8vIHdlIGtub3cgdGhhdCB0aGUgdGhpY2tuZXNzIHRlcm0gd2lsbCBkb21pbmF0ZSBhbmQgY29tcHV0ZSB0aGUgbGltaXRzIGF0IHRoYXQgcG9pbnRcbiAgICBjb25zdCBjb21wdXRlT3V0ZXJMaW1pdCA9ICh2YWwpPT57XG4gICAgICAgIGNvbnN0IG91dGVyQXJjTGltaXQgPSAob3V0ZXJSYWRpdXMgLSBNYXRoLm1pbihoYWxmVGhpY2tuZXNzLCB2YWwpKSAqIGFuZ2xlRGVsdGEgLyAyO1xuICAgICAgICByZXR1cm4gX2xpbWl0VmFsdWUodmFsLCAwLCBNYXRoLm1pbihoYWxmVGhpY2tuZXNzLCBvdXRlckFyY0xpbWl0KSk7XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICBvdXRlclN0YXJ0OiBjb21wdXRlT3V0ZXJMaW1pdChvLm91dGVyU3RhcnQpLFxuICAgICAgICBvdXRlckVuZDogY29tcHV0ZU91dGVyTGltaXQoby5vdXRlckVuZCksXG4gICAgICAgIGlubmVyU3RhcnQ6IF9saW1pdFZhbHVlKG8uaW5uZXJTdGFydCwgMCwgaW5uZXJMaW1pdCksXG4gICAgICAgIGlubmVyRW5kOiBfbGltaXRWYWx1ZShvLmlubmVyRW5kLCAwLCBpbm5lckxpbWl0KVxuICAgIH07XG59XG4vKipcbiAqIENvbnZlcnQgKHIsIPCdnIMpIHRvICh4LCB5KVxuICovIGZ1bmN0aW9uIHJUaGV0YVRvWFkociwgdGhldGEsIHgsIHkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiB4ICsgciAqIE1hdGguY29zKHRoZXRhKSxcbiAgICAgICAgeTogeSArIHIgKiBNYXRoLnNpbih0aGV0YSlcbiAgICB9O1xufVxuLyoqXG4gKiBQYXRoIHRoZSBhcmMsIHJlc3BlY3RpbmcgYm9yZGVyIHJhZGl1cyBieSBzZXBhcmF0aW5nIGludG8gbGVmdCBhbmQgcmlnaHQgaGFsdmVzLlxuICpcbiAqICAgU3RhcnQgICAgICBFbmRcbiAqXG4gKiAgICAxLS0tPmEtLS0+MiAgICBPdXRlclxuICogICAvICAgICAgICAgICBcXFxuICogICA4ICAgICAgICAgICAzXG4gKiAgIHwgICAgICAgICAgIHxcbiAqICAgfCAgICAgICAgICAgfFxuICogICA3ICAgICAgICAgICA0XG4gKiAgIFxcICAgICAgICAgICAvXG4gKiAgICA2PC0tLWI8LS0tNSAgICBJbm5lclxuICovIGZ1bmN0aW9uIHBhdGhBcmMoY3R4LCBlbGVtZW50LCBvZmZzZXQsIHNwYWNpbmcsIGVuZCwgY2lyY3VsYXIpIHtcbiAgICBjb25zdCB7IHggLCB5ICwgc3RhcnRBbmdsZTogc3RhcnQgLCBwaXhlbE1hcmdpbiAsIGlubmVyUmFkaXVzOiBpbm5lclIgIH0gPSBlbGVtZW50O1xuICAgIGNvbnN0IG91dGVyUmFkaXVzID0gTWF0aC5tYXgoZWxlbWVudC5vdXRlclJhZGl1cyArIHNwYWNpbmcgKyBvZmZzZXQgLSBwaXhlbE1hcmdpbiwgMCk7XG4gICAgY29uc3QgaW5uZXJSYWRpdXMgPSBpbm5lclIgPiAwID8gaW5uZXJSICsgc3BhY2luZyArIG9mZnNldCArIHBpeGVsTWFyZ2luIDogMDtcbiAgICBsZXQgc3BhY2luZ09mZnNldCA9IDA7XG4gICAgY29uc3QgYWxwaGEgPSBlbmQgLSBzdGFydDtcbiAgICBpZiAoc3BhY2luZykge1xuICAgICAgICAvLyBXaGVuIHNwYWNpbmcgaXMgcHJlc2VudCwgaXQgaXMgdGhlIHNhbWUgZm9yIGFsbCBpdGVtc1xuICAgICAgICAvLyBTbyB3ZSBhZGp1c3QgdGhlIHN0YXJ0IGFuZCBlbmQgYW5nbGUgb2YgdGhlIGFyYyBzdWNoIHRoYXRcbiAgICAgICAgLy8gdGhlIGRpc3RhbmNlIGlzIHRoZSBzYW1lIGFzIGl0IHdvdWxkIGJlIHdpdGhvdXQgdGhlIHNwYWNpbmdcbiAgICAgICAgY29uc3Qgbm9TcGFjaW5nSW5uZXJSYWRpdXMgPSBpbm5lclIgPiAwID8gaW5uZXJSIC0gc3BhY2luZyA6IDA7XG4gICAgICAgIGNvbnN0IG5vU3BhY2luZ091dGVyUmFkaXVzID0gb3V0ZXJSYWRpdXMgPiAwID8gb3V0ZXJSYWRpdXMgLSBzcGFjaW5nIDogMDtcbiAgICAgICAgY29uc3QgYXZOb2dTcGFjaW5nUmFkaXVzID0gKG5vU3BhY2luZ0lubmVyUmFkaXVzICsgbm9TcGFjaW5nT3V0ZXJSYWRpdXMpIC8gMjtcbiAgICAgICAgY29uc3QgYWRqdXN0ZWRBbmdsZSA9IGF2Tm9nU3BhY2luZ1JhZGl1cyAhPT0gMCA/IGFscGhhICogYXZOb2dTcGFjaW5nUmFkaXVzIC8gKGF2Tm9nU3BhY2luZ1JhZGl1cyArIHNwYWNpbmcpIDogYWxwaGE7XG4gICAgICAgIHNwYWNpbmdPZmZzZXQgPSAoYWxwaGEgLSBhZGp1c3RlZEFuZ2xlKSAvIDI7XG4gICAgfVxuICAgIGNvbnN0IGJldGEgPSBNYXRoLm1heCgwLjAwMSwgYWxwaGEgKiBvdXRlclJhZGl1cyAtIG9mZnNldCAvIFBJKSAvIG91dGVyUmFkaXVzO1xuICAgIGNvbnN0IGFuZ2xlT2Zmc2V0ID0gKGFscGhhIC0gYmV0YSkgLyAyO1xuICAgIGNvbnN0IHN0YXJ0QW5nbGUgPSBzdGFydCArIGFuZ2xlT2Zmc2V0ICsgc3BhY2luZ09mZnNldDtcbiAgICBjb25zdCBlbmRBbmdsZSA9IGVuZCAtIGFuZ2xlT2Zmc2V0IC0gc3BhY2luZ09mZnNldDtcbiAgICBjb25zdCB7IG91dGVyU3RhcnQgLCBvdXRlckVuZCAsIGlubmVyU3RhcnQgLCBpbm5lckVuZCAgfSA9IHBhcnNlQm9yZGVyUmFkaXVzJDEoZWxlbWVudCwgaW5uZXJSYWRpdXMsIG91dGVyUmFkaXVzLCBlbmRBbmdsZSAtIHN0YXJ0QW5nbGUpO1xuICAgIGNvbnN0IG91dGVyU3RhcnRBZGp1c3RlZFJhZGl1cyA9IG91dGVyUmFkaXVzIC0gb3V0ZXJTdGFydDtcbiAgICBjb25zdCBvdXRlckVuZEFkanVzdGVkUmFkaXVzID0gb3V0ZXJSYWRpdXMgLSBvdXRlckVuZDtcbiAgICBjb25zdCBvdXRlclN0YXJ0QWRqdXN0ZWRBbmdsZSA9IHN0YXJ0QW5nbGUgKyBvdXRlclN0YXJ0IC8gb3V0ZXJTdGFydEFkanVzdGVkUmFkaXVzO1xuICAgIGNvbnN0IG91dGVyRW5kQWRqdXN0ZWRBbmdsZSA9IGVuZEFuZ2xlIC0gb3V0ZXJFbmQgLyBvdXRlckVuZEFkanVzdGVkUmFkaXVzO1xuICAgIGNvbnN0IGlubmVyU3RhcnRBZGp1c3RlZFJhZGl1cyA9IGlubmVyUmFkaXVzICsgaW5uZXJTdGFydDtcbiAgICBjb25zdCBpbm5lckVuZEFkanVzdGVkUmFkaXVzID0gaW5uZXJSYWRpdXMgKyBpbm5lckVuZDtcbiAgICBjb25zdCBpbm5lclN0YXJ0QWRqdXN0ZWRBbmdsZSA9IHN0YXJ0QW5nbGUgKyBpbm5lclN0YXJ0IC8gaW5uZXJTdGFydEFkanVzdGVkUmFkaXVzO1xuICAgIGNvbnN0IGlubmVyRW5kQWRqdXN0ZWRBbmdsZSA9IGVuZEFuZ2xlIC0gaW5uZXJFbmQgLyBpbm5lckVuZEFkanVzdGVkUmFkaXVzO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBpZiAoY2lyY3VsYXIpIHtcbiAgICAgICAgLy8gVGhlIGZpcnN0IGFyYyBzZWdtZW50cyBmcm9tIHBvaW50IDEgdG8gcG9pbnQgYSB0byBwb2ludCAyXG4gICAgICAgIGNvbnN0IG91dGVyTWlkQWRqdXN0ZWRBbmdsZSA9IChvdXRlclN0YXJ0QWRqdXN0ZWRBbmdsZSArIG91dGVyRW5kQWRqdXN0ZWRBbmdsZSkgLyAyO1xuICAgICAgICBjdHguYXJjKHgsIHksIG91dGVyUmFkaXVzLCBvdXRlclN0YXJ0QWRqdXN0ZWRBbmdsZSwgb3V0ZXJNaWRBZGp1c3RlZEFuZ2xlKTtcbiAgICAgICAgY3R4LmFyYyh4LCB5LCBvdXRlclJhZGl1cywgb3V0ZXJNaWRBZGp1c3RlZEFuZ2xlLCBvdXRlckVuZEFkanVzdGVkQW5nbGUpO1xuICAgICAgICAvLyBUaGUgY29ybmVyIHNlZ21lbnQgZnJvbSBwb2ludCAyIHRvIHBvaW50IDNcbiAgICAgICAgaWYgKG91dGVyRW5kID4gMCkge1xuICAgICAgICAgICAgY29uc3QgcENlbnRlciA9IHJUaGV0YVRvWFkob3V0ZXJFbmRBZGp1c3RlZFJhZGl1cywgb3V0ZXJFbmRBZGp1c3RlZEFuZ2xlLCB4LCB5KTtcbiAgICAgICAgICAgIGN0eC5hcmMocENlbnRlci54LCBwQ2VudGVyLnksIG91dGVyRW5kLCBvdXRlckVuZEFkanVzdGVkQW5nbGUsIGVuZEFuZ2xlICsgSEFMRl9QSSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlIGxpbmUgZnJvbSBwb2ludCAzIHRvIHBvaW50IDRcbiAgICAgICAgY29uc3QgcDQgPSByVGhldGFUb1hZKGlubmVyRW5kQWRqdXN0ZWRSYWRpdXMsIGVuZEFuZ2xlLCB4LCB5KTtcbiAgICAgICAgY3R4LmxpbmVUbyhwNC54LCBwNC55KTtcbiAgICAgICAgLy8gVGhlIGNvcm5lciBzZWdtZW50IGZyb20gcG9pbnQgNCB0byBwb2ludCA1XG4gICAgICAgIGlmIChpbm5lckVuZCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHBDZW50ZXIgPSByVGhldGFUb1hZKGlubmVyRW5kQWRqdXN0ZWRSYWRpdXMsIGlubmVyRW5kQWRqdXN0ZWRBbmdsZSwgeCwgeSk7XG4gICAgICAgICAgICBjdHguYXJjKHBDZW50ZXIueCwgcENlbnRlci55LCBpbm5lckVuZCwgZW5kQW5nbGUgKyBIQUxGX1BJLCBpbm5lckVuZEFkanVzdGVkQW5nbGUgKyBNYXRoLlBJKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgaW5uZXIgYXJjIGZyb20gcG9pbnQgNSB0byBwb2ludCBiIHRvIHBvaW50IDZcbiAgICAgICAgY29uc3QgaW5uZXJNaWRBZGp1c3RlZEFuZ2xlID0gKGVuZEFuZ2xlIC0gaW5uZXJFbmQgLyBpbm5lclJhZGl1cyArIChzdGFydEFuZ2xlICsgaW5uZXJTdGFydCAvIGlubmVyUmFkaXVzKSkgLyAyO1xuICAgICAgICBjdHguYXJjKHgsIHksIGlubmVyUmFkaXVzLCBlbmRBbmdsZSAtIGlubmVyRW5kIC8gaW5uZXJSYWRpdXMsIGlubmVyTWlkQWRqdXN0ZWRBbmdsZSwgdHJ1ZSk7XG4gICAgICAgIGN0eC5hcmMoeCwgeSwgaW5uZXJSYWRpdXMsIGlubmVyTWlkQWRqdXN0ZWRBbmdsZSwgc3RhcnRBbmdsZSArIGlubmVyU3RhcnQgLyBpbm5lclJhZGl1cywgdHJ1ZSk7XG4gICAgICAgIC8vIFRoZSBjb3JuZXIgc2VnbWVudCBmcm9tIHBvaW50IDYgdG8gcG9pbnQgN1xuICAgICAgICBpZiAoaW5uZXJTdGFydCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHBDZW50ZXIgPSByVGhldGFUb1hZKGlubmVyU3RhcnRBZGp1c3RlZFJhZGl1cywgaW5uZXJTdGFydEFkanVzdGVkQW5nbGUsIHgsIHkpO1xuICAgICAgICAgICAgY3R4LmFyYyhwQ2VudGVyLngsIHBDZW50ZXIueSwgaW5uZXJTdGFydCwgaW5uZXJTdGFydEFkanVzdGVkQW5nbGUgKyBNYXRoLlBJLCBzdGFydEFuZ2xlIC0gSEFMRl9QSSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlIGxpbmUgZnJvbSBwb2ludCA3IHRvIHBvaW50IDhcbiAgICAgICAgY29uc3QgcDggPSByVGhldGFUb1hZKG91dGVyU3RhcnRBZGp1c3RlZFJhZGl1cywgc3RhcnRBbmdsZSwgeCwgeSk7XG4gICAgICAgIGN0eC5saW5lVG8ocDgueCwgcDgueSk7XG4gICAgICAgIC8vIFRoZSBjb3JuZXIgc2VnbWVudCBmcm9tIHBvaW50IDggdG8gcG9pbnQgMVxuICAgICAgICBpZiAob3V0ZXJTdGFydCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHBDZW50ZXIgPSByVGhldGFUb1hZKG91dGVyU3RhcnRBZGp1c3RlZFJhZGl1cywgb3V0ZXJTdGFydEFkanVzdGVkQW5nbGUsIHgsIHkpO1xuICAgICAgICAgICAgY3R4LmFyYyhwQ2VudGVyLngsIHBDZW50ZXIueSwgb3V0ZXJTdGFydCwgc3RhcnRBbmdsZSAtIEhBTEZfUEksIG91dGVyU3RhcnRBZGp1c3RlZEFuZ2xlKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGN0eC5tb3ZlVG8oeCwgeSk7XG4gICAgICAgIGNvbnN0IG91dGVyU3RhcnRYID0gTWF0aC5jb3Mob3V0ZXJTdGFydEFkanVzdGVkQW5nbGUpICogb3V0ZXJSYWRpdXMgKyB4O1xuICAgICAgICBjb25zdCBvdXRlclN0YXJ0WSA9IE1hdGguc2luKG91dGVyU3RhcnRBZGp1c3RlZEFuZ2xlKSAqIG91dGVyUmFkaXVzICsgeTtcbiAgICAgICAgY3R4LmxpbmVUbyhvdXRlclN0YXJ0WCwgb3V0ZXJTdGFydFkpO1xuICAgICAgICBjb25zdCBvdXRlckVuZFggPSBNYXRoLmNvcyhvdXRlckVuZEFkanVzdGVkQW5nbGUpICogb3V0ZXJSYWRpdXMgKyB4O1xuICAgICAgICBjb25zdCBvdXRlckVuZFkgPSBNYXRoLnNpbihvdXRlckVuZEFkanVzdGVkQW5nbGUpICogb3V0ZXJSYWRpdXMgKyB5O1xuICAgICAgICBjdHgubGluZVRvKG91dGVyRW5kWCwgb3V0ZXJFbmRZKTtcbiAgICB9XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xufVxuZnVuY3Rpb24gZHJhd0FyYyhjdHgsIGVsZW1lbnQsIG9mZnNldCwgc3BhY2luZywgY2lyY3VsYXIpIHtcbiAgICBjb25zdCB7IGZ1bGxDaXJjbGVzICwgc3RhcnRBbmdsZSAsIGNpcmN1bWZlcmVuY2UgIH0gPSBlbGVtZW50O1xuICAgIGxldCBlbmRBbmdsZSA9IGVsZW1lbnQuZW5kQW5nbGU7XG4gICAgaWYgKGZ1bGxDaXJjbGVzKSB7XG4gICAgICAgIHBhdGhBcmMoY3R4LCBlbGVtZW50LCBvZmZzZXQsIHNwYWNpbmcsIGVuZEFuZ2xlLCBjaXJjdWxhcik7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBmdWxsQ2lyY2xlczsgKytpKXtcbiAgICAgICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc05hTihjaXJjdW1mZXJlbmNlKSkge1xuICAgICAgICAgICAgZW5kQW5nbGUgPSBzdGFydEFuZ2xlICsgKGNpcmN1bWZlcmVuY2UgJSBUQVUgfHwgVEFVKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwYXRoQXJjKGN0eCwgZWxlbWVudCwgb2Zmc2V0LCBzcGFjaW5nLCBlbmRBbmdsZSwgY2lyY3VsYXIpO1xuICAgIGN0eC5maWxsKCk7XG4gICAgcmV0dXJuIGVuZEFuZ2xlO1xufVxuZnVuY3Rpb24gZHJhd0JvcmRlcihjdHgsIGVsZW1lbnQsIG9mZnNldCwgc3BhY2luZywgY2lyY3VsYXIpIHtcbiAgICBjb25zdCB7IGZ1bGxDaXJjbGVzICwgc3RhcnRBbmdsZSAsIGNpcmN1bWZlcmVuY2UgLCBvcHRpb25zICB9ID0gZWxlbWVudDtcbiAgICBjb25zdCB7IGJvcmRlcldpZHRoICwgYm9yZGVySm9pblN0eWxlICwgYm9yZGVyRGFzaCAsIGJvcmRlckRhc2hPZmZzZXQgIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IGlubmVyID0gb3B0aW9ucy5ib3JkZXJBbGlnbiA9PT0gJ2lubmVyJztcbiAgICBpZiAoIWJvcmRlcldpZHRoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY3R4LnNldExpbmVEYXNoKGJvcmRlckRhc2ggfHwgW10pO1xuICAgIGN0eC5saW5lRGFzaE9mZnNldCA9IGJvcmRlckRhc2hPZmZzZXQ7XG4gICAgaWYgKGlubmVyKSB7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSBib3JkZXJXaWR0aCAqIDI7XG4gICAgICAgIGN0eC5saW5lSm9pbiA9IGJvcmRlckpvaW5TdHlsZSB8fCAncm91bmQnO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSBib3JkZXJXaWR0aDtcbiAgICAgICAgY3R4LmxpbmVKb2luID0gYm9yZGVySm9pblN0eWxlIHx8ICdiZXZlbCc7XG4gICAgfVxuICAgIGxldCBlbmRBbmdsZSA9IGVsZW1lbnQuZW5kQW5nbGU7XG4gICAgaWYgKGZ1bGxDaXJjbGVzKSB7XG4gICAgICAgIHBhdGhBcmMoY3R4LCBlbGVtZW50LCBvZmZzZXQsIHNwYWNpbmcsIGVuZEFuZ2xlLCBjaXJjdWxhcik7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBmdWxsQ2lyY2xlczsgKytpKXtcbiAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzTmFOKGNpcmN1bWZlcmVuY2UpKSB7XG4gICAgICAgICAgICBlbmRBbmdsZSA9IHN0YXJ0QW5nbGUgKyAoY2lyY3VtZmVyZW5jZSAlIFRBVSB8fCBUQVUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChpbm5lcikge1xuICAgICAgICBjbGlwQXJjKGN0eCwgZWxlbWVudCwgZW5kQW5nbGUpO1xuICAgIH1cbiAgICBpZiAoIWZ1bGxDaXJjbGVzKSB7XG4gICAgICAgIHBhdGhBcmMoY3R4LCBlbGVtZW50LCBvZmZzZXQsIHNwYWNpbmcsIGVuZEFuZ2xlLCBjaXJjdWxhcik7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICB9XG59XG5jbGFzcyBBcmNFbGVtZW50IGV4dGVuZHMgRWxlbWVudCB7XG4gICAgc3RhdGljIGlkID0gJ2FyYyc7XG4gICAgc3RhdGljIGRlZmF1bHRzID0ge1xuICAgICAgICBib3JkZXJBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIGJvcmRlckNvbG9yOiAnI2ZmZicsXG4gICAgICAgIGJvcmRlckRhc2g6IFtdLFxuICAgICAgICBib3JkZXJEYXNoT2Zmc2V0OiAwLFxuICAgICAgICBib3JkZXJKb2luU3R5bGU6IHVuZGVmaW5lZCxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAwLFxuICAgICAgICBib3JkZXJXaWR0aDogMixcbiAgICAgICAgb2Zmc2V0OiAwLFxuICAgICAgICBzcGFjaW5nOiAwLFxuICAgICAgICBhbmdsZTogdW5kZWZpbmVkLFxuICAgICAgICBjaXJjdWxhcjogdHJ1ZVxuICAgIH07XG4gICAgc3RhdGljIGRlZmF1bHRSb3V0ZXMgPSB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2JhY2tncm91bmRDb2xvcidcbiAgICB9O1xuICAgIHN0YXRpYyBkZXNjcmlwdG9ycyA9IHtcbiAgICAgICAgX3NjcmlwdGFibGU6IHRydWUsXG4gICAgICAgIF9pbmRleGFibGU6IChuYW1lKT0+bmFtZSAhPT0gJ2JvcmRlckRhc2gnXG4gICAgfTtcbiAgICBjaXJjdW1mZXJlbmNlO1xuICAgIGVuZEFuZ2xlO1xuICAgIGZ1bGxDaXJjbGVzO1xuICAgIGlubmVyUmFkaXVzO1xuICAgIG91dGVyUmFkaXVzO1xuICAgIHBpeGVsTWFyZ2luO1xuICAgIHN0YXJ0QW5nbGU7XG4gICAgY29uc3RydWN0b3IoY2ZnKXtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmNpcmN1bWZlcmVuY2UgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuc3RhcnRBbmdsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5lbmRBbmdsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5pbm5lclJhZGl1cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5vdXRlclJhZGl1cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5waXhlbE1hcmdpbiA9IDA7XG4gICAgICAgIHRoaXMuZnVsbENpcmNsZXMgPSAwO1xuICAgICAgICBpZiAoY2ZnKSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIGNmZyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaW5SYW5nZShjaGFydFgsIGNoYXJ0WSwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICBjb25zdCBwb2ludCA9IHRoaXMuZ2V0UHJvcHMoW1xuICAgICAgICAgICAgJ3gnLFxuICAgICAgICAgICAgJ3knXG4gICAgICAgIF0sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgICBjb25zdCB7IGFuZ2xlICwgZGlzdGFuY2UgIH0gPSBnZXRBbmdsZUZyb21Qb2ludChwb2ludCwge1xuICAgICAgICAgICAgeDogY2hhcnRYLFxuICAgICAgICAgICAgeTogY2hhcnRZXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB7IHN0YXJ0QW5nbGUgLCBlbmRBbmdsZSAsIGlubmVyUmFkaXVzICwgb3V0ZXJSYWRpdXMgLCBjaXJjdW1mZXJlbmNlICB9ID0gdGhpcy5nZXRQcm9wcyhbXG4gICAgICAgICAgICAnc3RhcnRBbmdsZScsXG4gICAgICAgICAgICAnZW5kQW5nbGUnLFxuICAgICAgICAgICAgJ2lubmVyUmFkaXVzJyxcbiAgICAgICAgICAgICdvdXRlclJhZGl1cycsXG4gICAgICAgICAgICAnY2lyY3VtZmVyZW5jZSdcbiAgICAgICAgXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgICAgIGNvbnN0IHJBZGp1c3QgPSAodGhpcy5vcHRpb25zLnNwYWNpbmcgKyB0aGlzLm9wdGlvbnMuYm9yZGVyV2lkdGgpIC8gMjtcbiAgICAgICAgY29uc3QgX2NpcmN1bWZlcmVuY2UgPSB2YWx1ZU9yRGVmYXVsdChjaXJjdW1mZXJlbmNlLCBlbmRBbmdsZSAtIHN0YXJ0QW5nbGUpO1xuICAgICAgICBjb25zdCBiZXR3ZWVuQW5nbGVzID0gX2NpcmN1bWZlcmVuY2UgPj0gVEFVIHx8IF9hbmdsZUJldHdlZW4oYW5nbGUsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlKTtcbiAgICAgICAgY29uc3Qgd2l0aGluUmFkaXVzID0gX2lzQmV0d2VlbihkaXN0YW5jZSwgaW5uZXJSYWRpdXMgKyByQWRqdXN0LCBvdXRlclJhZGl1cyArIHJBZGp1c3QpO1xuICAgICAgICByZXR1cm4gYmV0d2VlbkFuZ2xlcyAmJiB3aXRoaW5SYWRpdXM7XG4gICAgfVxuICAgIGdldENlbnRlclBvaW50KHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgY29uc3QgeyB4ICwgeSAsIHN0YXJ0QW5nbGUgLCBlbmRBbmdsZSAsIGlubmVyUmFkaXVzICwgb3V0ZXJSYWRpdXMgIH0gPSB0aGlzLmdldFByb3BzKFtcbiAgICAgICAgICAgICd4JyxcbiAgICAgICAgICAgICd5JyxcbiAgICAgICAgICAgICdzdGFydEFuZ2xlJyxcbiAgICAgICAgICAgICdlbmRBbmdsZScsXG4gICAgICAgICAgICAnaW5uZXJSYWRpdXMnLFxuICAgICAgICAgICAgJ291dGVyUmFkaXVzJ1xuICAgICAgICBdLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgICAgY29uc3QgeyBvZmZzZXQgLCBzcGFjaW5nICB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBoYWxmQW5nbGUgPSAoc3RhcnRBbmdsZSArIGVuZEFuZ2xlKSAvIDI7XG4gICAgICAgIGNvbnN0IGhhbGZSYWRpdXMgPSAoaW5uZXJSYWRpdXMgKyBvdXRlclJhZGl1cyArIHNwYWNpbmcgKyBvZmZzZXQpIC8gMjtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IHggKyBNYXRoLmNvcyhoYWxmQW5nbGUpICogaGFsZlJhZGl1cyxcbiAgICAgICAgICAgIHk6IHkgKyBNYXRoLnNpbihoYWxmQW5nbGUpICogaGFsZlJhZGl1c1xuICAgICAgICB9O1xuICAgIH1cbiAgICB0b29sdGlwUG9zaXRpb24odXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRDZW50ZXJQb2ludCh1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICB9XG4gICAgZHJhdyhjdHgpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zICwgY2lyY3VtZmVyZW5jZSAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IChvcHRpb25zLm9mZnNldCB8fCAwKSAvIDQ7XG4gICAgICAgIGNvbnN0IHNwYWNpbmcgPSAob3B0aW9ucy5zcGFjaW5nIHx8IDApIC8gMjtcbiAgICAgICAgY29uc3QgY2lyY3VsYXIgPSBvcHRpb25zLmNpcmN1bGFyO1xuICAgICAgICB0aGlzLnBpeGVsTWFyZ2luID0gb3B0aW9ucy5ib3JkZXJBbGlnbiA9PT0gJ2lubmVyJyA/IDAuMzMgOiAwO1xuICAgICAgICB0aGlzLmZ1bGxDaXJjbGVzID0gY2lyY3VtZmVyZW5jZSA+IFRBVSA/IE1hdGguZmxvb3IoY2lyY3VtZmVyZW5jZSAvIFRBVSkgOiAwO1xuICAgICAgICBpZiAoY2lyY3VtZmVyZW5jZSA9PT0gMCB8fCB0aGlzLmlubmVyUmFkaXVzIDwgMCB8fCB0aGlzLm91dGVyUmFkaXVzIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIGNvbnN0IGhhbGZBbmdsZSA9ICh0aGlzLnN0YXJ0QW5nbGUgKyB0aGlzLmVuZEFuZ2xlKSAvIDI7XG4gICAgICAgIGN0eC50cmFuc2xhdGUoTWF0aC5jb3MoaGFsZkFuZ2xlKSAqIG9mZnNldCwgTWF0aC5zaW4oaGFsZkFuZ2xlKSAqIG9mZnNldCk7XG4gICAgICAgIGNvbnN0IGZpeCA9IDEgLSBNYXRoLnNpbihNYXRoLm1pbihQSSwgY2lyY3VtZmVyZW5jZSB8fCAwKSk7XG4gICAgICAgIGNvbnN0IHJhZGl1c09mZnNldCA9IG9mZnNldCAqIGZpeDtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yO1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBvcHRpb25zLmJvcmRlckNvbG9yO1xuICAgICAgICBkcmF3QXJjKGN0eCwgdGhpcywgcmFkaXVzT2Zmc2V0LCBzcGFjaW5nLCBjaXJjdWxhcik7XG4gICAgICAgIGRyYXdCb3JkZXIoY3R4LCB0aGlzLCByYWRpdXNPZmZzZXQsIHNwYWNpbmcsIGNpcmN1bGFyKTtcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNldFN0eWxlKGN0eCwgb3B0aW9ucywgc3R5bGUgPSBvcHRpb25zKSB7XG4gICAgY3R4LmxpbmVDYXAgPSB2YWx1ZU9yRGVmYXVsdChzdHlsZS5ib3JkZXJDYXBTdHlsZSwgb3B0aW9ucy5ib3JkZXJDYXBTdHlsZSk7XG4gICAgY3R4LnNldExpbmVEYXNoKHZhbHVlT3JEZWZhdWx0KHN0eWxlLmJvcmRlckRhc2gsIG9wdGlvbnMuYm9yZGVyRGFzaCkpO1xuICAgIGN0eC5saW5lRGFzaE9mZnNldCA9IHZhbHVlT3JEZWZhdWx0KHN0eWxlLmJvcmRlckRhc2hPZmZzZXQsIG9wdGlvbnMuYm9yZGVyRGFzaE9mZnNldCk7XG4gICAgY3R4LmxpbmVKb2luID0gdmFsdWVPckRlZmF1bHQoc3R5bGUuYm9yZGVySm9pblN0eWxlLCBvcHRpb25zLmJvcmRlckpvaW5TdHlsZSk7XG4gICAgY3R4LmxpbmVXaWR0aCA9IHZhbHVlT3JEZWZhdWx0KHN0eWxlLmJvcmRlcldpZHRoLCBvcHRpb25zLmJvcmRlcldpZHRoKTtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSB2YWx1ZU9yRGVmYXVsdChzdHlsZS5ib3JkZXJDb2xvciwgb3B0aW9ucy5ib3JkZXJDb2xvcik7XG59XG5mdW5jdGlvbiBsaW5lVG8oY3R4LCBwcmV2aW91cywgdGFyZ2V0KSB7XG4gICAgY3R4LmxpbmVUbyh0YXJnZXQueCwgdGFyZ2V0LnkpO1xufVxuIGZ1bmN0aW9uIGdldExpbmVNZXRob2Qob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLnN0ZXBwZWQpIHtcbiAgICAgICAgcmV0dXJuIF9zdGVwcGVkTGluZVRvO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy50ZW5zaW9uIHx8IG9wdGlvbnMuY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSA9PT0gJ21vbm90b25lJykge1xuICAgICAgICByZXR1cm4gX2JlemllckN1cnZlVG87XG4gICAgfVxuICAgIHJldHVybiBsaW5lVG87XG59XG5mdW5jdGlvbiBwYXRoVmFycyhwb2ludHMsIHNlZ21lbnQsIHBhcmFtcyA9IHt9KSB7XG4gICAgY29uc3QgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuICAgIGNvbnN0IHsgc3RhcnQ6IHBhcmFtc1N0YXJ0ID0gMCAsIGVuZDogcGFyYW1zRW5kID0gY291bnQgLSAxICB9ID0gcGFyYW1zO1xuICAgIGNvbnN0IHsgc3RhcnQ6IHNlZ21lbnRTdGFydCAsIGVuZDogc2VnbWVudEVuZCAgfSA9IHNlZ21lbnQ7XG4gICAgY29uc3Qgc3RhcnQgPSBNYXRoLm1heChwYXJhbXNTdGFydCwgc2VnbWVudFN0YXJ0KTtcbiAgICBjb25zdCBlbmQgPSBNYXRoLm1pbihwYXJhbXNFbmQsIHNlZ21lbnRFbmQpO1xuICAgIGNvbnN0IG91dHNpZGUgPSBwYXJhbXNTdGFydCA8IHNlZ21lbnRTdGFydCAmJiBwYXJhbXNFbmQgPCBzZWdtZW50U3RhcnQgfHwgcGFyYW1zU3RhcnQgPiBzZWdtZW50RW5kICYmIHBhcmFtc0VuZCA+IHNlZ21lbnRFbmQ7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY291bnQsXG4gICAgICAgIHN0YXJ0LFxuICAgICAgICBsb29wOiBzZWdtZW50Lmxvb3AsXG4gICAgICAgIGlsZW46IGVuZCA8IHN0YXJ0ICYmICFvdXRzaWRlID8gY291bnQgKyBlbmQgLSBzdGFydCA6IGVuZCAtIHN0YXJ0XG4gICAgfTtcbn1cbiBmdW5jdGlvbiBwYXRoU2VnbWVudChjdHgsIGxpbmUsIHNlZ21lbnQsIHBhcmFtcykge1xuICAgIGNvbnN0IHsgcG9pbnRzICwgb3B0aW9ucyAgfSA9IGxpbmU7XG4gICAgY29uc3QgeyBjb3VudCAsIHN0YXJ0ICwgbG9vcCAsIGlsZW4gIH0gPSBwYXRoVmFycyhwb2ludHMsIHNlZ21lbnQsIHBhcmFtcyk7XG4gICAgY29uc3QgbGluZU1ldGhvZCA9IGdldExpbmVNZXRob2Qob3B0aW9ucyk7XG4gICAgbGV0IHsgbW92ZSA9dHJ1ZSAsIHJldmVyc2UgIH0gPSBwYXJhbXMgfHwge307XG4gICAgbGV0IGksIHBvaW50LCBwcmV2O1xuICAgIGZvcihpID0gMDsgaSA8PSBpbGVuOyArK2kpe1xuICAgICAgICBwb2ludCA9IHBvaW50c1soc3RhcnQgKyAocmV2ZXJzZSA/IGlsZW4gLSBpIDogaSkpICUgY291bnRdO1xuICAgICAgICBpZiAocG9pbnQuc2tpcCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gZWxzZSBpZiAobW92ZSkge1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyhwb2ludC54LCBwb2ludC55KTtcbiAgICAgICAgICAgIG1vdmUgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxpbmVNZXRob2QoY3R4LCBwcmV2LCBwb2ludCwgcmV2ZXJzZSwgb3B0aW9ucy5zdGVwcGVkKTtcbiAgICAgICAgfVxuICAgICAgICBwcmV2ID0gcG9pbnQ7XG4gICAgfVxuICAgIGlmIChsb29wKSB7XG4gICAgICAgIHBvaW50ID0gcG9pbnRzWyhzdGFydCArIChyZXZlcnNlID8gaWxlbiA6IDApKSAlIGNvdW50XTtcbiAgICAgICAgbGluZU1ldGhvZChjdHgsIHByZXYsIHBvaW50LCByZXZlcnNlLCBvcHRpb25zLnN0ZXBwZWQpO1xuICAgIH1cbiAgICByZXR1cm4gISFsb29wO1xufVxuIGZ1bmN0aW9uIGZhc3RQYXRoU2VnbWVudChjdHgsIGxpbmUsIHNlZ21lbnQsIHBhcmFtcykge1xuICAgIGNvbnN0IHBvaW50cyA9IGxpbmUucG9pbnRzO1xuICAgIGNvbnN0IHsgY291bnQgLCBzdGFydCAsIGlsZW4gIH0gPSBwYXRoVmFycyhwb2ludHMsIHNlZ21lbnQsIHBhcmFtcyk7XG4gICAgY29uc3QgeyBtb3ZlID10cnVlICwgcmV2ZXJzZSAgfSA9IHBhcmFtcyB8fCB7fTtcbiAgICBsZXQgYXZnWCA9IDA7XG4gICAgbGV0IGNvdW50WCA9IDA7XG4gICAgbGV0IGksIHBvaW50LCBwcmV2WCwgbWluWSwgbWF4WSwgbGFzdFk7XG4gICAgY29uc3QgcG9pbnRJbmRleCA9IChpbmRleCk9PihzdGFydCArIChyZXZlcnNlID8gaWxlbiAtIGluZGV4IDogaW5kZXgpKSAlIGNvdW50O1xuICAgIGNvbnN0IGRyYXdYID0gKCk9PntcbiAgICAgICAgaWYgKG1pblkgIT09IG1heFkpIHtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oYXZnWCwgbWF4WSk7XG4gICAgICAgICAgICBjdHgubGluZVRvKGF2Z1gsIG1pblkpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyhhdmdYLCBsYXN0WSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGlmIChtb3ZlKSB7XG4gICAgICAgIHBvaW50ID0gcG9pbnRzW3BvaW50SW5kZXgoMCldO1xuICAgICAgICBjdHgubW92ZVRvKHBvaW50LngsIHBvaW50LnkpO1xuICAgIH1cbiAgICBmb3IoaSA9IDA7IGkgPD0gaWxlbjsgKytpKXtcbiAgICAgICAgcG9pbnQgPSBwb2ludHNbcG9pbnRJbmRleChpKV07XG4gICAgICAgIGlmIChwb2ludC5za2lwKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB4ID0gcG9pbnQueDtcbiAgICAgICAgY29uc3QgeSA9IHBvaW50Lnk7XG4gICAgICAgIGNvbnN0IHRydW5jWCA9IHggfCAwO1xuICAgICAgICBpZiAodHJ1bmNYID09PSBwcmV2WCkge1xuICAgICAgICAgICAgaWYgKHkgPCBtaW5ZKSB7XG4gICAgICAgICAgICAgICAgbWluWSA9IHk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHkgPiBtYXhZKSB7XG4gICAgICAgICAgICAgICAgbWF4WSA9IHk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhdmdYID0gKGNvdW50WCAqIGF2Z1ggKyB4KSAvICsrY291bnRYO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZHJhd1goKTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeCwgeSk7XG4gICAgICAgICAgICBwcmV2WCA9IHRydW5jWDtcbiAgICAgICAgICAgIGNvdW50WCA9IDA7XG4gICAgICAgICAgICBtaW5ZID0gbWF4WSA9IHk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdFkgPSB5O1xuICAgIH1cbiAgICBkcmF3WCgpO1xufVxuIGZ1bmN0aW9uIF9nZXRTZWdtZW50TWV0aG9kKGxpbmUpIHtcbiAgICBjb25zdCBvcHRzID0gbGluZS5vcHRpb25zO1xuICAgIGNvbnN0IGJvcmRlckRhc2ggPSBvcHRzLmJvcmRlckRhc2ggJiYgb3B0cy5ib3JkZXJEYXNoLmxlbmd0aDtcbiAgICBjb25zdCB1c2VGYXN0UGF0aCA9ICFsaW5lLl9kZWNpbWF0ZWQgJiYgIWxpbmUuX2xvb3AgJiYgIW9wdHMudGVuc2lvbiAmJiBvcHRzLmN1YmljSW50ZXJwb2xhdGlvbk1vZGUgIT09ICdtb25vdG9uZScgJiYgIW9wdHMuc3RlcHBlZCAmJiAhYm9yZGVyRGFzaDtcbiAgICByZXR1cm4gdXNlRmFzdFBhdGggPyBmYXN0UGF0aFNlZ21lbnQgOiBwYXRoU2VnbWVudDtcbn1cbiBmdW5jdGlvbiBfZ2V0SW50ZXJwb2xhdGlvbk1ldGhvZChvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuc3RlcHBlZCkge1xuICAgICAgICByZXR1cm4gX3N0ZXBwZWRJbnRlcnBvbGF0aW9uO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy50ZW5zaW9uIHx8IG9wdGlvbnMuY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSA9PT0gJ21vbm90b25lJykge1xuICAgICAgICByZXR1cm4gX2JlemllckludGVycG9sYXRpb247XG4gICAgfVxuICAgIHJldHVybiBfcG9pbnRJbkxpbmU7XG59XG5mdW5jdGlvbiBzdHJva2VQYXRoV2l0aENhY2hlKGN0eCwgbGluZSwgc3RhcnQsIGNvdW50KSB7XG4gICAgbGV0IHBhdGggPSBsaW5lLl9wYXRoO1xuICAgIGlmICghcGF0aCkge1xuICAgICAgICBwYXRoID0gbGluZS5fcGF0aCA9IG5ldyBQYXRoMkQoKTtcbiAgICAgICAgaWYgKGxpbmUucGF0aChwYXRoLCBzdGFydCwgY291bnQpKSB7XG4gICAgICAgICAgICBwYXRoLmNsb3NlUGF0aCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldFN0eWxlKGN0eCwgbGluZS5vcHRpb25zKTtcbiAgICBjdHguc3Ryb2tlKHBhdGgpO1xufVxuZnVuY3Rpb24gc3Ryb2tlUGF0aERpcmVjdChjdHgsIGxpbmUsIHN0YXJ0LCBjb3VudCkge1xuICAgIGNvbnN0IHsgc2VnbWVudHMgLCBvcHRpb25zICB9ID0gbGluZTtcbiAgICBjb25zdCBzZWdtZW50TWV0aG9kID0gX2dldFNlZ21lbnRNZXRob2QobGluZSk7XG4gICAgZm9yIChjb25zdCBzZWdtZW50IG9mIHNlZ21lbnRzKXtcbiAgICAgICAgc2V0U3R5bGUoY3R4LCBvcHRpb25zLCBzZWdtZW50LnN0eWxlKTtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBpZiAoc2VnbWVudE1ldGhvZChjdHgsIGxpbmUsIHNlZ21lbnQsIHtcbiAgICAgICAgICAgIHN0YXJ0LFxuICAgICAgICAgICAgZW5kOiBzdGFydCArIGNvdW50IC0gMVxuICAgICAgICB9KSkge1xuICAgICAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICB9XG59XG5jb25zdCB1c2VQYXRoMkQgPSB0eXBlb2YgUGF0aDJEID09PSAnZnVuY3Rpb24nO1xuZnVuY3Rpb24gZHJhdyhjdHgsIGxpbmUsIHN0YXJ0LCBjb3VudCkge1xuICAgIGlmICh1c2VQYXRoMkQgJiYgIWxpbmUub3B0aW9ucy5zZWdtZW50KSB7XG4gICAgICAgIHN0cm9rZVBhdGhXaXRoQ2FjaGUoY3R4LCBsaW5lLCBzdGFydCwgY291bnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHN0cm9rZVBhdGhEaXJlY3QoY3R4LCBsaW5lLCBzdGFydCwgY291bnQpO1xuICAgIH1cbn1cbmNsYXNzIExpbmVFbGVtZW50IGV4dGVuZHMgRWxlbWVudCB7XG4gICAgc3RhdGljIGlkID0gJ2xpbmUnO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgYm9yZGVyQ2FwU3R5bGU6ICdidXR0JyxcbiAgICAgICAgYm9yZGVyRGFzaDogW10sXG4gICAgICAgIGJvcmRlckRhc2hPZmZzZXQ6IDAsXG4gICAgICAgIGJvcmRlckpvaW5TdHlsZTogJ21pdGVyJyxcbiAgICAgICAgYm9yZGVyV2lkdGg6IDMsXG4gICAgICAgIGNhcEJlemllclBvaW50czogdHJ1ZSxcbiAgICAgICAgY3ViaWNJbnRlcnBvbGF0aW9uTW9kZTogJ2RlZmF1bHQnLFxuICAgICAgICBmaWxsOiBmYWxzZSxcbiAgICAgICAgc3BhbkdhcHM6IGZhbHNlLFxuICAgICAgICBzdGVwcGVkOiBmYWxzZSxcbiAgICAgICAgdGVuc2lvbjogMFxuICAgIH07XG4gc3RhdGljIGRlZmF1bHRSb3V0ZXMgPSB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2JhY2tncm91bmRDb2xvcicsXG4gICAgICAgIGJvcmRlckNvbG9yOiAnYm9yZGVyQ29sb3InXG4gICAgfTtcbiAgICBzdGF0aWMgZGVzY3JpcHRvcnMgPSB7XG4gICAgICAgIF9zY3JpcHRhYmxlOiB0cnVlLFxuICAgICAgICBfaW5kZXhhYmxlOiAobmFtZSk9Pm5hbWUgIT09ICdib3JkZXJEYXNoJyAmJiBuYW1lICE9PSAnZmlsbCdcbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKGNmZyl7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuYW5pbWF0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2NoYXJ0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9sb29wID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9mdWxsTG9vcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fcGF0aCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fcG9pbnRzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9zZWdtZW50cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fZGVjaW1hdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3BvaW50c1VwZGF0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fZGF0YXNldEluZGV4ID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoY2ZnKSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIGNmZyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlQ29udHJvbFBvaW50cyhjaGFydEFyZWEsIGluZGV4QXhpcykge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBpZiAoKG9wdGlvbnMudGVuc2lvbiB8fCBvcHRpb25zLmN1YmljSW50ZXJwb2xhdGlvbk1vZGUgPT09ICdtb25vdG9uZScpICYmICFvcHRpb25zLnN0ZXBwZWQgJiYgIXRoaXMuX3BvaW50c1VwZGF0ZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGxvb3AgPSBvcHRpb25zLnNwYW5HYXBzID8gdGhpcy5fbG9vcCA6IHRoaXMuX2Z1bGxMb29wO1xuICAgICAgICAgICAgX3VwZGF0ZUJlemllckNvbnRyb2xQb2ludHModGhpcy5fcG9pbnRzLCBvcHRpb25zLCBjaGFydEFyZWEsIGxvb3AsIGluZGV4QXhpcyk7XG4gICAgICAgICAgICB0aGlzLl9wb2ludHNVcGRhdGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXQgcG9pbnRzKHBvaW50cykge1xuICAgICAgICB0aGlzLl9wb2ludHMgPSBwb2ludHM7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9zZWdtZW50cztcbiAgICAgICAgZGVsZXRlIHRoaXMuX3BhdGg7XG4gICAgICAgIHRoaXMuX3BvaW50c1VwZGF0ZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgZ2V0IHBvaW50cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BvaW50cztcbiAgICB9XG4gICAgZ2V0IHNlZ21lbnRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2VnbWVudHMgfHwgKHRoaXMuX3NlZ21lbnRzID0gX2NvbXB1dGVTZWdtZW50cyh0aGlzLCB0aGlzLm9wdGlvbnMuc2VnbWVudCkpO1xuICAgIH1cbiBmaXJzdCgpIHtcbiAgICAgICAgY29uc3Qgc2VnbWVudHMgPSB0aGlzLnNlZ21lbnRzO1xuICAgICAgICBjb25zdCBwb2ludHMgPSB0aGlzLnBvaW50cztcbiAgICAgICAgcmV0dXJuIHNlZ21lbnRzLmxlbmd0aCAmJiBwb2ludHNbc2VnbWVudHNbMF0uc3RhcnRdO1xuICAgIH1cbiBsYXN0KCkge1xuICAgICAgICBjb25zdCBzZWdtZW50cyA9IHRoaXMuc2VnbWVudHM7XG4gICAgICAgIGNvbnN0IHBvaW50cyA9IHRoaXMucG9pbnRzO1xuICAgICAgICBjb25zdCBjb3VudCA9IHNlZ21lbnRzLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIGNvdW50ICYmIHBvaW50c1tzZWdtZW50c1tjb3VudCAtIDFdLmVuZF07XG4gICAgfVxuIGludGVycG9sYXRlKHBvaW50LCBwcm9wZXJ0eSkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHBvaW50W3Byb3BlcnR5XTtcbiAgICAgICAgY29uc3QgcG9pbnRzID0gdGhpcy5wb2ludHM7XG4gICAgICAgIGNvbnN0IHNlZ21lbnRzID0gX2JvdW5kU2VnbWVudHModGhpcywge1xuICAgICAgICAgICAgcHJvcGVydHksXG4gICAgICAgICAgICBzdGFydDogdmFsdWUsXG4gICAgICAgICAgICBlbmQ6IHZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIXNlZ21lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICBjb25zdCBfaW50ZXJwb2xhdGUgPSBfZ2V0SW50ZXJwb2xhdGlvbk1ldGhvZChvcHRpb25zKTtcbiAgICAgICAgbGV0IGksIGlsZW47XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IHNlZ21lbnRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBjb25zdCB7IHN0YXJ0ICwgZW5kICB9ID0gc2VnbWVudHNbaV07XG4gICAgICAgICAgICBjb25zdCBwMSA9IHBvaW50c1tzdGFydF07XG4gICAgICAgICAgICBjb25zdCBwMiA9IHBvaW50c1tlbmRdO1xuICAgICAgICAgICAgaWYgKHAxID09PSBwMikge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHAxKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHQgPSBNYXRoLmFicygodmFsdWUgLSBwMVtwcm9wZXJ0eV0pIC8gKHAyW3Byb3BlcnR5XSAtIHAxW3Byb3BlcnR5XSkpO1xuICAgICAgICAgICAgY29uc3QgaW50ZXJwb2xhdGVkID0gX2ludGVycG9sYXRlKHAxLCBwMiwgdCwgb3B0aW9ucy5zdGVwcGVkKTtcbiAgICAgICAgICAgIGludGVycG9sYXRlZFtwcm9wZXJ0eV0gPSBwb2ludFtwcm9wZXJ0eV07XG4gICAgICAgICAgICByZXN1bHQucHVzaChpbnRlcnBvbGF0ZWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQubGVuZ3RoID09PSAxID8gcmVzdWx0WzBdIDogcmVzdWx0O1xuICAgIH1cbiBwYXRoU2VnbWVudChjdHgsIHNlZ21lbnQsIHBhcmFtcykge1xuICAgICAgICBjb25zdCBzZWdtZW50TWV0aG9kID0gX2dldFNlZ21lbnRNZXRob2QodGhpcyk7XG4gICAgICAgIHJldHVybiBzZWdtZW50TWV0aG9kKGN0eCwgdGhpcywgc2VnbWVudCwgcGFyYW1zKTtcbiAgICB9XG4gcGF0aChjdHgsIHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCBzZWdtZW50cyA9IHRoaXMuc2VnbWVudHM7XG4gICAgICAgIGNvbnN0IHNlZ21lbnRNZXRob2QgPSBfZ2V0U2VnbWVudE1ldGhvZCh0aGlzKTtcbiAgICAgICAgbGV0IGxvb3AgPSB0aGlzLl9sb29wO1xuICAgICAgICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gICAgICAgIGNvdW50ID0gY291bnQgfHwgdGhpcy5wb2ludHMubGVuZ3RoIC0gc3RhcnQ7XG4gICAgICAgIGZvciAoY29uc3Qgc2VnbWVudCBvZiBzZWdtZW50cyl7XG4gICAgICAgICAgICBsb29wICY9IHNlZ21lbnRNZXRob2QoY3R4LCB0aGlzLCBzZWdtZW50LCB7XG4gICAgICAgICAgICAgICAgc3RhcnQsXG4gICAgICAgICAgICAgICAgZW5kOiBzdGFydCArIGNvdW50IC0gMVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICEhbG9vcDtcbiAgICB9XG4gZHJhdyhjdHgsIGNoYXJ0QXJlYSwgc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMgfHwge307XG4gICAgICAgIGNvbnN0IHBvaW50cyA9IHRoaXMucG9pbnRzIHx8IFtdO1xuICAgICAgICBpZiAocG9pbnRzLmxlbmd0aCAmJiBvcHRpb25zLmJvcmRlcldpZHRoKSB7XG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgZHJhdyhjdHgsIHRoaXMsIHN0YXJ0LCBjb3VudCk7XG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmFuaW1hdGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9wb2ludHNVcGRhdGVkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl9wYXRoID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpblJhbmdlJDEoZWwsIHBvcywgYXhpcywgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBlbC5vcHRpb25zO1xuICAgIGNvbnN0IHsgW2F4aXNdOiB2YWx1ZSAgfSA9IGVsLmdldFByb3BzKFtcbiAgICAgICAgYXhpc1xuICAgIF0sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIHJldHVybiBNYXRoLmFicyhwb3MgLSB2YWx1ZSkgPCBvcHRpb25zLnJhZGl1cyArIG9wdGlvbnMuaGl0UmFkaXVzO1xufVxuY2xhc3MgUG9pbnRFbGVtZW50IGV4dGVuZHMgRWxlbWVudCB7XG4gICAgc3RhdGljIGlkID0gJ3BvaW50JztcbiAgICBwYXJzZWQ7XG4gICAgc2tpcDtcbiAgICBzdG9wO1xuICAgIC8qKlxuICAgKiBAdHlwZSB7YW55fVxuICAgKi8gc3RhdGljIGRlZmF1bHRzID0ge1xuICAgICAgICBib3JkZXJXaWR0aDogMSxcbiAgICAgICAgaGl0UmFkaXVzOiAxLFxuICAgICAgICBob3ZlckJvcmRlcldpZHRoOiAxLFxuICAgICAgICBob3ZlclJhZGl1czogNCxcbiAgICAgICAgcG9pbnRTdHlsZTogJ2NpcmNsZScsXG4gICAgICAgIHJhZGl1czogMyxcbiAgICAgICAgcm90YXRpb246IDBcbiAgICB9O1xuICAgIC8qKlxuICAgKiBAdHlwZSB7YW55fVxuICAgKi8gc3RhdGljIGRlZmF1bHRSb3V0ZXMgPSB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2JhY2tncm91bmRDb2xvcicsXG4gICAgICAgIGJvcmRlckNvbG9yOiAnYm9yZGVyQ29sb3InXG4gICAgfTtcbiAgICBjb25zdHJ1Y3RvcihjZmcpe1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucGFyc2VkID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnNraXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuc3RvcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGNmZykge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBjZmcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGluUmFuZ2UobW91c2VYLCBtb3VzZVksIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgeyB4ICwgeSAgfSA9IHRoaXMuZ2V0UHJvcHMoW1xuICAgICAgICAgICAgJ3gnLFxuICAgICAgICAgICAgJ3knXG4gICAgICAgIF0sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgICByZXR1cm4gTWF0aC5wb3cobW91c2VYIC0geCwgMikgKyBNYXRoLnBvdyhtb3VzZVkgLSB5LCAyKSA8IE1hdGgucG93KG9wdGlvbnMuaGl0UmFkaXVzICsgb3B0aW9ucy5yYWRpdXMsIDIpO1xuICAgIH1cbiAgICBpblhSYW5nZShtb3VzZVgsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGluUmFuZ2UkMSh0aGlzLCBtb3VzZVgsICd4JywgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgfVxuICAgIGluWVJhbmdlKG1vdXNlWSwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gaW5SYW5nZSQxKHRoaXMsIG1vdXNlWSwgJ3knLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICB9XG4gICAgZ2V0Q2VudGVyUG9pbnQodXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICBjb25zdCB7IHggLCB5ICB9ID0gdGhpcy5nZXRQcm9wcyhbXG4gICAgICAgICAgICAneCcsXG4gICAgICAgICAgICAneSdcbiAgICAgICAgXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4LFxuICAgICAgICAgICAgeVxuICAgICAgICB9O1xuICAgIH1cbiAgICBzaXplKG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwgdGhpcy5vcHRpb25zIHx8IHt9O1xuICAgICAgICBsZXQgcmFkaXVzID0gb3B0aW9ucy5yYWRpdXMgfHwgMDtcbiAgICAgICAgcmFkaXVzID0gTWF0aC5tYXgocmFkaXVzLCByYWRpdXMgJiYgb3B0aW9ucy5ob3ZlclJhZGl1cyB8fCAwKTtcbiAgICAgICAgY29uc3QgYm9yZGVyV2lkdGggPSByYWRpdXMgJiYgb3B0aW9ucy5ib3JkZXJXaWR0aCB8fCAwO1xuICAgICAgICByZXR1cm4gKHJhZGl1cyArIGJvcmRlcldpZHRoKSAqIDI7XG4gICAgfVxuICAgIGRyYXcoY3R4LCBhcmVhKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGlmICh0aGlzLnNraXAgfHwgb3B0aW9ucy5yYWRpdXMgPCAwLjEgfHwgIV9pc1BvaW50SW5BcmVhKHRoaXMsIGFyZWEsIHRoaXMuc2l6ZShvcHRpb25zKSAvIDIpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gb3B0aW9ucy5ib3JkZXJDb2xvcjtcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IG9wdGlvbnMuYm9yZGVyV2lkdGg7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLmJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgZHJhd1BvaW50KGN0eCwgb3B0aW9ucywgdGhpcy54LCB0aGlzLnkpO1xuICAgIH1cbiAgICBnZXRSYW5nZSgpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyB8fCB7fTtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBGYWxsYmFja3Mgc2hvdWxkIG5ldmVyIGJlIGhpdCBpbiBwcmFjdGljZVxuICAgICAgICByZXR1cm4gb3B0aW9ucy5yYWRpdXMgKyBvcHRpb25zLmhpdFJhZGl1cztcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldEJhckJvdW5kcyhiYXIsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICBjb25zdCB7IHggLCB5ICwgYmFzZSAsIHdpZHRoICwgaGVpZ2h0ICB9ID0gIGJhci5nZXRQcm9wcyhbXG4gICAgICAgICd4JyxcbiAgICAgICAgJ3knLFxuICAgICAgICAnYmFzZScsXG4gICAgICAgICd3aWR0aCcsXG4gICAgICAgICdoZWlnaHQnXG4gICAgXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgbGV0IGxlZnQsIHJpZ2h0LCB0b3AsIGJvdHRvbSwgaGFsZjtcbiAgICBpZiAoYmFyLmhvcml6b250YWwpIHtcbiAgICAgICAgaGFsZiA9IGhlaWdodCAvIDI7XG4gICAgICAgIGxlZnQgPSBNYXRoLm1pbih4LCBiYXNlKTtcbiAgICAgICAgcmlnaHQgPSBNYXRoLm1heCh4LCBiYXNlKTtcbiAgICAgICAgdG9wID0geSAtIGhhbGY7XG4gICAgICAgIGJvdHRvbSA9IHkgKyBoYWxmO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGhhbGYgPSB3aWR0aCAvIDI7XG4gICAgICAgIGxlZnQgPSB4IC0gaGFsZjtcbiAgICAgICAgcmlnaHQgPSB4ICsgaGFsZjtcbiAgICAgICAgdG9wID0gTWF0aC5taW4oeSwgYmFzZSk7XG4gICAgICAgIGJvdHRvbSA9IE1hdGgubWF4KHksIGJhc2UpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0LFxuICAgICAgICB0b3AsXG4gICAgICAgIHJpZ2h0LFxuICAgICAgICBib3R0b21cbiAgICB9O1xufVxuZnVuY3Rpb24gc2tpcE9yTGltaXQoc2tpcCwgdmFsdWUsIG1pbiwgbWF4KSB7XG4gICAgcmV0dXJuIHNraXAgPyAwIDogX2xpbWl0VmFsdWUodmFsdWUsIG1pbiwgbWF4KTtcbn1cbmZ1bmN0aW9uIHBhcnNlQm9yZGVyV2lkdGgoYmFyLCBtYXhXLCBtYXhIKSB7XG4gICAgY29uc3QgdmFsdWUgPSBiYXIub3B0aW9ucy5ib3JkZXJXaWR0aDtcbiAgICBjb25zdCBza2lwID0gYmFyLmJvcmRlclNraXBwZWQ7XG4gICAgY29uc3QgbyA9IHRvVFJCTCh2YWx1ZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdDogc2tpcE9yTGltaXQoc2tpcC50b3AsIG8udG9wLCAwLCBtYXhIKSxcbiAgICAgICAgcjogc2tpcE9yTGltaXQoc2tpcC5yaWdodCwgby5yaWdodCwgMCwgbWF4VyksXG4gICAgICAgIGI6IHNraXBPckxpbWl0KHNraXAuYm90dG9tLCBvLmJvdHRvbSwgMCwgbWF4SCksXG4gICAgICAgIGw6IHNraXBPckxpbWl0KHNraXAubGVmdCwgby5sZWZ0LCAwLCBtYXhXKVxuICAgIH07XG59XG5mdW5jdGlvbiBwYXJzZUJvcmRlclJhZGl1cyhiYXIsIG1heFcsIG1heEgpIHtcbiAgICBjb25zdCB7IGVuYWJsZUJvcmRlclJhZGl1cyAgfSA9IGJhci5nZXRQcm9wcyhbXG4gICAgICAgICdlbmFibGVCb3JkZXJSYWRpdXMnXG4gICAgXSk7XG4gICAgY29uc3QgdmFsdWUgPSBiYXIub3B0aW9ucy5ib3JkZXJSYWRpdXM7XG4gICAgY29uc3QgbyA9IHRvVFJCTENvcm5lcnModmFsdWUpO1xuICAgIGNvbnN0IG1heFIgPSBNYXRoLm1pbihtYXhXLCBtYXhIKTtcbiAgICBjb25zdCBza2lwID0gYmFyLmJvcmRlclNraXBwZWQ7XG4gICAgY29uc3QgZW5hYmxlQm9yZGVyID0gZW5hYmxlQm9yZGVyUmFkaXVzIHx8IGlzT2JqZWN0KHZhbHVlKTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0b3BMZWZ0OiBza2lwT3JMaW1pdCghZW5hYmxlQm9yZGVyIHx8IHNraXAudG9wIHx8IHNraXAubGVmdCwgby50b3BMZWZ0LCAwLCBtYXhSKSxcbiAgICAgICAgdG9wUmlnaHQ6IHNraXBPckxpbWl0KCFlbmFibGVCb3JkZXIgfHwgc2tpcC50b3AgfHwgc2tpcC5yaWdodCwgby50b3BSaWdodCwgMCwgbWF4UiksXG4gICAgICAgIGJvdHRvbUxlZnQ6IHNraXBPckxpbWl0KCFlbmFibGVCb3JkZXIgfHwgc2tpcC5ib3R0b20gfHwgc2tpcC5sZWZ0LCBvLmJvdHRvbUxlZnQsIDAsIG1heFIpLFxuICAgICAgICBib3R0b21SaWdodDogc2tpcE9yTGltaXQoIWVuYWJsZUJvcmRlciB8fCBza2lwLmJvdHRvbSB8fCBza2lwLnJpZ2h0LCBvLmJvdHRvbVJpZ2h0LCAwLCBtYXhSKVxuICAgIH07XG59XG5mdW5jdGlvbiBib3VuZGluZ1JlY3RzKGJhcikge1xuICAgIGNvbnN0IGJvdW5kcyA9IGdldEJhckJvdW5kcyhiYXIpO1xuICAgIGNvbnN0IHdpZHRoID0gYm91bmRzLnJpZ2h0IC0gYm91bmRzLmxlZnQ7XG4gICAgY29uc3QgaGVpZ2h0ID0gYm91bmRzLmJvdHRvbSAtIGJvdW5kcy50b3A7XG4gICAgY29uc3QgYm9yZGVyID0gcGFyc2VCb3JkZXJXaWR0aChiYXIsIHdpZHRoIC8gMiwgaGVpZ2h0IC8gMik7XG4gICAgY29uc3QgcmFkaXVzID0gcGFyc2VCb3JkZXJSYWRpdXMoYmFyLCB3aWR0aCAvIDIsIGhlaWdodCAvIDIpO1xuICAgIHJldHVybiB7XG4gICAgICAgIG91dGVyOiB7XG4gICAgICAgICAgICB4OiBib3VuZHMubGVmdCxcbiAgICAgICAgICAgIHk6IGJvdW5kcy50b3AsXG4gICAgICAgICAgICB3OiB3aWR0aCxcbiAgICAgICAgICAgIGg6IGhlaWdodCxcbiAgICAgICAgICAgIHJhZGl1c1xuICAgICAgICB9LFxuICAgICAgICBpbm5lcjoge1xuICAgICAgICAgICAgeDogYm91bmRzLmxlZnQgKyBib3JkZXIubCxcbiAgICAgICAgICAgIHk6IGJvdW5kcy50b3AgKyBib3JkZXIudCxcbiAgICAgICAgICAgIHc6IHdpZHRoIC0gYm9yZGVyLmwgLSBib3JkZXIucixcbiAgICAgICAgICAgIGg6IGhlaWdodCAtIGJvcmRlci50IC0gYm9yZGVyLmIsXG4gICAgICAgICAgICByYWRpdXM6IHtcbiAgICAgICAgICAgICAgICB0b3BMZWZ0OiBNYXRoLm1heCgwLCByYWRpdXMudG9wTGVmdCAtIE1hdGgubWF4KGJvcmRlci50LCBib3JkZXIubCkpLFxuICAgICAgICAgICAgICAgIHRvcFJpZ2h0OiBNYXRoLm1heCgwLCByYWRpdXMudG9wUmlnaHQgLSBNYXRoLm1heChib3JkZXIudCwgYm9yZGVyLnIpKSxcbiAgICAgICAgICAgICAgICBib3R0b21MZWZ0OiBNYXRoLm1heCgwLCByYWRpdXMuYm90dG9tTGVmdCAtIE1hdGgubWF4KGJvcmRlci5iLCBib3JkZXIubCkpLFxuICAgICAgICAgICAgICAgIGJvdHRvbVJpZ2h0OiBNYXRoLm1heCgwLCByYWRpdXMuYm90dG9tUmlnaHQgLSBNYXRoLm1heChib3JkZXIuYiwgYm9yZGVyLnIpKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGluUmFuZ2UoYmFyLCB4LCB5LCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgY29uc3Qgc2tpcFggPSB4ID09PSBudWxsO1xuICAgIGNvbnN0IHNraXBZID0geSA9PT0gbnVsbDtcbiAgICBjb25zdCBza2lwQm90aCA9IHNraXBYICYmIHNraXBZO1xuICAgIGNvbnN0IGJvdW5kcyA9IGJhciAmJiAhc2tpcEJvdGggJiYgZ2V0QmFyQm91bmRzKGJhciwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgcmV0dXJuIGJvdW5kcyAmJiAoc2tpcFggfHwgX2lzQmV0d2Vlbih4LCBib3VuZHMubGVmdCwgYm91bmRzLnJpZ2h0KSkgJiYgKHNraXBZIHx8IF9pc0JldHdlZW4oeSwgYm91bmRzLnRvcCwgYm91bmRzLmJvdHRvbSkpO1xufVxuZnVuY3Rpb24gaGFzUmFkaXVzKHJhZGl1cykge1xuICAgIHJldHVybiByYWRpdXMudG9wTGVmdCB8fCByYWRpdXMudG9wUmlnaHQgfHwgcmFkaXVzLmJvdHRvbUxlZnQgfHwgcmFkaXVzLmJvdHRvbVJpZ2h0O1xufVxuIGZ1bmN0aW9uIGFkZE5vcm1hbFJlY3RQYXRoKGN0eCwgcmVjdCkge1xuICAgIGN0eC5yZWN0KHJlY3QueCwgcmVjdC55LCByZWN0LncsIHJlY3QuaCk7XG59XG5mdW5jdGlvbiBpbmZsYXRlUmVjdChyZWN0LCBhbW91bnQsIHJlZlJlY3QgPSB7fSkge1xuICAgIGNvbnN0IHggPSByZWN0LnggIT09IHJlZlJlY3QueCA/IC1hbW91bnQgOiAwO1xuICAgIGNvbnN0IHkgPSByZWN0LnkgIT09IHJlZlJlY3QueSA/IC1hbW91bnQgOiAwO1xuICAgIGNvbnN0IHcgPSAocmVjdC54ICsgcmVjdC53ICE9PSByZWZSZWN0LnggKyByZWZSZWN0LncgPyBhbW91bnQgOiAwKSAtIHg7XG4gICAgY29uc3QgaCA9IChyZWN0LnkgKyByZWN0LmggIT09IHJlZlJlY3QueSArIHJlZlJlY3QuaCA/IGFtb3VudCA6IDApIC0geTtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiByZWN0LnggKyB4LFxuICAgICAgICB5OiByZWN0LnkgKyB5LFxuICAgICAgICB3OiByZWN0LncgKyB3LFxuICAgICAgICBoOiByZWN0LmggKyBoLFxuICAgICAgICByYWRpdXM6IHJlY3QucmFkaXVzXG4gICAgfTtcbn1cbmNsYXNzIEJhckVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50IHtcbiAgICBzdGF0aWMgaWQgPSAnYmFyJztcbiBzdGF0aWMgZGVmYXVsdHMgPSB7XG4gICAgICAgIGJvcmRlclNraXBwZWQ6ICdzdGFydCcsXG4gICAgICAgIGJvcmRlcldpZHRoOiAwLFxuICAgICAgICBib3JkZXJSYWRpdXM6IDAsXG4gICAgICAgIGluZmxhdGVBbW91bnQ6ICdhdXRvJyxcbiAgICAgICAgcG9pbnRTdHlsZTogdW5kZWZpbmVkXG4gICAgfTtcbiBzdGF0aWMgZGVmYXVsdFJvdXRlcyA9IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnYmFja2dyb3VuZENvbG9yJyxcbiAgICAgICAgYm9yZGVyQ29sb3I6ICdib3JkZXJDb2xvcidcbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKGNmZyl7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5ob3Jpem9udGFsID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmJhc2UgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMud2lkdGggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmluZmxhdGVBbW91bnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChjZmcpIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgY2ZnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkcmF3KGN0eCkge1xuICAgICAgICBjb25zdCB7IGluZmxhdGVBbW91bnQgLCBvcHRpb25zOiB7IGJvcmRlckNvbG9yICwgYmFja2dyb3VuZENvbG9yICB9ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBpbm5lciAsIG91dGVyICB9ID0gYm91bmRpbmdSZWN0cyh0aGlzKTtcbiAgICAgICAgY29uc3QgYWRkUmVjdFBhdGggPSBoYXNSYWRpdXMob3V0ZXIucmFkaXVzKSA/IGFkZFJvdW5kZWRSZWN0UGF0aCA6IGFkZE5vcm1hbFJlY3RQYXRoO1xuICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICBpZiAob3V0ZXIudyAhPT0gaW5uZXIudyB8fCBvdXRlci5oICE9PSBpbm5lci5oKSB7XG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBhZGRSZWN0UGF0aChjdHgsIGluZmxhdGVSZWN0KG91dGVyLCBpbmZsYXRlQW1vdW50LCBpbm5lcikpO1xuICAgICAgICAgICAgY3R4LmNsaXAoKTtcbiAgICAgICAgICAgIGFkZFJlY3RQYXRoKGN0eCwgaW5mbGF0ZVJlY3QoaW5uZXIsIC1pbmZsYXRlQW1vdW50LCBvdXRlcikpO1xuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGJvcmRlckNvbG9yO1xuICAgICAgICAgICAgY3R4LmZpbGwoJ2V2ZW5vZGQnKTtcbiAgICAgICAgfVxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGFkZFJlY3RQYXRoKGN0eCwgaW5mbGF0ZVJlY3QoaW5uZXIsIGluZmxhdGVBbW91bnQpKTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG4gICAgaW5SYW5nZShtb3VzZVgsIG1vdXNlWSwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gaW5SYW5nZSh0aGlzLCBtb3VzZVgsIG1vdXNlWSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgfVxuICAgIGluWFJhbmdlKG1vdXNlWCwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gaW5SYW5nZSh0aGlzLCBtb3VzZVgsIG51bGwsIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIH1cbiAgICBpbllSYW5nZShtb3VzZVksIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGluUmFuZ2UodGhpcywgbnVsbCwgbW91c2VZLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICB9XG4gICAgZ2V0Q2VudGVyUG9pbnQodXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICBjb25zdCB7IHggLCB5ICwgYmFzZSAsIGhvcml6b250YWwgIH0gPSAgdGhpcy5nZXRQcm9wcyhbXG4gICAgICAgICAgICAneCcsXG4gICAgICAgICAgICAneScsXG4gICAgICAgICAgICAnYmFzZScsXG4gICAgICAgICAgICAnaG9yaXpvbnRhbCdcbiAgICAgICAgXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiBob3Jpem9udGFsID8gKHggKyBiYXNlKSAvIDIgOiB4LFxuICAgICAgICAgICAgeTogaG9yaXpvbnRhbCA/IHkgOiAoeSArIGJhc2UpIC8gMlxuICAgICAgICB9O1xuICAgIH1cbiAgICBnZXRSYW5nZShheGlzKSB7XG4gICAgICAgIHJldHVybiBheGlzID09PSAneCcgPyB0aGlzLndpZHRoIC8gMiA6IHRoaXMuaGVpZ2h0IC8gMjtcbiAgICB9XG59XG5cbnZhciBlbGVtZW50cyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbl9fcHJvdG9fXzogbnVsbCxcbkFyY0VsZW1lbnQ6IEFyY0VsZW1lbnQsXG5CYXJFbGVtZW50OiBCYXJFbGVtZW50LFxuTGluZUVsZW1lbnQ6IExpbmVFbGVtZW50LFxuUG9pbnRFbGVtZW50OiBQb2ludEVsZW1lbnRcbn0pO1xuXG5jb25zdCBCT1JERVJfQ09MT1JTID0gW1xuICAgICdyZ2IoNTQsIDE2MiwgMjM1KScsXG4gICAgJ3JnYigyNTUsIDk5LCAxMzIpJyxcbiAgICAncmdiKDI1NSwgMTU5LCA2NCknLFxuICAgICdyZ2IoMjU1LCAyMDUsIDg2KScsXG4gICAgJ3JnYig3NSwgMTkyLCAxOTIpJyxcbiAgICAncmdiKDE1MywgMTAyLCAyNTUpJyxcbiAgICAncmdiKDIwMSwgMjAzLCAyMDcpJyAvLyBncmV5XG5dO1xuLy8gQm9yZGVyIGNvbG9ycyB3aXRoIDUwJSB0cmFuc3BhcmVuY3lcbmNvbnN0IEJBQ0tHUk9VTkRfQ09MT1JTID0gLyogI19fUFVSRV9fICovIEJPUkRFUl9DT0xPUlMubWFwKChjb2xvcik9PmNvbG9yLnJlcGxhY2UoJ3JnYignLCAncmdiYSgnKS5yZXBsYWNlKCcpJywgJywgMC41KScpKTtcbmZ1bmN0aW9uIGdldEJvcmRlckNvbG9yKGkpIHtcbiAgICByZXR1cm4gQk9SREVSX0NPTE9SU1tpICUgQk9SREVSX0NPTE9SUy5sZW5ndGhdO1xufVxuZnVuY3Rpb24gZ2V0QmFja2dyb3VuZENvbG9yKGkpIHtcbiAgICByZXR1cm4gQkFDS0dST1VORF9DT0xPUlNbaSAlIEJBQ0tHUk9VTkRfQ09MT1JTLmxlbmd0aF07XG59XG5mdW5jdGlvbiBjb2xvcml6ZURlZmF1bHREYXRhc2V0KGRhdGFzZXQsIGkpIHtcbiAgICBkYXRhc2V0LmJvcmRlckNvbG9yID0gZ2V0Qm9yZGVyQ29sb3IoaSk7XG4gICAgZGF0YXNldC5iYWNrZ3JvdW5kQ29sb3IgPSBnZXRCYWNrZ3JvdW5kQ29sb3IoaSk7XG4gICAgcmV0dXJuICsraTtcbn1cbmZ1bmN0aW9uIGNvbG9yaXplRG91Z2hudXREYXRhc2V0KGRhdGFzZXQsIGkpIHtcbiAgICBkYXRhc2V0LmJhY2tncm91bmRDb2xvciA9IGRhdGFzZXQuZGF0YS5tYXAoKCk9PmdldEJvcmRlckNvbG9yKGkrKykpO1xuICAgIHJldHVybiBpO1xufVxuZnVuY3Rpb24gY29sb3JpemVQb2xhckFyZWFEYXRhc2V0KGRhdGFzZXQsIGkpIHtcbiAgICBkYXRhc2V0LmJhY2tncm91bmRDb2xvciA9IGRhdGFzZXQuZGF0YS5tYXAoKCk9PmdldEJhY2tncm91bmRDb2xvcihpKyspKTtcbiAgICByZXR1cm4gaTtcbn1cbmZ1bmN0aW9uIGdldENvbG9yaXplcihjaGFydCkge1xuICAgIGxldCBpID0gMDtcbiAgICByZXR1cm4gKGRhdGFzZXQsIGRhdGFzZXRJbmRleCk9PntcbiAgICAgICAgY29uc3QgY29udHJvbGxlciA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCkuY29udHJvbGxlcjtcbiAgICAgICAgaWYgKGNvbnRyb2xsZXIgaW5zdGFuY2VvZiBEb3VnaG51dENvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgIGkgPSBjb2xvcml6ZURvdWdobnV0RGF0YXNldChkYXRhc2V0LCBpKTtcbiAgICAgICAgfSBlbHNlIGlmIChjb250cm9sbGVyIGluc3RhbmNlb2YgUG9sYXJBcmVhQ29udHJvbGxlcikge1xuICAgICAgICAgICAgaSA9IGNvbG9yaXplUG9sYXJBcmVhRGF0YXNldChkYXRhc2V0LCBpKTtcbiAgICAgICAgfSBlbHNlIGlmIChjb250cm9sbGVyKSB7XG4gICAgICAgICAgICBpID0gY29sb3JpemVEZWZhdWx0RGF0YXNldChkYXRhc2V0LCBpKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBjb250YWluc0NvbG9yc0RlZmluaXRpb25zKGRlc2NyaXB0b3JzKSB7XG4gICAgbGV0IGs7XG4gICAgZm9yKGsgaW4gZGVzY3JpcHRvcnMpe1xuICAgICAgICBpZiAoZGVzY3JpcHRvcnNba10uYm9yZGVyQ29sb3IgfHwgZGVzY3JpcHRvcnNba10uYmFja2dyb3VuZENvbG9yKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBjb250YWluc0NvbG9yc0RlZmluaXRpb24oZGVzY3JpcHRvcikge1xuICAgIHJldHVybiBkZXNjcmlwdG9yICYmIChkZXNjcmlwdG9yLmJvcmRlckNvbG9yIHx8IGRlc2NyaXB0b3IuYmFja2dyb3VuZENvbG9yKTtcbn1cbnZhciBwbHVnaW5fY29sb3JzID0ge1xuICAgIGlkOiAnY29sb3JzJyxcbiAgICBkZWZhdWx0czoge1xuICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICBmb3JjZU92ZXJyaWRlOiBmYWxzZVxuICAgIH0sXG4gICAgYmVmb3JlTGF5b3V0IChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFvcHRpb25zLmVuYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IGRhdGE6IHsgZGF0YXNldHMgIH0gLCBvcHRpb25zOiBjaGFydE9wdGlvbnMgIH0gPSBjaGFydC5jb25maWc7XG4gICAgICAgIGNvbnN0IHsgZWxlbWVudHMgIH0gPSBjaGFydE9wdGlvbnM7XG4gICAgICAgIGlmICghb3B0aW9ucy5mb3JjZU92ZXJyaWRlICYmIChjb250YWluc0NvbG9yc0RlZmluaXRpb25zKGRhdGFzZXRzKSB8fCBjb250YWluc0NvbG9yc0RlZmluaXRpb24oY2hhcnRPcHRpb25zKSB8fCBlbGVtZW50cyAmJiBjb250YWluc0NvbG9yc0RlZmluaXRpb25zKGVsZW1lbnRzKSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb2xvcml6ZXIgPSBnZXRDb2xvcml6ZXIoY2hhcnQpO1xuICAgICAgICBkYXRhc2V0cy5mb3JFYWNoKGNvbG9yaXplcik7XG4gICAgfVxufTtcblxuZnVuY3Rpb24gbHR0YkRlY2ltYXRpb24oZGF0YSwgc3RhcnQsIGNvdW50LCBhdmFpbGFibGVXaWR0aCwgb3B0aW9ucykge1xuIGNvbnN0IHNhbXBsZXMgPSBvcHRpb25zLnNhbXBsZXMgfHwgYXZhaWxhYmxlV2lkdGg7XG4gICAgaWYgKHNhbXBsZXMgPj0gY291bnQpIHtcbiAgICAgICAgcmV0dXJuIGRhdGEuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgY291bnQpO1xuICAgIH1cbiAgICBjb25zdCBkZWNpbWF0ZWQgPSBbXTtcbiAgICBjb25zdCBidWNrZXRXaWR0aCA9IChjb3VudCAtIDIpIC8gKHNhbXBsZXMgLSAyKTtcbiAgICBsZXQgc2FtcGxlZEluZGV4ID0gMDtcbiAgICBjb25zdCBlbmRJbmRleCA9IHN0YXJ0ICsgY291bnQgLSAxO1xuICAgIGxldCBhID0gc3RhcnQ7XG4gICAgbGV0IGksIG1heEFyZWFQb2ludCwgbWF4QXJlYSwgYXJlYSwgbmV4dEE7XG4gICAgZGVjaW1hdGVkW3NhbXBsZWRJbmRleCsrXSA9IGRhdGFbYV07XG4gICAgZm9yKGkgPSAwOyBpIDwgc2FtcGxlcyAtIDI7IGkrKyl7XG4gICAgICAgIGxldCBhdmdYID0gMDtcbiAgICAgICAgbGV0IGF2Z1kgPSAwO1xuICAgICAgICBsZXQgajtcbiAgICAgICAgY29uc3QgYXZnUmFuZ2VTdGFydCA9IE1hdGguZmxvb3IoKGkgKyAxKSAqIGJ1Y2tldFdpZHRoKSArIDEgKyBzdGFydDtcbiAgICAgICAgY29uc3QgYXZnUmFuZ2VFbmQgPSBNYXRoLm1pbihNYXRoLmZsb29yKChpICsgMikgKiBidWNrZXRXaWR0aCkgKyAxLCBjb3VudCkgKyBzdGFydDtcbiAgICAgICAgY29uc3QgYXZnUmFuZ2VMZW5ndGggPSBhdmdSYW5nZUVuZCAtIGF2Z1JhbmdlU3RhcnQ7XG4gICAgICAgIGZvcihqID0gYXZnUmFuZ2VTdGFydDsgaiA8IGF2Z1JhbmdlRW5kOyBqKyspe1xuICAgICAgICAgICAgYXZnWCArPSBkYXRhW2pdLng7XG4gICAgICAgICAgICBhdmdZICs9IGRhdGFbal0ueTtcbiAgICAgICAgfVxuICAgICAgICBhdmdYIC89IGF2Z1JhbmdlTGVuZ3RoO1xuICAgICAgICBhdmdZIC89IGF2Z1JhbmdlTGVuZ3RoO1xuICAgICAgICBjb25zdCByYW5nZU9mZnMgPSBNYXRoLmZsb29yKGkgKiBidWNrZXRXaWR0aCkgKyAxICsgc3RhcnQ7XG4gICAgICAgIGNvbnN0IHJhbmdlVG8gPSBNYXRoLm1pbihNYXRoLmZsb29yKChpICsgMSkgKiBidWNrZXRXaWR0aCkgKyAxLCBjb3VudCkgKyBzdGFydDtcbiAgICAgICAgY29uc3QgeyB4OiBwb2ludEF4ICwgeTogcG9pbnRBeSAgfSA9IGRhdGFbYV07XG4gICAgICAgIG1heEFyZWEgPSBhcmVhID0gLTE7XG4gICAgICAgIGZvcihqID0gcmFuZ2VPZmZzOyBqIDwgcmFuZ2VUbzsgaisrKXtcbiAgICAgICAgICAgIGFyZWEgPSAwLjUgKiBNYXRoLmFicygocG9pbnRBeCAtIGF2Z1gpICogKGRhdGFbal0ueSAtIHBvaW50QXkpIC0gKHBvaW50QXggLSBkYXRhW2pdLngpICogKGF2Z1kgLSBwb2ludEF5KSk7XG4gICAgICAgICAgICBpZiAoYXJlYSA+IG1heEFyZWEpIHtcbiAgICAgICAgICAgICAgICBtYXhBcmVhID0gYXJlYTtcbiAgICAgICAgICAgICAgICBtYXhBcmVhUG9pbnQgPSBkYXRhW2pdO1xuICAgICAgICAgICAgICAgIG5leHRBID0gajtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBkZWNpbWF0ZWRbc2FtcGxlZEluZGV4KytdID0gbWF4QXJlYVBvaW50O1xuICAgICAgICBhID0gbmV4dEE7XG4gICAgfVxuICAgIGRlY2ltYXRlZFtzYW1wbGVkSW5kZXgrK10gPSBkYXRhW2VuZEluZGV4XTtcbiAgICByZXR1cm4gZGVjaW1hdGVkO1xufVxuZnVuY3Rpb24gbWluTWF4RGVjaW1hdGlvbihkYXRhLCBzdGFydCwgY291bnQsIGF2YWlsYWJsZVdpZHRoKSB7XG4gICAgbGV0IGF2Z1ggPSAwO1xuICAgIGxldCBjb3VudFggPSAwO1xuICAgIGxldCBpLCBwb2ludCwgeCwgeSwgcHJldlgsIG1pbkluZGV4LCBtYXhJbmRleCwgc3RhcnRJbmRleCwgbWluWSwgbWF4WTtcbiAgICBjb25zdCBkZWNpbWF0ZWQgPSBbXTtcbiAgICBjb25zdCBlbmRJbmRleCA9IHN0YXJ0ICsgY291bnQgLSAxO1xuICAgIGNvbnN0IHhNaW4gPSBkYXRhW3N0YXJ0XS54O1xuICAgIGNvbnN0IHhNYXggPSBkYXRhW2VuZEluZGV4XS54O1xuICAgIGNvbnN0IGR4ID0geE1heCAtIHhNaW47XG4gICAgZm9yKGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7ICsraSl7XG4gICAgICAgIHBvaW50ID0gZGF0YVtpXTtcbiAgICAgICAgeCA9IChwb2ludC54IC0geE1pbikgLyBkeCAqIGF2YWlsYWJsZVdpZHRoO1xuICAgICAgICB5ID0gcG9pbnQueTtcbiAgICAgICAgY29uc3QgdHJ1bmNYID0geCB8IDA7XG4gICAgICAgIGlmICh0cnVuY1ggPT09IHByZXZYKSB7XG4gICAgICAgICAgICBpZiAoeSA8IG1pblkpIHtcbiAgICAgICAgICAgICAgICBtaW5ZID0geTtcbiAgICAgICAgICAgICAgICBtaW5JbmRleCA9IGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHkgPiBtYXhZKSB7XG4gICAgICAgICAgICAgICAgbWF4WSA9IHk7XG4gICAgICAgICAgICAgICAgbWF4SW5kZXggPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXZnWCA9IChjb3VudFggKiBhdmdYICsgcG9pbnQueCkgLyArK2NvdW50WDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGxhc3RJbmRleCA9IGkgLSAxO1xuICAgICAgICAgICAgaWYgKCFpc051bGxPclVuZGVmKG1pbkluZGV4KSAmJiAhaXNOdWxsT3JVbmRlZihtYXhJbmRleCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbnRlcm1lZGlhdGVJbmRleDEgPSBNYXRoLm1pbihtaW5JbmRleCwgbWF4SW5kZXgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGludGVybWVkaWF0ZUluZGV4MiA9IE1hdGgubWF4KG1pbkluZGV4LCBtYXhJbmRleCk7XG4gICAgICAgICAgICAgICAgaWYgKGludGVybWVkaWF0ZUluZGV4MSAhPT0gc3RhcnRJbmRleCAmJiBpbnRlcm1lZGlhdGVJbmRleDEgIT09IGxhc3RJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBkZWNpbWF0ZWQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5kYXRhW2ludGVybWVkaWF0ZUluZGV4MV0sXG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBhdmdYXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaW50ZXJtZWRpYXRlSW5kZXgyICE9PSBzdGFydEluZGV4ICYmIGludGVybWVkaWF0ZUluZGV4MiAhPT0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGRlY2ltYXRlZC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmRhdGFbaW50ZXJtZWRpYXRlSW5kZXgyXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IGF2Z1hcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGkgPiAwICYmIGxhc3RJbmRleCAhPT0gc3RhcnRJbmRleCkge1xuICAgICAgICAgICAgICAgIGRlY2ltYXRlZC5wdXNoKGRhdGFbbGFzdEluZGV4XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWNpbWF0ZWQucHVzaChwb2ludCk7XG4gICAgICAgICAgICBwcmV2WCA9IHRydW5jWDtcbiAgICAgICAgICAgIGNvdW50WCA9IDA7XG4gICAgICAgICAgICBtaW5ZID0gbWF4WSA9IHk7XG4gICAgICAgICAgICBtaW5JbmRleCA9IG1heEluZGV4ID0gc3RhcnRJbmRleCA9IGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRlY2ltYXRlZDtcbn1cbmZ1bmN0aW9uIGNsZWFuRGVjaW1hdGVkRGF0YXNldChkYXRhc2V0KSB7XG4gICAgaWYgKGRhdGFzZXQuX2RlY2ltYXRlZCkge1xuICAgICAgICBjb25zdCBkYXRhID0gZGF0YXNldC5fZGF0YTtcbiAgICAgICAgZGVsZXRlIGRhdGFzZXQuX2RlY2ltYXRlZDtcbiAgICAgICAgZGVsZXRlIGRhdGFzZXQuX2RhdGE7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkYXRhc2V0LCAnZGF0YScsIHtcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBkYXRhXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNsZWFuRGVjaW1hdGVkRGF0YShjaGFydCkge1xuICAgIGNoYXJ0LmRhdGEuZGF0YXNldHMuZm9yRWFjaCgoZGF0YXNldCk9PntcbiAgICAgICAgY2xlYW5EZWNpbWF0ZWREYXRhc2V0KGRhdGFzZXQpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZ2V0U3RhcnRBbmRDb3VudE9mVmlzaWJsZVBvaW50c1NpbXBsaWZpZWQobWV0YSwgcG9pbnRzKSB7XG4gICAgY29uc3QgcG9pbnRDb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gICAgbGV0IHN0YXJ0ID0gMDtcbiAgICBsZXQgY291bnQ7XG4gICAgY29uc3QgeyBpU2NhbGUgIH0gPSBtZXRhO1xuICAgIGNvbnN0IHsgbWluICwgbWF4ICwgbWluRGVmaW5lZCAsIG1heERlZmluZWQgIH0gPSBpU2NhbGUuZ2V0VXNlckJvdW5kcygpO1xuICAgIGlmIChtaW5EZWZpbmVkKSB7XG4gICAgICAgIHN0YXJ0ID0gX2xpbWl0VmFsdWUoX2xvb2t1cEJ5S2V5KHBvaW50cywgaVNjYWxlLmF4aXMsIG1pbikubG8sIDAsIHBvaW50Q291bnQgLSAxKTtcbiAgICB9XG4gICAgaWYgKG1heERlZmluZWQpIHtcbiAgICAgICAgY291bnQgPSBfbGltaXRWYWx1ZShfbG9va3VwQnlLZXkocG9pbnRzLCBpU2NhbGUuYXhpcywgbWF4KS5oaSArIDEsIHN0YXJ0LCBwb2ludENvdW50KSAtIHN0YXJ0O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvdW50ID0gcG9pbnRDb3VudCAtIHN0YXJ0O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydCxcbiAgICAgICAgY291bnRcbiAgICB9O1xufVxudmFyIHBsdWdpbl9kZWNpbWF0aW9uID0ge1xuICAgIGlkOiAnZGVjaW1hdGlvbicsXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgYWxnb3JpdGhtOiAnbWluLW1heCcsXG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgfSxcbiAgICBiZWZvcmVFbGVtZW50c1VwZGF0ZTogKGNoYXJ0LCBhcmdzLCBvcHRpb25zKT0+e1xuICAgICAgICBpZiAoIW9wdGlvbnMuZW5hYmxlZCkge1xuICAgICAgICAgICAgY2xlYW5EZWNpbWF0ZWREYXRhKGNoYXJ0KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhdmFpbGFibGVXaWR0aCA9IGNoYXJ0LndpZHRoO1xuICAgICAgICBjaGFydC5kYXRhLmRhdGFzZXRzLmZvckVhY2goKGRhdGFzZXQsIGRhdGFzZXRJbmRleCk9PntcbiAgICAgICAgICAgIGNvbnN0IHsgX2RhdGEgLCBpbmRleEF4aXMgIH0gPSBkYXRhc2V0O1xuICAgICAgICAgICAgY29uc3QgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gX2RhdGEgfHwgZGF0YXNldC5kYXRhO1xuICAgICAgICAgICAgaWYgKHJlc29sdmUoW1xuICAgICAgICAgICAgICAgIGluZGV4QXhpcyxcbiAgICAgICAgICAgICAgICBjaGFydC5vcHRpb25zLmluZGV4QXhpc1xuICAgICAgICAgICAgXSkgPT09ICd5Jykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghbWV0YS5jb250cm9sbGVyLnN1cHBvcnRzRGVjaW1hdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHhBeGlzID0gY2hhcnQuc2NhbGVzW21ldGEueEF4aXNJRF07XG4gICAgICAgICAgICBpZiAoeEF4aXMudHlwZSAhPT0gJ2xpbmVhcicgJiYgeEF4aXMudHlwZSAhPT0gJ3RpbWUnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNoYXJ0Lm9wdGlvbnMucGFyc2luZykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCB7IHN0YXJ0ICwgY291bnQgIH0gPSBnZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzU2ltcGxpZmllZChtZXRhLCBkYXRhKTtcbiAgICAgICAgICAgIGNvbnN0IHRocmVzaG9sZCA9IG9wdGlvbnMudGhyZXNob2xkIHx8IDQgKiBhdmFpbGFibGVXaWR0aDtcbiAgICAgICAgICAgIGlmIChjb3VudCA8PSB0aHJlc2hvbGQpIHtcbiAgICAgICAgICAgICAgICBjbGVhbkRlY2ltYXRlZERhdGFzZXQoZGF0YXNldCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzTnVsbE9yVW5kZWYoX2RhdGEpKSB7XG4gICAgICAgICAgICAgICAgZGF0YXNldC5fZGF0YSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGRhdGFzZXQuZGF0YTtcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZGF0YXNldCwgJ2RhdGEnLCB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kZWNpbWF0ZWQ7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGF0YSA9IGQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBkZWNpbWF0ZWQ7XG4gICAgICAgICAgICBzd2l0Y2gob3B0aW9ucy5hbGdvcml0aG0pe1xuICAgICAgICAgICAgICAgIGNhc2UgJ2x0dGInOlxuICAgICAgICAgICAgICAgICAgICBkZWNpbWF0ZWQgPSBsdHRiRGVjaW1hdGlvbihkYXRhLCBzdGFydCwgY291bnQsIGF2YWlsYWJsZVdpZHRoLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbWluLW1heCc6XG4gICAgICAgICAgICAgICAgICAgIGRlY2ltYXRlZCA9IG1pbk1heERlY2ltYXRpb24oZGF0YSwgc3RhcnQsIGNvdW50LCBhdmFpbGFibGVXaWR0aCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgZGVjaW1hdGlvbiBhbGdvcml0aG0gJyR7b3B0aW9ucy5hbGdvcml0aG19J2ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGF0YXNldC5fZGVjaW1hdGVkID0gZGVjaW1hdGVkO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIGRlc3Ryb3kgKGNoYXJ0KSB7XG4gICAgICAgIGNsZWFuRGVjaW1hdGVkRGF0YShjaGFydCk7XG4gICAgfVxufTtcblxuZnVuY3Rpb24gX3NlZ21lbnRzKGxpbmUsIHRhcmdldCwgcHJvcGVydHkpIHtcbiAgICBjb25zdCBzZWdtZW50cyA9IGxpbmUuc2VnbWVudHM7XG4gICAgY29uc3QgcG9pbnRzID0gbGluZS5wb2ludHM7XG4gICAgY29uc3QgdHBvaW50cyA9IHRhcmdldC5wb2ludHM7XG4gICAgY29uc3QgcGFydHMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHNlZ21lbnQgb2Ygc2VnbWVudHMpe1xuICAgICAgICBsZXQgeyBzdGFydCAsIGVuZCAgfSA9IHNlZ21lbnQ7XG4gICAgICAgIGVuZCA9IF9maW5kU2VnbWVudEVuZChzdGFydCwgZW5kLCBwb2ludHMpO1xuICAgICAgICBjb25zdCBib3VuZHMgPSBfZ2V0Qm91bmRzKHByb3BlcnR5LCBwb2ludHNbc3RhcnRdLCBwb2ludHNbZW5kXSwgc2VnbWVudC5sb29wKTtcbiAgICAgICAgaWYgKCF0YXJnZXQuc2VnbWVudHMpIHtcbiAgICAgICAgICAgIHBhcnRzLnB1c2goe1xuICAgICAgICAgICAgICAgIHNvdXJjZTogc2VnbWVudCxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGJvdW5kcyxcbiAgICAgICAgICAgICAgICBzdGFydDogcG9pbnRzW3N0YXJ0XSxcbiAgICAgICAgICAgICAgICBlbmQ6IHBvaW50c1tlbmRdXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRhcmdldFNlZ21lbnRzID0gX2JvdW5kU2VnbWVudHModGFyZ2V0LCBib3VuZHMpO1xuICAgICAgICBmb3IgKGNvbnN0IHRndCBvZiB0YXJnZXRTZWdtZW50cyl7XG4gICAgICAgICAgICBjb25zdCBzdWJCb3VuZHMgPSBfZ2V0Qm91bmRzKHByb3BlcnR5LCB0cG9pbnRzW3RndC5zdGFydF0sIHRwb2ludHNbdGd0LmVuZF0sIHRndC5sb29wKTtcbiAgICAgICAgICAgIGNvbnN0IGZpbGxTb3VyY2VzID0gX2JvdW5kU2VnbWVudChzZWdtZW50LCBwb2ludHMsIHN1YkJvdW5kcyk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGZpbGxTb3VyY2Ugb2YgZmlsbFNvdXJjZXMpe1xuICAgICAgICAgICAgICAgIHBhcnRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IGZpbGxTb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogdGd0LFxuICAgICAgICAgICAgICAgICAgICBzdGFydDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgW3Byb3BlcnR5XTogX2dldEVkZ2UoYm91bmRzLCBzdWJCb3VuZHMsICdzdGFydCcsIE1hdGgubWF4KVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFtwcm9wZXJ0eV06IF9nZXRFZGdlKGJvdW5kcywgc3ViQm91bmRzLCAnZW5kJywgTWF0aC5taW4pXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGFydHM7XG59XG5mdW5jdGlvbiBfZ2V0Qm91bmRzKHByb3BlcnR5LCBmaXJzdCwgbGFzdCwgbG9vcCkge1xuICAgIGlmIChsb29wKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHN0YXJ0ID0gZmlyc3RbcHJvcGVydHldO1xuICAgIGxldCBlbmQgPSBsYXN0W3Byb3BlcnR5XTtcbiAgICBpZiAocHJvcGVydHkgPT09ICdhbmdsZScpIHtcbiAgICAgICAgc3RhcnQgPSBfbm9ybWFsaXplQW5nbGUoc3RhcnQpO1xuICAgICAgICBlbmQgPSBfbm9ybWFsaXplQW5nbGUoZW5kKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcHJvcGVydHksXG4gICAgICAgIHN0YXJ0LFxuICAgICAgICBlbmRcbiAgICB9O1xufVxuZnVuY3Rpb24gX3BvaW50c0Zyb21TZWdtZW50cyhib3VuZGFyeSwgbGluZSkge1xuICAgIGNvbnN0IHsgeCA9bnVsbCAsIHkgPW51bGwgIH0gPSBib3VuZGFyeSB8fCB7fTtcbiAgICBjb25zdCBsaW5lUG9pbnRzID0gbGluZS5wb2ludHM7XG4gICAgY29uc3QgcG9pbnRzID0gW107XG4gICAgbGluZS5zZWdtZW50cy5mb3JFYWNoKCh7IHN0YXJ0ICwgZW5kICB9KT0+e1xuICAgICAgICBlbmQgPSBfZmluZFNlZ21lbnRFbmQoc3RhcnQsIGVuZCwgbGluZVBvaW50cyk7XG4gICAgICAgIGNvbnN0IGZpcnN0ID0gbGluZVBvaW50c1tzdGFydF07XG4gICAgICAgIGNvbnN0IGxhc3QgPSBsaW5lUG9pbnRzW2VuZF07XG4gICAgICAgIGlmICh5ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBwb2ludHMucHVzaCh7XG4gICAgICAgICAgICAgICAgeDogZmlyc3QueCxcbiAgICAgICAgICAgICAgICB5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHBvaW50cy5wdXNoKHtcbiAgICAgICAgICAgICAgICB4OiBsYXN0LngsXG4gICAgICAgICAgICAgICAgeVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoeCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcG9pbnRzLnB1c2goe1xuICAgICAgICAgICAgICAgIHgsXG4gICAgICAgICAgICAgICAgeTogZmlyc3QueVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwb2ludHMucHVzaCh7XG4gICAgICAgICAgICAgICAgeCxcbiAgICAgICAgICAgICAgICB5OiBsYXN0LnlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHBvaW50cztcbn1cbmZ1bmN0aW9uIF9maW5kU2VnbWVudEVuZChzdGFydCwgZW5kLCBwb2ludHMpIHtcbiAgICBmb3IoOyBlbmQgPiBzdGFydDsgZW5kLS0pe1xuICAgICAgICBjb25zdCBwb2ludCA9IHBvaW50c1tlbmRdO1xuICAgICAgICBpZiAoIWlzTmFOKHBvaW50LngpICYmICFpc05hTihwb2ludC55KSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVuZDtcbn1cbmZ1bmN0aW9uIF9nZXRFZGdlKGEsIGIsIHByb3AsIGZuKSB7XG4gICAgaWYgKGEgJiYgYikge1xuICAgICAgICByZXR1cm4gZm4oYVtwcm9wXSwgYltwcm9wXSk7XG4gICAgfVxuICAgIHJldHVybiBhID8gYVtwcm9wXSA6IGIgPyBiW3Byb3BdIDogMDtcbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUJvdW5kYXJ5TGluZShib3VuZGFyeSwgbGluZSkge1xuICAgIGxldCBwb2ludHMgPSBbXTtcbiAgICBsZXQgX2xvb3AgPSBmYWxzZTtcbiAgICBpZiAoaXNBcnJheShib3VuZGFyeSkpIHtcbiAgICAgICAgX2xvb3AgPSB0cnVlO1xuICAgICAgICBwb2ludHMgPSBib3VuZGFyeTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBwb2ludHMgPSBfcG9pbnRzRnJvbVNlZ21lbnRzKGJvdW5kYXJ5LCBsaW5lKTtcbiAgICB9XG4gICAgcmV0dXJuIHBvaW50cy5sZW5ndGggPyBuZXcgTGluZUVsZW1lbnQoe1xuICAgICAgICBwb2ludHMsXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgIHRlbnNpb246IDBcbiAgICAgICAgfSxcbiAgICAgICAgX2xvb3AsXG4gICAgICAgIF9mdWxsTG9vcDogX2xvb3BcbiAgICB9KSA6IG51bGw7XG59XG5mdW5jdGlvbiBfc2hvdWxkQXBwbHlGaWxsKHNvdXJjZSkge1xuICAgIHJldHVybiBzb3VyY2UgJiYgc291cmNlLmZpbGwgIT09IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBfcmVzb2x2ZVRhcmdldChzb3VyY2VzLCBpbmRleCwgcHJvcGFnYXRlKSB7XG4gICAgY29uc3Qgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgbGV0IGZpbGwgPSBzb3VyY2UuZmlsbDtcbiAgICBjb25zdCB2aXNpdGVkID0gW1xuICAgICAgICBpbmRleFxuICAgIF07XG4gICAgbGV0IHRhcmdldDtcbiAgICBpZiAoIXByb3BhZ2F0ZSkge1xuICAgICAgICByZXR1cm4gZmlsbDtcbiAgICB9XG4gICAgd2hpbGUoZmlsbCAhPT0gZmFsc2UgJiYgdmlzaXRlZC5pbmRleE9mKGZpbGwpID09PSAtMSl7XG4gICAgICAgIGlmICghaXNOdW1iZXJGaW5pdGUoZmlsbCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmaWxsO1xuICAgICAgICB9XG4gICAgICAgIHRhcmdldCA9IHNvdXJjZXNbZmlsbF07XG4gICAgICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhcmdldC52aXNpYmxlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmlsbDtcbiAgICAgICAgfVxuICAgICAgICB2aXNpdGVkLnB1c2goZmlsbCk7XG4gICAgICAgIGZpbGwgPSB0YXJnZXQuZmlsbDtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuIGZ1bmN0aW9uIF9kZWNvZGVGaWxsKGxpbmUsIGluZGV4LCBjb3VudCkge1xuICAgICBjb25zdCBmaWxsID0gcGFyc2VGaWxsT3B0aW9uKGxpbmUpO1xuICAgIGlmIChpc09iamVjdChmaWxsKSkge1xuICAgICAgICByZXR1cm4gaXNOYU4oZmlsbC52YWx1ZSkgPyBmYWxzZSA6IGZpbGw7XG4gICAgfVxuICAgIGxldCB0YXJnZXQgPSBwYXJzZUZsb2F0KGZpbGwpO1xuICAgIGlmIChpc051bWJlckZpbml0ZSh0YXJnZXQpICYmIE1hdGguZmxvb3IodGFyZ2V0KSA9PT0gdGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiBkZWNvZGVUYXJnZXRJbmRleChmaWxsWzBdLCBpbmRleCwgdGFyZ2V0LCBjb3VudCk7XG4gICAgfVxuICAgIHJldHVybiBbXG4gICAgICAgICdvcmlnaW4nLFxuICAgICAgICAnc3RhcnQnLFxuICAgICAgICAnZW5kJyxcbiAgICAgICAgJ3N0YWNrJyxcbiAgICAgICAgJ3NoYXBlJ1xuICAgIF0uaW5kZXhPZihmaWxsKSA+PSAwICYmIGZpbGw7XG59XG5mdW5jdGlvbiBkZWNvZGVUYXJnZXRJbmRleChmaXJzdENoLCBpbmRleCwgdGFyZ2V0LCBjb3VudCkge1xuICAgIGlmIChmaXJzdENoID09PSAnLScgfHwgZmlyc3RDaCA9PT0gJysnKSB7XG4gICAgICAgIHRhcmdldCA9IGluZGV4ICsgdGFyZ2V0O1xuICAgIH1cbiAgICBpZiAodGFyZ2V0ID09PSBpbmRleCB8fCB0YXJnZXQgPCAwIHx8IHRhcmdldCA+PSBjb3VudCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59XG4gZnVuY3Rpb24gX2dldFRhcmdldFBpeGVsKGZpbGwsIHNjYWxlKSB7XG4gICAgbGV0IHBpeGVsID0gbnVsbDtcbiAgICBpZiAoZmlsbCA9PT0gJ3N0YXJ0Jykge1xuICAgICAgICBwaXhlbCA9IHNjYWxlLmJvdHRvbTtcbiAgICB9IGVsc2UgaWYgKGZpbGwgPT09ICdlbmQnKSB7XG4gICAgICAgIHBpeGVsID0gc2NhbGUudG9wO1xuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoZmlsbCkpIHtcbiAgICAgICAgcGl4ZWwgPSBzY2FsZS5nZXRQaXhlbEZvclZhbHVlKGZpbGwudmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoc2NhbGUuZ2V0QmFzZVBpeGVsKSB7XG4gICAgICAgIHBpeGVsID0gc2NhbGUuZ2V0QmFzZVBpeGVsKCk7XG4gICAgfVxuICAgIHJldHVybiBwaXhlbDtcbn1cbiBmdW5jdGlvbiBfZ2V0VGFyZ2V0VmFsdWUoZmlsbCwgc2NhbGUsIHN0YXJ0VmFsdWUpIHtcbiAgICBsZXQgdmFsdWU7XG4gICAgaWYgKGZpbGwgPT09ICdzdGFydCcpIHtcbiAgICAgICAgdmFsdWUgPSBzdGFydFZhbHVlO1xuICAgIH0gZWxzZSBpZiAoZmlsbCA9PT0gJ2VuZCcpIHtcbiAgICAgICAgdmFsdWUgPSBzY2FsZS5vcHRpb25zLnJldmVyc2UgPyBzY2FsZS5taW4gOiBzY2FsZS5tYXg7XG4gICAgfSBlbHNlIGlmIChpc09iamVjdChmaWxsKSkge1xuICAgICAgICB2YWx1ZSA9IGZpbGwudmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSBzY2FsZS5nZXRCYXNlVmFsdWUoKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuIGZ1bmN0aW9uIHBhcnNlRmlsbE9wdGlvbihsaW5lKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IGxpbmUub3B0aW9ucztcbiAgICBjb25zdCBmaWxsT3B0aW9uID0gb3B0aW9ucy5maWxsO1xuICAgIGxldCBmaWxsID0gdmFsdWVPckRlZmF1bHQoZmlsbE9wdGlvbiAmJiBmaWxsT3B0aW9uLnRhcmdldCwgZmlsbE9wdGlvbik7XG4gICAgaWYgKGZpbGwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBmaWxsID0gISFvcHRpb25zLmJhY2tncm91bmRDb2xvcjtcbiAgICB9XG4gICAgaWYgKGZpbGwgPT09IGZhbHNlIHx8IGZpbGwgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoZmlsbCA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gJ29yaWdpbic7XG4gICAgfVxuICAgIHJldHVybiBmaWxsO1xufVxuXG5mdW5jdGlvbiBfYnVpbGRTdGFja0xpbmUoc291cmNlKSB7XG4gICAgY29uc3QgeyBzY2FsZSAsIGluZGV4ICwgbGluZSAgfSA9IHNvdXJjZTtcbiAgICBjb25zdCBwb2ludHMgPSBbXTtcbiAgICBjb25zdCBzZWdtZW50cyA9IGxpbmUuc2VnbWVudHM7XG4gICAgY29uc3Qgc291cmNlUG9pbnRzID0gbGluZS5wb2ludHM7XG4gICAgY29uc3QgbGluZXNCZWxvdyA9IGdldExpbmVzQmVsb3coc2NhbGUsIGluZGV4KTtcbiAgICBsaW5lc0JlbG93LnB1c2goX2NyZWF0ZUJvdW5kYXJ5TGluZSh7XG4gICAgICAgIHg6IG51bGwsXG4gICAgICAgIHk6IHNjYWxlLmJvdHRvbVxuICAgIH0sIGxpbmUpKTtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspe1xuICAgICAgICBjb25zdCBzZWdtZW50ID0gc2VnbWVudHNbaV07XG4gICAgICAgIGZvcihsZXQgaiA9IHNlZ21lbnQuc3RhcnQ7IGogPD0gc2VnbWVudC5lbmQ7IGorKyl7XG4gICAgICAgICAgICBhZGRQb2ludHNCZWxvdyhwb2ludHMsIHNvdXJjZVBvaW50c1tqXSwgbGluZXNCZWxvdyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBMaW5lRWxlbWVudCh7XG4gICAgICAgIHBvaW50cyxcbiAgICAgICAgb3B0aW9uczoge31cbiAgICB9KTtcbn1cbiBmdW5jdGlvbiBnZXRMaW5lc0JlbG93KHNjYWxlLCBpbmRleCkge1xuICAgIGNvbnN0IGJlbG93ID0gW107XG4gICAgY29uc3QgbWV0YXMgPSBzY2FsZS5nZXRNYXRjaGluZ1Zpc2libGVNZXRhcygnbGluZScpO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBtZXRhcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGNvbnN0IG1ldGEgPSBtZXRhc1tpXTtcbiAgICAgICAgaWYgKG1ldGEuaW5kZXggPT09IGluZGV4KSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW1ldGEuaGlkZGVuKSB7XG4gICAgICAgICAgICBiZWxvdy51bnNoaWZ0KG1ldGEuZGF0YXNldCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJlbG93O1xufVxuIGZ1bmN0aW9uIGFkZFBvaW50c0JlbG93KHBvaW50cywgc291cmNlUG9pbnQsIGxpbmVzQmVsb3cpIHtcbiAgICBjb25zdCBwb3N0cG9uZWQgPSBbXTtcbiAgICBmb3IobGV0IGogPSAwOyBqIDwgbGluZXNCZWxvdy5sZW5ndGg7IGorKyl7XG4gICAgICAgIGNvbnN0IGxpbmUgPSBsaW5lc0JlbG93W2pdO1xuICAgICAgICBjb25zdCB7IGZpcnN0ICwgbGFzdCAsIHBvaW50ICB9ID0gZmluZFBvaW50KGxpbmUsIHNvdXJjZVBvaW50LCAneCcpO1xuICAgICAgICBpZiAoIXBvaW50IHx8IGZpcnN0ICYmIGxhc3QpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmaXJzdCkge1xuICAgICAgICAgICAgcG9zdHBvbmVkLnVuc2hpZnQocG9pbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcG9pbnRzLnB1c2gocG9pbnQpO1xuICAgICAgICAgICAgaWYgKCFsYXN0KSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcG9pbnRzLnB1c2goLi4ucG9zdHBvbmVkKTtcbn1cbiBmdW5jdGlvbiBmaW5kUG9pbnQobGluZSwgc291cmNlUG9pbnQsIHByb3BlcnR5KSB7XG4gICAgY29uc3QgcG9pbnQgPSBsaW5lLmludGVycG9sYXRlKHNvdXJjZVBvaW50LCBwcm9wZXJ0eSk7XG4gICAgaWYgKCFwb2ludCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGNvbnN0IHBvaW50VmFsdWUgPSBwb2ludFtwcm9wZXJ0eV07XG4gICAgY29uc3Qgc2VnbWVudHMgPSBsaW5lLnNlZ21lbnRzO1xuICAgIGNvbnN0IGxpbmVQb2ludHMgPSBsaW5lLnBvaW50cztcbiAgICBsZXQgZmlyc3QgPSBmYWxzZTtcbiAgICBsZXQgbGFzdCA9IGZhbHNlO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGNvbnN0IHNlZ21lbnQgPSBzZWdtZW50c1tpXTtcbiAgICAgICAgY29uc3QgZmlyc3RWYWx1ZSA9IGxpbmVQb2ludHNbc2VnbWVudC5zdGFydF1bcHJvcGVydHldO1xuICAgICAgICBjb25zdCBsYXN0VmFsdWUgPSBsaW5lUG9pbnRzW3NlZ21lbnQuZW5kXVtwcm9wZXJ0eV07XG4gICAgICAgIGlmIChfaXNCZXR3ZWVuKHBvaW50VmFsdWUsIGZpcnN0VmFsdWUsIGxhc3RWYWx1ZSkpIHtcbiAgICAgICAgICAgIGZpcnN0ID0gcG9pbnRWYWx1ZSA9PT0gZmlyc3RWYWx1ZTtcbiAgICAgICAgICAgIGxhc3QgPSBwb2ludFZhbHVlID09PSBsYXN0VmFsdWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBmaXJzdCxcbiAgICAgICAgbGFzdCxcbiAgICAgICAgcG9pbnRcbiAgICB9O1xufVxuXG5jbGFzcyBzaW1wbGVBcmMge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpe1xuICAgICAgICB0aGlzLnggPSBvcHRzLng7XG4gICAgICAgIHRoaXMueSA9IG9wdHMueTtcbiAgICAgICAgdGhpcy5yYWRpdXMgPSBvcHRzLnJhZGl1cztcbiAgICB9XG4gICAgcGF0aFNlZ21lbnQoY3R4LCBib3VuZHMsIG9wdHMpIHtcbiAgICAgICAgY29uc3QgeyB4ICwgeSAsIHJhZGl1cyAgfSA9IHRoaXM7XG4gICAgICAgIGJvdW5kcyA9IGJvdW5kcyB8fCB7XG4gICAgICAgICAgICBzdGFydDogMCxcbiAgICAgICAgICAgIGVuZDogVEFVXG4gICAgICAgIH07XG4gICAgICAgIGN0eC5hcmMoeCwgeSwgcmFkaXVzLCBib3VuZHMuZW5kLCBib3VuZHMuc3RhcnQsIHRydWUpO1xuICAgICAgICByZXR1cm4gIW9wdHMuYm91bmRzO1xuICAgIH1cbiAgICBpbnRlcnBvbGF0ZShwb2ludCkge1xuICAgICAgICBjb25zdCB7IHggLCB5ICwgcmFkaXVzICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgYW5nbGUgPSBwb2ludC5hbmdsZTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IHggKyBNYXRoLmNvcyhhbmdsZSkgKiByYWRpdXMsXG4gICAgICAgICAgICB5OiB5ICsgTWF0aC5zaW4oYW5nbGUpICogcmFkaXVzLFxuICAgICAgICAgICAgYW5nbGVcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIF9nZXRUYXJnZXQoc291cmNlKSB7XG4gICAgY29uc3QgeyBjaGFydCAsIGZpbGwgLCBsaW5lICB9ID0gc291cmNlO1xuICAgIGlmIChpc051bWJlckZpbml0ZShmaWxsKSkge1xuICAgICAgICByZXR1cm4gZ2V0TGluZUJ5SW5kZXgoY2hhcnQsIGZpbGwpO1xuICAgIH1cbiAgICBpZiAoZmlsbCA9PT0gJ3N0YWNrJykge1xuICAgICAgICByZXR1cm4gX2J1aWxkU3RhY2tMaW5lKHNvdXJjZSk7XG4gICAgfVxuICAgIGlmIChmaWxsID09PSAnc2hhcGUnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBib3VuZGFyeSA9IGNvbXB1dGVCb3VuZGFyeShzb3VyY2UpO1xuICAgIGlmIChib3VuZGFyeSBpbnN0YW5jZW9mIHNpbXBsZUFyYykge1xuICAgICAgICByZXR1cm4gYm91bmRhcnk7XG4gICAgfVxuICAgIHJldHVybiBfY3JlYXRlQm91bmRhcnlMaW5lKGJvdW5kYXJ5LCBsaW5lKTtcbn1cbiBmdW5jdGlvbiBnZXRMaW5lQnlJbmRleChjaGFydCwgaW5kZXgpIHtcbiAgICBjb25zdCBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoaW5kZXgpO1xuICAgIGNvbnN0IHZpc2libGUgPSBtZXRhICYmIGNoYXJ0LmlzRGF0YXNldFZpc2libGUoaW5kZXgpO1xuICAgIHJldHVybiB2aXNpYmxlID8gbWV0YS5kYXRhc2V0IDogbnVsbDtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVCb3VuZGFyeShzb3VyY2UpIHtcbiAgICBjb25zdCBzY2FsZSA9IHNvdXJjZS5zY2FsZSB8fCB7fTtcbiAgICBpZiAoc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlKSB7XG4gICAgICAgIHJldHVybiBjb21wdXRlQ2lyY3VsYXJCb3VuZGFyeShzb3VyY2UpO1xuICAgIH1cbiAgICByZXR1cm4gY29tcHV0ZUxpbmVhckJvdW5kYXJ5KHNvdXJjZSk7XG59XG5mdW5jdGlvbiBjb21wdXRlTGluZWFyQm91bmRhcnkoc291cmNlKSB7XG4gICAgY29uc3QgeyBzY2FsZSA9e30gLCBmaWxsICB9ID0gc291cmNlO1xuICAgIGNvbnN0IHBpeGVsID0gX2dldFRhcmdldFBpeGVsKGZpbGwsIHNjYWxlKTtcbiAgICBpZiAoaXNOdW1iZXJGaW5pdGUocGl4ZWwpKSB7XG4gICAgICAgIGNvbnN0IGhvcml6b250YWwgPSBzY2FsZS5pc0hvcml6b250YWwoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IGhvcml6b250YWwgPyBwaXhlbCA6IG51bGwsXG4gICAgICAgICAgICB5OiBob3Jpem9udGFsID8gbnVsbCA6IHBpeGVsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gY29tcHV0ZUNpcmN1bGFyQm91bmRhcnkoc291cmNlKSB7XG4gICAgY29uc3QgeyBzY2FsZSAsIGZpbGwgIH0gPSBzb3VyY2U7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHNjYWxlLm9wdGlvbnM7XG4gICAgY29uc3QgbGVuZ3RoID0gc2NhbGUuZ2V0TGFiZWxzKCkubGVuZ3RoO1xuICAgIGNvbnN0IHN0YXJ0ID0gb3B0aW9ucy5yZXZlcnNlID8gc2NhbGUubWF4IDogc2NhbGUubWluO1xuICAgIGNvbnN0IHZhbHVlID0gX2dldFRhcmdldFZhbHVlKGZpbGwsIHNjYWxlLCBzdGFydCk7XG4gICAgY29uc3QgdGFyZ2V0ID0gW107XG4gICAgaWYgKG9wdGlvbnMuZ3JpZC5jaXJjdWxhcikge1xuICAgICAgICBjb25zdCBjZW50ZXIgPSBzY2FsZS5nZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUoMCwgc3RhcnQpO1xuICAgICAgICByZXR1cm4gbmV3IHNpbXBsZUFyYyh7XG4gICAgICAgICAgICB4OiBjZW50ZXIueCxcbiAgICAgICAgICAgIHk6IGNlbnRlci55LFxuICAgICAgICAgICAgcmFkaXVzOiBzY2FsZS5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZSh2YWx1ZSlcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSl7XG4gICAgICAgIHRhcmdldC5wdXNoKHNjYWxlLmdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZShpLCB2YWx1ZSkpO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfZHJhd2ZpbGwoY3R4LCBzb3VyY2UsIGFyZWEpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBfZ2V0VGFyZ2V0KHNvdXJjZSk7XG4gICAgY29uc3QgeyBsaW5lICwgc2NhbGUgLCBheGlzICB9ID0gc291cmNlO1xuICAgIGNvbnN0IGxpbmVPcHRzID0gbGluZS5vcHRpb25zO1xuICAgIGNvbnN0IGZpbGxPcHRpb24gPSBsaW5lT3B0cy5maWxsO1xuICAgIGNvbnN0IGNvbG9yID0gbGluZU9wdHMuYmFja2dyb3VuZENvbG9yO1xuICAgIGNvbnN0IHsgYWJvdmUgPWNvbG9yICwgYmVsb3cgPWNvbG9yICB9ID0gZmlsbE9wdGlvbiB8fCB7fTtcbiAgICBpZiAodGFyZ2V0ICYmIGxpbmUucG9pbnRzLmxlbmd0aCkge1xuICAgICAgICBjbGlwQXJlYShjdHgsIGFyZWEpO1xuICAgICAgICBkb0ZpbGwoY3R4LCB7XG4gICAgICAgICAgICBsaW5lLFxuICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgYWJvdmUsXG4gICAgICAgICAgICBiZWxvdyxcbiAgICAgICAgICAgIGFyZWEsXG4gICAgICAgICAgICBzY2FsZSxcbiAgICAgICAgICAgIGF4aXNcbiAgICAgICAgfSk7XG4gICAgICAgIHVuY2xpcEFyZWEoY3R4KTtcbiAgICB9XG59XG5mdW5jdGlvbiBkb0ZpbGwoY3R4LCBjZmcpIHtcbiAgICBjb25zdCB7IGxpbmUgLCB0YXJnZXQgLCBhYm92ZSAsIGJlbG93ICwgYXJlYSAsIHNjYWxlICB9ID0gY2ZnO1xuICAgIGNvbnN0IHByb3BlcnR5ID0gbGluZS5fbG9vcCA/ICdhbmdsZScgOiBjZmcuYXhpcztcbiAgICBjdHguc2F2ZSgpO1xuICAgIGlmIChwcm9wZXJ0eSA9PT0gJ3gnICYmIGJlbG93ICE9PSBhYm92ZSkge1xuICAgICAgICBjbGlwVmVydGljYWwoY3R4LCB0YXJnZXQsIGFyZWEudG9wKTtcbiAgICAgICAgZmlsbChjdHgsIHtcbiAgICAgICAgICAgIGxpbmUsXG4gICAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgICBjb2xvcjogYWJvdmUsXG4gICAgICAgICAgICBzY2FsZSxcbiAgICAgICAgICAgIHByb3BlcnR5XG4gICAgICAgIH0pO1xuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICBjbGlwVmVydGljYWwoY3R4LCB0YXJnZXQsIGFyZWEuYm90dG9tKTtcbiAgICB9XG4gICAgZmlsbChjdHgsIHtcbiAgICAgICAgbGluZSxcbiAgICAgICAgdGFyZ2V0LFxuICAgICAgICBjb2xvcjogYmVsb3csXG4gICAgICAgIHNjYWxlLFxuICAgICAgICBwcm9wZXJ0eVxuICAgIH0pO1xuICAgIGN0eC5yZXN0b3JlKCk7XG59XG5mdW5jdGlvbiBjbGlwVmVydGljYWwoY3R4LCB0YXJnZXQsIGNsaXBZKSB7XG4gICAgY29uc3QgeyBzZWdtZW50cyAsIHBvaW50cyAgfSA9IHRhcmdldDtcbiAgICBsZXQgZmlyc3QgPSB0cnVlO1xuICAgIGxldCBsaW5lTG9vcCA9IGZhbHNlO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBmb3IgKGNvbnN0IHNlZ21lbnQgb2Ygc2VnbWVudHMpe1xuICAgICAgICBjb25zdCB7IHN0YXJ0ICwgZW5kICB9ID0gc2VnbWVudDtcbiAgICAgICAgY29uc3QgZmlyc3RQb2ludCA9IHBvaW50c1tzdGFydF07XG4gICAgICAgIGNvbnN0IGxhc3RQb2ludCA9IHBvaW50c1tfZmluZFNlZ21lbnRFbmQoc3RhcnQsIGVuZCwgcG9pbnRzKV07XG4gICAgICAgIGlmIChmaXJzdCkge1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyhmaXJzdFBvaW50LngsIGZpcnN0UG9pbnQueSk7XG4gICAgICAgICAgICBmaXJzdCA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3R4LmxpbmVUbyhmaXJzdFBvaW50LngsIGNsaXBZKTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oZmlyc3RQb2ludC54LCBmaXJzdFBvaW50LnkpO1xuICAgICAgICB9XG4gICAgICAgIGxpbmVMb29wID0gISF0YXJnZXQucGF0aFNlZ21lbnQoY3R4LCBzZWdtZW50LCB7XG4gICAgICAgICAgICBtb3ZlOiBsaW5lTG9vcFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGxpbmVMb29wKSB7XG4gICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjdHgubGluZVRvKGxhc3RQb2ludC54LCBjbGlwWSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY3R4LmxpbmVUbyh0YXJnZXQuZmlyc3QoKS54LCBjbGlwWSk7XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIGN0eC5jbGlwKCk7XG59XG5mdW5jdGlvbiBmaWxsKGN0eCwgY2ZnKSB7XG4gICAgY29uc3QgeyBsaW5lICwgdGFyZ2V0ICwgcHJvcGVydHkgLCBjb2xvciAsIHNjYWxlICB9ID0gY2ZnO1xuICAgIGNvbnN0IHNlZ21lbnRzID0gX3NlZ21lbnRzKGxpbmUsIHRhcmdldCwgcHJvcGVydHkpO1xuICAgIGZvciAoY29uc3QgeyBzb3VyY2U6IHNyYyAsIHRhcmdldDogdGd0ICwgc3RhcnQgLCBlbmQgIH0gb2Ygc2VnbWVudHMpe1xuICAgICAgICBjb25zdCB7IHN0eWxlOiB7IGJhY2tncm91bmRDb2xvciA9Y29sb3IgIH0gPSB7fSAgfSA9IHNyYztcbiAgICAgICAgY29uc3Qgbm90U2hhcGUgPSB0YXJnZXQgIT09IHRydWU7XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBiYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgIGNsaXBCb3VuZHMoY3R4LCBzY2FsZSwgbm90U2hhcGUgJiYgX2dldEJvdW5kcyhwcm9wZXJ0eSwgc3RhcnQsIGVuZCkpO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGNvbnN0IGxpbmVMb29wID0gISFsaW5lLnBhdGhTZWdtZW50KGN0eCwgc3JjKTtcbiAgICAgICAgbGV0IGxvb3A7XG4gICAgICAgIGlmIChub3RTaGFwZSkge1xuICAgICAgICAgICAgaWYgKGxpbmVMb29wKSB7XG4gICAgICAgICAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbnRlcnBvbGF0ZWRMaW5lVG8oY3R4LCB0YXJnZXQsIGVuZCwgcHJvcGVydHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0TG9vcCA9ICEhdGFyZ2V0LnBhdGhTZWdtZW50KGN0eCwgdGd0LCB7XG4gICAgICAgICAgICAgICAgbW92ZTogbGluZUxvb3AsXG4gICAgICAgICAgICAgICAgcmV2ZXJzZTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsb29wID0gbGluZUxvb3AgJiYgdGFyZ2V0TG9vcDtcbiAgICAgICAgICAgIGlmICghbG9vcCkge1xuICAgICAgICAgICAgICAgIGludGVycG9sYXRlZExpbmVUbyhjdHgsIHRhcmdldCwgc3RhcnQsIHByb3BlcnR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgIGN0eC5maWxsKGxvb3AgPyAnZXZlbm9kZCcgOiAnbm9uemVybycpO1xuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNsaXBCb3VuZHMoY3R4LCBzY2FsZSwgYm91bmRzKSB7XG4gICAgY29uc3QgeyB0b3AgLCBib3R0b20gIH0gPSBzY2FsZS5jaGFydC5jaGFydEFyZWE7XG4gICAgY29uc3QgeyBwcm9wZXJ0eSAsIHN0YXJ0ICwgZW5kICB9ID0gYm91bmRzIHx8IHt9O1xuICAgIGlmIChwcm9wZXJ0eSA9PT0gJ3gnKSB7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY3R4LnJlY3Qoc3RhcnQsIHRvcCwgZW5kIC0gc3RhcnQsIGJvdHRvbSAtIHRvcCk7XG4gICAgICAgIGN0eC5jbGlwKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gaW50ZXJwb2xhdGVkTGluZVRvKGN0eCwgdGFyZ2V0LCBwb2ludCwgcHJvcGVydHkpIHtcbiAgICBjb25zdCBpbnRlcnBvbGF0ZWRQb2ludCA9IHRhcmdldC5pbnRlcnBvbGF0ZShwb2ludCwgcHJvcGVydHkpO1xuICAgIGlmIChpbnRlcnBvbGF0ZWRQb2ludCkge1xuICAgICAgICBjdHgubGluZVRvKGludGVycG9sYXRlZFBvaW50LngsIGludGVycG9sYXRlZFBvaW50LnkpO1xuICAgIH1cbn1cblxudmFyIGluZGV4ID0ge1xuICAgIGlkOiAnZmlsbGVyJyxcbiAgICBhZnRlckRhdGFzZXRzVXBkYXRlIChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgY291bnQgPSAoY2hhcnQuZGF0YS5kYXRhc2V0cyB8fCBbXSkubGVuZ3RoO1xuICAgICAgICBjb25zdCBzb3VyY2VzID0gW107XG4gICAgICAgIGxldCBtZXRhLCBpLCBsaW5lLCBzb3VyY2U7XG4gICAgICAgIGZvcihpID0gMDsgaSA8IGNvdW50OyArK2kpe1xuICAgICAgICAgICAgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGkpO1xuICAgICAgICAgICAgbGluZSA9IG1ldGEuZGF0YXNldDtcbiAgICAgICAgICAgIHNvdXJjZSA9IG51bGw7XG4gICAgICAgICAgICBpZiAobGluZSAmJiBsaW5lLm9wdGlvbnMgJiYgbGluZSBpbnN0YW5jZW9mIExpbmVFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgc291cmNlID0ge1xuICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiBjaGFydC5pc0RhdGFzZXRWaXNpYmxlKGkpLFxuICAgICAgICAgICAgICAgICAgICBpbmRleDogaSxcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogX2RlY29kZUZpbGwobGluZSwgaSwgY291bnQpLFxuICAgICAgICAgICAgICAgICAgICBjaGFydCxcbiAgICAgICAgICAgICAgICAgICAgYXhpczogbWV0YS5jb250cm9sbGVyLm9wdGlvbnMuaW5kZXhBeGlzLFxuICAgICAgICAgICAgICAgICAgICBzY2FsZTogbWV0YS52U2NhbGUsXG4gICAgICAgICAgICAgICAgICAgIGxpbmVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWV0YS4kZmlsbGVyID0gc291cmNlO1xuICAgICAgICAgICAgc291cmNlcy5wdXNoKHNvdXJjZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgY291bnQ7ICsraSl7XG4gICAgICAgICAgICBzb3VyY2UgPSBzb3VyY2VzW2ldO1xuICAgICAgICAgICAgaWYgKCFzb3VyY2UgfHwgc291cmNlLmZpbGwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzb3VyY2UuZmlsbCA9IF9yZXNvbHZlVGFyZ2V0KHNvdXJjZXMsIGksIG9wdGlvbnMucHJvcGFnYXRlKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgYmVmb3JlRHJhdyAoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGRyYXcgPSBvcHRpb25zLmRyYXdUaW1lID09PSAnYmVmb3JlRHJhdyc7XG4gICAgICAgIGNvbnN0IG1ldGFzZXRzID0gY2hhcnQuZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpO1xuICAgICAgICBjb25zdCBhcmVhID0gY2hhcnQuY2hhcnRBcmVhO1xuICAgICAgICBmb3IobGV0IGkgPSBtZXRhc2V0cy5sZW5ndGggLSAxOyBpID49IDA7IC0taSl7XG4gICAgICAgICAgICBjb25zdCBzb3VyY2UgPSBtZXRhc2V0c1tpXS4kZmlsbGVyO1xuICAgICAgICAgICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNvdXJjZS5saW5lLnVwZGF0ZUNvbnRyb2xQb2ludHMoYXJlYSwgc291cmNlLmF4aXMpO1xuICAgICAgICAgICAgaWYgKGRyYXcgJiYgc291cmNlLmZpbGwpIHtcbiAgICAgICAgICAgICAgICBfZHJhd2ZpbGwoY2hhcnQuY3R4LCBzb3VyY2UsIGFyZWEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBiZWZvcmVEYXRhc2V0c0RyYXcgKGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucy5kcmF3VGltZSAhPT0gJ2JlZm9yZURhdGFzZXRzRHJhdycpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXRhc2V0cyA9IGNoYXJ0LmdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKTtcbiAgICAgICAgZm9yKGxldCBpID0gbWV0YXNldHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpe1xuICAgICAgICAgICAgY29uc3Qgc291cmNlID0gbWV0YXNldHNbaV0uJGZpbGxlcjtcbiAgICAgICAgICAgIGlmIChfc2hvdWxkQXBwbHlGaWxsKHNvdXJjZSkpIHtcbiAgICAgICAgICAgICAgICBfZHJhd2ZpbGwoY2hhcnQuY3R4LCBzb3VyY2UsIGNoYXJ0LmNoYXJ0QXJlYSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGJlZm9yZURhdGFzZXREcmF3IChjaGFydCwgYXJncywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBzb3VyY2UgPSBhcmdzLm1ldGEuJGZpbGxlcjtcbiAgICAgICAgaWYgKCFfc2hvdWxkQXBwbHlGaWxsKHNvdXJjZSkgfHwgb3B0aW9ucy5kcmF3VGltZSAhPT0gJ2JlZm9yZURhdGFzZXREcmF3Jykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIF9kcmF3ZmlsbChjaGFydC5jdHgsIHNvdXJjZSwgY2hhcnQuY2hhcnRBcmVhKTtcbiAgICB9LFxuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIHByb3BhZ2F0ZTogdHJ1ZSxcbiAgICAgICAgZHJhd1RpbWU6ICdiZWZvcmVEYXRhc2V0RHJhdydcbiAgICB9XG59O1xuXG5jb25zdCBnZXRCb3hTaXplID0gKGxhYmVsT3B0cywgZm9udFNpemUpPT57XG4gICAgbGV0IHsgYm94SGVpZ2h0ID1mb250U2l6ZSAsIGJveFdpZHRoID1mb250U2l6ZSAgfSA9IGxhYmVsT3B0cztcbiAgICBpZiAobGFiZWxPcHRzLnVzZVBvaW50U3R5bGUpIHtcbiAgICAgICAgYm94SGVpZ2h0ID0gTWF0aC5taW4oYm94SGVpZ2h0LCBmb250U2l6ZSk7XG4gICAgICAgIGJveFdpZHRoID0gbGFiZWxPcHRzLnBvaW50U3R5bGVXaWR0aCB8fCBNYXRoLm1pbihib3hXaWR0aCwgZm9udFNpemUpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBib3hXaWR0aCxcbiAgICAgICAgYm94SGVpZ2h0LFxuICAgICAgICBpdGVtSGVpZ2h0OiBNYXRoLm1heChmb250U2l6ZSwgYm94SGVpZ2h0KVxuICAgIH07XG59O1xuY29uc3QgaXRlbXNFcXVhbCA9IChhLCBiKT0+YSAhPT0gbnVsbCAmJiBiICE9PSBudWxsICYmIGEuZGF0YXNldEluZGV4ID09PSBiLmRhdGFzZXRJbmRleCAmJiBhLmluZGV4ID09PSBiLmluZGV4O1xuY2xhc3MgTGVnZW5kIGV4dGVuZHMgRWxlbWVudCB7XG4gY29uc3RydWN0b3IoY29uZmlnKXtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fYWRkZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5sZWdlbmRIaXRCb3hlcyA9IFtdO1xuIHRoaXMuX2hvdmVyZWRJdGVtID0gbnVsbDtcbiAgICAgICAgdGhpcy5kb3VnaG51dE1vZGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jaGFydCA9IGNvbmZpZy5jaGFydDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gY29uZmlnLm9wdGlvbnM7XG4gICAgICAgIHRoaXMuY3R4ID0gY29uZmlnLmN0eDtcbiAgICAgICAgdGhpcy5sZWdlbmRJdGVtcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5jb2x1bW5TaXplcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5saW5lV2lkdGhzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm1heEhlaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5tYXhXaWR0aCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy50b3AgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuYm90dG9tID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmxlZnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucmlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLndpZHRoID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9tYXJnaW5zID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnBvc2l0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLndlaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5mdWxsU2l6ZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdXBkYXRlKG1heFdpZHRoLCBtYXhIZWlnaHQsIG1hcmdpbnMpIHtcbiAgICAgICAgdGhpcy5tYXhXaWR0aCA9IG1heFdpZHRoO1xuICAgICAgICB0aGlzLm1heEhlaWdodCA9IG1heEhlaWdodDtcbiAgICAgICAgdGhpcy5fbWFyZ2lucyA9IG1hcmdpbnM7XG4gICAgICAgIHRoaXMuc2V0RGltZW5zaW9ucygpO1xuICAgICAgICB0aGlzLmJ1aWxkTGFiZWxzKCk7XG4gICAgICAgIHRoaXMuZml0KCk7XG4gICAgfVxuICAgIHNldERpbWVuc2lvbnMoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5tYXhXaWR0aDtcbiAgICAgICAgICAgIHRoaXMubGVmdCA9IHRoaXMuX21hcmdpbnMubGVmdDtcbiAgICAgICAgICAgIHRoaXMucmlnaHQgPSB0aGlzLndpZHRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLm1heEhlaWdodDtcbiAgICAgICAgICAgIHRoaXMudG9wID0gdGhpcy5fbWFyZ2lucy50b3A7XG4gICAgICAgICAgICB0aGlzLmJvdHRvbSA9IHRoaXMuaGVpZ2h0O1xuICAgICAgICB9XG4gICAgfVxuICAgIGJ1aWxkTGFiZWxzKCkge1xuICAgICAgICBjb25zdCBsYWJlbE9wdHMgPSB0aGlzLm9wdGlvbnMubGFiZWxzIHx8IHt9O1xuICAgICAgICBsZXQgbGVnZW5kSXRlbXMgPSBjYWxsYmFjayhsYWJlbE9wdHMuZ2VuZXJhdGVMYWJlbHMsIFtcbiAgICAgICAgICAgIHRoaXMuY2hhcnRcbiAgICAgICAgXSwgdGhpcykgfHwgW107XG4gICAgICAgIGlmIChsYWJlbE9wdHMuZmlsdGVyKSB7XG4gICAgICAgICAgICBsZWdlbmRJdGVtcyA9IGxlZ2VuZEl0ZW1zLmZpbHRlcigoaXRlbSk9PmxhYmVsT3B0cy5maWx0ZXIoaXRlbSwgdGhpcy5jaGFydC5kYXRhKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxhYmVsT3B0cy5zb3J0KSB7XG4gICAgICAgICAgICBsZWdlbmRJdGVtcyA9IGxlZ2VuZEl0ZW1zLnNvcnQoKGEsIGIpPT5sYWJlbE9wdHMuc29ydChhLCBiLCB0aGlzLmNoYXJ0LmRhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJldmVyc2UpIHtcbiAgICAgICAgICAgIGxlZ2VuZEl0ZW1zLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxlZ2VuZEl0ZW1zID0gbGVnZW5kSXRlbXM7XG4gICAgfVxuICAgIGZpdCgpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zICwgY3R4ICB9ID0gdGhpcztcbiAgICAgICAgaWYgKCFvcHRpb25zLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSB0aGlzLmhlaWdodCA9IDA7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGFiZWxPcHRzID0gb3B0aW9ucy5sYWJlbHM7XG4gICAgICAgIGNvbnN0IGxhYmVsRm9udCA9IHRvRm9udChsYWJlbE9wdHMuZm9udCk7XG4gICAgICAgIGNvbnN0IGZvbnRTaXplID0gbGFiZWxGb250LnNpemU7XG4gICAgICAgIGNvbnN0IHRpdGxlSGVpZ2h0ID0gdGhpcy5fY29tcHV0ZVRpdGxlSGVpZ2h0KCk7XG4gICAgICAgIGNvbnN0IHsgYm94V2lkdGggLCBpdGVtSGVpZ2h0ICB9ID0gZ2V0Qm94U2l6ZShsYWJlbE9wdHMsIGZvbnRTaXplKTtcbiAgICAgICAgbGV0IHdpZHRoLCBoZWlnaHQ7XG4gICAgICAgIGN0eC5mb250ID0gbGFiZWxGb250LnN0cmluZztcbiAgICAgICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgIHdpZHRoID0gdGhpcy5tYXhXaWR0aDtcbiAgICAgICAgICAgIGhlaWdodCA9IHRoaXMuX2ZpdFJvd3ModGl0bGVIZWlnaHQsIGZvbnRTaXplLCBib3hXaWR0aCwgaXRlbUhlaWdodCkgKyAxMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhlaWdodCA9IHRoaXMubWF4SGVpZ2h0O1xuICAgICAgICAgICAgd2lkdGggPSB0aGlzLl9maXRDb2xzKHRpdGxlSGVpZ2h0LCBsYWJlbEZvbnQsIGJveFdpZHRoLCBpdGVtSGVpZ2h0KSArIDEwO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMud2lkdGggPSBNYXRoLm1pbih3aWR0aCwgb3B0aW9ucy5tYXhXaWR0aCB8fCB0aGlzLm1heFdpZHRoKTtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBNYXRoLm1pbihoZWlnaHQsIG9wdGlvbnMubWF4SGVpZ2h0IHx8IHRoaXMubWF4SGVpZ2h0KTtcbiAgICB9XG4gX2ZpdFJvd3ModGl0bGVIZWlnaHQsIGZvbnRTaXplLCBib3hXaWR0aCwgaXRlbUhlaWdodCkge1xuICAgICAgICBjb25zdCB7IGN0eCAsIG1heFdpZHRoICwgb3B0aW9uczogeyBsYWJlbHM6IHsgcGFkZGluZyAgfSAgfSAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGhpdGJveGVzID0gdGhpcy5sZWdlbmRIaXRCb3hlcyA9IFtdO1xuICAgICAgICBjb25zdCBsaW5lV2lkdGhzID0gdGhpcy5saW5lV2lkdGhzID0gW1xuICAgICAgICAgICAgMFxuICAgICAgICBdO1xuICAgICAgICBjb25zdCBsaW5lSGVpZ2h0ID0gaXRlbUhlaWdodCArIHBhZGRpbmc7XG4gICAgICAgIGxldCB0b3RhbEhlaWdodCA9IHRpdGxlSGVpZ2h0O1xuICAgICAgICBjdHgudGV4dEFsaWduID0gJ2xlZnQnO1xuICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgICAgIGxldCByb3cgPSAtMTtcbiAgICAgICAgbGV0IHRvcCA9IC1saW5lSGVpZ2h0O1xuICAgICAgICB0aGlzLmxlZ2VuZEl0ZW1zLmZvckVhY2goKGxlZ2VuZEl0ZW0sIGkpPT57XG4gICAgICAgICAgICBjb25zdCBpdGVtV2lkdGggPSBib3hXaWR0aCArIGZvbnRTaXplIC8gMiArIGN0eC5tZWFzdXJlVGV4dChsZWdlbmRJdGVtLnRleHQpLndpZHRoO1xuICAgICAgICAgICAgaWYgKGkgPT09IDAgfHwgbGluZVdpZHRoc1tsaW5lV2lkdGhzLmxlbmd0aCAtIDFdICsgaXRlbVdpZHRoICsgMiAqIHBhZGRpbmcgPiBtYXhXaWR0aCkge1xuICAgICAgICAgICAgICAgIHRvdGFsSGVpZ2h0ICs9IGxpbmVIZWlnaHQ7XG4gICAgICAgICAgICAgICAgbGluZVdpZHRoc1tsaW5lV2lkdGhzLmxlbmd0aCAtIChpID4gMCA/IDAgOiAxKV0gPSAwO1xuICAgICAgICAgICAgICAgIHRvcCArPSBsaW5lSGVpZ2h0O1xuICAgICAgICAgICAgICAgIHJvdysrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGl0Ym94ZXNbaV0gPSB7XG4gICAgICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgICAgICB0b3AsXG4gICAgICAgICAgICAgICAgcm93LFxuICAgICAgICAgICAgICAgIHdpZHRoOiBpdGVtV2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBpdGVtSGVpZ2h0XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbGluZVdpZHRoc1tsaW5lV2lkdGhzLmxlbmd0aCAtIDFdICs9IGl0ZW1XaWR0aCArIHBhZGRpbmc7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdG90YWxIZWlnaHQ7XG4gICAgfVxuICAgIF9maXRDb2xzKHRpdGxlSGVpZ2h0LCBsYWJlbEZvbnQsIGJveFdpZHRoLCBfaXRlbUhlaWdodCkge1xuICAgICAgICBjb25zdCB7IGN0eCAsIG1heEhlaWdodCAsIG9wdGlvbnM6IHsgbGFiZWxzOiB7IHBhZGRpbmcgIH0gIH0gIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBoaXRib3hlcyA9IHRoaXMubGVnZW5kSGl0Qm94ZXMgPSBbXTtcbiAgICAgICAgY29uc3QgY29sdW1uU2l6ZXMgPSB0aGlzLmNvbHVtblNpemVzID0gW107XG4gICAgICAgIGNvbnN0IGhlaWdodExpbWl0ID0gbWF4SGVpZ2h0IC0gdGl0bGVIZWlnaHQ7XG4gICAgICAgIGxldCB0b3RhbFdpZHRoID0gcGFkZGluZztcbiAgICAgICAgbGV0IGN1cnJlbnRDb2xXaWR0aCA9IDA7XG4gICAgICAgIGxldCBjdXJyZW50Q29sSGVpZ2h0ID0gMDtcbiAgICAgICAgbGV0IGxlZnQgPSAwO1xuICAgICAgICBsZXQgY29sID0gMDtcbiAgICAgICAgdGhpcy5sZWdlbmRJdGVtcy5mb3JFYWNoKChsZWdlbmRJdGVtLCBpKT0+e1xuICAgICAgICAgICAgY29uc3QgeyBpdGVtV2lkdGggLCBpdGVtSGVpZ2h0ICB9ID0gY2FsY3VsYXRlSXRlbVNpemUoYm94V2lkdGgsIGxhYmVsRm9udCwgY3R4LCBsZWdlbmRJdGVtLCBfaXRlbUhlaWdodCk7XG4gICAgICAgICAgICBpZiAoaSA+IDAgJiYgY3VycmVudENvbEhlaWdodCArIGl0ZW1IZWlnaHQgKyAyICogcGFkZGluZyA+IGhlaWdodExpbWl0KSB7XG4gICAgICAgICAgICAgICAgdG90YWxXaWR0aCArPSBjdXJyZW50Q29sV2lkdGggKyBwYWRkaW5nO1xuICAgICAgICAgICAgICAgIGNvbHVtblNpemVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogY3VycmVudENvbFdpZHRoLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGN1cnJlbnRDb2xIZWlnaHRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBsZWZ0ICs9IGN1cnJlbnRDb2xXaWR0aCArIHBhZGRpbmc7XG4gICAgICAgICAgICAgICAgY29sKys7XG4gICAgICAgICAgICAgICAgY3VycmVudENvbFdpZHRoID0gY3VycmVudENvbEhlaWdodCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoaXRib3hlc1tpXSA9IHtcbiAgICAgICAgICAgICAgICBsZWZ0LFxuICAgICAgICAgICAgICAgIHRvcDogY3VycmVudENvbEhlaWdodCxcbiAgICAgICAgICAgICAgICBjb2wsXG4gICAgICAgICAgICAgICAgd2lkdGg6IGl0ZW1XaWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGl0ZW1IZWlnaHRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjdXJyZW50Q29sV2lkdGggPSBNYXRoLm1heChjdXJyZW50Q29sV2lkdGgsIGl0ZW1XaWR0aCk7XG4gICAgICAgICAgICBjdXJyZW50Q29sSGVpZ2h0ICs9IGl0ZW1IZWlnaHQgKyBwYWRkaW5nO1xuICAgICAgICB9KTtcbiAgICAgICAgdG90YWxXaWR0aCArPSBjdXJyZW50Q29sV2lkdGg7XG4gICAgICAgIGNvbHVtblNpemVzLnB1c2goe1xuICAgICAgICAgICAgd2lkdGg6IGN1cnJlbnRDb2xXaWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogY3VycmVudENvbEhlaWdodFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRvdGFsV2lkdGg7XG4gICAgfVxuICAgIGFkanVzdEhpdEJveGVzKCkge1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5kaXNwbGF5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGl0bGVIZWlnaHQgPSB0aGlzLl9jb21wdXRlVGl0bGVIZWlnaHQoKTtcbiAgICAgICAgY29uc3QgeyBsZWdlbmRIaXRCb3hlczogaGl0Ym94ZXMgLCBvcHRpb25zOiB7IGFsaWduICwgbGFiZWxzOiB7IHBhZGRpbmcgIH0gLCBydGwgIH0gIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBydGxIZWxwZXIgPSBnZXRSdGxBZGFwdGVyKHJ0bCwgdGhpcy5sZWZ0LCB0aGlzLndpZHRoKTtcbiAgICAgICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgIGxldCByb3cgPSAwO1xuICAgICAgICAgICAgbGV0IGxlZnQgPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgdGhpcy5sZWZ0ICsgcGFkZGluZywgdGhpcy5yaWdodCAtIHRoaXMubGluZVdpZHRoc1tyb3ddKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaGl0Ym94IG9mIGhpdGJveGVzKXtcbiAgICAgICAgICAgICAgICBpZiAocm93ICE9PSBoaXRib3gucm93KSB7XG4gICAgICAgICAgICAgICAgICAgIHJvdyA9IGhpdGJveC5yb3c7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQgPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgdGhpcy5sZWZ0ICsgcGFkZGluZywgdGhpcy5yaWdodCAtIHRoaXMubGluZVdpZHRoc1tyb3ddKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaGl0Ym94LnRvcCArPSB0aGlzLnRvcCArIHRpdGxlSGVpZ2h0ICsgcGFkZGluZztcbiAgICAgICAgICAgICAgICBoaXRib3gubGVmdCA9IHJ0bEhlbHBlci5sZWZ0Rm9yTHRyKHJ0bEhlbHBlci54KGxlZnQpLCBoaXRib3gud2lkdGgpO1xuICAgICAgICAgICAgICAgIGxlZnQgKz0gaGl0Ym94LndpZHRoICsgcGFkZGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBjb2wgPSAwO1xuICAgICAgICAgICAgbGV0IHRvcCA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0aGlzLnRvcCArIHRpdGxlSGVpZ2h0ICsgcGFkZGluZywgdGhpcy5ib3R0b20gLSB0aGlzLmNvbHVtblNpemVzW2NvbF0uaGVpZ2h0KTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaGl0Ym94IG9mIGhpdGJveGVzKXtcbiAgICAgICAgICAgICAgICBpZiAoaGl0Ym94LmNvbCAhPT0gY29sKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbCA9IGhpdGJveC5jb2w7XG4gICAgICAgICAgICAgICAgICAgIHRvcCA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0aGlzLnRvcCArIHRpdGxlSGVpZ2h0ICsgcGFkZGluZywgdGhpcy5ib3R0b20gLSB0aGlzLmNvbHVtblNpemVzW2NvbF0uaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaGl0Ym94LnRvcCA9IHRvcDtcbiAgICAgICAgICAgICAgICBoaXRib3gubGVmdCArPSB0aGlzLmxlZnQgKyBwYWRkaW5nO1xuICAgICAgICAgICAgICAgIGhpdGJveC5sZWZ0ID0gcnRsSGVscGVyLmxlZnRGb3JMdHIocnRsSGVscGVyLngoaGl0Ym94LmxlZnQpLCBoaXRib3gud2lkdGgpO1xuICAgICAgICAgICAgICAgIHRvcCArPSBoaXRib3guaGVpZ2h0ICsgcGFkZGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpc0hvcml6b250YWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMucG9zaXRpb24gPT09ICd0b3AnIHx8IHRoaXMub3B0aW9ucy5wb3NpdGlvbiA9PT0gJ2JvdHRvbSc7XG4gICAgfVxuICAgIGRyYXcoKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGlzcGxheSkge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgICAgICAgICBjbGlwQXJlYShjdHgsIHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5fZHJhdygpO1xuICAgICAgICAgICAgdW5jbGlwQXJlYShjdHgpO1xuICAgICAgICB9XG4gICAgfVxuIF9kcmF3KCkge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnM6IG9wdHMgLCBjb2x1bW5TaXplcyAsIGxpbmVXaWR0aHMgLCBjdHggIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IGFsaWduICwgbGFiZWxzOiBsYWJlbE9wdHMgIH0gPSBvcHRzO1xuICAgICAgICBjb25zdCBkZWZhdWx0Q29sb3IgPSBkZWZhdWx0cy5jb2xvcjtcbiAgICAgICAgY29uc3QgcnRsSGVscGVyID0gZ2V0UnRsQWRhcHRlcihvcHRzLnJ0bCwgdGhpcy5sZWZ0LCB0aGlzLndpZHRoKTtcbiAgICAgICAgY29uc3QgbGFiZWxGb250ID0gdG9Gb250KGxhYmVsT3B0cy5mb250KTtcbiAgICAgICAgY29uc3QgeyBwYWRkaW5nICB9ID0gbGFiZWxPcHRzO1xuICAgICAgICBjb25zdCBmb250U2l6ZSA9IGxhYmVsRm9udC5zaXplO1xuICAgICAgICBjb25zdCBoYWxmRm9udFNpemUgPSBmb250U2l6ZSAvIDI7XG4gICAgICAgIGxldCBjdXJzb3I7XG4gICAgICAgIHRoaXMuZHJhd1RpdGxlKCk7XG4gICAgICAgIGN0eC50ZXh0QWxpZ24gPSBydGxIZWxwZXIudGV4dEFsaWduKCdsZWZ0Jyk7XG4gICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IDAuNTtcbiAgICAgICAgY3R4LmZvbnQgPSBsYWJlbEZvbnQuc3RyaW5nO1xuICAgICAgICBjb25zdCB7IGJveFdpZHRoICwgYm94SGVpZ2h0ICwgaXRlbUhlaWdodCAgfSA9IGdldEJveFNpemUobGFiZWxPcHRzLCBmb250U2l6ZSk7XG4gICAgICAgIGNvbnN0IGRyYXdMZWdlbmRCb3ggPSBmdW5jdGlvbih4LCB5LCBsZWdlbmRJdGVtKSB7XG4gICAgICAgICAgICBpZiAoaXNOYU4oYm94V2lkdGgpIHx8IGJveFdpZHRoIDw9IDAgfHwgaXNOYU4oYm94SGVpZ2h0KSB8fCBib3hIZWlnaHQgPCAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgIGNvbnN0IGxpbmVXaWR0aCA9IHZhbHVlT3JEZWZhdWx0KGxlZ2VuZEl0ZW0ubGluZVdpZHRoLCAxKTtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSB2YWx1ZU9yRGVmYXVsdChsZWdlbmRJdGVtLmZpbGxTdHlsZSwgZGVmYXVsdENvbG9yKTtcbiAgICAgICAgICAgIGN0eC5saW5lQ2FwID0gdmFsdWVPckRlZmF1bHQobGVnZW5kSXRlbS5saW5lQ2FwLCAnYnV0dCcpO1xuICAgICAgICAgICAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gdmFsdWVPckRlZmF1bHQobGVnZW5kSXRlbS5saW5lRGFzaE9mZnNldCwgMCk7XG4gICAgICAgICAgICBjdHgubGluZUpvaW4gPSB2YWx1ZU9yRGVmYXVsdChsZWdlbmRJdGVtLmxpbmVKb2luLCAnbWl0ZXInKTtcbiAgICAgICAgICAgIGN0eC5saW5lV2lkdGggPSBsaW5lV2lkdGg7XG4gICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSB2YWx1ZU9yRGVmYXVsdChsZWdlbmRJdGVtLnN0cm9rZVN0eWxlLCBkZWZhdWx0Q29sb3IpO1xuICAgICAgICAgICAgY3R4LnNldExpbmVEYXNoKHZhbHVlT3JEZWZhdWx0KGxlZ2VuZEl0ZW0ubGluZURhc2gsIFtdKSk7XG4gICAgICAgICAgICBpZiAobGFiZWxPcHRzLnVzZVBvaW50U3R5bGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkcmF3T3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiBib3hIZWlnaHQgKiBNYXRoLlNRUlQyIC8gMixcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRTdHlsZTogbGVnZW5kSXRlbS5wb2ludFN0eWxlLFxuICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogbGVnZW5kSXRlbS5yb3RhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IGxpbmVXaWR0aFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29uc3QgY2VudGVyWCA9IHJ0bEhlbHBlci54UGx1cyh4LCBib3hXaWR0aCAvIDIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNlbnRlclkgPSB5ICsgaGFsZkZvbnRTaXplO1xuICAgICAgICAgICAgICAgIGRyYXdQb2ludExlZ2VuZChjdHgsIGRyYXdPcHRpb25zLCBjZW50ZXJYLCBjZW50ZXJZLCBsYWJlbE9wdHMucG9pbnRTdHlsZVdpZHRoICYmIGJveFdpZHRoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeUJveFRvcCA9IHkgKyBNYXRoLm1heCgoZm9udFNpemUgLSBib3hIZWlnaHQpIC8gMiwgMCk7XG4gICAgICAgICAgICAgICAgY29uc3QgeEJveExlZnQgPSBydGxIZWxwZXIubGVmdEZvckx0cih4LCBib3hXaWR0aCk7XG4gICAgICAgICAgICAgICAgY29uc3QgYm9yZGVyUmFkaXVzID0gdG9UUkJMQ29ybmVycyhsZWdlbmRJdGVtLmJvcmRlclJhZGl1cyk7XG4gICAgICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgIGlmIChPYmplY3QudmFsdWVzKGJvcmRlclJhZGl1cykuc29tZSgodik9PnYgIT09IDApKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZFJvdW5kZWRSZWN0UGF0aChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IHhCb3hMZWZ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogeUJveFRvcCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHc6IGJveFdpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgaDogYm94SGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiBib3JkZXJSYWRpdXNcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnJlY3QoeEJveExlZnQsIHlCb3hUb3AsIGJveFdpZHRoLCBib3hIZWlnaHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICAgICAgICAgIGlmIChsaW5lV2lkdGggIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGZpbGxUZXh0ID0gZnVuY3Rpb24oeCwgeSwgbGVnZW5kSXRlbSkge1xuICAgICAgICAgICAgcmVuZGVyVGV4dChjdHgsIGxlZ2VuZEl0ZW0udGV4dCwgeCwgeSArIGl0ZW1IZWlnaHQgLyAyLCBsYWJlbEZvbnQsIHtcbiAgICAgICAgICAgICAgICBzdHJpa2V0aHJvdWdoOiBsZWdlbmRJdGVtLmhpZGRlbixcbiAgICAgICAgICAgICAgICB0ZXh0QWxpZ246IHJ0bEhlbHBlci50ZXh0QWxpZ24obGVnZW5kSXRlbS50ZXh0QWxpZ24pXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgaXNIb3Jpem9udGFsID0gdGhpcy5pc0hvcml6b250YWwoKTtcbiAgICAgICAgY29uc3QgdGl0bGVIZWlnaHQgPSB0aGlzLl9jb21wdXRlVGl0bGVIZWlnaHQoKTtcbiAgICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgY3Vyc29yID0ge1xuICAgICAgICAgICAgICAgIHg6IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0aGlzLmxlZnQgKyBwYWRkaW5nLCB0aGlzLnJpZ2h0IC0gbGluZVdpZHRoc1swXSksXG4gICAgICAgICAgICAgICAgeTogdGhpcy50b3AgKyBwYWRkaW5nICsgdGl0bGVIZWlnaHQsXG4gICAgICAgICAgICAgICAgbGluZTogMFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgICAgICAgICB4OiB0aGlzLmxlZnQgKyBwYWRkaW5nLFxuICAgICAgICAgICAgICAgIHk6IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0aGlzLnRvcCArIHRpdGxlSGVpZ2h0ICsgcGFkZGluZywgdGhpcy5ib3R0b20gLSBjb2x1bW5TaXplc1swXS5oZWlnaHQpLFxuICAgICAgICAgICAgICAgIGxpbmU6IDBcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgb3ZlcnJpZGVUZXh0RGlyZWN0aW9uKHRoaXMuY3R4LCBvcHRzLnRleHREaXJlY3Rpb24pO1xuICAgICAgICBjb25zdCBsaW5lSGVpZ2h0ID0gaXRlbUhlaWdodCArIHBhZGRpbmc7XG4gICAgICAgIHRoaXMubGVnZW5kSXRlbXMuZm9yRWFjaCgobGVnZW5kSXRlbSwgaSk9PntcbiAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGxlZ2VuZEl0ZW0uZm9udENvbG9yO1xuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGxlZ2VuZEl0ZW0uZm9udENvbG9yO1xuICAgICAgICAgICAgY29uc3QgdGV4dFdpZHRoID0gY3R4Lm1lYXN1cmVUZXh0KGxlZ2VuZEl0ZW0udGV4dCkud2lkdGg7XG4gICAgICAgICAgICBjb25zdCB0ZXh0QWxpZ24gPSBydGxIZWxwZXIudGV4dEFsaWduKGxlZ2VuZEl0ZW0udGV4dEFsaWduIHx8IChsZWdlbmRJdGVtLnRleHRBbGlnbiA9IGxhYmVsT3B0cy50ZXh0QWxpZ24pKTtcbiAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gYm94V2lkdGggKyBoYWxmRm9udFNpemUgKyB0ZXh0V2lkdGg7XG4gICAgICAgICAgICBsZXQgeCA9IGN1cnNvci54O1xuICAgICAgICAgICAgbGV0IHkgPSBjdXJzb3IueTtcbiAgICAgICAgICAgIHJ0bEhlbHBlci5zZXRXaWR0aCh0aGlzLndpZHRoKTtcbiAgICAgICAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgICAgICAgICBpZiAoaSA+IDAgJiYgeCArIHdpZHRoICsgcGFkZGluZyA+IHRoaXMucmlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgeSA9IGN1cnNvci55ICs9IGxpbmVIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIGN1cnNvci5saW5lKys7XG4gICAgICAgICAgICAgICAgICAgIHggPSBjdXJzb3IueCA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0aGlzLmxlZnQgKyBwYWRkaW5nLCB0aGlzLnJpZ2h0IC0gbGluZVdpZHRoc1tjdXJzb3IubGluZV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaSA+IDAgJiYgeSArIGxpbmVIZWlnaHQgPiB0aGlzLmJvdHRvbSkge1xuICAgICAgICAgICAgICAgIHggPSBjdXJzb3IueCA9IHggKyBjb2x1bW5TaXplc1tjdXJzb3IubGluZV0ud2lkdGggKyBwYWRkaW5nO1xuICAgICAgICAgICAgICAgIGN1cnNvci5saW5lKys7XG4gICAgICAgICAgICAgICAgeSA9IGN1cnNvci55ID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMudG9wICsgdGl0bGVIZWlnaHQgKyBwYWRkaW5nLCB0aGlzLmJvdHRvbSAtIGNvbHVtblNpemVzW2N1cnNvci5saW5lXS5oZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcmVhbFggPSBydGxIZWxwZXIueCh4KTtcbiAgICAgICAgICAgIGRyYXdMZWdlbmRCb3gocmVhbFgsIHksIGxlZ2VuZEl0ZW0pO1xuICAgICAgICAgICAgeCA9IF90ZXh0WCh0ZXh0QWxpZ24sIHggKyBib3hXaWR0aCArIGhhbGZGb250U2l6ZSwgaXNIb3Jpem9udGFsID8geCArIHdpZHRoIDogdGhpcy5yaWdodCwgb3B0cy5ydGwpO1xuICAgICAgICAgICAgZmlsbFRleHQocnRsSGVscGVyLngoeCksIHksIGxlZ2VuZEl0ZW0pO1xuICAgICAgICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgICAgIGN1cnNvci54ICs9IHdpZHRoICsgcGFkZGluZztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxlZ2VuZEl0ZW0udGV4dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmb250TGluZUhlaWdodCA9IGxhYmVsRm9udC5saW5lSGVpZ2h0O1xuICAgICAgICAgICAgICAgIGN1cnNvci55ICs9IGNhbGN1bGF0ZUxlZ2VuZEl0ZW1IZWlnaHQobGVnZW5kSXRlbSwgZm9udExpbmVIZWlnaHQpICsgcGFkZGluZztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY3Vyc29yLnkgKz0gbGluZUhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJlc3RvcmVUZXh0RGlyZWN0aW9uKHRoaXMuY3R4LCBvcHRzLnRleHREaXJlY3Rpb24pO1xuICAgIH1cbiBkcmF3VGl0bGUoKSB7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHRpdGxlT3B0cyA9IG9wdHMudGl0bGU7XG4gICAgICAgIGNvbnN0IHRpdGxlRm9udCA9IHRvRm9udCh0aXRsZU9wdHMuZm9udCk7XG4gICAgICAgIGNvbnN0IHRpdGxlUGFkZGluZyA9IHRvUGFkZGluZyh0aXRsZU9wdHMucGFkZGluZyk7XG4gICAgICAgIGlmICghdGl0bGVPcHRzLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBydGxIZWxwZXIgPSBnZXRSdGxBZGFwdGVyKG9wdHMucnRsLCB0aGlzLmxlZnQsIHRoaXMud2lkdGgpO1xuICAgICAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSB0aXRsZU9wdHMucG9zaXRpb247XG4gICAgICAgIGNvbnN0IGhhbGZGb250U2l6ZSA9IHRpdGxlRm9udC5zaXplIC8gMjtcbiAgICAgICAgY29uc3QgdG9wUGFkZGluZ1BsdXNIYWxmRm9udFNpemUgPSB0aXRsZVBhZGRpbmcudG9wICsgaGFsZkZvbnRTaXplO1xuICAgICAgICBsZXQgeTtcbiAgICAgICAgbGV0IGxlZnQgPSB0aGlzLmxlZnQ7XG4gICAgICAgIGxldCBtYXhXaWR0aCA9IHRoaXMud2lkdGg7XG4gICAgICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICBtYXhXaWR0aCA9IE1hdGgubWF4KC4uLnRoaXMubGluZVdpZHRocyk7XG4gICAgICAgICAgICB5ID0gdGhpcy50b3AgKyB0b3BQYWRkaW5nUGx1c0hhbGZGb250U2l6ZTtcbiAgICAgICAgICAgIGxlZnQgPSBfYWxpZ25TdGFydEVuZChvcHRzLmFsaWduLCBsZWZ0LCB0aGlzLnJpZ2h0IC0gbWF4V2lkdGgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbWF4SGVpZ2h0ID0gdGhpcy5jb2x1bW5TaXplcy5yZWR1Y2UoKGFjYywgc2l6ZSk9Pk1hdGgubWF4KGFjYywgc2l6ZS5oZWlnaHQpLCAwKTtcbiAgICAgICAgICAgIHkgPSB0b3BQYWRkaW5nUGx1c0hhbGZGb250U2l6ZSArIF9hbGlnblN0YXJ0RW5kKG9wdHMuYWxpZ24sIHRoaXMudG9wLCB0aGlzLmJvdHRvbSAtIG1heEhlaWdodCAtIG9wdHMubGFiZWxzLnBhZGRpbmcgLSB0aGlzLl9jb21wdXRlVGl0bGVIZWlnaHQoKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeCA9IF9hbGlnblN0YXJ0RW5kKHBvc2l0aW9uLCBsZWZ0LCBsZWZ0ICsgbWF4V2lkdGgpO1xuICAgICAgICBjdHgudGV4dEFsaWduID0gcnRsSGVscGVyLnRleHRBbGlnbihfdG9MZWZ0UmlnaHRDZW50ZXIocG9zaXRpb24pKTtcbiAgICAgICAgY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSB0aXRsZU9wdHMuY29sb3I7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSB0aXRsZU9wdHMuY29sb3I7XG4gICAgICAgIGN0eC5mb250ID0gdGl0bGVGb250LnN0cmluZztcbiAgICAgICAgcmVuZGVyVGV4dChjdHgsIHRpdGxlT3B0cy50ZXh0LCB4LCB5LCB0aXRsZUZvbnQpO1xuICAgIH1cbiBfY29tcHV0ZVRpdGxlSGVpZ2h0KCkge1xuICAgICAgICBjb25zdCB0aXRsZU9wdHMgPSB0aGlzLm9wdGlvbnMudGl0bGU7XG4gICAgICAgIGNvbnN0IHRpdGxlRm9udCA9IHRvRm9udCh0aXRsZU9wdHMuZm9udCk7XG4gICAgICAgIGNvbnN0IHRpdGxlUGFkZGluZyA9IHRvUGFkZGluZyh0aXRsZU9wdHMucGFkZGluZyk7XG4gICAgICAgIHJldHVybiB0aXRsZU9wdHMuZGlzcGxheSA/IHRpdGxlRm9udC5saW5lSGVpZ2h0ICsgdGl0bGVQYWRkaW5nLmhlaWdodCA6IDA7XG4gICAgfVxuIF9nZXRMZWdlbmRJdGVtQXQoeCwgeSkge1xuICAgICAgICBsZXQgaSwgaGl0Qm94LCBsaDtcbiAgICAgICAgaWYgKF9pc0JldHdlZW4oeCwgdGhpcy5sZWZ0LCB0aGlzLnJpZ2h0KSAmJiBfaXNCZXR3ZWVuKHksIHRoaXMudG9wLCB0aGlzLmJvdHRvbSkpIHtcbiAgICAgICAgICAgIGxoID0gdGhpcy5sZWdlbmRIaXRCb3hlcztcbiAgICAgICAgICAgIGZvcihpID0gMDsgaSA8IGxoLmxlbmd0aDsgKytpKXtcbiAgICAgICAgICAgICAgICBoaXRCb3ggPSBsaFtpXTtcbiAgICAgICAgICAgICAgICBpZiAoX2lzQmV0d2Vlbih4LCBoaXRCb3gubGVmdCwgaGl0Qm94LmxlZnQgKyBoaXRCb3gud2lkdGgpICYmIF9pc0JldHdlZW4oeSwgaGl0Qm94LnRvcCwgaGl0Qm94LnRvcCArIGhpdEJveC5oZWlnaHQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxlZ2VuZEl0ZW1zW2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gaGFuZGxlRXZlbnQoZSkge1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBpZiAoIWlzTGlzdGVuZWQoZS50eXBlLCBvcHRzKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhvdmVyZWRJdGVtID0gdGhpcy5fZ2V0TGVnZW5kSXRlbUF0KGUueCwgZS55KTtcbiAgICAgICAgaWYgKGUudHlwZSA9PT0gJ21vdXNlbW92ZScgfHwgZS50eXBlID09PSAnbW91c2VvdXQnKSB7XG4gICAgICAgICAgICBjb25zdCBwcmV2aW91cyA9IHRoaXMuX2hvdmVyZWRJdGVtO1xuICAgICAgICAgICAgY29uc3Qgc2FtZUl0ZW0gPSBpdGVtc0VxdWFsKHByZXZpb3VzLCBob3ZlcmVkSXRlbSk7XG4gICAgICAgICAgICBpZiAocHJldmlvdXMgJiYgIXNhbWVJdGVtKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sob3B0cy5vbkxlYXZlLCBbXG4gICAgICAgICAgICAgICAgICAgIGUsXG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzLFxuICAgICAgICAgICAgICAgICAgICB0aGlzXG4gICAgICAgICAgICAgICAgXSwgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9ob3ZlcmVkSXRlbSA9IGhvdmVyZWRJdGVtO1xuICAgICAgICAgICAgaWYgKGhvdmVyZWRJdGVtICYmICFzYW1lSXRlbSkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG9wdHMub25Ib3ZlciwgW1xuICAgICAgICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICAgICAgICBob3ZlcmVkSXRlbSxcbiAgICAgICAgICAgICAgICAgICAgdGhpc1xuICAgICAgICAgICAgICAgIF0sIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGhvdmVyZWRJdGVtKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhvcHRzLm9uQ2xpY2ssIFtcbiAgICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICAgIGhvdmVyZWRJdGVtLFxuICAgICAgICAgICAgICAgIHRoaXNcbiAgICAgICAgICAgIF0sIHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gY2FsY3VsYXRlSXRlbVNpemUoYm94V2lkdGgsIGxhYmVsRm9udCwgY3R4LCBsZWdlbmRJdGVtLCBfaXRlbUhlaWdodCkge1xuICAgIGNvbnN0IGl0ZW1XaWR0aCA9IGNhbGN1bGF0ZUl0ZW1XaWR0aChsZWdlbmRJdGVtLCBib3hXaWR0aCwgbGFiZWxGb250LCBjdHgpO1xuICAgIGNvbnN0IGl0ZW1IZWlnaHQgPSBjYWxjdWxhdGVJdGVtSGVpZ2h0KF9pdGVtSGVpZ2h0LCBsZWdlbmRJdGVtLCBsYWJlbEZvbnQubGluZUhlaWdodCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaXRlbVdpZHRoLFxuICAgICAgICBpdGVtSGVpZ2h0XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNhbGN1bGF0ZUl0ZW1XaWR0aChsZWdlbmRJdGVtLCBib3hXaWR0aCwgbGFiZWxGb250LCBjdHgpIHtcbiAgICBsZXQgbGVnZW5kSXRlbVRleHQgPSBsZWdlbmRJdGVtLnRleHQ7XG4gICAgaWYgKGxlZ2VuZEl0ZW1UZXh0ICYmIHR5cGVvZiBsZWdlbmRJdGVtVGV4dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgbGVnZW5kSXRlbVRleHQgPSBsZWdlbmRJdGVtVGV4dC5yZWR1Y2UoKGEsIGIpPT5hLmxlbmd0aCA+IGIubGVuZ3RoID8gYSA6IGIpO1xuICAgIH1cbiAgICByZXR1cm4gYm94V2lkdGggKyBsYWJlbEZvbnQuc2l6ZSAvIDIgKyBjdHgubWVhc3VyZVRleHQobGVnZW5kSXRlbVRleHQpLndpZHRoO1xufVxuZnVuY3Rpb24gY2FsY3VsYXRlSXRlbUhlaWdodChfaXRlbUhlaWdodCwgbGVnZW5kSXRlbSwgZm9udExpbmVIZWlnaHQpIHtcbiAgICBsZXQgaXRlbUhlaWdodCA9IF9pdGVtSGVpZ2h0O1xuICAgIGlmICh0eXBlb2YgbGVnZW5kSXRlbS50ZXh0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICBpdGVtSGVpZ2h0ID0gY2FsY3VsYXRlTGVnZW5kSXRlbUhlaWdodChsZWdlbmRJdGVtLCBmb250TGluZUhlaWdodCk7XG4gICAgfVxuICAgIHJldHVybiBpdGVtSGVpZ2h0O1xufVxuZnVuY3Rpb24gY2FsY3VsYXRlTGVnZW5kSXRlbUhlaWdodChsZWdlbmRJdGVtLCBmb250TGluZUhlaWdodCkge1xuICAgIGNvbnN0IGxhYmVsSGVpZ2h0ID0gbGVnZW5kSXRlbS50ZXh0ID8gbGVnZW5kSXRlbS50ZXh0Lmxlbmd0aCA6IDA7XG4gICAgcmV0dXJuIGZvbnRMaW5lSGVpZ2h0ICogbGFiZWxIZWlnaHQ7XG59XG5mdW5jdGlvbiBpc0xpc3RlbmVkKHR5cGUsIG9wdHMpIHtcbiAgICBpZiAoKHR5cGUgPT09ICdtb3VzZW1vdmUnIHx8IHR5cGUgPT09ICdtb3VzZW91dCcpICYmIChvcHRzLm9uSG92ZXIgfHwgb3B0cy5vbkxlYXZlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKG9wdHMub25DbGljayAmJiAodHlwZSA9PT0gJ2NsaWNrJyB8fCB0eXBlID09PSAnbW91c2V1cCcpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG52YXIgcGx1Z2luX2xlZ2VuZCA9IHtcbiAgICBpZDogJ2xlZ2VuZCcsXG4gX2VsZW1lbnQ6IExlZ2VuZCxcbiAgICBzdGFydCAoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGxlZ2VuZCA9IGNoYXJ0LmxlZ2VuZCA9IG5ldyBMZWdlbmQoe1xuICAgICAgICAgICAgY3R4OiBjaGFydC5jdHgsXG4gICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgY2hhcnRcbiAgICAgICAgfSk7XG4gICAgICAgIGxheW91dHMuY29uZmlndXJlKGNoYXJ0LCBsZWdlbmQsIG9wdGlvbnMpO1xuICAgICAgICBsYXlvdXRzLmFkZEJveChjaGFydCwgbGVnZW5kKTtcbiAgICB9LFxuICAgIHN0b3AgKGNoYXJ0KSB7XG4gICAgICAgIGxheW91dHMucmVtb3ZlQm94KGNoYXJ0LCBjaGFydC5sZWdlbmQpO1xuICAgICAgICBkZWxldGUgY2hhcnQubGVnZW5kO1xuICAgIH0sXG4gICAgYmVmb3JlVXBkYXRlIChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgbGVnZW5kID0gY2hhcnQubGVnZW5kO1xuICAgICAgICBsYXlvdXRzLmNvbmZpZ3VyZShjaGFydCwgbGVnZW5kLCBvcHRpb25zKTtcbiAgICAgICAgbGVnZW5kLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH0sXG4gICAgYWZ0ZXJVcGRhdGUgKGNoYXJ0KSB7XG4gICAgICAgIGNvbnN0IGxlZ2VuZCA9IGNoYXJ0LmxlZ2VuZDtcbiAgICAgICAgbGVnZW5kLmJ1aWxkTGFiZWxzKCk7XG4gICAgICAgIGxlZ2VuZC5hZGp1c3RIaXRCb3hlcygpO1xuICAgIH0sXG4gICAgYWZ0ZXJFdmVudCAoY2hhcnQsIGFyZ3MpIHtcbiAgICAgICAgaWYgKCFhcmdzLnJlcGxheSkge1xuICAgICAgICAgICAgY2hhcnQubGVnZW5kLmhhbmRsZUV2ZW50KGFyZ3MuZXZlbnQpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBkZWZhdWx0czoge1xuICAgICAgICBkaXNwbGF5OiB0cnVlLFxuICAgICAgICBwb3NpdGlvbjogJ3RvcCcsXG4gICAgICAgIGFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgZnVsbFNpemU6IHRydWUsXG4gICAgICAgIHJldmVyc2U6IGZhbHNlLFxuICAgICAgICB3ZWlnaHQ6IDEwMDAsXG4gICAgICAgIG9uQ2xpY2sgKGUsIGxlZ2VuZEl0ZW0sIGxlZ2VuZCkge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBsZWdlbmRJdGVtLmRhdGFzZXRJbmRleDtcbiAgICAgICAgICAgIGNvbnN0IGNpID0gbGVnZW5kLmNoYXJ0O1xuICAgICAgICAgICAgaWYgKGNpLmlzRGF0YXNldFZpc2libGUoaW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgY2kuaGlkZShpbmRleCk7XG4gICAgICAgICAgICAgICAgbGVnZW5kSXRlbS5oaWRkZW4gPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjaS5zaG93KGluZGV4KTtcbiAgICAgICAgICAgICAgICBsZWdlbmRJdGVtLmhpZGRlbiA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvbkhvdmVyOiBudWxsLFxuICAgICAgICBvbkxlYXZlOiBudWxsLFxuICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgIGNvbG9yOiAoY3R4KT0+Y3R4LmNoYXJ0Lm9wdGlvbnMuY29sb3IsXG4gICAgICAgICAgICBib3hXaWR0aDogNDAsXG4gICAgICAgICAgICBwYWRkaW5nOiAxMCxcbiAgICAgICAgICAgIGdlbmVyYXRlTGFiZWxzIChjaGFydCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFzZXRzID0gY2hhcnQuZGF0YS5kYXRhc2V0cztcbiAgICAgICAgICAgICAgICBjb25zdCB7IGxhYmVsczogeyB1c2VQb2ludFN0eWxlICwgcG9pbnRTdHlsZSAsIHRleHRBbGlnbiAsIGNvbG9yICwgdXNlQm9yZGVyUmFkaXVzICwgYm9yZGVyUmFkaXVzICB9ICB9ID0gY2hhcnQubGVnZW5kLm9wdGlvbnM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoYXJ0Ll9nZXRTb3J0ZWREYXRhc2V0TWV0YXMoKS5tYXAoKG1ldGEpPT57XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlID0gbWV0YS5jb250cm9sbGVyLmdldFN0eWxlKHVzZVBvaW50U3R5bGUgPyAwIDogdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYm9yZGVyV2lkdGggPSB0b1BhZGRpbmcoc3R5bGUuYm9yZGVyV2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogZGF0YXNldHNbbWV0YS5pbmRleF0ubGFiZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxsU3R5bGU6IHN0eWxlLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRDb2xvcjogY29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBoaWRkZW46ICFtZXRhLnZpc2libGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lQ2FwOiBzdHlsZS5ib3JkZXJDYXBTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVEYXNoOiBzdHlsZS5ib3JkZXJEYXNoLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZURhc2hPZmZzZXQ6IHN0eWxlLmJvcmRlckRhc2hPZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lSm9pbjogc3R5bGUuYm9yZGVySm9pblN0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZVdpZHRoOiAoYm9yZGVyV2lkdGgud2lkdGggKyBib3JkZXJXaWR0aC5oZWlnaHQpIC8gNCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZVN0eWxlOiBzdHlsZS5ib3JkZXJDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50U3R5bGU6IHBvaW50U3R5bGUgfHwgc3R5bGUucG9pbnRTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiBzdHlsZS5yb3RhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbjogdGV4dEFsaWduIHx8IHN0eWxlLnRleHRBbGlnbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogdXNlQm9yZGVyUmFkaXVzICYmIChib3JkZXJSYWRpdXMgfHwgc3R5bGUuYm9yZGVyUmFkaXVzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFzZXRJbmRleDogbWV0YS5pbmRleFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0sIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0aXRsZToge1xuICAgICAgICAgICAgY29sb3I6IChjdHgpPT5jdHguY2hhcnQub3B0aW9ucy5jb2xvcixcbiAgICAgICAgICAgIGRpc3BsYXk6IGZhbHNlLFxuICAgICAgICAgICAgcG9zaXRpb246ICdjZW50ZXInLFxuICAgICAgICAgICAgdGV4dDogJydcbiAgICAgICAgfVxuICAgIH0sXG4gICAgZGVzY3JpcHRvcnM6IHtcbiAgICAgICAgX3NjcmlwdGFibGU6IChuYW1lKT0+IW5hbWUuc3RhcnRzV2l0aCgnb24nKSxcbiAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICBfc2NyaXB0YWJsZTogKG5hbWUpPT4hW1xuICAgICAgICAgICAgICAgICAgICAnZ2VuZXJhdGVMYWJlbHMnLFxuICAgICAgICAgICAgICAgICAgICAnZmlsdGVyJyxcbiAgICAgICAgICAgICAgICAgICAgJ3NvcnQnXG4gICAgICAgICAgICAgICAgXS5pbmNsdWRlcyhuYW1lKVxuICAgICAgICB9XG4gICAgfVxufTtcblxuY2xhc3MgVGl0bGUgZXh0ZW5kcyBFbGVtZW50IHtcbiBjb25zdHJ1Y3Rvcihjb25maWcpe1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmNoYXJ0ID0gY29uZmlnLmNoYXJ0O1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBjb25maWcub3B0aW9ucztcbiAgICAgICAgdGhpcy5jdHggPSBjb25maWcuY3R4O1xuICAgICAgICB0aGlzLl9wYWRkaW5nID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnRvcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5ib3R0b20gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubGVmdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5yaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy53aWR0aCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMud2VpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmZ1bGxTaXplID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB1cGRhdGUobWF4V2lkdGgsIG1heEhlaWdodCkge1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgICAgICB0aGlzLmxlZnQgPSAwO1xuICAgICAgICB0aGlzLnRvcCA9IDA7XG4gICAgICAgIGlmICghb3B0cy5kaXNwbGF5KSB7XG4gICAgICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5oZWlnaHQgPSB0aGlzLnJpZ2h0ID0gdGhpcy5ib3R0b20gPSAwO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMud2lkdGggPSB0aGlzLnJpZ2h0ID0gbWF4V2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5ib3R0b20gPSBtYXhIZWlnaHQ7XG4gICAgICAgIGNvbnN0IGxpbmVDb3VudCA9IGlzQXJyYXkob3B0cy50ZXh0KSA/IG9wdHMudGV4dC5sZW5ndGggOiAxO1xuICAgICAgICB0aGlzLl9wYWRkaW5nID0gdG9QYWRkaW5nKG9wdHMucGFkZGluZyk7XG4gICAgICAgIGNvbnN0IHRleHRTaXplID0gbGluZUNvdW50ICogdG9Gb250KG9wdHMuZm9udCkubGluZUhlaWdodCArIHRoaXMuX3BhZGRpbmcuaGVpZ2h0O1xuICAgICAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSB0ZXh0U2l6ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSB0ZXh0U2l6ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpc0hvcml6b250YWwoKSB7XG4gICAgICAgIGNvbnN0IHBvcyA9IHRoaXMub3B0aW9ucy5wb3NpdGlvbjtcbiAgICAgICAgcmV0dXJuIHBvcyA9PT0gJ3RvcCcgfHwgcG9zID09PSAnYm90dG9tJztcbiAgICB9XG4gICAgX2RyYXdBcmdzKG9mZnNldCkge1xuICAgICAgICBjb25zdCB7IHRvcCAsIGxlZnQgLCBib3R0b20gLCByaWdodCAsIG9wdGlvbnMgIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBhbGlnbiA9IG9wdGlvbnMuYWxpZ247XG4gICAgICAgIGxldCByb3RhdGlvbiA9IDA7XG4gICAgICAgIGxldCBtYXhXaWR0aCwgdGl0bGVYLCB0aXRsZVk7XG4gICAgICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICB0aXRsZVggPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgbGVmdCwgcmlnaHQpO1xuICAgICAgICAgICAgdGl0bGVZID0gdG9wICsgb2Zmc2V0O1xuICAgICAgICAgICAgbWF4V2lkdGggPSByaWdodCAtIGxlZnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5wb3NpdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgICAgICAgdGl0bGVYID0gbGVmdCArIG9mZnNldDtcbiAgICAgICAgICAgICAgICB0aXRsZVkgPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgYm90dG9tLCB0b3ApO1xuICAgICAgICAgICAgICAgIHJvdGF0aW9uID0gUEkgKiAtMC41O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aXRsZVggPSByaWdodCAtIG9mZnNldDtcbiAgICAgICAgICAgICAgICB0aXRsZVkgPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgdG9wLCBib3R0b20pO1xuICAgICAgICAgICAgICAgIHJvdGF0aW9uID0gUEkgKiAwLjU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtYXhXaWR0aCA9IGJvdHRvbSAtIHRvcDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGl0bGVYLFxuICAgICAgICAgICAgdGl0bGVZLFxuICAgICAgICAgICAgbWF4V2lkdGgsXG4gICAgICAgICAgICByb3RhdGlvblxuICAgICAgICB9O1xuICAgIH1cbiAgICBkcmF3KCkge1xuICAgICAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgaWYgKCFvcHRzLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmb250T3B0cyA9IHRvRm9udChvcHRzLmZvbnQpO1xuICAgICAgICBjb25zdCBsaW5lSGVpZ2h0ID0gZm9udE9wdHMubGluZUhlaWdodDtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gbGluZUhlaWdodCAvIDIgKyB0aGlzLl9wYWRkaW5nLnRvcDtcbiAgICAgICAgY29uc3QgeyB0aXRsZVggLCB0aXRsZVkgLCBtYXhXaWR0aCAsIHJvdGF0aW9uICB9ID0gdGhpcy5fZHJhd0FyZ3Mob2Zmc2V0KTtcbiAgICAgICAgcmVuZGVyVGV4dChjdHgsIG9wdHMudGV4dCwgMCwgMCwgZm9udE9wdHMsIHtcbiAgICAgICAgICAgIGNvbG9yOiBvcHRzLmNvbG9yLFxuICAgICAgICAgICAgbWF4V2lkdGgsXG4gICAgICAgICAgICByb3RhdGlvbixcbiAgICAgICAgICAgIHRleHRBbGlnbjogX3RvTGVmdFJpZ2h0Q2VudGVyKG9wdHMuYWxpZ24pLFxuICAgICAgICAgICAgdGV4dEJhc2VsaW5lOiAnbWlkZGxlJyxcbiAgICAgICAgICAgIHRyYW5zbGF0aW9uOiBbXG4gICAgICAgICAgICAgICAgdGl0bGVYLFxuICAgICAgICAgICAgICAgIHRpdGxlWVxuICAgICAgICAgICAgXVxuICAgICAgICB9KTtcbiAgICB9XG59XG5mdW5jdGlvbiBjcmVhdGVUaXRsZShjaGFydCwgdGl0bGVPcHRzKSB7XG4gICAgY29uc3QgdGl0bGUgPSBuZXcgVGl0bGUoe1xuICAgICAgICBjdHg6IGNoYXJ0LmN0eCxcbiAgICAgICAgb3B0aW9uczogdGl0bGVPcHRzLFxuICAgICAgICBjaGFydFxuICAgIH0pO1xuICAgIGxheW91dHMuY29uZmlndXJlKGNoYXJ0LCB0aXRsZSwgdGl0bGVPcHRzKTtcbiAgICBsYXlvdXRzLmFkZEJveChjaGFydCwgdGl0bGUpO1xuICAgIGNoYXJ0LnRpdGxlQmxvY2sgPSB0aXRsZTtcbn1cbnZhciBwbHVnaW5fdGl0bGUgPSB7XG4gICAgaWQ6ICd0aXRsZScsXG4gX2VsZW1lbnQ6IFRpdGxlLFxuICAgIHN0YXJ0IChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgY3JlYXRlVGl0bGUoY2hhcnQsIG9wdGlvbnMpO1xuICAgIH0sXG4gICAgc3RvcCAoY2hhcnQpIHtcbiAgICAgICAgY29uc3QgdGl0bGVCbG9jayA9IGNoYXJ0LnRpdGxlQmxvY2s7XG4gICAgICAgIGxheW91dHMucmVtb3ZlQm94KGNoYXJ0LCB0aXRsZUJsb2NrKTtcbiAgICAgICAgZGVsZXRlIGNoYXJ0LnRpdGxlQmxvY2s7XG4gICAgfSxcbiAgICBiZWZvcmVVcGRhdGUgKGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB0aXRsZSA9IGNoYXJ0LnRpdGxlQmxvY2s7XG4gICAgICAgIGxheW91dHMuY29uZmlndXJlKGNoYXJ0LCB0aXRsZSwgb3B0aW9ucyk7XG4gICAgICAgIHRpdGxlLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH0sXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgYWxpZ246ICdjZW50ZXInLFxuICAgICAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICAgICAgZm9udDoge1xuICAgICAgICAgICAgd2VpZ2h0OiAnYm9sZCdcbiAgICAgICAgfSxcbiAgICAgICAgZnVsbFNpemU6IHRydWUsXG4gICAgICAgIHBhZGRpbmc6IDEwLFxuICAgICAgICBwb3NpdGlvbjogJ3RvcCcsXG4gICAgICAgIHRleHQ6ICcnLFxuICAgICAgICB3ZWlnaHQ6IDIwMDBcbiAgICB9LFxuICAgIGRlZmF1bHRSb3V0ZXM6IHtcbiAgICAgICAgY29sb3I6ICdjb2xvcidcbiAgICB9LFxuICAgIGRlc2NyaXB0b3JzOiB7XG4gICAgICAgIF9zY3JpcHRhYmxlOiB0cnVlLFxuICAgICAgICBfaW5kZXhhYmxlOiBmYWxzZVxuICAgIH1cbn07XG5cbmNvbnN0IG1hcCA9IG5ldyBXZWFrTWFwKCk7XG52YXIgcGx1Z2luX3N1YnRpdGxlID0ge1xuICAgIGlkOiAnc3VidGl0bGUnLFxuICAgIHN0YXJ0IChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgdGl0bGUgPSBuZXcgVGl0bGUoe1xuICAgICAgICAgICAgY3R4OiBjaGFydC5jdHgsXG4gICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgY2hhcnRcbiAgICAgICAgfSk7XG4gICAgICAgIGxheW91dHMuY29uZmlndXJlKGNoYXJ0LCB0aXRsZSwgb3B0aW9ucyk7XG4gICAgICAgIGxheW91dHMuYWRkQm94KGNoYXJ0LCB0aXRsZSk7XG4gICAgICAgIG1hcC5zZXQoY2hhcnQsIHRpdGxlKTtcbiAgICB9LFxuICAgIHN0b3AgKGNoYXJ0KSB7XG4gICAgICAgIGxheW91dHMucmVtb3ZlQm94KGNoYXJ0LCBtYXAuZ2V0KGNoYXJ0KSk7XG4gICAgICAgIG1hcC5kZWxldGUoY2hhcnQpO1xuICAgIH0sXG4gICAgYmVmb3JlVXBkYXRlIChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgdGl0bGUgPSBtYXAuZ2V0KGNoYXJ0KTtcbiAgICAgICAgbGF5b3V0cy5jb25maWd1cmUoY2hhcnQsIHRpdGxlLCBvcHRpb25zKTtcbiAgICAgICAgdGl0bGUub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfSxcbiAgICBkZWZhdWx0czoge1xuICAgICAgICBhbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIGRpc3BsYXk6IGZhbHNlLFxuICAgICAgICBmb250OiB7XG4gICAgICAgICAgICB3ZWlnaHQ6ICdub3JtYWwnXG4gICAgICAgIH0sXG4gICAgICAgIGZ1bGxTaXplOiB0cnVlLFxuICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICBwb3NpdGlvbjogJ3RvcCcsXG4gICAgICAgIHRleHQ6ICcnLFxuICAgICAgICB3ZWlnaHQ6IDE1MDBcbiAgICB9LFxuICAgIGRlZmF1bHRSb3V0ZXM6IHtcbiAgICAgICAgY29sb3I6ICdjb2xvcidcbiAgICB9LFxuICAgIGRlc2NyaXB0b3JzOiB7XG4gICAgICAgIF9zY3JpcHRhYmxlOiB0cnVlLFxuICAgICAgICBfaW5kZXhhYmxlOiBmYWxzZVxuICAgIH1cbn07XG5cbmNvbnN0IHBvc2l0aW9uZXJzID0ge1xuIGF2ZXJhZ2UgKGl0ZW1zKSB7XG4gICAgICAgIGlmICghaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGksIGxlbjtcbiAgICAgICAgbGV0IHggPSAwO1xuICAgICAgICBsZXQgeSA9IDA7XG4gICAgICAgIGxldCBjb3VudCA9IDA7XG4gICAgICAgIGZvcihpID0gMCwgbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpe1xuICAgICAgICAgICAgY29uc3QgZWwgPSBpdGVtc1tpXS5lbGVtZW50O1xuICAgICAgICAgICAgaWYgKGVsICYmIGVsLmhhc1ZhbHVlKCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwb3MgPSBlbC50b29sdGlwUG9zaXRpb24oKTtcbiAgICAgICAgICAgICAgICB4ICs9IHBvcy54O1xuICAgICAgICAgICAgICAgIHkgKz0gcG9zLnk7XG4gICAgICAgICAgICAgICAgKytjb3VudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogeCAvIGNvdW50LFxuICAgICAgICAgICAgeTogeSAvIGNvdW50XG4gICAgICAgIH07XG4gICAgfSxcbiBuZWFyZXN0IChpdGVtcywgZXZlbnRQb3NpdGlvbikge1xuICAgICAgICBpZiAoIWl0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGxldCB4ID0gZXZlbnRQb3NpdGlvbi54O1xuICAgICAgICBsZXQgeSA9IGV2ZW50UG9zaXRpb24ueTtcbiAgICAgICAgbGV0IG1pbkRpc3RhbmNlID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICBsZXQgaSwgbGVuLCBuZWFyZXN0RWxlbWVudDtcbiAgICAgICAgZm9yKGkgPSAwLCBsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBsZW47ICsraSl7XG4gICAgICAgICAgICBjb25zdCBlbCA9IGl0ZW1zW2ldLmVsZW1lbnQ7XG4gICAgICAgICAgICBpZiAoZWwgJiYgZWwuaGFzVmFsdWUoKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNlbnRlciA9IGVsLmdldENlbnRlclBvaW50KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZCA9IGRpc3RhbmNlQmV0d2VlblBvaW50cyhldmVudFBvc2l0aW9uLCBjZW50ZXIpO1xuICAgICAgICAgICAgICAgIGlmIChkIDwgbWluRGlzdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgbWluRGlzdGFuY2UgPSBkO1xuICAgICAgICAgICAgICAgICAgICBuZWFyZXN0RWxlbWVudCA9IGVsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobmVhcmVzdEVsZW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRwID0gbmVhcmVzdEVsZW1lbnQudG9vbHRpcFBvc2l0aW9uKCk7XG4gICAgICAgICAgICB4ID0gdHAueDtcbiAgICAgICAgICAgIHkgPSB0cC55O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4LFxuICAgICAgICAgICAgeVxuICAgICAgICB9O1xuICAgIH1cbn07XG5mdW5jdGlvbiBwdXNoT3JDb25jYXQoYmFzZSwgdG9QdXNoKSB7XG4gICAgaWYgKHRvUHVzaCkge1xuICAgICAgICBpZiAoaXNBcnJheSh0b1B1c2gpKSB7XG4gICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShiYXNlLCB0b1B1c2gpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYmFzZS5wdXNoKHRvUHVzaCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJhc2U7XG59XG4gZnVuY3Rpb24gc3BsaXROZXdsaW5lcyhzdHIpIHtcbiAgICBpZiAoKHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnIHx8IHN0ciBpbnN0YW5jZW9mIFN0cmluZykgJiYgc3RyLmluZGV4T2YoJ1xcbicpID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIHN0ci5zcGxpdCgnXFxuJyk7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG59XG4gZnVuY3Rpb24gY3JlYXRlVG9vbHRpcEl0ZW0oY2hhcnQsIGl0ZW0pIHtcbiAgICBjb25zdCB7IGVsZW1lbnQgLCBkYXRhc2V0SW5kZXggLCBpbmRleCAgfSA9IGl0ZW07XG4gICAgY29uc3QgY29udHJvbGxlciA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCkuY29udHJvbGxlcjtcbiAgICBjb25zdCB7IGxhYmVsICwgdmFsdWUgIH0gPSBjb250cm9sbGVyLmdldExhYmVsQW5kVmFsdWUoaW5kZXgpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGNoYXJ0LFxuICAgICAgICBsYWJlbCxcbiAgICAgICAgcGFyc2VkOiBjb250cm9sbGVyLmdldFBhcnNlZChpbmRleCksXG4gICAgICAgIHJhdzogY2hhcnQuZGF0YS5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdLmRhdGFbaW5kZXhdLFxuICAgICAgICBmb3JtYXR0ZWRWYWx1ZTogdmFsdWUsXG4gICAgICAgIGRhdGFzZXQ6IGNvbnRyb2xsZXIuZ2V0RGF0YXNldCgpLFxuICAgICAgICBkYXRhSW5kZXg6IGluZGV4LFxuICAgICAgICBkYXRhc2V0SW5kZXgsXG4gICAgICAgIGVsZW1lbnRcbiAgICB9O1xufVxuIGZ1bmN0aW9uIGdldFRvb2x0aXBTaXplKHRvb2x0aXAsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBjdHggPSB0b29sdGlwLmNoYXJ0LmN0eDtcbiAgICBjb25zdCB7IGJvZHkgLCBmb290ZXIgLCB0aXRsZSAgfSA9IHRvb2x0aXA7XG4gICAgY29uc3QgeyBib3hXaWR0aCAsIGJveEhlaWdodCAgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgYm9keUZvbnQgPSB0b0ZvbnQob3B0aW9ucy5ib2R5Rm9udCk7XG4gICAgY29uc3QgdGl0bGVGb250ID0gdG9Gb250KG9wdGlvbnMudGl0bGVGb250KTtcbiAgICBjb25zdCBmb290ZXJGb250ID0gdG9Gb250KG9wdGlvbnMuZm9vdGVyRm9udCk7XG4gICAgY29uc3QgdGl0bGVMaW5lQ291bnQgPSB0aXRsZS5sZW5ndGg7XG4gICAgY29uc3QgZm9vdGVyTGluZUNvdW50ID0gZm9vdGVyLmxlbmd0aDtcbiAgICBjb25zdCBib2R5TGluZUl0ZW1Db3VudCA9IGJvZHkubGVuZ3RoO1xuICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcob3B0aW9ucy5wYWRkaW5nKTtcbiAgICBsZXQgaGVpZ2h0ID0gcGFkZGluZy5oZWlnaHQ7XG4gICAgbGV0IHdpZHRoID0gMDtcbiAgICBsZXQgY29tYmluZWRCb2R5TGVuZ3RoID0gYm9keS5yZWR1Y2UoKGNvdW50LCBib2R5SXRlbSk9PmNvdW50ICsgYm9keUl0ZW0uYmVmb3JlLmxlbmd0aCArIGJvZHlJdGVtLmxpbmVzLmxlbmd0aCArIGJvZHlJdGVtLmFmdGVyLmxlbmd0aCwgMCk7XG4gICAgY29tYmluZWRCb2R5TGVuZ3RoICs9IHRvb2x0aXAuYmVmb3JlQm9keS5sZW5ndGggKyB0b29sdGlwLmFmdGVyQm9keS5sZW5ndGg7XG4gICAgaWYgKHRpdGxlTGluZUNvdW50KSB7XG4gICAgICAgIGhlaWdodCArPSB0aXRsZUxpbmVDb3VudCAqIHRpdGxlRm9udC5saW5lSGVpZ2h0ICsgKHRpdGxlTGluZUNvdW50IC0gMSkgKiBvcHRpb25zLnRpdGxlU3BhY2luZyArIG9wdGlvbnMudGl0bGVNYXJnaW5Cb3R0b207XG4gICAgfVxuICAgIGlmIChjb21iaW5lZEJvZHlMZW5ndGgpIHtcbiAgICAgICAgY29uc3QgYm9keUxpbmVIZWlnaHQgPSBvcHRpb25zLmRpc3BsYXlDb2xvcnMgPyBNYXRoLm1heChib3hIZWlnaHQsIGJvZHlGb250LmxpbmVIZWlnaHQpIDogYm9keUZvbnQubGluZUhlaWdodDtcbiAgICAgICAgaGVpZ2h0ICs9IGJvZHlMaW5lSXRlbUNvdW50ICogYm9keUxpbmVIZWlnaHQgKyAoY29tYmluZWRCb2R5TGVuZ3RoIC0gYm9keUxpbmVJdGVtQ291bnQpICogYm9keUZvbnQubGluZUhlaWdodCArIChjb21iaW5lZEJvZHlMZW5ndGggLSAxKSAqIG9wdGlvbnMuYm9keVNwYWNpbmc7XG4gICAgfVxuICAgIGlmIChmb290ZXJMaW5lQ291bnQpIHtcbiAgICAgICAgaGVpZ2h0ICs9IG9wdGlvbnMuZm9vdGVyTWFyZ2luVG9wICsgZm9vdGVyTGluZUNvdW50ICogZm9vdGVyRm9udC5saW5lSGVpZ2h0ICsgKGZvb3RlckxpbmVDb3VudCAtIDEpICogb3B0aW9ucy5mb290ZXJTcGFjaW5nO1xuICAgIH1cbiAgICBsZXQgd2lkdGhQYWRkaW5nID0gMDtcbiAgICBjb25zdCBtYXhMaW5lV2lkdGggPSBmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgIHdpZHRoID0gTWF0aC5tYXgod2lkdGgsIGN0eC5tZWFzdXJlVGV4dChsaW5lKS53aWR0aCArIHdpZHRoUGFkZGluZyk7XG4gICAgfTtcbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC5mb250ID0gdGl0bGVGb250LnN0cmluZztcbiAgICBlYWNoKHRvb2x0aXAudGl0bGUsIG1heExpbmVXaWR0aCk7XG4gICAgY3R4LmZvbnQgPSBib2R5Rm9udC5zdHJpbmc7XG4gICAgZWFjaCh0b29sdGlwLmJlZm9yZUJvZHkuY29uY2F0KHRvb2x0aXAuYWZ0ZXJCb2R5KSwgbWF4TGluZVdpZHRoKTtcbiAgICB3aWR0aFBhZGRpbmcgPSBvcHRpb25zLmRpc3BsYXlDb2xvcnMgPyBib3hXaWR0aCArIDIgKyBvcHRpb25zLmJveFBhZGRpbmcgOiAwO1xuICAgIGVhY2goYm9keSwgKGJvZHlJdGVtKT0+e1xuICAgICAgICBlYWNoKGJvZHlJdGVtLmJlZm9yZSwgbWF4TGluZVdpZHRoKTtcbiAgICAgICAgZWFjaChib2R5SXRlbS5saW5lcywgbWF4TGluZVdpZHRoKTtcbiAgICAgICAgZWFjaChib2R5SXRlbS5hZnRlciwgbWF4TGluZVdpZHRoKTtcbiAgICB9KTtcbiAgICB3aWR0aFBhZGRpbmcgPSAwO1xuICAgIGN0eC5mb250ID0gZm9vdGVyRm9udC5zdHJpbmc7XG4gICAgZWFjaCh0b29sdGlwLmZvb3RlciwgbWF4TGluZVdpZHRoKTtcbiAgICBjdHgucmVzdG9yZSgpO1xuICAgIHdpZHRoICs9IHBhZGRpbmcud2lkdGg7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgd2lkdGgsXG4gICAgICAgIGhlaWdodFxuICAgIH07XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVZQWxpZ24oY2hhcnQsIHNpemUpIHtcbiAgICBjb25zdCB7IHkgLCBoZWlnaHQgIH0gPSBzaXplO1xuICAgIGlmICh5IDwgaGVpZ2h0IC8gMikge1xuICAgICAgICByZXR1cm4gJ3RvcCc7XG4gICAgfSBlbHNlIGlmICh5ID4gY2hhcnQuaGVpZ2h0IC0gaGVpZ2h0IC8gMikge1xuICAgICAgICByZXR1cm4gJ2JvdHRvbSc7XG4gICAgfVxuICAgIHJldHVybiAnY2VudGVyJztcbn1cbmZ1bmN0aW9uIGRvZXNOb3RGaXRXaXRoQWxpZ24oeEFsaWduLCBjaGFydCwgb3B0aW9ucywgc2l6ZSkge1xuICAgIGNvbnN0IHsgeCAsIHdpZHRoICB9ID0gc2l6ZTtcbiAgICBjb25zdCBjYXJldCA9IG9wdGlvbnMuY2FyZXRTaXplICsgb3B0aW9ucy5jYXJldFBhZGRpbmc7XG4gICAgaWYgKHhBbGlnbiA9PT0gJ2xlZnQnICYmIHggKyB3aWR0aCArIGNhcmV0ID4gY2hhcnQud2lkdGgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICh4QWxpZ24gPT09ICdyaWdodCcgJiYgeCAtIHdpZHRoIC0gY2FyZXQgPCAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRldGVybWluZVhBbGlnbihjaGFydCwgb3B0aW9ucywgc2l6ZSwgeUFsaWduKSB7XG4gICAgY29uc3QgeyB4ICwgd2lkdGggIH0gPSBzaXplO1xuICAgIGNvbnN0IHsgd2lkdGg6IGNoYXJ0V2lkdGggLCBjaGFydEFyZWE6IHsgbGVmdCAsIHJpZ2h0ICB9ICB9ID0gY2hhcnQ7XG4gICAgbGV0IHhBbGlnbiA9ICdjZW50ZXInO1xuICAgIGlmICh5QWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgIHhBbGlnbiA9IHggPD0gKGxlZnQgKyByaWdodCkgLyAyID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICB9IGVsc2UgaWYgKHggPD0gd2lkdGggLyAyKSB7XG4gICAgICAgIHhBbGlnbiA9ICdsZWZ0JztcbiAgICB9IGVsc2UgaWYgKHggPj0gY2hhcnRXaWR0aCAtIHdpZHRoIC8gMikge1xuICAgICAgICB4QWxpZ24gPSAncmlnaHQnO1xuICAgIH1cbiAgICBpZiAoZG9lc05vdEZpdFdpdGhBbGlnbih4QWxpZ24sIGNoYXJ0LCBvcHRpb25zLCBzaXplKSkge1xuICAgICAgICB4QWxpZ24gPSAnY2VudGVyJztcbiAgICB9XG4gICAgcmV0dXJuIHhBbGlnbjtcbn1cbiBmdW5jdGlvbiBkZXRlcm1pbmVBbGlnbm1lbnQoY2hhcnQsIG9wdGlvbnMsIHNpemUpIHtcbiAgICBjb25zdCB5QWxpZ24gPSBzaXplLnlBbGlnbiB8fCBvcHRpb25zLnlBbGlnbiB8fCBkZXRlcm1pbmVZQWxpZ24oY2hhcnQsIHNpemUpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHhBbGlnbjogc2l6ZS54QWxpZ24gfHwgb3B0aW9ucy54QWxpZ24gfHwgZGV0ZXJtaW5lWEFsaWduKGNoYXJ0LCBvcHRpb25zLCBzaXplLCB5QWxpZ24pLFxuICAgICAgICB5QWxpZ25cbiAgICB9O1xufVxuZnVuY3Rpb24gYWxpZ25YKHNpemUsIHhBbGlnbikge1xuICAgIGxldCB7IHggLCB3aWR0aCAgfSA9IHNpemU7XG4gICAgaWYgKHhBbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICB4IC09IHdpZHRoO1xuICAgIH0gZWxzZSBpZiAoeEFsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICB4IC09IHdpZHRoIC8gMjtcbiAgICB9XG4gICAgcmV0dXJuIHg7XG59XG5mdW5jdGlvbiBhbGlnblkoc2l6ZSwgeUFsaWduLCBwYWRkaW5nQW5kU2l6ZSkge1xuICAgIGxldCB7IHkgLCBoZWlnaHQgIH0gPSBzaXplO1xuICAgIGlmICh5QWxpZ24gPT09ICd0b3AnKSB7XG4gICAgICAgIHkgKz0gcGFkZGluZ0FuZFNpemU7XG4gICAgfSBlbHNlIGlmICh5QWxpZ24gPT09ICdib3R0b20nKSB7XG4gICAgICAgIHkgLT0gaGVpZ2h0ICsgcGFkZGluZ0FuZFNpemU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgeSAtPSBoZWlnaHQgLyAyO1xuICAgIH1cbiAgICByZXR1cm4geTtcbn1cbiBmdW5jdGlvbiBnZXRCYWNrZ3JvdW5kUG9pbnQob3B0aW9ucywgc2l6ZSwgYWxpZ25tZW50LCBjaGFydCkge1xuICAgIGNvbnN0IHsgY2FyZXRTaXplICwgY2FyZXRQYWRkaW5nICwgY29ybmVyUmFkaXVzICB9ID0gb3B0aW9ucztcbiAgICBjb25zdCB7IHhBbGlnbiAsIHlBbGlnbiAgfSA9IGFsaWdubWVudDtcbiAgICBjb25zdCBwYWRkaW5nQW5kU2l6ZSA9IGNhcmV0U2l6ZSArIGNhcmV0UGFkZGluZztcbiAgICBjb25zdCB7IHRvcExlZnQgLCB0b3BSaWdodCAsIGJvdHRvbUxlZnQgLCBib3R0b21SaWdodCAgfSA9IHRvVFJCTENvcm5lcnMoY29ybmVyUmFkaXVzKTtcbiAgICBsZXQgeCA9IGFsaWduWChzaXplLCB4QWxpZ24pO1xuICAgIGNvbnN0IHkgPSBhbGlnblkoc2l6ZSwgeUFsaWduLCBwYWRkaW5nQW5kU2l6ZSk7XG4gICAgaWYgKHlBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgaWYgKHhBbGlnbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgICB4ICs9IHBhZGRpbmdBbmRTaXplO1xuICAgICAgICB9IGVsc2UgaWYgKHhBbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICAgeCAtPSBwYWRkaW5nQW5kU2l6ZTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoeEFsaWduID09PSAnbGVmdCcpIHtcbiAgICAgICAgeCAtPSBNYXRoLm1heCh0b3BMZWZ0LCBib3R0b21MZWZ0KSArIGNhcmV0U2l6ZTtcbiAgICB9IGVsc2UgaWYgKHhBbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICB4ICs9IE1hdGgubWF4KHRvcFJpZ2h0LCBib3R0b21SaWdodCkgKyBjYXJldFNpemU7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHg6IF9saW1pdFZhbHVlKHgsIDAsIGNoYXJ0LndpZHRoIC0gc2l6ZS53aWR0aCksXG4gICAgICAgIHk6IF9saW1pdFZhbHVlKHksIDAsIGNoYXJ0LmhlaWdodCAtIHNpemUuaGVpZ2h0KVxuICAgIH07XG59XG5mdW5jdGlvbiBnZXRBbGlnbmVkWCh0b29sdGlwLCBhbGlnbiwgb3B0aW9ucykge1xuICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcob3B0aW9ucy5wYWRkaW5nKTtcbiAgICByZXR1cm4gYWxpZ24gPT09ICdjZW50ZXInID8gdG9vbHRpcC54ICsgdG9vbHRpcC53aWR0aCAvIDIgOiBhbGlnbiA9PT0gJ3JpZ2h0JyA/IHRvb2x0aXAueCArIHRvb2x0aXAud2lkdGggLSBwYWRkaW5nLnJpZ2h0IDogdG9vbHRpcC54ICsgcGFkZGluZy5sZWZ0O1xufVxuIGZ1bmN0aW9uIGdldEJlZm9yZUFmdGVyQm9keUxpbmVzKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHB1c2hPckNvbmNhdChbXSwgc3BsaXROZXdsaW5lcyhjYWxsYmFjaykpO1xufVxuZnVuY3Rpb24gY3JlYXRlVG9vbHRpcENvbnRleHQocGFyZW50LCB0b29sdGlwLCB0b29sdGlwSXRlbXMpIHtcbiAgICByZXR1cm4gY3JlYXRlQ29udGV4dChwYXJlbnQsIHtcbiAgICAgICAgdG9vbHRpcCxcbiAgICAgICAgdG9vbHRpcEl0ZW1zLFxuICAgICAgICB0eXBlOiAndG9vbHRpcCdcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIG92ZXJyaWRlQ2FsbGJhY2tzKGNhbGxiYWNrcywgY29udGV4dCkge1xuICAgIGNvbnN0IG92ZXJyaWRlID0gY29udGV4dCAmJiBjb250ZXh0LmRhdGFzZXQgJiYgY29udGV4dC5kYXRhc2V0LnRvb2x0aXAgJiYgY29udGV4dC5kYXRhc2V0LnRvb2x0aXAuY2FsbGJhY2tzO1xuICAgIHJldHVybiBvdmVycmlkZSA/IGNhbGxiYWNrcy5vdmVycmlkZShvdmVycmlkZSkgOiBjYWxsYmFja3M7XG59XG5jb25zdCBkZWZhdWx0Q2FsbGJhY2tzID0ge1xuICAgIGJlZm9yZVRpdGxlOiBub29wLFxuICAgIHRpdGxlICh0b29sdGlwSXRlbXMpIHtcbiAgICAgICAgaWYgKHRvb2x0aXBJdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gdG9vbHRpcEl0ZW1zWzBdO1xuICAgICAgICAgICAgY29uc3QgbGFiZWxzID0gaXRlbS5jaGFydC5kYXRhLmxhYmVscztcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsQ291bnQgPSBsYWJlbHMgPyBsYWJlbHMubGVuZ3RoIDogMDtcbiAgICAgICAgICAgIGlmICh0aGlzICYmIHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMubW9kZSA9PT0gJ2RhdGFzZXQnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uZGF0YXNldC5sYWJlbCB8fCAnJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS5sYWJlbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmxhYmVsO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsYWJlbENvdW50ID4gMCAmJiBpdGVtLmRhdGFJbmRleCA8IGxhYmVsQ291bnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGFiZWxzW2l0ZW0uZGF0YUluZGV4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfSxcbiAgICBhZnRlclRpdGxlOiBub29wLFxuICAgIGJlZm9yZUJvZHk6IG5vb3AsXG4gICAgYmVmb3JlTGFiZWw6IG5vb3AsXG4gICAgbGFiZWwgKHRvb2x0aXBJdGVtKSB7XG4gICAgICAgIGlmICh0aGlzICYmIHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMubW9kZSA9PT0gJ2RhdGFzZXQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdG9vbHRpcEl0ZW0ubGFiZWwgKyAnOiAnICsgdG9vbHRpcEl0ZW0uZm9ybWF0dGVkVmFsdWUgfHwgdG9vbHRpcEl0ZW0uZm9ybWF0dGVkVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGxhYmVsID0gdG9vbHRpcEl0ZW0uZGF0YXNldC5sYWJlbCB8fCAnJztcbiAgICAgICAgaWYgKGxhYmVsKSB7XG4gICAgICAgICAgICBsYWJlbCArPSAnOiAnO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdG9vbHRpcEl0ZW0uZm9ybWF0dGVkVmFsdWU7XG4gICAgICAgIGlmICghaXNOdWxsT3JVbmRlZih2YWx1ZSkpIHtcbiAgICAgICAgICAgIGxhYmVsICs9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsYWJlbDtcbiAgICB9LFxuICAgIGxhYmVsQ29sb3IgKHRvb2x0aXBJdGVtKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0b29sdGlwSXRlbS5jaGFydC5nZXREYXRhc2V0TWV0YSh0b29sdGlwSXRlbS5kYXRhc2V0SW5kZXgpO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gbWV0YS5jb250cm9sbGVyLmdldFN0eWxlKHRvb2x0aXBJdGVtLmRhdGFJbmRleCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBib3JkZXJDb2xvcjogb3B0aW9ucy5ib3JkZXJDb2xvcixcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICBib3JkZXJXaWR0aDogb3B0aW9ucy5ib3JkZXJXaWR0aCxcbiAgICAgICAgICAgIGJvcmRlckRhc2g6IG9wdGlvbnMuYm9yZGVyRGFzaCxcbiAgICAgICAgICAgIGJvcmRlckRhc2hPZmZzZXQ6IG9wdGlvbnMuYm9yZGVyRGFzaE9mZnNldCxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogMFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgbGFiZWxUZXh0Q29sb3IgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmJvZHlDb2xvcjtcbiAgICB9LFxuICAgIGxhYmVsUG9pbnRTdHlsZSAodG9vbHRpcEl0ZW0pIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRvb2x0aXBJdGVtLmNoYXJ0LmdldERhdGFzZXRNZXRhKHRvb2x0aXBJdGVtLmRhdGFzZXRJbmRleCk7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBtZXRhLmNvbnRyb2xsZXIuZ2V0U3R5bGUodG9vbHRpcEl0ZW0uZGF0YUluZGV4KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBvaW50U3R5bGU6IG9wdGlvbnMucG9pbnRTdHlsZSxcbiAgICAgICAgICAgIHJvdGF0aW9uOiBvcHRpb25zLnJvdGF0aW9uXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBhZnRlckxhYmVsOiBub29wLFxuICAgIGFmdGVyQm9keTogbm9vcCxcbiAgICBiZWZvcmVGb290ZXI6IG5vb3AsXG4gICAgZm9vdGVyOiBub29wLFxuICAgIGFmdGVyRm9vdGVyOiBub29wXG59O1xuIGZ1bmN0aW9uIGludm9rZUNhbGxiYWNrV2l0aEZhbGxiYWNrKGNhbGxiYWNrcywgbmFtZSwgY3R4LCBhcmcpIHtcbiAgICBjb25zdCByZXN1bHQgPSBjYWxsYmFja3NbbmFtZV0uY2FsbChjdHgsIGFyZyk7XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0Q2FsbGJhY2tzW25hbWVdLmNhbGwoY3R4LCBhcmcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuY2xhc3MgVG9vbHRpcCBleHRlbmRzIEVsZW1lbnQge1xuIHN0YXRpYyBwb3NpdGlvbmVycyA9IHBvc2l0aW9uZXJzO1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZyl7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMub3BhY2l0eSA9IDA7XG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IFtdO1xuICAgICAgICB0aGlzLl9ldmVudFBvc2l0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9zaXplID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9jYWNoZWRBbmltYXRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl90b29sdGlwSXRlbXMgPSBbXTtcbiAgICAgICAgdGhpcy4kYW5pbWF0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy4kY29udGV4dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5jaGFydCA9IGNvbmZpZy5jaGFydDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gY29uZmlnLm9wdGlvbnM7XG4gICAgICAgIHRoaXMuZGF0YVBvaW50cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy50aXRsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5iZWZvcmVCb2R5ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmJvZHkgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuYWZ0ZXJCb2R5ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmZvb3RlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy54QWxpZ24gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMueUFsaWduID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMueSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMud2lkdGggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuY2FyZXRYID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmNhcmV0WSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5sYWJlbENvbG9ycyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5sYWJlbFBvaW50U3R5bGVzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmxhYmVsVGV4dENvbG9ycyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaW5pdGlhbGl6ZShvcHRpb25zKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuX2NhY2hlZEFuaW1hdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuJGNvbnRleHQgPSB1bmRlZmluZWQ7XG4gICAgfVxuIF9yZXNvbHZlQW5pbWF0aW9ucygpIHtcbiAgICAgICAgY29uc3QgY2FjaGVkID0gdGhpcy5fY2FjaGVkQW5pbWF0aW9ucztcbiAgICAgICAgaWYgKGNhY2hlZCkge1xuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoKSk7XG4gICAgICAgIGNvbnN0IG9wdHMgPSBvcHRpb25zLmVuYWJsZWQgJiYgY2hhcnQub3B0aW9ucy5hbmltYXRpb24gJiYgb3B0aW9ucy5hbmltYXRpb25zO1xuICAgICAgICBjb25zdCBhbmltYXRpb25zID0gbmV3IEFuaW1hdGlvbnModGhpcy5jaGFydCwgb3B0cyk7XG4gICAgICAgIGlmIChvcHRzLl9jYWNoZWFibGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlZEFuaW1hdGlvbnMgPSBPYmplY3QuZnJlZXplKGFuaW1hdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbmltYXRpb25zO1xuICAgIH1cbiBnZXRDb250ZXh0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy4kY29udGV4dCB8fCAodGhpcy4kY29udGV4dCA9IGNyZWF0ZVRvb2x0aXBDb250ZXh0KHRoaXMuY2hhcnQuZ2V0Q29udGV4dCgpLCB0aGlzLCB0aGlzLl90b29sdGlwSXRlbXMpKTtcbiAgICB9XG4gICAgZ2V0VGl0bGUoY29udGV4dCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IGNhbGxiYWNrcyAgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGJlZm9yZVRpdGxlID0gaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2soY2FsbGJhY2tzLCAnYmVmb3JlVGl0bGUnLCB0aGlzLCBjb250ZXh0KTtcbiAgICAgICAgY29uc3QgdGl0bGUgPSBpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhjYWxsYmFja3MsICd0aXRsZScsIHRoaXMsIGNvbnRleHQpO1xuICAgICAgICBjb25zdCBhZnRlclRpdGxlID0gaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2soY2FsbGJhY2tzLCAnYWZ0ZXJUaXRsZScsIHRoaXMsIGNvbnRleHQpO1xuICAgICAgICBsZXQgbGluZXMgPSBbXTtcbiAgICAgICAgbGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIHNwbGl0TmV3bGluZXMoYmVmb3JlVGl0bGUpKTtcbiAgICAgICAgbGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIHNwbGl0TmV3bGluZXModGl0bGUpKTtcbiAgICAgICAgbGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIHNwbGl0TmV3bGluZXMoYWZ0ZXJUaXRsZSkpO1xuICAgICAgICByZXR1cm4gbGluZXM7XG4gICAgfVxuICAgIGdldEJlZm9yZUJvZHkodG9vbHRpcEl0ZW1zLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBnZXRCZWZvcmVBZnRlckJvZHlMaW5lcyhpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhvcHRpb25zLmNhbGxiYWNrcywgJ2JlZm9yZUJvZHknLCB0aGlzLCB0b29sdGlwSXRlbXMpKTtcbiAgICB9XG4gICAgZ2V0Qm9keSh0b29sdGlwSXRlbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBjYWxsYmFja3MgIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBib2R5SXRlbXMgPSBbXTtcbiAgICAgICAgZWFjaCh0b29sdGlwSXRlbXMsIChjb250ZXh0KT0+e1xuICAgICAgICAgICAgY29uc3QgYm9keUl0ZW0gPSB7XG4gICAgICAgICAgICAgICAgYmVmb3JlOiBbXSxcbiAgICAgICAgICAgICAgICBsaW5lczogW10sXG4gICAgICAgICAgICAgICAgYWZ0ZXI6IFtdXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3Qgc2NvcGVkID0gb3ZlcnJpZGVDYWxsYmFja3MoY2FsbGJhY2tzLCBjb250ZXh0KTtcbiAgICAgICAgICAgIHB1c2hPckNvbmNhdChib2R5SXRlbS5iZWZvcmUsIHNwbGl0TmV3bGluZXMoaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2soc2NvcGVkLCAnYmVmb3JlTGFiZWwnLCB0aGlzLCBjb250ZXh0KSkpO1xuICAgICAgICAgICAgcHVzaE9yQ29uY2F0KGJvZHlJdGVtLmxpbmVzLCBpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhzY29wZWQsICdsYWJlbCcsIHRoaXMsIGNvbnRleHQpKTtcbiAgICAgICAgICAgIHB1c2hPckNvbmNhdChib2R5SXRlbS5hZnRlciwgc3BsaXROZXdsaW5lcyhpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhzY29wZWQsICdhZnRlckxhYmVsJywgdGhpcywgY29udGV4dCkpKTtcbiAgICAgICAgICAgIGJvZHlJdGVtcy5wdXNoKGJvZHlJdGVtKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBib2R5SXRlbXM7XG4gICAgfVxuICAgIGdldEFmdGVyQm9keSh0b29sdGlwSXRlbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGdldEJlZm9yZUFmdGVyQm9keUxpbmVzKGludm9rZUNhbGxiYWNrV2l0aEZhbGxiYWNrKG9wdGlvbnMuY2FsbGJhY2tzLCAnYWZ0ZXJCb2R5JywgdGhpcywgdG9vbHRpcEl0ZW1zKSk7XG4gICAgfVxuICAgIGdldEZvb3Rlcih0b29sdGlwSXRlbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBjYWxsYmFja3MgIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBiZWZvcmVGb290ZXIgPSBpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhjYWxsYmFja3MsICdiZWZvcmVGb290ZXInLCB0aGlzLCB0b29sdGlwSXRlbXMpO1xuICAgICAgICBjb25zdCBmb290ZXIgPSBpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhjYWxsYmFja3MsICdmb290ZXInLCB0aGlzLCB0b29sdGlwSXRlbXMpO1xuICAgICAgICBjb25zdCBhZnRlckZvb3RlciA9IGludm9rZUNhbGxiYWNrV2l0aEZhbGxiYWNrKGNhbGxiYWNrcywgJ2FmdGVyRm9vdGVyJywgdGhpcywgdG9vbHRpcEl0ZW1zKTtcbiAgICAgICAgbGV0IGxpbmVzID0gW107XG4gICAgICAgIGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBzcGxpdE5ld2xpbmVzKGJlZm9yZUZvb3RlcikpO1xuICAgICAgICBsaW5lcyA9IHB1c2hPckNvbmNhdChsaW5lcywgc3BsaXROZXdsaW5lcyhmb290ZXIpKTtcbiAgICAgICAgbGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIHNwbGl0TmV3bGluZXMoYWZ0ZXJGb290ZXIpKTtcbiAgICAgICAgcmV0dXJuIGxpbmVzO1xuICAgIH1cbiBfY3JlYXRlSXRlbXMob3B0aW9ucykge1xuICAgICAgICBjb25zdCBhY3RpdmUgPSB0aGlzLl9hY3RpdmU7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmNoYXJ0LmRhdGE7XG4gICAgICAgIGNvbnN0IGxhYmVsQ29sb3JzID0gW107XG4gICAgICAgIGNvbnN0IGxhYmVsUG9pbnRTdHlsZXMgPSBbXTtcbiAgICAgICAgY29uc3QgbGFiZWxUZXh0Q29sb3JzID0gW107XG4gICAgICAgIGxldCB0b29sdGlwSXRlbXMgPSBbXTtcbiAgICAgICAgbGV0IGksIGxlbjtcbiAgICAgICAgZm9yKGkgPSAwLCBsZW4gPSBhY3RpdmUubGVuZ3RoOyBpIDwgbGVuOyArK2kpe1xuICAgICAgICAgICAgdG9vbHRpcEl0ZW1zLnB1c2goY3JlYXRlVG9vbHRpcEl0ZW0odGhpcy5jaGFydCwgYWN0aXZlW2ldKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuZmlsdGVyKSB7XG4gICAgICAgICAgICB0b29sdGlwSXRlbXMgPSB0b29sdGlwSXRlbXMuZmlsdGVyKChlbGVtZW50LCBpbmRleCwgYXJyYXkpPT5vcHRpb25zLmZpbHRlcihlbGVtZW50LCBpbmRleCwgYXJyYXksIGRhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5pdGVtU29ydCkge1xuICAgICAgICAgICAgdG9vbHRpcEl0ZW1zID0gdG9vbHRpcEl0ZW1zLnNvcnQoKGEsIGIpPT5vcHRpb25zLml0ZW1Tb3J0KGEsIGIsIGRhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICBlYWNoKHRvb2x0aXBJdGVtcywgKGNvbnRleHQpPT57XG4gICAgICAgICAgICBjb25zdCBzY29wZWQgPSBvdmVycmlkZUNhbGxiYWNrcyhvcHRpb25zLmNhbGxiYWNrcywgY29udGV4dCk7XG4gICAgICAgICAgICBsYWJlbENvbG9ycy5wdXNoKGludm9rZUNhbGxiYWNrV2l0aEZhbGxiYWNrKHNjb3BlZCwgJ2xhYmVsQ29sb3InLCB0aGlzLCBjb250ZXh0KSk7XG4gICAgICAgICAgICBsYWJlbFBvaW50U3R5bGVzLnB1c2goaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2soc2NvcGVkLCAnbGFiZWxQb2ludFN0eWxlJywgdGhpcywgY29udGV4dCkpO1xuICAgICAgICAgICAgbGFiZWxUZXh0Q29sb3JzLnB1c2goaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2soc2NvcGVkLCAnbGFiZWxUZXh0Q29sb3InLCB0aGlzLCBjb250ZXh0KSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmxhYmVsQ29sb3JzID0gbGFiZWxDb2xvcnM7XG4gICAgICAgIHRoaXMubGFiZWxQb2ludFN0eWxlcyA9IGxhYmVsUG9pbnRTdHlsZXM7XG4gICAgICAgIHRoaXMubGFiZWxUZXh0Q29sb3JzID0gbGFiZWxUZXh0Q29sb3JzO1xuICAgICAgICB0aGlzLmRhdGFQb2ludHMgPSB0b29sdGlwSXRlbXM7XG4gICAgICAgIHJldHVybiB0b29sdGlwSXRlbXM7XG4gICAgfVxuICAgIHVwZGF0ZShjaGFuZ2VkLCByZXBsYXkpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucy5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICAgICAgY29uc3QgYWN0aXZlID0gdGhpcy5fYWN0aXZlO1xuICAgICAgICBsZXQgcHJvcGVydGllcztcbiAgICAgICAgbGV0IHRvb2x0aXBJdGVtcyA9IFtdO1xuICAgICAgICBpZiAoIWFjdGl2ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wYWNpdHkgIT09IDApIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzID0ge1xuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gcG9zaXRpb25lcnNbb3B0aW9ucy5wb3NpdGlvbl0uY2FsbCh0aGlzLCBhY3RpdmUsIHRoaXMuX2V2ZW50UG9zaXRpb24pO1xuICAgICAgICAgICAgdG9vbHRpcEl0ZW1zID0gdGhpcy5fY3JlYXRlSXRlbXMob3B0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLnRpdGxlID0gdGhpcy5nZXRUaXRsZSh0b29sdGlwSXRlbXMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy5iZWZvcmVCb2R5ID0gdGhpcy5nZXRCZWZvcmVCb2R5KHRvb2x0aXBJdGVtcywgb3B0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLmJvZHkgPSB0aGlzLmdldEJvZHkodG9vbHRpcEl0ZW1zLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHRoaXMuYWZ0ZXJCb2R5ID0gdGhpcy5nZXRBZnRlckJvZHkodG9vbHRpcEl0ZW1zLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHRoaXMuZm9vdGVyID0gdGhpcy5nZXRGb290ZXIodG9vbHRpcEl0ZW1zLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IHNpemUgPSB0aGlzLl9zaXplID0gZ2V0VG9vbHRpcFNpemUodGhpcywgb3B0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbkFuZFNpemUgPSBPYmplY3QuYXNzaWduKHt9LCBwb3NpdGlvbiwgc2l6ZSk7XG4gICAgICAgICAgICBjb25zdCBhbGlnbm1lbnQgPSBkZXRlcm1pbmVBbGlnbm1lbnQodGhpcy5jaGFydCwgb3B0aW9ucywgcG9zaXRpb25BbmRTaXplKTtcbiAgICAgICAgICAgIGNvbnN0IGJhY2tncm91bmRQb2ludCA9IGdldEJhY2tncm91bmRQb2ludChvcHRpb25zLCBwb3NpdGlvbkFuZFNpemUsIGFsaWdubWVudCwgdGhpcy5jaGFydCk7XG4gICAgICAgICAgICB0aGlzLnhBbGlnbiA9IGFsaWdubWVudC54QWxpZ247XG4gICAgICAgICAgICB0aGlzLnlBbGlnbiA9IGFsaWdubWVudC55QWxpZ247XG4gICAgICAgICAgICBwcm9wZXJ0aWVzID0ge1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICAgICAgeDogYmFja2dyb3VuZFBvaW50LngsXG4gICAgICAgICAgICAgICAgeTogYmFja2dyb3VuZFBvaW50LnksXG4gICAgICAgICAgICAgICAgd2lkdGg6IHNpemUud2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBzaXplLmhlaWdodCxcbiAgICAgICAgICAgICAgICBjYXJldFg6IHBvc2l0aW9uLngsXG4gICAgICAgICAgICAgICAgY2FyZXRZOiBwb3NpdGlvbi55XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Rvb2x0aXBJdGVtcyA9IHRvb2x0aXBJdGVtcztcbiAgICAgICAgdGhpcy4kY29udGV4dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc29sdmVBbmltYXRpb25zKCkudXBkYXRlKHRoaXMsIHByb3BlcnRpZXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGFuZ2VkICYmIG9wdGlvbnMuZXh0ZXJuYWwpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuZXh0ZXJuYWwuY2FsbCh0aGlzLCB7XG4gICAgICAgICAgICAgICAgY2hhcnQ6IHRoaXMuY2hhcnQsXG4gICAgICAgICAgICAgICAgdG9vbHRpcDogdGhpcyxcbiAgICAgICAgICAgICAgICByZXBsYXlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRyYXdDYXJldCh0b29sdGlwUG9pbnQsIGN0eCwgc2l6ZSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBjYXJldFBvc2l0aW9uID0gdGhpcy5nZXRDYXJldFBvc2l0aW9uKHRvb2x0aXBQb2ludCwgc2l6ZSwgb3B0aW9ucyk7XG4gICAgICAgIGN0eC5saW5lVG8oY2FyZXRQb3NpdGlvbi54MSwgY2FyZXRQb3NpdGlvbi55MSk7XG4gICAgICAgIGN0eC5saW5lVG8oY2FyZXRQb3NpdGlvbi54MiwgY2FyZXRQb3NpdGlvbi55Mik7XG4gICAgICAgIGN0eC5saW5lVG8oY2FyZXRQb3NpdGlvbi54MywgY2FyZXRQb3NpdGlvbi55Myk7XG4gICAgfVxuICAgIGdldENhcmV0UG9zaXRpb24odG9vbHRpcFBvaW50LCBzaXplLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgeEFsaWduICwgeUFsaWduICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBjYXJldFNpemUgLCBjb3JuZXJSYWRpdXMgIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCB7IHRvcExlZnQgLCB0b3BSaWdodCAsIGJvdHRvbUxlZnQgLCBib3R0b21SaWdodCAgfSA9IHRvVFJCTENvcm5lcnMoY29ybmVyUmFkaXVzKTtcbiAgICAgICAgY29uc3QgeyB4OiBwdFggLCB5OiBwdFkgIH0gPSB0b29sdGlwUG9pbnQ7XG4gICAgICAgIGNvbnN0IHsgd2lkdGggLCBoZWlnaHQgIH0gPSBzaXplO1xuICAgICAgICBsZXQgeDEsIHgyLCB4MywgeTEsIHkyLCB5MztcbiAgICAgICAgaWYgKHlBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgIHkyID0gcHRZICsgaGVpZ2h0IC8gMjtcbiAgICAgICAgICAgIGlmICh4QWxpZ24gPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgICAgIHgxID0gcHRYO1xuICAgICAgICAgICAgICAgIHgyID0geDEgLSBjYXJldFNpemU7XG4gICAgICAgICAgICAgICAgeTEgPSB5MiArIGNhcmV0U2l6ZTtcbiAgICAgICAgICAgICAgICB5MyA9IHkyIC0gY2FyZXRTaXplO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB4MSA9IHB0WCArIHdpZHRoO1xuICAgICAgICAgICAgICAgIHgyID0geDEgKyBjYXJldFNpemU7XG4gICAgICAgICAgICAgICAgeTEgPSB5MiAtIGNhcmV0U2l6ZTtcbiAgICAgICAgICAgICAgICB5MyA9IHkyICsgY2FyZXRTaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeDMgPSB4MTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh4QWxpZ24gPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgICAgIHgyID0gcHRYICsgTWF0aC5tYXgodG9wTGVmdCwgYm90dG9tTGVmdCkgKyBjYXJldFNpemU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHhBbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICAgICAgIHgyID0gcHRYICsgd2lkdGggLSBNYXRoLm1heCh0b3BSaWdodCwgYm90dG9tUmlnaHQpIC0gY2FyZXRTaXplO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB4MiA9IHRoaXMuY2FyZXRYO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHlBbGlnbiA9PT0gJ3RvcCcpIHtcbiAgICAgICAgICAgICAgICB5MSA9IHB0WTtcbiAgICAgICAgICAgICAgICB5MiA9IHkxIC0gY2FyZXRTaXplO1xuICAgICAgICAgICAgICAgIHgxID0geDIgLSBjYXJldFNpemU7XG4gICAgICAgICAgICAgICAgeDMgPSB4MiArIGNhcmV0U2l6ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgeTEgPSBwdFkgKyBoZWlnaHQ7XG4gICAgICAgICAgICAgICAgeTIgPSB5MSArIGNhcmV0U2l6ZTtcbiAgICAgICAgICAgICAgICB4MSA9IHgyICsgY2FyZXRTaXplO1xuICAgICAgICAgICAgICAgIHgzID0geDIgLSBjYXJldFNpemU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB5MyA9IHkxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4MSxcbiAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICB5MSxcbiAgICAgICAgICAgIHkyLFxuICAgICAgICAgICAgeTNcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZHJhd1RpdGxlKHB0LCBjdHgsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgdGl0bGUgPSB0aGlzLnRpdGxlO1xuICAgICAgICBjb25zdCBsZW5ndGggPSB0aXRsZS5sZW5ndGg7XG4gICAgICAgIGxldCB0aXRsZUZvbnQsIHRpdGxlU3BhY2luZywgaTtcbiAgICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgcnRsSGVscGVyID0gZ2V0UnRsQWRhcHRlcihvcHRpb25zLnJ0bCwgdGhpcy54LCB0aGlzLndpZHRoKTtcbiAgICAgICAgICAgIHB0LnggPSBnZXRBbGlnbmVkWCh0aGlzLCBvcHRpb25zLnRpdGxlQWxpZ24sIG9wdGlvbnMpO1xuICAgICAgICAgICAgY3R4LnRleHRBbGlnbiA9IHJ0bEhlbHBlci50ZXh0QWxpZ24ob3B0aW9ucy50aXRsZUFsaWduKTtcbiAgICAgICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICAgICAgICAgIHRpdGxlRm9udCA9IHRvRm9udChvcHRpb25zLnRpdGxlRm9udCk7XG4gICAgICAgICAgICB0aXRsZVNwYWNpbmcgPSBvcHRpb25zLnRpdGxlU3BhY2luZztcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLnRpdGxlQ29sb3I7XG4gICAgICAgICAgICBjdHguZm9udCA9IHRpdGxlRm9udC5zdHJpbmc7XG4gICAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSl7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxUZXh0KHRpdGxlW2ldLCBydGxIZWxwZXIueChwdC54KSwgcHQueSArIHRpdGxlRm9udC5saW5lSGVpZ2h0IC8gMik7XG4gICAgICAgICAgICAgICAgcHQueSArPSB0aXRsZUZvbnQubGluZUhlaWdodCArIHRpdGxlU3BhY2luZztcbiAgICAgICAgICAgICAgICBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBwdC55ICs9IG9wdGlvbnMudGl0bGVNYXJnaW5Cb3R0b20gLSB0aXRsZVNwYWNpbmc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuIF9kcmF3Q29sb3JCb3goY3R4LCBwdCwgaSwgcnRsSGVscGVyLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGxhYmVsQ29sb3IgPSB0aGlzLmxhYmVsQ29sb3JzW2ldO1xuICAgICAgICBjb25zdCBsYWJlbFBvaW50U3R5bGUgPSB0aGlzLmxhYmVsUG9pbnRTdHlsZXNbaV07XG4gICAgICAgIGNvbnN0IHsgYm94SGVpZ2h0ICwgYm94V2lkdGggIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBib2R5Rm9udCA9IHRvRm9udChvcHRpb25zLmJvZHlGb250KTtcbiAgICAgICAgY29uc3QgY29sb3JYID0gZ2V0QWxpZ25lZFgodGhpcywgJ2xlZnQnLCBvcHRpb25zKTtcbiAgICAgICAgY29uc3QgcnRsQ29sb3JYID0gcnRsSGVscGVyLngoY29sb3JYKTtcbiAgICAgICAgY29uc3QgeU9mZlNldCA9IGJveEhlaWdodCA8IGJvZHlGb250LmxpbmVIZWlnaHQgPyAoYm9keUZvbnQubGluZUhlaWdodCAtIGJveEhlaWdodCkgLyAyIDogMDtcbiAgICAgICAgY29uc3QgY29sb3JZID0gcHQueSArIHlPZmZTZXQ7XG4gICAgICAgIGlmIChvcHRpb25zLnVzZVBvaW50U3R5bGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGRyYXdPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIHJhZGl1czogTWF0aC5taW4oYm94V2lkdGgsIGJveEhlaWdodCkgLyAyLFxuICAgICAgICAgICAgICAgIHBvaW50U3R5bGU6IGxhYmVsUG9pbnRTdHlsZS5wb2ludFN0eWxlLFxuICAgICAgICAgICAgICAgIHJvdGF0aW9uOiBsYWJlbFBvaW50U3R5bGUucm90YXRpb24sXG4gICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDFcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBjZW50ZXJYID0gcnRsSGVscGVyLmxlZnRGb3JMdHIocnRsQ29sb3JYLCBib3hXaWR0aCkgKyBib3hXaWR0aCAvIDI7XG4gICAgICAgICAgICBjb25zdCBjZW50ZXJZID0gY29sb3JZICsgYm94SGVpZ2h0IC8gMjtcbiAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IG9wdGlvbnMubXVsdGlLZXlCYWNrZ3JvdW5kO1xuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMubXVsdGlLZXlCYWNrZ3JvdW5kO1xuICAgICAgICAgICAgZHJhd1BvaW50KGN0eCwgZHJhd09wdGlvbnMsIGNlbnRlclgsIGNlbnRlclkpO1xuICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gbGFiZWxDb2xvci5ib3JkZXJDb2xvcjtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBsYWJlbENvbG9yLmJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgICAgIGRyYXdQb2ludChjdHgsIGRyYXdPcHRpb25zLCBjZW50ZXJYLCBjZW50ZXJZKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN0eC5saW5lV2lkdGggPSBpc09iamVjdChsYWJlbENvbG9yLmJvcmRlcldpZHRoKSA/IE1hdGgubWF4KC4uLk9iamVjdC52YWx1ZXMobGFiZWxDb2xvci5ib3JkZXJXaWR0aCkpIDogbGFiZWxDb2xvci5ib3JkZXJXaWR0aCB8fCAxO1xuICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gbGFiZWxDb2xvci5ib3JkZXJDb2xvcjtcbiAgICAgICAgICAgIGN0eC5zZXRMaW5lRGFzaChsYWJlbENvbG9yLmJvcmRlckRhc2ggfHwgW10pO1xuICAgICAgICAgICAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gbGFiZWxDb2xvci5ib3JkZXJEYXNoT2Zmc2V0IHx8IDA7XG4gICAgICAgICAgICBjb25zdCBvdXRlclggPSBydGxIZWxwZXIubGVmdEZvckx0cihydGxDb2xvclgsIGJveFdpZHRoKTtcbiAgICAgICAgICAgIGNvbnN0IGlubmVyWCA9IHJ0bEhlbHBlci5sZWZ0Rm9yTHRyKHJ0bEhlbHBlci54UGx1cyhydGxDb2xvclgsIDEpLCBib3hXaWR0aCAtIDIpO1xuICAgICAgICAgICAgY29uc3QgYm9yZGVyUmFkaXVzID0gdG9UUkJMQ29ybmVycyhsYWJlbENvbG9yLmJvcmRlclJhZGl1cyk7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LnZhbHVlcyhib3JkZXJSYWRpdXMpLnNvbWUoKHYpPT52ICE9PSAwKSkge1xuICAgICAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5tdWx0aUtleUJhY2tncm91bmQ7XG4gICAgICAgICAgICAgICAgYWRkUm91bmRlZFJlY3RQYXRoKGN0eCwge1xuICAgICAgICAgICAgICAgICAgICB4OiBvdXRlclgsXG4gICAgICAgICAgICAgICAgICAgIHk6IGNvbG9yWSxcbiAgICAgICAgICAgICAgICAgICAgdzogYm94V2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGg6IGJveEhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiBib3JkZXJSYWRpdXNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gbGFiZWxDb2xvci5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgIGFkZFJvdW5kZWRSZWN0UGF0aChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgeDogaW5uZXJYLFxuICAgICAgICAgICAgICAgICAgICB5OiBjb2xvclkgKyAxLFxuICAgICAgICAgICAgICAgICAgICB3OiBib3hXaWR0aCAtIDIsXG4gICAgICAgICAgICAgICAgICAgIGg6IGJveEhlaWdodCAtIDIsXG4gICAgICAgICAgICAgICAgICAgIHJhZGl1czogYm9yZGVyUmFkaXVzXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMubXVsdGlLZXlCYWNrZ3JvdW5kO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsUmVjdChvdXRlclgsIGNvbG9yWSwgYm94V2lkdGgsIGJveEhlaWdodCk7XG4gICAgICAgICAgICAgICAgY3R4LnN0cm9rZVJlY3Qob3V0ZXJYLCBjb2xvclksIGJveFdpZHRoLCBib3hIZWlnaHQpO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBsYWJlbENvbG9yLmJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFJlY3QoaW5uZXJYLCBjb2xvclkgKyAxLCBib3hXaWR0aCAtIDIsIGJveEhlaWdodCAtIDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLmxhYmVsVGV4dENvbG9yc1tpXTtcbiAgICB9XG4gICAgZHJhd0JvZHkocHQsIGN0eCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IGJvZHkgIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IGJvZHlTcGFjaW5nICwgYm9keUFsaWduICwgZGlzcGxheUNvbG9ycyAsIGJveEhlaWdodCAsIGJveFdpZHRoICwgYm94UGFkZGluZyAgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGJvZHlGb250ID0gdG9Gb250KG9wdGlvbnMuYm9keUZvbnQpO1xuICAgICAgICBsZXQgYm9keUxpbmVIZWlnaHQgPSBib2R5Rm9udC5saW5lSGVpZ2h0O1xuICAgICAgICBsZXQgeExpbmVQYWRkaW5nID0gMDtcbiAgICAgICAgY29uc3QgcnRsSGVscGVyID0gZ2V0UnRsQWRhcHRlcihvcHRpb25zLnJ0bCwgdGhpcy54LCB0aGlzLndpZHRoKTtcbiAgICAgICAgY29uc3QgZmlsbExpbmVPZlRleHQgPSBmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICBjdHguZmlsbFRleHQobGluZSwgcnRsSGVscGVyLngocHQueCArIHhMaW5lUGFkZGluZyksIHB0LnkgKyBib2R5TGluZUhlaWdodCAvIDIpO1xuICAgICAgICAgICAgcHQueSArPSBib2R5TGluZUhlaWdodCArIGJvZHlTcGFjaW5nO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBib2R5QWxpZ25Gb3JDYWxjdWxhdGlvbiA9IHJ0bEhlbHBlci50ZXh0QWxpZ24oYm9keUFsaWduKTtcbiAgICAgICAgbGV0IGJvZHlJdGVtLCB0ZXh0Q29sb3IsIGxpbmVzLCBpLCBqLCBpbGVuLCBqbGVuO1xuICAgICAgICBjdHgudGV4dEFsaWduID0gYm9keUFsaWduO1xuICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgICAgIGN0eC5mb250ID0gYm9keUZvbnQuc3RyaW5nO1xuICAgICAgICBwdC54ID0gZ2V0QWxpZ25lZFgodGhpcywgYm9keUFsaWduRm9yQ2FsY3VsYXRpb24sIG9wdGlvbnMpO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5ib2R5Q29sb3I7XG4gICAgICAgIGVhY2godGhpcy5iZWZvcmVCb2R5LCBmaWxsTGluZU9mVGV4dCk7XG4gICAgICAgIHhMaW5lUGFkZGluZyA9IGRpc3BsYXlDb2xvcnMgJiYgYm9keUFsaWduRm9yQ2FsY3VsYXRpb24gIT09ICdyaWdodCcgPyBib2R5QWxpZ24gPT09ICdjZW50ZXInID8gYm94V2lkdGggLyAyICsgYm94UGFkZGluZyA6IGJveFdpZHRoICsgMiArIGJveFBhZGRpbmcgOiAwO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBib2R5Lmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBib2R5SXRlbSA9IGJvZHlbaV07XG4gICAgICAgICAgICB0ZXh0Q29sb3IgPSB0aGlzLmxhYmVsVGV4dENvbG9yc1tpXTtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSB0ZXh0Q29sb3I7XG4gICAgICAgICAgICBlYWNoKGJvZHlJdGVtLmJlZm9yZSwgZmlsbExpbmVPZlRleHQpO1xuICAgICAgICAgICAgbGluZXMgPSBib2R5SXRlbS5saW5lcztcbiAgICAgICAgICAgIGlmIChkaXNwbGF5Q29sb3JzICYmIGxpbmVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2RyYXdDb2xvckJveChjdHgsIHB0LCBpLCBydGxIZWxwZXIsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGJvZHlMaW5lSGVpZ2h0ID0gTWF0aC5tYXgoYm9keUZvbnQubGluZUhlaWdodCwgYm94SGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvcihqID0gMCwgamxlbiA9IGxpbmVzLmxlbmd0aDsgaiA8IGpsZW47ICsrail7XG4gICAgICAgICAgICAgICAgZmlsbExpbmVPZlRleHQobGluZXNbal0pO1xuICAgICAgICAgICAgICAgIGJvZHlMaW5lSGVpZ2h0ID0gYm9keUZvbnQubGluZUhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVhY2goYm9keUl0ZW0uYWZ0ZXIsIGZpbGxMaW5lT2ZUZXh0KTtcbiAgICAgICAgfVxuICAgICAgICB4TGluZVBhZGRpbmcgPSAwO1xuICAgICAgICBib2R5TGluZUhlaWdodCA9IGJvZHlGb250LmxpbmVIZWlnaHQ7XG4gICAgICAgIGVhY2godGhpcy5hZnRlckJvZHksIGZpbGxMaW5lT2ZUZXh0KTtcbiAgICAgICAgcHQueSAtPSBib2R5U3BhY2luZztcbiAgICB9XG4gICAgZHJhd0Zvb3RlcihwdCwgY3R4LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGZvb3RlciA9IHRoaXMuZm9vdGVyO1xuICAgICAgICBjb25zdCBsZW5ndGggPSBmb290ZXIubGVuZ3RoO1xuICAgICAgICBsZXQgZm9vdGVyRm9udCwgaTtcbiAgICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgcnRsSGVscGVyID0gZ2V0UnRsQWRhcHRlcihvcHRpb25zLnJ0bCwgdGhpcy54LCB0aGlzLndpZHRoKTtcbiAgICAgICAgICAgIHB0LnggPSBnZXRBbGlnbmVkWCh0aGlzLCBvcHRpb25zLmZvb3RlckFsaWduLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHB0LnkgKz0gb3B0aW9ucy5mb290ZXJNYXJnaW5Ub3A7XG4gICAgICAgICAgICBjdHgudGV4dEFsaWduID0gcnRsSGVscGVyLnRleHRBbGlnbihvcHRpb25zLmZvb3RlckFsaWduKTtcbiAgICAgICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICAgICAgICAgIGZvb3RlckZvbnQgPSB0b0ZvbnQob3B0aW9ucy5mb290ZXJGb250KTtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLmZvb3RlckNvbG9yO1xuICAgICAgICAgICAgY3R4LmZvbnQgPSBmb290ZXJGb250LnN0cmluZztcbiAgICAgICAgICAgIGZvcihpID0gMDsgaSA8IGxlbmd0aDsgKytpKXtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFRleHQoZm9vdGVyW2ldLCBydGxIZWxwZXIueChwdC54KSwgcHQueSArIGZvb3RlckZvbnQubGluZUhlaWdodCAvIDIpO1xuICAgICAgICAgICAgICAgIHB0LnkgKz0gZm9vdGVyRm9udC5saW5lSGVpZ2h0ICsgb3B0aW9ucy5mb290ZXJTcGFjaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGRyYXdCYWNrZ3JvdW5kKHB0LCBjdHgsIHRvb2x0aXBTaXplLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgeEFsaWduICwgeUFsaWduICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyB4ICwgeSAgfSA9IHB0O1xuICAgICAgICBjb25zdCB7IHdpZHRoICwgaGVpZ2h0ICB9ID0gdG9vbHRpcFNpemU7XG4gICAgICAgIGNvbnN0IHsgdG9wTGVmdCAsIHRvcFJpZ2h0ICwgYm90dG9tTGVmdCAsIGJvdHRvbVJpZ2h0ICB9ID0gdG9UUkJMQ29ybmVycyhvcHRpb25zLmNvcm5lclJhZGl1cyk7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLmJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gb3B0aW9ucy5ib3JkZXJDb2xvcjtcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IG9wdGlvbnMuYm9yZGVyV2lkdGg7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY3R4Lm1vdmVUbyh4ICsgdG9wTGVmdCwgeSk7XG4gICAgICAgIGlmICh5QWxpZ24gPT09ICd0b3AnKSB7XG4gICAgICAgICAgICB0aGlzLmRyYXdDYXJldChwdCwgY3R4LCB0b29sdGlwU2l6ZSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LmxpbmVUbyh4ICsgd2lkdGggLSB0b3BSaWdodCwgeSk7XG4gICAgICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHggKyB3aWR0aCwgeSwgeCArIHdpZHRoLCB5ICsgdG9wUmlnaHQpO1xuICAgICAgICBpZiAoeUFsaWduID09PSAnY2VudGVyJyAmJiB4QWxpZ24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhd0NhcmV0KHB0LCBjdHgsIHRvb2x0aXBTaXplLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBjdHgubGluZVRvKHggKyB3aWR0aCwgeSArIGhlaWdodCAtIGJvdHRvbVJpZ2h0KTtcbiAgICAgICAgY3R4LnF1YWRyYXRpY0N1cnZlVG8oeCArIHdpZHRoLCB5ICsgaGVpZ2h0LCB4ICsgd2lkdGggLSBib3R0b21SaWdodCwgeSArIGhlaWdodCk7XG4gICAgICAgIGlmICh5QWxpZ24gPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgICB0aGlzLmRyYXdDYXJldChwdCwgY3R4LCB0b29sdGlwU2l6ZSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LmxpbmVUbyh4ICsgYm90dG9tTGVmdCwgeSArIGhlaWdodCk7XG4gICAgICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHgsIHkgKyBoZWlnaHQsIHgsIHkgKyBoZWlnaHQgLSBib3R0b21MZWZ0KTtcbiAgICAgICAgaWYgKHlBbGlnbiA9PT0gJ2NlbnRlcicgJiYgeEFsaWduID09PSAnbGVmdCcpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhd0NhcmV0KHB0LCBjdHgsIHRvb2x0aXBTaXplLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBjdHgubGluZVRvKHgsIHkgKyB0b3BMZWZ0KTtcbiAgICAgICAgY3R4LnF1YWRyYXRpY0N1cnZlVG8oeCwgeSwgeCArIHRvcExlZnQsIHkpO1xuICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgIGlmIChvcHRpb25zLmJvcmRlcldpZHRoID4gMCkge1xuICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICB9XG4gICAgfVxuIF91cGRhdGVBbmltYXRpb25UYXJnZXQob3B0aW9ucykge1xuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGNvbnN0IGFuaW1zID0gdGhpcy4kYW5pbWF0aW9ucztcbiAgICAgICAgY29uc3QgYW5pbVggPSBhbmltcyAmJiBhbmltcy54O1xuICAgICAgICBjb25zdCBhbmltWSA9IGFuaW1zICYmIGFuaW1zLnk7XG4gICAgICAgIGlmIChhbmltWCB8fCBhbmltWSkge1xuICAgICAgICAgICAgY29uc3QgcG9zaXRpb24gPSBwb3NpdGlvbmVyc1tvcHRpb25zLnBvc2l0aW9uXS5jYWxsKHRoaXMsIHRoaXMuX2FjdGl2ZSwgdGhpcy5fZXZlbnRQb3NpdGlvbik7XG4gICAgICAgICAgICBpZiAoIXBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMuX3NpemUgPSBnZXRUb29sdGlwU2l6ZSh0aGlzLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uQW5kU2l6ZSA9IE9iamVjdC5hc3NpZ24oe30sIHBvc2l0aW9uLCB0aGlzLl9zaXplKTtcbiAgICAgICAgICAgIGNvbnN0IGFsaWdubWVudCA9IGRldGVybWluZUFsaWdubWVudChjaGFydCwgb3B0aW9ucywgcG9zaXRpb25BbmRTaXplKTtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50ID0gZ2V0QmFja2dyb3VuZFBvaW50KG9wdGlvbnMsIHBvc2l0aW9uQW5kU2l6ZSwgYWxpZ25tZW50LCBjaGFydCk7XG4gICAgICAgICAgICBpZiAoYW5pbVguX3RvICE9PSBwb2ludC54IHx8IGFuaW1ZLl90byAhPT0gcG9pbnQueSkge1xuICAgICAgICAgICAgICAgIHRoaXMueEFsaWduID0gYWxpZ25tZW50LnhBbGlnbjtcbiAgICAgICAgICAgICAgICB0aGlzLnlBbGlnbiA9IGFsaWdubWVudC55QWxpZ247XG4gICAgICAgICAgICAgICAgdGhpcy53aWR0aCA9IHNpemUud2lkdGg7XG4gICAgICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSBzaXplLmhlaWdodDtcbiAgICAgICAgICAgICAgICB0aGlzLmNhcmV0WCA9IHBvc2l0aW9uLng7XG4gICAgICAgICAgICAgICAgdGhpcy5jYXJldFkgPSBwb3NpdGlvbi55O1xuICAgICAgICAgICAgICAgIHRoaXMuX3Jlc29sdmVBbmltYXRpb25zKCkudXBkYXRlKHRoaXMsIHBvaW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiBfd2lsbFJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5vcGFjaXR5O1xuICAgIH1cbiAgICBkcmF3KGN0eCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICBsZXQgb3BhY2l0eSA9IHRoaXMub3BhY2l0eTtcbiAgICAgICAgaWYgKCFvcGFjaXR5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdXBkYXRlQW5pbWF0aW9uVGFyZ2V0KG9wdGlvbnMpO1xuICAgICAgICBjb25zdCB0b29sdGlwU2l6ZSA9IHtcbiAgICAgICAgICAgIHdpZHRoOiB0aGlzLndpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLmhlaWdodFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBwdCA9IHtcbiAgICAgICAgICAgIHg6IHRoaXMueCxcbiAgICAgICAgICAgIHk6IHRoaXMueVxuICAgICAgICB9O1xuICAgICAgICBvcGFjaXR5ID0gTWF0aC5hYnMob3BhY2l0eSkgPCAxZS0zID8gMCA6IG9wYWNpdHk7XG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcob3B0aW9ucy5wYWRkaW5nKTtcbiAgICAgICAgY29uc3QgaGFzVG9vbHRpcENvbnRlbnQgPSB0aGlzLnRpdGxlLmxlbmd0aCB8fCB0aGlzLmJlZm9yZUJvZHkubGVuZ3RoIHx8IHRoaXMuYm9keS5sZW5ndGggfHwgdGhpcy5hZnRlckJvZHkubGVuZ3RoIHx8IHRoaXMuZm9vdGVyLmxlbmd0aDtcbiAgICAgICAgaWYgKG9wdGlvbnMuZW5hYmxlZCAmJiBoYXNUb29sdGlwQ29udGVudCkge1xuICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IG9wYWNpdHk7XG4gICAgICAgICAgICB0aGlzLmRyYXdCYWNrZ3JvdW5kKHB0LCBjdHgsIHRvb2x0aXBTaXplLCBvcHRpb25zKTtcbiAgICAgICAgICAgIG92ZXJyaWRlVGV4dERpcmVjdGlvbihjdHgsIG9wdGlvbnMudGV4dERpcmVjdGlvbik7XG4gICAgICAgICAgICBwdC55ICs9IHBhZGRpbmcudG9wO1xuICAgICAgICAgICAgdGhpcy5kcmF3VGl0bGUocHQsIGN0eCwgb3B0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLmRyYXdCb2R5KHB0LCBjdHgsIG9wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy5kcmF3Rm9vdGVyKHB0LCBjdHgsIG9wdGlvbnMpO1xuICAgICAgICAgICAgcmVzdG9yZVRleHREaXJlY3Rpb24oY3R4LCBvcHRpb25zLnRleHREaXJlY3Rpb24pO1xuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgfVxuICAgIH1cbiBnZXRBY3RpdmVFbGVtZW50cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZSB8fCBbXTtcbiAgICB9XG4gc2V0QWN0aXZlRWxlbWVudHMoYWN0aXZlRWxlbWVudHMsIGV2ZW50UG9zaXRpb24pIHtcbiAgICAgICAgY29uc3QgbGFzdEFjdGl2ZSA9IHRoaXMuX2FjdGl2ZTtcbiAgICAgICAgY29uc3QgYWN0aXZlID0gYWN0aXZlRWxlbWVudHMubWFwKCh7IGRhdGFzZXRJbmRleCAsIGluZGV4ICB9KT0+e1xuICAgICAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuY2hhcnQuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcbiAgICAgICAgICAgIGlmICghbWV0YSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGZpbmQgYSBkYXRhc2V0IGF0IGluZGV4ICcgKyBkYXRhc2V0SW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkYXRhc2V0SW5kZXgsXG4gICAgICAgICAgICAgICAgZWxlbWVudDogbWV0YS5kYXRhW2luZGV4XSxcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGNoYW5nZWQgPSAhX2VsZW1lbnRzRXF1YWwobGFzdEFjdGl2ZSwgYWN0aXZlKTtcbiAgICAgICAgY29uc3QgcG9zaXRpb25DaGFuZ2VkID0gdGhpcy5fcG9zaXRpb25DaGFuZ2VkKGFjdGl2ZSwgZXZlbnRQb3NpdGlvbik7XG4gICAgICAgIGlmIChjaGFuZ2VkIHx8IHBvc2l0aW9uQ2hhbmdlZCkge1xuICAgICAgICAgICAgdGhpcy5fYWN0aXZlID0gYWN0aXZlO1xuICAgICAgICAgICAgdGhpcy5fZXZlbnRQb3NpdGlvbiA9IGV2ZW50UG9zaXRpb247XG4gICAgICAgICAgICB0aGlzLl9pZ25vcmVSZXBsYXlFdmVudHMgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy51cGRhdGUodHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gaGFuZGxlRXZlbnQoZSwgcmVwbGF5LCBpbkNoYXJ0QXJlYSA9IHRydWUpIHtcbiAgICAgICAgaWYgKHJlcGxheSAmJiB0aGlzLl9pZ25vcmVSZXBsYXlFdmVudHMpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pZ25vcmVSZXBsYXlFdmVudHMgPSBmYWxzZTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgbGFzdEFjdGl2ZSA9IHRoaXMuX2FjdGl2ZSB8fCBbXTtcbiAgICAgICAgY29uc3QgYWN0aXZlID0gdGhpcy5fZ2V0QWN0aXZlRWxlbWVudHMoZSwgbGFzdEFjdGl2ZSwgcmVwbGF5LCBpbkNoYXJ0QXJlYSk7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uQ2hhbmdlZCA9IHRoaXMuX3Bvc2l0aW9uQ2hhbmdlZChhY3RpdmUsIGUpO1xuICAgICAgICBjb25zdCBjaGFuZ2VkID0gcmVwbGF5IHx8ICFfZWxlbWVudHNFcXVhbChhY3RpdmUsIGxhc3RBY3RpdmUpIHx8IHBvc2l0aW9uQ2hhbmdlZDtcbiAgICAgICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZSA9IGFjdGl2ZTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmVuYWJsZWQgfHwgb3B0aW9ucy5leHRlcm5hbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50UG9zaXRpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgIHg6IGUueCxcbiAgICAgICAgICAgICAgICAgICAgeTogZS55XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZSh0cnVlLCByZXBsYXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGFuZ2VkO1xuICAgIH1cbiBfZ2V0QWN0aXZlRWxlbWVudHMoZSwgbGFzdEFjdGl2ZSwgcmVwbGF5LCBpbkNoYXJ0QXJlYSkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBpZiAoZS50eXBlID09PSAnbW91c2VvdXQnKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpbkNoYXJ0QXJlYSkge1xuICAgICAgICAgICAgcmV0dXJuIGxhc3RBY3RpdmU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWN0aXZlID0gdGhpcy5jaGFydC5nZXRFbGVtZW50c0F0RXZlbnRGb3JNb2RlKGUsIG9wdGlvbnMubW9kZSwgb3B0aW9ucywgcmVwbGF5KTtcbiAgICAgICAgaWYgKG9wdGlvbnMucmV2ZXJzZSkge1xuICAgICAgICAgICAgYWN0aXZlLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWN0aXZlO1xuICAgIH1cbiBfcG9zaXRpb25DaGFuZ2VkKGFjdGl2ZSwgZSkge1xuICAgICAgICBjb25zdCB7IGNhcmV0WCAsIGNhcmV0WSAsIG9wdGlvbnMgIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHBvc2l0aW9uZXJzW29wdGlvbnMucG9zaXRpb25dLmNhbGwodGhpcywgYWN0aXZlLCBlKTtcbiAgICAgICAgcmV0dXJuIHBvc2l0aW9uICE9PSBmYWxzZSAmJiAoY2FyZXRYICE9PSBwb3NpdGlvbi54IHx8IGNhcmV0WSAhPT0gcG9zaXRpb24ueSk7XG4gICAgfVxufVxudmFyIHBsdWdpbl90b29sdGlwID0ge1xuICAgIGlkOiAndG9vbHRpcCcsXG4gICAgX2VsZW1lbnQ6IFRvb2x0aXAsXG4gICAgcG9zaXRpb25lcnMsXG4gICAgYWZ0ZXJJbml0IChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGNoYXJ0LnRvb2x0aXAgPSBuZXcgVG9vbHRpcCh7XG4gICAgICAgICAgICAgICAgY2hhcnQsXG4gICAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGJlZm9yZVVwZGF0ZSAoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChjaGFydC50b29sdGlwKSB7XG4gICAgICAgICAgICBjaGFydC50b29sdGlwLmluaXRpYWxpemUob3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHJlc2V0IChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGNoYXJ0LnRvb2x0aXApIHtcbiAgICAgICAgICAgIGNoYXJ0LnRvb2x0aXAuaW5pdGlhbGl6ZShvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgYWZ0ZXJEcmF3IChjaGFydCkge1xuICAgICAgICBjb25zdCB0b29sdGlwID0gY2hhcnQudG9vbHRpcDtcbiAgICAgICAgaWYgKHRvb2x0aXAgJiYgdG9vbHRpcC5fd2lsbFJlbmRlcigpKSB7XG4gICAgICAgICAgICBjb25zdCBhcmdzID0ge1xuICAgICAgICAgICAgICAgIHRvb2x0aXBcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoY2hhcnQubm90aWZ5UGx1Z2lucygnYmVmb3JlVG9vbHRpcERyYXcnLCB7XG4gICAgICAgICAgICAgICAgLi4uYXJncyxcbiAgICAgICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgICAgICB9KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0b29sdGlwLmRyYXcoY2hhcnQuY3R4KTtcbiAgICAgICAgICAgIGNoYXJ0Lm5vdGlmeVBsdWdpbnMoJ2FmdGVyVG9vbHRpcERyYXcnLCBhcmdzKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgYWZ0ZXJFdmVudCAoY2hhcnQsIGFyZ3MpIHtcbiAgICAgICAgaWYgKGNoYXJ0LnRvb2x0aXApIHtcbiAgICAgICAgICAgIGNvbnN0IHVzZUZpbmFsUG9zaXRpb24gPSBhcmdzLnJlcGxheTtcbiAgICAgICAgICAgIGlmIChjaGFydC50b29sdGlwLmhhbmRsZUV2ZW50KGFyZ3MuZXZlbnQsIHVzZUZpbmFsUG9zaXRpb24sIGFyZ3MuaW5DaGFydEFyZWEpKSB7XG4gICAgICAgICAgICAgICAgYXJncy5jaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgZXh0ZXJuYWw6IG51bGwsXG4gICAgICAgIHBvc2l0aW9uOiAnYXZlcmFnZScsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwwLDAsMC44KScsXG4gICAgICAgIHRpdGxlQ29sb3I6ICcjZmZmJyxcbiAgICAgICAgdGl0bGVGb250OiB7XG4gICAgICAgICAgICB3ZWlnaHQ6ICdib2xkJ1xuICAgICAgICB9LFxuICAgICAgICB0aXRsZVNwYWNpbmc6IDIsXG4gICAgICAgIHRpdGxlTWFyZ2luQm90dG9tOiA2LFxuICAgICAgICB0aXRsZUFsaWduOiAnbGVmdCcsXG4gICAgICAgIGJvZHlDb2xvcjogJyNmZmYnLFxuICAgICAgICBib2R5U3BhY2luZzogMixcbiAgICAgICAgYm9keUZvbnQ6IHt9LFxuICAgICAgICBib2R5QWxpZ246ICdsZWZ0JyxcbiAgICAgICAgZm9vdGVyQ29sb3I6ICcjZmZmJyxcbiAgICAgICAgZm9vdGVyU3BhY2luZzogMixcbiAgICAgICAgZm9vdGVyTWFyZ2luVG9wOiA2LFxuICAgICAgICBmb290ZXJGb250OiB7XG4gICAgICAgICAgICB3ZWlnaHQ6ICdib2xkJ1xuICAgICAgICB9LFxuICAgICAgICBmb290ZXJBbGlnbjogJ2xlZnQnLFxuICAgICAgICBwYWRkaW5nOiA2LFxuICAgICAgICBjYXJldFBhZGRpbmc6IDIsXG4gICAgICAgIGNhcmV0U2l6ZTogNSxcbiAgICAgICAgY29ybmVyUmFkaXVzOiA2LFxuICAgICAgICBib3hIZWlnaHQ6IChjdHgsIG9wdHMpPT5vcHRzLmJvZHlGb250LnNpemUsXG4gICAgICAgIGJveFdpZHRoOiAoY3R4LCBvcHRzKT0+b3B0cy5ib2R5Rm9udC5zaXplLFxuICAgICAgICBtdWx0aUtleUJhY2tncm91bmQ6ICcjZmZmJyxcbiAgICAgICAgZGlzcGxheUNvbG9yczogdHJ1ZSxcbiAgICAgICAgYm94UGFkZGluZzogMCxcbiAgICAgICAgYm9yZGVyQ29sb3I6ICdyZ2JhKDAsMCwwLDApJyxcbiAgICAgICAgYm9yZGVyV2lkdGg6IDAsXG4gICAgICAgIGFuaW1hdGlvbjoge1xuICAgICAgICAgICAgZHVyYXRpb246IDQwMCxcbiAgICAgICAgICAgIGVhc2luZzogJ2Vhc2VPdXRRdWFydCdcbiAgICAgICAgfSxcbiAgICAgICAgYW5pbWF0aW9uczoge1xuICAgICAgICAgICAgbnVtYmVyczoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgJ3gnLFxuICAgICAgICAgICAgICAgICAgICAneScsXG4gICAgICAgICAgICAgICAgICAgICd3aWR0aCcsXG4gICAgICAgICAgICAgICAgICAgICdoZWlnaHQnLFxuICAgICAgICAgICAgICAgICAgICAnY2FyZXRYJyxcbiAgICAgICAgICAgICAgICAgICAgJ2NhcmV0WSdcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3BhY2l0eToge1xuICAgICAgICAgICAgICAgIGVhc2luZzogJ2xpbmVhcicsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDIwMFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxsYmFja3M6IGRlZmF1bHRDYWxsYmFja3NcbiAgICB9LFxuICAgIGRlZmF1bHRSb3V0ZXM6IHtcbiAgICAgICAgYm9keUZvbnQ6ICdmb250JyxcbiAgICAgICAgZm9vdGVyRm9udDogJ2ZvbnQnLFxuICAgICAgICB0aXRsZUZvbnQ6ICdmb250J1xuICAgIH0sXG4gICAgZGVzY3JpcHRvcnM6IHtcbiAgICAgICAgX3NjcmlwdGFibGU6IChuYW1lKT0+bmFtZSAhPT0gJ2ZpbHRlcicgJiYgbmFtZSAhPT0gJ2l0ZW1Tb3J0JyAmJiBuYW1lICE9PSAnZXh0ZXJuYWwnLFxuICAgICAgICBfaW5kZXhhYmxlOiBmYWxzZSxcbiAgICAgICAgY2FsbGJhY2tzOiB7XG4gICAgICAgICAgICBfc2NyaXB0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICBfaW5kZXhhYmxlOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBhbmltYXRpb246IHtcbiAgICAgICAgICAgIF9mYWxsYmFjazogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgYW5pbWF0aW9uczoge1xuICAgICAgICAgICAgX2ZhbGxiYWNrOiAnYW5pbWF0aW9uJ1xuICAgICAgICB9XG4gICAgfSxcbiAgICBhZGRpdGlvbmFsT3B0aW9uU2NvcGVzOiBbXG4gICAgICAgICdpbnRlcmFjdGlvbidcbiAgICBdXG59O1xuXG52YXIgcGx1Z2lucyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbl9fcHJvdG9fXzogbnVsbCxcbkNvbG9yczogcGx1Z2luX2NvbG9ycyxcbkRlY2ltYXRpb246IHBsdWdpbl9kZWNpbWF0aW9uLFxuRmlsbGVyOiBpbmRleCxcbkxlZ2VuZDogcGx1Z2luX2xlZ2VuZCxcblN1YlRpdGxlOiBwbHVnaW5fc3VidGl0bGUsXG5UaXRsZTogcGx1Z2luX3RpdGxlLFxuVG9vbHRpcDogcGx1Z2luX3Rvb2x0aXBcbn0pO1xuXG5jb25zdCBhZGRJZlN0cmluZyA9IChsYWJlbHMsIHJhdywgaW5kZXgsIGFkZGVkTGFiZWxzKT0+e1xuICAgIGlmICh0eXBlb2YgcmF3ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpbmRleCA9IGxhYmVscy5wdXNoKHJhdykgLSAxO1xuICAgICAgICBhZGRlZExhYmVscy51bnNoaWZ0KHtcbiAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgbGFiZWw6IHJhd1xuICAgICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGlzTmFOKHJhdykpIHtcbiAgICAgICAgaW5kZXggPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gaW5kZXg7XG59O1xuZnVuY3Rpb24gZmluZE9yQWRkTGFiZWwobGFiZWxzLCByYXcsIGluZGV4LCBhZGRlZExhYmVscykge1xuICAgIGNvbnN0IGZpcnN0ID0gbGFiZWxzLmluZGV4T2YocmF3KTtcbiAgICBpZiAoZmlyc3QgPT09IC0xKSB7XG4gICAgICAgIHJldHVybiBhZGRJZlN0cmluZyhsYWJlbHMsIHJhdywgaW5kZXgsIGFkZGVkTGFiZWxzKTtcbiAgICB9XG4gICAgY29uc3QgbGFzdCA9IGxhYmVscy5sYXN0SW5kZXhPZihyYXcpO1xuICAgIHJldHVybiBmaXJzdCAhPT0gbGFzdCA/IGluZGV4IDogZmlyc3Q7XG59XG5jb25zdCB2YWxpZEluZGV4ID0gKGluZGV4LCBtYXgpPT5pbmRleCA9PT0gbnVsbCA/IG51bGwgOiBfbGltaXRWYWx1ZShNYXRoLnJvdW5kKGluZGV4KSwgMCwgbWF4KTtcbmZ1bmN0aW9uIF9nZXRMYWJlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgY29uc3QgbGFiZWxzID0gdGhpcy5nZXRMYWJlbHMoKTtcbiAgICBpZiAodmFsdWUgPj0gMCAmJiB2YWx1ZSA8IGxhYmVscy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGxhYmVsc1t2YWx1ZV07XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmNsYXNzIENhdGVnb3J5U2NhbGUgZXh0ZW5kcyBTY2FsZSB7XG4gICAgc3RhdGljIGlkID0gJ2NhdGVnb3J5JztcbiBzdGF0aWMgZGVmYXVsdHMgPSB7XG4gICAgICAgIHRpY2tzOiB7XG4gICAgICAgICAgICBjYWxsYmFjazogX2dldExhYmVsRm9yVmFsdWVcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3RydWN0b3IoY2ZnKXtcbiAgICAgICAgc3VwZXIoY2ZnKTtcbiAgICAgICAgIHRoaXMuX3N0YXJ0VmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3ZhbHVlUmFuZ2UgPSAwO1xuICAgICAgICB0aGlzLl9hZGRlZExhYmVscyA9IFtdO1xuICAgIH1cbiAgICBpbml0KHNjYWxlT3B0aW9ucykge1xuICAgICAgICBjb25zdCBhZGRlZCA9IHRoaXMuX2FkZGVkTGFiZWxzO1xuICAgICAgICBpZiAoYWRkZWQubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBsYWJlbHMgPSB0aGlzLmdldExhYmVscygpO1xuICAgICAgICAgICAgZm9yIChjb25zdCB7IGluZGV4ICwgbGFiZWwgIH0gb2YgYWRkZWQpe1xuICAgICAgICAgICAgICAgIGlmIChsYWJlbHNbaW5kZXhdID09PSBsYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9hZGRlZExhYmVscyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyLmluaXQoc2NhbGVPcHRpb25zKTtcbiAgICB9XG4gICAgcGFyc2UocmF3LCBpbmRleCkge1xuICAgICAgICBpZiAoaXNOdWxsT3JVbmRlZihyYXcpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYWJlbHMgPSB0aGlzLmdldExhYmVscygpO1xuICAgICAgICBpbmRleCA9IGlzRmluaXRlKGluZGV4KSAmJiBsYWJlbHNbaW5kZXhdID09PSByYXcgPyBpbmRleCA6IGZpbmRPckFkZExhYmVsKGxhYmVscywgcmF3LCB2YWx1ZU9yRGVmYXVsdChpbmRleCwgcmF3KSwgdGhpcy5fYWRkZWRMYWJlbHMpO1xuICAgICAgICByZXR1cm4gdmFsaWRJbmRleChpbmRleCwgbGFiZWxzLmxlbmd0aCAtIDEpO1xuICAgIH1cbiAgICBkZXRlcm1pbmVEYXRhTGltaXRzKCkge1xuICAgICAgICBjb25zdCB7IG1pbkRlZmluZWQgLCBtYXhEZWZpbmVkICB9ID0gdGhpcy5nZXRVc2VyQm91bmRzKCk7XG4gICAgICAgIGxldCB7IG1pbiAsIG1heCAgfSA9IHRoaXMuZ2V0TWluTWF4KHRydWUpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmJvdW5kcyA9PT0gJ3RpY2tzJykge1xuICAgICAgICAgICAgaWYgKCFtaW5EZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbWluID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghbWF4RGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIG1heCA9IHRoaXMuZ2V0TGFiZWxzKCkubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1pbiA9IG1pbjtcbiAgICAgICAgdGhpcy5tYXggPSBtYXg7XG4gICAgfVxuICAgIGJ1aWxkVGlja3MoKSB7XG4gICAgICAgIGNvbnN0IG1pbiA9IHRoaXMubWluO1xuICAgICAgICBjb25zdCBtYXggPSB0aGlzLm1heDtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5vcHRpb25zLm9mZnNldDtcbiAgICAgICAgY29uc3QgdGlja3MgPSBbXTtcbiAgICAgICAgbGV0IGxhYmVscyA9IHRoaXMuZ2V0TGFiZWxzKCk7XG4gICAgICAgIGxhYmVscyA9IG1pbiA9PT0gMCAmJiBtYXggPT09IGxhYmVscy5sZW5ndGggLSAxID8gbGFiZWxzIDogbGFiZWxzLnNsaWNlKG1pbiwgbWF4ICsgMSk7XG4gICAgICAgIHRoaXMuX3ZhbHVlUmFuZ2UgPSBNYXRoLm1heChsYWJlbHMubGVuZ3RoIC0gKG9mZnNldCA/IDAgOiAxKSwgMSk7XG4gICAgICAgIHRoaXMuX3N0YXJ0VmFsdWUgPSB0aGlzLm1pbiAtIChvZmZzZXQgPyAwLjUgOiAwKTtcbiAgICAgICAgZm9yKGxldCB2YWx1ZSA9IG1pbjsgdmFsdWUgPD0gbWF4OyB2YWx1ZSsrKXtcbiAgICAgICAgICAgIHRpY2tzLnB1c2goe1xuICAgICAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGlja3M7XG4gICAgfVxuICAgIGdldExhYmVsRm9yVmFsdWUodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIF9nZXRMYWJlbEZvclZhbHVlLmNhbGwodGhpcywgdmFsdWUpO1xuICAgIH1cbiBjb25maWd1cmUoKSB7XG4gICAgICAgIHN1cGVyLmNvbmZpZ3VyZSgpO1xuICAgICAgICBpZiAoIXRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgIHRoaXMuX3JldmVyc2VQaXhlbHMgPSAhdGhpcy5fcmV2ZXJzZVBpeGVscztcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRQaXhlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHRoaXMucGFyc2UodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCA/IE5hTiA6IHRoaXMuZ2V0UGl4ZWxGb3JEZWNpbWFsKCh2YWx1ZSAtIHRoaXMuX3N0YXJ0VmFsdWUpIC8gdGhpcy5fdmFsdWVSYW5nZSk7XG4gICAgfVxuICAgIGdldFBpeGVsRm9yVGljayhpbmRleCkge1xuICAgICAgICBjb25zdCB0aWNrcyA9IHRoaXMudGlja3M7XG4gICAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPiB0aWNrcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5nZXRQaXhlbEZvclZhbHVlKHRpY2tzW2luZGV4XS52YWx1ZSk7XG4gICAgfVxuICAgIGdldFZhbHVlRm9yUGl4ZWwocGl4ZWwpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodGhpcy5fc3RhcnRWYWx1ZSArIHRoaXMuZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKSAqIHRoaXMuX3ZhbHVlUmFuZ2UpO1xuICAgIH1cbiAgICBnZXRCYXNlUGl4ZWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJvdHRvbTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlVGlja3MkMShnZW5lcmF0aW9uT3B0aW9ucywgZGF0YVJhbmdlKSB7XG4gICAgY29uc3QgdGlja3MgPSBbXTtcbiAgICBjb25zdCBNSU5fU1BBQ0lORyA9IDFlLTE0O1xuICAgIGNvbnN0IHsgYm91bmRzICwgc3RlcCAsIG1pbiAsIG1heCAsIHByZWNpc2lvbiAsIGNvdW50ICwgbWF4VGlja3MgLCBtYXhEaWdpdHMgLCBpbmNsdWRlQm91bmRzICB9ID0gZ2VuZXJhdGlvbk9wdGlvbnM7XG4gICAgY29uc3QgdW5pdCA9IHN0ZXAgfHwgMTtcbiAgICBjb25zdCBtYXhTcGFjZXMgPSBtYXhUaWNrcyAtIDE7XG4gICAgY29uc3QgeyBtaW46IHJtaW4gLCBtYXg6IHJtYXggIH0gPSBkYXRhUmFuZ2U7XG4gICAgY29uc3QgbWluRGVmaW5lZCA9ICFpc051bGxPclVuZGVmKG1pbik7XG4gICAgY29uc3QgbWF4RGVmaW5lZCA9ICFpc051bGxPclVuZGVmKG1heCk7XG4gICAgY29uc3QgY291bnREZWZpbmVkID0gIWlzTnVsbE9yVW5kZWYoY291bnQpO1xuICAgIGNvbnN0IG1pblNwYWNpbmcgPSAocm1heCAtIHJtaW4pIC8gKG1heERpZ2l0cyArIDEpO1xuICAgIGxldCBzcGFjaW5nID0gbmljZU51bSgocm1heCAtIHJtaW4pIC8gbWF4U3BhY2VzIC8gdW5pdCkgKiB1bml0O1xuICAgIGxldCBmYWN0b3IsIG5pY2VNaW4sIG5pY2VNYXgsIG51bVNwYWNlcztcbiAgICBpZiAoc3BhY2luZyA8IE1JTl9TUEFDSU5HICYmICFtaW5EZWZpbmVkICYmICFtYXhEZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHJtaW5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHJtYXhcbiAgICAgICAgICAgIH1cbiAgICAgICAgXTtcbiAgICB9XG4gICAgbnVtU3BhY2VzID0gTWF0aC5jZWlsKHJtYXggLyBzcGFjaW5nKSAtIE1hdGguZmxvb3Iocm1pbiAvIHNwYWNpbmcpO1xuICAgIGlmIChudW1TcGFjZXMgPiBtYXhTcGFjZXMpIHtcbiAgICAgICAgc3BhY2luZyA9IG5pY2VOdW0obnVtU3BhY2VzICogc3BhY2luZyAvIG1heFNwYWNlcyAvIHVuaXQpICogdW5pdDtcbiAgICB9XG4gICAgaWYgKCFpc051bGxPclVuZGVmKHByZWNpc2lvbikpIHtcbiAgICAgICAgZmFjdG9yID0gTWF0aC5wb3coMTAsIHByZWNpc2lvbik7XG4gICAgICAgIHNwYWNpbmcgPSBNYXRoLmNlaWwoc3BhY2luZyAqIGZhY3RvcikgLyBmYWN0b3I7XG4gICAgfVxuICAgIGlmIChib3VuZHMgPT09ICd0aWNrcycpIHtcbiAgICAgICAgbmljZU1pbiA9IE1hdGguZmxvb3Iocm1pbiAvIHNwYWNpbmcpICogc3BhY2luZztcbiAgICAgICAgbmljZU1heCA9IE1hdGguY2VpbChybWF4IC8gc3BhY2luZykgKiBzcGFjaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG5pY2VNaW4gPSBybWluO1xuICAgICAgICBuaWNlTWF4ID0gcm1heDtcbiAgICB9XG4gICAgaWYgKG1pbkRlZmluZWQgJiYgbWF4RGVmaW5lZCAmJiBzdGVwICYmIGFsbW9zdFdob2xlKChtYXggLSBtaW4pIC8gc3RlcCwgc3BhY2luZyAvIDEwMDApKSB7XG4gICAgICAgIG51bVNwYWNlcyA9IE1hdGgucm91bmQoTWF0aC5taW4oKG1heCAtIG1pbikgLyBzcGFjaW5nLCBtYXhUaWNrcykpO1xuICAgICAgICBzcGFjaW5nID0gKG1heCAtIG1pbikgLyBudW1TcGFjZXM7XG4gICAgICAgIG5pY2VNaW4gPSBtaW47XG4gICAgICAgIG5pY2VNYXggPSBtYXg7XG4gICAgfSBlbHNlIGlmIChjb3VudERlZmluZWQpIHtcbiAgICAgICAgbmljZU1pbiA9IG1pbkRlZmluZWQgPyBtaW4gOiBuaWNlTWluO1xuICAgICAgICBuaWNlTWF4ID0gbWF4RGVmaW5lZCA/IG1heCA6IG5pY2VNYXg7XG4gICAgICAgIG51bVNwYWNlcyA9IGNvdW50IC0gMTtcbiAgICAgICAgc3BhY2luZyA9IChuaWNlTWF4IC0gbmljZU1pbikgLyBudW1TcGFjZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbnVtU3BhY2VzID0gKG5pY2VNYXggLSBuaWNlTWluKSAvIHNwYWNpbmc7XG4gICAgICAgIGlmIChhbG1vc3RFcXVhbHMobnVtU3BhY2VzLCBNYXRoLnJvdW5kKG51bVNwYWNlcyksIHNwYWNpbmcgLyAxMDAwKSkge1xuICAgICAgICAgICAgbnVtU3BhY2VzID0gTWF0aC5yb3VuZChudW1TcGFjZXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbnVtU3BhY2VzID0gTWF0aC5jZWlsKG51bVNwYWNlcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZGVjaW1hbFBsYWNlcyA9IE1hdGgubWF4KF9kZWNpbWFsUGxhY2VzKHNwYWNpbmcpLCBfZGVjaW1hbFBsYWNlcyhuaWNlTWluKSk7XG4gICAgZmFjdG9yID0gTWF0aC5wb3coMTAsIGlzTnVsbE9yVW5kZWYocHJlY2lzaW9uKSA/IGRlY2ltYWxQbGFjZXMgOiBwcmVjaXNpb24pO1xuICAgIG5pY2VNaW4gPSBNYXRoLnJvdW5kKG5pY2VNaW4gKiBmYWN0b3IpIC8gZmFjdG9yO1xuICAgIG5pY2VNYXggPSBNYXRoLnJvdW5kKG5pY2VNYXggKiBmYWN0b3IpIC8gZmFjdG9yO1xuICAgIGxldCBqID0gMDtcbiAgICBpZiAobWluRGVmaW5lZCkge1xuICAgICAgICBpZiAoaW5jbHVkZUJvdW5kcyAmJiBuaWNlTWluICE9PSBtaW4pIHtcbiAgICAgICAgICAgIHRpY2tzLnB1c2goe1xuICAgICAgICAgICAgICAgIHZhbHVlOiBtaW5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKG5pY2VNaW4gPCBtaW4pIHtcbiAgICAgICAgICAgICAgICBqKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWxtb3N0RXF1YWxzKE1hdGgucm91bmQoKG5pY2VNaW4gKyBqICogc3BhY2luZykgKiBmYWN0b3IpIC8gZmFjdG9yLCBtaW4sIHJlbGF0aXZlTGFiZWxTaXplKG1pbiwgbWluU3BhY2luZywgZ2VuZXJhdGlvbk9wdGlvbnMpKSkge1xuICAgICAgICAgICAgICAgIGorKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChuaWNlTWluIDwgbWluKSB7XG4gICAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yKDsgaiA8IG51bVNwYWNlczsgKytqKXtcbiAgICAgICAgY29uc3QgdGlja1ZhbHVlID0gTWF0aC5yb3VuZCgobmljZU1pbiArIGogKiBzcGFjaW5nKSAqIGZhY3RvcikgLyBmYWN0b3I7XG4gICAgICAgIGlmIChtYXhEZWZpbmVkICYmIHRpY2tWYWx1ZSA+IG1heCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdGlja3MucHVzaCh7XG4gICAgICAgICAgICB2YWx1ZTogdGlja1ZhbHVlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAobWF4RGVmaW5lZCAmJiBpbmNsdWRlQm91bmRzICYmIG5pY2VNYXggIT09IG1heCkge1xuICAgICAgICBpZiAodGlja3MubGVuZ3RoICYmIGFsbW9zdEVxdWFscyh0aWNrc1t0aWNrcy5sZW5ndGggLSAxXS52YWx1ZSwgbWF4LCByZWxhdGl2ZUxhYmVsU2l6ZShtYXgsIG1pblNwYWNpbmcsIGdlbmVyYXRpb25PcHRpb25zKSkpIHtcbiAgICAgICAgICAgIHRpY2tzW3RpY2tzLmxlbmd0aCAtIDFdLnZhbHVlID0gbWF4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGlja3MucHVzaCh7XG4gICAgICAgICAgICAgICAgdmFsdWU6IG1heFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFtYXhEZWZpbmVkIHx8IG5pY2VNYXggPT09IG1heCkge1xuICAgICAgICB0aWNrcy5wdXNoKHtcbiAgICAgICAgICAgIHZhbHVlOiBuaWNlTWF4XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdGlja3M7XG59XG5mdW5jdGlvbiByZWxhdGl2ZUxhYmVsU2l6ZSh2YWx1ZSwgbWluU3BhY2luZywgeyBob3Jpem9udGFsICwgbWluUm90YXRpb24gIH0pIHtcbiAgICBjb25zdCByYWQgPSB0b1JhZGlhbnMobWluUm90YXRpb24pO1xuICAgIGNvbnN0IHJhdGlvID0gKGhvcml6b250YWwgPyBNYXRoLnNpbihyYWQpIDogTWF0aC5jb3MocmFkKSkgfHwgMC4wMDE7XG4gICAgY29uc3QgbGVuZ3RoID0gMC43NSAqIG1pblNwYWNpbmcgKiAoJycgKyB2YWx1ZSkubGVuZ3RoO1xuICAgIHJldHVybiBNYXRoLm1pbihtaW5TcGFjaW5nIC8gcmF0aW8sIGxlbmd0aCk7XG59XG5jbGFzcyBMaW5lYXJTY2FsZUJhc2UgZXh0ZW5kcyBTY2FsZSB7XG4gICAgY29uc3RydWN0b3IoY2ZnKXtcbiAgICAgICAgc3VwZXIoY2ZnKTtcbiAgICAgICAgIHRoaXMuc3RhcnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLmVuZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMuX3N0YXJ0VmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLl9lbmRWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fdmFsdWVSYW5nZSA9IDA7XG4gICAgfVxuICAgIHBhcnNlKHJhdywgaW5kZXgpIHtcbiAgICAgICAgaWYgKGlzTnVsbE9yVW5kZWYocmF3KSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCh0eXBlb2YgcmF3ID09PSAnbnVtYmVyJyB8fCByYXcgaW5zdGFuY2VvZiBOdW1iZXIpICYmICFpc0Zpbml0ZSgrcmF3KSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICtyYXc7XG4gICAgfVxuICAgIGhhbmRsZVRpY2tSYW5nZU9wdGlvbnMoKSB7XG4gICAgICAgIGNvbnN0IHsgYmVnaW5BdFplcm8gIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHsgbWluRGVmaW5lZCAsIG1heERlZmluZWQgIH0gPSB0aGlzLmdldFVzZXJCb3VuZHMoKTtcbiAgICAgICAgbGV0IHsgbWluICwgbWF4ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3Qgc2V0TWluID0gKHYpPT5taW4gPSBtaW5EZWZpbmVkID8gbWluIDogdjtcbiAgICAgICAgY29uc3Qgc2V0TWF4ID0gKHYpPT5tYXggPSBtYXhEZWZpbmVkID8gbWF4IDogdjtcbiAgICAgICAgaWYgKGJlZ2luQXRaZXJvKSB7XG4gICAgICAgICAgICBjb25zdCBtaW5TaWduID0gc2lnbihtaW4pO1xuICAgICAgICAgICAgY29uc3QgbWF4U2lnbiA9IHNpZ24obWF4KTtcbiAgICAgICAgICAgIGlmIChtaW5TaWduIDwgMCAmJiBtYXhTaWduIDwgMCkge1xuICAgICAgICAgICAgICAgIHNldE1heCgwKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWluU2lnbiA+IDAgJiYgbWF4U2lnbiA+IDApIHtcbiAgICAgICAgICAgICAgICBzZXRNaW4oMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1pbiA9PT0gbWF4KSB7XG4gICAgICAgICAgICBsZXQgb2Zmc2V0ID0gbWF4ID09PSAwID8gMSA6IE1hdGguYWJzKG1heCAqIDAuMDUpO1xuICAgICAgICAgICAgc2V0TWF4KG1heCArIG9mZnNldCk7XG4gICAgICAgICAgICBpZiAoIWJlZ2luQXRaZXJvKSB7XG4gICAgICAgICAgICAgICAgc2V0TWluKG1pbiAtIG9mZnNldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5taW4gPSBtaW47XG4gICAgICAgIHRoaXMubWF4ID0gbWF4O1xuICAgIH1cbiAgICBnZXRUaWNrTGltaXQoKSB7XG4gICAgICAgIGNvbnN0IHRpY2tPcHRzID0gdGhpcy5vcHRpb25zLnRpY2tzO1xuICAgICAgICBsZXQgeyBtYXhUaWNrc0xpbWl0ICwgc3RlcFNpemUgIH0gPSB0aWNrT3B0cztcbiAgICAgICAgbGV0IG1heFRpY2tzO1xuICAgICAgICBpZiAoc3RlcFNpemUpIHtcbiAgICAgICAgICAgIG1heFRpY2tzID0gTWF0aC5jZWlsKHRoaXMubWF4IC8gc3RlcFNpemUpIC0gTWF0aC5mbG9vcih0aGlzLm1pbiAvIHN0ZXBTaXplKSArIDE7XG4gICAgICAgICAgICBpZiAobWF4VGlja3MgPiAxMDAwKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBzY2FsZXMuJHt0aGlzLmlkfS50aWNrcy5zdGVwU2l6ZTogJHtzdGVwU2l6ZX0gd291bGQgcmVzdWx0IGdlbmVyYXRpbmcgdXAgdG8gJHttYXhUaWNrc30gdGlja3MuIExpbWl0aW5nIHRvIDEwMDAuYCk7XG4gICAgICAgICAgICAgICAgbWF4VGlja3MgPSAxMDAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWF4VGlja3MgPSB0aGlzLmNvbXB1dGVUaWNrTGltaXQoKTtcbiAgICAgICAgICAgIG1heFRpY2tzTGltaXQgPSBtYXhUaWNrc0xpbWl0IHx8IDExO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXhUaWNrc0xpbWl0KSB7XG4gICAgICAgICAgICBtYXhUaWNrcyA9IE1hdGgubWluKG1heFRpY2tzTGltaXQsIG1heFRpY2tzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWF4VGlja3M7XG4gICAgfVxuIGNvbXB1dGVUaWNrTGltaXQoKSB7XG4gICAgICAgIHJldHVybiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgfVxuICAgIGJ1aWxkVGlja3MoKSB7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHRpY2tPcHRzID0gb3B0cy50aWNrcztcbiAgICAgICAgbGV0IG1heFRpY2tzID0gdGhpcy5nZXRUaWNrTGltaXQoKTtcbiAgICAgICAgbWF4VGlja3MgPSBNYXRoLm1heCgyLCBtYXhUaWNrcyk7XG4gICAgICAgIGNvbnN0IG51bWVyaWNHZW5lcmF0b3JPcHRpb25zID0ge1xuICAgICAgICAgICAgbWF4VGlja3MsXG4gICAgICAgICAgICBib3VuZHM6IG9wdHMuYm91bmRzLFxuICAgICAgICAgICAgbWluOiBvcHRzLm1pbixcbiAgICAgICAgICAgIG1heDogb3B0cy5tYXgsXG4gICAgICAgICAgICBwcmVjaXNpb246IHRpY2tPcHRzLnByZWNpc2lvbixcbiAgICAgICAgICAgIHN0ZXA6IHRpY2tPcHRzLnN0ZXBTaXplLFxuICAgICAgICAgICAgY291bnQ6IHRpY2tPcHRzLmNvdW50LFxuICAgICAgICAgICAgbWF4RGlnaXRzOiB0aGlzLl9tYXhEaWdpdHMoKSxcbiAgICAgICAgICAgIGhvcml6b250YWw6IHRoaXMuaXNIb3Jpem9udGFsKCksXG4gICAgICAgICAgICBtaW5Sb3RhdGlvbjogdGlja09wdHMubWluUm90YXRpb24gfHwgMCxcbiAgICAgICAgICAgIGluY2x1ZGVCb3VuZHM6IHRpY2tPcHRzLmluY2x1ZGVCb3VuZHMgIT09IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGRhdGFSYW5nZSA9IHRoaXMuX3JhbmdlIHx8IHRoaXM7XG4gICAgICAgIGNvbnN0IHRpY2tzID0gZ2VuZXJhdGVUaWNrcyQxKG51bWVyaWNHZW5lcmF0b3JPcHRpb25zLCBkYXRhUmFuZ2UpO1xuICAgICAgICBpZiAob3B0cy5ib3VuZHMgPT09ICd0aWNrcycpIHtcbiAgICAgICAgICAgIF9zZXRNaW5BbmRNYXhCeUtleSh0aWNrcywgdGhpcywgJ3ZhbHVlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdHMucmV2ZXJzZSkge1xuICAgICAgICAgICAgdGlja3MucmV2ZXJzZSgpO1xuICAgICAgICAgICAgdGhpcy5zdGFydCA9IHRoaXMubWF4O1xuICAgICAgICAgICAgdGhpcy5lbmQgPSB0aGlzLm1pbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnQgPSB0aGlzLm1pbjtcbiAgICAgICAgICAgIHRoaXMuZW5kID0gdGhpcy5tYXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRpY2tzO1xuICAgIH1cbiBjb25maWd1cmUoKSB7XG4gICAgICAgIGNvbnN0IHRpY2tzID0gdGhpcy50aWNrcztcbiAgICAgICAgbGV0IHN0YXJ0ID0gdGhpcy5taW47XG4gICAgICAgIGxldCBlbmQgPSB0aGlzLm1heDtcbiAgICAgICAgc3VwZXIuY29uZmlndXJlKCk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMub2Zmc2V0ICYmIHRpY2tzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gKGVuZCAtIHN0YXJ0KSAvIE1hdGgubWF4KHRpY2tzLmxlbmd0aCAtIDEsIDEpIC8gMjtcbiAgICAgICAgICAgIHN0YXJ0IC09IG9mZnNldDtcbiAgICAgICAgICAgIGVuZCArPSBvZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3RhcnRWYWx1ZSA9IHN0YXJ0O1xuICAgICAgICB0aGlzLl9lbmRWYWx1ZSA9IGVuZDtcbiAgICAgICAgdGhpcy5fdmFsdWVSYW5nZSA9IGVuZCAtIHN0YXJ0O1xuICAgIH1cbiAgICBnZXRMYWJlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBmb3JtYXROdW1iZXIodmFsdWUsIHRoaXMuY2hhcnQub3B0aW9ucy5sb2NhbGUsIHRoaXMub3B0aW9ucy50aWNrcy5mb3JtYXQpO1xuICAgIH1cbn1cblxuY2xhc3MgTGluZWFyU2NhbGUgZXh0ZW5kcyBMaW5lYXJTY2FsZUJhc2Uge1xuICAgIHN0YXRpYyBpZCA9ICdsaW5lYXInO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgIGNhbGxiYWNrOiBUaWNrcy5mb3JtYXR0ZXJzLm51bWVyaWNcbiAgICAgICAgfVxuICAgIH07XG4gICAgZGV0ZXJtaW5lRGF0YUxpbWl0cygpIHtcbiAgICAgICAgY29uc3QgeyBtaW4gLCBtYXggIH0gPSB0aGlzLmdldE1pbk1heCh0cnVlKTtcbiAgICAgICAgdGhpcy5taW4gPSBpc051bWJlckZpbml0ZShtaW4pID8gbWluIDogMDtcbiAgICAgICAgdGhpcy5tYXggPSBpc051bWJlckZpbml0ZShtYXgpID8gbWF4IDogMTtcbiAgICAgICAgdGhpcy5oYW5kbGVUaWNrUmFuZ2VPcHRpb25zKCk7XG4gICAgfVxuIGNvbXB1dGVUaWNrTGltaXQoKSB7XG4gICAgICAgIGNvbnN0IGhvcml6b250YWwgPSB0aGlzLmlzSG9yaXpvbnRhbCgpO1xuICAgICAgICBjb25zdCBsZW5ndGggPSBob3Jpem9udGFsID8gdGhpcy53aWR0aCA6IHRoaXMuaGVpZ2h0O1xuICAgICAgICBjb25zdCBtaW5Sb3RhdGlvbiA9IHRvUmFkaWFucyh0aGlzLm9wdGlvbnMudGlja3MubWluUm90YXRpb24pO1xuICAgICAgICBjb25zdCByYXRpbyA9IChob3Jpem9udGFsID8gTWF0aC5zaW4obWluUm90YXRpb24pIDogTWF0aC5jb3MobWluUm90YXRpb24pKSB8fCAwLjAwMTtcbiAgICAgICAgY29uc3QgdGlja0ZvbnQgPSB0aGlzLl9yZXNvbHZlVGlja0ZvbnRPcHRpb25zKDApO1xuICAgICAgICByZXR1cm4gTWF0aC5jZWlsKGxlbmd0aCAvIE1hdGgubWluKDQwLCB0aWNrRm9udC5saW5lSGVpZ2h0IC8gcmF0aW8pKTtcbiAgICB9XG4gICAgZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgPyBOYU4gOiB0aGlzLmdldFBpeGVsRm9yRGVjaW1hbCgodmFsdWUgLSB0aGlzLl9zdGFydFZhbHVlKSAvIHRoaXMuX3ZhbHVlUmFuZ2UpO1xuICAgIH1cbiAgICBnZXRWYWx1ZUZvclBpeGVsKHBpeGVsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGFydFZhbHVlICsgdGhpcy5nZXREZWNpbWFsRm9yUGl4ZWwocGl4ZWwpICogdGhpcy5fdmFsdWVSYW5nZTtcbiAgICB9XG59XG5cbmNvbnN0IGxvZzEwRmxvb3IgPSAodik9Pk1hdGguZmxvb3IobG9nMTAodikpO1xuY29uc3QgY2hhbmdlRXhwb25lbnQgPSAodiwgbSk9Pk1hdGgucG93KDEwLCBsb2cxMEZsb29yKHYpICsgbSk7XG5mdW5jdGlvbiBpc01ham9yKHRpY2tWYWwpIHtcbiAgICBjb25zdCByZW1haW4gPSB0aWNrVmFsIC8gTWF0aC5wb3coMTAsIGxvZzEwRmxvb3IodGlja1ZhbCkpO1xuICAgIHJldHVybiByZW1haW4gPT09IDE7XG59XG5mdW5jdGlvbiBzdGVwcyhtaW4sIG1heCwgcmFuZ2VFeHApIHtcbiAgICBjb25zdCByYW5nZVN0ZXAgPSBNYXRoLnBvdygxMCwgcmFuZ2VFeHApO1xuICAgIGNvbnN0IHN0YXJ0ID0gTWF0aC5mbG9vcihtaW4gLyByYW5nZVN0ZXApO1xuICAgIGNvbnN0IGVuZCA9IE1hdGguY2VpbChtYXggLyByYW5nZVN0ZXApO1xuICAgIHJldHVybiBlbmQgLSBzdGFydDtcbn1cbmZ1bmN0aW9uIHN0YXJ0RXhwKG1pbiwgbWF4KSB7XG4gICAgY29uc3QgcmFuZ2UgPSBtYXggLSBtaW47XG4gICAgbGV0IHJhbmdlRXhwID0gbG9nMTBGbG9vcihyYW5nZSk7XG4gICAgd2hpbGUoc3RlcHMobWluLCBtYXgsIHJhbmdlRXhwKSA+IDEwKXtcbiAgICAgICAgcmFuZ2VFeHArKztcbiAgICB9XG4gICAgd2hpbGUoc3RlcHMobWluLCBtYXgsIHJhbmdlRXhwKSA8IDEwKXtcbiAgICAgICAgcmFuZ2VFeHAtLTtcbiAgICB9XG4gICAgcmV0dXJuIE1hdGgubWluKHJhbmdlRXhwLCBsb2cxMEZsb29yKG1pbikpO1xufVxuIGZ1bmN0aW9uIGdlbmVyYXRlVGlja3MoZ2VuZXJhdGlvbk9wdGlvbnMsIHsgbWluICwgbWF4ICB9KSB7XG4gICAgbWluID0gZmluaXRlT3JEZWZhdWx0KGdlbmVyYXRpb25PcHRpb25zLm1pbiwgbWluKTtcbiAgICBjb25zdCB0aWNrcyA9IFtdO1xuICAgIGNvbnN0IG1pbkV4cCA9IGxvZzEwRmxvb3IobWluKTtcbiAgICBsZXQgZXhwID0gc3RhcnRFeHAobWluLCBtYXgpO1xuICAgIGxldCBwcmVjaXNpb24gPSBleHAgPCAwID8gTWF0aC5wb3coMTAsIE1hdGguYWJzKGV4cCkpIDogMTtcbiAgICBjb25zdCBzdGVwU2l6ZSA9IE1hdGgucG93KDEwLCBleHApO1xuICAgIGNvbnN0IGJhc2UgPSBtaW5FeHAgPiBleHAgPyBNYXRoLnBvdygxMCwgbWluRXhwKSA6IDA7XG4gICAgY29uc3Qgc3RhcnQgPSBNYXRoLnJvdW5kKChtaW4gLSBiYXNlKSAqIHByZWNpc2lvbikgLyBwcmVjaXNpb247XG4gICAgY29uc3Qgb2Zmc2V0ID0gTWF0aC5mbG9vcigobWluIC0gYmFzZSkgLyBzdGVwU2l6ZSAvIDEwKSAqIHN0ZXBTaXplICogMTA7XG4gICAgbGV0IHNpZ25pZmljYW5kID0gTWF0aC5mbG9vcigoc3RhcnQgLSBvZmZzZXQpIC8gTWF0aC5wb3coMTAsIGV4cCkpO1xuICAgIGxldCB2YWx1ZSA9IGZpbml0ZU9yRGVmYXVsdChnZW5lcmF0aW9uT3B0aW9ucy5taW4sIE1hdGgucm91bmQoKGJhc2UgKyBvZmZzZXQgKyBzaWduaWZpY2FuZCAqIE1hdGgucG93KDEwLCBleHApKSAqIHByZWNpc2lvbikgLyBwcmVjaXNpb24pO1xuICAgIHdoaWxlKHZhbHVlIDwgbWF4KXtcbiAgICAgICAgdGlja3MucHVzaCh7XG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIG1ham9yOiBpc01ham9yKHZhbHVlKSxcbiAgICAgICAgICAgIHNpZ25pZmljYW5kXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoc2lnbmlmaWNhbmQgPj0gMTApIHtcbiAgICAgICAgICAgIHNpZ25pZmljYW5kID0gc2lnbmlmaWNhbmQgPCAxNSA/IDE1IDogMjA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzaWduaWZpY2FuZCsrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaWduaWZpY2FuZCA+PSAyMCkge1xuICAgICAgICAgICAgZXhwKys7XG4gICAgICAgICAgICBzaWduaWZpY2FuZCA9IDI7XG4gICAgICAgICAgICBwcmVjaXNpb24gPSBleHAgPj0gMCA/IDEgOiBwcmVjaXNpb247XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgPSBNYXRoLnJvdW5kKChiYXNlICsgb2Zmc2V0ICsgc2lnbmlmaWNhbmQgKiBNYXRoLnBvdygxMCwgZXhwKSkgKiBwcmVjaXNpb24pIC8gcHJlY2lzaW9uO1xuICAgIH1cbiAgICBjb25zdCBsYXN0VGljayA9IGZpbml0ZU9yRGVmYXVsdChnZW5lcmF0aW9uT3B0aW9ucy5tYXgsIHZhbHVlKTtcbiAgICB0aWNrcy5wdXNoKHtcbiAgICAgICAgdmFsdWU6IGxhc3RUaWNrLFxuICAgICAgICBtYWpvcjogaXNNYWpvcihsYXN0VGljayksXG4gICAgICAgIHNpZ25pZmljYW5kXG4gICAgfSk7XG4gICAgcmV0dXJuIHRpY2tzO1xufVxuY2xhc3MgTG9nYXJpdGhtaWNTY2FsZSBleHRlbmRzIFNjYWxlIHtcbiAgICBzdGF0aWMgaWQgPSAnbG9nYXJpdGhtaWMnO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgIGNhbGxiYWNrOiBUaWNrcy5mb3JtYXR0ZXJzLmxvZ2FyaXRobWljLFxuICAgICAgICAgICAgbWFqb3I6IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKGNmZyl7XG4gICAgICAgIHN1cGVyKGNmZyk7XG4gICAgICAgICB0aGlzLnN0YXJ0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5lbmQgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLl9zdGFydFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl92YWx1ZVJhbmdlID0gMDtcbiAgICB9XG4gICAgcGFyc2UocmF3LCBpbmRleCkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IExpbmVhclNjYWxlQmFzZS5wcm90b3R5cGUucGFyc2UuYXBwbHkodGhpcywgW1xuICAgICAgICAgICAgcmF3LFxuICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgXSk7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5femVybyA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc051bWJlckZpbml0ZSh2YWx1ZSkgJiYgdmFsdWUgPiAwID8gdmFsdWUgOiBudWxsO1xuICAgIH1cbiAgICBkZXRlcm1pbmVEYXRhTGltaXRzKCkge1xuICAgICAgICBjb25zdCB7IG1pbiAsIG1heCAgfSA9IHRoaXMuZ2V0TWluTWF4KHRydWUpO1xuICAgICAgICB0aGlzLm1pbiA9IGlzTnVtYmVyRmluaXRlKG1pbikgPyBNYXRoLm1heCgwLCBtaW4pIDogbnVsbDtcbiAgICAgICAgdGhpcy5tYXggPSBpc051bWJlckZpbml0ZShtYXgpID8gTWF0aC5tYXgoMCwgbWF4KSA6IG51bGw7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYmVnaW5BdFplcm8pIHtcbiAgICAgICAgICAgIHRoaXMuX3plcm8gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl96ZXJvICYmIHRoaXMubWluICE9PSB0aGlzLl9zdWdnZXN0ZWRNaW4gJiYgIWlzTnVtYmVyRmluaXRlKHRoaXMuX3VzZXJNaW4pKSB7XG4gICAgICAgICAgICB0aGlzLm1pbiA9IG1pbiA9PT0gY2hhbmdlRXhwb25lbnQodGhpcy5taW4sIDApID8gY2hhbmdlRXhwb25lbnQodGhpcy5taW4sIC0xKSA6IGNoYW5nZUV4cG9uZW50KHRoaXMubWluLCAwKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmhhbmRsZVRpY2tSYW5nZU9wdGlvbnMoKTtcbiAgICB9XG4gICAgaGFuZGxlVGlja1JhbmdlT3B0aW9ucygpIHtcbiAgICAgICAgY29uc3QgeyBtaW5EZWZpbmVkICwgbWF4RGVmaW5lZCAgfSA9IHRoaXMuZ2V0VXNlckJvdW5kcygpO1xuICAgICAgICBsZXQgbWluID0gdGhpcy5taW47XG4gICAgICAgIGxldCBtYXggPSB0aGlzLm1heDtcbiAgICAgICAgY29uc3Qgc2V0TWluID0gKHYpPT5taW4gPSBtaW5EZWZpbmVkID8gbWluIDogdjtcbiAgICAgICAgY29uc3Qgc2V0TWF4ID0gKHYpPT5tYXggPSBtYXhEZWZpbmVkID8gbWF4IDogdjtcbiAgICAgICAgaWYgKG1pbiA9PT0gbWF4KSB7XG4gICAgICAgICAgICBpZiAobWluIDw9IDApIHtcbiAgICAgICAgICAgICAgICBzZXRNaW4oMSk7XG4gICAgICAgICAgICAgICAgc2V0TWF4KDEwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2V0TWluKGNoYW5nZUV4cG9uZW50KG1pbiwgLTEpKTtcbiAgICAgICAgICAgICAgICBzZXRNYXgoY2hhbmdlRXhwb25lbnQobWF4LCArMSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChtaW4gPD0gMCkge1xuICAgICAgICAgICAgc2V0TWluKGNoYW5nZUV4cG9uZW50KG1heCwgLTEpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF4IDw9IDApIHtcbiAgICAgICAgICAgIHNldE1heChjaGFuZ2VFeHBvbmVudChtaW4sICsxKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5taW4gPSBtaW47XG4gICAgICAgIHRoaXMubWF4ID0gbWF4O1xuICAgIH1cbiAgICBidWlsZFRpY2tzKCkge1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBnZW5lcmF0aW9uT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIG1pbjogdGhpcy5fdXNlck1pbixcbiAgICAgICAgICAgIG1heDogdGhpcy5fdXNlck1heFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCB0aWNrcyA9IGdlbmVyYXRlVGlja3MoZ2VuZXJhdGlvbk9wdGlvbnMsIHRoaXMpO1xuICAgICAgICBpZiAob3B0cy5ib3VuZHMgPT09ICd0aWNrcycpIHtcbiAgICAgICAgICAgIF9zZXRNaW5BbmRNYXhCeUtleSh0aWNrcywgdGhpcywgJ3ZhbHVlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdHMucmV2ZXJzZSkge1xuICAgICAgICAgICAgdGlja3MucmV2ZXJzZSgpO1xuICAgICAgICAgICAgdGhpcy5zdGFydCA9IHRoaXMubWF4O1xuICAgICAgICAgICAgdGhpcy5lbmQgPSB0aGlzLm1pbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnQgPSB0aGlzLm1pbjtcbiAgICAgICAgICAgIHRoaXMuZW5kID0gdGhpcy5tYXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRpY2tzO1xuICAgIH1cbiBnZXRMYWJlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gJzAnIDogZm9ybWF0TnVtYmVyKHZhbHVlLCB0aGlzLmNoYXJ0Lm9wdGlvbnMubG9jYWxlLCB0aGlzLm9wdGlvbnMudGlja3MuZm9ybWF0KTtcbiAgICB9XG4gY29uZmlndXJlKCkge1xuICAgICAgICBjb25zdCBzdGFydCA9IHRoaXMubWluO1xuICAgICAgICBzdXBlci5jb25maWd1cmUoKTtcbiAgICAgICAgdGhpcy5fc3RhcnRWYWx1ZSA9IGxvZzEwKHN0YXJ0KTtcbiAgICAgICAgdGhpcy5fdmFsdWVSYW5nZSA9IGxvZzEwKHRoaXMubWF4KSAtIGxvZzEwKHN0YXJ0KTtcbiAgICB9XG4gICAgZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gMCkge1xuICAgICAgICAgICAgdmFsdWUgPSB0aGlzLm1pbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgaXNOYU4odmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBpeGVsRm9yRGVjaW1hbCh2YWx1ZSA9PT0gdGhpcy5taW4gPyAwIDogKGxvZzEwKHZhbHVlKSAtIHRoaXMuX3N0YXJ0VmFsdWUpIC8gdGhpcy5fdmFsdWVSYW5nZSk7XG4gICAgfVxuICAgIGdldFZhbHVlRm9yUGl4ZWwocGl4ZWwpIHtcbiAgICAgICAgY29uc3QgZGVjaW1hbCA9IHRoaXMuZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKTtcbiAgICAgICAgcmV0dXJuIE1hdGgucG93KDEwLCB0aGlzLl9zdGFydFZhbHVlICsgZGVjaW1hbCAqIHRoaXMuX3ZhbHVlUmFuZ2UpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0VGlja0JhY2tkcm9wSGVpZ2h0KG9wdHMpIHtcbiAgICBjb25zdCB0aWNrT3B0cyA9IG9wdHMudGlja3M7XG4gICAgaWYgKHRpY2tPcHRzLmRpc3BsYXkgJiYgb3B0cy5kaXNwbGF5KSB7XG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcodGlja09wdHMuYmFja2Ryb3BQYWRkaW5nKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlT3JEZWZhdWx0KHRpY2tPcHRzLmZvbnQgJiYgdGlja09wdHMuZm9udC5zaXplLCBkZWZhdWx0cy5mb250LnNpemUpICsgcGFkZGluZy5oZWlnaHQ7XG4gICAgfVxuICAgIHJldHVybiAwO1xufVxuZnVuY3Rpb24gbWVhc3VyZUxhYmVsU2l6ZShjdHgsIGZvbnQsIGxhYmVsKSB7XG4gICAgbGFiZWwgPSBpc0FycmF5KGxhYmVsKSA/IGxhYmVsIDogW1xuICAgICAgICBsYWJlbFxuICAgIF07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdzogX2xvbmdlc3RUZXh0KGN0eCwgZm9udC5zdHJpbmcsIGxhYmVsKSxcbiAgICAgICAgaDogbGFiZWwubGVuZ3RoICogZm9udC5saW5lSGVpZ2h0XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGRldGVybWluZUxpbWl0cyhhbmdsZSwgcG9zLCBzaXplLCBtaW4sIG1heCkge1xuICAgIGlmIChhbmdsZSA9PT0gbWluIHx8IGFuZ2xlID09PSBtYXgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXJ0OiBwb3MgLSBzaXplIC8gMixcbiAgICAgICAgICAgIGVuZDogcG9zICsgc2l6ZSAvIDJcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGFuZ2xlIDwgbWluIHx8IGFuZ2xlID4gbWF4KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGFydDogcG9zIC0gc2l6ZSxcbiAgICAgICAgICAgIGVuZDogcG9zXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0OiBwb3MsXG4gICAgICAgIGVuZDogcG9zICsgc2l6ZVxuICAgIH07XG59XG4gZnVuY3Rpb24gZml0V2l0aFBvaW50TGFiZWxzKHNjYWxlKSB7XG4gICAgY29uc3Qgb3JpZyA9IHtcbiAgICAgICAgbDogc2NhbGUubGVmdCArIHNjYWxlLl9wYWRkaW5nLmxlZnQsXG4gICAgICAgIHI6IHNjYWxlLnJpZ2h0IC0gc2NhbGUuX3BhZGRpbmcucmlnaHQsXG4gICAgICAgIHQ6IHNjYWxlLnRvcCArIHNjYWxlLl9wYWRkaW5nLnRvcCxcbiAgICAgICAgYjogc2NhbGUuYm90dG9tIC0gc2NhbGUuX3BhZGRpbmcuYm90dG9tXG4gICAgfTtcbiAgICBjb25zdCBsaW1pdHMgPSBPYmplY3QuYXNzaWduKHt9LCBvcmlnKTtcbiAgICBjb25zdCBsYWJlbFNpemVzID0gW107XG4gICAgY29uc3QgcGFkZGluZyA9IFtdO1xuICAgIGNvbnN0IHZhbHVlQ291bnQgPSBzY2FsZS5fcG9pbnRMYWJlbHMubGVuZ3RoO1xuICAgIGNvbnN0IHBvaW50TGFiZWxPcHRzID0gc2NhbGUub3B0aW9ucy5wb2ludExhYmVscztcbiAgICBjb25zdCBhZGRpdGlvbmFsQW5nbGUgPSBwb2ludExhYmVsT3B0cy5jZW50ZXJQb2ludExhYmVscyA/IFBJIC8gdmFsdWVDb3VudCA6IDA7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHZhbHVlQ291bnQ7IGkrKyl7XG4gICAgICAgIGNvbnN0IG9wdHMgPSBwb2ludExhYmVsT3B0cy5zZXRDb250ZXh0KHNjYWxlLmdldFBvaW50TGFiZWxDb250ZXh0KGkpKTtcbiAgICAgICAgcGFkZGluZ1tpXSA9IG9wdHMucGFkZGluZztcbiAgICAgICAgY29uc3QgcG9pbnRQb3NpdGlvbiA9IHNjYWxlLmdldFBvaW50UG9zaXRpb24oaSwgc2NhbGUuZHJhd2luZ0FyZWEgKyBwYWRkaW5nW2ldLCBhZGRpdGlvbmFsQW5nbGUpO1xuICAgICAgICBjb25zdCBwbEZvbnQgPSB0b0ZvbnQob3B0cy5mb250KTtcbiAgICAgICAgY29uc3QgdGV4dFNpemUgPSBtZWFzdXJlTGFiZWxTaXplKHNjYWxlLmN0eCwgcGxGb250LCBzY2FsZS5fcG9pbnRMYWJlbHNbaV0pO1xuICAgICAgICBsYWJlbFNpemVzW2ldID0gdGV4dFNpemU7XG4gICAgICAgIGNvbnN0IGFuZ2xlUmFkaWFucyA9IF9ub3JtYWxpemVBbmdsZShzY2FsZS5nZXRJbmRleEFuZ2xlKGkpICsgYWRkaXRpb25hbEFuZ2xlKTtcbiAgICAgICAgY29uc3QgYW5nbGUgPSBNYXRoLnJvdW5kKHRvRGVncmVlcyhhbmdsZVJhZGlhbnMpKTtcbiAgICAgICAgY29uc3QgaExpbWl0cyA9IGRldGVybWluZUxpbWl0cyhhbmdsZSwgcG9pbnRQb3NpdGlvbi54LCB0ZXh0U2l6ZS53LCAwLCAxODApO1xuICAgICAgICBjb25zdCB2TGltaXRzID0gZGV0ZXJtaW5lTGltaXRzKGFuZ2xlLCBwb2ludFBvc2l0aW9uLnksIHRleHRTaXplLmgsIDkwLCAyNzApO1xuICAgICAgICB1cGRhdGVMaW1pdHMobGltaXRzLCBvcmlnLCBhbmdsZVJhZGlhbnMsIGhMaW1pdHMsIHZMaW1pdHMpO1xuICAgIH1cbiAgICBzY2FsZS5zZXRDZW50ZXJQb2ludChvcmlnLmwgLSBsaW1pdHMubCwgbGltaXRzLnIgLSBvcmlnLnIsIG9yaWcudCAtIGxpbWl0cy50LCBsaW1pdHMuYiAtIG9yaWcuYik7XG4gICAgc2NhbGUuX3BvaW50TGFiZWxJdGVtcyA9IGJ1aWxkUG9pbnRMYWJlbEl0ZW1zKHNjYWxlLCBsYWJlbFNpemVzLCBwYWRkaW5nKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUxpbWl0cyhsaW1pdHMsIG9yaWcsIGFuZ2xlLCBoTGltaXRzLCB2TGltaXRzKSB7XG4gICAgY29uc3Qgc2luID0gTWF0aC5hYnMoTWF0aC5zaW4oYW5nbGUpKTtcbiAgICBjb25zdCBjb3MgPSBNYXRoLmFicyhNYXRoLmNvcyhhbmdsZSkpO1xuICAgIGxldCB4ID0gMDtcbiAgICBsZXQgeSA9IDA7XG4gICAgaWYgKGhMaW1pdHMuc3RhcnQgPCBvcmlnLmwpIHtcbiAgICAgICAgeCA9IChvcmlnLmwgLSBoTGltaXRzLnN0YXJ0KSAvIHNpbjtcbiAgICAgICAgbGltaXRzLmwgPSBNYXRoLm1pbihsaW1pdHMubCwgb3JpZy5sIC0geCk7XG4gICAgfSBlbHNlIGlmIChoTGltaXRzLmVuZCA+IG9yaWcucikge1xuICAgICAgICB4ID0gKGhMaW1pdHMuZW5kIC0gb3JpZy5yKSAvIHNpbjtcbiAgICAgICAgbGltaXRzLnIgPSBNYXRoLm1heChsaW1pdHMuciwgb3JpZy5yICsgeCk7XG4gICAgfVxuICAgIGlmICh2TGltaXRzLnN0YXJ0IDwgb3JpZy50KSB7XG4gICAgICAgIHkgPSAob3JpZy50IC0gdkxpbWl0cy5zdGFydCkgLyBjb3M7XG4gICAgICAgIGxpbWl0cy50ID0gTWF0aC5taW4obGltaXRzLnQsIG9yaWcudCAtIHkpO1xuICAgIH0gZWxzZSBpZiAodkxpbWl0cy5lbmQgPiBvcmlnLmIpIHtcbiAgICAgICAgeSA9ICh2TGltaXRzLmVuZCAtIG9yaWcuYikgLyBjb3M7XG4gICAgICAgIGxpbWl0cy5iID0gTWF0aC5tYXgobGltaXRzLmIsIG9yaWcuYiArIHkpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZVBvaW50TGFiZWxJdGVtKHNjYWxlLCBpbmRleCwgaXRlbU9wdHMpIHtcbiAgICBjb25zdCBvdXRlckRpc3RhbmNlID0gc2NhbGUuZHJhd2luZ0FyZWE7XG4gICAgY29uc3QgeyBleHRyYSAsIGFkZGl0aW9uYWxBbmdsZSAsIHBhZGRpbmcgLCBzaXplICB9ID0gaXRlbU9wdHM7XG4gICAgY29uc3QgcG9pbnRMYWJlbFBvc2l0aW9uID0gc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbihpbmRleCwgb3V0ZXJEaXN0YW5jZSArIGV4dHJhICsgcGFkZGluZywgYWRkaXRpb25hbEFuZ2xlKTtcbiAgICBjb25zdCBhbmdsZSA9IE1hdGgucm91bmQodG9EZWdyZWVzKF9ub3JtYWxpemVBbmdsZShwb2ludExhYmVsUG9zaXRpb24uYW5nbGUgKyBIQUxGX1BJKSkpO1xuICAgIGNvbnN0IHkgPSB5Rm9yQW5nbGUocG9pbnRMYWJlbFBvc2l0aW9uLnksIHNpemUuaCwgYW5nbGUpO1xuICAgIGNvbnN0IHRleHRBbGlnbiA9IGdldFRleHRBbGlnbkZvckFuZ2xlKGFuZ2xlKTtcbiAgICBjb25zdCBsZWZ0ID0gbGVmdEZvclRleHRBbGlnbihwb2ludExhYmVsUG9zaXRpb24ueCwgc2l6ZS53LCB0ZXh0QWxpZ24pO1xuICAgIHJldHVybiB7XG4gICAgICAgIHZpc2libGU6IHRydWUsXG4gICAgICAgIHg6IHBvaW50TGFiZWxQb3NpdGlvbi54LFxuICAgICAgICB5LFxuICAgICAgICB0ZXh0QWxpZ24sXG4gICAgICAgIGxlZnQsXG4gICAgICAgIHRvcDogeSxcbiAgICAgICAgcmlnaHQ6IGxlZnQgKyBzaXplLncsXG4gICAgICAgIGJvdHRvbTogeSArIHNpemUuaFxuICAgIH07XG59XG5mdW5jdGlvbiBpc05vdE92ZXJsYXBwZWQoaXRlbSwgYXJlYSkge1xuICAgIGlmICghYXJlYSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgeyBsZWZ0ICwgdG9wICwgcmlnaHQgLCBib3R0b20gIH0gPSBpdGVtO1xuICAgIGNvbnN0IGFwZXhlc0luQXJlYSA9IF9pc1BvaW50SW5BcmVhKHtcbiAgICAgICAgeDogbGVmdCxcbiAgICAgICAgeTogdG9wXG4gICAgfSwgYXJlYSkgfHwgX2lzUG9pbnRJbkFyZWEoe1xuICAgICAgICB4OiBsZWZ0LFxuICAgICAgICB5OiBib3R0b21cbiAgICB9LCBhcmVhKSB8fCBfaXNQb2ludEluQXJlYSh7XG4gICAgICAgIHg6IHJpZ2h0LFxuICAgICAgICB5OiB0b3BcbiAgICB9LCBhcmVhKSB8fCBfaXNQb2ludEluQXJlYSh7XG4gICAgICAgIHg6IHJpZ2h0LFxuICAgICAgICB5OiBib3R0b21cbiAgICB9LCBhcmVhKTtcbiAgICByZXR1cm4gIWFwZXhlc0luQXJlYTtcbn1cbmZ1bmN0aW9uIGJ1aWxkUG9pbnRMYWJlbEl0ZW1zKHNjYWxlLCBsYWJlbFNpemVzLCBwYWRkaW5nKSB7XG4gICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICBjb25zdCB2YWx1ZUNvdW50ID0gc2NhbGUuX3BvaW50TGFiZWxzLmxlbmd0aDtcbiAgICBjb25zdCBvcHRzID0gc2NhbGUub3B0aW9ucztcbiAgICBjb25zdCB7IGNlbnRlclBvaW50TGFiZWxzICwgZGlzcGxheSAgfSA9IG9wdHMucG9pbnRMYWJlbHM7XG4gICAgY29uc3QgaXRlbU9wdHMgPSB7XG4gICAgICAgIGV4dHJhOiBnZXRUaWNrQmFja2Ryb3BIZWlnaHQob3B0cykgLyAyLFxuICAgICAgICBhZGRpdGlvbmFsQW5nbGU6IGNlbnRlclBvaW50TGFiZWxzID8gUEkgLyB2YWx1ZUNvdW50IDogMFxuICAgIH07XG4gICAgbGV0IGFyZWE7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHZhbHVlQ291bnQ7IGkrKyl7XG4gICAgICAgIGl0ZW1PcHRzLnBhZGRpbmcgPSBwYWRkaW5nW2ldO1xuICAgICAgICBpdGVtT3B0cy5zaXplID0gbGFiZWxTaXplc1tpXTtcbiAgICAgICAgY29uc3QgaXRlbSA9IGNyZWF0ZVBvaW50TGFiZWxJdGVtKHNjYWxlLCBpLCBpdGVtT3B0cyk7XG4gICAgICAgIGl0ZW1zLnB1c2goaXRlbSk7XG4gICAgICAgIGlmIChkaXNwbGF5ID09PSAnYXV0bycpIHtcbiAgICAgICAgICAgIGl0ZW0udmlzaWJsZSA9IGlzTm90T3ZlcmxhcHBlZChpdGVtLCBhcmVhKTtcbiAgICAgICAgICAgIGlmIChpdGVtLnZpc2libGUpIHtcbiAgICAgICAgICAgICAgICBhcmVhID0gaXRlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaXRlbXM7XG59XG5mdW5jdGlvbiBnZXRUZXh0QWxpZ25Gb3JBbmdsZShhbmdsZSkge1xuICAgIGlmIChhbmdsZSA9PT0gMCB8fCBhbmdsZSA9PT0gMTgwKSB7XG4gICAgICAgIHJldHVybiAnY2VudGVyJztcbiAgICB9IGVsc2UgaWYgKGFuZ2xlIDwgMTgwKSB7XG4gICAgICAgIHJldHVybiAnbGVmdCc7XG4gICAgfVxuICAgIHJldHVybiAncmlnaHQnO1xufVxuZnVuY3Rpb24gbGVmdEZvclRleHRBbGlnbih4LCB3LCBhbGlnbikge1xuICAgIGlmIChhbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICB4IC09IHc7XG4gICAgfSBlbHNlIGlmIChhbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgeCAtPSB3IC8gMjtcbiAgICB9XG4gICAgcmV0dXJuIHg7XG59XG5mdW5jdGlvbiB5Rm9yQW5nbGUoeSwgaCwgYW5nbGUpIHtcbiAgICBpZiAoYW5nbGUgPT09IDkwIHx8IGFuZ2xlID09PSAyNzApIHtcbiAgICAgICAgeSAtPSBoIC8gMjtcbiAgICB9IGVsc2UgaWYgKGFuZ2xlID4gMjcwIHx8IGFuZ2xlIDwgOTApIHtcbiAgICAgICAgeSAtPSBoO1xuICAgIH1cbiAgICByZXR1cm4geTtcbn1cbmZ1bmN0aW9uIGRyYXdQb2ludExhYmVsQm94KGN0eCwgb3B0cywgaXRlbSkge1xuICAgIGNvbnN0IHsgbGVmdCAsIHRvcCAsIHJpZ2h0ICwgYm90dG9tICB9ID0gaXRlbTtcbiAgICBjb25zdCB7IGJhY2tkcm9wQ29sb3IgIH0gPSBvcHRzO1xuICAgIGlmICghaXNOdWxsT3JVbmRlZihiYWNrZHJvcENvbG9yKSkge1xuICAgICAgICBjb25zdCBib3JkZXJSYWRpdXMgPSB0b1RSQkxDb3JuZXJzKG9wdHMuYm9yZGVyUmFkaXVzKTtcbiAgICAgICAgY29uc3QgcGFkZGluZyA9IHRvUGFkZGluZyhvcHRzLmJhY2tkcm9wUGFkZGluZyk7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBiYWNrZHJvcENvbG9yO1xuICAgICAgICBjb25zdCBiYWNrZHJvcExlZnQgPSBsZWZ0IC0gcGFkZGluZy5sZWZ0O1xuICAgICAgICBjb25zdCBiYWNrZHJvcFRvcCA9IHRvcCAtIHBhZGRpbmcudG9wO1xuICAgICAgICBjb25zdCBiYWNrZHJvcFdpZHRoID0gcmlnaHQgLSBsZWZ0ICsgcGFkZGluZy53aWR0aDtcbiAgICAgICAgY29uc3QgYmFja2Ryb3BIZWlnaHQgPSBib3R0b20gLSB0b3AgKyBwYWRkaW5nLmhlaWdodDtcbiAgICAgICAgaWYgKE9iamVjdC52YWx1ZXMoYm9yZGVyUmFkaXVzKS5zb21lKCh2KT0+diAhPT0gMCkpIHtcbiAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIGFkZFJvdW5kZWRSZWN0UGF0aChjdHgsIHtcbiAgICAgICAgICAgICAgICB4OiBiYWNrZHJvcExlZnQsXG4gICAgICAgICAgICAgICAgeTogYmFja2Ryb3BUb3AsXG4gICAgICAgICAgICAgICAgdzogYmFja2Ryb3BXaWR0aCxcbiAgICAgICAgICAgICAgICBoOiBiYWNrZHJvcEhlaWdodCxcbiAgICAgICAgICAgICAgICByYWRpdXM6IGJvcmRlclJhZGl1c1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KGJhY2tkcm9wTGVmdCwgYmFja2Ryb3BUb3AsIGJhY2tkcm9wV2lkdGgsIGJhY2tkcm9wSGVpZ2h0KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGRyYXdQb2ludExhYmVscyhzY2FsZSwgbGFiZWxDb3VudCkge1xuICAgIGNvbnN0IHsgY3R4ICwgb3B0aW9uczogeyBwb2ludExhYmVscyAgfSAgfSA9IHNjYWxlO1xuICAgIGZvcihsZXQgaSA9IGxhYmVsQ291bnQgLSAxOyBpID49IDA7IGktLSl7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBzY2FsZS5fcG9pbnRMYWJlbEl0ZW1zW2ldO1xuICAgICAgICBpZiAoIWl0ZW0udmlzaWJsZSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3B0c0F0SW5kZXggPSBwb2ludExhYmVscy5zZXRDb250ZXh0KHNjYWxlLmdldFBvaW50TGFiZWxDb250ZXh0KGkpKTtcbiAgICAgICAgZHJhd1BvaW50TGFiZWxCb3goY3R4LCBvcHRzQXRJbmRleCwgaXRlbSk7XG4gICAgICAgIGNvbnN0IHBsRm9udCA9IHRvRm9udChvcHRzQXRJbmRleC5mb250KTtcbiAgICAgICAgY29uc3QgeyB4ICwgeSAsIHRleHRBbGlnbiAgfSA9IGl0ZW07XG4gICAgICAgIHJlbmRlclRleHQoY3R4LCBzY2FsZS5fcG9pbnRMYWJlbHNbaV0sIHgsIHkgKyBwbEZvbnQubGluZUhlaWdodCAvIDIsIHBsRm9udCwge1xuICAgICAgICAgICAgY29sb3I6IG9wdHNBdEluZGV4LmNvbG9yLFxuICAgICAgICAgICAgdGV4dEFsaWduOiB0ZXh0QWxpZ24sXG4gICAgICAgICAgICB0ZXh0QmFzZWxpbmU6ICdtaWRkbGUnXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHBhdGhSYWRpdXNMaW5lKHNjYWxlLCByYWRpdXMsIGNpcmN1bGFyLCBsYWJlbENvdW50KSB7XG4gICAgY29uc3QgeyBjdHggIH0gPSBzY2FsZTtcbiAgICBpZiAoY2lyY3VsYXIpIHtcbiAgICAgICAgY3R4LmFyYyhzY2FsZS54Q2VudGVyLCBzY2FsZS55Q2VudGVyLCByYWRpdXMsIDAsIFRBVSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHBvaW50UG9zaXRpb24gPSBzY2FsZS5nZXRQb2ludFBvc2l0aW9uKDAsIHJhZGl1cyk7XG4gICAgICAgIGN0eC5tb3ZlVG8ocG9pbnRQb3NpdGlvbi54LCBwb2ludFBvc2l0aW9uLnkpO1xuICAgICAgICBmb3IobGV0IGkgPSAxOyBpIDwgbGFiZWxDb3VudDsgaSsrKXtcbiAgICAgICAgICAgIHBvaW50UG9zaXRpb24gPSBzY2FsZS5nZXRQb2ludFBvc2l0aW9uKGksIHJhZGl1cyk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHBvaW50UG9zaXRpb24ueCwgcG9pbnRQb3NpdGlvbi55KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGRyYXdSYWRpdXNMaW5lKHNjYWxlLCBncmlkTGluZU9wdHMsIHJhZGl1cywgbGFiZWxDb3VudCwgYm9yZGVyT3B0cykge1xuICAgIGNvbnN0IGN0eCA9IHNjYWxlLmN0eDtcbiAgICBjb25zdCBjaXJjdWxhciA9IGdyaWRMaW5lT3B0cy5jaXJjdWxhcjtcbiAgICBjb25zdCB7IGNvbG9yICwgbGluZVdpZHRoICB9ID0gZ3JpZExpbmVPcHRzO1xuICAgIGlmICghY2lyY3VsYXIgJiYgIWxhYmVsQ291bnQgfHwgIWNvbG9yIHx8ICFsaW5lV2lkdGggfHwgcmFkaXVzIDwgMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGN0eC5zYXZlKCk7XG4gICAgY3R4LnN0cm9rZVN0eWxlID0gY29sb3I7XG4gICAgY3R4LmxpbmVXaWR0aCA9IGxpbmVXaWR0aDtcbiAgICBjdHguc2V0TGluZURhc2goYm9yZGVyT3B0cy5kYXNoKTtcbiAgICBjdHgubGluZURhc2hPZmZzZXQgPSBib3JkZXJPcHRzLmRhc2hPZmZzZXQ7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIHBhdGhSYWRpdXNMaW5lKHNjYWxlLCByYWRpdXMsIGNpcmN1bGFyLCBsYWJlbENvdW50KTtcbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgY3R4LnN0cm9rZSgpO1xuICAgIGN0eC5yZXN0b3JlKCk7XG59XG5mdW5jdGlvbiBjcmVhdGVQb2ludExhYmVsQ29udGV4dChwYXJlbnQsIGluZGV4LCBsYWJlbCkge1xuICAgIHJldHVybiBjcmVhdGVDb250ZXh0KHBhcmVudCwge1xuICAgICAgICBsYWJlbCxcbiAgICAgICAgaW5kZXgsXG4gICAgICAgIHR5cGU6ICdwb2ludExhYmVsJ1xuICAgIH0pO1xufVxuY2xhc3MgUmFkaWFsTGluZWFyU2NhbGUgZXh0ZW5kcyBMaW5lYXJTY2FsZUJhc2Uge1xuICAgIHN0YXRpYyBpZCA9ICdyYWRpYWxMaW5lYXInO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgYW5pbWF0ZTogdHJ1ZSxcbiAgICAgICAgcG9zaXRpb246ICdjaGFydEFyZWEnLFxuICAgICAgICBhbmdsZUxpbmVzOiB7XG4gICAgICAgICAgICBkaXNwbGF5OiB0cnVlLFxuICAgICAgICAgICAgbGluZVdpZHRoOiAxLFxuICAgICAgICAgICAgYm9yZGVyRGFzaDogW10sXG4gICAgICAgICAgICBib3JkZXJEYXNoT2Zmc2V0OiAwLjBcbiAgICAgICAgfSxcbiAgICAgICAgZ3JpZDoge1xuICAgICAgICAgICAgY2lyY3VsYXI6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHN0YXJ0QW5nbGU6IDAsXG4gICAgICAgIHRpY2tzOiB7XG4gICAgICAgICAgICBzaG93TGFiZWxCYWNrZHJvcDogdHJ1ZSxcbiAgICAgICAgICAgIGNhbGxiYWNrOiBUaWNrcy5mb3JtYXR0ZXJzLm51bWVyaWNcbiAgICAgICAgfSxcbiAgICAgICAgcG9pbnRMYWJlbHM6IHtcbiAgICAgICAgICAgIGJhY2tkcm9wQ29sb3I6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGJhY2tkcm9wUGFkZGluZzogMixcbiAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgICAgICBmb250OiB7XG4gICAgICAgICAgICAgICAgc2l6ZTogMTBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYWxsYmFjayAobGFiZWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGFiZWw7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGFkZGluZzogNSxcbiAgICAgICAgICAgIGNlbnRlclBvaW50TGFiZWxzOiBmYWxzZVxuICAgICAgICB9XG4gICAgfTtcbiAgICBzdGF0aWMgZGVmYXVsdFJvdXRlcyA9IHtcbiAgICAgICAgJ2FuZ2xlTGluZXMuY29sb3InOiAnYm9yZGVyQ29sb3InLFxuICAgICAgICAncG9pbnRMYWJlbHMuY29sb3InOiAnY29sb3InLFxuICAgICAgICAndGlja3MuY29sb3InOiAnY29sb3InXG4gICAgfTtcbiAgICBzdGF0aWMgZGVzY3JpcHRvcnMgPSB7XG4gICAgICAgIGFuZ2xlTGluZXM6IHtcbiAgICAgICAgICAgIF9mYWxsYmFjazogJ2dyaWQnXG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKGNmZyl7XG4gICAgICAgIHN1cGVyKGNmZyk7XG4gICAgICAgICB0aGlzLnhDZW50ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLnlDZW50ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLmRyYXdpbmdBcmVhID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5fcG9pbnRMYWJlbHMgPSBbXTtcbiAgICAgICAgdGhpcy5fcG9pbnRMYWJlbEl0ZW1zID0gW107XG4gICAgfVxuICAgIHNldERpbWVuc2lvbnMoKSB7XG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSB0aGlzLl9wYWRkaW5nID0gdG9QYWRkaW5nKGdldFRpY2tCYWNrZHJvcEhlaWdodCh0aGlzLm9wdGlvbnMpIC8gMik7XG4gICAgICAgIGNvbnN0IHcgPSB0aGlzLndpZHRoID0gdGhpcy5tYXhXaWR0aCAtIHBhZGRpbmcud2lkdGg7XG4gICAgICAgIGNvbnN0IGggPSB0aGlzLmhlaWdodCA9IHRoaXMubWF4SGVpZ2h0IC0gcGFkZGluZy5oZWlnaHQ7XG4gICAgICAgIHRoaXMueENlbnRlciA9IE1hdGguZmxvb3IodGhpcy5sZWZ0ICsgdyAvIDIgKyBwYWRkaW5nLmxlZnQpO1xuICAgICAgICB0aGlzLnlDZW50ZXIgPSBNYXRoLmZsb29yKHRoaXMudG9wICsgaCAvIDIgKyBwYWRkaW5nLnRvcCk7XG4gICAgICAgIHRoaXMuZHJhd2luZ0FyZWEgPSBNYXRoLmZsb29yKE1hdGgubWluKHcsIGgpIC8gMik7XG4gICAgfVxuICAgIGRldGVybWluZURhdGFMaW1pdHMoKSB7XG4gICAgICAgIGNvbnN0IHsgbWluICwgbWF4ICB9ID0gdGhpcy5nZXRNaW5NYXgoZmFsc2UpO1xuICAgICAgICB0aGlzLm1pbiA9IGlzTnVtYmVyRmluaXRlKG1pbikgJiYgIWlzTmFOKG1pbikgPyBtaW4gOiAwO1xuICAgICAgICB0aGlzLm1heCA9IGlzTnVtYmVyRmluaXRlKG1heCkgJiYgIWlzTmFOKG1heCkgPyBtYXggOiAwO1xuICAgICAgICB0aGlzLmhhbmRsZVRpY2tSYW5nZU9wdGlvbnMoKTtcbiAgICB9XG4gY29tcHV0ZVRpY2tMaW1pdCgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguY2VpbCh0aGlzLmRyYXdpbmdBcmVhIC8gZ2V0VGlja0JhY2tkcm9wSGVpZ2h0KHRoaXMub3B0aW9ucykpO1xuICAgIH1cbiAgICBnZW5lcmF0ZVRpY2tMYWJlbHModGlja3MpIHtcbiAgICAgICAgTGluZWFyU2NhbGVCYXNlLnByb3RvdHlwZS5nZW5lcmF0ZVRpY2tMYWJlbHMuY2FsbCh0aGlzLCB0aWNrcyk7XG4gICAgICAgIHRoaXMuX3BvaW50TGFiZWxzID0gdGhpcy5nZXRMYWJlbHMoKS5tYXAoKHZhbHVlLCBpbmRleCk9PntcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gY2FsbGJhY2sodGhpcy5vcHRpb25zLnBvaW50TGFiZWxzLmNhbGxiYWNrLCBbXG4gICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgIF0sIHRoaXMpO1xuICAgICAgICAgICAgcmV0dXJuIGxhYmVsIHx8IGxhYmVsID09PSAwID8gbGFiZWwgOiAnJztcbiAgICAgICAgfSkuZmlsdGVyKCh2LCBpKT0+dGhpcy5jaGFydC5nZXREYXRhVmlzaWJpbGl0eShpKSk7XG4gICAgfVxuICAgIGZpdCgpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgaWYgKG9wdHMuZGlzcGxheSAmJiBvcHRzLnBvaW50TGFiZWxzLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIGZpdFdpdGhQb2ludExhYmVscyh0aGlzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q2VudGVyUG9pbnQoMCwgMCwgMCwgMCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0Q2VudGVyUG9pbnQobGVmdE1vdmVtZW50LCByaWdodE1vdmVtZW50LCB0b3BNb3ZlbWVudCwgYm90dG9tTW92ZW1lbnQpIHtcbiAgICAgICAgdGhpcy54Q2VudGVyICs9IE1hdGguZmxvb3IoKGxlZnRNb3ZlbWVudCAtIHJpZ2h0TW92ZW1lbnQpIC8gMik7XG4gICAgICAgIHRoaXMueUNlbnRlciArPSBNYXRoLmZsb29yKCh0b3BNb3ZlbWVudCAtIGJvdHRvbU1vdmVtZW50KSAvIDIpO1xuICAgICAgICB0aGlzLmRyYXdpbmdBcmVhIC09IE1hdGgubWluKHRoaXMuZHJhd2luZ0FyZWEgLyAyLCBNYXRoLm1heChsZWZ0TW92ZW1lbnQsIHJpZ2h0TW92ZW1lbnQsIHRvcE1vdmVtZW50LCBib3R0b21Nb3ZlbWVudCkpO1xuICAgIH1cbiAgICBnZXRJbmRleEFuZ2xlKGluZGV4KSB7XG4gICAgICAgIGNvbnN0IGFuZ2xlTXVsdGlwbGllciA9IFRBVSAvICh0aGlzLl9wb2ludExhYmVscy5sZW5ndGggfHwgMSk7XG4gICAgICAgIGNvbnN0IHN0YXJ0QW5nbGUgPSB0aGlzLm9wdGlvbnMuc3RhcnRBbmdsZSB8fCAwO1xuICAgICAgICByZXR1cm4gX25vcm1hbGl6ZUFuZ2xlKGluZGV4ICogYW5nbGVNdWx0aXBsaWVyICsgdG9SYWRpYW5zKHN0YXJ0QW5nbGUpKTtcbiAgICB9XG4gICAgZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUodmFsdWUpIHtcbiAgICAgICAgaWYgKGlzTnVsbE9yVW5kZWYodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNjYWxpbmdGYWN0b3IgPSB0aGlzLmRyYXdpbmdBcmVhIC8gKHRoaXMubWF4IC0gdGhpcy5taW4pO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJldmVyc2UpIHtcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5tYXggLSB2YWx1ZSkgKiBzY2FsaW5nRmFjdG9yO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAodmFsdWUgLSB0aGlzLm1pbikgKiBzY2FsaW5nRmFjdG9yO1xuICAgIH1cbiAgICBnZXRWYWx1ZUZvckRpc3RhbmNlRnJvbUNlbnRlcihkaXN0YW5jZSkge1xuICAgICAgICBpZiAoaXNOdWxsT3JVbmRlZihkaXN0YW5jZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2NhbGVkRGlzdGFuY2UgPSBkaXN0YW5jZSAvICh0aGlzLmRyYXdpbmdBcmVhIC8gKHRoaXMubWF4IC0gdGhpcy5taW4pKTtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5yZXZlcnNlID8gdGhpcy5tYXggLSBzY2FsZWREaXN0YW5jZSA6IHRoaXMubWluICsgc2NhbGVkRGlzdGFuY2U7XG4gICAgfVxuICAgIGdldFBvaW50TGFiZWxDb250ZXh0KGluZGV4KSB7XG4gICAgICAgIGNvbnN0IHBvaW50TGFiZWxzID0gdGhpcy5fcG9pbnRMYWJlbHMgfHwgW107XG4gICAgICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgcG9pbnRMYWJlbHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBwb2ludExhYmVsID0gcG9pbnRMYWJlbHNbaW5kZXhdO1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVBvaW50TGFiZWxDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpLCBpbmRleCwgcG9pbnRMYWJlbCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0UG9pbnRQb3NpdGlvbihpbmRleCwgZGlzdGFuY2VGcm9tQ2VudGVyLCBhZGRpdGlvbmFsQW5nbGUgPSAwKSB7XG4gICAgICAgIGNvbnN0IGFuZ2xlID0gdGhpcy5nZXRJbmRleEFuZ2xlKGluZGV4KSAtIEhBTEZfUEkgKyBhZGRpdGlvbmFsQW5nbGU7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiBNYXRoLmNvcyhhbmdsZSkgKiBkaXN0YW5jZUZyb21DZW50ZXIgKyB0aGlzLnhDZW50ZXIsXG4gICAgICAgICAgICB5OiBNYXRoLnNpbihhbmdsZSkgKiBkaXN0YW5jZUZyb21DZW50ZXIgKyB0aGlzLnlDZW50ZXIsXG4gICAgICAgICAgICBhbmdsZVxuICAgICAgICB9O1xuICAgIH1cbiAgICBnZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUoaW5kZXgsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBvaW50UG9zaXRpb24oaW5kZXgsIHRoaXMuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUodmFsdWUpKTtcbiAgICB9XG4gICAgZ2V0QmFzZVBvc2l0aW9uKGluZGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZShpbmRleCB8fCAwLCB0aGlzLmdldEJhc2VWYWx1ZSgpKTtcbiAgICB9XG4gICAgZ2V0UG9pbnRMYWJlbFBvc2l0aW9uKGluZGV4KSB7XG4gICAgICAgIGNvbnN0IHsgbGVmdCAsIHRvcCAsIHJpZ2h0ICwgYm90dG9tICB9ID0gdGhpcy5fcG9pbnRMYWJlbEl0ZW1zW2luZGV4XTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgICB0b3AsXG4gICAgICAgICAgICByaWdodCxcbiAgICAgICAgICAgIGJvdHRvbVxuICAgICAgICB9O1xuICAgIH1cbiBkcmF3QmFja2dyb3VuZCgpIHtcbiAgICAgICAgY29uc3QgeyBiYWNrZ3JvdW5kQ29sb3IgLCBncmlkOiB7IGNpcmN1bGFyICB9ICB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBpZiAoYmFja2dyb3VuZENvbG9yKSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBwYXRoUmFkaXVzTGluZSh0aGlzLCB0aGlzLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHRoaXMuX2VuZFZhbHVlKSwgY2lyY3VsYXIsIHRoaXMuX3BvaW50TGFiZWxzLmxlbmd0aCk7XG4gICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gYmFja2dyb3VuZENvbG9yO1xuICAgICAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gZHJhd0dyaWQoKSB7XG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCB7IGFuZ2xlTGluZXMgLCBncmlkICwgYm9yZGVyICB9ID0gb3B0cztcbiAgICAgICAgY29uc3QgbGFiZWxDb3VudCA9IHRoaXMuX3BvaW50TGFiZWxzLmxlbmd0aDtcbiAgICAgICAgbGV0IGksIG9mZnNldCwgcG9zaXRpb247XG4gICAgICAgIGlmIChvcHRzLnBvaW50TGFiZWxzLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIGRyYXdQb2ludExhYmVscyh0aGlzLCBsYWJlbENvdW50KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ3JpZC5kaXNwbGF5KSB7XG4gICAgICAgICAgICB0aGlzLnRpY2tzLmZvckVhY2goKHRpY2ssIGluZGV4KT0+e1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSB0aGlzLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHRpY2sudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5nZXRDb250ZXh0KGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3B0c0F0SW5kZXggPSBncmlkLnNldENvbnRleHQoY29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wdHNBdEluZGV4Qm9yZGVyID0gYm9yZGVyLnNldENvbnRleHQoY29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIGRyYXdSYWRpdXNMaW5lKHRoaXMsIG9wdHNBdEluZGV4LCBvZmZzZXQsIGxhYmVsQ291bnQsIG9wdHNBdEluZGV4Qm9yZGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYW5nbGVMaW5lcy5kaXNwbGF5KSB7XG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgZm9yKGkgPSBsYWJlbENvdW50IC0gMTsgaSA+PSAwOyBpLS0pe1xuICAgICAgICAgICAgICAgIGNvbnN0IG9wdHNBdEluZGV4ID0gYW5nbGVMaW5lcy5zZXRDb250ZXh0KHRoaXMuZ2V0UG9pbnRMYWJlbENvbnRleHQoaSkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgY29sb3IgLCBsaW5lV2lkdGggIH0gPSBvcHRzQXRJbmRleDtcbiAgICAgICAgICAgICAgICBpZiAoIWxpbmVXaWR0aCB8fCAhY29sb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN0eC5saW5lV2lkdGggPSBsaW5lV2lkdGg7XG4gICAgICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gY29sb3I7XG4gICAgICAgICAgICAgICAgY3R4LnNldExpbmVEYXNoKG9wdHNBdEluZGV4LmJvcmRlckRhc2gpO1xuICAgICAgICAgICAgICAgIGN0eC5saW5lRGFzaE9mZnNldCA9IG9wdHNBdEluZGV4LmJvcmRlckRhc2hPZmZzZXQ7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gdGhpcy5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZShvcHRzLnRpY2tzLnJldmVyc2UgPyB0aGlzLm1pbiA6IHRoaXMubWF4KTtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IHRoaXMuZ2V0UG9pbnRQb3NpdGlvbihpLCBvZmZzZXQpO1xuICAgICAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICBjdHgubW92ZVRvKHRoaXMueENlbnRlciwgdGhpcy55Q2VudGVyKTtcbiAgICAgICAgICAgICAgICBjdHgubGluZVRvKHBvc2l0aW9uLngsIHBvc2l0aW9uLnkpO1xuICAgICAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gZHJhd0JvcmRlcigpIHt9XG4gZHJhd0xhYmVscygpIHtcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHRpY2tPcHRzID0gb3B0cy50aWNrcztcbiAgICAgICAgaWYgKCF0aWNrT3B0cy5kaXNwbGF5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RhcnRBbmdsZSA9IHRoaXMuZ2V0SW5kZXhBbmdsZSgwKTtcbiAgICAgICAgbGV0IG9mZnNldCwgd2lkdGg7XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIGN0eC50cmFuc2xhdGUodGhpcy54Q2VudGVyLCB0aGlzLnlDZW50ZXIpO1xuICAgICAgICBjdHgucm90YXRlKHN0YXJ0QW5nbGUpO1xuICAgICAgICBjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICAgICAgdGhpcy50aWNrcy5mb3JFYWNoKCh0aWNrLCBpbmRleCk9PntcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCAmJiAhb3B0cy5yZXZlcnNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgb3B0c0F0SW5kZXggPSB0aWNrT3B0cy5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dChpbmRleCkpO1xuICAgICAgICAgICAgY29uc3QgdGlja0ZvbnQgPSB0b0ZvbnQob3B0c0F0SW5kZXguZm9udCk7XG4gICAgICAgICAgICBvZmZzZXQgPSB0aGlzLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHRoaXMudGlja3NbaW5kZXhdLnZhbHVlKTtcbiAgICAgICAgICAgIGlmIChvcHRzQXRJbmRleC5zaG93TGFiZWxCYWNrZHJvcCkge1xuICAgICAgICAgICAgICAgIGN0eC5mb250ID0gdGlja0ZvbnQuc3RyaW5nO1xuICAgICAgICAgICAgICAgIHdpZHRoID0gY3R4Lm1lYXN1cmVUZXh0KHRpY2subGFiZWwpLndpZHRoO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRzQXRJbmRleC5iYWNrZHJvcENvbG9yO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcob3B0c0F0SW5kZXguYmFja2Ryb3BQYWRkaW5nKTtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFJlY3QoLXdpZHRoIC8gMiAtIHBhZGRpbmcubGVmdCwgLW9mZnNldCAtIHRpY2tGb250LnNpemUgLyAyIC0gcGFkZGluZy50b3AsIHdpZHRoICsgcGFkZGluZy53aWR0aCwgdGlja0ZvbnQuc2l6ZSArIHBhZGRpbmcuaGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlbmRlclRleHQoY3R4LCB0aWNrLmxhYmVsLCAwLCAtb2Zmc2V0LCB0aWNrRm9udCwge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBvcHRzQXRJbmRleC5jb2xvcixcbiAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogb3B0c0F0SW5kZXgudGV4dFN0cm9rZUNvbG9yLFxuICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiBvcHRzQXRJbmRleC50ZXh0U3Ryb2tlV2lkdGhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG4gZHJhd1RpdGxlKCkge31cbn1cblxuY29uc3QgSU5URVJWQUxTID0ge1xuICAgIG1pbGxpc2Vjb25kOiB7XG4gICAgICAgIGNvbW1vbjogdHJ1ZSxcbiAgICAgICAgc2l6ZTogMSxcbiAgICAgICAgc3RlcHM6IDEwMDBcbiAgICB9LFxuICAgIHNlY29uZDoge1xuICAgICAgICBjb21tb246IHRydWUsXG4gICAgICAgIHNpemU6IDEwMDAsXG4gICAgICAgIHN0ZXBzOiA2MFxuICAgIH0sXG4gICAgbWludXRlOiB7XG4gICAgICAgIGNvbW1vbjogdHJ1ZSxcbiAgICAgICAgc2l6ZTogNjAwMDAsXG4gICAgICAgIHN0ZXBzOiA2MFxuICAgIH0sXG4gICAgaG91cjoge1xuICAgICAgICBjb21tb246IHRydWUsXG4gICAgICAgIHNpemU6IDM2MDAwMDAsXG4gICAgICAgIHN0ZXBzOiAyNFxuICAgIH0sXG4gICAgZGF5OiB7XG4gICAgICAgIGNvbW1vbjogdHJ1ZSxcbiAgICAgICAgc2l6ZTogODY0MDAwMDAsXG4gICAgICAgIHN0ZXBzOiAzMFxuICAgIH0sXG4gICAgd2Vlazoge1xuICAgICAgICBjb21tb246IGZhbHNlLFxuICAgICAgICBzaXplOiA2MDQ4MDAwMDAsXG4gICAgICAgIHN0ZXBzOiA0XG4gICAgfSxcbiAgICBtb250aDoge1xuICAgICAgICBjb21tb246IHRydWUsXG4gICAgICAgIHNpemU6IDIuNjI4ZTksXG4gICAgICAgIHN0ZXBzOiAxMlxuICAgIH0sXG4gICAgcXVhcnRlcjoge1xuICAgICAgICBjb21tb246IGZhbHNlLFxuICAgICAgICBzaXplOiA3Ljg4NGU5LFxuICAgICAgICBzdGVwczogNFxuICAgIH0sXG4gICAgeWVhcjoge1xuICAgICAgICBjb21tb246IHRydWUsXG4gICAgICAgIHNpemU6IDMuMTU0ZTEwXG4gICAgfVxufTtcbiBjb25zdCBVTklUUyA9ICAvKiAjX19QVVJFX18gKi8gT2JqZWN0LmtleXMoSU5URVJWQUxTKTtcbiBmdW5jdGlvbiBzb3J0ZXIoYSwgYikge1xuICAgIHJldHVybiBhIC0gYjtcbn1cbiBmdW5jdGlvbiBwYXJzZShzY2FsZSwgaW5wdXQpIHtcbiAgICBpZiAoaXNOdWxsT3JVbmRlZihpbnB1dCkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IGFkYXB0ZXIgPSBzY2FsZS5fYWRhcHRlcjtcbiAgICBjb25zdCB7IHBhcnNlciAsIHJvdW5kICwgaXNvV2Vla2RheSAgfSA9IHNjYWxlLl9wYXJzZU9wdHM7XG4gICAgbGV0IHZhbHVlID0gaW5wdXQ7XG4gICAgaWYgKHR5cGVvZiBwYXJzZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFsdWUgPSBwYXJzZXIodmFsdWUpO1xuICAgIH1cbiAgICBpZiAoIWlzTnVtYmVyRmluaXRlKHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9IHR5cGVvZiBwYXJzZXIgPT09ICdzdHJpbmcnID8gYWRhcHRlci5wYXJzZSh2YWx1ZSwgIHBhcnNlcikgOiBhZGFwdGVyLnBhcnNlKHZhbHVlKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAocm91bmQpIHtcbiAgICAgICAgdmFsdWUgPSByb3VuZCA9PT0gJ3dlZWsnICYmIChpc051bWJlcihpc29XZWVrZGF5KSB8fCBpc29XZWVrZGF5ID09PSB0cnVlKSA/IGFkYXB0ZXIuc3RhcnRPZih2YWx1ZSwgJ2lzb1dlZWsnLCBpc29XZWVrZGF5KSA6IGFkYXB0ZXIuc3RhcnRPZih2YWx1ZSwgcm91bmQpO1xuICAgIH1cbiAgICByZXR1cm4gK3ZhbHVlO1xufVxuIGZ1bmN0aW9uIGRldGVybWluZVVuaXRGb3JBdXRvVGlja3MobWluVW5pdCwgbWluLCBtYXgsIGNhcGFjaXR5KSB7XG4gICAgY29uc3QgaWxlbiA9IFVOSVRTLmxlbmd0aDtcbiAgICBmb3IobGV0IGkgPSBVTklUUy5pbmRleE9mKG1pblVuaXQpOyBpIDwgaWxlbiAtIDE7ICsraSl7XG4gICAgICAgIGNvbnN0IGludGVydmFsID0gSU5URVJWQUxTW1VOSVRTW2ldXTtcbiAgICAgICAgY29uc3QgZmFjdG9yID0gaW50ZXJ2YWwuc3RlcHMgPyBpbnRlcnZhbC5zdGVwcyA6IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSO1xuICAgICAgICBpZiAoaW50ZXJ2YWwuY29tbW9uICYmIE1hdGguY2VpbCgobWF4IC0gbWluKSAvIChmYWN0b3IgKiBpbnRlcnZhbC5zaXplKSkgPD0gY2FwYWNpdHkpIHtcbiAgICAgICAgICAgIHJldHVybiBVTklUU1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gVU5JVFNbaWxlbiAtIDFdO1xufVxuIGZ1bmN0aW9uIGRldGVybWluZVVuaXRGb3JGb3JtYXR0aW5nKHNjYWxlLCBudW1UaWNrcywgbWluVW5pdCwgbWluLCBtYXgpIHtcbiAgICBmb3IobGV0IGkgPSBVTklUUy5sZW5ndGggLSAxOyBpID49IFVOSVRTLmluZGV4T2YobWluVW5pdCk7IGktLSl7XG4gICAgICAgIGNvbnN0IHVuaXQgPSBVTklUU1tpXTtcbiAgICAgICAgaWYgKElOVEVSVkFMU1t1bml0XS5jb21tb24gJiYgc2NhbGUuX2FkYXB0ZXIuZGlmZihtYXgsIG1pbiwgdW5pdCkgPj0gbnVtVGlja3MgLSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5pdDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gVU5JVFNbbWluVW5pdCA/IFVOSVRTLmluZGV4T2YobWluVW5pdCkgOiAwXTtcbn1cbiBmdW5jdGlvbiBkZXRlcm1pbmVNYWpvclVuaXQodW5pdCkge1xuICAgIGZvcihsZXQgaSA9IFVOSVRTLmluZGV4T2YodW5pdCkgKyAxLCBpbGVuID0gVU5JVFMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgaWYgKElOVEVSVkFMU1tVTklUU1tpXV0uY29tbW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gVU5JVFNbaV07XG4gICAgICAgIH1cbiAgICB9XG59XG4gZnVuY3Rpb24gYWRkVGljayh0aWNrcywgdGltZSwgdGltZXN0YW1wcykge1xuICAgIGlmICghdGltZXN0YW1wcykge1xuICAgICAgICB0aWNrc1t0aW1lXSA9IHRydWU7XG4gICAgfSBlbHNlIGlmICh0aW1lc3RhbXBzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCB7IGxvICwgaGkgIH0gPSBfbG9va3VwKHRpbWVzdGFtcHMsIHRpbWUpO1xuICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSB0aW1lc3RhbXBzW2xvXSA+PSB0aW1lID8gdGltZXN0YW1wc1tsb10gOiB0aW1lc3RhbXBzW2hpXTtcbiAgICAgICAgdGlja3NbdGltZXN0YW1wXSA9IHRydWU7XG4gICAgfVxufVxuIGZ1bmN0aW9uIHNldE1ham9yVGlja3Moc2NhbGUsIHRpY2tzLCBtYXAsIG1ham9yVW5pdCkge1xuICAgIGNvbnN0IGFkYXB0ZXIgPSBzY2FsZS5fYWRhcHRlcjtcbiAgICBjb25zdCBmaXJzdCA9ICthZGFwdGVyLnN0YXJ0T2YodGlja3NbMF0udmFsdWUsIG1ham9yVW5pdCk7XG4gICAgY29uc3QgbGFzdCA9IHRpY2tzW3RpY2tzLmxlbmd0aCAtIDFdLnZhbHVlO1xuICAgIGxldCBtYWpvciwgaW5kZXg7XG4gICAgZm9yKG1ham9yID0gZmlyc3Q7IG1ham9yIDw9IGxhc3Q7IG1ham9yID0gK2FkYXB0ZXIuYWRkKG1ham9yLCAxLCBtYWpvclVuaXQpKXtcbiAgICAgICAgaW5kZXggPSBtYXBbbWFqb3JdO1xuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgdGlja3NbaW5kZXhdLm1ham9yID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGlja3M7XG59XG4gZnVuY3Rpb24gdGlja3NGcm9tVGltZXN0YW1wcyhzY2FsZSwgdmFsdWVzLCBtYWpvclVuaXQpIHtcbiAgICBjb25zdCB0aWNrcyA9IFtdO1xuICAgICBjb25zdCBtYXAgPSB7fTtcbiAgICBjb25zdCBpbGVuID0gdmFsdWVzLmxlbmd0aDtcbiAgICBsZXQgaSwgdmFsdWU7XG4gICAgZm9yKGkgPSAwOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZXNbaV07XG4gICAgICAgIG1hcFt2YWx1ZV0gPSBpO1xuICAgICAgICB0aWNrcy5wdXNoKHtcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgbWFqb3I6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gaWxlbiA9PT0gMCB8fCAhbWFqb3JVbml0ID8gdGlja3MgOiBzZXRNYWpvclRpY2tzKHNjYWxlLCB0aWNrcywgbWFwLCBtYWpvclVuaXQpO1xufVxuY2xhc3MgVGltZVNjYWxlIGV4dGVuZHMgU2NhbGUge1xuICAgIHN0YXRpYyBpZCA9ICd0aW1lJztcbiBzdGF0aWMgZGVmYXVsdHMgPSB7XG4gYm91bmRzOiAnZGF0YScsXG4gICAgICAgIGFkYXB0ZXJzOiB7fSxcbiAgICAgICAgdGltZToge1xuICAgICAgICAgICAgcGFyc2VyOiBmYWxzZSxcbiAgICAgICAgICAgIHVuaXQ6IGZhbHNlLFxuICAgICAgICAgICAgcm91bmQ6IGZhbHNlLFxuICAgICAgICAgICAgaXNvV2Vla2RheTogZmFsc2UsXG4gICAgICAgICAgICBtaW5Vbml0OiAnbWlsbGlzZWNvbmQnLFxuICAgICAgICAgICAgZGlzcGxheUZvcm1hdHM6IHt9XG4gICAgICAgIH0sXG4gICAgICAgIHRpY2tzOiB7XG4gc291cmNlOiAnYXV0bycsXG4gICAgICAgICAgICBjYWxsYmFjazogZmFsc2UsXG4gICAgICAgICAgICBtYWpvcjoge1xuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuIGNvbnN0cnVjdG9yKHByb3BzKXtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICAgdGhpcy5fY2FjaGUgPSB7XG4gICAgICAgICAgICBkYXRhOiBbXSxcbiAgICAgICAgICAgIGxhYmVsczogW10sXG4gICAgICAgICAgICBhbGw6IFtdXG4gICAgICAgIH07XG4gICAgICAgICB0aGlzLl91bml0ID0gJ2RheSc7XG4gICAgICAgICB0aGlzLl9tYWpvclVuaXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX29mZnNldHMgPSB7fTtcbiAgICAgICAgdGhpcy5fbm9ybWFsaXplZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wYXJzZU9wdHMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGluaXQoc2NhbGVPcHRzLCBvcHRzID0ge30pIHtcbiAgICAgICAgY29uc3QgdGltZSA9IHNjYWxlT3B0cy50aW1lIHx8IChzY2FsZU9wdHMudGltZSA9IHt9KTtcbiAgICAgICAgIGNvbnN0IGFkYXB0ZXIgPSB0aGlzLl9hZGFwdGVyID0gbmV3IGFkYXB0ZXJzLl9kYXRlKHNjYWxlT3B0cy5hZGFwdGVycy5kYXRlKTtcbiAgICAgICAgYWRhcHRlci5pbml0KG9wdHMpO1xuICAgICAgICBtZXJnZUlmKHRpbWUuZGlzcGxheUZvcm1hdHMsIGFkYXB0ZXIuZm9ybWF0cygpKTtcbiAgICAgICAgdGhpcy5fcGFyc2VPcHRzID0ge1xuICAgICAgICAgICAgcGFyc2VyOiB0aW1lLnBhcnNlcixcbiAgICAgICAgICAgIHJvdW5kOiB0aW1lLnJvdW5kLFxuICAgICAgICAgICAgaXNvV2Vla2RheTogdGltZS5pc29XZWVrZGF5XG4gICAgICAgIH07XG4gICAgICAgIHN1cGVyLmluaXQoc2NhbGVPcHRzKTtcbiAgICAgICAgdGhpcy5fbm9ybWFsaXplZCA9IG9wdHMubm9ybWFsaXplZDtcbiAgICB9XG4gcGFyc2UocmF3LCBpbmRleCkge1xuICAgICAgICBpZiAocmF3ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZSh0aGlzLCByYXcpO1xuICAgIH1cbiAgICBiZWZvcmVMYXlvdXQoKSB7XG4gICAgICAgIHN1cGVyLmJlZm9yZUxheW91dCgpO1xuICAgICAgICB0aGlzLl9jYWNoZSA9IHtcbiAgICAgICAgICAgIGRhdGE6IFtdLFxuICAgICAgICAgICAgbGFiZWxzOiBbXSxcbiAgICAgICAgICAgIGFsbDogW11cbiAgICAgICAgfTtcbiAgICB9XG4gICAgZGV0ZXJtaW5lRGF0YUxpbWl0cygpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgYWRhcHRlciA9IHRoaXMuX2FkYXB0ZXI7XG4gICAgICAgIGNvbnN0IHVuaXQgPSBvcHRpb25zLnRpbWUudW5pdCB8fCAnZGF5JztcbiAgICAgICAgbGV0IHsgbWluICwgbWF4ICwgbWluRGVmaW5lZCAsIG1heERlZmluZWQgIH0gPSB0aGlzLmdldFVzZXJCb3VuZHMoKTtcbiBmdW5jdGlvbiBfYXBwbHlCb3VuZHMoYm91bmRzKSB7XG4gICAgICAgICAgICBpZiAoIW1pbkRlZmluZWQgJiYgIWlzTmFOKGJvdW5kcy5taW4pKSB7XG4gICAgICAgICAgICAgICAgbWluID0gTWF0aC5taW4obWluLCBib3VuZHMubWluKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghbWF4RGVmaW5lZCAmJiAhaXNOYU4oYm91bmRzLm1heCkpIHtcbiAgICAgICAgICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIGJvdW5kcy5tYXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghbWluRGVmaW5lZCB8fCAhbWF4RGVmaW5lZCkge1xuICAgICAgICAgICAgX2FwcGx5Qm91bmRzKHRoaXMuX2dldExhYmVsQm91bmRzKCkpO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYm91bmRzICE9PSAndGlja3MnIHx8IG9wdGlvbnMudGlja3Muc291cmNlICE9PSAnbGFiZWxzJykge1xuICAgICAgICAgICAgICAgIF9hcHBseUJvdW5kcyh0aGlzLmdldE1pbk1heChmYWxzZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG1pbiA9IGlzTnVtYmVyRmluaXRlKG1pbikgJiYgIWlzTmFOKG1pbikgPyBtaW4gOiArYWRhcHRlci5zdGFydE9mKERhdGUubm93KCksIHVuaXQpO1xuICAgICAgICBtYXggPSBpc051bWJlckZpbml0ZShtYXgpICYmICFpc05hTihtYXgpID8gbWF4IDogK2FkYXB0ZXIuZW5kT2YoRGF0ZS5ub3coKSwgdW5pdCkgKyAxO1xuICAgICAgICB0aGlzLm1pbiA9IE1hdGgubWluKG1pbiwgbWF4IC0gMSk7XG4gICAgICAgIHRoaXMubWF4ID0gTWF0aC5tYXgobWluICsgMSwgbWF4KTtcbiAgICB9XG4gX2dldExhYmVsQm91bmRzKCkge1xuICAgICAgICBjb25zdCBhcnIgPSB0aGlzLmdldExhYmVsVGltZXN0YW1wcygpO1xuICAgICAgICBsZXQgbWluID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICBsZXQgbWF4ID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZO1xuICAgICAgICBpZiAoYXJyLmxlbmd0aCkge1xuICAgICAgICAgICAgbWluID0gYXJyWzBdO1xuICAgICAgICAgICAgbWF4ID0gYXJyW2Fyci5sZW5ndGggLSAxXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWluLFxuICAgICAgICAgICAgbWF4XG4gICAgICAgIH07XG4gICAgfVxuIGJ1aWxkVGlja3MoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHRpbWVPcHRzID0gb3B0aW9ucy50aW1lO1xuICAgICAgICBjb25zdCB0aWNrT3B0cyA9IG9wdGlvbnMudGlja3M7XG4gICAgICAgIGNvbnN0IHRpbWVzdGFtcHMgPSB0aWNrT3B0cy5zb3VyY2UgPT09ICdsYWJlbHMnID8gdGhpcy5nZXRMYWJlbFRpbWVzdGFtcHMoKSA6IHRoaXMuX2dlbmVyYXRlKCk7XG4gICAgICAgIGlmIChvcHRpb25zLmJvdW5kcyA9PT0gJ3RpY2tzJyAmJiB0aW1lc3RhbXBzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5taW4gPSB0aGlzLl91c2VyTWluIHx8IHRpbWVzdGFtcHNbMF07XG4gICAgICAgICAgICB0aGlzLm1heCA9IHRoaXMuX3VzZXJNYXggfHwgdGltZXN0YW1wc1t0aW1lc3RhbXBzLmxlbmd0aCAtIDFdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1pbiA9IHRoaXMubWluO1xuICAgICAgICBjb25zdCBtYXggPSB0aGlzLm1heDtcbiAgICAgICAgY29uc3QgdGlja3MgPSBfZmlsdGVyQmV0d2Vlbih0aW1lc3RhbXBzLCBtaW4sIG1heCk7XG4gICAgICAgIHRoaXMuX3VuaXQgPSB0aW1lT3B0cy51bml0IHx8ICh0aWNrT3B0cy5hdXRvU2tpcCA/IGRldGVybWluZVVuaXRGb3JBdXRvVGlja3ModGltZU9wdHMubWluVW5pdCwgdGhpcy5taW4sIHRoaXMubWF4LCB0aGlzLl9nZXRMYWJlbENhcGFjaXR5KG1pbikpIDogZGV0ZXJtaW5lVW5pdEZvckZvcm1hdHRpbmcodGhpcywgdGlja3MubGVuZ3RoLCB0aW1lT3B0cy5taW5Vbml0LCB0aGlzLm1pbiwgdGhpcy5tYXgpKTtcbiAgICAgICAgdGhpcy5fbWFqb3JVbml0ID0gIXRpY2tPcHRzLm1ham9yLmVuYWJsZWQgfHwgdGhpcy5fdW5pdCA9PT0gJ3llYXInID8gdW5kZWZpbmVkIDogZGV0ZXJtaW5lTWFqb3JVbml0KHRoaXMuX3VuaXQpO1xuICAgICAgICB0aGlzLmluaXRPZmZzZXRzKHRpbWVzdGFtcHMpO1xuICAgICAgICBpZiAob3B0aW9ucy5yZXZlcnNlKSB7XG4gICAgICAgICAgICB0aWNrcy5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRpY2tzRnJvbVRpbWVzdGFtcHModGhpcywgdGlja3MsIHRoaXMuX21ham9yVW5pdCk7XG4gICAgfVxuICAgIGFmdGVyQXV0b1NraXAoKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMub2Zmc2V0QWZ0ZXJBdXRvc2tpcCkge1xuICAgICAgICAgICAgdGhpcy5pbml0T2Zmc2V0cyh0aGlzLnRpY2tzLm1hcCgodGljayk9Pit0aWNrLnZhbHVlKSk7XG4gICAgICAgIH1cbiAgICB9XG4gaW5pdE9mZnNldHModGltZXN0YW1wcyA9IFtdKSB7XG4gICAgICAgIGxldCBzdGFydCA9IDA7XG4gICAgICAgIGxldCBlbmQgPSAwO1xuICAgICAgICBsZXQgZmlyc3QsIGxhc3Q7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMub2Zmc2V0ICYmIHRpbWVzdGFtcHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBmaXJzdCA9IHRoaXMuZ2V0RGVjaW1hbEZvclZhbHVlKHRpbWVzdGFtcHNbMF0pO1xuICAgICAgICAgICAgaWYgKHRpbWVzdGFtcHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgc3RhcnQgPSAxIC0gZmlyc3Q7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0YXJ0ID0gKHRoaXMuZ2V0RGVjaW1hbEZvclZhbHVlKHRpbWVzdGFtcHNbMV0pIC0gZmlyc3QpIC8gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3QgPSB0aGlzLmdldERlY2ltYWxGb3JWYWx1ZSh0aW1lc3RhbXBzW3RpbWVzdGFtcHMubGVuZ3RoIC0gMV0pO1xuICAgICAgICAgICAgaWYgKHRpbWVzdGFtcHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgZW5kID0gbGFzdDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZW5kID0gKGxhc3QgLSB0aGlzLmdldERlY2ltYWxGb3JWYWx1ZSh0aW1lc3RhbXBzW3RpbWVzdGFtcHMubGVuZ3RoIC0gMl0pKSAvIDI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGltaXQgPSB0aW1lc3RhbXBzLmxlbmd0aCA8IDMgPyAwLjUgOiAwLjI1O1xuICAgICAgICBzdGFydCA9IF9saW1pdFZhbHVlKHN0YXJ0LCAwLCBsaW1pdCk7XG4gICAgICAgIGVuZCA9IF9saW1pdFZhbHVlKGVuZCwgMCwgbGltaXQpO1xuICAgICAgICB0aGlzLl9vZmZzZXRzID0ge1xuICAgICAgICAgICAgc3RhcnQsXG4gICAgICAgICAgICBlbmQsXG4gICAgICAgICAgICBmYWN0b3I6IDEgLyAoc3RhcnQgKyAxICsgZW5kKVxuICAgICAgICB9O1xuICAgIH1cbiBfZ2VuZXJhdGUoKSB7XG4gICAgICAgIGNvbnN0IGFkYXB0ZXIgPSB0aGlzLl9hZGFwdGVyO1xuICAgICAgICBjb25zdCBtaW4gPSB0aGlzLm1pbjtcbiAgICAgICAgY29uc3QgbWF4ID0gdGhpcy5tYXg7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHRpbWVPcHRzID0gb3B0aW9ucy50aW1lO1xuICAgICAgICBjb25zdCBtaW5vciA9IHRpbWVPcHRzLnVuaXQgfHwgZGV0ZXJtaW5lVW5pdEZvckF1dG9UaWNrcyh0aW1lT3B0cy5taW5Vbml0LCBtaW4sIG1heCwgdGhpcy5fZ2V0TGFiZWxDYXBhY2l0eShtaW4pKTtcbiAgICAgICAgY29uc3Qgc3RlcFNpemUgPSB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLnRpY2tzLnN0ZXBTaXplLCAxKTtcbiAgICAgICAgY29uc3Qgd2Vla2RheSA9IG1pbm9yID09PSAnd2VlaycgPyB0aW1lT3B0cy5pc29XZWVrZGF5IDogZmFsc2U7XG4gICAgICAgIGNvbnN0IGhhc1dlZWtkYXkgPSBpc051bWJlcih3ZWVrZGF5KSB8fCB3ZWVrZGF5ID09PSB0cnVlO1xuICAgICAgICBjb25zdCB0aWNrcyA9IHt9O1xuICAgICAgICBsZXQgZmlyc3QgPSBtaW47XG4gICAgICAgIGxldCB0aW1lLCBjb3VudDtcbiAgICAgICAgaWYgKGhhc1dlZWtkYXkpIHtcbiAgICAgICAgICAgIGZpcnN0ID0gK2FkYXB0ZXIuc3RhcnRPZihmaXJzdCwgJ2lzb1dlZWsnLCB3ZWVrZGF5KTtcbiAgICAgICAgfVxuICAgICAgICBmaXJzdCA9ICthZGFwdGVyLnN0YXJ0T2YoZmlyc3QsIGhhc1dlZWtkYXkgPyAnZGF5JyA6IG1pbm9yKTtcbiAgICAgICAgaWYgKGFkYXB0ZXIuZGlmZihtYXgsIG1pbiwgbWlub3IpID4gMTAwMDAwICogc3RlcFNpemUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtaW4gKyAnIGFuZCAnICsgbWF4ICsgJyBhcmUgdG9vIGZhciBhcGFydCB3aXRoIHN0ZXBTaXplIG9mICcgKyBzdGVwU2l6ZSArICcgJyArIG1pbm9yKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0aW1lc3RhbXBzID0gb3B0aW9ucy50aWNrcy5zb3VyY2UgPT09ICdkYXRhJyAmJiB0aGlzLmdldERhdGFUaW1lc3RhbXBzKCk7XG4gICAgICAgIGZvcih0aW1lID0gZmlyc3QsIGNvdW50ID0gMDsgdGltZSA8IG1heDsgdGltZSA9ICthZGFwdGVyLmFkZCh0aW1lLCBzdGVwU2l6ZSwgbWlub3IpLCBjb3VudCsrKXtcbiAgICAgICAgICAgIGFkZFRpY2sodGlja3MsIHRpbWUsIHRpbWVzdGFtcHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lID09PSBtYXggfHwgb3B0aW9ucy5ib3VuZHMgPT09ICd0aWNrcycgfHwgY291bnQgPT09IDEpIHtcbiAgICAgICAgICAgIGFkZFRpY2sodGlja3MsIHRpbWUsIHRpbWVzdGFtcHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aWNrcykuc29ydChzb3J0ZXIpLm1hcCgoeCk9Pit4KTtcbiAgICB9XG4gZ2V0TGFiZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBhZGFwdGVyID0gdGhpcy5fYWRhcHRlcjtcbiAgICAgICAgY29uc3QgdGltZU9wdHMgPSB0aGlzLm9wdGlvbnMudGltZTtcbiAgICAgICAgaWYgKHRpbWVPcHRzLnRvb2x0aXBGb3JtYXQpIHtcbiAgICAgICAgICAgIHJldHVybiBhZGFwdGVyLmZvcm1hdCh2YWx1ZSwgdGltZU9wdHMudG9vbHRpcEZvcm1hdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFkYXB0ZXIuZm9ybWF0KHZhbHVlLCB0aW1lT3B0cy5kaXNwbGF5Rm9ybWF0cy5kYXRldGltZSk7XG4gICAgfVxuIGZvcm1hdCh2YWx1ZSwgZm9ybWF0KSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGZvcm1hdHMgPSBvcHRpb25zLnRpbWUuZGlzcGxheUZvcm1hdHM7XG4gICAgICAgIGNvbnN0IHVuaXQgPSB0aGlzLl91bml0O1xuICAgICAgICBjb25zdCBmbXQgPSBmb3JtYXQgfHwgZm9ybWF0c1t1bml0XTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkYXB0ZXIuZm9ybWF0KHZhbHVlLCBmbXQpO1xuICAgIH1cbiBfdGlja0Zvcm1hdEZ1bmN0aW9uKHRpbWUsIGluZGV4LCB0aWNrcywgZm9ybWF0KSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGZvcm1hdHRlciA9IG9wdGlvbnMudGlja3MuY2FsbGJhY2s7XG4gICAgICAgIGlmIChmb3JtYXR0ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhmb3JtYXR0ZXIsIFtcbiAgICAgICAgICAgICAgICB0aW1lLFxuICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgIHRpY2tzXG4gICAgICAgICAgICBdLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmb3JtYXRzID0gb3B0aW9ucy50aW1lLmRpc3BsYXlGb3JtYXRzO1xuICAgICAgICBjb25zdCB1bml0ID0gdGhpcy5fdW5pdDtcbiAgICAgICAgY29uc3QgbWFqb3JVbml0ID0gdGhpcy5fbWFqb3JVbml0O1xuICAgICAgICBjb25zdCBtaW5vckZvcm1hdCA9IHVuaXQgJiYgZm9ybWF0c1t1bml0XTtcbiAgICAgICAgY29uc3QgbWFqb3JGb3JtYXQgPSBtYWpvclVuaXQgJiYgZm9ybWF0c1ttYWpvclVuaXRdO1xuICAgICAgICBjb25zdCB0aWNrID0gdGlja3NbaW5kZXhdO1xuICAgICAgICBjb25zdCBtYWpvciA9IG1ham9yVW5pdCAmJiBtYWpvckZvcm1hdCAmJiB0aWNrICYmIHRpY2subWFqb3I7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGFwdGVyLmZvcm1hdCh0aW1lLCBmb3JtYXQgfHwgKG1ham9yID8gbWFqb3JGb3JtYXQgOiBtaW5vckZvcm1hdCkpO1xuICAgIH1cbiBnZW5lcmF0ZVRpY2tMYWJlbHModGlja3MpIHtcbiAgICAgICAgbGV0IGksIGlsZW4sIHRpY2s7XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IHRpY2tzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICB0aWNrID0gdGlja3NbaV07XG4gICAgICAgICAgICB0aWNrLmxhYmVsID0gdGhpcy5fdGlja0Zvcm1hdEZ1bmN0aW9uKHRpY2sudmFsdWUsIGksIHRpY2tzKTtcbiAgICAgICAgfVxuICAgIH1cbiBnZXREZWNpbWFsRm9yVmFsdWUodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsID8gTmFOIDogKHZhbHVlIC0gdGhpcy5taW4pIC8gKHRoaXMubWF4IC0gdGhpcy5taW4pO1xuICAgIH1cbiBnZXRQaXhlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG9mZnNldHMgPSB0aGlzLl9vZmZzZXRzO1xuICAgICAgICBjb25zdCBwb3MgPSB0aGlzLmdldERlY2ltYWxGb3JWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBpeGVsRm9yRGVjaW1hbCgob2Zmc2V0cy5zdGFydCArIHBvcykgKiBvZmZzZXRzLmZhY3Rvcik7XG4gICAgfVxuIGdldFZhbHVlRm9yUGl4ZWwocGl4ZWwpIHtcbiAgICAgICAgY29uc3Qgb2Zmc2V0cyA9IHRoaXMuX29mZnNldHM7XG4gICAgICAgIGNvbnN0IHBvcyA9IHRoaXMuZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKSAvIG9mZnNldHMuZmFjdG9yIC0gb2Zmc2V0cy5lbmQ7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbiArIHBvcyAqICh0aGlzLm1heCAtIHRoaXMubWluKTtcbiAgICB9XG4gX2dldExhYmVsU2l6ZShsYWJlbCkge1xuICAgICAgICBjb25zdCB0aWNrc09wdHMgPSB0aGlzLm9wdGlvbnMudGlja3M7XG4gICAgICAgIGNvbnN0IHRpY2tMYWJlbFdpZHRoID0gdGhpcy5jdHgubWVhc3VyZVRleHQobGFiZWwpLndpZHRoO1xuICAgICAgICBjb25zdCBhbmdsZSA9IHRvUmFkaWFucyh0aGlzLmlzSG9yaXpvbnRhbCgpID8gdGlja3NPcHRzLm1heFJvdGF0aW9uIDogdGlja3NPcHRzLm1pblJvdGF0aW9uKTtcbiAgICAgICAgY29uc3QgY29zUm90YXRpb24gPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgICAgIGNvbnN0IHNpblJvdGF0aW9uID0gTWF0aC5zaW4oYW5nbGUpO1xuICAgICAgICBjb25zdCB0aWNrRm9udFNpemUgPSB0aGlzLl9yZXNvbHZlVGlja0ZvbnRPcHRpb25zKDApLnNpemU7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB3OiB0aWNrTGFiZWxXaWR0aCAqIGNvc1JvdGF0aW9uICsgdGlja0ZvbnRTaXplICogc2luUm90YXRpb24sXG4gICAgICAgICAgICBoOiB0aWNrTGFiZWxXaWR0aCAqIHNpblJvdGF0aW9uICsgdGlja0ZvbnRTaXplICogY29zUm90YXRpb25cbiAgICAgICAgfTtcbiAgICB9XG4gX2dldExhYmVsQ2FwYWNpdHkoZXhhbXBsZVRpbWUpIHtcbiAgICAgICAgY29uc3QgdGltZU9wdHMgPSB0aGlzLm9wdGlvbnMudGltZTtcbiAgICAgICAgY29uc3QgZGlzcGxheUZvcm1hdHMgPSB0aW1lT3B0cy5kaXNwbGF5Rm9ybWF0cztcbiAgICAgICAgY29uc3QgZm9ybWF0ID0gZGlzcGxheUZvcm1hdHNbdGltZU9wdHMudW5pdF0gfHwgZGlzcGxheUZvcm1hdHMubWlsbGlzZWNvbmQ7XG4gICAgICAgIGNvbnN0IGV4YW1wbGVMYWJlbCA9IHRoaXMuX3RpY2tGb3JtYXRGdW5jdGlvbihleGFtcGxlVGltZSwgMCwgdGlja3NGcm9tVGltZXN0YW1wcyh0aGlzLCBbXG4gICAgICAgICAgICBleGFtcGxlVGltZVxuICAgICAgICBdLCB0aGlzLl9tYWpvclVuaXQpLCBmb3JtYXQpO1xuICAgICAgICBjb25zdCBzaXplID0gdGhpcy5fZ2V0TGFiZWxTaXplKGV4YW1wbGVMYWJlbCk7XG4gICAgICAgIGNvbnN0IGNhcGFjaXR5ID0gTWF0aC5mbG9vcih0aGlzLmlzSG9yaXpvbnRhbCgpID8gdGhpcy53aWR0aCAvIHNpemUudyA6IHRoaXMuaGVpZ2h0IC8gc2l6ZS5oKSAtIDE7XG4gICAgICAgIHJldHVybiBjYXBhY2l0eSA+IDAgPyBjYXBhY2l0eSA6IDE7XG4gICAgfVxuIGdldERhdGFUaW1lc3RhbXBzKCkge1xuICAgICAgICBsZXQgdGltZXN0YW1wcyA9IHRoaXMuX2NhY2hlLmRhdGEgfHwgW107XG4gICAgICAgIGxldCBpLCBpbGVuO1xuICAgICAgICBpZiAodGltZXN0YW1wcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aW1lc3RhbXBzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGFzID0gdGhpcy5nZXRNYXRjaGluZ1Zpc2libGVNZXRhcygpO1xuICAgICAgICBpZiAodGhpcy5fbm9ybWFsaXplZCAmJiBtZXRhcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZS5kYXRhID0gbWV0YXNbMF0uY29udHJvbGxlci5nZXRBbGxQYXJzZWRWYWx1ZXModGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gbWV0YXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIHRpbWVzdGFtcHMgPSB0aW1lc3RhbXBzLmNvbmNhdChtZXRhc1tpXS5jb250cm9sbGVyLmdldEFsbFBhcnNlZFZhbHVlcyh0aGlzKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlLmRhdGEgPSB0aGlzLm5vcm1hbGl6ZSh0aW1lc3RhbXBzKTtcbiAgICB9XG4gZ2V0TGFiZWxUaW1lc3RhbXBzKCkge1xuICAgICAgICBjb25zdCB0aW1lc3RhbXBzID0gdGhpcy5fY2FjaGUubGFiZWxzIHx8IFtdO1xuICAgICAgICBsZXQgaSwgaWxlbjtcbiAgICAgICAgaWYgKHRpbWVzdGFtcHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGltZXN0YW1wcztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYWJlbHMgPSB0aGlzLmdldExhYmVscygpO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBsYWJlbHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIHRpbWVzdGFtcHMucHVzaChwYXJzZSh0aGlzLCBsYWJlbHNbaV0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGUubGFiZWxzID0gdGhpcy5fbm9ybWFsaXplZCA/IHRpbWVzdGFtcHMgOiB0aGlzLm5vcm1hbGl6ZSh0aW1lc3RhbXBzKTtcbiAgICB9XG4gbm9ybWFsaXplKHZhbHVlcykge1xuICAgICAgICByZXR1cm4gX2FycmF5VW5pcXVlKHZhbHVlcy5zb3J0KHNvcnRlcikpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaW50ZXJwb2xhdGUodGFibGUsIHZhbCwgcmV2ZXJzZSkge1xuICAgIGxldCBsbyA9IDA7XG4gICAgbGV0IGhpID0gdGFibGUubGVuZ3RoIC0gMTtcbiAgICBsZXQgcHJldlNvdXJjZSwgbmV4dFNvdXJjZSwgcHJldlRhcmdldCwgbmV4dFRhcmdldDtcbiAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICBpZiAodmFsID49IHRhYmxlW2xvXS5wb3MgJiYgdmFsIDw9IHRhYmxlW2hpXS5wb3MpIHtcbiAgICAgICAgICAgICh7IGxvICwgaGkgIH0gPSBfbG9va3VwQnlLZXkodGFibGUsICdwb3MnLCB2YWwpKTtcbiAgICAgICAgfVxuICAgICAgICAoeyBwb3M6IHByZXZTb3VyY2UgLCB0aW1lOiBwcmV2VGFyZ2V0ICB9ID0gdGFibGVbbG9dKTtcbiAgICAgICAgKHsgcG9zOiBuZXh0U291cmNlICwgdGltZTogbmV4dFRhcmdldCAgfSA9IHRhYmxlW2hpXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHZhbCA+PSB0YWJsZVtsb10udGltZSAmJiB2YWwgPD0gdGFibGVbaGldLnRpbWUpIHtcbiAgICAgICAgICAgICh7IGxvICwgaGkgIH0gPSBfbG9va3VwQnlLZXkodGFibGUsICd0aW1lJywgdmFsKSk7XG4gICAgICAgIH1cbiAgICAgICAgKHsgdGltZTogcHJldlNvdXJjZSAsIHBvczogcHJldlRhcmdldCAgfSA9IHRhYmxlW2xvXSk7XG4gICAgICAgICh7IHRpbWU6IG5leHRTb3VyY2UgLCBwb3M6IG5leHRUYXJnZXQgIH0gPSB0YWJsZVtoaV0pO1xuICAgIH1cbiAgICBjb25zdCBzcGFuID0gbmV4dFNvdXJjZSAtIHByZXZTb3VyY2U7XG4gICAgcmV0dXJuIHNwYW4gPyBwcmV2VGFyZ2V0ICsgKG5leHRUYXJnZXQgLSBwcmV2VGFyZ2V0KSAqICh2YWwgLSBwcmV2U291cmNlKSAvIHNwYW4gOiBwcmV2VGFyZ2V0O1xufVxuY2xhc3MgVGltZVNlcmllc1NjYWxlIGV4dGVuZHMgVGltZVNjYWxlIHtcbiAgICBzdGF0aWMgaWQgPSAndGltZXNlcmllcyc7XG4gc3RhdGljIGRlZmF1bHRzID0gVGltZVNjYWxlLmRlZmF1bHRzO1xuIGNvbnN0cnVjdG9yKHByb3BzKXtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICAgdGhpcy5fdGFibGUgPSBbXTtcbiAgICAgICAgIHRoaXMuX21pblBvcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMuX3RhYmxlUmFuZ2UgPSB1bmRlZmluZWQ7XG4gICAgfVxuIGluaXRPZmZzZXRzKCkge1xuICAgICAgICBjb25zdCB0aW1lc3RhbXBzID0gdGhpcy5fZ2V0VGltZXN0YW1wc0ZvclRhYmxlKCk7XG4gICAgICAgIGNvbnN0IHRhYmxlID0gdGhpcy5fdGFibGUgPSB0aGlzLmJ1aWxkTG9va3VwVGFibGUodGltZXN0YW1wcyk7XG4gICAgICAgIHRoaXMuX21pblBvcyA9IGludGVycG9sYXRlKHRhYmxlLCB0aGlzLm1pbik7XG4gICAgICAgIHRoaXMuX3RhYmxlUmFuZ2UgPSBpbnRlcnBvbGF0ZSh0YWJsZSwgdGhpcy5tYXgpIC0gdGhpcy5fbWluUG9zO1xuICAgICAgICBzdXBlci5pbml0T2Zmc2V0cyh0aW1lc3RhbXBzKTtcbiAgICB9XG4gYnVpbGRMb29rdXBUYWJsZSh0aW1lc3RhbXBzKSB7XG4gICAgICAgIGNvbnN0IHsgbWluICwgbWF4ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICAgICAgY29uc3QgdGFibGUgPSBbXTtcbiAgICAgICAgbGV0IGksIGlsZW4sIHByZXYsIGN1cnIsIG5leHQ7XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IHRpbWVzdGFtcHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIGN1cnIgPSB0aW1lc3RhbXBzW2ldO1xuICAgICAgICAgICAgaWYgKGN1cnIgPj0gbWluICYmIGN1cnIgPD0gbWF4KSB7XG4gICAgICAgICAgICAgICAgaXRlbXMucHVzaChjdXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaXRlbXMubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRpbWU6IG1pbixcbiAgICAgICAgICAgICAgICAgICAgcG9zOiAwXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRpbWU6IG1heCxcbiAgICAgICAgICAgICAgICAgICAgcG9zOiAxXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgbmV4dCA9IGl0ZW1zW2kgKyAxXTtcbiAgICAgICAgICAgIHByZXYgPSBpdGVtc1tpIC0gMV07XG4gICAgICAgICAgICBjdXJyID0gaXRlbXNbaV07XG4gICAgICAgICAgICBpZiAoTWF0aC5yb3VuZCgobmV4dCArIHByZXYpIC8gMikgIT09IGN1cnIpIHtcbiAgICAgICAgICAgICAgICB0YWJsZS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdGltZTogY3VycixcbiAgICAgICAgICAgICAgICAgICAgcG9zOiBpIC8gKGlsZW4gLSAxKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YWJsZTtcbiAgICB9XG4gX2dlbmVyYXRlKCkge1xuICAgICAgICBjb25zdCBtaW4gPSB0aGlzLm1pbjtcbiAgICAgICAgY29uc3QgbWF4ID0gdGhpcy5tYXg7XG4gICAgICAgIGxldCB0aW1lc3RhbXBzID0gc3VwZXIuZ2V0RGF0YVRpbWVzdGFtcHMoKTtcbiAgICAgICAgaWYgKCF0aW1lc3RhbXBzLmluY2x1ZGVzKG1pbikgfHwgIXRpbWVzdGFtcHMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aW1lc3RhbXBzLnNwbGljZSgwLCAwLCBtaW4pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGltZXN0YW1wcy5pbmNsdWRlcyhtYXgpIHx8IHRpbWVzdGFtcHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICB0aW1lc3RhbXBzLnB1c2gobWF4KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGltZXN0YW1wcy5zb3J0KChhLCBiKT0+YSAtIGIpO1xuICAgIH1cbiBfZ2V0VGltZXN0YW1wc0ZvclRhYmxlKCkge1xuICAgICAgICBsZXQgdGltZXN0YW1wcyA9IHRoaXMuX2NhY2hlLmFsbCB8fCBbXTtcbiAgICAgICAgaWYgKHRpbWVzdGFtcHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGltZXN0YW1wcztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5nZXREYXRhVGltZXN0YW1wcygpO1xuICAgICAgICBjb25zdCBsYWJlbCA9IHRoaXMuZ2V0TGFiZWxUaW1lc3RhbXBzKCk7XG4gICAgICAgIGlmIChkYXRhLmxlbmd0aCAmJiBsYWJlbC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRpbWVzdGFtcHMgPSB0aGlzLm5vcm1hbGl6ZShkYXRhLmNvbmNhdChsYWJlbCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGltZXN0YW1wcyA9IGRhdGEubGVuZ3RoID8gZGF0YSA6IGxhYmVsO1xuICAgICAgICB9XG4gICAgICAgIHRpbWVzdGFtcHMgPSB0aGlzLl9jYWNoZS5hbGwgPSB0aW1lc3RhbXBzO1xuICAgICAgICByZXR1cm4gdGltZXN0YW1wcztcbiAgICB9XG4gZ2V0RGVjaW1hbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAoaW50ZXJwb2xhdGUodGhpcy5fdGFibGUsIHZhbHVlKSAtIHRoaXMuX21pblBvcykgLyB0aGlzLl90YWJsZVJhbmdlO1xuICAgIH1cbiBnZXRWYWx1ZUZvclBpeGVsKHBpeGVsKSB7XG4gICAgICAgIGNvbnN0IG9mZnNldHMgPSB0aGlzLl9vZmZzZXRzO1xuICAgICAgICBjb25zdCBkZWNpbWFsID0gdGhpcy5nZXREZWNpbWFsRm9yUGl4ZWwocGl4ZWwpIC8gb2Zmc2V0cy5mYWN0b3IgLSBvZmZzZXRzLmVuZDtcbiAgICAgICAgcmV0dXJuIGludGVycG9sYXRlKHRoaXMuX3RhYmxlLCBkZWNpbWFsICogdGhpcy5fdGFibGVSYW5nZSArIHRoaXMuX21pblBvcywgdHJ1ZSk7XG4gICAgfVxufVxuXG52YXIgc2NhbGVzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuX19wcm90b19fOiBudWxsLFxuQ2F0ZWdvcnlTY2FsZTogQ2F0ZWdvcnlTY2FsZSxcbkxpbmVhclNjYWxlOiBMaW5lYXJTY2FsZSxcbkxvZ2FyaXRobWljU2NhbGU6IExvZ2FyaXRobWljU2NhbGUsXG5SYWRpYWxMaW5lYXJTY2FsZTogUmFkaWFsTGluZWFyU2NhbGUsXG5UaW1lU2NhbGU6IFRpbWVTY2FsZSxcblRpbWVTZXJpZXNTY2FsZTogVGltZVNlcmllc1NjYWxlXG59KTtcblxuY29uc3QgcmVnaXN0ZXJhYmxlcyA9IFtcbiAgICBjb250cm9sbGVycyxcbiAgICBlbGVtZW50cyxcbiAgICBwbHVnaW5zLFxuICAgIHNjYWxlc1xuXTtcblxuZXhwb3J0IHsgQW5pbWF0aW9uLCBBbmltYXRpb25zLCBBcmNFbGVtZW50LCBCYXJDb250cm9sbGVyLCBCYXJFbGVtZW50LCBCYXNlUGxhdGZvcm0sIEJhc2ljUGxhdGZvcm0sIEJ1YmJsZUNvbnRyb2xsZXIsIENhdGVnb3J5U2NhbGUsIENoYXJ0LCBwbHVnaW5fY29sb3JzIGFzIENvbG9ycywgRGF0YXNldENvbnRyb2xsZXIsIHBsdWdpbl9kZWNpbWF0aW9uIGFzIERlY2ltYXRpb24sIERvbVBsYXRmb3JtLCBEb3VnaG51dENvbnRyb2xsZXIsIEVsZW1lbnQsIGluZGV4IGFzIEZpbGxlciwgSW50ZXJhY3Rpb24sIHBsdWdpbl9sZWdlbmQgYXMgTGVnZW5kLCBMaW5lQ29udHJvbGxlciwgTGluZUVsZW1lbnQsIExpbmVhclNjYWxlLCBMb2dhcml0aG1pY1NjYWxlLCBQaWVDb250cm9sbGVyLCBQb2ludEVsZW1lbnQsIFBvbGFyQXJlYUNvbnRyb2xsZXIsIFJhZGFyQ29udHJvbGxlciwgUmFkaWFsTGluZWFyU2NhbGUsIFNjYWxlLCBTY2F0dGVyQ29udHJvbGxlciwgcGx1Z2luX3N1YnRpdGxlIGFzIFN1YlRpdGxlLCBUaWNrcywgVGltZVNjYWxlLCBUaW1lU2VyaWVzU2NhbGUsIHBsdWdpbl90aXRsZSBhcyBUaXRsZSwgcGx1Z2luX3Rvb2x0aXAgYXMgVG9vbHRpcCwgYWRhcHRlcnMgYXMgX2FkYXB0ZXJzLCBfZGV0ZWN0UGxhdGZvcm0sIGFuaW1hdG9yLCBjb250cm9sbGVycywgZGVmYXVsdHMsIGVsZW1lbnRzLCBsYXlvdXRzLCBwbHVnaW5zLCByZWdpc3RlcmFibGVzLCByZWdpc3RyeSwgc2NhbGVzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGFydC5qcy5tYXBcbiIsImltcG9ydCB7Q2hhcnQsIHJlZ2lzdGVyYWJsZXN9IGZyb20gJy4uL2Rpc3QvY2hhcnQuanMnO1xuXG5DaGFydC5yZWdpc3RlciguLi5yZWdpc3RlcmFibGVzKTtcblxuZXhwb3J0ICogZnJvbSAnLi4vZGlzdC9jaGFydC5qcyc7XG5leHBvcnQgZGVmYXVsdCBDaGFydDtcbiIsIi8qIVxuKiBjaGFydGpzLXBsdWdpbi1hbm5vdGF0aW9uIHYzLjAuMVxuKiBodHRwczovL3d3dy5jaGFydGpzLm9yZy9jaGFydGpzLXBsdWdpbi1hbm5vdGF0aW9uL2luZGV4XG4gKiAoYykgMjAyMyBjaGFydGpzLXBsdWdpbi1hbm5vdGF0aW9uIENvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKi9cbmltcG9ydCB7IEVsZW1lbnQsIGRlZmF1bHRzLCBBbmltYXRpb25zLCBDaGFydCB9IGZyb20gJ2NoYXJ0LmpzJztcbmltcG9ydCB7IGRpc3RhbmNlQmV0d2VlblBvaW50cywgZGVmaW5lZCwgaXNGdW5jdGlvbiwgY2FsbGJhY2ssIGlzT2JqZWN0LCB2YWx1ZU9yRGVmYXVsdCwgdG9SYWRpYW5zLCBpc0FycmF5LCB0b0ZvbnQsIGFkZFJvdW5kZWRSZWN0UGF0aCwgdG9UUkJMQ29ybmVycywgUVVBUlRFUl9QSSwgUEksIEhBTEZfUEksIFRXT19USElSRFNfUEksIFRBVSwgaXNOdW1iZXIsIFJBRF9QRVJfREVHLCB0b1BhZGRpbmcsIGlzRmluaXRlLCB0b0RlZ3JlZXMsIGNsaXBBcmVhLCB1bmNsaXBBcmVhIH0gZnJvbSAnY2hhcnQuanMvaGVscGVycyc7XG5cbi8qKlxuICogQHR5cGVkZWYgeyBpbXBvcnQoXCJjaGFydC5qc1wiKS5DaGFydEV2ZW50IH0gQ2hhcnRFdmVudFxuICogQHR5cGVkZWYgeyBpbXBvcnQoJy4uLy4uL3R5cGVzL2VsZW1lbnQnKS5Bbm5vdGF0aW9uRWxlbWVudCB9IEFubm90YXRpb25FbGVtZW50XG4gKi9cblxuY29uc3QgaW50ZXJhY3Rpb24gPSB7XG4gIG1vZGVzOiB7XG4gICAgLyoqXG4gICAgICogUG9pbnQgbW9kZSByZXR1cm5zIGFsbCBlbGVtZW50cyB0aGF0IGhpdCB0ZXN0IGJhc2VkIG9uIHRoZSBldmVudCBwb3NpdGlvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdGF0ZSAtIHRoZSBzdGF0ZSBvZiB0aGUgcGx1Z2luXG4gICAgICogQHBhcmFtIHtDaGFydEV2ZW50fSBldmVudCAtIHRoZSBldmVudCB3ZSBhcmUgZmluZCB0aGluZ3MgYXRcbiAgICAgKiBAcmV0dXJuIHtBbm5vdGF0aW9uRWxlbWVudFtdfSAtIGVsZW1lbnRzIHRoYXQgYXJlIGZvdW5kXG4gICAgICovXG4gICAgcG9pbnQoc3RhdGUsIGV2ZW50KSB7XG4gICAgICByZXR1cm4gZmlsdGVyRWxlbWVudHMoc3RhdGUsIGV2ZW50LCB7aW50ZXJzZWN0OiB0cnVlfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE5lYXJlc3QgbW9kZSByZXR1cm5zIHRoZSBlbGVtZW50IGNsb3Nlc3QgdG8gdGhlIGV2ZW50IHBvc2l0aW9uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YXRlIC0gdGhlIHN0YXRlIG9mIHRoZSBwbHVnaW5cbiAgICAgKiBAcGFyYW0ge0NoYXJ0RXZlbnR9IGV2ZW50IC0gdGhlIGV2ZW50IHdlIGFyZSBmaW5kIHRoaW5ncyBhdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gaW50ZXJhY3Rpb24gb3B0aW9ucyB0byB1c2VcbiAgICAgKiBAcmV0dXJuIHtBbm5vdGF0aW9uRWxlbWVudFtdfSAtIGVsZW1lbnRzIHRoYXQgYXJlIGZvdW5kIChvbmx5IDEgZWxlbWVudClcbiAgICAgKi9cbiAgICBuZWFyZXN0KHN0YXRlLCBldmVudCwgb3B0aW9ucykge1xuICAgICAgcmV0dXJuIGdldE5lYXJlc3RJdGVtKHN0YXRlLCBldmVudCwgb3B0aW9ucyk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiB4IG1vZGUgcmV0dXJucyB0aGUgZWxlbWVudHMgdGhhdCBoaXQtdGVzdCBhdCB0aGUgY3VycmVudCB4IGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhdGUgLSB0aGUgc3RhdGUgb2YgdGhlIHBsdWdpblxuICAgICAqIEBwYXJhbSB7Q2hhcnRFdmVudH0gZXZlbnQgLSB0aGUgZXZlbnQgd2UgYXJlIGZpbmQgdGhpbmdzIGF0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBpbnRlcmFjdGlvbiBvcHRpb25zIHRvIHVzZVxuICAgICAqIEByZXR1cm4ge0Fubm90YXRpb25FbGVtZW50W119IC0gZWxlbWVudHMgdGhhdCBhcmUgZm91bmRcbiAgICAgKi9cbiAgICB4KHN0YXRlLCBldmVudCwgb3B0aW9ucykge1xuICAgICAgcmV0dXJuIGZpbHRlckVsZW1lbnRzKHN0YXRlLCBldmVudCwge2ludGVyc2VjdDogb3B0aW9ucy5pbnRlcnNlY3QsIGF4aXM6ICd4J30pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiB5IG1vZGUgcmV0dXJucyB0aGUgZWxlbWVudHMgdGhhdCBoaXQtdGVzdCBhdCB0aGUgY3VycmVudCB5IGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhdGUgLSB0aGUgc3RhdGUgb2YgdGhlIHBsdWdpblxuICAgICAqIEBwYXJhbSB7Q2hhcnRFdmVudH0gZXZlbnQgLSB0aGUgZXZlbnQgd2UgYXJlIGZpbmQgdGhpbmdzIGF0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBpbnRlcmFjdGlvbiBvcHRpb25zIHRvIHVzZVxuICAgICAqIEByZXR1cm4ge0Fubm90YXRpb25FbGVtZW50W119IC0gZWxlbWVudHMgdGhhdCBhcmUgZm91bmRcbiAgICAgKi9cbiAgICB5KHN0YXRlLCBldmVudCwgb3B0aW9ucykge1xuICAgICAgcmV0dXJuIGZpbHRlckVsZW1lbnRzKHN0YXRlLCBldmVudCwge2ludGVyc2VjdDogb3B0aW9ucy5pbnRlcnNlY3QsIGF4aXM6ICd5J30pO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFsbCBlbGVtZW50cyB0aGF0IGhpdCB0ZXN0IGJhc2VkIG9uIHRoZSBldmVudCBwb3NpdGlvblxuICogQHBhcmFtIHtPYmplY3R9IHN0YXRlIC0gdGhlIHN0YXRlIG9mIHRoZSBwbHVnaW5cbiAqIEBwYXJhbSB7Q2hhcnRFdmVudH0gZXZlbnQgLSB0aGUgZXZlbnQgd2UgYXJlIGZpbmQgdGhpbmdzIGF0XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIGludGVyYWN0aW9uIG9wdGlvbnMgdG8gdXNlXG4gKiBAcmV0dXJuIHtBbm5vdGF0aW9uRWxlbWVudFtdfSAtIGVsZW1lbnRzIHRoYXQgYXJlIGZvdW5kXG4gKi9cbmZ1bmN0aW9uIGdldEVsZW1lbnRzKHN0YXRlLCBldmVudCwgb3B0aW9ucykge1xuICBjb25zdCBtb2RlID0gaW50ZXJhY3Rpb24ubW9kZXNbb3B0aW9ucy5tb2RlXSB8fCBpbnRlcmFjdGlvbi5tb2Rlcy5uZWFyZXN0O1xuICByZXR1cm4gbW9kZShzdGF0ZSwgZXZlbnQsIG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBpblJhbmdlQnlBeGlzKGVsZW1lbnQsIGV2ZW50LCBheGlzKSB7XG4gIGlmIChheGlzICE9PSAneCcgJiYgYXhpcyAhPT0gJ3knKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuaW5SYW5nZShldmVudC54LCBldmVudC55LCAneCcsIHRydWUpIHx8IGVsZW1lbnQuaW5SYW5nZShldmVudC54LCBldmVudC55LCAneScsIHRydWUpO1xuICB9XG4gIHJldHVybiBlbGVtZW50LmluUmFuZ2UoZXZlbnQueCwgZXZlbnQueSwgYXhpcywgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGdldFBvaW50QnlBeGlzKGV2ZW50LCBjZW50ZXIsIGF4aXMpIHtcbiAgaWYgKGF4aXMgPT09ICd4Jykge1xuICAgIHJldHVybiB7eDogZXZlbnQueCwgeTogY2VudGVyLnl9O1xuICB9IGVsc2UgaWYgKGF4aXMgPT09ICd5Jykge1xuICAgIHJldHVybiB7eDogY2VudGVyLngsIHk6IGV2ZW50Lnl9O1xuICB9XG4gIHJldHVybiBjZW50ZXI7XG59XG5cbmZ1bmN0aW9uIGZpbHRlckVsZW1lbnRzKHN0YXRlLCBldmVudCwgb3B0aW9ucykge1xuICByZXR1cm4gc3RhdGUudmlzaWJsZUVsZW1lbnRzLmZpbHRlcigoZWxlbWVudCkgPT4gb3B0aW9ucy5pbnRlcnNlY3QgPyBlbGVtZW50LmluUmFuZ2UoZXZlbnQueCwgZXZlbnQueSkgOiBpblJhbmdlQnlBeGlzKGVsZW1lbnQsIGV2ZW50LCBvcHRpb25zLmF4aXMpKTtcbn1cblxuZnVuY3Rpb24gZ2V0TmVhcmVzdEl0ZW0oc3RhdGUsIGV2ZW50LCBvcHRpb25zKSB7XG4gIGxldCBtaW5EaXN0YW5jZSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcblxuICByZXR1cm4gZmlsdGVyRWxlbWVudHMoc3RhdGUsIGV2ZW50LCBvcHRpb25zKVxuICAgIC5yZWR1Y2UoKG5lYXJlc3RJdGVtcywgZWxlbWVudCkgPT4ge1xuICAgICAgY29uc3QgY2VudGVyID0gZWxlbWVudC5nZXRDZW50ZXJQb2ludCgpO1xuICAgICAgY29uc3QgZXZlblBvaW50ID0gZ2V0UG9pbnRCeUF4aXMoZXZlbnQsIGNlbnRlciwgb3B0aW9ucy5heGlzKTtcbiAgICAgIGNvbnN0IGRpc3RhbmNlID0gZGlzdGFuY2VCZXR3ZWVuUG9pbnRzKGV2ZW50LCBldmVuUG9pbnQpO1xuICAgICAgaWYgKGRpc3RhbmNlIDwgbWluRGlzdGFuY2UpIHtcbiAgICAgICAgbmVhcmVzdEl0ZW1zID0gW2VsZW1lbnRdO1xuICAgICAgICBtaW5EaXN0YW5jZSA9IGRpc3RhbmNlO1xuICAgICAgfSBlbHNlIGlmIChkaXN0YW5jZSA9PT0gbWluRGlzdGFuY2UpIHtcbiAgICAgICAgLy8gQ2FuIGhhdmUgbXVsdGlwbGUgaXRlbXMgYXQgdGhlIHNhbWUgZGlzdGFuY2UgaW4gd2hpY2ggY2FzZSB3ZSBzb3J0IGJ5IHNpemVcbiAgICAgICAgbmVhcmVzdEl0ZW1zLnB1c2goZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZWFyZXN0SXRlbXM7XG4gICAgfSwgW10pXG4gICAgLnNvcnQoKGEsIGIpID0+IGEuX2luZGV4IC0gYi5faW5kZXgpXG4gICAgLnNsaWNlKDAsIDEpOyAvLyByZXR1cm4gb25seSB0aGUgdG9wIGl0ZW07XG59XG5cbmNvbnN0IGlzT2xkZXJQYXJ0ID0gKGFjdCwgcmVxKSA9PiByZXEgPiBhY3QgfHwgKGFjdC5sZW5ndGggPiByZXEubGVuZ3RoICYmIGFjdC5zbGljZSgwLCByZXEubGVuZ3RoKSA9PT0gcmVxKTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7IGltcG9ydCgnY2hhcnQuanMnKS5Qb2ludCB9IFBvaW50XG4gKiBAdHlwZWRlZiB7IGltcG9ydCgnY2hhcnQuanMnKS5JbnRlcmFjdGlvbkF4aXMgfSBJbnRlcmFjdGlvbkF4aXNcbiAqIEB0eXBlZGVmIHsgaW1wb3J0KCcuLi8uLi90eXBlcy9lbGVtZW50JykuQW5ub3RhdGlvbkVsZW1lbnQgfSBBbm5vdGF0aW9uRWxlbWVudFxuICovXG5cbmNvbnN0IEVQU0lMT04gPSAwLjAwMTtcbmNvbnN0IGNsYW1wID0gKHgsIGZyb20sIHRvKSA9PiBNYXRoLm1pbih0bywgTWF0aC5tYXgoZnJvbSwgeCkpO1xuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tXG4gKiBAcGFyYW0ge251bWJlcn0gdG9cbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGNsYW1wQWxsKG9iaiwgZnJvbSwgdG8pIHtcbiAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMob2JqKSkge1xuICAgIG9ialtrZXldID0gY2xhbXAob2JqW2tleV0sIGZyb20sIHRvKTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7UG9pbnR9IHBvaW50XG4gKiBAcGFyYW0ge1BvaW50fSBjZW50ZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXNcbiAqIEBwYXJhbSB7bnVtYmVyfSBib3JkZXJXaWR0aFxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGluUG9pbnRSYW5nZShwb2ludCwgY2VudGVyLCByYWRpdXMsIGJvcmRlcldpZHRoKSB7XG4gIGlmICghcG9pbnQgfHwgIWNlbnRlciB8fCByYWRpdXMgPD0gMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBoQm9yZGVyV2lkdGggPSBib3JkZXJXaWR0aCAvIDI7XG4gIHJldHVybiAoTWF0aC5wb3cocG9pbnQueCAtIGNlbnRlci54LCAyKSArIE1hdGgucG93KHBvaW50LnkgLSBjZW50ZXIueSwgMikpIDw9IE1hdGgucG93KHJhZGl1cyArIGhCb3JkZXJXaWR0aCwgMik7XG59XG5cbi8qKlxuICogQHBhcmFtIHtQb2ludH0gcG9pbnRcbiAqIEBwYXJhbSB7e3g6IG51bWJlciwgeTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyfX0gcmVjdFxuICogQHBhcmFtIHtJbnRlcmFjdGlvbkF4aXN9IGF4aXNcbiAqIEBwYXJhbSB7bnVtYmVyfSBib3JkZXJXaWR0aFxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGluQm94UmFuZ2UocG9pbnQsIHt4LCB5LCB4MiwgeTJ9LCBheGlzLCBib3JkZXJXaWR0aCkge1xuICBjb25zdCBoQm9yZGVyV2lkdGggPSBib3JkZXJXaWR0aCAvIDI7XG4gIGNvbnN0IGluUmFuZ2VYID0gcG9pbnQueCA+PSB4IC0gaEJvcmRlcldpZHRoIC0gRVBTSUxPTiAmJiBwb2ludC54IDw9IHgyICsgaEJvcmRlcldpZHRoICsgRVBTSUxPTjtcbiAgY29uc3QgaW5SYW5nZVkgPSBwb2ludC55ID49IHkgLSBoQm9yZGVyV2lkdGggLSBFUFNJTE9OICYmIHBvaW50LnkgPD0geTIgKyBoQm9yZGVyV2lkdGggKyBFUFNJTE9OO1xuICBpZiAoYXhpcyA9PT0gJ3gnKSB7XG4gICAgcmV0dXJuIGluUmFuZ2VYO1xuICB9IGVsc2UgaWYgKGF4aXMgPT09ICd5Jykge1xuICAgIHJldHVybiBpblJhbmdlWTtcbiAgfVxuICByZXR1cm4gaW5SYW5nZVggJiYgaW5SYW5nZVk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtBbm5vdGF0aW9uRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtib29sZWFufSB1c2VGaW5hbFBvc2l0aW9uXG4gKiBAcmV0dXJucyB7UG9pbnR9XG4gKi9cbmZ1bmN0aW9uIGdldEVsZW1lbnRDZW50ZXJQb2ludChlbGVtZW50LCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gIGNvbnN0IHtjZW50ZXJYLCBjZW50ZXJZfSA9IGVsZW1lbnQuZ2V0UHJvcHMoWydjZW50ZXJYJywgJ2NlbnRlclknXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gIHJldHVybiB7eDogY2VudGVyWCwgeTogY2VudGVyWX07XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHBrZ1xuICogQHBhcmFtIHtzdHJpbmd9IG1pblxuICogQHBhcmFtIHtzdHJpbmd9IHZlclxuICogQHBhcmFtIHtib29sZWFufSBbc3RyaWN0PXRydWVdXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gcmVxdWlyZVZlcnNpb24ocGtnLCBtaW4sIHZlciwgc3RyaWN0ID0gdHJ1ZSkge1xuICBjb25zdCBwYXJ0cyA9IHZlci5zcGxpdCgnLicpO1xuICBsZXQgaSA9IDA7XG4gIGZvciAoY29uc3QgcmVxIG9mIG1pbi5zcGxpdCgnLicpKSB7XG4gICAgY29uc3QgYWN0ID0gcGFydHNbaSsrXTtcbiAgICBpZiAocGFyc2VJbnQocmVxLCAxMCkgPCBwYXJzZUludChhY3QsIDEwKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGlmIChpc09sZGVyUGFydChhY3QsIHJlcSkpIHtcbiAgICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3BrZ30gdiR7dmVyfSBpcyBub3Qgc3VwcG9ydGVkLiB2JHttaW59IG9yIG5ld2VyIGlzIHJlcXVpcmVkLmApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuY29uc3QgaXNQZXJjZW50U3RyaW5nID0gKHMpID0+IHR5cGVvZiBzID09PSAnc3RyaW5nJyAmJiBzLmVuZHNXaXRoKCclJyk7XG5jb25zdCB0b1BlcmNlbnQgPSAocykgPT4gcGFyc2VGbG9hdChzKSAvIDEwMDtcbmNvbnN0IHRvUG9zaXRpdmVQZXJjZW50ID0gKHMpID0+IGNsYW1wKHRvUGVyY2VudChzKSwgMCwgMSk7XG5cbmNvbnN0IGJveEFwcGVyaW5nID0gKHgsIHkpID0+ICh7eCwgeSwgeDI6IHgsIHkyOiB5LCB3aWR0aDogMCwgaGVpZ2h0OiAwfSk7XG5jb25zdCBkZWZhdWx0SW5pdEFuaW1hdGlvbiA9IHtcbiAgYm94OiAocHJvcGVydGllcykgPT4gYm94QXBwZXJpbmcocHJvcGVydGllcy5jZW50ZXJYLCBwcm9wZXJ0aWVzLmNlbnRlclkpLFxuICBlbGxpcHNlOiAocHJvcGVydGllcykgPT4gKHtjZW50ZXJYOiBwcm9wZXJ0aWVzLmNlbnRlclgsIGNlbnRlclk6IHByb3BlcnRpZXMuY2VudGVyWCwgcmFkaXVzOiAwLCB3aWR0aDogMCwgaGVpZ2h0OiAwfSksXG4gIGxhYmVsOiAocHJvcGVydGllcykgPT4gYm94QXBwZXJpbmcocHJvcGVydGllcy5jZW50ZXJYLCBwcm9wZXJ0aWVzLmNlbnRlclkpLFxuICBsaW5lOiAocHJvcGVydGllcykgPT4gYm94QXBwZXJpbmcocHJvcGVydGllcy54LCBwcm9wZXJ0aWVzLnkpLFxuICBwb2ludDogKHByb3BlcnRpZXMpID0+ICh7Y2VudGVyWDogcHJvcGVydGllcy5jZW50ZXJYLCBjZW50ZXJZOiBwcm9wZXJ0aWVzLmNlbnRlclksIHJhZGl1czogMCwgd2lkdGg6IDAsIGhlaWdodDogMH0pLFxuICBwb2x5Z29uOiAocHJvcGVydGllcykgPT4gYm94QXBwZXJpbmcocHJvcGVydGllcy5jZW50ZXJYLCBwcm9wZXJ0aWVzLmNlbnRlclkpXG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHsgaW1wb3J0KFwiY2hhcnQuanNcIikuQ2hhcnQgfSBDaGFydFxuICogQHR5cGVkZWYgeyBpbXBvcnQoJy4uLy4uL3R5cGVzL2VsZW1lbnQnKS5Bbm5vdGF0aW9uQm94TW9kZWwgfSBBbm5vdGF0aW9uQm94TW9kZWxcbiAqIEB0eXBlZGVmIHsgaW1wb3J0KCcuLi8uLi90eXBlcy9lbGVtZW50JykuQW5ub3RhdGlvbkVsZW1lbnQgfSBBbm5vdGF0aW9uRWxlbWVudFxuICogQHR5cGVkZWYgeyBpbXBvcnQoJy4uLy4uL3R5cGVzL29wdGlvbnMnKS5Bbm5vdGF0aW9uUG9pbnRDb29yZGluYXRlcyB9IEFubm90YXRpb25Qb2ludENvb3JkaW5hdGVzXG4gKiBAdHlwZWRlZiB7IGltcG9ydCgnLi4vLi4vdHlwZXMvbGFiZWwnKS5Db3JlTGFiZWxPcHRpb25zIH0gQ29yZUxhYmVsT3B0aW9uc1xuICogQHR5cGVkZWYgeyBpbXBvcnQoJy4uLy4uL3R5cGVzL2xhYmVsJykuTGFiZWxQb3NpdGlvbk9iamVjdCB9IExhYmVsUG9zaXRpb25PYmplY3RcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBzaXplXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IHBvc2l0aW9uXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5mdW5jdGlvbiBnZXRSZWxhdGl2ZVBvc2l0aW9uKHNpemUsIHBvc2l0aW9uKSB7XG4gIGlmIChwb3NpdGlvbiA9PT0gJ3N0YXJ0Jykge1xuICAgIHJldHVybiAwO1xuICB9XG4gIGlmIChwb3NpdGlvbiA9PT0gJ2VuZCcpIHtcbiAgICByZXR1cm4gc2l6ZTtcbiAgfVxuICBpZiAoaXNQZXJjZW50U3RyaW5nKHBvc2l0aW9uKSkge1xuICAgIHJldHVybiB0b1Bvc2l0aXZlUGVyY2VudChwb3NpdGlvbikgKiBzaXplO1xuICB9XG4gIHJldHVybiBzaXplIC8gMjtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gc2l6ZVxuICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtib29sZWFufSBbcG9zaXRpdmVQZXJjZW50PXRydWVdXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5mdW5jdGlvbiBnZXRTaXplKHNpemUsIHZhbHVlLCBwb3NpdGl2ZVBlcmNlbnQgPSB0cnVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9IGVsc2UgaWYgKGlzUGVyY2VudFN0cmluZyh2YWx1ZSkpIHtcbiAgICByZXR1cm4gKHBvc2l0aXZlUGVyY2VudCA/IHRvUG9zaXRpdmVQZXJjZW50KHZhbHVlKSA6IHRvUGVyY2VudCh2YWx1ZSkpICogc2l6ZTtcbiAgfVxuICByZXR1cm4gc2l6ZTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3t4OiBudW1iZXIsIHdpZHRoOiBudW1iZXJ9fSBzaXplXG4gKiBAcGFyYW0ge0NvcmVMYWJlbE9wdGlvbnN9IG9wdGlvbnNcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGNhbGN1bGF0ZVRleHRBbGlnbm1lbnQoc2l6ZSwgb3B0aW9ucykge1xuICBjb25zdCB7eCwgd2lkdGh9ID0gc2l6ZTtcbiAgY29uc3QgdGV4dEFsaWduID0gb3B0aW9ucy50ZXh0QWxpZ247XG4gIGlmICh0ZXh0QWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgcmV0dXJuIHggKyB3aWR0aCAvIDI7XG4gIH0gZWxzZSBpZiAodGV4dEFsaWduID09PSAnZW5kJyB8fCB0ZXh0QWxpZ24gPT09ICdyaWdodCcpIHtcbiAgICByZXR1cm4geCArIHdpZHRoO1xuICB9XG4gIHJldHVybiB4O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7e3g6IG51bWJlcnxzdHJpbmcsIHk6IG51bWJlcnxzdHJpbmd9fHN0cmluZ3xudW1iZXJ9IHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IGRlZmF1bHRWYWx1ZVxuICogQHJldHVybnMge3t4OiBudW1iZXJ8c3RyaW5nLCB5OiBudW1iZXJ8c3RyaW5nfX1cbiAqL1xuZnVuY3Rpb24gdG9Qb3NpdGlvbih2YWx1ZSwgZGVmYXVsdFZhbHVlID0gJ2NlbnRlcicpIHtcbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiB7XG4gICAgICB4OiB2YWx1ZU9yRGVmYXVsdCh2YWx1ZS54LCBkZWZhdWx0VmFsdWUpLFxuICAgICAgeTogdmFsdWVPckRlZmF1bHQodmFsdWUueSwgZGVmYXVsdFZhbHVlKSxcbiAgICB9O1xuICB9XG4gIHZhbHVlID0gdmFsdWVPckRlZmF1bHQodmFsdWUsIGRlZmF1bHRWYWx1ZSk7XG4gIHJldHVybiB7XG4gICAgeDogdmFsdWUsXG4gICAgeTogdmFsdWVcbiAgfTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0Fubm90YXRpb25Qb2ludENvb3JkaW5hdGVzfSBvcHRpb25zXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNCb3VuZFRvUG9pbnQob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucyAmJiAoZGVmaW5lZChvcHRpb25zLnhWYWx1ZSkgfHwgZGVmaW5lZChvcHRpb25zLnlWYWx1ZSkpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0XG4gKiBAcGFyYW0ge0Fubm90YXRpb25Cb3hNb2RlbH0gcHJvcGVydGllc1xuICogQHBhcmFtIHtDb3JlQW5ub3RhdGlvbk9wdGlvbnN9IG9wdGlvbnNcbiAqIEByZXR1cm5zIHtBbm5vdGF0aW9uRWxlbWVudH1cbiAqL1xuZnVuY3Rpb24gaW5pdEFuaW1hdGlvblByb3BlcnRpZXMoY2hhcnQsIHByb3BlcnRpZXMsIG9wdGlvbnMpIHtcbiAgY29uc3QgaW5pdEFuaW0gPSBvcHRpb25zLmluaXQ7XG4gIGlmICghaW5pdEFuaW0pIHtcbiAgICByZXR1cm47XG4gIH0gZWxzZSBpZiAoaW5pdEFuaW0gPT09IHRydWUpIHtcbiAgICByZXR1cm4gYXBwbHlEZWZhdWx0KHByb3BlcnRpZXMsIG9wdGlvbnMpO1xuICB9XG4gIHJldHVybiBleGVjQ2FsbGJhY2soY2hhcnQsIHByb3BlcnRpZXMsIG9wdGlvbnMpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge0FycmF5fSBob29rc1xuICogQHBhcmFtIHtPYmplY3R9IGhvb2tzQ29udGFpbmVyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gbG9hZEhvb2tzKG9wdGlvbnMsIGhvb2tzLCBob29rc0NvbnRhaW5lcikge1xuICBsZXQgYWN0aXZhdGVkID0gZmFsc2U7XG4gIGhvb2tzLmZvckVhY2goaG9vayA9PiB7XG4gICAgaWYgKGlzRnVuY3Rpb24ob3B0aW9uc1tob29rXSkpIHtcbiAgICAgIGFjdGl2YXRlZCA9IHRydWU7XG4gICAgICBob29rc0NvbnRhaW5lcltob29rXSA9IG9wdGlvbnNbaG9va107XG4gICAgfSBlbHNlIGlmIChkZWZpbmVkKGhvb2tzQ29udGFpbmVyW2hvb2tdKSkge1xuICAgICAgZGVsZXRlIGhvb2tzQ29udGFpbmVyW2hvb2tdO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhY3RpdmF0ZWQ7XG59XG5cbmZ1bmN0aW9uIGFwcGx5RGVmYXVsdChwcm9wZXJ0aWVzLCBvcHRpb25zKSB7XG4gIGNvbnN0IHR5cGUgPSBvcHRpb25zLnR5cGUgfHwgJ2xpbmUnO1xuICByZXR1cm4gZGVmYXVsdEluaXRBbmltYXRpb25bdHlwZV0ocHJvcGVydGllcyk7XG59XG5cbmZ1bmN0aW9uIGV4ZWNDYWxsYmFjayhjaGFydCwgcHJvcGVydGllcywgb3B0aW9ucykge1xuICBjb25zdCByZXN1bHQgPSBjYWxsYmFjayhvcHRpb25zLmluaXQsIFt7Y2hhcnQsIHByb3BlcnRpZXMsIG9wdGlvbnN9XSk7XG4gIGlmIChyZXN1bHQgPT09IHRydWUpIHtcbiAgICByZXR1cm4gYXBwbHlEZWZhdWx0KHByb3BlcnRpZXMsIG9wdGlvbnMpO1xuICB9IGVsc2UgaWYgKGlzT2JqZWN0KHJlc3VsdCkpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG5cbmNvbnN0IHdpZHRoQ2FjaGUgPSBuZXcgTWFwKCk7XG5jb25zdCBub3RSYWRpdXMgPSAocmFkaXVzKSA9PiBpc05hTihyYWRpdXMpIHx8IHJhZGl1cyA8PSAwO1xuY29uc3QgZm9udHNLZXkgPSAoZm9udHMpID0+IGZvbnRzLnJlZHVjZShmdW5jdGlvbihwcmV2LCBpdGVtKSB7XG4gIHByZXYgKz0gaXRlbS5zdHJpbmc7XG4gIHJldHVybiBwcmV2O1xufSwgJycpO1xuXG4vKipcbiAqIEB0eXBlZGVmIHsgaW1wb3J0KCdjaGFydC5qcycpLlBvaW50IH0gUG9pbnRcbiAqIEB0eXBlZGVmIHsgaW1wb3J0KCcuLi8uLi90eXBlcy9sYWJlbCcpLkNvcmVMYWJlbE9wdGlvbnMgfSBDb3JlTGFiZWxPcHRpb25zXG4gKiBAdHlwZWRlZiB7IGltcG9ydCgnLi4vLi4vdHlwZXMvb3B0aW9ucycpLlBvaW50QW5ub3RhdGlvbk9wdGlvbnMgfSBQb2ludEFubm90YXRpb25PcHRpb25zXG4gKi9cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgY29udGVudCBpcyBhbiBpbWFnZSBvciBhIGNhbnZhcy5cbiAqIEBwYXJhbSB7Kn0gY29udGVudFxuICogQHJldHVybnMgYm9vbGVhbnx1bmRlZmluZWRcbiAqIEB0b2RvIG1vdmUgdGhpcyBmdW5jdGlvbiB0byBjaGFydC5qcyBoZWxwZXJzXG4gKi9cbmZ1bmN0aW9uIGlzSW1hZ2VPckNhbnZhcyhjb250ZW50KSB7XG4gIGlmIChjb250ZW50ICYmIHR5cGVvZiBjb250ZW50ID09PSAnb2JqZWN0Jykge1xuICAgIGNvbnN0IHR5cGUgPSBjb250ZW50LnRvU3RyaW5nKCk7XG4gICAgcmV0dXJuICh0eXBlID09PSAnW29iamVjdCBIVE1MSW1hZ2VFbGVtZW50XScgfHwgdHlwZSA9PT0gJ1tvYmplY3QgSFRNTENhbnZhc0VsZW1lbnRdJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBTZXQgdGhlIHRyYW5zbGF0aW9uIG9uIHRoZSBjYW52YXMgaWYgdGhlIHJvdGF0aW9uIG11c3QgYmUgYXBwbGllZC5cbiAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggLSBjaGFydCBjYW52YXMgY29udGV4dFxuICogQHBhcmFtIHtQb2ludH0gcG9pbnQgLSB0aGUgcG9pbnQgb2YgdHJhbnNsYXRpb25cbiAqIEBwYXJhbSB7bnVtYmVyfSByb3RhdGlvbiAtIHJvdGF0aW9uIChpbiBkZWdyZWVzKSB0byBhcHBseVxuICovXG5mdW5jdGlvbiB0cmFuc2xhdGUoY3R4LCB7eCwgeX0sIHJvdGF0aW9uKSB7XG4gIGlmIChyb3RhdGlvbikge1xuICAgIGN0eC50cmFuc2xhdGUoeCwgeSk7XG4gICAgY3R4LnJvdGF0ZSh0b1JhZGlhbnMocm90YXRpb24pKTtcbiAgICBjdHgudHJhbnNsYXRlKC14LCAteSk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybnMge2Jvb2xlYW58dW5kZWZpbmVkfVxuICovXG5mdW5jdGlvbiBzZXRCb3JkZXJTdHlsZShjdHgsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5ib3JkZXJXaWR0aCkge1xuICAgIGN0eC5saW5lQ2FwID0gb3B0aW9ucy5ib3JkZXJDYXBTdHlsZTtcbiAgICBjdHguc2V0TGluZURhc2gob3B0aW9ucy5ib3JkZXJEYXNoKTtcbiAgICBjdHgubGluZURhc2hPZmZzZXQgPSBvcHRpb25zLmJvcmRlckRhc2hPZmZzZXQ7XG4gICAgY3R4LmxpbmVKb2luID0gb3B0aW9ucy5ib3JkZXJKb2luU3R5bGU7XG4gICAgY3R4LmxpbmVXaWR0aCA9IG9wdGlvbnMuYm9yZGVyV2lkdGg7XG4gICAgY3R4LnN0cm9rZVN0eWxlID0gb3B0aW9ucy5ib3JkZXJDb2xvcjtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHhcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIHNldFNoYWRvd1N0eWxlKGN0eCwgb3B0aW9ucykge1xuICBjdHguc2hhZG93Q29sb3IgPSBvcHRpb25zLmJhY2tncm91bmRTaGFkb3dDb2xvcjtcbiAgY3R4LnNoYWRvd0JsdXIgPSBvcHRpb25zLnNoYWRvd0JsdXI7XG4gIGN0eC5zaGFkb3dPZmZzZXRYID0gb3B0aW9ucy5zaGFkb3dPZmZzZXRYO1xuICBjdHguc2hhZG93T2Zmc2V0WSA9IG9wdGlvbnMuc2hhZG93T2Zmc2V0WTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4XG4gKiBAcGFyYW0ge0NvcmVMYWJlbE9wdGlvbnN9IG9wdGlvbnNcbiAqIEByZXR1cm5zIHt7d2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXJ9fVxuICovXG5mdW5jdGlvbiBtZWFzdXJlTGFiZWxTaXplKGN0eCwgb3B0aW9ucykge1xuICBjb25zdCBjb250ZW50ID0gb3B0aW9ucy5jb250ZW50O1xuICBpZiAoaXNJbWFnZU9yQ2FudmFzKGNvbnRlbnQpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdpZHRoOiBnZXRTaXplKGNvbnRlbnQud2lkdGgsIG9wdGlvbnMud2lkdGgpLFxuICAgICAgaGVpZ2h0OiBnZXRTaXplKGNvbnRlbnQuaGVpZ2h0LCBvcHRpb25zLmhlaWdodClcbiAgICB9O1xuICB9XG4gIGNvbnN0IG9wdEZvbnQgPSBvcHRpb25zLmZvbnQ7XG4gIGNvbnN0IGZvbnRzID0gaXNBcnJheShvcHRGb250KSA/IG9wdEZvbnQubWFwKGYgPT4gdG9Gb250KGYpKSA6IFt0b0ZvbnQob3B0Rm9udCldO1xuICBjb25zdCBzdHJva2VXaWR0aCA9IG9wdGlvbnMudGV4dFN0cm9rZVdpZHRoO1xuICBjb25zdCBsaW5lcyA9IGlzQXJyYXkoY29udGVudCkgPyBjb250ZW50IDogW2NvbnRlbnRdO1xuICBjb25zdCBtYXBLZXkgPSBsaW5lcy5qb2luKCkgKyBmb250c0tleShmb250cykgKyBzdHJva2VXaWR0aCArIChjdHguX21lYXN1cmVUZXh0ID8gJy1zcHJpdGluZycgOiAnJyk7XG4gIGlmICghd2lkdGhDYWNoZS5oYXMobWFwS2V5KSkge1xuICAgIHdpZHRoQ2FjaGUuc2V0KG1hcEtleSwgY2FsY3VsYXRlTGFiZWxTaXplKGN0eCwgbGluZXMsIGZvbnRzLCBzdHJva2VXaWR0aCkpO1xuICB9XG4gIHJldHVybiB3aWR0aENhY2hlLmdldChtYXBLZXkpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHhcbiAqIEBwYXJhbSB7e3g6IG51bWJlciwgeTogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcn19IHJlY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIGRyYXdCb3goY3R4LCByZWN0LCBvcHRpb25zKSB7XG4gIGNvbnN0IHt4LCB5LCB3aWR0aCwgaGVpZ2h0fSA9IHJlY3Q7XG4gIGN0eC5zYXZlKCk7XG4gIHNldFNoYWRvd1N0eWxlKGN0eCwgb3B0aW9ucyk7XG4gIGNvbnN0IHN0cm9rZSA9IHNldEJvcmRlclN0eWxlKGN0eCwgb3B0aW9ucyk7XG4gIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLmJhY2tncm91bmRDb2xvcjtcbiAgY3R4LmJlZ2luUGF0aCgpO1xuICBhZGRSb3VuZGVkUmVjdFBhdGgoY3R4LCB7XG4gICAgeCwgeSwgdzogd2lkdGgsIGg6IGhlaWdodCxcbiAgICByYWRpdXM6IGNsYW1wQWxsKHRvVFJCTENvcm5lcnMob3B0aW9ucy5ib3JkZXJSYWRpdXMpLCAwLCBNYXRoLm1pbih3aWR0aCwgaGVpZ2h0KSAvIDIpXG4gIH0pO1xuICBjdHguY2xvc2VQYXRoKCk7XG4gIGN0eC5maWxsKCk7XG4gIGlmIChzdHJva2UpIHtcbiAgICBjdHguc2hhZG93Q29sb3IgPSBvcHRpb25zLmJvcmRlclNoYWRvd0NvbG9yO1xuICAgIGN0eC5zdHJva2UoKTtcbiAgfVxuICBjdHgucmVzdG9yZSgpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHhcbiAqIEBwYXJhbSB7e3g6IG51bWJlciwgeTogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcn19IHJlY3RcbiAqIEBwYXJhbSB7Q29yZUxhYmVsT3B0aW9uc30gb3B0aW9uc1xuICovXG5mdW5jdGlvbiBkcmF3TGFiZWwoY3R4LCByZWN0LCBvcHRpb25zKSB7XG4gIGNvbnN0IGNvbnRlbnQgPSBvcHRpb25zLmNvbnRlbnQ7XG4gIGlmIChpc0ltYWdlT3JDYW52YXMoY29udGVudCkpIHtcbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC5nbG9iYWxBbHBoYSA9IGdldE9wYWNpdHkob3B0aW9ucy5vcGFjaXR5LCBjb250ZW50LnN0eWxlLm9wYWNpdHkpO1xuICAgIGN0eC5kcmF3SW1hZ2UoY29udGVudCwgcmVjdC54LCByZWN0LnksIHJlY3Qud2lkdGgsIHJlY3QuaGVpZ2h0KTtcbiAgICBjdHgucmVzdG9yZSgpO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBsYWJlbHMgPSBpc0FycmF5KGNvbnRlbnQpID8gY29udGVudCA6IFtjb250ZW50XTtcbiAgY29uc3Qgb3B0Rm9udCA9IG9wdGlvbnMuZm9udDtcbiAgY29uc3QgZm9udHMgPSBpc0FycmF5KG9wdEZvbnQpID8gb3B0Rm9udC5tYXAoZiA9PiB0b0ZvbnQoZikpIDogW3RvRm9udChvcHRGb250KV07XG4gIGNvbnN0IG9wdENvbG9yID0gb3B0aW9ucy5jb2xvcjtcbiAgY29uc3QgY29sb3JzID0gaXNBcnJheShvcHRDb2xvcikgPyBvcHRDb2xvciA6IFtvcHRDb2xvcl07XG4gIGNvbnN0IHggPSBjYWxjdWxhdGVUZXh0QWxpZ25tZW50KHJlY3QsIG9wdGlvbnMpO1xuICBjb25zdCB5ID0gcmVjdC55ICsgb3B0aW9ucy50ZXh0U3Ryb2tlV2lkdGggLyAyO1xuICBjdHguc2F2ZSgpO1xuICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gIGN0eC50ZXh0QWxpZ24gPSBvcHRpb25zLnRleHRBbGlnbjtcbiAgaWYgKHNldFRleHRTdHJva2VTdHlsZShjdHgsIG9wdGlvbnMpKSB7XG4gICAgYXBwbHlMYWJlbERlY29yYXRpb24oY3R4LCB7eCwgeX0sIGxhYmVscywgZm9udHMpO1xuICB9XG4gIGFwcGx5TGFiZWxDb250ZW50KGN0eCwge3gsIHl9LCBsYWJlbHMsIHtmb250cywgY29sb3JzfSk7XG4gIGN0eC5yZXN0b3JlKCk7XG59XG5cbmZ1bmN0aW9uIHNldFRleHRTdHJva2VTdHlsZShjdHgsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMudGV4dFN0cm9rZVdpZHRoID4gMCkge1xuICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEzNjI3MTExL2RyYXdpbmctdGV4dC13aXRoLWFuLW91dGVyLXN0cm9rZS13aXRoLWh0bWw1cy1jYW52YXNcbiAgICBjdHgubGluZUpvaW4gPSAncm91bmQnO1xuICAgIGN0eC5taXRlckxpbWl0ID0gMjtcbiAgICBjdHgubGluZVdpZHRoID0gb3B0aW9ucy50ZXh0U3Ryb2tlV2lkdGg7XG4gICAgY3R4LnN0cm9rZVN0eWxlID0gb3B0aW9ucy50ZXh0U3Ryb2tlQ29sb3I7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4XG4gKiBAcGFyYW0ge3tyYWRpdXM6IG51bWJlciwgb3B0aW9uczogUG9pbnRBbm5vdGF0aW9uT3B0aW9uc319IGVsZW1lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gKiBAcGFyYW0ge251bWJlcn0geVxuICovXG5mdW5jdGlvbiBkcmF3UG9pbnQoY3R4LCBlbGVtZW50LCB4LCB5KSB7XG4gIGNvbnN0IHtyYWRpdXMsIG9wdGlvbnN9ID0gZWxlbWVudDtcbiAgY29uc3Qgc3R5bGUgPSBvcHRpb25zLnBvaW50U3R5bGU7XG4gIGNvbnN0IHJvdGF0aW9uID0gb3B0aW9ucy5yb3RhdGlvbjtcbiAgbGV0IHJhZCA9IChyb3RhdGlvbiB8fCAwKSAqIFJBRF9QRVJfREVHO1xuXG4gIGlmIChpc0ltYWdlT3JDYW52YXMoc3R5bGUpKSB7XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHgudHJhbnNsYXRlKHgsIHkpO1xuICAgIGN0eC5yb3RhdGUocmFkKTtcbiAgICBjdHguZHJhd0ltYWdlKHN0eWxlLCAtc3R5bGUud2lkdGggLyAyLCAtc3R5bGUuaGVpZ2h0IC8gMiwgc3R5bGUud2lkdGgsIHN0eWxlLmhlaWdodCk7XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKG5vdFJhZGl1cyhyYWRpdXMpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGRyYXdQb2ludFN0eWxlKGN0eCwge3gsIHksIHJhZGl1cywgcm90YXRpb24sIHN0eWxlLCByYWR9KTtcbn1cblxuZnVuY3Rpb24gZHJhd1BvaW50U3R5bGUoY3R4LCB7eCwgeSwgcmFkaXVzLCByb3RhdGlvbiwgc3R5bGUsIHJhZH0pIHtcbiAgbGV0IHhPZmZzZXQsIHlPZmZzZXQsIHNpemUsIGNvcm5lclJhZGl1cztcbiAgY3R4LmJlZ2luUGF0aCgpO1xuXG4gIHN3aXRjaCAoc3R5bGUpIHtcbiAgLy8gRGVmYXVsdCBpbmNsdWRlcyBjaXJjbGVcbiAgZGVmYXVsdDpcbiAgICBjdHguYXJjKHgsIHksIHJhZGl1cywgMCwgVEFVKTtcbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ3RyaWFuZ2xlJzpcbiAgICBjdHgubW92ZVRvKHggKyBNYXRoLnNpbihyYWQpICogcmFkaXVzLCB5IC0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cyk7XG4gICAgcmFkICs9IFRXT19USElSRFNfUEk7XG4gICAgY3R4LmxpbmVUbyh4ICsgTWF0aC5zaW4ocmFkKSAqIHJhZGl1cywgeSAtIE1hdGguY29zKHJhZCkgKiByYWRpdXMpO1xuICAgIHJhZCArPSBUV09fVEhJUkRTX1BJO1xuICAgIGN0eC5saW5lVG8oeCArIE1hdGguc2luKHJhZCkgKiByYWRpdXMsIHkgLSBNYXRoLmNvcyhyYWQpICogcmFkaXVzKTtcbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ3JlY3RSb3VuZGVkJzpcbiAgICAvLyBOT1RFOiB0aGUgcm91bmRlZCByZWN0IGltcGxlbWVudGF0aW9uIGNoYW5nZWQgdG8gdXNlIGBhcmNgIGluc3RlYWQgb2ZcbiAgICAvLyBgcXVhZHJhdGljQ3VydmVUb2Agc2luY2UgaXQgZ2VuZXJhdGVzIGJldHRlciByZXN1bHRzIHdoZW4gcmVjdCBpc1xuICAgIC8vIGFsbW9zdCBhIGNpcmNsZS4gMC41MTYgKGluc3RlYWQgb2YgMC41KSBwcm9kdWNlcyByZXN1bHRzIHdpdGggdmlzdWFsbHlcbiAgICAvLyBjbG9zZXIgcHJvcG9ydGlvbiB0byB0aGUgcHJldmlvdXMgaW1wbCBhbmQgaXQgaXMgaW5zY3JpYmVkIGluIHRoZVxuICAgIC8vIGNpcmNsZSB3aXRoIGByYWRpdXNgLiBGb3IgbW9yZSBkZXRhaWxzLCBzZWUgdGhlIGZvbGxvd2luZyBQUnM6XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzU1OTdcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9pc3N1ZXMvNTg1OFxuICAgIGNvcm5lclJhZGl1cyA9IHJhZGl1cyAqIDAuNTE2O1xuICAgIHNpemUgPSByYWRpdXMgLSBjb3JuZXJSYWRpdXM7XG4gICAgeE9mZnNldCA9IE1hdGguY29zKHJhZCArIFFVQVJURVJfUEkpICogc2l6ZTtcbiAgICB5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkICsgUVVBUlRFUl9QSSkgKiBzaXplO1xuICAgIGN0eC5hcmMoeCAtIHhPZmZzZXQsIHkgLSB5T2Zmc2V0LCBjb3JuZXJSYWRpdXMsIHJhZCAtIFBJLCByYWQgLSBIQUxGX1BJKTtcbiAgICBjdHguYXJjKHggKyB5T2Zmc2V0LCB5IC0geE9mZnNldCwgY29ybmVyUmFkaXVzLCByYWQgLSBIQUxGX1BJLCByYWQpO1xuICAgIGN0eC5hcmMoeCArIHhPZmZzZXQsIHkgKyB5T2Zmc2V0LCBjb3JuZXJSYWRpdXMsIHJhZCwgcmFkICsgSEFMRl9QSSk7XG4gICAgY3R4LmFyYyh4IC0geU9mZnNldCwgeSArIHhPZmZzZXQsIGNvcm5lclJhZGl1cywgcmFkICsgSEFMRl9QSSwgcmFkICsgUEkpO1xuICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICBicmVhaztcbiAgY2FzZSAncmVjdCc6XG4gICAgaWYgKCFyb3RhdGlvbikge1xuICAgICAgc2l6ZSA9IE1hdGguU1FSVDFfMiAqIHJhZGl1cztcbiAgICAgIGN0eC5yZWN0KHggLSBzaXplLCB5IC0gc2l6ZSwgMiAqIHNpemUsIDIgKiBzaXplKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByYWQgKz0gUVVBUlRFUl9QSTtcbiAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gIGNhc2UgJ3JlY3RSb3QnOlxuICAgIHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuICAgIHlPZmZzZXQgPSBNYXRoLnNpbihyYWQpICogcmFkaXVzO1xuICAgIGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXQsIHkgLSB5T2Zmc2V0KTtcbiAgICBjdHgubGluZVRvKHggKyB5T2Zmc2V0LCB5IC0geE9mZnNldCk7XG4gICAgY3R4LmxpbmVUbyh4ICsgeE9mZnNldCwgeSArIHlPZmZzZXQpO1xuICAgIGN0eC5saW5lVG8oeCAtIHlPZmZzZXQsIHkgKyB4T2Zmc2V0KTtcbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ2Nyb3NzUm90JzpcbiAgICByYWQgKz0gUVVBUlRFUl9QSTtcbiAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gIGNhc2UgJ2Nyb3NzJzpcbiAgICB4T2Zmc2V0ID0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cztcbiAgICB5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkKSAqIHJhZGl1cztcbiAgICBjdHgubW92ZVRvKHggLSB4T2Zmc2V0LCB5IC0geU9mZnNldCk7XG4gICAgY3R4LmxpbmVUbyh4ICsgeE9mZnNldCwgeSArIHlPZmZzZXQpO1xuICAgIGN0eC5tb3ZlVG8oeCArIHlPZmZzZXQsIHkgLSB4T2Zmc2V0KTtcbiAgICBjdHgubGluZVRvKHggLSB5T2Zmc2V0LCB5ICsgeE9mZnNldCk7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ3N0YXInOlxuICAgIHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuICAgIHlPZmZzZXQgPSBNYXRoLnNpbihyYWQpICogcmFkaXVzO1xuICAgIGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXQsIHkgLSB5T2Zmc2V0KTtcbiAgICBjdHgubGluZVRvKHggKyB4T2Zmc2V0LCB5ICsgeU9mZnNldCk7XG4gICAgY3R4Lm1vdmVUbyh4ICsgeU9mZnNldCwgeSAtIHhPZmZzZXQpO1xuICAgIGN0eC5saW5lVG8oeCAtIHlPZmZzZXQsIHkgKyB4T2Zmc2V0KTtcbiAgICByYWQgKz0gUVVBUlRFUl9QSTtcbiAgICB4T2Zmc2V0ID0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cztcbiAgICB5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkKSAqIHJhZGl1cztcbiAgICBjdHgubW92ZVRvKHggLSB4T2Zmc2V0LCB5IC0geU9mZnNldCk7XG4gICAgY3R4LmxpbmVUbyh4ICsgeE9mZnNldCwgeSArIHlPZmZzZXQpO1xuICAgIGN0eC5tb3ZlVG8oeCArIHlPZmZzZXQsIHkgLSB4T2Zmc2V0KTtcbiAgICBjdHgubGluZVRvKHggLSB5T2Zmc2V0LCB5ICsgeE9mZnNldCk7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ2xpbmUnOlxuICAgIHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuICAgIHlPZmZzZXQgPSBNYXRoLnNpbihyYWQpICogcmFkaXVzO1xuICAgIGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXQsIHkgLSB5T2Zmc2V0KTtcbiAgICBjdHgubGluZVRvKHggKyB4T2Zmc2V0LCB5ICsgeU9mZnNldCk7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ2Rhc2gnOlxuICAgIGN0eC5tb3ZlVG8oeCwgeSk7XG4gICAgY3R4LmxpbmVUbyh4ICsgTWF0aC5jb3MocmFkKSAqIHJhZGl1cywgeSArIE1hdGguc2luKHJhZCkgKiByYWRpdXMpO1xuICAgIGJyZWFrO1xuICB9XG5cbiAgY3R4LmZpbGwoKTtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlTGFiZWxTaXplKGN0eCwgbGluZXMsIGZvbnRzLCBzdHJva2VXaWR0aCkge1xuICBjdHguc2F2ZSgpO1xuICBjb25zdCBjb3VudCA9IGxpbmVzLmxlbmd0aDtcbiAgbGV0IHdpZHRoID0gMDtcbiAgbGV0IGhlaWdodCA9IHN0cm9rZVdpZHRoO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICBjb25zdCBmb250ID0gZm9udHNbTWF0aC5taW4oaSwgZm9udHMubGVuZ3RoIC0gMSldO1xuICAgIGN0eC5mb250ID0gZm9udC5zdHJpbmc7XG4gICAgY29uc3QgdGV4dCA9IGxpbmVzW2ldO1xuICAgIHdpZHRoID0gTWF0aC5tYXgod2lkdGgsIGN0eC5tZWFzdXJlVGV4dCh0ZXh0KS53aWR0aCArIHN0cm9rZVdpZHRoKTtcbiAgICBoZWlnaHQgKz0gZm9udC5saW5lSGVpZ2h0O1xuICB9XG4gIGN0eC5yZXN0b3JlKCk7XG4gIHJldHVybiB7d2lkdGgsIGhlaWdodH07XG59XG5cbmZ1bmN0aW9uIGFwcGx5TGFiZWxEZWNvcmF0aW9uKGN0eCwge3gsIHl9LCBsYWJlbHMsIGZvbnRzKSB7XG4gIGN0eC5iZWdpblBhdGgoKTtcbiAgbGV0IGxocyA9IDA7XG4gIGxhYmVscy5mb3JFYWNoKGZ1bmN0aW9uKGwsIGkpIHtcbiAgICBjb25zdCBmID0gZm9udHNbTWF0aC5taW4oaSwgZm9udHMubGVuZ3RoIC0gMSldO1xuICAgIGNvbnN0IGxoID0gZi5saW5lSGVpZ2h0O1xuICAgIGN0eC5mb250ID0gZi5zdHJpbmc7XG4gICAgY3R4LnN0cm9rZVRleHQobCwgeCwgeSArIGxoIC8gMiArIGxocyk7XG4gICAgbGhzICs9IGxoO1xuICB9KTtcbiAgY3R4LnN0cm9rZSgpO1xufVxuXG5mdW5jdGlvbiBhcHBseUxhYmVsQ29udGVudChjdHgsIHt4LCB5fSwgbGFiZWxzLCB7Zm9udHMsIGNvbG9yc30pIHtcbiAgbGV0IGxocyA9IDA7XG4gIGxhYmVscy5mb3JFYWNoKGZ1bmN0aW9uKGwsIGkpIHtcbiAgICBjb25zdCBjID0gY29sb3JzW01hdGgubWluKGksIGNvbG9ycy5sZW5ndGggLSAxKV07XG4gICAgY29uc3QgZiA9IGZvbnRzW01hdGgubWluKGksIGZvbnRzLmxlbmd0aCAtIDEpXTtcbiAgICBjb25zdCBsaCA9IGYubGluZUhlaWdodDtcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4LmZvbnQgPSBmLnN0cmluZztcbiAgICBjdHguZmlsbFN0eWxlID0gYztcbiAgICBjdHguZmlsbFRleHQobCwgeCwgeSArIGxoIC8gMiArIGxocyk7XG4gICAgbGhzICs9IGxoO1xuICAgIGN0eC5maWxsKCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRPcGFjaXR5KHZhbHVlLCBlbGVtZW50VmFsdWUpIHtcbiAgY29uc3Qgb3BhY2l0eSA9IGlzTnVtYmVyKHZhbHVlKSA/IHZhbHVlIDogZWxlbWVudFZhbHVlO1xuICByZXR1cm4gaXNOdW1iZXIob3BhY2l0eSkgPyBjbGFtcChvcGFjaXR5LCAwLCAxKSA6IDE7XG59XG5cbmNvbnN0IGxpbWl0ZWRMaW5lU2NhbGUgPSB7XG4gIHhTY2FsZUlEOiB7bWluOiAneE1pbicsIG1heDogJ3hNYXgnLCBzdGFydDogJ2xlZnQnLCBlbmQ6ICdyaWdodCcsIHN0YXJ0UHJvcDogJ3gnLCBlbmRQcm9wOiAneDInfSxcbiAgeVNjYWxlSUQ6IHttaW46ICd5TWluJywgbWF4OiAneU1heCcsIHN0YXJ0OiAnYm90dG9tJywgZW5kOiAndG9wJywgc3RhcnRQcm9wOiAneScsIGVuZFByb3A6ICd5Mid9XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHsgaW1wb3J0KFwiY2hhcnQuanNcIikuQ2hhcnQgfSBDaGFydFxuICogQHR5cGVkZWYgeyBpbXBvcnQoXCJjaGFydC5qc1wiKS5TY2FsZSB9IFNjYWxlXG4gKiBAdHlwZWRlZiB7IGltcG9ydChcImNoYXJ0LmpzXCIpLlBvaW50IH0gUG9pbnRcbiAqIEB0eXBlZGVmIHsgaW1wb3J0KCcuLi8uLi90eXBlcy9lbGVtZW50JykuQW5ub3RhdGlvbkJveE1vZGVsIH0gQW5ub3RhdGlvbkJveE1vZGVsXG4gKiBAdHlwZWRlZiB7IGltcG9ydCgnLi4vLi4vdHlwZXMvb3B0aW9ucycpLkNvcmVBbm5vdGF0aW9uT3B0aW9ucyB9IENvcmVBbm5vdGF0aW9uT3B0aW9uc1xuICogQHR5cGVkZWYgeyBpbXBvcnQoJy4uLy4uL3R5cGVzL29wdGlvbnMnKS5MaW5lQW5ub3RhdGlvbk9wdGlvbnMgfSBMaW5lQW5ub3RhdGlvbk9wdGlvbnNcbiAqIEB0eXBlZGVmIHsgaW1wb3J0KCcuLi8uLi90eXBlcy9vcHRpb25zJykuUG9pbnRBbm5vdGF0aW9uT3B0aW9ucyB9IFBvaW50QW5ub3RhdGlvbk9wdGlvbnNcbiAqIEB0eXBlZGVmIHsgaW1wb3J0KCcuLi8uLi90eXBlcy9vcHRpb25zJykuUG9seWdvbkFubm90YXRpb25PcHRpb25zIH0gUG9seWdvbkFubm90YXRpb25PcHRpb25zXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge1NjYWxlfSBzY2FsZVxuICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXJ9IGZhbGxiYWNrXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5mdW5jdGlvbiBzY2FsZVZhbHVlKHNjYWxlLCB2YWx1ZSwgZmFsbGJhY2spIHtcbiAgdmFsdWUgPSB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInID8gdmFsdWUgOiBzY2FsZS5wYXJzZSh2YWx1ZSk7XG4gIHJldHVybiBpc0Zpbml0ZSh2YWx1ZSkgPyBzY2FsZS5nZXRQaXhlbEZvclZhbHVlKHZhbHVlKSA6IGZhbGxiYWNrO1xufVxuXG4vKipcbiAqIFNlYXJjaCB0aGUgc2NhbGUgZGVmaW5lZCBpbiBjaGFydGpzIGJ5IHRoZSBheGlzIHJlbGF0ZWQgdG8gdGhlIGFubm90YXRpb24gb3B0aW9ucyBrZXkuXG4gKiBAcGFyYW0ge3sgW2tleTogc3RyaW5nXTogU2NhbGUgfX0gc2NhbGVzXG4gKiBAcGFyYW0ge0NvcmVBbm5vdGF0aW9uT3B0aW9uc30gb3B0aW9uc1xuICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gcmV0cmlldmVTY2FsZUlEKHNjYWxlcywgb3B0aW9ucywga2V5KSB7XG4gIGNvbnN0IHNjYWxlSUQgPSBvcHRpb25zW2tleV07XG4gIGlmIChzY2FsZUlEIHx8IGtleSA9PT0gJ3NjYWxlSUQnKSB7XG4gICAgcmV0dXJuIHNjYWxlSUQ7XG4gIH1cbiAgY29uc3QgYXhpcyA9IGtleS5jaGFyQXQoMCk7XG4gIGNvbnN0IGF4ZXMgPSBPYmplY3QudmFsdWVzKHNjYWxlcykuZmlsdGVyKChzY2FsZSkgPT4gc2NhbGUuYXhpcyAmJiBzY2FsZS5heGlzID09PSBheGlzKTtcbiAgaWYgKGF4ZXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGF4ZXNbMF0uaWQ7XG4gIH1cbiAgcmV0dXJuIGF4aXM7XG59XG5cbi8qKlxuICogQHBhcmFtIHtTY2FsZX0gc2NhbGVcbiAqIEBwYXJhbSB7e21pbjogbnVtYmVyLCBtYXg6IG51bWJlciwgc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXJ9fSBvcHRpb25zXG4gKiBAcmV0dXJucyB7e3N0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyfXx1bmRlZmluZWR9XG4gKi9cbmZ1bmN0aW9uIGdldERpbWVuc2lvbkJ5U2NhbGUoc2NhbGUsIG9wdGlvbnMpIHtcbiAgaWYgKHNjYWxlKSB7XG4gICAgY29uc3QgcmV2ZXJzZSA9IHNjYWxlLm9wdGlvbnMucmV2ZXJzZTtcbiAgICBjb25zdCBzdGFydCA9IHNjYWxlVmFsdWUoc2NhbGUsIG9wdGlvbnMubWluLCByZXZlcnNlID8gb3B0aW9ucy5lbmQgOiBvcHRpb25zLnN0YXJ0KTtcbiAgICBjb25zdCBlbmQgPSBzY2FsZVZhbHVlKHNjYWxlLCBvcHRpb25zLm1heCwgcmV2ZXJzZSA/IG9wdGlvbnMuc3RhcnQgOiBvcHRpb25zLmVuZCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXJ0LFxuICAgICAgZW5kXG4gICAgfTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0XG4gKiBAcGFyYW0ge0NvcmVBbm5vdGF0aW9uT3B0aW9uc30gb3B0aW9uc1xuICogQHJldHVybnMge1BvaW50fVxuICovXG5mdW5jdGlvbiBnZXRDaGFydFBvaW50KGNoYXJ0LCBvcHRpb25zKSB7XG4gIGNvbnN0IHtjaGFydEFyZWEsIHNjYWxlc30gPSBjaGFydDtcbiAgY29uc3QgeFNjYWxlID0gc2NhbGVzW3JldHJpZXZlU2NhbGVJRChzY2FsZXMsIG9wdGlvbnMsICd4U2NhbGVJRCcpXTtcbiAgY29uc3QgeVNjYWxlID0gc2NhbGVzW3JldHJpZXZlU2NhbGVJRChzY2FsZXMsIG9wdGlvbnMsICd5U2NhbGVJRCcpXTtcbiAgbGV0IHggPSBjaGFydEFyZWEud2lkdGggLyAyO1xuICBsZXQgeSA9IGNoYXJ0QXJlYS5oZWlnaHQgLyAyO1xuXG4gIGlmICh4U2NhbGUpIHtcbiAgICB4ID0gc2NhbGVWYWx1ZSh4U2NhbGUsIG9wdGlvbnMueFZhbHVlLCB4U2NhbGUubGVmdCArIHhTY2FsZS53aWR0aCAvIDIpO1xuICB9XG5cbiAgaWYgKHlTY2FsZSkge1xuICAgIHkgPSBzY2FsZVZhbHVlKHlTY2FsZSwgb3B0aW9ucy55VmFsdWUsIHlTY2FsZS50b3AgKyB5U2NhbGUuaGVpZ2h0IC8gMik7XG4gIH1cbiAgcmV0dXJuIHt4LCB5fTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0NoYXJ0fSBjaGFydFxuICogQHBhcmFtIHtDb3JlQW5ub3RhdGlvbk9wdGlvbnN9IG9wdGlvbnNcbiAqIEByZXR1cm5zIHtBbm5vdGF0aW9uQm94TW9kZWx9XG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVCb3hQcm9wZXJ0aWVzKGNoYXJ0LCBvcHRpb25zKSB7XG4gIGNvbnN0IHNjYWxlcyA9IGNoYXJ0LnNjYWxlcztcbiAgY29uc3QgeFNjYWxlID0gc2NhbGVzW3JldHJpZXZlU2NhbGVJRChzY2FsZXMsIG9wdGlvbnMsICd4U2NhbGVJRCcpXTtcbiAgY29uc3QgeVNjYWxlID0gc2NhbGVzW3JldHJpZXZlU2NhbGVJRChzY2FsZXMsIG9wdGlvbnMsICd5U2NhbGVJRCcpXTtcblxuICBpZiAoIXhTY2FsZSAmJiAheVNjYWxlKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgbGV0IHtsZWZ0OiB4LCByaWdodDogeDJ9ID0geFNjYWxlIHx8IGNoYXJ0LmNoYXJ0QXJlYTtcbiAgbGV0IHt0b3A6IHksIGJvdHRvbTogeTJ9ID0geVNjYWxlIHx8IGNoYXJ0LmNoYXJ0QXJlYTtcbiAgY29uc3QgeERpbSA9IGdldENoYXJ0RGltZW5zaW9uQnlTY2FsZSh4U2NhbGUsIHttaW46IG9wdGlvbnMueE1pbiwgbWF4OiBvcHRpb25zLnhNYXgsIHN0YXJ0OiB4LCBlbmQ6IHgyfSk7XG4gIHggPSB4RGltLnN0YXJ0O1xuICB4MiA9IHhEaW0uZW5kO1xuICBjb25zdCB5RGltID0gZ2V0Q2hhcnREaW1lbnNpb25CeVNjYWxlKHlTY2FsZSwge21pbjogb3B0aW9ucy55TWluLCBtYXg6IG9wdGlvbnMueU1heCwgc3RhcnQ6IHkyLCBlbmQ6IHl9KTtcbiAgeSA9IHlEaW0uc3RhcnQ7XG4gIHkyID0geURpbS5lbmQ7XG5cbiAgcmV0dXJuIHtcbiAgICB4LFxuICAgIHksXG4gICAgeDIsXG4gICAgeTIsXG4gICAgd2lkdGg6IHgyIC0geCxcbiAgICBoZWlnaHQ6IHkyIC0geSxcbiAgICBjZW50ZXJYOiB4ICsgKHgyIC0geCkgLyAyLFxuICAgIGNlbnRlclk6IHkgKyAoeTIgLSB5KSAvIDJcbiAgfTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0NoYXJ0fSBjaGFydFxuICogQHBhcmFtIHtQb2ludEFubm90YXRpb25PcHRpb25zfFBvbHlnb25Bbm5vdGF0aW9uT3B0aW9uc30gb3B0aW9uc1xuICogQHJldHVybnMge0Fubm90YXRpb25Cb3hNb2RlbH1cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZVBvaW50UHJvcGVydGllcyhjaGFydCwgb3B0aW9ucykge1xuICBpZiAoIWlzQm91bmRUb1BvaW50KG9wdGlvbnMpKSB7XG4gICAgY29uc3QgYm94ID0gcmVzb2x2ZUJveFByb3BlcnRpZXMoY2hhcnQsIG9wdGlvbnMpO1xuICAgIGxldCByYWRpdXMgPSBvcHRpb25zLnJhZGl1cztcbiAgICBpZiAoIXJhZGl1cyB8fCBpc05hTihyYWRpdXMpKSB7XG4gICAgICByYWRpdXMgPSBNYXRoLm1pbihib3gud2lkdGgsIGJveC5oZWlnaHQpIC8gMjtcbiAgICAgIG9wdGlvbnMucmFkaXVzID0gcmFkaXVzO1xuICAgIH1cbiAgICBjb25zdCBzaXplID0gcmFkaXVzICogMjtcbiAgICBjb25zdCBhZGp1c3RDZW50ZXJYID0gYm94LmNlbnRlclggKyBvcHRpb25zLnhBZGp1c3Q7XG4gICAgY29uc3QgYWRqdXN0Q2VudGVyWSA9IGJveC5jZW50ZXJZICsgb3B0aW9ucy55QWRqdXN0O1xuICAgIHJldHVybiB7XG4gICAgICB4OiBhZGp1c3RDZW50ZXJYIC0gcmFkaXVzLFxuICAgICAgeTogYWRqdXN0Q2VudGVyWSAtIHJhZGl1cyxcbiAgICAgIHgyOiBhZGp1c3RDZW50ZXJYICsgcmFkaXVzLFxuICAgICAgeTI6IGFkanVzdENlbnRlclkgKyByYWRpdXMsXG4gICAgICBjZW50ZXJYOiBhZGp1c3RDZW50ZXJYLFxuICAgICAgY2VudGVyWTogYWRqdXN0Q2VudGVyWSxcbiAgICAgIHdpZHRoOiBzaXplLFxuICAgICAgaGVpZ2h0OiBzaXplLFxuICAgICAgcmFkaXVzXG4gICAgfTtcbiAgfVxuICByZXR1cm4gZ2V0Q2hhcnRDaXJjbGUoY2hhcnQsIG9wdGlvbnMpO1xufVxuLyoqXG4gKiBAcGFyYW0ge0NoYXJ0fSBjaGFydFxuICogQHBhcmFtIHtMaW5lQW5ub3RhdGlvbk9wdGlvbnN9IG9wdGlvbnNcbiAqIEByZXR1cm5zIHtBbm5vdGF0aW9uQm94TW9kZWx9XG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVMaW5lUHJvcGVydGllcyhjaGFydCwgb3B0aW9ucykge1xuICBjb25zdCB7c2NhbGVzLCBjaGFydEFyZWF9ID0gY2hhcnQ7XG4gIGNvbnN0IHNjYWxlID0gc2NhbGVzW29wdGlvbnMuc2NhbGVJRF07XG4gIGNvbnN0IGFyZWEgPSB7eDogY2hhcnRBcmVhLmxlZnQsIHk6IGNoYXJ0QXJlYS50b3AsIHgyOiBjaGFydEFyZWEucmlnaHQsIHkyOiBjaGFydEFyZWEuYm90dG9tfTtcblxuICBpZiAoc2NhbGUpIHtcbiAgICByZXNvbHZlRnVsbExpbmVQcm9wZXJ0aWVzKHNjYWxlLCBhcmVhLCBvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICByZXNvbHZlTGltaXRlZExpbmVQcm9wZXJ0aWVzKHNjYWxlcywgYXJlYSwgb3B0aW9ucyk7XG4gIH1cbiAgcmV0dXJuIGFyZWE7XG59XG5cbi8qKlxuICogQHBhcmFtIHtDaGFydH0gY2hhcnRcbiAqIEBwYXJhbSB7Q29yZUFubm90YXRpb25PcHRpb25zfSBvcHRpb25zXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtjZW50ZXJCYXNlZD1mYWxzZV1cbiAqIEByZXR1cm5zIHtBbm5vdGF0aW9uQm94TW9kZWx9XG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVCb3hBbmRMYWJlbFByb3BlcnRpZXMoY2hhcnQsIG9wdGlvbnMpIHtcbiAgY29uc3QgcHJvcGVydGllcyA9IHJlc29sdmVCb3hQcm9wZXJ0aWVzKGNoYXJ0LCBvcHRpb25zKTtcbiAgcHJvcGVydGllcy5pbml0UHJvcGVydGllcyA9IGluaXRBbmltYXRpb25Qcm9wZXJ0aWVzKGNoYXJ0LCBwcm9wZXJ0aWVzLCBvcHRpb25zKTtcbiAgcHJvcGVydGllcy5lbGVtZW50cyA9IFt7XG4gICAgdHlwZTogJ2xhYmVsJyxcbiAgICBvcHRpb25TY29wZTogJ2xhYmVsJyxcbiAgICBwcm9wZXJ0aWVzOiByZXNvbHZlTGFiZWxFbGVtZW50UHJvcGVydGllcyQxKGNoYXJ0LCBwcm9wZXJ0aWVzLCBvcHRpb25zKSxcbiAgICBpbml0UHJvcGVydGllczogcHJvcGVydGllcy5pbml0UHJvcGVydGllc1xuICB9XTtcbiAgcmV0dXJuIHByb3BlcnRpZXM7XG59XG5cbmZ1bmN0aW9uIGdldENoYXJ0Q2lyY2xlKGNoYXJ0LCBvcHRpb25zKSB7XG4gIGNvbnN0IHBvaW50ID0gZ2V0Q2hhcnRQb2ludChjaGFydCwgb3B0aW9ucyk7XG4gIGNvbnN0IHNpemUgPSBvcHRpb25zLnJhZGl1cyAqIDI7XG4gIHJldHVybiB7XG4gICAgeDogcG9pbnQueCAtIG9wdGlvbnMucmFkaXVzICsgb3B0aW9ucy54QWRqdXN0LFxuICAgIHk6IHBvaW50LnkgLSBvcHRpb25zLnJhZGl1cyArIG9wdGlvbnMueUFkanVzdCxcbiAgICB4MjogcG9pbnQueCArIG9wdGlvbnMucmFkaXVzICsgb3B0aW9ucy54QWRqdXN0LFxuICAgIHkyOiBwb2ludC55ICsgb3B0aW9ucy5yYWRpdXMgKyBvcHRpb25zLnlBZGp1c3QsXG4gICAgY2VudGVyWDogcG9pbnQueCArIG9wdGlvbnMueEFkanVzdCxcbiAgICBjZW50ZXJZOiBwb2ludC55ICsgb3B0aW9ucy55QWRqdXN0LFxuICAgIHJhZGl1czogb3B0aW9ucy5yYWRpdXMsXG4gICAgd2lkdGg6IHNpemUsXG4gICAgaGVpZ2h0OiBzaXplXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldENoYXJ0RGltZW5zaW9uQnlTY2FsZShzY2FsZSwgb3B0aW9ucykge1xuICBjb25zdCByZXN1bHQgPSBnZXREaW1lbnNpb25CeVNjYWxlKHNjYWxlLCBvcHRpb25zKSB8fCBvcHRpb25zO1xuICByZXR1cm4ge1xuICAgIHN0YXJ0OiBNYXRoLm1pbihyZXN1bHQuc3RhcnQsIHJlc3VsdC5lbmQpLFxuICAgIGVuZDogTWF0aC5tYXgocmVzdWx0LnN0YXJ0LCByZXN1bHQuZW5kKVxuICB9O1xufVxuXG5mdW5jdGlvbiByZXNvbHZlRnVsbExpbmVQcm9wZXJ0aWVzKHNjYWxlLCBhcmVhLCBvcHRpb25zKSB7XG4gIGNvbnN0IG1pbiA9IHNjYWxlVmFsdWUoc2NhbGUsIG9wdGlvbnMudmFsdWUsIE5hTik7XG4gIGNvbnN0IG1heCA9IHNjYWxlVmFsdWUoc2NhbGUsIG9wdGlvbnMuZW5kVmFsdWUsIG1pbik7XG4gIGlmIChzY2FsZS5pc0hvcml6b250YWwoKSkge1xuICAgIGFyZWEueCA9IG1pbjtcbiAgICBhcmVhLngyID0gbWF4O1xuICB9IGVsc2Uge1xuICAgIGFyZWEueSA9IG1pbjtcbiAgICBhcmVhLnkyID0gbWF4O1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVMaW1pdGVkTGluZVByb3BlcnRpZXMoc2NhbGVzLCBhcmVhLCBvcHRpb25zKSB7XG4gIGZvciAoY29uc3Qgc2NhbGVJZCBvZiBPYmplY3Qua2V5cyhsaW1pdGVkTGluZVNjYWxlKSkge1xuICAgIGNvbnN0IHNjYWxlID0gc2NhbGVzW3JldHJpZXZlU2NhbGVJRChzY2FsZXMsIG9wdGlvbnMsIHNjYWxlSWQpXTtcbiAgICBpZiAoc2NhbGUpIHtcbiAgICAgIGNvbnN0IHttaW4sIG1heCwgc3RhcnQsIGVuZCwgc3RhcnRQcm9wLCBlbmRQcm9wfSA9IGxpbWl0ZWRMaW5lU2NhbGVbc2NhbGVJZF07XG4gICAgICBjb25zdCBkaW0gPSBnZXREaW1lbnNpb25CeVNjYWxlKHNjYWxlLCB7bWluOiBvcHRpb25zW21pbl0sIG1heDogb3B0aW9uc1ttYXhdLCBzdGFydDogc2NhbGVbc3RhcnRdLCBlbmQ6IHNjYWxlW2VuZF19KTtcbiAgICAgIGFyZWFbc3RhcnRQcm9wXSA9IGRpbS5zdGFydDtcbiAgICAgIGFyZWFbZW5kUHJvcF0gPSBkaW0uZW5kO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVYKHtwcm9wZXJ0aWVzLCBvcHRpb25zfSwgbGFiZWxTaXplLCBwb3NpdGlvbiwgcGFkZGluZykge1xuICBjb25zdCB7eDogc3RhcnQsIHgyOiBlbmQsIHdpZHRoOiBzaXplfSA9IHByb3BlcnRpZXM7XG4gIHJldHVybiBjYWxjdWxhdGVQb3NpdGlvbiQxKHtzdGFydCwgZW5kLCBzaXplLCBib3JkZXJXaWR0aDogb3B0aW9ucy5ib3JkZXJXaWR0aH0sIHtcbiAgICBwb3NpdGlvbjogcG9zaXRpb24ueCxcbiAgICBwYWRkaW5nOiB7c3RhcnQ6IHBhZGRpbmcubGVmdCwgZW5kOiBwYWRkaW5nLnJpZ2h0fSxcbiAgICBhZGp1c3Q6IG9wdGlvbnMubGFiZWwueEFkanVzdCxcbiAgICBzaXplOiBsYWJlbFNpemUud2lkdGhcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZVkoe3Byb3BlcnRpZXMsIG9wdGlvbnN9LCBsYWJlbFNpemUsIHBvc2l0aW9uLCBwYWRkaW5nKSB7XG4gIGNvbnN0IHt5OiBzdGFydCwgeTI6IGVuZCwgaGVpZ2h0OiBzaXplfSA9IHByb3BlcnRpZXM7XG4gIHJldHVybiBjYWxjdWxhdGVQb3NpdGlvbiQxKHtzdGFydCwgZW5kLCBzaXplLCBib3JkZXJXaWR0aDogb3B0aW9ucy5ib3JkZXJXaWR0aH0sIHtcbiAgICBwb3NpdGlvbjogcG9zaXRpb24ueSxcbiAgICBwYWRkaW5nOiB7c3RhcnQ6IHBhZGRpbmcudG9wLCBlbmQ6IHBhZGRpbmcuYm90dG9tfSxcbiAgICBhZGp1c3Q6IG9wdGlvbnMubGFiZWwueUFkanVzdCxcbiAgICBzaXplOiBsYWJlbFNpemUuaGVpZ2h0XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVQb3NpdGlvbiQxKGJveE9wdHMsIGxhYmVsT3B0cykge1xuICBjb25zdCB7c3RhcnQsIGVuZCwgYm9yZGVyV2lkdGh9ID0gYm94T3B0cztcbiAgY29uc3Qge3Bvc2l0aW9uLCBwYWRkaW5nOiB7c3RhcnQ6IHBhZFN0YXJ0LCBlbmQ6IHBhZEVuZH0sIGFkanVzdH0gPSBsYWJlbE9wdHM7XG4gIGNvbnN0IGF2YWlsYWJsZVNpemUgPSBlbmQgLSBib3JkZXJXaWR0aCAtIHN0YXJ0IC0gcGFkU3RhcnQgLSBwYWRFbmQgLSBsYWJlbE9wdHMuc2l6ZTtcbiAgcmV0dXJuIHN0YXJ0ICsgYm9yZGVyV2lkdGggLyAyICsgYWRqdXN0ICsgZ2V0UmVsYXRpdmVQb3NpdGlvbihhdmFpbGFibGVTaXplLCBwb3NpdGlvbik7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVMYWJlbEVsZW1lbnRQcm9wZXJ0aWVzJDEoY2hhcnQsIHByb3BlcnRpZXMsIG9wdGlvbnMpIHtcbiAgY29uc3QgbGFiZWwgPSBvcHRpb25zLmxhYmVsO1xuICBsYWJlbC5iYWNrZ3JvdW5kQ29sb3IgPSAndHJhbnNwYXJlbnQnO1xuICBsYWJlbC5jYWxsb3V0LmRpc3BsYXkgPSBmYWxzZTtcbiAgY29uc3QgcG9zaXRpb24gPSB0b1Bvc2l0aW9uKGxhYmVsLnBvc2l0aW9uKTtcbiAgY29uc3QgcGFkZGluZyA9IHRvUGFkZGluZyhsYWJlbC5wYWRkaW5nKTtcbiAgY29uc3QgbGFiZWxTaXplID0gbWVhc3VyZUxhYmVsU2l6ZShjaGFydC5jdHgsIGxhYmVsKTtcbiAgY29uc3QgeCA9IGNhbGN1bGF0ZVgoe3Byb3BlcnRpZXMsIG9wdGlvbnN9LCBsYWJlbFNpemUsIHBvc2l0aW9uLCBwYWRkaW5nKTtcbiAgY29uc3QgeSA9IGNhbGN1bGF0ZVkoe3Byb3BlcnRpZXMsIG9wdGlvbnN9LCBsYWJlbFNpemUsIHBvc2l0aW9uLCBwYWRkaW5nKTtcbiAgY29uc3Qgd2lkdGggPSBsYWJlbFNpemUud2lkdGggKyBwYWRkaW5nLndpZHRoO1xuICBjb25zdCBoZWlnaHQgPSBsYWJlbFNpemUuaGVpZ2h0ICsgcGFkZGluZy5oZWlnaHQ7XG4gIHJldHVybiB7XG4gICAgeCxcbiAgICB5LFxuICAgIHgyOiB4ICsgd2lkdGgsXG4gICAgeTI6IHkgKyBoZWlnaHQsXG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIGNlbnRlclg6IHggKyB3aWR0aCAvIDIsXG4gICAgY2VudGVyWTogeSArIGhlaWdodCAvIDIsXG4gICAgcm90YXRpb246IGxhYmVsLnJvdGF0aW9uXG4gIH07XG5cbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdjaGFydC5qcycpLlBvaW50fSBQb2ludFxuICovXG5cbi8qKlxuICogUm90YXRlIGEgYHBvaW50YCByZWxhdGl2ZSB0byBgY2VudGVyYCBwb2ludCBieSBgYW5nbGVgXG4gKiBAcGFyYW0ge1BvaW50fSBwb2ludCAtIHRoZSBwb2ludCB0byByb3RhdGVcbiAqIEBwYXJhbSB7UG9pbnR9IGNlbnRlciAtIGNlbnRlciBwb2ludCBmb3Igcm90YXRpb25cbiAqIEBwYXJhbSB7bnVtYmVyfSBhbmdsZSAtIGFuZ2xlIGZvciByb3RhdGlvbiwgaW4gcmFkaWFuc1xuICogQHJldHVybnMge1BvaW50fSByb3RhdGVkIHBvaW50XG4gKi9cbmZ1bmN0aW9uIHJvdGF0ZWQocG9pbnQsIGNlbnRlciwgYW5nbGUpIHtcbiAgY29uc3QgY29zID0gTWF0aC5jb3MoYW5nbGUpO1xuICBjb25zdCBzaW4gPSBNYXRoLnNpbihhbmdsZSk7XG4gIGNvbnN0IGN4ID0gY2VudGVyLng7XG4gIGNvbnN0IGN5ID0gY2VudGVyLnk7XG5cbiAgcmV0dXJuIHtcbiAgICB4OiBjeCArIGNvcyAqIChwb2ludC54IC0gY3gpIC0gc2luICogKHBvaW50LnkgLSBjeSksXG4gICAgeTogY3kgKyBzaW4gKiAocG9pbnQueCAtIGN4KSArIGNvcyAqIChwb2ludC55IC0gY3kpXG4gIH07XG59XG5cbmNvbnN0IG1vdmVIb29rcyA9IFsnZW50ZXInLCAnbGVhdmUnXTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7IGltcG9ydChcImNoYXJ0LmpzXCIpLkNoYXJ0IH0gQ2hhcnRcbiAqIEB0eXBlZGVmIHsgaW1wb3J0KCcuLi8uLi90eXBlcy9vcHRpb25zJykuQW5ub3RhdGlvblBsdWdpbk9wdGlvbnMgfSBBbm5vdGF0aW9uUGx1Z2luT3B0aW9uc1xuICovXG5cbmNvbnN0IGV2ZW50SG9va3MgPSBtb3ZlSG9va3MuY29uY2F0KCdjbGljaycpO1xuXG4vKipcbiAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0XG4gKiBAcGFyYW0ge09iamVjdH0gc3RhdGVcbiAqIEBwYXJhbSB7QW5ub3RhdGlvblBsdWdpbk9wdGlvbnN9IG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gdXBkYXRlTGlzdGVuZXJzKGNoYXJ0LCBzdGF0ZSwgb3B0aW9ucykge1xuICBzdGF0ZS5saXN0ZW5lZCA9IGxvYWRIb29rcyhvcHRpb25zLCBldmVudEhvb2tzLCBzdGF0ZS5saXN0ZW5lcnMpO1xuICBzdGF0ZS5tb3ZlTGlzdGVuZWQgPSBmYWxzZTtcbiAgc3RhdGUuX2dldEVsZW1lbnRzID0gZ2V0RWxlbWVudHM7IC8vIGZvciB0ZXN0aW5nXG5cbiAgbW92ZUhvb2tzLmZvckVhY2goaG9vayA9PiB7XG4gICAgaWYgKGlzRnVuY3Rpb24ob3B0aW9uc1tob29rXSkpIHtcbiAgICAgIHN0YXRlLm1vdmVMaXN0ZW5lZCA9IHRydWU7XG4gICAgfVxuICB9KTtcblxuICBpZiAoIXN0YXRlLmxpc3RlbmVkIHx8ICFzdGF0ZS5tb3ZlTGlzdGVuZWQpIHtcbiAgICBzdGF0ZS5hbm5vdGF0aW9ucy5mb3JFYWNoKHNjb3BlID0+IHtcbiAgICAgIGlmICghc3RhdGUubGlzdGVuZWQgJiYgaXNGdW5jdGlvbihzY29wZS5jbGljaykpIHtcbiAgICAgICAgc3RhdGUubGlzdGVuZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKCFzdGF0ZS5tb3ZlTGlzdGVuZWQpIHtcbiAgICAgICAgbW92ZUhvb2tzLmZvckVhY2goaG9vayA9PiB7XG4gICAgICAgICAgaWYgKGlzRnVuY3Rpb24oc2NvcGVbaG9va10pKSB7XG4gICAgICAgICAgICBzdGF0ZS5saXN0ZW5lZCA9IHRydWU7XG4gICAgICAgICAgICBzdGF0ZS5tb3ZlTGlzdGVuZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhdGVcbiAqIEBwYXJhbSB7Q2hhcnRFdmVudH0gZXZlbnRcbiAqIEBwYXJhbSB7QW5ub3RhdGlvblBsdWdpbk9wdGlvbnN9IG9wdGlvbnNcbiAqIEByZXR1cm4ge2Jvb2xlYW58dW5kZWZpbmVkfVxuICovXG5mdW5jdGlvbiBoYW5kbGVFdmVudChzdGF0ZSwgZXZlbnQsIG9wdGlvbnMpIHtcbiAgaWYgKHN0YXRlLmxpc3RlbmVkKSB7XG4gICAgc3dpdGNoIChldmVudC50eXBlKSB7XG4gICAgY2FzZSAnbW91c2Vtb3ZlJzpcbiAgICBjYXNlICdtb3VzZW91dCc6XG4gICAgICByZXR1cm4gaGFuZGxlTW92ZUV2ZW50cyhzdGF0ZSwgZXZlbnQsIG9wdGlvbnMpO1xuICAgIGNhc2UgJ2NsaWNrJzpcbiAgICAgIHJldHVybiBoYW5kbGVDbGlja0V2ZW50cyhzdGF0ZSwgZXZlbnQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVNb3ZlRXZlbnRzKHN0YXRlLCBldmVudCwgb3B0aW9ucykge1xuICBpZiAoIXN0YXRlLm1vdmVMaXN0ZW5lZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBlbGVtZW50cztcblxuICBpZiAoZXZlbnQudHlwZSA9PT0gJ21vdXNlbW92ZScpIHtcbiAgICBlbGVtZW50cyA9IGdldEVsZW1lbnRzKHN0YXRlLCBldmVudCwgb3B0aW9ucy5pbnRlcmFjdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgZWxlbWVudHMgPSBbXTtcbiAgfVxuXG4gIGNvbnN0IHByZXZpb3VzID0gc3RhdGUuaG92ZXJlZDtcbiAgc3RhdGUuaG92ZXJlZCA9IGVsZW1lbnRzO1xuXG4gIGNvbnN0IGNvbnRleHQgPSB7c3RhdGUsIGV2ZW50fTtcbiAgbGV0IGNoYW5nZWQgPSBkaXNwYXRjaE1vdmVFdmVudHMoY29udGV4dCwgJ2xlYXZlJywgcHJldmlvdXMsIGVsZW1lbnRzKTtcbiAgcmV0dXJuIGRpc3BhdGNoTW92ZUV2ZW50cyhjb250ZXh0LCAnZW50ZXInLCBlbGVtZW50cywgcHJldmlvdXMpIHx8IGNoYW5nZWQ7XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoTW92ZUV2ZW50cyh7c3RhdGUsIGV2ZW50fSwgaG9vaywgZWxlbWVudHMsIGNoZWNrRWxlbWVudHMpIHtcbiAgbGV0IGNoYW5nZWQ7XG4gIGZvciAoY29uc3QgZWxlbWVudCBvZiBlbGVtZW50cykge1xuICAgIGlmIChjaGVja0VsZW1lbnRzLmluZGV4T2YoZWxlbWVudCkgPCAwKSB7XG4gICAgICBjaGFuZ2VkID0gZGlzcGF0Y2hFdmVudChlbGVtZW50Lm9wdGlvbnNbaG9va10gfHwgc3RhdGUubGlzdGVuZXJzW2hvb2tdLCBlbGVtZW50LCBldmVudCkgfHwgY2hhbmdlZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNoYW5nZWQ7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUNsaWNrRXZlbnRzKHN0YXRlLCBldmVudCwgb3B0aW9ucykge1xuICBjb25zdCBsaXN0ZW5lcnMgPSBzdGF0ZS5saXN0ZW5lcnM7XG4gIGNvbnN0IGVsZW1lbnRzID0gZ2V0RWxlbWVudHMoc3RhdGUsIGV2ZW50LCBvcHRpb25zLmludGVyYWN0aW9uKTtcbiAgbGV0IGNoYW5nZWQ7XG4gIGZvciAoY29uc3QgZWxlbWVudCBvZiBlbGVtZW50cykge1xuICAgIGNoYW5nZWQgPSBkaXNwYXRjaEV2ZW50KGVsZW1lbnQub3B0aW9ucy5jbGljayB8fCBsaXN0ZW5lcnMuY2xpY2ssIGVsZW1lbnQsIGV2ZW50KSB8fCBjaGFuZ2VkO1xuICB9XG4gIHJldHVybiBjaGFuZ2VkO1xufVxuXG5mdW5jdGlvbiBkaXNwYXRjaEV2ZW50KGhhbmRsZXIsIGVsZW1lbnQsIGV2ZW50KSB7XG4gIHJldHVybiBjYWxsYmFjayhoYW5kbGVyLCBbZWxlbWVudC4kY29udGV4dCwgZXZlbnRdKSA9PT0gdHJ1ZTtcbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7IGltcG9ydChcImNoYXJ0LmpzXCIpLkNoYXJ0IH0gQ2hhcnRcbiAqIEB0eXBlZGVmIHsgaW1wb3J0KCcuLi8uLi90eXBlcy9vcHRpb25zJykuQW5ub3RhdGlvblBsdWdpbk9wdGlvbnMgfSBBbm5vdGF0aW9uUGx1Z2luT3B0aW9uc1xuICogQHR5cGVkZWYgeyBpbXBvcnQoJy4uLy4uL3R5cGVzL2VsZW1lbnQnKS5Bbm5vdGF0aW9uRWxlbWVudCB9IEFubm90YXRpb25FbGVtZW50XG4gKi9cblxuY29uc3QgZWxlbWVudEhvb2tzID0gWydhZnRlckRyYXcnLCAnYmVmb3JlRHJhdyddO1xuXG4vKipcbiAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0XG4gKiBAcGFyYW0ge09iamVjdH0gc3RhdGVcbiAqIEBwYXJhbSB7QW5ub3RhdGlvblBsdWdpbk9wdGlvbnN9IG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gdXBkYXRlSG9va3MoY2hhcnQsIHN0YXRlLCBvcHRpb25zKSB7XG4gIGNvbnN0IHZpc2libGVFbGVtZW50cyA9IHN0YXRlLnZpc2libGVFbGVtZW50cztcbiAgc3RhdGUuaG9va2VkID0gbG9hZEhvb2tzKG9wdGlvbnMsIGVsZW1lbnRIb29rcywgc3RhdGUuaG9va3MpO1xuXG4gIGlmICghc3RhdGUuaG9va2VkKSB7XG4gICAgdmlzaWJsZUVsZW1lbnRzLmZvckVhY2goc2NvcGUgPT4ge1xuICAgICAgaWYgKCFzdGF0ZS5ob29rZWQpIHtcbiAgICAgICAgZWxlbWVudEhvb2tzLmZvckVhY2goaG9vayA9PiB7XG4gICAgICAgICAgaWYgKGlzRnVuY3Rpb24oc2NvcGUub3B0aW9uc1tob29rXSkpIHtcbiAgICAgICAgICAgIHN0YXRlLmhvb2tlZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGF0ZVxuICogQHBhcmFtIHtBbm5vdGF0aW9uRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtzdHJpbmd9IGhvb2tcbiAqL1xuZnVuY3Rpb24gaW52b2tlSG9vayhzdGF0ZSwgZWxlbWVudCwgaG9vaykge1xuICBpZiAoc3RhdGUuaG9va2VkKSB7XG4gICAgY29uc3QgY2FsbGJhY2tIb29rID0gZWxlbWVudC5vcHRpb25zW2hvb2tdIHx8IHN0YXRlLmhvb2tzW2hvb2tdO1xuICAgIHJldHVybiBjYWxsYmFjayhjYWxsYmFja0hvb2ssIFtlbGVtZW50LiRjb250ZXh0XSk7XG4gIH1cbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7IGltcG9ydChcImNoYXJ0LmpzXCIpLkNoYXJ0IH0gQ2hhcnRcbiAqIEB0eXBlZGVmIHsgaW1wb3J0KFwiY2hhcnQuanNcIikuU2NhbGUgfSBTY2FsZVxuICogQHR5cGVkZWYgeyBpbXBvcnQoJy4uLy4uL3R5cGVzL29wdGlvbnMnKS5Db3JlQW5ub3RhdGlvbk9wdGlvbnMgfSBDb3JlQW5ub3RhdGlvbk9wdGlvbnNcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0XG4gKiBAcGFyYW0ge1NjYWxlfSBzY2FsZVxuICogQHBhcmFtIHtDb3JlQW5ub3RhdGlvbk9wdGlvbnNbXX0gYW5ub3RhdGlvbnNcbiAqL1xuZnVuY3Rpb24gYWRqdXN0U2NhbGVSYW5nZShjaGFydCwgc2NhbGUsIGFubm90YXRpb25zKSB7XG4gIGNvbnN0IHJhbmdlID0gZ2V0U2NhbGVMaW1pdHMoY2hhcnQuc2NhbGVzLCBzY2FsZSwgYW5ub3RhdGlvbnMpO1xuICBsZXQgY2hhbmdlZCA9IGNoYW5nZVNjYWxlTGltaXQoc2NhbGUsIHJhbmdlLCAnbWluJywgJ3N1Z2dlc3RlZE1pbicpO1xuICBjaGFuZ2VkID0gY2hhbmdlU2NhbGVMaW1pdChzY2FsZSwgcmFuZ2UsICdtYXgnLCAnc3VnZ2VzdGVkTWF4JykgfHwgY2hhbmdlZDtcbiAgaWYgKGNoYW5nZWQgJiYgaXNGdW5jdGlvbihzY2FsZS5oYW5kbGVUaWNrUmFuZ2VPcHRpb25zKSkge1xuICAgIHNjYWxlLmhhbmRsZVRpY2tSYW5nZU9wdGlvbnMoKTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7Q29yZUFubm90YXRpb25PcHRpb25zW119IGFubm90YXRpb25zXG4gKiBAcGFyYW0ge3sgW2tleTogc3RyaW5nXTogU2NhbGUgfX0gc2NhbGVzXG4gKi9cbmZ1bmN0aW9uIHZlcmlmeVNjYWxlT3B0aW9ucyhhbm5vdGF0aW9ucywgc2NhbGVzKSB7XG4gIGZvciAoY29uc3QgYW5ub3RhdGlvbiBvZiBhbm5vdGF0aW9ucykge1xuICAgIHZlcmlmeVNjYWxlSURzKGFubm90YXRpb24sIHNjYWxlcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hhbmdlU2NhbGVMaW1pdChzY2FsZSwgcmFuZ2UsIGxpbWl0LCBzdWdnZXN0ZWRMaW1pdCkge1xuICBpZiAoaXNGaW5pdGUocmFuZ2VbbGltaXRdKSAmJiAhc2NhbGVMaW1pdERlZmluZWQoc2NhbGUub3B0aW9ucywgbGltaXQsIHN1Z2dlc3RlZExpbWl0KSkge1xuICAgIGNvbnN0IGNoYW5nZWQgPSBzY2FsZVtsaW1pdF0gIT09IHJhbmdlW2xpbWl0XTtcbiAgICBzY2FsZVtsaW1pdF0gPSByYW5nZVtsaW1pdF07XG4gICAgcmV0dXJuIGNoYW5nZWQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2NhbGVMaW1pdERlZmluZWQoc2NhbGVPcHRpb25zLCBsaW1pdCwgc3VnZ2VzdGVkTGltaXQpIHtcbiAgcmV0dXJuIGRlZmluZWQoc2NhbGVPcHRpb25zW2xpbWl0XSkgfHwgZGVmaW5lZChzY2FsZU9wdGlvbnNbc3VnZ2VzdGVkTGltaXRdKTtcbn1cblxuZnVuY3Rpb24gdmVyaWZ5U2NhbGVJRHMoYW5ub3RhdGlvbiwgc2NhbGVzKSB7XG4gIGZvciAoY29uc3Qga2V5IG9mIFsnc2NhbGVJRCcsICd4U2NhbGVJRCcsICd5U2NhbGVJRCddKSB7XG4gICAgY29uc3Qgc2NhbGVJRCA9IHJldHJpZXZlU2NhbGVJRChzY2FsZXMsIGFubm90YXRpb24sIGtleSk7XG4gICAgaWYgKHNjYWxlSUQgJiYgIXNjYWxlc1tzY2FsZUlEXSAmJiB2ZXJpZnlQcm9wZXJ0aWVzKGFubm90YXRpb24sIGtleSkpIHtcbiAgICAgIGNvbnNvbGUud2FybihgTm8gc2NhbGUgZm91bmQgd2l0aCBpZCAnJHtzY2FsZUlEfScgZm9yIGFubm90YXRpb24gJyR7YW5ub3RhdGlvbi5pZH0nYCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHZlcmlmeVByb3BlcnRpZXMoYW5ub3RhdGlvbiwga2V5KSB7XG4gIGlmIChrZXkgPT09ICdzY2FsZUlEJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGNvbnN0IGF4aXMgPSBrZXkuY2hhckF0KDApO1xuICBmb3IgKGNvbnN0IHByb3Agb2YgWydNaW4nLCAnTWF4JywgJ1ZhbHVlJ10pIHtcbiAgICBpZiAoZGVmaW5lZChhbm5vdGF0aW9uW2F4aXMgKyBwcm9wXSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGdldFNjYWxlTGltaXRzKHNjYWxlcywgc2NhbGUsIGFubm90YXRpb25zKSB7XG4gIGNvbnN0IGF4aXMgPSBzY2FsZS5heGlzO1xuICBjb25zdCBzY2FsZUlEID0gc2NhbGUuaWQ7XG4gIGNvbnN0IHNjYWxlSURPcHRpb24gPSBheGlzICsgJ1NjYWxlSUQnO1xuICBjb25zdCBsaW1pdHMgPSB7XG4gICAgbWluOiB2YWx1ZU9yRGVmYXVsdChzY2FsZS5taW4sIE51bWJlci5ORUdBVElWRV9JTkZJTklUWSksXG4gICAgbWF4OiB2YWx1ZU9yRGVmYXVsdChzY2FsZS5tYXgsIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSlcbiAgfTtcbiAgZm9yIChjb25zdCBhbm5vdGF0aW9uIG9mIGFubm90YXRpb25zKSB7XG4gICAgaWYgKGFubm90YXRpb24uc2NhbGVJRCA9PT0gc2NhbGVJRCkge1xuICAgICAgdXBkYXRlTGltaXRzKGFubm90YXRpb24sIHNjYWxlLCBbJ3ZhbHVlJywgJ2VuZFZhbHVlJ10sIGxpbWl0cyk7XG4gICAgfSBlbHNlIGlmIChyZXRyaWV2ZVNjYWxlSUQoc2NhbGVzLCBhbm5vdGF0aW9uLCBzY2FsZUlET3B0aW9uKSA9PT0gc2NhbGVJRCkge1xuICAgICAgdXBkYXRlTGltaXRzKGFubm90YXRpb24sIHNjYWxlLCBbYXhpcyArICdNaW4nLCBheGlzICsgJ01heCcsIGF4aXMgKyAnVmFsdWUnXSwgbGltaXRzKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGxpbWl0cztcbn1cblxuZnVuY3Rpb24gdXBkYXRlTGltaXRzKGFubm90YXRpb24sIHNjYWxlLCBwcm9wcywgbGltaXRzKSB7XG4gIGZvciAoY29uc3QgcHJvcCBvZiBwcm9wcykge1xuICAgIGNvbnN0IHJhdyA9IGFubm90YXRpb25bcHJvcF07XG4gICAgaWYgKGRlZmluZWQocmF3KSkge1xuICAgICAgY29uc3QgdmFsdWUgPSBzY2FsZS5wYXJzZShyYXcpO1xuICAgICAgbGltaXRzLm1pbiA9IE1hdGgubWluKGxpbWl0cy5taW4sIHZhbHVlKTtcbiAgICAgIGxpbWl0cy5tYXggPSBNYXRoLm1heChsaW1pdHMubWF4LCB2YWx1ZSk7XG4gICAgfVxuICB9XG59XG5cbmNsYXNzIEJveEFubm90YXRpb24gZXh0ZW5kcyBFbGVtZW50IHtcblxuICBpblJhbmdlKG1vdXNlWCwgbW91c2VZLCBheGlzLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgY29uc3Qge3gsIHl9ID0gcm90YXRlZCh7eDogbW91c2VYLCB5OiBtb3VzZVl9LCB0aGlzLmdldENlbnRlclBvaW50KHVzZUZpbmFsUG9zaXRpb24pLCB0b1JhZGlhbnMoLXRoaXMub3B0aW9ucy5yb3RhdGlvbikpO1xuICAgIHJldHVybiBpbkJveFJhbmdlKHt4LCB5fSwgdGhpcy5nZXRQcm9wcyhbJ3gnLCAneScsICd4MicsICd5MiddLCB1c2VGaW5hbFBvc2l0aW9uKSwgYXhpcywgdGhpcy5vcHRpb25zLmJvcmRlcldpZHRoKTtcbiAgfVxuXG4gIGdldENlbnRlclBvaW50KHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICByZXR1cm4gZ2V0RWxlbWVudENlbnRlclBvaW50KHRoaXMsIHVzZUZpbmFsUG9zaXRpb24pO1xuICB9XG5cbiAgZHJhdyhjdHgpIHtcbiAgICBjdHguc2F2ZSgpO1xuICAgIHRyYW5zbGF0ZShjdHgsIHRoaXMuZ2V0Q2VudGVyUG9pbnQoKSwgdGhpcy5vcHRpb25zLnJvdGF0aW9uKTtcbiAgICBkcmF3Qm94KGN0eCwgdGhpcywgdGhpcy5vcHRpb25zKTtcbiAgICBjdHgucmVzdG9yZSgpO1xuICB9XG5cbiAgZ2V0IGxhYmVsKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRzICYmIHRoaXMuZWxlbWVudHNbMF07XG4gIH1cblxuICByZXNvbHZlRWxlbWVudFByb3BlcnRpZXMoY2hhcnQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gcmVzb2x2ZUJveEFuZExhYmVsUHJvcGVydGllcyhjaGFydCwgb3B0aW9ucyk7XG4gIH1cbn1cblxuQm94QW5ub3RhdGlvbi5pZCA9ICdib3hBbm5vdGF0aW9uJztcblxuQm94QW5ub3RhdGlvbi5kZWZhdWx0cyA9IHtcbiAgYWRqdXN0U2NhbGVSYW5nZTogdHJ1ZSxcbiAgYmFja2dyb3VuZFNoYWRvd0NvbG9yOiAndHJhbnNwYXJlbnQnLFxuICBib3JkZXJDYXBTdHlsZTogJ2J1dHQnLFxuICBib3JkZXJEYXNoOiBbXSxcbiAgYm9yZGVyRGFzaE9mZnNldDogMCxcbiAgYm9yZGVySm9pblN0eWxlOiAnbWl0ZXInLFxuICBib3JkZXJSYWRpdXM6IDAsXG4gIGJvcmRlclNoYWRvd0NvbG9yOiAndHJhbnNwYXJlbnQnLFxuICBib3JkZXJXaWR0aDogMSxcbiAgZGlzcGxheTogdHJ1ZSxcbiAgaW5pdDogdW5kZWZpbmVkLFxuICBsYWJlbDoge1xuICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICBib3JkZXJXaWR0aDogMCxcbiAgICBjYWxsb3V0OiB7XG4gICAgICBkaXNwbGF5OiBmYWxzZVxuICAgIH0sXG4gICAgY29sb3I6ICdibGFjaycsXG4gICAgY29udGVudDogbnVsbCxcbiAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICBkcmF3VGltZTogdW5kZWZpbmVkLFxuICAgIGZvbnQ6IHtcbiAgICAgIGZhbWlseTogdW5kZWZpbmVkLFxuICAgICAgbGluZUhlaWdodDogdW5kZWZpbmVkLFxuICAgICAgc2l6ZTogdW5kZWZpbmVkLFxuICAgICAgc3R5bGU6IHVuZGVmaW5lZCxcbiAgICAgIHdlaWdodDogJ2JvbGQnXG4gICAgfSxcbiAgICBoZWlnaHQ6IHVuZGVmaW5lZCxcbiAgICBvcGFjaXR5OiB1bmRlZmluZWQsXG4gICAgcGFkZGluZzogNixcbiAgICBwb3NpdGlvbjogJ2NlbnRlcicsXG4gICAgcm90YXRpb246IHVuZGVmaW5lZCxcbiAgICB0ZXh0QWxpZ246ICdzdGFydCcsXG4gICAgdGV4dFN0cm9rZUNvbG9yOiB1bmRlZmluZWQsXG4gICAgdGV4dFN0cm9rZVdpZHRoOiAwLFxuICAgIHdpZHRoOiB1bmRlZmluZWQsXG4gICAgeEFkanVzdDogMCxcbiAgICB5QWRqdXN0OiAwLFxuICAgIHo6IHVuZGVmaW5lZFxuICB9LFxuICByb3RhdGlvbjogMCxcbiAgc2hhZG93Qmx1cjogMCxcbiAgc2hhZG93T2Zmc2V0WDogMCxcbiAgc2hhZG93T2Zmc2V0WTogMCxcbiAgeE1heDogdW5kZWZpbmVkLFxuICB4TWluOiB1bmRlZmluZWQsXG4gIHhTY2FsZUlEOiB1bmRlZmluZWQsXG4gIHlNYXg6IHVuZGVmaW5lZCxcbiAgeU1pbjogdW5kZWZpbmVkLFxuICB5U2NhbGVJRDogdW5kZWZpbmVkLFxuICB6OiAwXG59O1xuXG5Cb3hBbm5vdGF0aW9uLmRlZmF1bHRSb3V0ZXMgPSB7XG4gIGJvcmRlckNvbG9yOiAnY29sb3InLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICdjb2xvcidcbn07XG5cbkJveEFubm90YXRpb24uZGVzY3JpcHRvcnMgPSB7XG4gIGxhYmVsOiB7XG4gICAgX2ZhbGxiYWNrOiB0cnVlXG4gIH1cbn07XG5cbmNvbnN0IHBvc2l0aW9ucyA9IFsnbGVmdCcsICdib3R0b20nLCAndG9wJywgJ3JpZ2h0J107XG5cbmNsYXNzIExhYmVsQW5ub3RhdGlvbiBleHRlbmRzIEVsZW1lbnQge1xuXG4gIGluUmFuZ2UobW91c2VYLCBtb3VzZVksIGF4aXMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICBjb25zdCB7eCwgeX0gPSByb3RhdGVkKHt4OiBtb3VzZVgsIHk6IG1vdXNlWX0sIHRoaXMuZ2V0Q2VudGVyUG9pbnQodXNlRmluYWxQb3NpdGlvbiksIHRvUmFkaWFucygtdGhpcy5yb3RhdGlvbikpO1xuICAgIHJldHVybiBpbkJveFJhbmdlKHt4LCB5fSwgdGhpcy5nZXRQcm9wcyhbJ3gnLCAneScsICd4MicsICd5MiddLCB1c2VGaW5hbFBvc2l0aW9uKSwgYXhpcywgdGhpcy5vcHRpb25zLmJvcmRlcldpZHRoKTtcbiAgfVxuXG4gIGdldENlbnRlclBvaW50KHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICByZXR1cm4gZ2V0RWxlbWVudENlbnRlclBvaW50KHRoaXMsIHVzZUZpbmFsUG9zaXRpb24pO1xuICB9XG5cbiAgZHJhdyhjdHgpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHZpc2libGUgPSAhZGVmaW5lZCh0aGlzLl92aXNpYmxlKSB8fCB0aGlzLl92aXNpYmxlO1xuICAgIGlmICghb3B0aW9ucy5kaXNwbGF5IHx8ICFvcHRpb25zLmNvbnRlbnQgfHwgIXZpc2libGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY3R4LnNhdmUoKTtcbiAgICB0cmFuc2xhdGUoY3R4LCB0aGlzLmdldENlbnRlclBvaW50KCksIHRoaXMucm90YXRpb24pO1xuICAgIGRyYXdDYWxsb3V0KGN0eCwgdGhpcyk7XG4gICAgZHJhd0JveChjdHgsIHRoaXMsIG9wdGlvbnMpO1xuICAgIGRyYXdMYWJlbChjdHgsIGdldExhYmVsU2l6ZSh0aGlzKSwgb3B0aW9ucyk7XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgfVxuXG4gIHJlc29sdmVFbGVtZW50UHJvcGVydGllcyhjaGFydCwgb3B0aW9ucykge1xuICAgIGxldCBwb2ludDtcbiAgICBpZiAoIWlzQm91bmRUb1BvaW50KG9wdGlvbnMpKSB7XG4gICAgICBjb25zdCB7Y2VudGVyWCwgY2VudGVyWX0gPSByZXNvbHZlQm94UHJvcGVydGllcyhjaGFydCwgb3B0aW9ucyk7XG4gICAgICBwb2ludCA9IHt4OiBjZW50ZXJYLCB5OiBjZW50ZXJZfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcG9pbnQgPSBnZXRDaGFydFBvaW50KGNoYXJ0LCBvcHRpb25zKTtcbiAgICB9XG4gICAgY29uc3QgcGFkZGluZyA9IHRvUGFkZGluZyhvcHRpb25zLnBhZGRpbmcpO1xuICAgIGNvbnN0IGxhYmVsU2l6ZSA9IG1lYXN1cmVMYWJlbFNpemUoY2hhcnQuY3R4LCBvcHRpb25zKTtcbiAgICBjb25zdCBib3hTaXplID0gbWVhc3VyZVJlY3QocG9pbnQsIGxhYmVsU2l6ZSwgb3B0aW9ucywgcGFkZGluZyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGluaXRQcm9wZXJ0aWVzOiBpbml0QW5pbWF0aW9uUHJvcGVydGllcyhjaGFydCwgYm94U2l6ZSwgb3B0aW9ucyksXG4gICAgICBwb2ludFg6IHBvaW50LngsXG4gICAgICBwb2ludFk6IHBvaW50LnksXG4gICAgICAuLi5ib3hTaXplLFxuICAgICAgcm90YXRpb246IG9wdGlvbnMucm90YXRpb25cbiAgICB9O1xuICB9XG59XG5cbkxhYmVsQW5ub3RhdGlvbi5pZCA9ICdsYWJlbEFubm90YXRpb24nO1xuXG5MYWJlbEFubm90YXRpb24uZGVmYXVsdHMgPSB7XG4gIGFkanVzdFNjYWxlUmFuZ2U6IHRydWUsXG4gIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgYmFja2dyb3VuZFNoYWRvd0NvbG9yOiAndHJhbnNwYXJlbnQnLFxuICBib3JkZXJDYXBTdHlsZTogJ2J1dHQnLFxuICBib3JkZXJEYXNoOiBbXSxcbiAgYm9yZGVyRGFzaE9mZnNldDogMCxcbiAgYm9yZGVySm9pblN0eWxlOiAnbWl0ZXInLFxuICBib3JkZXJSYWRpdXM6IDAsXG4gIGJvcmRlclNoYWRvd0NvbG9yOiAndHJhbnNwYXJlbnQnLFxuICBib3JkZXJXaWR0aDogMCxcbiAgY2FsbG91dDoge1xuICAgIGJvcmRlckNhcFN0eWxlOiAnYnV0dCcsXG4gICAgYm9yZGVyQ29sb3I6IHVuZGVmaW5lZCxcbiAgICBib3JkZXJEYXNoOiBbXSxcbiAgICBib3JkZXJEYXNoT2Zmc2V0OiAwLFxuICAgIGJvcmRlckpvaW5TdHlsZTogJ21pdGVyJyxcbiAgICBib3JkZXJXaWR0aDogMSxcbiAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICBtYXJnaW46IDUsXG4gICAgcG9zaXRpb246ICdhdXRvJyxcbiAgICBzaWRlOiA1LFxuICAgIHN0YXJ0OiAnNTAlJyxcbiAgfSxcbiAgY29sb3I6ICdibGFjaycsXG4gIGNvbnRlbnQ6IG51bGwsXG4gIGRpc3BsYXk6IHRydWUsXG4gIGZvbnQ6IHtcbiAgICBmYW1pbHk6IHVuZGVmaW5lZCxcbiAgICBsaW5lSGVpZ2h0OiB1bmRlZmluZWQsXG4gICAgc2l6ZTogdW5kZWZpbmVkLFxuICAgIHN0eWxlOiB1bmRlZmluZWQsXG4gICAgd2VpZ2h0OiB1bmRlZmluZWRcbiAgfSxcbiAgaGVpZ2h0OiB1bmRlZmluZWQsXG4gIGluaXQ6IHVuZGVmaW5lZCxcbiAgb3BhY2l0eTogdW5kZWZpbmVkLFxuICBwYWRkaW5nOiA2LFxuICBwb3NpdGlvbjogJ2NlbnRlcicsXG4gIHJvdGF0aW9uOiAwLFxuICBzaGFkb3dCbHVyOiAwLFxuICBzaGFkb3dPZmZzZXRYOiAwLFxuICBzaGFkb3dPZmZzZXRZOiAwLFxuICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICB0ZXh0U3Ryb2tlQ29sb3I6IHVuZGVmaW5lZCxcbiAgdGV4dFN0cm9rZVdpZHRoOiAwLFxuICB3aWR0aDogdW5kZWZpbmVkLFxuICB4QWRqdXN0OiAwLFxuICB4TWF4OiB1bmRlZmluZWQsXG4gIHhNaW46IHVuZGVmaW5lZCxcbiAgeFNjYWxlSUQ6IHVuZGVmaW5lZCxcbiAgeFZhbHVlOiB1bmRlZmluZWQsXG4gIHlBZGp1c3Q6IDAsXG4gIHlNYXg6IHVuZGVmaW5lZCxcbiAgeU1pbjogdW5kZWZpbmVkLFxuICB5U2NhbGVJRDogdW5kZWZpbmVkLFxuICB5VmFsdWU6IHVuZGVmaW5lZCxcbiAgejogMFxufTtcblxuTGFiZWxBbm5vdGF0aW9uLmRlZmF1bHRSb3V0ZXMgPSB7XG4gIGJvcmRlckNvbG9yOiAnY29sb3InXG59O1xuXG5mdW5jdGlvbiBtZWFzdXJlUmVjdChwb2ludCwgc2l6ZSwgb3B0aW9ucywgcGFkZGluZykge1xuICBjb25zdCB3aWR0aCA9IHNpemUud2lkdGggKyBwYWRkaW5nLndpZHRoICsgb3B0aW9ucy5ib3JkZXJXaWR0aDtcbiAgY29uc3QgaGVpZ2h0ID0gc2l6ZS5oZWlnaHQgKyBwYWRkaW5nLmhlaWdodCArIG9wdGlvbnMuYm9yZGVyV2lkdGg7XG4gIGNvbnN0IHBvc2l0aW9uID0gdG9Qb3NpdGlvbihvcHRpb25zLnBvc2l0aW9uLCAnY2VudGVyJyk7XG4gIGNvbnN0IHggPSBjYWxjdWxhdGVQb3NpdGlvbihwb2ludC54LCB3aWR0aCwgb3B0aW9ucy54QWRqdXN0LCBwb3NpdGlvbi54KTtcbiAgY29uc3QgeSA9IGNhbGN1bGF0ZVBvc2l0aW9uKHBvaW50LnksIGhlaWdodCwgb3B0aW9ucy55QWRqdXN0LCBwb3NpdGlvbi55KTtcblxuICByZXR1cm4ge1xuICAgIHgsXG4gICAgeSxcbiAgICB4MjogeCArIHdpZHRoLFxuICAgIHkyOiB5ICsgaGVpZ2h0LFxuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICBjZW50ZXJYOiB4ICsgd2lkdGggLyAyLFxuICAgIGNlbnRlclk6IHkgKyBoZWlnaHQgLyAyXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZVBvc2l0aW9uKHN0YXJ0LCBzaXplLCBhZGp1c3QgPSAwLCBwb3NpdGlvbikge1xuICByZXR1cm4gc3RhcnQgLSBnZXRSZWxhdGl2ZVBvc2l0aW9uKHNpemUsIHBvc2l0aW9uKSArIGFkanVzdDtcbn1cblxuZnVuY3Rpb24gZHJhd0NhbGxvdXQoY3R4LCBlbGVtZW50KSB7XG4gIGNvbnN0IHtwb2ludFgsIHBvaW50WSwgb3B0aW9uc30gPSBlbGVtZW50O1xuICBjb25zdCBjYWxsb3V0ID0gb3B0aW9ucy5jYWxsb3V0O1xuICBjb25zdCBjYWxsb3V0UG9zaXRpb24gPSBjYWxsb3V0ICYmIGNhbGxvdXQuZGlzcGxheSAmJiByZXNvbHZlQ2FsbG91dFBvc2l0aW9uKGVsZW1lbnQsIGNhbGxvdXQpO1xuICBpZiAoIWNhbGxvdXRQb3NpdGlvbiB8fCBpc1BvaW50SW5SYW5nZShlbGVtZW50LCBjYWxsb3V0LCBjYWxsb3V0UG9zaXRpb24pKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY3R4LnNhdmUoKTtcbiAgY3R4LmJlZ2luUGF0aCgpO1xuICBjb25zdCBzdHJva2UgPSBzZXRCb3JkZXJTdHlsZShjdHgsIGNhbGxvdXQpO1xuICBpZiAoIXN0cm9rZSkge1xuICAgIHJldHVybiBjdHgucmVzdG9yZSgpO1xuICB9XG4gIGNvbnN0IHtzZXBhcmF0b3JTdGFydCwgc2VwYXJhdG9yRW5kfSA9IGdldENhbGxvdXRTZXBhcmF0b3JDb29yZChlbGVtZW50LCBjYWxsb3V0UG9zaXRpb24pO1xuICBjb25zdCB7c2lkZVN0YXJ0LCBzaWRlRW5kfSA9IGdldENhbGxvdXRTaWRlQ29vcmQoZWxlbWVudCwgY2FsbG91dFBvc2l0aW9uLCBzZXBhcmF0b3JTdGFydCk7XG4gIGlmIChjYWxsb3V0Lm1hcmdpbiA+IDAgfHwgb3B0aW9ucy5ib3JkZXJXaWR0aCA9PT0gMCkge1xuICAgIGN0eC5tb3ZlVG8oc2VwYXJhdG9yU3RhcnQueCwgc2VwYXJhdG9yU3RhcnQueSk7XG4gICAgY3R4LmxpbmVUbyhzZXBhcmF0b3JFbmQueCwgc2VwYXJhdG9yRW5kLnkpO1xuICB9XG4gIGN0eC5tb3ZlVG8oc2lkZVN0YXJ0LngsIHNpZGVTdGFydC55KTtcbiAgY3R4LmxpbmVUbyhzaWRlRW5kLngsIHNpZGVFbmQueSk7XG4gIGNvbnN0IHJvdGF0ZWRQb2ludCA9IHJvdGF0ZWQoe3g6IHBvaW50WCwgeTogcG9pbnRZfSwgZWxlbWVudC5nZXRDZW50ZXJQb2ludCgpLCB0b1JhZGlhbnMoLWVsZW1lbnQucm90YXRpb24pKTtcbiAgY3R4LmxpbmVUbyhyb3RhdGVkUG9pbnQueCwgcm90YXRlZFBvaW50LnkpO1xuICBjdHguc3Ryb2tlKCk7XG4gIGN0eC5yZXN0b3JlKCk7XG59XG5cbmZ1bmN0aW9uIGdldENhbGxvdXRTZXBhcmF0b3JDb29yZChlbGVtZW50LCBwb3NpdGlvbikge1xuICBjb25zdCB7eCwgeSwgeDIsIHkyfSA9IGVsZW1lbnQ7XG4gIGNvbnN0IGFkanVzdCA9IGdldENhbGxvdXRTZXBhcmF0b3JBZGp1c3QoZWxlbWVudCwgcG9zaXRpb24pO1xuICBsZXQgc2VwYXJhdG9yU3RhcnQsIHNlcGFyYXRvckVuZDtcbiAgaWYgKHBvc2l0aW9uID09PSAnbGVmdCcgfHwgcG9zaXRpb24gPT09ICdyaWdodCcpIHtcbiAgICBzZXBhcmF0b3JTdGFydCA9IHt4OiB4ICsgYWRqdXN0LCB5fTtcbiAgICBzZXBhcmF0b3JFbmQgPSB7eDogc2VwYXJhdG9yU3RhcnQueCwgeTogeTJ9O1xuICB9IGVsc2Uge1xuICAgIC8vICBwb3NpdGlvbiAndG9wJyBvciAnYm90dG9tJ1xuICAgIHNlcGFyYXRvclN0YXJ0ID0ge3gsIHk6IHkgKyBhZGp1c3R9O1xuICAgIHNlcGFyYXRvckVuZCA9IHt4OiB4MiwgeTogc2VwYXJhdG9yU3RhcnQueX07XG4gIH1cbiAgcmV0dXJuIHtzZXBhcmF0b3JTdGFydCwgc2VwYXJhdG9yRW5kfTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2FsbG91dFNlcGFyYXRvckFkanVzdChlbGVtZW50LCBwb3NpdGlvbikge1xuICBjb25zdCB7d2lkdGgsIGhlaWdodCwgb3B0aW9uc30gPSBlbGVtZW50O1xuICBjb25zdCBhZGp1c3QgPSBvcHRpb25zLmNhbGxvdXQubWFyZ2luICsgb3B0aW9ucy5ib3JkZXJXaWR0aCAvIDI7XG4gIGlmIChwb3NpdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgIHJldHVybiB3aWR0aCArIGFkanVzdDtcbiAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2JvdHRvbScpIHtcbiAgICByZXR1cm4gaGVpZ2h0ICsgYWRqdXN0O1xuICB9XG4gIHJldHVybiAtYWRqdXN0O1xufVxuXG5mdW5jdGlvbiBnZXRDYWxsb3V0U2lkZUNvb3JkKGVsZW1lbnQsIHBvc2l0aW9uLCBzZXBhcmF0b3JTdGFydCkge1xuICBjb25zdCB7eSwgd2lkdGgsIGhlaWdodCwgb3B0aW9uc30gPSBlbGVtZW50O1xuICBjb25zdCBzdGFydCA9IG9wdGlvbnMuY2FsbG91dC5zdGFydDtcbiAgY29uc3Qgc2lkZSA9IGdldENhbGxvdXRTaWRlQWRqdXN0KHBvc2l0aW9uLCBvcHRpb25zLmNhbGxvdXQpO1xuICBsZXQgc2lkZVN0YXJ0LCBzaWRlRW5kO1xuICBpZiAocG9zaXRpb24gPT09ICdsZWZ0JyB8fCBwb3NpdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgIHNpZGVTdGFydCA9IHt4OiBzZXBhcmF0b3JTdGFydC54LCB5OiB5ICsgZ2V0U2l6ZShoZWlnaHQsIHN0YXJ0KX07XG4gICAgc2lkZUVuZCA9IHt4OiBzaWRlU3RhcnQueCArIHNpZGUsIHk6IHNpZGVTdGFydC55fTtcbiAgfSBlbHNlIHtcbiAgICAvLyAgcG9zaXRpb24gJ3RvcCcgb3IgJ2JvdHRvbSdcbiAgICBzaWRlU3RhcnQgPSB7eDogc2VwYXJhdG9yU3RhcnQueCArIGdldFNpemUod2lkdGgsIHN0YXJ0KSwgeTogc2VwYXJhdG9yU3RhcnQueX07XG4gICAgc2lkZUVuZCA9IHt4OiBzaWRlU3RhcnQueCwgeTogc2lkZVN0YXJ0LnkgKyBzaWRlfTtcbiAgfVxuICByZXR1cm4ge3NpZGVTdGFydCwgc2lkZUVuZH07XG59XG5cbmZ1bmN0aW9uIGdldENhbGxvdXRTaWRlQWRqdXN0KHBvc2l0aW9uLCBvcHRpb25zKSB7XG4gIGNvbnN0IHNpZGUgPSBvcHRpb25zLnNpZGU7XG4gIGlmIChwb3NpdGlvbiA9PT0gJ2xlZnQnIHx8IHBvc2l0aW9uID09PSAndG9wJykge1xuICAgIHJldHVybiAtc2lkZTtcbiAgfVxuICByZXR1cm4gc2lkZTtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUNhbGxvdXRQb3NpdGlvbihlbGVtZW50LCBvcHRpb25zKSB7XG4gIGNvbnN0IHBvc2l0aW9uID0gb3B0aW9ucy5wb3NpdGlvbjtcbiAgaWYgKHBvc2l0aW9ucy5pbmNsdWRlcyhwb3NpdGlvbikpIHtcbiAgICByZXR1cm4gcG9zaXRpb247XG4gIH1cbiAgcmV0dXJuIHJlc29sdmVDYWxsb3V0QXV0b1Bvc2l0aW9uKGVsZW1lbnQsIG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlQ2FsbG91dEF1dG9Qb3NpdGlvbihlbGVtZW50LCBvcHRpb25zKSB7XG4gIGNvbnN0IHt4LCB5LCB4MiwgeTIsIHdpZHRoLCBoZWlnaHQsIHBvaW50WCwgcG9pbnRZLCBjZW50ZXJYLCBjZW50ZXJZLCByb3RhdGlvbn0gPSBlbGVtZW50O1xuICBjb25zdCBjZW50ZXIgPSB7eDogY2VudGVyWCwgeTogY2VudGVyWX07XG4gIGNvbnN0IHN0YXJ0ID0gb3B0aW9ucy5zdGFydDtcbiAgY29uc3QgeEFkanVzdCA9IGdldFNpemUod2lkdGgsIHN0YXJ0KTtcbiAgY29uc3QgeUFkanVzdCA9IGdldFNpemUoaGVpZ2h0LCBzdGFydCk7XG4gIGNvbnN0IHhQb2ludHMgPSBbeCwgeCArIHhBZGp1c3QsIHggKyB4QWRqdXN0LCB4Ml07XG4gIGNvbnN0IHlQb2ludHMgPSBbeSArIHlBZGp1c3QsIHkyLCB5LCB5Ml07XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgNDsgaW5kZXgrKykge1xuICAgIGNvbnN0IHJvdGF0ZWRQb2ludCA9IHJvdGF0ZWQoe3g6IHhQb2ludHNbaW5kZXhdLCB5OiB5UG9pbnRzW2luZGV4XX0sIGNlbnRlciwgdG9SYWRpYW5zKHJvdGF0aW9uKSk7XG4gICAgcmVzdWx0LnB1c2goe1xuICAgICAgcG9zaXRpb246IHBvc2l0aW9uc1tpbmRleF0sXG4gICAgICBkaXN0YW5jZTogZGlzdGFuY2VCZXR3ZWVuUG9pbnRzKHJvdGF0ZWRQb2ludCwge3g6IHBvaW50WCwgeTogcG9pbnRZfSlcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0LnNvcnQoKGEsIGIpID0+IGEuZGlzdGFuY2UgLSBiLmRpc3RhbmNlKVswXS5wb3NpdGlvbjtcbn1cblxuZnVuY3Rpb24gZ2V0TGFiZWxTaXplKHt4LCB5LCB3aWR0aCwgaGVpZ2h0LCBvcHRpb25zfSkge1xuICBjb25zdCBoQm9yZGVyV2lkdGggPSBvcHRpb25zLmJvcmRlcldpZHRoIC8gMjtcbiAgY29uc3QgcGFkZGluZyA9IHRvUGFkZGluZyhvcHRpb25zLnBhZGRpbmcpO1xuICByZXR1cm4ge1xuICAgIHg6IHggKyBwYWRkaW5nLmxlZnQgKyBoQm9yZGVyV2lkdGgsXG4gICAgeTogeSArIHBhZGRpbmcudG9wICsgaEJvcmRlcldpZHRoLFxuICAgIHdpZHRoOiB3aWR0aCAtIHBhZGRpbmcubGVmdCAtIHBhZGRpbmcucmlnaHQgLSBvcHRpb25zLmJvcmRlcldpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0IC0gcGFkZGluZy50b3AgLSBwYWRkaW5nLmJvdHRvbSAtIG9wdGlvbnMuYm9yZGVyV2lkdGhcbiAgfTtcbn1cblxuZnVuY3Rpb24gaXNQb2ludEluUmFuZ2UoZWxlbWVudCwgY2FsbG91dCwgcG9zaXRpb24pIHtcbiAgY29uc3Qge3BvaW50WCwgcG9pbnRZfSA9IGVsZW1lbnQ7XG4gIGNvbnN0IG1hcmdpbiA9IGNhbGxvdXQubWFyZ2luO1xuICBsZXQgeCA9IHBvaW50WDtcbiAgbGV0IHkgPSBwb2ludFk7XG4gIGlmIChwb3NpdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgeCArPSBtYXJnaW47XG4gIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdyaWdodCcpIHtcbiAgICB4IC09IG1hcmdpbjtcbiAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcpIHtcbiAgICB5ICs9IG1hcmdpbjtcbiAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2JvdHRvbScpIHtcbiAgICB5IC09IG1hcmdpbjtcbiAgfVxuICByZXR1cm4gZWxlbWVudC5pblJhbmdlKHgsIHkpO1xufVxuXG5jb25zdCBwb2ludEluTGluZSA9IChwMSwgcDIsIHQpID0+ICh7eDogcDEueCArIHQgKiAocDIueCAtIHAxLngpLCB5OiBwMS55ICsgdCAqIChwMi55IC0gcDEueSl9KTtcbmNvbnN0IGludGVycG9sYXRlWCA9ICh5LCBwMSwgcDIpID0+IHBvaW50SW5MaW5lKHAxLCBwMiwgTWF0aC5hYnMoKHkgLSBwMS55KSAvIChwMi55IC0gcDEueSkpKS54O1xuY29uc3QgaW50ZXJwb2xhdGVZID0gKHgsIHAxLCBwMikgPT4gcG9pbnRJbkxpbmUocDEsIHAyLCBNYXRoLmFicygoeCAtIHAxLngpIC8gKHAyLnggLSBwMS54KSkpLnk7XG5jb25zdCBzcXIgPSB2ID0+IHYgKiB2O1xuY29uc3QgcmFuZ2VMaW1pdCA9IChtb3VzZVgsIG1vdXNlWSwge3gsIHksIHgyLCB5Mn0sIGF4aXMpID0+IGF4aXMgPT09ICd5JyA/IHtzdGFydDogTWF0aC5taW4oeSwgeTIpLCBlbmQ6IE1hdGgubWF4KHksIHkyKSwgdmFsdWU6IG1vdXNlWX0gOiB7c3RhcnQ6IE1hdGgubWluKHgsIHgyKSwgZW5kOiBNYXRoLm1heCh4LCB4MiksIHZhbHVlOiBtb3VzZVh9O1xuLy8gaHR0cDovL3d3dy5pbmRlcGVuZGVudC1zb2Z0d2FyZS5jb20vZGV0ZXJtaW5pbmctY29vcmRpbmF0ZXMtb24tYS1odG1sLWNhbnZhcy1iZXppZXItY3VydmUuaHRtbFxuY29uc3QgY29vcmRJbkN1cnZlID0gKHN0YXJ0LCBjcCwgZW5kLCB0KSA9PiAoMSAtIHQpICogKDEgLSB0KSAqIHN0YXJ0ICsgMiAqICgxIC0gdCkgKiB0ICogY3AgKyB0ICogdCAqIGVuZDtcbmNvbnN0IHBvaW50SW5DdXJ2ZSA9IChzdGFydCwgY3AsIGVuZCwgdCkgPT4gKHt4OiBjb29yZEluQ3VydmUoc3RhcnQueCwgY3AueCwgZW5kLngsIHQpLCB5OiBjb29yZEluQ3VydmUoc3RhcnQueSwgY3AueSwgZW5kLnksIHQpfSk7XG5jb25zdCBjb29yZEFuZ2xlSW5DdXJ2ZSA9IChzdGFydCwgY3AsIGVuZCwgdCkgPT4gMiAqICgxIC0gdCkgKiAoY3AgLSBzdGFydCkgKyAyICogdCAqIChlbmQgLSBjcCk7XG5jb25zdCBhbmdsZUluQ3VydmUgPSAoc3RhcnQsIGNwLCBlbmQsIHQpID0+IC1NYXRoLmF0YW4yKGNvb3JkQW5nbGVJbkN1cnZlKHN0YXJ0LngsIGNwLngsIGVuZC54LCB0KSwgY29vcmRBbmdsZUluQ3VydmUoc3RhcnQueSwgY3AueSwgZW5kLnksIHQpKSArIDAuNSAqIFBJO1xuXG5jbGFzcyBMaW5lQW5ub3RhdGlvbiBleHRlbmRzIEVsZW1lbnQge1xuXG4gIGluUmFuZ2UobW91c2VYLCBtb3VzZVksIGF4aXMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICBjb25zdCBoQm9yZGVyV2lkdGggPSB0aGlzLm9wdGlvbnMuYm9yZGVyV2lkdGggLyAyO1xuICAgIGlmIChheGlzICE9PSAneCcgJiYgYXhpcyAhPT0gJ3knKSB7XG4gICAgICBjb25zdCBwb2ludCA9IHttb3VzZVgsIG1vdXNlWX07XG4gICAgICBjb25zdCB7cGF0aCwgY3R4fSA9IHRoaXM7XG4gICAgICBpZiAocGF0aCkge1xuICAgICAgICBzZXRCb3JkZXJTdHlsZShjdHgsIHRoaXMub3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IHtjaGFydH0gPSB0aGlzLiRjb250ZXh0O1xuICAgICAgICBjb25zdCBteCA9IG1vdXNlWCAqIGNoYXJ0LmN1cnJlbnREZXZpY2VQaXhlbFJhdGlvO1xuICAgICAgICBjb25zdCBteSA9IG1vdXNlWSAqIGNoYXJ0LmN1cnJlbnREZXZpY2VQaXhlbFJhdGlvO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBjdHguaXNQb2ludEluU3Ryb2tlKHBhdGgsIG14LCBteSkgfHwgaXNPbkxhYmVsKHRoaXMsIHBvaW50LCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGVwc2lsb24gPSBzcXIoaEJvcmRlcldpZHRoKTtcbiAgICAgIHJldHVybiBpbnRlcnNlY3RzKHRoaXMsIHBvaW50LCBlcHNpbG9uLCB1c2VGaW5hbFBvc2l0aW9uKSB8fCBpc09uTGFiZWwodGhpcywgcG9pbnQsIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIH1cbiAgICByZXR1cm4gaW5BeGlzUmFuZ2UodGhpcywge21vdXNlWCwgbW91c2VZfSwgYXhpcywge2hCb3JkZXJXaWR0aCwgdXNlRmluYWxQb3NpdGlvbn0pO1xuICB9XG5cbiAgZ2V0Q2VudGVyUG9pbnQodXNlRmluYWxQb3NpdGlvbikge1xuICAgIHJldHVybiBnZXRFbGVtZW50Q2VudGVyUG9pbnQodGhpcywgdXNlRmluYWxQb3NpdGlvbik7XG4gIH1cblxuICBkcmF3KGN0eCkge1xuICAgIGNvbnN0IHt4LCB5LCB4MiwgeTIsIGNwLCBvcHRpb25zfSA9IHRoaXM7XG5cbiAgICBjdHguc2F2ZSgpO1xuICAgIGlmICghc2V0Qm9yZGVyU3R5bGUoY3R4LCBvcHRpb25zKSkge1xuICAgICAgLy8gbm8gYm9yZGVyIHdpZHRoLCB0aGVuIGxpbmUgaXMgbm90IGRyYXduXG4gICAgICByZXR1cm4gY3R4LnJlc3RvcmUoKTtcbiAgICB9XG4gICAgc2V0U2hhZG93U3R5bGUoY3R4LCBvcHRpb25zKTtcblxuICAgIGNvbnN0IGxlbmd0aCA9IE1hdGguc3FydChNYXRoLnBvdyh4MiAtIHgsIDIpICsgTWF0aC5wb3coeTIgLSB5LCAyKSk7XG4gICAgaWYgKG9wdGlvbnMuY3VydmUgJiYgY3ApIHtcbiAgICAgIGRyYXdDdXJ2ZShjdHgsIHRoaXMsIGNwLCBsZW5ndGgpO1xuICAgICAgcmV0dXJuIGN0eC5yZXN0b3JlKCk7XG4gICAgfVxuICAgIGNvbnN0IHtzdGFydE9wdHMsIGVuZE9wdHMsIHN0YXJ0QWRqdXN0LCBlbmRBZGp1c3R9ID0gZ2V0QXJyb3dIZWFkcyh0aGlzKTtcbiAgICBjb25zdCBhbmdsZSA9IE1hdGguYXRhbjIoeTIgLSB5LCB4MiAtIHgpO1xuICAgIGN0eC50cmFuc2xhdGUoeCwgeSk7XG4gICAgY3R4LnJvdGF0ZShhbmdsZSk7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5tb3ZlVG8oMCArIHN0YXJ0QWRqdXN0LCAwKTtcbiAgICBjdHgubGluZVRvKGxlbmd0aCAtIGVuZEFkanVzdCwgMCk7XG4gICAgY3R4LnNoYWRvd0NvbG9yID0gb3B0aW9ucy5ib3JkZXJTaGFkb3dDb2xvcjtcbiAgICBjdHguc3Ryb2tlKCk7XG4gICAgZHJhd0Fycm93SGVhZChjdHgsIDAsIHN0YXJ0QWRqdXN0LCBzdGFydE9wdHMpO1xuICAgIGRyYXdBcnJvd0hlYWQoY3R4LCBsZW5ndGgsIC1lbmRBZGp1c3QsIGVuZE9wdHMpO1xuICAgIGN0eC5yZXN0b3JlKCk7XG4gIH1cblxuICBnZXQgbGFiZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudHMgJiYgdGhpcy5lbGVtZW50c1swXTtcbiAgfVxuXG4gIHJlc29sdmVFbGVtZW50UHJvcGVydGllcyhjaGFydCwgb3B0aW9ucykge1xuICAgIGNvbnN0IGFyZWEgPSByZXNvbHZlTGluZVByb3BlcnRpZXMoY2hhcnQsIG9wdGlvbnMpO1xuICAgIGNvbnN0IHt4LCB5LCB4MiwgeTJ9ID0gYXJlYTtcbiAgICBjb25zdCBpbnNpZGUgPSBpc0xpbmVJbkFyZWEoYXJlYSwgY2hhcnQuY2hhcnRBcmVhKTtcbiAgICBjb25zdCBwcm9wZXJ0aWVzID0gaW5zaWRlXG4gICAgICA/IGxpbWl0TGluZVRvQXJlYSh7eCwgeX0sIHt4OiB4MiwgeTogeTJ9LCBjaGFydC5jaGFydEFyZWEpXG4gICAgICA6IHt4LCB5LCB4MiwgeTIsIHdpZHRoOiBNYXRoLmFicyh4MiAtIHgpLCBoZWlnaHQ6IE1hdGguYWJzKHkyIC0geSl9O1xuICAgIHByb3BlcnRpZXMuY2VudGVyWCA9ICh4MiArIHgpIC8gMjtcbiAgICBwcm9wZXJ0aWVzLmNlbnRlclkgPSAoeTIgKyB5KSAvIDI7XG4gICAgcHJvcGVydGllcy5pbml0UHJvcGVydGllcyA9IGluaXRBbmltYXRpb25Qcm9wZXJ0aWVzKGNoYXJ0LCBwcm9wZXJ0aWVzLCBvcHRpb25zKTtcbiAgICBpZiAob3B0aW9ucy5jdXJ2ZSkge1xuICAgICAgY29uc3QgcDEgPSB7eDogcHJvcGVydGllcy54LCB5OiBwcm9wZXJ0aWVzLnl9O1xuICAgICAgY29uc3QgcDIgPSB7eDogcHJvcGVydGllcy54MiwgeTogcHJvcGVydGllcy55Mn07XG4gICAgICBwcm9wZXJ0aWVzLmNwID0gZ2V0Q29udHJvbFBvaW50KHByb3BlcnRpZXMsIG9wdGlvbnMsIGRpc3RhbmNlQmV0d2VlblBvaW50cyhwMSwgcDIpKTtcbiAgICB9XG4gICAgY29uc3QgbGFiZWxQcm9wZXJ0aWVzID0gcmVzb2x2ZUxhYmVsRWxlbWVudFByb3BlcnRpZXMoY2hhcnQsIHByb3BlcnRpZXMsIG9wdGlvbnMubGFiZWwpO1xuICAgIC8vIGFkZGl0b25hbCBwcm9wIHRvIG1hbmFnZSB6b29tL3BhblxuICAgIGxhYmVsUHJvcGVydGllcy5fdmlzaWJsZSA9IGluc2lkZTtcblxuICAgIHByb3BlcnRpZXMuZWxlbWVudHMgPSBbe1xuICAgICAgdHlwZTogJ2xhYmVsJyxcbiAgICAgIG9wdGlvblNjb3BlOiAnbGFiZWwnLFxuICAgICAgcHJvcGVydGllczogbGFiZWxQcm9wZXJ0aWVzLFxuICAgICAgaW5pdFByb3BlcnRpZXM6IHByb3BlcnRpZXMuaW5pdFByb3BlcnRpZXNcbiAgICB9XTtcbiAgICByZXR1cm4gcHJvcGVydGllcztcbiAgfVxufVxuXG5MaW5lQW5ub3RhdGlvbi5pZCA9ICdsaW5lQW5ub3RhdGlvbic7XG5cbmNvbnN0IGFycm93SGVhZHNEZWZhdWx0cyA9IHtcbiAgYmFja2dyb3VuZENvbG9yOiB1bmRlZmluZWQsXG4gIGJhY2tncm91bmRTaGFkb3dDb2xvcjogdW5kZWZpbmVkLFxuICBib3JkZXJDb2xvcjogdW5kZWZpbmVkLFxuICBib3JkZXJEYXNoOiB1bmRlZmluZWQsXG4gIGJvcmRlckRhc2hPZmZzZXQ6IHVuZGVmaW5lZCxcbiAgYm9yZGVyU2hhZG93Q29sb3I6IHVuZGVmaW5lZCxcbiAgYm9yZGVyV2lkdGg6IHVuZGVmaW5lZCxcbiAgZGlzcGxheTogdW5kZWZpbmVkLFxuICBmaWxsOiB1bmRlZmluZWQsXG4gIGxlbmd0aDogdW5kZWZpbmVkLFxuICBzaGFkb3dCbHVyOiB1bmRlZmluZWQsXG4gIHNoYWRvd09mZnNldFg6IHVuZGVmaW5lZCxcbiAgc2hhZG93T2Zmc2V0WTogdW5kZWZpbmVkLFxuICB3aWR0aDogdW5kZWZpbmVkXG59O1xuXG5MaW5lQW5ub3RhdGlvbi5kZWZhdWx0cyA9IHtcbiAgYWRqdXN0U2NhbGVSYW5nZTogdHJ1ZSxcbiAgYXJyb3dIZWFkczoge1xuICAgIGRpc3BsYXk6IGZhbHNlLFxuICAgIGVuZDogT2JqZWN0LmFzc2lnbih7fSwgYXJyb3dIZWFkc0RlZmF1bHRzKSxcbiAgICBmaWxsOiBmYWxzZSxcbiAgICBsZW5ndGg6IDEyLFxuICAgIHN0YXJ0OiBPYmplY3QuYXNzaWduKHt9LCBhcnJvd0hlYWRzRGVmYXVsdHMpLFxuICAgIHdpZHRoOiA2XG4gIH0sXG4gIGJvcmRlckRhc2g6IFtdLFxuICBib3JkZXJEYXNoT2Zmc2V0OiAwLFxuICBib3JkZXJTaGFkb3dDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgYm9yZGVyV2lkdGg6IDIsXG4gIGN1cnZlOiBmYWxzZSxcbiAgY29udHJvbFBvaW50OiB7XG4gICAgeTogJy01MCUnXG4gIH0sXG4gIGRpc3BsYXk6IHRydWUsXG4gIGVuZFZhbHVlOiB1bmRlZmluZWQsXG4gIGluaXQ6IHVuZGVmaW5lZCxcbiAgbGFiZWw6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsMCwwLDAuOCknLFxuICAgIGJhY2tncm91bmRTaGFkb3dDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICBib3JkZXJDYXBTdHlsZTogJ2J1dHQnLFxuICAgIGJvcmRlckNvbG9yOiAnYmxhY2snLFxuICAgIGJvcmRlckRhc2g6IFtdLFxuICAgIGJvcmRlckRhc2hPZmZzZXQ6IDAsXG4gICAgYm9yZGVySm9pblN0eWxlOiAnbWl0ZXInLFxuICAgIGJvcmRlclJhZGl1czogNixcbiAgICBib3JkZXJTaGFkb3dDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICBib3JkZXJXaWR0aDogMCxcbiAgICBjYWxsb3V0OiBPYmplY3QuYXNzaWduKHt9LCBMYWJlbEFubm90YXRpb24uZGVmYXVsdHMuY2FsbG91dCksXG4gICAgY29sb3I6ICcjZmZmJyxcbiAgICBjb250ZW50OiBudWxsLFxuICAgIGRpc3BsYXk6IGZhbHNlLFxuICAgIGRyYXdUaW1lOiB1bmRlZmluZWQsXG4gICAgZm9udDoge1xuICAgICAgZmFtaWx5OiB1bmRlZmluZWQsXG4gICAgICBsaW5lSGVpZ2h0OiB1bmRlZmluZWQsXG4gICAgICBzaXplOiB1bmRlZmluZWQsXG4gICAgICBzdHlsZTogdW5kZWZpbmVkLFxuICAgICAgd2VpZ2h0OiAnYm9sZCdcbiAgICB9LFxuICAgIGhlaWdodDogdW5kZWZpbmVkLFxuICAgIG9wYWNpdHk6IHVuZGVmaW5lZCxcbiAgICBwYWRkaW5nOiA2LFxuICAgIHBvc2l0aW9uOiAnY2VudGVyJyxcbiAgICByb3RhdGlvbjogMCxcbiAgICBzaGFkb3dCbHVyOiAwLFxuICAgIHNoYWRvd09mZnNldFg6IDAsXG4gICAgc2hhZG93T2Zmc2V0WTogMCxcbiAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgIHRleHRTdHJva2VDb2xvcjogdW5kZWZpbmVkLFxuICAgIHRleHRTdHJva2VXaWR0aDogMCxcbiAgICB3aWR0aDogdW5kZWZpbmVkLFxuICAgIHhBZGp1c3Q6IDAsXG4gICAgeUFkanVzdDogMCxcbiAgICB6OiB1bmRlZmluZWRcbiAgfSxcbiAgc2NhbGVJRDogdW5kZWZpbmVkLFxuICBzaGFkb3dCbHVyOiAwLFxuICBzaGFkb3dPZmZzZXRYOiAwLFxuICBzaGFkb3dPZmZzZXRZOiAwLFxuICB2YWx1ZTogdW5kZWZpbmVkLFxuICB4TWF4OiB1bmRlZmluZWQsXG4gIHhNaW46IHVuZGVmaW5lZCxcbiAgeFNjYWxlSUQ6IHVuZGVmaW5lZCxcbiAgeU1heDogdW5kZWZpbmVkLFxuICB5TWluOiB1bmRlZmluZWQsXG4gIHlTY2FsZUlEOiB1bmRlZmluZWQsXG4gIHo6IDBcbn07XG5cbkxpbmVBbm5vdGF0aW9uLmRlc2NyaXB0b3JzID0ge1xuICBhcnJvd0hlYWRzOiB7XG4gICAgc3RhcnQ6IHtcbiAgICAgIF9mYWxsYmFjazogdHJ1ZVxuICAgIH0sXG4gICAgZW5kOiB7XG4gICAgICBfZmFsbGJhY2s6IHRydWVcbiAgICB9LFxuICAgIF9mYWxsYmFjazogdHJ1ZVxuICB9XG59O1xuXG5MaW5lQW5ub3RhdGlvbi5kZWZhdWx0Um91dGVzID0ge1xuICBib3JkZXJDb2xvcjogJ2NvbG9yJ1xufTtcblxuZnVuY3Rpb24gaW5BeGlzUmFuZ2UoZWxlbWVudCwge21vdXNlWCwgbW91c2VZfSwgYXhpcywge2hCb3JkZXJXaWR0aCwgdXNlRmluYWxQb3NpdGlvbn0pIHtcbiAgY29uc3QgbGltaXQgPSByYW5nZUxpbWl0KG1vdXNlWCwgbW91c2VZLCBlbGVtZW50LmdldFByb3BzKFsneCcsICd5JywgJ3gyJywgJ3kyJ10sIHVzZUZpbmFsUG9zaXRpb24pLCBheGlzKTtcbiAgcmV0dXJuIChsaW1pdC52YWx1ZSA+PSBsaW1pdC5zdGFydCAtIGhCb3JkZXJXaWR0aCAmJiBsaW1pdC52YWx1ZSA8PSBsaW1pdC5lbmQgKyBoQm9yZGVyV2lkdGgpIHx8IGlzT25MYWJlbChlbGVtZW50LCB7bW91c2VYLCBtb3VzZVl9LCB1c2VGaW5hbFBvc2l0aW9uLCBheGlzKTtcbn1cblxuZnVuY3Rpb24gaXNMaW5lSW5BcmVhKHt4LCB5LCB4MiwgeTJ9LCB7dG9wLCByaWdodCwgYm90dG9tLCBsZWZ0fSkge1xuICByZXR1cm4gIShcbiAgICAoeCA8IGxlZnQgJiYgeDIgPCBsZWZ0KSB8fFxuICAgICh4ID4gcmlnaHQgJiYgeDIgPiByaWdodCkgfHxcbiAgICAoeSA8IHRvcCAmJiB5MiA8IHRvcCkgfHxcbiAgICAoeSA+IGJvdHRvbSAmJiB5MiA+IGJvdHRvbSlcbiAgKTtcbn1cblxuZnVuY3Rpb24gbGltaXRQb2ludFRvQXJlYSh7eCwgeX0sIHAyLCB7dG9wLCByaWdodCwgYm90dG9tLCBsZWZ0fSkge1xuICBpZiAoeCA8IGxlZnQpIHtcbiAgICB5ID0gaW50ZXJwb2xhdGVZKGxlZnQsIHt4LCB5fSwgcDIpO1xuICAgIHggPSBsZWZ0O1xuICB9XG4gIGlmICh4ID4gcmlnaHQpIHtcbiAgICB5ID0gaW50ZXJwb2xhdGVZKHJpZ2h0LCB7eCwgeX0sIHAyKTtcbiAgICB4ID0gcmlnaHQ7XG4gIH1cbiAgaWYgKHkgPCB0b3ApIHtcbiAgICB4ID0gaW50ZXJwb2xhdGVYKHRvcCwge3gsIHl9LCBwMik7XG4gICAgeSA9IHRvcDtcbiAgfVxuICBpZiAoeSA+IGJvdHRvbSkge1xuICAgIHggPSBpbnRlcnBvbGF0ZVgoYm90dG9tLCB7eCwgeX0sIHAyKTtcbiAgICB5ID0gYm90dG9tO1xuICB9XG4gIHJldHVybiB7eCwgeX07XG59XG5cbmZ1bmN0aW9uIGxpbWl0TGluZVRvQXJlYShwMSwgcDIsIGFyZWEpIHtcbiAgY29uc3Qge3gsIHl9ID0gbGltaXRQb2ludFRvQXJlYShwMSwgcDIsIGFyZWEpO1xuICBjb25zdCB7eDogeDIsIHk6IHkyfSA9IGxpbWl0UG9pbnRUb0FyZWEocDIsIHAxLCBhcmVhKTtcbiAgcmV0dXJuIHt4LCB5LCB4MiwgeTIsIHdpZHRoOiBNYXRoLmFicyh4MiAtIHgpLCBoZWlnaHQ6IE1hdGguYWJzKHkyIC0geSl9O1xufVxuXG5mdW5jdGlvbiBpbnRlcnNlY3RzKGVsZW1lbnQsIHttb3VzZVgsIG1vdXNlWX0sIGVwc2lsb24gPSBFUFNJTE9OLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gIC8vIEFkYXB0ZWQgZnJvbSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNjg1MzkyNi8yNTUwN1xuICBjb25zdCB7eDogeDEsIHk6IHkxLCB4MiwgeTJ9ID0gZWxlbWVudC5nZXRQcm9wcyhbJ3gnLCAneScsICd4MicsICd5MiddLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgY29uc3QgZHggPSB4MiAtIHgxO1xuICBjb25zdCBkeSA9IHkyIC0geTE7XG4gIGNvbnN0IGxlblNxID0gc3FyKGR4KSArIHNxcihkeSk7XG4gIGNvbnN0IHQgPSBsZW5TcSA9PT0gMCA/IC0xIDogKChtb3VzZVggLSB4MSkgKiBkeCArIChtb3VzZVkgLSB5MSkgKiBkeSkgLyBsZW5TcTtcbiAgbGV0IHh4LCB5eTtcbiAgaWYgKHQgPCAwKSB7XG4gICAgeHggPSB4MTtcbiAgICB5eSA9IHkxO1xuICB9IGVsc2UgaWYgKHQgPiAxKSB7XG4gICAgeHggPSB4MjtcbiAgICB5eSA9IHkyO1xuICB9IGVsc2Uge1xuICAgIHh4ID0geDEgKyB0ICogZHg7XG4gICAgeXkgPSB5MSArIHQgKiBkeTtcbiAgfVxuICByZXR1cm4gKHNxcihtb3VzZVggLSB4eCkgKyBzcXIobW91c2VZIC0geXkpKSA8PSBlcHNpbG9uO1xufVxuXG5mdW5jdGlvbiBpc09uTGFiZWwoZWxlbWVudCwge21vdXNlWCwgbW91c2VZfSwgdXNlRmluYWxQb3NpdGlvbiwgYXhpcykge1xuICBjb25zdCBsYWJlbCA9IGVsZW1lbnQubGFiZWw7XG4gIHJldHVybiBsYWJlbC5vcHRpb25zLmRpc3BsYXkgJiYgbGFiZWwuaW5SYW5nZShtb3VzZVgsIG1vdXNlWSwgYXhpcywgdXNlRmluYWxQb3NpdGlvbik7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVMYWJlbEVsZW1lbnRQcm9wZXJ0aWVzKGNoYXJ0LCBwcm9wZXJ0aWVzLCBvcHRpb25zKSB7XG4gIGNvbnN0IGJvcmRlcldpZHRoID0gb3B0aW9ucy5ib3JkZXJXaWR0aDtcbiAgY29uc3QgcGFkZGluZyA9IHRvUGFkZGluZyhvcHRpb25zLnBhZGRpbmcpO1xuICBjb25zdCB0ZXh0U2l6ZSA9IG1lYXN1cmVMYWJlbFNpemUoY2hhcnQuY3R4LCBvcHRpb25zKTtcbiAgY29uc3Qgd2lkdGggPSB0ZXh0U2l6ZS53aWR0aCArIHBhZGRpbmcud2lkdGggKyBib3JkZXJXaWR0aDtcbiAgY29uc3QgaGVpZ2h0ID0gdGV4dFNpemUuaGVpZ2h0ICsgcGFkZGluZy5oZWlnaHQgKyBib3JkZXJXaWR0aDtcbiAgcmV0dXJuIGNhbGN1bGF0ZUxhYmVsUG9zaXRpb24ocHJvcGVydGllcywgb3B0aW9ucywge3dpZHRoLCBoZWlnaHQsIHBhZGRpbmd9LCBjaGFydC5jaGFydEFyZWEpO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVBdXRvUm90YXRpb24ocHJvcGVydGllcykge1xuICBjb25zdCB7eCwgeSwgeDIsIHkyfSA9IHByb3BlcnRpZXM7XG4gIGNvbnN0IHJvdGF0aW9uID0gTWF0aC5hdGFuMih5MiAtIHksIHgyIC0geCk7XG4gIC8vIEZsaXAgdGhlIHJvdGF0aW9uIGlmIGl0IGdvZXMgPiBQSS8yIG9yIDwgLVBJLzIsIHNvIGxhYmVsIHN0YXlzIHVwcmlnaHRcbiAgcmV0dXJuIHJvdGF0aW9uID4gUEkgLyAyID8gcm90YXRpb24gLSBQSSA6IHJvdGF0aW9uIDwgUEkgLyAtMiA/IHJvdGF0aW9uICsgUEkgOiByb3RhdGlvbjtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlTGFiZWxQb3NpdGlvbihwcm9wZXJ0aWVzLCBsYWJlbCwgc2l6ZXMsIGNoYXJ0QXJlYSkge1xuICBjb25zdCB7d2lkdGgsIGhlaWdodCwgcGFkZGluZ30gPSBzaXplcztcbiAgY29uc3Qge3hBZGp1c3QsIHlBZGp1c3R9ID0gbGFiZWw7XG4gIGNvbnN0IHAxID0ge3g6IHByb3BlcnRpZXMueCwgeTogcHJvcGVydGllcy55fTtcbiAgY29uc3QgcDIgPSB7eDogcHJvcGVydGllcy54MiwgeTogcHJvcGVydGllcy55Mn07XG4gIGNvbnN0IHJvdGF0aW9uID0gbGFiZWwucm90YXRpb24gPT09ICdhdXRvJyA/IGNhbGN1bGF0ZUF1dG9Sb3RhdGlvbihwcm9wZXJ0aWVzKSA6IHRvUmFkaWFucyhsYWJlbC5yb3RhdGlvbik7XG4gIGNvbnN0IHNpemUgPSByb3RhdGVkU2l6ZSh3aWR0aCwgaGVpZ2h0LCByb3RhdGlvbik7XG4gIGNvbnN0IHQgPSBjYWxjdWxhdGVUKHByb3BlcnRpZXMsIGxhYmVsLCB7bGFiZWxTaXplOiBzaXplLCBwYWRkaW5nfSwgY2hhcnRBcmVhKTtcbiAgY29uc3QgcHQgPSBwcm9wZXJ0aWVzLmNwID8gcG9pbnRJbkN1cnZlKHAxLCBwcm9wZXJ0aWVzLmNwLCBwMiwgdCkgOiBwb2ludEluTGluZShwMSwgcDIsIHQpO1xuICBjb25zdCB4Q29vcmRpbmF0ZVNpemVzID0ge3NpemU6IHNpemUudywgbWluOiBjaGFydEFyZWEubGVmdCwgbWF4OiBjaGFydEFyZWEucmlnaHQsIHBhZGRpbmc6IHBhZGRpbmcubGVmdH07XG4gIGNvbnN0IHlDb29yZGluYXRlU2l6ZXMgPSB7c2l6ZTogc2l6ZS5oLCBtaW46IGNoYXJ0QXJlYS50b3AsIG1heDogY2hhcnRBcmVhLmJvdHRvbSwgcGFkZGluZzogcGFkZGluZy50b3B9O1xuICBjb25zdCBjZW50ZXJYID0gYWRqdXN0TGFiZWxDb29yZGluYXRlKHB0LngsIHhDb29yZGluYXRlU2l6ZXMpICsgeEFkanVzdDtcbiAgY29uc3QgY2VudGVyWSA9IGFkanVzdExhYmVsQ29vcmRpbmF0ZShwdC55LCB5Q29vcmRpbmF0ZVNpemVzKSArIHlBZGp1c3Q7XG4gIHJldHVybiB7XG4gICAgeDogY2VudGVyWCAtICh3aWR0aCAvIDIpLFxuICAgIHk6IGNlbnRlclkgLSAoaGVpZ2h0IC8gMiksXG4gICAgeDI6IGNlbnRlclggKyAod2lkdGggLyAyKSxcbiAgICB5MjogY2VudGVyWSArIChoZWlnaHQgLyAyKSxcbiAgICBjZW50ZXJYLFxuICAgIGNlbnRlclksXG4gICAgcG9pbnRYOiBwdC54LFxuICAgIHBvaW50WTogcHQueSxcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgcm90YXRpb246IHRvRGVncmVlcyhyb3RhdGlvbilcbiAgfTtcbn1cblxuZnVuY3Rpb24gcm90YXRlZFNpemUod2lkdGgsIGhlaWdodCwgcm90YXRpb24pIHtcbiAgY29uc3QgY29zID0gTWF0aC5jb3Mocm90YXRpb24pO1xuICBjb25zdCBzaW4gPSBNYXRoLnNpbihyb3RhdGlvbik7XG4gIHJldHVybiB7XG4gICAgdzogTWF0aC5hYnMod2lkdGggKiBjb3MpICsgTWF0aC5hYnMoaGVpZ2h0ICogc2luKSxcbiAgICBoOiBNYXRoLmFicyh3aWR0aCAqIHNpbikgKyBNYXRoLmFicyhoZWlnaHQgKiBjb3MpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZVQocHJvcGVydGllcywgbGFiZWwsIHNpemVzLCBjaGFydEFyZWEpIHtcbiAgbGV0IHQ7XG4gIGNvbnN0IHNwYWNlID0gc3BhY2VBcm91bmQocHJvcGVydGllcywgY2hhcnRBcmVhKTtcbiAgaWYgKGxhYmVsLnBvc2l0aW9uID09PSAnc3RhcnQnKSB7XG4gICAgdCA9IGNhbGN1bGF0ZVRBZGp1c3Qoe3c6IHByb3BlcnRpZXMueDIgLSBwcm9wZXJ0aWVzLngsIGg6IHByb3BlcnRpZXMueTIgLSBwcm9wZXJ0aWVzLnl9LCBzaXplcywgbGFiZWwsIHNwYWNlKTtcbiAgfSBlbHNlIGlmIChsYWJlbC5wb3NpdGlvbiA9PT0gJ2VuZCcpIHtcbiAgICB0ID0gMSAtIGNhbGN1bGF0ZVRBZGp1c3Qoe3c6IHByb3BlcnRpZXMueCAtIHByb3BlcnRpZXMueDIsIGg6IHByb3BlcnRpZXMueSAtIHByb3BlcnRpZXMueTJ9LCBzaXplcywgbGFiZWwsIHNwYWNlKTtcbiAgfSBlbHNlIHtcbiAgICB0ID0gZ2V0UmVsYXRpdmVQb3NpdGlvbigxLCBsYWJlbC5wb3NpdGlvbik7XG4gIH1cbiAgcmV0dXJuIHQ7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZVRBZGp1c3QobGluZVNpemUsIHNpemVzLCBsYWJlbCwgc3BhY2UpIHtcbiAgY29uc3Qge2xhYmVsU2l6ZSwgcGFkZGluZ30gPSBzaXplcztcbiAgY29uc3QgbGluZVcgPSBsaW5lU2l6ZS53ICogc3BhY2UuZHg7XG4gIGNvbnN0IGxpbmVIID0gbGluZVNpemUuaCAqIHNwYWNlLmR5O1xuICBjb25zdCB4ID0gKGxpbmVXID4gMCkgJiYgKChsYWJlbFNpemUudyAvIDIgKyBwYWRkaW5nLmxlZnQgLSBzcGFjZS54KSAvIGxpbmVXKTtcbiAgY29uc3QgeSA9IChsaW5lSCA+IDApICYmICgobGFiZWxTaXplLmggLyAyICsgcGFkZGluZy50b3AgLSBzcGFjZS55KSAvIGxpbmVIKTtcbiAgcmV0dXJuIGNsYW1wKE1hdGgubWF4KHgsIHkpLCAwLCAwLjI1KTtcbn1cblxuZnVuY3Rpb24gc3BhY2VBcm91bmQocHJvcGVydGllcywgY2hhcnRBcmVhKSB7XG4gIGNvbnN0IHt4LCB4MiwgeSwgeTJ9ID0gcHJvcGVydGllcztcbiAgY29uc3QgdCA9IE1hdGgubWluKHksIHkyKSAtIGNoYXJ0QXJlYS50b3A7XG4gIGNvbnN0IGwgPSBNYXRoLm1pbih4LCB4MikgLSBjaGFydEFyZWEubGVmdDtcbiAgY29uc3QgYiA9IGNoYXJ0QXJlYS5ib3R0b20gLSBNYXRoLm1heCh5LCB5Mik7XG4gIGNvbnN0IHIgPSBjaGFydEFyZWEucmlnaHQgLSBNYXRoLm1heCh4LCB4Mik7XG4gIHJldHVybiB7XG4gICAgeDogTWF0aC5taW4obCwgciksXG4gICAgeTogTWF0aC5taW4odCwgYiksXG4gICAgZHg6IGwgPD0gciA/IDEgOiAtMSxcbiAgICBkeTogdCA8PSBiID8gMSA6IC0xXG4gIH07XG59XG5cbmZ1bmN0aW9uIGFkanVzdExhYmVsQ29vcmRpbmF0ZShjb29yZGluYXRlLCBsYWJlbFNpemVzKSB7XG4gIGNvbnN0IHtzaXplLCBtaW4sIG1heCwgcGFkZGluZ30gPSBsYWJlbFNpemVzO1xuICBjb25zdCBoYWxmU2l6ZSA9IHNpemUgLyAyO1xuICBpZiAoc2l6ZSA+IG1heCAtIG1pbikge1xuICAgIC8vIGlmIGl0IGRvZXMgbm90IGZpdCwgZGlzcGxheSBhcyBtdWNoIGFzIHBvc3NpYmxlXG4gICAgcmV0dXJuIChtYXggKyBtaW4pIC8gMjtcbiAgfVxuICBpZiAobWluID49IChjb29yZGluYXRlIC0gcGFkZGluZyAtIGhhbGZTaXplKSkge1xuICAgIGNvb3JkaW5hdGUgPSBtaW4gKyBwYWRkaW5nICsgaGFsZlNpemU7XG4gIH1cbiAgaWYgKG1heCA8PSAoY29vcmRpbmF0ZSArIHBhZGRpbmcgKyBoYWxmU2l6ZSkpIHtcbiAgICBjb29yZGluYXRlID0gbWF4IC0gcGFkZGluZyAtIGhhbGZTaXplO1xuICB9XG4gIHJldHVybiBjb29yZGluYXRlO1xufVxuXG5mdW5jdGlvbiBnZXRBcnJvd0hlYWRzKGxpbmUpIHtcbiAgY29uc3Qgb3B0aW9ucyA9IGxpbmUub3B0aW9ucztcbiAgY29uc3QgYXJyb3dTdGFydE9wdHMgPSBvcHRpb25zLmFycm93SGVhZHMgJiYgb3B0aW9ucy5hcnJvd0hlYWRzLnN0YXJ0O1xuICBjb25zdCBhcnJvd0VuZE9wdHMgPSBvcHRpb25zLmFycm93SGVhZHMgJiYgb3B0aW9ucy5hcnJvd0hlYWRzLmVuZDtcbiAgcmV0dXJuIHtcbiAgICBzdGFydE9wdHM6IGFycm93U3RhcnRPcHRzLFxuICAgIGVuZE9wdHM6IGFycm93RW5kT3B0cyxcbiAgICBzdGFydEFkanVzdDogZ2V0TGluZUFkanVzdChsaW5lLCBhcnJvd1N0YXJ0T3B0cyksXG4gICAgZW5kQWRqdXN0OiBnZXRMaW5lQWRqdXN0KGxpbmUsIGFycm93RW5kT3B0cylcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0TGluZUFkanVzdChsaW5lLCBhcnJvd09wdHMpIHtcbiAgaWYgKCFhcnJvd09wdHMgfHwgIWFycm93T3B0cy5kaXNwbGF5KSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgY29uc3Qge2xlbmd0aCwgd2lkdGh9ID0gYXJyb3dPcHRzO1xuICBjb25zdCBhZGp1c3QgPSBsaW5lLm9wdGlvbnMuYm9yZGVyV2lkdGggLyAyO1xuICBjb25zdCBwMSA9IHt4OiBsZW5ndGgsIHk6IHdpZHRoICsgYWRqdXN0fTtcbiAgY29uc3QgcDIgPSB7eDogMCwgeTogYWRqdXN0fTtcbiAgcmV0dXJuIE1hdGguYWJzKGludGVycG9sYXRlWCgwLCBwMSwgcDIpKTtcbn1cblxuZnVuY3Rpb24gZHJhd0Fycm93SGVhZChjdHgsIG9mZnNldCwgYWRqdXN0LCBhcnJvd09wdHMpIHtcbiAgaWYgKCFhcnJvd09wdHMgfHwgIWFycm93T3B0cy5kaXNwbGF5KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHtsZW5ndGgsIHdpZHRoLCBmaWxsLCBiYWNrZ3JvdW5kQ29sb3IsIGJvcmRlckNvbG9yfSA9IGFycm93T3B0cztcbiAgY29uc3QgYXJyb3dPZmZzZXRYID0gTWF0aC5hYnMob2Zmc2V0IC0gbGVuZ3RoKSArIGFkanVzdDtcbiAgY3R4LmJlZ2luUGF0aCgpO1xuICBzZXRTaGFkb3dTdHlsZShjdHgsIGFycm93T3B0cyk7XG4gIHNldEJvcmRlclN0eWxlKGN0eCwgYXJyb3dPcHRzKTtcbiAgY3R4Lm1vdmVUbyhhcnJvd09mZnNldFgsIC13aWR0aCk7XG4gIGN0eC5saW5lVG8ob2Zmc2V0ICsgYWRqdXN0LCAwKTtcbiAgY3R4LmxpbmVUbyhhcnJvd09mZnNldFgsIHdpZHRoKTtcbiAgaWYgKGZpbGwgPT09IHRydWUpIHtcbiAgICBjdHguZmlsbFN0eWxlID0gYmFja2dyb3VuZENvbG9yIHx8IGJvcmRlckNvbG9yO1xuICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICBjdHguZmlsbCgpO1xuICAgIGN0eC5zaGFkb3dDb2xvciA9ICd0cmFuc3BhcmVudCc7XG4gIH0gZWxzZSB7XG4gICAgY3R4LnNoYWRvd0NvbG9yID0gYXJyb3dPcHRzLmJvcmRlclNoYWRvd0NvbG9yO1xuICB9XG4gIGN0eC5zdHJva2UoKTtcbn1cblxuZnVuY3Rpb24gZ2V0Q29udHJvbFBvaW50KHByb3BlcnRpZXMsIG9wdGlvbnMsIGRpc3RhbmNlKSB7XG4gIGNvbnN0IHt4LCB5LCB4MiwgeTIsIGNlbnRlclgsIGNlbnRlcll9ID0gcHJvcGVydGllcztcbiAgY29uc3QgYW5nbGUgPSBNYXRoLmF0YW4yKHkyIC0geSwgeDIgLSB4KTtcbiAgY29uc3QgY3AgPSB0b1Bvc2l0aW9uKG9wdGlvbnMuY29udHJvbFBvaW50LCAwKTtcbiAgY29uc3QgcG9pbnQgPSB7XG4gICAgeDogY2VudGVyWCArIGdldFNpemUoZGlzdGFuY2UsIGNwLngsIGZhbHNlKSxcbiAgICB5OiBjZW50ZXJZICsgZ2V0U2l6ZShkaXN0YW5jZSwgY3AueSwgZmFsc2UpXG4gIH07XG4gIHJldHVybiByb3RhdGVkKHBvaW50LCB7eDogY2VudGVyWCwgeTogY2VudGVyWX0sIGFuZ2xlKTtcbn1cblxuZnVuY3Rpb24gZHJhd0Fycm93SGVhZE9uQ3VydmUoY3R4LCB7eCwgeX0sIHthbmdsZSwgYWRqdXN0fSwgYXJyb3dPcHRzKSB7XG4gIGlmICghYXJyb3dPcHRzIHx8ICFhcnJvd09wdHMuZGlzcGxheSkge1xuICAgIHJldHVybjtcbiAgfVxuICBjdHguc2F2ZSgpO1xuICBjdHgudHJhbnNsYXRlKHgsIHkpO1xuICBjdHgucm90YXRlKGFuZ2xlKTtcbiAgZHJhd0Fycm93SGVhZChjdHgsIDAsIC1hZGp1c3QsIGFycm93T3B0cyk7XG4gIGN0eC5yZXN0b3JlKCk7XG59XG5cbmZ1bmN0aW9uIGRyYXdDdXJ2ZShjdHgsIGVsZW1lbnQsIGNwLCBsZW5ndGgpIHtcbiAgY29uc3Qge3gsIHksIHgyLCB5Miwgb3B0aW9uc30gPSBlbGVtZW50O1xuICBjb25zdCB7c3RhcnRPcHRzLCBlbmRPcHRzLCBzdGFydEFkanVzdCwgZW5kQWRqdXN0fSA9IGdldEFycm93SGVhZHMoZWxlbWVudCk7XG4gIGNvbnN0IHAxID0ge3gsIHl9O1xuICBjb25zdCBwMiA9IHt4OiB4MiwgeTogeTJ9O1xuICBjb25zdCBzdGFydEFuZ2xlID0gYW5nbGVJbkN1cnZlKHAxLCBjcCwgcDIsIDApO1xuICBjb25zdCBlbmRBbmdsZSA9IGFuZ2xlSW5DdXJ2ZShwMSwgY3AsIHAyLCAxKSAtIFBJO1xuICBjb25zdCBwcyA9IHBvaW50SW5DdXJ2ZShwMSwgY3AsIHAyLCBzdGFydEFkanVzdCAvIGxlbmd0aCk7XG4gIGNvbnN0IHBlID0gcG9pbnRJbkN1cnZlKHAxLCBjcCwgcDIsIDEgLSBlbmRBZGp1c3QgLyBsZW5ndGgpO1xuXG4gIGNvbnN0IHBhdGggPSBuZXcgUGF0aDJEKCk7XG4gIGN0eC5iZWdpblBhdGgoKTtcbiAgcGF0aC5tb3ZlVG8ocHMueCwgcHMueSk7XG4gIHBhdGgucXVhZHJhdGljQ3VydmVUbyhjcC54LCBjcC55LCBwZS54LCBwZS55KTtcbiAgY3R4LnNoYWRvd0NvbG9yID0gb3B0aW9ucy5ib3JkZXJTaGFkb3dDb2xvcjtcbiAgY3R4LnN0cm9rZShwYXRoKTtcbiAgZWxlbWVudC5wYXRoID0gcGF0aDtcbiAgZWxlbWVudC5jdHggPSBjdHg7XG4gIGRyYXdBcnJvd0hlYWRPbkN1cnZlKGN0eCwgcHMsIHthbmdsZTogc3RhcnRBbmdsZSwgYWRqdXN0OiBzdGFydEFkanVzdH0sIHN0YXJ0T3B0cyk7XG4gIGRyYXdBcnJvd0hlYWRPbkN1cnZlKGN0eCwgcGUsIHthbmdsZTogZW5kQW5nbGUsIGFkanVzdDogZW5kQWRqdXN0fSwgZW5kT3B0cyk7XG59XG5cbmNsYXNzIEVsbGlwc2VBbm5vdGF0aW9uIGV4dGVuZHMgRWxlbWVudCB7XG5cbiAgaW5SYW5nZShtb3VzZVgsIG1vdXNlWSwgYXhpcywgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIGNvbnN0IHJvdGF0aW9uID0gdGhpcy5vcHRpb25zLnJvdGF0aW9uO1xuICAgIGNvbnN0IGJvcmRlcldpZHRoID0gdGhpcy5vcHRpb25zLmJvcmRlcldpZHRoO1xuICAgIGlmIChheGlzICE9PSAneCcgJiYgYXhpcyAhPT0gJ3knKSB7XG4gICAgICByZXR1cm4gcG9pbnRJbkVsbGlwc2Uoe3g6IG1vdXNlWCwgeTogbW91c2VZfSwgdGhpcy5nZXRQcm9wcyhbJ3dpZHRoJywgJ2hlaWdodCcsICdjZW50ZXJYJywgJ2NlbnRlclknXSwgdXNlRmluYWxQb3NpdGlvbiksIHJvdGF0aW9uLCBib3JkZXJXaWR0aCk7XG4gICAgfVxuICAgIGNvbnN0IHt4LCB5LCB4MiwgeTJ9ID0gdGhpcy5nZXRQcm9wcyhbJ3gnLCAneScsICd4MicsICd5MiddLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICBjb25zdCBoQm9yZGVyV2lkdGggPSBib3JkZXJXaWR0aCAvIDI7XG4gICAgY29uc3QgbGltaXQgPSBheGlzID09PSAneScgPyB7c3RhcnQ6IHksIGVuZDogeTJ9IDoge3N0YXJ0OiB4LCBlbmQ6IHgyfTtcbiAgICBjb25zdCByb3RhdGVkUG9pbnQgPSByb3RhdGVkKHt4OiBtb3VzZVgsIHk6IG1vdXNlWX0sIHRoaXMuZ2V0Q2VudGVyUG9pbnQodXNlRmluYWxQb3NpdGlvbiksIHRvUmFkaWFucygtcm90YXRpb24pKTtcbiAgICByZXR1cm4gcm90YXRlZFBvaW50W2F4aXNdID49IGxpbWl0LnN0YXJ0IC0gaEJvcmRlcldpZHRoIC0gRVBTSUxPTiAmJiByb3RhdGVkUG9pbnRbYXhpc10gPD0gbGltaXQuZW5kICsgaEJvcmRlcldpZHRoICsgRVBTSUxPTjtcbiAgfVxuXG4gIGdldENlbnRlclBvaW50KHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICByZXR1cm4gZ2V0RWxlbWVudENlbnRlclBvaW50KHRoaXMsIHVzZUZpbmFsUG9zaXRpb24pO1xuICB9XG5cbiAgZHJhdyhjdHgpIHtcbiAgICBjb25zdCB7d2lkdGgsIGhlaWdodCwgY2VudGVyWCwgY2VudGVyWSwgb3B0aW9uc30gPSB0aGlzO1xuICAgIGN0eC5zYXZlKCk7XG4gICAgdHJhbnNsYXRlKGN0eCwgdGhpcy5nZXRDZW50ZXJQb2ludCgpLCBvcHRpb25zLnJvdGF0aW9uKTtcbiAgICBzZXRTaGFkb3dTdHlsZShjdHgsIHRoaXMub3B0aW9ucyk7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLmJhY2tncm91bmRDb2xvcjtcbiAgICBjb25zdCBzdHJva2UgPSBzZXRCb3JkZXJTdHlsZShjdHgsIG9wdGlvbnMpO1xuICAgIGN0eC5lbGxpcHNlKGNlbnRlclgsIGNlbnRlclksIGhlaWdodCAvIDIsIHdpZHRoIC8gMiwgUEkgLyAyLCAwLCAyICogUEkpO1xuICAgIGN0eC5maWxsKCk7XG4gICAgaWYgKHN0cm9rZSkge1xuICAgICAgY3R4LnNoYWRvd0NvbG9yID0gb3B0aW9ucy5ib3JkZXJTaGFkb3dDb2xvcjtcbiAgICAgIGN0eC5zdHJva2UoKTtcbiAgICB9XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgfVxuXG4gIGdldCBsYWJlbCgpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50cyAmJiB0aGlzLmVsZW1lbnRzWzBdO1xuICB9XG5cbiAgcmVzb2x2ZUVsZW1lbnRQcm9wZXJ0aWVzKGNoYXJ0LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHJlc29sdmVCb3hBbmRMYWJlbFByb3BlcnRpZXMoY2hhcnQsIG9wdGlvbnMpO1xuICB9XG5cbn1cblxuRWxsaXBzZUFubm90YXRpb24uaWQgPSAnZWxsaXBzZUFubm90YXRpb24nO1xuXG5FbGxpcHNlQW5ub3RhdGlvbi5kZWZhdWx0cyA9IHtcbiAgYWRqdXN0U2NhbGVSYW5nZTogdHJ1ZSxcbiAgYmFja2dyb3VuZFNoYWRvd0NvbG9yOiAndHJhbnNwYXJlbnQnLFxuICBib3JkZXJEYXNoOiBbXSxcbiAgYm9yZGVyRGFzaE9mZnNldDogMCxcbiAgYm9yZGVyU2hhZG93Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gIGJvcmRlcldpZHRoOiAxLFxuICBkaXNwbGF5OiB0cnVlLFxuICBpbml0OiB1bmRlZmluZWQsXG4gIGxhYmVsOiBPYmplY3QuYXNzaWduKHt9LCBCb3hBbm5vdGF0aW9uLmRlZmF1bHRzLmxhYmVsKSxcbiAgcm90YXRpb246IDAsXG4gIHNoYWRvd0JsdXI6IDAsXG4gIHNoYWRvd09mZnNldFg6IDAsXG4gIHNoYWRvd09mZnNldFk6IDAsXG4gIHhNYXg6IHVuZGVmaW5lZCxcbiAgeE1pbjogdW5kZWZpbmVkLFxuICB4U2NhbGVJRDogdW5kZWZpbmVkLFxuICB5TWF4OiB1bmRlZmluZWQsXG4gIHlNaW46IHVuZGVmaW5lZCxcbiAgeVNjYWxlSUQ6IHVuZGVmaW5lZCxcbiAgejogMFxufTtcblxuRWxsaXBzZUFubm90YXRpb24uZGVmYXVsdFJvdXRlcyA9IHtcbiAgYm9yZGVyQ29sb3I6ICdjb2xvcicsXG4gIGJhY2tncm91bmRDb2xvcjogJ2NvbG9yJ1xufTtcblxuRWxsaXBzZUFubm90YXRpb24uZGVzY3JpcHRvcnMgPSB7XG4gIGxhYmVsOiB7XG4gICAgX2ZhbGxiYWNrOiB0cnVlXG4gIH1cbn07XG5cbmZ1bmN0aW9uIHBvaW50SW5FbGxpcHNlKHAsIGVsbGlwc2UsIHJvdGF0aW9uLCBib3JkZXJXaWR0aCkge1xuICBjb25zdCB7d2lkdGgsIGhlaWdodCwgY2VudGVyWCwgY2VudGVyWX0gPSBlbGxpcHNlO1xuICBjb25zdCB4UmFkaXVzID0gd2lkdGggLyAyO1xuICBjb25zdCB5UmFkaXVzID0gaGVpZ2h0IC8gMjtcblxuICBpZiAoeFJhZGl1cyA8PSAwIHx8IHlSYWRpdXMgPD0gMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy83OTQ2MTg3L3BvaW50LWFuZC1lbGxpcHNlLXJvdGF0ZWQtcG9zaXRpb24tdGVzdC1hbGdvcml0aG1cbiAgY29uc3QgYW5nbGUgPSB0b1JhZGlhbnMocm90YXRpb24gfHwgMCk7XG4gIGNvbnN0IGhCb3JkZXJXaWR0aCA9IGJvcmRlcldpZHRoIC8gMiB8fCAwO1xuICBjb25zdCBjb3NBbmdsZSA9IE1hdGguY29zKGFuZ2xlKTtcbiAgY29uc3Qgc2luQW5nbGUgPSBNYXRoLnNpbihhbmdsZSk7XG4gIGNvbnN0IGEgPSBNYXRoLnBvdyhjb3NBbmdsZSAqIChwLnggLSBjZW50ZXJYKSArIHNpbkFuZ2xlICogKHAueSAtIGNlbnRlclkpLCAyKTtcbiAgY29uc3QgYiA9IE1hdGgucG93KHNpbkFuZ2xlICogKHAueCAtIGNlbnRlclgpIC0gY29zQW5nbGUgKiAocC55IC0gY2VudGVyWSksIDIpO1xuICByZXR1cm4gKGEgLyBNYXRoLnBvdyh4UmFkaXVzICsgaEJvcmRlcldpZHRoLCAyKSkgKyAoYiAvIE1hdGgucG93KHlSYWRpdXMgKyBoQm9yZGVyV2lkdGgsIDIpKSA8PSAxLjAwMDE7XG59XG5cbmNsYXNzIFBvaW50QW5ub3RhdGlvbiBleHRlbmRzIEVsZW1lbnQge1xuXG4gIGluUmFuZ2UobW91c2VYLCBtb3VzZVksIGF4aXMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICBjb25zdCB7eCwgeSwgeDIsIHkyLCB3aWR0aH0gPSB0aGlzLmdldFByb3BzKFsneCcsICd5JywgJ3gyJywgJ3kyJywgJ3dpZHRoJ10sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIGNvbnN0IGJvcmRlcldpZHRoID0gdGhpcy5vcHRpb25zLmJvcmRlcldpZHRoO1xuICAgIGlmIChheGlzICE9PSAneCcgJiYgYXhpcyAhPT0gJ3knKSB7XG4gICAgICByZXR1cm4gaW5Qb2ludFJhbmdlKHt4OiBtb3VzZVgsIHk6IG1vdXNlWX0sIHRoaXMuZ2V0Q2VudGVyUG9pbnQodXNlRmluYWxQb3NpdGlvbiksIHdpZHRoIC8gMiwgYm9yZGVyV2lkdGgpO1xuICAgIH1cbiAgICBjb25zdCBoQm9yZGVyV2lkdGggPSBib3JkZXJXaWR0aCAvIDI7XG4gICAgY29uc3QgbGltaXQgPSBheGlzID09PSAneScgPyB7c3RhcnQ6IHksIGVuZDogeTIsIHZhbHVlOiBtb3VzZVl9IDoge3N0YXJ0OiB4LCBlbmQ6IHgyLCB2YWx1ZTogbW91c2VYfTtcbiAgICByZXR1cm4gbGltaXQudmFsdWUgPj0gbGltaXQuc3RhcnQgLSBoQm9yZGVyV2lkdGggJiYgbGltaXQudmFsdWUgPD0gbGltaXQuZW5kICsgaEJvcmRlcldpZHRoO1xuICB9XG5cbiAgZ2V0Q2VudGVyUG9pbnQodXNlRmluYWxQb3NpdGlvbikge1xuICAgIHJldHVybiBnZXRFbGVtZW50Q2VudGVyUG9pbnQodGhpcywgdXNlRmluYWxQb3NpdGlvbik7XG4gIH1cblxuICBkcmF3KGN0eCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgYm9yZGVyV2lkdGggPSBvcHRpb25zLmJvcmRlcldpZHRoO1xuICAgIGlmIChvcHRpb25zLnJhZGl1cyA8IDAuMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLmJhY2tncm91bmRDb2xvcjtcbiAgICBzZXRTaGFkb3dTdHlsZShjdHgsIG9wdGlvbnMpO1xuICAgIGNvbnN0IHN0cm9rZSA9IHNldEJvcmRlclN0eWxlKGN0eCwgb3B0aW9ucyk7XG4gICAgZHJhd1BvaW50KGN0eCwgdGhpcywgdGhpcy5jZW50ZXJYLCB0aGlzLmNlbnRlclkpO1xuICAgIGlmIChzdHJva2UgJiYgIWlzSW1hZ2VPckNhbnZhcyhvcHRpb25zLnBvaW50U3R5bGUpKSB7XG4gICAgICBjdHguc2hhZG93Q29sb3IgPSBvcHRpb25zLmJvcmRlclNoYWRvd0NvbG9yO1xuICAgICAgY3R4LnN0cm9rZSgpO1xuICAgIH1cbiAgICBjdHgucmVzdG9yZSgpO1xuICAgIG9wdGlvbnMuYm9yZGVyV2lkdGggPSBib3JkZXJXaWR0aDtcbiAgfVxuXG4gIHJlc29sdmVFbGVtZW50UHJvcGVydGllcyhjaGFydCwgb3B0aW9ucykge1xuICAgIGNvbnN0IHByb3BlcnRpZXMgPSByZXNvbHZlUG9pbnRQcm9wZXJ0aWVzKGNoYXJ0LCBvcHRpb25zKTtcbiAgICBwcm9wZXJ0aWVzLmluaXRQcm9wZXJ0aWVzID0gaW5pdEFuaW1hdGlvblByb3BlcnRpZXMoY2hhcnQsIHByb3BlcnRpZXMsIG9wdGlvbnMpO1xuICAgIHJldHVybiBwcm9wZXJ0aWVzO1xuICB9XG59XG5cblBvaW50QW5ub3RhdGlvbi5pZCA9ICdwb2ludEFubm90YXRpb24nO1xuXG5Qb2ludEFubm90YXRpb24uZGVmYXVsdHMgPSB7XG4gIGFkanVzdFNjYWxlUmFuZ2U6IHRydWUsXG4gIGJhY2tncm91bmRTaGFkb3dDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgYm9yZGVyRGFzaDogW10sXG4gIGJvcmRlckRhc2hPZmZzZXQ6IDAsXG4gIGJvcmRlclNoYWRvd0NvbG9yOiAndHJhbnNwYXJlbnQnLFxuICBib3JkZXJXaWR0aDogMSxcbiAgZGlzcGxheTogdHJ1ZSxcbiAgaW5pdDogdW5kZWZpbmVkLFxuICBwb2ludFN0eWxlOiAnY2lyY2xlJyxcbiAgcmFkaXVzOiAxMCxcbiAgcm90YXRpb246IDAsXG4gIHNoYWRvd0JsdXI6IDAsXG4gIHNoYWRvd09mZnNldFg6IDAsXG4gIHNoYWRvd09mZnNldFk6IDAsXG4gIHhBZGp1c3Q6IDAsXG4gIHhNYXg6IHVuZGVmaW5lZCxcbiAgeE1pbjogdW5kZWZpbmVkLFxuICB4U2NhbGVJRDogdW5kZWZpbmVkLFxuICB4VmFsdWU6IHVuZGVmaW5lZCxcbiAgeUFkanVzdDogMCxcbiAgeU1heDogdW5kZWZpbmVkLFxuICB5TWluOiB1bmRlZmluZWQsXG4gIHlTY2FsZUlEOiB1bmRlZmluZWQsXG4gIHlWYWx1ZTogdW5kZWZpbmVkLFxuICB6OiAwXG59O1xuXG5Qb2ludEFubm90YXRpb24uZGVmYXVsdFJvdXRlcyA9IHtcbiAgYm9yZGVyQ29sb3I6ICdjb2xvcicsXG4gIGJhY2tncm91bmRDb2xvcjogJ2NvbG9yJ1xufTtcblxuY2xhc3MgUG9seWdvbkFubm90YXRpb24gZXh0ZW5kcyBFbGVtZW50IHtcblxuICBpblJhbmdlKG1vdXNlWCwgbW91c2VZLCBheGlzLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgaWYgKGF4aXMgIT09ICd4JyAmJiBheGlzICE9PSAneScpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMucmFkaXVzID49IDAuMSAmJiB0aGlzLmVsZW1lbnRzLmxlbmd0aCA+IDEgJiYgcG9pbnRJc0luUG9seWdvbih0aGlzLmVsZW1lbnRzLCBtb3VzZVgsIG1vdXNlWSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgfVxuICAgIGNvbnN0IHJvdGF0ZWRQb2ludCA9IHJvdGF0ZWQoe3g6IG1vdXNlWCwgeTogbW91c2VZfSwgdGhpcy5nZXRDZW50ZXJQb2ludCh1c2VGaW5hbFBvc2l0aW9uKSwgdG9SYWRpYW5zKC10aGlzLm9wdGlvbnMucm90YXRpb24pKTtcbiAgICBjb25zdCBheGlzUG9pbnRzID0gdGhpcy5lbGVtZW50cy5tYXAoKHBvaW50KSA9PiBheGlzID09PSAneScgPyBwb2ludC5iWSA6IHBvaW50LmJYKTtcbiAgICBjb25zdCBzdGFydCA9IE1hdGgubWluKC4uLmF4aXNQb2ludHMpO1xuICAgIGNvbnN0IGVuZCA9IE1hdGgubWF4KC4uLmF4aXNQb2ludHMpO1xuICAgIHJldHVybiByb3RhdGVkUG9pbnRbYXhpc10gPj0gc3RhcnQgJiYgcm90YXRlZFBvaW50W2F4aXNdIDw9IGVuZDtcbiAgfVxuXG4gIGdldENlbnRlclBvaW50KHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICByZXR1cm4gZ2V0RWxlbWVudENlbnRlclBvaW50KHRoaXMsIHVzZUZpbmFsUG9zaXRpb24pO1xuICB9XG5cbiAgZHJhdyhjdHgpIHtcbiAgICBjb25zdCB7ZWxlbWVudHMsIG9wdGlvbnN9ID0gdGhpcztcbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgc2V0U2hhZG93U3R5bGUoY3R4LCBvcHRpb25zKTtcbiAgICBjb25zdCBzdHJva2UgPSBzZXRCb3JkZXJTdHlsZShjdHgsIG9wdGlvbnMpO1xuICAgIGxldCBmaXJzdCA9IHRydWU7XG4gICAgZm9yIChjb25zdCBlbCBvZiBlbGVtZW50cykge1xuICAgICAgaWYgKGZpcnN0KSB7XG4gICAgICAgIGN0eC5tb3ZlVG8oZWwueCwgZWwueSk7XG4gICAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdHgubGluZVRvKGVsLngsIGVsLnkpO1xuICAgICAgfVxuICAgIH1cbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgY3R4LmZpbGwoKTtcbiAgICAvLyBJZiBubyBib3JkZXIsIGRvbid0IGRyYXcgaXRcbiAgICBpZiAoc3Ryb2tlKSB7XG4gICAgICBjdHguc2hhZG93Q29sb3IgPSBvcHRpb25zLmJvcmRlclNoYWRvd0NvbG9yO1xuICAgICAgY3R4LnN0cm9rZSgpO1xuICAgIH1cbiAgICBjdHgucmVzdG9yZSgpO1xuICB9XG5cbiAgcmVzb2x2ZUVsZW1lbnRQcm9wZXJ0aWVzKGNoYXJ0LCBvcHRpb25zKSB7XG4gICAgY29uc3QgcHJvcGVydGllcyA9IHJlc29sdmVQb2ludFByb3BlcnRpZXMoY2hhcnQsIG9wdGlvbnMpO1xuICAgIGNvbnN0IHtzaWRlcywgcm90YXRpb259ID0gb3B0aW9ucztcbiAgICBjb25zdCBlbGVtZW50cyA9IFtdO1xuICAgIGNvbnN0IGFuZ2xlID0gKDIgKiBQSSkgLyBzaWRlcztcbiAgICBsZXQgcmFkID0gcm90YXRpb24gKiBSQURfUEVSX0RFRztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNpZGVzOyBpKyssIHJhZCArPSBhbmdsZSkge1xuICAgICAgY29uc3QgZWxQcm9wcyA9IGJ1aWxkUG9pbnRFbGVtZW50KHByb3BlcnRpZXMsIG9wdGlvbnMsIHJhZCk7XG4gICAgICBlbFByb3BzLmluaXRQcm9wZXJ0aWVzID0gaW5pdEFuaW1hdGlvblByb3BlcnRpZXMoY2hhcnQsIHByb3BlcnRpZXMsIG9wdGlvbnMpO1xuICAgICAgZWxlbWVudHMucHVzaChlbFByb3BzKTtcbiAgICB9XG4gICAgcHJvcGVydGllcy5lbGVtZW50cyA9IGVsZW1lbnRzO1xuICAgIHJldHVybiBwcm9wZXJ0aWVzO1xuICB9XG59XG5cblBvbHlnb25Bbm5vdGF0aW9uLmlkID0gJ3BvbHlnb25Bbm5vdGF0aW9uJztcblxuUG9seWdvbkFubm90YXRpb24uZGVmYXVsdHMgPSB7XG4gIGFkanVzdFNjYWxlUmFuZ2U6IHRydWUsXG4gIGJhY2tncm91bmRTaGFkb3dDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgYm9yZGVyQ2FwU3R5bGU6ICdidXR0JyxcbiAgYm9yZGVyRGFzaDogW10sXG4gIGJvcmRlckRhc2hPZmZzZXQ6IDAsXG4gIGJvcmRlckpvaW5TdHlsZTogJ21pdGVyJyxcbiAgYm9yZGVyU2hhZG93Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gIGJvcmRlcldpZHRoOiAxLFxuICBkaXNwbGF5OiB0cnVlLFxuICBpbml0OiB1bmRlZmluZWQsXG4gIHBvaW50OiB7XG4gICAgcmFkaXVzOiAwXG4gIH0sXG4gIHJhZGl1czogMTAsXG4gIHJvdGF0aW9uOiAwLFxuICBzaGFkb3dCbHVyOiAwLFxuICBzaGFkb3dPZmZzZXRYOiAwLFxuICBzaGFkb3dPZmZzZXRZOiAwLFxuICBzaWRlczogMyxcbiAgeEFkanVzdDogMCxcbiAgeE1heDogdW5kZWZpbmVkLFxuICB4TWluOiB1bmRlZmluZWQsXG4gIHhTY2FsZUlEOiB1bmRlZmluZWQsXG4gIHhWYWx1ZTogdW5kZWZpbmVkLFxuICB5QWRqdXN0OiAwLFxuICB5TWF4OiB1bmRlZmluZWQsXG4gIHlNaW46IHVuZGVmaW5lZCxcbiAgeVNjYWxlSUQ6IHVuZGVmaW5lZCxcbiAgeVZhbHVlOiB1bmRlZmluZWQsXG4gIHo6IDBcbn07XG5cblBvbHlnb25Bbm5vdGF0aW9uLmRlZmF1bHRSb3V0ZXMgPSB7XG4gIGJvcmRlckNvbG9yOiAnY29sb3InLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICdjb2xvcidcbn07XG5cbmZ1bmN0aW9uIGJ1aWxkUG9pbnRFbGVtZW50KHtjZW50ZXJYLCBjZW50ZXJZfSwge3JhZGl1cywgYm9yZGVyV2lkdGh9LCByYWQpIHtcbiAgY29uc3QgaGFsZkJvcmRlciA9IGJvcmRlcldpZHRoIC8gMjtcbiAgY29uc3Qgc2luID0gTWF0aC5zaW4ocmFkKTtcbiAgY29uc3QgY29zID0gTWF0aC5jb3MocmFkKTtcbiAgY29uc3QgcG9pbnQgPSB7eDogY2VudGVyWCArIHNpbiAqIHJhZGl1cywgeTogY2VudGVyWSAtIGNvcyAqIHJhZGl1c307XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ3BvaW50JyxcbiAgICBvcHRpb25TY29wZTogJ3BvaW50JyxcbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICB4OiBwb2ludC54LFxuICAgICAgeTogcG9pbnQueSxcbiAgICAgIGNlbnRlclg6IHBvaW50LngsXG4gICAgICBjZW50ZXJZOiBwb2ludC55LFxuICAgICAgYlg6IGNlbnRlclggKyBzaW4gKiAocmFkaXVzICsgaGFsZkJvcmRlciksXG4gICAgICBiWTogY2VudGVyWSAtIGNvcyAqIChyYWRpdXMgKyBoYWxmQm9yZGVyKVxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gcG9pbnRJc0luUG9seWdvbihwb2ludHMsIHgsIHksIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgbGV0IGlzSW5zaWRlID0gZmFsc2U7XG4gIGxldCBBID0gcG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXS5nZXRQcm9wcyhbJ2JYJywgJ2JZJ10sIHVzZUZpbmFsUG9zaXRpb24pO1xuICBmb3IgKGNvbnN0IHBvaW50IG9mIHBvaW50cykge1xuICAgIGNvbnN0IEIgPSBwb2ludC5nZXRQcm9wcyhbJ2JYJywgJ2JZJ10sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIGlmICgoQi5iWSA+IHkpICE9PSAoQS5iWSA+IHkpICYmIHggPCAoQS5iWCAtIEIuYlgpICogKHkgLSBCLmJZKSAvIChBLmJZIC0gQi5iWSkgKyBCLmJYKSB7XG4gICAgICBpc0luc2lkZSA9ICFpc0luc2lkZTtcbiAgICB9XG4gICAgQSA9IEI7XG4gIH1cbiAgcmV0dXJuIGlzSW5zaWRlO1xufVxuXG5jb25zdCBhbm5vdGF0aW9uVHlwZXMgPSB7XG4gIGJveDogQm94QW5ub3RhdGlvbixcbiAgZWxsaXBzZTogRWxsaXBzZUFubm90YXRpb24sXG4gIGxhYmVsOiBMYWJlbEFubm90YXRpb24sXG4gIGxpbmU6IExpbmVBbm5vdGF0aW9uLFxuICBwb2ludDogUG9pbnRBbm5vdGF0aW9uLFxuICBwb2x5Z29uOiBQb2x5Z29uQW5ub3RhdGlvblxufTtcblxuLyoqXG4gKiBSZWdpc3RlciBmYWxsYmFjayBmb3IgYW5ub3RhdGlvbiBlbGVtZW50c1xuICogRm9yIGV4YW1wbGUgbGluZUFubm90YXRpb24gb3B0aW9ucyB3b3VsZCBiZSBsb29rZWQgdGhyb3VnaDpcbiAqIC0gdGhlIGFubm90YXRpb24gb2JqZWN0IChvcHRpb25zLnBsdWdpbnMuYW5ub3RhdGlvbi5hbm5vdGF0aW9uc1tpZF0pXG4gKiAtIGVsZW1lbnQgb3B0aW9ucyAob3B0aW9ucy5lbGVtZW50cy5saW5lQW5ub3RhdGlvbilcbiAqIC0gZWxlbWVudCBkZWZhdWx0cyAoZGVmYXVsdHMuZWxlbWVudHMubGluZUFubm90YXRpb24pXG4gKiAtIGFubm90YXRpb24gcGx1Z2luIGRlZmF1bHRzIChkZWZhdWx0cy5wbHVnaW5zLmFubm90YXRpb24sIHRoaXMgaXMgd2hhdCB3ZSBhcmUgcmVnaXN0ZXJpbmcgaGVyZSlcbiAqL1xuT2JqZWN0LmtleXMoYW5ub3RhdGlvblR5cGVzKS5mb3JFYWNoKGtleSA9PiB7XG4gIGRlZmF1bHRzLmRlc2NyaWJlKGBlbGVtZW50cy4ke2Fubm90YXRpb25UeXBlc1trZXldLmlkfWAsIHtcbiAgICBfZmFsbGJhY2s6ICdwbHVnaW5zLmFubm90YXRpb24uY29tbW9uJ1xuICB9KTtcbn0pO1xuXG5jb25zdCBkaXJlY3RVcGRhdGVyID0ge1xuICB1cGRhdGU6IE9iamVjdC5hc3NpZ25cbn07XG5cbmNvbnN0IGhvb2tzJDEgPSBldmVudEhvb2tzLmNvbmNhdChlbGVtZW50SG9va3MpO1xuY29uc3QgcmVzb2x2ZSA9ICh2YWx1ZSwgb3B0RGVmcykgPT4gaXNPYmplY3Qob3B0RGVmcykgPyByZXNvbHZlT2JqKHZhbHVlLCBvcHREZWZzKSA6IHZhbHVlO1xuXG5cbi8qKlxuICogQHR5cGVkZWYgeyBpbXBvcnQoXCJjaGFydC5qc1wiKS5DaGFydCB9IENoYXJ0XG4gKiBAdHlwZWRlZiB7IGltcG9ydChcImNoYXJ0LmpzXCIpLlVwZGF0ZU1vZGUgfSBVcGRhdGVNb2RlXG4gKiBAdHlwZWRlZiB7IGltcG9ydCgnLi4vLi4vdHlwZXMvb3B0aW9ucycpLkFubm90YXRpb25QbHVnaW5PcHRpb25zIH0gQW5ub3RhdGlvblBsdWdpbk9wdGlvbnNcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuY29uc3QgaXNJbmRleGFibGUgPSAocHJvcCkgPT4gcHJvcCA9PT0gJ2NvbG9yJyB8fCBwcm9wID09PSAnZm9udCc7XG5cbi8qKlxuICogUmVzb2x2ZSB0aGUgYW5ub3RhdGlvbiB0eXBlLCBjaGVja2luZyBpZiBpcyBzdXBwb3J0ZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gW3R5cGU9bGluZV0gLSBhbm5vdGF0aW9uIHR5cGVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHJlc29sdmVkIGFubm90YXRpb24gdHlwZVxuICovXG5mdW5jdGlvbiByZXNvbHZlVHlwZSh0eXBlID0gJ2xpbmUnKSB7XG4gIGlmIChhbm5vdGF0aW9uVHlwZXNbdHlwZV0pIHtcbiAgICByZXR1cm4gdHlwZTtcbiAgfVxuICBjb25zb2xlLndhcm4oYFVua25vd24gYW5ub3RhdGlvbiB0eXBlOiAnJHt0eXBlfScsIGRlZmF1bHRpbmcgdG8gJ2xpbmUnYCk7XG4gIHJldHVybiAnbGluZSc7XG59XG5cbi8qKlxuICogQHBhcmFtIHtDaGFydH0gY2hhcnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGF0ZVxuICogQHBhcmFtIHtBbm5vdGF0aW9uUGx1Z2luT3B0aW9uc30gb3B0aW9uc1xuICogQHBhcmFtIHtVcGRhdGVNb2RlfSBtb2RlXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZUVsZW1lbnRzKGNoYXJ0LCBzdGF0ZSwgb3B0aW9ucywgbW9kZSkge1xuICBjb25zdCBhbmltYXRpb25zID0gcmVzb2x2ZUFuaW1hdGlvbnMoY2hhcnQsIG9wdGlvbnMuYW5pbWF0aW9ucywgbW9kZSk7XG5cbiAgY29uc3QgYW5ub3RhdGlvbnMgPSBzdGF0ZS5hbm5vdGF0aW9ucztcbiAgY29uc3QgZWxlbWVudHMgPSByZXN5bmNFbGVtZW50cyhzdGF0ZS5lbGVtZW50cywgYW5ub3RhdGlvbnMpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYW5ub3RhdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBhbm5vdGF0aW9uT3B0aW9ucyA9IGFubm90YXRpb25zW2ldO1xuICAgIGNvbnN0IGVsZW1lbnQgPSBnZXRPckNyZWF0ZUVsZW1lbnQoZWxlbWVudHMsIGksIGFubm90YXRpb25PcHRpb25zLnR5cGUpO1xuICAgIGNvbnN0IHJlc29sdmVyID0gYW5ub3RhdGlvbk9wdGlvbnMuc2V0Q29udGV4dChnZXRDb250ZXh0KGNoYXJ0LCBlbGVtZW50LCBhbm5vdGF0aW9uT3B0aW9ucykpO1xuICAgIGNvbnN0IHByb3BlcnRpZXMgPSBlbGVtZW50LnJlc29sdmVFbGVtZW50UHJvcGVydGllcyhjaGFydCwgcmVzb2x2ZXIpO1xuXG4gICAgcHJvcGVydGllcy5za2lwID0gdG9Ta2lwKHByb3BlcnRpZXMpO1xuXG4gICAgaWYgKCdlbGVtZW50cycgaW4gcHJvcGVydGllcykge1xuICAgICAgdXBkYXRlU3ViRWxlbWVudHMoZWxlbWVudCwgcHJvcGVydGllcy5lbGVtZW50cywgcmVzb2x2ZXIsIGFuaW1hdGlvbnMpO1xuICAgICAgLy8gUmVtb3ZlIHRoZSBzdWItZWxlbWVudCBkZWZpbml0aW9ucyBmcm9tIHByb3BlcnRpZXMsIHNvIHRoZSBhY3R1YWwgZWxlbWVudHNcbiAgICAgIC8vIGFyZSBub3Qgb3ZlcndyaXR0ZW4gYnkgdGhlaXIgZGVmaW5pdGlvbnNcbiAgICAgIGRlbGV0ZSBwcm9wZXJ0aWVzLmVsZW1lbnRzO1xuICAgIH1cblxuICAgIGlmICghZGVmaW5lZChlbGVtZW50LngpKSB7XG4gICAgICAvLyBJZiB0aGUgZWxlbWVudCBpcyBuZXdseSBjcmVhdGVkLCBhc3NpbmcgdGhlIHByb3BlcnRpZXMgZGlyZWN0bHkgLSB0b1xuICAgICAgLy8gbWFrZSB0aGVtIHJlYWRpbHkgYXdhaWxhYmxlIHRvIGFueSBzY3JpcHRhYmxlIG9wdGlvbnMuIElmIHdlIGRvIG5vdCBkbyB0aGlzLFxuICAgICAgLy8gdGhlIHByb3BlcnRpZXMgcmV0cnVuZWQgYnkgYHJlc29sdmVFbGVtZW50UHJvcGVydGllc2AgYXJlIGF2YWlsYWJsZSBvbmx5XG4gICAgICAvLyBhZnRlciBvcHRpb25zIHJlc29sdXRpb24uXG4gICAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQsIHByb3BlcnRpZXMpO1xuICAgIH1cblxuICAgIE9iamVjdC5hc3NpZ24oZWxlbWVudCwgcHJvcGVydGllcy5pbml0UHJvcGVydGllcyk7XG4gICAgcHJvcGVydGllcy5vcHRpb25zID0gcmVzb2x2ZUFubm90YXRpb25PcHRpb25zKHJlc29sdmVyKTtcblxuICAgIGFuaW1hdGlvbnMudXBkYXRlKGVsZW1lbnQsIHByb3BlcnRpZXMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRvU2tpcChwcm9wZXJ0aWVzKSB7XG4gIHJldHVybiBpc05hTihwcm9wZXJ0aWVzLngpIHx8IGlzTmFOKHByb3BlcnRpZXMueSk7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVBbmltYXRpb25zKGNoYXJ0LCBhbmltT3B0cywgbW9kZSkge1xuICBpZiAobW9kZSA9PT0gJ3Jlc2V0JyB8fCBtb2RlID09PSAnbm9uZScgfHwgbW9kZSA9PT0gJ3Jlc2l6ZScpIHtcbiAgICByZXR1cm4gZGlyZWN0VXBkYXRlcjtcbiAgfVxuICByZXR1cm4gbmV3IEFuaW1hdGlvbnMoY2hhcnQsIGFuaW1PcHRzKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlU3ViRWxlbWVudHMobWFpbkVsZW1lbnQsIGVsZW1lbnRzLCByZXNvbHZlciwgYW5pbWF0aW9ucykge1xuICBjb25zdCBzdWJFbGVtZW50cyA9IG1haW5FbGVtZW50LmVsZW1lbnRzIHx8IChtYWluRWxlbWVudC5lbGVtZW50cyA9IFtdKTtcbiAgc3ViRWxlbWVudHMubGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgZGVmaW5pdGlvbiA9IGVsZW1lbnRzW2ldO1xuICAgIGNvbnN0IHByb3BlcnRpZXMgPSBkZWZpbml0aW9uLnByb3BlcnRpZXM7XG4gICAgY29uc3Qgc3ViRWxlbWVudCA9IGdldE9yQ3JlYXRlRWxlbWVudChzdWJFbGVtZW50cywgaSwgZGVmaW5pdGlvbi50eXBlLCBkZWZpbml0aW9uLmluaXRQcm9wZXJ0aWVzKTtcbiAgICBjb25zdCBzdWJSZXNvbHZlciA9IHJlc29sdmVyW2RlZmluaXRpb24ub3B0aW9uU2NvcGVdLm92ZXJyaWRlKGRlZmluaXRpb24pO1xuICAgIHByb3BlcnRpZXMub3B0aW9ucyA9IHJlc29sdmVBbm5vdGF0aW9uT3B0aW9ucyhzdWJSZXNvbHZlcik7XG4gICAgYW5pbWF0aW9ucy51cGRhdGUoc3ViRWxlbWVudCwgcHJvcGVydGllcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0T3JDcmVhdGVFbGVtZW50KGVsZW1lbnRzLCBpbmRleCwgdHlwZSwgaW5pdFByb3BlcnRpZXMpIHtcbiAgY29uc3QgZWxlbWVudENsYXNzID0gYW5ub3RhdGlvblR5cGVzW3Jlc29sdmVUeXBlKHR5cGUpXTtcbiAgbGV0IGVsZW1lbnQgPSBlbGVtZW50c1tpbmRleF07XG4gIGlmICghZWxlbWVudCB8fCAhKGVsZW1lbnQgaW5zdGFuY2VvZiBlbGVtZW50Q2xhc3MpKSB7XG4gICAgZWxlbWVudCA9IGVsZW1lbnRzW2luZGV4XSA9IG5ldyBlbGVtZW50Q2xhc3MoKTtcbiAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQsIGluaXRQcm9wZXJ0aWVzKTtcbiAgfVxuICByZXR1cm4gZWxlbWVudDtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUFubm90YXRpb25PcHRpb25zKHJlc29sdmVyKSB7XG4gIGNvbnN0IGVsZW1lbnRDbGFzcyA9IGFubm90YXRpb25UeXBlc1tyZXNvbHZlVHlwZShyZXNvbHZlci50eXBlKV07XG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xuICByZXN1bHQuaWQgPSByZXNvbHZlci5pZDtcbiAgcmVzdWx0LnR5cGUgPSByZXNvbHZlci50eXBlO1xuICByZXN1bHQuZHJhd1RpbWUgPSByZXNvbHZlci5kcmF3VGltZTtcbiAgT2JqZWN0LmFzc2lnbihyZXN1bHQsXG4gICAgcmVzb2x2ZU9iaihyZXNvbHZlciwgZWxlbWVudENsYXNzLmRlZmF1bHRzKSxcbiAgICByZXNvbHZlT2JqKHJlc29sdmVyLCBlbGVtZW50Q2xhc3MuZGVmYXVsdFJvdXRlcykpO1xuICBmb3IgKGNvbnN0IGhvb2sgb2YgaG9va3MkMSkge1xuICAgIHJlc3VsdFtob29rXSA9IHJlc29sdmVyW2hvb2tdO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVPYmoocmVzb2x2ZXIsIGRlZnMpIHtcbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIGZvciAoY29uc3QgcHJvcCBvZiBPYmplY3Qua2V5cyhkZWZzKSkge1xuICAgIGNvbnN0IG9wdERlZnMgPSBkZWZzW3Byb3BdO1xuICAgIGNvbnN0IHZhbHVlID0gcmVzb2x2ZXJbcHJvcF07XG4gICAgaWYgKGlzSW5kZXhhYmxlKHByb3ApICYmIGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICByZXN1bHRbcHJvcF0gPSB2YWx1ZS5tYXAoKGl0ZW0pID0+IHJlc29sdmUoaXRlbSwgb3B0RGVmcykpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRbcHJvcF0gPSByZXNvbHZlKHZhbHVlLCBvcHREZWZzKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gZ2V0Q29udGV4dChjaGFydCwgZWxlbWVudCwgYW5ub3RhdGlvbikge1xuICByZXR1cm4gZWxlbWVudC4kY29udGV4dCB8fCAoZWxlbWVudC4kY29udGV4dCA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShjaGFydC5nZXRDb250ZXh0KCkpLCB7XG4gICAgZWxlbWVudCxcbiAgICBpZDogYW5ub3RhdGlvbi5pZCxcbiAgICB0eXBlOiAnYW5ub3RhdGlvbidcbiAgfSkpO1xufVxuXG5mdW5jdGlvbiByZXN5bmNFbGVtZW50cyhlbGVtZW50cywgYW5ub3RhdGlvbnMpIHtcbiAgY29uc3QgY291bnQgPSBhbm5vdGF0aW9ucy5sZW5ndGg7XG4gIGNvbnN0IHN0YXJ0ID0gZWxlbWVudHMubGVuZ3RoO1xuXG4gIGlmIChzdGFydCA8IGNvdW50KSB7XG4gICAgY29uc3QgYWRkID0gY291bnQgLSBzdGFydDtcbiAgICBlbGVtZW50cy5zcGxpY2Uoc3RhcnQsIDAsIC4uLm5ldyBBcnJheShhZGQpKTtcbiAgfSBlbHNlIGlmIChzdGFydCA+IGNvdW50KSB7XG4gICAgZWxlbWVudHMuc3BsaWNlKGNvdW50LCBzdGFydCAtIGNvdW50KTtcbiAgfVxuICByZXR1cm4gZWxlbWVudHM7XG59XG5cbnZhciB2ZXJzaW9uID0gXCIzLjAuMVwiO1xuXG5jb25zdCBjaGFydFN0YXRlcyA9IG5ldyBNYXAoKTtcbmNvbnN0IGhvb2tzID0gZXZlbnRIb29rcy5jb25jYXQoZWxlbWVudEhvb2tzKTtcblxudmFyIGFubm90YXRpb24gPSB7XG4gIGlkOiAnYW5ub3RhdGlvbicsXG5cbiAgdmVyc2lvbixcblxuICBiZWZvcmVSZWdpc3RlcigpIHtcbiAgICByZXF1aXJlVmVyc2lvbignY2hhcnQuanMnLCAnNC4wJywgQ2hhcnQudmVyc2lvbik7XG4gIH0sXG5cbiAgYWZ0ZXJSZWdpc3RlcigpIHtcbiAgICBDaGFydC5yZWdpc3Rlcihhbm5vdGF0aW9uVHlwZXMpO1xuICB9LFxuXG4gIGFmdGVyVW5yZWdpc3RlcigpIHtcbiAgICBDaGFydC51bnJlZ2lzdGVyKGFubm90YXRpb25UeXBlcyk7XG4gIH0sXG5cbiAgYmVmb3JlSW5pdChjaGFydCkge1xuICAgIGNoYXJ0U3RhdGVzLnNldChjaGFydCwge1xuICAgICAgYW5ub3RhdGlvbnM6IFtdLFxuICAgICAgZWxlbWVudHM6IFtdLFxuICAgICAgdmlzaWJsZUVsZW1lbnRzOiBbXSxcbiAgICAgIGxpc3RlbmVyczoge30sXG4gICAgICBsaXN0ZW5lZDogZmFsc2UsXG4gICAgICBtb3ZlTGlzdGVuZWQ6IGZhbHNlLFxuICAgICAgaG9va3M6IHt9LFxuICAgICAgaG9va2VkOiBmYWxzZSxcbiAgICAgIGhvdmVyZWQ6IFtdXG4gICAgfSk7XG4gIH0sXG5cbiAgYmVmb3JlVXBkYXRlKGNoYXJ0LCBhcmdzLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgc3RhdGUgPSBjaGFydFN0YXRlcy5nZXQoY2hhcnQpO1xuICAgIGNvbnN0IGFubm90YXRpb25zID0gc3RhdGUuYW5ub3RhdGlvbnMgPSBbXTtcblxuICAgIGxldCBhbm5vdGF0aW9uT3B0aW9ucyA9IG9wdGlvbnMuYW5ub3RhdGlvbnM7XG4gICAgaWYgKGlzT2JqZWN0KGFubm90YXRpb25PcHRpb25zKSkge1xuICAgICAgT2JqZWN0LmtleXMoYW5ub3RhdGlvbk9wdGlvbnMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBhbm5vdGF0aW9uT3B0aW9uc1trZXldO1xuICAgICAgICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgICAgdmFsdWUuaWQgPSBrZXk7XG4gICAgICAgICAgYW5ub3RhdGlvbnMucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShhbm5vdGF0aW9uT3B0aW9ucykpIHtcbiAgICAgIGFubm90YXRpb25zLnB1c2goLi4uYW5ub3RhdGlvbk9wdGlvbnMpO1xuICAgIH1cbiAgICB2ZXJpZnlTY2FsZU9wdGlvbnMoYW5ub3RhdGlvbnMsIGNoYXJ0LnNjYWxlcyk7XG4gIH0sXG5cbiAgYWZ0ZXJEYXRhTGltaXRzKGNoYXJ0LCBhcmdzKSB7XG4gICAgY29uc3Qgc3RhdGUgPSBjaGFydFN0YXRlcy5nZXQoY2hhcnQpO1xuICAgIGFkanVzdFNjYWxlUmFuZ2UoY2hhcnQsIGFyZ3Muc2NhbGUsIHN0YXRlLmFubm90YXRpb25zLmZpbHRlcihhID0+IGEuZGlzcGxheSAmJiBhLmFkanVzdFNjYWxlUmFuZ2UpKTtcbiAgfSxcblxuICBhZnRlclVwZGF0ZShjaGFydCwgYXJncywgb3B0aW9ucykge1xuICAgIGNvbnN0IHN0YXRlID0gY2hhcnRTdGF0ZXMuZ2V0KGNoYXJ0KTtcbiAgICB1cGRhdGVMaXN0ZW5lcnMoY2hhcnQsIHN0YXRlLCBvcHRpb25zKTtcbiAgICB1cGRhdGVFbGVtZW50cyhjaGFydCwgc3RhdGUsIG9wdGlvbnMsIGFyZ3MubW9kZSk7XG4gICAgc3RhdGUudmlzaWJsZUVsZW1lbnRzID0gc3RhdGUuZWxlbWVudHMuZmlsdGVyKGVsID0+ICFlbC5za2lwICYmIGVsLm9wdGlvbnMuZGlzcGxheSk7XG4gICAgdXBkYXRlSG9va3MoY2hhcnQsIHN0YXRlLCBvcHRpb25zKTtcbiAgfSxcblxuICBiZWZvcmVEYXRhc2V0c0RyYXcoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgZHJhdyhjaGFydCwgJ2JlZm9yZURhdGFzZXRzRHJhdycsIG9wdGlvbnMuY2xpcCk7XG4gIH0sXG5cbiAgYWZ0ZXJEYXRhc2V0c0RyYXcoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgZHJhdyhjaGFydCwgJ2FmdGVyRGF0YXNldHNEcmF3Jywgb3B0aW9ucy5jbGlwKTtcbiAgfSxcblxuICBiZWZvcmVEcmF3KGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgIGRyYXcoY2hhcnQsICdiZWZvcmVEcmF3Jywgb3B0aW9ucy5jbGlwKTtcbiAgfSxcblxuICBhZnRlckRyYXcoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgZHJhdyhjaGFydCwgJ2FmdGVyRHJhdycsIG9wdGlvbnMuY2xpcCk7XG4gIH0sXG5cbiAgYmVmb3JlRXZlbnQoY2hhcnQsIGFyZ3MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBzdGF0ZSA9IGNoYXJ0U3RhdGVzLmdldChjaGFydCk7XG4gICAgaWYgKGhhbmRsZUV2ZW50KHN0YXRlLCBhcmdzLmV2ZW50LCBvcHRpb25zKSkge1xuICAgICAgYXJncy5jaGFuZ2VkID0gdHJ1ZTtcbiAgICB9XG4gIH0sXG5cbiAgYWZ0ZXJEZXN0cm95KGNoYXJ0KSB7XG4gICAgY2hhcnRTdGF0ZXMuZGVsZXRlKGNoYXJ0KTtcbiAgfSxcblxuICBfZ2V0U3RhdGUoY2hhcnQpIHtcbiAgICByZXR1cm4gY2hhcnRTdGF0ZXMuZ2V0KGNoYXJ0KTtcbiAgfSxcblxuICBkZWZhdWx0czoge1xuICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgIG51bWJlcnM6IHtcbiAgICAgICAgcHJvcGVydGllczogWyd4JywgJ3knLCAneDInLCAneTInLCAnd2lkdGgnLCAnaGVpZ2h0JywgJ2NlbnRlclgnLCAnY2VudGVyWScsICdwb2ludFgnLCAncG9pbnRZJywgJ3JhZGl1cyddLFxuICAgICAgICB0eXBlOiAnbnVtYmVyJ1xuICAgICAgfSxcbiAgICB9LFxuICAgIGNsaXA6IHRydWUsXG4gICAgaW50ZXJhY3Rpb246IHtcbiAgICAgIG1vZGU6IHVuZGVmaW5lZCxcbiAgICAgIGF4aXM6IHVuZGVmaW5lZCxcbiAgICAgIGludGVyc2VjdDogdW5kZWZpbmVkXG4gICAgfSxcbiAgICBjb21tb246IHtcbiAgICAgIGRyYXdUaW1lOiAnYWZ0ZXJEYXRhc2V0c0RyYXcnLFxuICAgICAgaW5pdDogZmFsc2UsXG4gICAgICBsYWJlbDoge1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBkZXNjcmlwdG9yczoge1xuICAgIF9pbmRleGFibGU6IGZhbHNlLFxuICAgIF9zY3JpcHRhYmxlOiAocHJvcCkgPT4gIWhvb2tzLmluY2x1ZGVzKHByb3ApICYmIHByb3AgIT09ICdpbml0JyxcbiAgICBhbm5vdGF0aW9uczoge1xuICAgICAgX2FsbEtleXM6IGZhbHNlLFxuICAgICAgX2ZhbGxiYWNrOiAocHJvcCwgb3B0cykgPT4gYGVsZW1lbnRzLiR7YW5ub3RhdGlvblR5cGVzW3Jlc29sdmVUeXBlKG9wdHMudHlwZSldLmlkfWBcbiAgICB9LFxuICAgIGludGVyYWN0aW9uOiB7XG4gICAgICBfZmFsbGJhY2s6IHRydWVcbiAgICB9LFxuICAgIGNvbW1vbjoge1xuICAgICAgbGFiZWw6IHtcbiAgICAgICAgX2luZGV4YWJsZTogaXNJbmRleGFibGUsXG4gICAgICAgIF9mYWxsYmFjazogdHJ1ZVxuICAgICAgfSxcbiAgICAgIF9pbmRleGFibGU6IGlzSW5kZXhhYmxlXG4gICAgfVxuICB9LFxuXG4gIGFkZGl0aW9uYWxPcHRpb25TY29wZXM6IFsnJ11cbn07XG5cbmZ1bmN0aW9uIGRyYXcoY2hhcnQsIGNhbGxlciwgY2xpcCkge1xuICBjb25zdCB7Y3R4LCBjaGFydEFyZWF9ID0gY2hhcnQ7XG4gIGNvbnN0IHN0YXRlID0gY2hhcnRTdGF0ZXMuZ2V0KGNoYXJ0KTtcblxuICBpZiAoY2xpcCkge1xuICAgIGNsaXBBcmVhKGN0eCwgY2hhcnRBcmVhKTtcbiAgfVxuXG4gIGNvbnN0IGRyYXdhYmxlRWxlbWVudHMgPSBnZXREcmF3YWJsZUVsZW1lbnRzKHN0YXRlLnZpc2libGVFbGVtZW50cywgY2FsbGVyKS5zb3J0KChhLCBiKSA9PiBhLmVsZW1lbnQub3B0aW9ucy56IC0gYi5lbGVtZW50Lm9wdGlvbnMueik7XG4gIGZvciAoY29uc3QgaXRlbSBvZiBkcmF3YWJsZUVsZW1lbnRzKSB7XG4gICAgZHJhd0VsZW1lbnQoY3R4LCBjaGFydEFyZWEsIHN0YXRlLCBpdGVtKTtcbiAgfVxuXG4gIGlmIChjbGlwKSB7XG4gICAgdW5jbGlwQXJlYShjdHgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERyYXdhYmxlRWxlbWVudHMoZWxlbWVudHMsIGNhbGxlcikge1xuICBjb25zdCBkcmF3YWJsZUVsZW1lbnRzID0gW107XG4gIGZvciAoY29uc3QgZWwgb2YgZWxlbWVudHMpIHtcbiAgICBpZiAoZWwub3B0aW9ucy5kcmF3VGltZSA9PT0gY2FsbGVyKSB7XG4gICAgICBkcmF3YWJsZUVsZW1lbnRzLnB1c2goe2VsZW1lbnQ6IGVsLCBtYWluOiB0cnVlfSk7XG4gICAgfVxuICAgIGlmIChlbC5lbGVtZW50cyAmJiBlbC5lbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgIGZvciAoY29uc3Qgc3ViIG9mIGVsLmVsZW1lbnRzKSB7XG4gICAgICAgIGlmIChzdWIub3B0aW9ucy5kaXNwbGF5ICYmIHN1Yi5vcHRpb25zLmRyYXdUaW1lID09PSBjYWxsZXIpIHtcbiAgICAgICAgICBkcmF3YWJsZUVsZW1lbnRzLnB1c2goe2VsZW1lbnQ6IHN1Yn0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBkcmF3YWJsZUVsZW1lbnRzO1xufVxuXG5mdW5jdGlvbiBkcmF3RWxlbWVudChjdHgsIGNoYXJ0QXJlYSwgc3RhdGUsIGl0ZW0pIHtcbiAgY29uc3QgZWwgPSBpdGVtLmVsZW1lbnQ7XG4gIGlmIChpdGVtLm1haW4pIHtcbiAgICBpbnZva2VIb29rKHN0YXRlLCBlbCwgJ2JlZm9yZURyYXcnKTtcbiAgICBlbC5kcmF3KGN0eCwgY2hhcnRBcmVhKTtcbiAgICBpbnZva2VIb29rKHN0YXRlLCBlbCwgJ2FmdGVyRHJhdycpO1xuICB9IGVsc2Uge1xuICAgIGVsLmRyYXcoY3R4LCBjaGFydEFyZWEpO1xuICB9XG59XG5cbmV4cG9ydCB7IGFubm90YXRpb24gYXMgZGVmYXVsdCB9O1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0dyYXBoLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vR3JhcGguY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IENoYXJ0IGZyb20gXCJjaGFydC5qcy9hdXRvXCI7XG4vLyBpdCdzIGFscmVhZHkgaW4gZGVwZW5kZW5jaWVzLCB0aGlzIGlzIHdlaXJkLi4uXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWV4dHJhbmVvdXMtZGVwZW5kZW5jaWVzXG5pbXBvcnQgYW5ub3RhdGlvblBsdWdpbiBmcm9tIFwiY2hhcnRqcy1wbHVnaW4tYW5ub3RhdGlvblwiO1xuaW1wb3J0IFB1YnN1YiBmcm9tIFwiLi4vUHVic3ViXCI7XG5pbXBvcnQgQ2FjaGUgZnJvbSBcIi4vQ2FjaGVcIjtcbmltcG9ydCBcIi4uLy4uL2Nzcy9jb21wb25lbnRzL0dyYXBoLmNzc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHcmFwaCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIENoYXJ0LnJlZ2lzdGVyKGFubm90YXRpb25QbHVnaW4pO1xuICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0aGlzLmNvbnRhaW5lci5pZCA9IFwiZ3JhcGhDb250YWluZXJcIjtcblxuICAgIHRoaXMuYnRuQmFyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0aGlzLmJ0bkJhci5pZCA9IFwiYnRuQmFyXCI7XG5cbiAgICB0aGlzLmJ0blRlbXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRoaXMuYnRuVGVtcC5pbm5lclRleHQgPSBcIlRlbXBlcmF0dXJlXCI7XG4gICAgdGhpcy5idG5UZW1wLmlkID0gXCJidG5UZW1wXCI7XG4gICAgdGhpcy5idG5UZW1wLmNsYXNzTGlzdC5hZGQoXCJzZWxlY3RlZFwiKTtcblxuICAgIHRoaXMuYnRuUmFpbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGhpcy5idG5SYWluLmlubmVyVGV4dCA9IFwiQ2hhbmNlIG9mIHJhaW5cIjtcbiAgICB0aGlzLmJ0blJhaW4uaWQgPSBcImJ0blJhaW5cIjtcblxuICAgIHRoaXMuc2V0dGluZ1doaWNoR3JhcGggPSBcInRlbXBcIjsgLy8gb3IgJ3JhaW4nXG5cbiAgICB0aGlzLmJ0bkJhci5hcHBlbmQodGhpcy5idG5UZW1wLCB0aGlzLmJ0blJhaW4pO1xuICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZCh0aGlzLmJ0bkJhcik7XG4gICAgdGhpcy5iaW5kRXZlbnRzKCk7XG4gIH1cblxuICBiaW5kRXZlbnRzKCkge1xuICAgIFB1YnN1Yi5vbihcInJlbmRlckdyYXBoXCIsIChpbmRleCkgPT4ge1xuICAgICAgbGV0IHByb3BlcnR5O1xuICAgICAgaWYgKHRoaXMuc2V0dGluZ1doaWNoR3JhcGggPT09IFwidGVtcFwiKSB7XG4gICAgICAgIHByb3BlcnR5ID0gYHRlbXBfJHtDYWNoZS50ZW1wVW5pdHN9YDtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5zZXR0aW5nV2hpY2hHcmFwaCA9PT0gXCJyYWluXCIpIHtcbiAgICAgICAgcHJvcGVydHkgPSBgY2hhbmNlX29mX3JhaW5gO1xuICAgICAgfVxuICAgICAgY29uc3QgdG9QYXJzZSA9IE9iamVjdC52YWx1ZXMoXG4gICAgICAgIENhY2hlLmNhY2hlZERhdGEuZm9yZWNhc3QuZm9yZWNhc3RkYXlbaW5kZXhdLmhvdXIsXG4gICAgICApO1xuICAgICAgY29uc3QgcGFyc2VkRGF0YSA9IFtdO1xuICAgICAgdG9QYXJzZS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGhvdXIgPSBuZXcgRGF0ZShlbGVtZW50LnRpbWUpLmdldEhvdXJzKCk7XG4gICAgICAgIHBhcnNlZERhdGEucHVzaCh7XG4gICAgICAgICAgaG91cixcbiAgICAgICAgICB0ZW1wOiBlbGVtZW50W3Byb3BlcnR5XSxcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGlzQ3VycmVudERheSA9IGluZGV4ID09PSAwO1xuICAgICAgdGhpcy5yZW5kZXIoeyBwYXJzZWREYXRhLCBpc0N1cnJlbnREYXkgfSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmJ0blRlbXAuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIHRoaXMuc2V0dGluZ1doaWNoR3JhcGggPSBcInRlbXBcIjtcbiAgICAgIHRoaXMuYnRuVGVtcC5jbGFzc0xpc3QuYWRkKFwic2VsZWN0ZWRcIik7XG4gICAgICB0aGlzLmJ0blJhaW4uY2xhc3NMaXN0LnJlbW92ZShcInNlbGVjdGVkXCIpO1xuXG4gICAgICBQdWJzdWIuZW1pdChcInJlbmRlckdyYXBoXCIsIENhY2hlLnNlbGVjdGVkRGF5KTtcbiAgICB9KTtcblxuICAgIHRoaXMuYnRuUmFpbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5zZXR0aW5nV2hpY2hHcmFwaCA9IFwicmFpblwiO1xuICAgICAgdGhpcy5idG5SYWluLmNsYXNzTGlzdC5hZGQoXCJzZWxlY3RlZFwiKTtcbiAgICAgIHRoaXMuYnRuVGVtcC5jbGFzc0xpc3QucmVtb3ZlKFwic2VsZWN0ZWRcIik7XG5cbiAgICAgIFB1YnN1Yi5lbWl0KFwicmVuZGVyR3JhcGhcIiwgQ2FjaGUuc2VsZWN0ZWREYXkpO1xuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyKGRhdGEpIHtcbiAgICBjb25zdCBsaW5lTm93ID0gZGF0YS5pc0N1cnJlbnREYXkgPyAxIDogMDtcbiAgICBjb25zdCBsaW5lTm93VmFsdWUgPSBuZXcgRGF0ZShcbiAgICAgIENhY2hlLmNhY2hlZERhdGEuY3VycmVudC5sYXN0X3VwZGF0ZWQsXG4gICAgKS5nZXRIb3VycygpO1xuICAgIGxldCB1bml0cztcbiAgICBsZXQgY29sb3I7XG4gICAgaWYgKHRoaXMuc2V0dGluZ1doaWNoR3JhcGggPT09IFwidGVtcFwiKSB7XG4gICAgICB1bml0cyA9IFwiwrBcIjtcbiAgICAgIGNvbG9yID0gXCIjMUE4M0REXCI7XG4gICAgfSBlbHNlIGlmICh0aGlzLnNldHRpbmdXaGljaEdyYXBoID09PSBcInJhaW5cIikge1xuICAgICAgdW5pdHMgPSBcIiVcIjtcbiAgICAgIGNvbG9yID0gXCIjZGQxYTc5XCI7XG4gICAgfVxuICAgIGlmICh0aGlzLmNvbnRhaW5lci5jb250YWlucyh0aGlzLmNhbnZhcykpIHtcbiAgICAgIHRoaXMuY29udGFpbmVyLnJlbW92ZUNoaWxkKHRoaXMuY2FudmFzKTtcbiAgICB9XG4gICAgdGhpcy5jYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZCh0aGlzLmNhbnZhcyk7XG5cbiAgICB0aGlzLmNhY2hlZENoYXJ0ID0gbmV3IENoYXJ0KHRoaXMuY2FudmFzLCB7XG4gICAgICB0eXBlOiBcImxpbmVcIixcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgbGFiZWxzOiBkYXRhLnBhcnNlZERhdGEubWFwKChyb3cpID0+IGAke3Jvdy5ob3VyfTowMGApLFxuICAgICAgICBkYXRhc2V0czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGRhdGE6IGRhdGEucGFyc2VkRGF0YS5tYXAoKHJvdykgPT4gcm93LnRlbXApLFxuICAgICAgICAgICAgYm9yZGVyQ29sb3I6IGNvbG9yLFxuICAgICAgICAgICAgdGVuc2lvbjogMC4yLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBzY2FsZXM6IHtcbiAgICAgICAgICB5OiB7XG4gICAgICAgICAgICBiZWdpbkF0WmVybzogZmFsc2UsXG4gICAgICAgICAgICB0aWNrczoge1xuICAgICAgICAgICAgICAvLyBBZGQgdW5pdHMgdG8geS1heGlzIGxhYmVsc1xuICAgICAgICAgICAgICBjYWxsYmFjayh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBgJHt2YWx1ZX0ke3VuaXRzfWA7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHN0ZXBTaXplOiAxLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBtYWludGFpbkFzcGVjdFJhdGlvOiBmYWxzZSxcbiAgICAgICAgcmVzcG9uc2l2ZTogdHJ1ZSxcbiAgICAgICAgcGx1Z2luczoge1xuICAgICAgICAgIGFubm90YXRpb246IHtcbiAgICAgICAgICAgIGFubm90YXRpb25zOiB7XG4gICAgICAgICAgICAgIGxpbmUxOiB7XG4gICAgICAgICAgICAgICAgYWRqdXN0U2NhbGVSYW5nZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBkcmF3VGltZTogXCJhZnRlckRhdGFzZXRzRHJhd1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwibGluZVwiLFxuICAgICAgICAgICAgICAgIHNjYWxlSUQ6IFwieFwiLFxuICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBcIm9yYW5nZVwiLFxuICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiBsaW5lTm93LFxuICAgICAgICAgICAgICAgIHZhbHVlOiBsaW5lTm93VmFsdWUsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBhbm5vdGF0aW9uczoge1xuICAgICAgICAgIGxpbmUxOiB7XG4gICAgICAgICAgICAvKiBsYWJlbDoge1xuICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgICBkaXNwbGF5OiB0cnVlLFxuICAgICAgICAgICAgICBjb250ZW50OiBcIk5PV1wiLCBcbiAgICAgICAgICAgICAgY29sb3I6IFwid2hpdGVcIixcbiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcIm9yYW5nZVwiLFxuICAgICAgICAgICAgICBwb3NpdGlvbjogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIH0sICovXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvb3RlciB7XG4gICN5ZWFyO1xuXG4gICNvdXRwdXQ7XG5cbiAgY29uc3RydWN0b3IoeWVhcikge1xuICAgIHRoaXMuI3llYXIgPSB5ZWFyO1xuICAgIHRoaXMuI291dHB1dCA9IHRoaXMuI3JlbmRlcigpO1xuICAgIC8vIHRoaXMuI2JpbmRFdmVudHMoKTtcbiAgfVxuXG4gICNyZW5kZXIoKSB7XG4gICAgY29uc3QgY3VycmVudFllYXIgPSBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCk7XG4gICAgbGV0IGZvb3RlclN0cmluZztcbiAgICBjb25zdCB5ZWFyID0gdGhpcy4jeWVhci50b1N0cmluZygpO1xuICAgIGZvb3RlclN0cmluZyA9IHllYXI7XG4gICAgaWYgKCF5ZWFyLmluY2x1ZGVzKGN1cnJlbnRZZWFyKSkge1xuICAgICAgZm9vdGVyU3RyaW5nID0gYCR7Zm9vdGVyU3RyaW5nfS0ke2N1cnJlbnRZZWFyfSAtIGA7XG4gICAgfVxuICAgIGNvbnN0IGRpdkZvb3RlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmb290ZXJcIik7XG4gICAgZGl2Rm9vdGVyLmlubmVySFRNTCA9IGBcbiAgICAgICAgICAgIDxzbWFsbD5cbiAgICAgICAgICAgICAgICAmY29weTsgQ29weXJpZ2h0ICR7Zm9vdGVyU3RyaW5nfVxuICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vcG9ya2Vudm9sZlwiIHRhcmdldD1cIuKAnV9ibGFua+KAnVwiPlxuICAgICAgICAgICAgICAgICAgICBQb3JrZW52w7ZsZlxuICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgIDwvc21hbGw+XG4gICAgICAgICAgICBgO1xuICAgIGRpdkZvb3Rlci5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XG4gICAgZGl2Rm9vdGVyLnN0eWxlLmp1c3RpZnlDb250ZW50ID0gXCJjZW50ZXJcIjtcbiAgICBkaXZGb290ZXIuc3R5bGUuYWxpZ25JdGVtcyA9IFwiY2VudGVyXCI7XG4gICAgZGl2Rm9vdGVyLnN0eWxlLmNvbG9yID0gXCJncmV5XCI7XG4gICAgZGl2Rm9vdGVyLnN0eWxlLmZvbnRTaXplID0gXCIwLjlyZW1cIjtcbiAgICBkaXZGb290ZXIuc3R5bGUucG9zaXRpb24gPSBcImZpeGVkXCI7XG5cbiAgICBkaXZGb290ZXIuc3R5bGUuYm90dG9tID0gXCIwXCI7XG4gICAgZGl2Rm9vdGVyLnN0eWxlLmxlZnQgPSBcIjUwJVwiO1xuICAgIGRpdkZvb3Rlci5zdHlsZS50cmFuc2Zvcm0gPSBcInRyYW5zbGF0ZVgoLTUwJSlcIjtcbiAgICBkaXZGb290ZXIuc3R5bGUucGFkZGluZyA9IFwiMTBweFwiO1xuXG4gICAgZGl2Rm9vdGVyLnF1ZXJ5U2VsZWN0b3IoXCJhXCIpLnN0eWxlLmNvbG9yID0gXCJncmV5XCI7XG5cbiAgICByZXR1cm4gZGl2Rm9vdGVyO1xuICB9XG5cbiAgLy8gI2JpbmRFdmVudHMoKSB7fVxuXG4gIGdldCBvdXRwdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuI291dHB1dDtcbiAgfVxufVxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0FwcC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0FwcC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgSGVhZGVyIGZyb20gXCIuL0hlYWRlclwiO1xuaW1wb3J0IERheXNCYXIgZnJvbSBcIi4vRGF5c0JhclwiO1xuaW1wb3J0IExvYWRpbmcgZnJvbSBcIi4vTG9hZGluZ1wiO1xuaW1wb3J0IEdyYXBoIGZyb20gXCIuL0dyYXBoXCI7XG5pbXBvcnQgcXVlcnlXZWF0aGVyQVBJIGZyb20gXCIuL0FQSVwiO1xuaW1wb3J0IFB1YnN1YiBmcm9tIFwiLi4vUHVic3ViXCI7XG5pbXBvcnQgQ2FjaGUgZnJvbSBcIi4vQ2FjaGVcIjtcbmltcG9ydCBGb290ZXIgZnJvbSBcIi4vRm9vdGVyXCI7XG5pbXBvcnQgXCIuLi8uLi9jc3MvY29tcG9uZW50cy9BcHAuY3NzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwcCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIC8vIERPTVxuICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0aGlzLmNvbnRhaW5lci5pZCA9IFwiYXBwQ29udGFpbmVyXCI7XG4gICAgdGhpcy5sb2FkaW5nID0gbmV3IExvYWRpbmcoKTtcbiAgICB0aGlzLmhlYWRlciA9IG5ldyBIZWFkZXIoKTtcbiAgICB0aGlzLmdyYXBoID0gbmV3IEdyYXBoKCk7XG4gICAgdGhpcy5kYXlzQmFyID0gbmV3IERheXNCYXIoOCk7XG4gICAgdGhpcy5mb290ZXIgPSBuZXcgRm9vdGVyKDIwMjMpO1xuICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZChcbiAgICAgIHRoaXMuaGVhZGVyLmNvbnRhaW5lcixcbiAgICAgIHRoaXMuZ3JhcGguY29udGFpbmVyLFxuICAgICAgdGhpcy5kYXlzQmFyLmNvbnRhaW5lcixcbiAgICAgIHRoaXMuZm9vdGVyLm91dHB1dCxcbiAgICApO1xuICAgIEFwcC5iaW5kRXZlbnRzKHRoaXMpO1xuICAgIEFwcC5hcGlDYWxsKCk7XG4gIH1cblxuICBzdGF0aWMgYXBpQ2FsbChsb2NhdGlvbikge1xuICAgIHF1ZXJ5V2VhdGhlckFQSShsb2NhdGlvbilcbiAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgIENhY2hlLmNhY2hlZERhdGEgPSBkYXRhO1xuICAgICAgICBQdWJzdWIuZW1pdChcInJlbmRlckhlYWRlclwiLCAwKTtcbiAgICAgICAgUHVic3ViLmVtaXQoXCJyZW5kZXJEYXlzQmFyXCIpO1xuICAgICAgICBQdWJzdWIuZW1pdChcInJlbmRlckdyYXBoXCIsIDApO1xuICAgICAgICBQdWJzdWIuZW1pdChcInJlbmRlckhvdXJseVwiLCAwKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goY29uc29sZS5sb2cpO1xuICB9XG5cbiAgc3RhdGljIGJpbmRFdmVudHMoaW5zdGFuY2UpIHtcbiAgICBQdWJzdWIub24oXCJhcGlDYWxsXCIsIChsb2NhdGlvbikgPT4ge1xuICAgICAgQXBwLmFwaUNhbGwobG9jYXRpb24pO1xuICAgIH0pO1xuICAgIFB1YnN1Yi5vbihcImxvYWRpbmdcIiwgKCkgPT4ge1xuICAgICAgaW5zdGFuY2UuY29udGFpbmVyLmFwcGVuZChpbnN0YW5jZS5sb2FkaW5nLmNvbnRhaW5lcik7XG4gICAgfSk7XG4gICAgUHVic3ViLm9uKFwic3RvcExvYWRpbmdcIiwgKCkgPT4ge1xuICAgICAgaW5zdGFuY2UubG9hZGluZy5jb250YWluZXIucmVtb3ZlKCk7XG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCBQdWJzdWIgZnJvbSBcIi4uL1B1YnN1YlwiO1xuaW1wb3J0IENhY2hlIGZyb20gXCIuL0NhY2hlXCI7XG5cbmFzeW5jIGZ1bmN0aW9uIHF1ZXJ5TG9jYXRpb25BUEkoKSB7XG4gIGNvbnN0IHJlcXVlc3RMb2NhdGlvbiA9IGF3YWl0IGZldGNoKFwiaHR0cHM6Ly9pcGFwaS5jby9qc29uL1wiKTtcbiAgY29uc3QgcGFyc2VkUmVxdWVzdCA9IGF3YWl0IHJlcXVlc3RMb2NhdGlvbi5qc29uKCk7XG4gIGlmIChcbiAgICByZXF1ZXN0TG9jYXRpb24uY291bnRyeV9jb2RlX2lzbzMgPT09IFwiTEJSXCIgfHxcbiAgICByZXF1ZXN0TG9jYXRpb24uY291bnRyeV9jb2RlX2lzbzMgPT09IFwiTU1SXCIgfHxcbiAgICByZXF1ZXN0TG9jYXRpb24uY291bnRyeV9jb2RlX2lzbzMgPT09IFwiVVNBXCJcbiAgKSB7XG4gICAgQ2FjaGUudGVtcFVuaXRzID0gXCJmXCI7XG4gICAgQ2FjaGUud2luZFVuaXRzID0gXCJtcGhcIjtcbiAgfVxuICByZXR1cm4gcGFyc2VkUmVxdWVzdC5jaXR5O1xufVxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gcXVlcnlXZWF0aGVyQVBJKF9sb2NhdGlvbikge1xuICBQdWJzdWIuZW1pdChcImxvYWRpbmdcIik7XG4gIGNvbnN0IGxvY2F0aW9uID0gX2xvY2F0aW9uIHx8IChhd2FpdCBxdWVyeUxvY2F0aW9uQVBJKCkuY2F0Y2goY29uc29sZS5sb2cpKTtcbiAgY29uc3QgcmVxdWVzdFdlYXRoZXIgPVxuICAgIGF3YWl0IGZldGNoKGBodHRwczovL2FwaS53ZWF0aGVyYXBpLmNvbS92MS9mb3JlY2FzdC5qc29uP2tleT02YjUwZDU5MzhmMGI0MTczYTA2MjAyMTQ4MjMxMjA4JnE9JHtsb2NhdGlvbn0mZGF5cz0xMCZhcWk9bm8mYWxlcnRzPW5vXG4gICAgYCk7XG4gIGNvbnN0IGRhdGEgPSBhd2FpdCByZXF1ZXN0V2VhdGhlci5qc29uKCk7XG4gIFB1YnN1Yi5lbWl0KFwic3RvcExvYWRpbmdcIik7XG4gIHJldHVybiBkYXRhO1xufVxuIiwiaW1wb3J0IFwiLi9jc3MvZm9udC5jc3NcIjtcbmltcG9ydCBcIi4vY3NzL3N0eWxlLmNzc1wiO1xuaW1wb3J0IEFwcCBmcm9tIFwiLi9qcy9jb21wb25lbnRzL0FwcFwiO1xuXG5jb25zdCBib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJvZHlcIik7XG5jb25zdCBhcHAgPSBuZXcgQXBwKCk7XG5ib2R5LmFwcGVuZChhcHAuY29udGFpbmVyKTtcbiJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsImkiLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJsb2NhdGlvbiIsImN1cnJlbnRTY3JpcHQiLCJzcmMiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJyZXBsYWNlIiwicCIsIm5jIiwibG9jYWxzIiwiUHVic3ViIiwib24iLCJldmVudE5hbWUiLCJmbiIsIm9mZiIsImVtaXQiLCJmb3JFYWNoIiwiU2VhcmNoQmFyIiwiY29uc3RydWN0b3IiLCJjb250YWluZXIiLCJzZWFyY2hCYXIiLCJ0eXBlIiwicGxhY2Vob2xkZXIiLCJhcHBlbmQiLCJiaW5kRXZlbnRzIiwiYWRkRXZlbnRMaXN0ZW5lciIsInZhbHVlIiwiQ2FjaGUiLCJzdGF0aWMiLCJVbml0U2VsZWN0b3IiLCJkaXZDIiwiaW5uZXJUZXh0IiwiZGl2RiIsInRlbXBVbml0cyIsImNsYXNzTGlzdCIsInRvZ2dsZSIsImFkZCIsIndpbmRVbml0cyIsInNlbGVjdGVkRGF5IiwiSGVhZGVyIiwiaW1nSWNvbiIsImRpdlRlbXBlcmF0dXJlIiwiZGl2SHVtaWRpdHkiLCJkaXZXaW5kU3BlZWQiLCJkaXZDaGFuY2VSYWluIiwiZGl2RGF5IiwiZGl2Q29uZGl0aW9uIiwiZGl2TG9jYXRpb24iLCJ1bml0U2VsZWN0b3IiLCJpY29uIiwiY2FjaGVkRGF0YSIsImZvcmVjYXN0IiwiZm9yZWNhc3RkYXkiLCJkYXkiLCJjb25kaXRpb24iLCJjaGFuY2VPZlJhaW4iLCJkYWlseV9jaGFuY2Vfb2ZfcmFpbiIsInRleHQiLCJEYXRlIiwiZGF0ZSIsInRvTG9jYWxlRGF0ZVN0cmluZyIsIndlZWtkYXkiLCJtb250aCIsInRpbWVab25lIiwibmFtZSIsImNvdW50cnkiLCJ0ZW1wIiwiaHVtaWRpdHkiLCJ3aW5kIiwiTWF0aCIsImZsb29yIiwiY3VycmVudCIsImF2Z2h1bWlkaXR5IiwicmVuZGVyIiwiRGF5IiwiYXJndW1lbnRzIiwiaXNDdXJyZW50RGF5IiwiZGl2RGF5T2ZXZWVrIiwiZGl2VGVtcGVyYXR1cmVNQVgiLCJkaXZUZW1wZXJhdHVyZU1JTiIsImRhdGVfZXBvY2giLCJEYXlzQmFyIiwiZGF5cyIsImFtb3VudCIsIkxvYWRpbmciLCJ3aGVlbCIsImltZ0xvYWRpbmciLCJyb3VuZCIsInYiLCJsaW0iLCJsIiwiaCIsIm1heCIsIm1pbiIsInAyYiIsIm4yYiIsImIybiIsIm4ycCIsIm1hcCQxIiwiQSIsIkIiLCJDIiwiRCIsIkUiLCJGIiwiYiIsImMiLCJmIiwiaGV4IiwiaDEiLCJoMiIsImVxIiwiSFVFX1JFIiwiaHNsMnJnYm4iLCJzIiwiaHN2MnJnYm4iLCJod2IycmdibiIsInciLCJyZ2IiLCJyZ2IyaHNsIiwiciIsImh1ZVZhbHVlIiwiY2FsbG4iLCJBcnJheSIsImlzQXJyYXkiLCJoc2wycmdiIiwiaHVlIiwieCIsIloiLCJZIiwiWCIsIlciLCJWIiwiVSIsIlQiLCJTIiwiUiIsIlEiLCJQIiwiTyIsIk4iLCJNIiwiTCIsIksiLCJHIiwiSCIsIkkiLCJKIiwibmFtZXMkMSIsIk9pY2VYZSIsImFudGlxdWV3RXRlIiwiYXF1YSIsImFxdWFtYXJSZSIsImF6dVkiLCJiZWlnZSIsImJpc3F1ZSIsImJsYWNrIiwiYmxhbktlZE9tb25kIiwiWGUiLCJYZXZpVGV0IiwiYlB3biIsImJ1cmx5d29vZCIsImNhTXRYZSIsIkthcnRZdXNlIiwiS29jVGF0ZSIsImNTTyIsImNTbmZsb3dlclhlIiwiY1Nuc2lsayIsImNyaW1zb24iLCJjeWFuIiwieFhlIiwieGN5YW4iLCJ4Z1RNblBkIiwieFdheSIsInhnWUYiLCJ4Z1l5IiwieGtoYWtpIiwieG1hZ0Z0YSIsInhUaXZlZ1lGIiwieFNhbmdlIiwieFNjRWQiLCJ4WWQiLCJ4c09tb24iLCJ4c0hnWUYiLCJ4VVhlIiwieFVXYXkiLCJ4VWdZeSIsInhRZSIsInh2aVRldCIsImRBcHBSayIsImRBcHNreVhlIiwiZGltV2F5IiwiZGltZ1l5IiwiZG9kZ2VyWGUiLCJmaVlicmljayIsImZsU093RXRlIiwiZm9Zc3RXQW4iLCJmdUtzaWEiLCJnYVJzYlNvIiwiZ2hvc3R3RXRlIiwiZ1RkIiwiZ1RNblBkIiwiV2F5IiwiZ1lGIiwiZ1lGTHciLCJnWXkiLCJob25leU13IiwiaG90cFJrIiwiUmRpYW5ZZCIsIlJkaWdvIiwiaXZTeSIsImtoYWtpIiwibGF2Rk1yIiwibGF2Rk1yWHNoIiwibGF3bmdZRiIsIk5tb25jRWZmb24iLCJaWGUiLCJaY1NPIiwiWmN5YW4iLCJaZ1RNblBkTHciLCJaV2F5IiwiWmdZRiIsIlpnWXkiLCJacFJrIiwiWnNPbW9uIiwiWnNIZ1lGIiwiWnNreVhlIiwiWlVXYXkiLCJaVWdZeSIsIlpzdEFsWGUiLCJaTHciLCJsaW1lIiwibGltZWdZRiIsImxSRiIsIm1hZ0Z0YSIsIm1hUG9uIiwiVmFxdWFtYXJSZSIsIlZYZSIsIlZTY0VkIiwiVnB1cnBOIiwiVnNIZ1lGIiwiVlVYZSIsIlZzcHJSZ2dZRiIsIlZRZSIsIlZ2aVRldFlkIiwibWlkbmlnaHRYZSIsIm1SdGNZYW0iLCJtaXN0eVBzZSIsIm1vY2Nhc1IiLCJuYXZham93RXRlIiwibmF2eSIsIlRkbGFjZSIsIlRpdmUiLCJUaXZlZEJiIiwiU2FuZ2UiLCJTYW5nZVlkIiwiU2NFZCIsInBPZWdUTW5QZCIsInBPZWdZRiIsInBPZVFlIiwicE9ldmlUZXRZZCIsInBhcGF5YXdFcCIsInBIS3B1ZmYiLCJwZXJ1IiwicFJrIiwicGx1bSIsInBvd01yWGUiLCJwdXJwTiIsIlliZWNjYXB1cnBOIiwiWWQiLCJQc3licm93biIsIlB5T1hlIiwic2FkZE5iUHduIiwic09tb24iLCJzYW5keWJQd24iLCJzSGdZRiIsInNIc2hlbGwiLCJzaUZuYSIsInNpbHZlciIsInNreVhlIiwiVVhlIiwiVVdheSIsIlVnWXkiLCJzbm93Iiwic3ByUmdnWUYiLCJzdEFsWGUiLCJ0YW4iLCJ0ZU8iLCJ0RXN0TiIsInRvbWF0byIsIlFlIiwidmlUZXQiLCJKSHQiLCJ3RXRlIiwid0V0ZXNtb2tlIiwiTHciLCJMd2dZRiIsIm5hbWVzIiwiUkdCX1JFIiwidG8iLCJwb3ciLCJmcm9tIiwibW9kSFNMIiwicmF0aW8iLCJ0bXAiLCJjbG9uZSIsInByb3RvIiwiYXNzaWduIiwiZnJvbU9iamVjdCIsImlucHV0IiwiZnVuY3Rpb25QYXJzZSIsInN0ciIsImNoYXJBdCIsIm0iLCJleGVjIiwicmdiUGFyc2UiLCJwMSIsInAyIiwiaHdiMnJnYiIsImhzdjJyZ2IiLCJodWVQYXJzZSIsIkNvbG9yIiwicmV0IiwibGVuIiwidW5wYWNrZWQiLCJrZXlzIiwidGtleXMiLCJqIiwib2siLCJuayIsInBhcnNlSW50IiwidW5wYWNrIiwidHJhbnNwYXJlbnQiLCJ0b0xvd2VyQ2FzZSIsIm5hbWVQYXJzZSIsIl9yZ2IiLCJfdmFsaWQiLCJ2YWxpZCIsInJnYlN0cmluZyIsImhleFN0cmluZyIsImlzU2hvcnQiLCJhbHBoYSIsImhzbFN0cmluZyIsIm1peCIsImNvbG9yIiwid2VpZ2h0IiwiYzEiLCJjMiIsIncyIiwidzEiLCJpbnRlcnBvbGF0ZSIsInQiLCJyZ2IxIiwicmdiMiIsImNsZWFyZXIiLCJncmV5c2NhbGUiLCJ2YWwiLCJvcGFxdWVyIiwibmVnYXRlIiwibGlnaHRlbiIsImRhcmtlbiIsInNhdHVyYXRlIiwiZGVzYXR1cmF0ZSIsInJvdGF0ZSIsImRlZyIsIm5vb3AiLCJ1aWQiLCJpc051bGxPclVuZGVmIiwic2xpY2UiLCJpc09iamVjdCIsImlzTnVtYmVyRmluaXRlIiwiTnVtYmVyIiwiaXNGaW5pdGUiLCJmaW5pdGVPckRlZmF1bHQiLCJkZWZhdWx0VmFsdWUiLCJ2YWx1ZU9yRGVmYXVsdCIsInRvRGltZW5zaW9uIiwiZGltZW5zaW9uIiwiZW5kc1dpdGgiLCJwYXJzZUZsb2F0IiwiY2FsbGJhY2siLCJhcmdzIiwidGhpc0FyZyIsImVhY2giLCJsb29wYWJsZSIsInJldmVyc2UiLCJfZWxlbWVudHNFcXVhbCIsImEwIiwiYTEiLCJpbGVuIiwidjAiLCJ2MSIsImRhdGFzZXRJbmRleCIsInNvdXJjZSIsImNyZWF0ZSIsImtsZW4iLCJpc1ZhbGlkS2V5IiwiaW5kZXhPZiIsIl9tZXJnZXIiLCJ0dmFsIiwic3ZhbCIsIm1lcmdlIiwic291cmNlcyIsIm1lcmdlciIsIm1lcmdlSWYiLCJfbWVyZ2VySWYiLCJrZXlSZXNvbHZlcnMiLCJ5IiwicmVzb2x2ZU9iamVjdEtleSIsInJlc29sdmVyIiwicGFydHMiLCJzcGxpdCIsInBhcnQiLCJfc3BsaXRLZXkiLCJfZ2V0S2V5UmVzb2x2ZXIiLCJfY2FwaXRhbGl6ZSIsInRvVXBwZXJDYXNlIiwiZGVmaW5lZCIsImlzRnVuY3Rpb24iLCJzZXRzRXF1YWwiLCJzaXplIiwiaGFzIiwiUEkiLCJUQVUiLCJQSVRBVSIsIklORklOSVRZIiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJSQURfUEVSX0RFRyIsIkhBTEZfUEkiLCJRVUFSVEVSX1BJIiwiVFdPX1RISVJEU19QSSIsImxvZzEwIiwic2lnbiIsImFsbW9zdEVxdWFscyIsImVwc2lsb24iLCJhYnMiLCJuaWNlTnVtIiwicmFuZ2UiLCJyb3VuZGVkUmFuZ2UiLCJuaWNlUmFuZ2UiLCJmcmFjdGlvbiIsImlzTnVtYmVyIiwiaXNOYU4iLCJfc2V0TWluQW5kTWF4QnlLZXkiLCJhcnJheSIsInByb3BlcnR5IiwidG9SYWRpYW5zIiwiZGVncmVlcyIsInRvRGVncmVlcyIsInJhZGlhbnMiLCJfZGVjaW1hbFBsYWNlcyIsImdldEFuZ2xlRnJvbVBvaW50IiwiY2VudHJlUG9pbnQiLCJhbmdsZVBvaW50IiwiZGlzdGFuY2VGcm9tWENlbnRlciIsImRpc3RhbmNlRnJvbVlDZW50ZXIiLCJyYWRpYWxEaXN0YW5jZUZyb21DZW50ZXIiLCJzcXJ0IiwiYW5nbGUiLCJhdGFuMiIsImRpc3RhbmNlIiwiZGlzdGFuY2VCZXR3ZWVuUG9pbnRzIiwicHQxIiwicHQyIiwiX2FuZ2xlRGlmZiIsIl9ub3JtYWxpemVBbmdsZSIsIl9hbmdsZUJldHdlZW4iLCJzdGFydCIsImVuZCIsInNhbWVBbmdsZUlzRnVsbENpcmNsZSIsImFuZ2xlVG9TdGFydCIsImFuZ2xlVG9FbmQiLCJzdGFydFRvQW5nbGUiLCJlbmRUb0FuZ2xlIiwiX2xpbWl0VmFsdWUiLCJfaXNCZXR3ZWVuIiwiX2xvb2t1cCIsInRhYmxlIiwiY21wIiwibWlkIiwiaGkiLCJsbyIsIl9sb29rdXBCeUtleSIsImxhc3QiLCJ0aSIsIl9ybG9va3VwQnlLZXkiLCJhcnJheUV2ZW50cyIsInVubGlzdGVuQXJyYXlFdmVudHMiLCJsaXN0ZW5lciIsInN0dWIiLCJfY2hhcnRqcyIsImxpc3RlbmVycyIsIl9hcnJheVVuaXF1ZSIsIml0ZW1zIiwic2V0IiwiU2V0IiwicmVxdWVzdEFuaW1GcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInRocm90dGxlZCIsImFyZ3NUb1VzZSIsInRpY2tpbmciLCJfdG9MZWZ0UmlnaHRDZW50ZXIiLCJhbGlnbiIsIl9hbGlnblN0YXJ0RW5kIiwiX2dldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHMiLCJtZXRhIiwicG9pbnRzIiwiYW5pbWF0aW9uc0Rpc2FibGVkIiwicG9pbnRDb3VudCIsIl9zb3J0ZWQiLCJpU2NhbGUiLCJfcGFyc2VkIiwiYXhpcyIsIm1pbkRlZmluZWQiLCJtYXhEZWZpbmVkIiwiZ2V0VXNlckJvdW5kcyIsImdldFBpeGVsRm9yVmFsdWUiLCJfc2NhbGVSYW5nZXNDaGFuZ2VkIiwieFNjYWxlIiwieVNjYWxlIiwiX3NjYWxlUmFuZ2VzIiwibmV3UmFuZ2VzIiwieG1pbiIsInhtYXgiLCJ5bWluIiwieW1heCIsImNoYW5nZWQiLCJhdEVkZ2UiLCJlbGFzdGljSW4iLCJzaW4iLCJlbGFzdGljT3V0IiwiZWZmZWN0cyIsImxpbmVhciIsImVhc2VJblF1YWQiLCJlYXNlT3V0UXVhZCIsImVhc2VJbk91dFF1YWQiLCJlYXNlSW5DdWJpYyIsImVhc2VPdXRDdWJpYyIsImVhc2VJbk91dEN1YmljIiwiZWFzZUluUXVhcnQiLCJlYXNlT3V0UXVhcnQiLCJlYXNlSW5PdXRRdWFydCIsImVhc2VJblF1aW50IiwiZWFzZU91dFF1aW50IiwiZWFzZUluT3V0UXVpbnQiLCJlYXNlSW5TaW5lIiwiY29zIiwiZWFzZU91dFNpbmUiLCJlYXNlSW5PdXRTaW5lIiwiZWFzZUluRXhwbyIsImVhc2VPdXRFeHBvIiwiZWFzZUluT3V0RXhwbyIsImVhc2VJbkNpcmMiLCJlYXNlT3V0Q2lyYyIsImVhc2VJbk91dENpcmMiLCJlYXNlSW5FbGFzdGljIiwiZWFzZU91dEVsYXN0aWMiLCJlYXNlSW5PdXRFbGFzdGljIiwiZWFzZUluQmFjayIsImVhc2VPdXRCYWNrIiwiZWFzZUluT3V0QmFjayIsImVhc2VJbkJvdW5jZSIsImVhc2VPdXRCb3VuY2UiLCJlYXNlSW5PdXRCb3VuY2UiLCJpc1BhdHRlcm5PckdyYWRpZW50IiwiZ2V0SG92ZXJDb2xvciIsIm51bWJlcnMiLCJjb2xvcnMiLCJpbnRsQ2FjaGUiLCJNYXAiLCJmb3JtYXROdW1iZXIiLCJudW0iLCJsb2NhbGUiLCJjYWNoZUtleSIsImZvcm1hdHRlciIsIkludGwiLCJOdW1iZXJGb3JtYXQiLCJnZXROdW1iZXJGb3JtYXQiLCJmb3JtYXQiLCJmb3JtYXR0ZXJzIiwidmFsdWVzIiwibnVtZXJpYyIsInRpY2tWYWx1ZSIsInRpY2tzIiwiY2hhcnQiLCJub3RhdGlvbiIsImRlbHRhIiwibWF4VGljayIsImNhbGN1bGF0ZURlbHRhIiwibG9nRGVsdGEiLCJudW1EZWNpbWFsIiwibWluaW11bUZyYWN0aW9uRGlnaXRzIiwibWF4aW11bUZyYWN0aW9uRGlnaXRzIiwibG9nYXJpdGhtaWMiLCJyZW1haW4iLCJzaWduaWZpY2FuZCIsImluY2x1ZGVzIiwiVGlja3MiLCJvdmVycmlkZXMiLCJkZXNjcmlwdG9ycyIsImdldFNjb3BlJDEiLCJub2RlIiwicm9vdCIsInNjb3BlIiwiRGVmYXVsdHMiLCJfZGVzY3JpcHRvcnMiLCJfYXBwbGllcnMiLCJhbmltYXRpb24iLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJDb2xvciIsImRhdGFzZXRzIiwiZGV2aWNlUGl4ZWxSYXRpbyIsImNvbnRleHQiLCJwbGF0Zm9ybSIsImdldERldmljZVBpeGVsUmF0aW8iLCJlbGVtZW50cyIsImV2ZW50cyIsImZvbnQiLCJmYW1pbHkiLCJsaW5lSGVpZ2h0IiwiaG92ZXIiLCJob3ZlckJhY2tncm91bmRDb2xvciIsImN0eCIsImhvdmVyQm9yZGVyQ29sb3IiLCJob3ZlckNvbG9yIiwiaW5kZXhBeGlzIiwiaW50ZXJhY3Rpb24iLCJtb2RlIiwiaW50ZXJzZWN0IiwiaW5jbHVkZUludmlzaWJsZSIsIm1haW50YWluQXNwZWN0UmF0aW8iLCJvbkhvdmVyIiwib25DbGljayIsInBhcnNpbmciLCJwbHVnaW5zIiwicmVzcG9uc2l2ZSIsInNjYWxlIiwic2NhbGVzIiwic2hvd0xpbmUiLCJkcmF3QWN0aXZlRWxlbWVudHNPblRvcCIsImRlc2NyaWJlIiwib3ZlcnJpZGUiLCJyb3V0ZSIsInRhcmdldFNjb3BlIiwidGFyZ2V0TmFtZSIsInNjb3BlT2JqZWN0IiwidGFyZ2V0U2NvcGVPYmplY3QiLCJwcml2YXRlTmFtZSIsImRlZmluZVByb3BlcnRpZXMiLCJ3cml0YWJsZSIsImxvY2FsIiwiYXBwbGllcnMiLCJkZWZhdWx0cyIsIl9zY3JpcHRhYmxlIiwic3RhcnRzV2l0aCIsIl9pbmRleGFibGUiLCJfZmFsbGJhY2siLCJkZWxheSIsImR1cmF0aW9uIiwiZWFzaW5nIiwibG9vcCIsInByb3BlcnRpZXMiLCJhY3RpdmUiLCJyZXNpemUiLCJzaG93IiwiYW5pbWF0aW9ucyIsInZpc2libGUiLCJoaWRlIiwiYXV0b1BhZGRpbmciLCJwYWRkaW5nIiwidG9wIiwicmlnaHQiLCJib3R0b20iLCJsZWZ0IiwiZGlzcGxheSIsIm9mZnNldCIsImJlZ2luQXRaZXJvIiwiYm91bmRzIiwiZ3JhY2UiLCJncmlkIiwibGluZVdpZHRoIiwiZHJhd09uQ2hhcnRBcmVhIiwiZHJhd1RpY2tzIiwidGlja0xlbmd0aCIsInRpY2tXaWR0aCIsIl9jdHgiLCJ0aWNrQ29sb3IiLCJib3JkZXIiLCJkYXNoIiwiZGFzaE9mZnNldCIsIndpZHRoIiwidGl0bGUiLCJtaW5Sb3RhdGlvbiIsIm1heFJvdGF0aW9uIiwibWlycm9yIiwidGV4dFN0cm9rZVdpZHRoIiwidGV4dFN0cm9rZUNvbG9yIiwiYXV0b1NraXAiLCJhdXRvU2tpcFBhZGRpbmciLCJsYWJlbE9mZnNldCIsIm1pbm9yIiwibWFqb3IiLCJjcm9zc0FsaWduIiwic2hvd0xhYmVsQmFja2Ryb3AiLCJiYWNrZHJvcENvbG9yIiwiYmFja2Ryb3BQYWRkaW5nIiwiX21lYXN1cmVUZXh0IiwiZ2MiLCJsb25nZXN0Iiwic3RyaW5nIiwidGV4dFdpZHRoIiwibWVhc3VyZVRleHQiLCJfbG9uZ2VzdFRleHQiLCJhcnJheU9mVGhpbmdzIiwiY2FjaGUiLCJnYXJiYWdlQ29sbGVjdCIsInNhdmUiLCJqbGVuIiwidGhpbmciLCJuZXN0ZWRUaGluZyIsInJlc3RvcmUiLCJnY0xlbiIsIl9hbGlnblBpeGVsIiwicGl4ZWwiLCJjdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyIsImhhbGZXaWR0aCIsImNsZWFyQ2FudmFzIiwiY2FudmFzIiwiZ2V0Q29udGV4dCIsInJlc2V0VHJhbnNmb3JtIiwiY2xlYXJSZWN0IiwiaGVpZ2h0IiwiZHJhd1BvaW50IiwiZHJhd1BvaW50TGVnZW5kIiwieE9mZnNldCIsInlPZmZzZXQiLCJjb3JuZXJSYWRpdXMiLCJ4T2Zmc2V0VyIsInlPZmZzZXRXIiwicG9pbnRTdHlsZSIsInJvdGF0aW9uIiwicmFkaXVzIiwicmFkIiwidHJhbnNsYXRlIiwiZHJhd0ltYWdlIiwiYmVnaW5QYXRoIiwiZWxsaXBzZSIsImFyYyIsImNsb3NlUGF0aCIsIm1vdmVUbyIsImxpbmVUbyIsIlNRUlQxXzIiLCJyZWN0IiwiZmlsbCIsImJvcmRlcldpZHRoIiwic3Ryb2tlIiwiX2lzUG9pbnRJbkFyZWEiLCJwb2ludCIsImFyZWEiLCJtYXJnaW4iLCJjbGlwQXJlYSIsImNsaXAiLCJ1bmNsaXBBcmVhIiwiX3N0ZXBwZWRMaW5lVG8iLCJwcmV2aW91cyIsImZsaXAiLCJtaWRwb2ludCIsIl9iZXppZXJDdXJ2ZVRvIiwiYmV6aWVyQ3VydmVUbyIsImNwMXgiLCJjcDJ4IiwiY3AxeSIsImNwMnkiLCJkZWNvcmF0ZVRleHQiLCJsaW5lIiwib3B0cyIsInN0cmlrZXRocm91Z2giLCJ1bmRlcmxpbmUiLCJtZXRyaWNzIiwiYWN0dWFsQm91bmRpbmdCb3hMZWZ0IiwiYWN0dWFsQm91bmRpbmdCb3hSaWdodCIsImFjdHVhbEJvdW5kaW5nQm94QXNjZW50IiwiYWN0dWFsQm91bmRpbmdCb3hEZXNjZW50IiwieURlY29yYXRpb24iLCJzdHJva2VTdHlsZSIsImZpbGxTdHlsZSIsImRlY29yYXRpb25XaWR0aCIsImRyYXdCYWNrZHJvcCIsIm9sZENvbG9yIiwiZmlsbFJlY3QiLCJyZW5kZXJUZXh0IiwibGluZXMiLCJzdHJva2VXaWR0aCIsInN0cm9rZUNvbG9yIiwidHJhbnNsYXRpb24iLCJ0ZXh0QWxpZ24iLCJ0ZXh0QmFzZWxpbmUiLCJzZXRSZW5kZXJPcHRzIiwiYmFja2Ryb3AiLCJzdHJva2VUZXh0IiwibWF4V2lkdGgiLCJmaWxsVGV4dCIsImFkZFJvdW5kZWRSZWN0UGF0aCIsInRvcExlZnQiLCJib3R0b21MZWZ0IiwiYm90dG9tUmlnaHQiLCJ0b3BSaWdodCIsIkxJTkVfSEVJR0hUIiwiRk9OVF9TVFlMRSIsInRvTGluZUhlaWdodCIsIm1hdGNoZXMiLCJtYXRjaCIsIm51bWJlck9yWmVybyIsIl9yZWFkVmFsdWVUb1Byb3BzIiwicHJvcHMiLCJvYmpQcm9wcyIsInJlYWQiLCJ0b1RSQkwiLCJ0b1RSQkxDb3JuZXJzIiwidG9QYWRkaW5nIiwidG9Gb250IiwiZmFsbGJhY2siLCJjb25zb2xlIiwid2FybiIsInRvRm9udFN0cmluZyIsInJlc29sdmUiLCJpbnB1dHMiLCJpbmZvIiwiY2FjaGVhYmxlIiwiY3JlYXRlQ29udGV4dCIsInBhcmVudENvbnRleHQiLCJfY3JlYXRlUmVzb2x2ZXIiLCJzY29wZXMiLCJwcmVmaXhlcyIsInJvb3RTY29wZXMiLCJmaW5hbFJvb3RTY29wZXMiLCJfcmVzb2x2ZSIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiX2NhY2hlYWJsZSIsIl9zY29wZXMiLCJfcm9vdFNjb3BlcyIsIl9nZXRUYXJnZXQiLCJQcm94eSIsImRlbGV0ZVByb3BlcnR5IiwiX2tleXMiLCJfY2FjaGVkIiwicHJveHkiLCJwcmVmaXgiLCJyZWFkS2V5IiwibmVlZHNTdWJSZXNvbHZlciIsImNyZWF0ZVN1YlJlc29sdmVyIiwiX3Jlc29sdmVXaXRoUHJlZml4ZXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJSZWZsZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJnZXRLZXlzRnJvbUFsbFNjb3BlcyIsIm93bktleXMiLCJzdG9yYWdlIiwiX3N0b3JhZ2UiLCJfYXR0YWNoQ29udGV4dCIsInN1YlByb3h5IiwiZGVzY3JpcHRvckRlZmF1bHRzIiwiX3Byb3h5IiwiX2NvbnRleHQiLCJfc3ViUHJveHkiLCJfc3RhY2siLCJzZXRDb250ZXh0IiwicmVjZWl2ZXIiLCJpc1NjcmlwdGFibGUiLCJnZXRWYWx1ZSIsImRlbGV0ZSIsIl9yZXNvbHZlU2NyaXB0YWJsZSIsImlzSW5kZXhhYmxlIiwiYXJyIiwiZmlsdGVyIiwiX3Jlc29sdmVBcnJheSIsIl9yZXNvbHZlV2l0aENvbnRleHQiLCJhbGxLZXlzIiwiY29uZmlndXJhYmxlIiwic2NyaXB0YWJsZSIsImluZGV4YWJsZSIsIl9hbGxLZXlzIiwicmVzb2x2ZUZhbGxiYWNrIiwiZ2V0U2NvcGUiLCJwYXJlbnQiLCJhZGRTY29wZXMiLCJwYXJlbnRTY29wZXMiLCJwYXJlbnRGYWxsYmFjayIsImFsbFNjb3BlcyIsImFkZFNjb3Blc0Zyb21LZXkiLCJzdWJHZXRUYXJnZXQiLCJyZXNvbHZlS2V5c0Zyb21BbGxTY29wZXMiLCJfcGFyc2VPYmplY3REYXRhUmFkaWFsU2NhbGUiLCJfcGFyc2luZyIsInBhcnNlZCIsInBhcnNlIiwiRVBTSUxPTiIsImdldFBvaW50Iiwic2tpcCIsImdldFZhbHVlQXhpcyIsInNwbGluZUN1cnZlIiwiZmlyc3RQb2ludCIsIm1pZGRsZVBvaW50IiwiYWZ0ZXJQb2ludCIsIm5leHQiLCJkMDEiLCJkMTIiLCJzMDEiLCJzMTIiLCJmYSIsImZiIiwiY2FwQ29udHJvbFBvaW50IiwicHQiLCJfdXBkYXRlQmV6aWVyQ29udHJvbFBvaW50cyIsImNvbnRyb2xQb2ludHMiLCJzcGFuR2FwcyIsImN1YmljSW50ZXJwb2xhdGlvbk1vZGUiLCJ2YWx1ZUF4aXMiLCJwb2ludHNMZW4iLCJkZWx0YUsiLCJtSyIsInBvaW50QmVmb3JlIiwicG9pbnRDdXJyZW50IiwicG9pbnRBZnRlciIsInNsb3BlRGVsdGEiLCJhbHBoYUsiLCJiZXRhSyIsInRhdUsiLCJzcXVhcmVkTWFnbml0dWRlIiwibW9ub3RvbmVBZGp1c3QiLCJpUGl4ZWwiLCJ2UGl4ZWwiLCJtb25vdG9uZUNvbXB1dGUiLCJzcGxpbmVDdXJ2ZU1vbm90b25lIiwicHJldiIsInRlbnNpb24iLCJjYXBCZXppZXJQb2ludHMiLCJpbkFyZWEiLCJpbkFyZWFQcmV2IiwiaW5BcmVhTmV4dCIsIl9pc0RvbVN1cHBvcnRlZCIsIl9nZXRQYXJlbnROb2RlIiwiZG9tTm9kZSIsImhvc3QiLCJwYXJzZU1heFN0eWxlIiwic3R5bGVWYWx1ZSIsInBhcmVudFByb3BlcnR5IiwidmFsdWVJblBpeGVscyIsImdldENvbXB1dGVkU3R5bGUiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJwb3NpdGlvbnMiLCJnZXRQb3NpdGlvbmVkU3R5bGUiLCJzdHlsZXMiLCJzdWZmaXgiLCJwb3MiLCJ1c2VPZmZzZXRQb3MiLCJzaGFkb3dSb290IiwiZ2V0UmVsYXRpdmVQb3NpdGlvbiIsImV2ZW50IiwiYm9yZGVyQm94IiwiYm94U2l6aW5nIiwicGFkZGluZ3MiLCJib3JkZXJzIiwiYm94IiwidG91Y2hlcyIsIm9mZnNldFgiLCJvZmZzZXRZIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2xpZW50WCIsImNsaWVudFkiLCJnZXRDYW52YXNQb3NpdGlvbiIsInJvdW5kMSIsInJldGluYVNjYWxlIiwiZm9yY2VSYXRpbyIsImZvcmNlU3R5bGUiLCJwaXhlbFJhdGlvIiwiZGV2aWNlSGVpZ2h0IiwiZGV2aWNlV2lkdGgiLCJzZXRUcmFuc2Zvcm0iLCJzdXBwb3J0c0V2ZW50TGlzdGVuZXJPcHRpb25zIiwicGFzc2l2ZVN1cHBvcnRlZCIsInBhc3NpdmUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVhZFVzZWRTaXplIiwiZWwiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiZ2V0U3R5bGUiLCJfcG9pbnRJbkxpbmUiLCJfc3RlcHBlZEludGVycG9sYXRpb24iLCJfYmV6aWVySW50ZXJwb2xhdGlvbiIsImNwMSIsImNwMiIsImdldFJ0bEFkYXB0ZXIiLCJydGwiLCJyZWN0WCIsInNldFdpZHRoIiwieFBsdXMiLCJsZWZ0Rm9yTHRyIiwiaXRlbVdpZHRoIiwiZ2V0UmlnaHRUb0xlZnRBZGFwdGVyIiwiX2l0ZW1XaWR0aCIsIm92ZXJyaWRlVGV4dERpcmVjdGlvbiIsImRpcmVjdGlvbiIsIm9yaWdpbmFsIiwiZ2V0UHJvcGVydHlQcmlvcml0eSIsInNldFByb3BlcnR5IiwicHJldlRleHREaXJlY3Rpb24iLCJyZXN0b3JlVGV4dERpcmVjdGlvbiIsInByb3BlcnR5Rm4iLCJiZXR3ZWVuIiwiY29tcGFyZSIsIm5vcm1hbGl6ZSIsIm5vcm1hbGl6ZVNlZ21lbnQiLCJfYm91bmRTZWdtZW50Iiwic2VnbWVudCIsInN0YXJ0Qm91bmQiLCJlbmRCb3VuZCIsImdldFNlZ21lbnQiLCJwcmV2VmFsdWUiLCJpbnNpZGUiLCJzdWJTdGFydCIsIl9ib3VuZFNlZ21lbnRzIiwic2VnbWVudHMiLCJzdWIiLCJyZWFkU3R5bGUiLCJib3JkZXJDYXBTdHlsZSIsImJvcmRlckRhc2giLCJib3JkZXJEYXNoT2Zmc2V0IiwiYm9yZGVySm9pblN0eWxlIiwic3R5bGVDaGFuZ2VkIiwicHJldlN0eWxlIiwicmVwbGFjZXIiLCJBbmltYXRvciIsIl9yZXF1ZXN0IiwiX2NoYXJ0cyIsIl9ydW5uaW5nIiwiX2xhc3REYXRlIiwiX25vdGlmeSIsImFuaW1zIiwiY2FsbGJhY2tzIiwibnVtU3RlcHMiLCJpbml0aWFsIiwiY3VycmVudFN0ZXAiLCJfcmVmcmVzaCIsIl91cGRhdGUiLCJub3ciLCJyZW1haW5pbmciLCJydW5uaW5nIiwiZHJhdyIsIl9hY3RpdmUiLCJfdG90YWwiLCJ0aWNrIiwicG9wIiwiX2dldEFuaW1zIiwiY2hhcnRzIiwiY29tcGxldGUiLCJwcm9ncmVzcyIsImxpc3RlbiIsImNiIiwicmVkdWNlIiwiYWNjIiwiY3VyIiwiX2R1cmF0aW9uIiwic3RvcCIsImNhbmNlbCIsImFuaW1hdG9yIiwiaW50ZXJwb2xhdG9ycyIsImJvb2xlYW4iLCJmYWN0b3IiLCJjMCIsIm51bWJlciIsIkFuaW1hdGlvbiIsImNmZyIsImN1cnJlbnRWYWx1ZSIsIl9mbiIsIl9lYXNpbmciLCJfc3RhcnQiLCJfbG9vcCIsIl90YXJnZXQiLCJfcHJvcCIsIl9mcm9tIiwiX3RvIiwiX3Byb21pc2VzIiwiZWxhcHNlZCIsIndhaXQiLCJwcm9taXNlcyIsIlByb21pc2UiLCJyZXMiLCJyZWoiLCJyZXNvbHZlZCIsIm1ldGhvZCIsIkFuaW1hdGlvbnMiLCJjb25maWciLCJfY2hhcnQiLCJfcHJvcGVydGllcyIsImNvbmZpZ3VyZSIsImFuaW1hdGlvbk9wdGlvbnMiLCJhbmltYXRlZFByb3BzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIm9wdGlvbiIsIl9hbmltYXRlT3B0aW9ucyIsIm5ld09wdGlvbnMiLCIkc2hhcmVkIiwiJGFuaW1hdGlvbnMiLCJyZXNvbHZlVGFyZ2V0T3B0aW9ucyIsIl9jcmVhdGVBbmltYXRpb25zIiwiYW5pbSIsImFsbCIsImF3YWl0QWxsIiwidGhlbiIsInNjYWxlQ2xpcCIsImFsbG93ZWRPdmVyZmxvdyIsImdldFNvcnRlZERhdGFzZXRJbmRpY2VzIiwiZmlsdGVyVmlzaWJsZSIsIm1ldGFzZXRzIiwiX2dldFNvcnRlZERhdGFzZXRNZXRhcyIsImFwcGx5U3RhY2siLCJzdGFjayIsImRzSW5kZXgiLCJzaW5nbGVNb2RlIiwib3RoZXJWYWx1ZSIsImlzU3RhY2tlZCIsInN0YWNrZWQiLCJnZXRPckNyZWF0ZVN0YWNrIiwic3RhY2tzIiwic3RhY2tLZXkiLCJpbmRleFZhbHVlIiwic3ViU3RhY2siLCJnZXRMYXN0SW5kZXhJblN0YWNrIiwidlNjYWxlIiwicG9zaXRpdmUiLCJnZXRNYXRjaGluZ1Zpc2libGVNZXRhcyIsInVwZGF0ZVN0YWNrcyIsImNvbnRyb2xsZXIiLCJfY2FjaGVkTWV0YSIsIl9zdGFja3MiLCJpQXhpcyIsInZBeGlzIiwiaW5kZXhTY2FsZSIsInZhbHVlU2NhbGUiLCJnZXRTdGFja0tleSIsIl90b3AiLCJfYm90dG9tIiwiX3Zpc3VhbFZhbHVlcyIsImdldEZpcnN0U2NhbGVJZCIsInNoaWZ0IiwiY2xlYXJTdGFja3MiLCJpc0RpcmVjdFVwZGF0ZU1vZGUiLCJjbG9uZUlmTm90U2hhcmVkIiwiY2FjaGVkIiwic2hhcmVkIiwiRGF0YXNldENvbnRyb2xsZXIiLCJfY2FjaGVkRGF0YU9wdHMiLCJnZXRNZXRhIiwiX3R5cGUiLCJfZGF0YSIsIl9vYmplY3REYXRhIiwiX3NoYXJlZE9wdGlvbnMiLCJfZHJhd1N0YXJ0IiwiX2RyYXdDb3VudCIsImVuYWJsZU9wdGlvblNoYXJpbmciLCJzdXBwb3J0c0RlY2ltYXRpb24iLCIkY29udGV4dCIsIl9zeW5jTGlzdCIsImRhdGFzZXRFbGVtZW50VHlwZSIsImRhdGFFbGVtZW50VHlwZSIsImluaXRpYWxpemUiLCJsaW5rU2NhbGVzIiwiX3N0YWNrZWQiLCJhZGRFbGVtZW50cyIsImlzUGx1Z2luRW5hYmxlZCIsInVwZGF0ZUluZGV4IiwiZGF0YXNldCIsImdldERhdGFzZXQiLCJjaG9vc2VJZCIsInhpZCIsInhBeGlzSUQiLCJ5aWQiLCJ5QXhpc0lEIiwicmlkIiwickF4aXNJRCIsImlpZCIsImlBeGlzSUQiLCJ2aWQiLCJ2QXhpc0lEIiwiZ2V0U2NhbGVGb3JJZCIsInJTY2FsZSIsImdldERhdGFzZXRNZXRhIiwic2NhbGVJRCIsIl9nZXRPdGhlclNjYWxlIiwicmVzZXQiLCJfZGVzdHJveSIsIl9kYXRhQ2hlY2siLCJhZGF0YSIsImNvbnZlcnRPYmplY3REYXRhVG9BcnJheSIsImlzRXh0ZW5zaWJsZSIsIm9iamVjdCIsImJ1aWxkT3JVcGRhdGVFbGVtZW50cyIsInJlc2V0TmV3RWxlbWVudHMiLCJzdGFja0NoYW5nZWQiLCJvbGRTdGFja2VkIiwiX3Jlc3luY0VsZW1lbnRzIiwic2NvcGVLZXlzIiwiZGF0YXNldFNjb3BlS2V5cyIsImdldE9wdGlvblNjb3BlcyIsImNyZWF0ZVJlc29sdmVyIiwic29ydGVkIiwicGFyc2VBcnJheURhdGEiLCJwYXJzZU9iamVjdERhdGEiLCJwYXJzZVByaW1pdGl2ZURhdGEiLCJpc05vdEluT3JkZXJDb21wYXJlZFRvUHJldiIsImxhYmVscyIsImdldExhYmVscyIsInNpbmdsZVNjYWxlIiwieEF4aXNLZXkiLCJ5QXhpc0tleSIsImdldFBhcnNlZCIsImdldERhdGFFbGVtZW50IiwidXBkYXRlUmFuZ2VGcm9tUGFyc2VkIiwicGFyc2VkVmFsdWUiLCJOYU4iLCJnZXRNaW5NYXgiLCJjYW5TdGFjayIsIm90aGVyU2NhbGUiLCJoaWRkZW4iLCJjcmVhdGVTdGFjayIsIk5FR0FUSVZFX0lORklOSVRZIiwib3RoZXJNaW4iLCJvdGhlck1heCIsIl9za2lwIiwiZ2V0QWxsUGFyc2VkVmFsdWVzIiwiZ2V0TWF4T3ZlcmZsb3ciLCJnZXRMYWJlbEFuZFZhbHVlIiwibGFiZWwiLCJnZXRMYWJlbEZvclZhbHVlIiwiX2NsaXAiLCJkaXNhYmxlZCIsInRvQ2xpcCIsImRlZmF1bHRDbGlwIiwiY2hhcnRBcmVhIiwicmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9ucyIsInJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMiLCJkYXRhSW5kZXgiLCJyYXciLCJjcmVhdGVEYXRhQ29udGV4dCIsImNyZWF0ZURhdGFzZXRDb250ZXh0IiwiX3Jlc29sdmVFbGVtZW50T3B0aW9ucyIsImVsZW1lbnRUeXBlIiwic2hhcmluZyIsImRhdGFzZXRFbGVtZW50U2NvcGVLZXlzIiwicmVzb2x2ZU5hbWVkT3B0aW9ucyIsImZyZWV6ZSIsIl9yZXNvbHZlQW5pbWF0aW9ucyIsInRyYW5zaXRpb24iLCJkYXRhc2V0QW5pbWF0aW9uU2NvcGVLZXlzIiwiZ2V0U2hhcmVkT3B0aW9ucyIsImluY2x1ZGVPcHRpb25zIiwic2hhcmVkT3B0aW9ucyIsIl9hbmltYXRpb25zRGlzYWJsZWQiLCJfZ2V0U2hhcmVkT3B0aW9ucyIsImZpcnN0T3B0cyIsInByZXZpb3VzbHlTaGFyZWRPcHRpb25zIiwidXBkYXRlU2hhcmVkT3B0aW9ucyIsInVwZGF0ZUVsZW1lbnQiLCJfc2V0U3R5bGUiLCJyZW1vdmVIb3ZlclN0eWxlIiwic2V0SG92ZXJTdHlsZSIsIl9yZW1vdmVEYXRhc2V0SG92ZXJTdHlsZSIsIl9zZXREYXRhc2V0SG92ZXJTdHlsZSIsImFyZzEiLCJhcmcyIiwibnVtTWV0YSIsIm51bURhdGEiLCJfaW5zZXJ0RWxlbWVudHMiLCJfcmVtb3ZlRWxlbWVudHMiLCJtb3ZlIiwidXBkYXRlRWxlbWVudHMiLCJyZW1vdmVkIiwiX3N5bmMiLCJfZGF0YUNoYW5nZXMiLCJfb25EYXRhUHVzaCIsIl9vbkRhdGFQb3AiLCJfb25EYXRhU2hpZnQiLCJfb25EYXRhU3BsaWNlIiwibmV3Q291bnQiLCJfb25EYXRhVW5zaGlmdCIsImNvbXB1dGVNaW5TYW1wbGVTaXplIiwiX2NhY2hlIiwiJGJhciIsInZpc2libGVNZXRhcyIsInNvcnQiLCJnZXRBbGxTY2FsZVZhbHVlcyIsImN1cnIiLCJfbGVuZ3RoIiwidXBkYXRlTWluQW5kUHJldiIsImdldFBpeGVsRm9yVGljayIsInBhcnNlVmFsdWUiLCJlbnRyeSIsInN0YXJ0VmFsdWUiLCJlbmRWYWx1ZSIsImJhclN0YXJ0IiwiYmFyRW5kIiwiX2N1c3RvbSIsInBhcnNlRmxvYXRCYXIiLCJwYXJzZUFycmF5T3JQcmltaXRpdmUiLCJpc0Zsb2F0QmFyIiwiY3VzdG9tIiwic2V0Qm9yZGVyU2tpcHBlZCIsImVkZ2UiLCJib3JkZXJTa2lwcGVkIiwiaG9yaXpvbnRhbCIsImJvcmRlclByb3BzIiwiZW5hYmxlQm9yZGVyUmFkaXVzIiwicGFyc2VFZGdlIiwib3JpZyIsInYyIiwic3RhcnRFbmQiLCJzZXRJbmZsYXRlQW1vdW50IiwiaW5mbGF0ZUFtb3VudCIsIkRvdWdobnV0Q29udHJvbGxlciIsImFuaW1hdGVSb3RhdGUiLCJhbmltYXRlU2NhbGUiLCJjdXRvdXQiLCJjaXJjdW1mZXJlbmNlIiwic3BhY2luZyIsImFzcGVjdFJhdGlvIiwibGVnZW5kIiwiZ2VuZXJhdGVMYWJlbHMiLCJmb250Q29sb3IiLCJnZXREYXRhVmlzaWJpbGl0eSIsImxlZ2VuZEl0ZW0iLCJ0b2dnbGVEYXRhVmlzaWJpbGl0eSIsInN1cGVyIiwiaW5uZXJSYWRpdXMiLCJvdXRlclJhZGl1cyIsIl9nZXRSb3RhdGlvbiIsIl9nZXRDaXJjdW1mZXJlbmNlIiwiX2dldFJvdGF0aW9uRXh0ZW50cyIsImlzRGF0YXNldFZpc2libGUiLCJhcmNzIiwiZ2V0TWF4Qm9yZGVyV2lkdGgiLCJnZXRNYXhPZmZzZXQiLCJtYXhTaXplIiwiY2hhcnRXZWlnaHQiLCJfZ2V0UmluZ1dlaWdodCIsInJhdGlvWCIsInJhdGlvWSIsInN0YXJ0QW5nbGUiLCJlbmRBbmdsZSIsInN0YXJ0WCIsInN0YXJ0WSIsImVuZFgiLCJlbmRZIiwiY2FsY01heCIsImNhbGNNaW4iLCJtYXhYIiwibWF4WSIsIm1pblgiLCJtaW5ZIiwiZ2V0UmF0aW9BbmRPZmZzZXQiLCJtYXhIZWlnaHQiLCJtYXhSYWRpdXMiLCJyYWRpdXNMZW5ndGgiLCJfZ2V0VmlzaWJsZURhdGFzZXRXZWlnaHRUb3RhbCIsInRvdGFsIiwiY2FsY3VsYXRlVG90YWwiLCJfZ2V0UmluZ1dlaWdodE9mZnNldCIsIl9jaXJjdW1mZXJlbmNlIiwiY2FsY3VsYXRlQ2lyY3VtZmVyZW5jZSIsImFuaW1hdGlvbk9wdHMiLCJjZW50ZXJYIiwiY2VudGVyWSIsIm1ldGFEYXRhIiwiYm9yZGVyQWxpZ24iLCJob3ZlckJvcmRlcldpZHRoIiwiaG92ZXJPZmZzZXQiLCJyaW5nV2VpZ2h0T2Zmc2V0IiwiUG9sYXJBcmVhQ29udHJvbGxlciIsImFuZ2xlTGluZXMiLCJjaXJjdWxhciIsInBvaW50TGFiZWxzIiwiYmluZCIsIl91cGRhdGVSYWRpdXMiLCJtaW5TaXplIiwiY3V0b3V0UGVyY2VudGFnZSIsImdldFZpc2libGVEYXRhc2V0Q291bnQiLCJ4Q2VudGVyIiwieUNlbnRlciIsImRhdGFzZXRTdGFydEFuZ2xlIiwiZ2V0SW5kZXhBbmdsZSIsImRlZmF1bHRBbmdsZSIsImNvdW50VmlzaWJsZUVsZW1lbnRzIiwiX2NvbXB1dGVBbmdsZSIsImdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlIiwiY29udHJvbGxlcnMiLCJfX3Byb3RvX18iLCJCYXJDb250cm9sbGVyIiwiY2F0ZWdvcnlQZXJjZW50YWdlIiwiYmFyUGVyY2VudGFnZSIsImdyb3VwZWQiLCJfaW5kZXhfIiwiX3ZhbHVlXyIsImlBeGlzS2V5IiwidkF4aXNLZXkiLCJiYXJzIiwiZ2V0QmFzZVBpeGVsIiwiaXNIb3Jpem9udGFsIiwicnVsZXIiLCJfZ2V0UnVsZXIiLCJ2cGl4ZWxzIiwiX2NhbGN1bGF0ZUJhclZhbHVlUGl4ZWxzIiwiaXBpeGVscyIsIl9jYWxjdWxhdGVCYXJJbmRleFBpeGVscyIsImNlbnRlciIsIl9nZXRTdGFja3MiLCJza2lwTnVsbCIsIl9nZXRTdGFja0NvdW50IiwiX2dldFN0YWNrSW5kZXgiLCJwaXhlbHMiLCJiYXJUaGlja25lc3MiLCJfc3RhcnRQaXhlbCIsIl9lbmRQaXhlbCIsInN0YWNrQ291bnQiLCJiYXNlVmFsdWUiLCJtaW5CYXJMZW5ndGgiLCJhY3R1YWxCYXNlIiwiZmxvYXRpbmciLCJiYXJTaWduIiwic3RhcnRQaXhlbCIsImdldFBpeGVsRm9yRGVjaW1hbCIsImVuZFBpeGVsIiwiZ2V0VmFsdWVGb3JQaXhlbCIsImhhbGZHcmlkIiwiZ2V0TGluZVdpZHRoRm9yVmFsdWUiLCJtYXhCYXJUaGlja25lc3MiLCJJbmZpbml0eSIsInBlcmNlbnQiLCJjaHVuayIsImNvbXB1dGVGbGV4Q2F0ZWdvcnlUcmFpdHMiLCJ0aGlja25lc3MiLCJjb21wdXRlRml0Q2F0ZWdvcnlUcmFpdHMiLCJzdGFja0luZGV4IiwicmVjdHMiLCJCdWJibGVDb250cm9sbGVyIiwiTGluZUNvbnRyb2xsZXIiLCJfZGF0YXNldCIsIl9kYXRhc2V0SW5kZXgiLCJfZGVjaW1hdGVkIiwiYW5pbWF0ZWQiLCJtYXhHYXBMZW5ndGgiLCJkaXJlY3RVcGRhdGUiLCJwb2ludHNDb3VudCIsInByZXZQYXJzZWQiLCJudWxsRGF0YSIsImxhc3RQb2ludCIsInVwZGF0ZUNvbnRyb2xQb2ludHMiLCJQaWVDb250cm9sbGVyIiwiUmFkYXJDb250cm9sbGVyIiwiX2Z1bGxMb29wIiwicG9pbnRQb3NpdGlvbiIsImdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZSIsIlNjYXR0ZXJDb250cm9sbGVyIiwicmVnaXN0cnkiLCJnZXRFbGVtZW50IiwiRGF0ZUFkYXB0ZXJCYXNlIiwibWVtYmVycyIsImluaXQiLCJmb3JtYXRzIiwiZGlmZiIsInN0YXJ0T2YiLCJlbmRPZiIsImFkYXB0ZXJzIiwiYmluYXJ5U2VhcmNoIiwibWV0YXNldCIsImxvb2t1cE1ldGhvZCIsIl9yZXZlcnNlUGl4ZWxzIiwiZ2V0UmFuZ2UiLCJldmFsdWF0ZUludGVyYWN0aW9uSXRlbXMiLCJwb3NpdGlvbiIsImhhbmRsZXIiLCJnZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzIiwiZ2V0SW50ZXJzZWN0SXRlbXMiLCJ1c2VGaW5hbFBvc2l0aW9uIiwiaXNQb2ludEluQXJlYSIsImluUmFuZ2UiLCJnZXROZWFyZXN0SXRlbXMiLCJkaXN0YW5jZU1ldHJpYyIsInVzZVgiLCJ1c2VZIiwiZGVsdGFYIiwiZGVsdGFZIiwiZ2V0RGlzdGFuY2VNZXRyaWNGb3JBeGlzIiwibWluRGlzdGFuY2UiLCJnZXRDZW50ZXJQb2ludCIsImdldE5lYXJlc3RDYXJ0ZXNpYW5JdGVtcyIsImdldFByb3BzIiwiZ2V0TmVhcmVzdFJhZGlhbEl0ZW1zIiwiZ2V0QXhpc0l0ZW1zIiwicmFuZ2VNZXRob2QiLCJpbnRlcnNlY3RzSXRlbSIsIkludGVyYWN0aW9uIiwibW9kZXMiLCJuZWFyZXN0IiwiU1RBVElDX1BPU0lUSU9OUyIsImZpbHRlckJ5UG9zaXRpb24iLCJmaWx0ZXJEeW5hbWljUG9zaXRpb25CeUF4aXMiLCJzb3J0QnlXZWlnaHQiLCJnZXRDb21iaW5lZE1heCIsIm1heFBhZGRpbmciLCJ1cGRhdGVNYXhQYWRkaW5nIiwiYm94UGFkZGluZyIsInVwZGF0ZURpbXMiLCJwYXJhbXMiLCJsYXlvdXQiLCJnZXRQYWRkaW5nIiwibmV3V2lkdGgiLCJvdXRlcldpZHRoIiwibmV3SGVpZ2h0Iiwib3V0ZXJIZWlnaHQiLCJ3aWR0aENoYW5nZWQiLCJoZWlnaHRDaGFuZ2VkIiwic2FtZSIsIm90aGVyIiwiZ2V0TWFyZ2lucyIsIm1hcmdpbkZvclBvc2l0aW9ucyIsImZpdEJveGVzIiwiYm94ZXMiLCJyZWZpdEJveGVzIiwicmVmaXQiLCJmdWxsU2l6ZSIsInNldEJveERpbXMiLCJwbGFjZUJveGVzIiwidXNlclBhZGRpbmciLCJwbGFjZWQiLCJzdGFja1dlaWdodCIsImxheW91dHMiLCJhZGRCb3giLCJfbGF5ZXJzIiwieiIsInJlbW92ZUJveCIsImxheW91dEl0ZW0iLCJtaW5QYWRkaW5nIiwiYXZhaWxhYmxlV2lkdGgiLCJhdmFpbGFibGVIZWlnaHQiLCJsYXlvdXRCb3hlcyIsIndyYXBCb3hlcyIsIndyYXAiLCJjZW50ZXJIb3Jpem9udGFsIiwiY2VudGVyVmVydGljYWwiLCJsZWZ0QW5kVG9wIiwicmlnaHRBbmRCb3R0b20iLCJ2ZXJ0aWNhbCIsImJ1aWxkTGF5b3V0Qm94ZXMiLCJ2ZXJ0aWNhbEJveGVzIiwiaG9yaXpvbnRhbEJveGVzIiwiYmVmb3JlTGF5b3V0IiwidmlzaWJsZVZlcnRpY2FsQm94Q291bnQiLCJ2Qm94TWF4V2lkdGgiLCJoQm94TWF4SGVpZ2h0IiwiYnVpbGRTdGFja3MiLCJzZXRMYXlvdXREaW1zIiwidXBkYXRlUG9zIiwiY2hhbmdlIiwiaGFuZGxlTWF4UGFkZGluZyIsIkJhc2VQbGF0Zm9ybSIsImFjcXVpcmVDb250ZXh0IiwicmVsZWFzZUNvbnRleHQiLCJnZXRNYXhpbXVtU2l6ZSIsImlzQXR0YWNoZWQiLCJ1cGRhdGVDb25maWciLCJCYXNpY1BsYXRmb3JtIiwiRVhQQU5ET19LRVkiLCJFVkVOVF9UWVBFUyIsInRvdWNoc3RhcnQiLCJ0b3VjaG1vdmUiLCJ0b3VjaGVuZCIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJkb3duIiwicG9pbnRlcm1vdmUiLCJwb2ludGVydXAiLCJwb2ludGVybGVhdmUiLCJwb2ludGVyb3V0IiwiaXNOdWxsT3JFbXB0eSIsImV2ZW50TGlzdGVuZXJPcHRpb25zIiwicmVtb3ZlTGlzdGVuZXIiLCJub2RlTGlzdENvbnRhaW5zIiwibm9kZUxpc3QiLCJjb250YWlucyIsImNyZWF0ZUF0dGFjaE9ic2VydmVyIiwib2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwiZW50cmllcyIsInRyaWdnZXIiLCJhZGRlZE5vZGVzIiwicmVtb3ZlZE5vZGVzIiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJjcmVhdGVEZXRhY2hPYnNlcnZlciIsImRycExpc3RlbmluZ0NoYXJ0cyIsIm9sZERldmljZVBpeGVsUmF0aW8iLCJvbldpbmRvd1Jlc2l6ZSIsImRwciIsImNyZWF0ZVJlc2l6ZU9ic2VydmVyIiwiY2xpZW50V2lkdGgiLCJSZXNpemVPYnNlcnZlciIsImNvbnRlbnRSZWN0IiwibGlzdGVuRGV2aWNlUGl4ZWxSYXRpb0NoYW5nZXMiLCJyZWxlYXNlT2JzZXJ2ZXIiLCJkaXNjb25uZWN0IiwidW5saXN0ZW5EZXZpY2VQaXhlbFJhdGlvQ2hhbmdlcyIsImNyZWF0ZVByb3h5QW5kTGlzdGVuIiwibmF0aXZlIiwiZnJvbU5hdGl2ZUV2ZW50IiwiYWRkTGlzdGVuZXIiLCJEb21QbGF0Zm9ybSIsInJlbmRlckhlaWdodCIsImdldEF0dHJpYnV0ZSIsInJlbmRlcldpZHRoIiwiZGlzcGxheVdpZHRoIiwiZGlzcGxheUhlaWdodCIsImluaXRDYW52YXMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJwcm94aWVzIiwiJHByb3hpZXMiLCJhdHRhY2giLCJkZXRhY2giLCJiYldpZHRoIiwiYmJIZWlnaHQiLCJtYXJnaW5zIiwiY29udGFpbmVyU2l6ZSIsImNvbnRhaW5lclN0eWxlIiwiY29udGFpbmVyQm9yZGVyIiwiY29udGFpbmVyUGFkZGluZyIsImNsaWVudEhlaWdodCIsImdldENvbnRhaW5lclNpemUiLCJpc0Nvbm5lY3RlZCIsIkVsZW1lbnQiLCJ0b29sdGlwUG9zaXRpb24iLCJoYXNWYWx1ZSIsImZpbmFsIiwibmV3VGlja3MiLCJtYWpvclN0YXJ0IiwibWFqb3JFbmQiLCJjZWlsIiwib2Zmc2V0RnJvbUVkZ2UiLCJnZXRUaWNrc0xpbWl0IiwidGlja3NMZW5ndGgiLCJtYXhUaWNrc0xpbWl0Iiwic2FtcGxlIiwibnVtSXRlbXMiLCJpbmNyZW1lbnQiLCJnZXRQaXhlbEZvckdyaWRMaW5lIiwib2Zmc2V0R3JpZExpbmVzIiwidmFsaWRJbmRleCIsImxpbmVWYWx1ZSIsImdldFRpY2tNYXJrTGVuZ3RoIiwiZ2V0VGl0bGVIZWlnaHQiLCJ0aXRsZUFsaWduIiwicmV2ZXJzZUFsaWduIiwiU2NhbGUiLCJfbWFyZ2lucyIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJsYWJlbFJvdGF0aW9uIiwiX3JhbmdlIiwiX2dyaWRMaW5lSXRlbXMiLCJfbGFiZWxJdGVtcyIsIl9sYWJlbFNpemVzIiwiX21heExlbmd0aCIsIl9sb25nZXN0VGV4dENhY2hlIiwiX3VzZXJNYXgiLCJfdXNlck1pbiIsIl9zdWdnZXN0ZWRNYXgiLCJfc3VnZ2VzdGVkTWluIiwiX3RpY2tzTGVuZ3RoIiwiX2JvcmRlclZhbHVlIiwiX2RhdGFMaW1pdHNDYWNoZWQiLCJzdWdnZXN0ZWRNaW4iLCJzdWdnZXN0ZWRNYXgiLCJtZXRhcyIsImdldFRpY2tzIiwieExhYmVscyIsInlMYWJlbHMiLCJnZXRMYWJlbEl0ZW1zIiwiX2NvbXB1dGVMYWJlbEl0ZW1zIiwiYmVmb3JlVXBkYXRlIiwidGlja09wdHMiLCJzYW1wbGVTaXplIiwiYmVmb3JlU2V0RGltZW5zaW9ucyIsInNldERpbWVuc2lvbnMiLCJhZnRlclNldERpbWVuc2lvbnMiLCJiZWZvcmVEYXRhTGltaXRzIiwiZGV0ZXJtaW5lRGF0YUxpbWl0cyIsImFmdGVyRGF0YUxpbWl0cyIsIm1pbm1heCIsImtlZXBaZXJvIiwiX2FkZEdyYWNlIiwiYmVmb3JlQnVpbGRUaWNrcyIsImJ1aWxkVGlja3MiLCJhZnRlckJ1aWxkVGlja3MiLCJzYW1wbGluZ0VuYWJsZWQiLCJfY29udmVydFRpY2tzVG9MYWJlbHMiLCJiZWZvcmVDYWxjdWxhdGVMYWJlbFJvdGF0aW9uIiwiY2FsY3VsYXRlTGFiZWxSb3RhdGlvbiIsImFmdGVyQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbiIsImRldGVybWluZWRNYXhUaWNrcyIsIl90aWNrU2l6ZSIsIm1heFNjYWxlIiwibWF4Q2hhcnQiLCJkZXRlcm1pbmVNYXhUaWNrcyIsInRpY2tzTGltaXQiLCJtYWpvckluZGljZXMiLCJlbmFibGVkIiwiZ2V0TWFqb3JJbmRpY2VzIiwibnVtTWFqb3JJbmRpY2VzIiwiZmlyc3QiLCJza2lwTWFqb3JzIiwiZXZlbk1ham9yU3BhY2luZyIsImdldEV2ZW5TcGFjaW5nIiwiZmFjdG9ycyIsIl9mYWN0b3JpemUiLCJjYWxjdWxhdGVTcGFjaW5nIiwiYXZnTWFqb3JTcGFjaW5nIiwiYWZ0ZXJBdXRvU2tpcCIsImJlZm9yZUZpdCIsImZpdCIsImFmdGVyRml0IiwiYWZ0ZXJVcGRhdGUiLCJyZXZlcnNlUGl4ZWxzIiwiX2FsaWduVG9QaXhlbHMiLCJhbGlnblRvUGl4ZWxzIiwiX2NhbGxIb29rcyIsIm5vdGlmeVBsdWdpbnMiLCJiZWZvcmVUaWNrVG9MYWJlbENvbnZlcnNpb24iLCJnZW5lcmF0ZVRpY2tMYWJlbHMiLCJhZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbiIsIm51bVRpY2tzIiwibWF4TGFiZWxEaWFnb25hbCIsIl9pc1Zpc2libGUiLCJsYWJlbFNpemVzIiwiX2dldExhYmVsU2l6ZXMiLCJtYXhMYWJlbFdpZHRoIiwid2lkZXN0IiwibWF4TGFiZWxIZWlnaHQiLCJoaWdoZXN0IiwiYXNpbiIsInRpdGxlT3B0cyIsImdyaWRPcHRzIiwidGl0bGVIZWlnaHQiLCJ0aWNrUGFkZGluZyIsImFuZ2xlUmFkaWFucyIsImxhYmVsSGVpZ2h0IiwibGFiZWxXaWR0aCIsIl9jYWxjdWxhdGVQYWRkaW5nIiwiX2hhbmRsZU1hcmdpbnMiLCJpc1JvdGF0ZWQiLCJsYWJlbHNCZWxvd1RpY2tzIiwib2Zmc2V0TGVmdCIsIm9mZnNldFJpZ2h0IiwiaXNGdWxsU2l6ZSIsIl9jb21wdXRlTGFiZWxTaXplcyIsImNhY2hlcyIsIndpZHRocyIsImhlaWdodHMiLCJ0aWNrRm9udCIsImZvbnRTdHJpbmciLCJuZXN0ZWRMYWJlbCIsIndpZGVzdExhYmVsU2l6ZSIsImhpZ2hlc3RMYWJlbFNpemUiLCJfcmVzb2x2ZVRpY2tGb250T3B0aW9ucyIsInZhbHVlQXQiLCJpZHgiLCJkZWNpbWFsIiwiZ2V0RGVjaW1hbEZvclBpeGVsIiwiZ2V0QmFzZVZhbHVlIiwiY3JlYXRlVGlja0NvbnRleHQiLCJvcHRpb25UaWNrcyIsInJvdCIsIl9jb21wdXRlR3JpZExpbmVJdGVtcyIsInRsIiwiYm9yZGVyT3B0cyIsImF4aXNXaWR0aCIsImF4aXNIYWxmV2lkdGgiLCJhbGlnbkJvcmRlclZhbHVlIiwiYm9yZGVyVmFsdWUiLCJhbGlnbmVkTGluZVZhbHVlIiwidHgxIiwidHkxIiwidHgyIiwidHkyIiwieDEiLCJ5MSIsIngyIiwieTIiLCJwb3NpdGlvbkF4aXNJRCIsImxpbWl0Iiwic3RlcCIsIm9wdHNBdEluZGV4Iiwib3B0c0F0SW5kZXhCb3JkZXIiLCJsaW5lQ29sb3IiLCJ0aWNrQm9yZGVyRGFzaCIsInRpY2tCb3JkZXJEYXNoT2Zmc2V0IiwidGlja0FuZFBhZGRpbmciLCJoVGlja0FuZFBhZGRpbmciLCJsaW5lQ291bnQiLCJ0ZXh0T2Zmc2V0IiwiX2dldFhBeGlzTGFiZWxBbGlnbm1lbnQiLCJfZ2V0WUF4aXNMYWJlbEFsaWdubWVudCIsImhhbGZDb3VudCIsInRpY2tUZXh0QWxpZ24iLCJsYWJlbFBhZGRpbmciLCJfY29tcHV0ZUxhYmVsQXJlYSIsImRyYXdCYWNrZ3JvdW5kIiwiZmluZEluZGV4IiwiZHJhd0dyaWQiLCJkcmF3TGluZSIsInNldExpbmVEYXNoIiwibGluZURhc2hPZmZzZXQiLCJkcmF3Qm9yZGVyIiwibGFzdExpbmVXaWR0aCIsImRyYXdMYWJlbHMiLCJyZW5kZXJUZXh0T3B0aW9ucyIsImRyYXdUaXRsZSIsInRpdGxlWCIsInRpdGxlWSIsInRpdGxlQXJncyIsInR6IiwiZ3oiLCJieiIsImF4aXNJRCIsIl9tYXhEaWdpdHMiLCJmb250U2l6ZSIsIlR5cGVkUmVnaXN0cnkiLCJpc0ZvclR5cGUiLCJpc1Byb3RvdHlwZU9mIiwicmVnaXN0ZXIiLCJwYXJlbnRTY29wZSIsImlzSUNoYXJ0Q29tcG9uZW50IiwiaXRlbURlZmF1bHRzIiwiZGVmYXVsdFJvdXRlcyIsInJvdXRlcyIsInByb3BlcnR5UGFydHMiLCJzb3VyY2VOYW1lIiwic291cmNlU2NvcGUiLCJyb3V0ZURlZmF1bHRzIiwicmVnaXN0ZXJEZWZhdWx0cyIsInVucmVnaXN0ZXIiLCJSZWdpc3RyeSIsIl90eXBlZFJlZ2lzdHJpZXMiLCJfZWFjaCIsImFkZENvbnRyb2xsZXJzIiwiYWRkUGx1Z2lucyIsImFkZFNjYWxlcyIsImdldENvbnRyb2xsZXIiLCJfZ2V0IiwiZ2V0UGx1Z2luIiwiZ2V0U2NhbGUiLCJyZW1vdmVDb250cm9sbGVycyIsInJlbW92ZUVsZW1lbnRzIiwicmVtb3ZlUGx1Z2lucyIsInJlbW92ZVNjYWxlcyIsInR5cGVkUmVnaXN0cnkiLCJhcmciLCJyZWciLCJfZ2V0UmVnaXN0cnlGb3JUeXBlIiwiX2V4ZWMiLCJpdGVtUmVnIiwiY29tcG9uZW50IiwiY2FtZWxNZXRob2QiLCJQbHVnaW5TZXJ2aWNlIiwiX2luaXQiLCJub3RpZnkiLCJob29rIiwiX2NyZWF0ZURlc2NyaXB0b3JzIiwiZGVzY3JpcHRvciIsInBsdWdpbiIsImNhbmNlbGFibGUiLCJpbnZhbGlkYXRlIiwiX29sZENhY2hlIiwiX25vdGlmeVN0YXRlQ2hhbmdlcyIsImxvY2FsSWRzIiwiYWxsUGx1Z2lucyIsImdldE9wdHMiLCJwbHVnaW5PcHRzIiwiY3JlYXRlRGVzY3JpcHRvcnMiLCJwcmV2aW91c0Rlc2NyaXB0b3JzIiwic29tZSIsInBsdWdpblNjb3BlS2V5cyIsImdldEluZGV4QXhpcyIsImRhdGFzZXREZWZhdWx0cyIsImlkTWF0Y2hlc0F4aXMiLCJkZXRlcm1pbmVBeGlzIiwic2NhbGVPcHRpb25zIiwiZ2V0QXhpc0Zyb21EYXRhc2V0IiwiaW5pdE9wdGlvbnMiLCJjaGFydERlZmF1bHRzIiwiY29uZmlnU2NhbGVzIiwiY2hhcnRJbmRleEF4aXMiLCJzY2FsZUNvbmYiLCJlcnJvciIsImJvdW5kRHMiLCJyZXRyaWV2ZUF4aXNGcm9tRGF0YXNldHMiLCJkZWZhdWx0SWQiLCJnZXREZWZhdWx0U2NhbGVJREZyb21BeGlzIiwiZGVmYXVsdFNjYWxlT3B0aW9ucyIsImRlZmF1bHRJRCIsImdldEF4aXNGcm9tRGVmYXVsdFNjYWxlSUQiLCJtZXJnZVNjYWxlQ29uZmlnIiwiaW5pdERhdGEiLCJrZXlDYWNoZSIsImtleXNDYWNoZWQiLCJjYWNoZWRLZXlzIiwiZ2VuZXJhdGUiLCJhZGRJZkZvdW5kIiwiQ29uZmlnIiwiX2NvbmZpZyIsImluaXRDb25maWciLCJfc2NvcGVDYWNoZSIsIl9yZXNvbHZlckNhY2hlIiwiY2xlYXJDYWNoZSIsImNsZWFyIiwiZGF0YXNldFR5cGUiLCJhZGRpdGlvbmFsT3B0aW9uU2NvcGVzIiwiX2NhY2hlZFNjb3BlcyIsIm1haW5TY29wZSIsInJlc2V0Q2FjaGUiLCJrZXlMaXN0cyIsImNoYXJ0T3B0aW9uU2NvcGVzIiwic3ViUHJlZml4ZXMiLCJnZXRSZXNvbHZlciIsImhhc0Z1bmN0aW9uIiwibmVlZENvbnRleHQiLCJyZXNvbHZlckNhY2hlIiwiS05PV05fUE9TSVRJT05TIiwicG9zaXRpb25Jc0hvcml6b250YWwiLCJjb21wYXJlMkxldmVsIiwibDEiLCJsMiIsIm9uQW5pbWF0aW9uc0NvbXBsZXRlIiwib25Db21wbGV0ZSIsIm9uQW5pbWF0aW9uUHJvZ3Jlc3MiLCJvblByb2dyZXNzIiwiZ2V0Q2FudmFzIiwiZ2V0RWxlbWVudEJ5SWQiLCJpbnN0YW5jZXMiLCJnZXRDaGFydCIsIm1vdmVOdW1lcmljS2V5cyIsImludEtleSIsIkNoYXJ0IiwiaW52YWxpZGF0ZVBsdWdpbnMiLCJ1c2VyQ29uZmlnIiwiaW5pdGlhbENhbnZhcyIsImV4aXN0aW5nQ2hhcnQiLCJPZmZzY3JlZW5DYW52YXMiLCJfZGV0ZWN0UGxhdGZvcm0iLCJfb3B0aW9ucyIsIl9hc3BlY3RSYXRpbyIsIl9tZXRhc2V0cyIsIl9sYXN0RXZlbnQiLCJfbGlzdGVuZXJzIiwiX3Jlc3BvbnNpdmVMaXN0ZW5lcnMiLCJfc29ydGVkTWV0YXNldHMiLCJfcGx1Z2lucyIsIl9oaWRkZW5JbmRpY2VzIiwiYXR0YWNoZWQiLCJfZG9SZXNpemUiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImRlYm91bmNlIiwicmVzaXplRGVsYXkiLCJfaW5pdGlhbGl6ZSIsIl9yZXNpemVCZWZvcmVEcmF3IiwiX3Jlc2l6ZSIsIm5ld1NpemUiLCJuZXdSYXRpbyIsIm9uUmVzaXplIiwiZW5zdXJlU2NhbGVzSGF2ZUlEcyIsImF4aXNPcHRpb25zIiwiYnVpbGRPclVwZGF0ZVNjYWxlcyIsInNjYWxlT3B0cyIsInVwZGF0ZWQiLCJpc1JhZGlhbCIsImRwb3NpdGlvbiIsImR0eXBlIiwic2NhbGVUeXBlIiwiaGFzVXBkYXRlZCIsIl91cGRhdGVNZXRhc2V0cyIsIl9kZXN0cm95RGF0YXNldE1ldGEiLCJfcmVtb3ZlVW5yZWZlcmVuY2VkTWV0YXNldHMiLCJidWlsZE9yVXBkYXRlQ29udHJvbGxlcnMiLCJuZXdDb250cm9sbGVycyIsIm9yZGVyIiwiQ29udHJvbGxlckNsYXNzIiwiX3Jlc2V0RWxlbWVudHMiLCJhbmltc0Rpc2FibGVkIiwiX3VwZGF0ZVNjYWxlcyIsIl9jaGVja0V2ZW50QmluZGluZ3MiLCJfdXBkYXRlSGlkZGVuSW5kaWNlcyIsIl9taW5QYWRkaW5nIiwiX3VwZGF0ZUxheW91dCIsIl91cGRhdGVEYXRhc2V0cyIsIl9ldmVudEhhbmRsZXIiLCJfdXBkYXRlSG92ZXJTdHlsZXMiLCJleGlzdGluZ0V2ZW50cyIsIm5ld0V2ZW50cyIsInVuYmluZEV2ZW50cyIsImNoYW5nZXMiLCJfZ2V0VW5pZm9ybURhdGFDaGFuZ2VzIiwiZGF0YXNldENvdW50IiwibWFrZVNldCIsImNoYW5nZVNldCIsIm5vQXJlYSIsIl9pZHgiLCJfdXBkYXRlRGF0YXNldCIsImxheWVycyIsIl9kcmF3RGF0YXNldHMiLCJfZHJhd0RhdGFzZXQiLCJ1c2VDbGlwIiwiZ2V0RGF0YXNldEFyZWEiLCJnZXRFbGVtZW50c0F0RXZlbnRGb3JNb2RlIiwic2V0RGF0YXNldFZpc2liaWxpdHkiLCJfdXBkYXRlVmlzaWJpbGl0eSIsIl9zdG9wIiwiZGVzdHJveSIsInRvQmFzZTY0SW1hZ2UiLCJ0b0RhdGFVUkwiLCJiaW5kVXNlckV2ZW50cyIsImJpbmRSZXNwb25zaXZlRXZlbnRzIiwiX2FkZCIsIl9yZW1vdmUiLCJkZXRhY2hlZCIsInVwZGF0ZUhvdmVyU3R5bGUiLCJnZXRBY3RpdmVFbGVtZW50cyIsInNldEFjdGl2ZUVsZW1lbnRzIiwiYWN0aXZlRWxlbWVudHMiLCJsYXN0QWN0aXZlIiwicGx1Z2luSWQiLCJyZXBsYXkiLCJob3Zlck9wdGlvbnMiLCJkZWFjdGl2YXRlZCIsImFjdGl2YXRlZCIsImluQ2hhcnRBcmVhIiwiZXZlbnRGaWx0ZXIiLCJfaGFuZGxlRXZlbnQiLCJfZ2V0QWN0aXZlRWxlbWVudHMiLCJpc0NsaWNrIiwiX2lzQ2xpY2tFdmVudCIsImxhc3RFdmVudCIsImRldGVybWluZUxhc3RFdmVudCIsInJUaGV0YVRvWFkiLCJ0aGV0YSIsInBhdGhBcmMiLCJwaXhlbE1hcmdpbiIsImlubmVyUiIsInNwYWNpbmdPZmZzZXQiLCJhdk5vZ1NwYWNpbmdSYWRpdXMiLCJhbmdsZU9mZnNldCIsIm91dGVyU3RhcnQiLCJvdXRlckVuZCIsImlubmVyU3RhcnQiLCJpbm5lckVuZCIsImFuZ2xlRGVsdGEiLCJib3JkZXJSYWRpdXMiLCJoYWxmVGhpY2tuZXNzIiwiaW5uZXJMaW1pdCIsImNvbXB1dGVPdXRlckxpbWl0Iiwib3V0ZXJBcmNMaW1pdCIsInBhcnNlQm9yZGVyUmFkaXVzJDEiLCJvdXRlclN0YXJ0QWRqdXN0ZWRSYWRpdXMiLCJvdXRlckVuZEFkanVzdGVkUmFkaXVzIiwib3V0ZXJTdGFydEFkanVzdGVkQW5nbGUiLCJvdXRlckVuZEFkanVzdGVkQW5nbGUiLCJpbm5lclN0YXJ0QWRqdXN0ZWRSYWRpdXMiLCJpbm5lckVuZEFkanVzdGVkUmFkaXVzIiwiaW5uZXJTdGFydEFkanVzdGVkQW5nbGUiLCJpbm5lckVuZEFkanVzdGVkQW5nbGUiLCJvdXRlck1pZEFkanVzdGVkQW5nbGUiLCJwQ2VudGVyIiwicDQiLCJpbm5lck1pZEFkanVzdGVkQW5nbGUiLCJwOCIsIm91dGVyU3RhcnRYIiwib3V0ZXJTdGFydFkiLCJvdXRlckVuZFgiLCJvdXRlckVuZFkiLCJzZXRTdHlsZSIsImxpbmVDYXAiLCJsaW5lSm9pbiIsInBhdGhWYXJzIiwicGFyYW1zU3RhcnQiLCJwYXJhbXNFbmQiLCJzZWdtZW50U3RhcnQiLCJzZWdtZW50RW5kIiwib3V0c2lkZSIsInBhdGhTZWdtZW50IiwibGluZU1ldGhvZCIsInN0ZXBwZWQiLCJnZXRMaW5lTWV0aG9kIiwiZmFzdFBhdGhTZWdtZW50IiwicHJldlgiLCJsYXN0WSIsImF2Z1giLCJjb3VudFgiLCJwb2ludEluZGV4IiwiZHJhd1giLCJ0cnVuY1giLCJfZ2V0U2VnbWVudE1ldGhvZCIsInVzZVBhdGgyRCIsIlBhdGgyRCIsIkxpbmVFbGVtZW50IiwiX3BhdGgiLCJfcG9pbnRzIiwiX3NlZ21lbnRzIiwiX3BvaW50c1VwZGF0ZWQiLCJzZWdtZW50T3B0aW9ucyIsImZpbmRTdGFydEFuZEVuZCIsImNoYXJ0Q29udGV4dCIsImJhc2VTdHlsZSIsImFkZFN0eWxlIiwic3QiLCJkaXIiLCJwMCIsInAwRGF0YUluZGV4IiwicDFEYXRhSW5kZXgiLCJkb1NwbGl0QnlTdHlsZXMiLCJzcGxpdEJ5U3R5bGVzIiwic29saWRTZWdtZW50cyIsIl9jb21wdXRlU2VnbWVudHMiLCJfaW50ZXJwb2xhdGUiLCJfZ2V0SW50ZXJwb2xhdGlvbk1ldGhvZCIsImludGVycG9sYXRlZCIsInNlZ21lbnRNZXRob2QiLCJwYXRoIiwic3Ryb2tlUGF0aFdpdGhDYWNoZSIsInN0cm9rZVBhdGhEaXJlY3QiLCJpblJhbmdlJDEiLCJoaXRSYWRpdXMiLCJnZXRCYXJCb3VuZHMiLCJiYXIiLCJoYWxmIiwic2tpcE9yTGltaXQiLCJza2lwWCIsInNraXBZIiwiYWRkTm9ybWFsUmVjdFBhdGgiLCJpbmZsYXRlUmVjdCIsInJlZlJlY3QiLCJBcmNFbGVtZW50IiwiZnVsbENpcmNsZXMiLCJjaGFydFgiLCJjaGFydFkiLCJyQWRqdXN0IiwiYmV0d2VlbkFuZ2xlcyIsIndpdGhpblJhZGl1cyIsImhhbGZBbmdsZSIsImhhbGZSYWRpdXMiLCJyYWRpdXNPZmZzZXQiLCJkcmF3QXJjIiwiaW5uZXIiLCJhbmdsZU1hcmdpbiIsImNsaXBBcmMiLCJCYXJFbGVtZW50Iiwib3V0ZXIiLCJtYXhXIiwibWF4SCIsInBhcnNlQm9yZGVyV2lkdGgiLCJtYXhSIiwiZW5hYmxlQm9yZGVyIiwicGFyc2VCb3JkZXJSYWRpdXMiLCJib3VuZGluZ1JlY3RzIiwiYWRkUmVjdFBhdGgiLCJtb3VzZVgiLCJtb3VzZVkiLCJpblhSYW5nZSIsImluWVJhbmdlIiwiUG9pbnRFbGVtZW50IiwiaG92ZXJSYWRpdXMiLCJCT1JERVJfQ09MT1JTIiwiQkFDS0dST1VORF9DT0xPUlMiLCJnZXRCb3JkZXJDb2xvciIsImdldEJhY2tncm91bmRDb2xvciIsImNvbnRhaW5zQ29sb3JzRGVmaW5pdGlvbnMiLCJwbHVnaW5fY29sb3JzIiwiZm9yY2VPdmVycmlkZSIsIl9hcmdzIiwiY2hhcnRPcHRpb25zIiwiY29sb3JpemVyIiwiY29sb3JpemVEb3VnaG51dERhdGFzZXQiLCJjb2xvcml6ZVBvbGFyQXJlYURhdGFzZXQiLCJjb2xvcml6ZURlZmF1bHREYXRhc2V0IiwiZ2V0Q29sb3JpemVyIiwiY2xlYW5EZWNpbWF0ZWREYXRhc2V0IiwiY2xlYW5EZWNpbWF0ZWREYXRhIiwicGx1Z2luX2RlY2ltYXRpb24iLCJhbGdvcml0aG0iLCJiZWZvcmVFbGVtZW50c1VwZGF0ZSIsInhBeGlzIiwiZGVjaW1hdGVkIiwiZ2V0U3RhcnRBbmRDb3VudE9mVmlzaWJsZVBvaW50c1NpbXBsaWZpZWQiLCJ0aHJlc2hvbGQiLCJzYW1wbGVzIiwiYnVja2V0V2lkdGgiLCJzYW1wbGVkSW5kZXgiLCJlbmRJbmRleCIsIm1heEFyZWFQb2ludCIsIm1heEFyZWEiLCJuZXh0QSIsImF2Z1kiLCJhdmdSYW5nZVN0YXJ0IiwiYXZnUmFuZ2VFbmQiLCJhdmdSYW5nZUxlbmd0aCIsInJhbmdlT2ZmcyIsInJhbmdlVG8iLCJwb2ludEF4IiwicG9pbnRBeSIsImx0dGJEZWNpbWF0aW9uIiwibWluSW5kZXgiLCJtYXhJbmRleCIsInN0YXJ0SW5kZXgiLCJ4TWluIiwiZHgiLCJsYXN0SW5kZXgiLCJpbnRlcm1lZGlhdGVJbmRleDEiLCJpbnRlcm1lZGlhdGVJbmRleDIiLCJtaW5NYXhEZWNpbWF0aW9uIiwiX2dldEJvdW5kcyIsIl9maW5kU2VnbWVudEVuZCIsIl9nZXRFZGdlIiwiX2NyZWF0ZUJvdW5kYXJ5TGluZSIsImJvdW5kYXJ5IiwibGluZVBvaW50cyIsIl9wb2ludHNGcm9tU2VnbWVudHMiLCJfc2hvdWxkQXBwbHlGaWxsIiwiX3Jlc29sdmVUYXJnZXQiLCJwcm9wYWdhdGUiLCJ2aXNpdGVkIiwiX2RlY29kZUZpbGwiLCJmaWxsT3B0aW9uIiwicGFyc2VGaWxsT3B0aW9uIiwiZmlyc3RDaCIsImRlY29kZVRhcmdldEluZGV4IiwiYWRkUG9pbnRzQmVsb3ciLCJzb3VyY2VQb2ludCIsImxpbmVzQmVsb3ciLCJwb3N0cG9uZWQiLCJmaW5kUG9pbnQiLCJ1bnNoaWZ0IiwicG9pbnRWYWx1ZSIsImZpcnN0VmFsdWUiLCJsYXN0VmFsdWUiLCJzaW1wbGVBcmMiLCJfZHJhd2ZpbGwiLCJnZXRMaW5lQnlJbmRleCIsInNvdXJjZVBvaW50cyIsImJlbG93IiwiZ2V0TGluZXNCZWxvdyIsIl9idWlsZFN0YWNrTGluZSIsIl9nZXRUYXJnZXRWYWx1ZSIsImNvbXB1dGVDaXJjdWxhckJvdW5kYXJ5IiwiX2dldFRhcmdldFBpeGVsIiwiY29tcHV0ZUxpbmVhckJvdW5kYXJ5IiwiY29tcHV0ZUJvdW5kYXJ5IiwibGluZU9wdHMiLCJhYm92ZSIsImNsaXBWZXJ0aWNhbCIsImRvRmlsbCIsImNsaXBZIiwibGluZUxvb3AiLCJ0cG9pbnRzIiwidGFyZ2V0U2VnbWVudHMiLCJ0Z3QiLCJzdWJCb3VuZHMiLCJmaWxsU291cmNlcyIsImZpbGxTb3VyY2UiLCJub3RTaGFwZSIsImNsaXBCb3VuZHMiLCJpbnRlcnBvbGF0ZWRMaW5lVG8iLCJ0YXJnZXRMb29wIiwiaW50ZXJwb2xhdGVkUG9pbnQiLCJhZnRlckRhdGFzZXRzVXBkYXRlIiwiJGZpbGxlciIsImJlZm9yZURyYXciLCJkcmF3VGltZSIsImJlZm9yZURhdGFzZXRzRHJhdyIsImJlZm9yZURhdGFzZXREcmF3IiwiZ2V0Qm94U2l6ZSIsImxhYmVsT3B0cyIsImJveEhlaWdodCIsImJveFdpZHRoIiwidXNlUG9pbnRTdHlsZSIsInBvaW50U3R5bGVXaWR0aCIsIml0ZW1IZWlnaHQiLCJMZWdlbmQiLCJfYWRkZWQiLCJsZWdlbmRIaXRCb3hlcyIsIl9ob3ZlcmVkSXRlbSIsImRvdWdobnV0TW9kZSIsImxlZ2VuZEl0ZW1zIiwiY29sdW1uU2l6ZXMiLCJsaW5lV2lkdGhzIiwiYnVpbGRMYWJlbHMiLCJsYWJlbEZvbnQiLCJfY29tcHV0ZVRpdGxlSGVpZ2h0IiwiX2ZpdFJvd3MiLCJfZml0Q29scyIsImhpdGJveGVzIiwidG90YWxIZWlnaHQiLCJyb3ciLCJfaXRlbUhlaWdodCIsImhlaWdodExpbWl0IiwidG90YWxXaWR0aCIsImN1cnJlbnRDb2xXaWR0aCIsImN1cnJlbnRDb2xIZWlnaHQiLCJjb2wiLCJsZWdlbmRJdGVtVGV4dCIsImNhbGN1bGF0ZUl0ZW1XaWR0aCIsImZvbnRMaW5lSGVpZ2h0IiwiY2FsY3VsYXRlTGVnZW5kSXRlbUhlaWdodCIsImNhbGN1bGF0ZUl0ZW1IZWlnaHQiLCJjYWxjdWxhdGVJdGVtU2l6ZSIsImFkanVzdEhpdEJveGVzIiwicnRsSGVscGVyIiwiaGl0Ym94IiwiX2RyYXciLCJkZWZhdWx0Q29sb3IiLCJoYWxmRm9udFNpemUiLCJjdXJzb3IiLCJ0ZXh0RGlyZWN0aW9uIiwibGluZURhc2giLCJkcmF3T3B0aW9ucyIsIlNRUlQyIiwieUJveFRvcCIsInhCb3hMZWZ0IiwiZHJhd0xlZ2VuZEJveCIsIl90ZXh0WCIsInRpdGxlRm9udCIsInRpdGxlUGFkZGluZyIsInRvcFBhZGRpbmdQbHVzSGFsZkZvbnRTaXplIiwiX2dldExlZ2VuZEl0ZW1BdCIsImhpdEJveCIsImxoIiwiaGFuZGxlRXZlbnQiLCJvbkxlYXZlIiwiaXNMaXN0ZW5lZCIsImhvdmVyZWRJdGVtIiwic2FtZUl0ZW0iLCJwbHVnaW5fbGVnZW5kIiwiX2VsZW1lbnQiLCJhZnRlckV2ZW50IiwiY2kiLCJ1c2VCb3JkZXJSYWRpdXMiLCJUaXRsZSIsIl9wYWRkaW5nIiwidGV4dFNpemUiLCJfZHJhd0FyZ3MiLCJmb250T3B0cyIsInBsdWdpbl90aXRsZSIsInRpdGxlQmxvY2siLCJjcmVhdGVUaXRsZSIsIldlYWtNYXAiLCJwbHVnaW5fc3VidGl0bGUiLCJwb3NpdGlvbmVycyIsImF2ZXJhZ2UiLCJldmVudFBvc2l0aW9uIiwibmVhcmVzdEVsZW1lbnQiLCJ0cCIsInB1c2hPckNvbmNhdCIsInRvUHVzaCIsInNwbGl0TmV3bGluZXMiLCJTdHJpbmciLCJjcmVhdGVUb29sdGlwSXRlbSIsImZvcm1hdHRlZFZhbHVlIiwiZ2V0VG9vbHRpcFNpemUiLCJ0b29sdGlwIiwiYm9keSIsImZvb3RlciIsImJvZHlGb250IiwiZm9vdGVyRm9udCIsInRpdGxlTGluZUNvdW50IiwiZm9vdGVyTGluZUNvdW50IiwiYm9keUxpbmVJdGVtQ291bnQiLCJjb21iaW5lZEJvZHlMZW5ndGgiLCJib2R5SXRlbSIsImJlZm9yZSIsImFmdGVyIiwiYmVmb3JlQm9keSIsImFmdGVyQm9keSIsInRpdGxlU3BhY2luZyIsInRpdGxlTWFyZ2luQm90dG9tIiwiZGlzcGxheUNvbG9ycyIsImJvZHlTcGFjaW5nIiwiZm9vdGVyTWFyZ2luVG9wIiwiZm9vdGVyU3BhY2luZyIsIndpZHRoUGFkZGluZyIsIm1heExpbmVXaWR0aCIsImRldGVybWluZVhBbGlnbiIsInlBbGlnbiIsImNoYXJ0V2lkdGgiLCJ4QWxpZ24iLCJjYXJldCIsImNhcmV0U2l6ZSIsImNhcmV0UGFkZGluZyIsImRvZXNOb3RGaXRXaXRoQWxpZ24iLCJkZXRlcm1pbmVBbGlnbm1lbnQiLCJkZXRlcm1pbmVZQWxpZ24iLCJnZXRCYWNrZ3JvdW5kUG9pbnQiLCJhbGlnbm1lbnQiLCJwYWRkaW5nQW5kU2l6ZSIsImFsaWduWCIsImFsaWduWSIsImdldEFsaWduZWRYIiwiZ2V0QmVmb3JlQWZ0ZXJCb2R5TGluZXMiLCJvdmVycmlkZUNhbGxiYWNrcyIsImRlZmF1bHRDYWxsYmFja3MiLCJiZWZvcmVUaXRsZSIsInRvb2x0aXBJdGVtcyIsImxhYmVsQ291bnQiLCJhZnRlclRpdGxlIiwiYmVmb3JlTGFiZWwiLCJ0b29sdGlwSXRlbSIsImxhYmVsQ29sb3IiLCJsYWJlbFRleHRDb2xvciIsImJvZHlDb2xvciIsImxhYmVsUG9pbnRTdHlsZSIsImFmdGVyTGFiZWwiLCJiZWZvcmVGb290ZXIiLCJhZnRlckZvb3RlciIsImludm9rZUNhbGxiYWNrV2l0aEZhbGxiYWNrIiwiVG9vbHRpcCIsIm9wYWNpdHkiLCJfZXZlbnRQb3NpdGlvbiIsIl9zaXplIiwiX2NhY2hlZEFuaW1hdGlvbnMiLCJfdG9vbHRpcEl0ZW1zIiwiZGF0YVBvaW50cyIsImNhcmV0WCIsImNhcmV0WSIsImxhYmVsQ29sb3JzIiwibGFiZWxQb2ludFN0eWxlcyIsImxhYmVsVGV4dENvbG9ycyIsImdldFRpdGxlIiwiZ2V0QmVmb3JlQm9keSIsImdldEJvZHkiLCJib2R5SXRlbXMiLCJzY29wZWQiLCJnZXRBZnRlckJvZHkiLCJnZXRGb290ZXIiLCJfY3JlYXRlSXRlbXMiLCJpdGVtU29ydCIsInBvc2l0aW9uQW5kU2l6ZSIsImJhY2tncm91bmRQb2ludCIsImV4dGVybmFsIiwiZHJhd0NhcmV0IiwidG9vbHRpcFBvaW50IiwiY2FyZXRQb3NpdGlvbiIsImdldENhcmV0UG9zaXRpb24iLCJ4MyIsInkzIiwicHRYIiwicHRZIiwidGl0bGVDb2xvciIsIl9kcmF3Q29sb3JCb3giLCJjb2xvclgiLCJydGxDb2xvclgiLCJ5T2ZmU2V0IiwiY29sb3JZIiwibXVsdGlLZXlCYWNrZ3JvdW5kIiwib3V0ZXJYIiwiaW5uZXJYIiwic3Ryb2tlUmVjdCIsImRyYXdCb2R5IiwiYm9keUFsaWduIiwiYm9keUxpbmVIZWlnaHQiLCJ4TGluZVBhZGRpbmciLCJmaWxsTGluZU9mVGV4dCIsImJvZHlBbGlnbkZvckNhbGN1bGF0aW9uIiwidGV4dENvbG9yIiwiZHJhd0Zvb3RlciIsImZvb3RlckFsaWduIiwiZm9vdGVyQ29sb3IiLCJ0b29sdGlwU2l6ZSIsInF1YWRyYXRpY0N1cnZlVG8iLCJfdXBkYXRlQW5pbWF0aW9uVGFyZ2V0IiwiYW5pbVgiLCJhbmltWSIsIl93aWxsUmVuZGVyIiwiaGFzVG9vbHRpcENvbnRlbnQiLCJnbG9iYWxBbHBoYSIsInBvc2l0aW9uQ2hhbmdlZCIsIl9wb3NpdGlvbkNoYW5nZWQiLCJfaWdub3JlUmVwbGF5RXZlbnRzIiwicGx1Z2luX3Rvb2x0aXAiLCJhZnRlckluaXQiLCJhZnRlckRyYXciLCJDb2xvcnMiLCJEZWNpbWF0aW9uIiwiRmlsbGVyIiwiU3ViVGl0bGUiLCJfZ2V0TGFiZWxGb3JWYWx1ZSIsInJlbGF0aXZlTGFiZWxTaXplIiwibWluU3BhY2luZyIsIkxpbmVhclNjYWxlQmFzZSIsIl9zdGFydFZhbHVlIiwiX2VuZFZhbHVlIiwiX3ZhbHVlUmFuZ2UiLCJoYW5kbGVUaWNrUmFuZ2VPcHRpb25zIiwic2V0TWluIiwic2V0TWF4IiwibWluU2lnbiIsIm1heFNpZ24iLCJnZXRUaWNrTGltaXQiLCJtYXhUaWNrcyIsInN0ZXBTaXplIiwiY29tcHV0ZVRpY2tMaW1pdCIsImdlbmVyYXRpb25PcHRpb25zIiwiZGF0YVJhbmdlIiwicHJlY2lzaW9uIiwibWF4RGlnaXRzIiwiaW5jbHVkZUJvdW5kcyIsInVuaXQiLCJtYXhTcGFjZXMiLCJybWluIiwicm1heCIsImNvdW50RGVmaW5lZCIsIm5pY2VNaW4iLCJuaWNlTWF4IiwibnVtU3BhY2VzIiwicm91bmRlZCIsImFsbW9zdFdob2xlIiwiZGVjaW1hbFBsYWNlcyIsImdlbmVyYXRlVGlja3MkMSIsIkxpbmVhclNjYWxlIiwibG9nMTBGbG9vciIsImNoYW5nZUV4cG9uZW50IiwiaXNNYWpvciIsInRpY2tWYWwiLCJzdGVwcyIsInJhbmdlRXhwIiwicmFuZ2VTdGVwIiwiTG9nYXJpdGhtaWNTY2FsZSIsIl96ZXJvIiwibWluRXhwIiwiZXhwIiwic3RhcnRFeHAiLCJsYXN0VGljayIsImdlbmVyYXRlVGlja3MiLCJnZXRUaWNrQmFja2Ryb3BIZWlnaHQiLCJtZWFzdXJlTGFiZWxTaXplIiwiZGV0ZXJtaW5lTGltaXRzIiwidXBkYXRlTGltaXRzIiwibGltaXRzIiwiaExpbWl0cyIsInZMaW1pdHMiLCJjcmVhdGVQb2ludExhYmVsSXRlbSIsIml0ZW1PcHRzIiwib3V0ZXJEaXN0YW5jZSIsImRyYXdpbmdBcmVhIiwiZXh0cmEiLCJhZGRpdGlvbmFsQW5nbGUiLCJwb2ludExhYmVsUG9zaXRpb24iLCJnZXRQb2ludFBvc2l0aW9uIiwieUZvckFuZ2xlIiwiZ2V0VGV4dEFsaWduRm9yQW5nbGUiLCJpc05vdE92ZXJsYXBwZWQiLCJkcmF3UG9pbnRMYWJlbEJveCIsImJhY2tkcm9wTGVmdCIsImJhY2tkcm9wVG9wIiwiYmFja2Ryb3BXaWR0aCIsImJhY2tkcm9wSGVpZ2h0IiwicGF0aFJhZGl1c0xpbmUiLCJSYWRpYWxMaW5lYXJTY2FsZSIsImFuaW1hdGUiLCJjZW50ZXJQb2ludExhYmVscyIsIl9wb2ludExhYmVscyIsIl9wb2ludExhYmVsSXRlbXMiLCJ2YWx1ZUNvdW50IiwicG9pbnRMYWJlbE9wdHMiLCJnZXRQb2ludExhYmVsQ29udGV4dCIsInBsRm9udCIsInNldENlbnRlclBvaW50IiwiYnVpbGRQb2ludExhYmVsSXRlbXMiLCJmaXRXaXRoUG9pbnRMYWJlbHMiLCJsZWZ0TW92ZW1lbnQiLCJyaWdodE1vdmVtZW50IiwidG9wTW92ZW1lbnQiLCJib3R0b21Nb3ZlbWVudCIsInNjYWxpbmdGYWN0b3IiLCJnZXRWYWx1ZUZvckRpc3RhbmNlRnJvbUNlbnRlciIsInNjYWxlZERpc3RhbmNlIiwicG9pbnRMYWJlbCIsImNyZWF0ZVBvaW50TGFiZWxDb250ZXh0IiwiZGlzdGFuY2VGcm9tQ2VudGVyIiwiZ2V0QmFzZVBvc2l0aW9uIiwiZ2V0UG9pbnRMYWJlbFBvc2l0aW9uIiwiZHJhd1BvaW50TGFiZWxzIiwiZ3JpZExpbmVPcHRzIiwiZHJhd1JhZGl1c0xpbmUiLCJJTlRFUlZBTFMiLCJtaWxsaXNlY29uZCIsImNvbW1vbiIsInNlY29uZCIsIm1pbnV0ZSIsImhvdXIiLCJ3ZWVrIiwicXVhcnRlciIsInllYXIiLCJVTklUUyIsInNvcnRlciIsImFkYXB0ZXIiLCJfYWRhcHRlciIsInBhcnNlciIsImlzb1dlZWtkYXkiLCJfcGFyc2VPcHRzIiwiZGV0ZXJtaW5lVW5pdEZvckF1dG9UaWNrcyIsIm1pblVuaXQiLCJjYXBhY2l0eSIsImludGVydmFsIiwiTUFYX1NBRkVfSU5URUdFUiIsImFkZFRpY2siLCJ0aW1lIiwidGltZXN0YW1wcyIsInRpY2tzRnJvbVRpbWVzdGFtcHMiLCJtYWpvclVuaXQiLCJzZXRNYWpvclRpY2tzIiwiVGltZVNjYWxlIiwiZGlzcGxheUZvcm1hdHMiLCJfdW5pdCIsIl9tYWpvclVuaXQiLCJfb2Zmc2V0cyIsIl9ub3JtYWxpemVkIiwibm9ybWFsaXplZCIsIl9hcHBseUJvdW5kcyIsIl9nZXRMYWJlbEJvdW5kcyIsImdldExhYmVsVGltZXN0YW1wcyIsInRpbWVPcHRzIiwiX2dlbmVyYXRlIiwiX2ZpbHRlckJldHdlZW4iLCJfZ2V0TGFiZWxDYXBhY2l0eSIsImRldGVybWluZVVuaXRGb3JGb3JtYXR0aW5nIiwiZGV0ZXJtaW5lTWFqb3JVbml0IiwiaW5pdE9mZnNldHMiLCJvZmZzZXRBZnRlckF1dG9za2lwIiwiZ2V0RGVjaW1hbEZvclZhbHVlIiwiaGFzV2Vla2RheSIsImdldERhdGFUaW1lc3RhbXBzIiwidG9vbHRpcEZvcm1hdCIsImRhdGV0aW1lIiwiZm10IiwiX3RpY2tGb3JtYXRGdW5jdGlvbiIsIm1pbm9yRm9ybWF0IiwibWFqb3JGb3JtYXQiLCJvZmZzZXRzIiwiX2dldExhYmVsU2l6ZSIsInRpY2tzT3B0cyIsInRpY2tMYWJlbFdpZHRoIiwiY29zUm90YXRpb24iLCJzaW5Sb3RhdGlvbiIsInRpY2tGb250U2l6ZSIsImV4YW1wbGVUaW1lIiwiZXhhbXBsZUxhYmVsIiwicHJldlNvdXJjZSIsIm5leHRTb3VyY2UiLCJwcmV2VGFyZ2V0IiwibmV4dFRhcmdldCIsInNwYW4iLCJDYXRlZ29yeVNjYWxlIiwiX2FkZGVkTGFiZWxzIiwiYWRkZWQiLCJhZGRlZExhYmVscyIsImFkZElmU3RyaW5nIiwibGFzdEluZGV4T2YiLCJmaW5kT3JBZGRMYWJlbCIsIlRpbWVTZXJpZXNTY2FsZSIsIl90YWJsZSIsIl9taW5Qb3MiLCJfdGFibGVSYW5nZSIsIl9nZXRUaW1lc3RhbXBzRm9yVGFibGUiLCJidWlsZExvb2t1cFRhYmxlIiwicmVnaXN0ZXJhYmxlcyIsInN0YXRlIiwiZmlsdGVyRWxlbWVudHMiLCJuZWFyZXN0SXRlbXMiLCJldmVuUG9pbnQiLCJnZXRQb2ludEJ5QXhpcyIsImdldE5lYXJlc3RJdGVtIiwiZ2V0RWxlbWVudHMiLCJ2aXNpYmxlRWxlbWVudHMiLCJpblJhbmdlQnlBeGlzIiwiaXNPbGRlclBhcnQiLCJhY3QiLCJyZXEiLCJjbGFtcCIsImNsYW1wQWxsIiwiaW5Cb3hSYW5nZSIsImhCb3JkZXJXaWR0aCIsImluUmFuZ2VYIiwiaW5SYW5nZVkiLCJnZXRFbGVtZW50Q2VudGVyUG9pbnQiLCJpc1BlcmNlbnRTdHJpbmciLCJ0b1BlcmNlbnQiLCJ0b1Bvc2l0aXZlUGVyY2VudCIsImJveEFwcGVyaW5nIiwiZGVmYXVsdEluaXRBbmltYXRpb24iLCJwb2x5Z29uIiwiZ2V0U2l6ZSIsInBvc2l0aXZlUGVyY2VudCIsInRvUG9zaXRpb24iLCJpc0JvdW5kVG9Qb2ludCIsInhWYWx1ZSIsInlWYWx1ZSIsImluaXRBbmltYXRpb25Qcm9wZXJ0aWVzIiwiaW5pdEFuaW0iLCJhcHBseURlZmF1bHQiLCJleGVjQ2FsbGJhY2siLCJsb2FkSG9va3MiLCJob29rcyIsImhvb2tzQ29udGFpbmVyIiwid2lkdGhDYWNoZSIsImZvbnRzS2V5IiwiZm9udHMiLCJpc0ltYWdlT3JDYW52YXMiLCJzZXRCb3JkZXJTdHlsZSIsInNldFNoYWRvd1N0eWxlIiwic2hhZG93Q29sb3IiLCJiYWNrZ3JvdW5kU2hhZG93Q29sb3IiLCJzaGFkb3dCbHVyIiwic2hhZG93T2Zmc2V0WCIsInNoYWRvd09mZnNldFkiLCJvcHRGb250IiwibWFwS2V5IiwiY2FsY3VsYXRlTGFiZWxTaXplIiwiZHJhd0JveCIsImJvcmRlclNoYWRvd0NvbG9yIiwibGltaXRlZExpbmVTY2FsZSIsInhTY2FsZUlEIiwic3RhcnRQcm9wIiwiZW5kUHJvcCIsInlTY2FsZUlEIiwic2NhbGVWYWx1ZSIsInJldHJpZXZlU2NhbGVJRCIsImF4ZXMiLCJnZXREaW1lbnNpb25CeVNjYWxlIiwiZ2V0Q2hhcnRQb2ludCIsInJlc29sdmVCb3hQcm9wZXJ0aWVzIiwieERpbSIsImdldENoYXJ0RGltZW5zaW9uQnlTY2FsZSIsInhNYXgiLCJ5RGltIiwieU1pbiIsInlNYXgiLCJyZXNvbHZlUG9pbnRQcm9wZXJ0aWVzIiwiYWRqdXN0Q2VudGVyWCIsInhBZGp1c3QiLCJhZGp1c3RDZW50ZXJZIiwieUFkanVzdCIsImdldENoYXJ0Q2lyY2xlIiwicmVzb2x2ZUJveEFuZExhYmVsUHJvcGVydGllcyIsImluaXRQcm9wZXJ0aWVzIiwib3B0aW9uU2NvcGUiLCJyZXNvbHZlTGFiZWxFbGVtZW50UHJvcGVydGllcyQxIiwiY2FsY3VsYXRlUG9zaXRpb24kMSIsImJveE9wdHMiLCJwYWRTdGFydCIsInBhZEVuZCIsImFkanVzdCIsImNhbGxvdXQiLCJsYWJlbFNpemUiLCJjYWxjdWxhdGVYIiwiY2FsY3VsYXRlWSIsInJvdGF0ZWQiLCJjeCIsImN5IiwibW92ZUhvb2tzIiwiZXZlbnRIb29rcyIsImRpc3BhdGNoTW92ZUV2ZW50cyIsImNoZWNrRWxlbWVudHMiLCJkaXNwYXRjaEV2ZW50IiwiZWxlbWVudEhvb2tzIiwiaW52b2tlSG9vayIsImhvb2tlZCIsImNoYW5nZVNjYWxlTGltaXQiLCJzdWdnZXN0ZWRMaW1pdCIsInNjYWxlTGltaXREZWZpbmVkIiwidmVyaWZ5U2NhbGVJRHMiLCJhbm5vdGF0aW9uIiwidmVyaWZ5UHJvcGVydGllcyIsIkJveEFubm90YXRpb24iLCJyZXNvbHZlRWxlbWVudFByb3BlcnRpZXMiLCJhZGp1c3RTY2FsZVJhbmdlIiwiTGFiZWxBbm5vdGF0aW9uIiwiX3Zpc2libGUiLCJwb2ludFgiLCJwb2ludFkiLCJjYWxsb3V0UG9zaXRpb24iLCJ4UG9pbnRzIiwieVBvaW50cyIsInJvdGF0ZWRQb2ludCIsInJlc29sdmVDYWxsb3V0QXV0b1Bvc2l0aW9uIiwicmVzb2x2ZUNhbGxvdXRQb3NpdGlvbiIsImlzUG9pbnRJblJhbmdlIiwic2VwYXJhdG9yU3RhcnQiLCJzZXBhcmF0b3JFbmQiLCJnZXRDYWxsb3V0U2VwYXJhdG9yQWRqdXN0IiwiZ2V0Q2FsbG91dFNlcGFyYXRvckNvb3JkIiwic2lkZVN0YXJ0Iiwic2lkZUVuZCIsInNpZGUiLCJnZXRDYWxsb3V0U2lkZUFkanVzdCIsImdldENhbGxvdXRTaWRlQ29vcmQiLCJkcmF3Q2FsbG91dCIsImVsZW1lbnRWYWx1ZSIsImdldE9wYWNpdHkiLCJvcHRDb2xvciIsImNhbGN1bGF0ZVRleHRBbGlnbm1lbnQiLCJtaXRlckxpbWl0Iiwic2V0VGV4dFN0cm9rZVN0eWxlIiwibGhzIiwiYXBwbHlMYWJlbERlY29yYXRpb24iLCJhcHBseUxhYmVsQ29udGVudCIsImRyYXdMYWJlbCIsImdldExhYmVsU2l6ZSIsImJveFNpemUiLCJjYWxjdWxhdGVQb3NpdGlvbiIsIm1lYXN1cmVSZWN0IiwicG9pbnRJbkxpbmUiLCJpbnRlcnBvbGF0ZVgiLCJpbnRlcnBvbGF0ZVkiLCJzcXIiLCJjb29yZEluQ3VydmUiLCJjcCIsInBvaW50SW5DdXJ2ZSIsImNvb3JkQW5nbGVJbkN1cnZlIiwiYW5nbGVJbkN1cnZlIiwiTGluZUFubm90YXRpb24iLCJteCIsIm15IiwiaXNQb2ludEluU3Ryb2tlIiwiaXNPbkxhYmVsIiwiZHkiLCJsZW5TcSIsInh4IiwieXkiLCJpbnRlcnNlY3RzIiwicmFuZ2VMaW1pdCIsImluQXhpc1JhbmdlIiwiY3VydmUiLCJzdGFydE9wdHMiLCJlbmRPcHRzIiwic3RhcnRBZGp1c3QiLCJlbmRBZGp1c3QiLCJnZXRBcnJvd0hlYWRzIiwicHMiLCJwZSIsImRyYXdBcnJvd0hlYWRPbkN1cnZlIiwiZHJhd0N1cnZlIiwiZHJhd0Fycm93SGVhZCIsInJlc29sdmVGdWxsTGluZVByb3BlcnRpZXMiLCJzY2FsZUlkIiwiZGltIiwicmVzb2x2ZUxpbWl0ZWRMaW5lUHJvcGVydGllcyIsInJlc29sdmVMaW5lUHJvcGVydGllcyIsImlzTGluZUluQXJlYSIsImxpbWl0UG9pbnRUb0FyZWEiLCJsaW1pdExpbmVUb0FyZWEiLCJjb250cm9sUG9pbnQiLCJnZXRDb250cm9sUG9pbnQiLCJsYWJlbFByb3BlcnRpZXMiLCJzaXplcyIsImNhbGN1bGF0ZUF1dG9Sb3RhdGlvbiIsInJvdGF0ZWRTaXplIiwic3BhY2UiLCJzcGFjZUFyb3VuZCIsImNhbGN1bGF0ZVRBZGp1c3QiLCJjYWxjdWxhdGVUIiwieENvb3JkaW5hdGVTaXplcyIsInlDb29yZGluYXRlU2l6ZXMiLCJhZGp1c3RMYWJlbENvb3JkaW5hdGUiLCJjYWxjdWxhdGVMYWJlbFBvc2l0aW9uIiwicmVzb2x2ZUxhYmVsRWxlbWVudFByb3BlcnRpZXMiLCJhcnJvd0hlYWRzRGVmYXVsdHMiLCJsaW5lU2l6ZSIsImxpbmVXIiwibGluZUgiLCJjb29yZGluYXRlIiwiaGFsZlNpemUiLCJhcnJvd1N0YXJ0T3B0cyIsImFycm93SGVhZHMiLCJhcnJvd0VuZE9wdHMiLCJnZXRMaW5lQWRqdXN0IiwiYXJyb3dPcHRzIiwiYXJyb3dPZmZzZXRYIiwiRWxsaXBzZUFubm90YXRpb24iLCJ4UmFkaXVzIiwieVJhZGl1cyIsImNvc0FuZ2xlIiwic2luQW5nbGUiLCJwb2ludEluRWxsaXBzZSIsIlBvaW50QW5ub3RhdGlvbiIsImluUG9pbnRSYW5nZSIsIm5vdFJhZGl1cyIsImRyYXdQb2ludFN0eWxlIiwiUG9seWdvbkFubm90YXRpb24iLCJpc0luc2lkZSIsImJZIiwiYlgiLCJwb2ludElzSW5Qb2x5Z29uIiwiYXhpc1BvaW50cyIsInNpZGVzIiwiZWxQcm9wcyIsImJ1aWxkUG9pbnRFbGVtZW50IiwiaGFsZkJvcmRlciIsImFubm90YXRpb25UeXBlcyIsImRpcmVjdFVwZGF0ZXIiLCJob29rcyQxIiwib3B0RGVmcyIsInJlc29sdmVPYmoiLCJyZXNvbHZlVHlwZSIsInRvU2tpcCIsInVwZGF0ZVN1YkVsZW1lbnRzIiwibWFpbkVsZW1lbnQiLCJzdWJFbGVtZW50cyIsInN1YkVsZW1lbnQiLCJnZXRPckNyZWF0ZUVsZW1lbnQiLCJzdWJSZXNvbHZlciIsInJlc29sdmVBbm5vdGF0aW9uT3B0aW9ucyIsImVsZW1lbnRDbGFzcyIsImRlZnMiLCJjaGFydFN0YXRlcyIsInZlcnNpb24iLCJiZWZvcmVSZWdpc3RlciIsInBrZyIsInZlciIsInN0cmljdCIsInJlcXVpcmVWZXJzaW9uIiwiYWZ0ZXJSZWdpc3RlciIsImFmdGVyVW5yZWdpc3RlciIsImJlZm9yZUluaXQiLCJhbm5vdGF0aW9ucyIsImxpc3RlbmVkIiwibW92ZUxpc3RlbmVkIiwiaG92ZXJlZCIsImFubm90YXRpb25PcHRpb25zIiwidmVyaWZ5U2NhbGVPcHRpb25zIiwic2NhbGVJRE9wdGlvbiIsImdldFNjYWxlTGltaXRzIiwiX2dldEVsZW1lbnRzIiwiY2xpY2siLCJ1cGRhdGVMaXN0ZW5lcnMiLCJhbmltT3B0cyIsInJlc29sdmVBbmltYXRpb25zIiwicmVzeW5jRWxlbWVudHMiLCJ1cGRhdGVIb29rcyIsImFmdGVyRGF0YXNldHNEcmF3IiwiYmVmb3JlRXZlbnQiLCJoYW5kbGVNb3ZlRXZlbnRzIiwiaGFuZGxlQ2xpY2tFdmVudHMiLCJhZnRlckRlc3Ryb3kiLCJfZ2V0U3RhdGUiLCJjYWxsZXIiLCJkcmF3YWJsZUVsZW1lbnRzIiwibWFpbiIsImdldERyYXdhYmxlRWxlbWVudHMiLCJkcmF3RWxlbWVudCIsIkdyYXBoIiwiYW5ub3RhdGlvblBsdWdpbiIsImJ0bkJhciIsImJ0blRlbXAiLCJidG5SYWluIiwic2V0dGluZ1doaWNoR3JhcGgiLCJ0b1BhcnNlIiwicGFyc2VkRGF0YSIsImdldEhvdXJzIiwibGluZU5vdyIsImxpbmVOb3dWYWx1ZSIsImxhc3RfdXBkYXRlZCIsInVuaXRzIiwiY2FjaGVkQ2hhcnQiLCJsaW5lMSIsIkZvb3RlciIsImN1cnJlbnRZZWFyIiwiZ2V0RnVsbFllYXIiLCJmb290ZXJTdHJpbmciLCJkaXZGb290ZXIiLCJpbm5lckhUTUwiLCJqdXN0aWZ5Q29udGVudCIsImFsaWduSXRlbXMiLCJ0cmFuc2Zvcm0iLCJvdXRwdXQiLCJBcHAiLCJsb2FkaW5nIiwiaGVhZGVyIiwiZ3JhcGgiLCJkYXlzQmFyIiwiYXBpQ2FsbCIsImFzeW5jIiwiX2xvY2F0aW9uIiwicmVxdWVzdExvY2F0aW9uIiwiZmV0Y2giLCJwYXJzZWRSZXF1ZXN0IiwianNvbiIsImNvdW50cnlfY29kZV9pc28zIiwiY2l0eSIsInF1ZXJ5TG9jYXRpb25BUEkiLCJjYXRjaCIsImxvZyIsInJlcXVlc3RXZWF0aGVyIiwicXVlcnlXZWF0aGVyQVBJIiwiaW5zdGFuY2UiLCJhcHAiXSwic291cmNlUm9vdCI6IiJ9