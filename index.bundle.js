/*! For license information please see index.bundle.js.LICENSE.txt */
(()=>{"use strict";var t={217:(t,e,i)=>{i.d(e,{Z:()=>r});var s=i(537),n=i.n(s),o=i(645),a=i.n(o)()(n());a.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;1,300;1,400;1,500;1,600&display=swap);"]),a.push([t.id,':root {\n  font-family: "Open Sans", sans-serif;\n}\n',"",{version:3,sources:["webpack://./src/css/font.css"],names:[],mappings:"AAEA;EACE,oCAAoC;AACtC",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;1,300;1,400;1,500;1,600&display=swap");\n\n:root {\n  font-family: "Open Sans", sans-serif;\n}\n'],sourceRoot:""}]);const r=a},830:(t,e,i)=>{i.d(e,{Z:()=>h});var s=i(537),n=i.n(s),o=i(645),a=i.n(o),r=i(728),l=a()(n());l.i(r.Z),l.push([t.id,"#appContainer {\n  border: 2px solid red;\n  border-radius: 10px;\n  display: flex;\n  flex-direction: column;\n  width: min(var(--minWidth), 100%);\n  padding: 10px;\n  gap: 10px;\n}\n","",{version:3,sources:["webpack://./src/css/modules/App.css"],names:[],mappings:"AAEA;EACE,qBAAqB;EACrB,mBAAmB;EACnB,aAAa;EACb,sBAAsB;EACtB,iCAAiC;EACjC,aAAa;EACb,SAAS;AACX",sourcesContent:["@import url(../variables.css);\n\n#appContainer {\n  border: 2px solid red;\n  border-radius: 10px;\n  display: flex;\n  flex-direction: column;\n  width: min(var(--minWidth), 100%);\n  padding: 10px;\n  gap: 10px;\n}\n"],sourceRoot:""}]);const h=l},211:(t,e,i)=>{i.d(e,{Z:()=>h});var s=i(537),n=i.n(s),o=i(645),a=i.n(o),r=i(728),l=a()(n());l.i(r.Z),l.push([t.id,"#dayContainer {\n  flex: 1 0 auto;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: 1rem 1fr 1rem;\n  border: 2px solid grey;\n  padding: 5px;\n  border-radius: 10px;\n  gap: 5px;\n}\n\n#dayDay {\n  grid-row: 1;\n  grid-column: 1/-1;\n  text-align: center;\n}\n#dayIcon {\n  grid-row: 2;\n  grid-column: 1/-1;\n  align-self: center;\n  justify-self: center;\n  width: 100%;\n}\n#dayMax {\n  grid-row: 3;\n  grid-column: 1;\n  text-align: center;\n\n  font-size: 0.8rem;\n}\n#dayMin {\n  grid-row: 3;\n  grid-column: 2;\n  text-align: center;\n  font-size: 0.8rem;\n  color: var(--textMid);\n}\n","",{version:3,sources:["webpack://./src/css/modules/Day.css"],names:[],mappings:"AAEA;EACE,cAAc;EACd,aAAa;EACb,8BAA8B;EAC9B,iCAAiC;EACjC,sBAAsB;EACtB,YAAY;EACZ,mBAAmB;EACnB,QAAQ;AACV;;AAEA;EACE,WAAW;EACX,iBAAiB;EACjB,kBAAkB;AACpB;AACA;EACE,WAAW;EACX,iBAAiB;EACjB,kBAAkB;EAClB,oBAAoB;EACpB,WAAW;AACb;AACA;EACE,WAAW;EACX,cAAc;EACd,kBAAkB;;EAElB,iBAAiB;AACnB;AACA;EACE,WAAW;EACX,cAAc;EACd,kBAAkB;EAClB,iBAAiB;EACjB,qBAAqB;AACvB",sourcesContent:['@import url("../variables.css");\n\n#dayContainer {\n  flex: 1 0 auto;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: 1rem 1fr 1rem;\n  border: 2px solid grey;\n  padding: 5px;\n  border-radius: 10px;\n  gap: 5px;\n}\n\n#dayDay {\n  grid-row: 1;\n  grid-column: 1/-1;\n  text-align: center;\n}\n#dayIcon {\n  grid-row: 2;\n  grid-column: 1/-1;\n  align-self: center;\n  justify-self: center;\n  width: 100%;\n}\n#dayMax {\n  grid-row: 3;\n  grid-column: 1;\n  text-align: center;\n\n  font-size: 0.8rem;\n}\n#dayMin {\n  grid-row: 3;\n  grid-column: 2;\n  text-align: center;\n  font-size: 0.8rem;\n  color: var(--textMid);\n}\n'],sourceRoot:""}]);const h=l},343:(t,e,i)=>{i.d(e,{Z:()=>h});var s=i(537),n=i.n(s),o=i(645),a=i.n(o),r=i(728),l=a()(n());l.i(r.Z),l.push([t.id,"#container {\n  display: flex;\n  gap: 10px;\n  scroll-margin: 20px;\n}\n\n@media (max-width: 725px) {\n  /*  FIX: doesn't work witn var() */\n  #container {\n    overflow-x: scroll;\n  }\n}\n","",{version:3,sources:["webpack://./src/css/modules/DaysBar.css"],names:[],mappings:"AAEA;EACE,aAAa;EACb,SAAS;EACT,mBAAmB;AACrB;;AAEA;EACE,kCAAkC;EAClC;IACE,kBAAkB;EACpB;AACF",sourcesContent:['@import url("../variables.css");\n\n#container {\n  display: flex;\n  gap: 10px;\n  scroll-margin: 20px;\n}\n\n@media (max-width: 725px) {\n  /*  FIX: doesn\'t work witn var() */\n  #container {\n    overflow-x: scroll;\n  }\n}\n'],sourceRoot:""}]);const h=l},988:(t,e,i)=>{i.d(e,{Z:()=>r});var s=i(537),n=i.n(s),o=i(645),a=i.n(o)()(n());a.push([t.id,"#graphContainer {\n  position: relative;\n  width: 100%;\n  height: 200px;\n}\n","",{version:3,sources:["webpack://./src/css/modules/Graph.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,WAAW;EACX,aAAa;AACf",sourcesContent:["#graphContainer {\n  position: relative;\n  width: 100%;\n  height: 200px;\n}\n"],sourceRoot:""}]);const r=a},27:(t,e,i)=>{i.d(e,{Z:()=>h});var s=i(537),n=i.n(s),o=i(645),a=i.n(o),r=i(728),l=a()(n());l.i(r.Z),l.push([t.id,"#headerContainer {\n  display: grid;\n  grid-template-columns: 5rem 5rem 1fr;\n}\n#headerIcon {\n  grid-column: 1;\n  grid-row: 1;\n  width: 100%;\n  align-self: center;\n  justify-self: center;\n}\n#headerTemperature {\n  grid-column: 2;\n  grid-row: 1;\n  font-size: 3rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n#headerHumidity {\n  grid-column: 1/3;\n  grid-row: 3;\n  font-size: 0.8rem;\n  color: var(--textMid);\n}\n#headerWind {\n  grid-column: 1/3;\n  grid-row: 4;\n  font-size: 0.8rem;\n  color: var(--textMid);\n}\n\n#headerChanceRain {\n  grid-column: 1/3;\n  grid-row: 2;\n  color: var(--textMid);\n  font-size: 0.8rem;\n}\n\n#headerDay {\n  grid-column: -1;\n  grid-row: 2;\n  text-align: end;\n}\n\n#headerCondition {\n  grid-column: -1;\n  grid-row: 3;\n  text-align: end;\n}\n","",{version:3,sources:["webpack://./src/css/modules/Header.css"],names:[],mappings:"AAEA;EACE,aAAa;EACb,oCAAoC;AACtC;AACA;EACE,cAAc;EACd,WAAW;EACX,WAAW;EACX,kBAAkB;EAClB,oBAAoB;AACtB;AACA;EACE,cAAc;EACd,WAAW;EACX,eAAe;EACf,aAAa;EACb,mBAAmB;EACnB,uBAAuB;AACzB;AACA;EACE,gBAAgB;EAChB,WAAW;EACX,iBAAiB;EACjB,qBAAqB;AACvB;AACA;EACE,gBAAgB;EAChB,WAAW;EACX,iBAAiB;EACjB,qBAAqB;AACvB;;AAEA;EACE,gBAAgB;EAChB,WAAW;EACX,qBAAqB;EACrB,iBAAiB;AACnB;;AAEA;EACE,eAAe;EACf,WAAW;EACX,eAAe;AACjB;;AAEA;EACE,eAAe;EACf,WAAW;EACX,eAAe;AACjB",sourcesContent:['@import url("../variables.css");\n\n#headerContainer {\n  display: grid;\n  grid-template-columns: 5rem 5rem 1fr;\n}\n#headerIcon {\n  grid-column: 1;\n  grid-row: 1;\n  width: 100%;\n  align-self: center;\n  justify-self: center;\n}\n#headerTemperature {\n  grid-column: 2;\n  grid-row: 1;\n  font-size: 3rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n#headerHumidity {\n  grid-column: 1/3;\n  grid-row: 3;\n  font-size: 0.8rem;\n  color: var(--textMid);\n}\n#headerWind {\n  grid-column: 1/3;\n  grid-row: 4;\n  font-size: 0.8rem;\n  color: var(--textMid);\n}\n\n#headerChanceRain {\n  grid-column: 1/3;\n  grid-row: 2;\n  color: var(--textMid);\n  font-size: 0.8rem;\n}\n\n#headerDay {\n  grid-column: -1;\n  grid-row: 2;\n  text-align: end;\n}\n\n#headerCondition {\n  grid-column: -1;\n  grid-row: 3;\n  text-align: end;\n}\n'],sourceRoot:""}]);const h=l},195:(t,e,i)=>{i.d(e,{Z:()=>h});var s=i(537),n=i.n(s),o=i(645),a=i.n(o),r=i(728),l=a()(n());l.i(r.Z),l.push([t.id,":root {\n  scrollbar-color: #acacac transparent;\n}\n::-webkit-scrollbar {\n  height: 17px;\n  width: 17px;\n  background: var(--bgDark);\n}\n\n::-webkit-scrollbar-thumb {\n  background: var(--textDark);\n  -webkit-border-radius: 1ex;\n  border: solid 5px var(--bgDark);\n}\n\n::-webkit-scrollbar-corner {\n  background: var(--bgDark);\n}\n\n::-webkit-scrollbar-track {\n  box-shadow: inset 0 0 10px 10px var(--bgDark);\n  border: solid 5px var(--bgDark);\n}\n","",{version:3,sources:["webpack://./src/css/scrollbar.css"],names:[],mappings:"AAEA;EACE,oCAAoC;AACtC;AACA;EACE,YAAY;EACZ,WAAW;EACX,yBAAyB;AAC3B;;AAEA;EACE,2BAA2B;EAC3B,0BAA0B;EAC1B,+BAA+B;AACjC;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,6CAA6C;EAC7C,+BAA+B;AACjC",sourcesContent:['@import url("./variables.css");\n\n:root {\n  scrollbar-color: #acacac transparent;\n}\n::-webkit-scrollbar {\n  height: 17px;\n  width: 17px;\n  background: var(--bgDark);\n}\n\n::-webkit-scrollbar-thumb {\n  background: var(--textDark);\n  -webkit-border-radius: 1ex;\n  border: solid 5px var(--bgDark);\n}\n\n::-webkit-scrollbar-corner {\n  background: var(--bgDark);\n}\n\n::-webkit-scrollbar-track {\n  box-shadow: inset 0 0 10px 10px var(--bgDark);\n  border: solid 5px var(--bgDark);\n}\n'],sourceRoot:""}]);const h=l},402:(t,e,i)=>{i.d(e,{Z:()=>c});var s=i(537),n=i.n(s),o=i(645),a=i.n(o),r=i(728),l=i(195),h=a()(n());h.i(r.Z),h.i(l.Z),h.push([t.id,"* {\n  -webkit-user-select: none; /* Safari */\n  -ms-user-select: none; /* IE 10 and IE 11 */\n  user-select: none; /* Standard syntax */\n}\nbody {\n  background: var(--bgDark);\n  color: var(--textLight);\n  min-height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n","",{version:3,sources:["webpack://./src/css/style.css"],names:[],mappings:"AAGA;EACE,yBAAyB,EAAE,WAAW;EACtC,qBAAqB,EAAE,oBAAoB;EAC3C,iBAAiB,EAAE,oBAAoB;AACzC;AACA;EACE,yBAAyB;EACzB,uBAAuB;EACvB,iBAAiB;EACjB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB",sourcesContent:['@import url("./variables.css");\n@import url("./scrollbar.css");\n\n* {\n  -webkit-user-select: none; /* Safari */\n  -ms-user-select: none; /* IE 10 and IE 11 */\n  user-select: none; /* Standard syntax */\n}\nbody {\n  background: var(--bgDark);\n  color: var(--textLight);\n  min-height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n'],sourceRoot:""}]);const c=h},728:(t,e,i)=>{i.d(e,{Z:()=>r});var s=i(537),n=i.n(s),o=i(645),a=i.n(o)()(n());a.push([t.id,":root {\n  --bgDark: #202124;\n  --textDark: #70717a;\n  --textMid: #7f8089;\n  --textLight: #e8eaed;\n\n  --minWidth: 700px;\n}\n","",{version:3,sources:["webpack://./src/css/variables.css"],names:[],mappings:"AAAA;EACE,iBAAiB;EACjB,mBAAmB;EACnB,kBAAkB;EAClB,oBAAoB;;EAEpB,iBAAiB;AACnB",sourcesContent:[":root {\n  --bgDark: #202124;\n  --textDark: #70717a;\n  --textMid: #7f8089;\n  --textLight: #e8eaed;\n\n  --minWidth: 700px;\n}\n"],sourceRoot:""}]);const r=a},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i="",s=void 0!==e[5];return e[4]&&(i+="@supports (".concat(e[4],") {")),e[2]&&(i+="@media ".concat(e[2]," {")),s&&(i+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),i+=t(e),s&&(i+="}"),e[2]&&(i+="}"),e[4]&&(i+="}"),i})).join("")},e.i=function(t,i,s,n,o){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(s)for(var r=0;r<this.length;r++){var l=this[r][0];null!=l&&(a[l]=!0)}for(var h=0;h<t.length;h++){var c=[].concat(t[h]);s&&a[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),i&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=i):c[2]=i),n&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=n):c[4]="".concat(n)),e.push(c))}},e}},537:t=>{t.exports=function(t){var e=t[1],i=t[3];if(!i)return e;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),n="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),o="/*# ".concat(n," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function i(t){for(var i=-1,s=0;s<e.length;s++)if(e[s].identifier===t){i=s;break}return i}function s(t,s){for(var o={},a=[],r=0;r<t.length;r++){var l=t[r],h=s.base?l[0]+s.base:l[0],c=o[h]||0,d="".concat(h," ").concat(c);o[h]=c+1;var u=i(d),f={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)e[u].references++,e[u].updater(f);else{var g=n(f,s);s.byIndex=r,e.splice(r,0,{identifier:d,updater:g,references:1})}a.push(d)}return a}function n(t,e){var i=e.domAPI(e);return i.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;i.update(t=e)}else i.remove()}}t.exports=function(t,n){var o=s(t=t||[],n=n||{});return function(t){t=t||[];for(var a=0;a<o.length;a++){var r=i(o[a]);e[r].references--}for(var l=s(t,n),h=0;h<o.length;h++){var c=i(o[h]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}o=l}}},569:t=>{var e={};t.exports=function(t,i){var s=function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}e[t]=i}return e[t]}(t);if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(i)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,i)=>{t.exports=function(t){var e=i.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(i){!function(t,e,i){var s="";i.supports&&(s+="@supports (".concat(i.supports,") {")),i.media&&(s+="@media ".concat(i.media," {"));var n=void 0!==i.layer;n&&(s+="@layer".concat(i.layer.length>0?" ".concat(i.layer):""," {")),s+=i.css,n&&(s+="}"),i.media&&(s+="}"),i.supports&&(s+="}");var o=i.sourceMap;o&&"undefined"!=typeof btoa&&(s+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(s,t,e.options)}(e,t,i)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function i(s){var n=e[s];if(void 0!==n)return n.exports;var o=e[s]={id:s,exports:{}};return t[s](o,o.exports,i),o.exports}i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var s in e)i.o(e,s)&&!i.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.nc=void 0,(()=>{var t=i(379),e=i.n(t),s=i(795),n=i.n(s),o=i(569),a=i.n(o),r=i(565),l=i.n(r),h=i(216),c=i.n(h),d=i(589),u=i.n(d),f=i(217),g={};g.styleTagTransform=u(),g.setAttributes=l(),g.insert=a().bind(null,"head"),g.domAPI=n(),g.insertStyleElement=c(),e()(f.Z,g),f.Z&&f.Z.locals&&f.Z.locals;var p=i(402),m={};m.styleTagTransform=u(),m.setAttributes=l(),m.insert=a().bind(null,"head"),m.domAPI=n(),m.insertStyleElement=c(),e()(p.Z,m),p.Z&&p.Z.locals&&p.Z.locals;const b={Pubsub:{},on(t,e){this.Pubsub[t]=this.Pubsub[t]||[],this.Pubsub[t].push(e)},off(t,e){if(this.Pubsub[t])for(let i=0;i<this.Pubsub[t].length;i++)if(this.Pubsub[t][i]===e){this.Pubsub[t].splice(i,1);break}},emit(t,e){this.Pubsub[t]&&this.Pubsub[t].forEach((t=>{t(e)}))}};class x{static cachedData}var y=i(27),_={};_.styleTagTransform=u(),_.setAttributes=l(),_.insert=a().bind(null,"head"),_.domAPI=n(),_.insertStyleElement=c(),e()(y.Z,_),y.Z&&y.Z.locals&&y.Z.locals;class v{constructor(){this.container=document.createElement("div"),this.container.id="headerContainer",this.imgIcon=document.createElement("img"),this.imgIcon.id="headerIcon",this.divTemperature=document.createElement("div"),this.divTemperature.id="headerTemperature",this.divHumidity=document.createElement("div"),this.divHumidity.id="headerHumidity",this.divWindSpeed=document.createElement("div"),this.divWindSpeed.id="headerWind",this.divChanceRain=document.createElement("div"),this.divChanceRain.id="headerChanceRain",this.divDay=document.createElement("div"),this.divDay.id="headerDay",this.divCondition=document.createElement("div"),this.divCondition.id="headerCondition",this.container.append(this.imgIcon,this.divTemperature,this.divHumidity,this.divWindSpeed,this.divChanceRain,this.divDay,this.divCondition),this.bindEvents()}bindEvents(){b.on("renderHeader",(t=>{const{icon:e}=x.cachedData.forecast.forecastday[t].day.condition,i=x.cachedData.forecast.forecastday[t].day.daily_chance_of_rain,s=x.cachedData.forecast.forecastday[t].day.condition.text,n=new Date(x.cachedData.forecast.forecastday[t].date).toLocaleDateString("en-US",{weekday:"long",timeZone:"UTC"});let o,a,r;0===t?(o=Math.floor(x.cachedData.current.temp_c),a=x.cachedData.current.humidity,r=x.cachedData.current.wind_kph):(o=Math.floor(x.cachedData.forecast.forecastday[t].day.avgtemp_c),a=x.cachedData.forecast.forecastday[t].day.avghumidity,r=x.cachedData.forecast.forecastday[t].day.maxwind_kph),this.render({icon:e,tempC:o,humidity:a,windKPH:r,chanceOfRain:i,day:n,condition:s})}))}render(t){this.imgIcon.src=t.icon,this.divTemperature.innerText=`${t.tempC}°`,this.divHumidity.innerText=`Humidity: ${t.humidity}%`,this.divWindSpeed.innerText=`Wind speed: ${t.windKPH}`,this.divChanceRain.innerText=`Chance of rain: ${t.chanceOfRain}%`,this.divDay.innerText=t.day,this.divCondition.innerText=t.condition}}var A=i(211),w={};w.styleTagTransform=u(),w.setAttributes=l(),w.insert=a().bind(null,"head"),w.domAPI=n(),w.insertStyleElement=c(),e()(A.Z,w),A.Z&&A.Z.locals&&A.Z.locals;class M{constructor(t){let e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this.index=t,this.isCurrentDay=e,this.container=document.createElement("div"),this.container.id="dayContainer",this.imgIcon=document.createElement("img"),this.imgIcon.id="dayIcon",this.divDayOfWeek=document.createElement("div"),this.divDayOfWeek.id="dayDay",this.divTemperatureMAX=document.createElement("div"),this.divTemperatureMAX.id="dayMax",this.divTemperatureMIN=document.createElement("div"),this.divTemperatureMIN.id="dayMin",this.container.append(this.imgIcon,this.divDayOfWeek,this.divTemperatureMAX,this.divTemperatureMIN),this.bindEvents()}render(t){this.cachedData=t,this.imgIcon.src=t.day.condition.icon,this.divDayOfWeek.innerText=new Date(1e3*t.date_epoch).toLocaleDateString("en-US",{weekday:"short",timeZone:"UTC"}),this.divTemperatureMAX.innerText=`${t.day.maxtemp_c}°`,this.divTemperatureMIN.innerText=`${t.day.mintemp_c}°`}bindEvents(){this.container.addEventListener("click",(()=>{b.emit("renderHeader",this.index)})),this.container.addEventListener("click",(()=>{b.emit("renderGraph",this.index)}))}}var k=i(343),C={};C.styleTagTransform=u(),C.setAttributes=l(),C.insert=a().bind(null,"head"),C.domAPI=n(),C.insertStyleElement=c(),e()(k.Z,C),k.Z&&k.Z.locals&&k.Z.locals;class E{days=[];constructor(t){this.container=document.createElement("div"),this.container.id="container";for(let e=0;e<t;e++){const t=0===e;this.days.push(new M(e,t)),this.container.append(this.days[e].container)}this.bindEvents()}bindEvents(){b.on("renderDaysBar",(()=>{this.render(x.cachedData)}))}render(t){this.days.forEach((e=>{e.render(t.forecast.forecastday[e.index])}))}}function S(t){return t+.5|0}const D=(t,e,i)=>Math.max(Math.min(t,i),e);function P(t){return D(S(2.55*t),0,255)}function O(t){return D(S(255*t),0,255)}function T(t){return D(S(t/2.55)/100,0,1)}function B(t){return D(S(100*t),0,100)}const L={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},R=[..."0123456789ABCDEF"],I=t=>R[15&t],z=t=>R[(240&t)>>4]+R[15&t],F=t=>(240&t)>>4==(15&t);const W=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function V(t,e,i){const s=e*Math.min(i,1-i),n=(e,n=(e+t/30)%12)=>i-s*Math.max(Math.min(n-3,9-n,1),-1);return[n(0),n(8),n(4)]}function N(t,e,i){const s=(s,n=(s+t/60)%6)=>i-i*e*Math.max(Math.min(n,4-n,1),0);return[s(5),s(3),s(1)]}function j(t,e,i){const s=V(t,1,.5);let n;for(e+i>1&&(n=1/(e+i),e*=n,i*=n),n=0;n<3;n++)s[n]*=1-e-i,s[n]+=e;return s}function H(t){const e=t.r/255,i=t.g/255,s=t.b/255,n=Math.max(e,i,s),o=Math.min(e,i,s),a=(n+o)/2;let r,l,h;return n!==o&&(h=n-o,l=a>.5?h/(2-n-o):h/(n+o),r=function(t,e,i,s,n){return t===n?(e-i)/s+(e<i?6:0):e===n?(i-t)/s+2:(t-e)/s+4}(e,i,s,h,n),r=60*r+.5),[0|r,l||0,a]}function $(t,e,i,s){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,i,s)).map(O)}function Y(t,e,i){return $(V,t,e,i)}function U(t){return(t%360+360)%360}const X={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},Z={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let q;const K=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,G=t=>t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055,J=t=>t<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4);function Q(t,e,i){if(t){let s=H(t);s[e]=Math.max(0,Math.min(s[e]+s[e]*i,0===e?360:1)),s=Y(s),t.r=s[0],t.g=s[1],t.b=s[2]}}function tt(t,e){return t?Object.assign(e||{},t):t}function et(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=O(t[3]))):(e=tt(t,{r:0,g:0,b:0,a:1})).a=O(e.a),e}function it(t){return"r"===t.charAt(0)?function(t){const e=K.exec(t);let i,s,n,o=255;if(e){if(e[7]!==i){const t=+e[7];o=e[8]?P(t):D(255*t,0,255)}return i=+e[1],s=+e[3],n=+e[5],i=255&(e[2]?P(i):D(i,0,255)),s=255&(e[4]?P(s):D(s,0,255)),n=255&(e[6]?P(n):D(n,0,255)),{r:i,g:s,b:n,a:o}}}(t):function(t){const e=W.exec(t);let i,s=255;if(!e)return;e[5]!==i&&(s=e[6]?P(+e[5]):O(+e[5]));const n=U(+e[2]),o=+e[3]/100,a=+e[4]/100;return i="hwb"===e[1]?function(t,e,i){return $(j,t,e,i)}(n,o,a):"hsv"===e[1]?function(t,e,i){return $(N,t,e,i)}(n,o,a):Y(n,o,a),{r:i[0],g:i[1],b:i[2],a:s}}(t)}class st{constructor(t){if(t instanceof st)return t;const e=typeof t;let i;var s,n,o;"object"===e?i=et(t):"string"===e&&(o=(s=t).length,"#"===s[0]&&(4===o||5===o?n={r:255&17*L[s[1]],g:255&17*L[s[2]],b:255&17*L[s[3]],a:5===o?17*L[s[4]]:255}:7!==o&&9!==o||(n={r:L[s[1]]<<4|L[s[2]],g:L[s[3]]<<4|L[s[4]],b:L[s[5]]<<4|L[s[6]],a:9===o?L[s[7]]<<4|L[s[8]]:255})),i=n||function(t){q||(q=function(){const t={},e=Object.keys(Z),i=Object.keys(X);let s,n,o,a,r;for(s=0;s<e.length;s++){for(a=r=e[s],n=0;n<i.length;n++)o=i[n],r=r.replace(o,X[o]);o=parseInt(Z[a],16),t[r]=[o>>16&255,o>>8&255,255&o]}return t}(),q.transparent=[0,0,0,0]);const e=q[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}(t)||it(t)),this._rgb=i,this._valid=!!i}get valid(){return this._valid}get rgb(){var t=tt(this._rgb);return t&&(t.a=T(t.a)),t}set rgb(t){this._rgb=et(t)}rgbString(){return this._valid?(t=this._rgb)&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${T(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`):void 0;var t}hexString(){return this._valid?(t=this._rgb,e=(t=>F(t.r)&&F(t.g)&&F(t.b)&&F(t.a))(t)?I:z,t?"#"+e(t.r)+e(t.g)+e(t.b)+((t,e)=>t<255?e(t):"")(t.a,e):void 0):void 0;var t,e}hslString(){return this._valid?function(t){if(!t)return;const e=H(t),i=e[0],s=B(e[1]),n=B(e[2]);return t.a<255?`hsla(${i}, ${s}%, ${n}%, ${T(t.a)})`:`hsl(${i}, ${s}%, ${n}%)`}(this._rgb):void 0}mix(t,e){if(t){const i=this.rgb,s=t.rgb;let n;const o=e===n?.5:e,a=2*o-1,r=i.a-s.a,l=((a*r==-1?a:(a+r)/(1+a*r))+1)/2;n=1-l,i.r=255&l*i.r+n*s.r+.5,i.g=255&l*i.g+n*s.g+.5,i.b=255&l*i.b+n*s.b+.5,i.a=o*i.a+(1-o)*s.a,this.rgb=i}return this}interpolate(t,e){return t&&(this._rgb=function(t,e,i){const s=J(T(t.r)),n=J(T(t.g)),o=J(T(t.b));return{r:O(G(s+i*(J(T(e.r))-s))),g:O(G(n+i*(J(T(e.g))-n))),b:O(G(o+i*(J(T(e.b))-o))),a:t.a+i*(e.a-t.a)}}(this._rgb,t._rgb,e)),this}clone(){return new st(this.rgb)}alpha(t){return this._rgb.a=O(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=S(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return Q(this._rgb,2,t),this}darken(t){return Q(this._rgb,2,-t),this}saturate(t){return Q(this._rgb,1,t),this}desaturate(t){return Q(this._rgb,1,-t),this}rotate(t){return function(t,e){var i=H(t);i[0]=U(i[0]+e),i=Y(i),t.r=i[0],t.g=i[1],t.b=i[2]}(this._rgb,t),this}}function nt(){}const ot=(()=>{let t=0;return()=>t++})();function at(t){return null==t}function rt(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.slice(0,7)&&"Array]"===e.slice(-6)}function lt(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}function ht(t){return("number"==typeof t||t instanceof Number)&&isFinite(+t)}function ct(t,e){return ht(t)?t:e}function dt(t,e){return void 0===t?e:t}const ut=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function ft(t,e,i){if(t&&"function"==typeof t.call)return t.apply(i,e)}function gt(t,e,i,s){let n,o,a;if(rt(t))if(o=t.length,s)for(n=o-1;n>=0;n--)e.call(i,t[n],n);else for(n=0;n<o;n++)e.call(i,t[n],n);else if(lt(t))for(a=Object.keys(t),o=a.length,n=0;n<o;n++)e.call(i,t[a[n]],a[n])}function pt(t,e){let i,s,n,o;if(!t||!e||t.length!==e.length)return!1;for(i=0,s=t.length;i<s;++i)if(n=t[i],o=e[i],n.datasetIndex!==o.datasetIndex||n.index!==o.index)return!1;return!0}function mt(t){if(rt(t))return t.map(mt);if(lt(t)){const e=Object.create(null),i=Object.keys(t),s=i.length;let n=0;for(;n<s;++n)e[i[n]]=mt(t[i[n]]);return e}return t}function bt(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function xt(t,e,i,s){if(!bt(t))return;const n=e[t],o=i[t];lt(n)&&lt(o)?yt(n,o,s):e[t]=mt(o)}function yt(t,e,i){const s=rt(e)?e:[e],n=s.length;if(!lt(t))return t;const o=(i=i||{}).merger||xt;let a;for(let e=0;e<n;++e){if(a=s[e],!lt(a))continue;const n=Object.keys(a);for(let e=0,s=n.length;e<s;++e)o(n[e],t,a,i)}return t}function _t(t,e){return yt(t,e,{merger:vt})}function vt(t,e,i){if(!bt(t))return;const s=e[t],n=i[t];lt(s)&&lt(n)?_t(s,n):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=mt(n))}const At={"":t=>t,x:t=>t.x,y:t=>t.y};function wt(t,e){const i=At[e]||(At[e]=function(t){const e=function(t){const e=t.split("."),i=[];let s="";for(const t of e)s+=t,s.endsWith("\\")?s=s.slice(0,-1)+".":(i.push(s),s="");return i}(t);return t=>{for(const i of e){if(""===i)break;t=t&&t[i]}return t}}(e));return i(t)}function Mt(t){return t.charAt(0).toUpperCase()+t.slice(1)}const kt=t=>void 0!==t,Ct=t=>"function"==typeof t,Et=(t,e)=>{if(t.size!==e.size)return!1;for(const i of t)if(!e.has(i))return!1;return!0},St=Math.PI,Dt=2*St,Pt=Dt+St,Ot=Number.POSITIVE_INFINITY,Tt=St/180,Bt=St/2,Lt=St/4,Rt=2*St/3,It=Math.log10,zt=Math.sign;function Ft(t,e,i){return Math.abs(t-e)<i}function Wt(t){const e=Math.round(t);t=Ft(t,e,t/1e3)?e:t;const i=Math.pow(10,Math.floor(It(t))),s=t/i;return(s<=1?1:s<=2?2:s<=5?5:10)*i}function Vt(t){return!isNaN(parseFloat(t))&&isFinite(t)}function Nt(t,e,i){let s,n,o;for(s=0,n=t.length;s<n;s++)o=t[s][i],isNaN(o)||(e.min=Math.min(e.min,o),e.max=Math.max(e.max,o))}function jt(t){return t*(St/180)}function Ht(t){return t*(180/St)}function $t(t){if(!ht(t))return;let e=1,i=0;for(;Math.round(t*e)/e!==t;)e*=10,i++;return i}function Yt(t,e){const i=e.x-t.x,s=e.y-t.y,n=Math.sqrt(i*i+s*s);let o=Math.atan2(s,i);return o<-.5*St&&(o+=Dt),{angle:o,distance:n}}function Ut(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function Xt(t,e){return(t-e+Pt)%Dt-St}function Zt(t){return(t%Dt+Dt)%Dt}function qt(t,e,i,s){const n=Zt(t),o=Zt(e),a=Zt(i),r=Zt(o-n),l=Zt(a-n),h=Zt(n-o),c=Zt(n-a);return n===o||n===a||s&&o===a||r>l&&h<c}function Kt(t,e,i){return Math.max(e,Math.min(i,t))}function Gt(t,e,i,s=1e-6){return t>=Math.min(e,i)-s&&t<=Math.max(e,i)+s}function Jt(t,e,i){i=i||(i=>t[i]<e);let s,n=t.length-1,o=0;for(;n-o>1;)s=o+n>>1,i(s)?o=s:n=s;return{lo:o,hi:n}}const Qt=(t,e,i,s)=>Jt(t,i,s?s=>{const n=t[s][e];return n<i||n===i&&t[s+1][e]===i}:s=>t[s][e]<i),te=(t,e,i)=>Jt(t,i,(s=>t[s][e]>=i)),ee=["push","pop","shift","splice","unshift"];function ie(t,e){const i=t._chartjs;if(!i)return;const s=i.listeners,n=s.indexOf(e);-1!==n&&s.splice(n,1),s.length>0||(ee.forEach((e=>{delete t[e]})),delete t._chartjs)}function se(t){const e=new Set(t);return e.size===t.length?t:Array.from(e)}const ne="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function oe(t,e){let i=[],s=!1;return function(...n){i=n,s||(s=!0,ne.call(window,(()=>{s=!1,t.apply(e,i)})))}}const ae=t=>"start"===t?"left":"end"===t?"right":"center",re=(t,e,i)=>"start"===t?e:"end"===t?i:(e+i)/2;function le(t,e,i){const s=e.length;let n=0,o=s;if(t._sorted){const{iScale:a,_parsed:r}=t,l=a.axis,{min:h,max:c,minDefined:d,maxDefined:u}=a.getUserBounds();d&&(n=Kt(Math.min(Qt(r,l,h).lo,i?s:Qt(e,l,a.getPixelForValue(h)).lo),0,s-1)),o=u?Kt(Math.max(Qt(r,a.axis,c,!0).hi+1,i?0:Qt(e,l,a.getPixelForValue(c),!0).hi+1),n,s)-n:s-n}return{start:n,count:o}}function he(t){const{xScale:e,yScale:i,_scaleRanges:s}=t,n={xmin:e.min,xmax:e.max,ymin:i.min,ymax:i.max};if(!s)return t._scaleRanges=n,!0;const o=s.xmin!==e.min||s.xmax!==e.max||s.ymin!==i.min||s.ymax!==i.max;return Object.assign(s,n),o}const ce=t=>0===t||1===t,de=(t,e,i)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*Dt/i),ue=(t,e,i)=>Math.pow(2,-10*t)*Math.sin((t-e)*Dt/i)+1,fe={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*Bt),easeOutSine:t=>Math.sin(t*Bt),easeInOutSine:t=>-.5*(Math.cos(St*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>ce(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>ce(t)?t:de(t,.075,.3),easeOutElastic:t=>ce(t)?t:ue(t,.075,.3),easeInOutElastic(t){const e=.1125;return ce(t)?t:t<.5?.5*de(2*t,e,.45):.5+.5*ue(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-fe.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,i=2.75;return t<1/i?e*t*t:t<2/i?e*(t-=1.5/i)*t+.75:t<2.5/i?e*(t-=2.25/i)*t+.9375:e*(t-=2.625/i)*t+.984375},easeInOutBounce:t=>t<.5?.5*fe.easeInBounce(2*t):.5*fe.easeOutBounce(2*t-1)+.5};function ge(t){if(t&&"object"==typeof t){const e=t.toString();return"[object CanvasPattern]"===e||"[object CanvasGradient]"===e}return!1}function pe(t){return ge(t)?t:new st(t)}function me(t){return ge(t)?t:new st(t).saturate(.5).darken(.1).hexString()}const be=["x","y","borderWidth","radius","tension"],xe=["color","borderColor","backgroundColor"],ye=new Map;function _e(t,e,i){return function(t,e){e=e||{};const i=t+JSON.stringify(e);let s=ye.get(i);return s||(s=new Intl.NumberFormat(t,e),ye.set(i,s)),s}(e,i).format(t)}const ve={values:t=>rt(t)?t:""+t,numeric(t,e,i){if(0===t)return"0";const s=this.chart.options.locale;let n,o=t;if(i.length>1){const e=Math.max(Math.abs(i[0].value),Math.abs(i[i.length-1].value));(e<1e-4||e>1e15)&&(n="scientific"),o=function(t,e){let i=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;return Math.abs(i)>=1&&t!==Math.floor(t)&&(i=t-Math.floor(t)),i}(t,i)}const a=It(Math.abs(o)),r=isNaN(a)?1:Math.max(Math.min(-1*Math.floor(a),20),0),l={notation:n,minimumFractionDigits:r,maximumFractionDigits:r};return Object.assign(l,this.options.ticks.format),_e(t,s,l)},logarithmic(t,e,i){if(0===t)return"0";const s=i[e].significand||t/Math.pow(10,Math.floor(It(t)));return[1,2,3,5,10,15].includes(s)||e>.8*i.length?ve.numeric.call(this,t,e,i):""}};var Ae={formatters:ve};const we=Object.create(null),Me=Object.create(null);function ke(t,e){if(!e)return t;const i=e.split(".");for(let e=0,s=i.length;e<s;++e){const s=i[e];t=t[s]||(t[s]=Object.create(null))}return t}function Ce(t,e,i){return"string"==typeof e?yt(ke(t,e),i):yt(ke(t,""),e)}class Ee{constructor(t,e){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>me(e.backgroundColor),this.hoverBorderColor=(t,e)=>me(e.borderColor),this.hoverColor=(t,e)=>me(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0,includeInvisible:!1},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t),this.apply(e)}set(t,e){return Ce(this,t,e)}get(t){return ke(this,t)}describe(t,e){return Ce(Me,t,e)}override(t,e){return Ce(we,t,e)}route(t,e,i,s){const n=ke(this,t),o=ke(this,i),a="_"+e;Object.defineProperties(n,{[a]:{value:n[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[a],e=o[s];return lt(t)?Object.assign({},e,t):dt(t,e)},set(t){this[a]=t}}})}apply(t){t.forEach((t=>t(this)))}}var Se=new Ee({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}},[function(t){t.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0}),t.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),t.set("animations",{colors:{type:"color",properties:xe},numbers:{type:"number",properties:be}}),t.describe("animations",{_fallback:"animation"}),t.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}})},function(t){t.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}})},function(t){t.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1},border:{display:!0,dash:[],dashOffset:0,width:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:Ae.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),t.route("scale.ticks","color","","color"),t.route("scale.grid","color","","borderColor"),t.route("scale.border","color","","borderColor"),t.route("scale.title","color","","color"),t.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t&&"dash"!==t}),t.describe("scales",{_fallback:"scale"}),t.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t})}]);function De(t,e,i,s,n){let o=e[n];return o||(o=e[n]=t.measureText(n).width,i.push(n)),o>s&&(s=o),s}function Pe(t,e,i,s){let n=(s=s||{}).data=s.data||{},o=s.garbageCollect=s.garbageCollect||[];s.font!==e&&(n=s.data={},o=s.garbageCollect=[],s.font=e),t.save(),t.font=e;let a=0;const r=i.length;let l,h,c,d,u;for(l=0;l<r;l++)if(d=i[l],null==d||rt(d)){if(rt(d))for(h=0,c=d.length;h<c;h++)u=d[h],null==u||rt(u)||(a=De(t,n,o,a,u))}else a=De(t,n,o,a,d);t.restore();const f=o.length/2;if(f>i.length){for(l=0;l<f;l++)delete n[o[l]];o.splice(0,f)}return a}function Oe(t,e,i){const s=t.currentDevicePixelRatio,n=0!==i?Math.max(i/2,.5):0;return Math.round((e-n)*s)/s+n}function Te(t,e){(e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore()}function Be(t,e,i,s){Le(t,e,i,s,null)}function Le(t,e,i,s,n){let o,a,r,l,h,c,d,u;const f=e.pointStyle,g=e.rotation,p=e.radius;let m=(g||0)*Tt;if(f&&"object"==typeof f&&(o=f.toString(),"[object HTMLImageElement]"===o||"[object HTMLCanvasElement]"===o))return t.save(),t.translate(i,s),t.rotate(m),t.drawImage(f,-f.width/2,-f.height/2,f.width,f.height),void t.restore();if(!(isNaN(p)||p<=0)){switch(t.beginPath(),f){default:n?t.ellipse(i,s,n/2,p,0,0,Dt):t.arc(i,s,p,0,Dt),t.closePath();break;case"triangle":c=n?n/2:p,t.moveTo(i+Math.sin(m)*c,s-Math.cos(m)*p),m+=Rt,t.lineTo(i+Math.sin(m)*c,s-Math.cos(m)*p),m+=Rt,t.lineTo(i+Math.sin(m)*c,s-Math.cos(m)*p),t.closePath();break;case"rectRounded":h=.516*p,l=p-h,a=Math.cos(m+Lt)*l,d=Math.cos(m+Lt)*(n?n/2-h:l),r=Math.sin(m+Lt)*l,u=Math.sin(m+Lt)*(n?n/2-h:l),t.arc(i-d,s-r,h,m-St,m-Bt),t.arc(i+u,s-a,h,m-Bt,m),t.arc(i+d,s+r,h,m,m+Bt),t.arc(i-u,s+a,h,m+Bt,m+St),t.closePath();break;case"rect":if(!g){l=Math.SQRT1_2*p,c=n?n/2:l,t.rect(i-c,s-l,2*c,2*l);break}m+=Lt;case"rectRot":d=Math.cos(m)*(n?n/2:p),a=Math.cos(m)*p,r=Math.sin(m)*p,u=Math.sin(m)*(n?n/2:p),t.moveTo(i-d,s-r),t.lineTo(i+u,s-a),t.lineTo(i+d,s+r),t.lineTo(i-u,s+a),t.closePath();break;case"crossRot":m+=Lt;case"cross":d=Math.cos(m)*(n?n/2:p),a=Math.cos(m)*p,r=Math.sin(m)*p,u=Math.sin(m)*(n?n/2:p),t.moveTo(i-d,s-r),t.lineTo(i+d,s+r),t.moveTo(i+u,s-a),t.lineTo(i-u,s+a);break;case"star":d=Math.cos(m)*(n?n/2:p),a=Math.cos(m)*p,r=Math.sin(m)*p,u=Math.sin(m)*(n?n/2:p),t.moveTo(i-d,s-r),t.lineTo(i+d,s+r),t.moveTo(i+u,s-a),t.lineTo(i-u,s+a),m+=Lt,d=Math.cos(m)*(n?n/2:p),a=Math.cos(m)*p,r=Math.sin(m)*p,u=Math.sin(m)*(n?n/2:p),t.moveTo(i-d,s-r),t.lineTo(i+d,s+r),t.moveTo(i+u,s-a),t.lineTo(i-u,s+a);break;case"line":a=n?n/2:Math.cos(m)*p,r=Math.sin(m)*p,t.moveTo(i-a,s-r),t.lineTo(i+a,s+r);break;case"dash":t.moveTo(i,s),t.lineTo(i+Math.cos(m)*(n?n/2:p),s+Math.sin(m)*p);break;case!1:t.closePath()}t.fill(),e.borderWidth>0&&t.stroke()}}function Re(t,e,i){return i=i||.5,!e||t&&t.x>e.left-i&&t.x<e.right+i&&t.y>e.top-i&&t.y<e.bottom+i}function Ie(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function ze(t){t.restore()}function Fe(t,e,i,s,n){if(!e)return t.lineTo(i.x,i.y);if("middle"===n){const s=(e.x+i.x)/2;t.lineTo(s,e.y),t.lineTo(s,i.y)}else"after"===n!=!!s?t.lineTo(e.x,i.y):t.lineTo(i.x,e.y);t.lineTo(i.x,i.y)}function We(t,e,i,s){if(!e)return t.lineTo(i.x,i.y);t.bezierCurveTo(s?e.cp1x:e.cp2x,s?e.cp1y:e.cp2y,s?i.cp2x:i.cp1x,s?i.cp2y:i.cp1y,i.x,i.y)}function Ve(t,e,i,s,n){if(n.strikethrough||n.underline){const o=t.measureText(s),a=e-o.actualBoundingBoxLeft,r=e+o.actualBoundingBoxRight,l=i-o.actualBoundingBoxAscent,h=i+o.actualBoundingBoxDescent,c=n.strikethrough?(l+h)/2:h;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=n.decorationWidth||2,t.moveTo(a,c),t.lineTo(r,c),t.stroke()}}function Ne(t,e){const i=t.fillStyle;t.fillStyle=e.color,t.fillRect(e.left,e.top,e.width,e.height),t.fillStyle=i}function je(t,e,i,s,n,o={}){const a=rt(e)?e:[e],r=o.strokeWidth>0&&""!==o.strokeColor;let l,h;for(t.save(),t.font=n.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]),at(e.rotation)||t.rotate(e.rotation),e.color&&(t.fillStyle=e.color),e.textAlign&&(t.textAlign=e.textAlign),e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,o),l=0;l<a.length;++l)h=a[l],o.backdrop&&Ne(t,o.backdrop),r&&(o.strokeColor&&(t.strokeStyle=o.strokeColor),at(o.strokeWidth)||(t.lineWidth=o.strokeWidth),t.strokeText(h,i,s,o.maxWidth)),t.fillText(h,i,s,o.maxWidth),Ve(t,i,s,h,o),s+=Number(n.lineHeight);t.restore()}function He(t,e){const{x:i,y:s,w:n,h:o,radius:a}=e;t.arc(i+a.topLeft,s+a.topLeft,a.topLeft,-Bt,St,!0),t.lineTo(i,s+o-a.bottomLeft),t.arc(i+a.bottomLeft,s+o-a.bottomLeft,a.bottomLeft,St,Bt,!0),t.lineTo(i+n-a.bottomRight,s+o),t.arc(i+n-a.bottomRight,s+o-a.bottomRight,a.bottomRight,Bt,0,!0),t.lineTo(i+n,s+a.topRight),t.arc(i+n-a.topRight,s+a.topRight,a.topRight,0,-Bt,!0),t.lineTo(i+a.topLeft,s)}const $e=/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/,Ye=/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;function Ue(t,e){const i=(""+t).match($e);if(!i||"normal"===i[1])return 1.2*e;switch(t=+i[2],i[3]){case"px":return t;case"%":t/=100}return e*t}const Xe=t=>+t||0;function Ze(t,e){const i={},s=lt(e),n=s?Object.keys(e):e,o=lt(t)?s?i=>dt(t[i],t[e[i]]):e=>t[e]:()=>t;for(const t of n)i[t]=Xe(o(t));return i}function qe(t){return Ze(t,{top:"y",right:"x",bottom:"y",left:"x"})}function Ke(t){return Ze(t,["topLeft","topRight","bottomLeft","bottomRight"])}function Ge(t){const e=qe(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function Je(t,e){t=t||{},e=e||Se.font;let i=dt(t.size,e.size);"string"==typeof i&&(i=parseInt(i,10));let s=dt(t.style,e.style);s&&!(""+s).match(Ye)&&(console.warn('Invalid font style specified: "'+s+'"'),s=void 0);const n={family:dt(t.family,e.family),lineHeight:Ue(dt(t.lineHeight,e.lineHeight),i),size:i,style:s,weight:dt(t.weight,e.weight),string:""};return n.string=function(t){return!t||at(t.size)||at(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}(n),n}function Qe(t,e,i,s){let n,o,a,r=!0;for(n=0,o=t.length;n<o;++n)if(a=t[n],void 0!==a&&(void 0!==e&&"function"==typeof a&&(a=a(e),r=!1),void 0!==i&&rt(a)&&(a=a[i%a.length],r=!1),void 0!==a))return s&&!r&&(s.cacheable=!1),a}function ti(t,e){return Object.assign(Object.create(t),e)}function ei(t,e=[""],i,s,n=(()=>t[0])){const o=i||t;void 0===s&&(s=ui("_fallback",t));const a={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:o,_fallback:s,_getTarget:n,override:i=>ei([i,...t],e,o,s)};return new Proxy(a,{deleteProperty:(e,i)=>(delete e[i],delete e._keys,delete t[0][i],!0),get:(i,s)=>ai(i,s,(()=>function(t,e,i,s){let n;for(const o of e)if(n=ui(ni(o,t),i),void 0!==n)return oi(t,n)?ci(i,s,t,n):n}(s,e,t,i))),getOwnPropertyDescriptor:(t,e)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],e),getPrototypeOf:()=>Reflect.getPrototypeOf(t[0]),has:(t,e)=>fi(t).includes(e),ownKeys:t=>fi(t),set(t,e,i){const s=t._storage||(t._storage=n());return t[e]=s[e]=i,delete t._keys,!0}})}function ii(t,e,i,s){const n={_cacheable:!1,_proxy:t,_context:e,_subProxy:i,_stack:new Set,_descriptors:si(t,s),setContext:e=>ii(t,e,i,s),override:n=>ii(t.override(n),e,i,s)};return new Proxy(n,{deleteProperty:(e,i)=>(delete e[i],delete t[i],!0),get:(t,e,i)=>ai(t,e,(()=>function(t,e,i){const{_proxy:s,_context:n,_subProxy:o,_descriptors:a}=t;let r=s[e];return Ct(r)&&a.isScriptable(e)&&(r=function(t,e,i,s){const{_proxy:n,_context:o,_subProxy:a,_stack:r}=i;if(r.has(t))throw new Error("Recursion detected: "+Array.from(r).join("->")+"->"+t);r.add(t);let l=e(o,a||s);return r.delete(t),oi(t,l)&&(l=ci(n._scopes,n,t,l)),l}(e,r,t,i)),rt(r)&&r.length&&(r=function(t,e,i,s){const{_proxy:n,_context:o,_subProxy:a,_descriptors:r}=i;if(void 0!==o.index&&s(t))return e[o.index%e.length];if(lt(e[0])){const i=e,s=n._scopes.filter((t=>t!==i));e=[];for(const l of i){const i=ci(s,n,t,l);e.push(ii(i,o,a&&a[t],r))}}return e}(e,r,t,a.isIndexable)),oi(e,r)&&(r=ii(r,n,o&&o[e],a)),r}(t,e,i))),getOwnPropertyDescriptor:(e,i)=>e._descriptors.allKeys?Reflect.has(t,i)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,i),getPrototypeOf:()=>Reflect.getPrototypeOf(t),has:(e,i)=>Reflect.has(t,i),ownKeys:()=>Reflect.ownKeys(t),set:(e,i,s)=>(t[i]=s,delete e[i],!0)})}function si(t,e={scriptable:!0,indexable:!0}){const{_scriptable:i=e.scriptable,_indexable:s=e.indexable,_allKeys:n=e.allKeys}=t;return{allKeys:n,scriptable:i,indexable:s,isScriptable:Ct(i)?i:()=>i,isIndexable:Ct(s)?s:()=>s}}const ni=(t,e)=>t?t+Mt(e):e,oi=(t,e)=>lt(e)&&"adapters"!==t&&(null===Object.getPrototypeOf(e)||e.constructor===Object);function ai(t,e,i){if(Object.prototype.hasOwnProperty.call(t,e))return t[e];const s=i();return t[e]=s,s}function ri(t,e,i){return Ct(t)?t(e,i):t}const li=(t,e)=>!0===t?e:"string"==typeof t?wt(e,t):void 0;function hi(t,e,i,s,n){for(const o of e){const e=li(i,o);if(e){t.add(e);const o=ri(e._fallback,i,n);if(void 0!==o&&o!==i&&o!==s)return o}else if(!1===e&&void 0!==s&&i!==s)return null}return!1}function ci(t,e,i,s){const n=e._rootScopes,o=ri(e._fallback,i,s),a=[...t,...n],r=new Set;r.add(s);let l=di(r,a,i,o||i,s);return null!==l&&(void 0===o||o===i||(l=di(r,a,o,l,s),null!==l))&&ei(Array.from(r),[""],n,o,(()=>function(t,e,i){const s=t._getTarget();e in s||(s[e]={});const n=s[e];return rt(n)&&lt(i)?i:n||{}}(e,i,s)))}function di(t,e,i,s,n){for(;i;)i=hi(t,e,i,s,n);return i}function ui(t,e){for(const i of e){if(!i)continue;const e=i[t];if(void 0!==e)return e}}function fi(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const i of t)for(const t of Object.keys(i).filter((t=>!t.startsWith("_"))))e.add(t);return Array.from(e)}(t._scopes)),e}function gi(t,e,i,s){const{iScale:n}=t,{key:o="r"}=this._parsing,a=new Array(s);let r,l,h,c;for(r=0,l=s;r<l;++r)h=r+i,c=e[h],a[r]={r:n.parse(wt(c,o),h)};return a}const pi=Number.EPSILON||1e-14,mi=(t,e)=>e<t.length&&!t[e].skip&&t[e],bi=t=>"x"===t?"y":"x";function xi(t,e,i,s){const n=t.skip?e:t,o=e,a=i.skip?e:i,r=Ut(o,n),l=Ut(a,o);let h=r/(r+l),c=l/(r+l);h=isNaN(h)?0:h,c=isNaN(c)?0:c;const d=s*h,u=s*c;return{previous:{x:o.x-d*(a.x-n.x),y:o.y-d*(a.y-n.y)},next:{x:o.x+u*(a.x-n.x),y:o.y+u*(a.y-n.y)}}}function yi(t,e,i){return Math.max(Math.min(t,i),e)}function _i(t,e,i,s,n){let o,a,r,l;if(e.spanGaps&&(t=t.filter((t=>!t.skip))),"monotone"===e.cubicInterpolationMode)!function(t,e="x"){const i=bi(e),s=t.length,n=Array(s).fill(0),o=Array(s);let a,r,l,h=mi(t,0);for(a=0;a<s;++a)if(r=l,l=h,h=mi(t,a+1),l){if(h){const t=h[e]-l[e];n[a]=0!==t?(h[i]-l[i])/t:0}o[a]=r?h?zt(n[a-1])!==zt(n[a])?0:(n[a-1]+n[a])/2:n[a-1]:n[a]}!function(t,e,i){const s=t.length;let n,o,a,r,l,h=mi(t,0);for(let c=0;c<s-1;++c)l=h,h=mi(t,c+1),l&&h&&(Ft(e[c],0,pi)?i[c]=i[c+1]=0:(n=i[c]/e[c],o=i[c+1]/e[c],r=Math.pow(n,2)+Math.pow(o,2),r<=9||(a=3/Math.sqrt(r),i[c]=n*a*e[c],i[c+1]=o*a*e[c])))}(t,n,o),function(t,e,i="x"){const s=bi(i),n=t.length;let o,a,r,l=mi(t,0);for(let h=0;h<n;++h){if(a=r,r=l,l=mi(t,h+1),!r)continue;const n=r[i],c=r[s];a&&(o=(n-a[i])/3,r[`cp1${i}`]=n-o,r[`cp1${s}`]=c-o*e[h]),l&&(o=(l[i]-n)/3,r[`cp2${i}`]=n+o,r[`cp2${s}`]=c+o*e[h])}}(t,o,e)}(t,n);else{let i=s?t[t.length-1]:t[0];for(o=0,a=t.length;o<a;++o)r=t[o],l=xi(i,r,t[Math.min(o+1,a-(s?0:1))%a],e.tension),r.cp1x=l.previous.x,r.cp1y=l.previous.y,r.cp2x=l.next.x,r.cp2y=l.next.y,i=r}e.capBezierPoints&&function(t,e){let i,s,n,o,a,r=Re(t[0],e);for(i=0,s=t.length;i<s;++i)a=o,o=r,r=i<s-1&&Re(t[i+1],e),o&&(n=t[i],a&&(n.cp1x=yi(n.cp1x,e.left,e.right),n.cp1y=yi(n.cp1y,e.top,e.bottom)),r&&(n.cp2x=yi(n.cp2x,e.left,e.right),n.cp2y=yi(n.cp2y,e.top,e.bottom)))}(t,i)}function vi(){return"undefined"!=typeof window&&"undefined"!=typeof document}function Ai(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function wi(t,e,i){let s;return"string"==typeof t?(s=parseInt(t,10),-1!==t.indexOf("%")&&(s=s/100*e.parentNode[i])):s=t,s}const Mi=t=>t.ownerDocument.defaultView.getComputedStyle(t,null),ki=["top","right","bottom","left"];function Ci(t,e,i){const s={};i=i?"-"+i:"";for(let n=0;n<4;n++){const o=ki[n];s[o]=parseFloat(t[e+"-"+o+i])||0}return s.width=s.left+s.right,s.height=s.top+s.bottom,s}const Ei=(t,e,i)=>(t>0||e>0)&&(!i||!i.shadowRoot);function Si(t,e){if("native"in t)return t;const{canvas:i,currentDevicePixelRatio:s}=e,n=Mi(i),o="border-box"===n.boxSizing,a=Ci(n,"padding"),r=Ci(n,"border","width"),{x:l,y:h,box:c}=function(t,e){const i=t.touches,s=i&&i.length?i[0]:t,{offsetX:n,offsetY:o}=s;let a,r,l=!1;if(Ei(n,o,t.target))a=n,r=o;else{const t=e.getBoundingClientRect();a=s.clientX-t.left,r=s.clientY-t.top,l=!0}return{x:a,y:r,box:l}}(t,i),d=a.left+(c&&r.left),u=a.top+(c&&r.top);let{width:f,height:g}=e;return o&&(f-=a.width+r.width,g-=a.height+r.height),{x:Math.round((l-d)/f*i.width/s),y:Math.round((h-u)/g*i.height/s)}}const Di=t=>Math.round(10*t)/10;function Pi(t,e,i){const s=e||1,n=Math.floor(t.height*s),o=Math.floor(t.width*s);t.height=Math.floor(t.height),t.width=Math.floor(t.width);const a=t.canvas;return a.style&&(i||!a.style.height&&!a.style.width)&&(a.style.height=`${t.height}px`,a.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==s||a.height!==n||a.width!==o)&&(t.currentDevicePixelRatio=s,a.height=n,a.width=o,t.ctx.setTransform(s,0,0,s,0,0),!0)}const Oi=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};window.addEventListener("test",null,e),window.removeEventListener("test",null,e)}catch(t){}return t}();function Ti(t,e){const i=function(t,e){return Mi(t).getPropertyValue(e)}(t,e),s=i&&i.match(/^(\d+)(\.\d+)?px$/);return s?+s[1]:void 0}function Bi(t,e,i,s){return{x:t.x+i*(e.x-t.x),y:t.y+i*(e.y-t.y)}}function Li(t,e,i,s){return{x:t.x+i*(e.x-t.x),y:"middle"===s?i<.5?t.y:e.y:"after"===s?i<1?t.y:e.y:i>0?e.y:t.y}}function Ri(t,e,i,s){const n={x:t.cp2x,y:t.cp2y},o={x:e.cp1x,y:e.cp1y},a=Bi(t,n,i),r=Bi(n,o,i),l=Bi(o,e,i),h=Bi(a,r,i),c=Bi(r,l,i);return Bi(h,c,i)}function Ii(t,e,i){return t?function(t,e){return{x:i=>t+t+e-i,setWidth(t){e=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,e)=>t-e,leftForLtr:(t,e)=>t-e}}(e,i):{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,e)=>t+e,leftForLtr:(t,e)=>t}}function zi(t,e){let i,s;"ltr"!==e&&"rtl"!==e||(i=t.canvas.style,s=[i.getPropertyValue("direction"),i.getPropertyPriority("direction")],i.setProperty("direction",e,"important"),t.prevTextDirection=s)}function Fi(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function Wi(t){return"angle"===t?{between:qt,compare:Xt,normalize:Zt}:{between:Gt,compare:(t,e)=>t-e,normalize:t=>t}}function Vi({start:t,end:e,count:i,loop:s,style:n}){return{start:t%i,end:e%i,loop:s&&(e-t+1)%i==0,style:n}}function Ni(t,e,i){if(!i)return[t];const{property:s,start:n,end:o}=i,a=e.length,{compare:r,between:l,normalize:h}=Wi(s),{start:c,end:d,loop:u,style:f}=function(t,e,i){const{property:s,start:n,end:o}=i,{between:a,normalize:r}=Wi(s),l=e.length;let h,c,{start:d,end:u,loop:f}=t;if(f){for(d+=l,u+=l,h=0,c=l;h<c&&a(r(e[d%l][s]),n,o);++h)d--,u--;d%=l,u%=l}return u<d&&(u+=l),{start:d,end:u,loop:f,style:t.style}}(t,e,i),g=[];let p,m,b,x=!1,y=null;for(let t=c,i=c;t<=d;++t)m=e[t%a],m.skip||(p=h(m[s]),p!==b&&(x=l(p,n,o),null===y&&(x||l(n,b,p)&&0!==r(n,b))&&(y=0===r(p,n)?t:i),null!==y&&(!x||0===r(o,p)||l(o,b,p))&&(g.push(Vi({start:y,end:t,loop:u,count:a,style:f})),y=null),i=t,b=p));return null!==y&&g.push(Vi({start:y,end:d,loop:u,count:a,style:f})),g}function ji(t,e){const i=[],s=t.segments;for(let n=0;n<s.length;n++){const o=Ni(s[n],t.points,e);o.length&&i.push(...o)}return i}function Hi(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function $i(t,e){if(!e)return!1;const i=[],s=function(t,e){return ge(e)?(i.includes(e)||i.push(e),i.indexOf(e)):e};return JSON.stringify(t,s)!==JSON.stringify(e,s)}class Yi{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,i,s){const n=e.listeners[s],o=e.duration;n.forEach((s=>s({chart:t,initial:e.initial,numSteps:o,currentStep:Math.min(i-e.start,o)})))}_refresh(){this._request||(this._running=!0,this._request=ne.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(t=Date.now()){let e=0;this._charts.forEach(((i,s)=>{if(!i.running||!i.items.length)return;const n=i.items;let o,a=n.length-1,r=!1;for(;a>=0;--a)o=n[a],o._active?(o._total>i.duration&&(i.duration=o._total),o.tick(t),r=!0):(n[a]=n[n.length-1],n.pop());r&&(s.draw(),this._notify(s,i,t,"progress")),n.length||(i.running=!1,this._notify(s,i,t,"complete"),i.initial=!1),e+=n.length})),this._lastDate=t,0===e&&(this._running=!1)}_getAnims(t){const e=this._charts;let i=e.get(t);return i||(i={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,i)),i}listen(t,e,i){this._getAnims(t).listeners[e].push(i)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce(((t,e)=>Math.max(t,e._duration)),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const i=e.items;let s=i.length-1;for(;s>=0;--s)i[s].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}}var Ui=new Yi;const Xi="transparent",Zi={boolean:(t,e,i)=>i>.5?e:t,color(t,e,i){const s=pe(t||Xi),n=s.valid&&pe(e||Xi);return n&&n.valid?n.mix(s,i).hexString():e},number:(t,e,i)=>t+(e-t)*i};class qi{constructor(t,e,i,s){const n=e[i];s=Qe([t.to,s,n,t.from]);const o=Qe([t.from,n,s]);this._active=!0,this._fn=t.fn||Zi[t.type||typeof o],this._easing=fe[t.easing]||fe.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=i,this._from=o,this._to=s,this._promises=void 0}active(){return this._active}update(t,e,i){if(this._active){this._notify(!1);const s=this._target[this._prop],n=i-this._start,o=this._duration-n;this._start=i,this._duration=Math.floor(Math.max(o,t.duration)),this._total+=n,this._loop=!!t.loop,this._to=Qe([t.to,e,s,t.from]),this._from=Qe([t.from,s,e])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){const e=t-this._start,i=this._duration,s=this._prop,n=this._from,o=this._loop,a=this._to;let r;if(this._active=n!==a&&(o||e<i),!this._active)return this._target[s]=a,void this._notify(!0);e<0?this._target[s]=n:(r=e/i%2,r=o&&r>1?2-r:r,r=this._easing(Math.min(1,Math.max(0,r))),this._target[s]=this._fn(n,a,r))}wait(){const t=this._promises||(this._promises=[]);return new Promise(((e,i)=>{t.push({res:e,rej:i})}))}_notify(t){const e=t?"res":"rej",i=this._promises||[];for(let t=0;t<i.length;t++)i[t][e]()}}class Ki{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!lt(t))return;const e=Object.keys(Se.animation),i=this._properties;Object.getOwnPropertyNames(t).forEach((s=>{const n=t[s];if(!lt(n))return;const o={};for(const t of e)o[t]=n[t];(rt(n.properties)&&n.properties||[s]).forEach((t=>{t!==s&&i.has(t)||i.set(t,o)}))}))}_animateOptions(t,e){const i=e.options,s=function(t,e){if(!e)return;let i=t.options;if(i)return i.$shared&&(t.options=i=Object.assign({},i,{$shared:!1,$animations:{}})),i;t.options=e}(t,i);if(!s)return[];const n=this._createAnimations(s,i);return i.$shared&&function(t,e){const i=[],s=Object.keys(e);for(let e=0;e<s.length;e++){const n=t[s[e]];n&&n.active()&&i.push(n.wait())}return Promise.all(i)}(t.options.$animations,i).then((()=>{t.options=i}),(()=>{})),n}_createAnimations(t,e){const i=this._properties,s=[],n=t.$animations||(t.$animations={}),o=Object.keys(e),a=Date.now();let r;for(r=o.length-1;r>=0;--r){const l=o[r];if("$"===l.charAt(0))continue;if("options"===l){s.push(...this._animateOptions(t,e));continue}const h=e[l];let c=n[l];const d=i.get(l);if(c){if(d&&c.active()){c.update(d,h,a);continue}c.cancel()}d&&d.duration?(n[l]=c=new qi(d,t,l,h),s.push(c)):t[l]=h}return s}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const i=this._createAnimations(t,e);return i.length?(Ui.add(this._chart,i),!0):void 0}}function Gi(t,e){const i=t&&t.options||{},s=i.reverse,n=void 0===i.min?e:0,o=void 0===i.max?e:0;return{start:s?o:n,end:s?n:o}}function Ji(t,e){const i=[],s=t._getSortedDatasetMetas(e);let n,o;for(n=0,o=s.length;n<o;++n)i.push(s[n].index);return i}function Qi(t,e,i,s={}){const n=t.keys,o="single"===s.mode;let a,r,l,h;if(null!==e){for(a=0,r=n.length;a<r;++a){if(l=+n[a],l===i){if(s.all)continue;break}h=t.values[l],ht(h)&&(o||0===e||zt(e)===zt(h))&&(e+=h)}return e}}function ts(t,e){const i=t&&t.options.stacked;return i||void 0===i&&void 0!==e.stack}function es(t,e,i){const s=t[e]||(t[e]={});return s[i]||(s[i]={})}function is(t,e,i,s){for(const n of e.getMatchingVisibleMetas(s).reverse()){const e=t[n.index];if(i&&e>0||!i&&e<0)return n.index}return null}function ss(t,e){const{chart:i,_cachedMeta:s}=t,n=i._stacks||(i._stacks={}),{iScale:o,vScale:a,index:r}=s,l=o.axis,h=a.axis,c=function(t,e,i){return`${t.id}.${e.id}.${i.stack||i.type}`}(o,a,s),d=e.length;let u;for(let t=0;t<d;++t){const i=e[t],{[l]:o,[h]:d}=i;u=(i._stacks||(i._stacks={}))[h]=es(n,c,o),u[r]=d,u._top=is(u,a,!0,s.type),u._bottom=is(u,a,!1,s.type),(u._visualValues||(u._visualValues={}))[r]=d}}function ns(t,e){const i=t.scales;return Object.keys(i).filter((t=>i[t].axis===e)).shift()}function os(t,e){const i=t.controller.index,s=t.vScale&&t.vScale.axis;if(s){e=e||t._parsed;for(const t of e){const e=t._stacks;if(!e||void 0===e[s]||void 0===e[s][i])return;delete e[s][i],void 0!==e[s]._visualValues&&void 0!==e[s]._visualValues[i]&&delete e[s]._visualValues[i]}}}const as=t=>"reset"===t||"none"===t,rs=(t,e)=>e?t:Object.assign({},t);class ls{static defaults={};static datasetElementType=null;static dataElementType=null;constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.supportsDecimation=!1,this.$context=void 0,this._syncList=[],this.datasetElementType=new.target.datasetElementType,this.dataElementType=new.target.dataElementType,this.initialize()}initialize(){const t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=ts(t.vScale,t),this.addElements(),this.options.fill&&!this.chart.isPluginEnabled("filler")&&console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options")}updateIndex(t){this.index!==t&&os(this._cachedMeta),this.index=t}linkScales(){const t=this.chart,e=this._cachedMeta,i=this.getDataset(),s=(t,e,i,s)=>"x"===t?e:"r"===t?s:i,n=e.xAxisID=dt(i.xAxisID,ns(t,"x")),o=e.yAxisID=dt(i.yAxisID,ns(t,"y")),a=e.rAxisID=dt(i.rAxisID,ns(t,"r")),r=e.indexAxis,l=e.iAxisID=s(r,n,o,a),h=e.vAxisID=s(r,o,n,a);e.xScale=this.getScaleForId(n),e.yScale=this.getScaleForId(o),e.rScale=this.getScaleForId(a),e.iScale=this.getScaleForId(l),e.vScale=this.getScaleForId(h)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&ie(this._data,this),t._stacked&&os(t)}_dataCheck(){const t=this.getDataset(),e=t.data||(t.data=[]),i=this._data;if(lt(e))this._data=function(t){const e=Object.keys(t),i=new Array(e.length);let s,n,o;for(s=0,n=e.length;s<n;++s)o=e[s],i[s]={x:o,y:t[o]};return i}(e);else if(i!==e){if(i){ie(i,this);const t=this._cachedMeta;os(t),t._parsed=[]}e&&Object.isExtensible(e)&&(this,(s=e)._chartjs?s._chartjs.listeners.push(this):(Object.defineProperty(s,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[this]}}),ee.forEach((t=>{const e="_onData"+Mt(t),i=s[t];Object.defineProperty(s,t,{configurable:!0,enumerable:!1,value(...t){const n=i.apply(this,t);return s._chartjs.listeners.forEach((i=>{"function"==typeof i[e]&&i[e](...t)})),n}})})))),this._syncList=[],this._data=e}var s}addElements(){const t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){const e=this._cachedMeta,i=this.getDataset();let s=!1;this._dataCheck();const n=e._stacked;e._stacked=ts(e.vScale,e),e.stack!==i.stack&&(s=!0,os(e),e.stack=i.stack),this._resyncElements(t),(s||n!==e._stacked)&&ss(this,e._parsed)}configure(){const t=this.chart.config,e=t.datasetScopeKeys(this._type),i=t.getOptionScopes(this.getDataset(),e,!0);this.options=t.createResolver(i,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,e){const{_cachedMeta:i,_data:s}=this,{iScale:n,_stacked:o}=i,a=n.axis;let r,l,h,c=0===t&&e===s.length||i._sorted,d=t>0&&i._parsed[t-1];if(!1===this._parsing)i._parsed=s,i._sorted=!0,h=s;else{h=rt(s[t])?this.parseArrayData(i,s,t,e):lt(s[t])?this.parseObjectData(i,s,t,e):this.parsePrimitiveData(i,s,t,e);const n=()=>null===l[a]||d&&l[a]<d[a];for(r=0;r<e;++r)i._parsed[r+t]=l=h[r],c&&(n()&&(c=!1),d=l);i._sorted=c}o&&ss(this,h)}parsePrimitiveData(t,e,i,s){const{iScale:n,vScale:o}=t,a=n.axis,r=o.axis,l=n.getLabels(),h=n===o,c=new Array(s);let d,u,f;for(d=0,u=s;d<u;++d)f=d+i,c[d]={[a]:h||n.parse(l[f],f),[r]:o.parse(e[f],f)};return c}parseArrayData(t,e,i,s){const{xScale:n,yScale:o}=t,a=new Array(s);let r,l,h,c;for(r=0,l=s;r<l;++r)h=r+i,c=e[h],a[r]={x:n.parse(c[0],h),y:o.parse(c[1],h)};return a}parseObjectData(t,e,i,s){const{xScale:n,yScale:o}=t,{xAxisKey:a="x",yAxisKey:r="y"}=this._parsing,l=new Array(s);let h,c,d,u;for(h=0,c=s;h<c;++h)d=h+i,u=e[d],l[h]={x:n.parse(wt(u,a),d),y:o.parse(wt(u,r),d)};return l}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,i){const s=this.chart,n=this._cachedMeta,o=e[t.axis];return Qi({keys:Ji(s,!0),values:e._stacks[t.axis]._visualValues},o,n.index,{mode:i})}updateRangeFromParsed(t,e,i,s){const n=i[e.axis];let o=null===n?NaN:n;const a=s&&i._stacks[e.axis];s&&a&&(s.values=a,o=Qi(s,n,this._cachedMeta.index)),t.min=Math.min(t.min,o),t.max=Math.max(t.max,o)}getMinMax(t,e){const i=this._cachedMeta,s=i._parsed,n=i._sorted&&t===i.iScale,o=s.length,a=this._getOtherScale(t),r=((t,e,i)=>t&&!e.hidden&&e._stacked&&{keys:Ji(i,!0),values:null})(e,i,this.chart),l={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:h,max:c}=function(t){const{min:e,max:i,minDefined:s,maxDefined:n}=t.getUserBounds();return{min:s?e:Number.NEGATIVE_INFINITY,max:n?i:Number.POSITIVE_INFINITY}}(a);let d,u;function f(){u=s[d];const e=u[a.axis];return!ht(u[t.axis])||h>e||c<e}for(d=0;d<o&&(f()||(this.updateRangeFromParsed(l,t,u,r),!n));++d);if(n)for(d=o-1;d>=0;--d)if(!f()){this.updateRangeFromParsed(l,t,u,r);break}return l}getAllParsedValues(t){const e=this._cachedMeta._parsed,i=[];let s,n,o;for(s=0,n=e.length;s<n;++s)o=e[s][t.axis],ht(o)&&i.push(o);return i}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,i=e.iScale,s=e.vScale,n=this.getParsed(t);return{label:i?""+i.getLabelForValue(n[i.axis]):"",value:s?""+s.getLabelForValue(n[s.axis]):""}}_update(t){const e=this._cachedMeta;this.update(t||"default"),e._clip=function(t){let e,i,s,n;return lt(t)?(e=t.top,i=t.right,s=t.bottom,n=t.left):e=i=s=n=t,{top:e,right:i,bottom:s,left:n,disabled:!1===t}}(dt(this.options.clip,function(t,e,i){if(!1===i)return!1;const s=Gi(t,i),n=Gi(e,i);return{top:n.end,right:s.end,bottom:n.start,left:s.start}}(e.xScale,e.yScale,this.getMaxOverflow())))}update(t){}draw(){const t=this._ctx,e=this.chart,i=this._cachedMeta,s=i.data||[],n=e.chartArea,o=[],a=this._drawStart||0,r=this._drawCount||s.length-a,l=this.options.drawActiveElementsOnTop;let h;for(i.dataset&&i.dataset.draw(t,n,a,r),h=a;h<a+r;++h){const e=s[h];e.hidden||(e.active&&l?o.push(e):e.draw(t,n))}for(h=0;h<o.length;++h)o[h].draw(t,n)}getStyle(t,e){const i=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(i):this.resolveDataElementOptions(t||0,i)}getContext(t,e,i){const s=this.getDataset();let n;if(t>=0&&t<this._cachedMeta.data.length){const e=this._cachedMeta.data[t];n=e.$context||(e.$context=function(t,e,i){return ti(t,{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:i,index:e,mode:"default",type:"data"})}(this.getContext(),t,e)),n.parsed=this.getParsed(t),n.raw=s.data[t],n.index=n.dataIndex=t}else n=this.$context||(this.$context=function(t,e){return ti(t,{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),n.dataset=s,n.index=n.datasetIndex=this.index;return n.active=!!e,n.mode=i,n}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",i){const s="active"===e,n=this._cachedDataOpts,o=t+"-"+e,a=n[o],r=this.enableOptionSharing&&kt(i);if(a)return rs(a,r);const l=this.chart.config,h=l.datasetElementScopeKeys(this._type,t),c=s?[`${t}Hover`,"hover",t,""]:[t,""],d=l.getOptionScopes(this.getDataset(),h),u=Object.keys(Se.elements[t]),f=l.resolveNamedOptions(d,u,(()=>this.getContext(i,s,e)),c);return f.$shared&&(f.$shared=r,n[o]=Object.freeze(rs(f,r))),f}_resolveAnimations(t,e,i){const s=this.chart,n=this._cachedDataOpts,o=`animation-${e}`,a=n[o];if(a)return a;let r;if(!1!==s.options.animation){const s=this.chart.config,n=s.datasetAnimationScopeKeys(this._type,e),o=s.getOptionScopes(this.getDataset(),n);r=s.createResolver(o,this.getContext(t,i,e))}const l=new Ki(s,r&&r.animations);return r&&r._cacheable&&(n[o]=Object.freeze(l)),l}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||as(t)||this.chart._animationsDisabled}_getSharedOptions(t,e){const i=this.resolveDataElementOptions(t,e),s=this._sharedOptions,n=this.getSharedOptions(i),o=this.includeOptions(e,n)||n!==s;return this.updateSharedOptions(n,e,i),{sharedOptions:n,includeOptions:o}}updateElement(t,e,i,s){as(s)?Object.assign(t,i):this._resolveAnimations(e,s).update(t,i)}updateSharedOptions(t,e,i){t&&!as(e)&&this._resolveAnimations(void 0,e).update(t,i)}_setStyle(t,e,i,s){t.active=s;const n=this.getStyle(e,s);this._resolveAnimations(e,i,s).update(t,{options:!s&&this.getSharedOptions(n)||n})}removeHoverStyle(t,e,i){this._setStyle(t,i,"active",!1)}setHoverStyle(t,e,i){this._setStyle(t,i,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this._data,i=this._cachedMeta.data;for(const[t,e,i]of this._syncList)this[t](e,i);this._syncList=[];const s=i.length,n=e.length,o=Math.min(n,s);o&&this.parse(0,o),n>s?this._insertElements(s,n-s,t):n<s&&this._removeElements(n,s-n)}_insertElements(t,e,i=!0){const s=this._cachedMeta,n=s.data,o=t+e;let a;const r=t=>{for(t.length+=e,a=t.length-1;a>=o;a--)t[a]=t[a-e]};for(r(n),a=t;a<o;++a)n[a]=new this.dataElementType;this._parsing&&r(s._parsed),this.parse(t,e),i&&this.updateElements(n,t,e,"reset")}updateElements(t,e,i,s){}_removeElements(t,e){const i=this._cachedMeta;if(this._parsing){const s=i._parsed.splice(t,e);i._stacked&&os(i,s)}i.data.splice(t,e)}_sync(t){if(this._parsing)this._syncList.push(t);else{const[e,i,s]=t;this[e](i,s)}this.chart._dataChanges.push([this.index,...t])}_onDataPush(){const t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){e&&this._sync(["_removeElements",t,e]);const i=arguments.length-2;i&&this._sync(["_insertElements",t,i])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function hs(t){const e=t.iScale,i=function(t,e){if(!t._cache.$bar){const i=t.getMatchingVisibleMetas(e);let s=[];for(let e=0,n=i.length;e<n;e++)s=s.concat(i[e].controller.getAllParsedValues(t));t._cache.$bar=se(s.sort(((t,e)=>t-e)))}return t._cache.$bar}(e,t.type);let s,n,o,a,r=e._length;const l=()=>{32767!==o&&-32768!==o&&(kt(a)&&(r=Math.min(r,Math.abs(o-a)||r)),a=o)};for(s=0,n=i.length;s<n;++s)o=e.getPixelForValue(i[s]),l();for(a=void 0,s=0,n=e.ticks.length;s<n;++s)o=e.getPixelForTick(s),l();return r}function cs(t,e,i,s){return rt(t)?function(t,e,i,s){const n=i.parse(t[0],s),o=i.parse(t[1],s),a=Math.min(n,o),r=Math.max(n,o);let l=a,h=r;Math.abs(a)>Math.abs(r)&&(l=r,h=a),e[i.axis]=h,e._custom={barStart:l,barEnd:h,start:n,end:o,min:a,max:r}}(t,e,i,s):e[i.axis]=i.parse(t,s),e}function ds(t,e,i,s){const n=t.iScale,o=t.vScale,a=n.getLabels(),r=n===o,l=[];let h,c,d,u;for(h=i,c=i+s;h<c;++h)u=e[h],d={},d[n.axis]=r||n.parse(a[h],h),l.push(cs(u,d,o,h));return l}function us(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function fs(t,e,i,s){let n=e.borderSkipped;const o={};if(!n)return void(t.borderSkipped=o);if(!0===n)return void(t.borderSkipped={top:!0,right:!0,bottom:!0,left:!0});const{start:a,end:r,reverse:l,top:h,bottom:c}=function(t){let e,i,s,n,o;return t.horizontal?(e=t.base>t.x,i="left",s="right"):(e=t.base<t.y,i="bottom",s="top"),e?(n="end",o="start"):(n="start",o="end"),{start:i,end:s,reverse:e,top:n,bottom:o}}(t);"middle"===n&&i&&(t.enableBorderRadius=!0,(i._top||0)===s?n=h:(i._bottom||0)===s?n=c:(o[gs(c,a,r,l)]=!0,n=h)),o[gs(n,a,r,l)]=!0,t.borderSkipped=o}function gs(t,e,i,s){var n,o,a;return s?(a=i,t=ps(t=(n=t)===(o=e)?a:n===a?o:n,i,e)):t=ps(t,e,i),t}function ps(t,e,i){return"start"===t?e:"end"===t?i:t}function ms(t,{inflateAmount:e},i){t.inflateAmount="auto"===e?1===i?.33:0:e}class bs extends ls{static id="doughnut";static defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"};static descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t&&!t.startsWith("borderDash")&&!t.startsWith("hoverBorderDash")};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i,color:s}}=t.legend.options;return e.labels.map(((e,n)=>{const o=t.getDatasetMeta(0).controller.getStyle(n);return{text:e,fillStyle:o.backgroundColor,strokeStyle:o.borderColor,fontColor:s,lineWidth:o.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(n),index:n}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}}}};constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){const i=this.getDataset().data,s=this._cachedMeta;if(!1===this._parsing)s._parsed=i;else{let n,o,a=t=>+i[t];if(lt(i[t])){const{key:t="value"}=this._parsing;a=e=>+wt(i[e],t)}for(n=t,o=t+e;n<o;++n)s._parsed[n]=a(n)}}_getRotation(){return jt(this.options.rotation-90)}_getCircumference(){return jt(this.options.circumference)}_getRotationExtents(){let t=Dt,e=-Dt;for(let i=0;i<this.chart.data.datasets.length;++i)if(this.chart.isDatasetVisible(i)&&this.chart.getDatasetMeta(i).type===this._type){const s=this.chart.getDatasetMeta(i).controller,n=s._getRotation(),o=s._getCircumference();t=Math.min(t,n),e=Math.max(e,n+o)}return{rotation:t,circumference:e-t}}update(t){const e=this.chart,{chartArea:i}=e,s=this._cachedMeta,n=s.data,o=this.getMaxBorderWidth()+this.getMaxOffset(n)+this.options.spacing,a=Math.max((Math.min(i.width,i.height)-o)/2,0),r=Math.min((h=a,"string"==typeof(l=this.options.cutout)&&l.endsWith("%")?parseFloat(l)/100:+l/h),1);var l,h;const c=this._getRingWeight(this.index),{circumference:d,rotation:u}=this._getRotationExtents(),{ratioX:f,ratioY:g,offsetX:p,offsetY:m}=function(t,e,i){let s=1,n=1,o=0,a=0;if(e<Dt){const r=t,l=r+e,h=Math.cos(r),c=Math.sin(r),d=Math.cos(l),u=Math.sin(l),f=(t,e,s)=>qt(t,r,l,!0)?1:Math.max(e,e*i,s,s*i),g=(t,e,s)=>qt(t,r,l,!0)?-1:Math.min(e,e*i,s,s*i),p=f(0,h,d),m=f(Bt,c,u),b=g(St,h,d),x=g(St+Bt,c,u);s=(p-b)/2,n=(m-x)/2,o=-(p+b)/2,a=-(m+x)/2}return{ratioX:s,ratioY:n,offsetX:o,offsetY:a}}(u,d,r),b=(i.width-o)/f,x=(i.height-o)/g,y=Math.max(Math.min(b,x)/2,0),_=ut(this.options.radius,y),v=(_-Math.max(_*r,0))/this._getVisibleDatasetWeightTotal();this.offsetX=p*_,this.offsetY=m*_,s.total=this.calculateTotal(),this.outerRadius=_-v*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-v*c,0),this.updateElements(n,0,n.length,t)}_circumference(t,e){const i=this.options,s=this._cachedMeta,n=this._getCircumference();return e&&i.animation.animateRotate||!this.chart.getDataVisibility(t)||null===s._parsed[t]||s.data[t].hidden?0:this.calculateCircumference(s._parsed[t]*n/Dt)}updateElements(t,e,i,s){const n="reset"===s,o=this.chart,a=o.chartArea,r=o.options.animation,l=(a.left+a.right)/2,h=(a.top+a.bottom)/2,c=n&&r.animateScale,d=c?0:this.innerRadius,u=c?0:this.outerRadius,{sharedOptions:f,includeOptions:g}=this._getSharedOptions(e,s);let p,m=this._getRotation();for(p=0;p<e;++p)m+=this._circumference(p,n);for(p=e;p<e+i;++p){const e=this._circumference(p,n),i=t[p],o={x:l+this.offsetX,y:h+this.offsetY,startAngle:m,endAngle:m+e,circumference:e,outerRadius:u,innerRadius:d};g&&(o.options=f||this.resolveDataElementOptions(p,i.active?"active":s)),m+=e,this.updateElement(i,p,o,s)}}calculateTotal(){const t=this._cachedMeta,e=t.data;let i,s=0;for(i=0;i<e.length;i++){const n=t._parsed[i];null===n||isNaN(n)||!this.chart.getDataVisibility(i)||e[i].hidden||(s+=Math.abs(n))}return s}calculateCircumference(t){const e=this._cachedMeta.total;return e>0&&!isNaN(t)?Dt*(Math.abs(t)/e):0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,s=i.data.labels||[],n=_e(e._parsed[t],i.options.locale);return{label:s[t]||"",value:n}}getMaxBorderWidth(t){let e=0;const i=this.chart;let s,n,o,a,r;if(!t)for(s=0,n=i.data.datasets.length;s<n;++s)if(i.isDatasetVisible(s)){o=i.getDatasetMeta(s),t=o.data,a=o.controller;break}if(!t)return 0;for(s=0,n=t.length;s<n;++s)r=a.resolveDataElementOptions(s),"inner"!==r.borderAlign&&(e=Math.max(e,r.borderWidth||0,r.hoverBorderWidth||0));return e}getMaxOffset(t){let e=0;for(let i=0,s=t.length;i<s;++i){const t=this.resolveDataElementOptions(i);e=Math.max(e,t.offset||0,t.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let i=0;i<t;++i)this.chart.isDatasetVisible(i)&&(e+=this._getRingWeight(i));return e}_getRingWeight(t){return Math.max(dt(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}class xs extends ls{static id="polarArea";static defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i,color:s}}=t.legend.options;return e.labels.map(((e,n)=>{const o=t.getDatasetMeta(0).controller.getStyle(n);return{text:e,fillStyle:o.backgroundColor,strokeStyle:o.borderColor,fontColor:s,lineWidth:o.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(n),index:n}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,s=i.data.labels||[],n=_e(e._parsed[t].r,i.options.locale);return{label:s[t]||"",value:n}}parseObjectData(t,e,i,s){return gi.bind(this)(t,e,i,s)}update(t){const e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}getMinMax(){const t=this._cachedMeta,e={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY};return t.data.forEach(((t,i)=>{const s=this.getParsed(i).r;!isNaN(s)&&this.chart.getDataVisibility(i)&&(s<e.min&&(e.min=s),s>e.max&&(e.max=s))})),e}_updateRadius(){const t=this.chart,e=t.chartArea,i=t.options,s=Math.min(e.right-e.left,e.bottom-e.top),n=Math.max(s/2,0),o=(n-Math.max(i.cutoutPercentage?n/100*i.cutoutPercentage:1,0))/t.getVisibleDatasetCount();this.outerRadius=n-o*this.index,this.innerRadius=this.outerRadius-o}updateElements(t,e,i,s){const n="reset"===s,o=this.chart,a=o.options.animation,r=this._cachedMeta.rScale,l=r.xCenter,h=r.yCenter,c=r.getIndexAngle(0)-.5*St;let d,u=c;const f=360/this.countVisibleElements();for(d=0;d<e;++d)u+=this._computeAngle(d,s,f);for(d=e;d<e+i;d++){const e=t[d];let i=u,g=u+this._computeAngle(d,s,f),p=o.getDataVisibility(d)?r.getDistanceFromCenterForValue(this.getParsed(d).r):0;u=g,n&&(a.animateScale&&(p=0),a.animateRotate&&(i=g=c));const m={x:l,y:h,innerRadius:0,outerRadius:p,startAngle:i,endAngle:g,options:this.resolveDataElementOptions(d,e.active?"active":s)};this.updateElement(e,d,m,s)}}countVisibleElements(){const t=this._cachedMeta;let e=0;return t.data.forEach(((t,i)=>{!isNaN(this.getParsed(i).r)&&this.chart.getDataVisibility(i)&&e++})),e}_computeAngle(t,e,i){return this.chart.getDataVisibility(t)?jt(this.resolveDataElementOptions(t,e).angle||i):0}}var ys=Object.freeze({__proto__:null,BarController:class extends ls{static id="bar";static defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}};static overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};parsePrimitiveData(t,e,i,s){return ds(t,e,i,s)}parseArrayData(t,e,i,s){return ds(t,e,i,s)}parseObjectData(t,e,i,s){const{iScale:n,vScale:o}=t,{xAxisKey:a="x",yAxisKey:r="y"}=this._parsing,l="x"===n.axis?a:r,h="x"===o.axis?a:r,c=[];let d,u,f,g;for(d=i,u=i+s;d<u;++d)g=e[d],f={},f[n.axis]=n.parse(wt(g,l),d),c.push(cs(wt(g,h),f,o,d));return c}updateRangeFromParsed(t,e,i,s){super.updateRangeFromParsed(t,e,i,s);const n=i._custom;n&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,n.min),t.max=Math.max(t.max,n.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:i,vScale:s}=e,n=this.getParsed(t),o=n._custom,a=us(o)?"["+o.start+", "+o.end+"]":""+s.getLabelForValue(n[s.axis]);return{label:""+i.getLabelForValue(n[i.axis]),value:a}}initialize(){this.enableOptionSharing=!0,super.initialize(),this._cachedMeta.stack=this.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,i,s){const n="reset"===s,{index:o,_cachedMeta:{vScale:a}}=this,r=a.getBasePixel(),l=a.isHorizontal(),h=this._getRuler(),{sharedOptions:c,includeOptions:d}=this._getSharedOptions(e,s);for(let u=e;u<e+i;u++){const e=this.getParsed(u),i=n||at(e[a.axis])?{base:r,head:r}:this._calculateBarValuePixels(u),f=this._calculateBarIndexPixels(u,h),g=(e._stacks||{})[a.axis],p={horizontal:l,base:i.base,enableBorderRadius:!g||us(e._custom)||o===g._top||o===g._bottom,x:l?i.head:f.center,y:l?f.center:i.head,height:l?f.size:Math.abs(i.size),width:l?Math.abs(i.size):f.size};d&&(p.options=c||this.resolveDataElementOptions(u,t[u].active?"active":s));const m=p.options||t[u].options;fs(p,m,g,o),ms(p,m,h.ratio),this.updateElement(t[u],u,p,s)}}_getStacks(t,e){const{iScale:i}=this._cachedMeta,s=i.getMatchingVisibleMetas(this._type).filter((t=>t.controller.options.grouped)),n=i.options.stacked,o=[],a=t=>{const i=t.controller.getParsed(e),s=i&&i[t.vScale.axis];if(at(s)||isNaN(s))return!0};for(const i of s)if((void 0===e||!a(i))&&((!1===n||-1===o.indexOf(i.stack)||void 0===n&&void 0===i.stack)&&o.push(i.stack),i.index===t))break;return o.length||o.push(void 0),o}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,i){const s=this._getStacks(t,i),n=void 0!==e?s.indexOf(e):-1;return-1===n?s.length-1:n}_getRuler(){const t=this.options,e=this._cachedMeta,i=e.iScale,s=[];let n,o;for(n=0,o=e.data.length;n<o;++n)s.push(i.getPixelForValue(this.getParsed(n)[i.axis],n));const a=t.barThickness;return{min:a||hs(e),pixels:s,start:i._startPixel,end:i._endPixel,stackCount:this._getStackCount(),scale:i,grouped:t.grouped,ratio:a?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){const{_cachedMeta:{vScale:e,_stacked:i,index:s},options:{base:n,minBarLength:o}}=this,a=n||0,r=this.getParsed(t),l=r._custom,h=us(l);let c,d,u=r[e.axis],f=0,g=i?this.applyStack(e,r,i):u;g!==u&&(f=g-u,g=u),h&&(u=l.barStart,g=l.barEnd-l.barStart,0!==u&&zt(u)!==zt(l.barEnd)&&(f=0),f+=u);const p=at(n)||h?f:n;let m=e.getPixelForValue(p);if(c=this.chart.getDataVisibility(t)?e.getPixelForValue(f+g):m,d=c-m,Math.abs(d)<o){d=function(t,e,i){return 0!==t?zt(t):(e.isHorizontal()?1:-1)*(e.min>=i?1:-1)}(d,e,a)*o,u===a&&(m-=d/2);const t=e.getPixelForDecimal(0),n=e.getPixelForDecimal(1),l=Math.min(t,n),f=Math.max(t,n);m=Math.max(Math.min(m,f),l),c=m+d,i&&!h&&(r._stacks[e.axis]._visualValues[s]=e.getValueForPixel(c)-e.getValueForPixel(m))}if(m===e.getPixelForValue(a)){const t=zt(d)*e.getLineWidthForValue(a)/2;m+=t,d-=t}return{size:d,base:m,head:c,center:c+d/2}}_calculateBarIndexPixels(t,e){const i=e.scale,s=this.options,n=s.skipNull,o=dt(s.maxBarThickness,1/0);let a,r;if(e.grouped){const i=n?this._getStackCount(t):e.stackCount,l="flex"===s.barThickness?function(t,e,i,s){const n=e.pixels,o=n[t];let a=t>0?n[t-1]:null,r=t<n.length-1?n[t+1]:null;const l=i.categoryPercentage;null===a&&(a=o-(null===r?e.end-e.start:r-o)),null===r&&(r=o+o-a);const h=o-(o-Math.min(a,r))/2*l;return{chunk:Math.abs(r-a)/2*l/s,ratio:i.barPercentage,start:h}}(t,e,s,i):function(t,e,i,s){const n=i.barThickness;let o,a;return at(n)?(o=e.min*i.categoryPercentage,a=i.barPercentage):(o=n*s,a=1),{chunk:o/s,ratio:a,start:e.pixels[t]-o/2}}(t,e,s,i),h=this._getStackIndex(this.index,this._cachedMeta.stack,n?t:void 0);a=l.start+l.chunk*h+l.chunk/2,r=Math.min(o,l.chunk*l.ratio)}else a=i.getPixelForValue(this.getParsed(t)[i.axis],t),r=Math.min(o,e.min*e.ratio);return{base:a-r/2,head:a+r/2,center:a,size:r}}draw(){const t=this._cachedMeta,e=t.vScale,i=t.data,s=i.length;let n=0;for(;n<s;++n)null!==this.getParsed(n)[e.axis]&&i[n].draw(this._ctx)}},BubbleController:class extends ls{static id="bubble";static defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}};static overrides={scales:{x:{type:"linear"},y:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,e,i,s){const n=super.parsePrimitiveData(t,e,i,s);for(let t=0;t<n.length;t++)n[t]._custom=this.resolveDataElementOptions(t+i).radius;return n}parseArrayData(t,e,i,s){const n=super.parseArrayData(t,e,i,s);for(let t=0;t<n.length;t++){const s=e[i+t];n[t]._custom=dt(s[2],this.resolveDataElementOptions(t+i).radius)}return n}parseObjectData(t,e,i,s){const n=super.parseObjectData(t,e,i,s);for(let t=0;t<n.length;t++){const s=e[i+t];n[t]._custom=dt(s&&s.r&&+s.r,this.resolveDataElementOptions(t+i).radius)}return n}getMaxOverflow(){const t=this._cachedMeta.data;let e=0;for(let i=t.length-1;i>=0;--i)e=Math.max(e,t[i].size(this.resolveDataElementOptions(i))/2);return e>0&&e}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart.data.labels||[],{xScale:s,yScale:n}=e,o=this.getParsed(t),a=s.getLabelForValue(o.x),r=n.getLabelForValue(o.y),l=o._custom;return{label:i[t]||"",value:"("+a+", "+r+(l?", "+l:"")+")"}}update(t){const e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,i,s){const n="reset"===s,{iScale:o,vScale:a}=this._cachedMeta,{sharedOptions:r,includeOptions:l}=this._getSharedOptions(e,s),h=o.axis,c=a.axis;for(let d=e;d<e+i;d++){const e=t[d],i=!n&&this.getParsed(d),u={},f=u[h]=n?o.getPixelForDecimal(.5):o.getPixelForValue(i[h]),g=u[c]=n?a.getBasePixel():a.getPixelForValue(i[c]);u.skip=isNaN(f)||isNaN(g),l&&(u.options=r||this.resolveDataElementOptions(d,e.active?"active":s),n&&(u.options.radius=0)),this.updateElement(e,d,u,s)}}resolveDataElementOptions(t,e){const i=this.getParsed(t);let s=super.resolveDataElementOptions(t,e);s.$shared&&(s=Object.assign({},s,{$shared:!1}));const n=s.radius;return"active"!==e&&(s.radius=0),s.radius+=dt(i&&i._custom,n),s}},DoughnutController:bs,LineController:class extends ls{static id="line";static defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1};static overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,this.supportsDecimation=!0,super.initialize()}update(t){const e=this._cachedMeta,{dataset:i,data:s=[],_dataset:n}=e,o=this.chart._animationsDisabled;let{start:a,count:r}=le(e,s,o);this._drawStart=a,this._drawCount=r,he(e)&&(a=0,r=s.length),i._chart=this.chart,i._datasetIndex=this.index,i._decimated=!!n._decimated,i.points=s;const l=this.resolveDatasetElementOptions(t);this.options.showLine||(l.borderWidth=0),l.segment=this.options.segment,this.updateElement(i,void 0,{animated:!o,options:l},t),this.updateElements(s,a,r,t)}updateElements(t,e,i,s){const n="reset"===s,{iScale:o,vScale:a,_stacked:r,_dataset:l}=this._cachedMeta,{sharedOptions:h,includeOptions:c}=this._getSharedOptions(e,s),d=o.axis,u=a.axis,{spanGaps:f,segment:g}=this.options,p=Vt(f)?f:Number.POSITIVE_INFINITY,m=this.chart._animationsDisabled||n||"none"===s,b=e+i,x=t.length;let y=e>0&&this.getParsed(e-1);for(let i=0;i<x;++i){const f=t[i],x=m?f:{};if(i<e||i>=b){x.skip=!0;continue}const _=this.getParsed(i),v=at(_[u]),A=x[d]=o.getPixelForValue(_[d],i),w=x[u]=n||v?a.getBasePixel():a.getPixelForValue(r?this.applyStack(a,_,r):_[u],i);x.skip=isNaN(A)||isNaN(w)||v,x.stop=i>0&&Math.abs(_[d]-y[d])>p,g&&(x.parsed=_,x.raw=l.data[i]),c&&(x.options=h||this.resolveDataElementOptions(i,f.active?"active":s)),m||this.updateElement(f,i,x,s),y=_}}getMaxOverflow(){const t=this._cachedMeta,e=t.dataset,i=e.options&&e.options.borderWidth||0,s=t.data||[];if(!s.length)return i;const n=s[0].size(this.resolveDataElementOptions(0)),o=s[s.length-1].size(this.resolveDataElementOptions(s.length-1));return Math.max(i,n,o)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}},PieController:class extends bs{static id="pie";static defaults={cutout:0,rotation:0,circumference:360,radius:"100%"}},PolarAreaController:xs,RadarController:class extends ls{static id="radar";static defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}};static overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};getLabelAndValue(t){const e=this._cachedMeta.vScale,i=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(i[e.axis])}}parseObjectData(t,e,i,s){return gi.bind(this)(t,e,i,s)}update(t){const e=this._cachedMeta,i=e.dataset,s=e.data||[],n=e.iScale.getLabels();if(i.points=s,"resize"!==t){const e=this.resolveDatasetElementOptions(t);this.options.showLine||(e.borderWidth=0);const o={_loop:!0,_fullLoop:n.length===s.length,options:e};this.updateElement(i,void 0,o,t)}this.updateElements(s,0,s.length,t)}updateElements(t,e,i,s){const n=this._cachedMeta.rScale,o="reset"===s;for(let a=e;a<e+i;a++){const e=t[a],i=this.resolveDataElementOptions(a,e.active?"active":s),r=n.getPointPositionForValue(a,this.getParsed(a).r),l=o?n.xCenter:r.x,h=o?n.yCenter:r.y,c={x:l,y:h,angle:r.angle,skip:isNaN(l)||isNaN(h),options:i};this.updateElement(e,a,c,s)}}},ScatterController:class extends ls{static id="scatter";static defaults={datasetElementType:!1,dataElementType:"point",showLine:!1,fill:!1};static overrides={interaction:{mode:"point"},scales:{x:{type:"linear"},y:{type:"linear"}}};getLabelAndValue(t){const e=this._cachedMeta,i=this.chart.data.labels||[],{xScale:s,yScale:n}=e,o=this.getParsed(t),a=s.getLabelForValue(o.x),r=n.getLabelForValue(o.y);return{label:i[t]||"",value:"("+a+", "+r+")"}}update(t){const e=this._cachedMeta,{data:i=[]}=e,s=this.chart._animationsDisabled;let{start:n,count:o}=le(e,i,s);if(this._drawStart=n,this._drawCount=o,he(e)&&(n=0,o=i.length),this.options.showLine){this.datasetElementType||this.addElements();const{dataset:n,_dataset:o}=e;n._chart=this.chart,n._datasetIndex=this.index,n._decimated=!!o._decimated,n.points=i;const a=this.resolveDatasetElementOptions(t);a.segment=this.options.segment,this.updateElement(n,void 0,{animated:!s,options:a},t)}else this.datasetElementType&&(delete e.dataset,this.datasetElementType=!1);this.updateElements(i,n,o,t)}addElements(){const{showLine:t}=this.options;!this.datasetElementType&&t&&(this.datasetElementType=this.chart.registry.getElement("line")),super.addElements()}updateElements(t,e,i,s){const n="reset"===s,{iScale:o,vScale:a,_stacked:r,_dataset:l}=this._cachedMeta,h=this.resolveDataElementOptions(e,s),c=this.getSharedOptions(h),d=this.includeOptions(s,c),u=o.axis,f=a.axis,{spanGaps:g,segment:p}=this.options,m=Vt(g)?g:Number.POSITIVE_INFINITY,b=this.chart._animationsDisabled||n||"none"===s;let x=e>0&&this.getParsed(e-1);for(let h=e;h<e+i;++h){const e=t[h],i=this.getParsed(h),g=b?e:{},y=at(i[f]),_=g[u]=o.getPixelForValue(i[u],h),v=g[f]=n||y?a.getBasePixel():a.getPixelForValue(r?this.applyStack(a,i,r):i[f],h);g.skip=isNaN(_)||isNaN(v)||y,g.stop=h>0&&Math.abs(i[u]-x[u])>m,p&&(g.parsed=i,g.raw=l.data[h]),d&&(g.options=c||this.resolveDataElementOptions(h,e.active?"active":s)),b||this.updateElement(e,h,g,s),x=i}this.updateSharedOptions(c,s,h)}getMaxOverflow(){const t=this._cachedMeta,e=t.data||[];if(!this.options.showLine){let t=0;for(let i=e.length-1;i>=0;--i)t=Math.max(t,e[i].size(this.resolveDataElementOptions(i))/2);return t>0&&t}const i=t.dataset,s=i.options&&i.options.borderWidth||0;if(!e.length)return s;const n=e[0].size(this.resolveDataElementOptions(0)),o=e[e.length-1].size(this.resolveDataElementOptions(e.length-1));return Math.max(s,n,o)/2}}});function _s(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class vs{static override(t){Object.assign(vs.prototype,t)}options;constructor(t){this.options=t||{}}init(){}formats(){return _s()}parse(){return _s()}format(){return _s()}add(){return _s()}diff(){return _s()}startOf(){return _s()}endOf(){return _s()}}var As=vs;function ws(t,e,i,s){const{controller:n,data:o,_sorted:a}=t,r=n._cachedMeta.iScale;if(r&&e===r.axis&&"r"!==e&&a&&o.length){const t=r._reversePixels?te:Qt;if(!s)return t(o,e,i);if(n._sharedOptions){const s=o[0],n="function"==typeof s.getRange&&s.getRange(e);if(n){const s=t(o,e,i-n),a=t(o,e,i+n);return{lo:s.lo,hi:a.hi}}}}return{lo:0,hi:o.length-1}}function Ms(t,e,i,s,n){const o=t.getSortedVisibleDatasetMetas(),a=i[e];for(let t=0,i=o.length;t<i;++t){const{index:i,data:r}=o[t],{lo:l,hi:h}=ws(o[t],e,a,n);for(let t=l;t<=h;++t){const e=r[t];e.skip||s(e,i,t)}}}function ks(t,e,i,s,n){const o=[];return n||t.isPointInArea(e)?(Ms(t,i,e,(function(i,a,r){(n||Re(i,t.chartArea,0))&&i.inRange(e.x,e.y,s)&&o.push({element:i,datasetIndex:a,index:r})}),!0),o):o}function Cs(t,e,i,s,n,o){return o||t.isPointInArea(e)?"r"!==i||s?function(t,e,i,s,n,o){let a=[];const r=function(t){const e=-1!==t.indexOf("x"),i=-1!==t.indexOf("y");return function(t,s){const n=e?Math.abs(t.x-s.x):0,o=i?Math.abs(t.y-s.y):0;return Math.sqrt(Math.pow(n,2)+Math.pow(o,2))}}(i);let l=Number.POSITIVE_INFINITY;return Ms(t,i,e,(function(i,h,c){const d=i.inRange(e.x,e.y,n);if(s&&!d)return;const u=i.getCenterPoint(n);if(!o&&!t.isPointInArea(u)&&!d)return;const f=r(e,u);f<l?(a=[{element:i,datasetIndex:h,index:c}],l=f):f===l&&a.push({element:i,datasetIndex:h,index:c})})),a}(t,e,i,s,n,o):function(t,e,i,s){let n=[];return Ms(t,i,e,(function(t,i,o){const{startAngle:a,endAngle:r}=t.getProps(["startAngle","endAngle"],s),{angle:l}=Yt(t,{x:e.x,y:e.y});qt(l,a,r)&&n.push({element:t,datasetIndex:i,index:o})})),n}(t,e,i,n):[]}function Es(t,e,i,s,n){const o=[],a="x"===i?"inXRange":"inYRange";let r=!1;return Ms(t,i,e,((t,s,l)=>{t[a](e[i],n)&&(o.push({element:t,datasetIndex:s,index:l}),r=r||t.inRange(e.x,e.y,n))})),s&&!r?[]:o}var Ss={evaluateInteractionItems:Ms,modes:{index(t,e,i,s){const n=Si(e,t),o=i.axis||"x",a=i.includeInvisible||!1,r=i.intersect?ks(t,n,o,s,a):Cs(t,n,o,!1,s,a),l=[];return r.length?(t.getSortedVisibleDatasetMetas().forEach((t=>{const e=r[0].index,i=t.data[e];i&&!i.skip&&l.push({element:i,datasetIndex:t.index,index:e})})),l):[]},dataset(t,e,i,s){const n=Si(e,t),o=i.axis||"xy",a=i.includeInvisible||!1;let r=i.intersect?ks(t,n,o,s,a):Cs(t,n,o,!1,s,a);if(r.length>0){const e=r[0].datasetIndex,i=t.getDatasetMeta(e).data;r=[];for(let t=0;t<i.length;++t)r.push({element:i[t],datasetIndex:e,index:t})}return r},point:(t,e,i,s)=>ks(t,Si(e,t),i.axis||"xy",s,i.includeInvisible||!1),nearest(t,e,i,s){const n=Si(e,t),o=i.axis||"xy",a=i.includeInvisible||!1;return Cs(t,n,o,i.intersect,s,a)},x:(t,e,i,s)=>Es(t,Si(e,t),"x",i.intersect,s),y:(t,e,i,s)=>Es(t,Si(e,t),"y",i.intersect,s)}};const Ds=["left","top","right","bottom"];function Ps(t,e){return t.filter((t=>t.pos===e))}function Os(t,e){return t.filter((t=>-1===Ds.indexOf(t.pos)&&t.box.axis===e))}function Ts(t,e){return t.sort(((t,i)=>{const s=e?i:t,n=e?t:i;return s.weight===n.weight?s.index-n.index:s.weight-n.weight}))}function Bs(t,e,i,s){return Math.max(t[i],e[i])+Math.max(t[s],e[s])}function Ls(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function Rs(t,e,i,s){const{pos:n,box:o}=i,a=t.maxPadding;if(!lt(n)){i.size&&(t[n]-=i.size);const e=s[i.stack]||{size:0,count:1};e.size=Math.max(e.size,i.horizontal?o.height:o.width),i.size=e.size/e.count,t[n]+=i.size}o.getPadding&&Ls(a,o.getPadding());const r=Math.max(0,e.outerWidth-Bs(a,t,"left","right")),l=Math.max(0,e.outerHeight-Bs(a,t,"top","bottom")),h=r!==t.w,c=l!==t.h;return t.w=r,t.h=l,i.horizontal?{same:h,other:c}:{same:c,other:h}}function Is(t,e){const i=e.maxPadding;return function(t){const s={left:0,top:0,right:0,bottom:0};return t.forEach((t=>{s[t]=Math.max(e[t],i[t])})),s}(t?["left","right"]:["top","bottom"])}function zs(t,e,i,s){const n=[];let o,a,r,l,h,c;for(o=0,a=t.length,h=0;o<a;++o){r=t[o],l=r.box,l.update(r.width||e.w,r.height||e.h,Is(r.horizontal,e));const{same:a,other:d}=Rs(e,i,r,s);h|=a&&n.length,c=c||d,l.fullSize||n.push(r)}return h&&zs(n,e,i,s)||c}function Fs(t,e,i,s,n){t.top=i,t.left=e,t.right=e+s,t.bottom=i+n,t.width=s,t.height=n}function Ws(t,e,i,s){const n=i.padding;let{x:o,y:a}=e;for(const r of t){const t=r.box,l=s[r.stack]||{count:1,placed:0,weight:1},h=r.stackWeight/l.weight||1;if(r.horizontal){const s=e.w*h,o=l.size||t.height;kt(l.start)&&(a=l.start),t.fullSize?Fs(t,n.left,a,i.outerWidth-n.right-n.left,o):Fs(t,e.left+l.placed,a,s,o),l.start=a,l.placed+=s,a=t.bottom}else{const s=e.h*h,a=l.size||t.width;kt(l.start)&&(o=l.start),t.fullSize?Fs(t,o,n.top,a,i.outerHeight-n.bottom-n.top):Fs(t,o,e.top+l.placed,a,s),l.start=o,l.placed+=s,o=t.right}}e.x=o,e.y=a}var Vs={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const i=t.boxes?t.boxes.indexOf(e):-1;-1!==i&&t.boxes.splice(i,1)},configure(t,e,i){e.fullSize=i.fullSize,e.position=i.position,e.weight=i.weight},update(t,e,i,s){if(!t)return;const n=Ge(t.options.layout.padding),o=Math.max(e-n.width,0),a=Math.max(i-n.height,0),r=function(t){const e=function(t){const e=[];let i,s,n,o,a,r;for(i=0,s=(t||[]).length;i<s;++i)n=t[i],({position:o,options:{stack:a,stackWeight:r=1}}=n),e.push({index:i,box:n,pos:o,horizontal:n.isHorizontal(),weight:n.weight,stack:a&&o+a,stackWeight:r});return e}(t),i=Ts(e.filter((t=>t.box.fullSize)),!0),s=Ts(Ps(e,"left"),!0),n=Ts(Ps(e,"right")),o=Ts(Ps(e,"top"),!0),a=Ts(Ps(e,"bottom")),r=Os(e,"x"),l=Os(e,"y");return{fullSize:i,leftAndTop:s.concat(o),rightAndBottom:n.concat(l).concat(a).concat(r),chartArea:Ps(e,"chartArea"),vertical:s.concat(n).concat(l),horizontal:o.concat(a).concat(r)}}(t.boxes),l=r.vertical,h=r.horizontal;gt(t.boxes,(t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}));const c=l.reduce(((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1),0)||1,d=Object.freeze({outerWidth:e,outerHeight:i,padding:n,availableWidth:o,availableHeight:a,vBoxMaxWidth:o/2/c,hBoxMaxHeight:a/2}),u=Object.assign({},n);Ls(u,Ge(s));const f=Object.assign({maxPadding:u,w:o,h:a,x:n.left,y:n.top},n),g=function(t,e){const i=function(t){const e={};for(const i of t){const{stack:t,pos:s,stackWeight:n}=i;if(!t||!Ds.includes(s))continue;const o=e[t]||(e[t]={count:0,placed:0,weight:0,size:0});o.count++,o.weight+=n}return e}(t),{vBoxMaxWidth:s,hBoxMaxHeight:n}=e;let o,a,r;for(o=0,a=t.length;o<a;++o){r=t[o];const{fullSize:a}=r.box,l=i[r.stack],h=l&&r.stackWeight/l.weight;r.horizontal?(r.width=h?h*s:a&&e.availableWidth,r.height=n):(r.width=s,r.height=h?h*n:a&&e.availableHeight)}return i}(l.concat(h),d);zs(r.fullSize,f,d,g),zs(l,f,d,g),zs(h,f,d,g)&&zs(l,f,d,g),function(t){const e=t.maxPadding;function i(i){const s=Math.max(e[i]-t[i],0);return t[i]+=s,s}t.y+=i("top"),t.x+=i("left"),i("right"),i("bottom")}(f),Ws(r.leftAndTop,f,d,g),f.x+=f.w,f.y+=f.h,Ws(r.rightAndBottom,f,d,g),t.chartArea={left:f.left,top:f.top,right:f.left+f.w,bottom:f.top+f.h,height:f.h,width:f.w},gt(r.chartArea,(e=>{const i=e.box;Object.assign(i,t.chartArea),i.update(f.w,f.h,{left:0,top:0,right:0,bottom:0})}))}};class Ns{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,i){}removeEventListener(t,e,i){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,i,s){return e=Math.max(0,e||t.width),i=i||t.height,{width:e,height:Math.max(0,s?Math.floor(e/s):i)}}isAttached(t){return!0}updateConfig(t){}}class js extends Ns{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}}const Hs="$chartjs",$s={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},Ys=t=>null===t||""===t,Us=!!Oi&&{passive:!0};function Xs(t,e,i){t.canvas.removeEventListener(e,i,Us)}function Zs(t,e){for(const i of t)if(i===e||i.contains(e))return!0}function qs(t,e,i){const s=t.canvas,n=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||Zs(i.addedNodes,s),e=e&&!Zs(i.removedNodes,s);e&&i()}));return n.observe(document,{childList:!0,subtree:!0}),n}function Ks(t,e,i){const s=t.canvas,n=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||Zs(i.removedNodes,s),e=e&&!Zs(i.addedNodes,s);e&&i()}));return n.observe(document,{childList:!0,subtree:!0}),n}const Gs=new Map;let Js=0;function Qs(){const t=window.devicePixelRatio;t!==Js&&(Js=t,Gs.forEach(((e,i)=>{i.currentDevicePixelRatio!==t&&e()})))}function tn(t,e,i){const s=t.canvas,n=s&&Ai(s);if(!n)return;const o=oe(((t,e)=>{const s=n.clientWidth;i(t,e),s<n.clientWidth&&i()}),window),a=new ResizeObserver((t=>{const e=t[0],i=e.contentRect.width,s=e.contentRect.height;0===i&&0===s||o(i,s)}));return a.observe(n),function(t,e){Gs.size||window.addEventListener("resize",Qs),Gs.set(t,e)}(t,o),a}function en(t,e,i){i&&i.disconnect(),"resize"===e&&function(t){Gs.delete(t),Gs.size||window.removeEventListener("resize",Qs)}(t)}function sn(t,e,i){const s=t.canvas,n=oe((e=>{null!==t.ctx&&i(function(t,e){const i=$s[t.type]||t.type,{x:s,y:n}=Si(t,e);return{type:i,chart:e,native:t,x:void 0!==s?s:null,y:void 0!==n?n:null}}(e,t))}),t);return function(t,e,i){t.addEventListener(e,i,Us)}(s,e,n),n}class nn extends Ns{acquireContext(t,e){const i=t&&t.getContext&&t.getContext("2d");return i&&i.canvas===t?(function(t,e){const i=t.style,s=t.getAttribute("height"),n=t.getAttribute("width");if(t[Hs]={initial:{height:s,width:n,style:{display:i.display,height:i.height,width:i.width}}},i.display=i.display||"block",i.boxSizing=i.boxSizing||"border-box",Ys(n)){const e=Ti(t,"width");void 0!==e&&(t.width=e)}if(Ys(s))if(""===t.style.height)t.height=t.width/(e||2);else{const e=Ti(t,"height");void 0!==e&&(t.height=e)}}(t,e),i):null}releaseContext(t){const e=t.canvas;if(!e[Hs])return!1;const i=e[Hs].initial;["height","width"].forEach((t=>{const s=i[t];at(s)?e.removeAttribute(t):e.setAttribute(t,s)}));const s=i.style||{};return Object.keys(s).forEach((t=>{e.style[t]=s[t]})),e.width=e.width,delete e[Hs],!0}addEventListener(t,e,i){this.removeEventListener(t,e);const s=t.$proxies||(t.$proxies={}),n={attach:qs,detach:Ks,resize:tn}[e]||sn;s[e]=n(t,e,i)}removeEventListener(t,e){const i=t.$proxies||(t.$proxies={}),s=i[e];s&&(({attach:en,detach:en,resize:en}[e]||Xs)(t,e,s),i[e]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,i,s){return function(t,e,i,s){const n=Mi(t),o=Ci(n,"margin"),a=wi(n.maxWidth,t,"clientWidth")||Ot,r=wi(n.maxHeight,t,"clientHeight")||Ot,l=function(t,e,i){let s,n;if(void 0===e||void 0===i){const o=Ai(t);if(o){const t=o.getBoundingClientRect(),a=Mi(o),r=Ci(a,"border","width"),l=Ci(a,"padding");e=t.width-l.width-r.width,i=t.height-l.height-r.height,s=wi(a.maxWidth,o,"clientWidth"),n=wi(a.maxHeight,o,"clientHeight")}else e=t.clientWidth,i=t.clientHeight}return{width:e,height:i,maxWidth:s||Ot,maxHeight:n||Ot}}(t,e,i);let{width:h,height:c}=l;if("content-box"===n.boxSizing){const t=Ci(n,"border","width"),e=Ci(n,"padding");h-=e.width+t.width,c-=e.height+t.height}return h=Math.max(0,h-o.width),c=Math.max(0,s?h/s:c-o.height),h=Di(Math.min(h,a,l.maxWidth)),c=Di(Math.min(c,r,l.maxHeight)),h&&!c&&(c=Di(h/2)),(void 0!==e||void 0!==i)&&s&&l.height&&c>l.height&&(c=l.height,h=Di(Math.floor(c*s))),{width:h,height:c}}(t,e,i,s)}isAttached(t){const e=Ai(t);return!(!e||!e.isConnected)}}class on{static defaults={};static defaultRoutes=void 0;x;y;active=!1;options;$animations;tooltipPosition(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}hasValue(){return Vt(this.x)&&Vt(this.y)}getProps(t,e){const i=this.$animations;if(!e||!i)return this;const s={};return t.forEach((t=>{s[t]=i[t]&&i[t].active()?i[t]._to:this[t]})),s}}function an(t,e,i,s,n){const o=dt(s,0),a=Math.min(dt(n,t.length),t.length);let r,l,h,c=0;for(i=Math.ceil(i),n&&(r=n-s,i=r/Math.floor(r/i)),h=o;h<0;)c++,h=Math.round(o+c*i);for(l=Math.max(o,0);l<a;l++)l===h&&(e.push(t[l]),c++,h=Math.round(o+c*i))}const rn=(t,e,i)=>"top"===e||"left"===e?t[e]+i:t[e]-i,ln=(t,e)=>Math.min(e||t,t);function hn(t,e){const i=[],s=t.length/e,n=t.length;let o=0;for(;o<n;o+=s)i.push(t[Math.floor(o)]);return i}function cn(t,e,i){const s=t.ticks.length,n=Math.min(e,s-1),o=t._startPixel,a=t._endPixel,r=1e-6;let l,h=t.getPixelForTick(n);if(!(i&&(l=1===s?Math.max(h-o,a-h):0===e?(t.getPixelForTick(1)-h)/2:(h-t.getPixelForTick(n-1))/2,h+=n<e?l:-l,h<o-r||h>a+r)))return h}function dn(t){return t.drawTicks?t.tickLength:0}function un(t,e){if(!t.display)return 0;const i=Je(t.font,e),s=Ge(t.padding);return(rt(t.text)?t.text.length:1)*i.lineHeight+s.height}function fn(t,e,i){let s=ae(t);return(i&&"right"!==e||!i&&"right"===e)&&(s=(t=>"left"===t?"right":"right"===t?"left":t)(s)),s}class gn extends on{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:i,_suggestedMax:s}=this;return t=ct(t,Number.POSITIVE_INFINITY),e=ct(e,Number.NEGATIVE_INFINITY),i=ct(i,Number.POSITIVE_INFINITY),s=ct(s,Number.NEGATIVE_INFINITY),{min:ct(t,i),max:ct(e,s),minDefined:ht(t),maxDefined:ht(e)}}getMinMax(t){let e,{min:i,max:s,minDefined:n,maxDefined:o}=this.getUserBounds();if(n&&o)return{min:i,max:s};const a=this.getMatchingVisibleMetas();for(let r=0,l=a.length;r<l;++r)e=a[r].controller.getMinMax(this,t),n||(i=Math.min(i,e.min)),o||(s=Math.max(s,e.max));return i=o&&i>s?s:i,s=n&&i>s?i:s,{min:ct(i,ct(s,i)),max:ct(s,ct(i,s))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}getLabelItems(t=this.chart.chartArea){return this._labelItems||(this._labelItems=this._computeLabelItems(t))}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){ft(this.options.beforeUpdate,[this])}update(t,e,i){const{beginAtZero:s,grace:n,ticks:o}=this.options,a=o.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this._margins=i=Object.assign({left:0,right:0,top:0,bottom:0},i),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+i.left+i.right:this.height+i.top+i.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=function(t,e,i){const{min:s,max:n}=t,o=ut(e,(n-s)/2),a=(t,e)=>i&&0===t?0:t+e;return{min:a(s,-Math.abs(o)),max:a(n,o)}}(this,n,s),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const r=a<this.ticks.length;this._convertTicksToLabels(r?hn(this.ticks,a):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),o.display&&(o.autoSkip||"auto"===o.source)&&(this.ticks=function(t,e){const i=t.options.ticks,s=function(t){const e=t.options.offset,i=t._tickSize(),s=t._length/i+(e?0:1),n=t._maxLength/i;return Math.floor(Math.min(s,n))}(t),n=Math.min(i.maxTicksLimit||s,s),o=i.major.enabled?function(t){const e=[];let i,s;for(i=0,s=t.length;i<s;i++)t[i].major&&e.push(i);return e}(e):[],a=o.length,r=o[0],l=o[a-1],h=[];if(a>n)return function(t,e,i,s){let n,o=0,a=i[0];for(s=Math.ceil(s),n=0;n<t.length;n++)n===a&&(e.push(t[n]),o++,a=i[o*s])}(e,h,o,a/n),h;const c=function(t,e,i){const s=function(t){const e=t.length;let i,s;if(e<2)return!1;for(s=t[0],i=1;i<e;++i)if(t[i]-t[i-1]!==s)return!1;return s}(t),n=e.length/i;if(!s)return Math.max(n,1);const o=function(t){const e=[],i=Math.sqrt(t);let s;for(s=1;s<i;s++)t%s==0&&(e.push(s),e.push(t/s));return i===(0|i)&&e.push(i),e.sort(((t,e)=>t-e)).pop(),e}(s);for(let t=0,e=o.length-1;t<e;t++){const e=o[t];if(e>n)return e}return Math.max(n,1)}(o,e,n);if(a>0){let t,i;const s=a>1?Math.round((l-r)/(a-1)):null;for(an(e,h,c,at(s)?0:r-s,r),t=0,i=a-1;t<i;t++)an(e,h,c,o[t],o[t+1]);return an(e,h,c,l,at(s)?e.length:l+s),h}return an(e,h,c),h}(this,this.ticks),this._labelSizes=null,this.afterAutoSkip()),r&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t,e,i=this.options.reverse;this.isHorizontal()?(t=this.left,e=this.right):(t=this.top,e=this.bottom,i=!i),this._startPixel=t,this._endPixel=e,this._reversePixels=i,this._length=e-t,this._alignToPixels=this.options.alignToPixels}afterUpdate(){ft(this.options.afterUpdate,[this])}beforeSetDimensions(){ft(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){ft(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),ft(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){ft(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this.options.ticks;let i,s,n;for(i=0,s=t.length;i<s;i++)n=t[i],n.label=ft(e.callback,[n.value,i,t],this)}afterTickToLabelConversion(){ft(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){ft(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this.options,e=t.ticks,i=ln(this.ticks.length,t.ticks.maxTicksLimit),s=e.minRotation||0,n=e.maxRotation;let o,a,r,l=s;if(!this._isVisible()||!e.display||s>=n||i<=1||!this.isHorizontal())return void(this.labelRotation=s);const h=this._getLabelSizes(),c=h.widest.width,d=h.highest.height,u=Kt(this.chart.width-c,0,this.maxWidth);o=t.offset?this.maxWidth/i:u/(i-1),c+6>o&&(o=u/(i-(t.offset?.5:1)),a=this.maxHeight-dn(t.grid)-e.padding-un(t.title,this.chart.options.font),r=Math.sqrt(c*c+d*d),l=Ht(Math.min(Math.asin(Kt((h.highest.height+6)/o,-1,1)),Math.asin(Kt(a/r,-1,1))-Math.asin(Kt(d/r,-1,1)))),l=Math.max(s,Math.min(n,l))),this.labelRotation=l}afterCalculateLabelRotation(){ft(this.options.afterCalculateLabelRotation,[this])}afterAutoSkip(){}beforeFit(){ft(this.options.beforeFit,[this])}fit(){const t={width:0,height:0},{chart:e,options:{ticks:i,title:s,grid:n}}=this,o=this._isVisible(),a=this.isHorizontal();if(o){const o=un(s,e.options.font);if(a?(t.width=this.maxWidth,t.height=dn(n)+o):(t.height=this.maxHeight,t.width=dn(n)+o),i.display&&this.ticks.length){const{first:e,last:s,widest:n,highest:o}=this._getLabelSizes(),r=2*i.padding,l=jt(this.labelRotation),h=Math.cos(l),c=Math.sin(l);if(a){const e=i.mirror?0:c*n.width+h*o.height;t.height=Math.min(this.maxHeight,t.height+e+r)}else{const e=i.mirror?0:h*n.width+c*o.height;t.width=Math.min(this.maxWidth,t.width+e+r)}this._calculatePadding(e,s,c,h)}}this._handleMargins(),a?(this.width=this._length=e.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=e.height-this._margins.top-this._margins.bottom)}_calculatePadding(t,e,i,s){const{ticks:{align:n,padding:o},position:a}=this.options,r=0!==this.labelRotation,l="top"!==a&&"x"===this.axis;if(this.isHorizontal()){const a=this.getPixelForTick(0)-this.left,h=this.right-this.getPixelForTick(this.ticks.length-1);let c=0,d=0;r?l?(c=s*t.width,d=i*e.height):(c=i*t.height,d=s*e.width):"start"===n?d=e.width:"end"===n?c=t.width:"inner"!==n&&(c=t.width/2,d=e.width/2),this.paddingLeft=Math.max((c-a+o)*this.width/(this.width-a),0),this.paddingRight=Math.max((d-h+o)*this.width/(this.width-h),0)}else{let i=e.height/2,s=t.height/2;"start"===n?(i=0,s=t.height):"end"===n&&(i=e.height,s=0),this.paddingTop=i+o,this.paddingBottom=s+o}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){ft(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){let e,i;for(this.beforeTickToLabelConversion(),this.generateTickLabels(t),e=0,i=t.length;e<i;e++)at(t[e].label)&&(t.splice(e,1),i--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){let t=this._labelSizes;if(!t){const e=this.options.ticks.sampleSize;let i=this.ticks;e<i.length&&(i=hn(i,e)),this._labelSizes=t=this._computeLabelSizes(i,i.length,this.options.ticks.maxTicksLimit)}return t}_computeLabelSizes(t,e,i){const{ctx:s,_longestTextCache:n}=this,o=[],a=[],r=Math.floor(e/ln(e,i));let l,h,c,d,u,f,g,p,m,b,x,y=0,_=0;for(l=0;l<e;l+=r){if(d=t[l].label,u=this._resolveTickFontOptions(l),s.font=f=u.string,g=n[f]=n[f]||{data:{},gc:[]},p=u.lineHeight,m=b=0,at(d)||rt(d)){if(rt(d))for(h=0,c=d.length;h<c;++h)x=d[h],at(x)||rt(x)||(m=De(s,g.data,g.gc,m,x),b+=p)}else m=De(s,g.data,g.gc,m,d),b=p;o.push(m),a.push(b),y=Math.max(m,y),_=Math.max(b,_)}!function(t,e){gt(t,(t=>{const i=t.gc,s=i.length/2;let n;if(s>e){for(n=0;n<s;++n)delete t.data[i[n]];i.splice(0,s)}}))}(n,e);const v=o.indexOf(y),A=a.indexOf(_),w=t=>({width:o[t]||0,height:a[t]||0});return{first:w(0),last:w(e-1),widest:w(v),highest:w(A),widths:o,heights:a}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);const e=this._startPixel+t*this._length;return Kt(this._alignToPixels?Oe(this.chart,e,0):e,-32768,32767)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this.ticks||[];if(t>=0&&t<e.length){const i=e[t];return i.$context||(i.$context=function(t,e,i){return ti(t,{tick:i,index:e,type:"tick"})}(this.getContext(),t,i))}return this.$context||(this.$context=ti(this.chart.getContext(),{scale:this,type:"scale"}))}_tickSize(){const t=this.options.ticks,e=jt(this.labelRotation),i=Math.abs(Math.cos(e)),s=Math.abs(Math.sin(e)),n=this._getLabelSizes(),o=t.autoSkipPadding||0,a=n?n.widest.width+o:0,r=n?n.highest.height+o:0;return this.isHorizontal()?r*i>a*s?a/i:r/s:r*s<a*i?r/i:a/s}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this.axis,i=this.chart,s=this.options,{grid:n,position:o,border:a}=s,r=n.offset,l=this.isHorizontal(),h=this.ticks.length+(r?1:0),c=dn(n),d=[],u=a.setContext(this.getContext()),f=u.display?u.width:0,g=f/2,p=function(t){return Oe(i,t,f)};let m,b,x,y,_,v,A,w,M,k,C,E;if("top"===o)m=p(this.bottom),v=this.bottom-c,w=m-g,k=p(t.top)+g,E=t.bottom;else if("bottom"===o)m=p(this.top),k=t.top,E=p(t.bottom)-g,v=m+g,w=this.top+c;else if("left"===o)m=p(this.right),_=this.right-c,A=m-g,M=p(t.left)+g,C=t.right;else if("right"===o)m=p(this.left),M=t.left,C=p(t.right)-g,_=m+g,A=this.left+c;else if("x"===e){if("center"===o)m=p((t.top+t.bottom)/2+.5);else if(lt(o)){const t=Object.keys(o)[0],e=o[t];m=p(this.chart.scales[t].getPixelForValue(e))}k=t.top,E=t.bottom,v=m+g,w=v+c}else if("y"===e){if("center"===o)m=p((t.left+t.right)/2);else if(lt(o)){const t=Object.keys(o)[0],e=o[t];m=p(this.chart.scales[t].getPixelForValue(e))}_=m-g,A=_-c,M=t.left,C=t.right}const S=dt(s.ticks.maxTicksLimit,h),D=Math.max(1,Math.ceil(h/S));for(b=0;b<h;b+=D){const t=this.getContext(b),e=n.setContext(t),s=a.setContext(t),o=e.lineWidth,h=e.color,c=s.dash||[],u=s.dashOffset,f=e.tickWidth,g=e.tickColor,p=e.tickBorderDash||[],m=e.tickBorderDashOffset;x=cn(this,b,r),void 0!==x&&(y=Oe(i,x,o),l?_=A=M=C=y:v=w=k=E=y,d.push({tx1:_,ty1:v,tx2:A,ty2:w,x1:M,y1:k,x2:C,y2:E,width:o,color:h,borderDash:c,borderDashOffset:u,tickWidth:f,tickColor:g,tickBorderDash:p,tickBorderDashOffset:m}))}return this._ticksLength=h,this._borderValue=m,d}_computeLabelItems(t){const e=this.axis,i=this.options,{position:s,ticks:n}=i,o=this.isHorizontal(),a=this.ticks,{align:r,crossAlign:l,padding:h,mirror:c}=n,d=dn(i.grid),u=d+h,f=c?-h:u,g=-jt(this.labelRotation),p=[];let m,b,x,y,_,v,A,w,M,k,C,E,S="middle";if("top"===s)v=this.bottom-f,A=this._getXAxisLabelAlignment();else if("bottom"===s)v=this.top+f,A=this._getXAxisLabelAlignment();else if("left"===s){const t=this._getYAxisLabelAlignment(d);A=t.textAlign,_=t.x}else if("right"===s){const t=this._getYAxisLabelAlignment(d);A=t.textAlign,_=t.x}else if("x"===e){if("center"===s)v=(t.top+t.bottom)/2+u;else if(lt(s)){const t=Object.keys(s)[0],e=s[t];v=this.chart.scales[t].getPixelForValue(e)+u}A=this._getXAxisLabelAlignment()}else if("y"===e){if("center"===s)_=(t.left+t.right)/2-u;else if(lt(s)){const t=Object.keys(s)[0],e=s[t];_=this.chart.scales[t].getPixelForValue(e)}A=this._getYAxisLabelAlignment(d).textAlign}"y"===e&&("start"===r?S="top":"end"===r&&(S="bottom"));const D=this._getLabelSizes();for(m=0,b=a.length;m<b;++m){x=a[m],y=x.label;const t=n.setContext(this.getContext(m));w=this.getPixelForTick(m)+n.labelOffset,M=this._resolveTickFontOptions(m),k=M.lineHeight,C=rt(y)?y.length:1;const e=C/2,i=t.color,r=t.textStrokeColor,h=t.textStrokeWidth;let d,u=A;if(o?(_=w,"inner"===A&&(u=m===b-1?this.options.reverse?"left":"right":0===m?this.options.reverse?"right":"left":"center"),E="top"===s?"near"===l||0!==g?-C*k+k/2:"center"===l?-D.highest.height/2-e*k+k:-D.highest.height+k/2:"near"===l||0!==g?k/2:"center"===l?D.highest.height/2-e*k:D.highest.height-C*k,c&&(E*=-1),0===g||t.showLabelBackdrop||(_+=k/2*Math.sin(g))):(v=w,E=(1-C)*k/2),t.showLabelBackdrop){const e=Ge(t.backdropPadding),i=D.heights[m],s=D.widths[m];let n=E-e.top,o=0-e.left;switch(S){case"middle":n-=i/2;break;case"bottom":n-=i}switch(A){case"center":o-=s/2;break;case"right":o-=s}d={left:o,top:n,width:s+e.width,height:i+e.height,color:t.backdropColor}}p.push({label:y,font:M,textOffset:E,options:{rotation:g,color:i,strokeColor:r,strokeWidth:h,textAlign:u,textBaseline:S,translation:[_,v],backdrop:d}})}return p}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-jt(this.labelRotation))return"top"===t?"left":"right";let i="center";return"start"===e.align?i="left":"end"===e.align?i="right":"inner"===e.align&&(i="inner"),i}_getYAxisLabelAlignment(t){const{position:e,ticks:{crossAlign:i,mirror:s,padding:n}}=this.options,o=t+n,a=this._getLabelSizes().widest.width;let r,l;return"left"===e?s?(l=this.right+n,"near"===i?r="left":"center"===i?(r="center",l+=a/2):(r="right",l+=a)):(l=this.right-o,"near"===i?r="right":"center"===i?(r="center",l-=a/2):(r="left",l=this.left)):"right"===e?s?(l=this.left+n,"near"===i?r="right":"center"===i?(r="center",l-=a/2):(r="left",l-=a)):(l=this.left+o,"near"===i?r="left":"center"===i?(r="center",l+=a/2):(r="right",l=this.right)):r="right",{textAlign:r,x:l}}_computeLabelArea(){if(this.options.ticks.mirror)return;const t=this.chart,e=this.options.position;return"left"===e||"right"===e?{top:0,left:this.left,bottom:t.height,right:this.right}:"top"===e||"bottom"===e?{top:this.top,left:0,bottom:this.bottom,right:t.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:i,top:s,width:n,height:o}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(i,s,n,o),t.restore())}getLineWidthForValue(t){const e=this.options.grid;if(!this._isVisible()||!e.display)return 0;const i=this.ticks.findIndex((e=>e.value===t));return i>=0?e.setContext(this.getContext(i)).lineWidth:0}drawGrid(t){const e=this.options.grid,i=this.ctx,s=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t));let n,o;const a=(t,e,s)=>{s.width&&s.color&&(i.save(),i.lineWidth=s.width,i.strokeStyle=s.color,i.setLineDash(s.borderDash||[]),i.lineDashOffset=s.borderDashOffset,i.beginPath(),i.moveTo(t.x,t.y),i.lineTo(e.x,e.y),i.stroke(),i.restore())};if(e.display)for(n=0,o=s.length;n<o;++n){const t=s[n];e.drawOnChartArea&&a({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),e.drawTicks&&a({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const{chart:t,ctx:e,options:{border:i,grid:s}}=this,n=i.setContext(this.getContext()),o=i.display?n.width:0;if(!o)return;const a=s.setContext(this.getContext(0)).lineWidth,r=this._borderValue;let l,h,c,d;this.isHorizontal()?(l=Oe(t,this.left,o)-o/2,h=Oe(t,this.right,a)+a/2,c=d=r):(c=Oe(t,this.top,o)-o/2,d=Oe(t,this.bottom,a)+a/2,l=h=r),e.save(),e.lineWidth=n.width,e.strokeStyle=n.color,e.beginPath(),e.moveTo(l,c),e.lineTo(h,d),e.stroke(),e.restore()}drawLabels(t){if(!this.options.ticks.display)return;const e=this.ctx,i=this._computeLabelArea();i&&Ie(e,i);const s=this.getLabelItems(t);for(const t of s){const i=t.options,s=t.font;je(e,t.label,0,t.textOffset,s,i)}i&&ze(e)}drawTitle(){const{ctx:t,options:{position:e,title:i,reverse:s}}=this;if(!i.display)return;const n=Je(i.font),o=Ge(i.padding),a=i.align;let r=n.lineHeight/2;"bottom"===e||"center"===e||lt(e)?(r+=o.bottom,rt(i.text)&&(r+=n.lineHeight*(i.text.length-1))):r+=o.top;const{titleX:l,titleY:h,maxWidth:c,rotation:d}=function(t,e,i,s){const{top:n,left:o,bottom:a,right:r,chart:l}=t,{chartArea:h,scales:c}=l;let d,u,f,g=0;const p=a-n,m=r-o;if(t.isHorizontal()){if(u=re(s,o,r),lt(i)){const t=Object.keys(i)[0],s=i[t];f=c[t].getPixelForValue(s)+p-e}else f="center"===i?(h.bottom+h.top)/2+p-e:rn(t,i,e);d=r-o}else{if(lt(i)){const t=Object.keys(i)[0],s=i[t];u=c[t].getPixelForValue(s)-m+e}else u="center"===i?(h.left+h.right)/2-m+e:rn(t,i,e);f=re(s,a,n),g="left"===i?-Bt:Bt}return{titleX:u,titleY:f,maxWidth:d,rotation:g}}(this,r,e,a);je(t,i.text,0,0,n,{color:i.color,maxWidth:c,rotation:d,textAlign:fn(a,e,s),textBaseline:"middle",translation:[l,h]})}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){const t=this.options,e=t.ticks&&t.ticks.z||0,i=dt(t.grid&&t.grid.z,-1),s=dt(t.border&&t.border.z,0);return this._isVisible()&&this.draw===gn.prototype.draw?[{z:i,draw:t=>{this.drawBackground(),this.drawGrid(t),this.drawTitle()}},{z:s,draw:()=>{this.drawBorder()}},{z:e,draw:t=>{this.drawLabels(t)}}]:[{z:e,draw:t=>{this.draw(t)}}]}getMatchingVisibleMetas(t){const e=this.chart.getSortedVisibleDatasetMetas(),i=this.axis+"AxisID",s=[];let n,o;for(n=0,o=e.length;n<o;++n){const o=e[n];o[i]!==this.id||t&&o.type!==t||s.push(o)}return s}_resolveTickFontOptions(t){return Je(this.options.ticks.setContext(this.getContext(t)).font)}_maxDigits(){const t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}class pn{constructor(t,e,i){this.type=t,this.scope=e,this.override=i,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=Object.getPrototypeOf(t);let i;(function(t){return"id"in t&&"defaults"in t})(e)&&(i=this.register(e));const s=this.items,n=t.id,o=this.scope+"."+n;if(!n)throw new Error("class does not have id: "+t);return n in s||(s[n]=t,function(t,e,i){const s=yt(Object.create(null),[i?Se.get(i):{},Se.get(e),t.defaults]);Se.set(e,s),t.defaultRoutes&&function(t,e){Object.keys(e).forEach((i=>{const s=i.split("."),n=s.pop(),o=[t].concat(s).join("."),a=e[i].split("."),r=a.pop(),l=a.join(".");Se.route(o,n,l,r)}))}(e,t.defaultRoutes),t.descriptors&&Se.describe(e,t.descriptors)}(t,o,i),this.override&&Se.override(t.id,t.overrides)),o}get(t){return this.items[t]}unregister(t){const e=this.items,i=t.id,s=this.scope;i in e&&delete e[i],s&&i in Se[s]&&(delete Se[s][i],this.override&&delete we[i])}}class mn{constructor(){this.controllers=new pn(ls,"datasets",!0),this.elements=new pn(on,"elements"),this.plugins=new pn(Object,"plugins"),this.scales=new pn(gn,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,i){[...e].forEach((e=>{const s=i||this._getRegistryForType(e);i||s.isForType(e)||s===this.plugins&&e.id?this._exec(t,s,e):gt(e,(e=>{const s=i||this._getRegistryForType(e);this._exec(t,s,e)}))}))}_exec(t,e,i){const s=Mt(t);ft(i["before"+s],[],i),e[t](i),ft(i["after"+s],[],i)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const i=this._typedRegistries[e];if(i.isForType(t))return i}return this.plugins}_get(t,e,i){const s=e.get(t);if(void 0===s)throw new Error('"'+t+'" is not a registered '+i+".");return s}}var bn=new mn;class xn{constructor(){this._init=[]}notify(t,e,i,s){"beforeInit"===e&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));const n=s?this._descriptors(t).filter(s):this._descriptors(t),o=this._notify(n,t,e,i);return"afterDestroy"===e&&(this._notify(n,t,"stop"),this._notify(this._init,t,"uninstall")),o}_notify(t,e,i,s){s=s||{};for(const n of t){const t=n.plugin;if(!1===ft(t[i],[e,s,n.options],t)&&s.cancelable)return!1}return!0}invalidate(){at(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const i=t&&t.config,s=dt(i.options&&i.options.plugins,{}),n=function(t){const e={},i=[],s=Object.keys(bn.plugins.items);for(let t=0;t<s.length;t++)i.push(bn.getPlugin(s[t]));const n=t.plugins||[];for(let t=0;t<n.length;t++){const s=n[t];-1===i.indexOf(s)&&(i.push(s),e[s.id]=!0)}return{plugins:i,localIds:e}}(i);return!1!==s||e?function(t,{plugins:e,localIds:i},s,n){const o=[],a=t.getContext();for(const r of e){const e=r.id,l=yn(s[e],n);null!==l&&o.push({plugin:r,options:_n(t.config,{plugin:r,local:i[e]},l,a)})}return o}(t,n,s,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],i=this._cache,s=(t,e)=>t.filter((t=>!e.some((e=>t.plugin.id===e.plugin.id))));this._notify(s(e,i),t,"stop"),this._notify(s(i,e),t,"start")}}function yn(t,e){return e||!1!==t?!0===t?{}:t:null}function _n(t,{plugin:e,local:i},s,n){const o=t.pluginScopeKeys(e),a=t.getOptionScopes(s,o);return i&&e.defaults&&a.push(e.defaults),t.createResolver(a,n,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function vn(t,e){const i=Se.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||i.indexAxis||"x"}function An(t){if("x"===t||"y"===t||"r"===t)return t}function wn(t,...e){if(An(t))return t;for(const s of e){const e=s.axis||("top"===(i=s.position)||"bottom"===i?"x":"left"===i||"right"===i?"y":void 0)||t.length>1&&An(t[0].toLowerCase());if(e)return e}var i;throw new Error(`Cannot determine type of '${t}' axis. Please provide 'axis' or 'position' option.`)}function Mn(t,e,i){if(i[e+"AxisID"]===t)return{axis:e}}function kn(t){const e=t.options||(t.options={});e.plugins=dt(e.plugins,{}),e.scales=function(t,e){const i=we[t.type]||{scales:{}},s=e.scales||{},n=vn(t.type,e),o=Object.create(null);return Object.keys(s).forEach((e=>{const a=s[e];if(!lt(a))return console.error(`Invalid scale configuration for scale: ${e}`);if(a._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${e}`);const r=wn(e,a,function(t,e){if(e.data&&e.data.datasets){const i=e.data.datasets.filter((e=>e.xAxisID===t||e.yAxisID===t));if(i.length)return Mn(t,"x",i[0])||Mn(t,"y",i[0])}return{}}(e,t),Se.scales[a.type]),l=function(t,e){return t===e?"_index_":"_value_"}(r,n),h=i.scales||{};o[e]=_t(Object.create(null),[{axis:r},a,h[r],h[l]])})),t.data.datasets.forEach((i=>{const n=i.type||t.type,a=i.indexAxis||vn(n,e),r=(we[n]||{}).scales||{};Object.keys(r).forEach((t=>{const e=function(t,e){let i=t;return"_index_"===t?i=e:"_value_"===t&&(i="x"===e?"y":"x"),i}(t,a),n=i[e+"AxisID"]||e;o[n]=o[n]||Object.create(null),_t(o[n],[{axis:e},s[n],r[t]])}))})),Object.keys(o).forEach((t=>{const e=o[t];_t(e,[Se.scales[e.type],Se.scale])})),o}(t,e)}function Cn(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const En=new Map,Sn=new Set;function Dn(t,e){let i=En.get(t);return i||(i=e(),En.set(t,i),Sn.add(i)),i}const Pn=(t,e,i)=>{const s=wt(e,i);void 0!==s&&t.add(s)};class On{constructor(t){this._config=function(t){return(t=t||{}).data=Cn(t.data),kn(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=Cn(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),kn(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return Dn(t,(()=>[[`datasets.${t}`,""]]))}datasetAnimationScopeKeys(t,e){return Dn(`${t}.transition.${e}`,(()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]]))}datasetElementScopeKeys(t,e){return Dn(`${t}-${e}`,(()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]]))}pluginScopeKeys(t){const e=t.id;return Dn(`${this.type}-plugin-${e}`,(()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]]))}_cachedScopes(t,e){const i=this._scopeCache;let s=i.get(t);return s&&!e||(s=new Map,i.set(t,s)),s}getOptionScopes(t,e,i){const{options:s,type:n}=this,o=this._cachedScopes(t,i),a=o.get(e);if(a)return a;const r=new Set;e.forEach((e=>{t&&(r.add(t),e.forEach((e=>Pn(r,t,e)))),e.forEach((t=>Pn(r,s,t))),e.forEach((t=>Pn(r,we[n]||{},t))),e.forEach((t=>Pn(r,Se,t))),e.forEach((t=>Pn(r,Me,t)))}));const l=Array.from(r);return 0===l.length&&l.push(Object.create(null)),Sn.has(e)&&o.set(e,l),l}chartOptionScopes(){const{options:t,type:e}=this;return[t,we[e]||{},Se.datasets[e]||{},{type:e},Se,Me]}resolveNamedOptions(t,e,i,s=[""]){const n={$shared:!0},{resolver:o,subPrefixes:a}=Tn(this._resolverCache,t,s);let r=o;(function(t,e){const{isScriptable:i,isIndexable:s}=si(t);for(const n of e){const e=i(n),o=s(n),a=(o||e)&&t[n];if(e&&(Ct(a)||Bn(a))||o&&rt(a))return!0}return!1})(o,e)&&(n.$shared=!1,r=ii(o,i=Ct(i)?i():i,this.createResolver(t,i,a)));for(const t of e)n[t]=r[t];return n}createResolver(t,e,i=[""],s){const{resolver:n}=Tn(this._resolverCache,t,i);return lt(e)?ii(n,e,void 0,s):n}}function Tn(t,e,i){let s=t.get(e);s||(s=new Map,t.set(e,s));const n=i.join();let o=s.get(n);return o||(o={resolver:ei(e,i),subPrefixes:i.filter((t=>!t.toLowerCase().includes("hover")))},s.set(n,o)),o}const Bn=t=>lt(t)&&Object.getOwnPropertyNames(t).reduce(((e,i)=>e||Ct(t[i])),!1),Ln=["top","bottom","left","right","chartArea"];function Rn(t,e){return"top"===t||"bottom"===t||-1===Ln.indexOf(t)&&"x"===e}function In(t,e){return function(i,s){return i[t]===s[t]?i[e]-s[e]:i[t]-s[t]}}function zn(t){const e=t.chart,i=e.options.animation;e.notifyPlugins("afterRender"),ft(i&&i.onComplete,[t],e)}function Fn(t){const e=t.chart,i=e.options.animation;ft(i&&i.onProgress,[t],e)}function Wn(t){return vi()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const Vn={},Nn=t=>{const e=Wn(t);return Object.values(Vn).filter((t=>t.canvas===e)).pop()};function jn(t,e,i){const s=Object.keys(t);for(const n of s){const s=+n;if(s>=e){const o=t[n];delete t[n],(i>0||s>e)&&(t[s+i]=o)}}}class Hn{static defaults=Se;static instances=Vn;static overrides=we;static registry=bn;static version="4.3.3";static getChart=Nn;static register(...t){bn.add(...t),$n()}static unregister(...t){bn.remove(...t),$n()}constructor(t,e){const i=this.config=new On(e),s=Wn(t),n=Nn(s);if(n)throw new Error("Canvas is already in use. Chart with ID '"+n.id+"' must be destroyed before the canvas with ID '"+n.canvas.id+"' can be reused.");const o=i.createResolver(i.chartOptionScopes(),this.getContext());this.platform=new(i.platform||function(t){return!vi()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?js:nn}(s)),this.platform.updateConfig(i);const a=this.platform.acquireContext(s,o.aspectRatio),r=a&&a.canvas,l=r&&r.height,h=r&&r.width;this.id=ot(),this.ctx=a,this.canvas=r,this.width=h,this.height=l,this._options=o,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new xn,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=function(t,e){let i;return function(...s){return e?(clearTimeout(i),i=setTimeout(t,e,s)):t.apply(this,s),e}}((t=>this.update(t)),o.resizeDelay||0),this._dataChanges=[],Vn[this.id]=this,a&&r?(Ui.listen(this,"complete",zn),Ui.listen(this,"progress",Fn),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:i,height:s,_aspectRatio:n}=this;return at(t)?e&&n?n:s?i/s:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}get registry(){return bn}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():Pi(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return Te(this.canvas,this.ctx),this}stop(){return Ui.stop(this),this}resize(t,e){Ui.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const i=this.options,s=this.canvas,n=i.maintainAspectRatio&&this.aspectRatio,o=this.platform.getMaximumSize(s,t,e,n),a=i.devicePixelRatio||this.platform.getDevicePixelRatio(),r=this.width?"resize":"attach";this.width=o.width,this.height=o.height,this._aspectRatio=this.aspectRatio,Pi(this,a,!0)&&(this.notifyPlugins("resize",{size:o}),ft(i.onResize,[this,o],this),this.attached&&this._doResize(r)&&this.render())}ensureScalesHaveIDs(){gt(this.options.scales||{},((t,e)=>{t.id=e}))}buildOrUpdateScales(){const t=this.options,e=t.scales,i=this.scales,s=Object.keys(i).reduce(((t,e)=>(t[e]=!1,t)),{});let n=[];e&&(n=n.concat(Object.keys(e).map((t=>{const i=e[t],s=wn(t,i),n="r"===s,o="x"===s;return{options:i,dposition:n?"chartArea":o?"bottom":"left",dtype:n?"radialLinear":o?"category":"linear"}})))),gt(n,(e=>{const n=e.options,o=n.id,a=wn(o,n),r=dt(n.type,e.dtype);void 0!==n.position&&Rn(n.position,a)===Rn(e.dposition)||(n.position=e.dposition),s[o]=!0;let l=null;o in i&&i[o].type===r?l=i[o]:(l=new(bn.getScale(r))({id:o,type:r,ctx:this.ctx,chart:this}),i[l.id]=l),l.init(n,t)})),gt(s,((t,e)=>{t||delete i[e]})),gt(i,(t=>{Vs.configure(this,t,t.options),Vs.addBox(this,t)}))}_updateMetasets(){const t=this._metasets,e=this.data.datasets.length,i=t.length;if(t.sort(((t,e)=>t.index-e.index)),i>e){for(let t=e;t<i;++t)this._destroyDatasetMeta(t);t.splice(e,i-e)}this._sortedMetasets=t.slice(0).sort(In("order","index"))}_removeUnreferencedMetasets(){const{_metasets:t,data:{datasets:e}}=this;t.length>e.length&&delete this._stacks,t.forEach(((t,i)=>{0===e.filter((e=>e===t._dataset)).length&&this._destroyDatasetMeta(i)}))}buildOrUpdateControllers(){const t=[],e=this.data.datasets;let i,s;for(this._removeUnreferencedMetasets(),i=0,s=e.length;i<s;i++){const s=e[i];let n=this.getDatasetMeta(i);const o=s.type||this.config.type;if(n.type&&n.type!==o&&(this._destroyDatasetMeta(i),n=this.getDatasetMeta(i)),n.type=o,n.indexAxis=s.indexAxis||vn(o,this.options),n.order=s.order||0,n.index=i,n.label=""+s.label,n.visible=this.isDatasetVisible(i),n.controller)n.controller.updateIndex(i),n.controller.linkScales();else{const e=bn.getController(o),{datasetElementType:s,dataElementType:a}=Se.datasets[o];Object.assign(e,{dataElementType:bn.getElement(a),datasetElementType:s&&bn.getElement(s)}),n.controller=new e(this,i),t.push(n.controller)}}return this._updateMetasets(),t}_resetElements(){gt(this.data.datasets,((t,e)=>{this.getDatasetMeta(e).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this.config;e.update();const i=this._options=e.createResolver(e.chartOptionScopes(),this.getContext()),s=this._animationsDisabled=!i.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const n=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let o=0;for(let t=0,e=this.data.datasets.length;t<e;t++){const{controller:e}=this.getDatasetMeta(t),i=!s&&-1===n.indexOf(e);e.buildOrUpdateElements(i),o=Math.max(+e.getMaxOverflow(),o)}o=this._minPadding=i.layout.autoPadding?o:0,this._updateLayout(o),s||gt(n,(t=>{t.reset()})),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(In("z","_idx"));const{_active:a,_lastEvent:r}=this;r?this._eventHandler(r,!0):a.length&&this._updateHoverStyles(a,a,!0),this.render()}_updateScales(){gt(this.scales,(t=>{Vs.removeBox(this,t)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const t=this.options,e=new Set(Object.keys(this._listeners)),i=new Set(t.events);Et(e,i)&&!!this._responsiveListeners===t.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:t}=this,e=this._getUniformDataChanges()||[];for(const{method:i,start:s,count:n}of e)jn(t,s,"_removeElements"===i?-n:n)}_getUniformDataChanges(){const t=this._dataChanges;if(!t||!t.length)return;this._dataChanges=[];const e=this.data.datasets.length,i=e=>new Set(t.filter((t=>t[0]===e)).map(((t,e)=>e+","+t.splice(1).join(",")))),s=i(0);for(let t=1;t<e;t++)if(!Et(s,i(t)))return;return Array.from(s).map((t=>t.split(","))).map((t=>({method:t[1],start:+t[2],count:+t[3]})))}_updateLayout(t){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;Vs.update(this,this.width,this.height,t);const e=this.chartArea,i=e.width<=0||e.height<=0;this._layers=[],gt(this.boxes,(t=>{i&&"chartArea"===t.position||(t.configure&&t.configure(),this._layers.push(...t._layers()))}),this),this._layers.forEach(((t,e)=>{t._idx=e})),this.notifyPlugins("afterLayout")}_updateDatasets(t){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let t=0,e=this.data.datasets.length;t<e;++t)this.getDatasetMeta(t).controller.configure();for(let e=0,i=this.data.datasets.length;e<i;++e)this._updateDataset(e,Ct(t)?t({datasetIndex:e}):t);this.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const i=this.getDatasetMeta(t),s={meta:i,index:t,mode:e,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",s)&&(i.controller._update(e),s.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",s))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(Ui.has(this)?this.attached&&!Ui.running(this)&&Ui.start(this):(this.draw(),zn({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){const{width:t,height:e}=this._resizeBeforeDraw;this._resize(t,e),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const e=this._layers;for(t=0;t<e.length&&e[t].z<=0;++t)e[t].draw(this.chartArea);for(this._drawDatasets();t<e.length;++t)e[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,i=[];let s,n;for(s=0,n=e.length;s<n;++s){const n=e[s];t&&!n.visible||i.push(n)}return i}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=this.getSortedVisibleDatasetMetas();for(let e=t.length-1;e>=0;--e)this._drawDataset(t[e]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this.ctx,i=t._clip,s=!i.disabled,n=function(t){const{xScale:e,yScale:i}=t;if(e&&i)return{left:e.left,right:e.right,top:i.top,bottom:i.bottom}}(t)||this.chartArea,o={meta:t,index:t.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",o)&&(s&&Ie(e,{left:!1===i.left?0:n.left-i.left,right:!1===i.right?this.width:n.right+i.right,top:!1===i.top?0:n.top-i.top,bottom:!1===i.bottom?this.height:n.bottom+i.bottom}),t.controller.draw(),s&&ze(e),o.cancelable=!1,this.notifyPlugins("afterDatasetDraw",o))}isPointInArea(t){return Re(t,this.chartArea,this._minPadding)}getElementsAtEventForMode(t,e,i,s){const n=Ss.modes[e];return"function"==typeof n?n(this,t,i,s):[]}getDatasetMeta(t){const e=this.data.datasets[t],i=this._metasets;let s=i.filter((t=>t&&t._dataset===e)).pop();return s||(s={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},i.push(s)),s}getContext(){return this.$context||(this.$context=ti(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const i=this.getDatasetMeta(t);return"boolean"==typeof i.hidden?!i.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,e,i){const s=i?"show":"hide",n=this.getDatasetMeta(t),o=n.controller._resolveAnimations(void 0,s);kt(e)?(n.data[e].hidden=!i,this.update()):(this.setDatasetVisibility(t,i),o.update(n,{visible:i}),this.update((e=>e.datasetIndex===t?s:void 0)))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){const e=this._metasets[t];e&&e.controller&&e.controller._destroy(),delete this._metasets[t]}_stop(){let t,e;for(this.stop(),Ui.remove(this),t=0,e=this.data.datasets.length;t<e;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:t,ctx:e}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),Te(t,e),this.platform.releaseContext(e),this.canvas=null,this.ctx=null),delete Vn[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this._listeners,e=this.platform,i=(i,s)=>{e.addEventListener(this,i,s),t[i]=s},s=(t,e,i)=>{t.offsetX=e,t.offsetY=i,this._eventHandler(t)};gt(this.options.events,(t=>i(t,s)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const t=this._responsiveListeners,e=this.platform,i=(i,s)=>{e.addEventListener(this,i,s),t[i]=s},s=(i,s)=>{t[i]&&(e.removeEventListener(this,i,s),delete t[i])},n=(t,e)=>{this.canvas&&this.resize(t,e)};let o;const a=()=>{s("attach",a),this.attached=!0,this.resize(),i("resize",n),i("detach",o)};o=()=>{this.attached=!1,s("resize",n),this._stop(),this._resize(0,0),i("attach",a)},e.isAttached(this.canvas)?a():o()}unbindEvents(){gt(this._listeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._listeners={},gt(this._responsiveListeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._responsiveListeners=void 0}updateHoverStyle(t,e,i){const s=i?"set":"remove";let n,o,a,r;for("dataset"===e&&(n=this.getDatasetMeta(t[0].datasetIndex),n.controller["_"+s+"DatasetHoverStyle"]()),a=0,r=t.length;a<r;++a){o=t[a];const e=o&&this.getDatasetMeta(o.datasetIndex).controller;e&&e[s+"HoverStyle"](o.element,o.datasetIndex,o.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this._active||[],i=t.map((({datasetIndex:t,index:e})=>{const i=this.getDatasetMeta(t);if(!i)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:i.data[e],index:e}}));!pt(i,e)&&(this._active=i,this._lastEvent=null,this._updateHoverStyles(i,e))}notifyPlugins(t,e,i){return this._plugins.notify(this,t,e,i)}isPluginEnabled(t){return 1===this._plugins._cache.filter((e=>e.plugin.id===t)).length}_updateHoverStyles(t,e,i){const s=this.options.hover,n=(t,e)=>t.filter((t=>!e.some((e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)))),o=n(e,t),a=i?t:n(t,e);o.length&&this.updateHoverStyle(o,s.mode,!1),a.length&&s.mode&&this.updateHoverStyle(a,s.mode,!0)}_eventHandler(t,e){const i={event:t,replay:e,cancelable:!0,inChartArea:this.isPointInArea(t)},s=e=>(e.options.events||this.options.events).includes(t.native.type);if(!1===this.notifyPlugins("beforeEvent",i,s))return;const n=this._handleEvent(t,e,i.inChartArea);return i.cancelable=!1,this.notifyPlugins("afterEvent",i,s),(n||i.changed)&&this.render(),this}_handleEvent(t,e,i){const{_active:s=[],options:n}=this,o=e,a=this._getActiveElements(t,s,i,o),r=function(t){return"mouseup"===t.type||"click"===t.type||"contextmenu"===t.type}(t),l=function(t,e,i,s){return i&&"mouseout"!==t.type?s?e:t:null}(t,this._lastEvent,i,r);i&&(this._lastEvent=null,ft(n.onHover,[t,a,this],this),r&&ft(n.onClick,[t,a,this],this));const h=!pt(a,s);return(h||e)&&(this._active=a,this._updateHoverStyles(a,s,e)),this._lastEvent=l,h}_getActiveElements(t,e,i,s){if("mouseout"===t.type)return[];if(!i)return e;const n=this.options.hover;return this.getElementsAtEventForMode(t,n.mode,n,s)}}function $n(){return gt(Hn.instances,(t=>t._plugins.invalidate()))}function Yn(t,e,i,s){return{x:i+t*Math.cos(e),y:s+t*Math.sin(e)}}function Un(t,e,i,s,n,o){const{x:a,y:r,startAngle:l,pixelMargin:h,innerRadius:c}=e,d=Math.max(e.outerRadius+s+i-h,0),u=c>0?c+s+i+h:0;let f=0;const g=n-l;if(s){const t=((c>0?c-s:0)+(d>0?d-s:0))/2;f=(g-(0!==t?g*t/(t+s):g))/2}const p=(g-Math.max(.001,g*d-i/St)/d)/2,m=l+p+f,b=n-p-f,{outerStart:x,outerEnd:y,innerStart:_,innerEnd:v}=function(t,e,i,s){const n=Ze(t.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]),o=(i-e)/2,a=Math.min(o,s*e/2),r=t=>{const e=(i-Math.min(o,t))*s/2;return Kt(t,0,Math.min(o,e))};return{outerStart:r(n.outerStart),outerEnd:r(n.outerEnd),innerStart:Kt(n.innerStart,0,a),innerEnd:Kt(n.innerEnd,0,a)}}(e,u,d,b-m),A=d-x,w=d-y,M=m+x/A,k=b-y/w,C=u+_,E=u+v,S=m+_/C,D=b-v/E;if(t.beginPath(),o){const e=(M+k)/2;if(t.arc(a,r,d,M,e),t.arc(a,r,d,e,k),y>0){const e=Yn(w,k,a,r);t.arc(e.x,e.y,y,k,b+Bt)}const i=Yn(E,b,a,r);if(t.lineTo(i.x,i.y),v>0){const e=Yn(E,D,a,r);t.arc(e.x,e.y,v,b+Bt,D+Math.PI)}const s=(b-v/u+(m+_/u))/2;if(t.arc(a,r,u,b-v/u,s,!0),t.arc(a,r,u,s,m+_/u,!0),_>0){const e=Yn(C,S,a,r);t.arc(e.x,e.y,_,S+Math.PI,m-Bt)}const n=Yn(A,m,a,r);if(t.lineTo(n.x,n.y),x>0){const e=Yn(A,M,a,r);t.arc(e.x,e.y,x,m-Bt,M)}}else{t.moveTo(a,r);const e=Math.cos(M)*d+a,i=Math.sin(M)*d+r;t.lineTo(e,i);const s=Math.cos(k)*d+a,n=Math.sin(k)*d+r;t.lineTo(s,n)}t.closePath()}function Xn(t,e,i=e){t.lineCap=dt(i.borderCapStyle,e.borderCapStyle),t.setLineDash(dt(i.borderDash,e.borderDash)),t.lineDashOffset=dt(i.borderDashOffset,e.borderDashOffset),t.lineJoin=dt(i.borderJoinStyle,e.borderJoinStyle),t.lineWidth=dt(i.borderWidth,e.borderWidth),t.strokeStyle=dt(i.borderColor,e.borderColor)}function Zn(t,e,i){t.lineTo(i.x,i.y)}function qn(t,e,i={}){const s=t.length,{start:n=0,end:o=s-1}=i,{start:a,end:r}=e,l=Math.max(n,a),h=Math.min(o,r),c=n<a&&o<a||n>r&&o>r;return{count:s,start:l,loop:e.loop,ilen:h<l&&!c?s+h-l:h-l}}function Kn(t,e,i,s){const{points:n,options:o}=e,{count:a,start:r,loop:l,ilen:h}=qn(n,i,s),c=function(t){return t.stepped?Fe:t.tension||"monotone"===t.cubicInterpolationMode?We:Zn}(o);let d,u,f,{move:g=!0,reverse:p}=s||{};for(d=0;d<=h;++d)u=n[(r+(p?h-d:d))%a],u.skip||(g?(t.moveTo(u.x,u.y),g=!1):c(t,f,u,p,o.stepped),f=u);return l&&(u=n[(r+(p?h:0))%a],c(t,f,u,p,o.stepped)),!!l}function Gn(t,e,i,s){const n=e.points,{count:o,start:a,ilen:r}=qn(n,i,s),{move:l=!0,reverse:h}=s||{};let c,d,u,f,g,p,m=0,b=0;const x=t=>(a+(h?r-t:t))%o,y=()=>{f!==g&&(t.lineTo(m,g),t.lineTo(m,f),t.lineTo(m,p))};for(l&&(d=n[x(0)],t.moveTo(d.x,d.y)),c=0;c<=r;++c){if(d=n[x(c)],d.skip)continue;const e=d.x,i=d.y,s=0|e;s===u?(i<f?f=i:i>g&&(g=i),m=(b*m+e)/++b):(y(),t.lineTo(e,i),u=s,b=0,f=g=i),p=i}y()}function Jn(t){const e=t.options,i=e.borderDash&&e.borderDash.length;return t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||i?Kn:Gn}const Qn="function"==typeof Path2D;class to extends on{static id="line";static defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};static descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){const i=this.options;if((i.tension||"monotone"===i.cubicInterpolationMode)&&!i.stepped&&!this._pointsUpdated){const s=i.spanGaps?this._loop:this._fullLoop;_i(this._points,i,t,s,e),this._pointsUpdated=!0}}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=function(t,e){const i=t.points,s=t.options.spanGaps,n=i.length;if(!n)return[];const o=!!t._loop,{start:a,end:r}=function(t,e,i,s){let n=0,o=e-1;if(i&&!s)for(;n<e&&!t[n].skip;)n++;for(;n<e&&t[n].skip;)n++;for(n%=e,i&&(o+=n);o>n&&t[o%e].skip;)o--;return o%=e,{start:n,end:o}}(i,n,o,s);return function(t,e,i,s){return s&&s.setContext&&i?function(t,e,i,s){const n=t._chart.getContext(),o=Hi(t.options),{_datasetIndex:a,options:{spanGaps:r}}=t,l=i.length,h=[];let c=o,d=e[0].start,u=d;function f(t,e,s,n){const o=r?-1:1;if(t!==e){for(t+=l;i[t%l].skip;)t-=o;for(;i[e%l].skip;)e+=o;t%l!=e%l&&(h.push({start:t%l,end:e%l,loop:s,style:n}),c=n,d=e%l)}}for(const t of e){d=r?d:t.start;let e,o=i[d%l];for(u=d+1;u<=t.end;u++){const r=i[u%l];e=Hi(s.setContext(ti(n,{type:"segment",p0:o,p1:r,p0DataIndex:(u-1)%l,p1DataIndex:u%l,datasetIndex:a}))),$i(e,c)&&f(d,u-1,t.loop,c),o=r,c=e}d<u-1&&f(d,u-1,t.loop,c)}return h}(t,e,i,s):e}(t,!0===s?[{start:a,end:r,loop:o}]:function(t,e,i,s){const n=t.length,o=[];let a,r=e,l=t[e];for(a=e+1;a<=i;++a){const i=t[a%n];i.skip||i.stop?l.skip||(s=!1,o.push({start:e%n,end:(a-1)%n,loop:s}),e=r=i.stop?a:null):(r=a,l.skip&&(e=a)),l=i}return null!==r&&o.push({start:e%n,end:r%n,loop:s}),o}(i,a,r<a?r+n:r,!!t._fullLoop&&0===a&&r===n-1),i,e)}(this,this.options.segment))}first(){const t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){const t=this.segments,e=this.points,i=t.length;return i&&e[t[i-1].end]}interpolate(t,e){const i=this.options,s=t[e],n=this.points,o=ji(this,{property:e,start:s,end:s});if(!o.length)return;const a=[],r=function(t){return t.stepped?Li:t.tension||"monotone"===t.cubicInterpolationMode?Ri:Bi}(i);let l,h;for(l=0,h=o.length;l<h;++l){const{start:h,end:c}=o[l],d=n[h],u=n[c];if(d===u){a.push(d);continue}const f=r(d,u,Math.abs((s-d[e])/(u[e]-d[e])),i.stepped);f[e]=t[e],a.push(f)}return 1===a.length?a[0]:a}pathSegment(t,e,i){return Jn(this)(t,this,e,i)}path(t,e,i){const s=this.segments,n=Jn(this);let o=this._loop;e=e||0,i=i||this.points.length-e;for(const a of s)o&=n(t,this,a,{start:e,end:e+i-1});return!!o}draw(t,e,i,s){const n=this.options||{};(this.points||[]).length&&n.borderWidth&&(t.save(),function(t,e,i,s){Qn&&!e.options.segment?function(t,e,i,s){let n=e._path;n||(n=e._path=new Path2D,e.path(n,i,s)&&n.closePath()),Xn(t,e.options),t.stroke(n)}(t,e,i,s):function(t,e,i,s){const{segments:n,options:o}=e,a=Jn(e);for(const r of n)Xn(t,o,r.style),t.beginPath(),a(t,e,r,{start:i,end:i+s-1})&&t.closePath(),t.stroke()}(t,e,i,s)}(t,this,i,s),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function eo(t,e,i,s){const n=t.options,{[i]:o}=t.getProps([i],s);return Math.abs(e-o)<n.radius+n.hitRadius}function io(t,e){const{x:i,y:s,base:n,width:o,height:a}=t.getProps(["x","y","base","width","height"],e);let r,l,h,c,d;return t.horizontal?(d=a/2,r=Math.min(i,n),l=Math.max(i,n),h=s-d,c=s+d):(d=o/2,r=i-d,l=i+d,h=Math.min(s,n),c=Math.max(s,n)),{left:r,top:h,right:l,bottom:c}}function so(t,e,i,s){return t?0:Kt(e,i,s)}function no(t,e,i,s){const n=null===e,o=null===i,a=t&&!(n&&o)&&io(t,s);return a&&(n||Gt(e,a.left,a.right))&&(o||Gt(i,a.top,a.bottom))}function oo(t,e){t.rect(e.x,e.y,e.w,e.h)}function ao(t,e,i={}){const s=t.x!==i.x?-e:0,n=t.y!==i.y?-e:0,o=(t.x+t.w!==i.x+i.w?e:0)-s,a=(t.y+t.h!==i.y+i.h?e:0)-n;return{x:t.x+s,y:t.y+n,w:t.w+o,h:t.h+a,radius:t.radius}}var ro=Object.freeze({__proto__:null,ArcElement:class extends on{static id="arc";static defaults={borderAlign:"center",borderColor:"#fff",borderDash:[],borderDashOffset:0,borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0,circular:!0};static defaultRoutes={backgroundColor:"backgroundColor"};static descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t};circumference;endAngle;fullCircles;innerRadius;outerRadius;pixelMargin;startAngle;constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,i){const s=this.getProps(["x","y"],i),{angle:n,distance:o}=Yt(s,{x:t,y:e}),{startAngle:a,endAngle:r,innerRadius:l,outerRadius:h,circumference:c}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],i),d=(this.options.spacing+this.options.borderWidth)/2,u=dt(c,r-a)>=Dt||qt(n,a,r),f=Gt(o,l+d,h+d);return u&&f}getCenterPoint(t){const{x:e,y:i,startAngle:s,endAngle:n,innerRadius:o,outerRadius:a}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius"],t),{offset:r,spacing:l}=this.options,h=(s+n)/2,c=(o+a+l+r)/2;return{x:e+Math.cos(h)*c,y:i+Math.sin(h)*c}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const{options:e,circumference:i}=this,s=(e.offset||0)/4,n=(e.spacing||0)/2,o=e.circular;if(this.pixelMargin="inner"===e.borderAlign?.33:0,this.fullCircles=i>Dt?Math.floor(i/Dt):0,0===i||this.innerRadius<0||this.outerRadius<0)return;t.save();const a=(this.startAngle+this.endAngle)/2;t.translate(Math.cos(a)*s,Math.sin(a)*s);const r=s*(1-Math.sin(Math.min(St,i||0)));t.fillStyle=e.backgroundColor,t.strokeStyle=e.borderColor,function(t,e,i,s,n){const{fullCircles:o,startAngle:a,circumference:r}=e;let l=e.endAngle;if(o){Un(t,e,i,s,l,n);for(let e=0;e<o;++e)t.fill();isNaN(r)||(l=a+(r%Dt||Dt))}Un(t,e,i,s,l,n),t.fill()}(t,this,r,n,o),function(t,e,i,s,n){const{fullCircles:o,startAngle:a,circumference:r,options:l}=e,{borderWidth:h,borderJoinStyle:c,borderDash:d,borderDashOffset:u}=l,f="inner"===l.borderAlign;if(!h)return;t.setLineDash(d||[]),t.lineDashOffset=u,f?(t.lineWidth=2*h,t.lineJoin=c||"round"):(t.lineWidth=h,t.lineJoin=c||"bevel");let g=e.endAngle;if(o){Un(t,e,i,s,g,n);for(let e=0;e<o;++e)t.stroke();isNaN(r)||(g=a+(r%Dt||Dt))}f&&function(t,e,i){const{startAngle:s,pixelMargin:n,x:o,y:a,outerRadius:r,innerRadius:l}=e;let h=n/r;t.beginPath(),t.arc(o,a,r,s-h,i+h),l>n?(h=n/l,t.arc(o,a,l,i+h,s-h,!0)):t.arc(o,a,n,i+Bt,s-Bt),t.closePath(),t.clip()}(t,e,g),o||(Un(t,e,i,s,g,n),t.stroke())}(t,this,r,n,o),t.restore()}},BarElement:class extends on{static id="bar";static defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){const{inflateAmount:e,options:{borderColor:i,backgroundColor:s}}=this,{inner:n,outer:o}=function(t){const e=io(t),i=e.right-e.left,s=e.bottom-e.top,n=function(t,e,i){const s=t.options.borderWidth,n=t.borderSkipped,o=qe(s);return{t:so(n.top,o.top,0,i),r:so(n.right,o.right,0,e),b:so(n.bottom,o.bottom,0,i),l:so(n.left,o.left,0,e)}}(t,i/2,s/2),o=function(t,e,i){const{enableBorderRadius:s}=t.getProps(["enableBorderRadius"]),n=t.options.borderRadius,o=Ke(n),a=Math.min(e,i),r=t.borderSkipped,l=s||lt(n);return{topLeft:so(!l||r.top||r.left,o.topLeft,0,a),topRight:so(!l||r.top||r.right,o.topRight,0,a),bottomLeft:so(!l||r.bottom||r.left,o.bottomLeft,0,a),bottomRight:so(!l||r.bottom||r.right,o.bottomRight,0,a)}}(t,i/2,s/2);return{outer:{x:e.left,y:e.top,w:i,h:s,radius:o},inner:{x:e.left+n.l,y:e.top+n.t,w:i-n.l-n.r,h:s-n.t-n.b,radius:{topLeft:Math.max(0,o.topLeft-Math.max(n.t,n.l)),topRight:Math.max(0,o.topRight-Math.max(n.t,n.r)),bottomLeft:Math.max(0,o.bottomLeft-Math.max(n.b,n.l)),bottomRight:Math.max(0,o.bottomRight-Math.max(n.b,n.r))}}}}(this),a=(r=o.radius).topLeft||r.topRight||r.bottomLeft||r.bottomRight?He:oo;var r;t.save(),o.w===n.w&&o.h===n.h||(t.beginPath(),a(t,ao(o,e,n)),t.clip(),a(t,ao(n,-e,o)),t.fillStyle=i,t.fill("evenodd")),t.beginPath(),a(t,ao(n,e)),t.fillStyle=s,t.fill(),t.restore()}inRange(t,e,i){return no(this,t,e,i)}inXRange(t,e){return no(this,t,null,e)}inYRange(t,e){return no(this,null,t,e)}getCenterPoint(t){const{x:e,y:i,base:s,horizontal:n}=this.getProps(["x","y","base","horizontal"],t);return{x:n?(e+s)/2:e,y:n?i:(i+s)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}},LineElement:to,PointElement:class extends on{static id="point";parsed;skip;stop;static defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,i){const s=this.options,{x:n,y:o}=this.getProps(["x","y"],i);return Math.pow(t-n,2)+Math.pow(e-o,2)<Math.pow(s.hitRadius+s.radius,2)}inXRange(t,e){return eo(this,t,"x",e)}inYRange(t,e){return eo(this,t,"y",e)}getCenterPoint(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}size(t){let e=(t=t||this.options||{}).radius||0;return e=Math.max(e,e&&t.hoverRadius||0),2*(e+(e&&t.borderWidth||0))}draw(t,e){const i=this.options;this.skip||i.radius<.1||!Re(this,e,this.size(i)/2)||(t.strokeStyle=i.borderColor,t.lineWidth=i.borderWidth,t.fillStyle=i.backgroundColor,Be(t,i,this.x,this.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}}});const lo=["rgb(54, 162, 235)","rgb(255, 99, 132)","rgb(255, 159, 64)","rgb(255, 205, 86)","rgb(75, 192, 192)","rgb(153, 102, 255)","rgb(201, 203, 207)"],ho=lo.map((t=>t.replace("rgb(","rgba(").replace(")",", 0.5)")));function co(t){return lo[t%lo.length]}function uo(t){return ho[t%ho.length]}function fo(t){let e;for(e in t)if(t[e].borderColor||t[e].backgroundColor)return!0;return!1}var go={id:"colors",defaults:{enabled:!0,forceOverride:!1},beforeLayout(t,e,i){if(!i.enabled)return;const{data:{datasets:s},options:n}=t.config,{elements:o}=n;if(!i.forceOverride&&(fo(s)||(a=n)&&(a.borderColor||a.backgroundColor)||o&&fo(o)))return;var a;const r=function(t){let e=0;return(i,s)=>{const n=t.getDatasetMeta(s).controller;n instanceof bs?e=function(t,e){return t.backgroundColor=t.data.map((()=>co(e++))),e}(i,e):n instanceof xs?e=function(t,e){return t.backgroundColor=t.data.map((()=>uo(e++))),e}(i,e):n&&(e=function(t,e){return t.borderColor=co(e),t.backgroundColor=uo(e),++e}(i,e))}}(t);s.forEach(r)}};function po(t){if(t._decimated){const e=t._data;delete t._decimated,delete t._data,Object.defineProperty(t,"data",{configurable:!0,enumerable:!0,writable:!0,value:e})}}function mo(t){t.data.datasets.forEach((t=>{po(t)}))}var bo={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(t,e,i)=>{if(!i.enabled)return void mo(t);const s=t.width;t.data.datasets.forEach(((e,n)=>{const{_data:o,indexAxis:a}=e,r=t.getDatasetMeta(n),l=o||e.data;if("y"===Qe([a,t.options.indexAxis]))return;if(!r.controller.supportsDecimation)return;const h=t.scales[r.xAxisID];if("linear"!==h.type&&"time"!==h.type)return;if(t.options.parsing)return;let c,{start:d,count:u}=function(t,e){const i=e.length;let s,n=0;const{iScale:o}=t,{min:a,max:r,minDefined:l,maxDefined:h}=o.getUserBounds();return l&&(n=Kt(Qt(e,o.axis,a).lo,0,i-1)),s=h?Kt(Qt(e,o.axis,r).hi+1,n,i)-n:i-n,{start:n,count:s}}(r,l);if(u<=(i.threshold||4*s))po(e);else{switch(at(o)&&(e._data=l,delete e.data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(t){this._data=t}})),i.algorithm){case"lttb":c=function(t,e,i,s,n){const o=n.samples||s;if(o>=i)return t.slice(e,e+i);const a=[],r=(i-2)/(o-2);let l=0;const h=e+i-1;let c,d,u,f,g,p=e;for(a[l++]=t[p],c=0;c<o-2;c++){let s,n=0,o=0;const h=Math.floor((c+1)*r)+1+e,m=Math.min(Math.floor((c+2)*r)+1,i)+e,b=m-h;for(s=h;s<m;s++)n+=t[s].x,o+=t[s].y;n/=b,o/=b;const x=Math.floor(c*r)+1+e,y=Math.min(Math.floor((c+1)*r)+1,i)+e,{x:_,y:v}=t[p];for(u=f=-1,s=x;s<y;s++)f=.5*Math.abs((_-n)*(t[s].y-v)-(_-t[s].x)*(o-v)),f>u&&(u=f,d=t[s],g=s);a[l++]=d,p=g}return a[l++]=t[h],a}(l,d,u,s,i);break;case"min-max":c=function(t,e,i,s){let n,o,a,r,l,h,c,d,u,f,g=0,p=0;const m=[],b=e+i-1,x=t[e].x,y=t[b].x-x;for(n=e;n<e+i;++n){o=t[n],a=(o.x-x)/y*s,r=o.y;const e=0|a;if(e===l)r<u?(u=r,h=n):r>f&&(f=r,c=n),g=(p*g+o.x)/++p;else{const i=n-1;if(!at(h)&&!at(c)){const e=Math.min(h,c),s=Math.max(h,c);e!==d&&e!==i&&m.push({...t[e],x:g}),s!==d&&s!==i&&m.push({...t[s],x:g})}n>0&&i!==d&&m.push(t[i]),m.push(o),l=e,p=0,u=f=r,h=c=d=n}}return m}(l,d,u,s);break;default:throw new Error(`Unsupported decimation algorithm '${i.algorithm}'`)}e._decimated=c}}))},destroy(t){mo(t)}};function xo(t,e,i,s){if(s)return;let n=e[t],o=i[t];return"angle"===t&&(n=Zt(n),o=Zt(o)),{property:t,start:n,end:o}}function yo(t,e,i){for(;e>t;e--){const t=i[e];if(!isNaN(t.x)&&!isNaN(t.y))break}return e}function _o(t,e,i,s){return t&&e?s(t[i],e[i]):t?t[i]:e?e[i]:0}function vo(t,e){let i=[],s=!1;return rt(t)?(s=!0,i=t):i=function(t,e){const{x:i=null,y:s=null}=t||{},n=e.points,o=[];return e.segments.forEach((({start:t,end:e})=>{e=yo(t,e,n);const a=n[t],r=n[e];null!==s?(o.push({x:a.x,y:s}),o.push({x:r.x,y:s})):null!==i&&(o.push({x:i,y:a.y}),o.push({x:i,y:r.y}))})),o}(t,e),i.length?new to({points:i,options:{tension:0},_loop:s,_fullLoop:s}):null}function Ao(t){return t&&!1!==t.fill}function wo(t,e,i){let s=t[e].fill;const n=[e];let o;if(!i)return s;for(;!1!==s&&-1===n.indexOf(s);){if(!ht(s))return s;if(o=t[s],!o)return!1;if(o.visible)return s;n.push(s),s=o.fill}return!1}function Mo(t,e,i){const s=function(t){const e=t.options,i=e.fill;let s=dt(i&&i.target,i);return void 0===s&&(s=!!e.backgroundColor),!1!==s&&null!==s&&(!0===s?"origin":s)}(t);if(lt(s))return!isNaN(s.value)&&s;let n=parseFloat(s);return ht(n)&&Math.floor(n)===n?function(t,e,i,s){return"-"!==t&&"+"!==t||(i=e+i),!(i===e||i<0||i>=s)&&i}(s[0],e,n,i):["origin","start","end","stack","shape"].indexOf(s)>=0&&s}function ko(t,e,i){const s=[];for(let n=0;n<i.length;n++){const o=i[n],{first:a,last:r,point:l}=Co(o,e,"x");if(!(!l||a&&r))if(a)s.unshift(l);else if(t.push(l),!r)break}t.push(...s)}function Co(t,e,i){const s=t.interpolate(e,i);if(!s)return{};const n=s[i],o=t.segments,a=t.points;let r=!1,l=!1;for(let t=0;t<o.length;t++){const e=o[t],s=a[e.start][i],h=a[e.end][i];if(Gt(n,s,h)){r=n===s,l=n===h;break}}return{first:r,last:l,point:s}}class Eo{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,e,i){const{x:s,y:n,radius:o}=this;return e=e||{start:0,end:Dt},t.arc(s,n,o,e.end,e.start,!0),!i.bounds}interpolate(t){const{x:e,y:i,radius:s}=this,n=t.angle;return{x:e+Math.cos(n)*s,y:i+Math.sin(n)*s,angle:n}}}function So(t,e,i){const s=function(t){const{chart:e,fill:i,line:s}=t;if(ht(i))return function(t,e){const i=t.getDatasetMeta(e);return i&&t.isDatasetVisible(e)?i.dataset:null}(e,i);if("stack"===i)return function(t){const{scale:e,index:i,line:s}=t,n=[],o=s.segments,a=s.points,r=function(t,e){const i=[],s=t.getMatchingVisibleMetas("line");for(let t=0;t<s.length;t++){const n=s[t];if(n.index===e)break;n.hidden||i.unshift(n.dataset)}return i}(e,i);r.push(vo({x:null,y:e.bottom},s));for(let t=0;t<o.length;t++){const e=o[t];for(let t=e.start;t<=e.end;t++)ko(n,a[t],r)}return new to({points:n,options:{}})}(t);if("shape"===i)return!0;const n=function(t){return(t.scale||{}).getPointPositionForValue?function(t){const{scale:e,fill:i}=t,s=e.options,n=e.getLabels().length,o=s.reverse?e.max:e.min,a=function(t,e,i){let s;return s="start"===t?i:"end"===t?e.options.reverse?e.min:e.max:lt(t)?t.value:e.getBaseValue(),s}(i,e,o),r=[];if(s.grid.circular){const t=e.getPointPositionForValue(0,o);return new Eo({x:t.x,y:t.y,radius:e.getDistanceFromCenterForValue(a)})}for(let t=0;t<n;++t)r.push(e.getPointPositionForValue(t,a));return r}(t):function(t){const{scale:e={},fill:i}=t,s=function(t,e){let i=null;return"start"===t?i=e.bottom:"end"===t?i=e.top:lt(t)?i=e.getPixelForValue(t.value):e.getBasePixel&&(i=e.getBasePixel()),i}(i,e);if(ht(s)){const t=e.isHorizontal();return{x:t?s:null,y:t?null:s}}return null}(t)}(t);return n instanceof Eo?n:vo(n,s)}(e),{line:n,scale:o,axis:a}=e,r=n.options,l=r.fill,h=r.backgroundColor,{above:c=h,below:d=h}=l||{};s&&n.points.length&&(Ie(t,i),function(t,e){const{line:i,target:s,above:n,below:o,area:a,scale:r}=e,l=i._loop?"angle":e.axis;t.save(),"x"===l&&o!==n&&(Do(t,s,a.top),Po(t,{line:i,target:s,color:n,scale:r,property:l}),t.restore(),t.save(),Do(t,s,a.bottom)),Po(t,{line:i,target:s,color:o,scale:r,property:l}),t.restore()}(t,{line:n,target:s,above:c,below:d,area:i,scale:o,axis:a}),ze(t))}function Do(t,e,i){const{segments:s,points:n}=e;let o=!0,a=!1;t.beginPath();for(const r of s){const{start:s,end:l}=r,h=n[s],c=n[yo(s,l,n)];o?(t.moveTo(h.x,h.y),o=!1):(t.lineTo(h.x,i),t.lineTo(h.x,h.y)),a=!!e.pathSegment(t,r,{move:a}),a?t.closePath():t.lineTo(c.x,i)}t.lineTo(e.first().x,i),t.closePath(),t.clip()}function Po(t,e){const{line:i,target:s,property:n,color:o,scale:a}=e,r=function(t,e,i){const s=t.segments,n=t.points,o=e.points,a=[];for(const t of s){let{start:s,end:r}=t;r=yo(s,r,n);const l=xo(i,n[s],n[r],t.loop);if(!e.segments){a.push({source:t,target:l,start:n[s],end:n[r]});continue}const h=ji(e,l);for(const e of h){const s=xo(i,o[e.start],o[e.end],e.loop),r=Ni(t,n,s);for(const t of r)a.push({source:t,target:e,start:{[i]:_o(l,s,"start",Math.max)},end:{[i]:_o(l,s,"end",Math.min)}})}}return a}(i,s,n);for(const{source:e,target:l,start:h,end:c}of r){const{style:{backgroundColor:r=o}={}}=e,d=!0!==s;t.save(),t.fillStyle=r,Oo(t,a,d&&xo(n,h,c)),t.beginPath();const u=!!i.pathSegment(t,e);let f;if(d){u?t.closePath():To(t,s,c,n);const e=!!s.pathSegment(t,l,{move:u,reverse:!0});f=u&&e,f||To(t,s,h,n)}t.closePath(),t.fill(f?"evenodd":"nonzero"),t.restore()}}function Oo(t,e,i){const{top:s,bottom:n}=e.chart.chartArea,{property:o,start:a,end:r}=i||{};"x"===o&&(t.beginPath(),t.rect(a,s,r-a,n-s),t.clip())}function To(t,e,i,s){const n=e.interpolate(i,s);n&&t.lineTo(n.x,n.y)}var Bo={id:"filler",afterDatasetsUpdate(t,e,i){const s=(t.data.datasets||[]).length,n=[];let o,a,r,l;for(a=0;a<s;++a)o=t.getDatasetMeta(a),r=o.dataset,l=null,r&&r.options&&r instanceof to&&(l={visible:t.isDatasetVisible(a),index:a,fill:Mo(r,a,s),chart:t,axis:o.controller.options.indexAxis,scale:o.vScale,line:r}),o.$filler=l,n.push(l);for(a=0;a<s;++a)l=n[a],l&&!1!==l.fill&&(l.fill=wo(n,a,i.propagate))},beforeDraw(t,e,i){const s="beforeDraw"===i.drawTime,n=t.getSortedVisibleDatasetMetas(),o=t.chartArea;for(let e=n.length-1;e>=0;--e){const i=n[e].$filler;i&&(i.line.updateControlPoints(o,i.axis),s&&i.fill&&So(t.ctx,i,o))}},beforeDatasetsDraw(t,e,i){if("beforeDatasetsDraw"!==i.drawTime)return;const s=t.getSortedVisibleDatasetMetas();for(let e=s.length-1;e>=0;--e){const i=s[e].$filler;Ao(i)&&So(t.ctx,i,t.chartArea)}},beforeDatasetDraw(t,e,i){const s=e.meta.$filler;Ao(s)&&"beforeDatasetDraw"===i.drawTime&&So(t.ctx,s,t.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const Lo=(t,e)=>{let{boxHeight:i=e,boxWidth:s=e}=t;return t.usePointStyle&&(i=Math.min(i,e),s=t.pointStyleWidth||Math.min(s,e)),{boxWidth:s,boxHeight:i,itemHeight:Math.max(e,i)}};class Ro extends on{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,i){this.maxWidth=t,this.maxHeight=e,this._margins=i,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const t=this.options.labels||{};let e=ft(t.generateLabels,[this.chart],this)||[];t.filter&&(e=e.filter((e=>t.filter(e,this.chart.data)))),t.sort&&(e=e.sort(((e,i)=>t.sort(e,i,this.chart.data)))),this.options.reverse&&e.reverse(),this.legendItems=e}fit(){const{options:t,ctx:e}=this;if(!t.display)return void(this.width=this.height=0);const i=t.labels,s=Je(i.font),n=s.size,o=this._computeTitleHeight(),{boxWidth:a,itemHeight:r}=Lo(i,n);let l,h;e.font=s.string,this.isHorizontal()?(l=this.maxWidth,h=this._fitRows(o,n,a,r)+10):(h=this.maxHeight,l=this._fitCols(o,s,a,r)+10),this.width=Math.min(l,t.maxWidth||this.maxWidth),this.height=Math.min(h,t.maxHeight||this.maxHeight)}_fitRows(t,e,i,s){const{ctx:n,maxWidth:o,options:{labels:{padding:a}}}=this,r=this.legendHitBoxes=[],l=this.lineWidths=[0],h=s+a;let c=t;n.textAlign="left",n.textBaseline="middle";let d=-1,u=-h;return this.legendItems.forEach(((t,f)=>{const g=i+e/2+n.measureText(t.text).width;(0===f||l[l.length-1]+g+2*a>o)&&(c+=h,l[l.length-(f>0?0:1)]=0,u+=h,d++),r[f]={left:0,top:u,row:d,width:g,height:s},l[l.length-1]+=g+a})),c}_fitCols(t,e,i,s){const{ctx:n,maxHeight:o,options:{labels:{padding:a}}}=this,r=this.legendHitBoxes=[],l=this.columnSizes=[],h=o-t;let c=a,d=0,u=0,f=0,g=0;return this.legendItems.forEach(((t,o)=>{const{itemWidth:p,itemHeight:m}=function(t,e,i,s,n){const o=function(t,e,i,s){let n=t.text;return n&&"string"!=typeof n&&(n=n.reduce(((t,e)=>t.length>e.length?t:e))),e+i.size/2+s.measureText(n).width}(s,t,e,i),a=function(t,e,i){let s=t;return"string"!=typeof e.text&&(s=Io(e,i)),s}(n,s,e.lineHeight);return{itemWidth:o,itemHeight:a}}(i,e,n,t,s);o>0&&u+m+2*a>h&&(c+=d+a,l.push({width:d,height:u}),f+=d+a,g++,d=u=0),r[o]={left:f,top:u,col:g,width:p,height:m},d=Math.max(d,p),u+=m+a})),c+=d,l.push({width:d,height:u}),c}adjustHitBoxes(){if(!this.options.display)return;const t=this._computeTitleHeight(),{legendHitBoxes:e,options:{align:i,labels:{padding:s},rtl:n}}=this,o=Ii(n,this.left,this.width);if(this.isHorizontal()){let n=0,a=re(i,this.left+s,this.right-this.lineWidths[n]);for(const r of e)n!==r.row&&(n=r.row,a=re(i,this.left+s,this.right-this.lineWidths[n])),r.top+=this.top+t+s,r.left=o.leftForLtr(o.x(a),r.width),a+=r.width+s}else{let n=0,a=re(i,this.top+t+s,this.bottom-this.columnSizes[n].height);for(const r of e)r.col!==n&&(n=r.col,a=re(i,this.top+t+s,this.bottom-this.columnSizes[n].height)),r.top=a,r.left+=this.left+s,r.left=o.leftForLtr(o.x(r.left),r.width),a+=r.height+s}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const t=this.ctx;Ie(t,this),this._draw(),ze(t)}}_draw(){const{options:t,columnSizes:e,lineWidths:i,ctx:s}=this,{align:n,labels:o}=t,a=Se.color,r=Ii(t.rtl,this.left,this.width),l=Je(o.font),{padding:h}=o,c=l.size,d=c/2;let u;this.drawTitle(),s.textAlign=r.textAlign("left"),s.textBaseline="middle",s.lineWidth=.5,s.font=l.string;const{boxWidth:f,boxHeight:g,itemHeight:p}=Lo(o,c),m=this.isHorizontal(),b=this._computeTitleHeight();u=m?{x:re(n,this.left+h,this.right-i[0]),y:this.top+h+b,line:0}:{x:this.left+h,y:re(n,this.top+b+h,this.bottom-e[0].height),line:0},zi(this.ctx,t.textDirection);const x=p+h;this.legendItems.forEach(((y,_)=>{s.strokeStyle=y.fontColor,s.fillStyle=y.fontColor;const v=s.measureText(y.text).width,A=r.textAlign(y.textAlign||(y.textAlign=o.textAlign)),w=f+d+v;let M=u.x,k=u.y;if(r.setWidth(this.width),m?_>0&&M+w+h>this.right&&(k=u.y+=x,u.line++,M=u.x=re(n,this.left+h,this.right-i[u.line])):_>0&&k+x>this.bottom&&(M=u.x=M+e[u.line].width+h,u.line++,k=u.y=re(n,this.top+b+h,this.bottom-e[u.line].height)),function(t,e,i){if(isNaN(f)||f<=0||isNaN(g)||g<0)return;s.save();const n=dt(i.lineWidth,1);if(s.fillStyle=dt(i.fillStyle,a),s.lineCap=dt(i.lineCap,"butt"),s.lineDashOffset=dt(i.lineDashOffset,0),s.lineJoin=dt(i.lineJoin,"miter"),s.lineWidth=n,s.strokeStyle=dt(i.strokeStyle,a),s.setLineDash(dt(i.lineDash,[])),o.usePointStyle){const a={radius:g*Math.SQRT2/2,pointStyle:i.pointStyle,rotation:i.rotation,borderWidth:n},l=r.xPlus(t,f/2);Le(s,a,l,e+d,o.pointStyleWidth&&f)}else{const o=e+Math.max((c-g)/2,0),a=r.leftForLtr(t,f),l=Ke(i.borderRadius);s.beginPath(),Object.values(l).some((t=>0!==t))?He(s,{x:a,y:o,w:f,h:g,radius:l}):s.rect(a,o,f,g),s.fill(),0!==n&&s.stroke()}s.restore()}(r.x(M),k,y),M=((t,e,i,s)=>t===(s?"left":"right")?i:"center"===t?(e+i)/2:e)(A,M+f+d,m?M+w:this.right,t.rtl),function(t,e,i){je(s,i.text,t,e+p/2,l,{strikethrough:i.hidden,textAlign:r.textAlign(i.textAlign)})}(r.x(M),k,y),m)u.x+=w+h;else if("string"!=typeof y.text){const t=l.lineHeight;u.y+=Io(y,t)+h}else u.y+=x})),Fi(this.ctx,t.textDirection)}drawTitle(){const t=this.options,e=t.title,i=Je(e.font),s=Ge(e.padding);if(!e.display)return;const n=Ii(t.rtl,this.left,this.width),o=this.ctx,a=e.position,r=i.size/2,l=s.top+r;let h,c=this.left,d=this.width;if(this.isHorizontal())d=Math.max(...this.lineWidths),h=this.top+l,c=re(t.align,c,this.right-d);else{const e=this.columnSizes.reduce(((t,e)=>Math.max(t,e.height)),0);h=l+re(t.align,this.top,this.bottom-e-t.labels.padding-this._computeTitleHeight())}const u=re(a,c,c+d);o.textAlign=n.textAlign(ae(a)),o.textBaseline="middle",o.strokeStyle=e.color,o.fillStyle=e.color,o.font=i.string,je(o,e.text,u,h,i)}_computeTitleHeight(){const t=this.options.title,e=Je(t.font),i=Ge(t.padding);return t.display?e.lineHeight+i.height:0}_getLegendItemAt(t,e){let i,s,n;if(Gt(t,this.left,this.right)&&Gt(e,this.top,this.bottom))for(n=this.legendHitBoxes,i=0;i<n.length;++i)if(s=n[i],Gt(t,s.left,s.left+s.width)&&Gt(e,s.top,s.top+s.height))return this.legendItems[i];return null}handleEvent(t){const e=this.options;if(!function(t,e){return!("mousemove"!==t&&"mouseout"!==t||!e.onHover&&!e.onLeave)||!(!e.onClick||"click"!==t&&"mouseup"!==t)}(t.type,e))return;const i=this._getLegendItemAt(t.x,t.y);if("mousemove"===t.type||"mouseout"===t.type){const o=this._hoveredItem,a=(n=i,null!==(s=o)&&null!==n&&s.datasetIndex===n.datasetIndex&&s.index===n.index);o&&!a&&ft(e.onLeave,[t,o,this],this),this._hoveredItem=i,i&&!a&&ft(e.onHover,[t,i,this],this)}else i&&ft(e.onClick,[t,i,this],this);var s,n}}function Io(t,e){return e*(t.text?t.text.length:0)}var zo={id:"legend",_element:Ro,start(t,e,i){const s=t.legend=new Ro({ctx:t.ctx,options:i,chart:t});Vs.configure(t,s,i),Vs.addBox(t,s)},stop(t){Vs.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,i){const s=t.legend;Vs.configure(t,s,i),s.options=i},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,i){const s=e.datasetIndex,n=i.chart;n.isDatasetVisible(s)?(n.hide(s),e.hidden=!0):(n.show(s),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const e=t.data.datasets,{labels:{usePointStyle:i,pointStyle:s,textAlign:n,color:o,useBorderRadius:a,borderRadius:r}}=t.legend.options;return t._getSortedDatasetMetas().map((t=>{const l=t.controller.getStyle(i?0:void 0),h=Ge(l.borderWidth);return{text:e[t.index].label,fillStyle:l.backgroundColor,fontColor:o,hidden:!t.visible,lineCap:l.borderCapStyle,lineDash:l.borderDash,lineDashOffset:l.borderDashOffset,lineJoin:l.borderJoinStyle,lineWidth:(h.width+h.height)/4,strokeStyle:l.borderColor,pointStyle:s||l.pointStyle,rotation:l.rotation,textAlign:n||l.textAlign,borderRadius:a&&(r||l.borderRadius),datasetIndex:t.index}}),this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class Fo extends on{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){const i=this.options;if(this.left=0,this.top=0,!i.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=t,this.height=this.bottom=e;const s=rt(i.text)?i.text.length:1;this._padding=Ge(i.padding);const n=s*Je(i.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=n:this.width=n}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:e,left:i,bottom:s,right:n,options:o}=this,a=o.align;let r,l,h,c=0;return this.isHorizontal()?(l=re(a,i,n),h=e+t,r=n-i):("left"===o.position?(l=i+t,h=re(a,s,e),c=-.5*St):(l=n-t,h=re(a,e,s),c=.5*St),r=s-e),{titleX:l,titleY:h,maxWidth:r,rotation:c}}draw(){const t=this.ctx,e=this.options;if(!e.display)return;const i=Je(e.font),s=i.lineHeight/2+this._padding.top,{titleX:n,titleY:o,maxWidth:a,rotation:r}=this._drawArgs(s);je(t,e.text,0,0,i,{color:e.color,maxWidth:a,rotation:r,textAlign:ae(e.align),textBaseline:"middle",translation:[n,o]})}}var Wo={id:"title",_element:Fo,start(t,e,i){!function(t,e){const i=new Fo({ctx:t.ctx,options:e,chart:t});Vs.configure(t,i,e),Vs.addBox(t,i),t.titleBlock=i}(t,i)},stop(t){const e=t.titleBlock;Vs.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,i){const s=t.titleBlock;Vs.configure(t,s,i),s.options=i},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const Vo=new WeakMap;var No={id:"subtitle",start(t,e,i){const s=new Fo({ctx:t.ctx,options:i,chart:t});Vs.configure(t,s,i),Vs.addBox(t,s),Vo.set(t,s)},stop(t){Vs.removeBox(t,Vo.get(t)),Vo.delete(t)},beforeUpdate(t,e,i){const s=Vo.get(t);Vs.configure(t,s,i),s.options=i},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const jo={average(t){if(!t.length)return!1;let e,i,s=0,n=0,o=0;for(e=0,i=t.length;e<i;++e){const i=t[e].element;if(i&&i.hasValue()){const t=i.tooltipPosition();s+=t.x,n+=t.y,++o}}return{x:s/o,y:n/o}},nearest(t,e){if(!t.length)return!1;let i,s,n,o=e.x,a=e.y,r=Number.POSITIVE_INFINITY;for(i=0,s=t.length;i<s;++i){const s=t[i].element;if(s&&s.hasValue()){const t=Ut(e,s.getCenterPoint());t<r&&(r=t,n=s)}}if(n){const t=n.tooltipPosition();o=t.x,a=t.y}return{x:o,y:a}}};function Ho(t,e){return e&&(rt(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function $o(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function Yo(t,e){const{element:i,datasetIndex:s,index:n}=e,o=t.getDatasetMeta(s).controller,{label:a,value:r}=o.getLabelAndValue(n);return{chart:t,label:a,parsed:o.getParsed(n),raw:t.data.datasets[s].data[n],formattedValue:r,dataset:o.getDataset(),dataIndex:n,datasetIndex:s,element:i}}function Uo(t,e){const i=t.chart.ctx,{body:s,footer:n,title:o}=t,{boxWidth:a,boxHeight:r}=e,l=Je(e.bodyFont),h=Je(e.titleFont),c=Je(e.footerFont),d=o.length,u=n.length,f=s.length,g=Ge(e.padding);let p=g.height,m=0,b=s.reduce(((t,e)=>t+e.before.length+e.lines.length+e.after.length),0);b+=t.beforeBody.length+t.afterBody.length,d&&(p+=d*h.lineHeight+(d-1)*e.titleSpacing+e.titleMarginBottom),b&&(p+=f*(e.displayColors?Math.max(r,l.lineHeight):l.lineHeight)+(b-f)*l.lineHeight+(b-1)*e.bodySpacing),u&&(p+=e.footerMarginTop+u*c.lineHeight+(u-1)*e.footerSpacing);let x=0;const y=function(t){m=Math.max(m,i.measureText(t).width+x)};return i.save(),i.font=h.string,gt(t.title,y),i.font=l.string,gt(t.beforeBody.concat(t.afterBody),y),x=e.displayColors?a+2+e.boxPadding:0,gt(s,(t=>{gt(t.before,y),gt(t.lines,y),gt(t.after,y)})),x=0,i.font=c.string,gt(t.footer,y),i.restore(),m+=g.width,{width:m,height:p}}function Xo(t,e,i,s){const{x:n,width:o}=i,{width:a,chartArea:{left:r,right:l}}=t;let h="center";return"center"===s?h=n<=(r+l)/2?"left":"right":n<=o/2?h="left":n>=a-o/2&&(h="right"),function(t,e,i,s){const{x:n,width:o}=s,a=i.caretSize+i.caretPadding;return"left"===t&&n+o+a>e.width||"right"===t&&n-o-a<0||void 0}(h,t,e,i)&&(h="center"),h}function Zo(t,e,i){const s=i.yAlign||e.yAlign||function(t,e){const{y:i,height:s}=e;return i<s/2?"top":i>t.height-s/2?"bottom":"center"}(t,i);return{xAlign:i.xAlign||e.xAlign||Xo(t,e,i,s),yAlign:s}}function qo(t,e,i,s){const{caretSize:n,caretPadding:o,cornerRadius:a}=t,{xAlign:r,yAlign:l}=i,h=n+o,{topLeft:c,topRight:d,bottomLeft:u,bottomRight:f}=Ke(a);let g=function(t,e){let{x:i,width:s}=t;return"right"===e?i-=s:"center"===e&&(i-=s/2),i}(e,r);const p=function(t,e,i){let{y:s,height:n}=t;return"top"===e?s+=i:s-="bottom"===e?n+i:n/2,s}(e,l,h);return"center"===l?"left"===r?g+=h:"right"===r&&(g-=h):"left"===r?g-=Math.max(c,u)+n:"right"===r&&(g+=Math.max(d,f)+n),{x:Kt(g,0,s.width-e.width),y:Kt(p,0,s.height-e.height)}}function Ko(t,e,i){const s=Ge(i.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-s.right:t.x+s.left}function Go(t){return Ho([],$o(t))}function Jo(t,e){const i=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return i?t.override(i):t}const Qo={beforeTitle:nt,title(t){if(t.length>0){const e=t[0],i=e.chart.data.labels,s=i?i.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(s>0&&e.dataIndex<s)return i[e.dataIndex]}return""},afterTitle:nt,beforeBody:nt,beforeLabel:nt,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");const i=t.formattedValue;return at(i)||(e+=i),e},labelColor(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:nt,afterBody:nt,beforeFooter:nt,footer:nt,afterFooter:nt};function ta(t,e,i,s){const n=t[e].call(i,s);return void 0===n?Qo[e].call(i,s):n}class ea extends on{static positioners=jo;constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this._cachedAnimations;if(t)return t;const e=this.chart,i=this.options.setContext(this.getContext()),s=i.enabled&&e.options.animation&&i.animations,n=new Ki(this.chart,s);return s._cacheable&&(this._cachedAnimations=Object.freeze(n)),n}getContext(){return this.$context||(this.$context=(this,ti(this.chart.getContext(),{tooltip:this,tooltipItems:this._tooltipItems,type:"tooltip"})))}getTitle(t,e){const{callbacks:i}=e,s=ta(i,"beforeTitle",this,t),n=ta(i,"title",this,t),o=ta(i,"afterTitle",this,t);let a=[];return a=Ho(a,$o(s)),a=Ho(a,$o(n)),a=Ho(a,$o(o)),a}getBeforeBody(t,e){return Go(ta(e.callbacks,"beforeBody",this,t))}getBody(t,e){const{callbacks:i}=e,s=[];return gt(t,(t=>{const e={before:[],lines:[],after:[]},n=Jo(i,t);Ho(e.before,$o(ta(n,"beforeLabel",this,t))),Ho(e.lines,ta(n,"label",this,t)),Ho(e.after,$o(ta(n,"afterLabel",this,t))),s.push(e)})),s}getAfterBody(t,e){return Go(ta(e.callbacks,"afterBody",this,t))}getFooter(t,e){const{callbacks:i}=e,s=ta(i,"beforeFooter",this,t),n=ta(i,"footer",this,t),o=ta(i,"afterFooter",this,t);let a=[];return a=Ho(a,$o(s)),a=Ho(a,$o(n)),a=Ho(a,$o(o)),a}_createItems(t){const e=this._active,i=this.chart.data,s=[],n=[],o=[];let a,r,l=[];for(a=0,r=e.length;a<r;++a)l.push(Yo(this.chart,e[a]));return t.filter&&(l=l.filter(((e,s,n)=>t.filter(e,s,n,i)))),t.itemSort&&(l=l.sort(((e,s)=>t.itemSort(e,s,i)))),gt(l,(e=>{const i=Jo(t.callbacks,e);s.push(ta(i,"labelColor",this,e)),n.push(ta(i,"labelPointStyle",this,e)),o.push(ta(i,"labelTextColor",this,e))})),this.labelColors=s,this.labelPointStyles=n,this.labelTextColors=o,this.dataPoints=l,l}update(t,e){const i=this.options.setContext(this.getContext()),s=this._active;let n,o=[];if(s.length){const t=jo[i.position].call(this,s,this._eventPosition);o=this._createItems(i),this.title=this.getTitle(o,i),this.beforeBody=this.getBeforeBody(o,i),this.body=this.getBody(o,i),this.afterBody=this.getAfterBody(o,i),this.footer=this.getFooter(o,i);const e=this._size=Uo(this,i),a=Object.assign({},t,e),r=Zo(this.chart,i,a),l=qo(i,a,r,this.chart);this.xAlign=r.xAlign,this.yAlign=r.yAlign,n={opacity:1,x:l.x,y:l.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==this.opacity&&(n={opacity:0});this._tooltipItems=o,this.$context=void 0,n&&this._resolveAnimations().update(this,n),t&&i.external&&i.external.call(this,{chart:this.chart,tooltip:this,replay:e})}drawCaret(t,e,i,s){const n=this.getCaretPosition(t,i,s);e.lineTo(n.x1,n.y1),e.lineTo(n.x2,n.y2),e.lineTo(n.x3,n.y3)}getCaretPosition(t,e,i){const{xAlign:s,yAlign:n}=this,{caretSize:o,cornerRadius:a}=i,{topLeft:r,topRight:l,bottomLeft:h,bottomRight:c}=Ke(a),{x:d,y:u}=t,{width:f,height:g}=e;let p,m,b,x,y,_;return"center"===n?(y=u+g/2,"left"===s?(p=d,m=p-o,x=y+o,_=y-o):(p=d+f,m=p+o,x=y-o,_=y+o),b=p):(m="left"===s?d+Math.max(r,h)+o:"right"===s?d+f-Math.max(l,c)-o:this.caretX,"top"===n?(x=u,y=x-o,p=m-o,b=m+o):(x=u+g,y=x+o,p=m+o,b=m-o),_=x),{x1:p,x2:m,x3:b,y1:x,y2:y,y3:_}}drawTitle(t,e,i){const s=this.title,n=s.length;let o,a,r;if(n){const l=Ii(i.rtl,this.x,this.width);for(t.x=Ko(this,i.titleAlign,i),e.textAlign=l.textAlign(i.titleAlign),e.textBaseline="middle",o=Je(i.titleFont),a=i.titleSpacing,e.fillStyle=i.titleColor,e.font=o.string,r=0;r<n;++r)e.fillText(s[r],l.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+a,r+1===n&&(t.y+=i.titleMarginBottom-a)}}_drawColorBox(t,e,i,s,n){const o=this.labelColors[i],a=this.labelPointStyles[i],{boxHeight:r,boxWidth:l}=n,h=Je(n.bodyFont),c=Ko(this,"left",n),d=s.x(c),u=r<h.lineHeight?(h.lineHeight-r)/2:0,f=e.y+u;if(n.usePointStyle){const e={radius:Math.min(l,r)/2,pointStyle:a.pointStyle,rotation:a.rotation,borderWidth:1},i=s.leftForLtr(d,l)+l/2,h=f+r/2;t.strokeStyle=n.multiKeyBackground,t.fillStyle=n.multiKeyBackground,Be(t,e,i,h),t.strokeStyle=o.borderColor,t.fillStyle=o.backgroundColor,Be(t,e,i,h)}else{t.lineWidth=lt(o.borderWidth)?Math.max(...Object.values(o.borderWidth)):o.borderWidth||1,t.strokeStyle=o.borderColor,t.setLineDash(o.borderDash||[]),t.lineDashOffset=o.borderDashOffset||0;const e=s.leftForLtr(d,l),i=s.leftForLtr(s.xPlus(d,1),l-2),a=Ke(o.borderRadius);Object.values(a).some((t=>0!==t))?(t.beginPath(),t.fillStyle=n.multiKeyBackground,He(t,{x:e,y:f,w:l,h:r,radius:a}),t.fill(),t.stroke(),t.fillStyle=o.backgroundColor,t.beginPath(),He(t,{x:i,y:f+1,w:l-2,h:r-2,radius:a}),t.fill()):(t.fillStyle=n.multiKeyBackground,t.fillRect(e,f,l,r),t.strokeRect(e,f,l,r),t.fillStyle=o.backgroundColor,t.fillRect(i,f+1,l-2,r-2))}t.fillStyle=this.labelTextColors[i]}drawBody(t,e,i){const{body:s}=this,{bodySpacing:n,bodyAlign:o,displayColors:a,boxHeight:r,boxWidth:l,boxPadding:h}=i,c=Je(i.bodyFont);let d=c.lineHeight,u=0;const f=Ii(i.rtl,this.x,this.width),g=function(i){e.fillText(i,f.x(t.x+u),t.y+d/2),t.y+=d+n},p=f.textAlign(o);let m,b,x,y,_,v,A;for(e.textAlign=o,e.textBaseline="middle",e.font=c.string,t.x=Ko(this,p,i),e.fillStyle=i.bodyColor,gt(this.beforeBody,g),u=a&&"right"!==p?"center"===o?l/2+h:l+2+h:0,y=0,v=s.length;y<v;++y){for(m=s[y],b=this.labelTextColors[y],e.fillStyle=b,gt(m.before,g),x=m.lines,a&&x.length&&(this._drawColorBox(e,t,y,f,i),d=Math.max(c.lineHeight,r)),_=0,A=x.length;_<A;++_)g(x[_]),d=c.lineHeight;gt(m.after,g)}u=0,d=c.lineHeight,gt(this.afterBody,g),t.y-=n}drawFooter(t,e,i){const s=this.footer,n=s.length;let o,a;if(n){const r=Ii(i.rtl,this.x,this.width);for(t.x=Ko(this,i.footerAlign,i),t.y+=i.footerMarginTop,e.textAlign=r.textAlign(i.footerAlign),e.textBaseline="middle",o=Je(i.footerFont),e.fillStyle=i.footerColor,e.font=o.string,a=0;a<n;++a)e.fillText(s[a],r.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+i.footerSpacing}}drawBackground(t,e,i,s){const{xAlign:n,yAlign:o}=this,{x:a,y:r}=t,{width:l,height:h}=i,{topLeft:c,topRight:d,bottomLeft:u,bottomRight:f}=Ke(s.cornerRadius);e.fillStyle=s.backgroundColor,e.strokeStyle=s.borderColor,e.lineWidth=s.borderWidth,e.beginPath(),e.moveTo(a+c,r),"top"===o&&this.drawCaret(t,e,i,s),e.lineTo(a+l-d,r),e.quadraticCurveTo(a+l,r,a+l,r+d),"center"===o&&"right"===n&&this.drawCaret(t,e,i,s),e.lineTo(a+l,r+h-f),e.quadraticCurveTo(a+l,r+h,a+l-f,r+h),"bottom"===o&&this.drawCaret(t,e,i,s),e.lineTo(a+u,r+h),e.quadraticCurveTo(a,r+h,a,r+h-u),"center"===o&&"left"===n&&this.drawCaret(t,e,i,s),e.lineTo(a,r+c),e.quadraticCurveTo(a,r,a+c,r),e.closePath(),e.fill(),s.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this.chart,i=this.$animations,s=i&&i.x,n=i&&i.y;if(s||n){const i=jo[t.position].call(this,this._active,this._eventPosition);if(!i)return;const o=this._size=Uo(this,t),a=Object.assign({},i,this._size),r=Zo(e,t,a),l=qo(t,a,r,e);s._to===l.x&&n._to===l.y||(this.xAlign=r.xAlign,this.yAlign=r.yAlign,this.width=o.width,this.height=o.height,this.caretX=i.x,this.caretY=i.y,this._resolveAnimations().update(this,l))}}_willRender(){return!!this.opacity}draw(t){const e=this.options.setContext(this.getContext());let i=this.opacity;if(!i)return;this._updateAnimationTarget(e);const s={width:this.width,height:this.height},n={x:this.x,y:this.y};i=Math.abs(i)<.001?0:i;const o=Ge(e.padding),a=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;e.enabled&&a&&(t.save(),t.globalAlpha=i,this.drawBackground(n,t,s,e),zi(t,e.textDirection),n.y+=o.top,this.drawTitle(n,t,e),this.drawBody(n,t,e),this.drawFooter(n,t,e),Fi(t,e.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const i=this._active,s=t.map((({datasetIndex:t,index:e})=>{const i=this.chart.getDatasetMeta(t);if(!i)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:i.data[e],index:e}})),n=!pt(i,s),o=this._positionChanged(s,e);(n||o)&&(this._active=s,this._eventPosition=e,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,e,i=!0){if(e&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const s=this.options,n=this._active||[],o=this._getActiveElements(t,n,e,i),a=this._positionChanged(o,t),r=e||!pt(o,n)||a;return r&&(this._active=o,(s.enabled||s.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,e))),r}_getActiveElements(t,e,i,s){const n=this.options;if("mouseout"===t.type)return[];if(!s)return e;const o=this.chart.getElementsAtEventForMode(t,n.mode,n,i);return n.reverse&&o.reverse(),o}_positionChanged(t,e){const{caretX:i,caretY:s,options:n}=this,o=jo[n.position].call(this,t,e);return!1!==o&&(i!==o.x||s!==o.y)}}var ia={id:"tooltip",_element:ea,positioners:jo,afterInit(t,e,i){i&&(t.tooltip=new ea({chart:t,options:i}))},beforeUpdate(t,e,i){t.tooltip&&t.tooltip.initialize(i)},reset(t,e,i){t.tooltip&&t.tooltip.initialize(i)},afterDraw(t){const e=t.tooltip;if(e&&e._willRender()){const i={tooltip:e};if(!1===t.notifyPlugins("beforeTooltipDraw",{...i,cancelable:!0}))return;e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",i)}},afterEvent(t,e){if(t.tooltip){const i=e.replay;t.tooltip.handleEvent(e.event,i,e.inChartArea)&&(e.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:Qo},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},sa=Object.freeze({__proto__:null,Colors:go,Decimation:bo,Filler:Bo,Legend:zo,SubTitle:No,Title:Wo,Tooltip:ia});function na(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}function oa(t,e,{horizontal:i,minRotation:s}){const n=jt(s),o=(i?Math.sin(n):Math.cos(n))||.001,a=.75*e*(""+t).length;return Math.min(e/o,a)}class aa extends gn{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return at(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const{beginAtZero:t}=this.options,{minDefined:e,maxDefined:i}=this.getUserBounds();let{min:s,max:n}=this;const o=t=>s=e?s:t,a=t=>n=i?n:t;if(t){const t=zt(s),e=zt(n);t<0&&e<0?a(0):t>0&&e>0&&o(0)}if(s===n){let e=0===n?1:Math.abs(.05*n);a(n+e),t||o(s-e)}this.min=s,this.max=n}getTickLimit(){const t=this.options.ticks;let e,{maxTicksLimit:i,stepSize:s}=t;return s?(e=Math.ceil(this.max/s)-Math.floor(this.min/s)+1,e>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${s} would result generating up to ${e} ticks. Limiting to 1000.`),e=1e3)):(e=this.computeTickLimit(),i=i||11),i&&(e=Math.min(i,e)),e}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this.options,e=t.ticks;let i=this.getTickLimit();i=Math.max(2,i);const s=function(t,e){const i=[],{bounds:s,step:n,min:o,max:a,precision:r,count:l,maxTicks:h,maxDigits:c,includeBounds:d}=t,u=n||1,f=h-1,{min:g,max:p}=e,m=!at(o),b=!at(a),x=!at(l),y=(p-g)/(c+1);let _,v,A,w,M=Wt((p-g)/f/u)*u;if(M<1e-14&&!m&&!b)return[{value:g},{value:p}];w=Math.ceil(p/M)-Math.floor(g/M),w>f&&(M=Wt(w*M/f/u)*u),at(r)||(_=Math.pow(10,r),M=Math.ceil(M*_)/_),"ticks"===s?(v=Math.floor(g/M)*M,A=Math.ceil(p/M)*M):(v=g,A=p),m&&b&&n&&function(t,e){const i=Math.round(t);return i-e<=t&&i+e>=t}((a-o)/n,M/1e3)?(w=Math.round(Math.min((a-o)/M,h)),M=(a-o)/w,v=o,A=a):x?(v=m?o:v,A=b?a:A,w=l-1,M=(A-v)/w):(w=(A-v)/M,w=Ft(w,Math.round(w),M/1e3)?Math.round(w):Math.ceil(w));const k=Math.max($t(M),$t(v));_=Math.pow(10,at(r)?k:r),v=Math.round(v*_)/_,A=Math.round(A*_)/_;let C=0;for(m&&(d&&v!==o?(i.push({value:o}),v<o&&C++,Ft(Math.round((v+C*M)*_)/_,o,oa(o,y,t))&&C++):v<o&&C++);C<w;++C){const t=Math.round((v+C*M)*_)/_;if(b&&t>a)break;i.push({value:t})}return b&&d&&A!==a?i.length&&Ft(i[i.length-1].value,a,oa(a,y,t))?i[i.length-1].value=a:i.push({value:a}):b&&A!==a||i.push({value:A}),i}({maxTicks:i,bounds:t.bounds,min:t.min,max:t.max,precision:e.precision,step:e.stepSize,count:e.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:e.minRotation||0,includeBounds:!1!==e.includeBounds},this._range||this);return"ticks"===t.bounds&&Nt(s,this,"value"),t.reverse?(s.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),s}configure(){const t=this.ticks;let e=this.min,i=this.max;if(super.configure(),this.options.offset&&t.length){const s=(i-e)/Math.max(t.length-1,1)/2;e-=s,i+=s}this._startValue=e,this._endValue=i,this._valueRange=i-e}getLabelForValue(t){return _e(t,this.chart.options.locale,this.options.ticks.format)}}class ra extends aa{static id="linear";static defaults={ticks:{callback:Ae.formatters.numeric}};determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=ht(t)?t:0,this.max=ht(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){const t=this.isHorizontal(),e=t?this.width:this.height,i=jt(this.options.ticks.minRotation),s=(t?Math.sin(i):Math.cos(i))||.001,n=this._resolveTickFontOptions(0);return Math.ceil(e/Math.min(40,n.lineHeight/s))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}const la=t=>Math.floor(It(t)),ha=(t,e)=>Math.pow(10,la(t)+e);function ca(t){return 1==t/Math.pow(10,la(t))}function da(t,e,i){const s=Math.pow(10,i),n=Math.floor(t/s);return Math.ceil(e/s)-n}class ua extends gn{static id="logarithmic";static defaults={ticks:{callback:Ae.formatters.logarithmic,major:{enabled:!0}}};constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){const i=aa.prototype.parse.apply(this,[t,e]);if(0!==i)return ht(i)&&i>0?i:null;this._zero=!0}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=ht(t)?Math.max(0,t):null,this.max=ht(e)?Math.max(0,e):null,this.options.beginAtZero&&(this._zero=!0),this._zero&&this.min!==this._suggestedMin&&!ht(this._userMin)&&(this.min=t===ha(this.min,0)?ha(this.min,-1):ha(this.min,0)),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let i=this.min,s=this.max;const n=e=>i=t?i:e,o=t=>s=e?s:t;i===s&&(i<=0?(n(1),o(10)):(n(ha(i,-1)),o(ha(s,1)))),i<=0&&n(ha(s,-1)),s<=0&&o(ha(i,1)),this.min=i,this.max=s}buildTicks(){const t=this.options,e=function(t,{min:e,max:i}){e=ct(t.min,e);const s=[],n=la(e);let o=function(t,e){let i=la(e-t);for(;da(t,e,i)>10;)i++;for(;da(t,e,i)<10;)i--;return Math.min(i,la(t))}(e,i),a=o<0?Math.pow(10,Math.abs(o)):1;const r=Math.pow(10,o),l=n>o?Math.pow(10,n):0,h=Math.round((e-l)*a)/a,c=Math.floor((e-l)/r/10)*r*10;let d=Math.floor((h-c)/Math.pow(10,o)),u=ct(t.min,Math.round((l+c+d*Math.pow(10,o))*a)/a);for(;u<i;)s.push({value:u,major:ca(u),significand:d}),d>=10?d=d<15?15:20:d++,d>=20&&(o++,d=2,a=o>=0?1:a),u=Math.round((l+c+d*Math.pow(10,o))*a)/a;const f=ct(t.max,u);return s.push({value:f,major:ca(f),significand:d}),s}({min:this._userMin,max:this._userMax},this);return"ticks"===t.bounds&&Nt(e,this,"value"),t.reverse?(e.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),e}getLabelForValue(t){return void 0===t?"0":_e(t,this.chart.options.locale,this.options.ticks.format)}configure(){const t=this.min;super.configure(),this._startValue=It(t),this._valueRange=It(this.max)-It(t)}getPixelForValue(t){return void 0!==t&&0!==t||(t=this.min),null===t||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:(It(t)-this._startValue)/this._valueRange)}getValueForPixel(t){const e=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+e*this._valueRange)}}function fa(t){const e=t.ticks;if(e.display&&t.display){const t=Ge(e.backdropPadding);return dt(e.font&&e.font.size,Se.font.size)+t.height}return 0}function ga(t,e,i){return i=rt(i)?i:[i],{w:Pe(t,e.string,i),h:i.length*e.lineHeight}}function pa(t,e,i,s,n){return t===s||t===n?{start:e-i/2,end:e+i/2}:t<s||t>n?{start:e-i,end:e}:{start:e,end:e+i}}function ma(t,e,i,s,n){const o=Math.abs(Math.sin(i)),a=Math.abs(Math.cos(i));let r=0,l=0;s.start<e.l?(r=(e.l-s.start)/o,t.l=Math.min(t.l,e.l-r)):s.end>e.r&&(r=(s.end-e.r)/o,t.r=Math.max(t.r,e.r+r)),n.start<e.t?(l=(e.t-n.start)/a,t.t=Math.min(t.t,e.t-l)):n.end>e.b&&(l=(n.end-e.b)/a,t.b=Math.max(t.b,e.b+l))}function ba(t,e,i){const s=t.drawingArea,{extra:n,additionalAngle:o,padding:a,size:r}=i,l=t.getPointPosition(e,s+n+a,o),h=Math.round(Ht(Zt(l.angle+Bt))),c=function(t,e,i){return 90===i||270===i?t-=e/2:(i>270||i<90)&&(t-=e),t}(l.y,r.h,h),d=function(t){return 0===t||180===t?"center":t<180?"left":"right"}(h),u=(f=l.x,g=r.w,"right"===(p=d)?f-=g:"center"===p&&(f-=g/2),f);var f,g,p;return{visible:!0,x:l.x,y:c,textAlign:d,left:u,top:c,right:u+r.w,bottom:c+r.h}}function xa(t,e){if(!e)return!0;const{left:i,top:s,right:n,bottom:o}=t;return!(Re({x:i,y:s},e)||Re({x:i,y:o},e)||Re({x:n,y:s},e)||Re({x:n,y:o},e))}function ya(t,e,i){const{left:s,top:n,right:o,bottom:a}=i,{backdropColor:r}=e;if(!at(r)){const i=Ke(e.borderRadius),l=Ge(e.backdropPadding);t.fillStyle=r;const h=s-l.left,c=n-l.top,d=o-s+l.width,u=a-n+l.height;Object.values(i).some((t=>0!==t))?(t.beginPath(),He(t,{x:h,y:c,w:d,h:u,radius:i}),t.fill()):t.fillRect(h,c,d,u)}}function _a(t,e,i,s){const{ctx:n}=t;if(i)n.arc(t.xCenter,t.yCenter,e,0,Dt);else{let i=t.getPointPosition(0,e);n.moveTo(i.x,i.y);for(let o=1;o<s;o++)i=t.getPointPosition(o,e),n.lineTo(i.x,i.y)}}class va extends aa{static id="radialLinear";static defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:Ae.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:t=>t,padding:5,centerPointLabels:!1}};static defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"};static descriptors={angleLines:{_fallback:"grid"}};constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this._padding=Ge(fa(this.options)/2),e=this.width=this.maxWidth-t.width,i=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+e/2+t.left),this.yCenter=Math.floor(this.top+i/2+t.top),this.drawingArea=Math.floor(Math.min(e,i)/2)}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!1);this.min=ht(t)&&!isNaN(t)?t:0,this.max=ht(e)&&!isNaN(e)?e:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/fa(this.options))}generateTickLabels(t){aa.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map(((t,e)=>{const i=ft(this.options.pointLabels.callback,[t,e],this);return i||0===i?i:""})).filter(((t,e)=>this.chart.getDataVisibility(e)))}fit(){const t=this.options;t.display&&t.pointLabels.display?function(t){const e={l:t.left+t._padding.left,r:t.right-t._padding.right,t:t.top+t._padding.top,b:t.bottom-t._padding.bottom},i=Object.assign({},e),s=[],n=[],o=t._pointLabels.length,a=t.options.pointLabels,r=a.centerPointLabels?St/o:0;for(let l=0;l<o;l++){const o=a.setContext(t.getPointLabelContext(l));n[l]=o.padding;const h=t.getPointPosition(l,t.drawingArea+n[l],r),c=Je(o.font),d=ga(t.ctx,c,t._pointLabels[l]);s[l]=d;const u=Zt(t.getIndexAngle(l)+r),f=Math.round(Ht(u));ma(i,e,u,pa(f,h.x,d.w,0,180),pa(f,h.y,d.h,90,270))}t.setCenterPoint(e.l-i.l,i.r-e.r,e.t-i.t,i.b-e.b),t._pointLabelItems=function(t,e,i){const s=[],n=t._pointLabels.length,o=t.options,{centerPointLabels:a,display:r}=o.pointLabels,l={extra:fa(o)/2,additionalAngle:a?St/n:0};let h;for(let o=0;o<n;o++){l.padding=i[o],l.size=e[o];const n=ba(t,o,l);s.push(n),"auto"===r&&(n.visible=xa(n,h),n.visible&&(h=n))}return s}(t,s,n)}(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,e,i,s){this.xCenter+=Math.floor((t-e)/2),this.yCenter+=Math.floor((i-s)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,e,i,s))}getIndexAngle(t){return Zt(t*(Dt/(this._pointLabels.length||1))+jt(this.options.startAngle||0))}getDistanceFromCenterForValue(t){if(at(t))return NaN;const e=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*e:(t-this.min)*e}getValueForDistanceFromCenter(t){if(at(t))return NaN;const e=t/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-e:this.min+e}getPointLabelContext(t){const e=this._pointLabels||[];if(t>=0&&t<e.length){const i=e[t];return function(t,e,i){return ti(t,{label:i,index:e,type:"pointLabel"})}(this.getContext(),t,i)}}getPointPosition(t,e,i=0){const s=this.getIndexAngle(t)-Bt+i;return{x:Math.cos(s)*e+this.xCenter,y:Math.sin(s)*e+this.yCenter,angle:s}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:e,top:i,right:s,bottom:n}=this._pointLabelItems[t];return{left:e,top:i,right:s,bottom:n}}drawBackground(){const{backgroundColor:t,grid:{circular:e}}=this.options;if(t){const i=this.ctx;i.save(),i.beginPath(),_a(this,this.getDistanceFromCenterForValue(this._endValue),e,this._pointLabels.length),i.closePath(),i.fillStyle=t,i.fill(),i.restore()}}drawGrid(){const t=this.ctx,e=this.options,{angleLines:i,grid:s,border:n}=e,o=this._pointLabels.length;let a,r,l;if(e.pointLabels.display&&function(t,e){const{ctx:i,options:{pointLabels:s}}=t;for(let n=e-1;n>=0;n--){const e=t._pointLabelItems[n];if(!e.visible)continue;const o=s.setContext(t.getPointLabelContext(n));ya(i,o,e);const a=Je(o.font),{x:r,y:l,textAlign:h}=e;je(i,t._pointLabels[n],r,l+a.lineHeight/2,a,{color:o.color,textAlign:h,textBaseline:"middle"})}}(this,o),s.display&&this.ticks.forEach(((t,e)=>{if(0!==e){r=this.getDistanceFromCenterForValue(t.value);const i=this.getContext(e),a=s.setContext(i),l=n.setContext(i);!function(t,e,i,s,n){const o=t.ctx,a=e.circular,{color:r,lineWidth:l}=e;!a&&!s||!r||!l||i<0||(o.save(),o.strokeStyle=r,o.lineWidth=l,o.setLineDash(n.dash),o.lineDashOffset=n.dashOffset,o.beginPath(),_a(t,i,a,s),o.closePath(),o.stroke(),o.restore())}(this,a,r,o,l)}})),i.display){for(t.save(),a=o-1;a>=0;a--){const s=i.setContext(this.getPointLabelContext(a)),{color:n,lineWidth:o}=s;o&&n&&(t.lineWidth=o,t.strokeStyle=n,t.setLineDash(s.borderDash),t.lineDashOffset=s.borderDashOffset,r=this.getDistanceFromCenterForValue(e.ticks.reverse?this.min:this.max),l=this.getPointPosition(a,r),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(l.x,l.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const t=this.ctx,e=this.options,i=e.ticks;if(!i.display)return;const s=this.getIndexAngle(0);let n,o;t.save(),t.translate(this.xCenter,this.yCenter),t.rotate(s),t.textAlign="center",t.textBaseline="middle",this.ticks.forEach(((s,a)=>{if(0===a&&!e.reverse)return;const r=i.setContext(this.getContext(a)),l=Je(r.font);if(n=this.getDistanceFromCenterForValue(this.ticks[a].value),r.showLabelBackdrop){t.font=l.string,o=t.measureText(s.label).width,t.fillStyle=r.backdropColor;const e=Ge(r.backdropPadding);t.fillRect(-o/2-e.left,-n-l.size/2-e.top,o+e.width,l.size+e.height)}je(t,s.label,0,-n,l,{color:r.color,strokeColor:r.textStrokeColor,strokeWidth:r.textStrokeWidth})})),t.restore()}drawTitle(){}}const Aa={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},wa=Object.keys(Aa);function Ma(t,e){return t-e}function ka(t,e){if(at(e))return null;const i=t._adapter,{parser:s,round:n,isoWeekday:o}=t._parseOpts;let a=e;return"function"==typeof s&&(a=s(a)),ht(a)||(a="string"==typeof s?i.parse(a,s):i.parse(a)),null===a?null:(n&&(a="week"!==n||!Vt(o)&&!0!==o?i.startOf(a,n):i.startOf(a,"isoWeek",o)),+a)}function Ca(t,e,i,s){const n=wa.length;for(let o=wa.indexOf(t);o<n-1;++o){const t=Aa[wa[o]],n=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((i-e)/(n*t.size))<=s)return wa[o]}return wa[n-1]}function Ea(t,e,i){if(i){if(i.length){const{lo:s,hi:n}=Jt(i,e);t[i[s]>=e?i[s]:i[n]]=!0}}else t[e]=!0}function Sa(t,e,i){const s=[],n={},o=e.length;let a,r;for(a=0;a<o;++a)r=e[a],n[r]=a,s.push({value:r,major:!1});return 0!==o&&i?function(t,e,i,s){const n=t._adapter,o=+n.startOf(e[0].value,s),a=e[e.length-1].value;let r,l;for(r=o;r<=a;r=+n.add(r,1,s))l=i[r],l>=0&&(e[l].major=!0);return e}(t,s,n,i):s}class Da extends gn{static id="time";static defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",callback:!1,major:{enabled:!1}}};constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e={}){const i=t.time||(t.time={}),s=this._adapter=new As(t.adapters.date);s.init(e),_t(i.displayFormats,s.formats()),this._parseOpts={parser:i.parser,round:i.round,isoWeekday:i.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:ka(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this.options,e=this._adapter,i=t.time.unit||"day";let{min:s,max:n,minDefined:o,maxDefined:a}=this.getUserBounds();function r(t){o||isNaN(t.min)||(s=Math.min(s,t.min)),a||isNaN(t.max)||(n=Math.max(n,t.max))}o&&a||(r(this._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||r(this.getMinMax(!1))),s=ht(s)&&!isNaN(s)?s:+e.startOf(Date.now(),i),n=ht(n)&&!isNaN(n)?n:+e.endOf(Date.now(),i)+1,this.min=Math.min(s,n-1),this.max=Math.max(s+1,n)}_getLabelBounds(){const t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],i=t[t.length-1]),{min:e,max:i}}buildTicks(){const t=this.options,e=t.time,i=t.ticks,s="labels"===i.source?this.getLabelTimestamps():this._generate();"ticks"===t.bounds&&s.length&&(this.min=this._userMin||s[0],this.max=this._userMax||s[s.length-1]);const n=this.min,o=function(t,e,i){let s=0,n=t.length;for(;s<n&&t[s]<e;)s++;for(;n>s&&t[n-1]>i;)n--;return s>0||n<t.length?t.slice(s,n):t}(s,n,this.max);return this._unit=e.unit||(i.autoSkip?Ca(e.minUnit,this.min,this.max,this._getLabelCapacity(n)):function(t,e,i,s,n){for(let o=wa.length-1;o>=wa.indexOf(i);o--){const i=wa[o];if(Aa[i].common&&t._adapter.diff(n,s,i)>=e-1)return i}return wa[i?wa.indexOf(i):0]}(this,o.length,e.minUnit,this.min,this.max)),this._majorUnit=i.major.enabled&&"year"!==this._unit?function(t){for(let e=wa.indexOf(t)+1,i=wa.length;e<i;++e)if(Aa[wa[e]].common)return wa[e]}(this._unit):void 0,this.initOffsets(s),t.reverse&&o.reverse(),Sa(this,o,this._majorUnit)}afterAutoSkip(){this.options.offsetAfterAutoskip&&this.initOffsets(this.ticks.map((t=>+t.value)))}initOffsets(t=[]){let e,i,s=0,n=0;this.options.offset&&t.length&&(e=this.getDecimalForValue(t[0]),s=1===t.length?1-e:(this.getDecimalForValue(t[1])-e)/2,i=this.getDecimalForValue(t[t.length-1]),n=1===t.length?i:(i-this.getDecimalForValue(t[t.length-2]))/2);const o=t.length<3?.5:.25;s=Kt(s,0,o),n=Kt(n,0,o),this._offsets={start:s,end:n,factor:1/(s+1+n)}}_generate(){const t=this._adapter,e=this.min,i=this.max,s=this.options,n=s.time,o=n.unit||Ca(n.minUnit,e,i,this._getLabelCapacity(e)),a=dt(s.ticks.stepSize,1),r="week"===o&&n.isoWeekday,l=Vt(r)||!0===r,h={};let c,d,u=e;if(l&&(u=+t.startOf(u,"isoWeek",r)),u=+t.startOf(u,l?"day":o),t.diff(i,e,o)>1e5*a)throw new Error(e+" and "+i+" are too far apart with stepSize of "+a+" "+o);const f="data"===s.ticks.source&&this.getDataTimestamps();for(c=u,d=0;c<i;c=+t.add(c,a,o),d++)Ea(h,c,f);return c!==i&&"ticks"!==s.bounds&&1!==d||Ea(h,c,f),Object.keys(h).sort(Ma).map((t=>+t))}getLabelForValue(t){const e=this._adapter,i=this.options.time;return i.tooltipFormat?e.format(t,i.tooltipFormat):e.format(t,i.displayFormats.datetime)}format(t,e){const i=this.options.time.displayFormats,s=this._unit,n=e||i[s];return this._adapter.format(t,n)}_tickFormatFunction(t,e,i,s){const n=this.options,o=n.ticks.callback;if(o)return ft(o,[t,e,i],this);const a=n.time.displayFormats,r=this._unit,l=this._majorUnit,h=r&&a[r],c=l&&a[l],d=i[e],u=l&&c&&d&&d.major;return this._adapter.format(t,s||(u?c:h))}generateTickLabels(t){let e,i,s;for(e=0,i=t.length;e<i;++e)s=t[e],s.label=this._tickFormatFunction(s.value,e,t)}getDecimalForValue(t){return null===t?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){const e=this._offsets,i=this.getDecimalForValue(t);return this.getPixelForDecimal((e.start+i)*e.factor)}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return this.min+i*(this.max-this.min)}_getLabelSize(t){const e=this.options.ticks,i=this.ctx.measureText(t).width,s=jt(this.isHorizontal()?e.maxRotation:e.minRotation),n=Math.cos(s),o=Math.sin(s),a=this._resolveTickFontOptions(0).size;return{w:i*n+a*o,h:i*o+a*n}}_getLabelCapacity(t){const e=this.options.time,i=e.displayFormats,s=i[e.unit]||i.millisecond,n=this._tickFormatFunction(t,0,Sa(this,[t],this._majorUnit),s),o=this._getLabelSize(n),a=Math.floor(this.isHorizontal()?this.width/o.w:this.height/o.h)-1;return a>0?a:1}getDataTimestamps(){let t,e,i=this._cache.data||[];if(i.length)return i;const s=this.getMatchingVisibleMetas();if(this._normalized&&s.length)return this._cache.data=s[0].controller.getAllParsedValues(this);for(t=0,e=s.length;t<e;++t)i=i.concat(s[t].controller.getAllParsedValues(this));return this._cache.data=this.normalize(i)}getLabelTimestamps(){const t=this._cache.labels||[];let e,i;if(t.length)return t;const s=this.getLabels();for(e=0,i=s.length;e<i;++e)t.push(ka(this,s[e]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return se(t.sort(Ma))}}function Pa(t,e,i){let s,n,o,a,r=0,l=t.length-1;i?(e>=t[r].pos&&e<=t[l].pos&&({lo:r,hi:l}=Qt(t,"pos",e)),({pos:s,time:o}=t[r]),({pos:n,time:a}=t[l])):(e>=t[r].time&&e<=t[l].time&&({lo:r,hi:l}=Qt(t,"time",e)),({time:s,pos:o}=t[r]),({time:n,pos:a}=t[l]));const h=n-s;return h?o+(a-o)*(e-s)/h:o}var Oa=Object.freeze({__proto__:null,CategoryScale:class extends gn{static id="category";static defaults={ticks:{callback:na}};constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){const e=this._addedLabels;if(e.length){const t=this.getLabels();for(const{index:i,label:s}of e)t[i]===s&&t.splice(i,1);this._addedLabels=[]}super.init(t)}parse(t,e){if(at(t))return null;const i=this.getLabels();return((t,e)=>null===t?null:Kt(Math.round(t),0,e))(e=isFinite(e)&&i[e]===t?e:function(t,e,i,s){const n=t.indexOf(e);return-1===n?((t,e,i,s)=>("string"==typeof e?(i=t.push(e)-1,s.unshift({index:i,label:e})):isNaN(e)&&(i=null),i))(t,e,i,s):n!==t.lastIndexOf(e)?i:n}(i,t,dt(e,t),this._addedLabels),i.length-1)}determineDataLimits(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let{min:i,max:s}=this.getMinMax(!0);"ticks"===this.options.bounds&&(t||(i=0),e||(s=this.getLabels().length-1)),this.min=i,this.max=s}buildTicks(){const t=this.min,e=this.max,i=this.options.offset,s=[];let n=this.getLabels();n=0===t&&e===n.length-1?n:n.slice(t,e+1),this._valueRange=Math.max(n.length-(i?0:1),1),this._startValue=this.min-(i?.5:0);for(let i=t;i<=e;i++)s.push({value:i});return s}getLabelForValue(t){return na.call(this,t)}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return"number"!=typeof t&&(t=this.parse(t)),null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}},LinearScale:ra,LogarithmicScale:ua,RadialLinearScale:va,TimeScale:Da,TimeSeriesScale:class extends Da{static id="timeseries";static defaults=Da.defaults;constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this._getTimestampsForTable(),e=this._table=this.buildLookupTable(t);this._minPos=Pa(e,this.min),this._tableRange=Pa(e,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){const{min:e,max:i}=this,s=[],n=[];let o,a,r,l,h;for(o=0,a=t.length;o<a;++o)l=t[o],l>=e&&l<=i&&s.push(l);if(s.length<2)return[{time:e,pos:0},{time:i,pos:1}];for(o=0,a=s.length;o<a;++o)h=s[o+1],r=s[o-1],l=s[o],Math.round((h+r)/2)!==l&&n.push({time:l,pos:o/(a-1)});return n}_generate(){const t=this.min,e=this.max;let i=super.getDataTimestamps();return i.includes(t)&&i.length||i.splice(0,0,t),i.includes(e)&&1!==i.length||i.push(e),i.sort(((t,e)=>t-e))}_getTimestampsForTable(){let t=this._cache.all||[];if(t.length)return t;const e=this.getDataTimestamps(),i=this.getLabelTimestamps();return t=e.length&&i.length?this.normalize(e.concat(i)):e.length?e:i,t=this._cache.all=t,t}getDecimalForValue(t){return(Pa(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return Pa(this._table,i*this._tableRange+this._minPos,!0)}}});const Ta=[ys,ro,sa,Oa];Hn.register(...Ta);const Ba=Hn;var La=i(988),Ra={};Ra.styleTagTransform=u(),Ra.setAttributes=l(),Ra.insert=a().bind(null,"head"),Ra.domAPI=n(),Ra.insertStyleElement=c(),e()(La.Z,Ra),La.Z&&La.Z.locals&&La.Z.locals;class Ia{constructor(){this.container=document.createElement("div"),this.container.id="graphContainer",this.bindEvents()}bindEvents(){b.on("renderGraph",(t=>{const e=Object.values(x.cachedData.forecast.forecastday[t].hour),i=[];e.forEach((t=>{i.push({hour:t.time,temp_c:t.temp_c})})),this.render(i)}))}render(t){this.container.contains(this.canvas)&&this.container.removeChild(this.canvas),this.canvas=document.createElement("canvas"),this.container.append(this.canvas),this.cachedChart=new Ba(this.canvas,{type:"line",data:{labels:t.map((t=>t.hour)),datasets:[{data:t.map((t=>t.temp_c)),tension:.2}]},options:{maintainAspectRatio:!1,responsive:!0}})}}var za=i(830),Fa={};Fa.styleTagTransform=u(),Fa.setAttributes=l(),Fa.insert=a().bind(null,"head"),Fa.domAPI=n(),Fa.insertStyleElement=c(),e()(za.Z,Fa),za.Z&&za.Z.locals&&za.Z.locals;class Wa{constructor(){this.container=document.createElement("div"),this.container.id="appContainer",this.header=new v,this.graph=new Ia,this.daysBar=new E(8),this.container.append(this.header.container,this.graph.container,this.daysBar.container),Wa.bindEvents(),Wa.apiCall()}static apiCall(){(async function(){const t=await fetch("https://api.weatherapi.com/v1/forecast.json?key=6b50d5938f0b4173a06202148231208&q=montevideo&days=10&aqi=no&alerts=no\n    ");return await t.json()})().then((t=>{x.cachedData=t,b.emit("renderHeader",0),b.emit("renderDaysBar"),b.emit("renderGraph",0)}))}static bindEvents(){b.on("apiCall",(()=>{Wa.apiCall()}))}}const Va=document.querySelector("body"),Na=new Wa;Va.append(Na.container)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TyxTQUNQQyxJQUFLLFNBQ0xDLE9BQVEsU0FDUkMsT0FBUSxTQUNSQyxLQUFNLFNBQ05DLE1BQU8sU0FDUEMsTUFBTyxTQUNQQyxJQUFLLE9BQ0xDLE9BQVEsU0FDUkMsT0FBUSxTQUNSQyxTQUFVLE9BQ1ZDLE9BQVEsU0FDUkMsT0FBUSxTQUNSQyxTQUFVLFNBQ1ZDLFNBQVUsU0FDVkMsU0FBVSxTQUNWQyxTQUFVLFNBQ1ZDLE9BQVEsU0FDUkMsUUFBUyxTQUNUQyxVQUFXLFNBQ1hDLElBQUssU0FDTEMsT0FBUSxTQUNSQyxJQUFLLFNBQ0xDLElBQUssT0FDTEMsTUFBTyxTQUNQQyxJQUFLLFNBQ0xDLFFBQVMsU0FDVEMsT0FBUSxTQUNSQyxRQUFTLFNBQ1RDLE1BQU8sU0FDUEMsS0FBTSxTQUNOQyxNQUFPLFNBQ1BDLE9BQVEsU0FDUkMsVUFBVyxTQUNYQyxRQUFTLFNBQ1RDLFdBQVksU0FDWkMsSUFBSyxTQUNMQyxLQUFNLFNBQ05DLE1BQU8sU0FDUEMsVUFBVyxTQUNYQyxLQUFNLFNBQ05DLEtBQU0sU0FDTkMsS0FBTSxTQUNOQyxLQUFNLFNBQ05DLE9BQVEsU0FDUkMsT0FBUSxTQUNSQyxPQUFRLFNBQ1JDLE1BQU8sU0FDUEMsTUFBTyxTQUNQQyxRQUFTLFNBQ1RDLElBQUssU0FDTEMsS0FBTSxPQUNOQyxRQUFTLFNBQ1RDLElBQUssU0FDTEMsT0FBUSxTQUNSQyxNQUFPLFNBQ1BDLFdBQVksU0FDWkMsSUFBSyxLQUNMQyxNQUFPLFNBQ1BDLE9BQVEsU0FDUkMsT0FBUSxTQUNSQyxLQUFNLFNBQ05DLFVBQVcsT0FDWEMsSUFBSyxTQUNMQyxTQUFVLFNBQ1ZDLFdBQVksU0FDWkMsUUFBUyxTQUNUQyxTQUFVLFNBQ1ZDLFFBQVMsU0FDVEMsV0FBWSxTQUNaQyxLQUFNLEtBQ05DLE9BQVEsU0FDUkMsS0FBTSxTQUNOQyxRQUFTLFNBQ1RDLE1BQU8sU0FDUEMsUUFBUyxTQUNUQyxLQUFNLFNBQ05DLFVBQVcsU0FDWEMsT0FBUSxTQUNSQyxNQUFPLFNBQ1BDLFdBQVksU0FDWkMsVUFBVyxTQUNYQyxR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QUVFekgsS0FBSzBILFVBQVk3RCxTQUFTVyxjQUFjLE9BQ3hDeEUsS0FBSzBILFVBQVVoSSxHQUFLLGVBQ3BCTSxLQUFLK3RGLE9BQVMsSUFBSXZtRixFQUNsQnhILEtBQUtndUYsTUFBUSxJQUFJTixHQUNqQjF0RixLQUFLaXVGLFFBQVUsSUFBSXZqRixFQUFRLEdBQzNCMUssS0FBSzBILFVBQVVRLE9BQ2JsSSxLQUFLK3RGLE9BQU9ybUYsVUFDWjFILEtBQUtndUYsTUFBTXRtRixVQUNYMUgsS0FBS2l1RixRQUFRdm1GLFdBRWZvbUYsR0FBSTNsRixhQUNKMmxGLEdBQUlJLFNBQ04sQ0FFQSxjQUFPQSxJQ3pCTUMsaUJBRWIsTUFDTUMsUUFDRUMsTUFBTywrSEFHZixhQURtQkQsRUFBZUUsTUFFcEMsRURrQklDLEdBQWtCbmpELE1BQU01cEMsSUFDdEI4RixFQUFNZSxXQUFhN0csRUFDbkJ1RixFQUFPSyxLQUFLLGVBQWdCLEdBQzVCTCxFQUFPSyxLQUFLLGlCQUNaTCxFQUFPSyxLQUFLLGNBQWUsRUFBRSxHQUVqQyxDQUVBLGlCQUFPZSxHQUNMcEIsRUFBT0MsR0FBRyxXQUFXLEtBQ25COG1GLEdBQUlJLFNBQVMsR0FFakIsRUVsQ0YsTUFBTTFULEdBQU8zMkUsU0FBU0MsY0FBYyxRQUM5QjBxRixHQUFNLElBQUlWLEdBQ2hCdFQsR0FBS3R5RSxPQUFPc21GLEdBQUk5bUYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL2Nzcy9mb250LmNzcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL2Nzcy9tb2R1bGVzL0FwcC5jc3MiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9jc3MvbW9kdWxlcy9EYXkuY3NzIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvY3NzL21vZHVsZXMvRGF5c0Jhci5jc3MiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9jc3MvbW9kdWxlcy9HcmFwaC5jc3MiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9jc3MvbW9kdWxlcy9IZWFkZXIuY3NzIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvY3NzL3Njcm9sbGJhci5jc3MiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9jc3Mvc3R5bGUuY3NzIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvY3NzL3ZhcmlhYmxlcy5jc3MiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly93ZWF0aGVyL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3dlYXRoZXIvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3dlYXRoZXIvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly93ZWF0aGVyL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL2Nzcy9mb250LmNzcz8yOWE0Iiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvY3NzL3N0eWxlLmNzcz85ZmNkIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvanMvUHVic3ViLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvanMvd2VhdGhlci9DYWNoZS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL2Nzcy9tb2R1bGVzL0hlYWRlci5jc3M/MWVjZSIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL2pzL3dlYXRoZXIvSGVhZGVyLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvY3NzL21vZHVsZXMvRGF5LmNzcz9hM2Y2Iiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvanMvd2VhdGhlci9EYXkuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9jc3MvbW9kdWxlcy9EYXlzQmFyLmNzcz9iNGFiIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvanMvd2VhdGhlci9EYXlzQmFyLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9ub2RlX21vZHVsZXMvQGt1cmtsZS9jb2xvci9kaXN0L2NvbG9yLmVzbS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL2Rpc3QvY2h1bmtzL2hlbHBlcnMuc2VnbWVudC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL2Rpc3QvY2hhcnQuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9hdXRvL2F1dG8uanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9jc3MvbW9kdWxlcy9HcmFwaC5jc3M/Y2JkOSIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL2pzL0dyYXBoLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvY3NzL21vZHVsZXMvQXBwLmNzcz80YjIzIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvanMvQXBwLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvanMvd2VhdGhlci9BUEkuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PU9wZW4rU2FuczppdGFsLHdnaHRAMCwzMDA7MCw0MDA7MCw1MDA7MCw2MDA7MSwzMDA7MSw0MDA7MSw1MDA7MSw2MDAmZGlzcGxheT1zd2FwKTtcIl0pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGA6cm9vdCB7XG4gIGZvbnQtZmFtaWx5OiBcIk9wZW4gU2Fuc1wiLCBzYW5zLXNlcmlmO1xufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzL2ZvbnQuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUVBO0VBQ0Usb0NBQW9DO0FBQ3RDXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgdXJsKFxcXCJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PU9wZW4rU2FuczppdGFsLHdnaHRAMCwzMDA7MCw0MDA7MCw1MDA7MCw2MDA7MSwzMDA7MSw0MDA7MSw1MDA7MSw2MDAmZGlzcGxheT1zd2FwXFxcIik7XFxuXFxuOnJvb3Qge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJPcGVuIFNhbnNcXFwiLCBzYW5zLXNlcmlmO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL3ZhcmlhYmxlcy5jc3NcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmkoX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgI2FwcENvbnRhaW5lciB7XG4gIGJvcmRlcjogMnB4IHNvbGlkIHJlZDtcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgd2lkdGg6IG1pbih2YXIoLS1taW5XaWR0aCksIDEwMCUpO1xuICBwYWRkaW5nOiAxMHB4O1xuICBnYXA6IDEwcHg7XG59XG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jc3MvbW9kdWxlcy9BcHAuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUVBO0VBQ0UscUJBQXFCO0VBQ3JCLG1CQUFtQjtFQUNuQixhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLGlDQUFpQztFQUNqQyxhQUFhO0VBQ2IsU0FBUztBQUNYXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgdXJsKC4uL3ZhcmlhYmxlcy5jc3MpO1xcblxcbiNhcHBDb250YWluZXIge1xcbiAgYm9yZGVyOiAycHggc29saWQgcmVkO1xcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgd2lkdGg6IG1pbih2YXIoLS1taW5XaWR0aCksIDEwMCUpO1xcbiAgcGFkZGluZzogMTBweDtcXG4gIGdhcDogMTBweDtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi92YXJpYWJsZXMuY3NzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYCNkYXlDb250YWluZXIge1xuICBmbGV4OiAxIDAgYXV0bztcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMWZyO1xuICBncmlkLXRlbXBsYXRlLXJvd3M6IDFyZW0gMWZyIDFyZW07XG4gIGJvcmRlcjogMnB4IHNvbGlkIGdyZXk7XG4gIHBhZGRpbmc6IDVweDtcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgZ2FwOiA1cHg7XG59XG5cbiNkYXlEYXkge1xuICBncmlkLXJvdzogMTtcbiAgZ3JpZC1jb2x1bW46IDEvLTE7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cbiNkYXlJY29uIHtcbiAgZ3JpZC1yb3c6IDI7XG4gIGdyaWQtY29sdW1uOiAxLy0xO1xuICBhbGlnbi1zZWxmOiBjZW50ZXI7XG4gIGp1c3RpZnktc2VsZjogY2VudGVyO1xuICB3aWR0aDogMTAwJTtcbn1cbiNkYXlNYXgge1xuICBncmlkLXJvdzogMztcbiAgZ3JpZC1jb2x1bW46IDE7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcblxuICBmb250LXNpemU6IDAuOHJlbTtcbn1cbiNkYXlNaW4ge1xuICBncmlkLXJvdzogMztcbiAgZ3JpZC1jb2x1bW46IDI7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgZm9udC1zaXplOiAwLjhyZW07XG4gIGNvbG9yOiB2YXIoLS10ZXh0TWlkKTtcbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Nzcy9tb2R1bGVzL0RheS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUE7RUFDRSxjQUFjO0VBQ2QsYUFBYTtFQUNiLDhCQUE4QjtFQUM5QixpQ0FBaUM7RUFDakMsc0JBQXNCO0VBQ3RCLFlBQVk7RUFDWixtQkFBbUI7RUFDbkIsUUFBUTtBQUNWOztBQUVBO0VBQ0UsV0FBVztFQUNYLGlCQUFpQjtFQUNqQixrQkFBa0I7QUFDcEI7QUFDQTtFQUNFLFdBQVc7RUFDWCxpQkFBaUI7RUFDakIsa0JBQWtCO0VBQ2xCLG9CQUFvQjtFQUNwQixXQUFXO0FBQ2I7QUFDQTtFQUNFLFdBQVc7RUFDWCxjQUFjO0VBQ2Qsa0JBQWtCOztFQUVsQixpQkFBaUI7QUFDbkI7QUFDQTtFQUNFLFdBQVc7RUFDWCxjQUFjO0VBQ2Qsa0JBQWtCO0VBQ2xCLGlCQUFpQjtFQUNqQixxQkFBcUI7QUFDdkJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCB1cmwoXFxcIi4uL3ZhcmlhYmxlcy5jc3NcXFwiKTtcXG5cXG4jZGF5Q29udGFpbmVyIHtcXG4gIGZsZXg6IDEgMCBhdXRvO1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmcjtcXG4gIGdyaWQtdGVtcGxhdGUtcm93czogMXJlbSAxZnIgMXJlbTtcXG4gIGJvcmRlcjogMnB4IHNvbGlkIGdyZXk7XFxuICBwYWRkaW5nOiA1cHg7XFxuICBib3JkZXItcmFkaXVzOiAxMHB4O1xcbiAgZ2FwOiA1cHg7XFxufVxcblxcbiNkYXlEYXkge1xcbiAgZ3JpZC1yb3c6IDE7XFxuICBncmlkLWNvbHVtbjogMS8tMTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuI2RheUljb24ge1xcbiAgZ3JpZC1yb3c6IDI7XFxuICBncmlkLWNvbHVtbjogMS8tMTtcXG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcXG4gIGp1c3RpZnktc2VsZjogY2VudGVyO1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcbiNkYXlNYXgge1xcbiAgZ3JpZC1yb3c6IDM7XFxuICBncmlkLWNvbHVtbjogMTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG5cXG4gIGZvbnQtc2l6ZTogMC44cmVtO1xcbn1cXG4jZGF5TWluIHtcXG4gIGdyaWQtcm93OiAzO1xcbiAgZ3JpZC1jb2x1bW46IDI7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBmb250LXNpemU6IDAuOHJlbTtcXG4gIGNvbG9yOiB2YXIoLS10ZXh0TWlkKTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi92YXJpYWJsZXMuY3NzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYCNjb250YWluZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBnYXA6IDEwcHg7XG4gIHNjcm9sbC1tYXJnaW46IDIwcHg7XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiA3MjVweCkge1xuICAvKiAgRklYOiBkb2Vzbid0IHdvcmsgd2l0biB2YXIoKSAqL1xuICAjY29udGFpbmVyIHtcbiAgICBvdmVyZmxvdy14OiBzY3JvbGw7XG4gIH1cbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Nzcy9tb2R1bGVzL0RheXNCYXIuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUVBO0VBQ0UsYUFBYTtFQUNiLFNBQVM7RUFDVCxtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxrQ0FBa0M7RUFDbEM7SUFDRSxrQkFBa0I7RUFDcEI7QUFDRlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IHVybChcXFwiLi4vdmFyaWFibGVzLmNzc1xcXCIpO1xcblxcbiNjb250YWluZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGdhcDogMTBweDtcXG4gIHNjcm9sbC1tYXJnaW46IDIwcHg7XFxufVxcblxcbkBtZWRpYSAobWF4LXdpZHRoOiA3MjVweCkge1xcbiAgLyogIEZJWDogZG9lc24ndCB3b3JrIHdpdG4gdmFyKCkgKi9cXG4gICNjb250YWluZXIge1xcbiAgICBvdmVyZmxvdy14OiBzY3JvbGw7XFxuICB9XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgI2dyYXBoQ29udGFpbmVyIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAyMDBweDtcbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Nzcy9tb2R1bGVzL0dyYXBoLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGtCQUFrQjtFQUNsQixXQUFXO0VBQ1gsYUFBYTtBQUNmXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIiNncmFwaENvbnRhaW5lciB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMjAwcHg7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18gZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vdmFyaWFibGVzLmNzc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18uaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAjaGVhZGVyQ29udGFpbmVyIHtcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiA1cmVtIDVyZW0gMWZyO1xufVxuI2hlYWRlckljb24ge1xuICBncmlkLWNvbHVtbjogMTtcbiAgZ3JpZC1yb3c6IDE7XG4gIHdpZHRoOiAxMDAlO1xuICBhbGlnbi1zZWxmOiBjZW50ZXI7XG4gIGp1c3RpZnktc2VsZjogY2VudGVyO1xufVxuI2hlYWRlclRlbXBlcmF0dXJlIHtcbiAgZ3JpZC1jb2x1bW46IDI7XG4gIGdyaWQtcm93OiAxO1xuICBmb250LXNpemU6IDNyZW07XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xufVxuI2hlYWRlckh1bWlkaXR5IHtcbiAgZ3JpZC1jb2x1bW46IDEvMztcbiAgZ3JpZC1yb3c6IDM7XG4gIGZvbnQtc2l6ZTogMC44cmVtO1xuICBjb2xvcjogdmFyKC0tdGV4dE1pZCk7XG59XG4jaGVhZGVyV2luZCB7XG4gIGdyaWQtY29sdW1uOiAxLzM7XG4gIGdyaWQtcm93OiA0O1xuICBmb250LXNpemU6IDAuOHJlbTtcbiAgY29sb3I6IHZhcigtLXRleHRNaWQpO1xufVxuXG4jaGVhZGVyQ2hhbmNlUmFpbiB7XG4gIGdyaWQtY29sdW1uOiAxLzM7XG4gIGdyaWQtcm93OiAyO1xuICBjb2xvcjogdmFyKC0tdGV4dE1pZCk7XG4gIGZvbnQtc2l6ZTogMC44cmVtO1xufVxuXG4jaGVhZGVyRGF5IHtcbiAgZ3JpZC1jb2x1bW46IC0xO1xuICBncmlkLXJvdzogMjtcbiAgdGV4dC1hbGlnbjogZW5kO1xufVxuXG4jaGVhZGVyQ29uZGl0aW9uIHtcbiAgZ3JpZC1jb2x1bW46IC0xO1xuICBncmlkLXJvdzogMztcbiAgdGV4dC1hbGlnbjogZW5kO1xufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzL21vZHVsZXMvSGVhZGVyLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFFQTtFQUNFLGFBQWE7RUFDYixvQ0FBb0M7QUFDdEM7QUFDQTtFQUNFLGNBQWM7RUFDZCxXQUFXO0VBQ1gsV0FBVztFQUNYLGtCQUFrQjtFQUNsQixvQkFBb0I7QUFDdEI7QUFDQTtFQUNFLGNBQWM7RUFDZCxXQUFXO0VBQ1gsZUFBZTtFQUNmLGFBQWE7RUFDYixtQkFBbUI7RUFDbkIsdUJBQXVCO0FBQ3pCO0FBQ0E7RUFDRSxnQkFBZ0I7RUFDaEIsV0FBVztFQUNYLGlCQUFpQjtFQUNqQixxQkFBcUI7QUFDdkI7QUFDQTtFQUNFLGdCQUFnQjtFQUNoQixXQUFXO0VBQ1gsaUJBQWlCO0VBQ2pCLHFCQUFxQjtBQUN2Qjs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixXQUFXO0VBQ1gscUJBQXFCO0VBQ3JCLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLGVBQWU7RUFDZixXQUFXO0VBQ1gsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGVBQWU7RUFDZixXQUFXO0VBQ1gsZUFBZTtBQUNqQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IHVybChcXFwiLi4vdmFyaWFibGVzLmNzc1xcXCIpO1xcblxcbiNoZWFkZXJDb250YWluZXIge1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogNXJlbSA1cmVtIDFmcjtcXG59XFxuI2hlYWRlckljb24ge1xcbiAgZ3JpZC1jb2x1bW46IDE7XFxuICBncmlkLXJvdzogMTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgYWxpZ24tc2VsZjogY2VudGVyO1xcbiAganVzdGlmeS1zZWxmOiBjZW50ZXI7XFxufVxcbiNoZWFkZXJUZW1wZXJhdHVyZSB7XFxuICBncmlkLWNvbHVtbjogMjtcXG4gIGdyaWQtcm93OiAxO1xcbiAgZm9udC1zaXplOiAzcmVtO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG59XFxuI2hlYWRlckh1bWlkaXR5IHtcXG4gIGdyaWQtY29sdW1uOiAxLzM7XFxuICBncmlkLXJvdzogMztcXG4gIGZvbnQtc2l6ZTogMC44cmVtO1xcbiAgY29sb3I6IHZhcigtLXRleHRNaWQpO1xcbn1cXG4jaGVhZGVyV2luZCB7XFxuICBncmlkLWNvbHVtbjogMS8zO1xcbiAgZ3JpZC1yb3c6IDQ7XFxuICBmb250LXNpemU6IDAuOHJlbTtcXG4gIGNvbG9yOiB2YXIoLS10ZXh0TWlkKTtcXG59XFxuXFxuI2hlYWRlckNoYW5jZVJhaW4ge1xcbiAgZ3JpZC1jb2x1bW46IDEvMztcXG4gIGdyaWQtcm93OiAyO1xcbiAgY29sb3I6IHZhcigtLXRleHRNaWQpO1xcbiAgZm9udC1zaXplOiAwLjhyZW07XFxufVxcblxcbiNoZWFkZXJEYXkge1xcbiAgZ3JpZC1jb2x1bW46IC0xO1xcbiAgZ3JpZC1yb3c6IDI7XFxuICB0ZXh0LWFsaWduOiBlbmQ7XFxufVxcblxcbiNoZWFkZXJDb25kaXRpb24ge1xcbiAgZ3JpZC1jb2x1bW46IC0xO1xcbiAgZ3JpZC1yb3c6IDM7XFxuICB0ZXh0LWFsaWduOiBlbmQ7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18gZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi92YXJpYWJsZXMuY3NzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYDpyb290IHtcbiAgc2Nyb2xsYmFyLWNvbG9yOiAjYWNhY2FjIHRyYW5zcGFyZW50O1xufVxuOjotd2Via2l0LXNjcm9sbGJhciB7XG4gIGhlaWdodDogMTdweDtcbiAgd2lkdGg6IDE3cHg7XG4gIGJhY2tncm91bmQ6IHZhcigtLWJnRGFyayk7XG59XG5cbjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIge1xuICBiYWNrZ3JvdW5kOiB2YXIoLS10ZXh0RGFyayk7XG4gIC13ZWJraXQtYm9yZGVyLXJhZGl1czogMWV4O1xuICBib3JkZXI6IHNvbGlkIDVweCB2YXIoLS1iZ0RhcmspO1xufVxuXG46Oi13ZWJraXQtc2Nyb2xsYmFyLWNvcm5lciB7XG4gIGJhY2tncm91bmQ6IHZhcigtLWJnRGFyayk7XG59XG5cbjo6LXdlYmtpdC1zY3JvbGxiYXItdHJhY2sge1xuICBib3gtc2hhZG93OiBpbnNldCAwIDAgMTBweCAxMHB4IHZhcigtLWJnRGFyayk7XG4gIGJvcmRlcjogc29saWQgNXB4IHZhcigtLWJnRGFyayk7XG59XG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jc3Mvc2Nyb2xsYmFyLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFFQTtFQUNFLG9DQUFvQztBQUN0QztBQUNBO0VBQ0UsWUFBWTtFQUNaLFdBQVc7RUFDWCx5QkFBeUI7QUFDM0I7O0FBRUE7RUFDRSwyQkFBMkI7RUFDM0IsMEJBQTBCO0VBQzFCLCtCQUErQjtBQUNqQzs7QUFFQTtFQUNFLHlCQUF5QjtBQUMzQjs7QUFFQTtFQUNFLDZDQUE2QztFQUM3QywrQkFBK0I7QUFDakNcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCB1cmwoXFxcIi4vdmFyaWFibGVzLmNzc1xcXCIpO1xcblxcbjpyb290IHtcXG4gIHNjcm9sbGJhci1jb2xvcjogI2FjYWNhYyB0cmFuc3BhcmVudDtcXG59XFxuOjotd2Via2l0LXNjcm9sbGJhciB7XFxuICBoZWlnaHQ6IDE3cHg7XFxuICB3aWR0aDogMTdweDtcXG4gIGJhY2tncm91bmQ6IHZhcigtLWJnRGFyayk7XFxufVxcblxcbjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIge1xcbiAgYmFja2dyb3VuZDogdmFyKC0tdGV4dERhcmspO1xcbiAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiAxZXg7XFxuICBib3JkZXI6IHNvbGlkIDVweCB2YXIoLS1iZ0RhcmspO1xcbn1cXG5cXG46Oi13ZWJraXQtc2Nyb2xsYmFyLWNvcm5lciB7XFxuICBiYWNrZ3JvdW5kOiB2YXIoLS1iZ0RhcmspO1xcbn1cXG5cXG46Oi13ZWJraXQtc2Nyb2xsYmFyLXRyYWNrIHtcXG4gIGJveC1zaGFkb3c6IGluc2V0IDAgMCAxMHB4IDEwcHggdmFyKC0tYmdEYXJrKTtcXG4gIGJvcmRlcjogc29saWQgNXB4IHZhcigtLWJnRGFyayk7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18gZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi92YXJpYWJsZXMuY3NzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8xX19fIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc2Nyb2xsYmFyLmNzc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18uaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18uaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzFfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAqIHtcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTsgLyogU2FmYXJpICovXG4gIC1tcy11c2VyLXNlbGVjdDogbm9uZTsgLyogSUUgMTAgYW5kIElFIDExICovXG4gIHVzZXItc2VsZWN0OiBub25lOyAvKiBTdGFuZGFyZCBzeW50YXggKi9cbn1cbmJvZHkge1xuICBiYWNrZ3JvdW5kOiB2YXIoLS1iZ0RhcmspO1xuICBjb2xvcjogdmFyKC0tdGV4dExpZ2h0KTtcbiAgbWluLWhlaWdodDogMTAwdmg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzL3N0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFHQTtFQUNFLHlCQUF5QixFQUFFLFdBQVc7RUFDdEMscUJBQXFCLEVBQUUsb0JBQW9CO0VBQzNDLGlCQUFpQixFQUFFLG9CQUFvQjtBQUN6QztBQUNBO0VBQ0UseUJBQXlCO0VBQ3pCLHVCQUF1QjtFQUN2QixpQkFBaUI7RUFDakIsYUFBYTtFQUNiLHVCQUF1QjtFQUN2QixtQkFBbUI7QUFDckJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCB1cmwoXFxcIi4vdmFyaWFibGVzLmNzc1xcXCIpO1xcbkBpbXBvcnQgdXJsKFxcXCIuL3Njcm9sbGJhci5jc3NcXFwiKTtcXG5cXG4qIHtcXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7IC8qIFNhZmFyaSAqL1xcbiAgLW1zLXVzZXItc2VsZWN0OiBub25lOyAvKiBJRSAxMCBhbmQgSUUgMTEgKi9cXG4gIHVzZXItc2VsZWN0OiBub25lOyAvKiBTdGFuZGFyZCBzeW50YXggKi9cXG59XFxuYm9keSB7XFxuICBiYWNrZ3JvdW5kOiB2YXIoLS1iZ0RhcmspO1xcbiAgY29sb3I6IHZhcigtLXRleHRMaWdodCk7XFxuICBtaW4taGVpZ2h0OiAxMDB2aDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgOnJvb3Qge1xuICAtLWJnRGFyazogIzIwMjEyNDtcbiAgLS10ZXh0RGFyazogIzcwNzE3YTtcbiAgLS10ZXh0TWlkOiAjN2Y4MDg5O1xuICAtLXRleHRMaWdodDogI2U4ZWFlZDtcblxuICAtLW1pbldpZHRoOiA3MDBweDtcbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Nzcy92YXJpYWJsZXMuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsaUJBQWlCO0VBQ2pCLG1CQUFtQjtFQUNuQixrQkFBa0I7RUFDbEIsb0JBQW9COztFQUVwQixpQkFBaUI7QUFDbkJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiOnJvb3Qge1xcbiAgLS1iZ0Rhcms6ICMyMDIxMjQ7XFxuICAtLXRleHREYXJrOiAjNzA3MTdhO1xcbiAgLS10ZXh0TWlkOiAjN2Y4MDg5O1xcbiAgLS10ZXh0TGlnaHQ6ICNlOGVhZWQ7XFxuXFxuICAtLW1pbldpZHRoOiA3MDBweDtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9mb250LmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZm9udC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCIvKiBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9sZWFybmNvZGVhY2FkZW15Lzc3NzM0OTc0N2Q4MzgyYmZiNzIyICovXG5jb25zdCBQdWJzdWIgPSB7XG4gIFB1YnN1Yjoge30sXG4gIG9uKGV2ZW50TmFtZSwgZm4pIHtcbiAgICB0aGlzLlB1YnN1YltldmVudE5hbWVdID0gdGhpcy5QdWJzdWJbZXZlbnROYW1lXSB8fCBbXTtcbiAgICB0aGlzLlB1YnN1YltldmVudE5hbWVdLnB1c2goZm4pO1xuICB9LFxuICBvZmYoZXZlbnROYW1lLCBmbikge1xuICAgIGlmICh0aGlzLlB1YnN1YltldmVudE5hbWVdKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuUHVic3ViW2V2ZW50TmFtZV0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHRoaXMuUHVic3ViW2V2ZW50TmFtZV1baV0gPT09IGZuKSB7XG4gICAgICAgICAgdGhpcy5QdWJzdWJbZXZlbnROYW1lXS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGVtaXQoZXZlbnROYW1lLCBkYXRhKSB7XG4gICAgaWYgKHRoaXMuUHVic3ViW2V2ZW50TmFtZV0pIHtcbiAgICAgIHRoaXMuUHVic3ViW2V2ZW50TmFtZV0uZm9yRWFjaCgoZm4pID0+IHtcbiAgICAgICAgZm4oZGF0YSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBQdWJzdWI7XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBDYWNoZXtcblxuICAgIHN0YXRpYyBjYWNoZWREYXRhXG59IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0hlYWRlci5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0hlYWRlci5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgUHVic3ViIGZyb20gXCIuLi9QdWJzdWJcIjtcbmltcG9ydCBDYWNoZSBmcm9tIFwiLi9DYWNoZVwiO1xuaW1wb3J0IFwiLi4vLi4vY3NzL21vZHVsZXMvSGVhZGVyLmNzc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIZWFkZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvLyBET01cbiAgICB0aGlzLmNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGhpcy5jb250YWluZXIuaWQgPSBcImhlYWRlckNvbnRhaW5lclwiO1xuXG4gICAgdGhpcy5pbWdJY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcbiAgICB0aGlzLmltZ0ljb24uaWQgPSBcImhlYWRlckljb25cIjtcblxuICAgIHRoaXMuZGl2VGVtcGVyYXR1cmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRoaXMuZGl2VGVtcGVyYXR1cmUuaWQgPSBcImhlYWRlclRlbXBlcmF0dXJlXCI7XG5cbiAgICB0aGlzLmRpdkh1bWlkaXR5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0aGlzLmRpdkh1bWlkaXR5LmlkID0gXCJoZWFkZXJIdW1pZGl0eVwiO1xuXG4gICAgdGhpcy5kaXZXaW5kU3BlZWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRoaXMuZGl2V2luZFNwZWVkLmlkID0gXCJoZWFkZXJXaW5kXCI7XG5cbiAgICB0aGlzLmRpdkNoYW5jZVJhaW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRoaXMuZGl2Q2hhbmNlUmFpbi5pZCA9IFwiaGVhZGVyQ2hhbmNlUmFpblwiO1xuXG4gICAgdGhpcy5kaXZEYXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRoaXMuZGl2RGF5LmlkID0gXCJoZWFkZXJEYXlcIjtcblxuICAgIHRoaXMuZGl2Q29uZGl0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0aGlzLmRpdkNvbmRpdGlvbi5pZCA9IFwiaGVhZGVyQ29uZGl0aW9uXCI7XG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kKFxuICAgICAgdGhpcy5pbWdJY29uLFxuICAgICAgdGhpcy5kaXZUZW1wZXJhdHVyZSxcbiAgICAgIHRoaXMuZGl2SHVtaWRpdHksXG4gICAgICB0aGlzLmRpdldpbmRTcGVlZCxcbiAgICAgIHRoaXMuZGl2Q2hhbmNlUmFpbixcbiAgICAgIHRoaXMuZGl2RGF5LFxuICAgICAgdGhpcy5kaXZDb25kaXRpb24sXG4gICAgKTtcbiAgICB0aGlzLmJpbmRFdmVudHMoKTtcbiAgfVxuXG4gIGJpbmRFdmVudHMoKSB7XG4gICAgUHVic3ViLm9uKFwicmVuZGVySGVhZGVyXCIsIChpbmRleCkgPT4ge1xuICAgICAgLy8gVGhpcyBkYXRhIGlzIGFjY2Vzc2VkIHRoZSBzYW1lIHdheSBpcnJlc3BlY3RpdmUgb2YgaW5kZXhcbiAgICAgIGNvbnN0IHsgaWNvbiB9ID1cbiAgICAgICAgQ2FjaGUuY2FjaGVkRGF0YS5mb3JlY2FzdC5mb3JlY2FzdGRheVtpbmRleF0uZGF5LmNvbmRpdGlvbjtcbiAgICAgIGNvbnN0IGNoYW5jZU9mUmFpbiA9XG4gICAgICAgIENhY2hlLmNhY2hlZERhdGEuZm9yZWNhc3QuZm9yZWNhc3RkYXlbaW5kZXhdLmRheS5kYWlseV9jaGFuY2Vfb2ZfcmFpbjtcbiAgICAgIGNvbnN0IGNvbmRpdGlvbiA9XG4gICAgICAgIENhY2hlLmNhY2hlZERhdGEuZm9yZWNhc3QuZm9yZWNhc3RkYXlbaW5kZXhdLmRheS5jb25kaXRpb24udGV4dDtcbiAgICAgIGNvbnN0IGRheSA9IG5ldyBEYXRlKFxuICAgICAgICBDYWNoZS5jYWNoZWREYXRhLmZvcmVjYXN0LmZvcmVjYXN0ZGF5W2luZGV4XS5kYXRlLFxuICAgICAgKS50b0xvY2FsZURhdGVTdHJpbmcoXCJlbi1VU1wiLCB7IHdlZWtkYXk6IFwibG9uZ1wiLCB0aW1lWm9uZTogXCJVVENcIiB9KTtcblxuICAgICAgLy8gVGhpcyBkYXRhIGlzIGFjY2Vzc2VkIGRpZmZlcmVudGx5IGlmIGluZGV4ID09PSAwXG4gICAgICBsZXQgdGVtcEM7XG4gICAgICBsZXQgaHVtaWRpdHk7XG4gICAgICBsZXQgd2luZEtQSDtcbiAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAvLyBpbmRleCAwIGRlbm90ZXMgdGhlIEN1cnJlbnQgZGF5LCBhcyBvcHBvc2VkIHRvIGEgZm9yZWNhc3RlZCBkYXlcbiAgICAgICAgdGVtcEMgPSBNYXRoLmZsb29yKENhY2hlLmNhY2hlZERhdGEuY3VycmVudC50ZW1wX2MpO1xuICAgICAgICBodW1pZGl0eSA9IENhY2hlLmNhY2hlZERhdGEuY3VycmVudC5odW1pZGl0eTtcbiAgICAgICAgd2luZEtQSCA9IENhY2hlLmNhY2hlZERhdGEuY3VycmVudC53aW5kX2twaDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGlmIGluZGV4ICE9PSAwIGl0IG11c3QgYWNjZXNzIGRhdGEgZnJvbSB0aGUgZm9yY2FzdCBzZWN0aW9uXG4gICAgICAgIHRlbXBDID0gTWF0aC5mbG9vcihcbiAgICAgICAgICBDYWNoZS5jYWNoZWREYXRhLmZvcmVjYXN0LmZvcmVjYXN0ZGF5W2luZGV4XS5kYXkuYXZndGVtcF9jLFxuICAgICAgICApO1xuICAgICAgICBodW1pZGl0eSA9IENhY2hlLmNhY2hlZERhdGEuZm9yZWNhc3QuZm9yZWNhc3RkYXlbaW5kZXhdLmRheS5hdmdodW1pZGl0eTtcbiAgICAgICAgd2luZEtQSCA9IENhY2hlLmNhY2hlZERhdGEuZm9yZWNhc3QuZm9yZWNhc3RkYXlbaW5kZXhdLmRheS5tYXh3aW5kX2twaDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5yZW5kZXIoe1xuICAgICAgICBpY29uLFxuICAgICAgICB0ZW1wQyxcbiAgICAgICAgaHVtaWRpdHksXG4gICAgICAgIHdpbmRLUEgsXG4gICAgICAgIGNoYW5jZU9mUmFpbixcbiAgICAgICAgZGF5LFxuICAgICAgICBjb25kaXRpb24sXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHJlbmRlcihkYXRhKSB7XG4gICAgdGhpcy5pbWdJY29uLnNyYyA9IGRhdGEuaWNvbjtcbiAgICB0aGlzLmRpdlRlbXBlcmF0dXJlLmlubmVyVGV4dCA9IGAke2RhdGEudGVtcEN9wrBgO1xuICAgIHRoaXMuZGl2SHVtaWRpdHkuaW5uZXJUZXh0ID0gYEh1bWlkaXR5OiAke2RhdGEuaHVtaWRpdHl9JWA7XG4gICAgdGhpcy5kaXZXaW5kU3BlZWQuaW5uZXJUZXh0ID0gYFdpbmQgc3BlZWQ6ICR7ZGF0YS53aW5kS1BIfWA7XG4gICAgdGhpcy5kaXZDaGFuY2VSYWluLmlubmVyVGV4dCA9IGBDaGFuY2Ugb2YgcmFpbjogJHtkYXRhLmNoYW5jZU9mUmFpbn0lYDtcbiAgICB0aGlzLmRpdkRheS5pbm5lclRleHQgPSBkYXRhLmRheTtcbiAgICB0aGlzLmRpdkNvbmRpdGlvbi5pbm5lclRleHQgPSBkYXRhLmNvbmRpdGlvbjtcbiAgfVxufVxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0RheS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0RheS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgXCIuLi8uLi9jc3MvbW9kdWxlcy9EYXkuY3NzXCI7XG5pbXBvcnQgUHVic3ViIGZyb20gXCIuLi9QdWJzdWJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGF5IHtcbiAgY29uc3RydWN0b3IoaW5kZXgsIGN1cnJlbnQgPSBmYWxzZSkge1xuICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICB0aGlzLmlzQ3VycmVudERheSA9IGN1cnJlbnQ7XG4gICAgLy8gRE9NXG4gICAgdGhpcy5jb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRoaXMuY29udGFpbmVyLmlkID0gXCJkYXlDb250YWluZXJcIjtcblxuICAgIHRoaXMuaW1nSWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XG4gICAgdGhpcy5pbWdJY29uLmlkID0gXCJkYXlJY29uXCI7XG5cbiAgICB0aGlzLmRpdkRheU9mV2VlayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGhpcy5kaXZEYXlPZldlZWsuaWQgPSBcImRheURheVwiO1xuXG4gICAgdGhpcy5kaXZUZW1wZXJhdHVyZU1BWCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGhpcy5kaXZUZW1wZXJhdHVyZU1BWC5pZCA9IFwiZGF5TWF4XCI7XG5cbiAgICB0aGlzLmRpdlRlbXBlcmF0dXJlTUlOID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0aGlzLmRpdlRlbXBlcmF0dXJlTUlOLmlkID0gXCJkYXlNaW5cIjtcblxuICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZChcbiAgICAgIHRoaXMuaW1nSWNvbixcbiAgICAgIHRoaXMuZGl2RGF5T2ZXZWVrLFxuICAgICAgdGhpcy5kaXZUZW1wZXJhdHVyZU1BWCxcbiAgICAgIHRoaXMuZGl2VGVtcGVyYXR1cmVNSU4sXG4gICAgKTtcblxuICAgIC8vIEVWRU5UU1xuICAgIHRoaXMuYmluZEV2ZW50cygpO1xuICB9XG5cbiAgcmVuZGVyKGRhdGEpIHtcbiAgICB0aGlzLmNhY2hlZERhdGEgPSBkYXRhO1xuICAgIHRoaXMuaW1nSWNvbi5zcmMgPSBkYXRhLmRheS5jb25kaXRpb24uaWNvbjtcbiAgICB0aGlzLmRpdkRheU9mV2Vlay5pbm5lclRleHQgPSBuZXcgRGF0ZShcbiAgICAgIGRhdGEuZGF0ZV9lcG9jaCAqIDEwMDAsXG4gICAgKS50b0xvY2FsZURhdGVTdHJpbmcoXCJlbi1VU1wiLCB7IHdlZWtkYXk6IFwic2hvcnRcIiwgdGltZVpvbmU6IFwiVVRDXCIgfSk7XG4gICAgdGhpcy5kaXZUZW1wZXJhdHVyZU1BWC5pbm5lclRleHQgPSBgJHtkYXRhLmRheS5tYXh0ZW1wX2N9wrBgO1xuICAgIHRoaXMuZGl2VGVtcGVyYXR1cmVNSU4uaW5uZXJUZXh0ID0gYCR7ZGF0YS5kYXkubWludGVtcF9jfcKwYDtcbiAgfVxuXG4gIGJpbmRFdmVudHMoKSB7XG4gICAgdGhpcy5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIFB1YnN1Yi5lbWl0KFwicmVuZGVySGVhZGVyXCIsIHRoaXMuaW5kZXgpO1xuICAgIH0pO1xuICAgIHRoaXMuY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICBQdWJzdWIuZW1pdChcInJlbmRlckdyYXBoXCIsIHRoaXMuaW5kZXgpO1xuICAgIH0pO1xuICB9XG59XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vRGF5c0Jhci5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0RheXNCYXIuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFB1YnN1YiBmcm9tIFwiLi4vUHVic3ViXCI7XG5pbXBvcnQgRGF5IGZyb20gXCIuL0RheVwiO1xuaW1wb3J0IENhY2hlIGZyb20gXCIuL0NhY2hlXCI7XG5pbXBvcnQgXCIuLi8uLi9jc3MvbW9kdWxlcy9EYXlzQmFyLmNzc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEYXlzQmFyIHtcbiAgZGF5cyA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKGFtb3VudCkge1xuICAgIC8vIERPTVxuICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0aGlzLmNvbnRhaW5lci5pZCA9IFwiY29udGFpbmVyXCI7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFtb3VudDsgaSsrKSB7XG4gICAgICBjb25zdCBpc0N1cnJlbnREYXkgPSBpID09PSAwO1xuICAgICAgdGhpcy5kYXlzLnB1c2gobmV3IERheShpLCBpc0N1cnJlbnREYXkpKTtcbiAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZCh0aGlzLmRheXNbaV0uY29udGFpbmVyKTtcbiAgICB9XG5cbiAgICAvLyBFVkVOVFNcbiAgICB0aGlzLmJpbmRFdmVudHMoKTtcbiAgfVxuXG4gIGJpbmRFdmVudHMoKSB7XG4gICAgUHVic3ViLm9uKFwicmVuZGVyRGF5c0JhclwiLCAoKSA9PiB7XG4gICAgICB0aGlzLnJlbmRlcihDYWNoZS5jYWNoZWREYXRhKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJlbmRlcihkYXRhKSB7XG4gICAgdGhpcy5kYXlzLmZvckVhY2goKGRheSkgPT4ge1xuICAgICAgZGF5LnJlbmRlcihkYXRhLmZvcmVjYXN0LmZvcmVjYXN0ZGF5W2RheS5pbmRleF0pO1xuICAgIH0pO1xuICB9XG59XG4iLCIvKiFcbiAqIEBrdXJrbGUvY29sb3IgdjAuMy4yXG4gKiBodHRwczovL2dpdGh1Yi5jb20va3Vya2xlL2NvbG9yI3JlYWRtZVxuICogKGMpIDIwMjMgSnVra2EgS3Vya2VsYVxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKi9cbmZ1bmN0aW9uIHJvdW5kKHYpIHtcbiAgcmV0dXJuIHYgKyAwLjUgfCAwO1xufVxuY29uc3QgbGltID0gKHYsIGwsIGgpID0+IE1hdGgubWF4KE1hdGgubWluKHYsIGgpLCBsKTtcbmZ1bmN0aW9uIHAyYih2KSB7XG4gIHJldHVybiBsaW0ocm91bmQodiAqIDIuNTUpLCAwLCAyNTUpO1xufVxuZnVuY3Rpb24gYjJwKHYpIHtcbiAgcmV0dXJuIGxpbShyb3VuZCh2IC8gMi41NSksIDAsIDEwMCk7XG59XG5mdW5jdGlvbiBuMmIodikge1xuICByZXR1cm4gbGltKHJvdW5kKHYgKiAyNTUpLCAwLCAyNTUpO1xufVxuZnVuY3Rpb24gYjJuKHYpIHtcbiAgcmV0dXJuIGxpbShyb3VuZCh2IC8gMi41NSkgLyAxMDAsIDAsIDEpO1xufVxuZnVuY3Rpb24gbjJwKHYpIHtcbiAgcmV0dXJuIGxpbShyb3VuZCh2ICogMTAwKSwgMCwgMTAwKTtcbn1cblxuY29uc3QgbWFwJDEgPSB7MDogMCwgMTogMSwgMjogMiwgMzogMywgNDogNCwgNTogNSwgNjogNiwgNzogNywgODogOCwgOTogOSwgQTogMTAsIEI6IDExLCBDOiAxMiwgRDogMTMsIEU6IDE0LCBGOiAxNSwgYTogMTAsIGI6IDExLCBjOiAxMiwgZDogMTMsIGU6IDE0LCBmOiAxNX07XG5jb25zdCBoZXggPSBbLi4uJzAxMjM0NTY3ODlBQkNERUYnXTtcbmNvbnN0IGgxID0gYiA9PiBoZXhbYiAmIDB4Rl07XG5jb25zdCBoMiA9IGIgPT4gaGV4WyhiICYgMHhGMCkgPj4gNF0gKyBoZXhbYiAmIDB4Rl07XG5jb25zdCBlcSA9IGIgPT4gKChiICYgMHhGMCkgPj4gNCkgPT09IChiICYgMHhGKTtcbmNvbnN0IGlzU2hvcnQgPSB2ID0+IGVxKHYucikgJiYgZXEodi5nKSAmJiBlcSh2LmIpICYmIGVxKHYuYSk7XG5mdW5jdGlvbiBoZXhQYXJzZShzdHIpIHtcbiAgdmFyIGxlbiA9IHN0ci5sZW5ndGg7XG4gIHZhciByZXQ7XG4gIGlmIChzdHJbMF0gPT09ICcjJykge1xuICAgIGlmIChsZW4gPT09IDQgfHwgbGVuID09PSA1KSB7XG4gICAgICByZXQgPSB7XG4gICAgICAgIHI6IDI1NSAmIG1hcCQxW3N0clsxXV0gKiAxNyxcbiAgICAgICAgZzogMjU1ICYgbWFwJDFbc3RyWzJdXSAqIDE3LFxuICAgICAgICBiOiAyNTUgJiBtYXAkMVtzdHJbM11dICogMTcsXG4gICAgICAgIGE6IGxlbiA9PT0gNSA/IG1hcCQxW3N0cls0XV0gKiAxNyA6IDI1NVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGxlbiA9PT0gNyB8fCBsZW4gPT09IDkpIHtcbiAgICAgIHJldCA9IHtcbiAgICAgICAgcjogbWFwJDFbc3RyWzFdXSA8PCA0IHwgbWFwJDFbc3RyWzJdXSxcbiAgICAgICAgZzogbWFwJDFbc3RyWzNdXSA8PCA0IHwgbWFwJDFbc3RyWzRdXSxcbiAgICAgICAgYjogbWFwJDFbc3RyWzVdXSA8PCA0IHwgbWFwJDFbc3RyWzZdXSxcbiAgICAgICAgYTogbGVuID09PSA5ID8gKG1hcCQxW3N0cls3XV0gPDwgNCB8IG1hcCQxW3N0cls4XV0pIDogMjU1XG4gICAgICB9O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmV0O1xufVxuY29uc3QgYWxwaGEgPSAoYSwgZikgPT4gYSA8IDI1NSA/IGYoYSkgOiAnJztcbmZ1bmN0aW9uIGhleFN0cmluZyh2KSB7XG4gIHZhciBmID0gaXNTaG9ydCh2KSA/IGgxIDogaDI7XG4gIHJldHVybiB2XG4gICAgPyAnIycgKyBmKHYucikgKyBmKHYuZykgKyBmKHYuYikgKyBhbHBoYSh2LmEsIGYpXG4gICAgOiB1bmRlZmluZWQ7XG59XG5cbmNvbnN0IEhVRV9SRSA9IC9eKGhzbGE/fGh3Ynxoc3YpXFwoXFxzKihbLSsuZVxcZF0rKSg/OmRlZyk/W1xccyxdKyhbLSsuZVxcZF0rKSVbXFxzLF0rKFstKy5lXFxkXSspJSg/OltcXHMsXSsoWy0rLmVcXGRdKykoJSk/KT9cXHMqXFwpJC87XG5mdW5jdGlvbiBoc2wycmdibihoLCBzLCBsKSB7XG4gIGNvbnN0IGEgPSBzICogTWF0aC5taW4obCwgMSAtIGwpO1xuICBjb25zdCBmID0gKG4sIGsgPSAobiArIGggLyAzMCkgJSAxMikgPT4gbCAtIGEgKiBNYXRoLm1heChNYXRoLm1pbihrIC0gMywgOSAtIGssIDEpLCAtMSk7XG4gIHJldHVybiBbZigwKSwgZig4KSwgZig0KV07XG59XG5mdW5jdGlvbiBoc3YycmdibihoLCBzLCB2KSB7XG4gIGNvbnN0IGYgPSAobiwgayA9IChuICsgaCAvIDYwKSAlIDYpID0+IHYgLSB2ICogcyAqIE1hdGgubWF4KE1hdGgubWluKGssIDQgLSBrLCAxKSwgMCk7XG4gIHJldHVybiBbZig1KSwgZigzKSwgZigxKV07XG59XG5mdW5jdGlvbiBod2IycmdibihoLCB3LCBiKSB7XG4gIGNvbnN0IHJnYiA9IGhzbDJyZ2JuKGgsIDEsIDAuNSk7XG4gIGxldCBpO1xuICBpZiAodyArIGIgPiAxKSB7XG4gICAgaSA9IDEgLyAodyArIGIpO1xuICAgIHcgKj0gaTtcbiAgICBiICo9IGk7XG4gIH1cbiAgZm9yIChpID0gMDsgaSA8IDM7IGkrKykge1xuICAgIHJnYltpXSAqPSAxIC0gdyAtIGI7XG4gICAgcmdiW2ldICs9IHc7XG4gIH1cbiAgcmV0dXJuIHJnYjtcbn1cbmZ1bmN0aW9uIGh1ZVZhbHVlKHIsIGcsIGIsIGQsIG1heCkge1xuICBpZiAociA9PT0gbWF4KSB7XG4gICAgcmV0dXJuICgoZyAtIGIpIC8gZCkgKyAoZyA8IGIgPyA2IDogMCk7XG4gIH1cbiAgaWYgKGcgPT09IG1heCkge1xuICAgIHJldHVybiAoYiAtIHIpIC8gZCArIDI7XG4gIH1cbiAgcmV0dXJuIChyIC0gZykgLyBkICsgNDtcbn1cbmZ1bmN0aW9uIHJnYjJoc2wodikge1xuICBjb25zdCByYW5nZSA9IDI1NTtcbiAgY29uc3QgciA9IHYuciAvIHJhbmdlO1xuICBjb25zdCBnID0gdi5nIC8gcmFuZ2U7XG4gIGNvbnN0IGIgPSB2LmIgLyByYW5nZTtcbiAgY29uc3QgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG4gIGNvbnN0IG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuICBjb25zdCBsID0gKG1heCArIG1pbikgLyAyO1xuICBsZXQgaCwgcywgZDtcbiAgaWYgKG1heCAhPT0gbWluKSB7XG4gICAgZCA9IG1heCAtIG1pbjtcbiAgICBzID0gbCA+IDAuNSA/IGQgLyAoMiAtIG1heCAtIG1pbikgOiBkIC8gKG1heCArIG1pbik7XG4gICAgaCA9IGh1ZVZhbHVlKHIsIGcsIGIsIGQsIG1heCk7XG4gICAgaCA9IGggKiA2MCArIDAuNTtcbiAgfVxuICByZXR1cm4gW2ggfCAwLCBzIHx8IDAsIGxdO1xufVxuZnVuY3Rpb24gY2FsbG4oZiwgYSwgYiwgYykge1xuICByZXR1cm4gKFxuICAgIEFycmF5LmlzQXJyYXkoYSlcbiAgICAgID8gZihhWzBdLCBhWzFdLCBhWzJdKVxuICAgICAgOiBmKGEsIGIsIGMpXG4gICkubWFwKG4yYik7XG59XG5mdW5jdGlvbiBoc2wycmdiKGgsIHMsIGwpIHtcbiAgcmV0dXJuIGNhbGxuKGhzbDJyZ2JuLCBoLCBzLCBsKTtcbn1cbmZ1bmN0aW9uIGh3YjJyZ2IoaCwgdywgYikge1xuICByZXR1cm4gY2FsbG4oaHdiMnJnYm4sIGgsIHcsIGIpO1xufVxuZnVuY3Rpb24gaHN2MnJnYihoLCBzLCB2KSB7XG4gIHJldHVybiBjYWxsbihoc3YycmdibiwgaCwgcywgdik7XG59XG5mdW5jdGlvbiBodWUoaCkge1xuICByZXR1cm4gKGggJSAzNjAgKyAzNjApICUgMzYwO1xufVxuZnVuY3Rpb24gaHVlUGFyc2Uoc3RyKSB7XG4gIGNvbnN0IG0gPSBIVUVfUkUuZXhlYyhzdHIpO1xuICBsZXQgYSA9IDI1NTtcbiAgbGV0IHY7XG4gIGlmICghbSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAobVs1XSAhPT0gdikge1xuICAgIGEgPSBtWzZdID8gcDJiKCttWzVdKSA6IG4yYigrbVs1XSk7XG4gIH1cbiAgY29uc3QgaCA9IGh1ZSgrbVsyXSk7XG4gIGNvbnN0IHAxID0gK21bM10gLyAxMDA7XG4gIGNvbnN0IHAyID0gK21bNF0gLyAxMDA7XG4gIGlmIChtWzFdID09PSAnaHdiJykge1xuICAgIHYgPSBod2IycmdiKGgsIHAxLCBwMik7XG4gIH0gZWxzZSBpZiAobVsxXSA9PT0gJ2hzdicpIHtcbiAgICB2ID0gaHN2MnJnYihoLCBwMSwgcDIpO1xuICB9IGVsc2Uge1xuICAgIHYgPSBoc2wycmdiKGgsIHAxLCBwMik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICByOiB2WzBdLFxuICAgIGc6IHZbMV0sXG4gICAgYjogdlsyXSxcbiAgICBhOiBhXG4gIH07XG59XG5mdW5jdGlvbiByb3RhdGUodiwgZGVnKSB7XG4gIHZhciBoID0gcmdiMmhzbCh2KTtcbiAgaFswXSA9IGh1ZShoWzBdICsgZGVnKTtcbiAgaCA9IGhzbDJyZ2IoaCk7XG4gIHYuciA9IGhbMF07XG4gIHYuZyA9IGhbMV07XG4gIHYuYiA9IGhbMl07XG59XG5mdW5jdGlvbiBoc2xTdHJpbmcodikge1xuICBpZiAoIXYpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgYSA9IHJnYjJoc2wodik7XG4gIGNvbnN0IGggPSBhWzBdO1xuICBjb25zdCBzID0gbjJwKGFbMV0pO1xuICBjb25zdCBsID0gbjJwKGFbMl0pO1xuICByZXR1cm4gdi5hIDwgMjU1XG4gICAgPyBgaHNsYSgke2h9LCAke3N9JSwgJHtsfSUsICR7YjJuKHYuYSl9KWBcbiAgICA6IGBoc2woJHtofSwgJHtzfSUsICR7bH0lKWA7XG59XG5cbmNvbnN0IG1hcCA9IHtcbiAgeDogJ2RhcmsnLFxuICBaOiAnbGlnaHQnLFxuICBZOiAncmUnLFxuICBYOiAnYmx1JyxcbiAgVzogJ2dyJyxcbiAgVjogJ21lZGl1bScsXG4gIFU6ICdzbGF0ZScsXG4gIEE6ICdlZScsXG4gIFQ6ICdvbCcsXG4gIFM6ICdvcicsXG4gIEI6ICdyYScsXG4gIEM6ICdsYXRlZycsXG4gIEQ6ICdpZ2h0cycsXG4gIFI6ICdpbicsXG4gIFE6ICd0dXJxdW9pcycsXG4gIEU6ICdoaScsXG4gIFA6ICdybycsXG4gIE86ICdhbCcsXG4gIE46ICdsZScsXG4gIE06ICdkZScsXG4gIEw6ICd5ZWxsbycsXG4gIEY6ICdlbicsXG4gIEs6ICdjaCcsXG4gIEc6ICdhcmtzJyxcbiAgSDogJ2VhJyxcbiAgSTogJ2lnaHRnJyxcbiAgSjogJ3doJ1xufTtcbmNvbnN0IG5hbWVzJDEgPSB7XG4gIE9pY2VYZTogJ2YwZjhmZicsXG4gIGFudGlxdWV3RXRlOiAnZmFlYmQ3JyxcbiAgYXF1YTogJ2ZmZmYnLFxuICBhcXVhbWFyUmU6ICc3ZmZmZDQnLFxuICBhenVZOiAnZjBmZmZmJyxcbiAgYmVpZ2U6ICdmNWY1ZGMnLFxuICBiaXNxdWU6ICdmZmU0YzQnLFxuICBibGFjazogJzAnLFxuICBibGFuS2VkT21vbmQ6ICdmZmViY2QnLFxuICBYZTogJ2ZmJyxcbiAgWGV2aVRldDogJzhhMmJlMicsXG4gIGJQd246ICdhNTJhMmEnLFxuICBidXJseXdvb2Q6ICdkZWI4ODcnLFxuICBjYU10WGU6ICc1ZjllYTAnLFxuICBLYXJ0WXVzZTogJzdmZmYwMCcsXG4gIEtvY1RhdGU6ICdkMjY5MWUnLFxuICBjU086ICdmZjdmNTAnLFxuICBjU25mbG93ZXJYZTogJzY0OTVlZCcsXG4gIGNTbnNpbGs6ICdmZmY4ZGMnLFxuICBjcmltc29uOiAnZGMxNDNjJyxcbiAgY3lhbjogJ2ZmZmYnLFxuICB4WGU6ICc4YicsXG4gIHhjeWFuOiAnOGI4YicsXG4gIHhnVE1uUGQ6ICdiODg2MGInLFxuICB4V2F5OiAnYTlhOWE5JyxcbiAgeGdZRjogJzY0MDAnLFxuICB4Z1l5OiAnYTlhOWE5JyxcbiAgeGtoYWtpOiAnYmRiNzZiJyxcbiAgeG1hZ0Z0YTogJzhiMDA4YicsXG4gIHhUaXZlZ1lGOiAnNTU2YjJmJyxcbiAgeFNhbmdlOiAnZmY4YzAwJyxcbiAgeFNjRWQ6ICc5OTMyY2MnLFxuICB4WWQ6ICc4YjAwMDAnLFxuICB4c09tb246ICdlOTk2N2EnLFxuICB4c0hnWUY6ICc4ZmJjOGYnLFxuICB4VVhlOiAnNDgzZDhiJyxcbiAgeFVXYXk6ICcyZjRmNGYnLFxuICB4VWdZeTogJzJmNGY0ZicsXG4gIHhRZTogJ2NlZDEnLFxuICB4dmlUZXQ6ICc5NDAwZDMnLFxuICBkQXBwUms6ICdmZjE0OTMnLFxuICBkQXBza3lYZTogJ2JmZmYnLFxuICBkaW1XYXk6ICc2OTY5NjknLFxuICBkaW1nWXk6ICc2OTY5NjknLFxuICBkb2RnZXJYZTogJzFlOTBmZicsXG4gIGZpWWJyaWNrOiAnYjIyMjIyJyxcbiAgZmxTT3dFdGU6ICdmZmZhZjAnLFxuICBmb1lzdFdBbjogJzIyOGIyMicsXG4gIGZ1S3NpYTogJ2ZmMDBmZicsXG4gIGdhUnNiU286ICdkY2RjZGMnLFxuICBnaG9zdHdFdGU6ICdmOGY4ZmYnLFxuICBnVGQ6ICdmZmQ3MDAnLFxuICBnVE1uUGQ6ICdkYWE1MjAnLFxuICBXYXk6ICc4MDgwODAnLFxuICBnWUY6ICc4MDAwJyxcbiAgZ1lGTHc6ICdhZGZmMmYnLFxuICBnWXk6ICc4MDgwODAnLFxuICBob25leU13OiAnZjBmZmYwJyxcbiAgaG90cFJrOiAnZmY2OWI0JyxcbiAgUmRpYW5ZZDogJ2NkNWM1YycsXG4gIFJkaWdvOiAnNGIwMDgyJyxcbiAgaXZTeTogJ2ZmZmZmMCcsXG4gIGtoYWtpOiAnZjBlNjhjJyxcbiAgbGF2Rk1yOiAnZTZlNmZhJyxcbiAgbGF2Rk1yWHNoOiAnZmZmMGY1JyxcbiAgbGF3bmdZRjogJzdjZmMwMCcsXG4gIE5tb25jRWZmb246ICdmZmZhY2QnLFxuICBaWGU6ICdhZGQ4ZTYnLFxuICBaY1NPOiAnZjA4MDgwJyxcbiAgWmN5YW46ICdlMGZmZmYnLFxuICBaZ1RNblBkTHc6ICdmYWZhZDInLFxuICBaV2F5OiAnZDNkM2QzJyxcbiAgWmdZRjogJzkwZWU5MCcsXG4gIFpnWXk6ICdkM2QzZDMnLFxuICBacFJrOiAnZmZiNmMxJyxcbiAgWnNPbW9uOiAnZmZhMDdhJyxcbiAgWnNIZ1lGOiAnMjBiMmFhJyxcbiAgWnNreVhlOiAnODdjZWZhJyxcbiAgWlVXYXk6ICc3Nzg4OTknLFxuICBaVWdZeTogJzc3ODg5OScsXG4gIFpzdEFsWGU6ICdiMGM0ZGUnLFxuICBaTHc6ICdmZmZmZTAnLFxuICBsaW1lOiAnZmYwMCcsXG4gIGxpbWVnWUY6ICczMmNkMzInLFxuICBsUkY6ICdmYWYwZTYnLFxuICBtYWdGdGE6ICdmZjAwZmYnLFxuICBtYVBvbjogJzgwMDAwMCcsXG4gIFZhcXVhbWFyUmU6ICc2NmNkYWEnLFxuICBWWGU6ICdjZCcsXG4gIFZTY0VkOiAnYmE1NWQzJyxcbiAgVnB1cnBOOiAnOTM3MGRiJyxcbiAgVnNIZ1lGOiAnM2NiMzcxJyxcbiAgVlVYZTogJzdiNjhlZScsXG4gIFZzcHJSZ2dZRjogJ2ZhOWEnLFxuICBWUWU6ICc0OGQxY2MnLFxuICBWdmlUZXRZZDogJ2M3MTU4NScsXG4gIG1pZG5pZ2h0WGU6ICcxOTE5NzAnLFxuICBtUnRjWWFtOiAnZjVmZmZhJyxcbiAgbWlzdHlQc2U6ICdmZmU0ZTEnLFxuICBtb2NjYXNSOiAnZmZlNGI1JyxcbiAgbmF2YWpvd0V0ZTogJ2ZmZGVhZCcsXG4gIG5hdnk6ICc4MCcsXG4gIFRkbGFjZTogJ2ZkZjVlNicsXG4gIFRpdmU6ICc4MDgwMDAnLFxuICBUaXZlZEJiOiAnNmI4ZTIzJyxcbiAgU2FuZ2U6ICdmZmE1MDAnLFxuICBTYW5nZVlkOiAnZmY0NTAwJyxcbiAgU2NFZDogJ2RhNzBkNicsXG4gIHBPZWdUTW5QZDogJ2VlZThhYScsXG4gIHBPZWdZRjogJzk4ZmI5OCcsXG4gIHBPZVFlOiAnYWZlZWVlJyxcbiAgcE9ldmlUZXRZZDogJ2RiNzA5MycsXG4gIHBhcGF5YXdFcDogJ2ZmZWZkNScsXG4gIHBIS3B1ZmY6ICdmZmRhYjknLFxuICBwZXJ1OiAnY2Q4NTNmJyxcbiAgcFJrOiAnZmZjMGNiJyxcbiAgcGx1bTogJ2RkYTBkZCcsXG4gIHBvd01yWGU6ICdiMGUwZTYnLFxuICBwdXJwTjogJzgwMDA4MCcsXG4gIFliZWNjYXB1cnBOOiAnNjYzMzk5JyxcbiAgWWQ6ICdmZjAwMDAnLFxuICBQc3licm93bjogJ2JjOGY4ZicsXG4gIFB5T1hlOiAnNDE2OWUxJyxcbiAgc2FkZE5iUHduOiAnOGI0NTEzJyxcbiAgc09tb246ICdmYTgwNzInLFxuICBzYW5keWJQd246ICdmNGE0NjAnLFxuICBzSGdZRjogJzJlOGI1NycsXG4gIHNIc2hlbGw6ICdmZmY1ZWUnLFxuICBzaUZuYTogJ2EwNTIyZCcsXG4gIHNpbHZlcjogJ2MwYzBjMCcsXG4gIHNreVhlOiAnODdjZWViJyxcbiAgVVhlOiAnNmE1YWNkJyxcbiAgVVdheTogJzcwODA5MCcsXG4gIFVnWXk6ICc3MDgwOTAnLFxuICBzbm93OiAnZmZmYWZhJyxcbiAgc3ByUmdnWUY6ICdmZjdmJyxcbiAgc3RBbFhlOiAnNDY4MmI0JyxcbiAgdGFuOiAnZDJiNDhjJyxcbiAgdGVPOiAnODA4MCcsXG4gIHRFc3ROOiAnZDhiZmQ4JyxcbiAgdG9tYXRvOiAnZmY2MzQ3JyxcbiAgUWU6ICc0MGUwZDAnLFxuICB2aVRldDogJ2VlODJlZScsXG4gIEpIdDogJ2Y1ZGViMycsXG4gIHdFdGU6ICdmZmZmZmYnLFxuICB3RXRlc21va2U6ICdmNWY1ZjUnLFxuICBMdzogJ2ZmZmYwMCcsXG4gIEx3Z1lGOiAnOWFjZDMyJ1xufTtcbmZ1bmN0aW9uIHVucGFjaygpIHtcbiAgY29uc3QgdW5wYWNrZWQgPSB7fTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG5hbWVzJDEpO1xuICBjb25zdCB0a2V5cyA9IE9iamVjdC5rZXlzKG1hcCk7XG4gIGxldCBpLCBqLCBrLCBvaywgbms7XG4gIGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgb2sgPSBuayA9IGtleXNbaV07XG4gICAgZm9yIChqID0gMDsgaiA8IHRrZXlzLmxlbmd0aDsgaisrKSB7XG4gICAgICBrID0gdGtleXNbal07XG4gICAgICBuayA9IG5rLnJlcGxhY2UoaywgbWFwW2tdKTtcbiAgICB9XG4gICAgayA9IHBhcnNlSW50KG5hbWVzJDFbb2tdLCAxNik7XG4gICAgdW5wYWNrZWRbbmtdID0gW2sgPj4gMTYgJiAweEZGLCBrID4+IDggJiAweEZGLCBrICYgMHhGRl07XG4gIH1cbiAgcmV0dXJuIHVucGFja2VkO1xufVxuXG5sZXQgbmFtZXM7XG5mdW5jdGlvbiBuYW1lUGFyc2Uoc3RyKSB7XG4gIGlmICghbmFtZXMpIHtcbiAgICBuYW1lcyA9IHVucGFjaygpO1xuICAgIG5hbWVzLnRyYW5zcGFyZW50ID0gWzAsIDAsIDAsIDBdO1xuICB9XG4gIGNvbnN0IGEgPSBuYW1lc1tzdHIudG9Mb3dlckNhc2UoKV07XG4gIHJldHVybiBhICYmIHtcbiAgICByOiBhWzBdLFxuICAgIGc6IGFbMV0sXG4gICAgYjogYVsyXSxcbiAgICBhOiBhLmxlbmd0aCA9PT0gNCA/IGFbM10gOiAyNTVcbiAgfTtcbn1cblxuY29uc3QgUkdCX1JFID0gL15yZ2JhP1xcKFxccyooWy0rLlxcZF0rKSglKT9bXFxzLF0rKFstKy5lXFxkXSspKCUpP1tcXHMsXSsoWy0rLmVcXGRdKykoJSk/KD86W1xccywvXSsoWy0rLmVcXGRdKykoJSk/KT9cXHMqXFwpJC87XG5mdW5jdGlvbiByZ2JQYXJzZShzdHIpIHtcbiAgY29uc3QgbSA9IFJHQl9SRS5leGVjKHN0cik7XG4gIGxldCBhID0gMjU1O1xuICBsZXQgciwgZywgYjtcbiAgaWYgKCFtKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChtWzddICE9PSByKSB7XG4gICAgY29uc3QgdiA9ICttWzddO1xuICAgIGEgPSBtWzhdID8gcDJiKHYpIDogbGltKHYgKiAyNTUsIDAsIDI1NSk7XG4gIH1cbiAgciA9ICttWzFdO1xuICBnID0gK21bM107XG4gIGIgPSArbVs1XTtcbiAgciA9IDI1NSAmIChtWzJdID8gcDJiKHIpIDogbGltKHIsIDAsIDI1NSkpO1xuICBnID0gMjU1ICYgKG1bNF0gPyBwMmIoZykgOiBsaW0oZywgMCwgMjU1KSk7XG4gIGIgPSAyNTUgJiAobVs2XSA/IHAyYihiKSA6IGxpbShiLCAwLCAyNTUpKTtcbiAgcmV0dXJuIHtcbiAgICByOiByLFxuICAgIGc6IGcsXG4gICAgYjogYixcbiAgICBhOiBhXG4gIH07XG59XG5mdW5jdGlvbiByZ2JTdHJpbmcodikge1xuICByZXR1cm4gdiAmJiAoXG4gICAgdi5hIDwgMjU1XG4gICAgICA/IGByZ2JhKCR7di5yfSwgJHt2Lmd9LCAke3YuYn0sICR7YjJuKHYuYSl9KWBcbiAgICAgIDogYHJnYigke3Yucn0sICR7di5nfSwgJHt2LmJ9KWBcbiAgKTtcbn1cblxuY29uc3QgdG8gPSB2ID0+IHYgPD0gMC4wMDMxMzA4ID8gdiAqIDEyLjkyIDogTWF0aC5wb3codiwgMS4wIC8gMi40KSAqIDEuMDU1IC0gMC4wNTU7XG5jb25zdCBmcm9tID0gdiA9PiB2IDw9IDAuMDQwNDUgPyB2IC8gMTIuOTIgOiBNYXRoLnBvdygodiArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xuZnVuY3Rpb24gaW50ZXJwb2xhdGUocmdiMSwgcmdiMiwgdCkge1xuICBjb25zdCByID0gZnJvbShiMm4ocmdiMS5yKSk7XG4gIGNvbnN0IGcgPSBmcm9tKGIybihyZ2IxLmcpKTtcbiAgY29uc3QgYiA9IGZyb20oYjJuKHJnYjEuYikpO1xuICByZXR1cm4ge1xuICAgIHI6IG4yYih0byhyICsgdCAqIChmcm9tKGIybihyZ2IyLnIpKSAtIHIpKSksXG4gICAgZzogbjJiKHRvKGcgKyB0ICogKGZyb20oYjJuKHJnYjIuZykpIC0gZykpKSxcbiAgICBiOiBuMmIodG8oYiArIHQgKiAoZnJvbShiMm4ocmdiMi5iKSkgLSBiKSkpLFxuICAgIGE6IHJnYjEuYSArIHQgKiAocmdiMi5hIC0gcmdiMS5hKVxuICB9O1xufVxuXG5mdW5jdGlvbiBtb2RIU0wodiwgaSwgcmF0aW8pIHtcbiAgaWYgKHYpIHtcbiAgICBsZXQgdG1wID0gcmdiMmhzbCh2KTtcbiAgICB0bXBbaV0gPSBNYXRoLm1heCgwLCBNYXRoLm1pbih0bXBbaV0gKyB0bXBbaV0gKiByYXRpbywgaSA9PT0gMCA/IDM2MCA6IDEpKTtcbiAgICB0bXAgPSBoc2wycmdiKHRtcCk7XG4gICAgdi5yID0gdG1wWzBdO1xuICAgIHYuZyA9IHRtcFsxXTtcbiAgICB2LmIgPSB0bXBbMl07XG4gIH1cbn1cbmZ1bmN0aW9uIGNsb25lKHYsIHByb3RvKSB7XG4gIHJldHVybiB2ID8gT2JqZWN0LmFzc2lnbihwcm90byB8fCB7fSwgdikgOiB2O1xufVxuZnVuY3Rpb24gZnJvbU9iamVjdChpbnB1dCkge1xuICB2YXIgdiA9IHtyOiAwLCBnOiAwLCBiOiAwLCBhOiAyNTV9O1xuICBpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcbiAgICBpZiAoaW5wdXQubGVuZ3RoID49IDMpIHtcbiAgICAgIHYgPSB7cjogaW5wdXRbMF0sIGc6IGlucHV0WzFdLCBiOiBpbnB1dFsyXSwgYTogMjU1fTtcbiAgICAgIGlmIChpbnB1dC5sZW5ndGggPiAzKSB7XG4gICAgICAgIHYuYSA9IG4yYihpbnB1dFszXSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHYgPSBjbG9uZShpbnB1dCwge3I6IDAsIGc6IDAsIGI6IDAsIGE6IDF9KTtcbiAgICB2LmEgPSBuMmIodi5hKTtcbiAgfVxuICByZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIGZ1bmN0aW9uUGFyc2Uoc3RyKSB7XG4gIGlmIChzdHIuY2hhckF0KDApID09PSAncicpIHtcbiAgICByZXR1cm4gcmdiUGFyc2Uoc3RyKTtcbiAgfVxuICByZXR1cm4gaHVlUGFyc2Uoc3RyKTtcbn1cbmNsYXNzIENvbG9yIHtcbiAgY29uc3RydWN0b3IoaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBDb2xvcikge1xuICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cbiAgICBjb25zdCB0eXBlID0gdHlwZW9mIGlucHV0O1xuICAgIGxldCB2O1xuICAgIGlmICh0eXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgdiA9IGZyb21PYmplY3QoaW5wdXQpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHYgPSBoZXhQYXJzZShpbnB1dCkgfHwgbmFtZVBhcnNlKGlucHV0KSB8fCBmdW5jdGlvblBhcnNlKGlucHV0KTtcbiAgICB9XG4gICAgdGhpcy5fcmdiID0gdjtcbiAgICB0aGlzLl92YWxpZCA9ICEhdjtcbiAgfVxuICBnZXQgdmFsaWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbGlkO1xuICB9XG4gIGdldCByZ2IoKSB7XG4gICAgdmFyIHYgPSBjbG9uZSh0aGlzLl9yZ2IpO1xuICAgIGlmICh2KSB7XG4gICAgICB2LmEgPSBiMm4odi5hKTtcbiAgICB9XG4gICAgcmV0dXJuIHY7XG4gIH1cbiAgc2V0IHJnYihvYmopIHtcbiAgICB0aGlzLl9yZ2IgPSBmcm9tT2JqZWN0KG9iaik7XG4gIH1cbiAgcmdiU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLl92YWxpZCA/IHJnYlN0cmluZyh0aGlzLl9yZ2IpIDogdW5kZWZpbmVkO1xuICB9XG4gIGhleFN0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsaWQgPyBoZXhTdHJpbmcodGhpcy5fcmdiKSA6IHVuZGVmaW5lZDtcbiAgfVxuICBoc2xTdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbGlkID8gaHNsU3RyaW5nKHRoaXMuX3JnYikgOiB1bmRlZmluZWQ7XG4gIH1cbiAgbWl4KGNvbG9yLCB3ZWlnaHQpIHtcbiAgICBpZiAoY29sb3IpIHtcbiAgICAgIGNvbnN0IGMxID0gdGhpcy5yZ2I7XG4gICAgICBjb25zdCBjMiA9IGNvbG9yLnJnYjtcbiAgICAgIGxldCB3MjtcbiAgICAgIGNvbnN0IHAgPSB3ZWlnaHQgPT09IHcyID8gMC41IDogd2VpZ2h0O1xuICAgICAgY29uc3QgdyA9IDIgKiBwIC0gMTtcbiAgICAgIGNvbnN0IGEgPSBjMS5hIC0gYzIuYTtcbiAgICAgIGNvbnN0IHcxID0gKCh3ICogYSA9PT0gLTEgPyB3IDogKHcgKyBhKSAvICgxICsgdyAqIGEpKSArIDEpIC8gMi4wO1xuICAgICAgdzIgPSAxIC0gdzE7XG4gICAgICBjMS5yID0gMHhGRiAmIHcxICogYzEuciArIHcyICogYzIuciArIDAuNTtcbiAgICAgIGMxLmcgPSAweEZGICYgdzEgKiBjMS5nICsgdzIgKiBjMi5nICsgMC41O1xuICAgICAgYzEuYiA9IDB4RkYgJiB3MSAqIGMxLmIgKyB3MiAqIGMyLmIgKyAwLjU7XG4gICAgICBjMS5hID0gcCAqIGMxLmEgKyAoMSAtIHApICogYzIuYTtcbiAgICAgIHRoaXMucmdiID0gYzE7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGludGVycG9sYXRlKGNvbG9yLCB0KSB7XG4gICAgaWYgKGNvbG9yKSB7XG4gICAgICB0aGlzLl9yZ2IgPSBpbnRlcnBvbGF0ZSh0aGlzLl9yZ2IsIGNvbG9yLl9yZ2IsIHQpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IENvbG9yKHRoaXMucmdiKTtcbiAgfVxuICBhbHBoYShhKSB7XG4gICAgdGhpcy5fcmdiLmEgPSBuMmIoYSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgY2xlYXJlcihyYXRpbykge1xuICAgIGNvbnN0IHJnYiA9IHRoaXMuX3JnYjtcbiAgICByZ2IuYSAqPSAxIC0gcmF0aW87XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZ3JleXNjYWxlKCkge1xuICAgIGNvbnN0IHJnYiA9IHRoaXMuX3JnYjtcbiAgICBjb25zdCB2YWwgPSByb3VuZChyZ2IuciAqIDAuMyArIHJnYi5nICogMC41OSArIHJnYi5iICogMC4xMSk7XG4gICAgcmdiLnIgPSByZ2IuZyA9IHJnYi5iID0gdmFsO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIG9wYXF1ZXIocmF0aW8pIHtcbiAgICBjb25zdCByZ2IgPSB0aGlzLl9yZ2I7XG4gICAgcmdiLmEgKj0gMSArIHJhdGlvO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIG5lZ2F0ZSgpIHtcbiAgICBjb25zdCB2ID0gdGhpcy5fcmdiO1xuICAgIHYuciA9IDI1NSAtIHYucjtcbiAgICB2LmcgPSAyNTUgLSB2Lmc7XG4gICAgdi5iID0gMjU1IC0gdi5iO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGxpZ2h0ZW4ocmF0aW8pIHtcbiAgICBtb2RIU0wodGhpcy5fcmdiLCAyLCByYXRpbyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZGFya2VuKHJhdGlvKSB7XG4gICAgbW9kSFNMKHRoaXMuX3JnYiwgMiwgLXJhdGlvKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBzYXR1cmF0ZShyYXRpbykge1xuICAgIG1vZEhTTCh0aGlzLl9yZ2IsIDEsIHJhdGlvKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBkZXNhdHVyYXRlKHJhdGlvKSB7XG4gICAgbW9kSFNMKHRoaXMuX3JnYiwgMSwgLXJhdGlvKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICByb3RhdGUoZGVnKSB7XG4gICAgcm90YXRlKHRoaXMuX3JnYiwgZGVnKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG5mdW5jdGlvbiBpbmRleF9lc20oaW5wdXQpIHtcbiAgcmV0dXJuIG5ldyBDb2xvcihpbnB1dCk7XG59XG5cbmV4cG9ydCB7IENvbG9yLCBiMm4sIGIycCwgaW5kZXhfZXNtIGFzIGRlZmF1bHQsIGhleFBhcnNlLCBoZXhTdHJpbmcsIGhzbDJyZ2IsIGhzbFN0cmluZywgaHN2MnJnYiwgaHVlUGFyc2UsIGh3YjJyZ2IsIGxpbSwgbjJiLCBuMnAsIG5hbWVQYXJzZSwgcDJiLCByZ2IyaHNsLCByZ2JQYXJzZSwgcmdiU3RyaW5nLCByb3RhdGUsIHJvdW5kIH07XG4iLCIvKiFcbiAqIENoYXJ0LmpzIHY0LjMuM1xuICogaHR0cHM6Ly93d3cuY2hhcnRqcy5vcmdcbiAqIChjKSAyMDIzIENoYXJ0LmpzIENvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKi9cbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnQGt1cmtsZS9jb2xvcic7XG5cbi8qKlxuICogQG5hbWVzcGFjZSBDaGFydC5oZWxwZXJzXG4gKi8gLyoqXG4gKiBBbiBlbXB0eSBmdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkLCBmb3IgZXhhbXBsZSwgZm9yIG9wdGlvbmFsIGNhbGxiYWNrLlxuICovIGZ1bmN0aW9uIG5vb3AoKSB7XG4vKiBub29wICovIH1cbi8qKlxuICogUmV0dXJucyBhIHVuaXF1ZSBpZCwgc2VxdWVudGlhbGx5IGdlbmVyYXRlZCBmcm9tIGEgZ2xvYmFsIHZhcmlhYmxlLlxuICovIGNvbnN0IHVpZCA9ICgoKT0+e1xuICAgIGxldCBpZCA9IDA7XG4gICAgcmV0dXJuICgpPT5pZCsrO1xufSkoKTtcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGB2YWx1ZWAgaXMgbmVpdGhlciBudWxsIG5vciB1bmRlZmluZWQsIGVsc2UgcmV0dXJucyBmYWxzZS5cbiAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byB0ZXN0LlxuICogQHNpbmNlIDIuNy4wXG4gKi8gZnVuY3Rpb24gaXNOdWxsT3JVbmRlZih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSAoaW5jbHVkaW5nIHR5cGVkIGFycmF5cyksIGVsc2UgcmV0dXJucyBmYWxzZS5cbiAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byB0ZXN0LlxuICogQGZ1bmN0aW9uXG4gKi8gZnVuY3Rpb24gaXNBcnJheSh2YWx1ZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5ICYmIEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCB0eXBlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICBpZiAodHlwZS5zbGljZSgwLCA3KSA9PT0gJ1tvYmplY3QnICYmIHR5cGUuc2xpY2UoLTYpID09PSAnQXJyYXldJykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QgKGV4Y2x1ZGluZyBudWxsKSwgZWxzZSByZXR1cm5zIGZhbHNlLlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIHRlc3QuXG4gKiBAc2luY2UgMi43LjBcbiAqLyBmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBPYmplY3RdJztcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGB2YWx1ZWAgaXMgYSBmaW5pdGUgbnVtYmVyLCBlbHNlIHJldHVybnMgZmFsc2VcbiAqIEBwYXJhbSB2YWx1ZSAgLSBUaGUgdmFsdWUgdG8gdGVzdC5cbiAqLyBmdW5jdGlvbiBpc051bWJlckZpbml0ZSh2YWx1ZSkge1xuICAgIHJldHVybiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCB2YWx1ZSBpbnN0YW5jZW9mIE51bWJlcikgJiYgaXNGaW5pdGUoK3ZhbHVlKTtcbn1cbi8qKlxuICogUmV0dXJucyBgdmFsdWVgIGlmIGZpbml0ZSwgZWxzZSByZXR1cm5zIGBkZWZhdWx0VmFsdWVgLlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIHJldHVybiBpZiBkZWZpbmVkLlxuICogQHBhcmFtIGRlZmF1bHRWYWx1ZSAtIFRoZSB2YWx1ZSB0byByZXR1cm4gaWYgYHZhbHVlYCBpcyBub3QgZmluaXRlLlxuICovIGZ1bmN0aW9uIGZpbml0ZU9yRGVmYXVsdCh2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgcmV0dXJuIGlzTnVtYmVyRmluaXRlKHZhbHVlKSA/IHZhbHVlIDogZGVmYXVsdFZhbHVlO1xufVxuLyoqXG4gKiBSZXR1cm5zIGB2YWx1ZWAgaWYgZGVmaW5lZCwgZWxzZSByZXR1cm5zIGBkZWZhdWx0VmFsdWVgLlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIHJldHVybiBpZiBkZWZpbmVkLlxuICogQHBhcmFtIGRlZmF1bHRWYWx1ZSAtIFRoZSB2YWx1ZSB0byByZXR1cm4gaWYgYHZhbHVlYCBpcyB1bmRlZmluZWQuXG4gKi8gZnVuY3Rpb24gdmFsdWVPckRlZmF1bHQodmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gZGVmYXVsdFZhbHVlIDogdmFsdWU7XG59XG5jb25zdCB0b1BlcmNlbnRhZ2UgPSAodmFsdWUsIGRpbWVuc2lvbik9PnR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUuZW5kc1dpdGgoJyUnKSA/IHBhcnNlRmxvYXQodmFsdWUpIC8gMTAwIDogK3ZhbHVlIC8gZGltZW5zaW9uO1xuY29uc3QgdG9EaW1lbnNpb24gPSAodmFsdWUsIGRpbWVuc2lvbik9PnR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUuZW5kc1dpdGgoJyUnKSA/IHBhcnNlRmxvYXQodmFsdWUpIC8gMTAwICogZGltZW5zaW9uIDogK3ZhbHVlO1xuLyoqXG4gKiBDYWxscyBgZm5gIHdpdGggdGhlIGdpdmVuIGBhcmdzYCBpbiB0aGUgc2NvcGUgZGVmaW5lZCBieSBgdGhpc0FyZ2AgYW5kIHJldHVybnMgdGhlXG4gKiB2YWx1ZSByZXR1cm5lZCBieSBgZm5gLiBJZiBgZm5gIGlzIG5vdCBhIGZ1bmN0aW9uLCB0aGlzIG1ldGhvZCByZXR1cm5zIHVuZGVmaW5lZC5cbiAqIEBwYXJhbSBmbiAtIFRoZSBmdW5jdGlvbiB0byBjYWxsLlxuICogQHBhcmFtIGFyZ3MgLSBUaGUgYXJndW1lbnRzIHdpdGggd2hpY2ggYGZuYCBzaG91bGQgYmUgY2FsbGVkLlxuICogQHBhcmFtIFt0aGlzQXJnXSAtIFRoZSB2YWx1ZSBvZiBgdGhpc2AgcHJvdmlkZWQgZm9yIHRoZSBjYWxsIHRvIGBmbmAuXG4gKi8gZnVuY3Rpb24gY2FsbGJhY2soZm4sIGFyZ3MsIHRoaXNBcmcpIHtcbiAgICBpZiAoZm4gJiYgdHlwZW9mIGZuLmNhbGwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGVhY2gobG9vcGFibGUsIGZuLCB0aGlzQXJnLCByZXZlcnNlKSB7XG4gICAgbGV0IGksIGxlbiwga2V5cztcbiAgICBpZiAoaXNBcnJheShsb29wYWJsZSkpIHtcbiAgICAgICAgbGVuID0gbG9vcGFibGUubGVuZ3RoO1xuICAgICAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICAgICAgZm9yKGkgPSBsZW4gLSAxOyBpID49IDA7IGktLSl7XG4gICAgICAgICAgICAgICAgZm4uY2FsbCh0aGlzQXJnLCBsb29wYWJsZVtpXSwgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBsZW47IGkrKyl7XG4gICAgICAgICAgICAgICAgZm4uY2FsbCh0aGlzQXJnLCBsb29wYWJsZVtpXSwgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGxvb3BhYmxlKSkge1xuICAgICAgICBrZXlzID0gT2JqZWN0LmtleXMobG9vcGFibGUpO1xuICAgICAgICBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgbGVuOyBpKyspe1xuICAgICAgICAgICAgZm4uY2FsbCh0aGlzQXJnLCBsb29wYWJsZVtrZXlzW2ldXSwga2V5c1tpXSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgYGEwYCBhbmQgYGExYCBhcnJheXMgaGF2ZSB0aGUgc2FtZSBjb250ZW50LCBlbHNlIHJldHVybnMgZmFsc2UuXG4gKiBAcGFyYW0gYTAgLSBUaGUgYXJyYXkgdG8gY29tcGFyZVxuICogQHBhcmFtIGExIC0gVGhlIGFycmF5IHRvIGNvbXBhcmVcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2VsZW1lbnRzRXF1YWwoYTAsIGExKSB7XG4gICAgbGV0IGksIGlsZW4sIHYwLCB2MTtcbiAgICBpZiAoIWEwIHx8ICFhMSB8fCBhMC5sZW5ndGggIT09IGExLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvcihpID0gMCwgaWxlbiA9IGEwLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIHYwID0gYTBbaV07XG4gICAgICAgIHYxID0gYTFbaV07XG4gICAgICAgIGlmICh2MC5kYXRhc2V0SW5kZXggIT09IHYxLmRhdGFzZXRJbmRleCB8fCB2MC5pbmRleCAhPT0gdjEuaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbi8qKlxuICogUmV0dXJucyBhIGRlZXAgY29weSBvZiBgc291cmNlYCB3aXRob3V0IGtlZXBpbmcgcmVmZXJlbmNlcyBvbiBvYmplY3RzIGFuZCBhcnJheXMuXG4gKiBAcGFyYW0gc291cmNlIC0gVGhlIHZhbHVlIHRvIGNsb25lLlxuICovIGZ1bmN0aW9uIGNsb25lKHNvdXJjZSkge1xuICAgIGlmIChpc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5tYXAoY2xvbmUpO1xuICAgIH1cbiAgICBpZiAoaXNPYmplY3Qoc291cmNlKSkge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgICAgICAgY29uc3Qga2xlbiA9IGtleXMubGVuZ3RoO1xuICAgICAgICBsZXQgayA9IDA7XG4gICAgICAgIGZvcig7IGsgPCBrbGVuOyArK2spe1xuICAgICAgICAgICAgdGFyZ2V0W2tleXNba11dID0gY2xvbmUoc291cmNlW2tleXNba11dKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xufVxuZnVuY3Rpb24gaXNWYWxpZEtleShrZXkpIHtcbiAgICByZXR1cm4gW1xuICAgICAgICAnX19wcm90b19fJyxcbiAgICAgICAgJ3Byb3RvdHlwZScsXG4gICAgICAgICdjb25zdHJ1Y3RvcidcbiAgICBdLmluZGV4T2Yoa2V5KSA9PT0gLTE7XG59XG4vKipcbiAqIFRoZSBkZWZhdWx0IG1lcmdlciB3aGVuIENoYXJ0LmhlbHBlcnMubWVyZ2UgaXMgY2FsbGVkIHdpdGhvdXQgbWVyZ2VyIG9wdGlvbi5cbiAqIE5vdGUoU0IpOiBhbHNvIHVzZWQgYnkgbWVyZ2VDb25maWcgYW5kIG1lcmdlU2NhbGVDb25maWcgYXMgZmFsbGJhY2suXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9tZXJnZXIoa2V5LCB0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuICAgIGlmICghaXNWYWxpZEtleShrZXkpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdHZhbCA9IHRhcmdldFtrZXldO1xuICAgIGNvbnN0IHN2YWwgPSBzb3VyY2Vba2V5XTtcbiAgICBpZiAoaXNPYmplY3QodHZhbCkgJiYgaXNPYmplY3Qoc3ZhbCkpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11c2UtYmVmb3JlLWRlZmluZVxuICAgICAgICBtZXJnZSh0dmFsLCBzdmFsLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXRba2V5XSA9IGNsb25lKHN2YWwpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgc291cmNlcyA9IGlzQXJyYXkoc291cmNlKSA/IHNvdXJjZSA6IFtcbiAgICAgICAgc291cmNlXG4gICAgXTtcbiAgICBjb25zdCBpbGVuID0gc291cmNlcy5sZW5ndGg7XG4gICAgaWYgKCFpc09iamVjdCh0YXJnZXQpKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIGNvbnN0IG1lcmdlciA9IG9wdGlvbnMubWVyZ2VyIHx8IF9tZXJnZXI7XG4gICAgbGV0IGN1cnJlbnQ7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIGN1cnJlbnQgPSBzb3VyY2VzW2ldO1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGN1cnJlbnQpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoY3VycmVudCk7XG4gICAgICAgIGZvcihsZXQgayA9IDAsIGtsZW4gPSBrZXlzLmxlbmd0aDsgayA8IGtsZW47ICsrayl7XG4gICAgICAgICAgICBtZXJnZXIoa2V5c1trXSwgdGFyZ2V0LCBjdXJyZW50LCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xufVxuZnVuY3Rpb24gbWVyZ2VJZih0YXJnZXQsIHNvdXJjZSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgICByZXR1cm4gbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIHtcbiAgICAgICAgbWVyZ2VyOiBfbWVyZ2VySWZcbiAgICB9KTtcbn1cbi8qKlxuICogTWVyZ2VzIHNvdXJjZVtrZXldIGluIHRhcmdldFtrZXldIG9ubHkgaWYgdGFyZ2V0W2tleV0gaXMgdW5kZWZpbmVkLlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfbWVyZ2VySWYoa2V5LCB0YXJnZXQsIHNvdXJjZSkge1xuICAgIGlmICghaXNWYWxpZEtleShrZXkpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdHZhbCA9IHRhcmdldFtrZXldO1xuICAgIGNvbnN0IHN2YWwgPSBzb3VyY2Vba2V5XTtcbiAgICBpZiAoaXNPYmplY3QodHZhbCkgJiYgaXNPYmplY3Qoc3ZhbCkpIHtcbiAgICAgICAgbWVyZ2VJZih0dmFsLCBzdmFsKTtcbiAgICB9IGVsc2UgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGFyZ2V0LCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gY2xvbmUoc3ZhbCk7XG4gICAgfVxufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9kZXByZWNhdGVkKHNjb3BlLCB2YWx1ZSwgcHJldmlvdXMsIGN1cnJlbnQpIHtcbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zb2xlLndhcm4oc2NvcGUgKyAnOiBcIicgKyBwcmV2aW91cyArICdcIiBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIFwiJyArIGN1cnJlbnQgKyAnXCIgaW5zdGVhZCcpO1xuICAgIH1cbn1cbi8vIHJlc29sdmVPYmplY3RLZXkgcmVzb2x2ZXIgY2FjaGVcbmNvbnN0IGtleVJlc29sdmVycyA9IHtcbiAgICAvLyBDaGFydC5oZWxwZXJzLmNvcmUgcmVzb2x2ZU9iamVjdEtleSBzaG91bGQgcmVzb2x2ZSBlbXB0eSBrZXkgdG8gcm9vdCBvYmplY3RcbiAgICAnJzogKHYpPT52LFxuICAgIC8vIGRlZmF1bHQgcmVzb2x2ZXJzXG4gICAgeDogKG8pPT5vLngsXG4gICAgeTogKG8pPT5vLnlcbn07XG4vKipcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX3NwbGl0S2V5KGtleSkge1xuICAgIGNvbnN0IHBhcnRzID0ga2V5LnNwbGl0KCcuJyk7XG4gICAgY29uc3Qga2V5cyA9IFtdO1xuICAgIGxldCB0bXAgPSAnJztcbiAgICBmb3IgKGNvbnN0IHBhcnQgb2YgcGFydHMpe1xuICAgICAgICB0bXAgKz0gcGFydDtcbiAgICAgICAgaWYgKHRtcC5lbmRzV2l0aCgnXFxcXCcpKSB7XG4gICAgICAgICAgICB0bXAgPSB0bXAuc2xpY2UoMCwgLTEpICsgJy4nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAga2V5cy5wdXNoKHRtcCk7XG4gICAgICAgICAgICB0bXAgPSAnJztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ga2V5cztcbn1cbmZ1bmN0aW9uIF9nZXRLZXlSZXNvbHZlcihrZXkpIHtcbiAgICBjb25zdCBrZXlzID0gX3NwbGl0S2V5KGtleSk7XG4gICAgcmV0dXJuIChvYmopPT57XG4gICAgICAgIGZvciAoY29uc3QgayBvZiBrZXlzKXtcbiAgICAgICAgICAgIGlmIChrID09PSAnJykge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb2JqID0gb2JqICYmIG9ialtrXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH07XG59XG5mdW5jdGlvbiByZXNvbHZlT2JqZWN0S2V5KG9iaiwga2V5KSB7XG4gICAgY29uc3QgcmVzb2x2ZXIgPSBrZXlSZXNvbHZlcnNba2V5XSB8fCAoa2V5UmVzb2x2ZXJzW2tleV0gPSBfZ2V0S2V5UmVzb2x2ZXIoa2V5KSk7XG4gICAgcmV0dXJuIHJlc29sdmVyKG9iaik7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2NhcGl0YWxpemUoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKTtcbn1cbmNvbnN0IGRlZmluZWQgPSAodmFsdWUpPT50eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnO1xuY29uc3QgaXNGdW5jdGlvbiA9ICh2YWx1ZSk9PnR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbi8vIEFkYXB0ZWQgZnJvbSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zMTEyODg1NS9jb21wYXJpbmctZWNtYTYtc2V0cy1mb3ItZXF1YWxpdHkjMzExMjkzODRcbmNvbnN0IHNldHNFcXVhbCA9IChhLCBiKT0+e1xuICAgIGlmIChhLnNpemUgIT09IGIuc2l6ZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAoY29uc3QgaXRlbSBvZiBhKXtcbiAgICAgICAgaWYgKCFiLmhhcyhpdGVtKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufTtcbi8qKlxuICogQHBhcmFtIGUgLSBUaGUgZXZlbnRcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2lzQ2xpY2tFdmVudChlKSB7XG4gICAgcmV0dXJuIGUudHlwZSA9PT0gJ21vdXNldXAnIHx8IGUudHlwZSA9PT0gJ2NsaWNrJyB8fCBlLnR5cGUgPT09ICdjb250ZXh0bWVudSc7XG59XG5cbi8qKlxuICogQGFsaWFzIENoYXJ0LmhlbHBlcnMubWF0aFxuICogQG5hbWVzcGFjZVxuICovIGNvbnN0IFBJID0gTWF0aC5QSTtcbmNvbnN0IFRBVSA9IDIgKiBQSTtcbmNvbnN0IFBJVEFVID0gVEFVICsgUEk7XG5jb25zdCBJTkZJTklUWSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbmNvbnN0IFJBRF9QRVJfREVHID0gUEkgLyAxODA7XG5jb25zdCBIQUxGX1BJID0gUEkgLyAyO1xuY29uc3QgUVVBUlRFUl9QSSA9IFBJIC8gNDtcbmNvbnN0IFRXT19USElSRFNfUEkgPSBQSSAqIDIgLyAzO1xuY29uc3QgbG9nMTAgPSBNYXRoLmxvZzEwO1xuY29uc3Qgc2lnbiA9IE1hdGguc2lnbjtcbmZ1bmN0aW9uIGFsbW9zdEVxdWFscyh4LCB5LCBlcHNpbG9uKSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKHggLSB5KSA8IGVwc2lsb247XG59XG4vKipcbiAqIEltcGxlbWVudGF0aW9uIG9mIHRoZSBuaWNlIG51bWJlciBhbGdvcml0aG0gdXNlZCBpbiBkZXRlcm1pbmluZyB3aGVyZSBheGlzIGxhYmVscyB3aWxsIGdvXG4gKi8gZnVuY3Rpb24gbmljZU51bShyYW5nZSkge1xuICAgIGNvbnN0IHJvdW5kZWRSYW5nZSA9IE1hdGgucm91bmQocmFuZ2UpO1xuICAgIHJhbmdlID0gYWxtb3N0RXF1YWxzKHJhbmdlLCByb3VuZGVkUmFuZ2UsIHJhbmdlIC8gMTAwMCkgPyByb3VuZGVkUmFuZ2UgOiByYW5nZTtcbiAgICBjb25zdCBuaWNlUmFuZ2UgPSBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihsb2cxMChyYW5nZSkpKTtcbiAgICBjb25zdCBmcmFjdGlvbiA9IHJhbmdlIC8gbmljZVJhbmdlO1xuICAgIGNvbnN0IG5pY2VGcmFjdGlvbiA9IGZyYWN0aW9uIDw9IDEgPyAxIDogZnJhY3Rpb24gPD0gMiA/IDIgOiBmcmFjdGlvbiA8PSA1ID8gNSA6IDEwO1xuICAgIHJldHVybiBuaWNlRnJhY3Rpb24gKiBuaWNlUmFuZ2U7XG59XG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgb2YgZmFjdG9ycyBzb3J0ZWQgZnJvbSAxIHRvIHNxcnQodmFsdWUpXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9mYWN0b3JpemUodmFsdWUpIHtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBjb25zdCBzcXJ0ID0gTWF0aC5zcXJ0KHZhbHVlKTtcbiAgICBsZXQgaTtcbiAgICBmb3IoaSA9IDE7IGkgPCBzcXJ0OyBpKyspe1xuICAgICAgICBpZiAodmFsdWUgJSBpID09PSAwKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChpKTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlIC8gaSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNxcnQgPT09IChzcXJ0IHwgMCkpIHtcbiAgICAgICAgcmVzdWx0LnB1c2goc3FydCk7XG4gICAgfVxuICAgIHJlc3VsdC5zb3J0KChhLCBiKT0+YSAtIGIpLnBvcCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBpc051bWJlcihuKSB7XG4gICAgcmV0dXJuICFpc05hTihwYXJzZUZsb2F0KG4pKSAmJiBpc0Zpbml0ZShuKTtcbn1cbmZ1bmN0aW9uIGFsbW9zdFdob2xlKHgsIGVwc2lsb24pIHtcbiAgICBjb25zdCByb3VuZGVkID0gTWF0aC5yb3VuZCh4KTtcbiAgICByZXR1cm4gcm91bmRlZCAtIGVwc2lsb24gPD0geCAmJiByb3VuZGVkICsgZXBzaWxvbiA+PSB4O1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9zZXRNaW5BbmRNYXhCeUtleShhcnJheSwgdGFyZ2V0LCBwcm9wZXJ0eSkge1xuICAgIGxldCBpLCBpbGVuLCB2YWx1ZTtcbiAgICBmb3IoaSA9IDAsIGlsZW4gPSBhcnJheS5sZW5ndGg7IGkgPCBpbGVuOyBpKyspe1xuICAgICAgICB2YWx1ZSA9IGFycmF5W2ldW3Byb3BlcnR5XTtcbiAgICAgICAgaWYgKCFpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRhcmdldC5taW4gPSBNYXRoLm1pbih0YXJnZXQubWluLCB2YWx1ZSk7XG4gICAgICAgICAgICB0YXJnZXQubWF4ID0gTWF0aC5tYXgodGFyZ2V0Lm1heCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gdG9SYWRpYW5zKGRlZ3JlZXMpIHtcbiAgICByZXR1cm4gZGVncmVlcyAqIChQSSAvIDE4MCk7XG59XG5mdW5jdGlvbiB0b0RlZ3JlZXMocmFkaWFucykge1xuICAgIHJldHVybiByYWRpYW5zICogKDE4MCAvIFBJKTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzXG4gKiBpLmUuIHRoZSBudW1iZXIgb2YgZGlnaXRzIGFmdGVyIHRoZSBkZWNpbWFsIHBvaW50LCBvZiB0aGUgdmFsdWUgb2YgdGhpcyBOdW1iZXIuXG4gKiBAcGFyYW0geCAtIEEgbnVtYmVyLlxuICogQHJldHVybnMgVGhlIG51bWJlciBvZiBkZWNpbWFsIHBsYWNlcy5cbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2RlY2ltYWxQbGFjZXMoeCkge1xuICAgIGlmICghaXNOdW1iZXJGaW5pdGUoeCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgZSA9IDE7XG4gICAgbGV0IHAgPSAwO1xuICAgIHdoaWxlKE1hdGgucm91bmQoeCAqIGUpIC8gZSAhPT0geCl7XG4gICAgICAgIGUgKj0gMTA7XG4gICAgICAgIHArKztcbiAgICB9XG4gICAgcmV0dXJuIHA7XG59XG4vLyBHZXRzIHRoZSBhbmdsZSBmcm9tIHZlcnRpY2FsIHVwcmlnaHQgdG8gdGhlIHBvaW50IGFib3V0IGEgY2VudHJlLlxuZnVuY3Rpb24gZ2V0QW5nbGVGcm9tUG9pbnQoY2VudHJlUG9pbnQsIGFuZ2xlUG9pbnQpIHtcbiAgICBjb25zdCBkaXN0YW5jZUZyb21YQ2VudGVyID0gYW5nbGVQb2ludC54IC0gY2VudHJlUG9pbnQueDtcbiAgICBjb25zdCBkaXN0YW5jZUZyb21ZQ2VudGVyID0gYW5nbGVQb2ludC55IC0gY2VudHJlUG9pbnQueTtcbiAgICBjb25zdCByYWRpYWxEaXN0YW5jZUZyb21DZW50ZXIgPSBNYXRoLnNxcnQoZGlzdGFuY2VGcm9tWENlbnRlciAqIGRpc3RhbmNlRnJvbVhDZW50ZXIgKyBkaXN0YW5jZUZyb21ZQ2VudGVyICogZGlzdGFuY2VGcm9tWUNlbnRlcik7XG4gICAgbGV0IGFuZ2xlID0gTWF0aC5hdGFuMihkaXN0YW5jZUZyb21ZQ2VudGVyLCBkaXN0YW5jZUZyb21YQ2VudGVyKTtcbiAgICBpZiAoYW5nbGUgPCAtMC41ICogUEkpIHtcbiAgICAgICAgYW5nbGUgKz0gVEFVOyAvLyBtYWtlIHN1cmUgdGhlIHJldHVybmVkIGFuZ2xlIGlzIGluIHRoZSByYW5nZSBvZiAoLVBJLzIsIDNQSS8yXVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBhbmdsZSxcbiAgICAgICAgZGlzdGFuY2U6IHJhZGlhbERpc3RhbmNlRnJvbUNlbnRlclxuICAgIH07XG59XG5mdW5jdGlvbiBkaXN0YW5jZUJldHdlZW5Qb2ludHMocHQxLCBwdDIpIHtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHB0Mi54IC0gcHQxLngsIDIpICsgTWF0aC5wb3cocHQyLnkgLSBwdDEueSwgMikpO1xufVxuLyoqXG4gKiBTaG9ydGVzdCBkaXN0YW5jZSBiZXR3ZWVuIGFuZ2xlcywgaW4gZWl0aGVyIGRpcmVjdGlvbi5cbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2FuZ2xlRGlmZihhLCBiKSB7XG4gICAgcmV0dXJuIChhIC0gYiArIFBJVEFVKSAlIFRBVSAtIFBJO1xufVxuLyoqXG4gKiBOb3JtYWxpemUgYW5nbGUgdG8gYmUgYmV0d2VlbiAwIGFuZCAyKlBJXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9ub3JtYWxpemVBbmdsZShhKSB7XG4gICAgcmV0dXJuIChhICUgVEFVICsgVEFVKSAlIFRBVTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfYW5nbGVCZXR3ZWVuKGFuZ2xlLCBzdGFydCwgZW5kLCBzYW1lQW5nbGVJc0Z1bGxDaXJjbGUpIHtcbiAgICBjb25zdCBhID0gX25vcm1hbGl6ZUFuZ2xlKGFuZ2xlKTtcbiAgICBjb25zdCBzID0gX25vcm1hbGl6ZUFuZ2xlKHN0YXJ0KTtcbiAgICBjb25zdCBlID0gX25vcm1hbGl6ZUFuZ2xlKGVuZCk7XG4gICAgY29uc3QgYW5nbGVUb1N0YXJ0ID0gX25vcm1hbGl6ZUFuZ2xlKHMgLSBhKTtcbiAgICBjb25zdCBhbmdsZVRvRW5kID0gX25vcm1hbGl6ZUFuZ2xlKGUgLSBhKTtcbiAgICBjb25zdCBzdGFydFRvQW5nbGUgPSBfbm9ybWFsaXplQW5nbGUoYSAtIHMpO1xuICAgIGNvbnN0IGVuZFRvQW5nbGUgPSBfbm9ybWFsaXplQW5nbGUoYSAtIGUpO1xuICAgIHJldHVybiBhID09PSBzIHx8IGEgPT09IGUgfHwgc2FtZUFuZ2xlSXNGdWxsQ2lyY2xlICYmIHMgPT09IGUgfHwgYW5nbGVUb1N0YXJ0ID4gYW5nbGVUb0VuZCAmJiBzdGFydFRvQW5nbGUgPCBlbmRUb0FuZ2xlO1xufVxuLyoqXG4gKiBMaW1pdCBgdmFsdWVgIGJldHdlZW4gYG1pbmAgYW5kIGBtYXhgXG4gKiBAcGFyYW0gdmFsdWVcbiAqIEBwYXJhbSBtaW5cbiAqIEBwYXJhbSBtYXhcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2xpbWl0VmFsdWUodmFsdWUsIG1pbiwgbWF4KSB7XG4gICAgcmV0dXJuIE1hdGgubWF4KG1pbiwgTWF0aC5taW4obWF4LCB2YWx1ZSkpO1xufVxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2ludDE2UmFuZ2UodmFsdWUpIHtcbiAgICByZXR1cm4gX2xpbWl0VmFsdWUodmFsdWUsIC0zMjc2OCwgMzI3NjcpO1xufVxuLyoqXG4gKiBAcGFyYW0gdmFsdWVcbiAqIEBwYXJhbSBzdGFydFxuICogQHBhcmFtIGVuZFxuICogQHBhcmFtIFtlcHNpbG9uXVxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfaXNCZXR3ZWVuKHZhbHVlLCBzdGFydCwgZW5kLCBlcHNpbG9uID0gMWUtNikge1xuICAgIHJldHVybiB2YWx1ZSA+PSBNYXRoLm1pbihzdGFydCwgZW5kKSAtIGVwc2lsb24gJiYgdmFsdWUgPD0gTWF0aC5tYXgoc3RhcnQsIGVuZCkgKyBlcHNpbG9uO1xufVxuXG5mdW5jdGlvbiBfbG9va3VwKHRhYmxlLCB2YWx1ZSwgY21wKSB7XG4gICAgY21wID0gY21wIHx8ICgoaW5kZXgpPT50YWJsZVtpbmRleF0gPCB2YWx1ZSk7XG4gICAgbGV0IGhpID0gdGFibGUubGVuZ3RoIC0gMTtcbiAgICBsZXQgbG8gPSAwO1xuICAgIGxldCBtaWQ7XG4gICAgd2hpbGUoaGkgLSBsbyA+IDEpe1xuICAgICAgICBtaWQgPSBsbyArIGhpID4+IDE7XG4gICAgICAgIGlmIChjbXAobWlkKSkge1xuICAgICAgICAgICAgbG8gPSBtaWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoaSA9IG1pZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBsbyxcbiAgICAgICAgaGlcbiAgICB9O1xufVxuLyoqXG4gKiBCaW5hcnkgc2VhcmNoXG4gKiBAcGFyYW0gdGFibGUgLSB0aGUgdGFibGUgc2VhcmNoLiBtdXN0IGJlIHNvcnRlZCFcbiAqIEBwYXJhbSBrZXkgLSBwcm9wZXJ0eSBuYW1lIGZvciB0aGUgdmFsdWUgaW4gZWFjaCBlbnRyeVxuICogQHBhcmFtIHZhbHVlIC0gdmFsdWUgdG8gZmluZFxuICogQHBhcmFtIGxhc3QgLSBsb29rdXAgbGFzdCBpbmRleFxuICogQHByaXZhdGVcbiAqLyBjb25zdCBfbG9va3VwQnlLZXkgPSAodGFibGUsIGtleSwgdmFsdWUsIGxhc3QpPT5fbG9va3VwKHRhYmxlLCB2YWx1ZSwgbGFzdCA/IChpbmRleCk9PntcbiAgICAgICAgY29uc3QgdGkgPSB0YWJsZVtpbmRleF1ba2V5XTtcbiAgICAgICAgcmV0dXJuIHRpIDwgdmFsdWUgfHwgdGkgPT09IHZhbHVlICYmIHRhYmxlW2luZGV4ICsgMV1ba2V5XSA9PT0gdmFsdWU7XG4gICAgfSA6IChpbmRleCk9PnRhYmxlW2luZGV4XVtrZXldIDwgdmFsdWUpO1xuLyoqXG4gKiBSZXZlcnNlIGJpbmFyeSBzZWFyY2hcbiAqIEBwYXJhbSB0YWJsZSAtIHRoZSB0YWJsZSBzZWFyY2guIG11c3QgYmUgc29ydGVkIVxuICogQHBhcmFtIGtleSAtIHByb3BlcnR5IG5hbWUgZm9yIHRoZSB2YWx1ZSBpbiBlYWNoIGVudHJ5XG4gKiBAcGFyYW0gdmFsdWUgLSB2YWx1ZSB0byBmaW5kXG4gKiBAcHJpdmF0ZVxuICovIGNvbnN0IF9ybG9va3VwQnlLZXkgPSAodGFibGUsIGtleSwgdmFsdWUpPT5fbG9va3VwKHRhYmxlLCB2YWx1ZSwgKGluZGV4KT0+dGFibGVbaW5kZXhdW2tleV0gPj0gdmFsdWUpO1xuLyoqXG4gKiBSZXR1cm4gc3Vic2V0IG9mIGB2YWx1ZXNgIGJldHdlZW4gYG1pbmAgYW5kIGBtYXhgIGluY2x1c2l2ZS5cbiAqIFZhbHVlcyBhcmUgYXNzdW1lZCB0byBiZSBpbiBzb3J0ZWQgb3JkZXIuXG4gKiBAcGFyYW0gdmFsdWVzIC0gc29ydGVkIGFycmF5IG9mIHZhbHVlc1xuICogQHBhcmFtIG1pbiAtIG1pbiB2YWx1ZVxuICogQHBhcmFtIG1heCAtIG1heCB2YWx1ZVxuICovIGZ1bmN0aW9uIF9maWx0ZXJCZXR3ZWVuKHZhbHVlcywgbWluLCBtYXgpIHtcbiAgICBsZXQgc3RhcnQgPSAwO1xuICAgIGxldCBlbmQgPSB2YWx1ZXMubGVuZ3RoO1xuICAgIHdoaWxlKHN0YXJ0IDwgZW5kICYmIHZhbHVlc1tzdGFydF0gPCBtaW4pe1xuICAgICAgICBzdGFydCsrO1xuICAgIH1cbiAgICB3aGlsZShlbmQgPiBzdGFydCAmJiB2YWx1ZXNbZW5kIC0gMV0gPiBtYXgpe1xuICAgICAgICBlbmQtLTtcbiAgICB9XG4gICAgcmV0dXJuIHN0YXJ0ID4gMCB8fCBlbmQgPCB2YWx1ZXMubGVuZ3RoID8gdmFsdWVzLnNsaWNlKHN0YXJ0LCBlbmQpIDogdmFsdWVzO1xufVxuY29uc3QgYXJyYXlFdmVudHMgPSBbXG4gICAgJ3B1c2gnLFxuICAgICdwb3AnLFxuICAgICdzaGlmdCcsXG4gICAgJ3NwbGljZScsXG4gICAgJ3Vuc2hpZnQnXG5dO1xuZnVuY3Rpb24gbGlzdGVuQXJyYXlFdmVudHMoYXJyYXksIGxpc3RlbmVyKSB7XG4gICAgaWYgKGFycmF5Ll9jaGFydGpzKSB7XG4gICAgICAgIGFycmF5Ll9jaGFydGpzLmxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYXJyYXksICdfY2hhcnRqcycsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgIGxpc3RlbmVyczogW1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyXG4gICAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBhcnJheUV2ZW50cy5mb3JFYWNoKChrZXkpPT57XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9ICdfb25EYXRhJyArIF9jYXBpdGFsaXplKGtleSk7XG4gICAgICAgIGNvbnN0IGJhc2UgPSBhcnJheVtrZXldO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYXJyYXksIGtleSwge1xuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICB2YWx1ZSAoLi4uYXJncykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IGJhc2UuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICAgICAgYXJyYXkuX2NoYXJ0anMubGlzdGVuZXJzLmZvckVhY2goKG9iamVjdCk9PntcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvYmplY3RbbWV0aG9kXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0W21ldGhvZF0oLi4uYXJncyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHVubGlzdGVuQXJyYXlFdmVudHMoYXJyYXksIGxpc3RlbmVyKSB7XG4gICAgY29uc3Qgc3R1YiA9IGFycmF5Ll9jaGFydGpzO1xuICAgIGlmICghc3R1Yikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGxpc3RlbmVycyA9IHN0dWIubGlzdGVuZXJzO1xuICAgIGNvbnN0IGluZGV4ID0gbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICAgIGlmIChsaXN0ZW5lcnMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGFycmF5RXZlbnRzLmZvckVhY2goKGtleSk9PntcbiAgICAgICAgZGVsZXRlIGFycmF5W2tleV07XG4gICAgfSk7XG4gICAgZGVsZXRlIGFycmF5Ll9jaGFydGpzO1xufVxuLyoqXG4gKiBAcGFyYW0gaXRlbXNcbiAqLyBmdW5jdGlvbiBfYXJyYXlVbmlxdWUoaXRlbXMpIHtcbiAgICBjb25zdCBzZXQgPSBuZXcgU2V0KGl0ZW1zKTtcbiAgICBpZiAoc2V0LnNpemUgPT09IGl0ZW1zLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gaXRlbXM7XG4gICAgfVxuICAgIHJldHVybiBBcnJheS5mcm9tKHNldCk7XG59XG5cbmZ1bmN0aW9uIGZvbnRTdHJpbmcocGl4ZWxTaXplLCBmb250U3R5bGUsIGZvbnRGYW1pbHkpIHtcbiAgICByZXR1cm4gZm9udFN0eWxlICsgJyAnICsgcGl4ZWxTaXplICsgJ3B4ICcgKyBmb250RmFtaWx5O1xufVxuLyoqXG4qIFJlcXVlc3QgYW5pbWF0aW9uIHBvbHlmaWxsXG4qLyBjb25zdCByZXF1ZXN0QW5pbUZyYW1lID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xufSgpO1xuLyoqXG4gKiBUaHJvdHRsZXMgY2FsbGluZyBgZm5gIG9uY2UgcGVyIGFuaW1hdGlvbiBmcmFtZVxuICogTGF0ZXN0IGFyZ3VtZW50cyBhcmUgdXNlZCBvbiB0aGUgYWN0dWFsIGNhbGxcbiAqLyBmdW5jdGlvbiB0aHJvdHRsZWQoZm4sIHRoaXNBcmcpIHtcbiAgICBsZXQgYXJnc1RvVXNlID0gW107XG4gICAgbGV0IHRpY2tpbmcgPSBmYWxzZTtcbiAgICByZXR1cm4gZnVuY3Rpb24oLi4uYXJncykge1xuICAgICAgICAvLyBTYXZlIHRoZSBhcmdzIGZvciB1c2UgbGF0ZXJcbiAgICAgICAgYXJnc1RvVXNlID0gYXJncztcbiAgICAgICAgaWYgKCF0aWNraW5nKSB7XG4gICAgICAgICAgICB0aWNraW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHJlcXVlc3RBbmltRnJhbWUuY2FsbCh3aW5kb3csICgpPT57XG4gICAgICAgICAgICAgICAgdGlja2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3NUb1VzZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG59XG4vKipcbiAqIERlYm91bmNlcyBjYWxsaW5nIGBmbmAgZm9yIGBkZWxheWAgbXNcbiAqLyBmdW5jdGlvbiBkZWJvdW5jZShmbiwgZGVsYXkpIHtcbiAgICBsZXQgdGltZW91dDtcbiAgICByZXR1cm4gZnVuY3Rpb24oLi4uYXJncykge1xuICAgICAgICBpZiAoZGVsYXkpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZuLCBkZWxheSwgYXJncyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmbi5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVsYXk7XG4gICAgfTtcbn1cbi8qKlxuICogQ29udmVydHMgJ3N0YXJ0JyB0byAnbGVmdCcsICdlbmQnIHRvICdyaWdodCcgYW5kIG90aGVycyB0byAnY2VudGVyJ1xuICogQHByaXZhdGVcbiAqLyBjb25zdCBfdG9MZWZ0UmlnaHRDZW50ZXIgPSAoYWxpZ24pPT5hbGlnbiA9PT0gJ3N0YXJ0JyA/ICdsZWZ0JyA6IGFsaWduID09PSAnZW5kJyA/ICdyaWdodCcgOiAnY2VudGVyJztcbi8qKlxuICogUmV0dXJucyBgc3RhcnRgLCBgZW5kYCBvciBgKHN0YXJ0ICsgZW5kKSAvIDJgIGRlcGVuZGluZyBvbiBgYWxpZ25gLiBEZWZhdWx0cyB0byBgY2VudGVyYFxuICogQHByaXZhdGVcbiAqLyBjb25zdCBfYWxpZ25TdGFydEVuZCA9IChhbGlnbiwgc3RhcnQsIGVuZCk9PmFsaWduID09PSAnc3RhcnQnID8gc3RhcnQgOiBhbGlnbiA9PT0gJ2VuZCcgPyBlbmQgOiAoc3RhcnQgKyBlbmQpIC8gMjtcbi8qKlxuICogUmV0dXJucyBgbGVmdGAsIGByaWdodGAgb3IgYChsZWZ0ICsgcmlnaHQpIC8gMmAgZGVwZW5kaW5nIG9uIGBhbGlnbmAuIERlZmF1bHRzIHRvIGBsZWZ0YFxuICogQHByaXZhdGVcbiAqLyBjb25zdCBfdGV4dFggPSAoYWxpZ24sIGxlZnQsIHJpZ2h0LCBydGwpPT57XG4gICAgY29uc3QgY2hlY2sgPSBydGwgPyAnbGVmdCcgOiAncmlnaHQnO1xuICAgIHJldHVybiBhbGlnbiA9PT0gY2hlY2sgPyByaWdodCA6IGFsaWduID09PSAnY2VudGVyJyA/IChsZWZ0ICsgcmlnaHQpIC8gMiA6IGxlZnQ7XG59O1xuLyoqXG4gKiBSZXR1cm4gc3RhcnQgYW5kIGNvdW50IG9mIHZpc2libGUgcG9pbnRzLlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfZ2V0U3RhcnRBbmRDb3VudE9mVmlzaWJsZVBvaW50cyhtZXRhLCBwb2ludHMsIGFuaW1hdGlvbnNEaXNhYmxlZCkge1xuICAgIGNvbnN0IHBvaW50Q291bnQgPSBwb2ludHMubGVuZ3RoO1xuICAgIGxldCBzdGFydCA9IDA7XG4gICAgbGV0IGNvdW50ID0gcG9pbnRDb3VudDtcbiAgICBpZiAobWV0YS5fc29ydGVkKSB7XG4gICAgICAgIGNvbnN0IHsgaVNjYWxlICwgX3BhcnNlZCAgfSA9IG1ldGE7XG4gICAgICAgIGNvbnN0IGF4aXMgPSBpU2NhbGUuYXhpcztcbiAgICAgICAgY29uc3QgeyBtaW4gLCBtYXggLCBtaW5EZWZpbmVkICwgbWF4RGVmaW5lZCAgfSA9IGlTY2FsZS5nZXRVc2VyQm91bmRzKCk7XG4gICAgICAgIGlmIChtaW5EZWZpbmVkKSB7XG4gICAgICAgICAgICBzdGFydCA9IF9saW1pdFZhbHVlKE1hdGgubWluKC8vIEB0cy1leHBlY3QtZXJyb3IgTmVlZCB0byB0eXBlIF9wYXJzZWRcbiAgICAgICAgICAgIF9sb29rdXBCeUtleShfcGFyc2VkLCBheGlzLCBtaW4pLmxvLCAvLyBAdHMtZXhwZWN0LWVycm9yIE5lZWQgdG8gZml4IHR5cGVzIG9uIF9sb29rdXBCeUtleVxuICAgICAgICAgICAgYW5pbWF0aW9uc0Rpc2FibGVkID8gcG9pbnRDb3VudCA6IF9sb29rdXBCeUtleShwb2ludHMsIGF4aXMsIGlTY2FsZS5nZXRQaXhlbEZvclZhbHVlKG1pbikpLmxvKSwgMCwgcG9pbnRDb3VudCAtIDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXhEZWZpbmVkKSB7XG4gICAgICAgICAgICBjb3VudCA9IF9saW1pdFZhbHVlKE1hdGgubWF4KC8vIEB0cy1leHBlY3QtZXJyb3IgTmVlZCB0byB0eXBlIF9wYXJzZWRcbiAgICAgICAgICAgIF9sb29rdXBCeUtleShfcGFyc2VkLCBpU2NhbGUuYXhpcywgbWF4LCB0cnVlKS5oaSArIDEsIC8vIEB0cy1leHBlY3QtZXJyb3IgTmVlZCB0byBmaXggdHlwZXMgb24gX2xvb2t1cEJ5S2V5XG4gICAgICAgICAgICBhbmltYXRpb25zRGlzYWJsZWQgPyAwIDogX2xvb2t1cEJ5S2V5KHBvaW50cywgYXhpcywgaVNjYWxlLmdldFBpeGVsRm9yVmFsdWUobWF4KSwgdHJ1ZSkuaGkgKyAxKSwgc3RhcnQsIHBvaW50Q291bnQpIC0gc3RhcnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb3VudCA9IHBvaW50Q291bnQgLSBzdGFydDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydCxcbiAgICAgICAgY291bnRcbiAgICB9O1xufVxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIHNjYWxlIHJhbmdlcyBoYXZlIGNoYW5nZWQuXG4gKiBAcGFyYW0ge29iamVjdH0gbWV0YSAtIGRhdGFzZXQgbWV0YS5cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfc2NhbGVSYW5nZXNDaGFuZ2VkKG1ldGEpIHtcbiAgICBjb25zdCB7IHhTY2FsZSAsIHlTY2FsZSAsIF9zY2FsZVJhbmdlcyAgfSA9IG1ldGE7XG4gICAgY29uc3QgbmV3UmFuZ2VzID0ge1xuICAgICAgICB4bWluOiB4U2NhbGUubWluLFxuICAgICAgICB4bWF4OiB4U2NhbGUubWF4LFxuICAgICAgICB5bWluOiB5U2NhbGUubWluLFxuICAgICAgICB5bWF4OiB5U2NhbGUubWF4XG4gICAgfTtcbiAgICBpZiAoIV9zY2FsZVJhbmdlcykge1xuICAgICAgICBtZXRhLl9zY2FsZVJhbmdlcyA9IG5ld1JhbmdlcztcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNvbnN0IGNoYW5nZWQgPSBfc2NhbGVSYW5nZXMueG1pbiAhPT0geFNjYWxlLm1pbiB8fCBfc2NhbGVSYW5nZXMueG1heCAhPT0geFNjYWxlLm1heCB8fCBfc2NhbGVSYW5nZXMueW1pbiAhPT0geVNjYWxlLm1pbiB8fCBfc2NhbGVSYW5nZXMueW1heCAhPT0geVNjYWxlLm1heDtcbiAgICBPYmplY3QuYXNzaWduKF9zY2FsZVJhbmdlcywgbmV3UmFuZ2VzKTtcbiAgICByZXR1cm4gY2hhbmdlZDtcbn1cblxuY29uc3QgYXRFZGdlID0gKHQpPT50ID09PSAwIHx8IHQgPT09IDE7XG5jb25zdCBlbGFzdGljSW4gPSAodCwgcywgcCk9Pi0oTWF0aC5wb3coMiwgMTAgKiAodCAtPSAxKSkgKiBNYXRoLnNpbigodCAtIHMpICogVEFVIC8gcCkpO1xuY29uc3QgZWxhc3RpY091dCA9ICh0LCBzLCBwKT0+TWF0aC5wb3coMiwgLTEwICogdCkgKiBNYXRoLnNpbigodCAtIHMpICogVEFVIC8gcCkgKyAxO1xuLyoqXG4gKiBFYXNpbmcgZnVuY3Rpb25zIGFkYXB0ZWQgZnJvbSBSb2JlcnQgUGVubmVyJ3MgZWFzaW5nIGVxdWF0aW9ucy5cbiAqIEBuYW1lc3BhY2UgQ2hhcnQuaGVscGVycy5lYXNpbmcuZWZmZWN0c1xuICogQHNlZSBodHRwOi8vd3d3LnJvYmVydHBlbm5lci5jb20vZWFzaW5nL1xuICovIGNvbnN0IGVmZmVjdHMgPSB7XG4gICAgbGluZWFyOiAodCk9PnQsXG4gICAgZWFzZUluUXVhZDogKHQpPT50ICogdCxcbiAgICBlYXNlT3V0UXVhZDogKHQpPT4tdCAqICh0IC0gMiksXG4gICAgZWFzZUluT3V0UXVhZDogKHQpPT4odCAvPSAwLjUpIDwgMSA/IDAuNSAqIHQgKiB0IDogLTAuNSAqICgtLXQgKiAodCAtIDIpIC0gMSksXG4gICAgZWFzZUluQ3ViaWM6ICh0KT0+dCAqIHQgKiB0LFxuICAgIGVhc2VPdXRDdWJpYzogKHQpPT4odCAtPSAxKSAqIHQgKiB0ICsgMSxcbiAgICBlYXNlSW5PdXRDdWJpYzogKHQpPT4odCAvPSAwLjUpIDwgMSA/IDAuNSAqIHQgKiB0ICogdCA6IDAuNSAqICgodCAtPSAyKSAqIHQgKiB0ICsgMiksXG4gICAgZWFzZUluUXVhcnQ6ICh0KT0+dCAqIHQgKiB0ICogdCxcbiAgICBlYXNlT3V0UXVhcnQ6ICh0KT0+LSgodCAtPSAxKSAqIHQgKiB0ICogdCAtIDEpLFxuICAgIGVhc2VJbk91dFF1YXJ0OiAodCk9Pih0IC89IDAuNSkgPCAxID8gMC41ICogdCAqIHQgKiB0ICogdCA6IC0wLjUgKiAoKHQgLT0gMikgKiB0ICogdCAqIHQgLSAyKSxcbiAgICBlYXNlSW5RdWludDogKHQpPT50ICogdCAqIHQgKiB0ICogdCxcbiAgICBlYXNlT3V0UXVpbnQ6ICh0KT0+KHQgLT0gMSkgKiB0ICogdCAqIHQgKiB0ICsgMSxcbiAgICBlYXNlSW5PdXRRdWludDogKHQpPT4odCAvPSAwLjUpIDwgMSA/IDAuNSAqIHQgKiB0ICogdCAqIHQgKiB0IDogMC41ICogKCh0IC09IDIpICogdCAqIHQgKiB0ICogdCArIDIpLFxuICAgIGVhc2VJblNpbmU6ICh0KT0+LU1hdGguY29zKHQgKiBIQUxGX1BJKSArIDEsXG4gICAgZWFzZU91dFNpbmU6ICh0KT0+TWF0aC5zaW4odCAqIEhBTEZfUEkpLFxuICAgIGVhc2VJbk91dFNpbmU6ICh0KT0+LTAuNSAqIChNYXRoLmNvcyhQSSAqIHQpIC0gMSksXG4gICAgZWFzZUluRXhwbzogKHQpPT50ID09PSAwID8gMCA6IE1hdGgucG93KDIsIDEwICogKHQgLSAxKSksXG4gICAgZWFzZU91dEV4cG86ICh0KT0+dCA9PT0gMSA/IDEgOiAtTWF0aC5wb3coMiwgLTEwICogdCkgKyAxLFxuICAgIGVhc2VJbk91dEV4cG86ICh0KT0+YXRFZGdlKHQpID8gdCA6IHQgPCAwLjUgPyAwLjUgKiBNYXRoLnBvdygyLCAxMCAqICh0ICogMiAtIDEpKSA6IDAuNSAqICgtTWF0aC5wb3coMiwgLTEwICogKHQgKiAyIC0gMSkpICsgMiksXG4gICAgZWFzZUluQ2lyYzogKHQpPT50ID49IDEgPyB0IDogLShNYXRoLnNxcnQoMSAtIHQgKiB0KSAtIDEpLFxuICAgIGVhc2VPdXRDaXJjOiAodCk9Pk1hdGguc3FydCgxIC0gKHQgLT0gMSkgKiB0KSxcbiAgICBlYXNlSW5PdXRDaXJjOiAodCk9Pih0IC89IDAuNSkgPCAxID8gLTAuNSAqIChNYXRoLnNxcnQoMSAtIHQgKiB0KSAtIDEpIDogMC41ICogKE1hdGguc3FydCgxIC0gKHQgLT0gMikgKiB0KSArIDEpLFxuICAgIGVhc2VJbkVsYXN0aWM6ICh0KT0+YXRFZGdlKHQpID8gdCA6IGVsYXN0aWNJbih0LCAwLjA3NSwgMC4zKSxcbiAgICBlYXNlT3V0RWxhc3RpYzogKHQpPT5hdEVkZ2UodCkgPyB0IDogZWxhc3RpY091dCh0LCAwLjA3NSwgMC4zKSxcbiAgICBlYXNlSW5PdXRFbGFzdGljICh0KSB7XG4gICAgICAgIGNvbnN0IHMgPSAwLjExMjU7XG4gICAgICAgIGNvbnN0IHAgPSAwLjQ1O1xuICAgICAgICByZXR1cm4gYXRFZGdlKHQpID8gdCA6IHQgPCAwLjUgPyAwLjUgKiBlbGFzdGljSW4odCAqIDIsIHMsIHApIDogMC41ICsgMC41ICogZWxhc3RpY091dCh0ICogMiAtIDEsIHMsIHApO1xuICAgIH0sXG4gICAgZWFzZUluQmFjayAodCkge1xuICAgICAgICBjb25zdCBzID0gMS43MDE1ODtcbiAgICAgICAgcmV0dXJuIHQgKiB0ICogKChzICsgMSkgKiB0IC0gcyk7XG4gICAgfSxcbiAgICBlYXNlT3V0QmFjayAodCkge1xuICAgICAgICBjb25zdCBzID0gMS43MDE1ODtcbiAgICAgICAgcmV0dXJuICh0IC09IDEpICogdCAqICgocyArIDEpICogdCArIHMpICsgMTtcbiAgICB9LFxuICAgIGVhc2VJbk91dEJhY2sgKHQpIHtcbiAgICAgICAgbGV0IHMgPSAxLjcwMTU4O1xuICAgICAgICBpZiAoKHQgLz0gMC41KSA8IDEpIHtcbiAgICAgICAgICAgIHJldHVybiAwLjUgKiAodCAqIHQgKiAoKChzICo9IDEuNTI1KSArIDEpICogdCAtIHMpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMC41ICogKCh0IC09IDIpICogdCAqICgoKHMgKj0gMS41MjUpICsgMSkgKiB0ICsgcykgKyAyKTtcbiAgICB9LFxuICAgIGVhc2VJbkJvdW5jZTogKHQpPT4xIC0gZWZmZWN0cy5lYXNlT3V0Qm91bmNlKDEgLSB0KSxcbiAgICBlYXNlT3V0Qm91bmNlICh0KSB7XG4gICAgICAgIGNvbnN0IG0gPSA3LjU2MjU7XG4gICAgICAgIGNvbnN0IGQgPSAyLjc1O1xuICAgICAgICBpZiAodCA8IDEgLyBkKSB7XG4gICAgICAgICAgICByZXR1cm4gbSAqIHQgKiB0O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0IDwgMiAvIGQpIHtcbiAgICAgICAgICAgIHJldHVybiBtICogKHQgLT0gMS41IC8gZCkgKiB0ICsgMC43NTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodCA8IDIuNSAvIGQpIHtcbiAgICAgICAgICAgIHJldHVybiBtICogKHQgLT0gMi4yNSAvIGQpICogdCArIDAuOTM3NTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbSAqICh0IC09IDIuNjI1IC8gZCkgKiB0ICsgMC45ODQzNzU7XG4gICAgfSxcbiAgICBlYXNlSW5PdXRCb3VuY2U6ICh0KT0+dCA8IDAuNSA/IGVmZmVjdHMuZWFzZUluQm91bmNlKHQgKiAyKSAqIDAuNSA6IGVmZmVjdHMuZWFzZU91dEJvdW5jZSh0ICogMiAtIDEpICogMC41ICsgMC41XG59O1xuXG5mdW5jdGlvbiBpc1BhdHRlcm5PckdyYWRpZW50KHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgIHJldHVybiB0eXBlID09PSAnW29iamVjdCBDYW52YXNQYXR0ZXJuXScgfHwgdHlwZSA9PT0gJ1tvYmplY3QgQ2FudmFzR3JhZGllbnRdJztcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gY29sb3IodmFsdWUpIHtcbiAgICByZXR1cm4gaXNQYXR0ZXJuT3JHcmFkaWVudCh2YWx1ZSkgPyB2YWx1ZSA6IG5ldyBDb2xvcih2YWx1ZSk7XG59XG5mdW5jdGlvbiBnZXRIb3ZlckNvbG9yKHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzUGF0dGVybk9yR3JhZGllbnQodmFsdWUpID8gdmFsdWUgOiBuZXcgQ29sb3IodmFsdWUpLnNhdHVyYXRlKDAuNSkuZGFya2VuKDAuMSkuaGV4U3RyaW5nKCk7XG59XG5cbmNvbnN0IG51bWJlcnMgPSBbXG4gICAgJ3gnLFxuICAgICd5JyxcbiAgICAnYm9yZGVyV2lkdGgnLFxuICAgICdyYWRpdXMnLFxuICAgICd0ZW5zaW9uJ1xuXTtcbmNvbnN0IGNvbG9ycyA9IFtcbiAgICAnY29sb3InLFxuICAgICdib3JkZXJDb2xvcicsXG4gICAgJ2JhY2tncm91bmRDb2xvcidcbl07XG5mdW5jdGlvbiBhcHBseUFuaW1hdGlvbnNEZWZhdWx0cyhkZWZhdWx0cykge1xuICAgIGRlZmF1bHRzLnNldCgnYW5pbWF0aW9uJywge1xuICAgICAgICBkZWxheTogdW5kZWZpbmVkLFxuICAgICAgICBkdXJhdGlvbjogMTAwMCxcbiAgICAgICAgZWFzaW5nOiAnZWFzZU91dFF1YXJ0JyxcbiAgICAgICAgZm46IHVuZGVmaW5lZCxcbiAgICAgICAgZnJvbTogdW5kZWZpbmVkLFxuICAgICAgICBsb29wOiB1bmRlZmluZWQsXG4gICAgICAgIHRvOiB1bmRlZmluZWQsXG4gICAgICAgIHR5cGU6IHVuZGVmaW5lZFxuICAgIH0pO1xuICAgIGRlZmF1bHRzLmRlc2NyaWJlKCdhbmltYXRpb24nLCB7XG4gICAgICAgIF9mYWxsYmFjazogZmFsc2UsXG4gICAgICAgIF9pbmRleGFibGU6IGZhbHNlLFxuICAgICAgICBfc2NyaXB0YWJsZTogKG5hbWUpPT5uYW1lICE9PSAnb25Qcm9ncmVzcycgJiYgbmFtZSAhPT0gJ29uQ29tcGxldGUnICYmIG5hbWUgIT09ICdmbidcbiAgICB9KTtcbiAgICBkZWZhdWx0cy5zZXQoJ2FuaW1hdGlvbnMnLCB7XG4gICAgICAgIGNvbG9yczoge1xuICAgICAgICAgICAgdHlwZTogJ2NvbG9yJyxcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IGNvbG9yc1xuICAgICAgICB9LFxuICAgICAgICBudW1iZXJzOiB7XG4gICAgICAgICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IG51bWJlcnNcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGRlZmF1bHRzLmRlc2NyaWJlKCdhbmltYXRpb25zJywge1xuICAgICAgICBfZmFsbGJhY2s6ICdhbmltYXRpb24nXG4gICAgfSk7XG4gICAgZGVmYXVsdHMuc2V0KCd0cmFuc2l0aW9ucycsIHtcbiAgICAgICAgYWN0aXZlOiB7XG4gICAgICAgICAgICBhbmltYXRpb246IHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogNDAwXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlc2l6ZToge1xuICAgICAgICAgICAgYW5pbWF0aW9uOiB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc2hvdzoge1xuICAgICAgICAgICAgYW5pbWF0aW9uczoge1xuICAgICAgICAgICAgICAgIGNvbG9yczoge1xuICAgICAgICAgICAgICAgICAgICBmcm9tOiAndHJhbnNwYXJlbnQnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB2aXNpYmxlOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGhpZGU6IHtcbiAgICAgICAgICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBjb2xvcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgdG86ICd0cmFuc3BhcmVudCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHZpc2libGU6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgICAgICAgICAgICAgICBlYXNpbmc6ICdsaW5lYXInLFxuICAgICAgICAgICAgICAgICAgICBmbjogKHYpPT52IHwgMFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBhcHBseUxheW91dHNEZWZhdWx0cyhkZWZhdWx0cykge1xuICAgIGRlZmF1bHRzLnNldCgnbGF5b3V0Jywge1xuICAgICAgICBhdXRvUGFkZGluZzogdHJ1ZSxcbiAgICAgICAgcGFkZGluZzoge1xuICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgICAgICBib3R0b206IDAsXG4gICAgICAgICAgICBsZWZ0OiAwXG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuY29uc3QgaW50bENhY2hlID0gbmV3IE1hcCgpO1xuZnVuY3Rpb24gZ2V0TnVtYmVyRm9ybWF0KGxvY2FsZSwgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gbG9jYWxlICsgSlNPTi5zdHJpbmdpZnkob3B0aW9ucyk7XG4gICAgbGV0IGZvcm1hdHRlciA9IGludGxDYWNoZS5nZXQoY2FjaGVLZXkpO1xuICAgIGlmICghZm9ybWF0dGVyKSB7XG4gICAgICAgIGZvcm1hdHRlciA9IG5ldyBJbnRsLk51bWJlckZvcm1hdChsb2NhbGUsIG9wdGlvbnMpO1xuICAgICAgICBpbnRsQ2FjaGUuc2V0KGNhY2hlS2V5LCBmb3JtYXR0ZXIpO1xuICAgIH1cbiAgICByZXR1cm4gZm9ybWF0dGVyO1xufVxuZnVuY3Rpb24gZm9ybWF0TnVtYmVyKG51bSwgbG9jYWxlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGdldE51bWJlckZvcm1hdChsb2NhbGUsIG9wdGlvbnMpLmZvcm1hdChudW0pO1xufVxuXG5jb25zdCBmb3JtYXR0ZXJzID0ge1xuIHZhbHVlcyAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpID8gIHZhbHVlIDogJycgKyB2YWx1ZTtcbiAgICB9LFxuIG51bWVyaWMgKHRpY2tWYWx1ZSwgaW5kZXgsIHRpY2tzKSB7XG4gICAgICAgIGlmICh0aWNrVmFsdWUgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAnMCc7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbG9jYWxlID0gdGhpcy5jaGFydC5vcHRpb25zLmxvY2FsZTtcbiAgICAgICAgbGV0IG5vdGF0aW9uO1xuICAgICAgICBsZXQgZGVsdGEgPSB0aWNrVmFsdWU7XG4gICAgICAgIGlmICh0aWNrcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBjb25zdCBtYXhUaWNrID0gTWF0aC5tYXgoTWF0aC5hYnModGlja3NbMF0udmFsdWUpLCBNYXRoLmFicyh0aWNrc1t0aWNrcy5sZW5ndGggLSAxXS52YWx1ZSkpO1xuICAgICAgICAgICAgaWYgKG1heFRpY2sgPCAxZS00IHx8IG1heFRpY2sgPiAxZSsxNSkge1xuICAgICAgICAgICAgICAgIG5vdGF0aW9uID0gJ3NjaWVudGlmaWMnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVsdGEgPSBjYWxjdWxhdGVEZWx0YSh0aWNrVmFsdWUsIHRpY2tzKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsb2dEZWx0YSA9IGxvZzEwKE1hdGguYWJzKGRlbHRhKSk7XG4gICAgICAgIGNvbnN0IG51bURlY2ltYWwgPSBpc05hTihsb2dEZWx0YSkgPyAxIDogTWF0aC5tYXgoTWF0aC5taW4oLTEgKiBNYXRoLmZsb29yKGxvZ0RlbHRhKSwgMjApLCAwKTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIG5vdGF0aW9uLFxuICAgICAgICAgICAgbWluaW11bUZyYWN0aW9uRGlnaXRzOiBudW1EZWNpbWFsLFxuICAgICAgICAgICAgbWF4aW11bUZyYWN0aW9uRGlnaXRzOiBudW1EZWNpbWFsXG4gICAgICAgIH07XG4gICAgICAgIE9iamVjdC5hc3NpZ24ob3B0aW9ucywgdGhpcy5vcHRpb25zLnRpY2tzLmZvcm1hdCk7XG4gICAgICAgIHJldHVybiBmb3JtYXROdW1iZXIodGlja1ZhbHVlLCBsb2NhbGUsIG9wdGlvbnMpO1xuICAgIH0sXG4gbG9nYXJpdGhtaWMgKHRpY2tWYWx1ZSwgaW5kZXgsIHRpY2tzKSB7XG4gICAgICAgIGlmICh0aWNrVmFsdWUgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAnMCc7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVtYWluID0gdGlja3NbaW5kZXhdLnNpZ25pZmljYW5kIHx8IHRpY2tWYWx1ZSAvIE1hdGgucG93KDEwLCBNYXRoLmZsb29yKGxvZzEwKHRpY2tWYWx1ZSkpKTtcbiAgICAgICAgaWYgKFtcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAyLFxuICAgICAgICAgICAgMyxcbiAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICAgIDE1XG4gICAgICAgIF0uaW5jbHVkZXMocmVtYWluKSB8fCBpbmRleCA+IDAuOCAqIHRpY2tzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdHRlcnMubnVtZXJpYy5jYWxsKHRoaXMsIHRpY2tWYWx1ZSwgaW5kZXgsIHRpY2tzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxufTtcbmZ1bmN0aW9uIGNhbGN1bGF0ZURlbHRhKHRpY2tWYWx1ZSwgdGlja3MpIHtcbiAgICBsZXQgZGVsdGEgPSB0aWNrcy5sZW5ndGggPiAzID8gdGlja3NbMl0udmFsdWUgLSB0aWNrc1sxXS52YWx1ZSA6IHRpY2tzWzFdLnZhbHVlIC0gdGlja3NbMF0udmFsdWU7XG4gICAgaWYgKE1hdGguYWJzKGRlbHRhKSA+PSAxICYmIHRpY2tWYWx1ZSAhPT0gTWF0aC5mbG9vcih0aWNrVmFsdWUpKSB7XG4gICAgICAgIGRlbHRhID0gdGlja1ZhbHVlIC0gTWF0aC5mbG9vcih0aWNrVmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gZGVsdGE7XG59XG4gdmFyIFRpY2tzID0ge1xuICAgIGZvcm1hdHRlcnNcbn07XG5cbmZ1bmN0aW9uIGFwcGx5U2NhbGVEZWZhdWx0cyhkZWZhdWx0cykge1xuICAgIGRlZmF1bHRzLnNldCgnc2NhbGUnLCB7XG4gICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgIG9mZnNldDogZmFsc2UsXG4gICAgICAgIHJldmVyc2U6IGZhbHNlLFxuICAgICAgICBiZWdpbkF0WmVybzogZmFsc2UsXG4gYm91bmRzOiAndGlja3MnLFxuIGdyYWNlOiAwLFxuICAgICAgICBncmlkOiB7XG4gICAgICAgICAgICBkaXNwbGF5OiB0cnVlLFxuICAgICAgICAgICAgbGluZVdpZHRoOiAxLFxuICAgICAgICAgICAgZHJhd09uQ2hhcnRBcmVhOiB0cnVlLFxuICAgICAgICAgICAgZHJhd1RpY2tzOiB0cnVlLFxuICAgICAgICAgICAgdGlja0xlbmd0aDogOCxcbiAgICAgICAgICAgIHRpY2tXaWR0aDogKF9jdHgsIG9wdGlvbnMpPT5vcHRpb25zLmxpbmVXaWR0aCxcbiAgICAgICAgICAgIHRpY2tDb2xvcjogKF9jdHgsIG9wdGlvbnMpPT5vcHRpb25zLmNvbG9yLFxuICAgICAgICAgICAgb2Zmc2V0OiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBib3JkZXI6IHtcbiAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgICAgICBkYXNoOiBbXSxcbiAgICAgICAgICAgIGRhc2hPZmZzZXQ6IDAuMCxcbiAgICAgICAgICAgIHdpZHRoOiAxXG4gICAgICAgIH0sXG4gICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICAgICAgICAgIHRleHQ6ICcnLFxuICAgICAgICAgICAgcGFkZGluZzoge1xuICAgICAgICAgICAgICAgIHRvcDogNCxcbiAgICAgICAgICAgICAgICBib3R0b206IDRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgIG1pblJvdGF0aW9uOiAwLFxuICAgICAgICAgICAgbWF4Um90YXRpb246IDUwLFxuICAgICAgICAgICAgbWlycm9yOiBmYWxzZSxcbiAgICAgICAgICAgIHRleHRTdHJva2VXaWR0aDogMCxcbiAgICAgICAgICAgIHRleHRTdHJva2VDb2xvcjogJycsXG4gICAgICAgICAgICBwYWRkaW5nOiAzLFxuICAgICAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgICAgIGF1dG9Ta2lwOiB0cnVlLFxuICAgICAgICAgICAgYXV0b1NraXBQYWRkaW5nOiAzLFxuICAgICAgICAgICAgbGFiZWxPZmZzZXQ6IDAsXG4gICAgICAgICAgICBjYWxsYmFjazogVGlja3MuZm9ybWF0dGVycy52YWx1ZXMsXG4gICAgICAgICAgICBtaW5vcjoge30sXG4gICAgICAgICAgICBtYWpvcjoge30sXG4gICAgICAgICAgICBhbGlnbjogJ2NlbnRlcicsXG4gICAgICAgICAgICBjcm9zc0FsaWduOiAnbmVhcicsXG4gICAgICAgICAgICBzaG93TGFiZWxCYWNrZHJvcDogZmFsc2UsXG4gICAgICAgICAgICBiYWNrZHJvcENvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjc1KScsXG4gICAgICAgICAgICBiYWNrZHJvcFBhZGRpbmc6IDJcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGRlZmF1bHRzLnJvdXRlKCdzY2FsZS50aWNrcycsICdjb2xvcicsICcnLCAnY29sb3InKTtcbiAgICBkZWZhdWx0cy5yb3V0ZSgnc2NhbGUuZ3JpZCcsICdjb2xvcicsICcnLCAnYm9yZGVyQ29sb3InKTtcbiAgICBkZWZhdWx0cy5yb3V0ZSgnc2NhbGUuYm9yZGVyJywgJ2NvbG9yJywgJycsICdib3JkZXJDb2xvcicpO1xuICAgIGRlZmF1bHRzLnJvdXRlKCdzY2FsZS50aXRsZScsICdjb2xvcicsICcnLCAnY29sb3InKTtcbiAgICBkZWZhdWx0cy5kZXNjcmliZSgnc2NhbGUnLCB7XG4gICAgICAgIF9mYWxsYmFjazogZmFsc2UsXG4gICAgICAgIF9zY3JpcHRhYmxlOiAobmFtZSk9PiFuYW1lLnN0YXJ0c1dpdGgoJ2JlZm9yZScpICYmICFuYW1lLnN0YXJ0c1dpdGgoJ2FmdGVyJykgJiYgbmFtZSAhPT0gJ2NhbGxiYWNrJyAmJiBuYW1lICE9PSAncGFyc2VyJyxcbiAgICAgICAgX2luZGV4YWJsZTogKG5hbWUpPT5uYW1lICE9PSAnYm9yZGVyRGFzaCcgJiYgbmFtZSAhPT0gJ3RpY2tCb3JkZXJEYXNoJyAmJiBuYW1lICE9PSAnZGFzaCdcbiAgICB9KTtcbiAgICBkZWZhdWx0cy5kZXNjcmliZSgnc2NhbGVzJywge1xuICAgICAgICBfZmFsbGJhY2s6ICdzY2FsZSdcbiAgICB9KTtcbiAgICBkZWZhdWx0cy5kZXNjcmliZSgnc2NhbGUudGlja3MnLCB7XG4gICAgICAgIF9zY3JpcHRhYmxlOiAobmFtZSk9Pm5hbWUgIT09ICdiYWNrZHJvcFBhZGRpbmcnICYmIG5hbWUgIT09ICdjYWxsYmFjaycsXG4gICAgICAgIF9pbmRleGFibGU6IChuYW1lKT0+bmFtZSAhPT0gJ2JhY2tkcm9wUGFkZGluZydcbiAgICB9KTtcbn1cblxuY29uc3Qgb3ZlcnJpZGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmNvbnN0IGRlc2NyaXB0b3JzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBmdW5jdGlvbiBnZXRTY29wZSQxKG5vZGUsIGtleSkge1xuICAgIGlmICgha2V5KSB7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgICBjb25zdCBrZXlzID0ga2V5LnNwbGl0KCcuJyk7XG4gICAgZm9yKGxldCBpID0gMCwgbiA9IGtleXMubGVuZ3RoOyBpIDwgbjsgKytpKXtcbiAgICAgICAgY29uc3QgayA9IGtleXNbaV07XG4gICAgICAgIG5vZGUgPSBub2RlW2tdIHx8IChub2RlW2tdID0gT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gICAgfVxuICAgIHJldHVybiBub2RlO1xufVxuZnVuY3Rpb24gc2V0KHJvb3QsIHNjb3BlLCB2YWx1ZXMpIHtcbiAgICBpZiAodHlwZW9mIHNjb3BlID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gbWVyZ2UoZ2V0U2NvcGUkMShyb290LCBzY29wZSksIHZhbHVlcyk7XG4gICAgfVxuICAgIHJldHVybiBtZXJnZShnZXRTY29wZSQxKHJvb3QsICcnKSwgc2NvcGUpO1xufVxuIGNsYXNzIERlZmF1bHRzIHtcbiAgICBjb25zdHJ1Y3RvcihfZGVzY3JpcHRvcnMsIF9hcHBsaWVycyl7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmJhY2tncm91bmRDb2xvciA9ICdyZ2JhKDAsMCwwLDAuMSknO1xuICAgICAgICB0aGlzLmJvcmRlckNvbG9yID0gJ3JnYmEoMCwwLDAsMC4xKSc7XG4gICAgICAgIHRoaXMuY29sb3IgPSAnIzY2Nic7XG4gICAgICAgIHRoaXMuZGF0YXNldHMgPSB7fTtcbiAgICAgICAgdGhpcy5kZXZpY2VQaXhlbFJhdGlvID0gKGNvbnRleHQpPT5jb250ZXh0LmNoYXJ0LnBsYXRmb3JtLmdldERldmljZVBpeGVsUmF0aW8oKTtcbiAgICAgICAgdGhpcy5lbGVtZW50cyA9IHt9O1xuICAgICAgICB0aGlzLmV2ZW50cyA9IFtcbiAgICAgICAgICAgICdtb3VzZW1vdmUnLFxuICAgICAgICAgICAgJ21vdXNlb3V0JyxcbiAgICAgICAgICAgICdjbGljaycsXG4gICAgICAgICAgICAndG91Y2hzdGFydCcsXG4gICAgICAgICAgICAndG91Y2htb3ZlJ1xuICAgICAgICBdO1xuICAgICAgICB0aGlzLmZvbnQgPSB7XG4gICAgICAgICAgICBmYW1pbHk6IFwiJ0hlbHZldGljYSBOZXVlJywgJ0hlbHZldGljYScsICdBcmlhbCcsIHNhbnMtc2VyaWZcIixcbiAgICAgICAgICAgIHNpemU6IDEyLFxuICAgICAgICAgICAgc3R5bGU6ICdub3JtYWwnLFxuICAgICAgICAgICAgbGluZUhlaWdodDogMS4yLFxuICAgICAgICAgICAgd2VpZ2h0OiBudWxsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaG92ZXIgPSB7fTtcbiAgICAgICAgdGhpcy5ob3ZlckJhY2tncm91bmRDb2xvciA9IChjdHgsIG9wdGlvbnMpPT5nZXRIb3ZlckNvbG9yKG9wdGlvbnMuYmFja2dyb3VuZENvbG9yKTtcbiAgICAgICAgdGhpcy5ob3ZlckJvcmRlckNvbG9yID0gKGN0eCwgb3B0aW9ucyk9PmdldEhvdmVyQ29sb3Iob3B0aW9ucy5ib3JkZXJDb2xvcik7XG4gICAgICAgIHRoaXMuaG92ZXJDb2xvciA9IChjdHgsIG9wdGlvbnMpPT5nZXRIb3ZlckNvbG9yKG9wdGlvbnMuY29sb3IpO1xuICAgICAgICB0aGlzLmluZGV4QXhpcyA9ICd4JztcbiAgICAgICAgdGhpcy5pbnRlcmFjdGlvbiA9IHtcbiAgICAgICAgICAgIG1vZGU6ICduZWFyZXN0JyxcbiAgICAgICAgICAgIGludGVyc2VjdDogdHJ1ZSxcbiAgICAgICAgICAgIGluY2x1ZGVJbnZpc2libGU6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMubWFpbnRhaW5Bc3BlY3RSYXRpbyA9IHRydWU7XG4gICAgICAgIHRoaXMub25Ib3ZlciA9IG51bGw7XG4gICAgICAgIHRoaXMub25DbGljayA9IG51bGw7XG4gICAgICAgIHRoaXMucGFyc2luZyA9IHRydWU7XG4gICAgICAgIHRoaXMucGx1Z2lucyA9IHt9O1xuICAgICAgICB0aGlzLnJlc3BvbnNpdmUgPSB0cnVlO1xuICAgICAgICB0aGlzLnNjYWxlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnNjYWxlcyA9IHt9O1xuICAgICAgICB0aGlzLnNob3dMaW5lID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kcmF3QWN0aXZlRWxlbWVudHNPblRvcCA9IHRydWU7XG4gICAgICAgIHRoaXMuZGVzY3JpYmUoX2Rlc2NyaXB0b3JzKTtcbiAgICAgICAgdGhpcy5hcHBseShfYXBwbGllcnMpO1xuICAgIH1cbiBzZXQoc2NvcGUsIHZhbHVlcykge1xuICAgICAgICByZXR1cm4gc2V0KHRoaXMsIHNjb3BlLCB2YWx1ZXMpO1xuICAgIH1cbiBnZXQoc2NvcGUpIHtcbiAgICAgICAgcmV0dXJuIGdldFNjb3BlJDEodGhpcywgc2NvcGUpO1xuICAgIH1cbiBkZXNjcmliZShzY29wZSwgdmFsdWVzKSB7XG4gICAgICAgIHJldHVybiBzZXQoZGVzY3JpcHRvcnMsIHNjb3BlLCB2YWx1ZXMpO1xuICAgIH1cbiAgICBvdmVycmlkZShzY29wZSwgdmFsdWVzKSB7XG4gICAgICAgIHJldHVybiBzZXQob3ZlcnJpZGVzLCBzY29wZSwgdmFsdWVzKTtcbiAgICB9XG4gcm91dGUoc2NvcGUsIG5hbWUsIHRhcmdldFNjb3BlLCB0YXJnZXROYW1lKSB7XG4gICAgICAgIGNvbnN0IHNjb3BlT2JqZWN0ID0gZ2V0U2NvcGUkMSh0aGlzLCBzY29wZSk7XG4gICAgICAgIGNvbnN0IHRhcmdldFNjb3BlT2JqZWN0ID0gZ2V0U2NvcGUkMSh0aGlzLCB0YXJnZXRTY29wZSk7XG4gICAgICAgIGNvbnN0IHByaXZhdGVOYW1lID0gJ18nICsgbmFtZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoc2NvcGVPYmplY3QsIHtcbiAgICAgICAgICAgIFtwcml2YXRlTmFtZV06IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogc2NvcGVPYmplY3RbbmFtZV0sXG4gICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbbmFtZV06IHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGdldCAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsID0gdGhpc1twcml2YXRlTmFtZV07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IHRhcmdldFNjb3BlT2JqZWN0W3RhcmdldE5hbWVdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNPYmplY3QobG9jYWwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgdGFyZ2V0LCBsb2NhbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlT3JEZWZhdWx0KGxvY2FsLCB0YXJnZXQpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0ICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzW3ByaXZhdGVOYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFwcGx5KGFwcGxpZXJzKSB7XG4gICAgICAgIGFwcGxpZXJzLmZvckVhY2goKGFwcGx5KT0+YXBwbHkodGhpcykpO1xuICAgIH1cbn1cbnZhciBkZWZhdWx0cyA9IC8qICNfX1BVUkVfXyAqLyBuZXcgRGVmYXVsdHMoe1xuICAgIF9zY3JpcHRhYmxlOiAobmFtZSk9PiFuYW1lLnN0YXJ0c1dpdGgoJ29uJyksXG4gICAgX2luZGV4YWJsZTogKG5hbWUpPT5uYW1lICE9PSAnZXZlbnRzJyxcbiAgICBob3Zlcjoge1xuICAgICAgICBfZmFsbGJhY2s6ICdpbnRlcmFjdGlvbidcbiAgICB9LFxuICAgIGludGVyYWN0aW9uOiB7XG4gICAgICAgIF9zY3JpcHRhYmxlOiBmYWxzZSxcbiAgICAgICAgX2luZGV4YWJsZTogZmFsc2VcbiAgICB9XG59LCBbXG4gICAgYXBwbHlBbmltYXRpb25zRGVmYXVsdHMsXG4gICAgYXBwbHlMYXlvdXRzRGVmYXVsdHMsXG4gICAgYXBwbHlTY2FsZURlZmF1bHRzXG5dKTtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gZm9udCBvYmplY3QgaW50byBhIENTUyBmb250IHN0cmluZy5cbiAqIEBwYXJhbSBmb250IC0gQSBmb250IG9iamVjdC5cbiAqIEByZXR1cm4gVGhlIENTUyBmb250IHN0cmluZy4gU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9mb250XG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIHRvRm9udFN0cmluZyhmb250KSB7XG4gICAgaWYgKCFmb250IHx8IGlzTnVsbE9yVW5kZWYoZm9udC5zaXplKSB8fCBpc051bGxPclVuZGVmKGZvbnQuZmFtaWx5KSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIChmb250LnN0eWxlID8gZm9udC5zdHlsZSArICcgJyA6ICcnKSArIChmb250LndlaWdodCA/IGZvbnQud2VpZ2h0ICsgJyAnIDogJycpICsgZm9udC5zaXplICsgJ3B4ICcgKyBmb250LmZhbWlseTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfbWVhc3VyZVRleHQoY3R4LCBkYXRhLCBnYywgbG9uZ2VzdCwgc3RyaW5nKSB7XG4gICAgbGV0IHRleHRXaWR0aCA9IGRhdGFbc3RyaW5nXTtcbiAgICBpZiAoIXRleHRXaWR0aCkge1xuICAgICAgICB0ZXh0V2lkdGggPSBkYXRhW3N0cmluZ10gPSBjdHgubWVhc3VyZVRleHQoc3RyaW5nKS53aWR0aDtcbiAgICAgICAgZ2MucHVzaChzdHJpbmcpO1xuICAgIH1cbiAgICBpZiAodGV4dFdpZHRoID4gbG9uZ2VzdCkge1xuICAgICAgICBsb25nZXN0ID0gdGV4dFdpZHRoO1xuICAgIH1cbiAgICByZXR1cm4gbG9uZ2VzdDtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqLyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eVxuZnVuY3Rpb24gX2xvbmdlc3RUZXh0KGN0eCwgZm9udCwgYXJyYXlPZlRoaW5ncywgY2FjaGUpIHtcbiAgICBjYWNoZSA9IGNhY2hlIHx8IHt9O1xuICAgIGxldCBkYXRhID0gY2FjaGUuZGF0YSA9IGNhY2hlLmRhdGEgfHwge307XG4gICAgbGV0IGdjID0gY2FjaGUuZ2FyYmFnZUNvbGxlY3QgPSBjYWNoZS5nYXJiYWdlQ29sbGVjdCB8fCBbXTtcbiAgICBpZiAoY2FjaGUuZm9udCAhPT0gZm9udCkge1xuICAgICAgICBkYXRhID0gY2FjaGUuZGF0YSA9IHt9O1xuICAgICAgICBnYyA9IGNhY2hlLmdhcmJhZ2VDb2xsZWN0ID0gW107XG4gICAgICAgIGNhY2hlLmZvbnQgPSBmb250O1xuICAgIH1cbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC5mb250ID0gZm9udDtcbiAgICBsZXQgbG9uZ2VzdCA9IDA7XG4gICAgY29uc3QgaWxlbiA9IGFycmF5T2ZUaGluZ3MubGVuZ3RoO1xuICAgIGxldCBpLCBqLCBqbGVuLCB0aGluZywgbmVzdGVkVGhpbmc7XG4gICAgZm9yKGkgPSAwOyBpIDwgaWxlbjsgaSsrKXtcbiAgICAgICAgdGhpbmcgPSBhcnJheU9mVGhpbmdzW2ldO1xuICAgICAgICAvLyBVbmRlZmluZWQgc3RyaW5ncyBhbmQgYXJyYXlzIHNob3VsZCBub3QgYmUgbWVhc3VyZWRcbiAgICAgICAgaWYgKHRoaW5nICE9PSB1bmRlZmluZWQgJiYgdGhpbmcgIT09IG51bGwgJiYgIWlzQXJyYXkodGhpbmcpKSB7XG4gICAgICAgICAgICBsb25nZXN0ID0gX21lYXN1cmVUZXh0KGN0eCwgZGF0YSwgZ2MsIGxvbmdlc3QsIHRoaW5nKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KHRoaW5nKSkge1xuICAgICAgICAgICAgLy8gaWYgaXQgaXMgYW4gYXJyYXkgbGV0cyBtZWFzdXJlIGVhY2ggZWxlbWVudFxuICAgICAgICAgICAgLy8gdG8gZG8gbWF5YmUgc2ltcGxpZnkgdGhpcyBmdW5jdGlvbiBhIGJpdCBzbyB3ZSBjYW4gZG8gdGhpcyBtb3JlIHJlY3Vyc2l2ZWx5P1xuICAgICAgICAgICAgZm9yKGogPSAwLCBqbGVuID0gdGhpbmcubGVuZ3RoOyBqIDwgamxlbjsgaisrKXtcbiAgICAgICAgICAgICAgICBuZXN0ZWRUaGluZyA9IHRoaW5nW2pdO1xuICAgICAgICAgICAgICAgIC8vIFVuZGVmaW5lZCBzdHJpbmdzIGFuZCBhcnJheXMgc2hvdWxkIG5vdCBiZSBtZWFzdXJlZFxuICAgICAgICAgICAgICAgIGlmIChuZXN0ZWRUaGluZyAhPT0gdW5kZWZpbmVkICYmIG5lc3RlZFRoaW5nICE9PSBudWxsICYmICFpc0FycmF5KG5lc3RlZFRoaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICBsb25nZXN0ID0gX21lYXN1cmVUZXh0KGN0eCwgZGF0YSwgZ2MsIGxvbmdlc3QsIG5lc3RlZFRoaW5nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgICBjb25zdCBnY0xlbiA9IGdjLmxlbmd0aCAvIDI7XG4gICAgaWYgKGdjTGVuID4gYXJyYXlPZlRoaW5ncy5sZW5ndGgpIHtcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgZ2NMZW47IGkrKyl7XG4gICAgICAgICAgICBkZWxldGUgZGF0YVtnY1tpXV07XG4gICAgICAgIH1cbiAgICAgICAgZ2Muc3BsaWNlKDAsIGdjTGVuKTtcbiAgICB9XG4gICAgcmV0dXJuIGxvbmdlc3Q7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGFsaWduZWQgcGl4ZWwgdmFsdWUgdG8gYXZvaWQgYW50aS1hbGlhc2luZyBibHVyXG4gKiBAcGFyYW0gY2hhcnQgLSBUaGUgY2hhcnQgaW5zdGFuY2UuXG4gKiBAcGFyYW0gcGl4ZWwgLSBBIHBpeGVsIHZhbHVlLlxuICogQHBhcmFtIHdpZHRoIC0gVGhlIHdpZHRoIG9mIHRoZSBlbGVtZW50LlxuICogQHJldHVybnMgVGhlIGFsaWduZWQgcGl4ZWwgdmFsdWUuXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9hbGlnblBpeGVsKGNoYXJ0LCBwaXhlbCwgd2lkdGgpIHtcbiAgICBjb25zdCBkZXZpY2VQaXhlbFJhdGlvID0gY2hhcnQuY3VycmVudERldmljZVBpeGVsUmF0aW87XG4gICAgY29uc3QgaGFsZldpZHRoID0gd2lkdGggIT09IDAgPyBNYXRoLm1heCh3aWR0aCAvIDIsIDAuNSkgOiAwO1xuICAgIHJldHVybiBNYXRoLnJvdW5kKChwaXhlbCAtIGhhbGZXaWR0aCkgKiBkZXZpY2VQaXhlbFJhdGlvKSAvIGRldmljZVBpeGVsUmF0aW8gKyBoYWxmV2lkdGg7XG59XG4vKipcbiAqIENsZWFycyB0aGUgZW50aXJlIGNhbnZhcy5cbiAqLyBmdW5jdGlvbiBjbGVhckNhbnZhcyhjYW52YXMsIGN0eCkge1xuICAgIGN0eCA9IGN0eCB8fCBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBjdHguc2F2ZSgpO1xuICAgIC8vIGNhbnZhcy53aWR0aCBhbmQgY2FudmFzLmhlaWdodCBkbyBub3QgY29uc2lkZXIgdGhlIGNhbnZhcyB0cmFuc2Zvcm0sXG4gICAgLy8gd2hpbGUgY2xlYXJSZWN0IGRvZXNcbiAgICBjdHgucmVzZXRUcmFuc2Zvcm0oKTtcbiAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgY3R4LnJlc3RvcmUoKTtcbn1cbmZ1bmN0aW9uIGRyYXdQb2ludChjdHgsIG9wdGlvbnMsIHgsIHkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVzZS1iZWZvcmUtZGVmaW5lXG4gICAgZHJhd1BvaW50TGVnZW5kKGN0eCwgb3B0aW9ucywgeCwgeSwgbnVsbCk7XG59XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eVxuZnVuY3Rpb24gZHJhd1BvaW50TGVnZW5kKGN0eCwgb3B0aW9ucywgeCwgeSwgdykge1xuICAgIGxldCB0eXBlLCB4T2Zmc2V0LCB5T2Zmc2V0LCBzaXplLCBjb3JuZXJSYWRpdXMsIHdpZHRoLCB4T2Zmc2V0VywgeU9mZnNldFc7XG4gICAgY29uc3Qgc3R5bGUgPSBvcHRpb25zLnBvaW50U3R5bGU7XG4gICAgY29uc3Qgcm90YXRpb24gPSBvcHRpb25zLnJvdGF0aW9uO1xuICAgIGNvbnN0IHJhZGl1cyA9IG9wdGlvbnMucmFkaXVzO1xuICAgIGxldCByYWQgPSAocm90YXRpb24gfHwgMCkgKiBSQURfUEVSX0RFRztcbiAgICBpZiAoc3R5bGUgJiYgdHlwZW9mIHN0eWxlID09PSAnb2JqZWN0Jykge1xuICAgICAgICB0eXBlID0gc3R5bGUudG9TdHJpbmcoKTtcbiAgICAgICAgaWYgKHR5cGUgPT09ICdbb2JqZWN0IEhUTUxJbWFnZUVsZW1lbnRdJyB8fCB0eXBlID09PSAnW29iamVjdCBIVE1MQ2FudmFzRWxlbWVudF0nKSB7XG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZSh4LCB5KTtcbiAgICAgICAgICAgIGN0eC5yb3RhdGUocmFkKTtcbiAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2Uoc3R5bGUsIC1zdHlsZS53aWR0aCAvIDIsIC1zdHlsZS5oZWlnaHQgLyAyLCBzdHlsZS53aWR0aCwgc3R5bGUuaGVpZ2h0KTtcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzTmFOKHJhZGl1cykgfHwgcmFkaXVzIDw9IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgc3dpdGNoKHN0eWxlKXtcbiAgICAgICAgLy8gRGVmYXVsdCBpbmNsdWRlcyBjaXJjbGVcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGlmICh3KSB7XG4gICAgICAgICAgICAgICAgY3R4LmVsbGlwc2UoeCwgeSwgdyAvIDIsIHJhZGl1cywgMCwgMCwgVEFVKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY3R4LmFyYyh4LCB5LCByYWRpdXMsIDAsIFRBVSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndHJpYW5nbGUnOlxuICAgICAgICAgICAgd2lkdGggPSB3ID8gdyAvIDIgOiByYWRpdXM7XG4gICAgICAgICAgICBjdHgubW92ZVRvKHggKyBNYXRoLnNpbihyYWQpICogd2lkdGgsIHkgLSBNYXRoLmNvcyhyYWQpICogcmFkaXVzKTtcbiAgICAgICAgICAgIHJhZCArPSBUV09fVEhJUkRTX1BJO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh4ICsgTWF0aC5zaW4ocmFkKSAqIHdpZHRoLCB5IC0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cyk7XG4gICAgICAgICAgICByYWQgKz0gVFdPX1RISVJEU19QSTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeCArIE1hdGguc2luKHJhZCkgKiB3aWR0aCwgeSAtIE1hdGguY29zKHJhZCkgKiByYWRpdXMpO1xuICAgICAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3JlY3RSb3VuZGVkJzpcbiAgICAgICAgICAgIC8vIE5PVEU6IHRoZSByb3VuZGVkIHJlY3QgaW1wbGVtZW50YXRpb24gY2hhbmdlZCB0byB1c2UgYGFyY2AgaW5zdGVhZCBvZlxuICAgICAgICAgICAgLy8gYHF1YWRyYXRpY0N1cnZlVG9gIHNpbmNlIGl0IGdlbmVyYXRlcyBiZXR0ZXIgcmVzdWx0cyB3aGVuIHJlY3QgaXNcbiAgICAgICAgICAgIC8vIGFsbW9zdCBhIGNpcmNsZS4gMC41MTYgKGluc3RlYWQgb2YgMC41KSBwcm9kdWNlcyByZXN1bHRzIHdpdGggdmlzdWFsbHlcbiAgICAgICAgICAgIC8vIGNsb3NlciBwcm9wb3J0aW9uIHRvIHRoZSBwcmV2aW91cyBpbXBsIGFuZCBpdCBpcyBpbnNjcmliZWQgaW4gdGhlXG4gICAgICAgICAgICAvLyBjaXJjbGUgd2l0aCBgcmFkaXVzYC4gRm9yIG1vcmUgZGV0YWlscywgc2VlIHRoZSBmb2xsb3dpbmcgUFJzOlxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzU1OTdcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy81ODU4XG4gICAgICAgICAgICBjb3JuZXJSYWRpdXMgPSByYWRpdXMgKiAwLjUxNjtcbiAgICAgICAgICAgIHNpemUgPSByYWRpdXMgLSBjb3JuZXJSYWRpdXM7XG4gICAgICAgICAgICB4T2Zmc2V0ID0gTWF0aC5jb3MocmFkICsgUVVBUlRFUl9QSSkgKiBzaXplO1xuICAgICAgICAgICAgeE9mZnNldFcgPSBNYXRoLmNvcyhyYWQgKyBRVUFSVEVSX1BJKSAqICh3ID8gdyAvIDIgLSBjb3JuZXJSYWRpdXMgOiBzaXplKTtcbiAgICAgICAgICAgIHlPZmZzZXQgPSBNYXRoLnNpbihyYWQgKyBRVUFSVEVSX1BJKSAqIHNpemU7XG4gICAgICAgICAgICB5T2Zmc2V0VyA9IE1hdGguc2luKHJhZCArIFFVQVJURVJfUEkpICogKHcgPyB3IC8gMiAtIGNvcm5lclJhZGl1cyA6IHNpemUpO1xuICAgICAgICAgICAgY3R4LmFyYyh4IC0geE9mZnNldFcsIHkgLSB5T2Zmc2V0LCBjb3JuZXJSYWRpdXMsIHJhZCAtIFBJLCByYWQgLSBIQUxGX1BJKTtcbiAgICAgICAgICAgIGN0eC5hcmMoeCArIHlPZmZzZXRXLCB5IC0geE9mZnNldCwgY29ybmVyUmFkaXVzLCByYWQgLSBIQUxGX1BJLCByYWQpO1xuICAgICAgICAgICAgY3R4LmFyYyh4ICsgeE9mZnNldFcsIHkgKyB5T2Zmc2V0LCBjb3JuZXJSYWRpdXMsIHJhZCwgcmFkICsgSEFMRl9QSSk7XG4gICAgICAgICAgICBjdHguYXJjKHggLSB5T2Zmc2V0VywgeSArIHhPZmZzZXQsIGNvcm5lclJhZGl1cywgcmFkICsgSEFMRl9QSSwgcmFkICsgUEkpO1xuICAgICAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3JlY3QnOlxuICAgICAgICAgICAgaWYgKCFyb3RhdGlvbikge1xuICAgICAgICAgICAgICAgIHNpemUgPSBNYXRoLlNRUlQxXzIgKiByYWRpdXM7XG4gICAgICAgICAgICAgICAgd2lkdGggPSB3ID8gdyAvIDIgOiBzaXplO1xuICAgICAgICAgICAgICAgIGN0eC5yZWN0KHggLSB3aWR0aCwgeSAtIHNpemUsIDIgKiB3aWR0aCwgMiAqIHNpemUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmFkICs9IFFVQVJURVJfUEk7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi8gY2FzZSAncmVjdFJvdCc6XG4gICAgICAgICAgICB4T2Zmc2V0VyA9IE1hdGguY29zKHJhZCkgKiAodyA/IHcgLyAyIDogcmFkaXVzKTtcbiAgICAgICAgICAgIHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuICAgICAgICAgICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG4gICAgICAgICAgICB5T2Zmc2V0VyA9IE1hdGguc2luKHJhZCkgKiAodyA/IHcgLyAyIDogcmFkaXVzKTtcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXRXLCB5IC0geU9mZnNldCk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHggKyB5T2Zmc2V0VywgeSAtIHhPZmZzZXQpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh4ICsgeE9mZnNldFcsIHkgKyB5T2Zmc2V0KTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeCAtIHlPZmZzZXRXLCB5ICsgeE9mZnNldCk7XG4gICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnY3Jvc3NSb3QnOlxuICAgICAgICAgICAgcmFkICs9IFFVQVJURVJfUEk7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi8gY2FzZSAnY3Jvc3MnOlxuICAgICAgICAgICAgeE9mZnNldFcgPSBNYXRoLmNvcyhyYWQpICogKHcgPyB3IC8gMiA6IHJhZGl1cyk7XG4gICAgICAgICAgICB4T2Zmc2V0ID0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cztcbiAgICAgICAgICAgIHlPZmZzZXQgPSBNYXRoLnNpbihyYWQpICogcmFkaXVzO1xuICAgICAgICAgICAgeU9mZnNldFcgPSBNYXRoLnNpbihyYWQpICogKHcgPyB3IC8gMiA6IHJhZGl1cyk7XG4gICAgICAgICAgICBjdHgubW92ZVRvKHggLSB4T2Zmc2V0VywgeSAtIHlPZmZzZXQpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh4ICsgeE9mZnNldFcsIHkgKyB5T2Zmc2V0KTtcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8oeCArIHlPZmZzZXRXLCB5IC0geE9mZnNldCk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHggLSB5T2Zmc2V0VywgeSArIHhPZmZzZXQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3N0YXInOlxuICAgICAgICAgICAgeE9mZnNldFcgPSBNYXRoLmNvcyhyYWQpICogKHcgPyB3IC8gMiA6IHJhZGl1cyk7XG4gICAgICAgICAgICB4T2Zmc2V0ID0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cztcbiAgICAgICAgICAgIHlPZmZzZXQgPSBNYXRoLnNpbihyYWQpICogcmFkaXVzO1xuICAgICAgICAgICAgeU9mZnNldFcgPSBNYXRoLnNpbihyYWQpICogKHcgPyB3IC8gMiA6IHJhZGl1cyk7XG4gICAgICAgICAgICBjdHgubW92ZVRvKHggLSB4T2Zmc2V0VywgeSAtIHlPZmZzZXQpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh4ICsgeE9mZnNldFcsIHkgKyB5T2Zmc2V0KTtcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8oeCArIHlPZmZzZXRXLCB5IC0geE9mZnNldCk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHggLSB5T2Zmc2V0VywgeSArIHhPZmZzZXQpO1xuICAgICAgICAgICAgcmFkICs9IFFVQVJURVJfUEk7XG4gICAgICAgICAgICB4T2Zmc2V0VyA9IE1hdGguY29zKHJhZCkgKiAodyA/IHcgLyAyIDogcmFkaXVzKTtcbiAgICAgICAgICAgIHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuICAgICAgICAgICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG4gICAgICAgICAgICB5T2Zmc2V0VyA9IE1hdGguc2luKHJhZCkgKiAodyA/IHcgLyAyIDogcmFkaXVzKTtcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXRXLCB5IC0geU9mZnNldCk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHggKyB4T2Zmc2V0VywgeSArIHlPZmZzZXQpO1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyh4ICsgeU9mZnNldFcsIHkgLSB4T2Zmc2V0KTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeCAtIHlPZmZzZXRXLCB5ICsgeE9mZnNldCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbGluZSc6XG4gICAgICAgICAgICB4T2Zmc2V0ID0gdyA/IHcgLyAyIDogTWF0aC5jb3MocmFkKSAqIHJhZGl1cztcbiAgICAgICAgICAgIHlPZmZzZXQgPSBNYXRoLnNpbihyYWQpICogcmFkaXVzO1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyh4IC0geE9mZnNldCwgeSAtIHlPZmZzZXQpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh4ICsgeE9mZnNldCwgeSArIHlPZmZzZXQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2Rhc2gnOlxuICAgICAgICAgICAgY3R4Lm1vdmVUbyh4LCB5KTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeCArIE1hdGguY29zKHJhZCkgKiAodyA/IHcgLyAyIDogcmFkaXVzKSwgeSArIE1hdGguc2luKHJhZCkgKiByYWRpdXMpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgZmFsc2U6XG4gICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgY3R4LmZpbGwoKTtcbiAgICBpZiAob3B0aW9ucy5ib3JkZXJXaWR0aCA+IDApIHtcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgIH1cbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBwb2ludCBpcyBpbnNpZGUgdGhlIHJlY3RhbmdsZVxuICogQHBhcmFtIHBvaW50IC0gVGhlIHBvaW50IHRvIHRlc3RcbiAqIEBwYXJhbSBhcmVhIC0gVGhlIHJlY3RhbmdsZVxuICogQHBhcmFtIG1hcmdpbiAtIGFsbG93ZWQgbWFyZ2luXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9pc1BvaW50SW5BcmVhKHBvaW50LCBhcmVhLCBtYXJnaW4pIHtcbiAgICBtYXJnaW4gPSBtYXJnaW4gfHwgMC41OyAvLyBtYXJnaW4gLSBkZWZhdWx0IGlzIHRvIG1hdGNoIHJvdW5kZWQgZGVjaW1hbHNcbiAgICByZXR1cm4gIWFyZWEgfHwgcG9pbnQgJiYgcG9pbnQueCA+IGFyZWEubGVmdCAtIG1hcmdpbiAmJiBwb2ludC54IDwgYXJlYS5yaWdodCArIG1hcmdpbiAmJiBwb2ludC55ID4gYXJlYS50b3AgLSBtYXJnaW4gJiYgcG9pbnQueSA8IGFyZWEuYm90dG9tICsgbWFyZ2luO1xufVxuZnVuY3Rpb24gY2xpcEFyZWEoY3R4LCBhcmVhKSB7XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4LnJlY3QoYXJlYS5sZWZ0LCBhcmVhLnRvcCwgYXJlYS5yaWdodCAtIGFyZWEubGVmdCwgYXJlYS5ib3R0b20gLSBhcmVhLnRvcCk7XG4gICAgY3R4LmNsaXAoKTtcbn1cbmZ1bmN0aW9uIHVuY2xpcEFyZWEoY3R4KSB7XG4gICAgY3R4LnJlc3RvcmUoKTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfc3RlcHBlZExpbmVUbyhjdHgsIHByZXZpb3VzLCB0YXJnZXQsIGZsaXAsIG1vZGUpIHtcbiAgICBpZiAoIXByZXZpb3VzKSB7XG4gICAgICAgIHJldHVybiBjdHgubGluZVRvKHRhcmdldC54LCB0YXJnZXQueSk7XG4gICAgfVxuICAgIGlmIChtb2RlID09PSAnbWlkZGxlJykge1xuICAgICAgICBjb25zdCBtaWRwb2ludCA9IChwcmV2aW91cy54ICsgdGFyZ2V0LngpIC8gMi4wO1xuICAgICAgICBjdHgubGluZVRvKG1pZHBvaW50LCBwcmV2aW91cy55KTtcbiAgICAgICAgY3R4LmxpbmVUbyhtaWRwb2ludCwgdGFyZ2V0LnkpO1xuICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2FmdGVyJyAhPT0gISFmbGlwKSB7XG4gICAgICAgIGN0eC5saW5lVG8ocHJldmlvdXMueCwgdGFyZ2V0LnkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGN0eC5saW5lVG8odGFyZ2V0LngsIHByZXZpb3VzLnkpO1xuICAgIH1cbiAgICBjdHgubGluZVRvKHRhcmdldC54LCB0YXJnZXQueSk7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2JlemllckN1cnZlVG8oY3R4LCBwcmV2aW91cywgdGFyZ2V0LCBmbGlwKSB7XG4gICAgaWYgKCFwcmV2aW91cykge1xuICAgICAgICByZXR1cm4gY3R4LmxpbmVUbyh0YXJnZXQueCwgdGFyZ2V0LnkpO1xuICAgIH1cbiAgICBjdHguYmV6aWVyQ3VydmVUbyhmbGlwID8gcHJldmlvdXMuY3AxeCA6IHByZXZpb3VzLmNwMngsIGZsaXAgPyBwcmV2aW91cy5jcDF5IDogcHJldmlvdXMuY3AyeSwgZmxpcCA/IHRhcmdldC5jcDJ4IDogdGFyZ2V0LmNwMXgsIGZsaXAgPyB0YXJnZXQuY3AyeSA6IHRhcmdldC5jcDF5LCB0YXJnZXQueCwgdGFyZ2V0LnkpO1xufVxuZnVuY3Rpb24gc2V0UmVuZGVyT3B0cyhjdHgsIG9wdHMpIHtcbiAgICBpZiAob3B0cy50cmFuc2xhdGlvbikge1xuICAgICAgICBjdHgudHJhbnNsYXRlKG9wdHMudHJhbnNsYXRpb25bMF0sIG9wdHMudHJhbnNsYXRpb25bMV0pO1xuICAgIH1cbiAgICBpZiAoIWlzTnVsbE9yVW5kZWYob3B0cy5yb3RhdGlvbikpIHtcbiAgICAgICAgY3R4LnJvdGF0ZShvcHRzLnJvdGF0aW9uKTtcbiAgICB9XG4gICAgaWYgKG9wdHMuY29sb3IpIHtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdHMuY29sb3I7XG4gICAgfVxuICAgIGlmIChvcHRzLnRleHRBbGlnbikge1xuICAgICAgICBjdHgudGV4dEFsaWduID0gb3B0cy50ZXh0QWxpZ247XG4gICAgfVxuICAgIGlmIChvcHRzLnRleHRCYXNlbGluZSkge1xuICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gb3B0cy50ZXh0QmFzZWxpbmU7XG4gICAgfVxufVxuZnVuY3Rpb24gZGVjb3JhdGVUZXh0KGN0eCwgeCwgeSwgbGluZSwgb3B0cykge1xuICAgIGlmIChvcHRzLnN0cmlrZXRocm91Z2ggfHwgb3B0cy51bmRlcmxpbmUpIHtcbiAgICAgICAgLyoqXG4gICAgICogTm93IHRoYXQgSUUxMSBzdXBwb3J0IGhhcyBiZWVuIGRyb3BwZWQsIHdlIGNhbiB1c2UgbW9yZVxuICAgICAqIG9mIHRoZSBUZXh0TWV0cmljcyBvYmplY3QuIFRoZSBhY3R1YWwgYm91bmRpbmcgYm94ZXNcbiAgICAgKiBhcmUgdW5mbGFnZ2VkIGluIENocm9tZSwgRmlyZWZveCwgRWRnZSwgYW5kIFNhZmFyaSBzbyB0aGV5XG4gICAgICogY2FuIGJlIHNhZmVseSB1c2VkLlxuICAgICAqIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvVGV4dE1ldHJpY3MjQnJvd3Nlcl9jb21wYXRpYmlsaXR5XG4gICAgICovIGNvbnN0IG1ldHJpY3MgPSBjdHgubWVhc3VyZVRleHQobGluZSk7XG4gICAgICAgIGNvbnN0IGxlZnQgPSB4IC0gbWV0cmljcy5hY3R1YWxCb3VuZGluZ0JveExlZnQ7XG4gICAgICAgIGNvbnN0IHJpZ2h0ID0geCArIG1ldHJpY3MuYWN0dWFsQm91bmRpbmdCb3hSaWdodDtcbiAgICAgICAgY29uc3QgdG9wID0geSAtIG1ldHJpY3MuYWN0dWFsQm91bmRpbmdCb3hBc2NlbnQ7XG4gICAgICAgIGNvbnN0IGJvdHRvbSA9IHkgKyBtZXRyaWNzLmFjdHVhbEJvdW5kaW5nQm94RGVzY2VudDtcbiAgICAgICAgY29uc3QgeURlY29yYXRpb24gPSBvcHRzLnN0cmlrZXRocm91Z2ggPyAodG9wICsgYm90dG9tKSAvIDIgOiBib3R0b207XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGN0eC5maWxsU3R5bGU7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IG9wdHMuZGVjb3JhdGlvbldpZHRoIHx8IDI7XG4gICAgICAgIGN0eC5tb3ZlVG8obGVmdCwgeURlY29yYXRpb24pO1xuICAgICAgICBjdHgubGluZVRvKHJpZ2h0LCB5RGVjb3JhdGlvbik7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkcmF3QmFja2Ryb3AoY3R4LCBvcHRzKSB7XG4gICAgY29uc3Qgb2xkQ29sb3IgPSBjdHguZmlsbFN0eWxlO1xuICAgIGN0eC5maWxsU3R5bGUgPSBvcHRzLmNvbG9yO1xuICAgIGN0eC5maWxsUmVjdChvcHRzLmxlZnQsIG9wdHMudG9wLCBvcHRzLndpZHRoLCBvcHRzLmhlaWdodCk7XG4gICAgY3R4LmZpbGxTdHlsZSA9IG9sZENvbG9yO1xufVxuLyoqXG4gKiBSZW5kZXIgdGV4dCBvbnRvIHRoZSBjYW52YXNcbiAqLyBmdW5jdGlvbiByZW5kZXJUZXh0KGN0eCwgdGV4dCwgeCwgeSwgZm9udCwgb3B0cyA9IHt9KSB7XG4gICAgY29uc3QgbGluZXMgPSBpc0FycmF5KHRleHQpID8gdGV4dCA6IFtcbiAgICAgICAgdGV4dFxuICAgIF07XG4gICAgY29uc3Qgc3Ryb2tlID0gb3B0cy5zdHJva2VXaWR0aCA+IDAgJiYgb3B0cy5zdHJva2VDb2xvciAhPT0gJyc7XG4gICAgbGV0IGksIGxpbmU7XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHguZm9udCA9IGZvbnQuc3RyaW5nO1xuICAgIHNldFJlbmRlck9wdHMoY3R4LCBvcHRzKTtcbiAgICBmb3IoaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7ICsraSl7XG4gICAgICAgIGxpbmUgPSBsaW5lc1tpXTtcbiAgICAgICAgaWYgKG9wdHMuYmFja2Ryb3ApIHtcbiAgICAgICAgICAgIGRyYXdCYWNrZHJvcChjdHgsIG9wdHMuYmFja2Ryb3ApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdHJva2UpIHtcbiAgICAgICAgICAgIGlmIChvcHRzLnN0cm9rZUNvbG9yKSB7XG4gICAgICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gb3B0cy5zdHJva2VDb2xvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNOdWxsT3JVbmRlZihvcHRzLnN0cm9rZVdpZHRoKSkge1xuICAgICAgICAgICAgICAgIGN0eC5saW5lV2lkdGggPSBvcHRzLnN0cm9rZVdpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3R4LnN0cm9rZVRleHQobGluZSwgeCwgeSwgb3B0cy5tYXhXaWR0aCk7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LmZpbGxUZXh0KGxpbmUsIHgsIHksIG9wdHMubWF4V2lkdGgpO1xuICAgICAgICBkZWNvcmF0ZVRleHQoY3R4LCB4LCB5LCBsaW5lLCBvcHRzKTtcbiAgICAgICAgeSArPSBOdW1iZXIoZm9udC5saW5lSGVpZ2h0KTtcbiAgICB9XG4gICAgY3R4LnJlc3RvcmUoKTtcbn1cbi8qKlxuICogQWRkIGEgcGF0aCBvZiBhIHJlY3RhbmdsZSB3aXRoIHJvdW5kZWQgY29ybmVycyB0byB0aGUgY3VycmVudCBzdWItcGF0aFxuICogQHBhcmFtIGN0eCAtIENvbnRleHRcbiAqIEBwYXJhbSByZWN0IC0gQm91bmRpbmcgcmVjdFxuICovIGZ1bmN0aW9uIGFkZFJvdW5kZWRSZWN0UGF0aChjdHgsIHJlY3QpIHtcbiAgICBjb25zdCB7IHggLCB5ICwgdyAsIGggLCByYWRpdXMgIH0gPSByZWN0O1xuICAgIC8vIHRvcCBsZWZ0IGFyY1xuICAgIGN0eC5hcmMoeCArIHJhZGl1cy50b3BMZWZ0LCB5ICsgcmFkaXVzLnRvcExlZnQsIHJhZGl1cy50b3BMZWZ0LCAtSEFMRl9QSSwgUEksIHRydWUpO1xuICAgIC8vIGxpbmUgZnJvbSB0b3AgbGVmdCB0byBib3R0b20gbGVmdFxuICAgIGN0eC5saW5lVG8oeCwgeSArIGggLSByYWRpdXMuYm90dG9tTGVmdCk7XG4gICAgLy8gYm90dG9tIGxlZnQgYXJjXG4gICAgY3R4LmFyYyh4ICsgcmFkaXVzLmJvdHRvbUxlZnQsIHkgKyBoIC0gcmFkaXVzLmJvdHRvbUxlZnQsIHJhZGl1cy5ib3R0b21MZWZ0LCBQSSwgSEFMRl9QSSwgdHJ1ZSk7XG4gICAgLy8gbGluZSBmcm9tIGJvdHRvbSBsZWZ0IHRvIGJvdHRvbSByaWdodFxuICAgIGN0eC5saW5lVG8oeCArIHcgLSByYWRpdXMuYm90dG9tUmlnaHQsIHkgKyBoKTtcbiAgICAvLyBib3R0b20gcmlnaHQgYXJjXG4gICAgY3R4LmFyYyh4ICsgdyAtIHJhZGl1cy5ib3R0b21SaWdodCwgeSArIGggLSByYWRpdXMuYm90dG9tUmlnaHQsIHJhZGl1cy5ib3R0b21SaWdodCwgSEFMRl9QSSwgMCwgdHJ1ZSk7XG4gICAgLy8gbGluZSBmcm9tIGJvdHRvbSByaWdodCB0byB0b3AgcmlnaHRcbiAgICBjdHgubGluZVRvKHggKyB3LCB5ICsgcmFkaXVzLnRvcFJpZ2h0KTtcbiAgICAvLyB0b3AgcmlnaHQgYXJjXG4gICAgY3R4LmFyYyh4ICsgdyAtIHJhZGl1cy50b3BSaWdodCwgeSArIHJhZGl1cy50b3BSaWdodCwgcmFkaXVzLnRvcFJpZ2h0LCAwLCAtSEFMRl9QSSwgdHJ1ZSk7XG4gICAgLy8gbGluZSBmcm9tIHRvcCByaWdodCB0byB0b3AgbGVmdFxuICAgIGN0eC5saW5lVG8oeCArIHJhZGl1cy50b3BMZWZ0LCB5KTtcbn1cblxuY29uc3QgTElORV9IRUlHSFQgPSAvXihub3JtYWx8KFxcZCsoPzpcXC5cXGQrKT8pKHB4fGVtfCUpPykkLztcbmNvbnN0IEZPTlRfU1RZTEUgPSAvXihub3JtYWx8aXRhbGljfGluaXRpYWx8aW5oZXJpdHx1bnNldHwob2JsaXF1ZSggLT9bMC05XT9bMC05XWRlZyk/KSkkLztcbi8qKlxuICogQGFsaWFzIENoYXJ0LmhlbHBlcnMub3B0aW9uc1xuICogQG5hbWVzcGFjZVxuICovIC8qKlxuICogQ29udmVydHMgdGhlIGdpdmVuIGxpbmUgaGVpZ2h0IGB2YWx1ZWAgaW4gcGl4ZWxzIGZvciBhIHNwZWNpZmljIGZvbnQgYHNpemVgLlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIGxpbmVIZWlnaHQgdG8gcGFyc2UgKGVnLiAxLjYsICcxNHB4JywgJzc1JScsICcxLjZlbScpLlxuICogQHBhcmFtIHNpemUgLSBUaGUgZm9udCBzaXplIChpbiBwaXhlbHMpIHVzZWQgdG8gcmVzb2x2ZSByZWxhdGl2ZSBgdmFsdWVgLlxuICogQHJldHVybnMgVGhlIGVmZmVjdGl2ZSBsaW5lIGhlaWdodCBpbiBwaXhlbHMgKHNpemUgKiAxLjIgaWYgdmFsdWUgaXMgaW52YWxpZCkuXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9saW5lLWhlaWdodFxuICogQHNpbmNlIDIuNy4wXG4gKi8gZnVuY3Rpb24gdG9MaW5lSGVpZ2h0KHZhbHVlLCBzaXplKSB7XG4gICAgY29uc3QgbWF0Y2hlcyA9ICgnJyArIHZhbHVlKS5tYXRjaChMSU5FX0hFSUdIVCk7XG4gICAgaWYgKCFtYXRjaGVzIHx8IG1hdGNoZXNbMV0gPT09ICdub3JtYWwnKSB7XG4gICAgICAgIHJldHVybiBzaXplICogMS4yO1xuICAgIH1cbiAgICB2YWx1ZSA9ICttYXRjaGVzWzJdO1xuICAgIHN3aXRjaChtYXRjaGVzWzNdKXtcbiAgICAgICAgY2FzZSAncHgnOlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICBjYXNlICclJzpcbiAgICAgICAgICAgIHZhbHVlIC89IDEwMDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gc2l6ZSAqIHZhbHVlO1xufVxuY29uc3QgbnVtYmVyT3JaZXJvID0gKHYpPT4rdiB8fCAwO1xuZnVuY3Rpb24gX3JlYWRWYWx1ZVRvUHJvcHModmFsdWUsIHByb3BzKSB7XG4gICAgY29uc3QgcmV0ID0ge307XG4gICAgY29uc3Qgb2JqUHJvcHMgPSBpc09iamVjdChwcm9wcyk7XG4gICAgY29uc3Qga2V5cyA9IG9ialByb3BzID8gT2JqZWN0LmtleXMocHJvcHMpIDogcHJvcHM7XG4gICAgY29uc3QgcmVhZCA9IGlzT2JqZWN0KHZhbHVlKSA/IG9ialByb3BzID8gKHByb3ApPT52YWx1ZU9yRGVmYXVsdCh2YWx1ZVtwcm9wXSwgdmFsdWVbcHJvcHNbcHJvcF1dKSA6IChwcm9wKT0+dmFsdWVbcHJvcF0gOiAoKT0+dmFsdWU7XG4gICAgZm9yIChjb25zdCBwcm9wIG9mIGtleXMpe1xuICAgICAgICByZXRbcHJvcF0gPSBudW1iZXJPclplcm8ocmVhZChwcm9wKSk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59XG4vKipcbiAqIENvbnZlcnRzIHRoZSBnaXZlbiB2YWx1ZSBpbnRvIGEgVFJCTCBvYmplY3QuXG4gKiBAcGFyYW0gdmFsdWUgLSBJZiBhIG51bWJlciwgc2V0IHRoZSB2YWx1ZSB0byBhbGwgVFJCTCBjb21wb25lbnQsXG4gKiAgZWxzZSwgaWYgYW4gb2JqZWN0LCB1c2UgZGVmaW5lZCBwcm9wZXJ0aWVzIGFuZCBzZXRzIHVuZGVmaW5lZCBvbmVzIHRvIDAuXG4gKiAgeCAvIHkgYXJlIHNob3J0aGFuZHMgZm9yIHNhbWUgdmFsdWUgZm9yIGxlZnQvcmlnaHQgYW5kIHRvcC9ib3R0b20uXG4gKiBAcmV0dXJucyBUaGUgcGFkZGluZyB2YWx1ZXMgKHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdClcbiAqIEBzaW5jZSAzLjAuMFxuICovIGZ1bmN0aW9uIHRvVFJCTCh2YWx1ZSkge1xuICAgIHJldHVybiBfcmVhZFZhbHVlVG9Qcm9wcyh2YWx1ZSwge1xuICAgICAgICB0b3A6ICd5JyxcbiAgICAgICAgcmlnaHQ6ICd4JyxcbiAgICAgICAgYm90dG9tOiAneScsXG4gICAgICAgIGxlZnQ6ICd4J1xuICAgIH0pO1xufVxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gdmFsdWUgaW50byBhIFRSQkwgY29ybmVycyBvYmplY3QgKHNpbWlsYXIgd2l0aCBjc3MgYm9yZGVyLXJhZGl1cykuXG4gKiBAcGFyYW0gdmFsdWUgLSBJZiBhIG51bWJlciwgc2V0IHRoZSB2YWx1ZSB0byBhbGwgVFJCTCBjb3JuZXIgY29tcG9uZW50cyxcbiAqICBlbHNlLCBpZiBhbiBvYmplY3QsIHVzZSBkZWZpbmVkIHByb3BlcnRpZXMgYW5kIHNldHMgdW5kZWZpbmVkIG9uZXMgdG8gMC5cbiAqIEByZXR1cm5zIFRoZSBUUkJMIGNvcm5lciB2YWx1ZXMgKHRvcExlZnQsIHRvcFJpZ2h0LCBib3R0b21MZWZ0LCBib3R0b21SaWdodClcbiAqIEBzaW5jZSAzLjAuMFxuICovIGZ1bmN0aW9uIHRvVFJCTENvcm5lcnModmFsdWUpIHtcbiAgICByZXR1cm4gX3JlYWRWYWx1ZVRvUHJvcHModmFsdWUsIFtcbiAgICAgICAgJ3RvcExlZnQnLFxuICAgICAgICAndG9wUmlnaHQnLFxuICAgICAgICAnYm90dG9tTGVmdCcsXG4gICAgICAgICdib3R0b21SaWdodCdcbiAgICBdKTtcbn1cbi8qKlxuICogQ29udmVydHMgdGhlIGdpdmVuIHZhbHVlIGludG8gYSBwYWRkaW5nIG9iamVjdCB3aXRoIHByZS1jb21wdXRlZCB3aWR0aC9oZWlnaHQuXG4gKiBAcGFyYW0gdmFsdWUgLSBJZiBhIG51bWJlciwgc2V0IHRoZSB2YWx1ZSB0byBhbGwgVFJCTCBjb21wb25lbnQsXG4gKiAgZWxzZSwgaWYgYW4gb2JqZWN0LCB1c2UgZGVmaW5lZCBwcm9wZXJ0aWVzIGFuZCBzZXRzIHVuZGVmaW5lZCBvbmVzIHRvIDAuXG4gKiAgeCAvIHkgYXJlIHNob3J0aGFuZHMgZm9yIHNhbWUgdmFsdWUgZm9yIGxlZnQvcmlnaHQgYW5kIHRvcC9ib3R0b20uXG4gKiBAcmV0dXJucyBUaGUgcGFkZGluZyB2YWx1ZXMgKHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdCwgd2lkdGgsIGhlaWdodClcbiAqIEBzaW5jZSAyLjcuMFxuICovIGZ1bmN0aW9uIHRvUGFkZGluZyh2YWx1ZSkge1xuICAgIGNvbnN0IG9iaiA9IHRvVFJCTCh2YWx1ZSk7XG4gICAgb2JqLndpZHRoID0gb2JqLmxlZnQgKyBvYmoucmlnaHQ7XG4gICAgb2JqLmhlaWdodCA9IG9iai50b3AgKyBvYmouYm90dG9tO1xuICAgIHJldHVybiBvYmo7XG59XG4vKipcbiAqIFBhcnNlcyBmb250IG9wdGlvbnMgYW5kIHJldHVybnMgdGhlIGZvbnQgb2JqZWN0LlxuICogQHBhcmFtIG9wdGlvbnMgLSBBIG9iamVjdCB0aGF0IGNvbnRhaW5zIGZvbnQgb3B0aW9ucyB0byBiZSBwYXJzZWQuXG4gKiBAcGFyYW0gZmFsbGJhY2sgLSBBIG9iamVjdCB0aGF0IGNvbnRhaW5zIGZhbGxiYWNrIGZvbnQgb3B0aW9ucy5cbiAqIEByZXR1cm4gVGhlIGZvbnQgb2JqZWN0LlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiB0b0ZvbnQob3B0aW9ucywgZmFsbGJhY2spIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBmYWxsYmFjayA9IGZhbGxiYWNrIHx8IGRlZmF1bHRzLmZvbnQ7XG4gICAgbGV0IHNpemUgPSB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLnNpemUsIGZhbGxiYWNrLnNpemUpO1xuICAgIGlmICh0eXBlb2Ygc2l6ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgc2l6ZSA9IHBhcnNlSW50KHNpemUsIDEwKTtcbiAgICB9XG4gICAgbGV0IHN0eWxlID0gdmFsdWVPckRlZmF1bHQob3B0aW9ucy5zdHlsZSwgZmFsbGJhY2suc3R5bGUpO1xuICAgIGlmIChzdHlsZSAmJiAhKCcnICsgc3R5bGUpLm1hdGNoKEZPTlRfU1RZTEUpKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignSW52YWxpZCBmb250IHN0eWxlIHNwZWNpZmllZDogXCInICsgc3R5bGUgKyAnXCInKTtcbiAgICAgICAgc3R5bGUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IGZvbnQgPSB7XG4gICAgICAgIGZhbWlseTogdmFsdWVPckRlZmF1bHQob3B0aW9ucy5mYW1pbHksIGZhbGxiYWNrLmZhbWlseSksXG4gICAgICAgIGxpbmVIZWlnaHQ6IHRvTGluZUhlaWdodCh2YWx1ZU9yRGVmYXVsdChvcHRpb25zLmxpbmVIZWlnaHQsIGZhbGxiYWNrLmxpbmVIZWlnaHQpLCBzaXplKSxcbiAgICAgICAgc2l6ZSxcbiAgICAgICAgc3R5bGUsXG4gICAgICAgIHdlaWdodDogdmFsdWVPckRlZmF1bHQob3B0aW9ucy53ZWlnaHQsIGZhbGxiYWNrLndlaWdodCksXG4gICAgICAgIHN0cmluZzogJydcbiAgICB9O1xuICAgIGZvbnQuc3RyaW5nID0gdG9Gb250U3RyaW5nKGZvbnQpO1xuICAgIHJldHVybiBmb250O1xufVxuLyoqXG4gKiBFdmFsdWF0ZXMgdGhlIGdpdmVuIGBpbnB1dHNgIHNlcXVlbnRpYWxseSBhbmQgcmV0dXJucyB0aGUgZmlyc3QgZGVmaW5lZCB2YWx1ZS5cbiAqIEBwYXJhbSBpbnB1dHMgLSBBbiBhcnJheSBvZiB2YWx1ZXMsIGZhbGxpbmcgYmFjayB0byB0aGUgbGFzdCB2YWx1ZS5cbiAqIEBwYXJhbSBjb250ZXh0IC0gSWYgZGVmaW5lZCBhbmQgdGhlIGN1cnJlbnQgdmFsdWUgaXMgYSBmdW5jdGlvbiwgdGhlIHZhbHVlXG4gKiBpcyBjYWxsZWQgd2l0aCBgY29udGV4dGAgYXMgZmlyc3QgYXJndW1lbnQgYW5kIHRoZSByZXN1bHQgYmVjb21lcyB0aGUgbmV3IGlucHV0LlxuICogQHBhcmFtIGluZGV4IC0gSWYgZGVmaW5lZCBhbmQgdGhlIGN1cnJlbnQgdmFsdWUgaXMgYW4gYXJyYXksIHRoZSB2YWx1ZVxuICogYXQgYGluZGV4YCBiZWNvbWUgdGhlIG5ldyBpbnB1dC5cbiAqIEBwYXJhbSBpbmZvIC0gb2JqZWN0IHRvIHJldHVybiBpbmZvcm1hdGlvbiBhYm91dCByZXNvbHV0aW9uIGluXG4gKiBAcGFyYW0gaW5mby5jYWNoZWFibGUgLSBXaWxsIGJlIHNldCB0byBgZmFsc2VgIGlmIG9wdGlvbiBpcyBub3QgY2FjaGVhYmxlLlxuICogQHNpbmNlIDIuNy4wXG4gKi8gZnVuY3Rpb24gcmVzb2x2ZShpbnB1dHMsIGNvbnRleHQsIGluZGV4LCBpbmZvKSB7XG4gICAgbGV0IGNhY2hlYWJsZSA9IHRydWU7XG4gICAgbGV0IGksIGlsZW4sIHZhbHVlO1xuICAgIGZvcihpID0gMCwgaWxlbiA9IGlucHV0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICB2YWx1ZSA9IGlucHV0c1tpXTtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250ZXh0ICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlKGNvbnRleHQpO1xuICAgICAgICAgICAgY2FjaGVhYmxlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluZGV4ICE9PSB1bmRlZmluZWQgJiYgaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWVbaW5kZXggJSB2YWx1ZS5sZW5ndGhdO1xuICAgICAgICAgICAgY2FjaGVhYmxlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmIChpbmZvICYmICFjYWNoZWFibGUpIHtcbiAgICAgICAgICAgICAgICBpbmZvLmNhY2hlYWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBAcGFyYW0gbWlubWF4XG4gKiBAcGFyYW0gZ3JhY2VcbiAqIEBwYXJhbSBiZWdpbkF0WmVyb1xuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfYWRkR3JhY2UobWlubWF4LCBncmFjZSwgYmVnaW5BdFplcm8pIHtcbiAgICBjb25zdCB7IG1pbiAsIG1heCAgfSA9IG1pbm1heDtcbiAgICBjb25zdCBjaGFuZ2UgPSB0b0RpbWVuc2lvbihncmFjZSwgKG1heCAtIG1pbikgLyAyKTtcbiAgICBjb25zdCBrZWVwWmVybyA9ICh2YWx1ZSwgYWRkKT0+YmVnaW5BdFplcm8gJiYgdmFsdWUgPT09IDAgPyAwIDogdmFsdWUgKyBhZGQ7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWluOiBrZWVwWmVybyhtaW4sIC1NYXRoLmFicyhjaGFuZ2UpKSxcbiAgICAgICAgbWF4OiBrZWVwWmVybyhtYXgsIGNoYW5nZSlcbiAgICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlQ29udGV4dChwYXJlbnRDb250ZXh0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShwYXJlbnRDb250ZXh0KSwgY29udGV4dCk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIFByb3h5IGZvciByZXNvbHZpbmcgcmF3IHZhbHVlcyBmb3Igb3B0aW9ucy5cbiAqIEBwYXJhbSBzY29wZXMgLSBUaGUgb3B0aW9uIHNjb3BlcyB0byBsb29rIGZvciB2YWx1ZXMsIGluIHJlc29sdXRpb24gb3JkZXJcbiAqIEBwYXJhbSBwcmVmaXhlcyAtIFRoZSBwcmVmaXhlcyBmb3IgdmFsdWVzLCBpbiByZXNvbHV0aW9uIG9yZGVyLlxuICogQHBhcmFtIHJvb3RTY29wZXMgLSBUaGUgcm9vdCBvcHRpb24gc2NvcGVzXG4gKiBAcGFyYW0gZmFsbGJhY2sgLSBQYXJlbnQgc2NvcGVzIGZhbGxiYWNrXG4gKiBAcGFyYW0gZ2V0VGFyZ2V0IC0gY2FsbGJhY2sgZm9yIGdldHRpbmcgdGhlIHRhcmdldCBmb3IgY2hhbmdlZCB2YWx1ZXNcbiAqIEByZXR1cm5zIFByb3h5XG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9jcmVhdGVSZXNvbHZlcihzY29wZXMsIHByZWZpeGVzID0gW1xuICAgICcnXG5dLCByb290U2NvcGVzLCBmYWxsYmFjaywgZ2V0VGFyZ2V0ID0gKCk9PnNjb3Blc1swXSkge1xuICAgIGNvbnN0IGZpbmFsUm9vdFNjb3BlcyA9IHJvb3RTY29wZXMgfHwgc2NvcGVzO1xuICAgIGlmICh0eXBlb2YgZmFsbGJhY2sgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGZhbGxiYWNrID0gX3Jlc29sdmUoJ19mYWxsYmFjaycsIHNjb3Blcyk7XG4gICAgfVxuICAgIGNvbnN0IGNhY2hlID0ge1xuICAgICAgICBbU3ltYm9sLnRvU3RyaW5nVGFnXTogJ09iamVjdCcsXG4gICAgICAgIF9jYWNoZWFibGU6IHRydWUsXG4gICAgICAgIF9zY29wZXM6IHNjb3BlcyxcbiAgICAgICAgX3Jvb3RTY29wZXM6IGZpbmFsUm9vdFNjb3BlcyxcbiAgICAgICAgX2ZhbGxiYWNrOiBmYWxsYmFjayxcbiAgICAgICAgX2dldFRhcmdldDogZ2V0VGFyZ2V0LFxuICAgICAgICBvdmVycmlkZTogKHNjb3BlKT0+X2NyZWF0ZVJlc29sdmVyKFtcbiAgICAgICAgICAgICAgICBzY29wZSxcbiAgICAgICAgICAgICAgICAuLi5zY29wZXNcbiAgICAgICAgICAgIF0sIHByZWZpeGVzLCBmaW5hbFJvb3RTY29wZXMsIGZhbGxiYWNrKVxuICAgIH07XG4gICAgcmV0dXJuIG5ldyBQcm94eShjYWNoZSwge1xuICAgICAgICAvKipcbiAgICAgKiBBIHRyYXAgZm9yIHRoZSBkZWxldGUgb3BlcmF0b3IuXG4gICAgICovIGRlbGV0ZVByb3BlcnR5ICh0YXJnZXQsIHByb3ApIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0YXJnZXRbcHJvcF07IC8vIHJlbW92ZSBmcm9tIGNhY2hlXG4gICAgICAgICAgICBkZWxldGUgdGFyZ2V0Ll9rZXlzOyAvLyByZW1vdmUgY2FjaGVkIGtleXNcbiAgICAgICAgICAgIGRlbGV0ZSBzY29wZXNbMF1bcHJvcF07IC8vIHJlbW92ZSBmcm9tIHRvcCBsZXZlbCBzY29wZVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAqIEEgdHJhcCBmb3IgZ2V0dGluZyBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICovIGdldCAodGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgICAgICByZXR1cm4gX2NhY2hlZCh0YXJnZXQsIHByb3AsICgpPT5fcmVzb2x2ZVdpdGhQcmVmaXhlcyhwcm9wLCBwcmVmaXhlcywgc2NvcGVzLCB0YXJnZXQpKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICogQSB0cmFwIGZvciBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLlxuICAgICAqIEFsc28gdXNlZCBieSBPYmplY3QuaGFzT3duUHJvcGVydHkuXG4gICAgICovIGdldE93blByb3BlcnR5RGVzY3JpcHRvciAodGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0Ll9zY29wZXNbMF0sIHByb3ApO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgKiBBIHRyYXAgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZi5cbiAgICAgKi8gZ2V0UHJvdG90eXBlT2YgKCkge1xuICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0UHJvdG90eXBlT2Yoc2NvcGVzWzBdKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICogQSB0cmFwIGZvciB0aGUgaW4gb3BlcmF0b3IuXG4gICAgICovIGhhcyAodGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0S2V5c0Zyb21BbGxTY29wZXModGFyZ2V0KS5pbmNsdWRlcyhwcm9wKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICogQSB0cmFwIGZvciBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyBhbmQgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scy5cbiAgICAgKi8gb3duS2V5cyAodGFyZ2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0S2V5c0Zyb21BbGxTY29wZXModGFyZ2V0KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICogQSB0cmFwIGZvciBzZXR0aW5nIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKi8gc2V0ICh0YXJnZXQsIHByb3AsIHZhbHVlKSB7XG4gICAgICAgICAgICBjb25zdCBzdG9yYWdlID0gdGFyZ2V0Ll9zdG9yYWdlIHx8ICh0YXJnZXQuX3N0b3JhZ2UgPSBnZXRUYXJnZXQoKSk7XG4gICAgICAgICAgICB0YXJnZXRbcHJvcF0gPSBzdG9yYWdlW3Byb3BdID0gdmFsdWU7IC8vIHNldCB0byB0b3AgbGV2ZWwgc2NvcGUgKyBjYWNoZVxuICAgICAgICAgICAgZGVsZXRlIHRhcmdldC5fa2V5czsgLy8gcmVtb3ZlIGNhY2hlZCBrZXlzXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuLyoqXG4gKiBSZXR1cm5zIGFuIFByb3h5IGZvciByZXNvbHZpbmcgb3B0aW9uIHZhbHVlcyB3aXRoIGNvbnRleHQuXG4gKiBAcGFyYW0gcHJveHkgLSBUaGUgUHJveHkgcmV0dXJuZWQgYnkgYF9jcmVhdGVSZXNvbHZlcmBcbiAqIEBwYXJhbSBjb250ZXh0IC0gQ29udGV4dCBvYmplY3QgZm9yIHNjcmlwdGFibGUvaW5kZXhhYmxlIG9wdGlvbnNcbiAqIEBwYXJhbSBzdWJQcm94eSAtIFRoZSBwcm94eSBwcm92aWRlZCBmb3Igc2NyaXB0YWJsZSBvcHRpb25zXG4gKiBAcGFyYW0gZGVzY3JpcHRvckRlZmF1bHRzIC0gRGVmYXVsdHMgZm9yIGRlc2NyaXB0b3JzXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9hdHRhY2hDb250ZXh0KHByb3h5LCBjb250ZXh0LCBzdWJQcm94eSwgZGVzY3JpcHRvckRlZmF1bHRzKSB7XG4gICAgY29uc3QgY2FjaGUgPSB7XG4gICAgICAgIF9jYWNoZWFibGU6IGZhbHNlLFxuICAgICAgICBfcHJveHk6IHByb3h5LFxuICAgICAgICBfY29udGV4dDogY29udGV4dCxcbiAgICAgICAgX3N1YlByb3h5OiBzdWJQcm94eSxcbiAgICAgICAgX3N0YWNrOiBuZXcgU2V0KCksXG4gICAgICAgIF9kZXNjcmlwdG9yczogX2Rlc2NyaXB0b3JzKHByb3h5LCBkZXNjcmlwdG9yRGVmYXVsdHMpLFxuICAgICAgICBzZXRDb250ZXh0OiAoY3R4KT0+X2F0dGFjaENvbnRleHQocHJveHksIGN0eCwgc3ViUHJveHksIGRlc2NyaXB0b3JEZWZhdWx0cyksXG4gICAgICAgIG92ZXJyaWRlOiAoc2NvcGUpPT5fYXR0YWNoQ29udGV4dChwcm94eS5vdmVycmlkZShzY29wZSksIGNvbnRleHQsIHN1YlByb3h5LCBkZXNjcmlwdG9yRGVmYXVsdHMpXG4gICAgfTtcbiAgICByZXR1cm4gbmV3IFByb3h5KGNhY2hlLCB7XG4gICAgICAgIC8qKlxuICAgICAqIEEgdHJhcCBmb3IgdGhlIGRlbGV0ZSBvcGVyYXRvci5cbiAgICAgKi8gZGVsZXRlUHJvcGVydHkgKHRhcmdldCwgcHJvcCkge1xuICAgICAgICAgICAgZGVsZXRlIHRhcmdldFtwcm9wXTsgLy8gcmVtb3ZlIGZyb20gY2FjaGVcbiAgICAgICAgICAgIGRlbGV0ZSBwcm94eVtwcm9wXTsgLy8gcmVtb3ZlIGZyb20gcHJveHlcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgKiBBIHRyYXAgZm9yIGdldHRpbmcgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqLyBnZXQgKHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBfY2FjaGVkKHRhcmdldCwgcHJvcCwgKCk9Pl9yZXNvbHZlV2l0aENvbnRleHQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgKiBBIHRyYXAgZm9yIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IuXG4gICAgICogQWxzbyB1c2VkIGJ5IE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5cbiAgICAgKi8gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICh0YXJnZXQsIHByb3ApIHtcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQuX2Rlc2NyaXB0b3JzLmFsbEtleXMgPyBSZWZsZWN0Lmhhcyhwcm94eSwgcHJvcCkgPyB7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICAgIH0gOiB1bmRlZmluZWQgOiBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwcm94eSwgcHJvcCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAqIEEgdHJhcCBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mLlxuICAgICAqLyBnZXRQcm90b3R5cGVPZiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5nZXRQcm90b3R5cGVPZihwcm94eSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAqIEEgdHJhcCBmb3IgdGhlIGluIG9wZXJhdG9yLlxuICAgICAqLyBoYXMgKHRhcmdldCwgcHJvcCkge1xuICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuaGFzKHByb3h5LCBwcm9wKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICogQSB0cmFwIGZvciBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyBhbmQgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scy5cbiAgICAgKi8gb3duS2V5cyAoKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5vd25LZXlzKHByb3h5KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICogQSB0cmFwIGZvciBzZXR0aW5nIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKi8gc2V0ICh0YXJnZXQsIHByb3AsIHZhbHVlKSB7XG4gICAgICAgICAgICBwcm94eVtwcm9wXSA9IHZhbHVlOyAvLyBzZXQgdG8gcHJveHlcbiAgICAgICAgICAgIGRlbGV0ZSB0YXJnZXRbcHJvcF07IC8vIHJlbW92ZSBmcm9tIGNhY2hlXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9kZXNjcmlwdG9ycyhwcm94eSwgZGVmYXVsdHMgPSB7XG4gICAgc2NyaXB0YWJsZTogdHJ1ZSxcbiAgICBpbmRleGFibGU6IHRydWVcbn0pIHtcbiAgICBjb25zdCB7IF9zY3JpcHRhYmxlID1kZWZhdWx0cy5zY3JpcHRhYmxlICwgX2luZGV4YWJsZSA9ZGVmYXVsdHMuaW5kZXhhYmxlICwgX2FsbEtleXMgPWRlZmF1bHRzLmFsbEtleXMgIH0gPSBwcm94eTtcbiAgICByZXR1cm4ge1xuICAgICAgICBhbGxLZXlzOiBfYWxsS2V5cyxcbiAgICAgICAgc2NyaXB0YWJsZTogX3NjcmlwdGFibGUsXG4gICAgICAgIGluZGV4YWJsZTogX2luZGV4YWJsZSxcbiAgICAgICAgaXNTY3JpcHRhYmxlOiBpc0Z1bmN0aW9uKF9zY3JpcHRhYmxlKSA/IF9zY3JpcHRhYmxlIDogKCk9Pl9zY3JpcHRhYmxlLFxuICAgICAgICBpc0luZGV4YWJsZTogaXNGdW5jdGlvbihfaW5kZXhhYmxlKSA/IF9pbmRleGFibGUgOiAoKT0+X2luZGV4YWJsZVxuICAgIH07XG59XG5jb25zdCByZWFkS2V5ID0gKHByZWZpeCwgbmFtZSk9PnByZWZpeCA/IHByZWZpeCArIF9jYXBpdGFsaXplKG5hbWUpIDogbmFtZTtcbmNvbnN0IG5lZWRzU3ViUmVzb2x2ZXIgPSAocHJvcCwgdmFsdWUpPT5pc09iamVjdCh2YWx1ZSkgJiYgcHJvcCAhPT0gJ2FkYXB0ZXJzJyAmJiAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKSA9PT0gbnVsbCB8fCB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KTtcbmZ1bmN0aW9uIF9jYWNoZWQodGFyZ2V0LCBwcm9wLCByZXNvbHZlKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIHByb3ApKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXRbcHJvcF07XG4gICAgfVxuICAgIGNvbnN0IHZhbHVlID0gcmVzb2x2ZSgpO1xuICAgIC8vIGNhY2hlIHRoZSByZXNvbHZlZCB2YWx1ZVxuICAgIHRhcmdldFtwcm9wXSA9IHZhbHVlO1xuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIF9yZXNvbHZlV2l0aENvbnRleHQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikge1xuICAgIGNvbnN0IHsgX3Byb3h5ICwgX2NvbnRleHQgLCBfc3ViUHJveHkgLCBfZGVzY3JpcHRvcnM6IGRlc2NyaXB0b3JzICB9ID0gdGFyZ2V0O1xuICAgIGxldCB2YWx1ZSA9IF9wcm94eVtwcm9wXTsgLy8gcmVzb2x2ZSBmcm9tIHByb3h5XG4gICAgLy8gcmVzb2x2ZSB3aXRoIGNvbnRleHRcbiAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkgJiYgZGVzY3JpcHRvcnMuaXNTY3JpcHRhYmxlKHByb3ApKSB7XG4gICAgICAgIHZhbHVlID0gX3Jlc29sdmVTY3JpcHRhYmxlKHByb3AsIHZhbHVlLCB0YXJnZXQsIHJlY2VpdmVyKTtcbiAgICB9XG4gICAgaWYgKGlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCkge1xuICAgICAgICB2YWx1ZSA9IF9yZXNvbHZlQXJyYXkocHJvcCwgdmFsdWUsIHRhcmdldCwgZGVzY3JpcHRvcnMuaXNJbmRleGFibGUpO1xuICAgIH1cbiAgICBpZiAobmVlZHNTdWJSZXNvbHZlcihwcm9wLCB2YWx1ZSkpIHtcbiAgICAgICAgLy8gaWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzIGFuIG9iamVjdCwgY3JlYXRlIGEgc3ViIHJlc29sdmVyIGZvciBpdFxuICAgICAgICB2YWx1ZSA9IF9hdHRhY2hDb250ZXh0KHZhbHVlLCBfY29udGV4dCwgX3N1YlByb3h5ICYmIF9zdWJQcm94eVtwcm9wXSwgZGVzY3JpcHRvcnMpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBfcmVzb2x2ZVNjcmlwdGFibGUocHJvcCwgZ2V0VmFsdWUsIHRhcmdldCwgcmVjZWl2ZXIpIHtcbiAgICBjb25zdCB7IF9wcm94eSAsIF9jb250ZXh0ICwgX3N1YlByb3h5ICwgX3N0YWNrICB9ID0gdGFyZ2V0O1xuICAgIGlmIChfc3RhY2suaGFzKHByb3ApKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUmVjdXJzaW9uIGRldGVjdGVkOiAnICsgQXJyYXkuZnJvbShfc3RhY2spLmpvaW4oJy0+JykgKyAnLT4nICsgcHJvcCk7XG4gICAgfVxuICAgIF9zdGFjay5hZGQocHJvcCk7XG4gICAgbGV0IHZhbHVlID0gZ2V0VmFsdWUoX2NvbnRleHQsIF9zdWJQcm94eSB8fCByZWNlaXZlcik7XG4gICAgX3N0YWNrLmRlbGV0ZShwcm9wKTtcbiAgICBpZiAobmVlZHNTdWJSZXNvbHZlcihwcm9wLCB2YWx1ZSkpIHtcbiAgICAgICAgLy8gV2hlbiBzY3JpcHRhYmxlIG9wdGlvbiByZXR1cm5zIGFuIG9iamVjdCwgY3JlYXRlIGEgcmVzb2x2ZXIgb24gdGhhdC5cbiAgICAgICAgdmFsdWUgPSBjcmVhdGVTdWJSZXNvbHZlcihfcHJveHkuX3Njb3BlcywgX3Byb3h5LCBwcm9wLCB2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIF9yZXNvbHZlQXJyYXkocHJvcCwgdmFsdWUsIHRhcmdldCwgaXNJbmRleGFibGUpIHtcbiAgICBjb25zdCB7IF9wcm94eSAsIF9jb250ZXh0ICwgX3N1YlByb3h5ICwgX2Rlc2NyaXB0b3JzOiBkZXNjcmlwdG9ycyAgfSA9IHRhcmdldDtcbiAgICBpZiAodHlwZW9mIF9jb250ZXh0LmluZGV4ICE9PSAndW5kZWZpbmVkJyAmJiBpc0luZGV4YWJsZShwcm9wKSkge1xuICAgICAgICByZXR1cm4gdmFsdWVbX2NvbnRleHQuaW5kZXggJSB2YWx1ZS5sZW5ndGhdO1xuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsdWVbMF0pKSB7XG4gICAgICAgIC8vIEFycmF5IG9mIG9iamVjdHMsIHJldHVybiBhcnJheSBvciByZXNvbHZlcnNcbiAgICAgICAgY29uc3QgYXJyID0gdmFsdWU7XG4gICAgICAgIGNvbnN0IHNjb3BlcyA9IF9wcm94eS5fc2NvcGVzLmZpbHRlcigocyk9PnMgIT09IGFycik7XG4gICAgICAgIHZhbHVlID0gW107XG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBhcnIpe1xuICAgICAgICAgICAgY29uc3QgcmVzb2x2ZXIgPSBjcmVhdGVTdWJSZXNvbHZlcihzY29wZXMsIF9wcm94eSwgcHJvcCwgaXRlbSk7XG4gICAgICAgICAgICB2YWx1ZS5wdXNoKF9hdHRhY2hDb250ZXh0KHJlc29sdmVyLCBfY29udGV4dCwgX3N1YlByb3h5ICYmIF9zdWJQcm94eVtwcm9wXSwgZGVzY3JpcHRvcnMpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiByZXNvbHZlRmFsbGJhY2soZmFsbGJhY2ssIHByb3AsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oZmFsbGJhY2spID8gZmFsbGJhY2socHJvcCwgdmFsdWUpIDogZmFsbGJhY2s7XG59XG5jb25zdCBnZXRTY29wZSA9IChrZXksIHBhcmVudCk9PmtleSA9PT0gdHJ1ZSA/IHBhcmVudCA6IHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnID8gcmVzb2x2ZU9iamVjdEtleShwYXJlbnQsIGtleSkgOiB1bmRlZmluZWQ7XG5mdW5jdGlvbiBhZGRTY29wZXMoc2V0LCBwYXJlbnRTY29wZXMsIGtleSwgcGFyZW50RmFsbGJhY2ssIHZhbHVlKSB7XG4gICAgZm9yIChjb25zdCBwYXJlbnQgb2YgcGFyZW50U2NvcGVzKXtcbiAgICAgICAgY29uc3Qgc2NvcGUgPSBnZXRTY29wZShrZXksIHBhcmVudCk7XG4gICAgICAgIGlmIChzY29wZSkge1xuICAgICAgICAgICAgc2V0LmFkZChzY29wZSk7XG4gICAgICAgICAgICBjb25zdCBmYWxsYmFjayA9IHJlc29sdmVGYWxsYmFjayhzY29wZS5fZmFsbGJhY2ssIGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBmYWxsYmFjayAhPT0gJ3VuZGVmaW5lZCcgJiYgZmFsbGJhY2sgIT09IGtleSAmJiBmYWxsYmFjayAhPT0gcGFyZW50RmFsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAvLyBXaGVuIHdlIHJlYWNoIHRoZSBkZXNjcmlwdG9yIHRoYXQgZGVmaW5lcyBhIG5ldyBfZmFsbGJhY2ssIHJldHVybiB0aGF0LlxuICAgICAgICAgICAgICAgIC8vIFRoZSBmYWxsYmFjayB3aWxsIHJlc3VtZSB0byB0aGF0IG5ldyBzY29wZS5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsbGJhY2s7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoc2NvcGUgPT09IGZhbHNlICYmIHR5cGVvZiBwYXJlbnRGYWxsYmFjayAhPT0gJ3VuZGVmaW5lZCcgJiYga2V5ICE9PSBwYXJlbnRGYWxsYmFjaykge1xuICAgICAgICAgICAgLy8gRmFsbGJhY2sgdG8gYGZhbHNlYCByZXN1bHRzIHRvIGBmYWxzZWAsIHdoZW4gZmFsbGluZyBiYWNrIHRvIGRpZmZlcmVudCBrZXkuXG4gICAgICAgICAgICAvLyBGb3IgZXhhbXBsZSBgaW50ZXJhY3Rpb25gIGZyb20gYGhvdmVyYCBvciBgcGx1Z2lucy50b29sdGlwYCBhbmQgYGFuaW1hdGlvbmAgZnJvbSBgYW5pbWF0aW9uc2BcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVN1YlJlc29sdmVyKHBhcmVudFNjb3BlcywgcmVzb2x2ZXIsIHByb3AsIHZhbHVlKSB7XG4gICAgY29uc3Qgcm9vdFNjb3BlcyA9IHJlc29sdmVyLl9yb290U2NvcGVzO1xuICAgIGNvbnN0IGZhbGxiYWNrID0gcmVzb2x2ZUZhbGxiYWNrKHJlc29sdmVyLl9mYWxsYmFjaywgcHJvcCwgdmFsdWUpO1xuICAgIGNvbnN0IGFsbFNjb3BlcyA9IFtcbiAgICAgICAgLi4ucGFyZW50U2NvcGVzLFxuICAgICAgICAuLi5yb290U2NvcGVzXG4gICAgXTtcbiAgICBjb25zdCBzZXQgPSBuZXcgU2V0KCk7XG4gICAgc2V0LmFkZCh2YWx1ZSk7XG4gICAgbGV0IGtleSA9IGFkZFNjb3Blc0Zyb21LZXkoc2V0LCBhbGxTY29wZXMsIHByb3AsIGZhbGxiYWNrIHx8IHByb3AsIHZhbHVlKTtcbiAgICBpZiAoa2V5ID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBmYWxsYmFjayAhPT0gJ3VuZGVmaW5lZCcgJiYgZmFsbGJhY2sgIT09IHByb3ApIHtcbiAgICAgICAga2V5ID0gYWRkU2NvcGVzRnJvbUtleShzZXQsIGFsbFNjb3BlcywgZmFsbGJhY2ssIGtleSwgdmFsdWUpO1xuICAgICAgICBpZiAoa2V5ID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIF9jcmVhdGVSZXNvbHZlcihBcnJheS5mcm9tKHNldCksIFtcbiAgICAgICAgJydcbiAgICBdLCByb290U2NvcGVzLCBmYWxsYmFjaywgKCk9PnN1YkdldFRhcmdldChyZXNvbHZlciwgcHJvcCwgdmFsdWUpKTtcbn1cbmZ1bmN0aW9uIGFkZFNjb3Blc0Zyb21LZXkoc2V0LCBhbGxTY29wZXMsIGtleSwgZmFsbGJhY2ssIGl0ZW0pIHtcbiAgICB3aGlsZShrZXkpe1xuICAgICAgICBrZXkgPSBhZGRTY29wZXMoc2V0LCBhbGxTY29wZXMsIGtleSwgZmFsbGJhY2ssIGl0ZW0pO1xuICAgIH1cbiAgICByZXR1cm4ga2V5O1xufVxuZnVuY3Rpb24gc3ViR2V0VGFyZ2V0KHJlc29sdmVyLCBwcm9wLCB2YWx1ZSkge1xuICAgIGNvbnN0IHBhcmVudCA9IHJlc29sdmVyLl9nZXRUYXJnZXQoKTtcbiAgICBpZiAoIShwcm9wIGluIHBhcmVudCkpIHtcbiAgICAgICAgcGFyZW50W3Byb3BdID0ge307XG4gICAgfVxuICAgIGNvbnN0IHRhcmdldCA9IHBhcmVudFtwcm9wXTtcbiAgICBpZiAoaXNBcnJheSh0YXJnZXQpICYmIGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICAvLyBGb3IgYXJyYXkgb2Ygb2JqZWN0cywgdGhlIG9iamVjdCBpcyB1c2VkIHRvIHN0b3JlIHVwZGF0ZWQgdmFsdWVzXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldCB8fCB7fTtcbn1cbmZ1bmN0aW9uIF9yZXNvbHZlV2l0aFByZWZpeGVzKHByb3AsIHByZWZpeGVzLCBzY29wZXMsIHByb3h5KSB7XG4gICAgbGV0IHZhbHVlO1xuICAgIGZvciAoY29uc3QgcHJlZml4IG9mIHByZWZpeGVzKXtcbiAgICAgICAgdmFsdWUgPSBfcmVzb2x2ZShyZWFkS2V5KHByZWZpeCwgcHJvcCksIHNjb3Blcyk7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gbmVlZHNTdWJSZXNvbHZlcihwcm9wLCB2YWx1ZSkgPyBjcmVhdGVTdWJSZXNvbHZlcihzY29wZXMsIHByb3h5LCBwcm9wLCB2YWx1ZSkgOiB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIF9yZXNvbHZlKGtleSwgc2NvcGVzKSB7XG4gICAgZm9yIChjb25zdCBzY29wZSBvZiBzY29wZXMpe1xuICAgICAgICBpZiAoIXNjb3BlKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2YWx1ZSA9IHNjb3BlW2tleV07XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBnZXRLZXlzRnJvbUFsbFNjb3Blcyh0YXJnZXQpIHtcbiAgICBsZXQga2V5cyA9IHRhcmdldC5fa2V5cztcbiAgICBpZiAoIWtleXMpIHtcbiAgICAgICAga2V5cyA9IHRhcmdldC5fa2V5cyA9IHJlc29sdmVLZXlzRnJvbUFsbFNjb3Blcyh0YXJnZXQuX3Njb3Blcyk7XG4gICAgfVxuICAgIHJldHVybiBrZXlzO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUtleXNGcm9tQWxsU2NvcGVzKHNjb3Blcykge1xuICAgIGNvbnN0IHNldCA9IG5ldyBTZXQoKTtcbiAgICBmb3IgKGNvbnN0IHNjb3BlIG9mIHNjb3Blcyl7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHNjb3BlKS5maWx0ZXIoKGspPT4hay5zdGFydHNXaXRoKCdfJykpKXtcbiAgICAgICAgICAgIHNldC5hZGQoa2V5KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gQXJyYXkuZnJvbShzZXQpO1xufVxuZnVuY3Rpb24gX3BhcnNlT2JqZWN0RGF0YVJhZGlhbFNjYWxlKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgIGNvbnN0IHsgaVNjYWxlICB9ID0gbWV0YTtcbiAgICBjb25zdCB7IGtleSA9J3InICB9ID0gdGhpcy5fcGFyc2luZztcbiAgICBjb25zdCBwYXJzZWQgPSBuZXcgQXJyYXkoY291bnQpO1xuICAgIGxldCBpLCBpbGVuLCBpbmRleCwgaXRlbTtcbiAgICBmb3IoaSA9IDAsIGlsZW4gPSBjb3VudDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIGluZGV4ID0gaSArIHN0YXJ0O1xuICAgICAgICBpdGVtID0gZGF0YVtpbmRleF07XG4gICAgICAgIHBhcnNlZFtpXSA9IHtcbiAgICAgICAgICAgIHI6IGlTY2FsZS5wYXJzZShyZXNvbHZlT2JqZWN0S2V5KGl0ZW0sIGtleSksIGluZGV4KVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VkO1xufVxuXG5jb25zdCBFUFNJTE9OID0gTnVtYmVyLkVQU0lMT04gfHwgMWUtMTQ7XG5jb25zdCBnZXRQb2ludCA9IChwb2ludHMsIGkpPT5pIDwgcG9pbnRzLmxlbmd0aCAmJiAhcG9pbnRzW2ldLnNraXAgJiYgcG9pbnRzW2ldO1xuY29uc3QgZ2V0VmFsdWVBeGlzID0gKGluZGV4QXhpcyk9PmluZGV4QXhpcyA9PT0gJ3gnID8gJ3knIDogJ3gnO1xuZnVuY3Rpb24gc3BsaW5lQ3VydmUoZmlyc3RQb2ludCwgbWlkZGxlUG9pbnQsIGFmdGVyUG9pbnQsIHQpIHtcbiAgICAvLyBQcm9wcyB0byBSb2IgU3BlbmNlciBhdCBzY2FsZWQgaW5ub3ZhdGlvbiBmb3IgaGlzIHBvc3Qgb24gc3BsaW5pbmcgYmV0d2VlbiBwb2ludHNcbiAgICAvLyBodHRwOi8vc2NhbGVkaW5ub3ZhdGlvbi5jb20vYW5hbHl0aWNzL3NwbGluZXMvYWJvdXRTcGxpbmVzLmh0bWxcbiAgICAvLyBUaGlzIGZ1bmN0aW9uIG11c3QgYWxzbyByZXNwZWN0IFwic2tpcHBlZFwiIHBvaW50c1xuICAgIGNvbnN0IHByZXZpb3VzID0gZmlyc3RQb2ludC5za2lwID8gbWlkZGxlUG9pbnQgOiBmaXJzdFBvaW50O1xuICAgIGNvbnN0IGN1cnJlbnQgPSBtaWRkbGVQb2ludDtcbiAgICBjb25zdCBuZXh0ID0gYWZ0ZXJQb2ludC5za2lwID8gbWlkZGxlUG9pbnQgOiBhZnRlclBvaW50O1xuICAgIGNvbnN0IGQwMSA9IGRpc3RhbmNlQmV0d2VlblBvaW50cyhjdXJyZW50LCBwcmV2aW91cyk7XG4gICAgY29uc3QgZDEyID0gZGlzdGFuY2VCZXR3ZWVuUG9pbnRzKG5leHQsIGN1cnJlbnQpO1xuICAgIGxldCBzMDEgPSBkMDEgLyAoZDAxICsgZDEyKTtcbiAgICBsZXQgczEyID0gZDEyIC8gKGQwMSArIGQxMik7XG4gICAgLy8gSWYgYWxsIHBvaW50cyBhcmUgdGhlIHNhbWUsIHMwMSAmIHMwMiB3aWxsIGJlIGluZlxuICAgIHMwMSA9IGlzTmFOKHMwMSkgPyAwIDogczAxO1xuICAgIHMxMiA9IGlzTmFOKHMxMikgPyAwIDogczEyO1xuICAgIGNvbnN0IGZhID0gdCAqIHMwMTsgLy8gc2NhbGluZyBmYWN0b3IgZm9yIHRyaWFuZ2xlIFRhXG4gICAgY29uc3QgZmIgPSB0ICogczEyO1xuICAgIHJldHVybiB7XG4gICAgICAgIHByZXZpb3VzOiB7XG4gICAgICAgICAgICB4OiBjdXJyZW50LnggLSBmYSAqIChuZXh0LnggLSBwcmV2aW91cy54KSxcbiAgICAgICAgICAgIHk6IGN1cnJlbnQueSAtIGZhICogKG5leHQueSAtIHByZXZpb3VzLnkpXG4gICAgICAgIH0sXG4gICAgICAgIG5leHQ6IHtcbiAgICAgICAgICAgIHg6IGN1cnJlbnQueCArIGZiICogKG5leHQueCAtIHByZXZpb3VzLngpLFxuICAgICAgICAgICAgeTogY3VycmVudC55ICsgZmIgKiAobmV4dC55IC0gcHJldmlvdXMueSlcbiAgICAgICAgfVxuICAgIH07XG59XG4vKipcbiAqIEFkanVzdCB0YW5nZW50cyB0byBlbnN1cmUgbW9ub3RvbmljIHByb3BlcnRpZXNcbiAqLyBmdW5jdGlvbiBtb25vdG9uZUFkanVzdChwb2ludHMsIGRlbHRhSywgbUspIHtcbiAgICBjb25zdCBwb2ludHNMZW4gPSBwb2ludHMubGVuZ3RoO1xuICAgIGxldCBhbHBoYUssIGJldGFLLCB0YXVLLCBzcXVhcmVkTWFnbml0dWRlLCBwb2ludEN1cnJlbnQ7XG4gICAgbGV0IHBvaW50QWZ0ZXIgPSBnZXRQb2ludChwb2ludHMsIDApO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBwb2ludHNMZW4gLSAxOyArK2kpe1xuICAgICAgICBwb2ludEN1cnJlbnQgPSBwb2ludEFmdGVyO1xuICAgICAgICBwb2ludEFmdGVyID0gZ2V0UG9pbnQocG9pbnRzLCBpICsgMSk7XG4gICAgICAgIGlmICghcG9pbnRDdXJyZW50IHx8ICFwb2ludEFmdGVyKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWxtb3N0RXF1YWxzKGRlbHRhS1tpXSwgMCwgRVBTSUxPTikpIHtcbiAgICAgICAgICAgIG1LW2ldID0gbUtbaSArIDFdID0gMDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGFscGhhSyA9IG1LW2ldIC8gZGVsdGFLW2ldO1xuICAgICAgICBiZXRhSyA9IG1LW2kgKyAxXSAvIGRlbHRhS1tpXTtcbiAgICAgICAgc3F1YXJlZE1hZ25pdHVkZSA9IE1hdGgucG93KGFscGhhSywgMikgKyBNYXRoLnBvdyhiZXRhSywgMik7XG4gICAgICAgIGlmIChzcXVhcmVkTWFnbml0dWRlIDw9IDkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHRhdUsgPSAzIC8gTWF0aC5zcXJ0KHNxdWFyZWRNYWduaXR1ZGUpO1xuICAgICAgICBtS1tpXSA9IGFscGhhSyAqIHRhdUsgKiBkZWx0YUtbaV07XG4gICAgICAgIG1LW2kgKyAxXSA9IGJldGFLICogdGF1SyAqIGRlbHRhS1tpXTtcbiAgICB9XG59XG5mdW5jdGlvbiBtb25vdG9uZUNvbXB1dGUocG9pbnRzLCBtSywgaW5kZXhBeGlzID0gJ3gnKSB7XG4gICAgY29uc3QgdmFsdWVBeGlzID0gZ2V0VmFsdWVBeGlzKGluZGV4QXhpcyk7XG4gICAgY29uc3QgcG9pbnRzTGVuID0gcG9pbnRzLmxlbmd0aDtcbiAgICBsZXQgZGVsdGEsIHBvaW50QmVmb3JlLCBwb2ludEN1cnJlbnQ7XG4gICAgbGV0IHBvaW50QWZ0ZXIgPSBnZXRQb2ludChwb2ludHMsIDApO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBwb2ludHNMZW47ICsraSl7XG4gICAgICAgIHBvaW50QmVmb3JlID0gcG9pbnRDdXJyZW50O1xuICAgICAgICBwb2ludEN1cnJlbnQgPSBwb2ludEFmdGVyO1xuICAgICAgICBwb2ludEFmdGVyID0gZ2V0UG9pbnQocG9pbnRzLCBpICsgMSk7XG4gICAgICAgIGlmICghcG9pbnRDdXJyZW50KSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpUGl4ZWwgPSBwb2ludEN1cnJlbnRbaW5kZXhBeGlzXTtcbiAgICAgICAgY29uc3QgdlBpeGVsID0gcG9pbnRDdXJyZW50W3ZhbHVlQXhpc107XG4gICAgICAgIGlmIChwb2ludEJlZm9yZSkge1xuICAgICAgICAgICAgZGVsdGEgPSAoaVBpeGVsIC0gcG9pbnRCZWZvcmVbaW5kZXhBeGlzXSkgLyAzO1xuICAgICAgICAgICAgcG9pbnRDdXJyZW50W2BjcDEke2luZGV4QXhpc31gXSA9IGlQaXhlbCAtIGRlbHRhO1xuICAgICAgICAgICAgcG9pbnRDdXJyZW50W2BjcDEke3ZhbHVlQXhpc31gXSA9IHZQaXhlbCAtIGRlbHRhICogbUtbaV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvaW50QWZ0ZXIpIHtcbiAgICAgICAgICAgIGRlbHRhID0gKHBvaW50QWZ0ZXJbaW5kZXhBeGlzXSAtIGlQaXhlbCkgLyAzO1xuICAgICAgICAgICAgcG9pbnRDdXJyZW50W2BjcDIke2luZGV4QXhpc31gXSA9IGlQaXhlbCArIGRlbHRhO1xuICAgICAgICAgICAgcG9pbnRDdXJyZW50W2BjcDIke3ZhbHVlQXhpc31gXSA9IHZQaXhlbCArIGRlbHRhICogbUtbaV07XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gY2FsY3VsYXRlcyBCw6l6aWVyIGNvbnRyb2wgcG9pbnRzIGluIGEgc2ltaWxhciB3YXkgdGhhbiB8c3BsaW5lQ3VydmV8LFxuICogYnV0IHByZXNlcnZlcyBtb25vdG9uaWNpdHkgb2YgdGhlIHByb3ZpZGVkIGRhdGEgYW5kIGVuc3VyZXMgbm8gbG9jYWwgZXh0cmVtdW1zIGFyZSBhZGRlZFxuICogYmV0d2VlbiB0aGUgZGF0YXNldCBkaXNjcmV0ZSBwb2ludHMgZHVlIHRvIHRoZSBpbnRlcnBvbGF0aW9uLlxuICogU2VlIDogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTW9ub3RvbmVfY3ViaWNfaW50ZXJwb2xhdGlvblxuICovIGZ1bmN0aW9uIHNwbGluZUN1cnZlTW9ub3RvbmUocG9pbnRzLCBpbmRleEF4aXMgPSAneCcpIHtcbiAgICBjb25zdCB2YWx1ZUF4aXMgPSBnZXRWYWx1ZUF4aXMoaW5kZXhBeGlzKTtcbiAgICBjb25zdCBwb2ludHNMZW4gPSBwb2ludHMubGVuZ3RoO1xuICAgIGNvbnN0IGRlbHRhSyA9IEFycmF5KHBvaW50c0xlbikuZmlsbCgwKTtcbiAgICBjb25zdCBtSyA9IEFycmF5KHBvaW50c0xlbik7XG4gICAgLy8gQ2FsY3VsYXRlIHNsb3BlcyAoZGVsdGFLKSBhbmQgaW5pdGlhbGl6ZSB0YW5nZW50cyAobUspXG4gICAgbGV0IGksIHBvaW50QmVmb3JlLCBwb2ludEN1cnJlbnQ7XG4gICAgbGV0IHBvaW50QWZ0ZXIgPSBnZXRQb2ludChwb2ludHMsIDApO1xuICAgIGZvcihpID0gMDsgaSA8IHBvaW50c0xlbjsgKytpKXtcbiAgICAgICAgcG9pbnRCZWZvcmUgPSBwb2ludEN1cnJlbnQ7XG4gICAgICAgIHBvaW50Q3VycmVudCA9IHBvaW50QWZ0ZXI7XG4gICAgICAgIHBvaW50QWZ0ZXIgPSBnZXRQb2ludChwb2ludHMsIGkgKyAxKTtcbiAgICAgICAgaWYgKCFwb2ludEN1cnJlbnQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb2ludEFmdGVyKSB7XG4gICAgICAgICAgICBjb25zdCBzbG9wZURlbHRhID0gcG9pbnRBZnRlcltpbmRleEF4aXNdIC0gcG9pbnRDdXJyZW50W2luZGV4QXhpc107XG4gICAgICAgICAgICAvLyBJbiB0aGUgY2FzZSBvZiB0d28gcG9pbnRzIHRoYXQgYXBwZWFyIGF0IHRoZSBzYW1lIHggcGl4ZWwsIHNsb3BlRGVsdGFYIGlzIDBcbiAgICAgICAgICAgIGRlbHRhS1tpXSA9IHNsb3BlRGVsdGEgIT09IDAgPyAocG9pbnRBZnRlclt2YWx1ZUF4aXNdIC0gcG9pbnRDdXJyZW50W3ZhbHVlQXhpc10pIC8gc2xvcGVEZWx0YSA6IDA7XG4gICAgICAgIH1cbiAgICAgICAgbUtbaV0gPSAhcG9pbnRCZWZvcmUgPyBkZWx0YUtbaV0gOiAhcG9pbnRBZnRlciA/IGRlbHRhS1tpIC0gMV0gOiBzaWduKGRlbHRhS1tpIC0gMV0pICE9PSBzaWduKGRlbHRhS1tpXSkgPyAwIDogKGRlbHRhS1tpIC0gMV0gKyBkZWx0YUtbaV0pIC8gMjtcbiAgICB9XG4gICAgbW9ub3RvbmVBZGp1c3QocG9pbnRzLCBkZWx0YUssIG1LKTtcbiAgICBtb25vdG9uZUNvbXB1dGUocG9pbnRzLCBtSywgaW5kZXhBeGlzKTtcbn1cbmZ1bmN0aW9uIGNhcENvbnRyb2xQb2ludChwdCwgbWluLCBtYXgpIHtcbiAgICByZXR1cm4gTWF0aC5tYXgoTWF0aC5taW4ocHQsIG1heCksIG1pbik7XG59XG5mdW5jdGlvbiBjYXBCZXppZXJQb2ludHMocG9pbnRzLCBhcmVhKSB7XG4gICAgbGV0IGksIGlsZW4sIHBvaW50LCBpbkFyZWEsIGluQXJlYVByZXY7XG4gICAgbGV0IGluQXJlYU5leHQgPSBfaXNQb2ludEluQXJlYShwb2ludHNbMF0sIGFyZWEpO1xuICAgIGZvcihpID0gMCwgaWxlbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBpbkFyZWFQcmV2ID0gaW5BcmVhO1xuICAgICAgICBpbkFyZWEgPSBpbkFyZWFOZXh0O1xuICAgICAgICBpbkFyZWFOZXh0ID0gaSA8IGlsZW4gLSAxICYmIF9pc1BvaW50SW5BcmVhKHBvaW50c1tpICsgMV0sIGFyZWEpO1xuICAgICAgICBpZiAoIWluQXJlYSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICAgIGlmIChpbkFyZWFQcmV2KSB7XG4gICAgICAgICAgICBwb2ludC5jcDF4ID0gY2FwQ29udHJvbFBvaW50KHBvaW50LmNwMXgsIGFyZWEubGVmdCwgYXJlYS5yaWdodCk7XG4gICAgICAgICAgICBwb2ludC5jcDF5ID0gY2FwQ29udHJvbFBvaW50KHBvaW50LmNwMXksIGFyZWEudG9wLCBhcmVhLmJvdHRvbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluQXJlYU5leHQpIHtcbiAgICAgICAgICAgIHBvaW50LmNwMnggPSBjYXBDb250cm9sUG9pbnQocG9pbnQuY3AyeCwgYXJlYS5sZWZ0LCBhcmVhLnJpZ2h0KTtcbiAgICAgICAgICAgIHBvaW50LmNwMnkgPSBjYXBDb250cm9sUG9pbnQocG9pbnQuY3AyeSwgYXJlYS50b3AsIGFyZWEuYm90dG9tKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfdXBkYXRlQmV6aWVyQ29udHJvbFBvaW50cyhwb2ludHMsIG9wdGlvbnMsIGFyZWEsIGxvb3AsIGluZGV4QXhpcykge1xuICAgIGxldCBpLCBpbGVuLCBwb2ludCwgY29udHJvbFBvaW50cztcbiAgICAvLyBPbmx5IGNvbnNpZGVyIHBvaW50cyB0aGF0IGFyZSBkcmF3biBpbiBjYXNlIHRoZSBzcGFuR2FwcyBvcHRpb24gaXMgdXNlZFxuICAgIGlmIChvcHRpb25zLnNwYW5HYXBzKSB7XG4gICAgICAgIHBvaW50cyA9IHBvaW50cy5maWx0ZXIoKHB0KT0+IXB0LnNraXApO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5jdWJpY0ludGVycG9sYXRpb25Nb2RlID09PSAnbW9ub3RvbmUnKSB7XG4gICAgICAgIHNwbGluZUN1cnZlTW9ub3RvbmUocG9pbnRzLCBpbmRleEF4aXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBwcmV2ID0gbG9vcCA/IHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV0gOiBwb2ludHNbMF07XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICAgICAgICBjb250cm9sUG9pbnRzID0gc3BsaW5lQ3VydmUocHJldiwgcG9pbnQsIHBvaW50c1tNYXRoLm1pbihpICsgMSwgaWxlbiAtIChsb29wID8gMCA6IDEpKSAlIGlsZW5dLCBvcHRpb25zLnRlbnNpb24pO1xuICAgICAgICAgICAgcG9pbnQuY3AxeCA9IGNvbnRyb2xQb2ludHMucHJldmlvdXMueDtcbiAgICAgICAgICAgIHBvaW50LmNwMXkgPSBjb250cm9sUG9pbnRzLnByZXZpb3VzLnk7XG4gICAgICAgICAgICBwb2ludC5jcDJ4ID0gY29udHJvbFBvaW50cy5uZXh0Lng7XG4gICAgICAgICAgICBwb2ludC5jcDJ5ID0gY29udHJvbFBvaW50cy5uZXh0Lnk7XG4gICAgICAgICAgICBwcmV2ID0gcG9pbnQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuY2FwQmV6aWVyUG9pbnRzKSB7XG4gICAgICAgIGNhcEJlemllclBvaW50cyhwb2ludHMsIGFyZWEpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBOb3RlOiB0eXBlZGVmcyBhcmUgYXV0by1leHBvcnRlZCwgc28gdXNlIGEgbWFkZS11cCBgZG9tYCBuYW1lc3BhY2Ugd2hlcmVcbiAqIG5lY2Vzc2FyeSB0byBhdm9pZCBkdXBsaWNhdGVzIHdpdGggYGV4cG9ydCAqIGZyb20gJy4vaGVscGVyc2A7IHNlZVxuICogaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy80NjAxMVxuICogQHR5cGVkZWYgeyBpbXBvcnQoJy4uL2NvcmUvY29yZS5jb250cm9sbGVyLmpzJykuZGVmYXVsdCB9IGRvbS5DaGFydFxuICogQHR5cGVkZWYgeyBpbXBvcnQoJy4uLy4uL3R5cGVzJykuQ2hhcnRFdmVudCB9IENoYXJ0RXZlbnRcbiAqLyAvKipcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2lzRG9tU3VwcG9ydGVkKCkge1xuICAgIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9nZXRQYXJlbnROb2RlKGRvbU5vZGUpIHtcbiAgICBsZXQgcGFyZW50ID0gZG9tTm9kZS5wYXJlbnROb2RlO1xuICAgIGlmIChwYXJlbnQgJiYgcGFyZW50LnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IFNoYWRvd1Jvb3RdJykge1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQuaG9zdDtcbiAgICB9XG4gICAgcmV0dXJuIHBhcmVudDtcbn1cbi8qKlxuICogY29udmVydCBtYXgtd2lkdGgvbWF4LWhlaWdodCB2YWx1ZXMgdGhhdCBtYXkgYmUgcGVyY2VudGFnZXMgaW50byBhIG51bWJlclxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBwYXJzZU1heFN0eWxlKHN0eWxlVmFsdWUsIG5vZGUsIHBhcmVudFByb3BlcnR5KSB7XG4gICAgbGV0IHZhbHVlSW5QaXhlbHM7XG4gICAgaWYgKHR5cGVvZiBzdHlsZVZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YWx1ZUluUGl4ZWxzID0gcGFyc2VJbnQoc3R5bGVWYWx1ZSwgMTApO1xuICAgICAgICBpZiAoc3R5bGVWYWx1ZS5pbmRleE9mKCclJykgIT09IC0xKSB7XG4gICAgICAgICAgICAvLyBwZXJjZW50YWdlICogc2l6ZSBpbiBkaW1lbnNpb25cbiAgICAgICAgICAgIHZhbHVlSW5QaXhlbHMgPSB2YWx1ZUluUGl4ZWxzIC8gMTAwICogbm9kZS5wYXJlbnROb2RlW3BhcmVudFByb3BlcnR5XTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlSW5QaXhlbHMgPSBzdHlsZVZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWVJblBpeGVscztcbn1cbmNvbnN0IGdldENvbXB1dGVkU3R5bGUgPSAoZWxlbWVudCk9PmVsZW1lbnQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsIG51bGwpO1xuZnVuY3Rpb24gZ2V0U3R5bGUoZWwsIHByb3BlcnR5KSB7XG4gICAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGUoZWwpLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkpO1xufVxuY29uc3QgcG9zaXRpb25zID0gW1xuICAgICd0b3AnLFxuICAgICdyaWdodCcsXG4gICAgJ2JvdHRvbScsXG4gICAgJ2xlZnQnXG5dO1xuZnVuY3Rpb24gZ2V0UG9zaXRpb25lZFN0eWxlKHN0eWxlcywgc3R5bGUsIHN1ZmZpeCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIHN1ZmZpeCA9IHN1ZmZpeCA/ICctJyArIHN1ZmZpeCA6ICcnO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCA0OyBpKyspe1xuICAgICAgICBjb25zdCBwb3MgPSBwb3NpdGlvbnNbaV07XG4gICAgICAgIHJlc3VsdFtwb3NdID0gcGFyc2VGbG9hdChzdHlsZXNbc3R5bGUgKyAnLScgKyBwb3MgKyBzdWZmaXhdKSB8fCAwO1xuICAgIH1cbiAgICByZXN1bHQud2lkdGggPSByZXN1bHQubGVmdCArIHJlc3VsdC5yaWdodDtcbiAgICByZXN1bHQuaGVpZ2h0ID0gcmVzdWx0LnRvcCArIHJlc3VsdC5ib3R0b207XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmNvbnN0IHVzZU9mZnNldFBvcyA9ICh4LCB5LCB0YXJnZXQpPT4oeCA+IDAgfHwgeSA+IDApICYmICghdGFyZ2V0IHx8ICF0YXJnZXQuc2hhZG93Um9vdCk7XG4vKipcbiAqIEBwYXJhbSBlXG4gKiBAcGFyYW0gY2FudmFzXG4gKiBAcmV0dXJucyBDYW52YXMgcG9zaXRpb25cbiAqLyBmdW5jdGlvbiBnZXRDYW52YXNQb3NpdGlvbihlLCBjYW52YXMpIHtcbiAgICBjb25zdCB0b3VjaGVzID0gZS50b3VjaGVzO1xuICAgIGNvbnN0IHNvdXJjZSA9IHRvdWNoZXMgJiYgdG91Y2hlcy5sZW5ndGggPyB0b3VjaGVzWzBdIDogZTtcbiAgICBjb25zdCB7IG9mZnNldFggLCBvZmZzZXRZICB9ID0gc291cmNlO1xuICAgIGxldCBib3ggPSBmYWxzZTtcbiAgICBsZXQgeCwgeTtcbiAgICBpZiAodXNlT2Zmc2V0UG9zKG9mZnNldFgsIG9mZnNldFksIGUudGFyZ2V0KSkge1xuICAgICAgICB4ID0gb2Zmc2V0WDtcbiAgICAgICAgeSA9IG9mZnNldFk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgcmVjdCA9IGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgeCA9IHNvdXJjZS5jbGllbnRYIC0gcmVjdC5sZWZ0O1xuICAgICAgICB5ID0gc291cmNlLmNsaWVudFkgLSByZWN0LnRvcDtcbiAgICAgICAgYm94ID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeCxcbiAgICAgICAgeSxcbiAgICAgICAgYm94XG4gICAgfTtcbn1cbi8qKlxuICogR2V0cyBhbiBldmVudCdzIHgsIHkgY29vcmRpbmF0ZXMsIHJlbGF0aXZlIHRvIHRoZSBjaGFydCBhcmVhXG4gKiBAcGFyYW0gZXZlbnRcbiAqIEBwYXJhbSBjaGFydFxuICogQHJldHVybnMgeCBhbmQgeSBjb29yZGluYXRlcyBvZiB0aGUgZXZlbnRcbiAqLyBmdW5jdGlvbiBnZXRSZWxhdGl2ZVBvc2l0aW9uKGV2ZW50LCBjaGFydCkge1xuICAgIGlmICgnbmF0aXZlJyBpbiBldmVudCkge1xuICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfVxuICAgIGNvbnN0IHsgY2FudmFzICwgY3VycmVudERldmljZVBpeGVsUmF0aW8gIH0gPSBjaGFydDtcbiAgICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoY2FudmFzKTtcbiAgICBjb25zdCBib3JkZXJCb3ggPSBzdHlsZS5ib3hTaXppbmcgPT09ICdib3JkZXItYm94JztcbiAgICBjb25zdCBwYWRkaW5ncyA9IGdldFBvc2l0aW9uZWRTdHlsZShzdHlsZSwgJ3BhZGRpbmcnKTtcbiAgICBjb25zdCBib3JkZXJzID0gZ2V0UG9zaXRpb25lZFN0eWxlKHN0eWxlLCAnYm9yZGVyJywgJ3dpZHRoJyk7XG4gICAgY29uc3QgeyB4ICwgeSAsIGJveCAgfSA9IGdldENhbnZhc1Bvc2l0aW9uKGV2ZW50LCBjYW52YXMpO1xuICAgIGNvbnN0IHhPZmZzZXQgPSBwYWRkaW5ncy5sZWZ0ICsgKGJveCAmJiBib3JkZXJzLmxlZnQpO1xuICAgIGNvbnN0IHlPZmZzZXQgPSBwYWRkaW5ncy50b3AgKyAoYm94ICYmIGJvcmRlcnMudG9wKTtcbiAgICBsZXQgeyB3aWR0aCAsIGhlaWdodCAgfSA9IGNoYXJ0O1xuICAgIGlmIChib3JkZXJCb3gpIHtcbiAgICAgICAgd2lkdGggLT0gcGFkZGluZ3Mud2lkdGggKyBib3JkZXJzLndpZHRoO1xuICAgICAgICBoZWlnaHQgLT0gcGFkZGluZ3MuaGVpZ2h0ICsgYm9yZGVycy5oZWlnaHQ7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHg6IE1hdGgucm91bmQoKHggLSB4T2Zmc2V0KSAvIHdpZHRoICogY2FudmFzLndpZHRoIC8gY3VycmVudERldmljZVBpeGVsUmF0aW8pLFxuICAgICAgICB5OiBNYXRoLnJvdW5kKCh5IC0geU9mZnNldCkgLyBoZWlnaHQgKiBjYW52YXMuaGVpZ2h0IC8gY3VycmVudERldmljZVBpeGVsUmF0aW8pXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGdldENvbnRhaW5lclNpemUoY2FudmFzLCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgbGV0IG1heFdpZHRoLCBtYXhIZWlnaHQ7XG4gICAgaWYgKHdpZHRoID09PSB1bmRlZmluZWQgfHwgaGVpZ2h0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gX2dldFBhcmVudE5vZGUoY2FudmFzKTtcbiAgICAgICAgaWYgKCFjb250YWluZXIpIHtcbiAgICAgICAgICAgIHdpZHRoID0gY2FudmFzLmNsaWVudFdpZHRoO1xuICAgICAgICAgICAgaGVpZ2h0ID0gY2FudmFzLmNsaWVudEhlaWdodDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHJlY3QgPSBjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7IC8vIHRoaXMgaXMgdGhlIGJvcmRlciBib3ggb2YgdGhlIGNvbnRhaW5lclxuICAgICAgICAgICAgY29uc3QgY29udGFpbmVyU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGNvbnRhaW5lcik7XG4gICAgICAgICAgICBjb25zdCBjb250YWluZXJCb3JkZXIgPSBnZXRQb3NpdGlvbmVkU3R5bGUoY29udGFpbmVyU3R5bGUsICdib3JkZXInLCAnd2lkdGgnKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lclBhZGRpbmcgPSBnZXRQb3NpdGlvbmVkU3R5bGUoY29udGFpbmVyU3R5bGUsICdwYWRkaW5nJyk7XG4gICAgICAgICAgICB3aWR0aCA9IHJlY3Qud2lkdGggLSBjb250YWluZXJQYWRkaW5nLndpZHRoIC0gY29udGFpbmVyQm9yZGVyLndpZHRoO1xuICAgICAgICAgICAgaGVpZ2h0ID0gcmVjdC5oZWlnaHQgLSBjb250YWluZXJQYWRkaW5nLmhlaWdodCAtIGNvbnRhaW5lckJvcmRlci5oZWlnaHQ7XG4gICAgICAgICAgICBtYXhXaWR0aCA9IHBhcnNlTWF4U3R5bGUoY29udGFpbmVyU3R5bGUubWF4V2lkdGgsIGNvbnRhaW5lciwgJ2NsaWVudFdpZHRoJyk7XG4gICAgICAgICAgICBtYXhIZWlnaHQgPSBwYXJzZU1heFN0eWxlKGNvbnRhaW5lclN0eWxlLm1heEhlaWdodCwgY29udGFpbmVyLCAnY2xpZW50SGVpZ2h0Jyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgd2lkdGgsXG4gICAgICAgIGhlaWdodCxcbiAgICAgICAgbWF4V2lkdGg6IG1heFdpZHRoIHx8IElORklOSVRZLFxuICAgICAgICBtYXhIZWlnaHQ6IG1heEhlaWdodCB8fCBJTkZJTklUWVxuICAgIH07XG59XG5jb25zdCByb3VuZDEgPSAodik9Pk1hdGgucm91bmQodiAqIDEwKSAvIDEwO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbmZ1bmN0aW9uIGdldE1heGltdW1TaXplKGNhbnZhcywgYmJXaWR0aCwgYmJIZWlnaHQsIGFzcGVjdFJhdGlvKSB7XG4gICAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGNhbnZhcyk7XG4gICAgY29uc3QgbWFyZ2lucyA9IGdldFBvc2l0aW9uZWRTdHlsZShzdHlsZSwgJ21hcmdpbicpO1xuICAgIGNvbnN0IG1heFdpZHRoID0gcGFyc2VNYXhTdHlsZShzdHlsZS5tYXhXaWR0aCwgY2FudmFzLCAnY2xpZW50V2lkdGgnKSB8fCBJTkZJTklUWTtcbiAgICBjb25zdCBtYXhIZWlnaHQgPSBwYXJzZU1heFN0eWxlKHN0eWxlLm1heEhlaWdodCwgY2FudmFzLCAnY2xpZW50SGVpZ2h0JykgfHwgSU5GSU5JVFk7XG4gICAgY29uc3QgY29udGFpbmVyU2l6ZSA9IGdldENvbnRhaW5lclNpemUoY2FudmFzLCBiYldpZHRoLCBiYkhlaWdodCk7XG4gICAgbGV0IHsgd2lkdGggLCBoZWlnaHQgIH0gPSBjb250YWluZXJTaXplO1xuICAgIGlmIChzdHlsZS5ib3hTaXppbmcgPT09ICdjb250ZW50LWJveCcpIHtcbiAgICAgICAgY29uc3QgYm9yZGVycyA9IGdldFBvc2l0aW9uZWRTdHlsZShzdHlsZSwgJ2JvcmRlcicsICd3aWR0aCcpO1xuICAgICAgICBjb25zdCBwYWRkaW5ncyA9IGdldFBvc2l0aW9uZWRTdHlsZShzdHlsZSwgJ3BhZGRpbmcnKTtcbiAgICAgICAgd2lkdGggLT0gcGFkZGluZ3Mud2lkdGggKyBib3JkZXJzLndpZHRoO1xuICAgICAgICBoZWlnaHQgLT0gcGFkZGluZ3MuaGVpZ2h0ICsgYm9yZGVycy5oZWlnaHQ7XG4gICAgfVxuICAgIHdpZHRoID0gTWF0aC5tYXgoMCwgd2lkdGggLSBtYXJnaW5zLndpZHRoKTtcbiAgICBoZWlnaHQgPSBNYXRoLm1heCgwLCBhc3BlY3RSYXRpbyA/IHdpZHRoIC8gYXNwZWN0UmF0aW8gOiBoZWlnaHQgLSBtYXJnaW5zLmhlaWdodCk7XG4gICAgd2lkdGggPSByb3VuZDEoTWF0aC5taW4od2lkdGgsIG1heFdpZHRoLCBjb250YWluZXJTaXplLm1heFdpZHRoKSk7XG4gICAgaGVpZ2h0ID0gcm91bmQxKE1hdGgubWluKGhlaWdodCwgbWF4SGVpZ2h0LCBjb250YWluZXJTaXplLm1heEhlaWdodCkpO1xuICAgIGlmICh3aWR0aCAmJiAhaGVpZ2h0KSB7XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy80NjU5XG4gICAgICAgIC8vIElmIHRoZSBjYW52YXMgaGFzIHdpZHRoLCBidXQgbm8gaGVpZ2h0LCBkZWZhdWx0IHRvIGFzcGVjdFJhdGlvIG9mIDIgKGNhbnZhcyBkZWZhdWx0KVxuICAgICAgICBoZWlnaHQgPSByb3VuZDEod2lkdGggLyAyKTtcbiAgICB9XG4gICAgY29uc3QgbWFpbnRhaW5IZWlnaHQgPSBiYldpZHRoICE9PSB1bmRlZmluZWQgfHwgYmJIZWlnaHQgIT09IHVuZGVmaW5lZDtcbiAgICBpZiAobWFpbnRhaW5IZWlnaHQgJiYgYXNwZWN0UmF0aW8gJiYgY29udGFpbmVyU2l6ZS5oZWlnaHQgJiYgaGVpZ2h0ID4gY29udGFpbmVyU2l6ZS5oZWlnaHQpIHtcbiAgICAgICAgaGVpZ2h0ID0gY29udGFpbmVyU2l6ZS5oZWlnaHQ7XG4gICAgICAgIHdpZHRoID0gcm91bmQxKE1hdGguZmxvb3IoaGVpZ2h0ICogYXNwZWN0UmF0aW8pKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgd2lkdGgsXG4gICAgICAgIGhlaWdodFxuICAgIH07XG59XG4vKipcbiAqIEBwYXJhbSBjaGFydFxuICogQHBhcmFtIGZvcmNlUmF0aW9cbiAqIEBwYXJhbSBmb3JjZVN0eWxlXG4gKiBAcmV0dXJucyBUcnVlIGlmIHRoZSBjYW52YXMgY29udGV4dCBzaXplIG9yIHRyYW5zZm9ybWF0aW9uIGhhcyBjaGFuZ2VkLlxuICovIGZ1bmN0aW9uIHJldGluYVNjYWxlKGNoYXJ0LCBmb3JjZVJhdGlvLCBmb3JjZVN0eWxlKSB7XG4gICAgY29uc3QgcGl4ZWxSYXRpbyA9IGZvcmNlUmF0aW8gfHwgMTtcbiAgICBjb25zdCBkZXZpY2VIZWlnaHQgPSBNYXRoLmZsb29yKGNoYXJ0LmhlaWdodCAqIHBpeGVsUmF0aW8pO1xuICAgIGNvbnN0IGRldmljZVdpZHRoID0gTWF0aC5mbG9vcihjaGFydC53aWR0aCAqIHBpeGVsUmF0aW8pO1xuICAgIGNoYXJ0LmhlaWdodCA9IE1hdGguZmxvb3IoY2hhcnQuaGVpZ2h0KTtcbiAgICBjaGFydC53aWR0aCA9IE1hdGguZmxvb3IoY2hhcnQud2lkdGgpO1xuICAgIGNvbnN0IGNhbnZhcyA9IGNoYXJ0LmNhbnZhcztcbiAgICAvLyBJZiBubyBzdHlsZSBoYXMgYmVlbiBzZXQgb24gdGhlIGNhbnZhcywgdGhlIHJlbmRlciBzaXplIGlzIHVzZWQgYXMgZGlzcGxheSBzaXplLFxuICAgIC8vIG1ha2luZyB0aGUgY2hhcnQgdmlzdWFsbHkgYmlnZ2VyLCBzbyBsZXQncyBlbmZvcmNlIGl0IHRvIHRoZSBcImNvcnJlY3RcIiB2YWx1ZXMuXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy8zNTc1XG4gICAgaWYgKGNhbnZhcy5zdHlsZSAmJiAoZm9yY2VTdHlsZSB8fCAhY2FudmFzLnN0eWxlLmhlaWdodCAmJiAhY2FudmFzLnN0eWxlLndpZHRoKSkge1xuICAgICAgICBjYW52YXMuc3R5bGUuaGVpZ2h0ID0gYCR7Y2hhcnQuaGVpZ2h0fXB4YDtcbiAgICAgICAgY2FudmFzLnN0eWxlLndpZHRoID0gYCR7Y2hhcnQud2lkdGh9cHhgO1xuICAgIH1cbiAgICBpZiAoY2hhcnQuY3VycmVudERldmljZVBpeGVsUmF0aW8gIT09IHBpeGVsUmF0aW8gfHwgY2FudmFzLmhlaWdodCAhPT0gZGV2aWNlSGVpZ2h0IHx8IGNhbnZhcy53aWR0aCAhPT0gZGV2aWNlV2lkdGgpIHtcbiAgICAgICAgY2hhcnQuY3VycmVudERldmljZVBpeGVsUmF0aW8gPSBwaXhlbFJhdGlvO1xuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gZGV2aWNlSGVpZ2h0O1xuICAgICAgICBjYW52YXMud2lkdGggPSBkZXZpY2VXaWR0aDtcbiAgICAgICAgY2hhcnQuY3R4LnNldFRyYW5zZm9ybShwaXhlbFJhdGlvLCAwLCAwLCBwaXhlbFJhdGlvLCAwLCAwKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbi8qKlxuICogRGV0ZWN0cyBzdXBwb3J0IGZvciBvcHRpb25zIG9iamVjdCBhcmd1bWVudCBpbiBhZGRFdmVudExpc3RlbmVyLlxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0V2ZW50VGFyZ2V0L2FkZEV2ZW50TGlzdGVuZXIjU2FmZWx5X2RldGVjdGluZ19vcHRpb25fc3VwcG9ydFxuICogQHByaXZhdGVcbiAqLyBjb25zdCBzdXBwb3J0c0V2ZW50TGlzdGVuZXJPcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gICAgbGV0IHBhc3NpdmVTdXBwb3J0ZWQgPSBmYWxzZTtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgZ2V0IHBhc3NpdmUgKCkge1xuICAgICAgICAgICAgICAgIHBhc3NpdmVTdXBwb3J0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBudWxsLCBvcHRpb25zKTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBudWxsLCBvcHRpb25zKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgLy8gY29udGludWUgcmVnYXJkbGVzcyBvZiBlcnJvclxuICAgIH1cbiAgICByZXR1cm4gcGFzc2l2ZVN1cHBvcnRlZDtcbn0oKTtcbi8qKlxuICogVGhlIFwidXNlZFwiIHNpemUgaXMgdGhlIGZpbmFsIHZhbHVlIG9mIGEgZGltZW5zaW9uIHByb3BlcnR5IGFmdGVyIGFsbCBjYWxjdWxhdGlvbnMgaGF2ZVxuICogYmVlbiBwZXJmb3JtZWQuIFRoaXMgbWV0aG9kIHVzZXMgdGhlIGNvbXB1dGVkIHN0eWxlIG9mIGBlbGVtZW50YCBidXQgcmV0dXJucyB1bmRlZmluZWRcbiAqIGlmIHRoZSBjb21wdXRlZCBzdHlsZSBpcyBub3QgZXhwcmVzc2VkIGluIHBpeGVscy4gVGhhdCBjYW4gaGFwcGVuIGluIHNvbWUgY2FzZXMgd2hlcmVcbiAqIGBlbGVtZW50YCBoYXMgYSBzaXplIHJlbGF0aXZlIHRvIGl0cyBwYXJlbnQgYW5kIHRoaXMgbGFzdCBvbmUgaXMgbm90IHlldCBkaXNwbGF5ZWQsXG4gKiBmb3IgZXhhbXBsZSBiZWNhdXNlIG9mIGBkaXNwbGF5OiBub25lYCBvbiBhIHBhcmVudCBub2RlLlxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvdXNlZF92YWx1ZVxuICogQHJldHVybnMgU2l6ZSBpbiBwaXhlbHMgb3IgdW5kZWZpbmVkIGlmIHVua25vd24uXG4gKi8gZnVuY3Rpb24gcmVhZFVzZWRTaXplKGVsZW1lbnQsIHByb3BlcnR5KSB7XG4gICAgY29uc3QgdmFsdWUgPSBnZXRTdHlsZShlbGVtZW50LCBwcm9wZXJ0eSk7XG4gICAgY29uc3QgbWF0Y2hlcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKC9eKFxcZCspKFxcLlxcZCspP3B4JC8pO1xuICAgIHJldHVybiBtYXRjaGVzID8gK21hdGNoZXNbMV0gOiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfcG9pbnRJbkxpbmUocDEsIHAyLCB0LCBtb2RlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogcDEueCArIHQgKiAocDIueCAtIHAxLngpLFxuICAgICAgICB5OiBwMS55ICsgdCAqIChwMi55IC0gcDEueSlcbiAgICB9O1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9zdGVwcGVkSW50ZXJwb2xhdGlvbihwMSwgcDIsIHQsIG1vZGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiBwMS54ICsgdCAqIChwMi54IC0gcDEueCksXG4gICAgICAgIHk6IG1vZGUgPT09ICdtaWRkbGUnID8gdCA8IDAuNSA/IHAxLnkgOiBwMi55IDogbW9kZSA9PT0gJ2FmdGVyJyA/IHQgPCAxID8gcDEueSA6IHAyLnkgOiB0ID4gMCA/IHAyLnkgOiBwMS55XG4gICAgfTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfYmV6aWVySW50ZXJwb2xhdGlvbihwMSwgcDIsIHQsIG1vZGUpIHtcbiAgICBjb25zdCBjcDEgPSB7XG4gICAgICAgIHg6IHAxLmNwMngsXG4gICAgICAgIHk6IHAxLmNwMnlcbiAgICB9O1xuICAgIGNvbnN0IGNwMiA9IHtcbiAgICAgICAgeDogcDIuY3AxeCxcbiAgICAgICAgeTogcDIuY3AxeVxuICAgIH07XG4gICAgY29uc3QgYSA9IF9wb2ludEluTGluZShwMSwgY3AxLCB0KTtcbiAgICBjb25zdCBiID0gX3BvaW50SW5MaW5lKGNwMSwgY3AyLCB0KTtcbiAgICBjb25zdCBjID0gX3BvaW50SW5MaW5lKGNwMiwgcDIsIHQpO1xuICAgIGNvbnN0IGQgPSBfcG9pbnRJbkxpbmUoYSwgYiwgdCk7XG4gICAgY29uc3QgZSA9IF9wb2ludEluTGluZShiLCBjLCB0KTtcbiAgICByZXR1cm4gX3BvaW50SW5MaW5lKGQsIGUsIHQpO1xufVxuXG5jb25zdCBnZXRSaWdodFRvTGVmdEFkYXB0ZXIgPSBmdW5jdGlvbihyZWN0WCwgd2lkdGgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB4ICh4KSB7XG4gICAgICAgICAgICByZXR1cm4gcmVjdFggKyByZWN0WCArIHdpZHRoIC0geDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0V2lkdGggKHcpIHtcbiAgICAgICAgICAgIHdpZHRoID0gdztcbiAgICAgICAgfSxcbiAgICAgICAgdGV4dEFsaWduIChhbGlnbikge1xuICAgICAgICAgICAgaWYgKGFsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBhbGlnbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhbGlnbiA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gICAgICAgIH0sXG4gICAgICAgIHhQbHVzICh4LCB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHggLSB2YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgbGVmdEZvckx0ciAoeCwgaXRlbVdpZHRoKSB7XG4gICAgICAgICAgICByZXR1cm4geCAtIGl0ZW1XaWR0aDtcbiAgICAgICAgfVxuICAgIH07XG59O1xuY29uc3QgZ2V0TGVmdFRvUmlnaHRBZGFwdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeCAoeCkge1xuICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgIH0sXG4gICAgICAgIHNldFdpZHRoICh3KSB7fSxcbiAgICAgICAgdGV4dEFsaWduIChhbGlnbikge1xuICAgICAgICAgICAgcmV0dXJuIGFsaWduO1xuICAgICAgICB9LFxuICAgICAgICB4UGx1cyAoeCwgdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB4ICsgdmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIGxlZnRGb3JMdHIgKHgsIF9pdGVtV2lkdGgpIHtcbiAgICAgICAgICAgIHJldHVybiB4O1xuICAgICAgICB9XG4gICAgfTtcbn07XG5mdW5jdGlvbiBnZXRSdGxBZGFwdGVyKHJ0bCwgcmVjdFgsIHdpZHRoKSB7XG4gICAgcmV0dXJuIHJ0bCA/IGdldFJpZ2h0VG9MZWZ0QWRhcHRlcihyZWN0WCwgd2lkdGgpIDogZ2V0TGVmdFRvUmlnaHRBZGFwdGVyKCk7XG59XG5mdW5jdGlvbiBvdmVycmlkZVRleHREaXJlY3Rpb24oY3R4LCBkaXJlY3Rpb24pIHtcbiAgICBsZXQgc3R5bGUsIG9yaWdpbmFsO1xuICAgIGlmIChkaXJlY3Rpb24gPT09ICdsdHInIHx8IGRpcmVjdGlvbiA9PT0gJ3J0bCcpIHtcbiAgICAgICAgc3R5bGUgPSBjdHguY2FudmFzLnN0eWxlO1xuICAgICAgICBvcmlnaW5hbCA9IFtcbiAgICAgICAgICAgIHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2RpcmVjdGlvbicpLFxuICAgICAgICAgICAgc3R5bGUuZ2V0UHJvcGVydHlQcmlvcml0eSgnZGlyZWN0aW9uJylcbiAgICAgICAgXTtcbiAgICAgICAgc3R5bGUuc2V0UHJvcGVydHkoJ2RpcmVjdGlvbicsIGRpcmVjdGlvbiwgJ2ltcG9ydGFudCcpO1xuICAgICAgICBjdHgucHJldlRleHREaXJlY3Rpb24gPSBvcmlnaW5hbDtcbiAgICB9XG59XG5mdW5jdGlvbiByZXN0b3JlVGV4dERpcmVjdGlvbihjdHgsIG9yaWdpbmFsKSB7XG4gICAgaWYgKG9yaWdpbmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZGVsZXRlIGN0eC5wcmV2VGV4dERpcmVjdGlvbjtcbiAgICAgICAgY3R4LmNhbnZhcy5zdHlsZS5zZXRQcm9wZXJ0eSgnZGlyZWN0aW9uJywgb3JpZ2luYWxbMF0sIG9yaWdpbmFsWzFdKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5Rm4ocHJvcGVydHkpIHtcbiAgICBpZiAocHJvcGVydHkgPT09ICdhbmdsZScpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJldHdlZW46IF9hbmdsZUJldHdlZW4sXG4gICAgICAgICAgICBjb21wYXJlOiBfYW5nbGVEaWZmLFxuICAgICAgICAgICAgbm9ybWFsaXplOiBfbm9ybWFsaXplQW5nbGVcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYmV0d2VlbjogX2lzQmV0d2VlbixcbiAgICAgICAgY29tcGFyZTogKGEsIGIpPT5hIC0gYixcbiAgICAgICAgbm9ybWFsaXplOiAoeCk9PnhcbiAgICB9O1xufVxuZnVuY3Rpb24gbm9ybWFsaXplU2VnbWVudCh7IHN0YXJ0ICwgZW5kICwgY291bnQgLCBsb29wICwgc3R5bGUgIH0pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydDogc3RhcnQgJSBjb3VudCxcbiAgICAgICAgZW5kOiBlbmQgJSBjb3VudCxcbiAgICAgICAgbG9vcDogbG9vcCAmJiAoZW5kIC0gc3RhcnQgKyAxKSAlIGNvdW50ID09PSAwLFxuICAgICAgICBzdHlsZVxuICAgIH07XG59XG5mdW5jdGlvbiBnZXRTZWdtZW50KHNlZ21lbnQsIHBvaW50cywgYm91bmRzKSB7XG4gICAgY29uc3QgeyBwcm9wZXJ0eSAsIHN0YXJ0OiBzdGFydEJvdW5kICwgZW5kOiBlbmRCb3VuZCAgfSA9IGJvdW5kcztcbiAgICBjb25zdCB7IGJldHdlZW4gLCBub3JtYWxpemUgIH0gPSBwcm9wZXJ0eUZuKHByb3BlcnR5KTtcbiAgICBjb25zdCBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gICAgbGV0IHsgc3RhcnQgLCBlbmQgLCBsb29wICB9ID0gc2VnbWVudDtcbiAgICBsZXQgaSwgaWxlbjtcbiAgICBpZiAobG9vcCkge1xuICAgICAgICBzdGFydCArPSBjb3VudDtcbiAgICAgICAgZW5kICs9IGNvdW50O1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBjb3VudDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBpZiAoIWJldHdlZW4obm9ybWFsaXplKHBvaW50c1tzdGFydCAlIGNvdW50XVtwcm9wZXJ0eV0pLCBzdGFydEJvdW5kLCBlbmRCb3VuZCkpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YXJ0LS07XG4gICAgICAgICAgICBlbmQtLTtcbiAgICAgICAgfVxuICAgICAgICBzdGFydCAlPSBjb3VudDtcbiAgICAgICAgZW5kICU9IGNvdW50O1xuICAgIH1cbiAgICBpZiAoZW5kIDwgc3RhcnQpIHtcbiAgICAgICAgZW5kICs9IGNvdW50O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydCxcbiAgICAgICAgZW5kLFxuICAgICAgICBsb29wLFxuICAgICAgICBzdHlsZTogc2VnbWVudC5zdHlsZVxuICAgIH07XG59XG4gZnVuY3Rpb24gX2JvdW5kU2VnbWVudChzZWdtZW50LCBwb2ludHMsIGJvdW5kcykge1xuICAgIGlmICghYm91bmRzKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBzZWdtZW50XG4gICAgICAgIF07XG4gICAgfVxuICAgIGNvbnN0IHsgcHJvcGVydHkgLCBzdGFydDogc3RhcnRCb3VuZCAsIGVuZDogZW5kQm91bmQgIH0gPSBib3VuZHM7XG4gICAgY29uc3QgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuICAgIGNvbnN0IHsgY29tcGFyZSAsIGJldHdlZW4gLCBub3JtYWxpemUgIH0gPSBwcm9wZXJ0eUZuKHByb3BlcnR5KTtcbiAgICBjb25zdCB7IHN0YXJ0ICwgZW5kICwgbG9vcCAsIHN0eWxlICB9ID0gZ2V0U2VnbWVudChzZWdtZW50LCBwb2ludHMsIGJvdW5kcyk7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgbGV0IGluc2lkZSA9IGZhbHNlO1xuICAgIGxldCBzdWJTdGFydCA9IG51bGw7XG4gICAgbGV0IHZhbHVlLCBwb2ludCwgcHJldlZhbHVlO1xuICAgIGNvbnN0IHN0YXJ0SXNCZWZvcmUgPSAoKT0+YmV0d2VlbihzdGFydEJvdW5kLCBwcmV2VmFsdWUsIHZhbHVlKSAmJiBjb21wYXJlKHN0YXJ0Qm91bmQsIHByZXZWYWx1ZSkgIT09IDA7XG4gICAgY29uc3QgZW5kSXNCZWZvcmUgPSAoKT0+Y29tcGFyZShlbmRCb3VuZCwgdmFsdWUpID09PSAwIHx8IGJldHdlZW4oZW5kQm91bmQsIHByZXZWYWx1ZSwgdmFsdWUpO1xuICAgIGNvbnN0IHNob3VsZFN0YXJ0ID0gKCk9Pmluc2lkZSB8fCBzdGFydElzQmVmb3JlKCk7XG4gICAgY29uc3Qgc2hvdWxkU3RvcCA9ICgpPT4haW5zaWRlIHx8IGVuZElzQmVmb3JlKCk7XG4gICAgZm9yKGxldCBpID0gc3RhcnQsIHByZXYgPSBzdGFydDsgaSA8PSBlbmQ7ICsraSl7XG4gICAgICAgIHBvaW50ID0gcG9pbnRzW2kgJSBjb3VudF07XG4gICAgICAgIGlmIChwb2ludC5za2lwKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZSA9IG5vcm1hbGl6ZShwb2ludFtwcm9wZXJ0eV0pO1xuICAgICAgICBpZiAodmFsdWUgPT09IHByZXZWYWx1ZSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaW5zaWRlID0gYmV0d2Vlbih2YWx1ZSwgc3RhcnRCb3VuZCwgZW5kQm91bmQpO1xuICAgICAgICBpZiAoc3ViU3RhcnQgPT09IG51bGwgJiYgc2hvdWxkU3RhcnQoKSkge1xuICAgICAgICAgICAgc3ViU3RhcnQgPSBjb21wYXJlKHZhbHVlLCBzdGFydEJvdW5kKSA9PT0gMCA/IGkgOiBwcmV2O1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdWJTdGFydCAhPT0gbnVsbCAmJiBzaG91bGRTdG9wKCkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5vcm1hbGl6ZVNlZ21lbnQoe1xuICAgICAgICAgICAgICAgIHN0YXJ0OiBzdWJTdGFydCxcbiAgICAgICAgICAgICAgICBlbmQ6IGksXG4gICAgICAgICAgICAgICAgbG9vcCxcbiAgICAgICAgICAgICAgICBjb3VudCxcbiAgICAgICAgICAgICAgICBzdHlsZVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgc3ViU3RhcnQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHByZXYgPSBpO1xuICAgICAgICBwcmV2VmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKHN1YlN0YXJ0ICE9PSBudWxsKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKG5vcm1hbGl6ZVNlZ21lbnQoe1xuICAgICAgICAgICAgc3RhcnQ6IHN1YlN0YXJ0LFxuICAgICAgICAgICAgZW5kLFxuICAgICAgICAgICAgbG9vcCxcbiAgICAgICAgICAgIGNvdW50LFxuICAgICAgICAgICAgc3R5bGVcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIGZ1bmN0aW9uIF9ib3VuZFNlZ21lbnRzKGxpbmUsIGJvdW5kcykge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGNvbnN0IHNlZ21lbnRzID0gbGluZS5zZWdtZW50cztcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspe1xuICAgICAgICBjb25zdCBzdWIgPSBfYm91bmRTZWdtZW50KHNlZ21lbnRzW2ldLCBsaW5lLnBvaW50cywgYm91bmRzKTtcbiAgICAgICAgaWYgKHN1Yi5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKC4uLnN1Yik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbiBmdW5jdGlvbiBmaW5kU3RhcnRBbmRFbmQocG9pbnRzLCBjb3VudCwgbG9vcCwgc3BhbkdhcHMpIHtcbiAgICBsZXQgc3RhcnQgPSAwO1xuICAgIGxldCBlbmQgPSBjb3VudCAtIDE7XG4gICAgaWYgKGxvb3AgJiYgIXNwYW5HYXBzKSB7XG4gICAgICAgIHdoaWxlKHN0YXJ0IDwgY291bnQgJiYgIXBvaW50c1tzdGFydF0uc2tpcCl7XG4gICAgICAgICAgICBzdGFydCsrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHdoaWxlKHN0YXJ0IDwgY291bnQgJiYgcG9pbnRzW3N0YXJ0XS5za2lwKXtcbiAgICAgICAgc3RhcnQrKztcbiAgICB9XG4gICAgc3RhcnQgJT0gY291bnQ7XG4gICAgaWYgKGxvb3ApIHtcbiAgICAgICAgZW5kICs9IHN0YXJ0O1xuICAgIH1cbiAgICB3aGlsZShlbmQgPiBzdGFydCAmJiBwb2ludHNbZW5kICUgY291bnRdLnNraXApe1xuICAgICAgICBlbmQtLTtcbiAgICB9XG4gICAgZW5kICU9IGNvdW50O1xuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0LFxuICAgICAgICBlbmRcbiAgICB9O1xufVxuIGZ1bmN0aW9uIHNvbGlkU2VnbWVudHMocG9pbnRzLCBzdGFydCwgbWF4LCBsb29wKSB7XG4gICAgY29uc3QgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGxldCBsYXN0ID0gc3RhcnQ7XG4gICAgbGV0IHByZXYgPSBwb2ludHNbc3RhcnRdO1xuICAgIGxldCBlbmQ7XG4gICAgZm9yKGVuZCA9IHN0YXJ0ICsgMTsgZW5kIDw9IG1heDsgKytlbmQpe1xuICAgICAgICBjb25zdCBjdXIgPSBwb2ludHNbZW5kICUgY291bnRdO1xuICAgICAgICBpZiAoY3VyLnNraXAgfHwgY3VyLnN0b3ApIHtcbiAgICAgICAgICAgIGlmICghcHJldi5za2lwKSB7XG4gICAgICAgICAgICAgICAgbG9vcCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0ICUgY291bnQsXG4gICAgICAgICAgICAgICAgICAgIGVuZDogKGVuZCAtIDEpICUgY291bnQsXG4gICAgICAgICAgICAgICAgICAgIGxvb3BcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBzdGFydCA9IGxhc3QgPSBjdXIuc3RvcCA/IGVuZCA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsYXN0ID0gZW5kO1xuICAgICAgICAgICAgaWYgKHByZXYuc2tpcCkge1xuICAgICAgICAgICAgICAgIHN0YXJ0ID0gZW5kO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHByZXYgPSBjdXI7XG4gICAgfVxuICAgIGlmIChsYXN0ICE9PSBudWxsKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgIHN0YXJ0OiBzdGFydCAlIGNvdW50LFxuICAgICAgICAgICAgZW5kOiBsYXN0ICUgY291bnQsXG4gICAgICAgICAgICBsb29wXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIGZ1bmN0aW9uIF9jb21wdXRlU2VnbWVudHMobGluZSwgc2VnbWVudE9wdGlvbnMpIHtcbiAgICBjb25zdCBwb2ludHMgPSBsaW5lLnBvaW50cztcbiAgICBjb25zdCBzcGFuR2FwcyA9IGxpbmUub3B0aW9ucy5zcGFuR2FwcztcbiAgICBjb25zdCBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gICAgaWYgKCFjb3VudCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGNvbnN0IGxvb3AgPSAhIWxpbmUuX2xvb3A7XG4gICAgY29uc3QgeyBzdGFydCAsIGVuZCAgfSA9IGZpbmRTdGFydEFuZEVuZChwb2ludHMsIGNvdW50LCBsb29wLCBzcGFuR2Fwcyk7XG4gICAgaWYgKHNwYW5HYXBzID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiBzcGxpdEJ5U3R5bGVzKGxpbmUsIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGFydCxcbiAgICAgICAgICAgICAgICBlbmQsXG4gICAgICAgICAgICAgICAgbG9vcFxuICAgICAgICAgICAgfVxuICAgICAgICBdLCBwb2ludHMsIHNlZ21lbnRPcHRpb25zKTtcbiAgICB9XG4gICAgY29uc3QgbWF4ID0gZW5kIDwgc3RhcnQgPyBlbmQgKyBjb3VudCA6IGVuZDtcbiAgICBjb25zdCBjb21wbGV0ZUxvb3AgPSAhIWxpbmUuX2Z1bGxMb29wICYmIHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gY291bnQgLSAxO1xuICAgIHJldHVybiBzcGxpdEJ5U3R5bGVzKGxpbmUsIHNvbGlkU2VnbWVudHMocG9pbnRzLCBzdGFydCwgbWF4LCBjb21wbGV0ZUxvb3ApLCBwb2ludHMsIHNlZ21lbnRPcHRpb25zKTtcbn1cbiBmdW5jdGlvbiBzcGxpdEJ5U3R5bGVzKGxpbmUsIHNlZ21lbnRzLCBwb2ludHMsIHNlZ21lbnRPcHRpb25zKSB7XG4gICAgaWYgKCFzZWdtZW50T3B0aW9ucyB8fCAhc2VnbWVudE9wdGlvbnMuc2V0Q29udGV4dCB8fCAhcG9pbnRzKSB7XG4gICAgICAgIHJldHVybiBzZWdtZW50cztcbiAgICB9XG4gICAgcmV0dXJuIGRvU3BsaXRCeVN0eWxlcyhsaW5lLCBzZWdtZW50cywgcG9pbnRzLCBzZWdtZW50T3B0aW9ucyk7XG59XG4gZnVuY3Rpb24gZG9TcGxpdEJ5U3R5bGVzKGxpbmUsIHNlZ21lbnRzLCBwb2ludHMsIHNlZ21lbnRPcHRpb25zKSB7XG4gICAgY29uc3QgY2hhcnRDb250ZXh0ID0gbGluZS5fY2hhcnQuZ2V0Q29udGV4dCgpO1xuICAgIGNvbnN0IGJhc2VTdHlsZSA9IHJlYWRTdHlsZShsaW5lLm9wdGlvbnMpO1xuICAgIGNvbnN0IHsgX2RhdGFzZXRJbmRleDogZGF0YXNldEluZGV4ICwgb3B0aW9uczogeyBzcGFuR2FwcyAgfSAgfSA9IGxpbmU7XG4gICAgY29uc3QgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGxldCBwcmV2U3R5bGUgPSBiYXNlU3R5bGU7XG4gICAgbGV0IHN0YXJ0ID0gc2VnbWVudHNbMF0uc3RhcnQ7XG4gICAgbGV0IGkgPSBzdGFydDtcbiAgICBmdW5jdGlvbiBhZGRTdHlsZShzLCBlLCBsLCBzdCkge1xuICAgICAgICBjb25zdCBkaXIgPSBzcGFuR2FwcyA/IC0xIDogMTtcbiAgICAgICAgaWYgKHMgPT09IGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzICs9IGNvdW50O1xuICAgICAgICB3aGlsZShwb2ludHNbcyAlIGNvdW50XS5za2lwKXtcbiAgICAgICAgICAgIHMgLT0gZGlyO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlKHBvaW50c1tlICUgY291bnRdLnNraXApe1xuICAgICAgICAgICAgZSArPSBkaXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMgJSBjb3VudCAhPT0gZSAlIGNvdW50KSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IHMgJSBjb3VudCxcbiAgICAgICAgICAgICAgICBlbmQ6IGUgJSBjb3VudCxcbiAgICAgICAgICAgICAgICBsb29wOiBsLFxuICAgICAgICAgICAgICAgIHN0eWxlOiBzdFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwcmV2U3R5bGUgPSBzdDtcbiAgICAgICAgICAgIHN0YXJ0ID0gZSAlIGNvdW50O1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3Qgc2VnbWVudCBvZiBzZWdtZW50cyl7XG4gICAgICAgIHN0YXJ0ID0gc3BhbkdhcHMgPyBzdGFydCA6IHNlZ21lbnQuc3RhcnQ7XG4gICAgICAgIGxldCBwcmV2ID0gcG9pbnRzW3N0YXJ0ICUgY291bnRdO1xuICAgICAgICBsZXQgc3R5bGU7XG4gICAgICAgIGZvcihpID0gc3RhcnQgKyAxOyBpIDw9IHNlZ21lbnQuZW5kOyBpKyspe1xuICAgICAgICAgICAgY29uc3QgcHQgPSBwb2ludHNbaSAlIGNvdW50XTtcbiAgICAgICAgICAgIHN0eWxlID0gcmVhZFN0eWxlKHNlZ21lbnRPcHRpb25zLnNldENvbnRleHQoY3JlYXRlQ29udGV4dChjaGFydENvbnRleHQsIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnc2VnbWVudCcsXG4gICAgICAgICAgICAgICAgcDA6IHByZXYsXG4gICAgICAgICAgICAgICAgcDE6IHB0LFxuICAgICAgICAgICAgICAgIHAwRGF0YUluZGV4OiAoaSAtIDEpICUgY291bnQsXG4gICAgICAgICAgICAgICAgcDFEYXRhSW5kZXg6IGkgJSBjb3VudCxcbiAgICAgICAgICAgICAgICBkYXRhc2V0SW5kZXhcbiAgICAgICAgICAgIH0pKSk7XG4gICAgICAgICAgICBpZiAoc3R5bGVDaGFuZ2VkKHN0eWxlLCBwcmV2U3R5bGUpKSB7XG4gICAgICAgICAgICAgICAgYWRkU3R5bGUoc3RhcnQsIGkgLSAxLCBzZWdtZW50Lmxvb3AsIHByZXZTdHlsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcmV2ID0gcHQ7XG4gICAgICAgICAgICBwcmV2U3R5bGUgPSBzdHlsZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnQgPCBpIC0gMSkge1xuICAgICAgICAgICAgYWRkU3R5bGUoc3RhcnQsIGkgLSAxLCBzZWdtZW50Lmxvb3AsIHByZXZTdHlsZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHJlYWRTdHlsZShvcHRpb25zKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBvcHRpb25zLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgYm9yZGVyQ2FwU3R5bGU6IG9wdGlvbnMuYm9yZGVyQ2FwU3R5bGUsXG4gICAgICAgIGJvcmRlckRhc2g6IG9wdGlvbnMuYm9yZGVyRGFzaCxcbiAgICAgICAgYm9yZGVyRGFzaE9mZnNldDogb3B0aW9ucy5ib3JkZXJEYXNoT2Zmc2V0LFxuICAgICAgICBib3JkZXJKb2luU3R5bGU6IG9wdGlvbnMuYm9yZGVySm9pblN0eWxlLFxuICAgICAgICBib3JkZXJXaWR0aDogb3B0aW9ucy5ib3JkZXJXaWR0aCxcbiAgICAgICAgYm9yZGVyQ29sb3I6IG9wdGlvbnMuYm9yZGVyQ29sb3JcbiAgICB9O1xufVxuZnVuY3Rpb24gc3R5bGVDaGFuZ2VkKHN0eWxlLCBwcmV2U3R5bGUpIHtcbiAgICBpZiAoIXByZXZTdHlsZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGNhY2hlID0gW107XG4gICAgY29uc3QgcmVwbGFjZXIgPSBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmICghaXNQYXR0ZXJuT3JHcmFkaWVudCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNhY2hlLmluY2x1ZGVzKHZhbHVlKSkge1xuICAgICAgICAgICAgY2FjaGUucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNhY2hlLmluZGV4T2YodmFsdWUpO1xuICAgIH07XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHN0eWxlLCByZXBsYWNlcikgIT09IEpTT04uc3RyaW5naWZ5KHByZXZTdHlsZSwgcmVwbGFjZXIpO1xufVxuXG5leHBvcnQgeyB1bmNsaXBBcmVhIGFzICQsIF9ybG9va3VwQnlLZXkgYXMgQSwgX2xvb2t1cEJ5S2V5IGFzIEIsIF9pc1BvaW50SW5BcmVhIGFzIEMsIGdldEFuZ2xlRnJvbVBvaW50IGFzIEQsIHRvUGFkZGluZyBhcyBFLCBlYWNoIGFzIEYsIGdldE1heGltdW1TaXplIGFzIEcsIEhBTEZfUEkgYXMgSCwgX2dldFBhcmVudE5vZGUgYXMgSSwgcmVhZFVzZWRTaXplIGFzIEosIHN1cHBvcnRzRXZlbnRMaXN0ZW5lck9wdGlvbnMgYXMgSywgdGhyb3R0bGVkIGFzIEwsIF9pc0RvbVN1cHBvcnRlZCBhcyBNLCBfZmFjdG9yaXplIGFzIE4sIGZpbml0ZU9yRGVmYXVsdCBhcyBPLCBQSSBhcyBQLCBjYWxsYmFjayBhcyBRLCBfYWRkR3JhY2UgYXMgUiwgX2xpbWl0VmFsdWUgYXMgUywgVEFVIGFzIFQsIHRvRGVncmVlcyBhcyBVLCBfbWVhc3VyZVRleHQgYXMgViwgX2ludDE2UmFuZ2UgYXMgVywgX2FsaWduUGl4ZWwgYXMgWCwgY2xpcEFyZWEgYXMgWSwgcmVuZGVyVGV4dCBhcyBaLCBfYXJyYXlVbmlxdWUgYXMgXywgcmVzb2x2ZSBhcyBhLCBmb250U3RyaW5nIGFzIGEkLCB0b0ZvbnQgYXMgYTAsIF90b0xlZnRSaWdodENlbnRlciBhcyBhMSwgX2FsaWduU3RhcnRFbmQgYXMgYTIsIG92ZXJyaWRlcyBhcyBhMywgbWVyZ2UgYXMgYTQsIF9jYXBpdGFsaXplIGFzIGE1LCBkZXNjcmlwdG9ycyBhcyBhNiwgaXNGdW5jdGlvbiBhcyBhNywgX2F0dGFjaENvbnRleHQgYXMgYTgsIF9jcmVhdGVSZXNvbHZlciBhcyBhOSwgb3ZlcnJpZGVUZXh0RGlyZWN0aW9uIGFzIGFBLCBfdGV4dFggYXMgYUIsIHJlc3RvcmVUZXh0RGlyZWN0aW9uIGFzIGFDLCBkcmF3UG9pbnRMZWdlbmQgYXMgYUQsIGRpc3RhbmNlQmV0d2VlblBvaW50cyBhcyBhRSwgbm9vcCBhcyBhRiwgX3NldE1pbkFuZE1heEJ5S2V5IGFzIGFHLCBuaWNlTnVtIGFzIGFILCBhbG1vc3RXaG9sZSBhcyBhSSwgYWxtb3N0RXF1YWxzIGFzIGFKLCBfZGVjaW1hbFBsYWNlcyBhcyBhSywgVGlja3MgYXMgYUwsIGxvZzEwIGFzIGFNLCBfbG9uZ2VzdFRleHQgYXMgYU4sIF9maWx0ZXJCZXR3ZWVuIGFzIGFPLCBfbG9va3VwIGFzIGFQLCBpc1BhdHRlcm5PckdyYWRpZW50IGFzIGFRLCBnZXRIb3ZlckNvbG9yIGFzIGFSLCBjbG9uZSBhcyBhUywgX21lcmdlciBhcyBhVCwgX21lcmdlcklmIGFzIGFVLCBfZGVwcmVjYXRlZCBhcyBhViwgX3NwbGl0S2V5IGFzIGFXLCB0b0ZvbnRTdHJpbmcgYXMgYVgsIHNwbGluZUN1cnZlIGFzIGFZLCBzcGxpbmVDdXJ2ZU1vbm90b25lIGFzIGFaLCBnZXRTdHlsZSBhcyBhXywgX2Rlc2NyaXB0b3JzIGFzIGFhLCBtZXJnZUlmIGFzIGFiLCB1aWQgYXMgYWMsIGRlYm91bmNlIGFzIGFkLCByZXRpbmFTY2FsZSBhcyBhZSwgY2xlYXJDYW52YXMgYXMgYWYsIHNldHNFcXVhbCBhcyBhZywgX2VsZW1lbnRzRXF1YWwgYXMgYWgsIF9pc0NsaWNrRXZlbnQgYXMgYWksIF9pc0JldHdlZW4gYXMgYWosIF9yZWFkVmFsdWVUb1Byb3BzIGFzIGFrLCBfdXBkYXRlQmV6aWVyQ29udHJvbFBvaW50cyBhcyBhbCwgX2NvbXB1dGVTZWdtZW50cyBhcyBhbSwgX2JvdW5kU2VnbWVudHMgYXMgYW4sIF9zdGVwcGVkSW50ZXJwb2xhdGlvbiBhcyBhbywgX2JlemllckludGVycG9sYXRpb24gYXMgYXAsIF9wb2ludEluTGluZSBhcyBhcSwgX3N0ZXBwZWRMaW5lVG8gYXMgYXIsIF9iZXppZXJDdXJ2ZVRvIGFzIGFzLCBkcmF3UG9pbnQgYXMgYXQsIGFkZFJvdW5kZWRSZWN0UGF0aCBhcyBhdSwgdG9UUkJMIGFzIGF2LCB0b1RSQkxDb3JuZXJzIGFzIGF3LCBfYm91bmRTZWdtZW50IGFzIGF4LCBfbm9ybWFsaXplQW5nbGUgYXMgYXksIGdldFJ0bEFkYXB0ZXIgYXMgYXosIGlzQXJyYXkgYXMgYiwgdG9MaW5lSGVpZ2h0IGFzIGIwLCBQSVRBVSBhcyBiMSwgSU5GSU5JVFkgYXMgYjIsIFJBRF9QRVJfREVHIGFzIGIzLCBRVUFSVEVSX1BJIGFzIGI0LCBUV09fVEhJUkRTX1BJIGFzIGI1LCBfYW5nbGVEaWZmIGFzIGI2LCBjb2xvciBhcyBjLCBkZWZhdWx0cyBhcyBkLCBlZmZlY3RzIGFzIGUsIHJlc29sdmVPYmplY3RLZXkgYXMgZiwgaXNOdW1iZXJGaW5pdGUgYXMgZywgZGVmaW5lZCBhcyBoLCBpc09iamVjdCBhcyBpLCBjcmVhdGVDb250ZXh0IGFzIGosIGlzTnVsbE9yVW5kZWYgYXMgaywgbGlzdGVuQXJyYXlFdmVudHMgYXMgbCwgdG9QZXJjZW50YWdlIGFzIG0sIHRvRGltZW5zaW9uIGFzIG4sIGZvcm1hdE51bWJlciBhcyBvLCBfYW5nbGVCZXR3ZWVuIGFzIHAsIF9nZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzIGFzIHEsIHJlcXVlc3RBbmltRnJhbWUgYXMgciwgc2lnbiBhcyBzLCB0b1JhZGlhbnMgYXMgdCwgdW5saXN0ZW5BcnJheUV2ZW50cyBhcyB1LCB2YWx1ZU9yRGVmYXVsdCBhcyB2LCBfc2NhbGVSYW5nZXNDaGFuZ2VkIGFzIHcsIGlzTnVtYmVyIGFzIHgsIF9wYXJzZU9iamVjdERhdGFSYWRpYWxTY2FsZSBhcyB5LCBnZXRSZWxhdGl2ZVBvc2l0aW9uIGFzIHogfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhlbHBlcnMuc2VnbWVudC5qcy5tYXBcbiIsIi8qIVxuICogQ2hhcnQuanMgdjQuMy4zXG4gKiBodHRwczovL3d3dy5jaGFydGpzLm9yZ1xuICogKGMpIDIwMjMgQ2hhcnQuanMgQ29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgciBhcyByZXF1ZXN0QW5pbUZyYW1lLCBhIGFzIHJlc29sdmUsIGUgYXMgZWZmZWN0cywgYyBhcyBjb2xvciwgaSBhcyBpc09iamVjdCwgZCBhcyBkZWZhdWx0cywgYiBhcyBpc0FycmF5LCB2IGFzIHZhbHVlT3JEZWZhdWx0LCB1IGFzIHVubGlzdGVuQXJyYXlFdmVudHMsIGwgYXMgbGlzdGVuQXJyYXlFdmVudHMsIGYgYXMgcmVzb2x2ZU9iamVjdEtleSwgZyBhcyBpc051bWJlckZpbml0ZSwgaCBhcyBkZWZpbmVkLCBzIGFzIHNpZ24sIGogYXMgY3JlYXRlQ29udGV4dCwgayBhcyBpc051bGxPclVuZGVmLCBfIGFzIF9hcnJheVVuaXF1ZSwgdCBhcyB0b1JhZGlhbnMsIG0gYXMgdG9QZXJjZW50YWdlLCBuIGFzIHRvRGltZW5zaW9uLCBUIGFzIFRBVSwgbyBhcyBmb3JtYXROdW1iZXIsIHAgYXMgX2FuZ2xlQmV0d2VlbiwgSCBhcyBIQUxGX1BJLCBQIGFzIFBJLCBxIGFzIF9nZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzLCB3IGFzIF9zY2FsZVJhbmdlc0NoYW5nZWQsIHggYXMgaXNOdW1iZXIsIHkgYXMgX3BhcnNlT2JqZWN0RGF0YVJhZGlhbFNjYWxlLCB6IGFzIGdldFJlbGF0aXZlUG9zaXRpb24sIEEgYXMgX3Jsb29rdXBCeUtleSwgQiBhcyBfbG9va3VwQnlLZXksIEMgYXMgX2lzUG9pbnRJbkFyZWEsIEQgYXMgZ2V0QW5nbGVGcm9tUG9pbnQsIEUgYXMgdG9QYWRkaW5nLCBGIGFzIGVhY2gsIEcgYXMgZ2V0TWF4aW11bVNpemUsIEkgYXMgX2dldFBhcmVudE5vZGUsIEogYXMgcmVhZFVzZWRTaXplLCBLIGFzIHN1cHBvcnRzRXZlbnRMaXN0ZW5lck9wdGlvbnMsIEwgYXMgdGhyb3R0bGVkLCBNIGFzIF9pc0RvbVN1cHBvcnRlZCwgTiBhcyBfZmFjdG9yaXplLCBPIGFzIGZpbml0ZU9yRGVmYXVsdCwgUSBhcyBjYWxsYmFjaywgUiBhcyBfYWRkR3JhY2UsIFMgYXMgX2xpbWl0VmFsdWUsIFUgYXMgdG9EZWdyZWVzLCBWIGFzIF9tZWFzdXJlVGV4dCwgVyBhcyBfaW50MTZSYW5nZSwgWCBhcyBfYWxpZ25QaXhlbCwgWSBhcyBjbGlwQXJlYSwgWiBhcyByZW5kZXJUZXh0LCAkIGFzIHVuY2xpcEFyZWEsIGEwIGFzIHRvRm9udCwgYTEgYXMgX3RvTGVmdFJpZ2h0Q2VudGVyLCBhMiBhcyBfYWxpZ25TdGFydEVuZCwgYTMgYXMgb3ZlcnJpZGVzLCBhNCBhcyBtZXJnZSwgYTUgYXMgX2NhcGl0YWxpemUsIGE2IGFzIGRlc2NyaXB0b3JzLCBhNyBhcyBpc0Z1bmN0aW9uLCBhOCBhcyBfYXR0YWNoQ29udGV4dCwgYTkgYXMgX2NyZWF0ZVJlc29sdmVyLCBhYSBhcyBfZGVzY3JpcHRvcnMsIGFiIGFzIG1lcmdlSWYsIGFjIGFzIHVpZCwgYWQgYXMgZGVib3VuY2UsIGFlIGFzIHJldGluYVNjYWxlLCBhZiBhcyBjbGVhckNhbnZhcywgYWcgYXMgc2V0c0VxdWFsLCBhaCBhcyBfZWxlbWVudHNFcXVhbCwgYWkgYXMgX2lzQ2xpY2tFdmVudCwgYWogYXMgX2lzQmV0d2VlbiwgYWsgYXMgX3JlYWRWYWx1ZVRvUHJvcHMsIGFsIGFzIF91cGRhdGVCZXppZXJDb250cm9sUG9pbnRzLCBhbSBhcyBfY29tcHV0ZVNlZ21lbnRzLCBhbiBhcyBfYm91bmRTZWdtZW50cywgYW8gYXMgX3N0ZXBwZWRJbnRlcnBvbGF0aW9uLCBhcCBhcyBfYmV6aWVySW50ZXJwb2xhdGlvbiwgYXEgYXMgX3BvaW50SW5MaW5lLCBhciBhcyBfc3RlcHBlZExpbmVUbywgYXMgYXMgX2JlemllckN1cnZlVG8sIGF0IGFzIGRyYXdQb2ludCwgYXUgYXMgYWRkUm91bmRlZFJlY3RQYXRoLCBhdiBhcyB0b1RSQkwsIGF3IGFzIHRvVFJCTENvcm5lcnMsIGF4IGFzIF9ib3VuZFNlZ21lbnQsIGF5IGFzIF9ub3JtYWxpemVBbmdsZSwgYXogYXMgZ2V0UnRsQWRhcHRlciwgYUEgYXMgb3ZlcnJpZGVUZXh0RGlyZWN0aW9uLCBhQiBhcyBfdGV4dFgsIGFDIGFzIHJlc3RvcmVUZXh0RGlyZWN0aW9uLCBhRCBhcyBkcmF3UG9pbnRMZWdlbmQsIGFFIGFzIGRpc3RhbmNlQmV0d2VlblBvaW50cywgYUYgYXMgbm9vcCwgYUcgYXMgX3NldE1pbkFuZE1heEJ5S2V5LCBhSCBhcyBuaWNlTnVtLCBhSSBhcyBhbG1vc3RXaG9sZSwgYUogYXMgYWxtb3N0RXF1YWxzLCBhSyBhcyBfZGVjaW1hbFBsYWNlcywgYUwgYXMgVGlja3MsIGFNIGFzIGxvZzEwLCBhTiBhcyBfbG9uZ2VzdFRleHQsIGFPIGFzIF9maWx0ZXJCZXR3ZWVuLCBhUCBhcyBfbG9va3VwIH0gZnJvbSAnLi9jaHVua3MvaGVscGVycy5zZWdtZW50LmpzJztcbmltcG9ydCAnQGt1cmtsZS9jb2xvcic7XG5cbmNsYXNzIEFuaW1hdG9yIHtcbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICB0aGlzLl9yZXF1ZXN0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fY2hhcnRzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLl9ydW5uaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2xhc3REYXRlID0gdW5kZWZpbmVkO1xuICAgIH1cbiBfbm90aWZ5KGNoYXJ0LCBhbmltcywgZGF0ZSwgdHlwZSkge1xuICAgICAgICBjb25zdCBjYWxsYmFja3MgPSBhbmltcy5saXN0ZW5lcnNbdHlwZV07XG4gICAgICAgIGNvbnN0IG51bVN0ZXBzID0gYW5pbXMuZHVyYXRpb247XG4gICAgICAgIGNhbGxiYWNrcy5mb3JFYWNoKChmbik9PmZuKHtcbiAgICAgICAgICAgICAgICBjaGFydCxcbiAgICAgICAgICAgICAgICBpbml0aWFsOiBhbmltcy5pbml0aWFsLFxuICAgICAgICAgICAgICAgIG51bVN0ZXBzLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRTdGVwOiBNYXRoLm1pbihkYXRlIC0gYW5pbXMuc3RhcnQsIG51bVN0ZXBzKVxuICAgICAgICAgICAgfSkpO1xuICAgIH1cbiBfcmVmcmVzaCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3JlcXVlc3QpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9ydW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcmVxdWVzdCA9IHJlcXVlc3RBbmltRnJhbWUuY2FsbCh3aW5kb3csICgpPT57XG4gICAgICAgICAgICB0aGlzLl91cGRhdGUoKTtcbiAgICAgICAgICAgIHRoaXMuX3JlcXVlc3QgPSBudWxsO1xuICAgICAgICAgICAgaWYgKHRoaXMuX3J1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWZyZXNoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiBfdXBkYXRlKGRhdGUgPSBEYXRlLm5vdygpKSB7XG4gICAgICAgIGxldCByZW1haW5pbmcgPSAwO1xuICAgICAgICB0aGlzLl9jaGFydHMuZm9yRWFjaCgoYW5pbXMsIGNoYXJ0KT0+e1xuICAgICAgICAgICAgaWYgKCFhbmltcy5ydW5uaW5nIHx8ICFhbmltcy5pdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBpdGVtcyA9IGFuaW1zLml0ZW1zO1xuICAgICAgICAgICAgbGV0IGkgPSBpdGVtcy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgbGV0IGRyYXcgPSBmYWxzZTtcbiAgICAgICAgICAgIGxldCBpdGVtO1xuICAgICAgICAgICAgZm9yKDsgaSA+PSAwOyAtLWkpe1xuICAgICAgICAgICAgICAgIGl0ZW0gPSBpdGVtc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5fYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLl90b3RhbCA+IGFuaW1zLmR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltcy5kdXJhdGlvbiA9IGl0ZW0uX3RvdGFsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0udGljayhkYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgZHJhdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbXNbaV0gPSBpdGVtc1tpdGVtcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMucG9wKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRyYXcpIHtcbiAgICAgICAgICAgICAgICBjaGFydC5kcmF3KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbm90aWZ5KGNoYXJ0LCBhbmltcywgZGF0ZSwgJ3Byb2dyZXNzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWl0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGFuaW1zLnJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9ub3RpZnkoY2hhcnQsIGFuaW1zLCBkYXRlLCAnY29tcGxldGUnKTtcbiAgICAgICAgICAgICAgICBhbmltcy5pbml0aWFsID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZW1haW5pbmcgKz0gaXRlbXMubGVuZ3RoO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fbGFzdERhdGUgPSBkYXRlO1xuICAgICAgICBpZiAocmVtYWluaW5nID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl9ydW5uaW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gX2dldEFuaW1zKGNoYXJ0KSB7XG4gICAgICAgIGNvbnN0IGNoYXJ0cyA9IHRoaXMuX2NoYXJ0cztcbiAgICAgICAgbGV0IGFuaW1zID0gY2hhcnRzLmdldChjaGFydCk7XG4gICAgICAgIGlmICghYW5pbXMpIHtcbiAgICAgICAgICAgIGFuaW1zID0ge1xuICAgICAgICAgICAgICAgIHJ1bm5pbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGluaXRpYWw6IHRydWUsXG4gICAgICAgICAgICAgICAgaXRlbXM6IFtdLFxuICAgICAgICAgICAgICAgIGxpc3RlbmVyczoge1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogW10sXG4gICAgICAgICAgICAgICAgICAgIHByb2dyZXNzOiBbXVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjaGFydHMuc2V0KGNoYXJ0LCBhbmltcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFuaW1zO1xuICAgIH1cbiBsaXN0ZW4oY2hhcnQsIGV2ZW50LCBjYikge1xuICAgICAgICB0aGlzLl9nZXRBbmltcyhjaGFydCkubGlzdGVuZXJzW2V2ZW50XS5wdXNoKGNiKTtcbiAgICB9XG4gYWRkKGNoYXJ0LCBpdGVtcykge1xuICAgICAgICBpZiAoIWl0ZW1zIHx8ICFpdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9nZXRBbmltcyhjaGFydCkuaXRlbXMucHVzaCguLi5pdGVtcyk7XG4gICAgfVxuIGhhcyhjaGFydCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0QW5pbXMoY2hhcnQpLml0ZW1zLmxlbmd0aCA+IDA7XG4gICAgfVxuIHN0YXJ0KGNoYXJ0KSB7XG4gICAgICAgIGNvbnN0IGFuaW1zID0gdGhpcy5fY2hhcnRzLmdldChjaGFydCk7XG4gICAgICAgIGlmICghYW5pbXMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBhbmltcy5ydW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgYW5pbXMuc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgICAgICBhbmltcy5kdXJhdGlvbiA9IGFuaW1zLml0ZW1zLnJlZHVjZSgoYWNjLCBjdXIpPT5NYXRoLm1heChhY2MsIGN1ci5fZHVyYXRpb24pLCAwKTtcbiAgICAgICAgdGhpcy5fcmVmcmVzaCgpO1xuICAgIH1cbiAgICBydW5uaW5nKGNoYXJ0KSB7XG4gICAgICAgIGlmICghdGhpcy5fcnVubmluZykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFuaW1zID0gdGhpcy5fY2hhcnRzLmdldChjaGFydCk7XG4gICAgICAgIGlmICghYW5pbXMgfHwgIWFuaW1zLnJ1bm5pbmcgfHwgIWFuaW1zLml0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiBzdG9wKGNoYXJ0KSB7XG4gICAgICAgIGNvbnN0IGFuaW1zID0gdGhpcy5fY2hhcnRzLmdldChjaGFydCk7XG4gICAgICAgIGlmICghYW5pbXMgfHwgIWFuaW1zLml0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gYW5pbXMuaXRlbXM7XG4gICAgICAgIGxldCBpID0gaXRlbXMubGVuZ3RoIC0gMTtcbiAgICAgICAgZm9yKDsgaSA+PSAwOyAtLWkpe1xuICAgICAgICAgICAgaXRlbXNbaV0uY2FuY2VsKCk7XG4gICAgICAgIH1cbiAgICAgICAgYW5pbXMuaXRlbXMgPSBbXTtcbiAgICAgICAgdGhpcy5fbm90aWZ5KGNoYXJ0LCBhbmltcywgRGF0ZS5ub3coKSwgJ2NvbXBsZXRlJyk7XG4gICAgfVxuIHJlbW92ZShjaGFydCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2hhcnRzLmRlbGV0ZShjaGFydCk7XG4gICAgfVxufVxudmFyIGFuaW1hdG9yID0gLyogI19fUFVSRV9fICovIG5ldyBBbmltYXRvcigpO1xuXG5jb25zdCB0cmFuc3BhcmVudCA9ICd0cmFuc3BhcmVudCc7XG5jb25zdCBpbnRlcnBvbGF0b3JzID0ge1xuICAgIGJvb2xlYW4gKGZyb20sIHRvLCBmYWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGZhY3RvciA+IDAuNSA/IHRvIDogZnJvbTtcbiAgICB9LFxuIGNvbG9yIChmcm9tLCB0bywgZmFjdG9yKSB7XG4gICAgICAgIGNvbnN0IGMwID0gY29sb3IoZnJvbSB8fCB0cmFuc3BhcmVudCk7XG4gICAgICAgIGNvbnN0IGMxID0gYzAudmFsaWQgJiYgY29sb3IodG8gfHwgdHJhbnNwYXJlbnQpO1xuICAgICAgICByZXR1cm4gYzEgJiYgYzEudmFsaWQgPyBjMS5taXgoYzAsIGZhY3RvcikuaGV4U3RyaW5nKCkgOiB0bztcbiAgICB9LFxuICAgIG51bWJlciAoZnJvbSwgdG8sIGZhY3Rvcikge1xuICAgICAgICByZXR1cm4gZnJvbSArICh0byAtIGZyb20pICogZmFjdG9yO1xuICAgIH1cbn07XG5jbGFzcyBBbmltYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNmZywgdGFyZ2V0LCBwcm9wLCB0byl7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IHRhcmdldFtwcm9wXTtcbiAgICAgICAgdG8gPSByZXNvbHZlKFtcbiAgICAgICAgICAgIGNmZy50byxcbiAgICAgICAgICAgIHRvLFxuICAgICAgICAgICAgY3VycmVudFZhbHVlLFxuICAgICAgICAgICAgY2ZnLmZyb21cbiAgICAgICAgXSk7XG4gICAgICAgIGNvbnN0IGZyb20gPSByZXNvbHZlKFtcbiAgICAgICAgICAgIGNmZy5mcm9tLFxuICAgICAgICAgICAgY3VycmVudFZhbHVlLFxuICAgICAgICAgICAgdG9cbiAgICAgICAgXSk7XG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuX2ZuID0gY2ZnLmZuIHx8IGludGVycG9sYXRvcnNbY2ZnLnR5cGUgfHwgdHlwZW9mIGZyb21dO1xuICAgICAgICB0aGlzLl9lYXNpbmcgPSBlZmZlY3RzW2NmZy5lYXNpbmddIHx8IGVmZmVjdHMubGluZWFyO1xuICAgICAgICB0aGlzLl9zdGFydCA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSArIChjZmcuZGVsYXkgfHwgMCkpO1xuICAgICAgICB0aGlzLl9kdXJhdGlvbiA9IHRoaXMuX3RvdGFsID0gTWF0aC5mbG9vcihjZmcuZHVyYXRpb24pO1xuICAgICAgICB0aGlzLl9sb29wID0gISFjZmcubG9vcDtcbiAgICAgICAgdGhpcy5fdGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICB0aGlzLl9wcm9wID0gcHJvcDtcbiAgICAgICAgdGhpcy5fZnJvbSA9IGZyb207XG4gICAgICAgIHRoaXMuX3RvID0gdG87XG4gICAgICAgIHRoaXMuX3Byb21pc2VzID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBhY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmU7XG4gICAgfVxuICAgIHVwZGF0ZShjZmcsIHRvLCBkYXRlKSB7XG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmUpIHtcbiAgICAgICAgICAgIHRoaXMuX25vdGlmeShmYWxzZSk7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50VmFsdWUgPSB0aGlzLl90YXJnZXRbdGhpcy5fcHJvcF07XG4gICAgICAgICAgICBjb25zdCBlbGFwc2VkID0gZGF0ZSAtIHRoaXMuX3N0YXJ0O1xuICAgICAgICAgICAgY29uc3QgcmVtYWluID0gdGhpcy5fZHVyYXRpb24gLSBlbGFwc2VkO1xuICAgICAgICAgICAgdGhpcy5fc3RhcnQgPSBkYXRlO1xuICAgICAgICAgICAgdGhpcy5fZHVyYXRpb24gPSBNYXRoLmZsb29yKE1hdGgubWF4KHJlbWFpbiwgY2ZnLmR1cmF0aW9uKSk7XG4gICAgICAgICAgICB0aGlzLl90b3RhbCArPSBlbGFwc2VkO1xuICAgICAgICAgICAgdGhpcy5fbG9vcCA9ICEhY2ZnLmxvb3A7XG4gICAgICAgICAgICB0aGlzLl90byA9IHJlc29sdmUoW1xuICAgICAgICAgICAgICAgIGNmZy50byxcbiAgICAgICAgICAgICAgICB0byxcbiAgICAgICAgICAgICAgICBjdXJyZW50VmFsdWUsXG4gICAgICAgICAgICAgICAgY2ZnLmZyb21cbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgdGhpcy5fZnJvbSA9IHJlc29sdmUoW1xuICAgICAgICAgICAgICAgIGNmZy5mcm9tLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSxcbiAgICAgICAgICAgICAgICB0b1xuICAgICAgICAgICAgXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2FuY2VsKCkge1xuICAgICAgICBpZiAodGhpcy5fYWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLnRpY2soRGF0ZS5ub3coKSk7XG4gICAgICAgICAgICB0aGlzLl9hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuX25vdGlmeShmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGljayhkYXRlKSB7XG4gICAgICAgIGNvbnN0IGVsYXBzZWQgPSBkYXRlIC0gdGhpcy5fc3RhcnQ7XG4gICAgICAgIGNvbnN0IGR1cmF0aW9uID0gdGhpcy5fZHVyYXRpb247XG4gICAgICAgIGNvbnN0IHByb3AgPSB0aGlzLl9wcm9wO1xuICAgICAgICBjb25zdCBmcm9tID0gdGhpcy5fZnJvbTtcbiAgICAgICAgY29uc3QgbG9vcCA9IHRoaXMuX2xvb3A7XG4gICAgICAgIGNvbnN0IHRvID0gdGhpcy5fdG87XG4gICAgICAgIGxldCBmYWN0b3I7XG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IGZyb20gIT09IHRvICYmIChsb29wIHx8IGVsYXBzZWQgPCBkdXJhdGlvbik7XG4gICAgICAgIGlmICghdGhpcy5fYWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLl90YXJnZXRbcHJvcF0gPSB0bztcbiAgICAgICAgICAgIHRoaXMuX25vdGlmeSh0cnVlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxhcHNlZCA8IDApIHtcbiAgICAgICAgICAgIHRoaXMuX3RhcmdldFtwcm9wXSA9IGZyb207XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZmFjdG9yID0gZWxhcHNlZCAvIGR1cmF0aW9uICUgMjtcbiAgICAgICAgZmFjdG9yID0gbG9vcCAmJiBmYWN0b3IgPiAxID8gMiAtIGZhY3RvciA6IGZhY3RvcjtcbiAgICAgICAgZmFjdG9yID0gdGhpcy5fZWFzaW5nKE1hdGgubWluKDEsIE1hdGgubWF4KDAsIGZhY3RvcikpKTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0W3Byb3BdID0gdGhpcy5fZm4oZnJvbSwgdG8sIGZhY3Rvcik7XG4gICAgfVxuICAgIHdhaXQoKSB7XG4gICAgICAgIGNvbnN0IHByb21pc2VzID0gdGhpcy5fcHJvbWlzZXMgfHwgKHRoaXMuX3Byb21pc2VzID0gW10pO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlcywgcmVqKT0+e1xuICAgICAgICAgICAgcHJvbWlzZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgcmVzLFxuICAgICAgICAgICAgICAgIHJlalxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfbm90aWZ5KHJlc29sdmVkKSB7XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IHJlc29sdmVkID8gJ3JlcycgOiAncmVqJztcbiAgICAgICAgY29uc3QgcHJvbWlzZXMgPSB0aGlzLl9wcm9taXNlcyB8fCBbXTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHByb21pc2VzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIHByb21pc2VzW2ldW21ldGhvZF0oKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuY2xhc3MgQW5pbWF0aW9ucyB7XG4gICAgY29uc3RydWN0b3IoY2hhcnQsIGNvbmZpZyl7XG4gICAgICAgIHRoaXMuX2NoYXJ0ID0gY2hhcnQ7XG4gICAgICAgIHRoaXMuX3Byb3BlcnRpZXMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuY29uZmlndXJlKGNvbmZpZyk7XG4gICAgfVxuICAgIGNvbmZpZ3VyZShjb25maWcpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChjb25maWcpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYW5pbWF0aW9uT3B0aW9ucyA9IE9iamVjdC5rZXlzKGRlZmF1bHRzLmFuaW1hdGlvbik7XG4gICAgICAgIGNvbnN0IGFuaW1hdGVkUHJvcHMgPSB0aGlzLl9wcm9wZXJ0aWVzO1xuICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhjb25maWcpLmZvckVhY2goKGtleSk9PntcbiAgICAgICAgICAgIGNvbnN0IGNmZyA9IGNvbmZpZ1trZXldO1xuICAgICAgICAgICAgaWYgKCFpc09iamVjdChjZmcpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcmVzb2x2ZWQgPSB7fTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgb3B0aW9uIG9mIGFuaW1hdGlvbk9wdGlvbnMpe1xuICAgICAgICAgICAgICAgIHJlc29sdmVkW29wdGlvbl0gPSBjZmdbb3B0aW9uXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIChpc0FycmF5KGNmZy5wcm9wZXJ0aWVzKSAmJiBjZmcucHJvcGVydGllcyB8fCBbXG4gICAgICAgICAgICAgICAga2V5XG4gICAgICAgICAgICBdKS5mb3JFYWNoKChwcm9wKT0+e1xuICAgICAgICAgICAgICAgIGlmIChwcm9wID09PSBrZXkgfHwgIWFuaW1hdGVkUHJvcHMuaGFzKHByb3ApKSB7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGVkUHJvcHMuc2V0KHByb3AsIHJlc29sdmVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuIF9hbmltYXRlT3B0aW9ucyh0YXJnZXQsIHZhbHVlcykge1xuICAgICAgICBjb25zdCBuZXdPcHRpb25zID0gdmFsdWVzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSByZXNvbHZlVGFyZ2V0T3B0aW9ucyh0YXJnZXQsIG5ld09wdGlvbnMpO1xuICAgICAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhbmltYXRpb25zID0gdGhpcy5fY3JlYXRlQW5pbWF0aW9ucyhvcHRpb25zLCBuZXdPcHRpb25zKTtcbiAgICAgICAgaWYgKG5ld09wdGlvbnMuJHNoYXJlZCkge1xuICAgICAgICAgICAgYXdhaXRBbGwodGFyZ2V0Lm9wdGlvbnMuJGFuaW1hdGlvbnMsIG5ld09wdGlvbnMpLnRoZW4oKCk9PntcbiAgICAgICAgICAgICAgICB0YXJnZXQub3B0aW9ucyA9IG5ld09wdGlvbnM7XG4gICAgICAgICAgICB9LCAoKT0+e1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbnM7XG4gICAgfVxuIF9jcmVhdGVBbmltYXRpb25zKHRhcmdldCwgdmFsdWVzKSB7XG4gICAgICAgIGNvbnN0IGFuaW1hdGVkUHJvcHMgPSB0aGlzLl9wcm9wZXJ0aWVzO1xuICAgICAgICBjb25zdCBhbmltYXRpb25zID0gW107XG4gICAgICAgIGNvbnN0IHJ1bm5pbmcgPSB0YXJnZXQuJGFuaW1hdGlvbnMgfHwgKHRhcmdldC4kYW5pbWF0aW9ucyA9IHt9KTtcbiAgICAgICAgY29uc3QgcHJvcHMgPSBPYmplY3Qua2V5cyh2YWx1ZXMpO1xuICAgICAgICBjb25zdCBkYXRlID0gRGF0ZS5ub3coKTtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGZvcihpID0gcHJvcHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpe1xuICAgICAgICAgICAgY29uc3QgcHJvcCA9IHByb3BzW2ldO1xuICAgICAgICAgICAgaWYgKHByb3AuY2hhckF0KDApID09PSAnJCcpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcm9wID09PSAnb3B0aW9ucycpIHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb25zLnB1c2goLi4udGhpcy5fYW5pbWF0ZU9wdGlvbnModGFyZ2V0LCB2YWx1ZXMpKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdmFsdWVzW3Byb3BdO1xuICAgICAgICAgICAgbGV0IGFuaW1hdGlvbiA9IHJ1bm5pbmdbcHJvcF07XG4gICAgICAgICAgICBjb25zdCBjZmcgPSBhbmltYXRlZFByb3BzLmdldChwcm9wKTtcbiAgICAgICAgICAgIGlmIChhbmltYXRpb24pIHtcbiAgICAgICAgICAgICAgICBpZiAoY2ZnICYmIGFuaW1hdGlvbi5hY3RpdmUoKSkge1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24udXBkYXRlKGNmZywgdmFsdWUsIGRhdGUpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24uY2FuY2VsKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFjZmcgfHwgIWNmZy5kdXJhdGlvbikge1xuICAgICAgICAgICAgICAgIHRhcmdldFtwcm9wXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcnVubmluZ1twcm9wXSA9IGFuaW1hdGlvbiA9IG5ldyBBbmltYXRpb24oY2ZnLCB0YXJnZXQsIHByb3AsIHZhbHVlKTtcbiAgICAgICAgICAgIGFuaW1hdGlvbnMucHVzaChhbmltYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbmltYXRpb25zO1xuICAgIH1cbiB1cGRhdGUodGFyZ2V0LCB2YWx1ZXMpIHtcbiAgICAgICAgaWYgKHRoaXMuX3Byb3BlcnRpZXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHZhbHVlcyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYW5pbWF0aW9ucyA9IHRoaXMuX2NyZWF0ZUFuaW1hdGlvbnModGFyZ2V0LCB2YWx1ZXMpO1xuICAgICAgICBpZiAoYW5pbWF0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGFuaW1hdG9yLmFkZCh0aGlzLl9jaGFydCwgYW5pbWF0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGF3YWl0QWxsKGFuaW1hdGlvbnMsIHByb3BlcnRpZXMpIHtcbiAgICBjb25zdCBydW5uaW5nID0gW107XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHByb3BlcnRpZXMpO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgY29uc3QgYW5pbSA9IGFuaW1hdGlvbnNba2V5c1tpXV07XG4gICAgICAgIGlmIChhbmltICYmIGFuaW0uYWN0aXZlKCkpIHtcbiAgICAgICAgICAgIHJ1bm5pbmcucHVzaChhbmltLndhaXQoKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHJ1bm5pbmcpO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVRhcmdldE9wdGlvbnModGFyZ2V0LCBuZXdPcHRpb25zKSB7XG4gICAgaWYgKCFuZXdPcHRpb25zKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IG9wdGlvbnMgPSB0YXJnZXQub3B0aW9ucztcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgdGFyZ2V0Lm9wdGlvbnMgPSBuZXdPcHRpb25zO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChvcHRpb25zLiRzaGFyZWQpIHtcbiAgICAgICAgdGFyZ2V0Lm9wdGlvbnMgPSBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucywge1xuICAgICAgICAgICAgJHNoYXJlZDogZmFsc2UsXG4gICAgICAgICAgICAkYW5pbWF0aW9uczoge31cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zO1xufVxuXG5mdW5jdGlvbiBzY2FsZUNsaXAoc2NhbGUsIGFsbG93ZWRPdmVyZmxvdykge1xuICAgIGNvbnN0IG9wdHMgPSBzY2FsZSAmJiBzY2FsZS5vcHRpb25zIHx8IHt9O1xuICAgIGNvbnN0IHJldmVyc2UgPSBvcHRzLnJldmVyc2U7XG4gICAgY29uc3QgbWluID0gb3B0cy5taW4gPT09IHVuZGVmaW5lZCA/IGFsbG93ZWRPdmVyZmxvdyA6IDA7XG4gICAgY29uc3QgbWF4ID0gb3B0cy5tYXggPT09IHVuZGVmaW5lZCA/IGFsbG93ZWRPdmVyZmxvdyA6IDA7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQ6IHJldmVyc2UgPyBtYXggOiBtaW4sXG4gICAgICAgIGVuZDogcmV2ZXJzZSA/IG1pbiA6IG1heFxuICAgIH07XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xpcCh4U2NhbGUsIHlTY2FsZSwgYWxsb3dlZE92ZXJmbG93KSB7XG4gICAgaWYgKGFsbG93ZWRPdmVyZmxvdyA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCB4ID0gc2NhbGVDbGlwKHhTY2FsZSwgYWxsb3dlZE92ZXJmbG93KTtcbiAgICBjb25zdCB5ID0gc2NhbGVDbGlwKHlTY2FsZSwgYWxsb3dlZE92ZXJmbG93KTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IHkuZW5kLFxuICAgICAgICByaWdodDogeC5lbmQsXG4gICAgICAgIGJvdHRvbTogeS5zdGFydCxcbiAgICAgICAgbGVmdDogeC5zdGFydFxuICAgIH07XG59XG5mdW5jdGlvbiB0b0NsaXAodmFsdWUpIHtcbiAgICBsZXQgdCwgciwgYiwgbDtcbiAgICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHQgPSB2YWx1ZS50b3A7XG4gICAgICAgIHIgPSB2YWx1ZS5yaWdodDtcbiAgICAgICAgYiA9IHZhbHVlLmJvdHRvbTtcbiAgICAgICAgbCA9IHZhbHVlLmxlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdCA9IHIgPSBiID0gbCA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IHQsXG4gICAgICAgIHJpZ2h0OiByLFxuICAgICAgICBib3R0b206IGIsXG4gICAgICAgIGxlZnQ6IGwsXG4gICAgICAgIGRpc2FibGVkOiB2YWx1ZSA9PT0gZmFsc2VcbiAgICB9O1xufVxuZnVuY3Rpb24gZ2V0U29ydGVkRGF0YXNldEluZGljZXMoY2hhcnQsIGZpbHRlclZpc2libGUpIHtcbiAgICBjb25zdCBrZXlzID0gW107XG4gICAgY29uc3QgbWV0YXNldHMgPSBjaGFydC5fZ2V0U29ydGVkRGF0YXNldE1ldGFzKGZpbHRlclZpc2libGUpO1xuICAgIGxldCBpLCBpbGVuO1xuICAgIGZvcihpID0gMCwgaWxlbiA9IG1ldGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIGtleXMucHVzaChtZXRhc2V0c1tpXS5pbmRleCk7XG4gICAgfVxuICAgIHJldHVybiBrZXlzO1xufVxuZnVuY3Rpb24gYXBwbHlTdGFjayhzdGFjaywgdmFsdWUsIGRzSW5kZXgsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IGtleXMgPSBzdGFjay5rZXlzO1xuICAgIGNvbnN0IHNpbmdsZU1vZGUgPSBvcHRpb25zLm1vZGUgPT09ICdzaW5nbGUnO1xuICAgIGxldCBpLCBpbGVuLCBkYXRhc2V0SW5kZXgsIG90aGVyVmFsdWU7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9yKGkgPSAwLCBpbGVuID0ga2V5cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBkYXRhc2V0SW5kZXggPSAra2V5c1tpXTtcbiAgICAgICAgaWYgKGRhdGFzZXRJbmRleCA9PT0gZHNJbmRleCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYWxsKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBvdGhlclZhbHVlID0gc3RhY2sudmFsdWVzW2RhdGFzZXRJbmRleF07XG4gICAgICAgIGlmIChpc051bWJlckZpbml0ZShvdGhlclZhbHVlKSAmJiAoc2luZ2xlTW9kZSB8fCB2YWx1ZSA9PT0gMCB8fCBzaWduKHZhbHVlKSA9PT0gc2lnbihvdGhlclZhbHVlKSkpIHtcbiAgICAgICAgICAgIHZhbHVlICs9IG90aGVyVmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gY29udmVydE9iamVjdERhdGFUb0FycmF5KGRhdGEpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gICAgY29uc3QgYWRhdGEgPSBuZXcgQXJyYXkoa2V5cy5sZW5ndGgpO1xuICAgIGxldCBpLCBpbGVuLCBrZXk7XG4gICAgZm9yKGkgPSAwLCBpbGVuID0ga2V5cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICBhZGF0YVtpXSA9IHtcbiAgICAgICAgICAgIHg6IGtleSxcbiAgICAgICAgICAgIHk6IGRhdGFba2V5XVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gYWRhdGE7XG59XG5mdW5jdGlvbiBpc1N0YWNrZWQoc2NhbGUsIG1ldGEpIHtcbiAgICBjb25zdCBzdGFja2VkID0gc2NhbGUgJiYgc2NhbGUub3B0aW9ucy5zdGFja2VkO1xuICAgIHJldHVybiBzdGFja2VkIHx8IHN0YWNrZWQgPT09IHVuZGVmaW5lZCAmJiBtZXRhLnN0YWNrICE9PSB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBnZXRTdGFja0tleShpbmRleFNjYWxlLCB2YWx1ZVNjYWxlLCBtZXRhKSB7XG4gICAgcmV0dXJuIGAke2luZGV4U2NhbGUuaWR9LiR7dmFsdWVTY2FsZS5pZH0uJHttZXRhLnN0YWNrIHx8IG1ldGEudHlwZX1gO1xufVxuZnVuY3Rpb24gZ2V0VXNlckJvdW5kcyhzY2FsZSkge1xuICAgIGNvbnN0IHsgbWluICwgbWF4ICwgbWluRGVmaW5lZCAsIG1heERlZmluZWQgIH0gPSBzY2FsZS5nZXRVc2VyQm91bmRzKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWluOiBtaW5EZWZpbmVkID8gbWluIDogTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZLFxuICAgICAgICBtYXg6IG1heERlZmluZWQgPyBtYXggOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFlcbiAgICB9O1xufVxuZnVuY3Rpb24gZ2V0T3JDcmVhdGVTdGFjayhzdGFja3MsIHN0YWNrS2V5LCBpbmRleFZhbHVlKSB7XG4gICAgY29uc3Qgc3ViU3RhY2sgPSBzdGFja3Nbc3RhY2tLZXldIHx8IChzdGFja3Nbc3RhY2tLZXldID0ge30pO1xuICAgIHJldHVybiBzdWJTdGFja1tpbmRleFZhbHVlXSB8fCAoc3ViU3RhY2tbaW5kZXhWYWx1ZV0gPSB7fSk7XG59XG5mdW5jdGlvbiBnZXRMYXN0SW5kZXhJblN0YWNrKHN0YWNrLCB2U2NhbGUsIHBvc2l0aXZlLCB0eXBlKSB7XG4gICAgZm9yIChjb25zdCBtZXRhIG9mIHZTY2FsZS5nZXRNYXRjaGluZ1Zpc2libGVNZXRhcyh0eXBlKS5yZXZlcnNlKCkpe1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHN0YWNrW21ldGEuaW5kZXhdO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgdmFsdWUgPiAwIHx8ICFwb3NpdGl2ZSAmJiB2YWx1ZSA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBtZXRhLmluZGV4O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gdXBkYXRlU3RhY2tzKGNvbnRyb2xsZXIsIHBhcnNlZCkge1xuICAgIGNvbnN0IHsgY2hhcnQgLCBfY2FjaGVkTWV0YTogbWV0YSAgfSA9IGNvbnRyb2xsZXI7XG4gICAgY29uc3Qgc3RhY2tzID0gY2hhcnQuX3N0YWNrcyB8fCAoY2hhcnQuX3N0YWNrcyA9IHt9KTtcbiAgICBjb25zdCB7IGlTY2FsZSAsIHZTY2FsZSAsIGluZGV4OiBkYXRhc2V0SW5kZXggIH0gPSBtZXRhO1xuICAgIGNvbnN0IGlBeGlzID0gaVNjYWxlLmF4aXM7XG4gICAgY29uc3QgdkF4aXMgPSB2U2NhbGUuYXhpcztcbiAgICBjb25zdCBrZXkgPSBnZXRTdGFja0tleShpU2NhbGUsIHZTY2FsZSwgbWV0YSk7XG4gICAgY29uc3QgaWxlbiA9IHBhcnNlZC5sZW5ndGg7XG4gICAgbGV0IHN0YWNrO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBjb25zdCBpdGVtID0gcGFyc2VkW2ldO1xuICAgICAgICBjb25zdCB7IFtpQXhpc106IGluZGV4ICwgW3ZBeGlzXTogdmFsdWUgIH0gPSBpdGVtO1xuICAgICAgICBjb25zdCBpdGVtU3RhY2tzID0gaXRlbS5fc3RhY2tzIHx8IChpdGVtLl9zdGFja3MgPSB7fSk7XG4gICAgICAgIHN0YWNrID0gaXRlbVN0YWNrc1t2QXhpc10gPSBnZXRPckNyZWF0ZVN0YWNrKHN0YWNrcywga2V5LCBpbmRleCk7XG4gICAgICAgIHN0YWNrW2RhdGFzZXRJbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgc3RhY2suX3RvcCA9IGdldExhc3RJbmRleEluU3RhY2soc3RhY2ssIHZTY2FsZSwgdHJ1ZSwgbWV0YS50eXBlKTtcbiAgICAgICAgc3RhY2suX2JvdHRvbSA9IGdldExhc3RJbmRleEluU3RhY2soc3RhY2ssIHZTY2FsZSwgZmFsc2UsIG1ldGEudHlwZSk7XG4gICAgICAgIGNvbnN0IHZpc3VhbFZhbHVlcyA9IHN0YWNrLl92aXN1YWxWYWx1ZXMgfHwgKHN0YWNrLl92aXN1YWxWYWx1ZXMgPSB7fSk7XG4gICAgICAgIHZpc3VhbFZhbHVlc1tkYXRhc2V0SW5kZXhdID0gdmFsdWU7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0Rmlyc3RTY2FsZUlkKGNoYXJ0LCBheGlzKSB7XG4gICAgY29uc3Qgc2NhbGVzID0gY2hhcnQuc2NhbGVzO1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhzY2FsZXMpLmZpbHRlcigoa2V5KT0+c2NhbGVzW2tleV0uYXhpcyA9PT0gYXhpcykuc2hpZnQoKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZURhdGFzZXRDb250ZXh0KHBhcmVudCwgaW5kZXgpIHtcbiAgICByZXR1cm4gY3JlYXRlQ29udGV4dChwYXJlbnQsIHtcbiAgICAgICAgYWN0aXZlOiBmYWxzZSxcbiAgICAgICAgZGF0YXNldDogdW5kZWZpbmVkLFxuICAgICAgICBkYXRhc2V0SW5kZXg6IGluZGV4LFxuICAgICAgICBpbmRleCxcbiAgICAgICAgbW9kZTogJ2RlZmF1bHQnLFxuICAgICAgICB0eXBlOiAnZGF0YXNldCdcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZURhdGFDb250ZXh0KHBhcmVudCwgaW5kZXgsIGVsZW1lbnQpIHtcbiAgICByZXR1cm4gY3JlYXRlQ29udGV4dChwYXJlbnQsIHtcbiAgICAgICAgYWN0aXZlOiBmYWxzZSxcbiAgICAgICAgZGF0YUluZGV4OiBpbmRleCxcbiAgICAgICAgcGFyc2VkOiB1bmRlZmluZWQsXG4gICAgICAgIHJhdzogdW5kZWZpbmVkLFxuICAgICAgICBlbGVtZW50LFxuICAgICAgICBpbmRleCxcbiAgICAgICAgbW9kZTogJ2RlZmF1bHQnLFxuICAgICAgICB0eXBlOiAnZGF0YSdcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGNsZWFyU3RhY2tzKG1ldGEsIGl0ZW1zKSB7XG4gICAgY29uc3QgZGF0YXNldEluZGV4ID0gbWV0YS5jb250cm9sbGVyLmluZGV4O1xuICAgIGNvbnN0IGF4aXMgPSBtZXRhLnZTY2FsZSAmJiBtZXRhLnZTY2FsZS5heGlzO1xuICAgIGlmICghYXhpcykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGl0ZW1zID0gaXRlbXMgfHwgbWV0YS5fcGFyc2VkO1xuICAgIGZvciAoY29uc3QgcGFyc2VkIG9mIGl0ZW1zKXtcbiAgICAgICAgY29uc3Qgc3RhY2tzID0gcGFyc2VkLl9zdGFja3M7XG4gICAgICAgIGlmICghc3RhY2tzIHx8IHN0YWNrc1theGlzXSA9PT0gdW5kZWZpbmVkIHx8IHN0YWNrc1theGlzXVtkYXRhc2V0SW5kZXhdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgc3RhY2tzW2F4aXNdW2RhdGFzZXRJbmRleF07XG4gICAgICAgIGlmIChzdGFja3NbYXhpc10uX3Zpc3VhbFZhbHVlcyAhPT0gdW5kZWZpbmVkICYmIHN0YWNrc1theGlzXS5fdmlzdWFsVmFsdWVzW2RhdGFzZXRJbmRleF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZGVsZXRlIHN0YWNrc1theGlzXS5fdmlzdWFsVmFsdWVzW2RhdGFzZXRJbmRleF07XG4gICAgICAgIH1cbiAgICB9XG59XG5jb25zdCBpc0RpcmVjdFVwZGF0ZU1vZGUgPSAobW9kZSk9Pm1vZGUgPT09ICdyZXNldCcgfHwgbW9kZSA9PT0gJ25vbmUnO1xuY29uc3QgY2xvbmVJZk5vdFNoYXJlZCA9IChjYWNoZWQsIHNoYXJlZCk9PnNoYXJlZCA/IGNhY2hlZCA6IE9iamVjdC5hc3NpZ24oe30sIGNhY2hlZCk7XG5jb25zdCBjcmVhdGVTdGFjayA9IChjYW5TdGFjaywgbWV0YSwgY2hhcnQpPT5jYW5TdGFjayAmJiAhbWV0YS5oaWRkZW4gJiYgbWV0YS5fc3RhY2tlZCAmJiB7XG4gICAgICAgIGtleXM6IGdldFNvcnRlZERhdGFzZXRJbmRpY2VzKGNoYXJ0LCB0cnVlKSxcbiAgICAgICAgdmFsdWVzOiBudWxsXG4gICAgfTtcbmNsYXNzIERhdGFzZXRDb250cm9sbGVyIHtcbiBzdGF0aWMgZGVmYXVsdHMgPSB7fTtcbiBzdGF0aWMgZGF0YXNldEVsZW1lbnRUeXBlID0gbnVsbDtcbiBzdGF0aWMgZGF0YUVsZW1lbnRUeXBlID0gbnVsbDtcbiBjb25zdHJ1Y3RvcihjaGFydCwgZGF0YXNldEluZGV4KXtcbiAgICAgICAgdGhpcy5jaGFydCA9IGNoYXJ0O1xuICAgICAgICB0aGlzLl9jdHggPSBjaGFydC5jdHg7XG4gICAgICAgIHRoaXMuaW5kZXggPSBkYXRhc2V0SW5kZXg7XG4gICAgICAgIHRoaXMuX2NhY2hlZERhdGFPcHRzID0ge307XG4gICAgICAgIHRoaXMuX2NhY2hlZE1ldGEgPSB0aGlzLmdldE1ldGEoKTtcbiAgICAgICAgdGhpcy5fdHlwZSA9IHRoaXMuX2NhY2hlZE1ldGEudHlwZTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5fcGFyc2luZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9kYXRhID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9vYmplY3REYXRhID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9zaGFyZWRPcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9kcmF3U3RhcnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2RyYXdDb3VudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5lbmFibGVPcHRpb25TaGFyaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc3VwcG9ydHNEZWNpbWF0aW9uID0gZmFsc2U7XG4gICAgICAgIHRoaXMuJGNvbnRleHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3N5bmNMaXN0ID0gW107XG4gICAgICAgIHRoaXMuZGF0YXNldEVsZW1lbnRUeXBlID0gbmV3LnRhcmdldC5kYXRhc2V0RWxlbWVudFR5cGU7XG4gICAgICAgIHRoaXMuZGF0YUVsZW1lbnRUeXBlID0gbmV3LnRhcmdldC5kYXRhRWxlbWVudFR5cGU7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xuICAgIH1cbiAgICBpbml0aWFsaXplKCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgdGhpcy5jb25maWd1cmUoKTtcbiAgICAgICAgdGhpcy5saW5rU2NhbGVzKCk7XG4gICAgICAgIG1ldGEuX3N0YWNrZWQgPSBpc1N0YWNrZWQobWV0YS52U2NhbGUsIG1ldGEpO1xuICAgICAgICB0aGlzLmFkZEVsZW1lbnRzKCk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZmlsbCAmJiAhdGhpcy5jaGFydC5pc1BsdWdpbkVuYWJsZWQoJ2ZpbGxlcicpKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJUcmllZCB0byB1c2UgdGhlICdmaWxsJyBvcHRpb24gd2l0aG91dCB0aGUgJ0ZpbGxlcicgcGx1Z2luIGVuYWJsZWQuIFBsZWFzZSBpbXBvcnQgYW5kIHJlZ2lzdGVyIHRoZSAnRmlsbGVyJyBwbHVnaW4gYW5kIG1ha2Ugc3VyZSBpdCBpcyBub3QgZGlzYWJsZWQgaW4gdGhlIG9wdGlvbnNcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlSW5kZXgoZGF0YXNldEluZGV4KSB7XG4gICAgICAgIGlmICh0aGlzLmluZGV4ICE9PSBkYXRhc2V0SW5kZXgpIHtcbiAgICAgICAgICAgIGNsZWFyU3RhY2tzKHRoaXMuX2NhY2hlZE1ldGEpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5kZXggPSBkYXRhc2V0SW5kZXg7XG4gICAgfVxuICAgIGxpbmtTY2FsZXMoKSB7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGRhdGFzZXQgPSB0aGlzLmdldERhdGFzZXQoKTtcbiAgICAgICAgY29uc3QgY2hvb3NlSWQgPSAoYXhpcywgeCwgeSwgcik9PmF4aXMgPT09ICd4JyA/IHggOiBheGlzID09PSAncicgPyByIDogeTtcbiAgICAgICAgY29uc3QgeGlkID0gbWV0YS54QXhpc0lEID0gdmFsdWVPckRlZmF1bHQoZGF0YXNldC54QXhpc0lELCBnZXRGaXJzdFNjYWxlSWQoY2hhcnQsICd4JykpO1xuICAgICAgICBjb25zdCB5aWQgPSBtZXRhLnlBeGlzSUQgPSB2YWx1ZU9yRGVmYXVsdChkYXRhc2V0LnlBeGlzSUQsIGdldEZpcnN0U2NhbGVJZChjaGFydCwgJ3knKSk7XG4gICAgICAgIGNvbnN0IHJpZCA9IG1ldGEuckF4aXNJRCA9IHZhbHVlT3JEZWZhdWx0KGRhdGFzZXQuckF4aXNJRCwgZ2V0Rmlyc3RTY2FsZUlkKGNoYXJ0LCAncicpKTtcbiAgICAgICAgY29uc3QgaW5kZXhBeGlzID0gbWV0YS5pbmRleEF4aXM7XG4gICAgICAgIGNvbnN0IGlpZCA9IG1ldGEuaUF4aXNJRCA9IGNob29zZUlkKGluZGV4QXhpcywgeGlkLCB5aWQsIHJpZCk7XG4gICAgICAgIGNvbnN0IHZpZCA9IG1ldGEudkF4aXNJRCA9IGNob29zZUlkKGluZGV4QXhpcywgeWlkLCB4aWQsIHJpZCk7XG4gICAgICAgIG1ldGEueFNjYWxlID0gdGhpcy5nZXRTY2FsZUZvcklkKHhpZCk7XG4gICAgICAgIG1ldGEueVNjYWxlID0gdGhpcy5nZXRTY2FsZUZvcklkKHlpZCk7XG4gICAgICAgIG1ldGEuclNjYWxlID0gdGhpcy5nZXRTY2FsZUZvcklkKHJpZCk7XG4gICAgICAgIG1ldGEuaVNjYWxlID0gdGhpcy5nZXRTY2FsZUZvcklkKGlpZCk7XG4gICAgICAgIG1ldGEudlNjYWxlID0gdGhpcy5nZXRTY2FsZUZvcklkKHZpZCk7XG4gICAgfVxuICAgIGdldERhdGFzZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHNbdGhpcy5pbmRleF07XG4gICAgfVxuICAgIGdldE1ldGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJ0LmdldERhdGFzZXRNZXRhKHRoaXMuaW5kZXgpO1xuICAgIH1cbiBnZXRTY2FsZUZvcklkKHNjYWxlSUQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcnQuc2NhbGVzW3NjYWxlSURdO1xuICAgIH1cbiBfZ2V0T3RoZXJTY2FsZShzY2FsZSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgcmV0dXJuIHNjYWxlID09PSBtZXRhLmlTY2FsZSA/IG1ldGEudlNjYWxlIDogbWV0YS5pU2NhbGU7XG4gICAgfVxuICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLl91cGRhdGUoJ3Jlc2V0Jyk7XG4gICAgfVxuIF9kZXN0cm95KCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgaWYgKHRoaXMuX2RhdGEpIHtcbiAgICAgICAgICAgIHVubGlzdGVuQXJyYXlFdmVudHModGhpcy5fZGF0YSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1ldGEuX3N0YWNrZWQpIHtcbiAgICAgICAgICAgIGNsZWFyU3RhY2tzKG1ldGEpO1xuICAgICAgICB9XG4gICAgfVxuIF9kYXRhQ2hlY2soKSB7XG4gICAgICAgIGNvbnN0IGRhdGFzZXQgPSB0aGlzLmdldERhdGFzZXQoKTtcbiAgICAgICAgY29uc3QgZGF0YSA9IGRhdGFzZXQuZGF0YSB8fCAoZGF0YXNldC5kYXRhID0gW10pO1xuICAgICAgICBjb25zdCBfZGF0YSA9IHRoaXMuX2RhdGE7XG4gICAgICAgIGlmIChpc09iamVjdChkYXRhKSkge1xuICAgICAgICAgICAgdGhpcy5fZGF0YSA9IGNvbnZlcnRPYmplY3REYXRhVG9BcnJheShkYXRhKTtcbiAgICAgICAgfSBlbHNlIGlmIChfZGF0YSAhPT0gZGF0YSkge1xuICAgICAgICAgICAgaWYgKF9kYXRhKSB7XG4gICAgICAgICAgICAgICAgdW5saXN0ZW5BcnJheUV2ZW50cyhfZGF0YSwgdGhpcyk7XG4gICAgICAgICAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgICAgICAgICAgY2xlYXJTdGFja3MobWV0YSk7XG4gICAgICAgICAgICAgICAgbWV0YS5fcGFyc2VkID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0YSAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuQXJyYXlFdmVudHMoZGF0YSwgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9zeW5jTGlzdCA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fZGF0YSA9IGRhdGE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWRkRWxlbWVudHMoKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICB0aGlzLl9kYXRhQ2hlY2soKTtcbiAgICAgICAgaWYgKHRoaXMuZGF0YXNldEVsZW1lbnRUeXBlKSB7XG4gICAgICAgICAgICBtZXRhLmRhdGFzZXQgPSBuZXcgdGhpcy5kYXRhc2V0RWxlbWVudFR5cGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBidWlsZE9yVXBkYXRlRWxlbWVudHMocmVzZXROZXdFbGVtZW50cykge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgZGF0YXNldCA9IHRoaXMuZ2V0RGF0YXNldCgpO1xuICAgICAgICBsZXQgc3RhY2tDaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2RhdGFDaGVjaygpO1xuICAgICAgICBjb25zdCBvbGRTdGFja2VkID0gbWV0YS5fc3RhY2tlZDtcbiAgICAgICAgbWV0YS5fc3RhY2tlZCA9IGlzU3RhY2tlZChtZXRhLnZTY2FsZSwgbWV0YSk7XG4gICAgICAgIGlmIChtZXRhLnN0YWNrICE9PSBkYXRhc2V0LnN0YWNrKSB7XG4gICAgICAgICAgICBzdGFja0NoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgY2xlYXJTdGFja3MobWV0YSk7XG4gICAgICAgICAgICBtZXRhLnN0YWNrID0gZGF0YXNldC5zdGFjaztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yZXN5bmNFbGVtZW50cyhyZXNldE5ld0VsZW1lbnRzKTtcbiAgICAgICAgaWYgKHN0YWNrQ2hhbmdlZCB8fCBvbGRTdGFja2VkICE9PSBtZXRhLl9zdGFja2VkKSB7XG4gICAgICAgICAgICB1cGRhdGVTdGFja3ModGhpcywgbWV0YS5fcGFyc2VkKTtcbiAgICAgICAgfVxuICAgIH1cbiBjb25maWd1cmUoKSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY2hhcnQuY29uZmlnO1xuICAgICAgICBjb25zdCBzY29wZUtleXMgPSBjb25maWcuZGF0YXNldFNjb3BlS2V5cyh0aGlzLl90eXBlKTtcbiAgICAgICAgY29uc3Qgc2NvcGVzID0gY29uZmlnLmdldE9wdGlvblNjb3Blcyh0aGlzLmdldERhdGFzZXQoKSwgc2NvcGVLZXlzLCB0cnVlKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gY29uZmlnLmNyZWF0ZVJlc29sdmVyKHNjb3BlcywgdGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICB0aGlzLl9wYXJzaW5nID0gdGhpcy5vcHRpb25zLnBhcnNpbmc7XG4gICAgICAgIHRoaXMuX2NhY2hlZERhdGFPcHRzID0ge307XG4gICAgfVxuIHBhcnNlKHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCB7IF9jYWNoZWRNZXRhOiBtZXRhICwgX2RhdGE6IGRhdGEgIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IGlTY2FsZSAsIF9zdGFja2VkICB9ID0gbWV0YTtcbiAgICAgICAgY29uc3QgaUF4aXMgPSBpU2NhbGUuYXhpcztcbiAgICAgICAgbGV0IHNvcnRlZCA9IHN0YXJ0ID09PSAwICYmIGNvdW50ID09PSBkYXRhLmxlbmd0aCA/IHRydWUgOiBtZXRhLl9zb3J0ZWQ7XG4gICAgICAgIGxldCBwcmV2ID0gc3RhcnQgPiAwICYmIG1ldGEuX3BhcnNlZFtzdGFydCAtIDFdO1xuICAgICAgICBsZXQgaSwgY3VyLCBwYXJzZWQ7XG4gICAgICAgIGlmICh0aGlzLl9wYXJzaW5nID09PSBmYWxzZSkge1xuICAgICAgICAgICAgbWV0YS5fcGFyc2VkID0gZGF0YTtcbiAgICAgICAgICAgIG1ldGEuX3NvcnRlZCA9IHRydWU7XG4gICAgICAgICAgICBwYXJzZWQgPSBkYXRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGlzQXJyYXkoZGF0YVtzdGFydF0pKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VkID0gdGhpcy5wYXJzZUFycmF5RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdChkYXRhW3N0YXJ0XSkpIHtcbiAgICAgICAgICAgICAgICBwYXJzZWQgPSB0aGlzLnBhcnNlT2JqZWN0RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXJzZWQgPSB0aGlzLnBhcnNlUHJpbWl0aXZlRGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaXNOb3RJbk9yZGVyQ29tcGFyZWRUb1ByZXYgPSAoKT0+Y3VyW2lBeGlzXSA9PT0gbnVsbCB8fCBwcmV2ICYmIGN1cltpQXhpc10gPCBwcmV2W2lBeGlzXTtcbiAgICAgICAgICAgIGZvcihpID0gMDsgaSA8IGNvdW50OyArK2kpe1xuICAgICAgICAgICAgICAgIG1ldGEuX3BhcnNlZFtpICsgc3RhcnRdID0gY3VyID0gcGFyc2VkW2ldO1xuICAgICAgICAgICAgICAgIGlmIChzb3J0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTm90SW5PcmRlckNvbXBhcmVkVG9QcmV2KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvcnRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHByZXYgPSBjdXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWV0YS5fc29ydGVkID0gc29ydGVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfc3RhY2tlZCkge1xuICAgICAgICAgICAgdXBkYXRlU3RhY2tzKHRoaXMsIHBhcnNlZCk7XG4gICAgICAgIH1cbiAgICB9XG4gcGFyc2VQcmltaXRpdmVEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCB7IGlTY2FsZSAsIHZTY2FsZSAgfSA9IG1ldGE7XG4gICAgICAgIGNvbnN0IGlBeGlzID0gaVNjYWxlLmF4aXM7XG4gICAgICAgIGNvbnN0IHZBeGlzID0gdlNjYWxlLmF4aXM7XG4gICAgICAgIGNvbnN0IGxhYmVscyA9IGlTY2FsZS5nZXRMYWJlbHMoKTtcbiAgICAgICAgY29uc3Qgc2luZ2xlU2NhbGUgPSBpU2NhbGUgPT09IHZTY2FsZTtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gbmV3IEFycmF5KGNvdW50KTtcbiAgICAgICAgbGV0IGksIGlsZW4sIGluZGV4O1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBjb3VudDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBpbmRleCA9IGkgKyBzdGFydDtcbiAgICAgICAgICAgIHBhcnNlZFtpXSA9IHtcbiAgICAgICAgICAgICAgICBbaUF4aXNdOiBzaW5nbGVTY2FsZSB8fCBpU2NhbGUucGFyc2UobGFiZWxzW2luZGV4XSwgaW5kZXgpLFxuICAgICAgICAgICAgICAgIFt2QXhpc106IHZTY2FsZS5wYXJzZShkYXRhW2luZGV4XSwgaW5kZXgpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgfVxuIHBhcnNlQXJyYXlEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCB7IHhTY2FsZSAsIHlTY2FsZSAgfSA9IG1ldGE7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IG5ldyBBcnJheShjb3VudCk7XG4gICAgICAgIGxldCBpLCBpbGVuLCBpbmRleCwgaXRlbTtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gY291bnQ7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgaW5kZXggPSBpICsgc3RhcnQ7XG4gICAgICAgICAgICBpdGVtID0gZGF0YVtpbmRleF07XG4gICAgICAgICAgICBwYXJzZWRbaV0gPSB7XG4gICAgICAgICAgICAgICAgeDogeFNjYWxlLnBhcnNlKGl0ZW1bMF0sIGluZGV4KSxcbiAgICAgICAgICAgICAgICB5OiB5U2NhbGUucGFyc2UoaXRlbVsxXSwgaW5kZXgpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgfVxuIHBhcnNlT2JqZWN0RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICAgICAgY29uc3QgeyB4U2NhbGUgLCB5U2NhbGUgIH0gPSBtZXRhO1xuICAgICAgICBjb25zdCB7IHhBeGlzS2V5ID0neCcgLCB5QXhpc0tleSA9J3knICB9ID0gdGhpcy5fcGFyc2luZztcbiAgICAgICAgY29uc3QgcGFyc2VkID0gbmV3IEFycmF5KGNvdW50KTtcbiAgICAgICAgbGV0IGksIGlsZW4sIGluZGV4LCBpdGVtO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBjb3VudDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBpbmRleCA9IGkgKyBzdGFydDtcbiAgICAgICAgICAgIGl0ZW0gPSBkYXRhW2luZGV4XTtcbiAgICAgICAgICAgIHBhcnNlZFtpXSA9IHtcbiAgICAgICAgICAgICAgICB4OiB4U2NhbGUucGFyc2UocmVzb2x2ZU9iamVjdEtleShpdGVtLCB4QXhpc0tleSksIGluZGV4KSxcbiAgICAgICAgICAgICAgICB5OiB5U2NhbGUucGFyc2UocmVzb2x2ZU9iamVjdEtleShpdGVtLCB5QXhpc0tleSksIGluZGV4KVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgIH1cbiBnZXRQYXJzZWQoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlZE1ldGEuX3BhcnNlZFtpbmRleF07XG4gICAgfVxuIGdldERhdGFFbGVtZW50KGluZGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jYWNoZWRNZXRhLmRhdGFbaW5kZXhdO1xuICAgIH1cbiBhcHBseVN0YWNrKHNjYWxlLCBwYXJzZWQsIG1vZGUpIHtcbiAgICAgICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBwYXJzZWRbc2NhbGUuYXhpc107XG4gICAgICAgIGNvbnN0IHN0YWNrID0ge1xuICAgICAgICAgICAga2V5czogZ2V0U29ydGVkRGF0YXNldEluZGljZXMoY2hhcnQsIHRydWUpLFxuICAgICAgICAgICAgdmFsdWVzOiBwYXJzZWQuX3N0YWNrc1tzY2FsZS5heGlzXS5fdmlzdWFsVmFsdWVzXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBhcHBseVN0YWNrKHN0YWNrLCB2YWx1ZSwgbWV0YS5pbmRleCwge1xuICAgICAgICAgICAgbW9kZVxuICAgICAgICB9KTtcbiAgICB9XG4gdXBkYXRlUmFuZ2VGcm9tUGFyc2VkKHJhbmdlLCBzY2FsZSwgcGFyc2VkLCBzdGFjaykge1xuICAgICAgICBjb25zdCBwYXJzZWRWYWx1ZSA9IHBhcnNlZFtzY2FsZS5heGlzXTtcbiAgICAgICAgbGV0IHZhbHVlID0gcGFyc2VkVmFsdWUgPT09IG51bGwgPyBOYU4gOiBwYXJzZWRWYWx1ZTtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gc3RhY2sgJiYgcGFyc2VkLl9zdGFja3Nbc2NhbGUuYXhpc107XG4gICAgICAgIGlmIChzdGFjayAmJiB2YWx1ZXMpIHtcbiAgICAgICAgICAgIHN0YWNrLnZhbHVlcyA9IHZhbHVlcztcbiAgICAgICAgICAgIHZhbHVlID0gYXBwbHlTdGFjayhzdGFjaywgcGFyc2VkVmFsdWUsIHRoaXMuX2NhY2hlZE1ldGEuaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIHJhbmdlLm1pbiA9IE1hdGgubWluKHJhbmdlLm1pbiwgdmFsdWUpO1xuICAgICAgICByYW5nZS5tYXggPSBNYXRoLm1heChyYW5nZS5tYXgsIHZhbHVlKTtcbiAgICB9XG4gZ2V0TWluTWF4KHNjYWxlLCBjYW5TdGFjaykge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgX3BhcnNlZCA9IG1ldGEuX3BhcnNlZDtcbiAgICAgICAgY29uc3Qgc29ydGVkID0gbWV0YS5fc29ydGVkICYmIHNjYWxlID09PSBtZXRhLmlTY2FsZTtcbiAgICAgICAgY29uc3QgaWxlbiA9IF9wYXJzZWQubGVuZ3RoO1xuICAgICAgICBjb25zdCBvdGhlclNjYWxlID0gdGhpcy5fZ2V0T3RoZXJTY2FsZShzY2FsZSk7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gY3JlYXRlU3RhY2soY2FuU3RhY2ssIG1ldGEsIHRoaXMuY2hhcnQpO1xuICAgICAgICBjb25zdCByYW5nZSA9IHtcbiAgICAgICAgICAgIG1pbjogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLFxuICAgICAgICAgICAgbWF4OiBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFlcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgeyBtaW46IG90aGVyTWluICwgbWF4OiBvdGhlck1heCAgfSA9IGdldFVzZXJCb3VuZHMob3RoZXJTY2FsZSk7XG4gICAgICAgIGxldCBpLCBwYXJzZWQ7XG4gICAgICAgIGZ1bmN0aW9uIF9za2lwKCkge1xuICAgICAgICAgICAgcGFyc2VkID0gX3BhcnNlZFtpXTtcbiAgICAgICAgICAgIGNvbnN0IG90aGVyVmFsdWUgPSBwYXJzZWRbb3RoZXJTY2FsZS5heGlzXTtcbiAgICAgICAgICAgIHJldHVybiAhaXNOdW1iZXJGaW5pdGUocGFyc2VkW3NjYWxlLmF4aXNdKSB8fCBvdGhlck1pbiA+IG90aGVyVmFsdWUgfHwgb3RoZXJNYXggPCBvdGhlclZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGZvcihpID0gMDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBpZiAoX3NraXAoKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy51cGRhdGVSYW5nZUZyb21QYXJzZWQocmFuZ2UsIHNjYWxlLCBwYXJzZWQsIHN0YWNrKTtcbiAgICAgICAgICAgIGlmIChzb3J0ZWQpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc29ydGVkKSB7XG4gICAgICAgICAgICBmb3IoaSA9IGlsZW4gLSAxOyBpID49IDA7IC0taSl7XG4gICAgICAgICAgICAgICAgaWYgKF9za2lwKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUmFuZ2VGcm9tUGFyc2VkKHJhbmdlLCBzY2FsZSwgcGFyc2VkLCBzdGFjayk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJhbmdlO1xuICAgIH1cbiAgICBnZXRBbGxQYXJzZWRWYWx1ZXMoc2NhbGUpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gdGhpcy5fY2FjaGVkTWV0YS5fcGFyc2VkO1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgICAgICAgbGV0IGksIGlsZW4sIHZhbHVlO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBwYXJzZWQubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIHZhbHVlID0gcGFyc2VkW2ldW3NjYWxlLmF4aXNdO1xuICAgICAgICAgICAgaWYgKGlzTnVtYmVyRmluaXRlKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH1cbiBnZXRNYXhPdmVyZmxvdygpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiBnZXRMYWJlbEFuZFZhbHVlKGluZGV4KSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBpU2NhbGUgPSBtZXRhLmlTY2FsZTtcbiAgICAgICAgY29uc3QgdlNjYWxlID0gbWV0YS52U2NhbGU7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGluZGV4KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhYmVsOiBpU2NhbGUgPyAnJyArIGlTY2FsZS5nZXRMYWJlbEZvclZhbHVlKHBhcnNlZFtpU2NhbGUuYXhpc10pIDogJycsXG4gICAgICAgICAgICB2YWx1ZTogdlNjYWxlID8gJycgKyB2U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWRbdlNjYWxlLmF4aXNdKSA6ICcnXG4gICAgICAgIH07XG4gICAgfVxuIF91cGRhdGUobW9kZSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgdGhpcy51cGRhdGUobW9kZSB8fCAnZGVmYXVsdCcpO1xuICAgICAgICBtZXRhLl9jbGlwID0gdG9DbGlwKHZhbHVlT3JEZWZhdWx0KHRoaXMub3B0aW9ucy5jbGlwLCBkZWZhdWx0Q2xpcChtZXRhLnhTY2FsZSwgbWV0YS55U2NhbGUsIHRoaXMuZ2V0TWF4T3ZlcmZsb3coKSkpKTtcbiAgICB9XG4gdXBkYXRlKG1vZGUpIHt9XG4gICAgZHJhdygpIHtcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fY3R4O1xuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBlbGVtZW50cyA9IG1ldGEuZGF0YSB8fCBbXTtcbiAgICAgICAgY29uc3QgYXJlYSA9IGNoYXJ0LmNoYXJ0QXJlYTtcbiAgICAgICAgY29uc3QgYWN0aXZlID0gW107XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5fZHJhd1N0YXJ0IHx8IDA7XG4gICAgICAgIGNvbnN0IGNvdW50ID0gdGhpcy5fZHJhd0NvdW50IHx8IGVsZW1lbnRzLmxlbmd0aCAtIHN0YXJ0O1xuICAgICAgICBjb25zdCBkcmF3QWN0aXZlRWxlbWVudHNPblRvcCA9IHRoaXMub3B0aW9ucy5kcmF3QWN0aXZlRWxlbWVudHNPblRvcDtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGlmIChtZXRhLmRhdGFzZXQpIHtcbiAgICAgICAgICAgIG1ldGEuZGF0YXNldC5kcmF3KGN0eCwgYXJlYSwgc3RhcnQsIGNvdW50KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IoaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBjb3VudDsgKytpKXtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBlbGVtZW50c1tpXTtcbiAgICAgICAgICAgIGlmIChlbGVtZW50LmhpZGRlbikge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVsZW1lbnQuYWN0aXZlICYmIGRyYXdBY3RpdmVFbGVtZW50c09uVG9wKSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlLnB1c2goZWxlbWVudCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuZHJhdyhjdHgsIGFyZWEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvcihpID0gMDsgaSA8IGFjdGl2ZS5sZW5ndGg7ICsraSl7XG4gICAgICAgICAgICBhY3RpdmVbaV0uZHJhdyhjdHgsIGFyZWEpO1xuICAgICAgICB9XG4gICAgfVxuIGdldFN0eWxlKGluZGV4LCBhY3RpdmUpIHtcbiAgICAgICAgY29uc3QgbW9kZSA9IGFjdGl2ZSA/ICdhY3RpdmUnIDogJ2RlZmF1bHQnO1xuICAgICAgICByZXR1cm4gaW5kZXggPT09IHVuZGVmaW5lZCAmJiB0aGlzLl9jYWNoZWRNZXRhLmRhdGFzZXQgPyB0aGlzLnJlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMobW9kZSkgOiB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaW5kZXggfHwgMCwgbW9kZSk7XG4gICAgfVxuIGdldENvbnRleHQoaW5kZXgsIGFjdGl2ZSwgbW9kZSkge1xuICAgICAgICBjb25zdCBkYXRhc2V0ID0gdGhpcy5nZXREYXRhc2V0KCk7XG4gICAgICAgIGxldCBjb250ZXh0O1xuICAgICAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8IHRoaXMuX2NhY2hlZE1ldGEuZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLl9jYWNoZWRNZXRhLmRhdGFbaW5kZXhdO1xuICAgICAgICAgICAgY29udGV4dCA9IGVsZW1lbnQuJGNvbnRleHQgfHwgKGVsZW1lbnQuJGNvbnRleHQgPSBjcmVhdGVEYXRhQ29udGV4dCh0aGlzLmdldENvbnRleHQoKSwgaW5kZXgsIGVsZW1lbnQpKTtcbiAgICAgICAgICAgIGNvbnRleHQucGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaW5kZXgpO1xuICAgICAgICAgICAgY29udGV4dC5yYXcgPSBkYXRhc2V0LmRhdGFbaW5kZXhdO1xuICAgICAgICAgICAgY29udGV4dC5pbmRleCA9IGNvbnRleHQuZGF0YUluZGV4ID0gaW5kZXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb250ZXh0ID0gdGhpcy4kY29udGV4dCB8fCAodGhpcy4kY29udGV4dCA9IGNyZWF0ZURhdGFzZXRDb250ZXh0KHRoaXMuY2hhcnQuZ2V0Q29udGV4dCgpLCB0aGlzLmluZGV4KSk7XG4gICAgICAgICAgICBjb250ZXh0LmRhdGFzZXQgPSBkYXRhc2V0O1xuICAgICAgICAgICAgY29udGV4dC5pbmRleCA9IGNvbnRleHQuZGF0YXNldEluZGV4ID0gdGhpcy5pbmRleDtcbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0LmFjdGl2ZSA9ICEhYWN0aXZlO1xuICAgICAgICBjb250ZXh0Lm1vZGUgPSBtb2RlO1xuICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICB9XG4gcmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9ucyhtb2RlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXNvbHZlRWxlbWVudE9wdGlvbnModGhpcy5kYXRhc2V0RWxlbWVudFR5cGUuaWQsIG1vZGUpO1xuICAgIH1cbiByZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGluZGV4LCBtb2RlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXNvbHZlRWxlbWVudE9wdGlvbnModGhpcy5kYXRhRWxlbWVudFR5cGUuaWQsIG1vZGUsIGluZGV4KTtcbiAgICB9XG4gX3Jlc29sdmVFbGVtZW50T3B0aW9ucyhlbGVtZW50VHlwZSwgbW9kZSA9ICdkZWZhdWx0JywgaW5kZXgpIHtcbiAgICAgICAgY29uc3QgYWN0aXZlID0gbW9kZSA9PT0gJ2FjdGl2ZSc7XG4gICAgICAgIGNvbnN0IGNhY2hlID0gdGhpcy5fY2FjaGVkRGF0YU9wdHM7XG4gICAgICAgIGNvbnN0IGNhY2hlS2V5ID0gZWxlbWVudFR5cGUgKyAnLScgKyBtb2RlO1xuICAgICAgICBjb25zdCBjYWNoZWQgPSBjYWNoZVtjYWNoZUtleV07XG4gICAgICAgIGNvbnN0IHNoYXJpbmcgPSB0aGlzLmVuYWJsZU9wdGlvblNoYXJpbmcgJiYgZGVmaW5lZChpbmRleCk7XG4gICAgICAgIGlmIChjYWNoZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBjbG9uZUlmTm90U2hhcmVkKGNhY2hlZCwgc2hhcmluZyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29uZmlnID0gdGhpcy5jaGFydC5jb25maWc7XG4gICAgICAgIGNvbnN0IHNjb3BlS2V5cyA9IGNvbmZpZy5kYXRhc2V0RWxlbWVudFNjb3BlS2V5cyh0aGlzLl90eXBlLCBlbGVtZW50VHlwZSk7XG4gICAgICAgIGNvbnN0IHByZWZpeGVzID0gYWN0aXZlID8gW1xuICAgICAgICAgICAgYCR7ZWxlbWVudFR5cGV9SG92ZXJgLFxuICAgICAgICAgICAgJ2hvdmVyJyxcbiAgICAgICAgICAgIGVsZW1lbnRUeXBlLFxuICAgICAgICAgICAgJydcbiAgICAgICAgXSA6IFtcbiAgICAgICAgICAgIGVsZW1lbnRUeXBlLFxuICAgICAgICAgICAgJydcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3Qgc2NvcGVzID0gY29uZmlnLmdldE9wdGlvblNjb3Blcyh0aGlzLmdldERhdGFzZXQoKSwgc2NvcGVLZXlzKTtcbiAgICAgICAgY29uc3QgbmFtZXMgPSBPYmplY3Qua2V5cyhkZWZhdWx0cy5lbGVtZW50c1tlbGVtZW50VHlwZV0pO1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gKCk9PnRoaXMuZ2V0Q29udGV4dChpbmRleCwgYWN0aXZlLCBtb2RlKTtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gY29uZmlnLnJlc29sdmVOYW1lZE9wdGlvbnMoc2NvcGVzLCBuYW1lcywgY29udGV4dCwgcHJlZml4ZXMpO1xuICAgICAgICBpZiAodmFsdWVzLiRzaGFyZWQpIHtcbiAgICAgICAgICAgIHZhbHVlcy4kc2hhcmVkID0gc2hhcmluZztcbiAgICAgICAgICAgIGNhY2hlW2NhY2hlS2V5XSA9IE9iamVjdC5mcmVlemUoY2xvbmVJZk5vdFNoYXJlZCh2YWx1ZXMsIHNoYXJpbmcpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH1cbiBfcmVzb2x2ZUFuaW1hdGlvbnMoaW5kZXgsIHRyYW5zaXRpb24sIGFjdGl2ZSkge1xuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGNvbnN0IGNhY2hlID0gdGhpcy5fY2FjaGVkRGF0YU9wdHM7XG4gICAgICAgIGNvbnN0IGNhY2hlS2V5ID0gYGFuaW1hdGlvbi0ke3RyYW5zaXRpb259YDtcbiAgICAgICAgY29uc3QgY2FjaGVkID0gY2FjaGVbY2FjaGVLZXldO1xuICAgICAgICBpZiAoY2FjaGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkO1xuICAgICAgICB9XG4gICAgICAgIGxldCBvcHRpb25zO1xuICAgICAgICBpZiAoY2hhcnQub3B0aW9ucy5hbmltYXRpb24gIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBjb25zdCBjb25maWcgPSB0aGlzLmNoYXJ0LmNvbmZpZztcbiAgICAgICAgICAgIGNvbnN0IHNjb3BlS2V5cyA9IGNvbmZpZy5kYXRhc2V0QW5pbWF0aW9uU2NvcGVLZXlzKHRoaXMuX3R5cGUsIHRyYW5zaXRpb24pO1xuICAgICAgICAgICAgY29uc3Qgc2NvcGVzID0gY29uZmlnLmdldE9wdGlvblNjb3Blcyh0aGlzLmdldERhdGFzZXQoKSwgc2NvcGVLZXlzKTtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBjb25maWcuY3JlYXRlUmVzb2x2ZXIoc2NvcGVzLCB0aGlzLmdldENvbnRleHQoaW5kZXgsIGFjdGl2ZSwgdHJhbnNpdGlvbikpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbnMgPSBuZXcgQW5pbWF0aW9ucyhjaGFydCwgb3B0aW9ucyAmJiBvcHRpb25zLmFuaW1hdGlvbnMpO1xuICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLl9jYWNoZWFibGUpIHtcbiAgICAgICAgICAgIGNhY2hlW2NhY2hlS2V5XSA9IE9iamVjdC5mcmVlemUoYW5pbWF0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbnM7XG4gICAgfVxuIGdldFNoYXJlZE9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICBpZiAoIW9wdGlvbnMuJHNoYXJlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9zaGFyZWRPcHRpb25zIHx8ICh0aGlzLl9zaGFyZWRPcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucykpO1xuICAgIH1cbiBpbmNsdWRlT3B0aW9ucyhtb2RlLCBzaGFyZWRPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiAhc2hhcmVkT3B0aW9ucyB8fCBpc0RpcmVjdFVwZGF0ZU1vZGUobW9kZSkgfHwgdGhpcy5jaGFydC5fYW5pbWF0aW9uc0Rpc2FibGVkO1xuICAgIH1cbiBfZ2V0U2hhcmVkT3B0aW9ucyhzdGFydCwgbW9kZSkge1xuICAgICAgICBjb25zdCBmaXJzdE9wdHMgPSB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoc3RhcnQsIG1vZGUpO1xuICAgICAgICBjb25zdCBwcmV2aW91c2x5U2hhcmVkT3B0aW9ucyA9IHRoaXMuX3NoYXJlZE9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHNoYXJlZE9wdGlvbnMgPSB0aGlzLmdldFNoYXJlZE9wdGlvbnMoZmlyc3RPcHRzKTtcbiAgICAgICAgY29uc3QgaW5jbHVkZU9wdGlvbnMgPSB0aGlzLmluY2x1ZGVPcHRpb25zKG1vZGUsIHNoYXJlZE9wdGlvbnMpIHx8IHNoYXJlZE9wdGlvbnMgIT09IHByZXZpb3VzbHlTaGFyZWRPcHRpb25zO1xuICAgICAgICB0aGlzLnVwZGF0ZVNoYXJlZE9wdGlvbnMoc2hhcmVkT3B0aW9ucywgbW9kZSwgZmlyc3RPcHRzKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNoYXJlZE9wdGlvbnMsXG4gICAgICAgICAgICBpbmNsdWRlT3B0aW9uc1xuICAgICAgICB9O1xuICAgIH1cbiB1cGRhdGVFbGVtZW50KGVsZW1lbnQsIGluZGV4LCBwcm9wZXJ0aWVzLCBtb2RlKSB7XG4gICAgICAgIGlmIChpc0RpcmVjdFVwZGF0ZU1vZGUobW9kZSkpIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oZWxlbWVudCwgcHJvcGVydGllcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9yZXNvbHZlQW5pbWF0aW9ucyhpbmRleCwgbW9kZSkudXBkYXRlKGVsZW1lbnQsIHByb3BlcnRpZXMpO1xuICAgICAgICB9XG4gICAgfVxuIHVwZGF0ZVNoYXJlZE9wdGlvbnMoc2hhcmVkT3B0aW9ucywgbW9kZSwgbmV3T3B0aW9ucykge1xuICAgICAgICBpZiAoc2hhcmVkT3B0aW9ucyAmJiAhaXNEaXJlY3RVcGRhdGVNb2RlKG1vZGUpKSB7XG4gICAgICAgICAgICB0aGlzLl9yZXNvbHZlQW5pbWF0aW9ucyh1bmRlZmluZWQsIG1vZGUpLnVwZGF0ZShzaGFyZWRPcHRpb25zLCBuZXdPcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cbiBfc2V0U3R5bGUoZWxlbWVudCwgaW5kZXgsIG1vZGUsIGFjdGl2ZSkge1xuICAgICAgICBlbGVtZW50LmFjdGl2ZSA9IGFjdGl2ZTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuZ2V0U3R5bGUoaW5kZXgsIGFjdGl2ZSk7XG4gICAgICAgIHRoaXMuX3Jlc29sdmVBbmltYXRpb25zKGluZGV4LCBtb2RlLCBhY3RpdmUpLnVwZGF0ZShlbGVtZW50LCB7XG4gICAgICAgICAgICBvcHRpb25zOiAhYWN0aXZlICYmIHRoaXMuZ2V0U2hhcmVkT3B0aW9ucyhvcHRpb25zKSB8fCBvcHRpb25zXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZW1vdmVIb3ZlclN0eWxlKGVsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXgpIHtcbiAgICAgICAgdGhpcy5fc2V0U3R5bGUoZWxlbWVudCwgaW5kZXgsICdhY3RpdmUnLCBmYWxzZSk7XG4gICAgfVxuICAgIHNldEhvdmVyU3R5bGUoZWxlbWVudCwgZGF0YXNldEluZGV4LCBpbmRleCkge1xuICAgICAgICB0aGlzLl9zZXRTdHlsZShlbGVtZW50LCBpbmRleCwgJ2FjdGl2ZScsIHRydWUpO1xuICAgIH1cbiBfcmVtb3ZlRGF0YXNldEhvdmVyU3R5bGUoKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLl9jYWNoZWRNZXRhLmRhdGFzZXQ7XG4gICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9zZXRTdHlsZShlbGVtZW50LCB1bmRlZmluZWQsICdhY3RpdmUnLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG4gX3NldERhdGFzZXRIb3ZlclN0eWxlKCkge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhc2V0O1xuICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5fc2V0U3R5bGUoZWxlbWVudCwgdW5kZWZpbmVkLCAnYWN0aXZlJywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gX3Jlc3luY0VsZW1lbnRzKHJlc2V0TmV3RWxlbWVudHMpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuX2RhdGE7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhO1xuICAgICAgICBmb3IgKGNvbnN0IFttZXRob2QsIGFyZzEsIGFyZzJdIG9mIHRoaXMuX3N5bmNMaXN0KXtcbiAgICAgICAgICAgIHRoaXNbbWV0aG9kXShhcmcxLCBhcmcyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zeW5jTGlzdCA9IFtdO1xuICAgICAgICBjb25zdCBudW1NZXRhID0gZWxlbWVudHMubGVuZ3RoO1xuICAgICAgICBjb25zdCBudW1EYXRhID0gZGF0YS5sZW5ndGg7XG4gICAgICAgIGNvbnN0IGNvdW50ID0gTWF0aC5taW4obnVtRGF0YSwgbnVtTWV0YSk7XG4gICAgICAgIGlmIChjb3VudCkge1xuICAgICAgICAgICAgdGhpcy5wYXJzZSgwLCBjb3VudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG51bURhdGEgPiBudW1NZXRhKSB7XG4gICAgICAgICAgICB0aGlzLl9pbnNlcnRFbGVtZW50cyhudW1NZXRhLCBudW1EYXRhIC0gbnVtTWV0YSwgcmVzZXROZXdFbGVtZW50cyk7XG4gICAgICAgIH0gZWxzZSBpZiAobnVtRGF0YSA8IG51bU1ldGEpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbW92ZUVsZW1lbnRzKG51bURhdGEsIG51bU1ldGEgLSBudW1EYXRhKTtcbiAgICAgICAgfVxuICAgIH1cbiBfaW5zZXJ0RWxlbWVudHMoc3RhcnQsIGNvdW50LCByZXNldE5ld0VsZW1lbnRzID0gdHJ1ZSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgZGF0YSA9IG1ldGEuZGF0YTtcbiAgICAgICAgY29uc3QgZW5kID0gc3RhcnQgKyBjb3VudDtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGNvbnN0IG1vdmUgPSAoYXJyKT0+e1xuICAgICAgICAgICAgYXJyLmxlbmd0aCArPSBjb3VudDtcbiAgICAgICAgICAgIGZvcihpID0gYXJyLmxlbmd0aCAtIDE7IGkgPj0gZW5kOyBpLS0pe1xuICAgICAgICAgICAgICAgIGFycltpXSA9IGFycltpIC0gY291bnRdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBtb3ZlKGRhdGEpO1xuICAgICAgICBmb3IoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpe1xuICAgICAgICAgICAgZGF0YVtpXSA9IG5ldyB0aGlzLmRhdGFFbGVtZW50VHlwZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9wYXJzaW5nKSB7XG4gICAgICAgICAgICBtb3ZlKG1ldGEuX3BhcnNlZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYXJzZShzdGFydCwgY291bnQpO1xuICAgICAgICBpZiAocmVzZXROZXdFbGVtZW50cykge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50cyhkYXRhLCBzdGFydCwgY291bnQsICdyZXNldCcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZUVsZW1lbnRzKGVsZW1lbnQsIHN0YXJ0LCBjb3VudCwgbW9kZSkge31cbiBfcmVtb3ZlRWxlbWVudHMoc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBpZiAodGhpcy5fcGFyc2luZykge1xuICAgICAgICAgICAgY29uc3QgcmVtb3ZlZCA9IG1ldGEuX3BhcnNlZC5zcGxpY2Uoc3RhcnQsIGNvdW50KTtcbiAgICAgICAgICAgIGlmIChtZXRhLl9zdGFja2VkKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJTdGFja3MobWV0YSwgcmVtb3ZlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbWV0YS5kYXRhLnNwbGljZShzdGFydCwgY291bnQpO1xuICAgIH1cbiBfc3luYyhhcmdzKSB7XG4gICAgICAgIGlmICh0aGlzLl9wYXJzaW5nKSB7XG4gICAgICAgICAgICB0aGlzLl9zeW5jTGlzdC5wdXNoKGFyZ3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgW21ldGhvZCwgYXJnMSwgYXJnMl0gPSBhcmdzO1xuICAgICAgICAgICAgdGhpc1ttZXRob2RdKGFyZzEsIGFyZzIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2hhcnQuX2RhdGFDaGFuZ2VzLnB1c2goW1xuICAgICAgICAgICAgdGhpcy5pbmRleCxcbiAgICAgICAgICAgIC4uLmFyZ3NcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIF9vbkRhdGFQdXNoKCkge1xuICAgICAgICBjb25zdCBjb3VudCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHRoaXMuX3N5bmMoW1xuICAgICAgICAgICAgJ19pbnNlcnRFbGVtZW50cycsXG4gICAgICAgICAgICB0aGlzLmdldERhdGFzZXQoKS5kYXRhLmxlbmd0aCAtIGNvdW50LFxuICAgICAgICAgICAgY291bnRcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIF9vbkRhdGFQb3AoKSB7XG4gICAgICAgIHRoaXMuX3N5bmMoW1xuICAgICAgICAgICAgJ19yZW1vdmVFbGVtZW50cycsXG4gICAgICAgICAgICB0aGlzLl9jYWNoZWRNZXRhLmRhdGEubGVuZ3RoIC0gMSxcbiAgICAgICAgICAgIDFcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIF9vbkRhdGFTaGlmdCgpIHtcbiAgICAgICAgdGhpcy5fc3luYyhbXG4gICAgICAgICAgICAnX3JlbW92ZUVsZW1lbnRzJyxcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAxXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBfb25EYXRhU3BsaWNlKHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBpZiAoY291bnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3N5bmMoW1xuICAgICAgICAgICAgICAgICdfcmVtb3ZlRWxlbWVudHMnLFxuICAgICAgICAgICAgICAgIHN0YXJ0LFxuICAgICAgICAgICAgICAgIGNvdW50XG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdDb3VudCA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICAgICAgICBpZiAobmV3Q291bnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3N5bmMoW1xuICAgICAgICAgICAgICAgICdfaW5zZXJ0RWxlbWVudHMnLFxuICAgICAgICAgICAgICAgIHN0YXJ0LFxuICAgICAgICAgICAgICAgIG5ld0NvdW50XG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfb25EYXRhVW5zaGlmdCgpIHtcbiAgICAgICAgdGhpcy5fc3luYyhbXG4gICAgICAgICAgICAnX2luc2VydEVsZW1lbnRzJyxcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAgIF0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0QWxsU2NhbGVWYWx1ZXMoc2NhbGUsIHR5cGUpIHtcbiAgICBpZiAoIXNjYWxlLl9jYWNoZS4kYmFyKSB7XG4gICAgICAgIGNvbnN0IHZpc2libGVNZXRhcyA9IHNjYWxlLmdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKHR5cGUpO1xuICAgICAgICBsZXQgdmFsdWVzID0gW107XG4gICAgICAgIGZvcihsZXQgaSA9IDAsIGlsZW4gPSB2aXNpYmxlTWV0YXMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKXtcbiAgICAgICAgICAgIHZhbHVlcyA9IHZhbHVlcy5jb25jYXQodmlzaWJsZU1ldGFzW2ldLmNvbnRyb2xsZXIuZ2V0QWxsUGFyc2VkVmFsdWVzKHNjYWxlKSk7XG4gICAgICAgIH1cbiAgICAgICAgc2NhbGUuX2NhY2hlLiRiYXIgPSBfYXJyYXlVbmlxdWUodmFsdWVzLnNvcnQoKGEsIGIpPT5hIC0gYikpO1xuICAgIH1cbiAgICByZXR1cm4gc2NhbGUuX2NhY2hlLiRiYXI7XG59XG4gZnVuY3Rpb24gY29tcHV0ZU1pblNhbXBsZVNpemUobWV0YSkge1xuICAgIGNvbnN0IHNjYWxlID0gbWV0YS5pU2NhbGU7XG4gICAgY29uc3QgdmFsdWVzID0gZ2V0QWxsU2NhbGVWYWx1ZXMoc2NhbGUsIG1ldGEudHlwZSk7XG4gICAgbGV0IG1pbiA9IHNjYWxlLl9sZW5ndGg7XG4gICAgbGV0IGksIGlsZW4sIGN1cnIsIHByZXY7XG4gICAgY29uc3QgdXBkYXRlTWluQW5kUHJldiA9ICgpPT57XG4gICAgICAgIGlmIChjdXJyID09PSAzMjc2NyB8fCBjdXJyID09PSAtMzI3NjgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVmaW5lZChwcmV2KSkge1xuICAgICAgICAgICAgbWluID0gTWF0aC5taW4obWluLCBNYXRoLmFicyhjdXJyIC0gcHJldikgfHwgbWluKTtcbiAgICAgICAgfVxuICAgICAgICBwcmV2ID0gY3VycjtcbiAgICB9O1xuICAgIGZvcihpID0gMCwgaWxlbiA9IHZhbHVlcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBjdXJyID0gc2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZXNbaV0pO1xuICAgICAgICB1cGRhdGVNaW5BbmRQcmV2KCk7XG4gICAgfVxuICAgIHByZXYgPSB1bmRlZmluZWQ7XG4gICAgZm9yKGkgPSAwLCBpbGVuID0gc2NhbGUudGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgY3VyciA9IHNjYWxlLmdldFBpeGVsRm9yVGljayhpKTtcbiAgICAgICAgdXBkYXRlTWluQW5kUHJldigpO1xuICAgIH1cbiAgICByZXR1cm4gbWluO1xufVxuIGZ1bmN0aW9uIGNvbXB1dGVGaXRDYXRlZ29yeVRyYWl0cyhpbmRleCwgcnVsZXIsIG9wdGlvbnMsIHN0YWNrQ291bnQpIHtcbiAgICBjb25zdCB0aGlja25lc3MgPSBvcHRpb25zLmJhclRoaWNrbmVzcztcbiAgICBsZXQgc2l6ZSwgcmF0aW87XG4gICAgaWYgKGlzTnVsbE9yVW5kZWYodGhpY2tuZXNzKSkge1xuICAgICAgICBzaXplID0gcnVsZXIubWluICogb3B0aW9ucy5jYXRlZ29yeVBlcmNlbnRhZ2U7XG4gICAgICAgIHJhdGlvID0gb3B0aW9ucy5iYXJQZXJjZW50YWdlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHNpemUgPSB0aGlja25lc3MgKiBzdGFja0NvdW50O1xuICAgICAgICByYXRpbyA9IDE7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGNodW5rOiBzaXplIC8gc3RhY2tDb3VudCxcbiAgICAgICAgcmF0aW8sXG4gICAgICAgIHN0YXJ0OiBydWxlci5waXhlbHNbaW5kZXhdIC0gc2l6ZSAvIDJcbiAgICB9O1xufVxuIGZ1bmN0aW9uIGNvbXB1dGVGbGV4Q2F0ZWdvcnlUcmFpdHMoaW5kZXgsIHJ1bGVyLCBvcHRpb25zLCBzdGFja0NvdW50KSB7XG4gICAgY29uc3QgcGl4ZWxzID0gcnVsZXIucGl4ZWxzO1xuICAgIGNvbnN0IGN1cnIgPSBwaXhlbHNbaW5kZXhdO1xuICAgIGxldCBwcmV2ID0gaW5kZXggPiAwID8gcGl4ZWxzW2luZGV4IC0gMV0gOiBudWxsO1xuICAgIGxldCBuZXh0ID0gaW5kZXggPCBwaXhlbHMubGVuZ3RoIC0gMSA/IHBpeGVsc1tpbmRleCArIDFdIDogbnVsbDtcbiAgICBjb25zdCBwZXJjZW50ID0gb3B0aW9ucy5jYXRlZ29yeVBlcmNlbnRhZ2U7XG4gICAgaWYgKHByZXYgPT09IG51bGwpIHtcbiAgICAgICAgcHJldiA9IGN1cnIgLSAobmV4dCA9PT0gbnVsbCA/IHJ1bGVyLmVuZCAtIHJ1bGVyLnN0YXJ0IDogbmV4dCAtIGN1cnIpO1xuICAgIH1cbiAgICBpZiAobmV4dCA9PT0gbnVsbCkge1xuICAgICAgICBuZXh0ID0gY3VyciArIGN1cnIgLSBwcmV2O1xuICAgIH1cbiAgICBjb25zdCBzdGFydCA9IGN1cnIgLSAoY3VyciAtIE1hdGgubWluKHByZXYsIG5leHQpKSAvIDIgKiBwZXJjZW50O1xuICAgIGNvbnN0IHNpemUgPSBNYXRoLmFicyhuZXh0IC0gcHJldikgLyAyICogcGVyY2VudDtcbiAgICByZXR1cm4ge1xuICAgICAgICBjaHVuazogc2l6ZSAvIHN0YWNrQ291bnQsXG4gICAgICAgIHJhdGlvOiBvcHRpb25zLmJhclBlcmNlbnRhZ2UsXG4gICAgICAgIHN0YXJ0XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHBhcnNlRmxvYXRCYXIoZW50cnksIGl0ZW0sIHZTY2FsZSwgaSkge1xuICAgIGNvbnN0IHN0YXJ0VmFsdWUgPSB2U2NhbGUucGFyc2UoZW50cnlbMF0sIGkpO1xuICAgIGNvbnN0IGVuZFZhbHVlID0gdlNjYWxlLnBhcnNlKGVudHJ5WzFdLCBpKTtcbiAgICBjb25zdCBtaW4gPSBNYXRoLm1pbihzdGFydFZhbHVlLCBlbmRWYWx1ZSk7XG4gICAgY29uc3QgbWF4ID0gTWF0aC5tYXgoc3RhcnRWYWx1ZSwgZW5kVmFsdWUpO1xuICAgIGxldCBiYXJTdGFydCA9IG1pbjtcbiAgICBsZXQgYmFyRW5kID0gbWF4O1xuICAgIGlmIChNYXRoLmFicyhtaW4pID4gTWF0aC5hYnMobWF4KSkge1xuICAgICAgICBiYXJTdGFydCA9IG1heDtcbiAgICAgICAgYmFyRW5kID0gbWluO1xuICAgIH1cbiAgICBpdGVtW3ZTY2FsZS5heGlzXSA9IGJhckVuZDtcbiAgICBpdGVtLl9jdXN0b20gPSB7XG4gICAgICAgIGJhclN0YXJ0LFxuICAgICAgICBiYXJFbmQsXG4gICAgICAgIHN0YXJ0OiBzdGFydFZhbHVlLFxuICAgICAgICBlbmQ6IGVuZFZhbHVlLFxuICAgICAgICBtaW4sXG4gICAgICAgIG1heFxuICAgIH07XG59XG5mdW5jdGlvbiBwYXJzZVZhbHVlKGVudHJ5LCBpdGVtLCB2U2NhbGUsIGkpIHtcbiAgICBpZiAoaXNBcnJheShlbnRyeSkpIHtcbiAgICAgICAgcGFyc2VGbG9hdEJhcihlbnRyeSwgaXRlbSwgdlNjYWxlLCBpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpdGVtW3ZTY2FsZS5heGlzXSA9IHZTY2FsZS5wYXJzZShlbnRyeSwgaSk7XG4gICAgfVxuICAgIHJldHVybiBpdGVtO1xufVxuZnVuY3Rpb24gcGFyc2VBcnJheU9yUHJpbWl0aXZlKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgIGNvbnN0IGlTY2FsZSA9IG1ldGEuaVNjYWxlO1xuICAgIGNvbnN0IHZTY2FsZSA9IG1ldGEudlNjYWxlO1xuICAgIGNvbnN0IGxhYmVscyA9IGlTY2FsZS5nZXRMYWJlbHMoKTtcbiAgICBjb25zdCBzaW5nbGVTY2FsZSA9IGlTY2FsZSA9PT0gdlNjYWxlO1xuICAgIGNvbnN0IHBhcnNlZCA9IFtdO1xuICAgIGxldCBpLCBpbGVuLCBpdGVtLCBlbnRyeTtcbiAgICBmb3IoaSA9IHN0YXJ0LCBpbGVuID0gc3RhcnQgKyBjb3VudDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIGVudHJ5ID0gZGF0YVtpXTtcbiAgICAgICAgaXRlbSA9IHt9O1xuICAgICAgICBpdGVtW2lTY2FsZS5heGlzXSA9IHNpbmdsZVNjYWxlIHx8IGlTY2FsZS5wYXJzZShsYWJlbHNbaV0sIGkpO1xuICAgICAgICBwYXJzZWQucHVzaChwYXJzZVZhbHVlKGVudHJ5LCBpdGVtLCB2U2NhbGUsIGkpKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlZDtcbn1cbmZ1bmN0aW9uIGlzRmxvYXRCYXIoY3VzdG9tKSB7XG4gICAgcmV0dXJuIGN1c3RvbSAmJiBjdXN0b20uYmFyU3RhcnQgIT09IHVuZGVmaW5lZCAmJiBjdXN0b20uYmFyRW5kICE9PSB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBiYXJTaWduKHNpemUsIHZTY2FsZSwgYWN0dWFsQmFzZSkge1xuICAgIGlmIChzaXplICE9PSAwKSB7XG4gICAgICAgIHJldHVybiBzaWduKHNpemUpO1xuICAgIH1cbiAgICByZXR1cm4gKHZTY2FsZS5pc0hvcml6b250YWwoKSA/IDEgOiAtMSkgKiAodlNjYWxlLm1pbiA+PSBhY3R1YWxCYXNlID8gMSA6IC0xKTtcbn1cbmZ1bmN0aW9uIGJvcmRlclByb3BzKHByb3BlcnRpZXMpIHtcbiAgICBsZXQgcmV2ZXJzZSwgc3RhcnQsIGVuZCwgdG9wLCBib3R0b207XG4gICAgaWYgKHByb3BlcnRpZXMuaG9yaXpvbnRhbCkge1xuICAgICAgICByZXZlcnNlID0gcHJvcGVydGllcy5iYXNlID4gcHJvcGVydGllcy54O1xuICAgICAgICBzdGFydCA9ICdsZWZ0JztcbiAgICAgICAgZW5kID0gJ3JpZ2h0JztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXZlcnNlID0gcHJvcGVydGllcy5iYXNlIDwgcHJvcGVydGllcy55O1xuICAgICAgICBzdGFydCA9ICdib3R0b20nO1xuICAgICAgICBlbmQgPSAndG9wJztcbiAgICB9XG4gICAgaWYgKHJldmVyc2UpIHtcbiAgICAgICAgdG9wID0gJ2VuZCc7XG4gICAgICAgIGJvdHRvbSA9ICdzdGFydCc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdG9wID0gJ3N0YXJ0JztcbiAgICAgICAgYm90dG9tID0gJ2VuZCc7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0LFxuICAgICAgICBlbmQsXG4gICAgICAgIHJldmVyc2UsXG4gICAgICAgIHRvcCxcbiAgICAgICAgYm90dG9tXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHNldEJvcmRlclNraXBwZWQocHJvcGVydGllcywgb3B0aW9ucywgc3RhY2ssIGluZGV4KSB7XG4gICAgbGV0IGVkZ2UgPSBvcHRpb25zLmJvcmRlclNraXBwZWQ7XG4gICAgY29uc3QgcmVzID0ge307XG4gICAgaWYgKCFlZGdlKSB7XG4gICAgICAgIHByb3BlcnRpZXMuYm9yZGVyU2tpcHBlZCA9IHJlcztcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZWRnZSA9PT0gdHJ1ZSkge1xuICAgICAgICBwcm9wZXJ0aWVzLmJvcmRlclNraXBwZWQgPSB7XG4gICAgICAgICAgICB0b3A6IHRydWUsXG4gICAgICAgICAgICByaWdodDogdHJ1ZSxcbiAgICAgICAgICAgIGJvdHRvbTogdHJ1ZSxcbiAgICAgICAgICAgIGxlZnQ6IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB7IHN0YXJ0ICwgZW5kICwgcmV2ZXJzZSAsIHRvcCAsIGJvdHRvbSAgfSA9IGJvcmRlclByb3BzKHByb3BlcnRpZXMpO1xuICAgIGlmIChlZGdlID09PSAnbWlkZGxlJyAmJiBzdGFjaykge1xuICAgICAgICBwcm9wZXJ0aWVzLmVuYWJsZUJvcmRlclJhZGl1cyA9IHRydWU7XG4gICAgICAgIGlmICgoc3RhY2suX3RvcCB8fCAwKSA9PT0gaW5kZXgpIHtcbiAgICAgICAgICAgIGVkZ2UgPSB0b3A7XG4gICAgICAgIH0gZWxzZSBpZiAoKHN0YWNrLl9ib3R0b20gfHwgMCkgPT09IGluZGV4KSB7XG4gICAgICAgICAgICBlZGdlID0gYm90dG9tO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzW3BhcnNlRWRnZShib3R0b20sIHN0YXJ0LCBlbmQsIHJldmVyc2UpXSA9IHRydWU7XG4gICAgICAgICAgICBlZGdlID0gdG9wO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlc1twYXJzZUVkZ2UoZWRnZSwgc3RhcnQsIGVuZCwgcmV2ZXJzZSldID0gdHJ1ZTtcbiAgICBwcm9wZXJ0aWVzLmJvcmRlclNraXBwZWQgPSByZXM7XG59XG5mdW5jdGlvbiBwYXJzZUVkZ2UoZWRnZSwgYSwgYiwgcmV2ZXJzZSkge1xuICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgIGVkZ2UgPSBzd2FwKGVkZ2UsIGEsIGIpO1xuICAgICAgICBlZGdlID0gc3RhcnRFbmQoZWRnZSwgYiwgYSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZWRnZSA9IHN0YXJ0RW5kKGVkZ2UsIGEsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZWRnZTtcbn1cbmZ1bmN0aW9uIHN3YXAob3JpZywgdjEsIHYyKSB7XG4gICAgcmV0dXJuIG9yaWcgPT09IHYxID8gdjIgOiBvcmlnID09PSB2MiA/IHYxIDogb3JpZztcbn1cbmZ1bmN0aW9uIHN0YXJ0RW5kKHYsIHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gdiA9PT0gJ3N0YXJ0JyA/IHN0YXJ0IDogdiA9PT0gJ2VuZCcgPyBlbmQgOiB2O1xufVxuZnVuY3Rpb24gc2V0SW5mbGF0ZUFtb3VudChwcm9wZXJ0aWVzLCB7IGluZmxhdGVBbW91bnQgIH0sIHJhdGlvKSB7XG4gICAgcHJvcGVydGllcy5pbmZsYXRlQW1vdW50ID0gaW5mbGF0ZUFtb3VudCA9PT0gJ2F1dG8nID8gcmF0aW8gPT09IDEgPyAwLjMzIDogMCA6IGluZmxhdGVBbW91bnQ7XG59XG5jbGFzcyBCYXJDb250cm9sbGVyIGV4dGVuZHMgRGF0YXNldENvbnRyb2xsZXIge1xuICAgIHN0YXRpYyBpZCA9ICdiYXInO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgZGF0YXNldEVsZW1lbnRUeXBlOiBmYWxzZSxcbiAgICAgICAgZGF0YUVsZW1lbnRUeXBlOiAnYmFyJyxcbiAgICAgICAgY2F0ZWdvcnlQZXJjZW50YWdlOiAwLjgsXG4gICAgICAgIGJhclBlcmNlbnRhZ2U6IDAuOSxcbiAgICAgICAgZ3JvdXBlZDogdHJ1ZSxcbiAgICAgICAgYW5pbWF0aW9uczoge1xuICAgICAgICAgICAgbnVtYmVyczoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgJ3gnLFxuICAgICAgICAgICAgICAgICAgICAneScsXG4gICAgICAgICAgICAgICAgICAgICdiYXNlJyxcbiAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJyxcbiAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCdcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuIHN0YXRpYyBvdmVycmlkZXMgPSB7XG4gICAgICAgIHNjYWxlczoge1xuICAgICAgICAgICAgX2luZGV4Xzoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdjYXRlZ29yeScsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiB0cnVlLFxuICAgICAgICAgICAgICAgIGdyaWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF92YWx1ZV86IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbGluZWFyJyxcbiAgICAgICAgICAgICAgICBiZWdpbkF0WmVybzogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiBwYXJzZVByaW1pdGl2ZURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIHJldHVybiBwYXJzZUFycmF5T3JQcmltaXRpdmUobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICB9XG4gcGFyc2VBcnJheURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIHJldHVybiBwYXJzZUFycmF5T3JQcmltaXRpdmUobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICB9XG4gcGFyc2VPYmplY3REYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCB7IGlTY2FsZSAsIHZTY2FsZSAgfSA9IG1ldGE7XG4gICAgICAgIGNvbnN0IHsgeEF4aXNLZXkgPSd4JyAsIHlBeGlzS2V5ID0neScgIH0gPSB0aGlzLl9wYXJzaW5nO1xuICAgICAgICBjb25zdCBpQXhpc0tleSA9IGlTY2FsZS5heGlzID09PSAneCcgPyB4QXhpc0tleSA6IHlBeGlzS2V5O1xuICAgICAgICBjb25zdCB2QXhpc0tleSA9IHZTY2FsZS5heGlzID09PSAneCcgPyB4QXhpc0tleSA6IHlBeGlzS2V5O1xuICAgICAgICBjb25zdCBwYXJzZWQgPSBbXTtcbiAgICAgICAgbGV0IGksIGlsZW4sIGl0ZW0sIG9iajtcbiAgICAgICAgZm9yKGkgPSBzdGFydCwgaWxlbiA9IHN0YXJ0ICsgY291bnQ7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgb2JqID0gZGF0YVtpXTtcbiAgICAgICAgICAgIGl0ZW0gPSB7fTtcbiAgICAgICAgICAgIGl0ZW1baVNjYWxlLmF4aXNdID0gaVNjYWxlLnBhcnNlKHJlc29sdmVPYmplY3RLZXkob2JqLCBpQXhpc0tleSksIGkpO1xuICAgICAgICAgICAgcGFyc2VkLnB1c2gocGFyc2VWYWx1ZShyZXNvbHZlT2JqZWN0S2V5KG9iaiwgdkF4aXNLZXkpLCBpdGVtLCB2U2NhbGUsIGkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgIH1cbiB1cGRhdGVSYW5nZUZyb21QYXJzZWQocmFuZ2UsIHNjYWxlLCBwYXJzZWQsIHN0YWNrKSB7XG4gICAgICAgIHN1cGVyLnVwZGF0ZVJhbmdlRnJvbVBhcnNlZChyYW5nZSwgc2NhbGUsIHBhcnNlZCwgc3RhY2spO1xuICAgICAgICBjb25zdCBjdXN0b20gPSBwYXJzZWQuX2N1c3RvbTtcbiAgICAgICAgaWYgKGN1c3RvbSAmJiBzY2FsZSA9PT0gdGhpcy5fY2FjaGVkTWV0YS52U2NhbGUpIHtcbiAgICAgICAgICAgIHJhbmdlLm1pbiA9IE1hdGgubWluKHJhbmdlLm1pbiwgY3VzdG9tLm1pbik7XG4gICAgICAgICAgICByYW5nZS5tYXggPSBNYXRoLm1heChyYW5nZS5tYXgsIGN1c3RvbS5tYXgpO1xuICAgICAgICB9XG4gICAgfVxuIGdldE1heE92ZXJmbG93KCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gZ2V0TGFiZWxBbmRWYWx1ZShpbmRleCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgeyBpU2NhbGUgLCB2U2NhbGUgIH0gPSBtZXRhO1xuICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgICAgIGNvbnN0IGN1c3RvbSA9IHBhcnNlZC5fY3VzdG9tO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGlzRmxvYXRCYXIoY3VzdG9tKSA/ICdbJyArIGN1c3RvbS5zdGFydCArICcsICcgKyBjdXN0b20uZW5kICsgJ10nIDogJycgKyB2U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWRbdlNjYWxlLmF4aXNdKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhYmVsOiAnJyArIGlTY2FsZS5nZXRMYWJlbEZvclZhbHVlKHBhcnNlZFtpU2NhbGUuYXhpc10pLFxuICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgdGhpcy5lbmFibGVPcHRpb25TaGFyaW5nID0gdHJ1ZTtcbiAgICAgICAgc3VwZXIuaW5pdGlhbGl6ZSgpO1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgbWV0YS5zdGFjayA9IHRoaXMuZ2V0RGF0YXNldCgpLnN0YWNrO1xuICAgIH1cbiAgICB1cGRhdGUobW9kZSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50cyhtZXRhLmRhdGEsIDAsIG1ldGEuZGF0YS5sZW5ndGgsIG1vZGUpO1xuICAgIH1cbiAgICB1cGRhdGVFbGVtZW50cyhiYXJzLCBzdGFydCwgY291bnQsIG1vZGUpIHtcbiAgICAgICAgY29uc3QgcmVzZXQgPSBtb2RlID09PSAncmVzZXQnO1xuICAgICAgICBjb25zdCB7IGluZGV4ICwgX2NhY2hlZE1ldGE6IHsgdlNjYWxlICB9ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgYmFzZSA9IHZTY2FsZS5nZXRCYXNlUGl4ZWwoKTtcbiAgICAgICAgY29uc3QgaG9yaXpvbnRhbCA9IHZTY2FsZS5pc0hvcml6b250YWwoKTtcbiAgICAgICAgY29uc3QgcnVsZXIgPSB0aGlzLl9nZXRSdWxlcigpO1xuICAgICAgICBjb25zdCB7IHNoYXJlZE9wdGlvbnMgLCBpbmNsdWRlT3B0aW9ucyAgfSA9IHRoaXMuX2dldFNoYXJlZE9wdGlvbnMoc3RhcnQsIG1vZGUpO1xuICAgICAgICBmb3IobGV0IGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7IGkrKyl7XG4gICAgICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpKTtcbiAgICAgICAgICAgIGNvbnN0IHZwaXhlbHMgPSByZXNldCB8fCBpc051bGxPclVuZGVmKHBhcnNlZFt2U2NhbGUuYXhpc10pID8ge1xuICAgICAgICAgICAgICAgIGJhc2UsXG4gICAgICAgICAgICAgICAgaGVhZDogYmFzZVxuICAgICAgICAgICAgfSA6IHRoaXMuX2NhbGN1bGF0ZUJhclZhbHVlUGl4ZWxzKGkpO1xuICAgICAgICAgICAgY29uc3QgaXBpeGVscyA9IHRoaXMuX2NhbGN1bGF0ZUJhckluZGV4UGl4ZWxzKGksIHJ1bGVyKTtcbiAgICAgICAgICAgIGNvbnN0IHN0YWNrID0gKHBhcnNlZC5fc3RhY2tzIHx8IHt9KVt2U2NhbGUuYXhpc107XG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgICAgICAgICAgICAgIGhvcml6b250YWwsXG4gICAgICAgICAgICAgICAgYmFzZTogdnBpeGVscy5iYXNlLFxuICAgICAgICAgICAgICAgIGVuYWJsZUJvcmRlclJhZGl1czogIXN0YWNrIHx8IGlzRmxvYXRCYXIocGFyc2VkLl9jdXN0b20pIHx8IGluZGV4ID09PSBzdGFjay5fdG9wIHx8IGluZGV4ID09PSBzdGFjay5fYm90dG9tLFxuICAgICAgICAgICAgICAgIHg6IGhvcml6b250YWwgPyB2cGl4ZWxzLmhlYWQgOiBpcGl4ZWxzLmNlbnRlcixcbiAgICAgICAgICAgICAgICB5OiBob3Jpem9udGFsID8gaXBpeGVscy5jZW50ZXIgOiB2cGl4ZWxzLmhlYWQsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBob3Jpem9udGFsID8gaXBpeGVscy5zaXplIDogTWF0aC5hYnModnBpeGVscy5zaXplKSxcbiAgICAgICAgICAgICAgICB3aWR0aDogaG9yaXpvbnRhbCA/IE1hdGguYWJzKHZwaXhlbHMuc2l6ZSkgOiBpcGl4ZWxzLnNpemVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoaW5jbHVkZU9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLm9wdGlvbnMgPSBzaGFyZWRPcHRpb25zIHx8IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpLCBiYXJzW2ldLmFjdGl2ZSA/ICdhY3RpdmUnIDogbW9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBvcHRpb25zID0gcHJvcGVydGllcy5vcHRpb25zIHx8IGJhcnNbaV0ub3B0aW9ucztcbiAgICAgICAgICAgIHNldEJvcmRlclNraXBwZWQocHJvcGVydGllcywgb3B0aW9ucywgc3RhY2ssIGluZGV4KTtcbiAgICAgICAgICAgIHNldEluZmxhdGVBbW91bnQocHJvcGVydGllcywgb3B0aW9ucywgcnVsZXIucmF0aW8pO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50KGJhcnNbaV0sIGksIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgICAgICB9XG4gICAgfVxuIF9nZXRTdGFja3MobGFzdCwgZGF0YUluZGV4KSB7XG4gICAgICAgIGNvbnN0IHsgaVNjYWxlICB9ID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgbWV0YXNldHMgPSBpU2NhbGUuZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXModGhpcy5fdHlwZSkuZmlsdGVyKChtZXRhKT0+bWV0YS5jb250cm9sbGVyLm9wdGlvbnMuZ3JvdXBlZCk7XG4gICAgICAgIGNvbnN0IHN0YWNrZWQgPSBpU2NhbGUub3B0aW9ucy5zdGFja2VkO1xuICAgICAgICBjb25zdCBzdGFja3MgPSBbXTtcbiAgICAgICAgY29uc3Qgc2tpcE51bGwgPSAobWV0YSk9PntcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZCA9IG1ldGEuY29udHJvbGxlci5nZXRQYXJzZWQoZGF0YUluZGV4KTtcbiAgICAgICAgICAgIGNvbnN0IHZhbCA9IHBhcnNlZCAmJiBwYXJzZWRbbWV0YS52U2NhbGUuYXhpc107XG4gICAgICAgICAgICBpZiAoaXNOdWxsT3JVbmRlZih2YWwpIHx8IGlzTmFOKHZhbCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZm9yIChjb25zdCBtZXRhIG9mIG1ldGFzZXRzKXtcbiAgICAgICAgICAgIGlmIChkYXRhSW5kZXggIT09IHVuZGVmaW5lZCAmJiBza2lwTnVsbChtZXRhKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YWNrZWQgPT09IGZhbHNlIHx8IHN0YWNrcy5pbmRleE9mKG1ldGEuc3RhY2spID09PSAtMSB8fCBzdGFja2VkID09PSB1bmRlZmluZWQgJiYgbWV0YS5zdGFjayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgc3RhY2tzLnB1c2gobWV0YS5zdGFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWV0YS5pbmRleCA9PT0gbGFzdCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghc3RhY2tzLmxlbmd0aCkge1xuICAgICAgICAgICAgc3RhY2tzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RhY2tzO1xuICAgIH1cbiBfZ2V0U3RhY2tDb3VudChpbmRleCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0U3RhY2tzKHVuZGVmaW5lZCwgaW5kZXgpLmxlbmd0aDtcbiAgICB9XG4gX2dldFN0YWNrSW5kZXgoZGF0YXNldEluZGV4LCBuYW1lLCBkYXRhSW5kZXgpIHtcbiAgICAgICAgY29uc3Qgc3RhY2tzID0gdGhpcy5fZ2V0U3RhY2tzKGRhdGFzZXRJbmRleCwgZGF0YUluZGV4KTtcbiAgICAgICAgY29uc3QgaW5kZXggPSBuYW1lICE9PSB1bmRlZmluZWQgPyBzdGFja3MuaW5kZXhPZihuYW1lKSA6IC0xO1xuICAgICAgICByZXR1cm4gaW5kZXggPT09IC0xID8gc3RhY2tzLmxlbmd0aCAtIDEgOiBpbmRleDtcbiAgICB9XG4gX2dldFJ1bGVyKCkge1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgaVNjYWxlID0gbWV0YS5pU2NhbGU7XG4gICAgICAgIGNvbnN0IHBpeGVscyA9IFtdO1xuICAgICAgICBsZXQgaSwgaWxlbjtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gbWV0YS5kYXRhLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBwaXhlbHMucHVzaChpU2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZSh0aGlzLmdldFBhcnNlZChpKVtpU2NhbGUuYXhpc10sIGkpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBiYXJUaGlja25lc3MgPSBvcHRzLmJhclRoaWNrbmVzcztcbiAgICAgICAgY29uc3QgbWluID0gYmFyVGhpY2tuZXNzIHx8IGNvbXB1dGVNaW5TYW1wbGVTaXplKG1ldGEpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWluLFxuICAgICAgICAgICAgcGl4ZWxzLFxuICAgICAgICAgICAgc3RhcnQ6IGlTY2FsZS5fc3RhcnRQaXhlbCxcbiAgICAgICAgICAgIGVuZDogaVNjYWxlLl9lbmRQaXhlbCxcbiAgICAgICAgICAgIHN0YWNrQ291bnQ6IHRoaXMuX2dldFN0YWNrQ291bnQoKSxcbiAgICAgICAgICAgIHNjYWxlOiBpU2NhbGUsXG4gICAgICAgICAgICBncm91cGVkOiBvcHRzLmdyb3VwZWQsXG4gICAgICAgICAgICByYXRpbzogYmFyVGhpY2tuZXNzID8gMSA6IG9wdHMuY2F0ZWdvcnlQZXJjZW50YWdlICogb3B0cy5iYXJQZXJjZW50YWdlXG4gICAgICAgIH07XG4gICAgfVxuIF9jYWxjdWxhdGVCYXJWYWx1ZVBpeGVscyhpbmRleCkge1xuICAgICAgICBjb25zdCB7IF9jYWNoZWRNZXRhOiB7IHZTY2FsZSAsIF9zdGFja2VkICwgaW5kZXg6IGRhdGFzZXRJbmRleCAgfSAsIG9wdGlvbnM6IHsgYmFzZTogYmFzZVZhbHVlICwgbWluQmFyTGVuZ3RoICB9ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgYWN0dWFsQmFzZSA9IGJhc2VWYWx1ZSB8fCAwO1xuICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgICAgIGNvbnN0IGN1c3RvbSA9IHBhcnNlZC5fY3VzdG9tO1xuICAgICAgICBjb25zdCBmbG9hdGluZyA9IGlzRmxvYXRCYXIoY3VzdG9tKTtcbiAgICAgICAgbGV0IHZhbHVlID0gcGFyc2VkW3ZTY2FsZS5heGlzXTtcbiAgICAgICAgbGV0IHN0YXJ0ID0gMDtcbiAgICAgICAgbGV0IGxlbmd0aCA9IF9zdGFja2VkID8gdGhpcy5hcHBseVN0YWNrKHZTY2FsZSwgcGFyc2VkLCBfc3RhY2tlZCkgOiB2YWx1ZTtcbiAgICAgICAgbGV0IGhlYWQsIHNpemU7XG4gICAgICAgIGlmIChsZW5ndGggIT09IHZhbHVlKSB7XG4gICAgICAgICAgICBzdGFydCA9IGxlbmd0aCAtIHZhbHVlO1xuICAgICAgICAgICAgbGVuZ3RoID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZsb2F0aW5nKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGN1c3RvbS5iYXJTdGFydDtcbiAgICAgICAgICAgIGxlbmd0aCA9IGN1c3RvbS5iYXJFbmQgLSBjdXN0b20uYmFyU3RhcnQ7XG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IDAgJiYgc2lnbih2YWx1ZSkgIT09IHNpZ24oY3VzdG9tLmJhckVuZCkpIHtcbiAgICAgICAgICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGFydCArPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGFydFZhbHVlID0gIWlzTnVsbE9yVW5kZWYoYmFzZVZhbHVlKSAmJiAhZmxvYXRpbmcgPyBiYXNlVmFsdWUgOiBzdGFydDtcbiAgICAgICAgbGV0IGJhc2UgPSB2U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShzdGFydFZhbHVlKTtcbiAgICAgICAgaWYgKHRoaXMuY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaW5kZXgpKSB7XG4gICAgICAgICAgICBoZWFkID0gdlNjYWxlLmdldFBpeGVsRm9yVmFsdWUoc3RhcnQgKyBsZW5ndGgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGVhZCA9IGJhc2U7XG4gICAgICAgIH1cbiAgICAgICAgc2l6ZSA9IGhlYWQgLSBiYXNlO1xuICAgICAgICBpZiAoTWF0aC5hYnMoc2l6ZSkgPCBtaW5CYXJMZW5ndGgpIHtcbiAgICAgICAgICAgIHNpemUgPSBiYXJTaWduKHNpemUsIHZTY2FsZSwgYWN0dWFsQmFzZSkgKiBtaW5CYXJMZW5ndGg7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IGFjdHVhbEJhc2UpIHtcbiAgICAgICAgICAgICAgICBiYXNlIC09IHNpemUgLyAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc3RhcnRQaXhlbCA9IHZTY2FsZS5nZXRQaXhlbEZvckRlY2ltYWwoMCk7XG4gICAgICAgICAgICBjb25zdCBlbmRQaXhlbCA9IHZTY2FsZS5nZXRQaXhlbEZvckRlY2ltYWwoMSk7XG4gICAgICAgICAgICBjb25zdCBtaW4gPSBNYXRoLm1pbihzdGFydFBpeGVsLCBlbmRQaXhlbCk7XG4gICAgICAgICAgICBjb25zdCBtYXggPSBNYXRoLm1heChzdGFydFBpeGVsLCBlbmRQaXhlbCk7XG4gICAgICAgICAgICBiYXNlID0gTWF0aC5tYXgoTWF0aC5taW4oYmFzZSwgbWF4KSwgbWluKTtcbiAgICAgICAgICAgIGhlYWQgPSBiYXNlICsgc2l6ZTtcbiAgICAgICAgICAgIGlmIChfc3RhY2tlZCAmJiAhZmxvYXRpbmcpIHtcbiAgICAgICAgICAgICAgICBwYXJzZWQuX3N0YWNrc1t2U2NhbGUuYXhpc10uX3Zpc3VhbFZhbHVlc1tkYXRhc2V0SW5kZXhdID0gdlNjYWxlLmdldFZhbHVlRm9yUGl4ZWwoaGVhZCkgLSB2U2NhbGUuZ2V0VmFsdWVGb3JQaXhlbChiYXNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoYmFzZSA9PT0gdlNjYWxlLmdldFBpeGVsRm9yVmFsdWUoYWN0dWFsQmFzZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGhhbGZHcmlkID0gc2lnbihzaXplKSAqIHZTY2FsZS5nZXRMaW5lV2lkdGhGb3JWYWx1ZShhY3R1YWxCYXNlKSAvIDI7XG4gICAgICAgICAgICBiYXNlICs9IGhhbGZHcmlkO1xuICAgICAgICAgICAgc2l6ZSAtPSBoYWxmR3JpZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2l6ZSxcbiAgICAgICAgICAgIGJhc2UsXG4gICAgICAgICAgICBoZWFkLFxuICAgICAgICAgICAgY2VudGVyOiBoZWFkICsgc2l6ZSAvIDJcbiAgICAgICAgfTtcbiAgICB9XG4gX2NhbGN1bGF0ZUJhckluZGV4UGl4ZWxzKGluZGV4LCBydWxlcikge1xuICAgICAgICBjb25zdCBzY2FsZSA9IHJ1bGVyLnNjYWxlO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBza2lwTnVsbCA9IG9wdGlvbnMuc2tpcE51bGw7XG4gICAgICAgIGNvbnN0IG1heEJhclRoaWNrbmVzcyA9IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMubWF4QmFyVGhpY2tuZXNzLCBJbmZpbml0eSk7XG4gICAgICAgIGxldCBjZW50ZXIsIHNpemU7XG4gICAgICAgIGlmIChydWxlci5ncm91cGVkKSB7XG4gICAgICAgICAgICBjb25zdCBzdGFja0NvdW50ID0gc2tpcE51bGwgPyB0aGlzLl9nZXRTdGFja0NvdW50KGluZGV4KSA6IHJ1bGVyLnN0YWNrQ291bnQ7XG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IG9wdGlvbnMuYmFyVGhpY2tuZXNzID09PSAnZmxleCcgPyBjb21wdXRlRmxleENhdGVnb3J5VHJhaXRzKGluZGV4LCBydWxlciwgb3B0aW9ucywgc3RhY2tDb3VudCkgOiBjb21wdXRlRml0Q2F0ZWdvcnlUcmFpdHMoaW5kZXgsIHJ1bGVyLCBvcHRpb25zLCBzdGFja0NvdW50KTtcbiAgICAgICAgICAgIGNvbnN0IHN0YWNrSW5kZXggPSB0aGlzLl9nZXRTdGFja0luZGV4KHRoaXMuaW5kZXgsIHRoaXMuX2NhY2hlZE1ldGEuc3RhY2ssIHNraXBOdWxsID8gaW5kZXggOiB1bmRlZmluZWQpO1xuICAgICAgICAgICAgY2VudGVyID0gcmFuZ2Uuc3RhcnQgKyByYW5nZS5jaHVuayAqIHN0YWNrSW5kZXggKyByYW5nZS5jaHVuayAvIDI7XG4gICAgICAgICAgICBzaXplID0gTWF0aC5taW4obWF4QmFyVGhpY2tuZXNzLCByYW5nZS5jaHVuayAqIHJhbmdlLnJhdGlvKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNlbnRlciA9IHNjYWxlLmdldFBpeGVsRm9yVmFsdWUodGhpcy5nZXRQYXJzZWQoaW5kZXgpW3NjYWxlLmF4aXNdLCBpbmRleCk7XG4gICAgICAgICAgICBzaXplID0gTWF0aC5taW4obWF4QmFyVGhpY2tuZXNzLCBydWxlci5taW4gKiBydWxlci5yYXRpbyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJhc2U6IGNlbnRlciAtIHNpemUgLyAyLFxuICAgICAgICAgICAgaGVhZDogY2VudGVyICsgc2l6ZSAvIDIsXG4gICAgICAgICAgICBjZW50ZXIsXG4gICAgICAgICAgICBzaXplXG4gICAgICAgIH07XG4gICAgfVxuICAgIGRyYXcoKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCB2U2NhbGUgPSBtZXRhLnZTY2FsZTtcbiAgICAgICAgY29uc3QgcmVjdHMgPSBtZXRhLmRhdGE7XG4gICAgICAgIGNvbnN0IGlsZW4gPSByZWN0cy5sZW5ndGg7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgZm9yKDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBpZiAodGhpcy5nZXRQYXJzZWQoaSlbdlNjYWxlLmF4aXNdICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVjdHNbaV0uZHJhdyh0aGlzLl9jdHgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5jbGFzcyBCdWJibGVDb250cm9sbGVyIGV4dGVuZHMgRGF0YXNldENvbnRyb2xsZXIge1xuICAgIHN0YXRpYyBpZCA9ICdidWJibGUnO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgZGF0YXNldEVsZW1lbnRUeXBlOiBmYWxzZSxcbiAgICAgICAgZGF0YUVsZW1lbnRUeXBlOiAncG9pbnQnLFxuICAgICAgICBhbmltYXRpb25zOiB7XG4gICAgICAgICAgICBudW1iZXJzOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgICAgICAgICAgcHJvcGVydGllczogW1xuICAgICAgICAgICAgICAgICAgICAneCcsXG4gICAgICAgICAgICAgICAgICAgICd5JyxcbiAgICAgICAgICAgICAgICAgICAgJ2JvcmRlcldpZHRoJyxcbiAgICAgICAgICAgICAgICAgICAgJ3JhZGl1cydcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuIHN0YXRpYyBvdmVycmlkZXMgPSB7XG4gICAgICAgIHNjYWxlczoge1xuICAgICAgICAgICAgeDoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5lYXInXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeToge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5lYXInXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGluaXRpYWxpemUoKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlT3B0aW9uU2hhcmluZyA9IHRydWU7XG4gICAgICAgIHN1cGVyLmluaXRpYWxpemUoKTtcbiAgICB9XG4gcGFyc2VQcmltaXRpdmVEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCBwYXJzZWQgPSBzdXBlci5wYXJzZVByaW1pdGl2ZURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHBhcnNlZC5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBwYXJzZWRbaV0uX2N1c3RvbSA9IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpICsgc3RhcnQpLnJhZGl1cztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgIH1cbiBwYXJzZUFycmF5RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gc3VwZXIucGFyc2VBcnJheURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHBhcnNlZC5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gZGF0YVtzdGFydCArIGldO1xuICAgICAgICAgICAgcGFyc2VkW2ldLl9jdXN0b20gPSB2YWx1ZU9yRGVmYXVsdChpdGVtWzJdLCB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSArIHN0YXJ0KS5yYWRpdXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgfVxuIHBhcnNlT2JqZWN0RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gc3VwZXIucGFyc2VPYmplY3REYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCk7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBwYXJzZWQubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IGRhdGFbc3RhcnQgKyBpXTtcbiAgICAgICAgICAgIHBhcnNlZFtpXS5fY3VzdG9tID0gdmFsdWVPckRlZmF1bHQoaXRlbSAmJiBpdGVtLnIgJiYgK2l0ZW0uciwgdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGkgKyBzdGFydCkucmFkaXVzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgIH1cbiBnZXRNYXhPdmVyZmxvdygpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuX2NhY2hlZE1ldGEuZGF0YTtcbiAgICAgICAgbGV0IG1heCA9IDA7XG4gICAgICAgIGZvcihsZXQgaSA9IGRhdGEubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpe1xuICAgICAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCBkYXRhW2ldLnNpemUodGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGkpKSAvIDIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXggPiAwICYmIG1heDtcbiAgICB9XG4gZ2V0TGFiZWxBbmRWYWx1ZShpbmRleCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgbGFiZWxzID0gdGhpcy5jaGFydC5kYXRhLmxhYmVscyB8fCBbXTtcbiAgICAgICAgY29uc3QgeyB4U2NhbGUgLCB5U2NhbGUgIH0gPSBtZXRhO1xuICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgICAgIGNvbnN0IHggPSB4U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWQueCk7XG4gICAgICAgIGNvbnN0IHkgPSB5U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWQueSk7XG4gICAgICAgIGNvbnN0IHIgPSBwYXJzZWQuX2N1c3RvbTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhYmVsOiBsYWJlbHNbaW5kZXhdIHx8ICcnLFxuICAgICAgICAgICAgdmFsdWU6ICcoJyArIHggKyAnLCAnICsgeSArIChyID8gJywgJyArIHIgOiAnJykgKyAnKSdcbiAgICAgICAgfTtcbiAgICB9XG4gICAgdXBkYXRlKG1vZGUpIHtcbiAgICAgICAgY29uc3QgcG9pbnRzID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhO1xuICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnRzKHBvaW50cywgMCwgcG9pbnRzLmxlbmd0aCwgbW9kZSk7XG4gICAgfVxuICAgIHVwZGF0ZUVsZW1lbnRzKHBvaW50cywgc3RhcnQsIGNvdW50LCBtb2RlKSB7XG4gICAgICAgIGNvbnN0IHJlc2V0ID0gbW9kZSA9PT0gJ3Jlc2V0JztcbiAgICAgICAgY29uc3QgeyBpU2NhbGUgLCB2U2NhbGUgIH0gPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCB7IHNoYXJlZE9wdGlvbnMgLCBpbmNsdWRlT3B0aW9ucyAgfSA9IHRoaXMuX2dldFNoYXJlZE9wdGlvbnMoc3RhcnQsIG1vZGUpO1xuICAgICAgICBjb25zdCBpQXhpcyA9IGlTY2FsZS5heGlzO1xuICAgICAgICBjb25zdCB2QXhpcyA9IHZTY2FsZS5heGlzO1xuICAgICAgICBmb3IobGV0IGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7IGkrKyl7XG4gICAgICAgICAgICBjb25zdCBwb2ludCA9IHBvaW50c1tpXTtcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZCA9ICFyZXNldCAmJiB0aGlzLmdldFBhcnNlZChpKTtcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGlQaXhlbCA9IHByb3BlcnRpZXNbaUF4aXNdID0gcmVzZXQgPyBpU2NhbGUuZ2V0UGl4ZWxGb3JEZWNpbWFsKDAuNSkgOiBpU2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShwYXJzZWRbaUF4aXNdKTtcbiAgICAgICAgICAgIGNvbnN0IHZQaXhlbCA9IHByb3BlcnRpZXNbdkF4aXNdID0gcmVzZXQgPyB2U2NhbGUuZ2V0QmFzZVBpeGVsKCkgOiB2U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShwYXJzZWRbdkF4aXNdKTtcbiAgICAgICAgICAgIHByb3BlcnRpZXMuc2tpcCA9IGlzTmFOKGlQaXhlbCkgfHwgaXNOYU4odlBpeGVsKTtcbiAgICAgICAgICAgIGlmIChpbmNsdWRlT3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMub3B0aW9ucyA9IHNoYXJlZE9wdGlvbnMgfHwgdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGksIHBvaW50LmFjdGl2ZSA/ICdhY3RpdmUnIDogbW9kZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXMub3B0aW9ucy5yYWRpdXMgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudXBkYXRlRWxlbWVudChwb2ludCwgaSwgcHJvcGVydGllcywgbW9kZSk7XG4gICAgICAgIH1cbiAgICB9XG4gcmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpbmRleCwgbW9kZSkge1xuICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgICAgIGxldCB2YWx1ZXMgPSBzdXBlci5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGluZGV4LCBtb2RlKTtcbiAgICAgICAgaWYgKHZhbHVlcy4kc2hhcmVkKSB7XG4gICAgICAgICAgICB2YWx1ZXMgPSBPYmplY3QuYXNzaWduKHt9LCB2YWx1ZXMsIHtcbiAgICAgICAgICAgICAgICAkc2hhcmVkOiBmYWxzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmFkaXVzID0gdmFsdWVzLnJhZGl1cztcbiAgICAgICAgaWYgKG1vZGUgIT09ICdhY3RpdmUnKSB7XG4gICAgICAgICAgICB2YWx1ZXMucmFkaXVzID0gMDtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZXMucmFkaXVzICs9IHZhbHVlT3JEZWZhdWx0KHBhcnNlZCAmJiBwYXJzZWQuX2N1c3RvbSwgcmFkaXVzKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldFJhdGlvQW5kT2Zmc2V0KHJvdGF0aW9uLCBjaXJjdW1mZXJlbmNlLCBjdXRvdXQpIHtcbiAgICBsZXQgcmF0aW9YID0gMTtcbiAgICBsZXQgcmF0aW9ZID0gMTtcbiAgICBsZXQgb2Zmc2V0WCA9IDA7XG4gICAgbGV0IG9mZnNldFkgPSAwO1xuICAgIGlmIChjaXJjdW1mZXJlbmNlIDwgVEFVKSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0QW5nbGUgPSByb3RhdGlvbjtcbiAgICAgICAgY29uc3QgZW5kQW5nbGUgPSBzdGFydEFuZ2xlICsgY2lyY3VtZmVyZW5jZTtcbiAgICAgICAgY29uc3Qgc3RhcnRYID0gTWF0aC5jb3Moc3RhcnRBbmdsZSk7XG4gICAgICAgIGNvbnN0IHN0YXJ0WSA9IE1hdGguc2luKHN0YXJ0QW5nbGUpO1xuICAgICAgICBjb25zdCBlbmRYID0gTWF0aC5jb3MoZW5kQW5nbGUpO1xuICAgICAgICBjb25zdCBlbmRZID0gTWF0aC5zaW4oZW5kQW5nbGUpO1xuICAgICAgICBjb25zdCBjYWxjTWF4ID0gKGFuZ2xlLCBhLCBiKT0+X2FuZ2xlQmV0d2VlbihhbmdsZSwgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIHRydWUpID8gMSA6IE1hdGgubWF4KGEsIGEgKiBjdXRvdXQsIGIsIGIgKiBjdXRvdXQpO1xuICAgICAgICBjb25zdCBjYWxjTWluID0gKGFuZ2xlLCBhLCBiKT0+X2FuZ2xlQmV0d2VlbihhbmdsZSwgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIHRydWUpID8gLTEgOiBNYXRoLm1pbihhLCBhICogY3V0b3V0LCBiLCBiICogY3V0b3V0KTtcbiAgICAgICAgY29uc3QgbWF4WCA9IGNhbGNNYXgoMCwgc3RhcnRYLCBlbmRYKTtcbiAgICAgICAgY29uc3QgbWF4WSA9IGNhbGNNYXgoSEFMRl9QSSwgc3RhcnRZLCBlbmRZKTtcbiAgICAgICAgY29uc3QgbWluWCA9IGNhbGNNaW4oUEksIHN0YXJ0WCwgZW5kWCk7XG4gICAgICAgIGNvbnN0IG1pblkgPSBjYWxjTWluKFBJICsgSEFMRl9QSSwgc3RhcnRZLCBlbmRZKTtcbiAgICAgICAgcmF0aW9YID0gKG1heFggLSBtaW5YKSAvIDI7XG4gICAgICAgIHJhdGlvWSA9IChtYXhZIC0gbWluWSkgLyAyO1xuICAgICAgICBvZmZzZXRYID0gLShtYXhYICsgbWluWCkgLyAyO1xuICAgICAgICBvZmZzZXRZID0gLShtYXhZICsgbWluWSkgLyAyO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICByYXRpb1gsXG4gICAgICAgIHJhdGlvWSxcbiAgICAgICAgb2Zmc2V0WCxcbiAgICAgICAgb2Zmc2V0WVxuICAgIH07XG59XG5jbGFzcyBEb3VnaG51dENvbnRyb2xsZXIgZXh0ZW5kcyBEYXRhc2V0Q29udHJvbGxlciB7XG4gICAgc3RhdGljIGlkID0gJ2RvdWdobnV0JztcbiBzdGF0aWMgZGVmYXVsdHMgPSB7XG4gICAgICAgIGRhdGFzZXRFbGVtZW50VHlwZTogZmFsc2UsXG4gICAgICAgIGRhdGFFbGVtZW50VHlwZTogJ2FyYycsXG4gICAgICAgIGFuaW1hdGlvbjoge1xuICAgICAgICAgICAgYW5pbWF0ZVJvdGF0ZTogdHJ1ZSxcbiAgICAgICAgICAgIGFuaW1hdGVTY2FsZTogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgYW5pbWF0aW9uczoge1xuICAgICAgICAgICAgbnVtYmVyczoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgJ2NpcmN1bWZlcmVuY2UnLFxuICAgICAgICAgICAgICAgICAgICAnZW5kQW5nbGUnLFxuICAgICAgICAgICAgICAgICAgICAnaW5uZXJSYWRpdXMnLFxuICAgICAgICAgICAgICAgICAgICAnb3V0ZXJSYWRpdXMnLFxuICAgICAgICAgICAgICAgICAgICAnc3RhcnRBbmdsZScsXG4gICAgICAgICAgICAgICAgICAgICd4JyxcbiAgICAgICAgICAgICAgICAgICAgJ3knLFxuICAgICAgICAgICAgICAgICAgICAnb2Zmc2V0JyxcbiAgICAgICAgICAgICAgICAgICAgJ2JvcmRlcldpZHRoJyxcbiAgICAgICAgICAgICAgICAgICAgJ3NwYWNpbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjdXRvdXQ6ICc1MCUnLFxuICAgICAgICByb3RhdGlvbjogMCxcbiAgICAgICAgY2lyY3VtZmVyZW5jZTogMzYwLFxuICAgICAgICByYWRpdXM6ICcxMDAlJyxcbiAgICAgICAgc3BhY2luZzogMCxcbiAgICAgICAgaW5kZXhBeGlzOiAncidcbiAgICB9O1xuICAgIHN0YXRpYyBkZXNjcmlwdG9ycyA9IHtcbiAgICAgICAgX3NjcmlwdGFibGU6IChuYW1lKT0+bmFtZSAhPT0gJ3NwYWNpbmcnLFxuICAgICAgICBfaW5kZXhhYmxlOiAobmFtZSk9Pm5hbWUgIT09ICdzcGFjaW5nJyAmJiAhbmFtZS5zdGFydHNXaXRoKCdib3JkZXJEYXNoJykgJiYgIW5hbWUuc3RhcnRzV2l0aCgnaG92ZXJCb3JkZXJEYXNoJylcbiAgICB9O1xuIHN0YXRpYyBvdmVycmlkZXMgPSB7XG4gICAgICAgIGFzcGVjdFJhdGlvOiAxLFxuICAgICAgICBwbHVnaW5zOiB7XG4gICAgICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVMYWJlbHMgKGNoYXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gY2hhcnQuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmxhYmVscy5sZW5ndGggJiYgZGF0YS5kYXRhc2V0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGxhYmVsczogeyBwb2ludFN0eWxlICwgY29sb3IgIH0gIH0gPSBjaGFydC5sZWdlbmQub3B0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5sYWJlbHMubWFwKChsYWJlbCwgaSk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHlsZSA9IG1ldGEuY29udHJvbGxlci5nZXRTdHlsZShpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGxhYmVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbFN0eWxlOiBzdHlsZS5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VTdHlsZTogc3R5bGUuYm9yZGVyQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250Q29sb3I6IGNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZVdpZHRoOiBzdHlsZS5ib3JkZXJXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50U3R5bGU6IHBvaW50U3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWRkZW46ICFjaGFydC5nZXREYXRhVmlzaWJpbGl0eShpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uQ2xpY2sgKGUsIGxlZ2VuZEl0ZW0sIGxlZ2VuZCkge1xuICAgICAgICAgICAgICAgICAgICBsZWdlbmQuY2hhcnQudG9nZ2xlRGF0YVZpc2liaWxpdHkobGVnZW5kSXRlbS5pbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIGxlZ2VuZC5jaGFydC51cGRhdGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKGNoYXJ0LCBkYXRhc2V0SW5kZXgpe1xuICAgICAgICBzdXBlcihjaGFydCwgZGF0YXNldEluZGV4KTtcbiAgICAgICAgdGhpcy5lbmFibGVPcHRpb25TaGFyaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5pbm5lclJhZGl1cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5vdXRlclJhZGl1cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5vZmZzZXRYID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm9mZnNldFkgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGxpbmtTY2FsZXMoKSB7fVxuIHBhcnNlKHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5nZXREYXRhc2V0KCkuZGF0YTtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGlmICh0aGlzLl9wYXJzaW5nID09PSBmYWxzZSkge1xuICAgICAgICAgICAgbWV0YS5fcGFyc2VkID0gZGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBnZXR0ZXIgPSAoaSk9PitkYXRhW2ldO1xuICAgICAgICAgICAgaWYgKGlzT2JqZWN0KGRhdGFbc3RhcnRdKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsga2V5ID0ndmFsdWUnICB9ID0gdGhpcy5fcGFyc2luZztcbiAgICAgICAgICAgICAgICBnZXR0ZXIgPSAoaSk9PityZXNvbHZlT2JqZWN0S2V5KGRhdGFbaV0sIGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgaSwgaWxlbjtcbiAgICAgICAgICAgIGZvcihpID0gc3RhcnQsIGlsZW4gPSBzdGFydCArIGNvdW50OyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgICAgICBtZXRhLl9wYXJzZWRbaV0gPSBnZXR0ZXIoaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gX2dldFJvdGF0aW9uKCkge1xuICAgICAgICByZXR1cm4gdG9SYWRpYW5zKHRoaXMub3B0aW9ucy5yb3RhdGlvbiAtIDkwKTtcbiAgICB9XG4gX2dldENpcmN1bWZlcmVuY2UoKSB7XG4gICAgICAgIHJldHVybiB0b1JhZGlhbnModGhpcy5vcHRpb25zLmNpcmN1bWZlcmVuY2UpO1xuICAgIH1cbiBfZ2V0Um90YXRpb25FeHRlbnRzKCkge1xuICAgICAgICBsZXQgbWluID0gVEFVO1xuICAgICAgICBsZXQgbWF4ID0gLVRBVTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0cy5sZW5ndGg7ICsraSl7XG4gICAgICAgICAgICBpZiAodGhpcy5jaGFydC5pc0RhdGFzZXRWaXNpYmxlKGkpICYmIHRoaXMuY2hhcnQuZ2V0RGF0YXNldE1ldGEoaSkudHlwZSA9PT0gdGhpcy5fdHlwZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSB0aGlzLmNoYXJ0LmdldERhdGFzZXRNZXRhKGkpLmNvbnRyb2xsZXI7XG4gICAgICAgICAgICAgICAgY29uc3Qgcm90YXRpb24gPSBjb250cm9sbGVyLl9nZXRSb3RhdGlvbigpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNpcmN1bWZlcmVuY2UgPSBjb250cm9sbGVyLl9nZXRDaXJjdW1mZXJlbmNlKCk7XG4gICAgICAgICAgICAgICAgbWluID0gTWF0aC5taW4obWluLCByb3RhdGlvbik7XG4gICAgICAgICAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCByb3RhdGlvbiArIGNpcmN1bWZlcmVuY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByb3RhdGlvbjogbWluLFxuICAgICAgICAgICAgY2lyY3VtZmVyZW5jZTogbWF4IC0gbWluXG4gICAgICAgIH07XG4gICAgfVxuIHVwZGF0ZShtb2RlKSB7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3QgeyBjaGFydEFyZWEgIH0gPSBjaGFydDtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGFyY3MgPSBtZXRhLmRhdGE7XG4gICAgICAgIGNvbnN0IHNwYWNpbmcgPSB0aGlzLmdldE1heEJvcmRlcldpZHRoKCkgKyB0aGlzLmdldE1heE9mZnNldChhcmNzKSArIHRoaXMub3B0aW9ucy5zcGFjaW5nO1xuICAgICAgICBjb25zdCBtYXhTaXplID0gTWF0aC5tYXgoKE1hdGgubWluKGNoYXJ0QXJlYS53aWR0aCwgY2hhcnRBcmVhLmhlaWdodCkgLSBzcGFjaW5nKSAvIDIsIDApO1xuICAgICAgICBjb25zdCBjdXRvdXQgPSBNYXRoLm1pbih0b1BlcmNlbnRhZ2UodGhpcy5vcHRpb25zLmN1dG91dCwgbWF4U2l6ZSksIDEpO1xuICAgICAgICBjb25zdCBjaGFydFdlaWdodCA9IHRoaXMuX2dldFJpbmdXZWlnaHQodGhpcy5pbmRleCk7XG4gICAgICAgIGNvbnN0IHsgY2lyY3VtZmVyZW5jZSAsIHJvdGF0aW9uICB9ID0gdGhpcy5fZ2V0Um90YXRpb25FeHRlbnRzKCk7XG4gICAgICAgIGNvbnN0IHsgcmF0aW9YICwgcmF0aW9ZICwgb2Zmc2V0WCAsIG9mZnNldFkgIH0gPSBnZXRSYXRpb0FuZE9mZnNldChyb3RhdGlvbiwgY2lyY3VtZmVyZW5jZSwgY3V0b3V0KTtcbiAgICAgICAgY29uc3QgbWF4V2lkdGggPSAoY2hhcnRBcmVhLndpZHRoIC0gc3BhY2luZykgLyByYXRpb1g7XG4gICAgICAgIGNvbnN0IG1heEhlaWdodCA9IChjaGFydEFyZWEuaGVpZ2h0IC0gc3BhY2luZykgLyByYXRpb1k7XG4gICAgICAgIGNvbnN0IG1heFJhZGl1cyA9IE1hdGgubWF4KE1hdGgubWluKG1heFdpZHRoLCBtYXhIZWlnaHQpIC8gMiwgMCk7XG4gICAgICAgIGNvbnN0IG91dGVyUmFkaXVzID0gdG9EaW1lbnNpb24odGhpcy5vcHRpb25zLnJhZGl1cywgbWF4UmFkaXVzKTtcbiAgICAgICAgY29uc3QgaW5uZXJSYWRpdXMgPSBNYXRoLm1heChvdXRlclJhZGl1cyAqIGN1dG91dCwgMCk7XG4gICAgICAgIGNvbnN0IHJhZGl1c0xlbmd0aCA9IChvdXRlclJhZGl1cyAtIGlubmVyUmFkaXVzKSAvIHRoaXMuX2dldFZpc2libGVEYXRhc2V0V2VpZ2h0VG90YWwoKTtcbiAgICAgICAgdGhpcy5vZmZzZXRYID0gb2Zmc2V0WCAqIG91dGVyUmFkaXVzO1xuICAgICAgICB0aGlzLm9mZnNldFkgPSBvZmZzZXRZICogb3V0ZXJSYWRpdXM7XG4gICAgICAgIG1ldGEudG90YWwgPSB0aGlzLmNhbGN1bGF0ZVRvdGFsKCk7XG4gICAgICAgIHRoaXMub3V0ZXJSYWRpdXMgPSBvdXRlclJhZGl1cyAtIHJhZGl1c0xlbmd0aCAqIHRoaXMuX2dldFJpbmdXZWlnaHRPZmZzZXQodGhpcy5pbmRleCk7XG4gICAgICAgIHRoaXMuaW5uZXJSYWRpdXMgPSBNYXRoLm1heCh0aGlzLm91dGVyUmFkaXVzIC0gcmFkaXVzTGVuZ3RoICogY2hhcnRXZWlnaHQsIDApO1xuICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnRzKGFyY3MsIDAsIGFyY3MubGVuZ3RoLCBtb2RlKTtcbiAgICB9XG4gX2NpcmN1bWZlcmVuY2UoaSwgcmVzZXQpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGNpcmN1bWZlcmVuY2UgPSB0aGlzLl9nZXRDaXJjdW1mZXJlbmNlKCk7XG4gICAgICAgIGlmIChyZXNldCAmJiBvcHRzLmFuaW1hdGlvbi5hbmltYXRlUm90YXRlIHx8ICF0aGlzLmNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGkpIHx8IG1ldGEuX3BhcnNlZFtpXSA9PT0gbnVsbCB8fCBtZXRhLmRhdGFbaV0uaGlkZGVuKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5jYWxjdWxhdGVDaXJjdW1mZXJlbmNlKG1ldGEuX3BhcnNlZFtpXSAqIGNpcmN1bWZlcmVuY2UgLyBUQVUpO1xuICAgIH1cbiAgICB1cGRhdGVFbGVtZW50cyhhcmNzLCBzdGFydCwgY291bnQsIG1vZGUpIHtcbiAgICAgICAgY29uc3QgcmVzZXQgPSBtb2RlID09PSAncmVzZXQnO1xuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGNvbnN0IGNoYXJ0QXJlYSA9IGNoYXJ0LmNoYXJ0QXJlYTtcbiAgICAgICAgY29uc3Qgb3B0cyA9IGNoYXJ0Lm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbk9wdHMgPSBvcHRzLmFuaW1hdGlvbjtcbiAgICAgICAgY29uc3QgY2VudGVyWCA9IChjaGFydEFyZWEubGVmdCArIGNoYXJ0QXJlYS5yaWdodCkgLyAyO1xuICAgICAgICBjb25zdCBjZW50ZXJZID0gKGNoYXJ0QXJlYS50b3AgKyBjaGFydEFyZWEuYm90dG9tKSAvIDI7XG4gICAgICAgIGNvbnN0IGFuaW1hdGVTY2FsZSA9IHJlc2V0ICYmIGFuaW1hdGlvbk9wdHMuYW5pbWF0ZVNjYWxlO1xuICAgICAgICBjb25zdCBpbm5lclJhZGl1cyA9IGFuaW1hdGVTY2FsZSA/IDAgOiB0aGlzLmlubmVyUmFkaXVzO1xuICAgICAgICBjb25zdCBvdXRlclJhZGl1cyA9IGFuaW1hdGVTY2FsZSA/IDAgOiB0aGlzLm91dGVyUmFkaXVzO1xuICAgICAgICBjb25zdCB7IHNoYXJlZE9wdGlvbnMgLCBpbmNsdWRlT3B0aW9ucyAgfSA9IHRoaXMuX2dldFNoYXJlZE9wdGlvbnMoc3RhcnQsIG1vZGUpO1xuICAgICAgICBsZXQgc3RhcnRBbmdsZSA9IHRoaXMuX2dldFJvdGF0aW9uKCk7XG4gICAgICAgIGxldCBpO1xuICAgICAgICBmb3IoaSA9IDA7IGkgPCBzdGFydDsgKytpKXtcbiAgICAgICAgICAgIHN0YXJ0QW5nbGUgKz0gdGhpcy5fY2lyY3VtZmVyZW5jZShpLCByZXNldCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7ICsraSl7XG4gICAgICAgICAgICBjb25zdCBjaXJjdW1mZXJlbmNlID0gdGhpcy5fY2lyY3VtZmVyZW5jZShpLCByZXNldCk7XG4gICAgICAgICAgICBjb25zdCBhcmMgPSBhcmNzW2ldO1xuICAgICAgICAgICAgY29uc3QgcHJvcGVydGllcyA9IHtcbiAgICAgICAgICAgICAgICB4OiBjZW50ZXJYICsgdGhpcy5vZmZzZXRYLFxuICAgICAgICAgICAgICAgIHk6IGNlbnRlclkgKyB0aGlzLm9mZnNldFksXG4gICAgICAgICAgICAgICAgc3RhcnRBbmdsZSxcbiAgICAgICAgICAgICAgICBlbmRBbmdsZTogc3RhcnRBbmdsZSArIGNpcmN1bWZlcmVuY2UsXG4gICAgICAgICAgICAgICAgY2lyY3VtZmVyZW5jZSxcbiAgICAgICAgICAgICAgICBvdXRlclJhZGl1cyxcbiAgICAgICAgICAgICAgICBpbm5lclJhZGl1c1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChpbmNsdWRlT3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMub3B0aW9ucyA9IHNoYXJlZE9wdGlvbnMgfHwgdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGksIGFyYy5hY3RpdmUgPyAnYWN0aXZlJyA6IG1vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RhcnRBbmdsZSArPSBjaXJjdW1mZXJlbmNlO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50KGFyYywgaSwgcHJvcGVydGllcywgbW9kZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2FsY3VsYXRlVG90YWwoKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBtZXRhRGF0YSA9IG1ldGEuZGF0YTtcbiAgICAgICAgbGV0IHRvdGFsID0gMDtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGZvcihpID0gMDsgaSA8IG1ldGFEYXRhLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gbWV0YS5fcGFyc2VkW2ldO1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsICYmICFpc05hTih2YWx1ZSkgJiYgdGhpcy5jaGFydC5nZXREYXRhVmlzaWJpbGl0eShpKSAmJiAhbWV0YURhdGFbaV0uaGlkZGVuKSB7XG4gICAgICAgICAgICAgICAgdG90YWwgKz0gTWF0aC5hYnModmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbDtcbiAgICB9XG4gICAgY2FsY3VsYXRlQ2lyY3VtZmVyZW5jZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCB0b3RhbCA9IHRoaXMuX2NhY2hlZE1ldGEudG90YWw7XG4gICAgICAgIGlmICh0b3RhbCA+IDAgJiYgIWlzTmFOKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIFRBVSAqIChNYXRoLmFicyh2YWx1ZSkgLyB0b3RhbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGdldExhYmVsQW5kVmFsdWUoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3QgbGFiZWxzID0gY2hhcnQuZGF0YS5sYWJlbHMgfHwgW107XG4gICAgICAgIGNvbnN0IHZhbHVlID0gZm9ybWF0TnVtYmVyKG1ldGEuX3BhcnNlZFtpbmRleF0sIGNoYXJ0Lm9wdGlvbnMubG9jYWxlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhYmVsOiBsYWJlbHNbaW5kZXhdIHx8ICcnLFxuICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZ2V0TWF4Qm9yZGVyV2lkdGgoYXJjcykge1xuICAgICAgICBsZXQgbWF4ID0gMDtcbiAgICAgICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgICAgICBsZXQgaSwgaWxlbiwgbWV0YSwgY29udHJvbGxlciwgb3B0aW9ucztcbiAgICAgICAgaWYgKCFhcmNzKSB7XG4gICAgICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBjaGFydC5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICAgICAgaWYgKGNoYXJ0LmlzRGF0YXNldFZpc2libGUoaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGkpO1xuICAgICAgICAgICAgICAgICAgICBhcmNzID0gbWV0YS5kYXRhO1xuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyID0gbWV0YS5jb250cm9sbGVyO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFhcmNzKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBhcmNzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBvcHRpb25zID0gY29udHJvbGxlci5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGkpO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYm9yZGVyQWxpZ24gIT09ICdpbm5lcicpIHtcbiAgICAgICAgICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIG9wdGlvbnMuYm9yZGVyV2lkdGggfHwgMCwgb3B0aW9ucy5ob3ZlckJvcmRlcldpZHRoIHx8IDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXg7XG4gICAgfVxuICAgIGdldE1heE9mZnNldChhcmNzKSB7XG4gICAgICAgIGxldCBtYXggPSAwO1xuICAgICAgICBmb3IobGV0IGkgPSAwLCBpbGVuID0gYXJjcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpKTtcbiAgICAgICAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgb3B0aW9ucy5vZmZzZXQgfHwgMCwgb3B0aW9ucy5ob3Zlck9mZnNldCB8fCAwKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWF4O1xuICAgIH1cbiBfZ2V0UmluZ1dlaWdodE9mZnNldChkYXRhc2V0SW5kZXgpIHtcbiAgICAgICAgbGV0IHJpbmdXZWlnaHRPZmZzZXQgPSAwO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgZGF0YXNldEluZGV4OyArK2kpe1xuICAgICAgICAgICAgaWYgKHRoaXMuY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpKSkge1xuICAgICAgICAgICAgICAgIHJpbmdXZWlnaHRPZmZzZXQgKz0gdGhpcy5fZ2V0UmluZ1dlaWdodChpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmluZ1dlaWdodE9mZnNldDtcbiAgICB9XG4gX2dldFJpbmdXZWlnaHQoZGF0YXNldEluZGV4KSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1heCh2YWx1ZU9yRGVmYXVsdCh0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XS53ZWlnaHQsIDEpLCAwKTtcbiAgICB9XG4gX2dldFZpc2libGVEYXRhc2V0V2VpZ2h0VG90YWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRSaW5nV2VpZ2h0T2Zmc2V0KHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0cy5sZW5ndGgpIHx8IDE7XG4gICAgfVxufVxuXG5jbGFzcyBMaW5lQ29udHJvbGxlciBleHRlbmRzIERhdGFzZXRDb250cm9sbGVyIHtcbiAgICBzdGF0aWMgaWQgPSAnbGluZSc7XG4gc3RhdGljIGRlZmF1bHRzID0ge1xuICAgICAgICBkYXRhc2V0RWxlbWVudFR5cGU6ICdsaW5lJyxcbiAgICAgICAgZGF0YUVsZW1lbnRUeXBlOiAncG9pbnQnLFxuICAgICAgICBzaG93TGluZTogdHJ1ZSxcbiAgICAgICAgc3BhbkdhcHM6IGZhbHNlXG4gICAgfTtcbiBzdGF0aWMgb3ZlcnJpZGVzID0ge1xuICAgICAgICBzY2FsZXM6IHtcbiAgICAgICAgICAgIF9pbmRleF86IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnY2F0ZWdvcnknXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3ZhbHVlXzoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5lYXInXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGluaXRpYWxpemUoKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlT3B0aW9uU2hhcmluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuc3VwcG9ydHNEZWNpbWF0aW9uID0gdHJ1ZTtcbiAgICAgICAgc3VwZXIuaW5pdGlhbGl6ZSgpO1xuICAgIH1cbiAgICB1cGRhdGUobW9kZSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgeyBkYXRhc2V0OiBsaW5lICwgZGF0YTogcG9pbnRzID0gW10gLCBfZGF0YXNldCAgfSA9IG1ldGE7XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbnNEaXNhYmxlZCA9IHRoaXMuY2hhcnQuX2FuaW1hdGlvbnNEaXNhYmxlZDtcbiAgICAgICAgbGV0IHsgc3RhcnQgLCBjb3VudCAgfSA9IF9nZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzKG1ldGEsIHBvaW50cywgYW5pbWF0aW9uc0Rpc2FibGVkKTtcbiAgICAgICAgdGhpcy5fZHJhd1N0YXJ0ID0gc3RhcnQ7XG4gICAgICAgIHRoaXMuX2RyYXdDb3VudCA9IGNvdW50O1xuICAgICAgICBpZiAoX3NjYWxlUmFuZ2VzQ2hhbmdlZChtZXRhKSkge1xuICAgICAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICAgICAgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGxpbmUuX2NoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgbGluZS5fZGF0YXNldEluZGV4ID0gdGhpcy5pbmRleDtcbiAgICAgICAgbGluZS5fZGVjaW1hdGVkID0gISFfZGF0YXNldC5fZGVjaW1hdGVkO1xuICAgICAgICBsaW5lLnBvaW50cyA9IHBvaW50cztcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMucmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9ucyhtb2RlKTtcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuc2hvd0xpbmUpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuYm9yZGVyV2lkdGggPSAwO1xuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMuc2VnbWVudCA9IHRoaXMub3B0aW9ucy5zZWdtZW50O1xuICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQobGluZSwgdW5kZWZpbmVkLCB7XG4gICAgICAgICAgICBhbmltYXRlZDogIWFuaW1hdGlvbnNEaXNhYmxlZCxcbiAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgfSwgbW9kZSk7XG4gICAgICAgIHRoaXMudXBkYXRlRWxlbWVudHMocG9pbnRzLCBzdGFydCwgY291bnQsIG1vZGUpO1xuICAgIH1cbiAgICB1cGRhdGVFbGVtZW50cyhwb2ludHMsIHN0YXJ0LCBjb3VudCwgbW9kZSkge1xuICAgICAgICBjb25zdCByZXNldCA9IG1vZGUgPT09ICdyZXNldCc7XG4gICAgICAgIGNvbnN0IHsgaVNjYWxlICwgdlNjYWxlICwgX3N0YWNrZWQgLCBfZGF0YXNldCAgfSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IHsgc2hhcmVkT3B0aW9ucyAsIGluY2x1ZGVPcHRpb25zICB9ID0gdGhpcy5fZ2V0U2hhcmVkT3B0aW9ucyhzdGFydCwgbW9kZSk7XG4gICAgICAgIGNvbnN0IGlBeGlzID0gaVNjYWxlLmF4aXM7XG4gICAgICAgIGNvbnN0IHZBeGlzID0gdlNjYWxlLmF4aXM7XG4gICAgICAgIGNvbnN0IHsgc3BhbkdhcHMgLCBzZWdtZW50ICB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBtYXhHYXBMZW5ndGggPSBpc051bWJlcihzcGFuR2FwcykgPyBzcGFuR2FwcyA6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgICAgY29uc3QgZGlyZWN0VXBkYXRlID0gdGhpcy5jaGFydC5fYW5pbWF0aW9uc0Rpc2FibGVkIHx8IHJlc2V0IHx8IG1vZGUgPT09ICdub25lJztcbiAgICAgICAgY29uc3QgZW5kID0gc3RhcnQgKyBjb3VudDtcbiAgICAgICAgY29uc3QgcG9pbnRzQ291bnQgPSBwb2ludHMubGVuZ3RoO1xuICAgICAgICBsZXQgcHJldlBhcnNlZCA9IHN0YXJ0ID4gMCAmJiB0aGlzLmdldFBhcnNlZChzdGFydCAtIDEpO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgcG9pbnRzQ291bnQ7ICsraSl7XG4gICAgICAgICAgICBjb25zdCBwb2ludCA9IHBvaW50c1tpXTtcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSBkaXJlY3RVcGRhdGUgPyBwb2ludCA6IHt9O1xuICAgICAgICAgICAgaWYgKGkgPCBzdGFydCB8fCBpID49IGVuZCkge1xuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMuc2tpcCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpKTtcbiAgICAgICAgICAgIGNvbnN0IG51bGxEYXRhID0gaXNOdWxsT3JVbmRlZihwYXJzZWRbdkF4aXNdKTtcbiAgICAgICAgICAgIGNvbnN0IGlQaXhlbCA9IHByb3BlcnRpZXNbaUF4aXNdID0gaVNjYWxlLmdldFBpeGVsRm9yVmFsdWUocGFyc2VkW2lBeGlzXSwgaSk7XG4gICAgICAgICAgICBjb25zdCB2UGl4ZWwgPSBwcm9wZXJ0aWVzW3ZBeGlzXSA9IHJlc2V0IHx8IG51bGxEYXRhID8gdlNjYWxlLmdldEJhc2VQaXhlbCgpIDogdlNjYWxlLmdldFBpeGVsRm9yVmFsdWUoX3N0YWNrZWQgPyB0aGlzLmFwcGx5U3RhY2sodlNjYWxlLCBwYXJzZWQsIF9zdGFja2VkKSA6IHBhcnNlZFt2QXhpc10sIGkpO1xuICAgICAgICAgICAgcHJvcGVydGllcy5za2lwID0gaXNOYU4oaVBpeGVsKSB8fCBpc05hTih2UGl4ZWwpIHx8IG51bGxEYXRhO1xuICAgICAgICAgICAgcHJvcGVydGllcy5zdG9wID0gaSA+IDAgJiYgTWF0aC5hYnMocGFyc2VkW2lBeGlzXSAtIHByZXZQYXJzZWRbaUF4aXNdKSA+IG1heEdhcExlbmd0aDtcbiAgICAgICAgICAgIGlmIChzZWdtZW50KSB7XG4gICAgICAgICAgICAgICAgcHJvcGVydGllcy5wYXJzZWQgPSBwYXJzZWQ7XG4gICAgICAgICAgICAgICAgcHJvcGVydGllcy5yYXcgPSBfZGF0YXNldC5kYXRhW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGluY2x1ZGVPcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgcHJvcGVydGllcy5vcHRpb25zID0gc2hhcmVkT3B0aW9ucyB8fCB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSwgcG9pbnQuYWN0aXZlID8gJ2FjdGl2ZScgOiBtb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghZGlyZWN0VXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50KHBvaW50LCBpLCBwcm9wZXJ0aWVzLCBtb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByZXZQYXJzZWQgPSBwYXJzZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gZ2V0TWF4T3ZlcmZsb3coKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBkYXRhc2V0ID0gbWV0YS5kYXRhc2V0O1xuICAgICAgICBjb25zdCBib3JkZXIgPSBkYXRhc2V0Lm9wdGlvbnMgJiYgZGF0YXNldC5vcHRpb25zLmJvcmRlcldpZHRoIHx8IDA7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBtZXRhLmRhdGEgfHwgW107XG4gICAgICAgIGlmICghZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBib3JkZXI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZmlyc3RQb2ludCA9IGRhdGFbMF0uc2l6ZSh0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoMCkpO1xuICAgICAgICBjb25zdCBsYXN0UG9pbnQgPSBkYXRhW2RhdGEubGVuZ3RoIC0gMV0uc2l6ZSh0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoZGF0YS5sZW5ndGggLSAxKSk7XG4gICAgICAgIHJldHVybiBNYXRoLm1heChib3JkZXIsIGZpcnN0UG9pbnQsIGxhc3RQb2ludCkgLyAyO1xuICAgIH1cbiAgICBkcmF3KCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgbWV0YS5kYXRhc2V0LnVwZGF0ZUNvbnRyb2xQb2ludHModGhpcy5jaGFydC5jaGFydEFyZWEsIG1ldGEuaVNjYWxlLmF4aXMpO1xuICAgICAgICBzdXBlci5kcmF3KCk7XG4gICAgfVxufVxuXG5jbGFzcyBQb2xhckFyZWFDb250cm9sbGVyIGV4dGVuZHMgRGF0YXNldENvbnRyb2xsZXIge1xuICAgIHN0YXRpYyBpZCA9ICdwb2xhckFyZWEnO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgZGF0YUVsZW1lbnRUeXBlOiAnYXJjJyxcbiAgICAgICAgYW5pbWF0aW9uOiB7XG4gICAgICAgICAgICBhbmltYXRlUm90YXRlOiB0cnVlLFxuICAgICAgICAgICAgYW5pbWF0ZVNjYWxlOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgICAgICAgIG51bWJlcnM6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiBbXG4gICAgICAgICAgICAgICAgICAgICd4JyxcbiAgICAgICAgICAgICAgICAgICAgJ3knLFxuICAgICAgICAgICAgICAgICAgICAnc3RhcnRBbmdsZScsXG4gICAgICAgICAgICAgICAgICAgICdlbmRBbmdsZScsXG4gICAgICAgICAgICAgICAgICAgICdpbm5lclJhZGl1cycsXG4gICAgICAgICAgICAgICAgICAgICdvdXRlclJhZGl1cydcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGluZGV4QXhpczogJ3InLFxuICAgICAgICBzdGFydEFuZ2xlOiAwXG4gICAgfTtcbiBzdGF0aWMgb3ZlcnJpZGVzID0ge1xuICAgICAgICBhc3BlY3RSYXRpbzogMSxcbiAgICAgICAgcGx1Z2luczoge1xuICAgICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlTGFiZWxzIChjaGFydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IGNoYXJ0LmRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5sYWJlbHMubGVuZ3RoICYmIGRhdGEuZGF0YXNldHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBsYWJlbHM6IHsgcG9pbnRTdHlsZSAsIGNvbG9yICB9ICB9ID0gY2hhcnQubGVnZW5kLm9wdGlvbnM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEubGFiZWxzLm1hcCgobGFiZWwsIGkpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YSgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSBtZXRhLmNvbnRyb2xsZXIuZ2V0U3R5bGUoaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBsYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxTdHlsZTogc3R5bGUuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlU3R5bGU6IHN0eWxlLmJvcmRlckNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udENvbG9yOiBjb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVXaWR0aDogc3R5bGUuYm9yZGVyV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludFN0eWxlOiBwb2ludFN0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlkZGVuOiAhY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogaVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvbkNsaWNrIChlLCBsZWdlbmRJdGVtLCBsZWdlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGVnZW5kLmNoYXJ0LnRvZ2dsZURhdGFWaXNpYmlsaXR5KGxlZ2VuZEl0ZW0uaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBsZWdlbmQuY2hhcnQudXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzY2FsZXM6IHtcbiAgICAgICAgICAgIHI6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAncmFkaWFsTGluZWFyJyxcbiAgICAgICAgICAgICAgICBhbmdsZUxpbmVzOiB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBiZWdpbkF0WmVybzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBncmlkOiB7XG4gICAgICAgICAgICAgICAgICAgIGNpcmN1bGFyOiB0cnVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwb2ludExhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3RhcnRBbmdsZTogMFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdHJ1Y3RvcihjaGFydCwgZGF0YXNldEluZGV4KXtcbiAgICAgICAgc3VwZXIoY2hhcnQsIGRhdGFzZXRJbmRleCk7XG4gICAgICAgIHRoaXMuaW5uZXJSYWRpdXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMub3V0ZXJSYWRpdXMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGdldExhYmVsQW5kVmFsdWUoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3QgbGFiZWxzID0gY2hhcnQuZGF0YS5sYWJlbHMgfHwgW107XG4gICAgICAgIGNvbnN0IHZhbHVlID0gZm9ybWF0TnVtYmVyKG1ldGEuX3BhcnNlZFtpbmRleF0uciwgY2hhcnQub3B0aW9ucy5sb2NhbGUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGFiZWw6IGxhYmVsc1tpbmRleF0gfHwgJycsXG4gICAgICAgICAgICB2YWx1ZVxuICAgICAgICB9O1xuICAgIH1cbiAgICBwYXJzZU9iamVjdERhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIHJldHVybiBfcGFyc2VPYmplY3REYXRhUmFkaWFsU2NhbGUuYmluZCh0aGlzKShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgIH1cbiAgICB1cGRhdGUobW9kZSkge1xuICAgICAgICBjb25zdCBhcmNzID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhO1xuICAgICAgICB0aGlzLl91cGRhdGVSYWRpdXMoKTtcbiAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50cyhhcmNzLCAwLCBhcmNzLmxlbmd0aCwgbW9kZSk7XG4gICAgfVxuIGdldE1pbk1heCgpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IHJhbmdlID0ge1xuICAgICAgICAgICAgbWluOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksXG4gICAgICAgICAgICBtYXg6IE51bWJlci5ORUdBVElWRV9JTkZJTklUWVxuICAgICAgICB9O1xuICAgICAgICBtZXRhLmRhdGEuZm9yRWFjaCgoZWxlbWVudCwgaW5kZXgpPT57XG4gICAgICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCkucjtcbiAgICAgICAgICAgIGlmICghaXNOYU4ocGFyc2VkKSAmJiB0aGlzLmNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGluZGV4KSkge1xuICAgICAgICAgICAgICAgIGlmIChwYXJzZWQgPCByYW5nZS5taW4pIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UubWluID0gcGFyc2VkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocGFyc2VkID4gcmFuZ2UubWF4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlLm1heCA9IHBhcnNlZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmFuZ2U7XG4gICAgfVxuIF91cGRhdGVSYWRpdXMoKSB7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3QgY2hhcnRBcmVhID0gY2hhcnQuY2hhcnRBcmVhO1xuICAgICAgICBjb25zdCBvcHRzID0gY2hhcnQub3B0aW9ucztcbiAgICAgICAgY29uc3QgbWluU2l6ZSA9IE1hdGgubWluKGNoYXJ0QXJlYS5yaWdodCAtIGNoYXJ0QXJlYS5sZWZ0LCBjaGFydEFyZWEuYm90dG9tIC0gY2hhcnRBcmVhLnRvcCk7XG4gICAgICAgIGNvbnN0IG91dGVyUmFkaXVzID0gTWF0aC5tYXgobWluU2l6ZSAvIDIsIDApO1xuICAgICAgICBjb25zdCBpbm5lclJhZGl1cyA9IE1hdGgubWF4KG9wdHMuY3V0b3V0UGVyY2VudGFnZSA/IG91dGVyUmFkaXVzIC8gMTAwICogb3B0cy5jdXRvdXRQZXJjZW50YWdlIDogMSwgMCk7XG4gICAgICAgIGNvbnN0IHJhZGl1c0xlbmd0aCA9IChvdXRlclJhZGl1cyAtIGlubmVyUmFkaXVzKSAvIGNoYXJ0LmdldFZpc2libGVEYXRhc2V0Q291bnQoKTtcbiAgICAgICAgdGhpcy5vdXRlclJhZGl1cyA9IG91dGVyUmFkaXVzIC0gcmFkaXVzTGVuZ3RoICogdGhpcy5pbmRleDtcbiAgICAgICAgdGhpcy5pbm5lclJhZGl1cyA9IHRoaXMub3V0ZXJSYWRpdXMgLSByYWRpdXNMZW5ndGg7XG4gICAgfVxuICAgIHVwZGF0ZUVsZW1lbnRzKGFyY3MsIHN0YXJ0LCBjb3VudCwgbW9kZSkge1xuICAgICAgICBjb25zdCByZXNldCA9IG1vZGUgPT09ICdyZXNldCc7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3Qgb3B0cyA9IGNoYXJ0Lm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbk9wdHMgPSBvcHRzLmFuaW1hdGlvbjtcbiAgICAgICAgY29uc3Qgc2NhbGUgPSB0aGlzLl9jYWNoZWRNZXRhLnJTY2FsZTtcbiAgICAgICAgY29uc3QgY2VudGVyWCA9IHNjYWxlLnhDZW50ZXI7XG4gICAgICAgIGNvbnN0IGNlbnRlclkgPSBzY2FsZS55Q2VudGVyO1xuICAgICAgICBjb25zdCBkYXRhc2V0U3RhcnRBbmdsZSA9IHNjYWxlLmdldEluZGV4QW5nbGUoMCkgLSAwLjUgKiBQSTtcbiAgICAgICAgbGV0IGFuZ2xlID0gZGF0YXNldFN0YXJ0QW5nbGU7XG4gICAgICAgIGxldCBpO1xuICAgICAgICBjb25zdCBkZWZhdWx0QW5nbGUgPSAzNjAgLyB0aGlzLmNvdW50VmlzaWJsZUVsZW1lbnRzKCk7XG4gICAgICAgIGZvcihpID0gMDsgaSA8IHN0YXJ0OyArK2kpe1xuICAgICAgICAgICAgYW5nbGUgKz0gdGhpcy5fY29tcHV0ZUFuZ2xlKGksIG1vZGUsIGRlZmF1bHRBbmdsZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7IGkrKyl7XG4gICAgICAgICAgICBjb25zdCBhcmMgPSBhcmNzW2ldO1xuICAgICAgICAgICAgbGV0IHN0YXJ0QW5nbGUgPSBhbmdsZTtcbiAgICAgICAgICAgIGxldCBlbmRBbmdsZSA9IGFuZ2xlICsgdGhpcy5fY29tcHV0ZUFuZ2xlKGksIG1vZGUsIGRlZmF1bHRBbmdsZSk7XG4gICAgICAgICAgICBsZXQgb3V0ZXJSYWRpdXMgPSBjaGFydC5nZXREYXRhVmlzaWJpbGl0eShpKSA/IHNjYWxlLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHRoaXMuZ2V0UGFyc2VkKGkpLnIpIDogMDtcbiAgICAgICAgICAgIGFuZ2xlID0gZW5kQW5nbGU7XG4gICAgICAgICAgICBpZiAocmVzZXQpIHtcbiAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uT3B0cy5hbmltYXRlU2NhbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0ZXJSYWRpdXMgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uT3B0cy5hbmltYXRlUm90YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0QW5nbGUgPSBlbmRBbmdsZSA9IGRhdGFzZXRTdGFydEFuZ2xlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSB7XG4gICAgICAgICAgICAgICAgeDogY2VudGVyWCxcbiAgICAgICAgICAgICAgICB5OiBjZW50ZXJZLFxuICAgICAgICAgICAgICAgIGlubmVyUmFkaXVzOiAwLFxuICAgICAgICAgICAgICAgIG91dGVyUmFkaXVzLFxuICAgICAgICAgICAgICAgIHN0YXJ0QW5nbGUsXG4gICAgICAgICAgICAgICAgZW5kQW5nbGUsXG4gICAgICAgICAgICAgICAgb3B0aW9uczogdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGksIGFyYy5hY3RpdmUgPyAnYWN0aXZlJyA6IG1vZGUpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50KGFyYywgaSwgcHJvcGVydGllcywgbW9kZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY291bnRWaXNpYmxlRWxlbWVudHMoKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICBtZXRhLmRhdGEuZm9yRWFjaCgoZWxlbWVudCwgaW5kZXgpPT57XG4gICAgICAgICAgICBpZiAoIWlzTmFOKHRoaXMuZ2V0UGFyc2VkKGluZGV4KS5yKSAmJiB0aGlzLmNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGluZGV4KSkge1xuICAgICAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY291bnQ7XG4gICAgfVxuIF9jb21wdXRlQW5nbGUoaW5kZXgsIG1vZGUsIGRlZmF1bHRBbmdsZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFydC5nZXREYXRhVmlzaWJpbGl0eShpbmRleCkgPyB0b1JhZGlhbnModGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGluZGV4LCBtb2RlKS5hbmdsZSB8fCBkZWZhdWx0QW5nbGUpIDogMDtcbiAgICB9XG59XG5cbmNsYXNzIFBpZUNvbnRyb2xsZXIgZXh0ZW5kcyBEb3VnaG51dENvbnRyb2xsZXIge1xuICAgIHN0YXRpYyBpZCA9ICdwaWUnO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgY3V0b3V0OiAwLFxuICAgICAgICByb3RhdGlvbjogMCxcbiAgICAgICAgY2lyY3VtZmVyZW5jZTogMzYwLFxuICAgICAgICByYWRpdXM6ICcxMDAlJ1xuICAgIH07XG59XG5cbmNsYXNzIFJhZGFyQ29udHJvbGxlciBleHRlbmRzIERhdGFzZXRDb250cm9sbGVyIHtcbiAgICBzdGF0aWMgaWQgPSAncmFkYXInO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgZGF0YXNldEVsZW1lbnRUeXBlOiAnbGluZScsXG4gICAgICAgIGRhdGFFbGVtZW50VHlwZTogJ3BvaW50JyxcbiAgICAgICAgaW5kZXhBeGlzOiAncicsXG4gICAgICAgIHNob3dMaW5lOiB0cnVlLFxuICAgICAgICBlbGVtZW50czoge1xuICAgICAgICAgICAgbGluZToge1xuICAgICAgICAgICAgICAgIGZpbGw6ICdzdGFydCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gc3RhdGljIG92ZXJyaWRlcyA9IHtcbiAgICAgICAgYXNwZWN0UmF0aW86IDEsXG4gICAgICAgIHNjYWxlczoge1xuICAgICAgICAgICAgcjoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdyYWRpYWxMaW5lYXInXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuIGdldExhYmVsQW5kVmFsdWUoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgdlNjYWxlID0gdGhpcy5fY2FjaGVkTWV0YS52U2NhbGU7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGluZGV4KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhYmVsOiB2U2NhbGUuZ2V0TGFiZWxzKClbaW5kZXhdLFxuICAgICAgICAgICAgdmFsdWU6ICcnICsgdlNjYWxlLmdldExhYmVsRm9yVmFsdWUocGFyc2VkW3ZTY2FsZS5heGlzXSlcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcGFyc2VPYmplY3REYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgICAgICByZXR1cm4gX3BhcnNlT2JqZWN0RGF0YVJhZGlhbFNjYWxlLmJpbmQodGhpcykobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICB9XG4gICAgdXBkYXRlKG1vZGUpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGxpbmUgPSBtZXRhLmRhdGFzZXQ7XG4gICAgICAgIGNvbnN0IHBvaW50cyA9IG1ldGEuZGF0YSB8fCBbXTtcbiAgICAgICAgY29uc3QgbGFiZWxzID0gbWV0YS5pU2NhbGUuZ2V0TGFiZWxzKCk7XG4gICAgICAgIGxpbmUucG9pbnRzID0gcG9pbnRzO1xuICAgICAgICBpZiAobW9kZSAhPT0gJ3Jlc2l6ZScpIHtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnJlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMobW9kZSk7XG4gICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5zaG93TGluZSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuYm9yZGVyV2lkdGggPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcHJvcGVydGllcyA9IHtcbiAgICAgICAgICAgICAgICBfbG9vcDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBfZnVsbExvb3A6IGxhYmVscy5sZW5ndGggPT09IHBvaW50cy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlRWxlbWVudChsaW5lLCB1bmRlZmluZWQsIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlRWxlbWVudHMocG9pbnRzLCAwLCBwb2ludHMubGVuZ3RoLCBtb2RlKTtcbiAgICB9XG4gICAgdXBkYXRlRWxlbWVudHMocG9pbnRzLCBzdGFydCwgY291bnQsIG1vZGUpIHtcbiAgICAgICAgY29uc3Qgc2NhbGUgPSB0aGlzLl9jYWNoZWRNZXRhLnJTY2FsZTtcbiAgICAgICAgY29uc3QgcmVzZXQgPSBtb2RlID09PSAncmVzZXQnO1xuICAgICAgICBmb3IobGV0IGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7IGkrKyl7XG4gICAgICAgICAgICBjb25zdCBwb2ludCA9IHBvaW50c1tpXTtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSwgcG9pbnQuYWN0aXZlID8gJ2FjdGl2ZScgOiBtb2RlKTtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50UG9zaXRpb24gPSBzY2FsZS5nZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUoaSwgdGhpcy5nZXRQYXJzZWQoaSkucik7XG4gICAgICAgICAgICBjb25zdCB4ID0gcmVzZXQgPyBzY2FsZS54Q2VudGVyIDogcG9pbnRQb3NpdGlvbi54O1xuICAgICAgICAgICAgY29uc3QgeSA9IHJlc2V0ID8gc2NhbGUueUNlbnRlciA6IHBvaW50UG9zaXRpb24ueTtcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSB7XG4gICAgICAgICAgICAgICAgeCxcbiAgICAgICAgICAgICAgICB5LFxuICAgICAgICAgICAgICAgIGFuZ2xlOiBwb2ludFBvc2l0aW9uLmFuZ2xlLFxuICAgICAgICAgICAgICAgIHNraXA6IGlzTmFOKHgpIHx8IGlzTmFOKHkpLFxuICAgICAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQocG9pbnQsIGksIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5jbGFzcyBTY2F0dGVyQ29udHJvbGxlciBleHRlbmRzIERhdGFzZXRDb250cm9sbGVyIHtcbiAgICBzdGF0aWMgaWQgPSAnc2NhdHRlcic7XG4gc3RhdGljIGRlZmF1bHRzID0ge1xuICAgICAgICBkYXRhc2V0RWxlbWVudFR5cGU6IGZhbHNlLFxuICAgICAgICBkYXRhRWxlbWVudFR5cGU6ICdwb2ludCcsXG4gICAgICAgIHNob3dMaW5lOiBmYWxzZSxcbiAgICAgICAgZmlsbDogZmFsc2VcbiAgICB9O1xuIHN0YXRpYyBvdmVycmlkZXMgPSB7XG4gICAgICAgIGludGVyYWN0aW9uOiB7XG4gICAgICAgICAgICBtb2RlOiAncG9pbnQnXG4gICAgICAgIH0sXG4gICAgICAgIHNjYWxlczoge1xuICAgICAgICAgICAgeDoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5lYXInXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeToge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5lYXInXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuIGdldExhYmVsQW5kVmFsdWUoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGxhYmVscyA9IHRoaXMuY2hhcnQuZGF0YS5sYWJlbHMgfHwgW107XG4gICAgICAgIGNvbnN0IHsgeFNjYWxlICwgeVNjYWxlICB9ID0gbWV0YTtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaW5kZXgpO1xuICAgICAgICBjb25zdCB4ID0geFNjYWxlLmdldExhYmVsRm9yVmFsdWUocGFyc2VkLngpO1xuICAgICAgICBjb25zdCB5ID0geVNjYWxlLmdldExhYmVsRm9yVmFsdWUocGFyc2VkLnkpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGFiZWw6IGxhYmVsc1tpbmRleF0gfHwgJycsXG4gICAgICAgICAgICB2YWx1ZTogJygnICsgeCArICcsICcgKyB5ICsgJyknXG4gICAgICAgIH07XG4gICAgfVxuICAgIHVwZGF0ZShtb2RlKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCB7IGRhdGE6IHBvaW50cyA9IFtdICB9ID0gbWV0YTtcbiAgICAgICAgY29uc3QgYW5pbWF0aW9uc0Rpc2FibGVkID0gdGhpcy5jaGFydC5fYW5pbWF0aW9uc0Rpc2FibGVkO1xuICAgICAgICBsZXQgeyBzdGFydCAsIGNvdW50ICB9ID0gX2dldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHMobWV0YSwgcG9pbnRzLCBhbmltYXRpb25zRGlzYWJsZWQpO1xuICAgICAgICB0aGlzLl9kcmF3U3RhcnQgPSBzdGFydDtcbiAgICAgICAgdGhpcy5fZHJhd0NvdW50ID0gY291bnQ7XG4gICAgICAgIGlmIChfc2NhbGVSYW5nZXNDaGFuZ2VkKG1ldGEpKSB7XG4gICAgICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgICAgICBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaG93TGluZSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmRhdGFzZXRFbGVtZW50VHlwZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkRWxlbWVudHMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHsgZGF0YXNldDogbGluZSAsIF9kYXRhc2V0ICB9ID0gbWV0YTtcbiAgICAgICAgICAgIGxpbmUuX2NoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgICAgIGxpbmUuX2RhdGFzZXRJbmRleCA9IHRoaXMuaW5kZXg7XG4gICAgICAgICAgICBsaW5lLl9kZWNpbWF0ZWQgPSAhIV9kYXRhc2V0Ll9kZWNpbWF0ZWQ7XG4gICAgICAgICAgICBsaW5lLnBvaW50cyA9IHBvaW50cztcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnJlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMobW9kZSk7XG4gICAgICAgICAgICBvcHRpb25zLnNlZ21lbnQgPSB0aGlzLm9wdGlvbnMuc2VnbWVudDtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlRWxlbWVudChsaW5lLCB1bmRlZmluZWQsIHtcbiAgICAgICAgICAgICAgICBhbmltYXRlZDogIWFuaW1hdGlvbnNEaXNhYmxlZCxcbiAgICAgICAgICAgICAgICBvcHRpb25zXG4gICAgICAgICAgICB9LCBtb2RlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmRhdGFzZXRFbGVtZW50VHlwZSkge1xuICAgICAgICAgICAgZGVsZXRlIG1ldGEuZGF0YXNldDtcbiAgICAgICAgICAgIHRoaXMuZGF0YXNldEVsZW1lbnRUeXBlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50cyhwb2ludHMsIHN0YXJ0LCBjb3VudCwgbW9kZSk7XG4gICAgfVxuICAgIGFkZEVsZW1lbnRzKCkge1xuICAgICAgICBjb25zdCB7IHNob3dMaW5lICB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBpZiAoIXRoaXMuZGF0YXNldEVsZW1lbnRUeXBlICYmIHNob3dMaW5lKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGFzZXRFbGVtZW50VHlwZSA9IHRoaXMuY2hhcnQucmVnaXN0cnkuZ2V0RWxlbWVudCgnbGluZScpO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyLmFkZEVsZW1lbnRzKCk7XG4gICAgfVxuICAgIHVwZGF0ZUVsZW1lbnRzKHBvaW50cywgc3RhcnQsIGNvdW50LCBtb2RlKSB7XG4gICAgICAgIGNvbnN0IHJlc2V0ID0gbW9kZSA9PT0gJ3Jlc2V0JztcbiAgICAgICAgY29uc3QgeyBpU2NhbGUgLCB2U2NhbGUgLCBfc3RhY2tlZCAsIF9kYXRhc2V0ICB9ID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgZmlyc3RPcHRzID0gdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKHN0YXJ0LCBtb2RlKTtcbiAgICAgICAgY29uc3Qgc2hhcmVkT3B0aW9ucyA9IHRoaXMuZ2V0U2hhcmVkT3B0aW9ucyhmaXJzdE9wdHMpO1xuICAgICAgICBjb25zdCBpbmNsdWRlT3B0aW9ucyA9IHRoaXMuaW5jbHVkZU9wdGlvbnMobW9kZSwgc2hhcmVkT3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGlBeGlzID0gaVNjYWxlLmF4aXM7XG4gICAgICAgIGNvbnN0IHZBeGlzID0gdlNjYWxlLmF4aXM7XG4gICAgICAgIGNvbnN0IHsgc3BhbkdhcHMgLCBzZWdtZW50ICB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBtYXhHYXBMZW5ndGggPSBpc051bWJlcihzcGFuR2FwcykgPyBzcGFuR2FwcyA6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgICAgY29uc3QgZGlyZWN0VXBkYXRlID0gdGhpcy5jaGFydC5fYW5pbWF0aW9uc0Rpc2FibGVkIHx8IHJlc2V0IHx8IG1vZGUgPT09ICdub25lJztcbiAgICAgICAgbGV0IHByZXZQYXJzZWQgPSBzdGFydCA+IDAgJiYgdGhpcy5nZXRQYXJzZWQoc3RhcnQgLSAxKTtcbiAgICAgICAgZm9yKGxldCBpID0gc3RhcnQ7IGkgPCBzdGFydCArIGNvdW50OyArK2kpe1xuICAgICAgICAgICAgY29uc3QgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpKTtcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSBkaXJlY3RVcGRhdGUgPyBwb2ludCA6IHt9O1xuICAgICAgICAgICAgY29uc3QgbnVsbERhdGEgPSBpc051bGxPclVuZGVmKHBhcnNlZFt2QXhpc10pO1xuICAgICAgICAgICAgY29uc3QgaVBpeGVsID0gcHJvcGVydGllc1tpQXhpc10gPSBpU2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShwYXJzZWRbaUF4aXNdLCBpKTtcbiAgICAgICAgICAgIGNvbnN0IHZQaXhlbCA9IHByb3BlcnRpZXNbdkF4aXNdID0gcmVzZXQgfHwgbnVsbERhdGEgPyB2U2NhbGUuZ2V0QmFzZVBpeGVsKCkgOiB2U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShfc3RhY2tlZCA/IHRoaXMuYXBwbHlTdGFjayh2U2NhbGUsIHBhcnNlZCwgX3N0YWNrZWQpIDogcGFyc2VkW3ZBeGlzXSwgaSk7XG4gICAgICAgICAgICBwcm9wZXJ0aWVzLnNraXAgPSBpc05hTihpUGl4ZWwpIHx8IGlzTmFOKHZQaXhlbCkgfHwgbnVsbERhdGE7XG4gICAgICAgICAgICBwcm9wZXJ0aWVzLnN0b3AgPSBpID4gMCAmJiBNYXRoLmFicyhwYXJzZWRbaUF4aXNdIC0gcHJldlBhcnNlZFtpQXhpc10pID4gbWF4R2FwTGVuZ3RoO1xuICAgICAgICAgICAgaWYgKHNlZ21lbnQpIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLnBhcnNlZCA9IHBhcnNlZDtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLnJhdyA9IF9kYXRhc2V0LmRhdGFbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaW5jbHVkZU9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLm9wdGlvbnMgPSBzaGFyZWRPcHRpb25zIHx8IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpLCBwb2ludC5hY3RpdmUgPyAnYWN0aXZlJyA6IG1vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFkaXJlY3RVcGRhdGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQocG9pbnQsIGksIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJldlBhcnNlZCA9IHBhcnNlZDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZVNoYXJlZE9wdGlvbnMoc2hhcmVkT3B0aW9ucywgbW9kZSwgZmlyc3RPcHRzKTtcbiAgICB9XG4gZ2V0TWF4T3ZlcmZsb3coKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBkYXRhID0gbWV0YS5kYXRhIHx8IFtdO1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5zaG93TGluZSkge1xuICAgICAgICAgICAgbGV0IG1heCA9IDA7XG4gICAgICAgICAgICBmb3IobGV0IGkgPSBkYXRhLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKXtcbiAgICAgICAgICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIGRhdGFbaV0uc2l6ZSh0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSkpIC8gMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWF4ID4gMCAmJiBtYXg7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGF0YXNldCA9IG1ldGEuZGF0YXNldDtcbiAgICAgICAgY29uc3QgYm9yZGVyID0gZGF0YXNldC5vcHRpb25zICYmIGRhdGFzZXQub3B0aW9ucy5ib3JkZXJXaWR0aCB8fCAwO1xuICAgICAgICBpZiAoIWRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gYm9yZGVyO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZpcnN0UG9pbnQgPSBkYXRhWzBdLnNpemUodGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKDApKTtcbiAgICAgICAgY29uc3QgbGFzdFBvaW50ID0gZGF0YVtkYXRhLmxlbmd0aCAtIDFdLnNpemUodGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGRhdGEubGVuZ3RoIC0gMSkpO1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgoYm9yZGVyLCBmaXJzdFBvaW50LCBsYXN0UG9pbnQpIC8gMjtcbiAgICB9XG59XG5cbnZhciBjb250cm9sbGVycyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbl9fcHJvdG9fXzogbnVsbCxcbkJhckNvbnRyb2xsZXI6IEJhckNvbnRyb2xsZXIsXG5CdWJibGVDb250cm9sbGVyOiBCdWJibGVDb250cm9sbGVyLFxuRG91Z2hudXRDb250cm9sbGVyOiBEb3VnaG51dENvbnRyb2xsZXIsXG5MaW5lQ29udHJvbGxlcjogTGluZUNvbnRyb2xsZXIsXG5QaWVDb250cm9sbGVyOiBQaWVDb250cm9sbGVyLFxuUG9sYXJBcmVhQ29udHJvbGxlcjogUG9sYXJBcmVhQ29udHJvbGxlcixcblJhZGFyQ29udHJvbGxlcjogUmFkYXJDb250cm9sbGVyLFxuU2NhdHRlckNvbnRyb2xsZXI6IFNjYXR0ZXJDb250cm9sbGVyXG59KTtcblxuLyoqXG4gKiBAbmFtZXNwYWNlIENoYXJ0Ll9hZGFwdGVyc1xuICogQHNpbmNlIDIuOC4wXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIGFic3RyYWN0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkOiBDaGVjayB0aGF0IGEgY29tcGxldGUgZGF0ZSBhZGFwdGVyIGlzIHByb3ZpZGVkLicpO1xufVxuLyoqXG4gKiBEYXRlIGFkYXB0ZXIgKGN1cnJlbnQgdXNlZCBieSB0aGUgdGltZSBzY2FsZSlcbiAqIEBuYW1lc3BhY2UgQ2hhcnQuX2FkYXB0ZXJzLl9kYXRlXG4gKiBAbWVtYmVyb2YgQ2hhcnQuX2FkYXB0ZXJzXG4gKiBAcHJpdmF0ZVxuICovIGNsYXNzIERhdGVBZGFwdGVyQmFzZSB7XG4gICAgLyoqXG4gICAqIE92ZXJyaWRlIGRlZmF1bHQgZGF0ZSBhZGFwdGVyIG1ldGhvZHMuXG4gICAqIEFjY2VwdHMgdHlwZSBwYXJhbWV0ZXIgdG8gZGVmaW5lIG9wdGlvbnMgdHlwZS5cbiAgICogQGV4YW1wbGVcbiAgICogQ2hhcnQuX2FkYXB0ZXJzLl9kYXRlLm92ZXJyaWRlPHtteUFkYXB0ZXJPcHRpb246IHN0cmluZ30+KHtcbiAgICogICBpbml0KCkge1xuICAgKiAgICAgY29uc29sZS5sb2codGhpcy5vcHRpb25zLm15QWRhcHRlck9wdGlvbik7XG4gICAqICAgfVxuICAgKiB9KVxuICAgKi8gc3RhdGljIG92ZXJyaWRlKG1lbWJlcnMpIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihEYXRlQWRhcHRlckJhc2UucHJvdG90eXBlLCBtZW1iZXJzKTtcbiAgICB9XG4gICAgb3B0aW9ucztcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKXtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvblxuICAgIGluaXQoKSB7fVxuICAgIGZvcm1hdHMoKSB7XG4gICAgICAgIHJldHVybiBhYnN0cmFjdCgpO1xuICAgIH1cbiAgICBwYXJzZSgpIHtcbiAgICAgICAgcmV0dXJuIGFic3RyYWN0KCk7XG4gICAgfVxuICAgIGZvcm1hdCgpIHtcbiAgICAgICAgcmV0dXJuIGFic3RyYWN0KCk7XG4gICAgfVxuICAgIGFkZCgpIHtcbiAgICAgICAgcmV0dXJuIGFic3RyYWN0KCk7XG4gICAgfVxuICAgIGRpZmYoKSB7XG4gICAgICAgIHJldHVybiBhYnN0cmFjdCgpO1xuICAgIH1cbiAgICBzdGFydE9mKCkge1xuICAgICAgICByZXR1cm4gYWJzdHJhY3QoKTtcbiAgICB9XG4gICAgZW5kT2YoKSB7XG4gICAgICAgIHJldHVybiBhYnN0cmFjdCgpO1xuICAgIH1cbn1cbnZhciBhZGFwdGVycyA9IHtcbiAgICBfZGF0ZTogRGF0ZUFkYXB0ZXJCYXNlXG59O1xuXG5mdW5jdGlvbiBiaW5hcnlTZWFyY2gobWV0YXNldCwgYXhpcywgdmFsdWUsIGludGVyc2VjdCkge1xuICAgIGNvbnN0IHsgY29udHJvbGxlciAsIGRhdGEgLCBfc29ydGVkICB9ID0gbWV0YXNldDtcbiAgICBjb25zdCBpU2NhbGUgPSBjb250cm9sbGVyLl9jYWNoZWRNZXRhLmlTY2FsZTtcbiAgICBpZiAoaVNjYWxlICYmIGF4aXMgPT09IGlTY2FsZS5heGlzICYmIGF4aXMgIT09ICdyJyAmJiBfc29ydGVkICYmIGRhdGEubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGxvb2t1cE1ldGhvZCA9IGlTY2FsZS5fcmV2ZXJzZVBpeGVscyA/IF9ybG9va3VwQnlLZXkgOiBfbG9va3VwQnlLZXk7XG4gICAgICAgIGlmICghaW50ZXJzZWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gbG9va3VwTWV0aG9kKGRhdGEsIGF4aXMsIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChjb250cm9sbGVyLl9zaGFyZWRPcHRpb25zKSB7XG4gICAgICAgICAgICBjb25zdCBlbCA9IGRhdGFbMF07XG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IHR5cGVvZiBlbC5nZXRSYW5nZSA9PT0gJ2Z1bmN0aW9uJyAmJiBlbC5nZXRSYW5nZShheGlzKTtcbiAgICAgICAgICAgIGlmIChyYW5nZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gbG9va3VwTWV0aG9kKGRhdGEsIGF4aXMsIHZhbHVlIC0gcmFuZ2UpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVuZCA9IGxvb2t1cE1ldGhvZChkYXRhLCBheGlzLCB2YWx1ZSArIHJhbmdlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBsbzogc3RhcnQubG8sXG4gICAgICAgICAgICAgICAgICAgIGhpOiBlbmQuaGlcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGxvOiAwLFxuICAgICAgICBoaTogZGF0YS5sZW5ndGggLSAxXG4gICAgfTtcbn1cbiBmdW5jdGlvbiBldmFsdWF0ZUludGVyYWN0aW9uSXRlbXMoY2hhcnQsIGF4aXMsIHBvc2l0aW9uLCBoYW5kbGVyLCBpbnRlcnNlY3QpIHtcbiAgICBjb25zdCBtZXRhc2V0cyA9IGNoYXJ0LmdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKTtcbiAgICBjb25zdCB2YWx1ZSA9IHBvc2l0aW9uW2F4aXNdO1xuICAgIGZvcihsZXQgaSA9IDAsIGlsZW4gPSBtZXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBjb25zdCB7IGluZGV4ICwgZGF0YSAgfSA9IG1ldGFzZXRzW2ldO1xuICAgICAgICBjb25zdCB7IGxvICwgaGkgIH0gPSBiaW5hcnlTZWFyY2gobWV0YXNldHNbaV0sIGF4aXMsIHZhbHVlLCBpbnRlcnNlY3QpO1xuICAgICAgICBmb3IobGV0IGogPSBsbzsgaiA8PSBoaTsgKytqKXtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkYXRhW2pdO1xuICAgICAgICAgICAgaWYgKCFlbGVtZW50LnNraXApIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVyKGVsZW1lbnQsIGluZGV4LCBqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiBmdW5jdGlvbiBnZXREaXN0YW5jZU1ldHJpY0ZvckF4aXMoYXhpcykge1xuICAgIGNvbnN0IHVzZVggPSBheGlzLmluZGV4T2YoJ3gnKSAhPT0gLTE7XG4gICAgY29uc3QgdXNlWSA9IGF4aXMuaW5kZXhPZigneScpICE9PSAtMTtcbiAgICByZXR1cm4gZnVuY3Rpb24ocHQxLCBwdDIpIHtcbiAgICAgICAgY29uc3QgZGVsdGFYID0gdXNlWCA/IE1hdGguYWJzKHB0MS54IC0gcHQyLngpIDogMDtcbiAgICAgICAgY29uc3QgZGVsdGFZID0gdXNlWSA/IE1hdGguYWJzKHB0MS55IC0gcHQyLnkpIDogMDtcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydChNYXRoLnBvdyhkZWx0YVgsIDIpICsgTWF0aC5wb3coZGVsdGFZLCAyKSk7XG4gICAgfTtcbn1cbiBmdW5jdGlvbiBnZXRJbnRlcnNlY3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIHVzZUZpbmFsUG9zaXRpb24sIGluY2x1ZGVJbnZpc2libGUpIHtcbiAgICBjb25zdCBpdGVtcyA9IFtdO1xuICAgIGlmICghaW5jbHVkZUludmlzaWJsZSAmJiAhY2hhcnQuaXNQb2ludEluQXJlYShwb3NpdGlvbikpIHtcbiAgICAgICAgcmV0dXJuIGl0ZW1zO1xuICAgIH1cbiAgICBjb25zdCBldmFsdWF0aW9uRnVuYyA9IGZ1bmN0aW9uKGVsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXgpIHtcbiAgICAgICAgaWYgKCFpbmNsdWRlSW52aXNpYmxlICYmICFfaXNQb2ludEluQXJlYShlbGVtZW50LCBjaGFydC5jaGFydEFyZWEsIDApKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsZW1lbnQuaW5SYW5nZShwb3NpdGlvbi54LCBwb3NpdGlvbi55LCB1c2VGaW5hbFBvc2l0aW9uKSkge1xuICAgICAgICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICAgICAgICBkYXRhc2V0SW5kZXgsXG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBldmFsdWF0ZUludGVyYWN0aW9uSXRlbXMoY2hhcnQsIGF4aXMsIHBvc2l0aW9uLCBldmFsdWF0aW9uRnVuYywgdHJ1ZSk7XG4gICAgcmV0dXJuIGl0ZW1zO1xufVxuIGZ1bmN0aW9uIGdldE5lYXJlc3RSYWRpYWxJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICBsZXQgaXRlbXMgPSBbXTtcbiAgICBmdW5jdGlvbiBldmFsdWF0aW9uRnVuYyhlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4KSB7XG4gICAgICAgIGNvbnN0IHsgc3RhcnRBbmdsZSAsIGVuZEFuZ2xlICB9ID0gZWxlbWVudC5nZXRQcm9wcyhbXG4gICAgICAgICAgICAnc3RhcnRBbmdsZScsXG4gICAgICAgICAgICAnZW5kQW5nbGUnXG4gICAgICAgIF0sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgICBjb25zdCB7IGFuZ2xlICB9ID0gZ2V0QW5nbGVGcm9tUG9pbnQoZWxlbWVudCwge1xuICAgICAgICAgICAgeDogcG9zaXRpb24ueCxcbiAgICAgICAgICAgIHk6IHBvc2l0aW9uLnlcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChfYW5nbGVCZXR3ZWVuKGFuZ2xlLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSkpIHtcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgZGF0YXNldEluZGV4LFxuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBldmFsdWF0ZUludGVyYWN0aW9uSXRlbXMoY2hhcnQsIGF4aXMsIHBvc2l0aW9uLCBldmFsdWF0aW9uRnVuYyk7XG4gICAgcmV0dXJuIGl0ZW1zO1xufVxuIGZ1bmN0aW9uIGdldE5lYXJlc3RDYXJ0ZXNpYW5JdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIGludGVyc2VjdCwgdXNlRmluYWxQb3NpdGlvbiwgaW5jbHVkZUludmlzaWJsZSkge1xuICAgIGxldCBpdGVtcyA9IFtdO1xuICAgIGNvbnN0IGRpc3RhbmNlTWV0cmljID0gZ2V0RGlzdGFuY2VNZXRyaWNGb3JBeGlzKGF4aXMpO1xuICAgIGxldCBtaW5EaXN0YW5jZSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICBmdW5jdGlvbiBldmFsdWF0aW9uRnVuYyhlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4KSB7XG4gICAgICAgIGNvbnN0IGluUmFuZ2UgPSBlbGVtZW50LmluUmFuZ2UocG9zaXRpb24ueCwgcG9zaXRpb24ueSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgICAgIGlmIChpbnRlcnNlY3QgJiYgIWluUmFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjZW50ZXIgPSBlbGVtZW50LmdldENlbnRlclBvaW50KHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgICBjb25zdCBwb2ludEluQXJlYSA9ICEhaW5jbHVkZUludmlzaWJsZSB8fCBjaGFydC5pc1BvaW50SW5BcmVhKGNlbnRlcik7XG4gICAgICAgIGlmICghcG9pbnRJbkFyZWEgJiYgIWluUmFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkaXN0YW5jZSA9IGRpc3RhbmNlTWV0cmljKHBvc2l0aW9uLCBjZW50ZXIpO1xuICAgICAgICBpZiAoZGlzdGFuY2UgPCBtaW5EaXN0YW5jZSkge1xuICAgICAgICAgICAgaXRlbXMgPSBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICBkYXRhc2V0SW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIG1pbkRpc3RhbmNlID0gZGlzdGFuY2U7XG4gICAgICAgIH0gZWxzZSBpZiAoZGlzdGFuY2UgPT09IG1pbkRpc3RhbmNlKSB7XG4gICAgICAgICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgICAgICAgIGRhdGFzZXRJbmRleCxcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZXZhbHVhdGVJbnRlcmFjdGlvbkl0ZW1zKGNoYXJ0LCBheGlzLCBwb3NpdGlvbiwgZXZhbHVhdGlvbkZ1bmMpO1xuICAgIHJldHVybiBpdGVtcztcbn1cbiBmdW5jdGlvbiBnZXROZWFyZXN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCBpbnRlcnNlY3QsIHVzZUZpbmFsUG9zaXRpb24sIGluY2x1ZGVJbnZpc2libGUpIHtcbiAgICBpZiAoIWluY2x1ZGVJbnZpc2libGUgJiYgIWNoYXJ0LmlzUG9pbnRJbkFyZWEocG9zaXRpb24pKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgcmV0dXJuIGF4aXMgPT09ICdyJyAmJiAhaW50ZXJzZWN0ID8gZ2V0TmVhcmVzdFJhZGlhbEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgdXNlRmluYWxQb3NpdGlvbikgOiBnZXROZWFyZXN0Q2FydGVzaWFuSXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCBpbnRlcnNlY3QsIHVzZUZpbmFsUG9zaXRpb24sIGluY2x1ZGVJbnZpc2libGUpO1xufVxuIGZ1bmN0aW9uIGdldEF4aXNJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIGludGVyc2VjdCwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIGNvbnN0IGl0ZW1zID0gW107XG4gICAgY29uc3QgcmFuZ2VNZXRob2QgPSBheGlzID09PSAneCcgPyAnaW5YUmFuZ2UnIDogJ2luWVJhbmdlJztcbiAgICBsZXQgaW50ZXJzZWN0c0l0ZW0gPSBmYWxzZTtcbiAgICBldmFsdWF0ZUludGVyYWN0aW9uSXRlbXMoY2hhcnQsIGF4aXMsIHBvc2l0aW9uLCAoZWxlbWVudCwgZGF0YXNldEluZGV4LCBpbmRleCk9PntcbiAgICAgICAgaWYgKGVsZW1lbnRbcmFuZ2VNZXRob2RdKHBvc2l0aW9uW2F4aXNdLCB1c2VGaW5hbFBvc2l0aW9uKSkge1xuICAgICAgICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICAgICAgICBkYXRhc2V0SW5kZXgsXG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaW50ZXJzZWN0c0l0ZW0gPSBpbnRlcnNlY3RzSXRlbSB8fCBlbGVtZW50LmluUmFuZ2UocG9zaXRpb24ueCwgcG9zaXRpb24ueSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoaW50ZXJzZWN0ICYmICFpbnRlcnNlY3RzSXRlbSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHJldHVybiBpdGVtcztcbn1cbiB2YXIgSW50ZXJhY3Rpb24gPSB7XG4gICAgZXZhbHVhdGVJbnRlcmFjdGlvbkl0ZW1zLFxuICAgIG1vZGVzOiB7XG4gaW5kZXggKGNoYXJ0LCBlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuICAgICAgICAgICAgY29uc3QgYXhpcyA9IG9wdGlvbnMuYXhpcyB8fCAneCc7XG4gICAgICAgICAgICBjb25zdCBpbmNsdWRlSW52aXNpYmxlID0gb3B0aW9ucy5pbmNsdWRlSW52aXNpYmxlIHx8IGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgaXRlbXMgPSBvcHRpb25zLmludGVyc2VjdCA/IGdldEludGVyc2VjdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgdXNlRmluYWxQb3NpdGlvbiwgaW5jbHVkZUludmlzaWJsZSkgOiBnZXROZWFyZXN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCBmYWxzZSwgdXNlRmluYWxQb3NpdGlvbiwgaW5jbHVkZUludmlzaWJsZSk7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50cyA9IFtdO1xuICAgICAgICAgICAgaWYgKCFpdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaGFydC5nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCkuZm9yRWFjaCgobWV0YSk9PntcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGl0ZW1zWzBdLmluZGV4O1xuICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBtZXRhLmRhdGFbaW5kZXhdO1xuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50ICYmICFlbGVtZW50LnNraXApIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YXNldEluZGV4OiBtZXRhLmluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudHM7XG4gICAgICAgIH0sXG4gZGF0YXNldCAoY2hhcnQsIGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG4gICAgICAgICAgICBjb25zdCBheGlzID0gb3B0aW9ucy5heGlzIHx8ICd4eSc7XG4gICAgICAgICAgICBjb25zdCBpbmNsdWRlSW52aXNpYmxlID0gb3B0aW9ucy5pbmNsdWRlSW52aXNpYmxlIHx8IGZhbHNlO1xuICAgICAgICAgICAgbGV0IGl0ZW1zID0gb3B0aW9ucy5pbnRlcnNlY3QgPyBnZXRJbnRlcnNlY3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIHVzZUZpbmFsUG9zaXRpb24sIGluY2x1ZGVJbnZpc2libGUpIDogZ2V0TmVhcmVzdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgZmFsc2UsIHVzZUZpbmFsUG9zaXRpb24sIGluY2x1ZGVJbnZpc2libGUpO1xuICAgICAgICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhc2V0SW5kZXggPSBpdGVtc1swXS5kYXRhc2V0SW5kZXg7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCkuZGF0YTtcbiAgICAgICAgICAgICAgICBpdGVtcyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgKytpKXtcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiBkYXRhW2ldLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YXNldEluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGlcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGl0ZW1zO1xuICAgICAgICB9LFxuIHBvaW50IChjaGFydCwgZSwgb3B0aW9ucywgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICAgICAgY29uc3QgcG9zaXRpb24gPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGUsIGNoYXJ0KTtcbiAgICAgICAgICAgIGNvbnN0IGF4aXMgPSBvcHRpb25zLmF4aXMgfHwgJ3h5JztcbiAgICAgICAgICAgIGNvbnN0IGluY2x1ZGVJbnZpc2libGUgPSBvcHRpb25zLmluY2x1ZGVJbnZpc2libGUgfHwgZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gZ2V0SW50ZXJzZWN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCB1c2VGaW5hbFBvc2l0aW9uLCBpbmNsdWRlSW52aXNpYmxlKTtcbiAgICAgICAgfSxcbiBuZWFyZXN0IChjaGFydCwgZSwgb3B0aW9ucywgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICAgICAgY29uc3QgcG9zaXRpb24gPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGUsIGNoYXJ0KTtcbiAgICAgICAgICAgIGNvbnN0IGF4aXMgPSBvcHRpb25zLmF4aXMgfHwgJ3h5JztcbiAgICAgICAgICAgIGNvbnN0IGluY2x1ZGVJbnZpc2libGUgPSBvcHRpb25zLmluY2x1ZGVJbnZpc2libGUgfHwgZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gZ2V0TmVhcmVzdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgb3B0aW9ucy5pbnRlcnNlY3QsIHVzZUZpbmFsUG9zaXRpb24sIGluY2x1ZGVJbnZpc2libGUpO1xuICAgICAgICB9LFxuIHggKGNoYXJ0LCBlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuICAgICAgICAgICAgcmV0dXJuIGdldEF4aXNJdGVtcyhjaGFydCwgcG9zaXRpb24sICd4Jywgb3B0aW9ucy5pbnRlcnNlY3QsIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgICB9LFxuIHkgKGNoYXJ0LCBlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuICAgICAgICAgICAgcmV0dXJuIGdldEF4aXNJdGVtcyhjaGFydCwgcG9zaXRpb24sICd5Jywgb3B0aW9ucy5pbnRlcnNlY3QsIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuY29uc3QgU1RBVElDX1BPU0lUSU9OUyA9IFtcbiAgICAnbGVmdCcsXG4gICAgJ3RvcCcsXG4gICAgJ3JpZ2h0JyxcbiAgICAnYm90dG9tJ1xuXTtcbmZ1bmN0aW9uIGZpbHRlckJ5UG9zaXRpb24oYXJyYXksIHBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIGFycmF5LmZpbHRlcigodik9PnYucG9zID09PSBwb3NpdGlvbik7XG59XG5mdW5jdGlvbiBmaWx0ZXJEeW5hbWljUG9zaXRpb25CeUF4aXMoYXJyYXksIGF4aXMpIHtcbiAgICByZXR1cm4gYXJyYXkuZmlsdGVyKCh2KT0+U1RBVElDX1BPU0lUSU9OUy5pbmRleE9mKHYucG9zKSA9PT0gLTEgJiYgdi5ib3guYXhpcyA9PT0gYXhpcyk7XG59XG5mdW5jdGlvbiBzb3J0QnlXZWlnaHQoYXJyYXksIHJldmVyc2UpIHtcbiAgICByZXR1cm4gYXJyYXkuc29ydCgoYSwgYik9PntcbiAgICAgICAgY29uc3QgdjAgPSByZXZlcnNlID8gYiA6IGE7XG4gICAgICAgIGNvbnN0IHYxID0gcmV2ZXJzZSA/IGEgOiBiO1xuICAgICAgICByZXR1cm4gdjAud2VpZ2h0ID09PSB2MS53ZWlnaHQgPyB2MC5pbmRleCAtIHYxLmluZGV4IDogdjAud2VpZ2h0IC0gdjEud2VpZ2h0O1xuICAgIH0pO1xufVxuZnVuY3Rpb24gd3JhcEJveGVzKGJveGVzKSB7XG4gICAgY29uc3QgbGF5b3V0Qm94ZXMgPSBbXTtcbiAgICBsZXQgaSwgaWxlbiwgYm94LCBwb3MsIHN0YWNrLCBzdGFja1dlaWdodDtcbiAgICBmb3IoaSA9IDAsIGlsZW4gPSAoYm94ZXMgfHwgW10pLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIGJveCA9IGJveGVzW2ldO1xuICAgICAgICAoeyBwb3NpdGlvbjogcG9zICwgb3B0aW9uczogeyBzdGFjayAsIHN0YWNrV2VpZ2h0ID0xICB9ICB9ID0gYm94KTtcbiAgICAgICAgbGF5b3V0Qm94ZXMucHVzaCh7XG4gICAgICAgICAgICBpbmRleDogaSxcbiAgICAgICAgICAgIGJveCxcbiAgICAgICAgICAgIHBvcyxcbiAgICAgICAgICAgIGhvcml6b250YWw6IGJveC5pc0hvcml6b250YWwoKSxcbiAgICAgICAgICAgIHdlaWdodDogYm94LndlaWdodCxcbiAgICAgICAgICAgIHN0YWNrOiBzdGFjayAmJiBwb3MgKyBzdGFjayxcbiAgICAgICAgICAgIHN0YWNrV2VpZ2h0XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbGF5b3V0Qm94ZXM7XG59XG5mdW5jdGlvbiBidWlsZFN0YWNrcyhsYXlvdXRzKSB7XG4gICAgY29uc3Qgc3RhY2tzID0ge307XG4gICAgZm9yIChjb25zdCB3cmFwIG9mIGxheW91dHMpe1xuICAgICAgICBjb25zdCB7IHN0YWNrICwgcG9zICwgc3RhY2tXZWlnaHQgIH0gPSB3cmFwO1xuICAgICAgICBpZiAoIXN0YWNrIHx8ICFTVEFUSUNfUE9TSVRJT05TLmluY2x1ZGVzKHBvcykpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IF9zdGFjayA9IHN0YWNrc1tzdGFja10gfHwgKHN0YWNrc1tzdGFja10gPSB7XG4gICAgICAgICAgICBjb3VudDogMCxcbiAgICAgICAgICAgIHBsYWNlZDogMCxcbiAgICAgICAgICAgIHdlaWdodDogMCxcbiAgICAgICAgICAgIHNpemU6IDBcbiAgICAgICAgfSk7XG4gICAgICAgIF9zdGFjay5jb3VudCsrO1xuICAgICAgICBfc3RhY2sud2VpZ2h0ICs9IHN0YWNrV2VpZ2h0O1xuICAgIH1cbiAgICByZXR1cm4gc3RhY2tzO1xufVxuIGZ1bmN0aW9uIHNldExheW91dERpbXMobGF5b3V0cywgcGFyYW1zKSB7XG4gICAgY29uc3Qgc3RhY2tzID0gYnVpbGRTdGFja3MobGF5b3V0cyk7XG4gICAgY29uc3QgeyB2Qm94TWF4V2lkdGggLCBoQm94TWF4SGVpZ2h0ICB9ID0gcGFyYW1zO1xuICAgIGxldCBpLCBpbGVuLCBsYXlvdXQ7XG4gICAgZm9yKGkgPSAwLCBpbGVuID0gbGF5b3V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBsYXlvdXQgPSBsYXlvdXRzW2ldO1xuICAgICAgICBjb25zdCB7IGZ1bGxTaXplICB9ID0gbGF5b3V0LmJveDtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBzdGFja3NbbGF5b3V0LnN0YWNrXTtcbiAgICAgICAgY29uc3QgZmFjdG9yID0gc3RhY2sgJiYgbGF5b3V0LnN0YWNrV2VpZ2h0IC8gc3RhY2sud2VpZ2h0O1xuICAgICAgICBpZiAobGF5b3V0Lmhvcml6b250YWwpIHtcbiAgICAgICAgICAgIGxheW91dC53aWR0aCA9IGZhY3RvciA/IGZhY3RvciAqIHZCb3hNYXhXaWR0aCA6IGZ1bGxTaXplICYmIHBhcmFtcy5hdmFpbGFibGVXaWR0aDtcbiAgICAgICAgICAgIGxheW91dC5oZWlnaHQgPSBoQm94TWF4SGVpZ2h0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGF5b3V0LndpZHRoID0gdkJveE1heFdpZHRoO1xuICAgICAgICAgICAgbGF5b3V0LmhlaWdodCA9IGZhY3RvciA/IGZhY3RvciAqIGhCb3hNYXhIZWlnaHQgOiBmdWxsU2l6ZSAmJiBwYXJhbXMuYXZhaWxhYmxlSGVpZ2h0O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdGFja3M7XG59XG5mdW5jdGlvbiBidWlsZExheW91dEJveGVzKGJveGVzKSB7XG4gICAgY29uc3QgbGF5b3V0Qm94ZXMgPSB3cmFwQm94ZXMoYm94ZXMpO1xuICAgIGNvbnN0IGZ1bGxTaXplID0gc29ydEJ5V2VpZ2h0KGxheW91dEJveGVzLmZpbHRlcigod3JhcCk9PndyYXAuYm94LmZ1bGxTaXplKSwgdHJ1ZSk7XG4gICAgY29uc3QgbGVmdCA9IHNvcnRCeVdlaWdodChmaWx0ZXJCeVBvc2l0aW9uKGxheW91dEJveGVzLCAnbGVmdCcpLCB0cnVlKTtcbiAgICBjb25zdCByaWdodCA9IHNvcnRCeVdlaWdodChmaWx0ZXJCeVBvc2l0aW9uKGxheW91dEJveGVzLCAncmlnaHQnKSk7XG4gICAgY29uc3QgdG9wID0gc29ydEJ5V2VpZ2h0KGZpbHRlckJ5UG9zaXRpb24obGF5b3V0Qm94ZXMsICd0b3AnKSwgdHJ1ZSk7XG4gICAgY29uc3QgYm90dG9tID0gc29ydEJ5V2VpZ2h0KGZpbHRlckJ5UG9zaXRpb24obGF5b3V0Qm94ZXMsICdib3R0b20nKSk7XG4gICAgY29uc3QgY2VudGVySG9yaXpvbnRhbCA9IGZpbHRlckR5bmFtaWNQb3NpdGlvbkJ5QXhpcyhsYXlvdXRCb3hlcywgJ3gnKTtcbiAgICBjb25zdCBjZW50ZXJWZXJ0aWNhbCA9IGZpbHRlckR5bmFtaWNQb3NpdGlvbkJ5QXhpcyhsYXlvdXRCb3hlcywgJ3knKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBmdWxsU2l6ZSxcbiAgICAgICAgbGVmdEFuZFRvcDogbGVmdC5jb25jYXQodG9wKSxcbiAgICAgICAgcmlnaHRBbmRCb3R0b206IHJpZ2h0LmNvbmNhdChjZW50ZXJWZXJ0aWNhbCkuY29uY2F0KGJvdHRvbSkuY29uY2F0KGNlbnRlckhvcml6b250YWwpLFxuICAgICAgICBjaGFydEFyZWE6IGZpbHRlckJ5UG9zaXRpb24obGF5b3V0Qm94ZXMsICdjaGFydEFyZWEnKSxcbiAgICAgICAgdmVydGljYWw6IGxlZnQuY29uY2F0KHJpZ2h0KS5jb25jYXQoY2VudGVyVmVydGljYWwpLFxuICAgICAgICBob3Jpem9udGFsOiB0b3AuY29uY2F0KGJvdHRvbSkuY29uY2F0KGNlbnRlckhvcml6b250YWwpXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGdldENvbWJpbmVkTWF4KG1heFBhZGRpbmcsIGNoYXJ0QXJlYSwgYSwgYikge1xuICAgIHJldHVybiBNYXRoLm1heChtYXhQYWRkaW5nW2FdLCBjaGFydEFyZWFbYV0pICsgTWF0aC5tYXgobWF4UGFkZGluZ1tiXSwgY2hhcnRBcmVhW2JdKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZU1heFBhZGRpbmcobWF4UGFkZGluZywgYm94UGFkZGluZykge1xuICAgIG1heFBhZGRpbmcudG9wID0gTWF0aC5tYXgobWF4UGFkZGluZy50b3AsIGJveFBhZGRpbmcudG9wKTtcbiAgICBtYXhQYWRkaW5nLmxlZnQgPSBNYXRoLm1heChtYXhQYWRkaW5nLmxlZnQsIGJveFBhZGRpbmcubGVmdCk7XG4gICAgbWF4UGFkZGluZy5ib3R0b20gPSBNYXRoLm1heChtYXhQYWRkaW5nLmJvdHRvbSwgYm94UGFkZGluZy5ib3R0b20pO1xuICAgIG1heFBhZGRpbmcucmlnaHQgPSBNYXRoLm1heChtYXhQYWRkaW5nLnJpZ2h0LCBib3hQYWRkaW5nLnJpZ2h0KTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZURpbXMoY2hhcnRBcmVhLCBwYXJhbXMsIGxheW91dCwgc3RhY2tzKSB7XG4gICAgY29uc3QgeyBwb3MgLCBib3ggIH0gPSBsYXlvdXQ7XG4gICAgY29uc3QgbWF4UGFkZGluZyA9IGNoYXJ0QXJlYS5tYXhQYWRkaW5nO1xuICAgIGlmICghaXNPYmplY3QocG9zKSkge1xuICAgICAgICBpZiAobGF5b3V0LnNpemUpIHtcbiAgICAgICAgICAgIGNoYXJ0QXJlYVtwb3NdIC09IGxheW91dC5zaXplO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN0YWNrID0gc3RhY2tzW2xheW91dC5zdGFja10gfHwge1xuICAgICAgICAgICAgc2l6ZTogMCxcbiAgICAgICAgICAgIGNvdW50OiAxXG4gICAgICAgIH07XG4gICAgICAgIHN0YWNrLnNpemUgPSBNYXRoLm1heChzdGFjay5zaXplLCBsYXlvdXQuaG9yaXpvbnRhbCA/IGJveC5oZWlnaHQgOiBib3gud2lkdGgpO1xuICAgICAgICBsYXlvdXQuc2l6ZSA9IHN0YWNrLnNpemUgLyBzdGFjay5jb3VudDtcbiAgICAgICAgY2hhcnRBcmVhW3Bvc10gKz0gbGF5b3V0LnNpemU7XG4gICAgfVxuICAgIGlmIChib3guZ2V0UGFkZGluZykge1xuICAgICAgICB1cGRhdGVNYXhQYWRkaW5nKG1heFBhZGRpbmcsIGJveC5nZXRQYWRkaW5nKCkpO1xuICAgIH1cbiAgICBjb25zdCBuZXdXaWR0aCA9IE1hdGgubWF4KDAsIHBhcmFtcy5vdXRlcldpZHRoIC0gZ2V0Q29tYmluZWRNYXgobWF4UGFkZGluZywgY2hhcnRBcmVhLCAnbGVmdCcsICdyaWdodCcpKTtcbiAgICBjb25zdCBuZXdIZWlnaHQgPSBNYXRoLm1heCgwLCBwYXJhbXMub3V0ZXJIZWlnaHQgLSBnZXRDb21iaW5lZE1heChtYXhQYWRkaW5nLCBjaGFydEFyZWEsICd0b3AnLCAnYm90dG9tJykpO1xuICAgIGNvbnN0IHdpZHRoQ2hhbmdlZCA9IG5ld1dpZHRoICE9PSBjaGFydEFyZWEudztcbiAgICBjb25zdCBoZWlnaHRDaGFuZ2VkID0gbmV3SGVpZ2h0ICE9PSBjaGFydEFyZWEuaDtcbiAgICBjaGFydEFyZWEudyA9IG5ld1dpZHRoO1xuICAgIGNoYXJ0QXJlYS5oID0gbmV3SGVpZ2h0O1xuICAgIHJldHVybiBsYXlvdXQuaG9yaXpvbnRhbCA/IHtcbiAgICAgICAgc2FtZTogd2lkdGhDaGFuZ2VkLFxuICAgICAgICBvdGhlcjogaGVpZ2h0Q2hhbmdlZFxuICAgIH0gOiB7XG4gICAgICAgIHNhbWU6IGhlaWdodENoYW5nZWQsXG4gICAgICAgIG90aGVyOiB3aWR0aENoYW5nZWRcbiAgICB9O1xufVxuZnVuY3Rpb24gaGFuZGxlTWF4UGFkZGluZyhjaGFydEFyZWEpIHtcbiAgICBjb25zdCBtYXhQYWRkaW5nID0gY2hhcnRBcmVhLm1heFBhZGRpbmc7XG4gICAgZnVuY3Rpb24gdXBkYXRlUG9zKHBvcykge1xuICAgICAgICBjb25zdCBjaGFuZ2UgPSBNYXRoLm1heChtYXhQYWRkaW5nW3Bvc10gLSBjaGFydEFyZWFbcG9zXSwgMCk7XG4gICAgICAgIGNoYXJ0QXJlYVtwb3NdICs9IGNoYW5nZTtcbiAgICAgICAgcmV0dXJuIGNoYW5nZTtcbiAgICB9XG4gICAgY2hhcnRBcmVhLnkgKz0gdXBkYXRlUG9zKCd0b3AnKTtcbiAgICBjaGFydEFyZWEueCArPSB1cGRhdGVQb3MoJ2xlZnQnKTtcbiAgICB1cGRhdGVQb3MoJ3JpZ2h0Jyk7XG4gICAgdXBkYXRlUG9zKCdib3R0b20nKTtcbn1cbmZ1bmN0aW9uIGdldE1hcmdpbnMoaG9yaXpvbnRhbCwgY2hhcnRBcmVhKSB7XG4gICAgY29uc3QgbWF4UGFkZGluZyA9IGNoYXJ0QXJlYS5tYXhQYWRkaW5nO1xuICAgIGZ1bmN0aW9uIG1hcmdpbkZvclBvc2l0aW9ucyhwb3NpdGlvbnMpIHtcbiAgICAgICAgY29uc3QgbWFyZ2luID0ge1xuICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICAgICAgYm90dG9tOiAwXG4gICAgICAgIH07XG4gICAgICAgIHBvc2l0aW9ucy5mb3JFYWNoKChwb3MpPT57XG4gICAgICAgICAgICBtYXJnaW5bcG9zXSA9IE1hdGgubWF4KGNoYXJ0QXJlYVtwb3NdLCBtYXhQYWRkaW5nW3Bvc10pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG1hcmdpbjtcbiAgICB9XG4gICAgcmV0dXJuIGhvcml6b250YWwgPyBtYXJnaW5Gb3JQb3NpdGlvbnMoW1xuICAgICAgICAnbGVmdCcsXG4gICAgICAgICdyaWdodCdcbiAgICBdKSA6IG1hcmdpbkZvclBvc2l0aW9ucyhbXG4gICAgICAgICd0b3AnLFxuICAgICAgICAnYm90dG9tJ1xuICAgIF0pO1xufVxuZnVuY3Rpb24gZml0Qm94ZXMoYm94ZXMsIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpIHtcbiAgICBjb25zdCByZWZpdEJveGVzID0gW107XG4gICAgbGV0IGksIGlsZW4sIGxheW91dCwgYm94LCByZWZpdCwgY2hhbmdlZDtcbiAgICBmb3IoaSA9IDAsIGlsZW4gPSBib3hlcy5sZW5ndGgsIHJlZml0ID0gMDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIGxheW91dCA9IGJveGVzW2ldO1xuICAgICAgICBib3ggPSBsYXlvdXQuYm94O1xuICAgICAgICBib3gudXBkYXRlKGxheW91dC53aWR0aCB8fCBjaGFydEFyZWEudywgbGF5b3V0LmhlaWdodCB8fCBjaGFydEFyZWEuaCwgZ2V0TWFyZ2lucyhsYXlvdXQuaG9yaXpvbnRhbCwgY2hhcnRBcmVhKSk7XG4gICAgICAgIGNvbnN0IHsgc2FtZSAsIG90aGVyICB9ID0gdXBkYXRlRGltcyhjaGFydEFyZWEsIHBhcmFtcywgbGF5b3V0LCBzdGFja3MpO1xuICAgICAgICByZWZpdCB8PSBzYW1lICYmIHJlZml0Qm94ZXMubGVuZ3RoO1xuICAgICAgICBjaGFuZ2VkID0gY2hhbmdlZCB8fCBvdGhlcjtcbiAgICAgICAgaWYgKCFib3guZnVsbFNpemUpIHtcbiAgICAgICAgICAgIHJlZml0Qm94ZXMucHVzaChsYXlvdXQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZWZpdCAmJiBmaXRCb3hlcyhyZWZpdEJveGVzLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKSB8fCBjaGFuZ2VkO1xufVxuZnVuY3Rpb24gc2V0Qm94RGltcyhib3gsIGxlZnQsIHRvcCwgd2lkdGgsIGhlaWdodCkge1xuICAgIGJveC50b3AgPSB0b3A7XG4gICAgYm94LmxlZnQgPSBsZWZ0O1xuICAgIGJveC5yaWdodCA9IGxlZnQgKyB3aWR0aDtcbiAgICBib3guYm90dG9tID0gdG9wICsgaGVpZ2h0O1xuICAgIGJveC53aWR0aCA9IHdpZHRoO1xuICAgIGJveC5oZWlnaHQgPSBoZWlnaHQ7XG59XG5mdW5jdGlvbiBwbGFjZUJveGVzKGJveGVzLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKSB7XG4gICAgY29uc3QgdXNlclBhZGRpbmcgPSBwYXJhbXMucGFkZGluZztcbiAgICBsZXQgeyB4ICwgeSAgfSA9IGNoYXJ0QXJlYTtcbiAgICBmb3IgKGNvbnN0IGxheW91dCBvZiBib3hlcyl7XG4gICAgICAgIGNvbnN0IGJveCA9IGxheW91dC5ib3g7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gc3RhY2tzW2xheW91dC5zdGFja10gfHwge1xuICAgICAgICAgICAgY291bnQ6IDEsXG4gICAgICAgICAgICBwbGFjZWQ6IDAsXG4gICAgICAgICAgICB3ZWlnaHQ6IDFcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgd2VpZ2h0ID0gbGF5b3V0LnN0YWNrV2VpZ2h0IC8gc3RhY2sud2VpZ2h0IHx8IDE7XG4gICAgICAgIGlmIChsYXlvdXQuaG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBjaGFydEFyZWEudyAqIHdlaWdodDtcbiAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IHN0YWNrLnNpemUgfHwgYm94LmhlaWdodDtcbiAgICAgICAgICAgIGlmIChkZWZpbmVkKHN0YWNrLnN0YXJ0KSkge1xuICAgICAgICAgICAgICAgIHkgPSBzdGFjay5zdGFydDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChib3guZnVsbFNpemUpIHtcbiAgICAgICAgICAgICAgICBzZXRCb3hEaW1zKGJveCwgdXNlclBhZGRpbmcubGVmdCwgeSwgcGFyYW1zLm91dGVyV2lkdGggLSB1c2VyUGFkZGluZy5yaWdodCAtIHVzZXJQYWRkaW5nLmxlZnQsIGhlaWdodCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNldEJveERpbXMoYm94LCBjaGFydEFyZWEubGVmdCArIHN0YWNrLnBsYWNlZCwgeSwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGFjay5zdGFydCA9IHk7XG4gICAgICAgICAgICBzdGFjay5wbGFjZWQgKz0gd2lkdGg7XG4gICAgICAgICAgICB5ID0gYm94LmJvdHRvbTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IGNoYXJ0QXJlYS5oICogd2VpZ2h0O1xuICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBzdGFjay5zaXplIHx8IGJveC53aWR0aDtcbiAgICAgICAgICAgIGlmIChkZWZpbmVkKHN0YWNrLnN0YXJ0KSkge1xuICAgICAgICAgICAgICAgIHggPSBzdGFjay5zdGFydDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChib3guZnVsbFNpemUpIHtcbiAgICAgICAgICAgICAgICBzZXRCb3hEaW1zKGJveCwgeCwgdXNlclBhZGRpbmcudG9wLCB3aWR0aCwgcGFyYW1zLm91dGVySGVpZ2h0IC0gdXNlclBhZGRpbmcuYm90dG9tIC0gdXNlclBhZGRpbmcudG9wKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2V0Qm94RGltcyhib3gsIHgsIGNoYXJ0QXJlYS50b3AgKyBzdGFjay5wbGFjZWQsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RhY2suc3RhcnQgPSB4O1xuICAgICAgICAgICAgc3RhY2sucGxhY2VkICs9IGhlaWdodDtcbiAgICAgICAgICAgIHggPSBib3gucmlnaHQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2hhcnRBcmVhLnggPSB4O1xuICAgIGNoYXJ0QXJlYS55ID0geTtcbn1cbnZhciBsYXlvdXRzID0ge1xuIGFkZEJveCAoY2hhcnQsIGl0ZW0pIHtcbiAgICAgICAgaWYgKCFjaGFydC5ib3hlcykge1xuICAgICAgICAgICAgY2hhcnQuYm94ZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBpdGVtLmZ1bGxTaXplID0gaXRlbS5mdWxsU2l6ZSB8fCBmYWxzZTtcbiAgICAgICAgaXRlbS5wb3NpdGlvbiA9IGl0ZW0ucG9zaXRpb24gfHwgJ3RvcCc7XG4gICAgICAgIGl0ZW0ud2VpZ2h0ID0gaXRlbS53ZWlnaHQgfHwgMDtcbiAgICAgICAgaXRlbS5fbGF5ZXJzID0gaXRlbS5fbGF5ZXJzIHx8IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHo6IDAsXG4gICAgICAgICAgICAgICAgICAgIGRyYXcgKGNoYXJ0QXJlYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5kcmF3KGNoYXJ0QXJlYSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdO1xuICAgICAgICB9O1xuICAgICAgICBjaGFydC5ib3hlcy5wdXNoKGl0ZW0pO1xuICAgIH0sXG4gcmVtb3ZlQm94IChjaGFydCwgbGF5b3V0SXRlbSkge1xuICAgICAgICBjb25zdCBpbmRleCA9IGNoYXJ0LmJveGVzID8gY2hhcnQuYm94ZXMuaW5kZXhPZihsYXlvdXRJdGVtKSA6IC0xO1xuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICBjaGFydC5ib3hlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgfSxcbiBjb25maWd1cmUgKGNoYXJ0LCBpdGVtLCBvcHRpb25zKSB7XG4gICAgICAgIGl0ZW0uZnVsbFNpemUgPSBvcHRpb25zLmZ1bGxTaXplO1xuICAgICAgICBpdGVtLnBvc2l0aW9uID0gb3B0aW9ucy5wb3NpdGlvbjtcbiAgICAgICAgaXRlbS53ZWlnaHQgPSBvcHRpb25zLndlaWdodDtcbiAgICB9LFxuIHVwZGF0ZSAoY2hhcnQsIHdpZHRoLCBoZWlnaHQsIG1pblBhZGRpbmcpIHtcbiAgICAgICAgaWYgKCFjaGFydCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcoY2hhcnQub3B0aW9ucy5sYXlvdXQucGFkZGluZyk7XG4gICAgICAgIGNvbnN0IGF2YWlsYWJsZVdpZHRoID0gTWF0aC5tYXgod2lkdGggLSBwYWRkaW5nLndpZHRoLCAwKTtcbiAgICAgICAgY29uc3QgYXZhaWxhYmxlSGVpZ2h0ID0gTWF0aC5tYXgoaGVpZ2h0IC0gcGFkZGluZy5oZWlnaHQsIDApO1xuICAgICAgICBjb25zdCBib3hlcyA9IGJ1aWxkTGF5b3V0Qm94ZXMoY2hhcnQuYm94ZXMpO1xuICAgICAgICBjb25zdCB2ZXJ0aWNhbEJveGVzID0gYm94ZXMudmVydGljYWw7XG4gICAgICAgIGNvbnN0IGhvcml6b250YWxCb3hlcyA9IGJveGVzLmhvcml6b250YWw7XG4gICAgICAgIGVhY2goY2hhcnQuYm94ZXMsIChib3gpPT57XG4gICAgICAgICAgICBpZiAodHlwZW9mIGJveC5iZWZvcmVMYXlvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBib3guYmVmb3JlTGF5b3V0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB2aXNpYmxlVmVydGljYWxCb3hDb3VudCA9IHZlcnRpY2FsQm94ZXMucmVkdWNlKCh0b3RhbCwgd3JhcCk9PndyYXAuYm94Lm9wdGlvbnMgJiYgd3JhcC5ib3gub3B0aW9ucy5kaXNwbGF5ID09PSBmYWxzZSA/IHRvdGFsIDogdG90YWwgKyAxLCAwKSB8fCAxO1xuICAgICAgICBjb25zdCBwYXJhbXMgPSBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgICAgIG91dGVyV2lkdGg6IHdpZHRoLFxuICAgICAgICAgICAgb3V0ZXJIZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgICAgIHBhZGRpbmcsXG4gICAgICAgICAgICBhdmFpbGFibGVXaWR0aCxcbiAgICAgICAgICAgIGF2YWlsYWJsZUhlaWdodCxcbiAgICAgICAgICAgIHZCb3hNYXhXaWR0aDogYXZhaWxhYmxlV2lkdGggLyAyIC8gdmlzaWJsZVZlcnRpY2FsQm94Q291bnQsXG4gICAgICAgICAgICBoQm94TWF4SGVpZ2h0OiBhdmFpbGFibGVIZWlnaHQgLyAyXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBtYXhQYWRkaW5nID0gT2JqZWN0LmFzc2lnbih7fSwgcGFkZGluZyk7XG4gICAgICAgIHVwZGF0ZU1heFBhZGRpbmcobWF4UGFkZGluZywgdG9QYWRkaW5nKG1pblBhZGRpbmcpKTtcbiAgICAgICAgY29uc3QgY2hhcnRBcmVhID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgICAgICBtYXhQYWRkaW5nLFxuICAgICAgICAgICAgdzogYXZhaWxhYmxlV2lkdGgsXG4gICAgICAgICAgICBoOiBhdmFpbGFibGVIZWlnaHQsXG4gICAgICAgICAgICB4OiBwYWRkaW5nLmxlZnQsXG4gICAgICAgICAgICB5OiBwYWRkaW5nLnRvcFxuICAgICAgICB9LCBwYWRkaW5nKTtcbiAgICAgICAgY29uc3Qgc3RhY2tzID0gc2V0TGF5b3V0RGltcyh2ZXJ0aWNhbEJveGVzLmNvbmNhdChob3Jpem9udGFsQm94ZXMpLCBwYXJhbXMpO1xuICAgICAgICBmaXRCb3hlcyhib3hlcy5mdWxsU2l6ZSwgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcyk7XG4gICAgICAgIGZpdEJveGVzKHZlcnRpY2FsQm94ZXMsIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpO1xuICAgICAgICBpZiAoZml0Qm94ZXMoaG9yaXpvbnRhbEJveGVzLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKSkge1xuICAgICAgICAgICAgZml0Qm94ZXModmVydGljYWxCb3hlcywgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcyk7XG4gICAgICAgIH1cbiAgICAgICAgaGFuZGxlTWF4UGFkZGluZyhjaGFydEFyZWEpO1xuICAgICAgICBwbGFjZUJveGVzKGJveGVzLmxlZnRBbmRUb3AsIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpO1xuICAgICAgICBjaGFydEFyZWEueCArPSBjaGFydEFyZWEudztcbiAgICAgICAgY2hhcnRBcmVhLnkgKz0gY2hhcnRBcmVhLmg7XG4gICAgICAgIHBsYWNlQm94ZXMoYm94ZXMucmlnaHRBbmRCb3R0b20sIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpO1xuICAgICAgICBjaGFydC5jaGFydEFyZWEgPSB7XG4gICAgICAgICAgICBsZWZ0OiBjaGFydEFyZWEubGVmdCxcbiAgICAgICAgICAgIHRvcDogY2hhcnRBcmVhLnRvcCxcbiAgICAgICAgICAgIHJpZ2h0OiBjaGFydEFyZWEubGVmdCArIGNoYXJ0QXJlYS53LFxuICAgICAgICAgICAgYm90dG9tOiBjaGFydEFyZWEudG9wICsgY2hhcnRBcmVhLmgsXG4gICAgICAgICAgICBoZWlnaHQ6IGNoYXJ0QXJlYS5oLFxuICAgICAgICAgICAgd2lkdGg6IGNoYXJ0QXJlYS53XG4gICAgICAgIH07XG4gICAgICAgIGVhY2goYm94ZXMuY2hhcnRBcmVhLCAobGF5b3V0KT0+e1xuICAgICAgICAgICAgY29uc3QgYm94ID0gbGF5b3V0LmJveDtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYm94LCBjaGFydC5jaGFydEFyZWEpO1xuICAgICAgICAgICAgYm94LnVwZGF0ZShjaGFydEFyZWEudywgY2hhcnRBcmVhLmgsIHtcbiAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgICAgICAgICBib3R0b206IDBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59O1xuXG5jbGFzcyBCYXNlUGxhdGZvcm0ge1xuIGFjcXVpcmVDb250ZXh0KGNhbnZhcywgYXNwZWN0UmF0aW8pIHt9XG4gcmVsZWFzZUNvbnRleHQoY29udGV4dCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuIGFkZEV2ZW50TGlzdGVuZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7fVxuIHJlbW92ZUV2ZW50TGlzdGVuZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7fVxuIGdldERldmljZVBpeGVsUmF0aW8oKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH1cbiBnZXRNYXhpbXVtU2l6ZShlbGVtZW50LCB3aWR0aCwgaGVpZ2h0LCBhc3BlY3RSYXRpbykge1xuICAgICAgICB3aWR0aCA9IE1hdGgubWF4KDAsIHdpZHRoIHx8IGVsZW1lbnQud2lkdGgpO1xuICAgICAgICBoZWlnaHQgPSBoZWlnaHQgfHwgZWxlbWVudC5oZWlnaHQ7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogTWF0aC5tYXgoMCwgYXNwZWN0UmF0aW8gPyBNYXRoLmZsb29yKHdpZHRoIC8gYXNwZWN0UmF0aW8pIDogaGVpZ2h0KVxuICAgICAgICB9O1xuICAgIH1cbiBpc0F0dGFjaGVkKGNhbnZhcykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gdXBkYXRlQ29uZmlnKGNvbmZpZykge1xuICAgIH1cbn1cblxuY2xhc3MgQmFzaWNQbGF0Zm9ybSBleHRlbmRzIEJhc2VQbGF0Zm9ybSB7XG4gICAgYWNxdWlyZUNvbnRleHQoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAmJiBpdGVtLmdldENvbnRleHQgJiYgaXRlbS5nZXRDb250ZXh0KCcyZCcpIHx8IG51bGw7XG4gICAgfVxuICAgIHVwZGF0ZUNvbmZpZyhjb25maWcpIHtcbiAgICAgICAgY29uZmlnLm9wdGlvbnMuYW5pbWF0aW9uID0gZmFsc2U7XG4gICAgfVxufVxuXG5jb25zdCBFWFBBTkRPX0tFWSA9ICckY2hhcnRqcyc7XG4gY29uc3QgRVZFTlRfVFlQRVMgPSB7XG4gICAgdG91Y2hzdGFydDogJ21vdXNlZG93bicsXG4gICAgdG91Y2htb3ZlOiAnbW91c2Vtb3ZlJyxcbiAgICB0b3VjaGVuZDogJ21vdXNldXAnLFxuICAgIHBvaW50ZXJlbnRlcjogJ21vdXNlZW50ZXInLFxuICAgIHBvaW50ZXJkb3duOiAnbW91c2Vkb3duJyxcbiAgICBwb2ludGVybW92ZTogJ21vdXNlbW92ZScsXG4gICAgcG9pbnRlcnVwOiAnbW91c2V1cCcsXG4gICAgcG9pbnRlcmxlYXZlOiAnbW91c2VvdXQnLFxuICAgIHBvaW50ZXJvdXQ6ICdtb3VzZW91dCdcbn07XG5jb25zdCBpc051bGxPckVtcHR5ID0gKHZhbHVlKT0+dmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09ICcnO1xuIGZ1bmN0aW9uIGluaXRDYW52YXMoY2FudmFzLCBhc3BlY3RSYXRpbykge1xuICAgIGNvbnN0IHN0eWxlID0gY2FudmFzLnN0eWxlO1xuICAgIGNvbnN0IHJlbmRlckhlaWdodCA9IGNhbnZhcy5nZXRBdHRyaWJ1dGUoJ2hlaWdodCcpO1xuICAgIGNvbnN0IHJlbmRlcldpZHRoID0gY2FudmFzLmdldEF0dHJpYnV0ZSgnd2lkdGgnKTtcbiAgICBjYW52YXNbRVhQQU5ET19LRVldID0ge1xuICAgICAgICBpbml0aWFsOiB7XG4gICAgICAgICAgICBoZWlnaHQ6IHJlbmRlckhlaWdodCxcbiAgICAgICAgICAgIHdpZHRoOiByZW5kZXJXaWR0aCxcbiAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogc3R5bGUuZGlzcGxheSxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHN0eWxlLmhlaWdodCxcbiAgICAgICAgICAgICAgICB3aWR0aDogc3R5bGUud2lkdGhcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgc3R5bGUuZGlzcGxheSA9IHN0eWxlLmRpc3BsYXkgfHwgJ2Jsb2NrJztcbiAgICBzdHlsZS5ib3hTaXppbmcgPSBzdHlsZS5ib3hTaXppbmcgfHwgJ2JvcmRlci1ib3gnO1xuICAgIGlmIChpc051bGxPckVtcHR5KHJlbmRlcldpZHRoKSkge1xuICAgICAgICBjb25zdCBkaXNwbGF5V2lkdGggPSByZWFkVXNlZFNpemUoY2FudmFzLCAnd2lkdGgnKTtcbiAgICAgICAgaWYgKGRpc3BsYXlXaWR0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjYW52YXMud2lkdGggPSBkaXNwbGF5V2lkdGg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzTnVsbE9yRW1wdHkocmVuZGVySGVpZ2h0KSkge1xuICAgICAgICBpZiAoY2FudmFzLnN0eWxlLmhlaWdodCA9PT0gJycpIHtcbiAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBjYW52YXMud2lkdGggLyAoYXNwZWN0UmF0aW8gfHwgMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBkaXNwbGF5SGVpZ2h0ID0gcmVhZFVzZWRTaXplKGNhbnZhcywgJ2hlaWdodCcpO1xuICAgICAgICAgICAgaWYgKGRpc3BsYXlIZWlnaHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBkaXNwbGF5SGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjYW52YXM7XG59XG5jb25zdCBldmVudExpc3RlbmVyT3B0aW9ucyA9IHN1cHBvcnRzRXZlbnRMaXN0ZW5lck9wdGlvbnMgPyB7XG4gICAgcGFzc2l2ZTogdHJ1ZVxufSA6IGZhbHNlO1xuZnVuY3Rpb24gYWRkTGlzdGVuZXIobm9kZSwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIsIGV2ZW50TGlzdGVuZXJPcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKGNoYXJ0LCB0eXBlLCBsaXN0ZW5lcikge1xuICAgIGNoYXJ0LmNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCBldmVudExpc3RlbmVyT3B0aW9ucyk7XG59XG5mdW5jdGlvbiBmcm9tTmF0aXZlRXZlbnQoZXZlbnQsIGNoYXJ0KSB7XG4gICAgY29uc3QgdHlwZSA9IEVWRU5UX1RZUEVTW2V2ZW50LnR5cGVdIHx8IGV2ZW50LnR5cGU7XG4gICAgY29uc3QgeyB4ICwgeSAgfSA9IGdldFJlbGF0aXZlUG9zaXRpb24oZXZlbnQsIGNoYXJ0KTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlLFxuICAgICAgICBjaGFydCxcbiAgICAgICAgbmF0aXZlOiBldmVudCxcbiAgICAgICAgeDogeCAhPT0gdW5kZWZpbmVkID8geCA6IG51bGwsXG4gICAgICAgIHk6IHkgIT09IHVuZGVmaW5lZCA/IHkgOiBudWxsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIG5vZGVMaXN0Q29udGFpbnMobm9kZUxpc3QsIGNhbnZhcykge1xuICAgIGZvciAoY29uc3Qgbm9kZSBvZiBub2RlTGlzdCl7XG4gICAgICAgIGlmIChub2RlID09PSBjYW52YXMgfHwgbm9kZS5jb250YWlucyhjYW52YXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZUF0dGFjaE9ic2VydmVyKGNoYXJ0LCB0eXBlLCBsaXN0ZW5lcikge1xuICAgIGNvbnN0IGNhbnZhcyA9IGNoYXJ0LmNhbnZhcztcbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKChlbnRyaWVzKT0+e1xuICAgICAgICBsZXQgdHJpZ2dlciA9IGZhbHNlO1xuICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpe1xuICAgICAgICAgICAgdHJpZ2dlciA9IHRyaWdnZXIgfHwgbm9kZUxpc3RDb250YWlucyhlbnRyeS5hZGRlZE5vZGVzLCBjYW52YXMpO1xuICAgICAgICAgICAgdHJpZ2dlciA9IHRyaWdnZXIgJiYgIW5vZGVMaXN0Q29udGFpbnMoZW50cnkucmVtb3ZlZE5vZGVzLCBjYW52YXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cmlnZ2VyKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcigpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudCwge1xuICAgICAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgICAgIHN1YnRyZWU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gb2JzZXJ2ZXI7XG59XG5mdW5jdGlvbiBjcmVhdGVEZXRhY2hPYnNlcnZlcihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgICBjb25zdCBjYW52YXMgPSBjaGFydC5jYW52YXM7XG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigoZW50cmllcyk9PntcbiAgICAgICAgbGV0IHRyaWdnZXIgPSBmYWxzZTtcbiAgICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBlbnRyaWVzKXtcbiAgICAgICAgICAgIHRyaWdnZXIgPSB0cmlnZ2VyIHx8IG5vZGVMaXN0Q29udGFpbnMoZW50cnkucmVtb3ZlZE5vZGVzLCBjYW52YXMpO1xuICAgICAgICAgICAgdHJpZ2dlciA9IHRyaWdnZXIgJiYgIW5vZGVMaXN0Q29udGFpbnMoZW50cnkuYWRkZWROb2RlcywgY2FudmFzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHJpZ2dlcikge1xuICAgICAgICAgICAgbGlzdGVuZXIoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIG9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQsIHtcbiAgICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgICBzdWJ0cmVlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIG9ic2VydmVyO1xufVxuY29uc3QgZHJwTGlzdGVuaW5nQ2hhcnRzID0gbmV3IE1hcCgpO1xubGV0IG9sZERldmljZVBpeGVsUmF0aW8gPSAwO1xuZnVuY3Rpb24gb25XaW5kb3dSZXNpemUoKSB7XG4gICAgY29uc3QgZHByID0gd2luZG93LmRldmljZVBpeGVsUmF0aW87XG4gICAgaWYgKGRwciA9PT0gb2xkRGV2aWNlUGl4ZWxSYXRpbykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIG9sZERldmljZVBpeGVsUmF0aW8gPSBkcHI7XG4gICAgZHJwTGlzdGVuaW5nQ2hhcnRzLmZvckVhY2goKHJlc2l6ZSwgY2hhcnQpPT57XG4gICAgICAgIGlmIChjaGFydC5jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyAhPT0gZHByKSB7XG4gICAgICAgICAgICByZXNpemUoKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZnVuY3Rpb24gbGlzdGVuRGV2aWNlUGl4ZWxSYXRpb0NoYW5nZXMoY2hhcnQsIHJlc2l6ZSkge1xuICAgIGlmICghZHJwTGlzdGVuaW5nQ2hhcnRzLnNpemUpIHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uV2luZG93UmVzaXplKTtcbiAgICB9XG4gICAgZHJwTGlzdGVuaW5nQ2hhcnRzLnNldChjaGFydCwgcmVzaXplKTtcbn1cbmZ1bmN0aW9uIHVubGlzdGVuRGV2aWNlUGl4ZWxSYXRpb0NoYW5nZXMoY2hhcnQpIHtcbiAgICBkcnBMaXN0ZW5pbmdDaGFydHMuZGVsZXRlKGNoYXJ0KTtcbiAgICBpZiAoIWRycExpc3RlbmluZ0NoYXJ0cy5zaXplKSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvbldpbmRvd1Jlc2l6ZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlUmVzaXplT2JzZXJ2ZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgY29uc3QgY2FudmFzID0gY2hhcnQuY2FudmFzO1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IGNhbnZhcyAmJiBfZ2V0UGFyZW50Tm9kZShjYW52YXMpO1xuICAgIGlmICghY29udGFpbmVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcmVzaXplID0gdGhyb3R0bGVkKCh3aWR0aCwgaGVpZ2h0KT0+e1xuICAgICAgICBjb25zdCB3ID0gY29udGFpbmVyLmNsaWVudFdpZHRoO1xuICAgICAgICBsaXN0ZW5lcih3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgaWYgKHcgPCBjb250YWluZXIuY2xpZW50V2lkdGgpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyKCk7XG4gICAgICAgIH1cbiAgICB9LCB3aW5kb3cpO1xuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKChlbnRyaWVzKT0+e1xuICAgICAgICBjb25zdCBlbnRyeSA9IGVudHJpZXNbMF07XG4gICAgICAgIGNvbnN0IHdpZHRoID0gZW50cnkuY29udGVudFJlY3Qud2lkdGg7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IGVudHJ5LmNvbnRlbnRSZWN0LmhlaWdodDtcbiAgICAgICAgaWYgKHdpZHRoID09PSAwICYmIGhlaWdodCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICB9KTtcbiAgICBvYnNlcnZlci5vYnNlcnZlKGNvbnRhaW5lcik7XG4gICAgbGlzdGVuRGV2aWNlUGl4ZWxSYXRpb0NoYW5nZXMoY2hhcnQsIHJlc2l6ZSk7XG4gICAgcmV0dXJuIG9ic2VydmVyO1xufVxuZnVuY3Rpb24gcmVsZWFzZU9ic2VydmVyKGNoYXJ0LCB0eXBlLCBvYnNlcnZlcikge1xuICAgIGlmIChvYnNlcnZlcikge1xuICAgICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSAncmVzaXplJykge1xuICAgICAgICB1bmxpc3RlbkRldmljZVBpeGVsUmF0aW9DaGFuZ2VzKGNoYXJ0KTtcbiAgICB9XG59XG5mdW5jdGlvbiBjcmVhdGVQcm94eUFuZExpc3RlbihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgICBjb25zdCBjYW52YXMgPSBjaGFydC5jYW52YXM7XG4gICAgY29uc3QgcHJveHkgPSB0aHJvdHRsZWQoKGV2ZW50KT0+e1xuICAgICAgICBpZiAoY2hhcnQuY3R4ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcihmcm9tTmF0aXZlRXZlbnQoZXZlbnQsIGNoYXJ0KSk7XG4gICAgICAgIH1cbiAgICB9LCBjaGFydCk7XG4gICAgYWRkTGlzdGVuZXIoY2FudmFzLCB0eXBlLCBwcm94eSk7XG4gICAgcmV0dXJuIHByb3h5O1xufVxuIGNsYXNzIERvbVBsYXRmb3JtIGV4dGVuZHMgQmFzZVBsYXRmb3JtIHtcbiBhY3F1aXJlQ29udGV4dChjYW52YXMsIGFzcGVjdFJhdGlvKSB7XG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBjYW52YXMgJiYgY2FudmFzLmdldENvbnRleHQgJiYgY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgIGlmIChjb250ZXh0ICYmIGNvbnRleHQuY2FudmFzID09PSBjYW52YXMpIHtcbiAgICAgICAgICAgIGluaXRDYW52YXMoY2FudmFzLCBhc3BlY3RSYXRpbyk7XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gcmVsZWFzZUNvbnRleHQoY29udGV4dCkge1xuICAgICAgICBjb25zdCBjYW52YXMgPSBjb250ZXh0LmNhbnZhcztcbiAgICAgICAgaWYgKCFjYW52YXNbRVhQQU5ET19LRVldKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW5pdGlhbCA9IGNhbnZhc1tFWFBBTkRPX0tFWV0uaW5pdGlhbDtcbiAgICAgICAgW1xuICAgICAgICAgICAgJ2hlaWdodCcsXG4gICAgICAgICAgICAnd2lkdGgnXG4gICAgICAgIF0uZm9yRWFjaCgocHJvcCk9PntcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gaW5pdGlhbFtwcm9wXTtcbiAgICAgICAgICAgIGlmIChpc051bGxPclVuZGVmKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGNhbnZhcy5yZW1vdmVBdHRyaWJ1dGUocHJvcCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNhbnZhcy5zZXRBdHRyaWJ1dGUocHJvcCwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgc3R5bGUgPSBpbml0aWFsLnN0eWxlIHx8IHt9O1xuICAgICAgICBPYmplY3Qua2V5cyhzdHlsZSkuZm9yRWFjaCgoa2V5KT0+e1xuICAgICAgICAgICAgY2FudmFzLnN0eWxlW2tleV0gPSBzdHlsZVtrZXldO1xuICAgICAgICB9KTtcbiAgICAgICAgY2FudmFzLndpZHRoID0gY2FudmFzLndpZHRoO1xuICAgICAgICBkZWxldGUgY2FudmFzW0VYUEFORE9fS0VZXTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuIGFkZEV2ZW50TGlzdGVuZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihjaGFydCwgdHlwZSk7XG4gICAgICAgIGNvbnN0IHByb3hpZXMgPSBjaGFydC4kcHJveGllcyB8fCAoY2hhcnQuJHByb3hpZXMgPSB7fSk7XG4gICAgICAgIGNvbnN0IGhhbmRsZXJzID0ge1xuICAgICAgICAgICAgYXR0YWNoOiBjcmVhdGVBdHRhY2hPYnNlcnZlcixcbiAgICAgICAgICAgIGRldGFjaDogY3JlYXRlRGV0YWNoT2JzZXJ2ZXIsXG4gICAgICAgICAgICByZXNpemU6IGNyZWF0ZVJlc2l6ZU9ic2VydmVyXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBoYW5kbGVyc1t0eXBlXSB8fCBjcmVhdGVQcm94eUFuZExpc3RlbjtcbiAgICAgICAgcHJveGllc1t0eXBlXSA9IGhhbmRsZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKTtcbiAgICB9XG4gcmVtb3ZlRXZlbnRMaXN0ZW5lcihjaGFydCwgdHlwZSkge1xuICAgICAgICBjb25zdCBwcm94aWVzID0gY2hhcnQuJHByb3hpZXMgfHwgKGNoYXJ0LiRwcm94aWVzID0ge30pO1xuICAgICAgICBjb25zdCBwcm94eSA9IHByb3hpZXNbdHlwZV07XG4gICAgICAgIGlmICghcHJveHkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBoYW5kbGVycyA9IHtcbiAgICAgICAgICAgIGF0dGFjaDogcmVsZWFzZU9ic2VydmVyLFxuICAgICAgICAgICAgZGV0YWNoOiByZWxlYXNlT2JzZXJ2ZXIsXG4gICAgICAgICAgICByZXNpemU6IHJlbGVhc2VPYnNlcnZlclxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBoYW5kbGVyID0gaGFuZGxlcnNbdHlwZV0gfHwgcmVtb3ZlTGlzdGVuZXI7XG4gICAgICAgIGhhbmRsZXIoY2hhcnQsIHR5cGUsIHByb3h5KTtcbiAgICAgICAgcHJveGllc1t0eXBlXSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZ2V0RGV2aWNlUGl4ZWxSYXRpbygpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICAgIH1cbiBnZXRNYXhpbXVtU2l6ZShjYW52YXMsIHdpZHRoLCBoZWlnaHQsIGFzcGVjdFJhdGlvKSB7XG4gICAgICAgIHJldHVybiBnZXRNYXhpbXVtU2l6ZShjYW52YXMsIHdpZHRoLCBoZWlnaHQsIGFzcGVjdFJhdGlvKTtcbiAgICB9XG4gaXNBdHRhY2hlZChjYW52YXMpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gX2dldFBhcmVudE5vZGUoY2FudmFzKTtcbiAgICAgICAgcmV0dXJuICEhKGNvbnRhaW5lciAmJiBjb250YWluZXIuaXNDb25uZWN0ZWQpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gX2RldGVjdFBsYXRmb3JtKGNhbnZhcykge1xuICAgIGlmICghX2lzRG9tU3VwcG9ydGVkKCkgfHwgdHlwZW9mIE9mZnNjcmVlbkNhbnZhcyAhPT0gJ3VuZGVmaW5lZCcgJiYgY2FudmFzIGluc3RhbmNlb2YgT2Zmc2NyZWVuQ2FudmFzKSB7XG4gICAgICAgIHJldHVybiBCYXNpY1BsYXRmb3JtO1xuICAgIH1cbiAgICByZXR1cm4gRG9tUGxhdGZvcm07XG59XG5cbmNsYXNzIEVsZW1lbnQge1xuICAgIHN0YXRpYyBkZWZhdWx0cyA9IHt9O1xuICAgIHN0YXRpYyBkZWZhdWx0Um91dGVzID0gdW5kZWZpbmVkO1xuICAgIHg7XG4gICAgeTtcbiAgICBhY3RpdmUgPSBmYWxzZTtcbiAgICBvcHRpb25zO1xuICAgICRhbmltYXRpb25zO1xuICAgIHRvb2x0aXBQb3NpdGlvbih1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgIGNvbnN0IHsgeCAsIHkgIH0gPSB0aGlzLmdldFByb3BzKFtcbiAgICAgICAgICAgICd4JyxcbiAgICAgICAgICAgICd5J1xuICAgICAgICBdLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHgsXG4gICAgICAgICAgICB5XG4gICAgICAgIH07XG4gICAgfVxuICAgIGhhc1ZhbHVlKCkge1xuICAgICAgICByZXR1cm4gaXNOdW1iZXIodGhpcy54KSAmJiBpc051bWJlcih0aGlzLnkpO1xuICAgIH1cbiAgICBnZXRQcm9wcyhwcm9wcywgZmluYWwpIHtcbiAgICAgICAgY29uc3QgYW5pbXMgPSB0aGlzLiRhbmltYXRpb25zO1xuICAgICAgICBpZiAoIWZpbmFsIHx8ICFhbmltcykge1xuICAgICAgICAgICAgLy8gbGV0J3Mgbm90IGNyZWF0ZSBhbiBvYmplY3QsIGlmIG5vdCBuZWVkZWRcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJldCA9IHt9O1xuICAgICAgICBwcm9wcy5mb3JFYWNoKChwcm9wKT0+e1xuICAgICAgICAgICAgcmV0W3Byb3BdID0gYW5pbXNbcHJvcF0gJiYgYW5pbXNbcHJvcF0uYWN0aXZlKCkgPyBhbmltc1twcm9wXS5fdG8gOiB0aGlzW3Byb3BdO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGF1dG9Ta2lwKHNjYWxlLCB0aWNrcykge1xuICAgIGNvbnN0IHRpY2tPcHRzID0gc2NhbGUub3B0aW9ucy50aWNrcztcbiAgICBjb25zdCBkZXRlcm1pbmVkTWF4VGlja3MgPSBkZXRlcm1pbmVNYXhUaWNrcyhzY2FsZSk7XG4gICAgY29uc3QgdGlja3NMaW1pdCA9IE1hdGgubWluKHRpY2tPcHRzLm1heFRpY2tzTGltaXQgfHwgZGV0ZXJtaW5lZE1heFRpY2tzLCBkZXRlcm1pbmVkTWF4VGlja3MpO1xuICAgIGNvbnN0IG1ham9ySW5kaWNlcyA9IHRpY2tPcHRzLm1ham9yLmVuYWJsZWQgPyBnZXRNYWpvckluZGljZXModGlja3MpIDogW107XG4gICAgY29uc3QgbnVtTWFqb3JJbmRpY2VzID0gbWFqb3JJbmRpY2VzLmxlbmd0aDtcbiAgICBjb25zdCBmaXJzdCA9IG1ham9ySW5kaWNlc1swXTtcbiAgICBjb25zdCBsYXN0ID0gbWFqb3JJbmRpY2VzW251bU1ham9ySW5kaWNlcyAtIDFdO1xuICAgIGNvbnN0IG5ld1RpY2tzID0gW107XG4gICAgaWYgKG51bU1ham9ySW5kaWNlcyA+IHRpY2tzTGltaXQpIHtcbiAgICAgICAgc2tpcE1ham9ycyh0aWNrcywgbmV3VGlja3MsIG1ham9ySW5kaWNlcywgbnVtTWFqb3JJbmRpY2VzIC8gdGlja3NMaW1pdCk7XG4gICAgICAgIHJldHVybiBuZXdUaWNrcztcbiAgICB9XG4gICAgY29uc3Qgc3BhY2luZyA9IGNhbGN1bGF0ZVNwYWNpbmcobWFqb3JJbmRpY2VzLCB0aWNrcywgdGlja3NMaW1pdCk7XG4gICAgaWYgKG51bU1ham9ySW5kaWNlcyA+IDApIHtcbiAgICAgICAgbGV0IGksIGlsZW47XG4gICAgICAgIGNvbnN0IGF2Z01ham9yU3BhY2luZyA9IG51bU1ham9ySW5kaWNlcyA+IDEgPyBNYXRoLnJvdW5kKChsYXN0IC0gZmlyc3QpIC8gKG51bU1ham9ySW5kaWNlcyAtIDEpKSA6IG51bGw7XG4gICAgICAgIHNraXAodGlja3MsIG5ld1RpY2tzLCBzcGFjaW5nLCBpc051bGxPclVuZGVmKGF2Z01ham9yU3BhY2luZykgPyAwIDogZmlyc3QgLSBhdmdNYWpvclNwYWNpbmcsIGZpcnN0KTtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gbnVtTWFqb3JJbmRpY2VzIC0gMTsgaSA8IGlsZW47IGkrKyl7XG4gICAgICAgICAgICBza2lwKHRpY2tzLCBuZXdUaWNrcywgc3BhY2luZywgbWFqb3JJbmRpY2VzW2ldLCBtYWpvckluZGljZXNbaSArIDFdKTtcbiAgICAgICAgfVxuICAgICAgICBza2lwKHRpY2tzLCBuZXdUaWNrcywgc3BhY2luZywgbGFzdCwgaXNOdWxsT3JVbmRlZihhdmdNYWpvclNwYWNpbmcpID8gdGlja3MubGVuZ3RoIDogbGFzdCArIGF2Z01ham9yU3BhY2luZyk7XG4gICAgICAgIHJldHVybiBuZXdUaWNrcztcbiAgICB9XG4gICAgc2tpcCh0aWNrcywgbmV3VGlja3MsIHNwYWNpbmcpO1xuICAgIHJldHVybiBuZXdUaWNrcztcbn1cbmZ1bmN0aW9uIGRldGVybWluZU1heFRpY2tzKHNjYWxlKSB7XG4gICAgY29uc3Qgb2Zmc2V0ID0gc2NhbGUub3B0aW9ucy5vZmZzZXQ7XG4gICAgY29uc3QgdGlja0xlbmd0aCA9IHNjYWxlLl90aWNrU2l6ZSgpO1xuICAgIGNvbnN0IG1heFNjYWxlID0gc2NhbGUuX2xlbmd0aCAvIHRpY2tMZW5ndGggKyAob2Zmc2V0ID8gMCA6IDEpO1xuICAgIGNvbnN0IG1heENoYXJ0ID0gc2NhbGUuX21heExlbmd0aCAvIHRpY2tMZW5ndGg7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5taW4obWF4U2NhbGUsIG1heENoYXJ0KSk7XG59XG4gZnVuY3Rpb24gY2FsY3VsYXRlU3BhY2luZyhtYWpvckluZGljZXMsIHRpY2tzLCB0aWNrc0xpbWl0KSB7XG4gICAgY29uc3QgZXZlbk1ham9yU3BhY2luZyA9IGdldEV2ZW5TcGFjaW5nKG1ham9ySW5kaWNlcyk7XG4gICAgY29uc3Qgc3BhY2luZyA9IHRpY2tzLmxlbmd0aCAvIHRpY2tzTGltaXQ7XG4gICAgaWYgKCFldmVuTWFqb3JTcGFjaW5nKSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1heChzcGFjaW5nLCAxKTtcbiAgICB9XG4gICAgY29uc3QgZmFjdG9ycyA9IF9mYWN0b3JpemUoZXZlbk1ham9yU3BhY2luZyk7XG4gICAgZm9yKGxldCBpID0gMCwgaWxlbiA9IGZhY3RvcnMubGVuZ3RoIC0gMTsgaSA8IGlsZW47IGkrKyl7XG4gICAgICAgIGNvbnN0IGZhY3RvciA9IGZhY3RvcnNbaV07XG4gICAgICAgIGlmIChmYWN0b3IgPiBzcGFjaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFjdG9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBNYXRoLm1heChzcGFjaW5nLCAxKTtcbn1cbiBmdW5jdGlvbiBnZXRNYWpvckluZGljZXModGlja3MpIHtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBsZXQgaSwgaWxlbjtcbiAgICBmb3IoaSA9IDAsIGlsZW4gPSB0aWNrcy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspe1xuICAgICAgICBpZiAodGlja3NbaV0ubWFqb3IpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4gZnVuY3Rpb24gc2tpcE1ham9ycyh0aWNrcywgbmV3VGlja3MsIG1ham9ySW5kaWNlcywgc3BhY2luZykge1xuICAgIGxldCBjb3VudCA9IDA7XG4gICAgbGV0IG5leHQgPSBtYWpvckluZGljZXNbMF07XG4gICAgbGV0IGk7XG4gICAgc3BhY2luZyA9IE1hdGguY2VpbChzcGFjaW5nKTtcbiAgICBmb3IoaSA9IDA7IGkgPCB0aWNrcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGlmIChpID09PSBuZXh0KSB7XG4gICAgICAgICAgICBuZXdUaWNrcy5wdXNoKHRpY2tzW2ldKTtcbiAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICBuZXh0ID0gbWFqb3JJbmRpY2VzW2NvdW50ICogc3BhY2luZ107XG4gICAgICAgIH1cbiAgICB9XG59XG4gZnVuY3Rpb24gc2tpcCh0aWNrcywgbmV3VGlja3MsIHNwYWNpbmcsIG1ham9yU3RhcnQsIG1ham9yRW5kKSB7XG4gICAgY29uc3Qgc3RhcnQgPSB2YWx1ZU9yRGVmYXVsdChtYWpvclN0YXJ0LCAwKTtcbiAgICBjb25zdCBlbmQgPSBNYXRoLm1pbih2YWx1ZU9yRGVmYXVsdChtYWpvckVuZCwgdGlja3MubGVuZ3RoKSwgdGlja3MubGVuZ3RoKTtcbiAgICBsZXQgY291bnQgPSAwO1xuICAgIGxldCBsZW5ndGgsIGksIG5leHQ7XG4gICAgc3BhY2luZyA9IE1hdGguY2VpbChzcGFjaW5nKTtcbiAgICBpZiAobWFqb3JFbmQpIHtcbiAgICAgICAgbGVuZ3RoID0gbWFqb3JFbmQgLSBtYWpvclN0YXJ0O1xuICAgICAgICBzcGFjaW5nID0gbGVuZ3RoIC8gTWF0aC5mbG9vcihsZW5ndGggLyBzcGFjaW5nKTtcbiAgICB9XG4gICAgbmV4dCA9IHN0YXJ0O1xuICAgIHdoaWxlKG5leHQgPCAwKXtcbiAgICAgICAgY291bnQrKztcbiAgICAgICAgbmV4dCA9IE1hdGgucm91bmQoc3RhcnQgKyBjb3VudCAqIHNwYWNpbmcpO1xuICAgIH1cbiAgICBmb3IoaSA9IE1hdGgubWF4KHN0YXJ0LCAwKTsgaSA8IGVuZDsgaSsrKXtcbiAgICAgICAgaWYgKGkgPT09IG5leHQpIHtcbiAgICAgICAgICAgIG5ld1RpY2tzLnB1c2godGlja3NbaV0pO1xuICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgIG5leHQgPSBNYXRoLnJvdW5kKHN0YXJ0ICsgY291bnQgKiBzcGFjaW5nKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiBmdW5jdGlvbiBnZXRFdmVuU3BhY2luZyhhcnIpIHtcbiAgICBjb25zdCBsZW4gPSBhcnIubGVuZ3RoO1xuICAgIGxldCBpLCBkaWZmO1xuICAgIGlmIChsZW4gPCAyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yKGRpZmYgPSBhcnJbMF0sIGkgPSAxOyBpIDwgbGVuOyArK2kpe1xuICAgICAgICBpZiAoYXJyW2ldIC0gYXJyW2kgLSAxXSAhPT0gZGlmZikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkaWZmO1xufVxuXG5jb25zdCByZXZlcnNlQWxpZ24gPSAoYWxpZ24pPT5hbGlnbiA9PT0gJ2xlZnQnID8gJ3JpZ2h0JyA6IGFsaWduID09PSAncmlnaHQnID8gJ2xlZnQnIDogYWxpZ247XG5jb25zdCBvZmZzZXRGcm9tRWRnZSA9IChzY2FsZSwgZWRnZSwgb2Zmc2V0KT0+ZWRnZSA9PT0gJ3RvcCcgfHwgZWRnZSA9PT0gJ2xlZnQnID8gc2NhbGVbZWRnZV0gKyBvZmZzZXQgOiBzY2FsZVtlZGdlXSAtIG9mZnNldDtcbmNvbnN0IGdldFRpY2tzTGltaXQgPSAodGlja3NMZW5ndGgsIG1heFRpY2tzTGltaXQpPT5NYXRoLm1pbihtYXhUaWNrc0xpbWl0IHx8IHRpY2tzTGVuZ3RoLCB0aWNrc0xlbmd0aCk7XG4gZnVuY3Rpb24gc2FtcGxlKGFyciwgbnVtSXRlbXMpIHtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBjb25zdCBpbmNyZW1lbnQgPSBhcnIubGVuZ3RoIC8gbnVtSXRlbXM7XG4gICAgY29uc3QgbGVuID0gYXJyLmxlbmd0aDtcbiAgICBsZXQgaSA9IDA7XG4gICAgZm9yKDsgaSA8IGxlbjsgaSArPSBpbmNyZW1lbnQpe1xuICAgICAgICByZXN1bHQucHVzaChhcnJbTWF0aC5mbG9vcihpKV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIGZ1bmN0aW9uIGdldFBpeGVsRm9yR3JpZExpbmUoc2NhbGUsIGluZGV4LCBvZmZzZXRHcmlkTGluZXMpIHtcbiAgICBjb25zdCBsZW5ndGggPSBzY2FsZS50aWNrcy5sZW5ndGg7XG4gICAgY29uc3QgdmFsaWRJbmRleCA9IE1hdGgubWluKGluZGV4LCBsZW5ndGggLSAxKTtcbiAgICBjb25zdCBzdGFydCA9IHNjYWxlLl9zdGFydFBpeGVsO1xuICAgIGNvbnN0IGVuZCA9IHNjYWxlLl9lbmRQaXhlbDtcbiAgICBjb25zdCBlcHNpbG9uID0gMWUtNjtcbiAgICBsZXQgbGluZVZhbHVlID0gc2NhbGUuZ2V0UGl4ZWxGb3JUaWNrKHZhbGlkSW5kZXgpO1xuICAgIGxldCBvZmZzZXQ7XG4gICAgaWYgKG9mZnNldEdyaWRMaW5lcykge1xuICAgICAgICBpZiAobGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBvZmZzZXQgPSBNYXRoLm1heChsaW5lVmFsdWUgLSBzdGFydCwgZW5kIC0gbGluZVZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgb2Zmc2V0ID0gKHNjYWxlLmdldFBpeGVsRm9yVGljaygxKSAtIGxpbmVWYWx1ZSkgLyAyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2Zmc2V0ID0gKGxpbmVWYWx1ZSAtIHNjYWxlLmdldFBpeGVsRm9yVGljayh2YWxpZEluZGV4IC0gMSkpIC8gMjtcbiAgICAgICAgfVxuICAgICAgICBsaW5lVmFsdWUgKz0gdmFsaWRJbmRleCA8IGluZGV4ID8gb2Zmc2V0IDogLW9mZnNldDtcbiAgICAgICAgaWYgKGxpbmVWYWx1ZSA8IHN0YXJ0IC0gZXBzaWxvbiB8fCBsaW5lVmFsdWUgPiBlbmQgKyBlcHNpbG9uKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxpbmVWYWx1ZTtcbn1cbiBmdW5jdGlvbiBnYXJiYWdlQ29sbGVjdChjYWNoZXMsIGxlbmd0aCkge1xuICAgIGVhY2goY2FjaGVzLCAoY2FjaGUpPT57XG4gICAgICAgIGNvbnN0IGdjID0gY2FjaGUuZ2M7XG4gICAgICAgIGNvbnN0IGdjTGVuID0gZ2MubGVuZ3RoIC8gMjtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGlmIChnY0xlbiA+IGxlbmd0aCkge1xuICAgICAgICAgICAgZm9yKGkgPSAwOyBpIDwgZ2NMZW47ICsraSl7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGNhY2hlLmRhdGFbZ2NbaV1dO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ2Muc3BsaWNlKDAsIGdjTGVuKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuIGZ1bmN0aW9uIGdldFRpY2tNYXJrTGVuZ3RoKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5kcmF3VGlja3MgPyBvcHRpb25zLnRpY2tMZW5ndGggOiAwO1xufVxuIGZ1bmN0aW9uIGdldFRpdGxlSGVpZ2h0KG9wdGlvbnMsIGZhbGxiYWNrKSB7XG4gICAgaWYgKCFvcHRpb25zLmRpc3BsYXkpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGNvbnN0IGZvbnQgPSB0b0ZvbnQob3B0aW9ucy5mb250LCBmYWxsYmFjayk7XG4gICAgY29uc3QgcGFkZGluZyA9IHRvUGFkZGluZyhvcHRpb25zLnBhZGRpbmcpO1xuICAgIGNvbnN0IGxpbmVzID0gaXNBcnJheShvcHRpb25zLnRleHQpID8gb3B0aW9ucy50ZXh0Lmxlbmd0aCA6IDE7XG4gICAgcmV0dXJuIGxpbmVzICogZm9udC5saW5lSGVpZ2h0ICsgcGFkZGluZy5oZWlnaHQ7XG59XG5mdW5jdGlvbiBjcmVhdGVTY2FsZUNvbnRleHQocGFyZW50LCBzY2FsZSkge1xuICAgIHJldHVybiBjcmVhdGVDb250ZXh0KHBhcmVudCwge1xuICAgICAgICBzY2FsZSxcbiAgICAgICAgdHlwZTogJ3NjYWxlJ1xuICAgIH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlVGlja0NvbnRleHQocGFyZW50LCBpbmRleCwgdGljaykge1xuICAgIHJldHVybiBjcmVhdGVDb250ZXh0KHBhcmVudCwge1xuICAgICAgICB0aWNrLFxuICAgICAgICBpbmRleCxcbiAgICAgICAgdHlwZTogJ3RpY2snXG4gICAgfSk7XG59XG5mdW5jdGlvbiB0aXRsZUFsaWduKGFsaWduLCBwb3NpdGlvbiwgcmV2ZXJzZSkge1xuICAgICBsZXQgcmV0ID0gX3RvTGVmdFJpZ2h0Q2VudGVyKGFsaWduKTtcbiAgICBpZiAocmV2ZXJzZSAmJiBwb3NpdGlvbiAhPT0gJ3JpZ2h0JyB8fCAhcmV2ZXJzZSAmJiBwb3NpdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICByZXQgPSByZXZlcnNlQWxpZ24ocmV0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn1cbmZ1bmN0aW9uIHRpdGxlQXJncyhzY2FsZSwgb2Zmc2V0LCBwb3NpdGlvbiwgYWxpZ24pIHtcbiAgICBjb25zdCB7IHRvcCAsIGxlZnQgLCBib3R0b20gLCByaWdodCAsIGNoYXJ0ICB9ID0gc2NhbGU7XG4gICAgY29uc3QgeyBjaGFydEFyZWEgLCBzY2FsZXMgIH0gPSBjaGFydDtcbiAgICBsZXQgcm90YXRpb24gPSAwO1xuICAgIGxldCBtYXhXaWR0aCwgdGl0bGVYLCB0aXRsZVk7XG4gICAgY29uc3QgaGVpZ2h0ID0gYm90dG9tIC0gdG9wO1xuICAgIGNvbnN0IHdpZHRoID0gcmlnaHQgLSBsZWZ0O1xuICAgIGlmIChzY2FsZS5pc0hvcml6b250YWwoKSkge1xuICAgICAgICB0aXRsZVggPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgbGVmdCwgcmlnaHQpO1xuICAgICAgICBpZiAoaXNPYmplY3QocG9zaXRpb24pKSB7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbkF4aXNJRCA9IE9iamVjdC5rZXlzKHBvc2l0aW9uKVswXTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcG9zaXRpb25bcG9zaXRpb25BeGlzSURdO1xuICAgICAgICAgICAgdGl0bGVZID0gc2NhbGVzW3Bvc2l0aW9uQXhpc0lEXS5nZXRQaXhlbEZvclZhbHVlKHZhbHVlKSArIGhlaWdodCAtIG9mZnNldDtcbiAgICAgICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgIHRpdGxlWSA9IChjaGFydEFyZWEuYm90dG9tICsgY2hhcnRBcmVhLnRvcCkgLyAyICsgaGVpZ2h0IC0gb2Zmc2V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGl0bGVZID0gb2Zmc2V0RnJvbUVkZ2Uoc2NhbGUsIHBvc2l0aW9uLCBvZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIG1heFdpZHRoID0gcmlnaHQgLSBsZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc09iamVjdChwb3NpdGlvbikpIHtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uQXhpc0lEID0gT2JqZWN0LmtleXMocG9zaXRpb24pWzBdO1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBwb3NpdGlvbltwb3NpdGlvbkF4aXNJRF07XG4gICAgICAgICAgICB0aXRsZVggPSBzY2FsZXNbcG9zaXRpb25BeGlzSURdLmdldFBpeGVsRm9yVmFsdWUodmFsdWUpIC0gd2lkdGggKyBvZmZzZXQ7XG4gICAgICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICB0aXRsZVggPSAoY2hhcnRBcmVhLmxlZnQgKyBjaGFydEFyZWEucmlnaHQpIC8gMiAtIHdpZHRoICsgb2Zmc2V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGl0bGVYID0gb2Zmc2V0RnJvbUVkZ2Uoc2NhbGUsIHBvc2l0aW9uLCBvZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIHRpdGxlWSA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCBib3R0b20sIHRvcCk7XG4gICAgICAgIHJvdGF0aW9uID0gcG9zaXRpb24gPT09ICdsZWZ0JyA/IC1IQUxGX1BJIDogSEFMRl9QSTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGl0bGVYLFxuICAgICAgICB0aXRsZVksXG4gICAgICAgIG1heFdpZHRoLFxuICAgICAgICByb3RhdGlvblxuICAgIH07XG59XG5jbGFzcyBTY2FsZSBleHRlbmRzIEVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKGNmZyl7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgICB0aGlzLmlkID0gY2ZnLmlkO1xuICAgICAgICAgdGhpcy50eXBlID0gY2ZnLnR5cGU7XG4gICAgICAgICB0aGlzLm9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLmN0eCA9IGNmZy5jdHg7XG4gICAgICAgICB0aGlzLmNoYXJ0ID0gY2ZnLmNoYXJ0O1xuICAgICAgICAgdGhpcy50b3AgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLmJvdHRvbSA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMubGVmdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMucmlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLndpZHRoID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5oZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX21hcmdpbnMgPSB7XG4gICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICBib3R0b206IDBcbiAgICAgICAgfTtcbiAgICAgICAgIHRoaXMubWF4V2lkdGggPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLm1heEhlaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMucGFkZGluZ1RvcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMucGFkZGluZ0JvdHRvbSA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMucGFkZGluZ0xlZnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLnBhZGRpbmdSaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMuYXhpcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMubGFiZWxSb3RhdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5taW4gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubWF4ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9yYW5nZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMudGlja3MgPSBbXTtcbiAgICAgICAgIHRoaXMuX2dyaWRMaW5lSXRlbXMgPSBudWxsO1xuICAgICAgICAgdGhpcy5fbGFiZWxJdGVtcyA9IG51bGw7XG4gICAgICAgICB0aGlzLl9sYWJlbFNpemVzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fbGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5fbWF4TGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5fbG9uZ2VzdFRleHRDYWNoZSA9IHt9O1xuICAgICAgICAgdGhpcy5fc3RhcnRQaXhlbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMuX2VuZFBpeGVsID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9yZXZlcnNlUGl4ZWxzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3VzZXJNYXggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3VzZXJNaW4gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3N1Z2dlc3RlZE1heCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fc3VnZ2VzdGVkTWluID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl90aWNrc0xlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuX2JvcmRlclZhbHVlID0gMDtcbiAgICAgICAgdGhpcy5fY2FjaGUgPSB7fTtcbiAgICAgICAgdGhpcy5fZGF0YUxpbWl0c0NhY2hlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLiRjb250ZXh0ID0gdW5kZWZpbmVkO1xuICAgIH1cbiBpbml0KG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucy5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICAgICAgdGhpcy5heGlzID0gb3B0aW9ucy5heGlzO1xuICAgICAgICB0aGlzLl91c2VyTWluID0gdGhpcy5wYXJzZShvcHRpb25zLm1pbik7XG4gICAgICAgIHRoaXMuX3VzZXJNYXggPSB0aGlzLnBhcnNlKG9wdGlvbnMubWF4KTtcbiAgICAgICAgdGhpcy5fc3VnZ2VzdGVkTWluID0gdGhpcy5wYXJzZShvcHRpb25zLnN1Z2dlc3RlZE1pbik7XG4gICAgICAgIHRoaXMuX3N1Z2dlc3RlZE1heCA9IHRoaXMucGFyc2Uob3B0aW9ucy5zdWdnZXN0ZWRNYXgpO1xuICAgIH1cbiBwYXJzZShyYXcsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiByYXc7XG4gICAgfVxuIGdldFVzZXJCb3VuZHMoKSB7XG4gICAgICAgIGxldCB7IF91c2VyTWluICwgX3VzZXJNYXggLCBfc3VnZ2VzdGVkTWluICwgX3N1Z2dlc3RlZE1heCAgfSA9IHRoaXM7XG4gICAgICAgIF91c2VyTWluID0gZmluaXRlT3JEZWZhdWx0KF91c2VyTWluLCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpO1xuICAgICAgICBfdXNlck1heCA9IGZpbml0ZU9yRGVmYXVsdChfdXNlck1heCwgTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZKTtcbiAgICAgICAgX3N1Z2dlc3RlZE1pbiA9IGZpbml0ZU9yRGVmYXVsdChfc3VnZ2VzdGVkTWluLCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpO1xuICAgICAgICBfc3VnZ2VzdGVkTWF4ID0gZmluaXRlT3JEZWZhdWx0KF9zdWdnZXN0ZWRNYXgsIE51bWJlci5ORUdBVElWRV9JTkZJTklUWSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtaW46IGZpbml0ZU9yRGVmYXVsdChfdXNlck1pbiwgX3N1Z2dlc3RlZE1pbiksXG4gICAgICAgICAgICBtYXg6IGZpbml0ZU9yRGVmYXVsdChfdXNlck1heCwgX3N1Z2dlc3RlZE1heCksXG4gICAgICAgICAgICBtaW5EZWZpbmVkOiBpc051bWJlckZpbml0ZShfdXNlck1pbiksXG4gICAgICAgICAgICBtYXhEZWZpbmVkOiBpc051bWJlckZpbml0ZShfdXNlck1heClcbiAgICAgICAgfTtcbiAgICB9XG4gZ2V0TWluTWF4KGNhblN0YWNrKSB7XG4gICAgICAgIGxldCB7IG1pbiAsIG1heCAsIG1pbkRlZmluZWQgLCBtYXhEZWZpbmVkICB9ID0gdGhpcy5nZXRVc2VyQm91bmRzKCk7XG4gICAgICAgIGxldCByYW5nZTtcbiAgICAgICAgaWYgKG1pbkRlZmluZWQgJiYgbWF4RGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtaW4sXG4gICAgICAgICAgICAgICAgbWF4XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGFzID0gdGhpcy5nZXRNYXRjaGluZ1Zpc2libGVNZXRhcygpO1xuICAgICAgICBmb3IobGV0IGkgPSAwLCBpbGVuID0gbWV0YXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIHJhbmdlID0gbWV0YXNbaV0uY29udHJvbGxlci5nZXRNaW5NYXgodGhpcywgY2FuU3RhY2spO1xuICAgICAgICAgICAgaWYgKCFtaW5EZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbWluID0gTWF0aC5taW4obWluLCByYW5nZS5taW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFtYXhEZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCByYW5nZS5tYXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG1pbiA9IG1heERlZmluZWQgJiYgbWluID4gbWF4ID8gbWF4IDogbWluO1xuICAgICAgICBtYXggPSBtaW5EZWZpbmVkICYmIG1pbiA+IG1heCA/IG1pbiA6IG1heDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1pbjogZmluaXRlT3JEZWZhdWx0KG1pbiwgZmluaXRlT3JEZWZhdWx0KG1heCwgbWluKSksXG4gICAgICAgICAgICBtYXg6IGZpbml0ZU9yRGVmYXVsdChtYXgsIGZpbml0ZU9yRGVmYXVsdChtaW4sIG1heCkpXG4gICAgICAgIH07XG4gICAgfVxuIGdldFBhZGRpbmcoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsZWZ0OiB0aGlzLnBhZGRpbmdMZWZ0IHx8IDAsXG4gICAgICAgICAgICB0b3A6IHRoaXMucGFkZGluZ1RvcCB8fCAwLFxuICAgICAgICAgICAgcmlnaHQ6IHRoaXMucGFkZGluZ1JpZ2h0IHx8IDAsXG4gICAgICAgICAgICBib3R0b206IHRoaXMucGFkZGluZ0JvdHRvbSB8fCAwXG4gICAgICAgIH07XG4gICAgfVxuIGdldFRpY2tzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50aWNrcztcbiAgICB9XG4gZ2V0TGFiZWxzKCkge1xuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5jaGFydC5kYXRhO1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmxhYmVscyB8fCAodGhpcy5pc0hvcml6b250YWwoKSA/IGRhdGEueExhYmVscyA6IGRhdGEueUxhYmVscykgfHwgZGF0YS5sYWJlbHMgfHwgW107XG4gICAgfVxuIGdldExhYmVsSXRlbXMoY2hhcnRBcmVhID0gdGhpcy5jaGFydC5jaGFydEFyZWEpIHtcbiAgICAgICAgY29uc3QgaXRlbXMgPSB0aGlzLl9sYWJlbEl0ZW1zIHx8ICh0aGlzLl9sYWJlbEl0ZW1zID0gdGhpcy5fY29tcHV0ZUxhYmVsSXRlbXMoY2hhcnRBcmVhKSk7XG4gICAgICAgIHJldHVybiBpdGVtcztcbiAgICB9XG4gICAgYmVmb3JlTGF5b3V0KCkge1xuICAgICAgICB0aGlzLl9jYWNoZSA9IHt9O1xuICAgICAgICB0aGlzLl9kYXRhTGltaXRzQ2FjaGVkID0gZmFsc2U7XG4gICAgfVxuICAgIGJlZm9yZVVwZGF0ZSgpIHtcbiAgICAgICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZVVwZGF0ZSwgW1xuICAgICAgICAgICAgdGhpc1xuICAgICAgICBdKTtcbiAgICB9XG4gdXBkYXRlKG1heFdpZHRoLCBtYXhIZWlnaHQsIG1hcmdpbnMpIHtcbiAgICAgICAgY29uc3QgeyBiZWdpbkF0WmVybyAsIGdyYWNlICwgdGlja3M6IHRpY2tPcHRzICB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBzYW1wbGVTaXplID0gdGlja09wdHMuc2FtcGxlU2l6ZTtcbiAgICAgICAgdGhpcy5iZWZvcmVVcGRhdGUoKTtcbiAgICAgICAgdGhpcy5tYXhXaWR0aCA9IG1heFdpZHRoO1xuICAgICAgICB0aGlzLm1heEhlaWdodCA9IG1heEhlaWdodDtcbiAgICAgICAgdGhpcy5fbWFyZ2lucyA9IG1hcmdpbnMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgIGJvdHRvbTogMFxuICAgICAgICB9LCBtYXJnaW5zKTtcbiAgICAgICAgdGhpcy50aWNrcyA9IG51bGw7XG4gICAgICAgIHRoaXMuX2xhYmVsU2l6ZXMgPSBudWxsO1xuICAgICAgICB0aGlzLl9ncmlkTGluZUl0ZW1zID0gbnVsbDtcbiAgICAgICAgdGhpcy5fbGFiZWxJdGVtcyA9IG51bGw7XG4gICAgICAgIHRoaXMuYmVmb3JlU2V0RGltZW5zaW9ucygpO1xuICAgICAgICB0aGlzLnNldERpbWVuc2lvbnMoKTtcbiAgICAgICAgdGhpcy5hZnRlclNldERpbWVuc2lvbnMoKTtcbiAgICAgICAgdGhpcy5fbWF4TGVuZ3RoID0gdGhpcy5pc0hvcml6b250YWwoKSA/IHRoaXMud2lkdGggKyBtYXJnaW5zLmxlZnQgKyBtYXJnaW5zLnJpZ2h0IDogdGhpcy5oZWlnaHQgKyBtYXJnaW5zLnRvcCArIG1hcmdpbnMuYm90dG9tO1xuICAgICAgICBpZiAoIXRoaXMuX2RhdGFMaW1pdHNDYWNoZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYmVmb3JlRGF0YUxpbWl0cygpO1xuICAgICAgICAgICAgdGhpcy5kZXRlcm1pbmVEYXRhTGltaXRzKCk7XG4gICAgICAgICAgICB0aGlzLmFmdGVyRGF0YUxpbWl0cygpO1xuICAgICAgICAgICAgdGhpcy5fcmFuZ2UgPSBfYWRkR3JhY2UodGhpcywgZ3JhY2UsIGJlZ2luQXRaZXJvKTtcbiAgICAgICAgICAgIHRoaXMuX2RhdGFMaW1pdHNDYWNoZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYmVmb3JlQnVpbGRUaWNrcygpO1xuICAgICAgICB0aGlzLnRpY2tzID0gdGhpcy5idWlsZFRpY2tzKCkgfHwgW107XG4gICAgICAgIHRoaXMuYWZ0ZXJCdWlsZFRpY2tzKCk7XG4gICAgICAgIGNvbnN0IHNhbXBsaW5nRW5hYmxlZCA9IHNhbXBsZVNpemUgPCB0aGlzLnRpY2tzLmxlbmd0aDtcbiAgICAgICAgdGhpcy5fY29udmVydFRpY2tzVG9MYWJlbHMoc2FtcGxpbmdFbmFibGVkID8gc2FtcGxlKHRoaXMudGlja3MsIHNhbXBsZVNpemUpIDogdGhpcy50aWNrcyk7XG4gICAgICAgIHRoaXMuY29uZmlndXJlKCk7XG4gICAgICAgIHRoaXMuYmVmb3JlQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbigpO1xuICAgICAgICB0aGlzLmNhbGN1bGF0ZUxhYmVsUm90YXRpb24oKTtcbiAgICAgICAgdGhpcy5hZnRlckNhbGN1bGF0ZUxhYmVsUm90YXRpb24oKTtcbiAgICAgICAgaWYgKHRpY2tPcHRzLmRpc3BsYXkgJiYgKHRpY2tPcHRzLmF1dG9Ta2lwIHx8IHRpY2tPcHRzLnNvdXJjZSA9PT0gJ2F1dG8nKSkge1xuICAgICAgICAgICAgdGhpcy50aWNrcyA9IGF1dG9Ta2lwKHRoaXMsIHRoaXMudGlja3MpO1xuICAgICAgICAgICAgdGhpcy5fbGFiZWxTaXplcyA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmFmdGVyQXV0b1NraXAoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2FtcGxpbmdFbmFibGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9jb252ZXJ0VGlja3NUb0xhYmVscyh0aGlzLnRpY2tzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJlZm9yZUZpdCgpO1xuICAgICAgICB0aGlzLmZpdCgpO1xuICAgICAgICB0aGlzLmFmdGVyRml0KCk7XG4gICAgICAgIHRoaXMuYWZ0ZXJVcGRhdGUoKTtcbiAgICB9XG4gY29uZmlndXJlKCkge1xuICAgICAgICBsZXQgcmV2ZXJzZVBpeGVscyA9IHRoaXMub3B0aW9ucy5yZXZlcnNlO1xuICAgICAgICBsZXQgc3RhcnRQaXhlbCwgZW5kUGl4ZWw7XG4gICAgICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICBzdGFydFBpeGVsID0gdGhpcy5sZWZ0O1xuICAgICAgICAgICAgZW5kUGl4ZWwgPSB0aGlzLnJpZ2h0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RhcnRQaXhlbCA9IHRoaXMudG9wO1xuICAgICAgICAgICAgZW5kUGl4ZWwgPSB0aGlzLmJvdHRvbTtcbiAgICAgICAgICAgIHJldmVyc2VQaXhlbHMgPSAhcmV2ZXJzZVBpeGVscztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zdGFydFBpeGVsID0gc3RhcnRQaXhlbDtcbiAgICAgICAgdGhpcy5fZW5kUGl4ZWwgPSBlbmRQaXhlbDtcbiAgICAgICAgdGhpcy5fcmV2ZXJzZVBpeGVscyA9IHJldmVyc2VQaXhlbHM7XG4gICAgICAgIHRoaXMuX2xlbmd0aCA9IGVuZFBpeGVsIC0gc3RhcnRQaXhlbDtcbiAgICAgICAgdGhpcy5fYWxpZ25Ub1BpeGVscyA9IHRoaXMub3B0aW9ucy5hbGlnblRvUGl4ZWxzO1xuICAgIH1cbiAgICBhZnRlclVwZGF0ZSgpIHtcbiAgICAgICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyVXBkYXRlLCBbXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBiZWZvcmVTZXREaW1lbnNpb25zKCkge1xuICAgICAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlU2V0RGltZW5zaW9ucywgW1xuICAgICAgICAgICAgdGhpc1xuICAgICAgICBdKTtcbiAgICB9XG4gICAgc2V0RGltZW5zaW9ucygpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSB0aGlzLm1heFdpZHRoO1xuICAgICAgICAgICAgdGhpcy5sZWZ0ID0gMDtcbiAgICAgICAgICAgIHRoaXMucmlnaHQgPSB0aGlzLndpZHRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLm1heEhlaWdodDtcbiAgICAgICAgICAgIHRoaXMudG9wID0gMDtcbiAgICAgICAgICAgIHRoaXMuYm90dG9tID0gdGhpcy5oZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYWRkaW5nTGVmdCA9IDA7XG4gICAgICAgIHRoaXMucGFkZGluZ1RvcCA9IDA7XG4gICAgICAgIHRoaXMucGFkZGluZ1JpZ2h0ID0gMDtcbiAgICAgICAgdGhpcy5wYWRkaW5nQm90dG9tID0gMDtcbiAgICB9XG4gICAgYWZ0ZXJTZXREaW1lbnNpb25zKCkge1xuICAgICAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYWZ0ZXJTZXREaW1lbnNpb25zLCBbXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBfY2FsbEhvb2tzKG5hbWUpIHtcbiAgICAgICAgdGhpcy5jaGFydC5ub3RpZnlQbHVnaW5zKG5hbWUsIHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICAgICAgY2FsbGJhY2sodGhpcy5vcHRpb25zW25hbWVdLCBbXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBiZWZvcmVEYXRhTGltaXRzKCkge1xuICAgICAgICB0aGlzLl9jYWxsSG9va3MoJ2JlZm9yZURhdGFMaW1pdHMnKTtcbiAgICB9XG4gICAgZGV0ZXJtaW5lRGF0YUxpbWl0cygpIHt9XG4gICAgYWZ0ZXJEYXRhTGltaXRzKCkge1xuICAgICAgICB0aGlzLl9jYWxsSG9va3MoJ2FmdGVyRGF0YUxpbWl0cycpO1xuICAgIH1cbiAgICBiZWZvcmVCdWlsZFRpY2tzKCkge1xuICAgICAgICB0aGlzLl9jYWxsSG9va3MoJ2JlZm9yZUJ1aWxkVGlja3MnKTtcbiAgICB9XG4gYnVpbGRUaWNrcygpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBhZnRlckJ1aWxkVGlja3MoKSB7XG4gICAgICAgIHRoaXMuX2NhbGxIb29rcygnYWZ0ZXJCdWlsZFRpY2tzJyk7XG4gICAgfVxuICAgIGJlZm9yZVRpY2tUb0xhYmVsQ29udmVyc2lvbigpIHtcbiAgICAgICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZVRpY2tUb0xhYmVsQ29udmVyc2lvbiwgW1xuICAgICAgICAgICAgdGhpc1xuICAgICAgICBdKTtcbiAgICB9XG4gZ2VuZXJhdGVUaWNrTGFiZWxzKHRpY2tzKSB7XG4gICAgICAgIGNvbnN0IHRpY2tPcHRzID0gdGhpcy5vcHRpb25zLnRpY2tzO1xuICAgICAgICBsZXQgaSwgaWxlbiwgdGljaztcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gdGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKXtcbiAgICAgICAgICAgIHRpY2sgPSB0aWNrc1tpXTtcbiAgICAgICAgICAgIHRpY2subGFiZWwgPSBjYWxsYmFjayh0aWNrT3B0cy5jYWxsYmFjaywgW1xuICAgICAgICAgICAgICAgIHRpY2sudmFsdWUsXG4gICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICB0aWNrc1xuICAgICAgICAgICAgXSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWZ0ZXJUaWNrVG9MYWJlbENvbnZlcnNpb24oKSB7XG4gICAgICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbiwgW1xuICAgICAgICAgICAgdGhpc1xuICAgICAgICBdKTtcbiAgICB9XG4gICAgYmVmb3JlQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbigpIHtcbiAgICAgICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZUNhbGN1bGF0ZUxhYmVsUm90YXRpb24sIFtcbiAgICAgICAgICAgIHRoaXNcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGNhbGN1bGF0ZUxhYmVsUm90YXRpb24oKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHRpY2tPcHRzID0gb3B0aW9ucy50aWNrcztcbiAgICAgICAgY29uc3QgbnVtVGlja3MgPSBnZXRUaWNrc0xpbWl0KHRoaXMudGlja3MubGVuZ3RoLCBvcHRpb25zLnRpY2tzLm1heFRpY2tzTGltaXQpO1xuICAgICAgICBjb25zdCBtaW5Sb3RhdGlvbiA9IHRpY2tPcHRzLm1pblJvdGF0aW9uIHx8IDA7XG4gICAgICAgIGNvbnN0IG1heFJvdGF0aW9uID0gdGlja09wdHMubWF4Um90YXRpb247XG4gICAgICAgIGxldCBsYWJlbFJvdGF0aW9uID0gbWluUm90YXRpb247XG4gICAgICAgIGxldCB0aWNrV2lkdGgsIG1heEhlaWdodCwgbWF4TGFiZWxEaWFnb25hbDtcbiAgICAgICAgaWYgKCF0aGlzLl9pc1Zpc2libGUoKSB8fCAhdGlja09wdHMuZGlzcGxheSB8fCBtaW5Sb3RhdGlvbiA+PSBtYXhSb3RhdGlvbiB8fCBudW1UaWNrcyA8PSAxIHx8ICF0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICB0aGlzLmxhYmVsUm90YXRpb24gPSBtaW5Sb3RhdGlvbjtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYWJlbFNpemVzID0gdGhpcy5fZ2V0TGFiZWxTaXplcygpO1xuICAgICAgICBjb25zdCBtYXhMYWJlbFdpZHRoID0gbGFiZWxTaXplcy53aWRlc3Qud2lkdGg7XG4gICAgICAgIGNvbnN0IG1heExhYmVsSGVpZ2h0ID0gbGFiZWxTaXplcy5oaWdoZXN0LmhlaWdodDtcbiAgICAgICAgY29uc3QgbWF4V2lkdGggPSBfbGltaXRWYWx1ZSh0aGlzLmNoYXJ0LndpZHRoIC0gbWF4TGFiZWxXaWR0aCwgMCwgdGhpcy5tYXhXaWR0aCk7XG4gICAgICAgIHRpY2tXaWR0aCA9IG9wdGlvbnMub2Zmc2V0ID8gdGhpcy5tYXhXaWR0aCAvIG51bVRpY2tzIDogbWF4V2lkdGggLyAobnVtVGlja3MgLSAxKTtcbiAgICAgICAgaWYgKG1heExhYmVsV2lkdGggKyA2ID4gdGlja1dpZHRoKSB7XG4gICAgICAgICAgICB0aWNrV2lkdGggPSBtYXhXaWR0aCAvIChudW1UaWNrcyAtIChvcHRpb25zLm9mZnNldCA/IDAuNSA6IDEpKTtcbiAgICAgICAgICAgIG1heEhlaWdodCA9IHRoaXMubWF4SGVpZ2h0IC0gZ2V0VGlja01hcmtMZW5ndGgob3B0aW9ucy5ncmlkKSAtIHRpY2tPcHRzLnBhZGRpbmcgLSBnZXRUaXRsZUhlaWdodChvcHRpb25zLnRpdGxlLCB0aGlzLmNoYXJ0Lm9wdGlvbnMuZm9udCk7XG4gICAgICAgICAgICBtYXhMYWJlbERpYWdvbmFsID0gTWF0aC5zcXJ0KG1heExhYmVsV2lkdGggKiBtYXhMYWJlbFdpZHRoICsgbWF4TGFiZWxIZWlnaHQgKiBtYXhMYWJlbEhlaWdodCk7XG4gICAgICAgICAgICBsYWJlbFJvdGF0aW9uID0gdG9EZWdyZWVzKE1hdGgubWluKE1hdGguYXNpbihfbGltaXRWYWx1ZSgobGFiZWxTaXplcy5oaWdoZXN0LmhlaWdodCArIDYpIC8gdGlja1dpZHRoLCAtMSwgMSkpLCBNYXRoLmFzaW4oX2xpbWl0VmFsdWUobWF4SGVpZ2h0IC8gbWF4TGFiZWxEaWFnb25hbCwgLTEsIDEpKSAtIE1hdGguYXNpbihfbGltaXRWYWx1ZShtYXhMYWJlbEhlaWdodCAvIG1heExhYmVsRGlhZ29uYWwsIC0xLCAxKSkpKTtcbiAgICAgICAgICAgIGxhYmVsUm90YXRpb24gPSBNYXRoLm1heChtaW5Sb3RhdGlvbiwgTWF0aC5taW4obWF4Um90YXRpb24sIGxhYmVsUm90YXRpb24pKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxhYmVsUm90YXRpb24gPSBsYWJlbFJvdGF0aW9uO1xuICAgIH1cbiAgICBhZnRlckNhbGN1bGF0ZUxhYmVsUm90YXRpb24oKSB7XG4gICAgICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlckNhbGN1bGF0ZUxhYmVsUm90YXRpb24sIFtcbiAgICAgICAgICAgIHRoaXNcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGFmdGVyQXV0b1NraXAoKSB7fVxuICAgIGJlZm9yZUZpdCgpIHtcbiAgICAgICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZUZpdCwgW1xuICAgICAgICAgICAgdGhpc1xuICAgICAgICBdKTtcbiAgICB9XG4gICAgZml0KCkge1xuICAgICAgICBjb25zdCBtaW5TaXplID0ge1xuICAgICAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgICAgICBoZWlnaHQ6IDBcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgeyBjaGFydCAsIG9wdGlvbnM6IHsgdGlja3M6IHRpY2tPcHRzICwgdGl0bGU6IHRpdGxlT3B0cyAsIGdyaWQ6IGdyaWRPcHRzICB9ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgZGlzcGxheSA9IHRoaXMuX2lzVmlzaWJsZSgpO1xuICAgICAgICBjb25zdCBpc0hvcml6b250YWwgPSB0aGlzLmlzSG9yaXpvbnRhbCgpO1xuICAgICAgICBpZiAoZGlzcGxheSkge1xuICAgICAgICAgICAgY29uc3QgdGl0bGVIZWlnaHQgPSBnZXRUaXRsZUhlaWdodCh0aXRsZU9wdHMsIGNoYXJ0Lm9wdGlvbnMuZm9udCk7XG4gICAgICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICAgICAgbWluU2l6ZS53aWR0aCA9IHRoaXMubWF4V2lkdGg7XG4gICAgICAgICAgICAgICAgbWluU2l6ZS5oZWlnaHQgPSBnZXRUaWNrTWFya0xlbmd0aChncmlkT3B0cykgKyB0aXRsZUhlaWdodDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWluU2l6ZS5oZWlnaHQgPSB0aGlzLm1heEhlaWdodDtcbiAgICAgICAgICAgICAgICBtaW5TaXplLndpZHRoID0gZ2V0VGlja01hcmtMZW5ndGgoZ3JpZE9wdHMpICsgdGl0bGVIZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGlja09wdHMuZGlzcGxheSAmJiB0aGlzLnRpY2tzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZmlyc3QgLCBsYXN0ICwgd2lkZXN0ICwgaGlnaGVzdCAgfSA9IHRoaXMuX2dldExhYmVsU2l6ZXMoKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0aWNrUGFkZGluZyA9IHRpY2tPcHRzLnBhZGRpbmcgKiAyO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFuZ2xlUmFkaWFucyA9IHRvUmFkaWFucyh0aGlzLmxhYmVsUm90YXRpb24pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvcyA9IE1hdGguY29zKGFuZ2xlUmFkaWFucyk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2luID0gTWF0aC5zaW4oYW5nbGVSYWRpYW5zKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhYmVsSGVpZ2h0ID0gdGlja09wdHMubWlycm9yID8gMCA6IHNpbiAqIHdpZGVzdC53aWR0aCArIGNvcyAqIGhpZ2hlc3QuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICBtaW5TaXplLmhlaWdodCA9IE1hdGgubWluKHRoaXMubWF4SGVpZ2h0LCBtaW5TaXplLmhlaWdodCArIGxhYmVsSGVpZ2h0ICsgdGlja1BhZGRpbmcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhYmVsV2lkdGggPSB0aWNrT3B0cy5taXJyb3IgPyAwIDogY29zICogd2lkZXN0LndpZHRoICsgc2luICogaGlnaGVzdC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIG1pblNpemUud2lkdGggPSBNYXRoLm1pbih0aGlzLm1heFdpZHRoLCBtaW5TaXplLndpZHRoICsgbGFiZWxXaWR0aCArIHRpY2tQYWRkaW5nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fY2FsY3VsYXRlUGFkZGluZyhmaXJzdCwgbGFzdCwgc2luLCBjb3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2hhbmRsZU1hcmdpbnMoKTtcbiAgICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMuX2xlbmd0aCA9IGNoYXJ0LndpZHRoIC0gdGhpcy5fbWFyZ2lucy5sZWZ0IC0gdGhpcy5fbWFyZ2lucy5yaWdodDtcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gbWluU2l6ZS5oZWlnaHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLndpZHRoID0gbWluU2l6ZS53aWR0aDtcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5fbGVuZ3RoID0gY2hhcnQuaGVpZ2h0IC0gdGhpcy5fbWFyZ2lucy50b3AgLSB0aGlzLl9tYXJnaW5zLmJvdHRvbTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfY2FsY3VsYXRlUGFkZGluZyhmaXJzdCwgbGFzdCwgc2luLCBjb3MpIHtcbiAgICAgICAgY29uc3QgeyB0aWNrczogeyBhbGlnbiAsIHBhZGRpbmcgIH0gLCBwb3NpdGlvbiAgfSA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgaXNSb3RhdGVkID0gdGhpcy5sYWJlbFJvdGF0aW9uICE9PSAwO1xuICAgICAgICBjb25zdCBsYWJlbHNCZWxvd1RpY2tzID0gcG9zaXRpb24gIT09ICd0b3AnICYmIHRoaXMuYXhpcyA9PT0gJ3gnO1xuICAgICAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0TGVmdCA9IHRoaXMuZ2V0UGl4ZWxGb3JUaWNrKDApIC0gdGhpcy5sZWZ0O1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0UmlnaHQgPSB0aGlzLnJpZ2h0IC0gdGhpcy5nZXRQaXhlbEZvclRpY2sodGhpcy50aWNrcy5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgIGxldCBwYWRkaW5nTGVmdCA9IDA7XG4gICAgICAgICAgICBsZXQgcGFkZGluZ1JpZ2h0ID0gMDtcbiAgICAgICAgICAgIGlmIChpc1JvdGF0ZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAobGFiZWxzQmVsb3dUaWNrcykge1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nTGVmdCA9IGNvcyAqIGZpcnN0LndpZHRoO1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nUmlnaHQgPSBzaW4gKiBsYXN0LmhlaWdodDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nTGVmdCA9IHNpbiAqIGZpcnN0LmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZ1JpZ2h0ID0gY29zICogbGFzdC53aWR0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFsaWduID09PSAnc3RhcnQnKSB7XG4gICAgICAgICAgICAgICAgcGFkZGluZ1JpZ2h0ID0gbGFzdC53aWR0aDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWxpZ24gPT09ICdlbmQnKSB7XG4gICAgICAgICAgICAgICAgcGFkZGluZ0xlZnQgPSBmaXJzdC53aWR0aDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWxpZ24gIT09ICdpbm5lcicpIHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nTGVmdCA9IGZpcnN0LndpZHRoIC8gMjtcbiAgICAgICAgICAgICAgICBwYWRkaW5nUmlnaHQgPSBsYXN0LndpZHRoIC8gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucGFkZGluZ0xlZnQgPSBNYXRoLm1heCgocGFkZGluZ0xlZnQgLSBvZmZzZXRMZWZ0ICsgcGFkZGluZykgKiB0aGlzLndpZHRoIC8gKHRoaXMud2lkdGggLSBvZmZzZXRMZWZ0KSwgMCk7XG4gICAgICAgICAgICB0aGlzLnBhZGRpbmdSaWdodCA9IE1hdGgubWF4KChwYWRkaW5nUmlnaHQgLSBvZmZzZXRSaWdodCArIHBhZGRpbmcpICogdGhpcy53aWR0aCAvICh0aGlzLndpZHRoIC0gb2Zmc2V0UmlnaHQpLCAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBwYWRkaW5nVG9wID0gbGFzdC5oZWlnaHQgLyAyO1xuICAgICAgICAgICAgbGV0IHBhZGRpbmdCb3R0b20gPSBmaXJzdC5oZWlnaHQgLyAyO1xuICAgICAgICAgICAgaWYgKGFsaWduID09PSAnc3RhcnQnKSB7XG4gICAgICAgICAgICAgICAgcGFkZGluZ1RvcCA9IDA7XG4gICAgICAgICAgICAgICAgcGFkZGluZ0JvdHRvbSA9IGZpcnN0LmhlaWdodDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWxpZ24gPT09ICdlbmQnKSB7XG4gICAgICAgICAgICAgICAgcGFkZGluZ1RvcCA9IGxhc3QuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIHBhZGRpbmdCb3R0b20gPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5wYWRkaW5nVG9wID0gcGFkZGluZ1RvcCArIHBhZGRpbmc7XG4gICAgICAgICAgICB0aGlzLnBhZGRpbmdCb3R0b20gPSBwYWRkaW5nQm90dG9tICsgcGFkZGluZztcbiAgICAgICAgfVxuICAgIH1cbiBfaGFuZGxlTWFyZ2lucygpIHtcbiAgICAgICAgaWYgKHRoaXMuX21hcmdpbnMpIHtcbiAgICAgICAgICAgIHRoaXMuX21hcmdpbnMubGVmdCA9IE1hdGgubWF4KHRoaXMucGFkZGluZ0xlZnQsIHRoaXMuX21hcmdpbnMubGVmdCk7XG4gICAgICAgICAgICB0aGlzLl9tYXJnaW5zLnRvcCA9IE1hdGgubWF4KHRoaXMucGFkZGluZ1RvcCwgdGhpcy5fbWFyZ2lucy50b3ApO1xuICAgICAgICAgICAgdGhpcy5fbWFyZ2lucy5yaWdodCA9IE1hdGgubWF4KHRoaXMucGFkZGluZ1JpZ2h0LCB0aGlzLl9tYXJnaW5zLnJpZ2h0KTtcbiAgICAgICAgICAgIHRoaXMuX21hcmdpbnMuYm90dG9tID0gTWF0aC5tYXgodGhpcy5wYWRkaW5nQm90dG9tLCB0aGlzLl9tYXJnaW5zLmJvdHRvbSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWZ0ZXJGaXQoKSB7XG4gICAgICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlckZpdCwgW1xuICAgICAgICAgICAgdGhpc1xuICAgICAgICBdKTtcbiAgICB9XG4gaXNIb3Jpem9udGFsKCkge1xuICAgICAgICBjb25zdCB7IGF4aXMgLCBwb3NpdGlvbiAgfSA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgcmV0dXJuIHBvc2l0aW9uID09PSAndG9wJyB8fCBwb3NpdGlvbiA9PT0gJ2JvdHRvbScgfHwgYXhpcyA9PT0gJ3gnO1xuICAgIH1cbiBpc0Z1bGxTaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmZ1bGxTaXplO1xuICAgIH1cbiBfY29udmVydFRpY2tzVG9MYWJlbHModGlja3MpIHtcbiAgICAgICAgdGhpcy5iZWZvcmVUaWNrVG9MYWJlbENvbnZlcnNpb24oKTtcbiAgICAgICAgdGhpcy5nZW5lcmF0ZVRpY2tMYWJlbHModGlja3MpO1xuICAgICAgICBsZXQgaSwgaWxlbjtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gdGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKXtcbiAgICAgICAgICAgIGlmIChpc051bGxPclVuZGVmKHRpY2tzW2ldLmxhYmVsKSkge1xuICAgICAgICAgICAgICAgIHRpY2tzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICBpbGVuLS07XG4gICAgICAgICAgICAgICAgaS0tO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWZ0ZXJUaWNrVG9MYWJlbENvbnZlcnNpb24oKTtcbiAgICB9XG4gX2dldExhYmVsU2l6ZXMoKSB7XG4gICAgICAgIGxldCBsYWJlbFNpemVzID0gdGhpcy5fbGFiZWxTaXplcztcbiAgICAgICAgaWYgKCFsYWJlbFNpemVzKSB7XG4gICAgICAgICAgICBjb25zdCBzYW1wbGVTaXplID0gdGhpcy5vcHRpb25zLnRpY2tzLnNhbXBsZVNpemU7XG4gICAgICAgICAgICBsZXQgdGlja3MgPSB0aGlzLnRpY2tzO1xuICAgICAgICAgICAgaWYgKHNhbXBsZVNpemUgPCB0aWNrcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aWNrcyA9IHNhbXBsZSh0aWNrcywgc2FtcGxlU2l6ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9sYWJlbFNpemVzID0gbGFiZWxTaXplcyA9IHRoaXMuX2NvbXB1dGVMYWJlbFNpemVzKHRpY2tzLCB0aWNrcy5sZW5ndGgsIHRoaXMub3B0aW9ucy50aWNrcy5tYXhUaWNrc0xpbWl0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGFiZWxTaXplcztcbiAgICB9XG4gX2NvbXB1dGVMYWJlbFNpemVzKHRpY2tzLCBsZW5ndGgsIG1heFRpY2tzTGltaXQpIHtcbiAgICAgICAgY29uc3QgeyBjdHggLCBfbG9uZ2VzdFRleHRDYWNoZTogY2FjaGVzICB9ID0gdGhpcztcbiAgICAgICAgY29uc3Qgd2lkdGhzID0gW107XG4gICAgICAgIGNvbnN0IGhlaWdodHMgPSBbXTtcbiAgICAgICAgY29uc3QgaW5jcmVtZW50ID0gTWF0aC5mbG9vcihsZW5ndGggLyBnZXRUaWNrc0xpbWl0KGxlbmd0aCwgbWF4VGlja3NMaW1pdCkpO1xuICAgICAgICBsZXQgd2lkZXN0TGFiZWxTaXplID0gMDtcbiAgICAgICAgbGV0IGhpZ2hlc3RMYWJlbFNpemUgPSAwO1xuICAgICAgICBsZXQgaSwgaiwgamxlbiwgbGFiZWwsIHRpY2tGb250LCBmb250U3RyaW5nLCBjYWNoZSwgbGluZUhlaWdodCwgd2lkdGgsIGhlaWdodCwgbmVzdGVkTGFiZWw7XG4gICAgICAgIGZvcihpID0gMDsgaSA8IGxlbmd0aDsgaSArPSBpbmNyZW1lbnQpe1xuICAgICAgICAgICAgbGFiZWwgPSB0aWNrc1tpXS5sYWJlbDtcbiAgICAgICAgICAgIHRpY2tGb250ID0gdGhpcy5fcmVzb2x2ZVRpY2tGb250T3B0aW9ucyhpKTtcbiAgICAgICAgICAgIGN0eC5mb250ID0gZm9udFN0cmluZyA9IHRpY2tGb250LnN0cmluZztcbiAgICAgICAgICAgIGNhY2hlID0gY2FjaGVzW2ZvbnRTdHJpbmddID0gY2FjaGVzW2ZvbnRTdHJpbmddIHx8IHtcbiAgICAgICAgICAgICAgICBkYXRhOiB7fSxcbiAgICAgICAgICAgICAgICBnYzogW11cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBsaW5lSGVpZ2h0ID0gdGlja0ZvbnQubGluZUhlaWdodDtcbiAgICAgICAgICAgIHdpZHRoID0gaGVpZ2h0ID0gMDtcbiAgICAgICAgICAgIGlmICghaXNOdWxsT3JVbmRlZihsYWJlbCkgJiYgIWlzQXJyYXkobGFiZWwpKSB7XG4gICAgICAgICAgICAgICAgd2lkdGggPSBfbWVhc3VyZVRleHQoY3R4LCBjYWNoZS5kYXRhLCBjYWNoZS5nYywgd2lkdGgsIGxhYmVsKTtcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBsaW5lSGVpZ2h0O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KGxhYmVsKSkge1xuICAgICAgICAgICAgICAgIGZvcihqID0gMCwgamxlbiA9IGxhYmVsLmxlbmd0aDsgaiA8IGpsZW47ICsrail7XG4gICAgICAgICAgICAgICAgICAgIG5lc3RlZExhYmVsID0gIGxhYmVsW2pdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWYobmVzdGVkTGFiZWwpICYmICFpc0FycmF5KG5lc3RlZExhYmVsKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBfbWVhc3VyZVRleHQoY3R4LCBjYWNoZS5kYXRhLCBjYWNoZS5nYywgd2lkdGgsIG5lc3RlZExhYmVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodCArPSBsaW5lSGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2lkdGhzLnB1c2god2lkdGgpO1xuICAgICAgICAgICAgaGVpZ2h0cy5wdXNoKGhlaWdodCk7XG4gICAgICAgICAgICB3aWRlc3RMYWJlbFNpemUgPSBNYXRoLm1heCh3aWR0aCwgd2lkZXN0TGFiZWxTaXplKTtcbiAgICAgICAgICAgIGhpZ2hlc3RMYWJlbFNpemUgPSBNYXRoLm1heChoZWlnaHQsIGhpZ2hlc3RMYWJlbFNpemUpO1xuICAgICAgICB9XG4gICAgICAgIGdhcmJhZ2VDb2xsZWN0KGNhY2hlcywgbGVuZ3RoKTtcbiAgICAgICAgY29uc3Qgd2lkZXN0ID0gd2lkdGhzLmluZGV4T2Yod2lkZXN0TGFiZWxTaXplKTtcbiAgICAgICAgY29uc3QgaGlnaGVzdCA9IGhlaWdodHMuaW5kZXhPZihoaWdoZXN0TGFiZWxTaXplKTtcbiAgICAgICAgY29uc3QgdmFsdWVBdCA9IChpZHgpPT4oe1xuICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aHNbaWR4XSB8fCAwLFxuICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0c1tpZHhdIHx8IDBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZmlyc3Q6IHZhbHVlQXQoMCksXG4gICAgICAgICAgICBsYXN0OiB2YWx1ZUF0KGxlbmd0aCAtIDEpLFxuICAgICAgICAgICAgd2lkZXN0OiB2YWx1ZUF0KHdpZGVzdCksXG4gICAgICAgICAgICBoaWdoZXN0OiB2YWx1ZUF0KGhpZ2hlc3QpLFxuICAgICAgICAgICAgd2lkdGhzLFxuICAgICAgICAgICAgaGVpZ2h0c1xuICAgICAgICB9O1xuICAgIH1cbiBnZXRMYWJlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG4gZ2V0VmFsdWVGb3JQaXhlbChwaXhlbCkge31cbiBnZXRQaXhlbEZvclRpY2soaW5kZXgpIHtcbiAgICAgICAgY29uc3QgdGlja3MgPSB0aGlzLnRpY2tzO1xuICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID4gdGlja3MubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGl4ZWxGb3JWYWx1ZSh0aWNrc1tpbmRleF0udmFsdWUpO1xuICAgIH1cbiBnZXRQaXhlbEZvckRlY2ltYWwoZGVjaW1hbCkge1xuICAgICAgICBpZiAodGhpcy5fcmV2ZXJzZVBpeGVscykge1xuICAgICAgICAgICAgZGVjaW1hbCA9IDEgLSBkZWNpbWFsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBpeGVsID0gdGhpcy5fc3RhcnRQaXhlbCArIGRlY2ltYWwgKiB0aGlzLl9sZW5ndGg7XG4gICAgICAgIHJldHVybiBfaW50MTZSYW5nZSh0aGlzLl9hbGlnblRvUGl4ZWxzID8gX2FsaWduUGl4ZWwodGhpcy5jaGFydCwgcGl4ZWwsIDApIDogcGl4ZWwpO1xuICAgIH1cbiBnZXREZWNpbWFsRm9yUGl4ZWwocGl4ZWwpIHtcbiAgICAgICAgY29uc3QgZGVjaW1hbCA9IChwaXhlbCAtIHRoaXMuX3N0YXJ0UGl4ZWwpIC8gdGhpcy5fbGVuZ3RoO1xuICAgICAgICByZXR1cm4gdGhpcy5fcmV2ZXJzZVBpeGVscyA/IDEgLSBkZWNpbWFsIDogZGVjaW1hbDtcbiAgICB9XG4gZ2V0QmFzZVBpeGVsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQaXhlbEZvclZhbHVlKHRoaXMuZ2V0QmFzZVZhbHVlKCkpO1xuICAgIH1cbiBnZXRCYXNlVmFsdWUoKSB7XG4gICAgICAgIGNvbnN0IHsgbWluICwgbWF4ICB9ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG1pbiA8IDAgJiYgbWF4IDwgMCA/IG1heCA6IG1pbiA+IDAgJiYgbWF4ID4gMCA/IG1pbiA6IDA7XG4gICAgfVxuIGdldENvbnRleHQoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgdGlja3MgPSB0aGlzLnRpY2tzIHx8IFtdO1xuICAgICAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8IHRpY2tzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgdGljayA9IHRpY2tzW2luZGV4XTtcbiAgICAgICAgICAgIHJldHVybiB0aWNrLiRjb250ZXh0IHx8ICh0aWNrLiRjb250ZXh0ID0gY3JlYXRlVGlja0NvbnRleHQodGhpcy5nZXRDb250ZXh0KCksIGluZGV4LCB0aWNrKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuJGNvbnRleHQgfHwgKHRoaXMuJGNvbnRleHQgPSBjcmVhdGVTY2FsZUNvbnRleHQodGhpcy5jaGFydC5nZXRDb250ZXh0KCksIHRoaXMpKTtcbiAgICB9XG4gX3RpY2tTaXplKCkge1xuICAgICAgICBjb25zdCBvcHRpb25UaWNrcyA9IHRoaXMub3B0aW9ucy50aWNrcztcbiAgICAgICAgY29uc3Qgcm90ID0gdG9SYWRpYW5zKHRoaXMubGFiZWxSb3RhdGlvbik7XG4gICAgICAgIGNvbnN0IGNvcyA9IE1hdGguYWJzKE1hdGguY29zKHJvdCkpO1xuICAgICAgICBjb25zdCBzaW4gPSBNYXRoLmFicyhNYXRoLnNpbihyb3QpKTtcbiAgICAgICAgY29uc3QgbGFiZWxTaXplcyA9IHRoaXMuX2dldExhYmVsU2l6ZXMoKTtcbiAgICAgICAgY29uc3QgcGFkZGluZyA9IG9wdGlvblRpY2tzLmF1dG9Ta2lwUGFkZGluZyB8fCAwO1xuICAgICAgICBjb25zdCB3ID0gbGFiZWxTaXplcyA/IGxhYmVsU2l6ZXMud2lkZXN0LndpZHRoICsgcGFkZGluZyA6IDA7XG4gICAgICAgIGNvbnN0IGggPSBsYWJlbFNpemVzID8gbGFiZWxTaXplcy5oaWdoZXN0LmhlaWdodCArIHBhZGRpbmcgOiAwO1xuICAgICAgICByZXR1cm4gdGhpcy5pc0hvcml6b250YWwoKSA/IGggKiBjb3MgPiB3ICogc2luID8gdyAvIGNvcyA6IGggLyBzaW4gOiBoICogc2luIDwgdyAqIGNvcyA/IGggLyBjb3MgOiB3IC8gc2luO1xuICAgIH1cbiBfaXNWaXNpYmxlKCkge1xuICAgICAgICBjb25zdCBkaXNwbGF5ID0gdGhpcy5vcHRpb25zLmRpc3BsYXk7XG4gICAgICAgIGlmIChkaXNwbGF5ICE9PSAnYXV0bycpIHtcbiAgICAgICAgICAgIHJldHVybiAhIWRpc3BsYXk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXMoKS5sZW5ndGggPiAwO1xuICAgIH1cbiBfY29tcHV0ZUdyaWRMaW5lSXRlbXMoY2hhcnRBcmVhKSB7XG4gICAgICAgIGNvbnN0IGF4aXMgPSB0aGlzLmF4aXM7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgeyBncmlkICwgcG9zaXRpb24gLCBib3JkZXIgIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBvZmZzZXQgPSBncmlkLm9mZnNldDtcbiAgICAgICAgY29uc3QgaXNIb3Jpem9udGFsID0gdGhpcy5pc0hvcml6b250YWwoKTtcbiAgICAgICAgY29uc3QgdGlja3MgPSB0aGlzLnRpY2tzO1xuICAgICAgICBjb25zdCB0aWNrc0xlbmd0aCA9IHRpY2tzLmxlbmd0aCArIChvZmZzZXQgPyAxIDogMCk7XG4gICAgICAgIGNvbnN0IHRsID0gZ2V0VGlja01hcmtMZW5ndGgoZ3JpZCk7XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gW107XG4gICAgICAgIGNvbnN0IGJvcmRlck9wdHMgPSBib3JkZXIuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoKSk7XG4gICAgICAgIGNvbnN0IGF4aXNXaWR0aCA9IGJvcmRlck9wdHMuZGlzcGxheSA/IGJvcmRlck9wdHMud2lkdGggOiAwO1xuICAgICAgICBjb25zdCBheGlzSGFsZldpZHRoID0gYXhpc1dpZHRoIC8gMjtcbiAgICAgICAgY29uc3QgYWxpZ25Cb3JkZXJWYWx1ZSA9IGZ1bmN0aW9uKHBpeGVsKSB7XG4gICAgICAgICAgICByZXR1cm4gX2FsaWduUGl4ZWwoY2hhcnQsIHBpeGVsLCBheGlzV2lkdGgpO1xuICAgICAgICB9O1xuICAgICAgICBsZXQgYm9yZGVyVmFsdWUsIGksIGxpbmVWYWx1ZSwgYWxpZ25lZExpbmVWYWx1ZTtcbiAgICAgICAgbGV0IHR4MSwgdHkxLCB0eDIsIHR5MiwgeDEsIHkxLCB4MiwgeTI7XG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcpIHtcbiAgICAgICAgICAgIGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZSh0aGlzLmJvdHRvbSk7XG4gICAgICAgICAgICB0eTEgPSB0aGlzLmJvdHRvbSAtIHRsO1xuICAgICAgICAgICAgdHkyID0gYm9yZGVyVmFsdWUgLSBheGlzSGFsZldpZHRoO1xuICAgICAgICAgICAgeTEgPSBhbGlnbkJvcmRlclZhbHVlKGNoYXJ0QXJlYS50b3ApICsgYXhpc0hhbGZXaWR0aDtcbiAgICAgICAgICAgIHkyID0gY2hhcnRBcmVhLmJvdHRvbTtcbiAgICAgICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgICAgIGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZSh0aGlzLnRvcCk7XG4gICAgICAgICAgICB5MSA9IGNoYXJ0QXJlYS50b3A7XG4gICAgICAgICAgICB5MiA9IGFsaWduQm9yZGVyVmFsdWUoY2hhcnRBcmVhLmJvdHRvbSkgLSBheGlzSGFsZldpZHRoO1xuICAgICAgICAgICAgdHkxID0gYm9yZGVyVmFsdWUgKyBheGlzSGFsZldpZHRoO1xuICAgICAgICAgICAgdHkyID0gdGhpcy50b3AgKyB0bDtcbiAgICAgICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUodGhpcy5yaWdodCk7XG4gICAgICAgICAgICB0eDEgPSB0aGlzLnJpZ2h0IC0gdGw7XG4gICAgICAgICAgICB0eDIgPSBib3JkZXJWYWx1ZSAtIGF4aXNIYWxmV2lkdGg7XG4gICAgICAgICAgICB4MSA9IGFsaWduQm9yZGVyVmFsdWUoY2hhcnRBcmVhLmxlZnQpICsgYXhpc0hhbGZXaWR0aDtcbiAgICAgICAgICAgIHgyID0gY2hhcnRBcmVhLnJpZ2h0O1xuICAgICAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUodGhpcy5sZWZ0KTtcbiAgICAgICAgICAgIHgxID0gY2hhcnRBcmVhLmxlZnQ7XG4gICAgICAgICAgICB4MiA9IGFsaWduQm9yZGVyVmFsdWUoY2hhcnRBcmVhLnJpZ2h0KSAtIGF4aXNIYWxmV2lkdGg7XG4gICAgICAgICAgICB0eDEgPSBib3JkZXJWYWx1ZSArIGF4aXNIYWxmV2lkdGg7XG4gICAgICAgICAgICB0eDIgPSB0aGlzLmxlZnQgKyB0bDtcbiAgICAgICAgfSBlbHNlIGlmIChheGlzID09PSAneCcpIHtcbiAgICAgICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUoKGNoYXJ0QXJlYS50b3AgKyBjaGFydEFyZWEuYm90dG9tKSAvIDIgKyAwLjUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdChwb3NpdGlvbikpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwb3NpdGlvbkF4aXNJRCA9IE9iamVjdC5rZXlzKHBvc2l0aW9uKVswXTtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHBvc2l0aW9uW3Bvc2l0aW9uQXhpc0lEXTtcbiAgICAgICAgICAgICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUodGhpcy5jaGFydC5zY2FsZXNbcG9zaXRpb25BeGlzSURdLmdldFBpeGVsRm9yVmFsdWUodmFsdWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHkxID0gY2hhcnRBcmVhLnRvcDtcbiAgICAgICAgICAgIHkyID0gY2hhcnRBcmVhLmJvdHRvbTtcbiAgICAgICAgICAgIHR5MSA9IGJvcmRlclZhbHVlICsgYXhpc0hhbGZXaWR0aDtcbiAgICAgICAgICAgIHR5MiA9IHR5MSArIHRsO1xuICAgICAgICB9IGVsc2UgaWYgKGF4aXMgPT09ICd5Jykge1xuICAgICAgICAgICAgaWYgKHBvc2l0aW9uID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgICAgIGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZSgoY2hhcnRBcmVhLmxlZnQgKyBjaGFydEFyZWEucmlnaHQpIC8gMik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHBvc2l0aW9uKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uQXhpc0lEID0gT2JqZWN0LmtleXMocG9zaXRpb24pWzBdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcG9zaXRpb25bcG9zaXRpb25BeGlzSURdO1xuICAgICAgICAgICAgICAgIGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZSh0aGlzLmNoYXJ0LnNjYWxlc1twb3NpdGlvbkF4aXNJRF0uZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHgxID0gYm9yZGVyVmFsdWUgLSBheGlzSGFsZldpZHRoO1xuICAgICAgICAgICAgdHgyID0gdHgxIC0gdGw7XG4gICAgICAgICAgICB4MSA9IGNoYXJ0QXJlYS5sZWZ0O1xuICAgICAgICAgICAgeDIgPSBjaGFydEFyZWEucmlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGltaXQgPSB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLnRpY2tzLm1heFRpY2tzTGltaXQsIHRpY2tzTGVuZ3RoKTtcbiAgICAgICAgY29uc3Qgc3RlcCA9IE1hdGgubWF4KDEsIE1hdGguY2VpbCh0aWNrc0xlbmd0aCAvIGxpbWl0KSk7XG4gICAgICAgIGZvcihpID0gMDsgaSA8IHRpY2tzTGVuZ3RoOyBpICs9IHN0ZXApe1xuICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuZ2V0Q29udGV4dChpKTtcbiAgICAgICAgICAgIGNvbnN0IG9wdHNBdEluZGV4ID0gZ3JpZC5zZXRDb250ZXh0KGNvbnRleHQpO1xuICAgICAgICAgICAgY29uc3Qgb3B0c0F0SW5kZXhCb3JkZXIgPSBib3JkZXIuc2V0Q29udGV4dChjb250ZXh0KTtcbiAgICAgICAgICAgIGNvbnN0IGxpbmVXaWR0aCA9IG9wdHNBdEluZGV4LmxpbmVXaWR0aDtcbiAgICAgICAgICAgIGNvbnN0IGxpbmVDb2xvciA9IG9wdHNBdEluZGV4LmNvbG9yO1xuICAgICAgICAgICAgY29uc3QgYm9yZGVyRGFzaCA9IG9wdHNBdEluZGV4Qm9yZGVyLmRhc2ggfHwgW107XG4gICAgICAgICAgICBjb25zdCBib3JkZXJEYXNoT2Zmc2V0ID0gb3B0c0F0SW5kZXhCb3JkZXIuZGFzaE9mZnNldDtcbiAgICAgICAgICAgIGNvbnN0IHRpY2tXaWR0aCA9IG9wdHNBdEluZGV4LnRpY2tXaWR0aDtcbiAgICAgICAgICAgIGNvbnN0IHRpY2tDb2xvciA9IG9wdHNBdEluZGV4LnRpY2tDb2xvcjtcbiAgICAgICAgICAgIGNvbnN0IHRpY2tCb3JkZXJEYXNoID0gb3B0c0F0SW5kZXgudGlja0JvcmRlckRhc2ggfHwgW107XG4gICAgICAgICAgICBjb25zdCB0aWNrQm9yZGVyRGFzaE9mZnNldCA9IG9wdHNBdEluZGV4LnRpY2tCb3JkZXJEYXNoT2Zmc2V0O1xuICAgICAgICAgICAgbGluZVZhbHVlID0gZ2V0UGl4ZWxGb3JHcmlkTGluZSh0aGlzLCBpLCBvZmZzZXQpO1xuICAgICAgICAgICAgaWYgKGxpbmVWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbGlnbmVkTGluZVZhbHVlID0gX2FsaWduUGl4ZWwoY2hhcnQsIGxpbmVWYWx1ZSwgbGluZVdpZHRoKTtcbiAgICAgICAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgICAgICAgICB0eDEgPSB0eDIgPSB4MSA9IHgyID0gYWxpZ25lZExpbmVWYWx1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdHkxID0gdHkyID0geTEgPSB5MiA9IGFsaWduZWRMaW5lVmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICB0eDEsXG4gICAgICAgICAgICAgICAgdHkxLFxuICAgICAgICAgICAgICAgIHR4MixcbiAgICAgICAgICAgICAgICB0eTIsXG4gICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgeTEsXG4gICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgeTIsXG4gICAgICAgICAgICAgICAgd2lkdGg6IGxpbmVXaWR0aCxcbiAgICAgICAgICAgICAgICBjb2xvcjogbGluZUNvbG9yLFxuICAgICAgICAgICAgICAgIGJvcmRlckRhc2gsXG4gICAgICAgICAgICAgICAgYm9yZGVyRGFzaE9mZnNldCxcbiAgICAgICAgICAgICAgICB0aWNrV2lkdGgsXG4gICAgICAgICAgICAgICAgdGlja0NvbG9yLFxuICAgICAgICAgICAgICAgIHRpY2tCb3JkZXJEYXNoLFxuICAgICAgICAgICAgICAgIHRpY2tCb3JkZXJEYXNoT2Zmc2V0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90aWNrc0xlbmd0aCA9IHRpY2tzTGVuZ3RoO1xuICAgICAgICB0aGlzLl9ib3JkZXJWYWx1ZSA9IGJvcmRlclZhbHVlO1xuICAgICAgICByZXR1cm4gaXRlbXM7XG4gICAgfVxuIF9jb21wdXRlTGFiZWxJdGVtcyhjaGFydEFyZWEpIHtcbiAgICAgICAgY29uc3QgYXhpcyA9IHRoaXMuYXhpcztcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgeyBwb3NpdGlvbiAsIHRpY2tzOiBvcHRpb25UaWNrcyAgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IHRoaXMuaXNIb3Jpem9udGFsKCk7XG4gICAgICAgIGNvbnN0IHRpY2tzID0gdGhpcy50aWNrcztcbiAgICAgICAgY29uc3QgeyBhbGlnbiAsIGNyb3NzQWxpZ24gLCBwYWRkaW5nICwgbWlycm9yICB9ID0gb3B0aW9uVGlja3M7XG4gICAgICAgIGNvbnN0IHRsID0gZ2V0VGlja01hcmtMZW5ndGgob3B0aW9ucy5ncmlkKTtcbiAgICAgICAgY29uc3QgdGlja0FuZFBhZGRpbmcgPSB0bCArIHBhZGRpbmc7XG4gICAgICAgIGNvbnN0IGhUaWNrQW5kUGFkZGluZyA9IG1pcnJvciA/IC1wYWRkaW5nIDogdGlja0FuZFBhZGRpbmc7XG4gICAgICAgIGNvbnN0IHJvdGF0aW9uID0gLXRvUmFkaWFucyh0aGlzLmxhYmVsUm90YXRpb24pO1xuICAgICAgICBjb25zdCBpdGVtcyA9IFtdO1xuICAgICAgICBsZXQgaSwgaWxlbiwgdGljaywgbGFiZWwsIHgsIHksIHRleHRBbGlnbiwgcGl4ZWwsIGZvbnQsIGxpbmVIZWlnaHQsIGxpbmVDb3VudCwgdGV4dE9mZnNldDtcbiAgICAgICAgbGV0IHRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgICAgICBpZiAocG9zaXRpb24gPT09ICd0b3AnKSB7XG4gICAgICAgICAgICB5ID0gdGhpcy5ib3R0b20gLSBoVGlja0FuZFBhZGRpbmc7XG4gICAgICAgICAgICB0ZXh0QWxpZ24gPSB0aGlzLl9nZXRYQXhpc0xhYmVsQWxpZ25tZW50KCk7XG4gICAgICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgICB5ID0gdGhpcy50b3AgKyBoVGlja0FuZFBhZGRpbmc7XG4gICAgICAgICAgICB0ZXh0QWxpZ24gPSB0aGlzLl9nZXRYQXhpc0xhYmVsQWxpZ25tZW50KCk7XG4gICAgICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgY29uc3QgcmV0ID0gdGhpcy5fZ2V0WUF4aXNMYWJlbEFsaWdubWVudCh0bCk7XG4gICAgICAgICAgICB0ZXh0QWxpZ24gPSByZXQudGV4dEFsaWduO1xuICAgICAgICAgICAgeCA9IHJldC54O1xuICAgICAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgICBjb25zdCByZXQgPSB0aGlzLl9nZXRZQXhpc0xhYmVsQWxpZ25tZW50KHRsKTtcbiAgICAgICAgICAgIHRleHRBbGlnbiA9IHJldC50ZXh0QWxpZ247XG4gICAgICAgICAgICB4ID0gcmV0Lng7XG4gICAgICAgIH0gZWxzZSBpZiAoYXhpcyA9PT0gJ3gnKSB7XG4gICAgICAgICAgICBpZiAocG9zaXRpb24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgeSA9IChjaGFydEFyZWEudG9wICsgY2hhcnRBcmVhLmJvdHRvbSkgLyAyICsgdGlja0FuZFBhZGRpbmc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHBvc2l0aW9uKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uQXhpc0lEID0gT2JqZWN0LmtleXMocG9zaXRpb24pWzBdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcG9zaXRpb25bcG9zaXRpb25BeGlzSURdO1xuICAgICAgICAgICAgICAgIHkgPSB0aGlzLmNoYXJ0LnNjYWxlc1twb3NpdGlvbkF4aXNJRF0uZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkgKyB0aWNrQW5kUGFkZGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRleHRBbGlnbiA9IHRoaXMuX2dldFhBeGlzTGFiZWxBbGlnbm1lbnQoKTtcbiAgICAgICAgfSBlbHNlIGlmIChheGlzID09PSAneScpIHtcbiAgICAgICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgICAgICB4ID0gKGNoYXJ0QXJlYS5sZWZ0ICsgY2hhcnRBcmVhLnJpZ2h0KSAvIDIgLSB0aWNrQW5kUGFkZGluZztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QocG9zaXRpb24pKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcG9zaXRpb25BeGlzSUQgPSBPYmplY3Qua2V5cyhwb3NpdGlvbilbMF07XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBwb3NpdGlvbltwb3NpdGlvbkF4aXNJRF07XG4gICAgICAgICAgICAgICAgeCA9IHRoaXMuY2hhcnQuc2NhbGVzW3Bvc2l0aW9uQXhpc0lEXS5nZXRQaXhlbEZvclZhbHVlKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRleHRBbGlnbiA9IHRoaXMuX2dldFlBeGlzTGFiZWxBbGlnbm1lbnQodGwpLnRleHRBbGlnbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXhpcyA9PT0gJ3knKSB7XG4gICAgICAgICAgICBpZiAoYWxpZ24gPT09ICdzdGFydCcpIHtcbiAgICAgICAgICAgICAgICB0ZXh0QmFzZWxpbmUgPSAndG9wJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWxpZ24gPT09ICdlbmQnKSB7XG4gICAgICAgICAgICAgICAgdGV4dEJhc2VsaW5lID0gJ2JvdHRvbSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGFiZWxTaXplcyA9IHRoaXMuX2dldExhYmVsU2l6ZXMoKTtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gdGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIHRpY2sgPSB0aWNrc1tpXTtcbiAgICAgICAgICAgIGxhYmVsID0gdGljay5sYWJlbDtcbiAgICAgICAgICAgIGNvbnN0IG9wdHNBdEluZGV4ID0gb3B0aW9uVGlja3Muc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoaSkpO1xuICAgICAgICAgICAgcGl4ZWwgPSB0aGlzLmdldFBpeGVsRm9yVGljayhpKSArIG9wdGlvblRpY2tzLmxhYmVsT2Zmc2V0O1xuICAgICAgICAgICAgZm9udCA9IHRoaXMuX3Jlc29sdmVUaWNrRm9udE9wdGlvbnMoaSk7XG4gICAgICAgICAgICBsaW5lSGVpZ2h0ID0gZm9udC5saW5lSGVpZ2h0O1xuICAgICAgICAgICAgbGluZUNvdW50ID0gaXNBcnJheShsYWJlbCkgPyBsYWJlbC5sZW5ndGggOiAxO1xuICAgICAgICAgICAgY29uc3QgaGFsZkNvdW50ID0gbGluZUNvdW50IC8gMjtcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gb3B0c0F0SW5kZXguY29sb3I7XG4gICAgICAgICAgICBjb25zdCBzdHJva2VDb2xvciA9IG9wdHNBdEluZGV4LnRleHRTdHJva2VDb2xvcjtcbiAgICAgICAgICAgIGNvbnN0IHN0cm9rZVdpZHRoID0gb3B0c0F0SW5kZXgudGV4dFN0cm9rZVdpZHRoO1xuICAgICAgICAgICAgbGV0IHRpY2tUZXh0QWxpZ24gPSB0ZXh0QWxpZ247XG4gICAgICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICAgICAgeCA9IHBpeGVsO1xuICAgICAgICAgICAgICAgIGlmICh0ZXh0QWxpZ24gPT09ICdpbm5lcicpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IGlsZW4gLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aWNrVGV4dEFsaWduID0gIXRoaXMub3B0aW9ucy5yZXZlcnNlID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aWNrVGV4dEFsaWduID0gIXRoaXMub3B0aW9ucy5yZXZlcnNlID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpY2tUZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24gPT09ICd0b3AnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjcm9zc0FsaWduID09PSAnbmVhcicgfHwgcm90YXRpb24gIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRPZmZzZXQgPSAtbGluZUNvdW50ICogbGluZUhlaWdodCArIGxpbmVIZWlnaHQgLyAyO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNyb3NzQWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0T2Zmc2V0ID0gLWxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQgLyAyIC0gaGFsZkNvdW50ICogbGluZUhlaWdodCArIGxpbmVIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0T2Zmc2V0ID0gLWxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQgKyBsaW5lSGVpZ2h0IC8gMjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjcm9zc0FsaWduID09PSAnbmVhcicgfHwgcm90YXRpb24gIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRPZmZzZXQgPSBsaW5lSGVpZ2h0IC8gMjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjcm9zc0FsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dE9mZnNldCA9IGxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQgLyAyIC0gaGFsZkNvdW50ICogbGluZUhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRPZmZzZXQgPSBsYWJlbFNpemVzLmhpZ2hlc3QuaGVpZ2h0IC0gbGluZUNvdW50ICogbGluZUhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobWlycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHRPZmZzZXQgKj0gLTE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChyb3RhdGlvbiAhPT0gMCAmJiAhb3B0c0F0SW5kZXguc2hvd0xhYmVsQmFja2Ryb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgeCArPSBsaW5lSGVpZ2h0IC8gMiAqIE1hdGguc2luKHJvdGF0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHkgPSBwaXhlbDtcbiAgICAgICAgICAgICAgICB0ZXh0T2Zmc2V0ID0gKDEgLSBsaW5lQ291bnQpICogbGluZUhlaWdodCAvIDI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgYmFja2Ryb3A7XG4gICAgICAgICAgICBpZiAob3B0c0F0SW5kZXguc2hvd0xhYmVsQmFja2Ryb3ApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsYWJlbFBhZGRpbmcgPSB0b1BhZGRpbmcob3B0c0F0SW5kZXguYmFja2Ryb3BQYWRkaW5nKTtcbiAgICAgICAgICAgICAgICBjb25zdCBoZWlnaHQgPSBsYWJlbFNpemVzLmhlaWdodHNbaV07XG4gICAgICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBsYWJlbFNpemVzLndpZHRoc1tpXTtcbiAgICAgICAgICAgICAgICBsZXQgdG9wID0gdGV4dE9mZnNldCAtIGxhYmVsUGFkZGluZy50b3A7XG4gICAgICAgICAgICAgICAgbGV0IGxlZnQgPSAwIC0gbGFiZWxQYWRkaW5nLmxlZnQ7XG4gICAgICAgICAgICAgICAgc3dpdGNoKHRleHRCYXNlbGluZSl7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ21pZGRsZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3AgLT0gaGVpZ2h0IC8gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdib3R0b20nOlxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wIC09IGhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzd2l0Y2godGV4dEFsaWduKXtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnY2VudGVyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQgLT0gd2lkdGggLyAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQgLT0gd2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYmFja2Ryb3AgPSB7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgICAgICAgICAgIHRvcCxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoICsgbGFiZWxQYWRkaW5nLndpZHRoLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCArIGxhYmVsUGFkZGluZy5oZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBvcHRzQXRJbmRleC5iYWNrZHJvcENvbG9yXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICAgIGxhYmVsLFxuICAgICAgICAgICAgICAgIGZvbnQsXG4gICAgICAgICAgICAgICAgdGV4dE9mZnNldCxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcixcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ246IHRpY2tUZXh0QWxpZ24sXG4gICAgICAgICAgICAgICAgICAgIHRleHRCYXNlbGluZSxcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb246IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHgsXG4gICAgICAgICAgICAgICAgICAgICAgICB5XG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIGJhY2tkcm9wXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZW1zO1xuICAgIH1cbiAgICBfZ2V0WEF4aXNMYWJlbEFsaWdubWVudCgpIHtcbiAgICAgICAgY29uc3QgeyBwb3NpdGlvbiAsIHRpY2tzICB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCByb3RhdGlvbiA9IC10b1JhZGlhbnModGhpcy5sYWJlbFJvdGF0aW9uKTtcbiAgICAgICAgaWYgKHJvdGF0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gcG9zaXRpb24gPT09ICd0b3AnID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICAgICAgfVxuICAgICAgICBsZXQgYWxpZ24gPSAnY2VudGVyJztcbiAgICAgICAgaWYgKHRpY2tzLmFsaWduID09PSAnc3RhcnQnKSB7XG4gICAgICAgICAgICBhbGlnbiA9ICdsZWZ0JztcbiAgICAgICAgfSBlbHNlIGlmICh0aWNrcy5hbGlnbiA9PT0gJ2VuZCcpIHtcbiAgICAgICAgICAgIGFsaWduID0gJ3JpZ2h0JztcbiAgICAgICAgfSBlbHNlIGlmICh0aWNrcy5hbGlnbiA9PT0gJ2lubmVyJykge1xuICAgICAgICAgICAgYWxpZ24gPSAnaW5uZXInO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbGlnbjtcbiAgICB9XG4gICAgX2dldFlBeGlzTGFiZWxBbGlnbm1lbnQodGwpIHtcbiAgICAgICAgY29uc3QgeyBwb3NpdGlvbiAsIHRpY2tzOiB7IGNyb3NzQWxpZ24gLCBtaXJyb3IgLCBwYWRkaW5nICB9ICB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBsYWJlbFNpemVzID0gdGhpcy5fZ2V0TGFiZWxTaXplcygpO1xuICAgICAgICBjb25zdCB0aWNrQW5kUGFkZGluZyA9IHRsICsgcGFkZGluZztcbiAgICAgICAgY29uc3Qgd2lkZXN0ID0gbGFiZWxTaXplcy53aWRlc3Qud2lkdGg7XG4gICAgICAgIGxldCB0ZXh0QWxpZ247XG4gICAgICAgIGxldCB4O1xuICAgICAgICBpZiAocG9zaXRpb24gPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgaWYgKG1pcnJvcikge1xuICAgICAgICAgICAgICAgIHggPSB0aGlzLnJpZ2h0ICsgcGFkZGluZztcbiAgICAgICAgICAgICAgICBpZiAoY3Jvc3NBbGlnbiA9PT0gJ25lYXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbiA9ICdsZWZ0JztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNyb3NzQWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgICAgICAgICAgICB4ICs9IHdpZGVzdCAvIDI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduID0gJ3JpZ2h0JztcbiAgICAgICAgICAgICAgICAgICAgeCArPSB3aWRlc3Q7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB4ID0gdGhpcy5yaWdodCAtIHRpY2tBbmRQYWRkaW5nO1xuICAgICAgICAgICAgICAgIGlmIChjcm9zc0FsaWduID09PSAnbmVhcicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduID0gJ3JpZ2h0JztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNyb3NzQWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgICAgICAgICAgICB4IC09IHdpZGVzdCAvIDI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduID0gJ2xlZnQnO1xuICAgICAgICAgICAgICAgICAgICB4ID0gdGhpcy5sZWZ0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICAgaWYgKG1pcnJvcikge1xuICAgICAgICAgICAgICAgIHggPSB0aGlzLmxlZnQgKyBwYWRkaW5nO1xuICAgICAgICAgICAgICAgIGlmIChjcm9zc0FsaWduID09PSAnbmVhcicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduID0gJ3JpZ2h0JztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNyb3NzQWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgICAgICAgICAgICB4IC09IHdpZGVzdCAvIDI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduID0gJ2xlZnQnO1xuICAgICAgICAgICAgICAgICAgICB4IC09IHdpZGVzdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHggPSB0aGlzLmxlZnQgKyB0aWNrQW5kUGFkZGluZztcbiAgICAgICAgICAgICAgICBpZiAoY3Jvc3NBbGlnbiA9PT0gJ25lYXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbiA9ICdsZWZ0JztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNyb3NzQWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgICAgICAgICAgICB4ICs9IHdpZGVzdCAvIDI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduID0gJ3JpZ2h0JztcbiAgICAgICAgICAgICAgICAgICAgeCA9IHRoaXMucmlnaHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGV4dEFsaWduID0gJ3JpZ2h0JztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGV4dEFsaWduLFxuICAgICAgICAgICAgeFxuICAgICAgICB9O1xuICAgIH1cbiBfY29tcHV0ZUxhYmVsQXJlYSgpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy50aWNrcy5taXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uO1xuICAgICAgICBpZiAocG9zaXRpb24gPT09ICdsZWZ0JyB8fCBwb3NpdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICAgICAgbGVmdDogdGhpcy5sZWZ0LFxuICAgICAgICAgICAgICAgIGJvdHRvbTogY2hhcnQuaGVpZ2h0LFxuICAgICAgICAgICAgICAgIHJpZ2h0OiB0aGlzLnJpZ2h0XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcgfHwgcG9zaXRpb24gPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRvcDogdGhpcy50b3AsXG4gICAgICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgICAgICBib3R0b206IHRoaXMuYm90dG9tLFxuICAgICAgICAgICAgICAgIHJpZ2h0OiBjaGFydC53aWR0aFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiBkcmF3QmFja2dyb3VuZCgpIHtcbiAgICAgICAgY29uc3QgeyBjdHggLCBvcHRpb25zOiB7IGJhY2tncm91bmRDb2xvciAgfSAsIGxlZnQgLCB0b3AgLCB3aWR0aCAsIGhlaWdodCAgfSA9IHRoaXM7XG4gICAgICAgIGlmIChiYWNrZ3JvdW5kQ29sb3IpIHtcbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gYmFja2dyb3VuZENvbG9yO1xuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KGxlZnQsIHRvcCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldExpbmVXaWR0aEZvclZhbHVlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGdyaWQgPSB0aGlzLm9wdGlvbnMuZ3JpZDtcbiAgICAgICAgaWYgKCF0aGlzLl9pc1Zpc2libGUoKSB8fCAhZ3JpZC5kaXNwbGF5KSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0aWNrcyA9IHRoaXMudGlja3M7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGlja3MuZmluZEluZGV4KCh0KT0+dC52YWx1ZSA9PT0gdmFsdWUpO1xuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgY29uc3Qgb3B0cyA9IGdyaWQuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoaW5kZXgpKTtcbiAgICAgICAgICAgIHJldHVybiBvcHRzLmxpbmVXaWR0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gZHJhd0dyaWQoY2hhcnRBcmVhKSB7XG4gICAgICAgIGNvbnN0IGdyaWQgPSB0aGlzLm9wdGlvbnMuZ3JpZDtcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5fZ3JpZExpbmVJdGVtcyB8fCAodGhpcy5fZ3JpZExpbmVJdGVtcyA9IHRoaXMuX2NvbXB1dGVHcmlkTGluZUl0ZW1zKGNoYXJ0QXJlYSkpO1xuICAgICAgICBsZXQgaSwgaWxlbjtcbiAgICAgICAgY29uc3QgZHJhd0xpbmUgPSAocDEsIHAyLCBzdHlsZSk9PntcbiAgICAgICAgICAgIGlmICghc3R5bGUud2lkdGggfHwgIXN0eWxlLmNvbG9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgIGN0eC5saW5lV2lkdGggPSBzdHlsZS53aWR0aDtcbiAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHN0eWxlLmNvbG9yO1xuICAgICAgICAgICAgY3R4LnNldExpbmVEYXNoKHN0eWxlLmJvcmRlckRhc2ggfHwgW10pO1xuICAgICAgICAgICAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gc3R5bGUuYm9yZGVyRGFzaE9mZnNldDtcbiAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8ocDEueCwgcDEueSk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHAyLngsIHAyLnkpO1xuICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGdyaWQuZGlzcGxheSkge1xuICAgICAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0gaXRlbXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKGdyaWQuZHJhd09uQ2hhcnRBcmVhKSB7XG4gICAgICAgICAgICAgICAgICAgIGRyYXdMaW5lKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IGl0ZW0ueDEsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBpdGVtLnkxXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IGl0ZW0ueDIsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBpdGVtLnkyXG4gICAgICAgICAgICAgICAgICAgIH0sIGl0ZW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZ3JpZC5kcmF3VGlja3MpIHtcbiAgICAgICAgICAgICAgICAgICAgZHJhd0xpbmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogaXRlbS50eDEsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBpdGVtLnR5MVxuICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBpdGVtLnR4MixcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IGl0ZW0udHkyXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBpdGVtLnRpY2tDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBpdGVtLnRpY2tXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckRhc2g6IGl0ZW0udGlja0JvcmRlckRhc2gsXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJEYXNoT2Zmc2V0OiBpdGVtLnRpY2tCb3JkZXJEYXNoT2Zmc2V0XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiBkcmF3Qm9yZGVyKCkge1xuICAgICAgICBjb25zdCB7IGNoYXJ0ICwgY3R4ICwgb3B0aW9uczogeyBib3JkZXIgLCBncmlkICB9ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgYm9yZGVyT3B0cyA9IGJvcmRlci5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICAgICAgY29uc3QgYXhpc1dpZHRoID0gYm9yZGVyLmRpc3BsYXkgPyBib3JkZXJPcHRzLndpZHRoIDogMDtcbiAgICAgICAgaWYgKCFheGlzV2lkdGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYXN0TGluZVdpZHRoID0gZ3JpZC5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgwKSkubGluZVdpZHRoO1xuICAgICAgICBjb25zdCBib3JkZXJWYWx1ZSA9IHRoaXMuX2JvcmRlclZhbHVlO1xuICAgICAgICBsZXQgeDEsIHgyLCB5MSwgeTI7XG4gICAgICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICB4MSA9IF9hbGlnblBpeGVsKGNoYXJ0LCB0aGlzLmxlZnQsIGF4aXNXaWR0aCkgLSBheGlzV2lkdGggLyAyO1xuICAgICAgICAgICAgeDIgPSBfYWxpZ25QaXhlbChjaGFydCwgdGhpcy5yaWdodCwgbGFzdExpbmVXaWR0aCkgKyBsYXN0TGluZVdpZHRoIC8gMjtcbiAgICAgICAgICAgIHkxID0geTIgPSBib3JkZXJWYWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHkxID0gX2FsaWduUGl4ZWwoY2hhcnQsIHRoaXMudG9wLCBheGlzV2lkdGgpIC0gYXhpc1dpZHRoIC8gMjtcbiAgICAgICAgICAgIHkyID0gX2FsaWduUGl4ZWwoY2hhcnQsIHRoaXMuYm90dG9tLCBsYXN0TGluZVdpZHRoKSArIGxhc3RMaW5lV2lkdGggLyAyO1xuICAgICAgICAgICAgeDEgPSB4MiA9IGJvcmRlclZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSBib3JkZXJPcHRzLndpZHRoO1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBib3JkZXJPcHRzLmNvbG9yO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5tb3ZlVG8oeDEsIHkxKTtcbiAgICAgICAgY3R4LmxpbmVUbyh4MiwgeTIpO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfVxuIGRyYXdMYWJlbHMoY2hhcnRBcmVhKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvblRpY2tzID0gdGhpcy5vcHRpb25zLnRpY2tzO1xuICAgICAgICBpZiAoIW9wdGlvblRpY2tzLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICAgICAgY29uc3QgYXJlYSA9IHRoaXMuX2NvbXB1dGVMYWJlbEFyZWEoKTtcbiAgICAgICAgaWYgKGFyZWEpIHtcbiAgICAgICAgICAgIGNsaXBBcmVhKGN0eCwgYXJlYSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXRlbXMgPSB0aGlzLmdldExhYmVsSXRlbXMoY2hhcnRBcmVhKTtcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zKXtcbiAgICAgICAgICAgIGNvbnN0IHJlbmRlclRleHRPcHRpb25zID0gaXRlbS5vcHRpb25zO1xuICAgICAgICAgICAgY29uc3QgdGlja0ZvbnQgPSBpdGVtLmZvbnQ7XG4gICAgICAgICAgICBjb25zdCBsYWJlbCA9IGl0ZW0ubGFiZWw7XG4gICAgICAgICAgICBjb25zdCB5ID0gaXRlbS50ZXh0T2Zmc2V0O1xuICAgICAgICAgICAgcmVuZGVyVGV4dChjdHgsIGxhYmVsLCAwLCB5LCB0aWNrRm9udCwgcmVuZGVyVGV4dE9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhcmVhKSB7XG4gICAgICAgICAgICB1bmNsaXBBcmVhKGN0eCk7XG4gICAgICAgIH1cbiAgICB9XG4gZHJhd1RpdGxlKCkge1xuICAgICAgICBjb25zdCB7IGN0eCAsIG9wdGlvbnM6IHsgcG9zaXRpb24gLCB0aXRsZSAsIHJldmVyc2UgIH0gIH0gPSB0aGlzO1xuICAgICAgICBpZiAoIXRpdGxlLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmb250ID0gdG9Gb250KHRpdGxlLmZvbnQpO1xuICAgICAgICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKHRpdGxlLnBhZGRpbmcpO1xuICAgICAgICBjb25zdCBhbGlnbiA9IHRpdGxlLmFsaWduO1xuICAgICAgICBsZXQgb2Zmc2V0ID0gZm9udC5saW5lSGVpZ2h0IC8gMjtcbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAnYm90dG9tJyB8fCBwb3NpdGlvbiA9PT0gJ2NlbnRlcicgfHwgaXNPYmplY3QocG9zaXRpb24pKSB7XG4gICAgICAgICAgICBvZmZzZXQgKz0gcGFkZGluZy5ib3R0b207XG4gICAgICAgICAgICBpZiAoaXNBcnJheSh0aXRsZS50ZXh0KSkge1xuICAgICAgICAgICAgICAgIG9mZnNldCArPSBmb250LmxpbmVIZWlnaHQgKiAodGl0bGUudGV4dC5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9mZnNldCArPSBwYWRkaW5nLnRvcDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IHRpdGxlWCAsIHRpdGxlWSAsIG1heFdpZHRoICwgcm90YXRpb24gIH0gPSB0aXRsZUFyZ3ModGhpcywgb2Zmc2V0LCBwb3NpdGlvbiwgYWxpZ24pO1xuICAgICAgICByZW5kZXJUZXh0KGN0eCwgdGl0bGUudGV4dCwgMCwgMCwgZm9udCwge1xuICAgICAgICAgICAgY29sb3I6IHRpdGxlLmNvbG9yLFxuICAgICAgICAgICAgbWF4V2lkdGgsXG4gICAgICAgICAgICByb3RhdGlvbixcbiAgICAgICAgICAgIHRleHRBbGlnbjogdGl0bGVBbGlnbihhbGlnbiwgcG9zaXRpb24sIHJldmVyc2UpLFxuICAgICAgICAgICAgdGV4dEJhc2VsaW5lOiAnbWlkZGxlJyxcbiAgICAgICAgICAgIHRyYW5zbGF0aW9uOiBbXG4gICAgICAgICAgICAgICAgdGl0bGVYLFxuICAgICAgICAgICAgICAgIHRpdGxlWVxuICAgICAgICAgICAgXVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZHJhdyhjaGFydEFyZWEpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9pc1Zpc2libGUoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZHJhd0JhY2tncm91bmQoKTtcbiAgICAgICAgdGhpcy5kcmF3R3JpZChjaGFydEFyZWEpO1xuICAgICAgICB0aGlzLmRyYXdCb3JkZXIoKTtcbiAgICAgICAgdGhpcy5kcmF3VGl0bGUoKTtcbiAgICAgICAgdGhpcy5kcmF3TGFiZWxzKGNoYXJ0QXJlYSk7XG4gICAgfVxuIF9sYXllcnMoKSB7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHR6ID0gb3B0cy50aWNrcyAmJiBvcHRzLnRpY2tzLnogfHwgMDtcbiAgICAgICAgY29uc3QgZ3ogPSB2YWx1ZU9yRGVmYXVsdChvcHRzLmdyaWQgJiYgb3B0cy5ncmlkLnosIC0xKTtcbiAgICAgICAgY29uc3QgYnogPSB2YWx1ZU9yRGVmYXVsdChvcHRzLmJvcmRlciAmJiBvcHRzLmJvcmRlci56LCAwKTtcbiAgICAgICAgaWYgKCF0aGlzLl9pc1Zpc2libGUoKSB8fCB0aGlzLmRyYXcgIT09IFNjYWxlLnByb3RvdHlwZS5kcmF3KSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgejogdHosXG4gICAgICAgICAgICAgICAgICAgIGRyYXc6IChjaGFydEFyZWEpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXcoY2hhcnRBcmVhKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB6OiBneixcbiAgICAgICAgICAgICAgICBkcmF3OiAoY2hhcnRBcmVhKT0+e1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXdCYWNrZ3JvdW5kKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhd0dyaWQoY2hhcnRBcmVhKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3VGl0bGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHo6IGJ6LFxuICAgICAgICAgICAgICAgIGRyYXc6ICgpPT57XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhd0JvcmRlcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgejogdHosXG4gICAgICAgICAgICAgICAgZHJhdzogKGNoYXJ0QXJlYSk9PntcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3TGFiZWxzKGNoYXJ0QXJlYSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBdO1xuICAgIH1cbiBnZXRNYXRjaGluZ1Zpc2libGVNZXRhcyh0eXBlKSB7XG4gICAgICAgIGNvbnN0IG1ldGFzID0gdGhpcy5jaGFydC5nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCk7XG4gICAgICAgIGNvbnN0IGF4aXNJRCA9IHRoaXMuYXhpcyArICdBeGlzSUQnO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgbGV0IGksIGlsZW47XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IG1ldGFzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBjb25zdCBtZXRhID0gbWV0YXNbaV07XG4gICAgICAgICAgICBpZiAobWV0YVtheGlzSURdID09PSB0aGlzLmlkICYmICghdHlwZSB8fCBtZXRhLnR5cGUgPT09IHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobWV0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gX3Jlc29sdmVUaWNrRm9udE9wdGlvbnMoaW5kZXgpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucy50aWNrcy5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dChpbmRleCkpO1xuICAgICAgICByZXR1cm4gdG9Gb250KG9wdHMuZm9udCk7XG4gICAgfVxuIF9tYXhEaWdpdHMoKSB7XG4gICAgICAgIGNvbnN0IGZvbnRTaXplID0gdGhpcy5fcmVzb2x2ZVRpY2tGb250T3B0aW9ucygwKS5saW5lSGVpZ2h0O1xuICAgICAgICByZXR1cm4gKHRoaXMuaXNIb3Jpem9udGFsKCkgPyB0aGlzLndpZHRoIDogdGhpcy5oZWlnaHQpIC8gZm9udFNpemU7XG4gICAgfVxufVxuXG5jbGFzcyBUeXBlZFJlZ2lzdHJ5IHtcbiAgICBjb25zdHJ1Y3Rvcih0eXBlLCBzY29wZSwgb3ZlcnJpZGUpe1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMub3ZlcnJpZGUgPSBvdmVycmlkZTtcbiAgICAgICAgdGhpcy5pdGVtcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfVxuICAgIGlzRm9yVHlwZSh0eXBlKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmlzUHJvdG90eXBlT2YuY2FsbCh0aGlzLnR5cGUucHJvdG90eXBlLCB0eXBlLnByb3RvdHlwZSk7XG4gICAgfVxuIHJlZ2lzdGVyKGl0ZW0pIHtcbiAgICAgICAgY29uc3QgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoaXRlbSk7XG4gICAgICAgIGxldCBwYXJlbnRTY29wZTtcbiAgICAgICAgaWYgKGlzSUNoYXJ0Q29tcG9uZW50KHByb3RvKSkge1xuICAgICAgICAgICAgcGFyZW50U2NvcGUgPSB0aGlzLnJlZ2lzdGVyKHByb3RvKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpdGVtcyA9IHRoaXMuaXRlbXM7XG4gICAgICAgIGNvbnN0IGlkID0gaXRlbS5pZDtcbiAgICAgICAgY29uc3Qgc2NvcGUgPSB0aGlzLnNjb3BlICsgJy4nICsgaWQ7XG4gICAgICAgIGlmICghaWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY2xhc3MgZG9lcyBub3QgaGF2ZSBpZDogJyArIGl0ZW0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpZCBpbiBpdGVtcykge1xuICAgICAgICAgICAgcmV0dXJuIHNjb3BlO1xuICAgICAgICB9XG4gICAgICAgIGl0ZW1zW2lkXSA9IGl0ZW07XG4gICAgICAgIHJlZ2lzdGVyRGVmYXVsdHMoaXRlbSwgc2NvcGUsIHBhcmVudFNjb3BlKTtcbiAgICAgICAgaWYgKHRoaXMub3ZlcnJpZGUpIHtcbiAgICAgICAgICAgIGRlZmF1bHRzLm92ZXJyaWRlKGl0ZW0uaWQsIGl0ZW0ub3ZlcnJpZGVzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2NvcGU7XG4gICAgfVxuIGdldChpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pdGVtc1tpZF07XG4gICAgfVxuIHVucmVnaXN0ZXIoaXRlbSkge1xuICAgICAgICBjb25zdCBpdGVtcyA9IHRoaXMuaXRlbXM7XG4gICAgICAgIGNvbnN0IGlkID0gaXRlbS5pZDtcbiAgICAgICAgY29uc3Qgc2NvcGUgPSB0aGlzLnNjb3BlO1xuICAgICAgICBpZiAoaWQgaW4gaXRlbXMpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBpdGVtc1tpZF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNjb3BlICYmIGlkIGluIGRlZmF1bHRzW3Njb3BlXSkge1xuICAgICAgICAgICAgZGVsZXRlIGRlZmF1bHRzW3Njb3BlXVtpZF07XG4gICAgICAgICAgICBpZiAodGhpcy5vdmVycmlkZSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBvdmVycmlkZXNbaWRdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gcmVnaXN0ZXJEZWZhdWx0cyhpdGVtLCBzY29wZSwgcGFyZW50U2NvcGUpIHtcbiAgICBjb25zdCBpdGVtRGVmYXVsdHMgPSBtZXJnZShPYmplY3QuY3JlYXRlKG51bGwpLCBbXG4gICAgICAgIHBhcmVudFNjb3BlID8gZGVmYXVsdHMuZ2V0KHBhcmVudFNjb3BlKSA6IHt9LFxuICAgICAgICBkZWZhdWx0cy5nZXQoc2NvcGUpLFxuICAgICAgICBpdGVtLmRlZmF1bHRzXG4gICAgXSk7XG4gICAgZGVmYXVsdHMuc2V0KHNjb3BlLCBpdGVtRGVmYXVsdHMpO1xuICAgIGlmIChpdGVtLmRlZmF1bHRSb3V0ZXMpIHtcbiAgICAgICAgcm91dGVEZWZhdWx0cyhzY29wZSwgaXRlbS5kZWZhdWx0Um91dGVzKTtcbiAgICB9XG4gICAgaWYgKGl0ZW0uZGVzY3JpcHRvcnMpIHtcbiAgICAgICAgZGVmYXVsdHMuZGVzY3JpYmUoc2NvcGUsIGl0ZW0uZGVzY3JpcHRvcnMpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHJvdXRlRGVmYXVsdHMoc2NvcGUsIHJvdXRlcykge1xuICAgIE9iamVjdC5rZXlzKHJvdXRlcykuZm9yRWFjaCgocHJvcGVydHkpPT57XG4gICAgICAgIGNvbnN0IHByb3BlcnR5UGFydHMgPSBwcm9wZXJ0eS5zcGxpdCgnLicpO1xuICAgICAgICBjb25zdCBzb3VyY2VOYW1lID0gcHJvcGVydHlQYXJ0cy5wb3AoKTtcbiAgICAgICAgY29uc3Qgc291cmNlU2NvcGUgPSBbXG4gICAgICAgICAgICBzY29wZVxuICAgICAgICBdLmNvbmNhdChwcm9wZXJ0eVBhcnRzKS5qb2luKCcuJyk7XG4gICAgICAgIGNvbnN0IHBhcnRzID0gcm91dGVzW3Byb3BlcnR5XS5zcGxpdCgnLicpO1xuICAgICAgICBjb25zdCB0YXJnZXROYW1lID0gcGFydHMucG9wKCk7XG4gICAgICAgIGNvbnN0IHRhcmdldFNjb3BlID0gcGFydHMuam9pbignLicpO1xuICAgICAgICBkZWZhdWx0cy5yb3V0ZShzb3VyY2VTY29wZSwgc291cmNlTmFtZSwgdGFyZ2V0U2NvcGUsIHRhcmdldE5hbWUpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gaXNJQ2hhcnRDb21wb25lbnQocHJvdG8pIHtcbiAgICByZXR1cm4gJ2lkJyBpbiBwcm90byAmJiAnZGVmYXVsdHMnIGluIHByb3RvO1xufVxuXG5jbGFzcyBSZWdpc3RyeSB7XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgdGhpcy5jb250cm9sbGVycyA9IG5ldyBUeXBlZFJlZ2lzdHJ5KERhdGFzZXRDb250cm9sbGVyLCAnZGF0YXNldHMnLCB0cnVlKTtcbiAgICAgICAgdGhpcy5lbGVtZW50cyA9IG5ldyBUeXBlZFJlZ2lzdHJ5KEVsZW1lbnQsICdlbGVtZW50cycpO1xuICAgICAgICB0aGlzLnBsdWdpbnMgPSBuZXcgVHlwZWRSZWdpc3RyeShPYmplY3QsICdwbHVnaW5zJyk7XG4gICAgICAgIHRoaXMuc2NhbGVzID0gbmV3IFR5cGVkUmVnaXN0cnkoU2NhbGUsICdzY2FsZXMnKTtcbiAgICAgICAgdGhpcy5fdHlwZWRSZWdpc3RyaWVzID0gW1xuICAgICAgICAgICAgdGhpcy5jb250cm9sbGVycyxcbiAgICAgICAgICAgIHRoaXMuc2NhbGVzLFxuICAgICAgICAgICAgdGhpcy5lbGVtZW50c1xuICAgICAgICBdO1xuICAgIH1cbiBhZGQoLi4uYXJncykge1xuICAgICAgICB0aGlzLl9lYWNoKCdyZWdpc3RlcicsIGFyZ3MpO1xuICAgIH1cbiAgICByZW1vdmUoLi4uYXJncykge1xuICAgICAgICB0aGlzLl9lYWNoKCd1bnJlZ2lzdGVyJywgYXJncyk7XG4gICAgfVxuIGFkZENvbnRyb2xsZXJzKC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5fZWFjaCgncmVnaXN0ZXInLCBhcmdzLCB0aGlzLmNvbnRyb2xsZXJzKTtcbiAgICB9XG4gYWRkRWxlbWVudHMoLi4uYXJncykge1xuICAgICAgICB0aGlzLl9lYWNoKCdyZWdpc3RlcicsIGFyZ3MsIHRoaXMuZWxlbWVudHMpO1xuICAgIH1cbiBhZGRQbHVnaW5zKC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5fZWFjaCgncmVnaXN0ZXInLCBhcmdzLCB0aGlzLnBsdWdpbnMpO1xuICAgIH1cbiBhZGRTY2FsZXMoLi4uYXJncykge1xuICAgICAgICB0aGlzLl9lYWNoKCdyZWdpc3RlcicsIGFyZ3MsIHRoaXMuc2NhbGVzKTtcbiAgICB9XG4gZ2V0Q29udHJvbGxlcihpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0KGlkLCB0aGlzLmNvbnRyb2xsZXJzLCAnY29udHJvbGxlcicpO1xuICAgIH1cbiBnZXRFbGVtZW50KGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXQoaWQsIHRoaXMuZWxlbWVudHMsICdlbGVtZW50Jyk7XG4gICAgfVxuIGdldFBsdWdpbihpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0KGlkLCB0aGlzLnBsdWdpbnMsICdwbHVnaW4nKTtcbiAgICB9XG4gZ2V0U2NhbGUoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldChpZCwgdGhpcy5zY2FsZXMsICdzY2FsZScpO1xuICAgIH1cbiByZW1vdmVDb250cm9sbGVycyguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuX2VhY2goJ3VucmVnaXN0ZXInLCBhcmdzLCB0aGlzLmNvbnRyb2xsZXJzKTtcbiAgICB9XG4gcmVtb3ZlRWxlbWVudHMoLi4uYXJncykge1xuICAgICAgICB0aGlzLl9lYWNoKCd1bnJlZ2lzdGVyJywgYXJncywgdGhpcy5lbGVtZW50cyk7XG4gICAgfVxuIHJlbW92ZVBsdWdpbnMoLi4uYXJncykge1xuICAgICAgICB0aGlzLl9lYWNoKCd1bnJlZ2lzdGVyJywgYXJncywgdGhpcy5wbHVnaW5zKTtcbiAgICB9XG4gcmVtb3ZlU2NhbGVzKC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5fZWFjaCgndW5yZWdpc3RlcicsIGFyZ3MsIHRoaXMuc2NhbGVzKTtcbiAgICB9XG4gX2VhY2gobWV0aG9kLCBhcmdzLCB0eXBlZFJlZ2lzdHJ5KSB7XG4gICAgICAgIFtcbiAgICAgICAgICAgIC4uLmFyZ3NcbiAgICAgICAgXS5mb3JFYWNoKChhcmcpPT57XG4gICAgICAgICAgICBjb25zdCByZWcgPSB0eXBlZFJlZ2lzdHJ5IHx8IHRoaXMuX2dldFJlZ2lzdHJ5Rm9yVHlwZShhcmcpO1xuICAgICAgICAgICAgaWYgKHR5cGVkUmVnaXN0cnkgfHwgcmVnLmlzRm9yVHlwZShhcmcpIHx8IHJlZyA9PT0gdGhpcy5wbHVnaW5zICYmIGFyZy5pZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2V4ZWMobWV0aG9kLCByZWcsIGFyZyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVhY2goYXJnLCAoaXRlbSk9PntcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlbVJlZyA9IHR5cGVkUmVnaXN0cnkgfHwgdGhpcy5fZ2V0UmVnaXN0cnlGb3JUeXBlKGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9leGVjKG1ldGhvZCwgaXRlbVJlZywgaXRlbSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiBfZXhlYyhtZXRob2QsIHJlZ2lzdHJ5LCBjb21wb25lbnQpIHtcbiAgICAgICAgY29uc3QgY2FtZWxNZXRob2QgPSBfY2FwaXRhbGl6ZShtZXRob2QpO1xuICAgICAgICBjYWxsYmFjayhjb21wb25lbnRbJ2JlZm9yZScgKyBjYW1lbE1ldGhvZF0sIFtdLCBjb21wb25lbnQpO1xuICAgICAgICByZWdpc3RyeVttZXRob2RdKGNvbXBvbmVudCk7XG4gICAgICAgIGNhbGxiYWNrKGNvbXBvbmVudFsnYWZ0ZXInICsgY2FtZWxNZXRob2RdLCBbXSwgY29tcG9uZW50KTtcbiAgICB9XG4gX2dldFJlZ2lzdHJ5Rm9yVHlwZSh0eXBlKSB7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLl90eXBlZFJlZ2lzdHJpZXMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgY29uc3QgcmVnID0gdGhpcy5fdHlwZWRSZWdpc3RyaWVzW2ldO1xuICAgICAgICAgICAgaWYgKHJlZy5pc0ZvclR5cGUodHlwZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnBsdWdpbnM7XG4gICAgfVxuIF9nZXQoaWQsIHR5cGVkUmVnaXN0cnksIHR5cGUpIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IHR5cGVkUmVnaXN0cnkuZ2V0KGlkKTtcbiAgICAgICAgaWYgKGl0ZW0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyBpZCArICdcIiBpcyBub3QgYSByZWdpc3RlcmVkICcgKyB0eXBlICsgJy4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXRlbTtcbiAgICB9XG59XG52YXIgcmVnaXN0cnkgPSAvKiAjX19QVVJFX18gKi8gbmV3IFJlZ2lzdHJ5KCk7XG5cbmNsYXNzIFBsdWdpblNlcnZpY2Uge1xuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHRoaXMuX2luaXQgPSBbXTtcbiAgICB9XG4gbm90aWZ5KGNoYXJ0LCBob29rLCBhcmdzLCBmaWx0ZXIpIHtcbiAgICAgICAgaWYgKGhvb2sgPT09ICdiZWZvcmVJbml0Jykge1xuICAgICAgICAgICAgdGhpcy5faW5pdCA9IHRoaXMuX2NyZWF0ZURlc2NyaXB0b3JzKGNoYXJ0LCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuX25vdGlmeSh0aGlzLl9pbml0LCBjaGFydCwgJ2luc3RhbGwnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkZXNjcmlwdG9ycyA9IGZpbHRlciA/IHRoaXMuX2Rlc2NyaXB0b3JzKGNoYXJ0KS5maWx0ZXIoZmlsdGVyKSA6IHRoaXMuX2Rlc2NyaXB0b3JzKGNoYXJ0KTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fbm90aWZ5KGRlc2NyaXB0b3JzLCBjaGFydCwgaG9vaywgYXJncyk7XG4gICAgICAgIGlmIChob29rID09PSAnYWZ0ZXJEZXN0cm95Jykge1xuICAgICAgICAgICAgdGhpcy5fbm90aWZ5KGRlc2NyaXB0b3JzLCBjaGFydCwgJ3N0b3AnKTtcbiAgICAgICAgICAgIHRoaXMuX25vdGlmeSh0aGlzLl9pbml0LCBjaGFydCwgJ3VuaW5zdGFsbCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuIF9ub3RpZnkoZGVzY3JpcHRvcnMsIGNoYXJ0LCBob29rLCBhcmdzKSB7XG4gICAgICAgIGFyZ3MgPSBhcmdzIHx8IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGRlc2NyaXB0b3Igb2YgZGVzY3JpcHRvcnMpe1xuICAgICAgICAgICAgY29uc3QgcGx1Z2luID0gZGVzY3JpcHRvci5wbHVnaW47XG4gICAgICAgICAgICBjb25zdCBtZXRob2QgPSBwbHVnaW5baG9va107XG4gICAgICAgICAgICBjb25zdCBwYXJhbXMgPSBbXG4gICAgICAgICAgICAgICAgY2hhcnQsXG4gICAgICAgICAgICAgICAgYXJncyxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdG9yLm9wdGlvbnNcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sobWV0aG9kLCBwYXJhbXMsIHBsdWdpbikgPT09IGZhbHNlICYmIGFyZ3MuY2FuY2VsYWJsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaW52YWxpZGF0ZSgpIHtcbiAgICAgICAgaWYgKCFpc051bGxPclVuZGVmKHRoaXMuX2NhY2hlKSkge1xuICAgICAgICAgICAgdGhpcy5fb2xkQ2FjaGUgPSB0aGlzLl9jYWNoZTtcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuIF9kZXNjcmlwdG9ycyhjaGFydCkge1xuICAgICAgICBpZiAodGhpcy5fY2FjaGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkZXNjcmlwdG9ycyA9IHRoaXMuX2NhY2hlID0gdGhpcy5fY3JlYXRlRGVzY3JpcHRvcnMoY2hhcnQpO1xuICAgICAgICB0aGlzLl9ub3RpZnlTdGF0ZUNoYW5nZXMoY2hhcnQpO1xuICAgICAgICByZXR1cm4gZGVzY3JpcHRvcnM7XG4gICAgfVxuICAgIF9jcmVhdGVEZXNjcmlwdG9ycyhjaGFydCwgYWxsKSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IGNoYXJ0ICYmIGNoYXJ0LmNvbmZpZztcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHZhbHVlT3JEZWZhdWx0KGNvbmZpZy5vcHRpb25zICYmIGNvbmZpZy5vcHRpb25zLnBsdWdpbnMsIHt9KTtcbiAgICAgICAgY29uc3QgcGx1Z2lucyA9IGFsbFBsdWdpbnMoY29uZmlnKTtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMgPT09IGZhbHNlICYmICFhbGwgPyBbXSA6IGNyZWF0ZURlc2NyaXB0b3JzKGNoYXJ0LCBwbHVnaW5zLCBvcHRpb25zLCBhbGwpO1xuICAgIH1cbiBfbm90aWZ5U3RhdGVDaGFuZ2VzKGNoYXJ0KSB7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzRGVzY3JpcHRvcnMgPSB0aGlzLl9vbGRDYWNoZSB8fCBbXTtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRvcnMgPSB0aGlzLl9jYWNoZTtcbiAgICAgICAgY29uc3QgZGlmZiA9IChhLCBiKT0+YS5maWx0ZXIoKHgpPT4hYi5zb21lKCh5KT0+eC5wbHVnaW4uaWQgPT09IHkucGx1Z2luLmlkKSk7XG4gICAgICAgIHRoaXMuX25vdGlmeShkaWZmKHByZXZpb3VzRGVzY3JpcHRvcnMsIGRlc2NyaXB0b3JzKSwgY2hhcnQsICdzdG9wJyk7XG4gICAgICAgIHRoaXMuX25vdGlmeShkaWZmKGRlc2NyaXB0b3JzLCBwcmV2aW91c0Rlc2NyaXB0b3JzKSwgY2hhcnQsICdzdGFydCcpO1xuICAgIH1cbn1cbiBmdW5jdGlvbiBhbGxQbHVnaW5zKGNvbmZpZykge1xuICAgIGNvbnN0IGxvY2FsSWRzID0ge307XG4gICAgY29uc3QgcGx1Z2lucyA9IFtdO1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhyZWdpc3RyeS5wbHVnaW5zLml0ZW1zKTtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIHBsdWdpbnMucHVzaChyZWdpc3RyeS5nZXRQbHVnaW4oa2V5c1tpXSkpO1xuICAgIH1cbiAgICBjb25zdCBsb2NhbCA9IGNvbmZpZy5wbHVnaW5zIHx8IFtdO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsb2NhbC5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGNvbnN0IHBsdWdpbiA9IGxvY2FsW2ldO1xuICAgICAgICBpZiAocGx1Z2lucy5pbmRleE9mKHBsdWdpbikgPT09IC0xKSB7XG4gICAgICAgICAgICBwbHVnaW5zLnB1c2gocGx1Z2luKTtcbiAgICAgICAgICAgIGxvY2FsSWRzW3BsdWdpbi5pZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHBsdWdpbnMsXG4gICAgICAgIGxvY2FsSWRzXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGdldE9wdHMob3B0aW9ucywgYWxsKSB7XG4gICAgaWYgKCFhbGwgJiYgb3B0aW9ucyA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChvcHRpb25zID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgcmV0dXJuIG9wdGlvbnM7XG59XG5mdW5jdGlvbiBjcmVhdGVEZXNjcmlwdG9ycyhjaGFydCwgeyBwbHVnaW5zICwgbG9jYWxJZHMgIH0sIG9wdGlvbnMsIGFsbCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGNvbnN0IGNvbnRleHQgPSBjaGFydC5nZXRDb250ZXh0KCk7XG4gICAgZm9yIChjb25zdCBwbHVnaW4gb2YgcGx1Z2lucyl7XG4gICAgICAgIGNvbnN0IGlkID0gcGx1Z2luLmlkO1xuICAgICAgICBjb25zdCBvcHRzID0gZ2V0T3B0cyhvcHRpb25zW2lkXSwgYWxsKTtcbiAgICAgICAgaWYgKG9wdHMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgIHBsdWdpbixcbiAgICAgICAgICAgIG9wdGlvbnM6IHBsdWdpbk9wdHMoY2hhcnQuY29uZmlnLCB7XG4gICAgICAgICAgICAgICAgcGx1Z2luLFxuICAgICAgICAgICAgICAgIGxvY2FsOiBsb2NhbElkc1tpZF1cbiAgICAgICAgICAgIH0sIG9wdHMsIGNvbnRleHQpXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gcGx1Z2luT3B0cyhjb25maWcsIHsgcGx1Z2luICwgbG9jYWwgIH0sIG9wdHMsIGNvbnRleHQpIHtcbiAgICBjb25zdCBrZXlzID0gY29uZmlnLnBsdWdpblNjb3BlS2V5cyhwbHVnaW4pO1xuICAgIGNvbnN0IHNjb3BlcyA9IGNvbmZpZy5nZXRPcHRpb25TY29wZXMob3B0cywga2V5cyk7XG4gICAgaWYgKGxvY2FsICYmIHBsdWdpbi5kZWZhdWx0cykge1xuICAgICAgICBzY29wZXMucHVzaChwbHVnaW4uZGVmYXVsdHMpO1xuICAgIH1cbiAgICByZXR1cm4gY29uZmlnLmNyZWF0ZVJlc29sdmVyKHNjb3BlcywgY29udGV4dCwgW1xuICAgICAgICAnJ1xuICAgIF0sIHtcbiAgICAgICAgc2NyaXB0YWJsZTogZmFsc2UsXG4gICAgICAgIGluZGV4YWJsZTogZmFsc2UsXG4gICAgICAgIGFsbEtleXM6IHRydWVcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0SW5kZXhBeGlzKHR5cGUsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBkYXRhc2V0RGVmYXVsdHMgPSBkZWZhdWx0cy5kYXRhc2V0c1t0eXBlXSB8fCB7fTtcbiAgICBjb25zdCBkYXRhc2V0T3B0aW9ucyA9IChvcHRpb25zLmRhdGFzZXRzIHx8IHt9KVt0eXBlXSB8fCB7fTtcbiAgICByZXR1cm4gZGF0YXNldE9wdGlvbnMuaW5kZXhBeGlzIHx8IG9wdGlvbnMuaW5kZXhBeGlzIHx8IGRhdGFzZXREZWZhdWx0cy5pbmRleEF4aXMgfHwgJ3gnO1xufVxuZnVuY3Rpb24gZ2V0QXhpc0Zyb21EZWZhdWx0U2NhbGVJRChpZCwgaW5kZXhBeGlzKSB7XG4gICAgbGV0IGF4aXMgPSBpZDtcbiAgICBpZiAoaWQgPT09ICdfaW5kZXhfJykge1xuICAgICAgICBheGlzID0gaW5kZXhBeGlzO1xuICAgIH0gZWxzZSBpZiAoaWQgPT09ICdfdmFsdWVfJykge1xuICAgICAgICBheGlzID0gaW5kZXhBeGlzID09PSAneCcgPyAneScgOiAneCc7XG4gICAgfVxuICAgIHJldHVybiBheGlzO1xufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdFNjYWxlSURGcm9tQXhpcyhheGlzLCBpbmRleEF4aXMpIHtcbiAgICByZXR1cm4gYXhpcyA9PT0gaW5kZXhBeGlzID8gJ19pbmRleF8nIDogJ192YWx1ZV8nO1xufVxuZnVuY3Rpb24gaWRNYXRjaGVzQXhpcyhpZCkge1xuICAgIGlmIChpZCA9PT0gJ3gnIHx8IGlkID09PSAneScgfHwgaWQgPT09ICdyJykge1xuICAgICAgICByZXR1cm4gaWQ7XG4gICAgfVxufVxuZnVuY3Rpb24gYXhpc0Zyb21Qb3NpdGlvbihwb3NpdGlvbikge1xuICAgIGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcgfHwgcG9zaXRpb24gPT09ICdib3R0b20nKSB7XG4gICAgICAgIHJldHVybiAneCc7XG4gICAgfVxuICAgIGlmIChwb3NpdGlvbiA9PT0gJ2xlZnQnIHx8IHBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgIHJldHVybiAneSc7XG4gICAgfVxufVxuZnVuY3Rpb24gZGV0ZXJtaW5lQXhpcyhpZCwgLi4uc2NhbGVPcHRpb25zKSB7XG4gICAgaWYgKGlkTWF0Y2hlc0F4aXMoaWQpKSB7XG4gICAgICAgIHJldHVybiBpZDtcbiAgICB9XG4gICAgZm9yIChjb25zdCBvcHRzIG9mIHNjYWxlT3B0aW9ucyl7XG4gICAgICAgIGNvbnN0IGF4aXMgPSBvcHRzLmF4aXMgfHwgYXhpc0Zyb21Qb3NpdGlvbihvcHRzLnBvc2l0aW9uKSB8fCBpZC5sZW5ndGggPiAxICYmIGlkTWF0Y2hlc0F4aXMoaWRbMF0udG9Mb3dlckNhc2UoKSk7XG4gICAgICAgIGlmIChheGlzKSB7XG4gICAgICAgICAgICByZXR1cm4gYXhpcztcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBkZXRlcm1pbmUgdHlwZSBvZiAnJHtpZH0nIGF4aXMuIFBsZWFzZSBwcm92aWRlICdheGlzJyBvciAncG9zaXRpb24nIG9wdGlvbi5gKTtcbn1cbmZ1bmN0aW9uIGdldEF4aXNGcm9tRGF0YXNldChpZCwgYXhpcywgZGF0YXNldCkge1xuICAgIGlmIChkYXRhc2V0W2F4aXMgKyAnQXhpc0lEJ10gPT09IGlkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBheGlzXG4gICAgICAgIH07XG4gICAgfVxufVxuZnVuY3Rpb24gcmV0cmlldmVBeGlzRnJvbURhdGFzZXRzKGlkLCBjb25maWcpIHtcbiAgICBpZiAoY29uZmlnLmRhdGEgJiYgY29uZmlnLmRhdGEuZGF0YXNldHMpIHtcbiAgICAgICAgY29uc3QgYm91bmREcyA9IGNvbmZpZy5kYXRhLmRhdGFzZXRzLmZpbHRlcigoZCk9PmQueEF4aXNJRCA9PT0gaWQgfHwgZC55QXhpc0lEID09PSBpZCk7XG4gICAgICAgIGlmIChib3VuZERzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldEF4aXNGcm9tRGF0YXNldChpZCwgJ3gnLCBib3VuZERzWzBdKSB8fCBnZXRBeGlzRnJvbURhdGFzZXQoaWQsICd5JywgYm91bmREc1swXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHt9O1xufVxuZnVuY3Rpb24gbWVyZ2VTY2FsZUNvbmZpZyhjb25maWcsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBjaGFydERlZmF1bHRzID0gb3ZlcnJpZGVzW2NvbmZpZy50eXBlXSB8fCB7XG4gICAgICAgIHNjYWxlczoge31cbiAgICB9O1xuICAgIGNvbnN0IGNvbmZpZ1NjYWxlcyA9IG9wdGlvbnMuc2NhbGVzIHx8IHt9O1xuICAgIGNvbnN0IGNoYXJ0SW5kZXhBeGlzID0gZ2V0SW5kZXhBeGlzKGNvbmZpZy50eXBlLCBvcHRpb25zKTtcbiAgICBjb25zdCBzY2FsZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIE9iamVjdC5rZXlzKGNvbmZpZ1NjYWxlcykuZm9yRWFjaCgoaWQpPT57XG4gICAgICAgIGNvbnN0IHNjYWxlQ29uZiA9IGNvbmZpZ1NjYWxlc1tpZF07XG4gICAgICAgIGlmICghaXNPYmplY3Qoc2NhbGVDb25mKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoYEludmFsaWQgc2NhbGUgY29uZmlndXJhdGlvbiBmb3Igc2NhbGU6ICR7aWR9YCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNjYWxlQ29uZi5fcHJveHkpIHtcbiAgICAgICAgICAgIHJldHVybiBjb25zb2xlLndhcm4oYElnbm9yaW5nIHJlc29sdmVyIHBhc3NlZCBhcyBvcHRpb25zIGZvciBzY2FsZTogJHtpZH1gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBheGlzID0gZGV0ZXJtaW5lQXhpcyhpZCwgc2NhbGVDb25mLCByZXRyaWV2ZUF4aXNGcm9tRGF0YXNldHMoaWQsIGNvbmZpZyksIGRlZmF1bHRzLnNjYWxlc1tzY2FsZUNvbmYudHlwZV0pO1xuICAgICAgICBjb25zdCBkZWZhdWx0SWQgPSBnZXREZWZhdWx0U2NhbGVJREZyb21BeGlzKGF4aXMsIGNoYXJ0SW5kZXhBeGlzKTtcbiAgICAgICAgY29uc3QgZGVmYXVsdFNjYWxlT3B0aW9ucyA9IGNoYXJ0RGVmYXVsdHMuc2NhbGVzIHx8IHt9O1xuICAgICAgICBzY2FsZXNbaWRdID0gbWVyZ2VJZihPYmplY3QuY3JlYXRlKG51bGwpLCBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYXhpc1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNjYWxlQ29uZixcbiAgICAgICAgICAgIGRlZmF1bHRTY2FsZU9wdGlvbnNbYXhpc10sXG4gICAgICAgICAgICBkZWZhdWx0U2NhbGVPcHRpb25zW2RlZmF1bHRJZF1cbiAgICAgICAgXSk7XG4gICAgfSk7XG4gICAgY29uZmlnLmRhdGEuZGF0YXNldHMuZm9yRWFjaCgoZGF0YXNldCk9PntcbiAgICAgICAgY29uc3QgdHlwZSA9IGRhdGFzZXQudHlwZSB8fCBjb25maWcudHlwZTtcbiAgICAgICAgY29uc3QgaW5kZXhBeGlzID0gZGF0YXNldC5pbmRleEF4aXMgfHwgZ2V0SW5kZXhBeGlzKHR5cGUsIG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBkYXRhc2V0RGVmYXVsdHMgPSBvdmVycmlkZXNbdHlwZV0gfHwge307XG4gICAgICAgIGNvbnN0IGRlZmF1bHRTY2FsZU9wdGlvbnMgPSBkYXRhc2V0RGVmYXVsdHMuc2NhbGVzIHx8IHt9O1xuICAgICAgICBPYmplY3Qua2V5cyhkZWZhdWx0U2NhbGVPcHRpb25zKS5mb3JFYWNoKChkZWZhdWx0SUQpPT57XG4gICAgICAgICAgICBjb25zdCBheGlzID0gZ2V0QXhpc0Zyb21EZWZhdWx0U2NhbGVJRChkZWZhdWx0SUQsIGluZGV4QXhpcyk7XG4gICAgICAgICAgICBjb25zdCBpZCA9IGRhdGFzZXRbYXhpcyArICdBeGlzSUQnXSB8fCBheGlzO1xuICAgICAgICAgICAgc2NhbGVzW2lkXSA9IHNjYWxlc1tpZF0gfHwgT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICAgIG1lcmdlSWYoc2NhbGVzW2lkXSwgW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYXhpc1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY29uZmlnU2NhbGVzW2lkXSxcbiAgICAgICAgICAgICAgICBkZWZhdWx0U2NhbGVPcHRpb25zW2RlZmF1bHRJRF1cbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBPYmplY3Qua2V5cyhzY2FsZXMpLmZvckVhY2goKGtleSk9PntcbiAgICAgICAgY29uc3Qgc2NhbGUgPSBzY2FsZXNba2V5XTtcbiAgICAgICAgbWVyZ2VJZihzY2FsZSwgW1xuICAgICAgICAgICAgZGVmYXVsdHMuc2NhbGVzW3NjYWxlLnR5cGVdLFxuICAgICAgICAgICAgZGVmYXVsdHMuc2NhbGVcbiAgICAgICAgXSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNjYWxlcztcbn1cbmZ1bmN0aW9uIGluaXRPcHRpb25zKGNvbmZpZykge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBjb25maWcub3B0aW9ucyB8fCAoY29uZmlnLm9wdGlvbnMgPSB7fSk7XG4gICAgb3B0aW9ucy5wbHVnaW5zID0gdmFsdWVPckRlZmF1bHQob3B0aW9ucy5wbHVnaW5zLCB7fSk7XG4gICAgb3B0aW9ucy5zY2FsZXMgPSBtZXJnZVNjYWxlQ29uZmlnKGNvbmZpZywgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiBpbml0RGF0YShkYXRhKSB7XG4gICAgZGF0YSA9IGRhdGEgfHwge307XG4gICAgZGF0YS5kYXRhc2V0cyA9IGRhdGEuZGF0YXNldHMgfHwgW107XG4gICAgZGF0YS5sYWJlbHMgPSBkYXRhLmxhYmVscyB8fCBbXTtcbiAgICByZXR1cm4gZGF0YTtcbn1cbmZ1bmN0aW9uIGluaXRDb25maWcoY29uZmlnKSB7XG4gICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICAgIGNvbmZpZy5kYXRhID0gaW5pdERhdGEoY29uZmlnLmRhdGEpO1xuICAgIGluaXRPcHRpb25zKGNvbmZpZyk7XG4gICAgcmV0dXJuIGNvbmZpZztcbn1cbmNvbnN0IGtleUNhY2hlID0gbmV3IE1hcCgpO1xuY29uc3Qga2V5c0NhY2hlZCA9IG5ldyBTZXQoKTtcbmZ1bmN0aW9uIGNhY2hlZEtleXMoY2FjaGVLZXksIGdlbmVyYXRlKSB7XG4gICAgbGV0IGtleXMgPSBrZXlDYWNoZS5nZXQoY2FjaGVLZXkpO1xuICAgIGlmICgha2V5cykge1xuICAgICAgICBrZXlzID0gZ2VuZXJhdGUoKTtcbiAgICAgICAga2V5Q2FjaGUuc2V0KGNhY2hlS2V5LCBrZXlzKTtcbiAgICAgICAga2V5c0NhY2hlZC5hZGQoa2V5cyk7XG4gICAgfVxuICAgIHJldHVybiBrZXlzO1xufVxuY29uc3QgYWRkSWZGb3VuZCA9IChzZXQsIG9iaiwga2V5KT0+e1xuICAgIGNvbnN0IG9wdHMgPSByZXNvbHZlT2JqZWN0S2V5KG9iaiwga2V5KTtcbiAgICBpZiAob3B0cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHNldC5hZGQob3B0cyk7XG4gICAgfVxufTtcbmNsYXNzIENvbmZpZyB7XG4gICAgY29uc3RydWN0b3IoY29uZmlnKXtcbiAgICAgICAgdGhpcy5fY29uZmlnID0gaW5pdENvbmZpZyhjb25maWcpO1xuICAgICAgICB0aGlzLl9zY29wZUNhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLl9yZXNvbHZlckNhY2hlID0gbmV3IE1hcCgpO1xuICAgIH1cbiAgICBnZXQgcGxhdGZvcm0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb25maWcucGxhdGZvcm07XG4gICAgfVxuICAgIGdldCB0eXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29uZmlnLnR5cGU7XG4gICAgfVxuICAgIHNldCB0eXBlKHR5cGUpIHtcbiAgICAgICAgdGhpcy5fY29uZmlnLnR5cGUgPSB0eXBlO1xuICAgIH1cbiAgICBnZXQgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5kYXRhO1xuICAgIH1cbiAgICBzZXQgZGF0YShkYXRhKSB7XG4gICAgICAgIHRoaXMuX2NvbmZpZy5kYXRhID0gaW5pdERhdGEoZGF0YSk7XG4gICAgfVxuICAgIGdldCBvcHRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29uZmlnLm9wdGlvbnM7XG4gICAgfVxuICAgIHNldCBvcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5fY29uZmlnLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICBnZXQgcGx1Z2lucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5wbHVnaW5zO1xuICAgIH1cbiAgICB1cGRhdGUoKSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuX2NvbmZpZztcbiAgICAgICAgdGhpcy5jbGVhckNhY2hlKCk7XG4gICAgICAgIGluaXRPcHRpb25zKGNvbmZpZyk7XG4gICAgfVxuICAgIGNsZWFyQ2FjaGUoKSB7XG4gICAgICAgIHRoaXMuX3Njb3BlQ2FjaGUuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5fcmVzb2x2ZXJDYWNoZS5jbGVhcigpO1xuICAgIH1cbiBkYXRhc2V0U2NvcGVLZXlzKGRhdGFzZXRUeXBlKSB7XG4gICAgICAgIHJldHVybiBjYWNoZWRLZXlzKGRhdGFzZXRUeXBlLCAoKT0+W1xuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgYGRhdGFzZXRzLiR7ZGF0YXNldFR5cGV9YCxcbiAgICAgICAgICAgICAgICAgICAgJydcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdKTtcbiAgICB9XG4gZGF0YXNldEFuaW1hdGlvblNjb3BlS2V5cyhkYXRhc2V0VHlwZSwgdHJhbnNpdGlvbikge1xuICAgICAgICByZXR1cm4gY2FjaGVkS2V5cyhgJHtkYXRhc2V0VHlwZX0udHJhbnNpdGlvbi4ke3RyYW5zaXRpb259YCwgKCk9PltcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgIGBkYXRhc2V0cy4ke2RhdGFzZXRUeXBlfS50cmFuc2l0aW9ucy4ke3RyYW5zaXRpb259YCxcbiAgICAgICAgICAgICAgICAgICAgYHRyYW5zaXRpb25zLiR7dHJhbnNpdGlvbn1gXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgIGBkYXRhc2V0cy4ke2RhdGFzZXRUeXBlfWAsXG4gICAgICAgICAgICAgICAgICAgICcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgXSk7XG4gICAgfVxuIGRhdGFzZXRFbGVtZW50U2NvcGVLZXlzKGRhdGFzZXRUeXBlLCBlbGVtZW50VHlwZSkge1xuICAgICAgICByZXR1cm4gY2FjaGVkS2V5cyhgJHtkYXRhc2V0VHlwZX0tJHtlbGVtZW50VHlwZX1gLCAoKT0+W1xuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgYGRhdGFzZXRzLiR7ZGF0YXNldFR5cGV9LmVsZW1lbnRzLiR7ZWxlbWVudFR5cGV9YCxcbiAgICAgICAgICAgICAgICAgICAgYGRhdGFzZXRzLiR7ZGF0YXNldFR5cGV9YCxcbiAgICAgICAgICAgICAgICAgICAgYGVsZW1lbnRzLiR7ZWxlbWVudFR5cGV9YCxcbiAgICAgICAgICAgICAgICAgICAgJydcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdKTtcbiAgICB9XG4gcGx1Z2luU2NvcGVLZXlzKHBsdWdpbikge1xuICAgICAgICBjb25zdCBpZCA9IHBsdWdpbi5pZDtcbiAgICAgICAgY29uc3QgdHlwZSA9IHRoaXMudHlwZTtcbiAgICAgICAgcmV0dXJuIGNhY2hlZEtleXMoYCR7dHlwZX0tcGx1Z2luLSR7aWR9YCwgKCk9PltcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgIGBwbHVnaW5zLiR7aWR9YCxcbiAgICAgICAgICAgICAgICAgICAgLi4ucGx1Z2luLmFkZGl0aW9uYWxPcHRpb25TY29wZXMgfHwgW11cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdKTtcbiAgICB9XG4gX2NhY2hlZFNjb3BlcyhtYWluU2NvcGUsIHJlc2V0Q2FjaGUpIHtcbiAgICAgICAgY29uc3QgX3Njb3BlQ2FjaGUgPSB0aGlzLl9zY29wZUNhY2hlO1xuICAgICAgICBsZXQgY2FjaGUgPSBfc2NvcGVDYWNoZS5nZXQobWFpblNjb3BlKTtcbiAgICAgICAgaWYgKCFjYWNoZSB8fCByZXNldENhY2hlKSB7XG4gICAgICAgICAgICBjYWNoZSA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIF9zY29wZUNhY2hlLnNldChtYWluU2NvcGUsIGNhY2hlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2FjaGU7XG4gICAgfVxuIGdldE9wdGlvblNjb3BlcyhtYWluU2NvcGUsIGtleUxpc3RzLCByZXNldENhY2hlKSB7XG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucyAsIHR5cGUgIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBjYWNoZSA9IHRoaXMuX2NhY2hlZFNjb3BlcyhtYWluU2NvcGUsIHJlc2V0Q2FjaGUpO1xuICAgICAgICBjb25zdCBjYWNoZWQgPSBjYWNoZS5nZXQoa2V5TGlzdHMpO1xuICAgICAgICBpZiAoY2FjaGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNjb3BlcyA9IG5ldyBTZXQoKTtcbiAgICAgICAga2V5TGlzdHMuZm9yRWFjaCgoa2V5cyk9PntcbiAgICAgICAgICAgIGlmIChtYWluU2NvcGUpIHtcbiAgICAgICAgICAgICAgICBzY29wZXMuYWRkKG1haW5TY29wZSk7XG4gICAgICAgICAgICAgICAga2V5cy5mb3JFYWNoKChrZXkpPT5hZGRJZkZvdW5kKHNjb3BlcywgbWFpblNjb3BlLCBrZXkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGtleXMuZm9yRWFjaCgoa2V5KT0+YWRkSWZGb3VuZChzY29wZXMsIG9wdGlvbnMsIGtleSkpO1xuICAgICAgICAgICAga2V5cy5mb3JFYWNoKChrZXkpPT5hZGRJZkZvdW5kKHNjb3Blcywgb3ZlcnJpZGVzW3R5cGVdIHx8IHt9LCBrZXkpKTtcbiAgICAgICAgICAgIGtleXMuZm9yRWFjaCgoa2V5KT0+YWRkSWZGb3VuZChzY29wZXMsIGRlZmF1bHRzLCBrZXkpKTtcbiAgICAgICAgICAgIGtleXMuZm9yRWFjaCgoa2V5KT0+YWRkSWZGb3VuZChzY29wZXMsIGRlc2NyaXB0b3JzLCBrZXkpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGFycmF5ID0gQXJyYXkuZnJvbShzY29wZXMpO1xuICAgICAgICBpZiAoYXJyYXkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBhcnJheS5wdXNoKE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChrZXlzQ2FjaGVkLmhhcyhrZXlMaXN0cykpIHtcbiAgICAgICAgICAgIGNhY2hlLnNldChrZXlMaXN0cywgYXJyYXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG4gY2hhcnRPcHRpb25TY29wZXMoKSB7XG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucyAsIHR5cGUgIH0gPSB0aGlzO1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgIG92ZXJyaWRlc1t0eXBlXSB8fCB7fSxcbiAgICAgICAgICAgIGRlZmF1bHRzLmRhdGFzZXRzW3R5cGVdIHx8IHt9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHR5cGVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZWZhdWx0cyxcbiAgICAgICAgICAgIGRlc2NyaXB0b3JzXG4gICAgICAgIF07XG4gICAgfVxuIHJlc29sdmVOYW1lZE9wdGlvbnMoc2NvcGVzLCBuYW1lcywgY29udGV4dCwgcHJlZml4ZXMgPSBbXG4gICAgICAgICcnXG4gICAgXSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICAgICAgICAkc2hhcmVkOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHsgcmVzb2x2ZXIgLCBzdWJQcmVmaXhlcyAgfSA9IGdldFJlc29sdmVyKHRoaXMuX3Jlc29sdmVyQ2FjaGUsIHNjb3BlcywgcHJlZml4ZXMpO1xuICAgICAgICBsZXQgb3B0aW9ucyA9IHJlc29sdmVyO1xuICAgICAgICBpZiAobmVlZENvbnRleHQocmVzb2x2ZXIsIG5hbWVzKSkge1xuICAgICAgICAgICAgcmVzdWx0LiRzaGFyZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnRleHQgPSBpc0Z1bmN0aW9uKGNvbnRleHQpID8gY29udGV4dCgpIDogY29udGV4dDtcbiAgICAgICAgICAgIGNvbnN0IHN1YlJlc29sdmVyID0gdGhpcy5jcmVhdGVSZXNvbHZlcihzY29wZXMsIGNvbnRleHQsIHN1YlByZWZpeGVzKTtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBfYXR0YWNoQ29udGV4dChyZXNvbHZlciwgY29udGV4dCwgc3ViUmVzb2x2ZXIpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgcHJvcCBvZiBuYW1lcyl7XG4gICAgICAgICAgICByZXN1bHRbcHJvcF0gPSBvcHRpb25zW3Byb3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuIGNyZWF0ZVJlc29sdmVyKHNjb3BlcywgY29udGV4dCwgcHJlZml4ZXMgPSBbXG4gICAgICAgICcnXG4gICAgXSwgZGVzY3JpcHRvckRlZmF1bHRzKSB7XG4gICAgICAgIGNvbnN0IHsgcmVzb2x2ZXIgIH0gPSBnZXRSZXNvbHZlcih0aGlzLl9yZXNvbHZlckNhY2hlLCBzY29wZXMsIHByZWZpeGVzKTtcbiAgICAgICAgcmV0dXJuIGlzT2JqZWN0KGNvbnRleHQpID8gX2F0dGFjaENvbnRleHQocmVzb2x2ZXIsIGNvbnRleHQsIHVuZGVmaW5lZCwgZGVzY3JpcHRvckRlZmF1bHRzKSA6IHJlc29sdmVyO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldFJlc29sdmVyKHJlc29sdmVyQ2FjaGUsIHNjb3BlcywgcHJlZml4ZXMpIHtcbiAgICBsZXQgY2FjaGUgPSByZXNvbHZlckNhY2hlLmdldChzY29wZXMpO1xuICAgIGlmICghY2FjaGUpIHtcbiAgICAgICAgY2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgICAgIHJlc29sdmVyQ2FjaGUuc2V0KHNjb3BlcywgY2FjaGUpO1xuICAgIH1cbiAgICBjb25zdCBjYWNoZUtleSA9IHByZWZpeGVzLmpvaW4oKTtcbiAgICBsZXQgY2FjaGVkID0gY2FjaGUuZ2V0KGNhY2hlS2V5KTtcbiAgICBpZiAoIWNhY2hlZCkge1xuICAgICAgICBjb25zdCByZXNvbHZlciA9IF9jcmVhdGVSZXNvbHZlcihzY29wZXMsIHByZWZpeGVzKTtcbiAgICAgICAgY2FjaGVkID0ge1xuICAgICAgICAgICAgcmVzb2x2ZXIsXG4gICAgICAgICAgICBzdWJQcmVmaXhlczogcHJlZml4ZXMuZmlsdGVyKChwKT0+IXAudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnaG92ZXInKSlcbiAgICAgICAgfTtcbiAgICAgICAgY2FjaGUuc2V0KGNhY2hlS2V5LCBjYWNoZWQpO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGVkO1xufVxuY29uc3QgaGFzRnVuY3Rpb24gPSAodmFsdWUpPT5pc09iamVjdCh2YWx1ZSkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmFsdWUpLnJlZHVjZSgoYWNjLCBrZXkpPT5hY2MgfHwgaXNGdW5jdGlvbih2YWx1ZVtrZXldKSwgZmFsc2UpO1xuZnVuY3Rpb24gbmVlZENvbnRleHQocHJveHksIG5hbWVzKSB7XG4gICAgY29uc3QgeyBpc1NjcmlwdGFibGUgLCBpc0luZGV4YWJsZSAgfSA9IF9kZXNjcmlwdG9ycyhwcm94eSk7XG4gICAgZm9yIChjb25zdCBwcm9wIG9mIG5hbWVzKXtcbiAgICAgICAgY29uc3Qgc2NyaXB0YWJsZSA9IGlzU2NyaXB0YWJsZShwcm9wKTtcbiAgICAgICAgY29uc3QgaW5kZXhhYmxlID0gaXNJbmRleGFibGUocHJvcCk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gKGluZGV4YWJsZSB8fCBzY3JpcHRhYmxlKSAmJiBwcm94eVtwcm9wXTtcbiAgICAgICAgaWYgKHNjcmlwdGFibGUgJiYgKGlzRnVuY3Rpb24odmFsdWUpIHx8IGhhc0Z1bmN0aW9uKHZhbHVlKSkgfHwgaW5kZXhhYmxlICYmIGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbnZhciB2ZXJzaW9uID0gXCI0LjMuM1wiO1xuXG5jb25zdCBLTk9XTl9QT1NJVElPTlMgPSBbXG4gICAgJ3RvcCcsXG4gICAgJ2JvdHRvbScsXG4gICAgJ2xlZnQnLFxuICAgICdyaWdodCcsXG4gICAgJ2NoYXJ0QXJlYSdcbl07XG5mdW5jdGlvbiBwb3NpdGlvbklzSG9yaXpvbnRhbChwb3NpdGlvbiwgYXhpcykge1xuICAgIHJldHVybiBwb3NpdGlvbiA9PT0gJ3RvcCcgfHwgcG9zaXRpb24gPT09ICdib3R0b20nIHx8IEtOT1dOX1BPU0lUSU9OUy5pbmRleE9mKHBvc2l0aW9uKSA9PT0gLTEgJiYgYXhpcyA9PT0gJ3gnO1xufVxuZnVuY3Rpb24gY29tcGFyZTJMZXZlbChsMSwgbDIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgICAgICByZXR1cm4gYVtsMV0gPT09IGJbbDFdID8gYVtsMl0gLSBiW2wyXSA6IGFbbDFdIC0gYltsMV07XG4gICAgfTtcbn1cbmZ1bmN0aW9uIG9uQW5pbWF0aW9uc0NvbXBsZXRlKGNvbnRleHQpIHtcbiAgICBjb25zdCBjaGFydCA9IGNvbnRleHQuY2hhcnQ7XG4gICAgY29uc3QgYW5pbWF0aW9uT3B0aW9ucyA9IGNoYXJ0Lm9wdGlvbnMuYW5pbWF0aW9uO1xuICAgIGNoYXJ0Lm5vdGlmeVBsdWdpbnMoJ2FmdGVyUmVuZGVyJyk7XG4gICAgY2FsbGJhY2soYW5pbWF0aW9uT3B0aW9ucyAmJiBhbmltYXRpb25PcHRpb25zLm9uQ29tcGxldGUsIFtcbiAgICAgICAgY29udGV4dFxuICAgIF0sIGNoYXJ0KTtcbn1cbmZ1bmN0aW9uIG9uQW5pbWF0aW9uUHJvZ3Jlc3MoY29udGV4dCkge1xuICAgIGNvbnN0IGNoYXJ0ID0gY29udGV4dC5jaGFydDtcbiAgICBjb25zdCBhbmltYXRpb25PcHRpb25zID0gY2hhcnQub3B0aW9ucy5hbmltYXRpb247XG4gICAgY2FsbGJhY2soYW5pbWF0aW9uT3B0aW9ucyAmJiBhbmltYXRpb25PcHRpb25zLm9uUHJvZ3Jlc3MsIFtcbiAgICAgICAgY29udGV4dFxuICAgIF0sIGNoYXJ0KTtcbn1cbiBmdW5jdGlvbiBnZXRDYW52YXMoaXRlbSkge1xuICAgIGlmIChfaXNEb21TdXBwb3J0ZWQoKSAmJiB0eXBlb2YgaXRlbSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaXRlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGl0ZW0pO1xuICAgIH0gZWxzZSBpZiAoaXRlbSAmJiBpdGVtLmxlbmd0aCkge1xuICAgICAgICBpdGVtID0gaXRlbVswXTtcbiAgICB9XG4gICAgaWYgKGl0ZW0gJiYgaXRlbS5jYW52YXMpIHtcbiAgICAgICAgaXRlbSA9IGl0ZW0uY2FudmFzO1xuICAgIH1cbiAgICByZXR1cm4gaXRlbTtcbn1cbmNvbnN0IGluc3RhbmNlcyA9IHt9O1xuY29uc3QgZ2V0Q2hhcnQgPSAoa2V5KT0+e1xuICAgIGNvbnN0IGNhbnZhcyA9IGdldENhbnZhcyhrZXkpO1xuICAgIHJldHVybiBPYmplY3QudmFsdWVzKGluc3RhbmNlcykuZmlsdGVyKChjKT0+Yy5jYW52YXMgPT09IGNhbnZhcykucG9wKCk7XG59O1xuZnVuY3Rpb24gbW92ZU51bWVyaWNLZXlzKG9iaiwgc3RhcnQsIG1vdmUpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKXtcbiAgICAgICAgY29uc3QgaW50S2V5ID0gK2tleTtcbiAgICAgICAgaWYgKGludEtleSA+PSBzdGFydCkge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBvYmpba2V5XTtcbiAgICAgICAgICAgIGRlbGV0ZSBvYmpba2V5XTtcbiAgICAgICAgICAgIGlmIChtb3ZlID4gMCB8fCBpbnRLZXkgPiBzdGFydCkge1xuICAgICAgICAgICAgICAgIG9ialtpbnRLZXkgKyBtb3ZlXSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIGZ1bmN0aW9uIGRldGVybWluZUxhc3RFdmVudChlLCBsYXN0RXZlbnQsIGluQ2hhcnRBcmVhLCBpc0NsaWNrKSB7XG4gICAgaWYgKCFpbkNoYXJ0QXJlYSB8fCBlLnR5cGUgPT09ICdtb3VzZW91dCcpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChpc0NsaWNrKSB7XG4gICAgICAgIHJldHVybiBsYXN0RXZlbnQ7XG4gICAgfVxuICAgIHJldHVybiBlO1xufVxuZnVuY3Rpb24gZ2V0RGF0YXNldEFyZWEobWV0YSkge1xuICAgIGNvbnN0IHsgeFNjYWxlICwgeVNjYWxlICB9ID0gbWV0YTtcbiAgICBpZiAoeFNjYWxlICYmIHlTY2FsZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGVmdDogeFNjYWxlLmxlZnQsXG4gICAgICAgICAgICByaWdodDogeFNjYWxlLnJpZ2h0LFxuICAgICAgICAgICAgdG9wOiB5U2NhbGUudG9wLFxuICAgICAgICAgICAgYm90dG9tOiB5U2NhbGUuYm90dG9tXG4gICAgICAgIH07XG4gICAgfVxufVxuY2xhc3MgQ2hhcnQge1xuICAgIHN0YXRpYyBkZWZhdWx0cyA9IGRlZmF1bHRzO1xuICAgIHN0YXRpYyBpbnN0YW5jZXMgPSBpbnN0YW5jZXM7XG4gICAgc3RhdGljIG92ZXJyaWRlcyA9IG92ZXJyaWRlcztcbiAgICBzdGF0aWMgcmVnaXN0cnkgPSByZWdpc3RyeTtcbiAgICBzdGF0aWMgdmVyc2lvbiA9IHZlcnNpb247XG4gICAgc3RhdGljIGdldENoYXJ0ID0gZ2V0Q2hhcnQ7XG4gICAgc3RhdGljIHJlZ2lzdGVyKC4uLml0ZW1zKSB7XG4gICAgICAgIHJlZ2lzdHJ5LmFkZCguLi5pdGVtcyk7XG4gICAgICAgIGludmFsaWRhdGVQbHVnaW5zKCk7XG4gICAgfVxuICAgIHN0YXRpYyB1bnJlZ2lzdGVyKC4uLml0ZW1zKSB7XG4gICAgICAgIHJlZ2lzdHJ5LnJlbW92ZSguLi5pdGVtcyk7XG4gICAgICAgIGludmFsaWRhdGVQbHVnaW5zKCk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGl0ZW0sIHVzZXJDb25maWcpe1xuICAgICAgICBjb25zdCBjb25maWcgPSB0aGlzLmNvbmZpZyA9IG5ldyBDb25maWcodXNlckNvbmZpZyk7XG4gICAgICAgIGNvbnN0IGluaXRpYWxDYW52YXMgPSBnZXRDYW52YXMoaXRlbSk7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nQ2hhcnQgPSBnZXRDaGFydChpbml0aWFsQ2FudmFzKTtcbiAgICAgICAgaWYgKGV4aXN0aW5nQ2hhcnQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2FudmFzIGlzIGFscmVhZHkgaW4gdXNlLiBDaGFydCB3aXRoIElEIFxcJycgKyBleGlzdGluZ0NoYXJ0LmlkICsgJ1xcJycgKyAnIG11c3QgYmUgZGVzdHJveWVkIGJlZm9yZSB0aGUgY2FudmFzIHdpdGggSUQgXFwnJyArIGV4aXN0aW5nQ2hhcnQuY2FudmFzLmlkICsgJ1xcJyBjYW4gYmUgcmV1c2VkLicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBjb25maWcuY3JlYXRlUmVzb2x2ZXIoY29uZmlnLmNoYXJ0T3B0aW9uU2NvcGVzKCksIHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICAgICAgdGhpcy5wbGF0Zm9ybSA9IG5ldyAoY29uZmlnLnBsYXRmb3JtIHx8IF9kZXRlY3RQbGF0Zm9ybShpbml0aWFsQ2FudmFzKSkoKTtcbiAgICAgICAgdGhpcy5wbGF0Zm9ybS51cGRhdGVDb25maWcoY29uZmlnKTtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMucGxhdGZvcm0uYWNxdWlyZUNvbnRleHQoaW5pdGlhbENhbnZhcywgb3B0aW9ucy5hc3BlY3RSYXRpbyk7XG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IGNvbnRleHQgJiYgY29udGV4dC5jYW52YXM7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IGNhbnZhcyAmJiBjYW52YXMuaGVpZ2h0O1xuICAgICAgICBjb25zdCB3aWR0aCA9IGNhbnZhcyAmJiBjYW52YXMud2lkdGg7XG4gICAgICAgIHRoaXMuaWQgPSB1aWQoKTtcbiAgICAgICAgdGhpcy5jdHggPSBjb250ZXh0O1xuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuX2FzcGVjdFJhdGlvID0gdGhpcy5hc3BlY3RSYXRpbztcbiAgICAgICAgdGhpcy5fbGF5ZXJzID0gW107XG4gICAgICAgIHRoaXMuX21ldGFzZXRzID0gW107XG4gICAgICAgIHRoaXMuX3N0YWNrcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5ib3hlcyA9IFtdO1xuICAgICAgICB0aGlzLmN1cnJlbnREZXZpY2VQaXhlbFJhdGlvID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmNoYXJ0QXJlYSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fYWN0aXZlID0gW107XG4gICAgICAgIHRoaXMuX2xhc3RFdmVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzID0ge307XG4gICAgICAgICB0aGlzLl9yZXNwb25zaXZlTGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9zb3J0ZWRNZXRhc2V0cyA9IFtdO1xuICAgICAgICB0aGlzLnNjYWxlcyA9IHt9O1xuICAgICAgICB0aGlzLl9wbHVnaW5zID0gbmV3IFBsdWdpblNlcnZpY2UoKTtcbiAgICAgICAgdGhpcy4kcHJveGllcyA9IHt9O1xuICAgICAgICB0aGlzLl9oaWRkZW5JbmRpY2VzID0ge307XG4gICAgICAgIHRoaXMuYXR0YWNoZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fYW5pbWF0aW9uc0Rpc2FibGVkID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLiRjb250ZXh0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9kb1Jlc2l6ZSA9IGRlYm91bmNlKChtb2RlKT0+dGhpcy51cGRhdGUobW9kZSksIG9wdGlvbnMucmVzaXplRGVsYXkgfHwgMCk7XG4gICAgICAgIHRoaXMuX2RhdGFDaGFuZ2VzID0gW107XG4gICAgICAgIGluc3RhbmNlc1t0aGlzLmlkXSA9IHRoaXM7XG4gICAgICAgIGlmICghY29udGV4dCB8fCAhY2FudmFzKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIGNyZWF0ZSBjaGFydDogY2FuJ3QgYWNxdWlyZSBjb250ZXh0IGZyb20gdGhlIGdpdmVuIGl0ZW1cIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYW5pbWF0b3IubGlzdGVuKHRoaXMsICdjb21wbGV0ZScsIG9uQW5pbWF0aW9uc0NvbXBsZXRlKTtcbiAgICAgICAgYW5pbWF0b3IubGlzdGVuKHRoaXMsICdwcm9ncmVzcycsIG9uQW5pbWF0aW9uUHJvZ3Jlc3MpO1xuICAgICAgICB0aGlzLl9pbml0aWFsaXplKCk7XG4gICAgICAgIGlmICh0aGlzLmF0dGFjaGVkKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBhc3BlY3RSYXRpbygpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zOiB7IGFzcGVjdFJhdGlvICwgbWFpbnRhaW5Bc3BlY3RSYXRpbyAgfSAsIHdpZHRoICwgaGVpZ2h0ICwgX2FzcGVjdFJhdGlvICB9ID0gdGhpcztcbiAgICAgICAgaWYgKCFpc051bGxPclVuZGVmKGFzcGVjdFJhdGlvKSkge1xuICAgICAgICAgICAgcmV0dXJuIGFzcGVjdFJhdGlvO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYWludGFpbkFzcGVjdFJhdGlvICYmIF9hc3BlY3RSYXRpbykge1xuICAgICAgICAgICAgcmV0dXJuIF9hc3BlY3RSYXRpbztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGVpZ2h0ID8gd2lkdGggLyBoZWlnaHQgOiBudWxsO1xuICAgIH1cbiAgICBnZXQgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLmRhdGE7XG4gICAgfVxuICAgIHNldCBkYXRhKGRhdGEpIHtcbiAgICAgICAgdGhpcy5jb25maWcuZGF0YSA9IGRhdGE7XG4gICAgfVxuICAgIGdldCBvcHRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3B0aW9ucztcbiAgICB9XG4gICAgc2V0IG9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICB0aGlzLmNvbmZpZy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgZ2V0IHJlZ2lzdHJ5KCkge1xuICAgICAgICByZXR1cm4gcmVnaXN0cnk7XG4gICAgfVxuIF9pbml0aWFsaXplKCkge1xuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZUluaXQnKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yZXNwb25zaXZlKSB7XG4gICAgICAgICAgICB0aGlzLnJlc2l6ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0aW5hU2NhbGUodGhpcywgdGhpcy5vcHRpb25zLmRldmljZVBpeGVsUmF0aW8pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYmluZEV2ZW50cygpO1xuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVySW5pdCcpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgY2xlYXIoKSB7XG4gICAgICAgIGNsZWFyQ2FudmFzKHRoaXMuY2FudmFzLCB0aGlzLmN0eCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBzdG9wKCkge1xuICAgICAgICBhbmltYXRvci5zdG9wKHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gcmVzaXplKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgaWYgKCFhbmltYXRvci5ydW5uaW5nKHRoaXMpKSB7XG4gICAgICAgICAgICB0aGlzLl9yZXNpemUod2lkdGgsIGhlaWdodCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9yZXNpemVCZWZvcmVEcmF3ID0ge1xuICAgICAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfcmVzaXplKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgY2FudmFzID0gdGhpcy5jYW52YXM7XG4gICAgICAgIGNvbnN0IGFzcGVjdFJhdGlvID0gb3B0aW9ucy5tYWludGFpbkFzcGVjdFJhdGlvICYmIHRoaXMuYXNwZWN0UmF0aW87XG4gICAgICAgIGNvbnN0IG5ld1NpemUgPSB0aGlzLnBsYXRmb3JtLmdldE1heGltdW1TaXplKGNhbnZhcywgd2lkdGgsIGhlaWdodCwgYXNwZWN0UmF0aW8pO1xuICAgICAgICBjb25zdCBuZXdSYXRpbyA9IG9wdGlvbnMuZGV2aWNlUGl4ZWxSYXRpbyB8fCB0aGlzLnBsYXRmb3JtLmdldERldmljZVBpeGVsUmF0aW8oKTtcbiAgICAgICAgY29uc3QgbW9kZSA9IHRoaXMud2lkdGggPyAncmVzaXplJyA6ICdhdHRhY2gnO1xuICAgICAgICB0aGlzLndpZHRoID0gbmV3U2l6ZS53aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBuZXdTaXplLmhlaWdodDtcbiAgICAgICAgdGhpcy5fYXNwZWN0UmF0aW8gPSB0aGlzLmFzcGVjdFJhdGlvO1xuICAgICAgICBpZiAoIXJldGluYVNjYWxlKHRoaXMsIG5ld1JhdGlvLCB0cnVlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygncmVzaXplJywge1xuICAgICAgICAgICAgc2l6ZTogbmV3U2l6ZVxuICAgICAgICB9KTtcbiAgICAgICAgY2FsbGJhY2sob3B0aW9ucy5vblJlc2l6ZSwgW1xuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIG5ld1NpemVcbiAgICAgICAgXSwgdGhpcyk7XG4gICAgICAgIGlmICh0aGlzLmF0dGFjaGVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fZG9SZXNpemUobW9kZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVuc3VyZVNjYWxlc0hhdmVJRHMoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHNjYWxlc09wdGlvbnMgPSBvcHRpb25zLnNjYWxlcyB8fCB7fTtcbiAgICAgICAgZWFjaChzY2FsZXNPcHRpb25zLCAoYXhpc09wdGlvbnMsIGF4aXNJRCk9PntcbiAgICAgICAgICAgIGF4aXNPcHRpb25zLmlkID0gYXhpc0lEO1xuICAgICAgICB9KTtcbiAgICB9XG4gYnVpbGRPclVwZGF0ZVNjYWxlcygpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3Qgc2NhbGVPcHRzID0gb3B0aW9ucy5zY2FsZXM7XG4gICAgICAgIGNvbnN0IHNjYWxlcyA9IHRoaXMuc2NhbGVzO1xuICAgICAgICBjb25zdCB1cGRhdGVkID0gT2JqZWN0LmtleXMoc2NhbGVzKS5yZWR1Y2UoKG9iaiwgaWQpPT57XG4gICAgICAgICAgICBvYmpbaWRdID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9LCB7fSk7XG4gICAgICAgIGxldCBpdGVtcyA9IFtdO1xuICAgICAgICBpZiAoc2NhbGVPcHRzKSB7XG4gICAgICAgICAgICBpdGVtcyA9IGl0ZW1zLmNvbmNhdChPYmplY3Qua2V5cyhzY2FsZU9wdHMpLm1hcCgoaWQpPT57XG4gICAgICAgICAgICAgICAgY29uc3Qgc2NhbGVPcHRpb25zID0gc2NhbGVPcHRzW2lkXTtcbiAgICAgICAgICAgICAgICBjb25zdCBheGlzID0gZGV0ZXJtaW5lQXhpcyhpZCwgc2NhbGVPcHRpb25zKTtcbiAgICAgICAgICAgICAgICBjb25zdCBpc1JhZGlhbCA9IGF4aXMgPT09ICdyJztcbiAgICAgICAgICAgICAgICBjb25zdCBpc0hvcml6b250YWwgPSBheGlzID09PSAneCc7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogc2NhbGVPcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBkcG9zaXRpb246IGlzUmFkaWFsID8gJ2NoYXJ0QXJlYScgOiBpc0hvcml6b250YWwgPyAnYm90dG9tJyA6ICdsZWZ0JyxcbiAgICAgICAgICAgICAgICAgICAgZHR5cGU6IGlzUmFkaWFsID8gJ3JhZGlhbExpbmVhcicgOiBpc0hvcml6b250YWwgPyAnY2F0ZWdvcnknIDogJ2xpbmVhcidcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICAgIGVhY2goaXRlbXMsIChpdGVtKT0+e1xuICAgICAgICAgICAgY29uc3Qgc2NhbGVPcHRpb25zID0gaXRlbS5vcHRpb25zO1xuICAgICAgICAgICAgY29uc3QgaWQgPSBzY2FsZU9wdGlvbnMuaWQ7XG4gICAgICAgICAgICBjb25zdCBheGlzID0gZGV0ZXJtaW5lQXhpcyhpZCwgc2NhbGVPcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IHNjYWxlVHlwZSA9IHZhbHVlT3JEZWZhdWx0KHNjYWxlT3B0aW9ucy50eXBlLCBpdGVtLmR0eXBlKTtcbiAgICAgICAgICAgIGlmIChzY2FsZU9wdGlvbnMucG9zaXRpb24gPT09IHVuZGVmaW5lZCB8fCBwb3NpdGlvbklzSG9yaXpvbnRhbChzY2FsZU9wdGlvbnMucG9zaXRpb24sIGF4aXMpICE9PSBwb3NpdGlvbklzSG9yaXpvbnRhbChpdGVtLmRwb3NpdGlvbikpIHtcbiAgICAgICAgICAgICAgICBzY2FsZU9wdGlvbnMucG9zaXRpb24gPSBpdGVtLmRwb3NpdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVwZGF0ZWRbaWRdID0gdHJ1ZTtcbiAgICAgICAgICAgIGxldCBzY2FsZSA9IG51bGw7XG4gICAgICAgICAgICBpZiAoaWQgaW4gc2NhbGVzICYmIHNjYWxlc1tpZF0udHlwZSA9PT0gc2NhbGVUeXBlKSB7XG4gICAgICAgICAgICAgICAgc2NhbGUgPSBzY2FsZXNbaWRdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzY2FsZUNsYXNzID0gcmVnaXN0cnkuZ2V0U2NhbGUoc2NhbGVUeXBlKTtcbiAgICAgICAgICAgICAgICBzY2FsZSA9IG5ldyBzY2FsZUNsYXNzKHtcbiAgICAgICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IHNjYWxlVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgY3R4OiB0aGlzLmN0eCxcbiAgICAgICAgICAgICAgICAgICAgY2hhcnQ6IHRoaXNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBzY2FsZXNbc2NhbGUuaWRdID0gc2NhbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzY2FsZS5pbml0KHNjYWxlT3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIH0pO1xuICAgICAgICBlYWNoKHVwZGF0ZWQsIChoYXNVcGRhdGVkLCBpZCk9PntcbiAgICAgICAgICAgIGlmICghaGFzVXBkYXRlZCkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBzY2FsZXNbaWRdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgZWFjaChzY2FsZXMsIChzY2FsZSk9PntcbiAgICAgICAgICAgIGxheW91dHMuY29uZmlndXJlKHRoaXMsIHNjYWxlLCBzY2FsZS5vcHRpb25zKTtcbiAgICAgICAgICAgIGxheW91dHMuYWRkQm94KHRoaXMsIHNjYWxlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuIF91cGRhdGVNZXRhc2V0cygpIHtcbiAgICAgICAgY29uc3QgbWV0YXNldHMgPSB0aGlzLl9tZXRhc2V0cztcbiAgICAgICAgY29uc3QgbnVtRGF0YSA9IHRoaXMuZGF0YS5kYXRhc2V0cy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IG51bU1ldGEgPSBtZXRhc2V0cy5sZW5ndGg7XG4gICAgICAgIG1ldGFzZXRzLnNvcnQoKGEsIGIpPT5hLmluZGV4IC0gYi5pbmRleCk7XG4gICAgICAgIGlmIChudW1NZXRhID4gbnVtRGF0YSkge1xuICAgICAgICAgICAgZm9yKGxldCBpID0gbnVtRGF0YTsgaSA8IG51bU1ldGE7ICsraSl7XG4gICAgICAgICAgICAgICAgdGhpcy5fZGVzdHJveURhdGFzZXRNZXRhKGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWV0YXNldHMuc3BsaWNlKG51bURhdGEsIG51bU1ldGEgLSBudW1EYXRhKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zb3J0ZWRNZXRhc2V0cyA9IG1ldGFzZXRzLnNsaWNlKDApLnNvcnQoY29tcGFyZTJMZXZlbCgnb3JkZXInLCAnaW5kZXgnKSk7XG4gICAgfVxuIF9yZW1vdmVVbnJlZmVyZW5jZWRNZXRhc2V0cygpIHtcbiAgICAgICAgY29uc3QgeyBfbWV0YXNldHM6IG1ldGFzZXRzICwgZGF0YTogeyBkYXRhc2V0cyAgfSAgfSA9IHRoaXM7XG4gICAgICAgIGlmIChtZXRhc2V0cy5sZW5ndGggPiBkYXRhc2V0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9zdGFja3M7XG4gICAgICAgIH1cbiAgICAgICAgbWV0YXNldHMuZm9yRWFjaCgobWV0YSwgaW5kZXgpPT57XG4gICAgICAgICAgICBpZiAoZGF0YXNldHMuZmlsdGVyKCh4KT0+eCA9PT0gbWV0YS5fZGF0YXNldCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZGVzdHJveURhdGFzZXRNZXRhKGluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGJ1aWxkT3JVcGRhdGVDb250cm9sbGVycygpIHtcbiAgICAgICAgY29uc3QgbmV3Q29udHJvbGxlcnMgPSBbXTtcbiAgICAgICAgY29uc3QgZGF0YXNldHMgPSB0aGlzLmRhdGEuZGF0YXNldHM7XG4gICAgICAgIGxldCBpLCBpbGVuO1xuICAgICAgICB0aGlzLl9yZW1vdmVVbnJlZmVyZW5jZWRNZXRhc2V0cygpO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBkYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspe1xuICAgICAgICAgICAgY29uc3QgZGF0YXNldCA9IGRhdGFzZXRzW2ldO1xuICAgICAgICAgICAgbGV0IG1ldGEgPSB0aGlzLmdldERhdGFzZXRNZXRhKGkpO1xuICAgICAgICAgICAgY29uc3QgdHlwZSA9IGRhdGFzZXQudHlwZSB8fCB0aGlzLmNvbmZpZy50eXBlO1xuICAgICAgICAgICAgaWYgKG1ldGEudHlwZSAmJiBtZXRhLnR5cGUgIT09IHR5cGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kZXN0cm95RGF0YXNldE1ldGEoaSk7XG4gICAgICAgICAgICAgICAgbWV0YSA9IHRoaXMuZ2V0RGF0YXNldE1ldGEoaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtZXRhLnR5cGUgPSB0eXBlO1xuICAgICAgICAgICAgbWV0YS5pbmRleEF4aXMgPSBkYXRhc2V0LmluZGV4QXhpcyB8fCBnZXRJbmRleEF4aXModHlwZSwgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgICAgIG1ldGEub3JkZXIgPSBkYXRhc2V0Lm9yZGVyIHx8IDA7XG4gICAgICAgICAgICBtZXRhLmluZGV4ID0gaTtcbiAgICAgICAgICAgIG1ldGEubGFiZWwgPSAnJyArIGRhdGFzZXQubGFiZWw7XG4gICAgICAgICAgICBtZXRhLnZpc2libGUgPSB0aGlzLmlzRGF0YXNldFZpc2libGUoaSk7XG4gICAgICAgICAgICBpZiAobWV0YS5jb250cm9sbGVyKSB7XG4gICAgICAgICAgICAgICAgbWV0YS5jb250cm9sbGVyLnVwZGF0ZUluZGV4KGkpO1xuICAgICAgICAgICAgICAgIG1ldGEuY29udHJvbGxlci5saW5rU2NhbGVzKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IENvbnRyb2xsZXJDbGFzcyA9IHJlZ2lzdHJ5LmdldENvbnRyb2xsZXIodHlwZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBkYXRhc2V0RWxlbWVudFR5cGUgLCBkYXRhRWxlbWVudFR5cGUgIH0gPSBkZWZhdWx0cy5kYXRhc2V0c1t0eXBlXTtcbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKENvbnRyb2xsZXJDbGFzcywge1xuICAgICAgICAgICAgICAgICAgICBkYXRhRWxlbWVudFR5cGU6IHJlZ2lzdHJ5LmdldEVsZW1lbnQoZGF0YUVsZW1lbnRUeXBlKSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YXNldEVsZW1lbnRUeXBlOiBkYXRhc2V0RWxlbWVudFR5cGUgJiYgcmVnaXN0cnkuZ2V0RWxlbWVudChkYXRhc2V0RWxlbWVudFR5cGUpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgbWV0YS5jb250cm9sbGVyID0gbmV3IENvbnRyb2xsZXJDbGFzcyh0aGlzLCBpKTtcbiAgICAgICAgICAgICAgICBuZXdDb250cm9sbGVycy5wdXNoKG1ldGEuY29udHJvbGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdXBkYXRlTWV0YXNldHMoKTtcbiAgICAgICAgcmV0dXJuIG5ld0NvbnRyb2xsZXJzO1xuICAgIH1cbiBfcmVzZXRFbGVtZW50cygpIHtcbiAgICAgICAgZWFjaCh0aGlzLmRhdGEuZGF0YXNldHMsIChkYXRhc2V0LCBkYXRhc2V0SW5kZXgpPT57XG4gICAgICAgICAgICB0aGlzLmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCkuY29udHJvbGxlci5yZXNldCgpO1xuICAgICAgICB9LCB0aGlzKTtcbiAgICB9XG4gcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuX3Jlc2V0RWxlbWVudHMoKTtcbiAgICAgICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdyZXNldCcpO1xuICAgIH1cbiAgICB1cGRhdGUobW9kZSkge1xuICAgICAgICBjb25zdCBjb25maWcgPSB0aGlzLmNvbmZpZztcbiAgICAgICAgY29uZmlnLnVwZGF0ZSgpO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5fb3B0aW9ucyA9IGNvbmZpZy5jcmVhdGVSZXNvbHZlcihjb25maWcuY2hhcnRPcHRpb25TY29wZXMoKSwgdGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICBjb25zdCBhbmltc0Rpc2FibGVkID0gdGhpcy5fYW5pbWF0aW9uc0Rpc2FibGVkID0gIW9wdGlvbnMuYW5pbWF0aW9uO1xuICAgICAgICB0aGlzLl91cGRhdGVTY2FsZXMoKTtcbiAgICAgICAgdGhpcy5fY2hlY2tFdmVudEJpbmRpbmdzKCk7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUhpZGRlbkluZGljZXMoKTtcbiAgICAgICAgdGhpcy5fcGx1Z2lucy5pbnZhbGlkYXRlKCk7XG4gICAgICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZVVwZGF0ZScsIHtcbiAgICAgICAgICAgIG1vZGUsXG4gICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgIH0pID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5ld0NvbnRyb2xsZXJzID0gdGhpcy5idWlsZE9yVXBkYXRlQ29udHJvbGxlcnMoKTtcbiAgICAgICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVFbGVtZW50c1VwZGF0ZScpO1xuICAgICAgICBsZXQgbWluUGFkZGluZyA9IDA7XG4gICAgICAgIGZvcihsZXQgaSA9IDAsIGlsZW4gPSB0aGlzLmRhdGEuZGF0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKXtcbiAgICAgICAgICAgIGNvbnN0IHsgY29udHJvbGxlciAgfSA9IHRoaXMuZ2V0RGF0YXNldE1ldGEoaSk7XG4gICAgICAgICAgICBjb25zdCByZXNldCA9ICFhbmltc0Rpc2FibGVkICYmIG5ld0NvbnRyb2xsZXJzLmluZGV4T2YoY29udHJvbGxlcikgPT09IC0xO1xuICAgICAgICAgICAgY29udHJvbGxlci5idWlsZE9yVXBkYXRlRWxlbWVudHMocmVzZXQpO1xuICAgICAgICAgICAgbWluUGFkZGluZyA9IE1hdGgubWF4KCtjb250cm9sbGVyLmdldE1heE92ZXJmbG93KCksIG1pblBhZGRpbmcpO1xuICAgICAgICB9XG4gICAgICAgIG1pblBhZGRpbmcgPSB0aGlzLl9taW5QYWRkaW5nID0gb3B0aW9ucy5sYXlvdXQuYXV0b1BhZGRpbmcgPyBtaW5QYWRkaW5nIDogMDtcbiAgICAgICAgdGhpcy5fdXBkYXRlTGF5b3V0KG1pblBhZGRpbmcpO1xuICAgICAgICBpZiAoIWFuaW1zRGlzYWJsZWQpIHtcbiAgICAgICAgICAgIGVhY2gobmV3Q29udHJvbGxlcnMsIChjb250cm9sbGVyKT0+e1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIucmVzZXQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3VwZGF0ZURhdGFzZXRzKG1vZGUpO1xuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyVXBkYXRlJywge1xuICAgICAgICAgICAgbW9kZVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fbGF5ZXJzLnNvcnQoY29tcGFyZTJMZXZlbCgneicsICdfaWR4JykpO1xuICAgICAgICBjb25zdCB7IF9hY3RpdmUgLCBfbGFzdEV2ZW50ICB9ID0gdGhpcztcbiAgICAgICAgaWYgKF9sYXN0RXZlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50SGFuZGxlcihfbGFzdEV2ZW50LCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChfYWN0aXZlLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlSG92ZXJTdHlsZXMoX2FjdGl2ZSwgX2FjdGl2ZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9XG4gX3VwZGF0ZVNjYWxlcygpIHtcbiAgICAgICAgZWFjaCh0aGlzLnNjYWxlcywgKHNjYWxlKT0+e1xuICAgICAgICAgICAgbGF5b3V0cy5yZW1vdmVCb3godGhpcywgc2NhbGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lbnN1cmVTY2FsZXNIYXZlSURzKCk7XG4gICAgICAgIHRoaXMuYnVpbGRPclVwZGF0ZVNjYWxlcygpO1xuICAgIH1cbiBfY2hlY2tFdmVudEJpbmRpbmdzKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBleGlzdGluZ0V2ZW50cyA9IG5ldyBTZXQoT2JqZWN0LmtleXModGhpcy5fbGlzdGVuZXJzKSk7XG4gICAgICAgIGNvbnN0IG5ld0V2ZW50cyA9IG5ldyBTZXQob3B0aW9ucy5ldmVudHMpO1xuICAgICAgICBpZiAoIXNldHNFcXVhbChleGlzdGluZ0V2ZW50cywgbmV3RXZlbnRzKSB8fCAhIXRoaXMuX3Jlc3BvbnNpdmVMaXN0ZW5lcnMgIT09IG9wdGlvbnMucmVzcG9uc2l2ZSkge1xuICAgICAgICAgICAgdGhpcy51bmJpbmRFdmVudHMoKTtcbiAgICAgICAgICAgIHRoaXMuYmluZEV2ZW50cygpO1xuICAgICAgICB9XG4gICAgfVxuIF91cGRhdGVIaWRkZW5JbmRpY2VzKCkge1xuICAgICAgICBjb25zdCB7IF9oaWRkZW5JbmRpY2VzICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgY2hhbmdlcyA9IHRoaXMuX2dldFVuaWZvcm1EYXRhQ2hhbmdlcygpIHx8IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHsgbWV0aG9kICwgc3RhcnQgLCBjb3VudCAgfSBvZiBjaGFuZ2VzKXtcbiAgICAgICAgICAgIGNvbnN0IG1vdmUgPSBtZXRob2QgPT09ICdfcmVtb3ZlRWxlbWVudHMnID8gLWNvdW50IDogY291bnQ7XG4gICAgICAgICAgICBtb3ZlTnVtZXJpY0tleXMoX2hpZGRlbkluZGljZXMsIHN0YXJ0LCBtb3ZlKTtcbiAgICAgICAgfVxuICAgIH1cbiBfZ2V0VW5pZm9ybURhdGFDaGFuZ2VzKCkge1xuICAgICAgICBjb25zdCBfZGF0YUNoYW5nZXMgPSB0aGlzLl9kYXRhQ2hhbmdlcztcbiAgICAgICAgaWYgKCFfZGF0YUNoYW5nZXMgfHwgIV9kYXRhQ2hhbmdlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9kYXRhQ2hhbmdlcyA9IFtdO1xuICAgICAgICBjb25zdCBkYXRhc2V0Q291bnQgPSB0aGlzLmRhdGEuZGF0YXNldHMubGVuZ3RoO1xuICAgICAgICBjb25zdCBtYWtlU2V0ID0gKGlkeCk9Pm5ldyBTZXQoX2RhdGFDaGFuZ2VzLmZpbHRlcigoYyk9PmNbMF0gPT09IGlkeCkubWFwKChjLCBpKT0+aSArICcsJyArIGMuc3BsaWNlKDEpLmpvaW4oJywnKSkpO1xuICAgICAgICBjb25zdCBjaGFuZ2VTZXQgPSBtYWtlU2V0KDApO1xuICAgICAgICBmb3IobGV0IGkgPSAxOyBpIDwgZGF0YXNldENvdW50OyBpKyspe1xuICAgICAgICAgICAgaWYgKCFzZXRzRXF1YWwoY2hhbmdlU2V0LCBtYWtlU2V0KGkpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShjaGFuZ2VTZXQpLm1hcCgoYyk9PmMuc3BsaXQoJywnKSkubWFwKChhKT0+KHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6IGFbMV0sXG4gICAgICAgICAgICAgICAgc3RhcnQ6ICthWzJdLFxuICAgICAgICAgICAgICAgIGNvdW50OiArYVszXVxuICAgICAgICAgICAgfSkpO1xuICAgIH1cbiBfdXBkYXRlTGF5b3V0KG1pblBhZGRpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlTGF5b3V0Jywge1xuICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICB9KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsYXlvdXRzLnVwZGF0ZSh0aGlzLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgbWluUGFkZGluZyk7XG4gICAgICAgIGNvbnN0IGFyZWEgPSB0aGlzLmNoYXJ0QXJlYTtcbiAgICAgICAgY29uc3Qgbm9BcmVhID0gYXJlYS53aWR0aCA8PSAwIHx8IGFyZWEuaGVpZ2h0IDw9IDA7XG4gICAgICAgIHRoaXMuX2xheWVycyA9IFtdO1xuICAgICAgICBlYWNoKHRoaXMuYm94ZXMsIChib3gpPT57XG4gICAgICAgICAgICBpZiAobm9BcmVhICYmIGJveC5wb3NpdGlvbiA9PT0gJ2NoYXJ0QXJlYScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYm94LmNvbmZpZ3VyZSkge1xuICAgICAgICAgICAgICAgIGJveC5jb25maWd1cmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2xheWVycy5wdXNoKC4uLmJveC5fbGF5ZXJzKCkpO1xuICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgdGhpcy5fbGF5ZXJzLmZvckVhY2goKGl0ZW0sIGluZGV4KT0+e1xuICAgICAgICAgICAgaXRlbS5faWR4ID0gaW5kZXg7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyTGF5b3V0Jyk7XG4gICAgfVxuIF91cGRhdGVEYXRhc2V0cyhtb2RlKSB7XG4gICAgICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZURhdGFzZXRzVXBkYXRlJywge1xuICAgICAgICAgICAgbW9kZSxcbiAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICAgICAgfSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGxldCBpID0gMCwgaWxlbiA9IHRoaXMuZGF0YS5kYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgdGhpcy5nZXREYXRhc2V0TWV0YShpKS5jb250cm9sbGVyLmNvbmZpZ3VyZSgpO1xuICAgICAgICB9XG4gICAgICAgIGZvcihsZXQgaSA9IDAsIGlsZW4gPSB0aGlzLmRhdGEuZGF0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZURhdGFzZXQoaSwgaXNGdW5jdGlvbihtb2RlKSA/IG1vZGUoe1xuICAgICAgICAgICAgICAgIGRhdGFzZXRJbmRleDogaVxuICAgICAgICAgICAgfSkgOiBtb2RlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyRGF0YXNldHNVcGRhdGUnLCB7XG4gICAgICAgICAgICBtb2RlXG4gICAgICAgIH0pO1xuICAgIH1cbiBfdXBkYXRlRGF0YXNldChpbmRleCwgbW9kZSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShpbmRleCk7XG4gICAgICAgIGNvbnN0IGFyZ3MgPSB7XG4gICAgICAgICAgICBtZXRhLFxuICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICBtb2RlLFxuICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVEYXRhc2V0VXBkYXRlJywgYXJncykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbWV0YS5jb250cm9sbGVyLl91cGRhdGUobW9kZSk7XG4gICAgICAgIGFyZ3MuY2FuY2VsYWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyRGF0YXNldFVwZGF0ZScsIGFyZ3MpO1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZVJlbmRlcicsIHtcbiAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICAgICAgfSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFuaW1hdG9yLmhhcyh0aGlzKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYXR0YWNoZWQgJiYgIWFuaW1hdG9yLnJ1bm5pbmcodGhpcykpIHtcbiAgICAgICAgICAgICAgICBhbmltYXRvci5zdGFydCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZHJhdygpO1xuICAgICAgICAgICAgb25BbmltYXRpb25zQ29tcGxldGUoe1xuICAgICAgICAgICAgICAgIGNoYXJ0OiB0aGlzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkcmF3KCkge1xuICAgICAgICBsZXQgaTtcbiAgICAgICAgaWYgKHRoaXMuX3Jlc2l6ZUJlZm9yZURyYXcpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgd2lkdGggLCBoZWlnaHQgIH0gPSB0aGlzLl9yZXNpemVCZWZvcmVEcmF3O1xuICAgICAgICAgICAgdGhpcy5fcmVzaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgdGhpcy5fcmVzaXplQmVmb3JlRHJhdyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICBpZiAodGhpcy53aWR0aCA8PSAwIHx8IHRoaXMuaGVpZ2h0IDw9IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVEcmF3Jywge1xuICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICB9KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYXllcnMgPSB0aGlzLl9sYXllcnM7XG4gICAgICAgIGZvcihpID0gMDsgaSA8IGxheWVycy5sZW5ndGggJiYgbGF5ZXJzW2ldLnogPD0gMDsgKytpKXtcbiAgICAgICAgICAgIGxheWVyc1tpXS5kcmF3KHRoaXMuY2hhcnRBcmVhKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9kcmF3RGF0YXNldHMoKTtcbiAgICAgICAgZm9yKDsgaSA8IGxheWVycy5sZW5ndGg7ICsraSl7XG4gICAgICAgICAgICBsYXllcnNbaV0uZHJhdyh0aGlzLmNoYXJ0QXJlYSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdhZnRlckRyYXcnKTtcbiAgICB9XG4gX2dldFNvcnRlZERhdGFzZXRNZXRhcyhmaWx0ZXJWaXNpYmxlKSB7XG4gICAgICAgIGNvbnN0IG1ldGFzZXRzID0gdGhpcy5fc29ydGVkTWV0YXNldHM7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICBsZXQgaSwgaWxlbjtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gbWV0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIGNvbnN0IG1ldGEgPSBtZXRhc2V0c1tpXTtcbiAgICAgICAgICAgIGlmICghZmlsdGVyVmlzaWJsZSB8fCBtZXRhLnZpc2libGUpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChtZXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiBnZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0U29ydGVkRGF0YXNldE1ldGFzKHRydWUpO1xuICAgIH1cbiBfZHJhd0RhdGFzZXRzKCkge1xuICAgICAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVEYXRhc2V0c0RyYXcnLCB7XG4gICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgIH0pID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGFzZXRzID0gdGhpcy5nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCk7XG4gICAgICAgIGZvcihsZXQgaSA9IG1ldGFzZXRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKXtcbiAgICAgICAgICAgIHRoaXMuX2RyYXdEYXRhc2V0KG1ldGFzZXRzW2ldKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyRGF0YXNldHNEcmF3Jyk7XG4gICAgfVxuIF9kcmF3RGF0YXNldChtZXRhKSB7XG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgICAgICBjb25zdCBjbGlwID0gbWV0YS5fY2xpcDtcbiAgICAgICAgY29uc3QgdXNlQ2xpcCA9ICFjbGlwLmRpc2FibGVkO1xuICAgICAgICBjb25zdCBhcmVhID0gZ2V0RGF0YXNldEFyZWEobWV0YSkgfHwgdGhpcy5jaGFydEFyZWE7XG4gICAgICAgIGNvbnN0IGFyZ3MgPSB7XG4gICAgICAgICAgICBtZXRhLFxuICAgICAgICAgICAgaW5kZXg6IG1ldGEuaW5kZXgsXG4gICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZURhdGFzZXREcmF3JywgYXJncykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVzZUNsaXApIHtcbiAgICAgICAgICAgIGNsaXBBcmVhKGN0eCwge1xuICAgICAgICAgICAgICAgIGxlZnQ6IGNsaXAubGVmdCA9PT0gZmFsc2UgPyAwIDogYXJlYS5sZWZ0IC0gY2xpcC5sZWZ0LFxuICAgICAgICAgICAgICAgIHJpZ2h0OiBjbGlwLnJpZ2h0ID09PSBmYWxzZSA/IHRoaXMud2lkdGggOiBhcmVhLnJpZ2h0ICsgY2xpcC5yaWdodCxcbiAgICAgICAgICAgICAgICB0b3A6IGNsaXAudG9wID09PSBmYWxzZSA/IDAgOiBhcmVhLnRvcCAtIGNsaXAudG9wLFxuICAgICAgICAgICAgICAgIGJvdHRvbTogY2xpcC5ib3R0b20gPT09IGZhbHNlID8gdGhpcy5oZWlnaHQgOiBhcmVhLmJvdHRvbSArIGNsaXAuYm90dG9tXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBtZXRhLmNvbnRyb2xsZXIuZHJhdygpO1xuICAgICAgICBpZiAodXNlQ2xpcCkge1xuICAgICAgICAgICAgdW5jbGlwQXJlYShjdHgpO1xuICAgICAgICB9XG4gICAgICAgIGFyZ3MuY2FuY2VsYWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyRGF0YXNldERyYXcnLCBhcmdzKTtcbiAgICB9XG4gaXNQb2ludEluQXJlYShwb2ludCkge1xuICAgICAgICByZXR1cm4gX2lzUG9pbnRJbkFyZWEocG9pbnQsIHRoaXMuY2hhcnRBcmVhLCB0aGlzLl9taW5QYWRkaW5nKTtcbiAgICB9XG4gICAgZ2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZShlLCBtb2RlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IEludGVyYWN0aW9uLm1vZGVzW21vZGVdO1xuICAgICAgICBpZiAodHlwZW9mIG1ldGhvZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIG1ldGhvZCh0aGlzLCBlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCkge1xuICAgICAgICBjb25zdCBkYXRhc2V0ID0gdGhpcy5kYXRhLmRhdGFzZXRzW2RhdGFzZXRJbmRleF07XG4gICAgICAgIGNvbnN0IG1ldGFzZXRzID0gdGhpcy5fbWV0YXNldHM7XG4gICAgICAgIGxldCBtZXRhID0gbWV0YXNldHMuZmlsdGVyKCh4KT0+eCAmJiB4Ll9kYXRhc2V0ID09PSBkYXRhc2V0KS5wb3AoKTtcbiAgICAgICAgaWYgKCFtZXRhKSB7XG4gICAgICAgICAgICBtZXRhID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0YTogW10sXG4gICAgICAgICAgICAgICAgZGF0YXNldDogbnVsbCxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBudWxsLFxuICAgICAgICAgICAgICAgIGhpZGRlbjogbnVsbCxcbiAgICAgICAgICAgICAgICB4QXhpc0lEOiBudWxsLFxuICAgICAgICAgICAgICAgIHlBeGlzSUQ6IG51bGwsXG4gICAgICAgICAgICAgICAgb3JkZXI6IGRhdGFzZXQgJiYgZGF0YXNldC5vcmRlciB8fCAwLFxuICAgICAgICAgICAgICAgIGluZGV4OiBkYXRhc2V0SW5kZXgsXG4gICAgICAgICAgICAgICAgX2RhdGFzZXQ6IGRhdGFzZXQsXG4gICAgICAgICAgICAgICAgX3BhcnNlZDogW10sXG4gICAgICAgICAgICAgICAgX3NvcnRlZDogZmFsc2VcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBtZXRhc2V0cy5wdXNoKG1ldGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXRhO1xuICAgIH1cbiAgICBnZXRDb250ZXh0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy4kY29udGV4dCB8fCAodGhpcy4kY29udGV4dCA9IGNyZWF0ZUNvbnRleHQobnVsbCwge1xuICAgICAgICAgICAgY2hhcnQ6IHRoaXMsXG4gICAgICAgICAgICB0eXBlOiAnY2hhcnQnXG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgZ2V0VmlzaWJsZURhdGFzZXRDb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpLmxlbmd0aDtcbiAgICB9XG4gICAgaXNEYXRhc2V0VmlzaWJsZShkYXRhc2V0SW5kZXgpIHtcbiAgICAgICAgY29uc3QgZGF0YXNldCA9IHRoaXMuZGF0YS5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdO1xuICAgICAgICBpZiAoIWRhdGFzZXQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpO1xuICAgICAgICByZXR1cm4gdHlwZW9mIG1ldGEuaGlkZGVuID09PSAnYm9vbGVhbicgPyAhbWV0YS5oaWRkZW4gOiAhZGF0YXNldC5oaWRkZW47XG4gICAgfVxuICAgIHNldERhdGFzZXRWaXNpYmlsaXR5KGRhdGFzZXRJbmRleCwgdmlzaWJsZSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpO1xuICAgICAgICBtZXRhLmhpZGRlbiA9ICF2aXNpYmxlO1xuICAgIH1cbiAgICB0b2dnbGVEYXRhVmlzaWJpbGl0eShpbmRleCkge1xuICAgICAgICB0aGlzLl9oaWRkZW5JbmRpY2VzW2luZGV4XSA9ICF0aGlzLl9oaWRkZW5JbmRpY2VzW2luZGV4XTtcbiAgICB9XG4gICAgZ2V0RGF0YVZpc2liaWxpdHkoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLl9oaWRkZW5JbmRpY2VzW2luZGV4XTtcbiAgICB9XG4gX3VwZGF0ZVZpc2liaWxpdHkoZGF0YXNldEluZGV4LCBkYXRhSW5kZXgsIHZpc2libGUpIHtcbiAgICAgICAgY29uc3QgbW9kZSA9IHZpc2libGUgPyAnc2hvdycgOiAnaGlkZSc7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG4gICAgICAgIGNvbnN0IGFuaW1zID0gbWV0YS5jb250cm9sbGVyLl9yZXNvbHZlQW5pbWF0aW9ucyh1bmRlZmluZWQsIG1vZGUpO1xuICAgICAgICBpZiAoZGVmaW5lZChkYXRhSW5kZXgpKSB7XG4gICAgICAgICAgICBtZXRhLmRhdGFbZGF0YUluZGV4XS5oaWRkZW4gPSAhdmlzaWJsZTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNldERhdGFzZXRWaXNpYmlsaXR5KGRhdGFzZXRJbmRleCwgdmlzaWJsZSk7XG4gICAgICAgICAgICBhbmltcy51cGRhdGUobWV0YSwge1xuICAgICAgICAgICAgICAgIHZpc2libGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy51cGRhdGUoKGN0eCk9PmN0eC5kYXRhc2V0SW5kZXggPT09IGRhdGFzZXRJbmRleCA/IG1vZGUgOiB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGhpZGUoZGF0YXNldEluZGV4LCBkYXRhSW5kZXgpIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlVmlzaWJpbGl0eShkYXRhc2V0SW5kZXgsIGRhdGFJbmRleCwgZmFsc2UpO1xuICAgIH1cbiAgICBzaG93KGRhdGFzZXRJbmRleCwgZGF0YUluZGV4KSB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZVZpc2liaWxpdHkoZGF0YXNldEluZGV4LCBkYXRhSW5kZXgsIHRydWUpO1xuICAgIH1cbiBfZGVzdHJveURhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fbWV0YXNldHNbZGF0YXNldEluZGV4XTtcbiAgICAgICAgaWYgKG1ldGEgJiYgbWV0YS5jb250cm9sbGVyKSB7XG4gICAgICAgICAgICBtZXRhLmNvbnRyb2xsZXIuX2Rlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgdGhpcy5fbWV0YXNldHNbZGF0YXNldEluZGV4XTtcbiAgICB9XG4gICAgX3N0b3AoKSB7XG4gICAgICAgIGxldCBpLCBpbGVuO1xuICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgYW5pbWF0b3IucmVtb3ZlKHRoaXMpO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSB0aGlzLmRhdGEuZGF0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIHRoaXMuX2Rlc3Ryb3lEYXRhc2V0TWV0YShpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZURlc3Ryb3knKTtcbiAgICAgICAgY29uc3QgeyBjYW52YXMgLCBjdHggIH0gPSB0aGlzO1xuICAgICAgICB0aGlzLl9zdG9wKCk7XG4gICAgICAgIHRoaXMuY29uZmlnLmNsZWFyQ2FjaGUoKTtcbiAgICAgICAgaWYgKGNhbnZhcykge1xuICAgICAgICAgICAgdGhpcy51bmJpbmRFdmVudHMoKTtcbiAgICAgICAgICAgIGNsZWFyQ2FudmFzKGNhbnZhcywgY3R4KTtcbiAgICAgICAgICAgIHRoaXMucGxhdGZvcm0ucmVsZWFzZUNvbnRleHQoY3R4KTtcbiAgICAgICAgICAgIHRoaXMuY2FudmFzID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuY3R4ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgaW5zdGFuY2VzW3RoaXMuaWRdO1xuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyRGVzdHJveScpO1xuICAgIH1cbiAgICB0b0Jhc2U2NEltYWdlKC4uLmFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FudmFzLnRvRGF0YVVSTCguLi5hcmdzKTtcbiAgICB9XG4gYmluZEV2ZW50cygpIHtcbiAgICAgICAgdGhpcy5iaW5kVXNlckV2ZW50cygpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJlc3BvbnNpdmUpIHtcbiAgICAgICAgICAgIHRoaXMuYmluZFJlc3BvbnNpdmVFdmVudHMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYXR0YWNoZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuIGJpbmRVc2VyRXZlbnRzKCkge1xuICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XG4gICAgICAgIGNvbnN0IHBsYXRmb3JtID0gdGhpcy5wbGF0Zm9ybTtcbiAgICAgICAgY29uc3QgX2FkZCA9ICh0eXBlLCBsaXN0ZW5lcik9PntcbiAgICAgICAgICAgIHBsYXRmb3JtLmFkZEV2ZW50TGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIpO1xuICAgICAgICAgICAgbGlzdGVuZXJzW3R5cGVdID0gbGlzdGVuZXI7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGxpc3RlbmVyID0gKGUsIHgsIHkpPT57XG4gICAgICAgICAgICBlLm9mZnNldFggPSB4O1xuICAgICAgICAgICAgZS5vZmZzZXRZID0geTtcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50SGFuZGxlcihlKTtcbiAgICAgICAgfTtcbiAgICAgICAgZWFjaCh0aGlzLm9wdGlvbnMuZXZlbnRzLCAodHlwZSk9Pl9hZGQodHlwZSwgbGlzdGVuZXIpKTtcbiAgICB9XG4gYmluZFJlc3BvbnNpdmVFdmVudHMoKSB7XG4gICAgICAgIGlmICghdGhpcy5fcmVzcG9uc2l2ZUxpc3RlbmVycykge1xuICAgICAgICAgICAgdGhpcy5fcmVzcG9uc2l2ZUxpc3RlbmVycyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuX3Jlc3BvbnNpdmVMaXN0ZW5lcnM7XG4gICAgICAgIGNvbnN0IHBsYXRmb3JtID0gdGhpcy5wbGF0Zm9ybTtcbiAgICAgICAgY29uc3QgX2FkZCA9ICh0eXBlLCBsaXN0ZW5lcik9PntcbiAgICAgICAgICAgIHBsYXRmb3JtLmFkZEV2ZW50TGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIpO1xuICAgICAgICAgICAgbGlzdGVuZXJzW3R5cGVdID0gbGlzdGVuZXI7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IF9yZW1vdmUgPSAodHlwZSwgbGlzdGVuZXIpPT57XG4gICAgICAgICAgICBpZiAobGlzdGVuZXJzW3R5cGVdKSB7XG4gICAgICAgICAgICAgICAgcGxhdGZvcm0ucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGxpc3RlbmVyc1t0eXBlXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgbGlzdGVuZXIgPSAod2lkdGgsIGhlaWdodCk9PntcbiAgICAgICAgICAgIGlmICh0aGlzLmNhbnZhcykge1xuICAgICAgICAgICAgICAgIHRoaXMucmVzaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBsZXQgZGV0YWNoZWQ7XG4gICAgICAgIGNvbnN0IGF0dGFjaGVkID0gKCk9PntcbiAgICAgICAgICAgIF9yZW1vdmUoJ2F0dGFjaCcsIGF0dGFjaGVkKTtcbiAgICAgICAgICAgIHRoaXMuYXR0YWNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5yZXNpemUoKTtcbiAgICAgICAgICAgIF9hZGQoJ3Jlc2l6ZScsIGxpc3RlbmVyKTtcbiAgICAgICAgICAgIF9hZGQoJ2RldGFjaCcsIGRldGFjaGVkKTtcbiAgICAgICAgfTtcbiAgICAgICAgZGV0YWNoZWQgPSAoKT0+e1xuICAgICAgICAgICAgdGhpcy5hdHRhY2hlZCA9IGZhbHNlO1xuICAgICAgICAgICAgX3JlbW92ZSgncmVzaXplJywgbGlzdGVuZXIpO1xuICAgICAgICAgICAgdGhpcy5fc3RvcCgpO1xuICAgICAgICAgICAgdGhpcy5fcmVzaXplKDAsIDApO1xuICAgICAgICAgICAgX2FkZCgnYXR0YWNoJywgYXR0YWNoZWQpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAocGxhdGZvcm0uaXNBdHRhY2hlZCh0aGlzLmNhbnZhcykpIHtcbiAgICAgICAgICAgIGF0dGFjaGVkKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZXRhY2hlZCgpO1xuICAgICAgICB9XG4gICAgfVxuIHVuYmluZEV2ZW50cygpIHtcbiAgICAgICAgZWFjaCh0aGlzLl9saXN0ZW5lcnMsIChsaXN0ZW5lciwgdHlwZSk9PntcbiAgICAgICAgICAgIHRoaXMucGxhdGZvcm0ucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lcik7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcbiAgICAgICAgZWFjaCh0aGlzLl9yZXNwb25zaXZlTGlzdGVuZXJzLCAobGlzdGVuZXIsIHR5cGUpPT57XG4gICAgICAgICAgICB0aGlzLnBsYXRmb3JtLnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fcmVzcG9uc2l2ZUxpc3RlbmVycyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdXBkYXRlSG92ZXJTdHlsZShpdGVtcywgbW9kZSwgZW5hYmxlZCkge1xuICAgICAgICBjb25zdCBwcmVmaXggPSBlbmFibGVkID8gJ3NldCcgOiAncmVtb3ZlJztcbiAgICAgICAgbGV0IG1ldGEsIGl0ZW0sIGksIGlsZW47XG4gICAgICAgIGlmIChtb2RlID09PSAnZGF0YXNldCcpIHtcbiAgICAgICAgICAgIG1ldGEgPSB0aGlzLmdldERhdGFzZXRNZXRhKGl0ZW1zWzBdLmRhdGFzZXRJbmRleCk7XG4gICAgICAgICAgICBtZXRhLmNvbnRyb2xsZXJbJ18nICsgcHJlZml4ICsgJ0RhdGFzZXRIb3ZlclN0eWxlJ10oKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgaXRlbSA9IGl0ZW1zW2ldO1xuICAgICAgICAgICAgY29uc3QgY29udHJvbGxlciA9IGl0ZW0gJiYgdGhpcy5nZXREYXRhc2V0TWV0YShpdGVtLmRhdGFzZXRJbmRleCkuY29udHJvbGxlcjtcbiAgICAgICAgICAgIGlmIChjb250cm9sbGVyKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlcltwcmVmaXggKyAnSG92ZXJTdHlsZSddKGl0ZW0uZWxlbWVudCwgaXRlbS5kYXRhc2V0SW5kZXgsIGl0ZW0uaW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuIGdldEFjdGl2ZUVsZW1lbnRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aXZlIHx8IFtdO1xuICAgIH1cbiBzZXRBY3RpdmVFbGVtZW50cyhhY3RpdmVFbGVtZW50cykge1xuICAgICAgICBjb25zdCBsYXN0QWN0aXZlID0gdGhpcy5fYWN0aXZlIHx8IFtdO1xuICAgICAgICBjb25zdCBhY3RpdmUgPSBhY3RpdmVFbGVtZW50cy5tYXAoKHsgZGF0YXNldEluZGV4ICwgaW5kZXggIH0pPT57XG4gICAgICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpO1xuICAgICAgICAgICAgaWYgKCFtZXRhKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBkYXRhc2V0IGZvdW5kIGF0IGluZGV4ICcgKyBkYXRhc2V0SW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkYXRhc2V0SW5kZXgsXG4gICAgICAgICAgICAgICAgZWxlbWVudDogbWV0YS5kYXRhW2luZGV4XSxcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGNoYW5nZWQgPSAhX2VsZW1lbnRzRXF1YWwoYWN0aXZlLCBsYXN0QWN0aXZlKTtcbiAgICAgICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZSA9IGFjdGl2ZTtcbiAgICAgICAgICAgIHRoaXMuX2xhc3RFdmVudCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVIb3ZlclN0eWxlcyhhY3RpdmUsIGxhc3RBY3RpdmUpO1xuICAgICAgICB9XG4gICAgfVxuIG5vdGlmeVBsdWdpbnMoaG9vaywgYXJncywgZmlsdGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wbHVnaW5zLm5vdGlmeSh0aGlzLCBob29rLCBhcmdzLCBmaWx0ZXIpO1xuICAgIH1cbiBpc1BsdWdpbkVuYWJsZWQocGx1Z2luSWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BsdWdpbnMuX2NhY2hlLmZpbHRlcigocCk9PnAucGx1Z2luLmlkID09PSBwbHVnaW5JZCkubGVuZ3RoID09PSAxO1xuICAgIH1cbiBfdXBkYXRlSG92ZXJTdHlsZXMoYWN0aXZlLCBsYXN0QWN0aXZlLCByZXBsYXkpIHtcbiAgICAgICAgY29uc3QgaG92ZXJPcHRpb25zID0gdGhpcy5vcHRpb25zLmhvdmVyO1xuICAgICAgICBjb25zdCBkaWZmID0gKGEsIGIpPT5hLmZpbHRlcigoeCk9PiFiLnNvbWUoKHkpPT54LmRhdGFzZXRJbmRleCA9PT0geS5kYXRhc2V0SW5kZXggJiYgeC5pbmRleCA9PT0geS5pbmRleCkpO1xuICAgICAgICBjb25zdCBkZWFjdGl2YXRlZCA9IGRpZmYobGFzdEFjdGl2ZSwgYWN0aXZlKTtcbiAgICAgICAgY29uc3QgYWN0aXZhdGVkID0gcmVwbGF5ID8gYWN0aXZlIDogZGlmZihhY3RpdmUsIGxhc3RBY3RpdmUpO1xuICAgICAgICBpZiAoZGVhY3RpdmF0ZWQubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUhvdmVyU3R5bGUoZGVhY3RpdmF0ZWQsIGhvdmVyT3B0aW9ucy5tb2RlLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFjdGl2YXRlZC5sZW5ndGggJiYgaG92ZXJPcHRpb25zLm1vZGUpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlSG92ZXJTdHlsZShhY3RpdmF0ZWQsIGhvdmVyT3B0aW9ucy5tb2RlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cbiBfZXZlbnRIYW5kbGVyKGUsIHJlcGxheSkge1xuICAgICAgICBjb25zdCBhcmdzID0ge1xuICAgICAgICAgICAgZXZlbnQ6IGUsXG4gICAgICAgICAgICByZXBsYXksXG4gICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlLFxuICAgICAgICAgICAgaW5DaGFydEFyZWE6IHRoaXMuaXNQb2ludEluQXJlYShlKVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBldmVudEZpbHRlciA9IChwbHVnaW4pPT4ocGx1Z2luLm9wdGlvbnMuZXZlbnRzIHx8IHRoaXMub3B0aW9ucy5ldmVudHMpLmluY2x1ZGVzKGUubmF0aXZlLnR5cGUpO1xuICAgICAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVFdmVudCcsIGFyZ3MsIGV2ZW50RmlsdGVyKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaGFuZ2VkID0gdGhpcy5faGFuZGxlRXZlbnQoZSwgcmVwbGF5LCBhcmdzLmluQ2hhcnRBcmVhKTtcbiAgICAgICAgYXJncy5jYW5jZWxhYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJFdmVudCcsIGFyZ3MsIGV2ZW50RmlsdGVyKTtcbiAgICAgICAgaWYgKGNoYW5nZWQgfHwgYXJncy5jaGFuZ2VkKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiBfaGFuZGxlRXZlbnQoZSwgcmVwbGF5LCBpbkNoYXJ0QXJlYSkge1xuICAgICAgICBjb25zdCB7IF9hY3RpdmU6IGxhc3RBY3RpdmUgPSBbXSAsIG9wdGlvbnMgIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB1c2VGaW5hbFBvc2l0aW9uID0gcmVwbGF5O1xuICAgICAgICBjb25zdCBhY3RpdmUgPSB0aGlzLl9nZXRBY3RpdmVFbGVtZW50cyhlLCBsYXN0QWN0aXZlLCBpbkNoYXJ0QXJlYSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgICAgIGNvbnN0IGlzQ2xpY2sgPSBfaXNDbGlja0V2ZW50KGUpO1xuICAgICAgICBjb25zdCBsYXN0RXZlbnQgPSBkZXRlcm1pbmVMYXN0RXZlbnQoZSwgdGhpcy5fbGFzdEV2ZW50LCBpbkNoYXJ0QXJlYSwgaXNDbGljayk7XG4gICAgICAgIGlmIChpbkNoYXJ0QXJlYSkge1xuICAgICAgICAgICAgdGhpcy5fbGFzdEV2ZW50ID0gbnVsbDtcbiAgICAgICAgICAgIGNhbGxiYWNrKG9wdGlvbnMub25Ib3ZlciwgW1xuICAgICAgICAgICAgICAgIGUsXG4gICAgICAgICAgICAgICAgYWN0aXZlLFxuICAgICAgICAgICAgICAgIHRoaXNcbiAgICAgICAgICAgIF0sIHRoaXMpO1xuICAgICAgICAgICAgaWYgKGlzQ2xpY2spIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhvcHRpb25zLm9uQ2xpY2ssIFtcbiAgICAgICAgICAgICAgICAgICAgZSxcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlLFxuICAgICAgICAgICAgICAgICAgICB0aGlzXG4gICAgICAgICAgICAgICAgXSwgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2hhbmdlZCA9ICFfZWxlbWVudHNFcXVhbChhY3RpdmUsIGxhc3RBY3RpdmUpO1xuICAgICAgICBpZiAoY2hhbmdlZCB8fCByZXBsYXkpIHtcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZSA9IGFjdGl2ZTtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUhvdmVyU3R5bGVzKGFjdGl2ZSwgbGFzdEFjdGl2ZSwgcmVwbGF5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9sYXN0RXZlbnQgPSBsYXN0RXZlbnQ7XG4gICAgICAgIHJldHVybiBjaGFuZ2VkO1xuICAgIH1cbiBfZ2V0QWN0aXZlRWxlbWVudHMoZSwgbGFzdEFjdGl2ZSwgaW5DaGFydEFyZWEsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgaWYgKGUudHlwZSA9PT0gJ21vdXNlb3V0Jykge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaW5DaGFydEFyZWEpIHtcbiAgICAgICAgICAgIHJldHVybiBsYXN0QWN0aXZlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhvdmVyT3B0aW9ucyA9IHRoaXMub3B0aW9ucy5ob3ZlcjtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZShlLCBob3Zlck9wdGlvbnMubW9kZSwgaG92ZXJPcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICB9XG59XG5mdW5jdGlvbiBpbnZhbGlkYXRlUGx1Z2lucygpIHtcbiAgICByZXR1cm4gZWFjaChDaGFydC5pbnN0YW5jZXMsIChjaGFydCk9PmNoYXJ0Ll9wbHVnaW5zLmludmFsaWRhdGUoKSk7XG59XG5cbmZ1bmN0aW9uIGNsaXBBcmMoY3R4LCBlbGVtZW50LCBlbmRBbmdsZSkge1xuICAgIGNvbnN0IHsgc3RhcnRBbmdsZSAsIHBpeGVsTWFyZ2luICwgeCAsIHkgLCBvdXRlclJhZGl1cyAsIGlubmVyUmFkaXVzICB9ID0gZWxlbWVudDtcbiAgICBsZXQgYW5nbGVNYXJnaW4gPSBwaXhlbE1hcmdpbiAvIG91dGVyUmFkaXVzO1xuICAgIC8vIERyYXcgYW4gaW5uZXIgYm9yZGVyIGJ5IGNsaXBwaW5nIHRoZSBhcmMgYW5kIGRyYXdpbmcgYSBkb3VibGUtd2lkdGggYm9yZGVyXG4gICAgLy8gRW5sYXJnZSB0aGUgY2xpcHBpbmcgYXJjIGJ5IDAuMzMgcGl4ZWxzIHRvIGVsaW1pbmF0ZSBnbGl0Y2hlcyBiZXR3ZWVuIGJvcmRlcnNcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4LmFyYyh4LCB5LCBvdXRlclJhZGl1cywgc3RhcnRBbmdsZSAtIGFuZ2xlTWFyZ2luLCBlbmRBbmdsZSArIGFuZ2xlTWFyZ2luKTtcbiAgICBpZiAoaW5uZXJSYWRpdXMgPiBwaXhlbE1hcmdpbikge1xuICAgICAgICBhbmdsZU1hcmdpbiA9IHBpeGVsTWFyZ2luIC8gaW5uZXJSYWRpdXM7XG4gICAgICAgIGN0eC5hcmMoeCwgeSwgaW5uZXJSYWRpdXMsIGVuZEFuZ2xlICsgYW5nbGVNYXJnaW4sIHN0YXJ0QW5nbGUgLSBhbmdsZU1hcmdpbiwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY3R4LmFyYyh4LCB5LCBwaXhlbE1hcmdpbiwgZW5kQW5nbGUgKyBIQUxGX1BJLCBzdGFydEFuZ2xlIC0gSEFMRl9QSSk7XG4gICAgfVxuICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICBjdHguY2xpcCgpO1xufVxuZnVuY3Rpb24gdG9SYWRpdXNDb3JuZXJzKHZhbHVlKSB7XG4gICAgcmV0dXJuIF9yZWFkVmFsdWVUb1Byb3BzKHZhbHVlLCBbXG4gICAgICAgICdvdXRlclN0YXJ0JyxcbiAgICAgICAgJ291dGVyRW5kJyxcbiAgICAgICAgJ2lubmVyU3RhcnQnLFxuICAgICAgICAnaW5uZXJFbmQnXG4gICAgXSk7XG59XG4vKipcbiAqIFBhcnNlIGJvcmRlciByYWRpdXMgZnJvbSB0aGUgcHJvdmlkZWQgb3B0aW9uc1xuICovIGZ1bmN0aW9uIHBhcnNlQm9yZGVyUmFkaXVzJDEoYXJjLCBpbm5lclJhZGl1cywgb3V0ZXJSYWRpdXMsIGFuZ2xlRGVsdGEpIHtcbiAgICBjb25zdCBvID0gdG9SYWRpdXNDb3JuZXJzKGFyYy5vcHRpb25zLmJvcmRlclJhZGl1cyk7XG4gICAgY29uc3QgaGFsZlRoaWNrbmVzcyA9IChvdXRlclJhZGl1cyAtIGlubmVyUmFkaXVzKSAvIDI7XG4gICAgY29uc3QgaW5uZXJMaW1pdCA9IE1hdGgubWluKGhhbGZUaGlja25lc3MsIGFuZ2xlRGVsdGEgKiBpbm5lclJhZGl1cyAvIDIpO1xuICAgIC8vIE91dGVyIGxpbWl0cyBhcmUgY29tcGxpY2F0ZWQuIFdlIHdhbnQgdG8gY29tcHV0ZSB0aGUgYXZhaWxhYmxlIGFuZ3VsYXIgZGlzdGFuY2UgYXRcbiAgICAvLyBhIHJhZGl1cyBvZiBvdXRlclJhZGl1cyAtIGJvcmRlclJhZGl1cyBiZWNhdXNlIGZvciBzbWFsbCBhbmd1bGFyIGRpc3RhbmNlcywgdGhpcyB0ZXJtIGxpbWl0cy5cbiAgICAvLyBXZSBjb21wdXRlIGF0IHIgPSBvdXRlclJhZGl1cyAtIGJvcmRlclJhZGl1cyBiZWNhdXNlIHRoaXMgY2lyY2xlIGRlZmluZXMgdGhlIGNlbnRlciBvZiB0aGUgYm9yZGVyIGNvcm5lcnMuXG4gICAgLy9cbiAgICAvLyBJZiB0aGUgYm9yZGVyUmFkaXVzIGlzIGxhcmdlLCB0aGF0IHZhbHVlIGNhbiBiZWNvbWUgbmVnYXRpdmUuXG4gICAgLy8gVGhpcyBjYXVzZXMgdGhlIG91dGVyIGJvcmRlcnMgdG8gbG9zZSB0aGVpciByYWRpdXMgZW50aXJlbHksIHdoaWNoIGlzIHJhdGhlciB1bmV4cGVjdGVkLiBUbyBzb2x2ZSB0aGF0LCBpZiBib3JkZXJSYWRpdXMgPiBvdXRlclJhZGl1c1xuICAgIC8vIHdlIGtub3cgdGhhdCB0aGUgdGhpY2tuZXNzIHRlcm0gd2lsbCBkb21pbmF0ZSBhbmQgY29tcHV0ZSB0aGUgbGltaXRzIGF0IHRoYXQgcG9pbnRcbiAgICBjb25zdCBjb21wdXRlT3V0ZXJMaW1pdCA9ICh2YWwpPT57XG4gICAgICAgIGNvbnN0IG91dGVyQXJjTGltaXQgPSAob3V0ZXJSYWRpdXMgLSBNYXRoLm1pbihoYWxmVGhpY2tuZXNzLCB2YWwpKSAqIGFuZ2xlRGVsdGEgLyAyO1xuICAgICAgICByZXR1cm4gX2xpbWl0VmFsdWUodmFsLCAwLCBNYXRoLm1pbihoYWxmVGhpY2tuZXNzLCBvdXRlckFyY0xpbWl0KSk7XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICBvdXRlclN0YXJ0OiBjb21wdXRlT3V0ZXJMaW1pdChvLm91dGVyU3RhcnQpLFxuICAgICAgICBvdXRlckVuZDogY29tcHV0ZU91dGVyTGltaXQoby5vdXRlckVuZCksXG4gICAgICAgIGlubmVyU3RhcnQ6IF9saW1pdFZhbHVlKG8uaW5uZXJTdGFydCwgMCwgaW5uZXJMaW1pdCksXG4gICAgICAgIGlubmVyRW5kOiBfbGltaXRWYWx1ZShvLmlubmVyRW5kLCAwLCBpbm5lckxpbWl0KVxuICAgIH07XG59XG4vKipcbiAqIENvbnZlcnQgKHIsIPCdnIMpIHRvICh4LCB5KVxuICovIGZ1bmN0aW9uIHJUaGV0YVRvWFkociwgdGhldGEsIHgsIHkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiB4ICsgciAqIE1hdGguY29zKHRoZXRhKSxcbiAgICAgICAgeTogeSArIHIgKiBNYXRoLnNpbih0aGV0YSlcbiAgICB9O1xufVxuLyoqXG4gKiBQYXRoIHRoZSBhcmMsIHJlc3BlY3RpbmcgYm9yZGVyIHJhZGl1cyBieSBzZXBhcmF0aW5nIGludG8gbGVmdCBhbmQgcmlnaHQgaGFsdmVzLlxuICpcbiAqICAgU3RhcnQgICAgICBFbmRcbiAqXG4gKiAgICAxLS0tPmEtLS0+MiAgICBPdXRlclxuICogICAvICAgICAgICAgICBcXFxuICogICA4ICAgICAgICAgICAzXG4gKiAgIHwgICAgICAgICAgIHxcbiAqICAgfCAgICAgICAgICAgfFxuICogICA3ICAgICAgICAgICA0XG4gKiAgIFxcICAgICAgICAgICAvXG4gKiAgICA2PC0tLWI8LS0tNSAgICBJbm5lclxuICovIGZ1bmN0aW9uIHBhdGhBcmMoY3R4LCBlbGVtZW50LCBvZmZzZXQsIHNwYWNpbmcsIGVuZCwgY2lyY3VsYXIpIHtcbiAgICBjb25zdCB7IHggLCB5ICwgc3RhcnRBbmdsZTogc3RhcnQgLCBwaXhlbE1hcmdpbiAsIGlubmVyUmFkaXVzOiBpbm5lclIgIH0gPSBlbGVtZW50O1xuICAgIGNvbnN0IG91dGVyUmFkaXVzID0gTWF0aC5tYXgoZWxlbWVudC5vdXRlclJhZGl1cyArIHNwYWNpbmcgKyBvZmZzZXQgLSBwaXhlbE1hcmdpbiwgMCk7XG4gICAgY29uc3QgaW5uZXJSYWRpdXMgPSBpbm5lclIgPiAwID8gaW5uZXJSICsgc3BhY2luZyArIG9mZnNldCArIHBpeGVsTWFyZ2luIDogMDtcbiAgICBsZXQgc3BhY2luZ09mZnNldCA9IDA7XG4gICAgY29uc3QgYWxwaGEgPSBlbmQgLSBzdGFydDtcbiAgICBpZiAoc3BhY2luZykge1xuICAgICAgICAvLyBXaGVuIHNwYWNpbmcgaXMgcHJlc2VudCwgaXQgaXMgdGhlIHNhbWUgZm9yIGFsbCBpdGVtc1xuICAgICAgICAvLyBTbyB3ZSBhZGp1c3QgdGhlIHN0YXJ0IGFuZCBlbmQgYW5nbGUgb2YgdGhlIGFyYyBzdWNoIHRoYXRcbiAgICAgICAgLy8gdGhlIGRpc3RhbmNlIGlzIHRoZSBzYW1lIGFzIGl0IHdvdWxkIGJlIHdpdGhvdXQgdGhlIHNwYWNpbmdcbiAgICAgICAgY29uc3Qgbm9TcGFjaW5nSW5uZXJSYWRpdXMgPSBpbm5lclIgPiAwID8gaW5uZXJSIC0gc3BhY2luZyA6IDA7XG4gICAgICAgIGNvbnN0IG5vU3BhY2luZ091dGVyUmFkaXVzID0gb3V0ZXJSYWRpdXMgPiAwID8gb3V0ZXJSYWRpdXMgLSBzcGFjaW5nIDogMDtcbiAgICAgICAgY29uc3QgYXZOb2dTcGFjaW5nUmFkaXVzID0gKG5vU3BhY2luZ0lubmVyUmFkaXVzICsgbm9TcGFjaW5nT3V0ZXJSYWRpdXMpIC8gMjtcbiAgICAgICAgY29uc3QgYWRqdXN0ZWRBbmdsZSA9IGF2Tm9nU3BhY2luZ1JhZGl1cyAhPT0gMCA/IGFscGhhICogYXZOb2dTcGFjaW5nUmFkaXVzIC8gKGF2Tm9nU3BhY2luZ1JhZGl1cyArIHNwYWNpbmcpIDogYWxwaGE7XG4gICAgICAgIHNwYWNpbmdPZmZzZXQgPSAoYWxwaGEgLSBhZGp1c3RlZEFuZ2xlKSAvIDI7XG4gICAgfVxuICAgIGNvbnN0IGJldGEgPSBNYXRoLm1heCgwLjAwMSwgYWxwaGEgKiBvdXRlclJhZGl1cyAtIG9mZnNldCAvIFBJKSAvIG91dGVyUmFkaXVzO1xuICAgIGNvbnN0IGFuZ2xlT2Zmc2V0ID0gKGFscGhhIC0gYmV0YSkgLyAyO1xuICAgIGNvbnN0IHN0YXJ0QW5nbGUgPSBzdGFydCArIGFuZ2xlT2Zmc2V0ICsgc3BhY2luZ09mZnNldDtcbiAgICBjb25zdCBlbmRBbmdsZSA9IGVuZCAtIGFuZ2xlT2Zmc2V0IC0gc3BhY2luZ09mZnNldDtcbiAgICBjb25zdCB7IG91dGVyU3RhcnQgLCBvdXRlckVuZCAsIGlubmVyU3RhcnQgLCBpbm5lckVuZCAgfSA9IHBhcnNlQm9yZGVyUmFkaXVzJDEoZWxlbWVudCwgaW5uZXJSYWRpdXMsIG91dGVyUmFkaXVzLCBlbmRBbmdsZSAtIHN0YXJ0QW5nbGUpO1xuICAgIGNvbnN0IG91dGVyU3RhcnRBZGp1c3RlZFJhZGl1cyA9IG91dGVyUmFkaXVzIC0gb3V0ZXJTdGFydDtcbiAgICBjb25zdCBvdXRlckVuZEFkanVzdGVkUmFkaXVzID0gb3V0ZXJSYWRpdXMgLSBvdXRlckVuZDtcbiAgICBjb25zdCBvdXRlclN0YXJ0QWRqdXN0ZWRBbmdsZSA9IHN0YXJ0QW5nbGUgKyBvdXRlclN0YXJ0IC8gb3V0ZXJTdGFydEFkanVzdGVkUmFkaXVzO1xuICAgIGNvbnN0IG91dGVyRW5kQWRqdXN0ZWRBbmdsZSA9IGVuZEFuZ2xlIC0gb3V0ZXJFbmQgLyBvdXRlckVuZEFkanVzdGVkUmFkaXVzO1xuICAgIGNvbnN0IGlubmVyU3RhcnRBZGp1c3RlZFJhZGl1cyA9IGlubmVyUmFkaXVzICsgaW5uZXJTdGFydDtcbiAgICBjb25zdCBpbm5lckVuZEFkanVzdGVkUmFkaXVzID0gaW5uZXJSYWRpdXMgKyBpbm5lckVuZDtcbiAgICBjb25zdCBpbm5lclN0YXJ0QWRqdXN0ZWRBbmdsZSA9IHN0YXJ0QW5nbGUgKyBpbm5lclN0YXJ0IC8gaW5uZXJTdGFydEFkanVzdGVkUmFkaXVzO1xuICAgIGNvbnN0IGlubmVyRW5kQWRqdXN0ZWRBbmdsZSA9IGVuZEFuZ2xlIC0gaW5uZXJFbmQgLyBpbm5lckVuZEFkanVzdGVkUmFkaXVzO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBpZiAoY2lyY3VsYXIpIHtcbiAgICAgICAgLy8gVGhlIGZpcnN0IGFyYyBzZWdtZW50cyBmcm9tIHBvaW50IDEgdG8gcG9pbnQgYSB0byBwb2ludCAyXG4gICAgICAgIGNvbnN0IG91dGVyTWlkQWRqdXN0ZWRBbmdsZSA9IChvdXRlclN0YXJ0QWRqdXN0ZWRBbmdsZSArIG91dGVyRW5kQWRqdXN0ZWRBbmdsZSkgLyAyO1xuICAgICAgICBjdHguYXJjKHgsIHksIG91dGVyUmFkaXVzLCBvdXRlclN0YXJ0QWRqdXN0ZWRBbmdsZSwgb3V0ZXJNaWRBZGp1c3RlZEFuZ2xlKTtcbiAgICAgICAgY3R4LmFyYyh4LCB5LCBvdXRlclJhZGl1cywgb3V0ZXJNaWRBZGp1c3RlZEFuZ2xlLCBvdXRlckVuZEFkanVzdGVkQW5nbGUpO1xuICAgICAgICAvLyBUaGUgY29ybmVyIHNlZ21lbnQgZnJvbSBwb2ludCAyIHRvIHBvaW50IDNcbiAgICAgICAgaWYgKG91dGVyRW5kID4gMCkge1xuICAgICAgICAgICAgY29uc3QgcENlbnRlciA9IHJUaGV0YVRvWFkob3V0ZXJFbmRBZGp1c3RlZFJhZGl1cywgb3V0ZXJFbmRBZGp1c3RlZEFuZ2xlLCB4LCB5KTtcbiAgICAgICAgICAgIGN0eC5hcmMocENlbnRlci54LCBwQ2VudGVyLnksIG91dGVyRW5kLCBvdXRlckVuZEFkanVzdGVkQW5nbGUsIGVuZEFuZ2xlICsgSEFMRl9QSSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlIGxpbmUgZnJvbSBwb2ludCAzIHRvIHBvaW50IDRcbiAgICAgICAgY29uc3QgcDQgPSByVGhldGFUb1hZKGlubmVyRW5kQWRqdXN0ZWRSYWRpdXMsIGVuZEFuZ2xlLCB4LCB5KTtcbiAgICAgICAgY3R4LmxpbmVUbyhwNC54LCBwNC55KTtcbiAgICAgICAgLy8gVGhlIGNvcm5lciBzZWdtZW50IGZyb20gcG9pbnQgNCB0byBwb2ludCA1XG4gICAgICAgIGlmIChpbm5lckVuZCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHBDZW50ZXIgPSByVGhldGFUb1hZKGlubmVyRW5kQWRqdXN0ZWRSYWRpdXMsIGlubmVyRW5kQWRqdXN0ZWRBbmdsZSwgeCwgeSk7XG4gICAgICAgICAgICBjdHguYXJjKHBDZW50ZXIueCwgcENlbnRlci55LCBpbm5lckVuZCwgZW5kQW5nbGUgKyBIQUxGX1BJLCBpbm5lckVuZEFkanVzdGVkQW5nbGUgKyBNYXRoLlBJKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgaW5uZXIgYXJjIGZyb20gcG9pbnQgNSB0byBwb2ludCBiIHRvIHBvaW50IDZcbiAgICAgICAgY29uc3QgaW5uZXJNaWRBZGp1c3RlZEFuZ2xlID0gKGVuZEFuZ2xlIC0gaW5uZXJFbmQgLyBpbm5lclJhZGl1cyArIChzdGFydEFuZ2xlICsgaW5uZXJTdGFydCAvIGlubmVyUmFkaXVzKSkgLyAyO1xuICAgICAgICBjdHguYXJjKHgsIHksIGlubmVyUmFkaXVzLCBlbmRBbmdsZSAtIGlubmVyRW5kIC8gaW5uZXJSYWRpdXMsIGlubmVyTWlkQWRqdXN0ZWRBbmdsZSwgdHJ1ZSk7XG4gICAgICAgIGN0eC5hcmMoeCwgeSwgaW5uZXJSYWRpdXMsIGlubmVyTWlkQWRqdXN0ZWRBbmdsZSwgc3RhcnRBbmdsZSArIGlubmVyU3RhcnQgLyBpbm5lclJhZGl1cywgdHJ1ZSk7XG4gICAgICAgIC8vIFRoZSBjb3JuZXIgc2VnbWVudCBmcm9tIHBvaW50IDYgdG8gcG9pbnQgN1xuICAgICAgICBpZiAoaW5uZXJTdGFydCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHBDZW50ZXIgPSByVGhldGFUb1hZKGlubmVyU3RhcnRBZGp1c3RlZFJhZGl1cywgaW5uZXJTdGFydEFkanVzdGVkQW5nbGUsIHgsIHkpO1xuICAgICAgICAgICAgY3R4LmFyYyhwQ2VudGVyLngsIHBDZW50ZXIueSwgaW5uZXJTdGFydCwgaW5uZXJTdGFydEFkanVzdGVkQW5nbGUgKyBNYXRoLlBJLCBzdGFydEFuZ2xlIC0gSEFMRl9QSSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlIGxpbmUgZnJvbSBwb2ludCA3IHRvIHBvaW50IDhcbiAgICAgICAgY29uc3QgcDggPSByVGhldGFUb1hZKG91dGVyU3RhcnRBZGp1c3RlZFJhZGl1cywgc3RhcnRBbmdsZSwgeCwgeSk7XG4gICAgICAgIGN0eC5saW5lVG8ocDgueCwgcDgueSk7XG4gICAgICAgIC8vIFRoZSBjb3JuZXIgc2VnbWVudCBmcm9tIHBvaW50IDggdG8gcG9pbnQgMVxuICAgICAgICBpZiAob3V0ZXJTdGFydCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHBDZW50ZXIgPSByVGhldGFUb1hZKG91dGVyU3RhcnRBZGp1c3RlZFJhZGl1cywgb3V0ZXJTdGFydEFkanVzdGVkQW5nbGUsIHgsIHkpO1xuICAgICAgICAgICAgY3R4LmFyYyhwQ2VudGVyLngsIHBDZW50ZXIueSwgb3V0ZXJTdGFydCwgc3RhcnRBbmdsZSAtIEhBTEZfUEksIG91dGVyU3RhcnRBZGp1c3RlZEFuZ2xlKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGN0eC5tb3ZlVG8oeCwgeSk7XG4gICAgICAgIGNvbnN0IG91dGVyU3RhcnRYID0gTWF0aC5jb3Mob3V0ZXJTdGFydEFkanVzdGVkQW5nbGUpICogb3V0ZXJSYWRpdXMgKyB4O1xuICAgICAgICBjb25zdCBvdXRlclN0YXJ0WSA9IE1hdGguc2luKG91dGVyU3RhcnRBZGp1c3RlZEFuZ2xlKSAqIG91dGVyUmFkaXVzICsgeTtcbiAgICAgICAgY3R4LmxpbmVUbyhvdXRlclN0YXJ0WCwgb3V0ZXJTdGFydFkpO1xuICAgICAgICBjb25zdCBvdXRlckVuZFggPSBNYXRoLmNvcyhvdXRlckVuZEFkanVzdGVkQW5nbGUpICogb3V0ZXJSYWRpdXMgKyB4O1xuICAgICAgICBjb25zdCBvdXRlckVuZFkgPSBNYXRoLnNpbihvdXRlckVuZEFkanVzdGVkQW5nbGUpICogb3V0ZXJSYWRpdXMgKyB5O1xuICAgICAgICBjdHgubGluZVRvKG91dGVyRW5kWCwgb3V0ZXJFbmRZKTtcbiAgICB9XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xufVxuZnVuY3Rpb24gZHJhd0FyYyhjdHgsIGVsZW1lbnQsIG9mZnNldCwgc3BhY2luZywgY2lyY3VsYXIpIHtcbiAgICBjb25zdCB7IGZ1bGxDaXJjbGVzICwgc3RhcnRBbmdsZSAsIGNpcmN1bWZlcmVuY2UgIH0gPSBlbGVtZW50O1xuICAgIGxldCBlbmRBbmdsZSA9IGVsZW1lbnQuZW5kQW5nbGU7XG4gICAgaWYgKGZ1bGxDaXJjbGVzKSB7XG4gICAgICAgIHBhdGhBcmMoY3R4LCBlbGVtZW50LCBvZmZzZXQsIHNwYWNpbmcsIGVuZEFuZ2xlLCBjaXJjdWxhcik7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBmdWxsQ2lyY2xlczsgKytpKXtcbiAgICAgICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc05hTihjaXJjdW1mZXJlbmNlKSkge1xuICAgICAgICAgICAgZW5kQW5nbGUgPSBzdGFydEFuZ2xlICsgKGNpcmN1bWZlcmVuY2UgJSBUQVUgfHwgVEFVKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwYXRoQXJjKGN0eCwgZWxlbWVudCwgb2Zmc2V0LCBzcGFjaW5nLCBlbmRBbmdsZSwgY2lyY3VsYXIpO1xuICAgIGN0eC5maWxsKCk7XG4gICAgcmV0dXJuIGVuZEFuZ2xlO1xufVxuZnVuY3Rpb24gZHJhd0JvcmRlcihjdHgsIGVsZW1lbnQsIG9mZnNldCwgc3BhY2luZywgY2lyY3VsYXIpIHtcbiAgICBjb25zdCB7IGZ1bGxDaXJjbGVzICwgc3RhcnRBbmdsZSAsIGNpcmN1bWZlcmVuY2UgLCBvcHRpb25zICB9ID0gZWxlbWVudDtcbiAgICBjb25zdCB7IGJvcmRlcldpZHRoICwgYm9yZGVySm9pblN0eWxlICwgYm9yZGVyRGFzaCAsIGJvcmRlckRhc2hPZmZzZXQgIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IGlubmVyID0gb3B0aW9ucy5ib3JkZXJBbGlnbiA9PT0gJ2lubmVyJztcbiAgICBpZiAoIWJvcmRlcldpZHRoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY3R4LnNldExpbmVEYXNoKGJvcmRlckRhc2ggfHwgW10pO1xuICAgIGN0eC5saW5lRGFzaE9mZnNldCA9IGJvcmRlckRhc2hPZmZzZXQ7XG4gICAgaWYgKGlubmVyKSB7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSBib3JkZXJXaWR0aCAqIDI7XG4gICAgICAgIGN0eC5saW5lSm9pbiA9IGJvcmRlckpvaW5TdHlsZSB8fCAncm91bmQnO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSBib3JkZXJXaWR0aDtcbiAgICAgICAgY3R4LmxpbmVKb2luID0gYm9yZGVySm9pblN0eWxlIHx8ICdiZXZlbCc7XG4gICAgfVxuICAgIGxldCBlbmRBbmdsZSA9IGVsZW1lbnQuZW5kQW5nbGU7XG4gICAgaWYgKGZ1bGxDaXJjbGVzKSB7XG4gICAgICAgIHBhdGhBcmMoY3R4LCBlbGVtZW50LCBvZmZzZXQsIHNwYWNpbmcsIGVuZEFuZ2xlLCBjaXJjdWxhcik7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBmdWxsQ2lyY2xlczsgKytpKXtcbiAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzTmFOKGNpcmN1bWZlcmVuY2UpKSB7XG4gICAgICAgICAgICBlbmRBbmdsZSA9IHN0YXJ0QW5nbGUgKyAoY2lyY3VtZmVyZW5jZSAlIFRBVSB8fCBUQVUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChpbm5lcikge1xuICAgICAgICBjbGlwQXJjKGN0eCwgZWxlbWVudCwgZW5kQW5nbGUpO1xuICAgIH1cbiAgICBpZiAoIWZ1bGxDaXJjbGVzKSB7XG4gICAgICAgIHBhdGhBcmMoY3R4LCBlbGVtZW50LCBvZmZzZXQsIHNwYWNpbmcsIGVuZEFuZ2xlLCBjaXJjdWxhcik7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICB9XG59XG5jbGFzcyBBcmNFbGVtZW50IGV4dGVuZHMgRWxlbWVudCB7XG4gICAgc3RhdGljIGlkID0gJ2FyYyc7XG4gICAgc3RhdGljIGRlZmF1bHRzID0ge1xuICAgICAgICBib3JkZXJBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIGJvcmRlckNvbG9yOiAnI2ZmZicsXG4gICAgICAgIGJvcmRlckRhc2g6IFtdLFxuICAgICAgICBib3JkZXJEYXNoT2Zmc2V0OiAwLFxuICAgICAgICBib3JkZXJKb2luU3R5bGU6IHVuZGVmaW5lZCxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAwLFxuICAgICAgICBib3JkZXJXaWR0aDogMixcbiAgICAgICAgb2Zmc2V0OiAwLFxuICAgICAgICBzcGFjaW5nOiAwLFxuICAgICAgICBhbmdsZTogdW5kZWZpbmVkLFxuICAgICAgICBjaXJjdWxhcjogdHJ1ZVxuICAgIH07XG4gICAgc3RhdGljIGRlZmF1bHRSb3V0ZXMgPSB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2JhY2tncm91bmRDb2xvcidcbiAgICB9O1xuICAgIHN0YXRpYyBkZXNjcmlwdG9ycyA9IHtcbiAgICAgICAgX3NjcmlwdGFibGU6IHRydWUsXG4gICAgICAgIF9pbmRleGFibGU6IChuYW1lKT0+bmFtZSAhPT0gJ2JvcmRlckRhc2gnXG4gICAgfTtcbiAgICBjaXJjdW1mZXJlbmNlO1xuICAgIGVuZEFuZ2xlO1xuICAgIGZ1bGxDaXJjbGVzO1xuICAgIGlubmVyUmFkaXVzO1xuICAgIG91dGVyUmFkaXVzO1xuICAgIHBpeGVsTWFyZ2luO1xuICAgIHN0YXJ0QW5nbGU7XG4gICAgY29uc3RydWN0b3IoY2ZnKXtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmNpcmN1bWZlcmVuY2UgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuc3RhcnRBbmdsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5lbmRBbmdsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5pbm5lclJhZGl1cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5vdXRlclJhZGl1cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5waXhlbE1hcmdpbiA9IDA7XG4gICAgICAgIHRoaXMuZnVsbENpcmNsZXMgPSAwO1xuICAgICAgICBpZiAoY2ZnKSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIGNmZyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaW5SYW5nZShjaGFydFgsIGNoYXJ0WSwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICBjb25zdCBwb2ludCA9IHRoaXMuZ2V0UHJvcHMoW1xuICAgICAgICAgICAgJ3gnLFxuICAgICAgICAgICAgJ3knXG4gICAgICAgIF0sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgICBjb25zdCB7IGFuZ2xlICwgZGlzdGFuY2UgIH0gPSBnZXRBbmdsZUZyb21Qb2ludChwb2ludCwge1xuICAgICAgICAgICAgeDogY2hhcnRYLFxuICAgICAgICAgICAgeTogY2hhcnRZXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB7IHN0YXJ0QW5nbGUgLCBlbmRBbmdsZSAsIGlubmVyUmFkaXVzICwgb3V0ZXJSYWRpdXMgLCBjaXJjdW1mZXJlbmNlICB9ID0gdGhpcy5nZXRQcm9wcyhbXG4gICAgICAgICAgICAnc3RhcnRBbmdsZScsXG4gICAgICAgICAgICAnZW5kQW5nbGUnLFxuICAgICAgICAgICAgJ2lubmVyUmFkaXVzJyxcbiAgICAgICAgICAgICdvdXRlclJhZGl1cycsXG4gICAgICAgICAgICAnY2lyY3VtZmVyZW5jZSdcbiAgICAgICAgXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgICAgIGNvbnN0IHJBZGp1c3QgPSAodGhpcy5vcHRpb25zLnNwYWNpbmcgKyB0aGlzLm9wdGlvbnMuYm9yZGVyV2lkdGgpIC8gMjtcbiAgICAgICAgY29uc3QgX2NpcmN1bWZlcmVuY2UgPSB2YWx1ZU9yRGVmYXVsdChjaXJjdW1mZXJlbmNlLCBlbmRBbmdsZSAtIHN0YXJ0QW5nbGUpO1xuICAgICAgICBjb25zdCBiZXR3ZWVuQW5nbGVzID0gX2NpcmN1bWZlcmVuY2UgPj0gVEFVIHx8IF9hbmdsZUJldHdlZW4oYW5nbGUsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlKTtcbiAgICAgICAgY29uc3Qgd2l0aGluUmFkaXVzID0gX2lzQmV0d2VlbihkaXN0YW5jZSwgaW5uZXJSYWRpdXMgKyByQWRqdXN0LCBvdXRlclJhZGl1cyArIHJBZGp1c3QpO1xuICAgICAgICByZXR1cm4gYmV0d2VlbkFuZ2xlcyAmJiB3aXRoaW5SYWRpdXM7XG4gICAgfVxuICAgIGdldENlbnRlclBvaW50KHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgY29uc3QgeyB4ICwgeSAsIHN0YXJ0QW5nbGUgLCBlbmRBbmdsZSAsIGlubmVyUmFkaXVzICwgb3V0ZXJSYWRpdXMgIH0gPSB0aGlzLmdldFByb3BzKFtcbiAgICAgICAgICAgICd4JyxcbiAgICAgICAgICAgICd5JyxcbiAgICAgICAgICAgICdzdGFydEFuZ2xlJyxcbiAgICAgICAgICAgICdlbmRBbmdsZScsXG4gICAgICAgICAgICAnaW5uZXJSYWRpdXMnLFxuICAgICAgICAgICAgJ291dGVyUmFkaXVzJ1xuICAgICAgICBdLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgICAgY29uc3QgeyBvZmZzZXQgLCBzcGFjaW5nICB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBoYWxmQW5nbGUgPSAoc3RhcnRBbmdsZSArIGVuZEFuZ2xlKSAvIDI7XG4gICAgICAgIGNvbnN0IGhhbGZSYWRpdXMgPSAoaW5uZXJSYWRpdXMgKyBvdXRlclJhZGl1cyArIHNwYWNpbmcgKyBvZmZzZXQpIC8gMjtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IHggKyBNYXRoLmNvcyhoYWxmQW5nbGUpICogaGFsZlJhZGl1cyxcbiAgICAgICAgICAgIHk6IHkgKyBNYXRoLnNpbihoYWxmQW5nbGUpICogaGFsZlJhZGl1c1xuICAgICAgICB9O1xuICAgIH1cbiAgICB0b29sdGlwUG9zaXRpb24odXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRDZW50ZXJQb2ludCh1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICB9XG4gICAgZHJhdyhjdHgpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zICwgY2lyY3VtZmVyZW5jZSAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IChvcHRpb25zLm9mZnNldCB8fCAwKSAvIDQ7XG4gICAgICAgIGNvbnN0IHNwYWNpbmcgPSAob3B0aW9ucy5zcGFjaW5nIHx8IDApIC8gMjtcbiAgICAgICAgY29uc3QgY2lyY3VsYXIgPSBvcHRpb25zLmNpcmN1bGFyO1xuICAgICAgICB0aGlzLnBpeGVsTWFyZ2luID0gb3B0aW9ucy5ib3JkZXJBbGlnbiA9PT0gJ2lubmVyJyA/IDAuMzMgOiAwO1xuICAgICAgICB0aGlzLmZ1bGxDaXJjbGVzID0gY2lyY3VtZmVyZW5jZSA+IFRBVSA/IE1hdGguZmxvb3IoY2lyY3VtZmVyZW5jZSAvIFRBVSkgOiAwO1xuICAgICAgICBpZiAoY2lyY3VtZmVyZW5jZSA9PT0gMCB8fCB0aGlzLmlubmVyUmFkaXVzIDwgMCB8fCB0aGlzLm91dGVyUmFkaXVzIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIGNvbnN0IGhhbGZBbmdsZSA9ICh0aGlzLnN0YXJ0QW5nbGUgKyB0aGlzLmVuZEFuZ2xlKSAvIDI7XG4gICAgICAgIGN0eC50cmFuc2xhdGUoTWF0aC5jb3MoaGFsZkFuZ2xlKSAqIG9mZnNldCwgTWF0aC5zaW4oaGFsZkFuZ2xlKSAqIG9mZnNldCk7XG4gICAgICAgIGNvbnN0IGZpeCA9IDEgLSBNYXRoLnNpbihNYXRoLm1pbihQSSwgY2lyY3VtZmVyZW5jZSB8fCAwKSk7XG4gICAgICAgIGNvbnN0IHJhZGl1c09mZnNldCA9IG9mZnNldCAqIGZpeDtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yO1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBvcHRpb25zLmJvcmRlckNvbG9yO1xuICAgICAgICBkcmF3QXJjKGN0eCwgdGhpcywgcmFkaXVzT2Zmc2V0LCBzcGFjaW5nLCBjaXJjdWxhcik7XG4gICAgICAgIGRyYXdCb3JkZXIoY3R4LCB0aGlzLCByYWRpdXNPZmZzZXQsIHNwYWNpbmcsIGNpcmN1bGFyKTtcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNldFN0eWxlKGN0eCwgb3B0aW9ucywgc3R5bGUgPSBvcHRpb25zKSB7XG4gICAgY3R4LmxpbmVDYXAgPSB2YWx1ZU9yRGVmYXVsdChzdHlsZS5ib3JkZXJDYXBTdHlsZSwgb3B0aW9ucy5ib3JkZXJDYXBTdHlsZSk7XG4gICAgY3R4LnNldExpbmVEYXNoKHZhbHVlT3JEZWZhdWx0KHN0eWxlLmJvcmRlckRhc2gsIG9wdGlvbnMuYm9yZGVyRGFzaCkpO1xuICAgIGN0eC5saW5lRGFzaE9mZnNldCA9IHZhbHVlT3JEZWZhdWx0KHN0eWxlLmJvcmRlckRhc2hPZmZzZXQsIG9wdGlvbnMuYm9yZGVyRGFzaE9mZnNldCk7XG4gICAgY3R4LmxpbmVKb2luID0gdmFsdWVPckRlZmF1bHQoc3R5bGUuYm9yZGVySm9pblN0eWxlLCBvcHRpb25zLmJvcmRlckpvaW5TdHlsZSk7XG4gICAgY3R4LmxpbmVXaWR0aCA9IHZhbHVlT3JEZWZhdWx0KHN0eWxlLmJvcmRlcldpZHRoLCBvcHRpb25zLmJvcmRlcldpZHRoKTtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSB2YWx1ZU9yRGVmYXVsdChzdHlsZS5ib3JkZXJDb2xvciwgb3B0aW9ucy5ib3JkZXJDb2xvcik7XG59XG5mdW5jdGlvbiBsaW5lVG8oY3R4LCBwcmV2aW91cywgdGFyZ2V0KSB7XG4gICAgY3R4LmxpbmVUbyh0YXJnZXQueCwgdGFyZ2V0LnkpO1xufVxuIGZ1bmN0aW9uIGdldExpbmVNZXRob2Qob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLnN0ZXBwZWQpIHtcbiAgICAgICAgcmV0dXJuIF9zdGVwcGVkTGluZVRvO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy50ZW5zaW9uIHx8IG9wdGlvbnMuY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSA9PT0gJ21vbm90b25lJykge1xuICAgICAgICByZXR1cm4gX2JlemllckN1cnZlVG87XG4gICAgfVxuICAgIHJldHVybiBsaW5lVG87XG59XG5mdW5jdGlvbiBwYXRoVmFycyhwb2ludHMsIHNlZ21lbnQsIHBhcmFtcyA9IHt9KSB7XG4gICAgY29uc3QgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuICAgIGNvbnN0IHsgc3RhcnQ6IHBhcmFtc1N0YXJ0ID0gMCAsIGVuZDogcGFyYW1zRW5kID0gY291bnQgLSAxICB9ID0gcGFyYW1zO1xuICAgIGNvbnN0IHsgc3RhcnQ6IHNlZ21lbnRTdGFydCAsIGVuZDogc2VnbWVudEVuZCAgfSA9IHNlZ21lbnQ7XG4gICAgY29uc3Qgc3RhcnQgPSBNYXRoLm1heChwYXJhbXNTdGFydCwgc2VnbWVudFN0YXJ0KTtcbiAgICBjb25zdCBlbmQgPSBNYXRoLm1pbihwYXJhbXNFbmQsIHNlZ21lbnRFbmQpO1xuICAgIGNvbnN0IG91dHNpZGUgPSBwYXJhbXNTdGFydCA8IHNlZ21lbnRTdGFydCAmJiBwYXJhbXNFbmQgPCBzZWdtZW50U3RhcnQgfHwgcGFyYW1zU3RhcnQgPiBzZWdtZW50RW5kICYmIHBhcmFtc0VuZCA+IHNlZ21lbnRFbmQ7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY291bnQsXG4gICAgICAgIHN0YXJ0LFxuICAgICAgICBsb29wOiBzZWdtZW50Lmxvb3AsXG4gICAgICAgIGlsZW46IGVuZCA8IHN0YXJ0ICYmICFvdXRzaWRlID8gY291bnQgKyBlbmQgLSBzdGFydCA6IGVuZCAtIHN0YXJ0XG4gICAgfTtcbn1cbiBmdW5jdGlvbiBwYXRoU2VnbWVudChjdHgsIGxpbmUsIHNlZ21lbnQsIHBhcmFtcykge1xuICAgIGNvbnN0IHsgcG9pbnRzICwgb3B0aW9ucyAgfSA9IGxpbmU7XG4gICAgY29uc3QgeyBjb3VudCAsIHN0YXJ0ICwgbG9vcCAsIGlsZW4gIH0gPSBwYXRoVmFycyhwb2ludHMsIHNlZ21lbnQsIHBhcmFtcyk7XG4gICAgY29uc3QgbGluZU1ldGhvZCA9IGdldExpbmVNZXRob2Qob3B0aW9ucyk7XG4gICAgbGV0IHsgbW92ZSA9dHJ1ZSAsIHJldmVyc2UgIH0gPSBwYXJhbXMgfHwge307XG4gICAgbGV0IGksIHBvaW50LCBwcmV2O1xuICAgIGZvcihpID0gMDsgaSA8PSBpbGVuOyArK2kpe1xuICAgICAgICBwb2ludCA9IHBvaW50c1soc3RhcnQgKyAocmV2ZXJzZSA/IGlsZW4gLSBpIDogaSkpICUgY291bnRdO1xuICAgICAgICBpZiAocG9pbnQuc2tpcCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gZWxzZSBpZiAobW92ZSkge1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyhwb2ludC54LCBwb2ludC55KTtcbiAgICAgICAgICAgIG1vdmUgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxpbmVNZXRob2QoY3R4LCBwcmV2LCBwb2ludCwgcmV2ZXJzZSwgb3B0aW9ucy5zdGVwcGVkKTtcbiAgICAgICAgfVxuICAgICAgICBwcmV2ID0gcG9pbnQ7XG4gICAgfVxuICAgIGlmIChsb29wKSB7XG4gICAgICAgIHBvaW50ID0gcG9pbnRzWyhzdGFydCArIChyZXZlcnNlID8gaWxlbiA6IDApKSAlIGNvdW50XTtcbiAgICAgICAgbGluZU1ldGhvZChjdHgsIHByZXYsIHBvaW50LCByZXZlcnNlLCBvcHRpb25zLnN0ZXBwZWQpO1xuICAgIH1cbiAgICByZXR1cm4gISFsb29wO1xufVxuIGZ1bmN0aW9uIGZhc3RQYXRoU2VnbWVudChjdHgsIGxpbmUsIHNlZ21lbnQsIHBhcmFtcykge1xuICAgIGNvbnN0IHBvaW50cyA9IGxpbmUucG9pbnRzO1xuICAgIGNvbnN0IHsgY291bnQgLCBzdGFydCAsIGlsZW4gIH0gPSBwYXRoVmFycyhwb2ludHMsIHNlZ21lbnQsIHBhcmFtcyk7XG4gICAgY29uc3QgeyBtb3ZlID10cnVlICwgcmV2ZXJzZSAgfSA9IHBhcmFtcyB8fCB7fTtcbiAgICBsZXQgYXZnWCA9IDA7XG4gICAgbGV0IGNvdW50WCA9IDA7XG4gICAgbGV0IGksIHBvaW50LCBwcmV2WCwgbWluWSwgbWF4WSwgbGFzdFk7XG4gICAgY29uc3QgcG9pbnRJbmRleCA9IChpbmRleCk9PihzdGFydCArIChyZXZlcnNlID8gaWxlbiAtIGluZGV4IDogaW5kZXgpKSAlIGNvdW50O1xuICAgIGNvbnN0IGRyYXdYID0gKCk9PntcbiAgICAgICAgaWYgKG1pblkgIT09IG1heFkpIHtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oYXZnWCwgbWF4WSk7XG4gICAgICAgICAgICBjdHgubGluZVRvKGF2Z1gsIG1pblkpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyhhdmdYLCBsYXN0WSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGlmIChtb3ZlKSB7XG4gICAgICAgIHBvaW50ID0gcG9pbnRzW3BvaW50SW5kZXgoMCldO1xuICAgICAgICBjdHgubW92ZVRvKHBvaW50LngsIHBvaW50LnkpO1xuICAgIH1cbiAgICBmb3IoaSA9IDA7IGkgPD0gaWxlbjsgKytpKXtcbiAgICAgICAgcG9pbnQgPSBwb2ludHNbcG9pbnRJbmRleChpKV07XG4gICAgICAgIGlmIChwb2ludC5za2lwKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB4ID0gcG9pbnQueDtcbiAgICAgICAgY29uc3QgeSA9IHBvaW50Lnk7XG4gICAgICAgIGNvbnN0IHRydW5jWCA9IHggfCAwO1xuICAgICAgICBpZiAodHJ1bmNYID09PSBwcmV2WCkge1xuICAgICAgICAgICAgaWYgKHkgPCBtaW5ZKSB7XG4gICAgICAgICAgICAgICAgbWluWSA9IHk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHkgPiBtYXhZKSB7XG4gICAgICAgICAgICAgICAgbWF4WSA9IHk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhdmdYID0gKGNvdW50WCAqIGF2Z1ggKyB4KSAvICsrY291bnRYO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZHJhd1goKTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeCwgeSk7XG4gICAgICAgICAgICBwcmV2WCA9IHRydW5jWDtcbiAgICAgICAgICAgIGNvdW50WCA9IDA7XG4gICAgICAgICAgICBtaW5ZID0gbWF4WSA9IHk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdFkgPSB5O1xuICAgIH1cbiAgICBkcmF3WCgpO1xufVxuIGZ1bmN0aW9uIF9nZXRTZWdtZW50TWV0aG9kKGxpbmUpIHtcbiAgICBjb25zdCBvcHRzID0gbGluZS5vcHRpb25zO1xuICAgIGNvbnN0IGJvcmRlckRhc2ggPSBvcHRzLmJvcmRlckRhc2ggJiYgb3B0cy5ib3JkZXJEYXNoLmxlbmd0aDtcbiAgICBjb25zdCB1c2VGYXN0UGF0aCA9ICFsaW5lLl9kZWNpbWF0ZWQgJiYgIWxpbmUuX2xvb3AgJiYgIW9wdHMudGVuc2lvbiAmJiBvcHRzLmN1YmljSW50ZXJwb2xhdGlvbk1vZGUgIT09ICdtb25vdG9uZScgJiYgIW9wdHMuc3RlcHBlZCAmJiAhYm9yZGVyRGFzaDtcbiAgICByZXR1cm4gdXNlRmFzdFBhdGggPyBmYXN0UGF0aFNlZ21lbnQgOiBwYXRoU2VnbWVudDtcbn1cbiBmdW5jdGlvbiBfZ2V0SW50ZXJwb2xhdGlvbk1ldGhvZChvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuc3RlcHBlZCkge1xuICAgICAgICByZXR1cm4gX3N0ZXBwZWRJbnRlcnBvbGF0aW9uO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy50ZW5zaW9uIHx8IG9wdGlvbnMuY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSA9PT0gJ21vbm90b25lJykge1xuICAgICAgICByZXR1cm4gX2JlemllckludGVycG9sYXRpb247XG4gICAgfVxuICAgIHJldHVybiBfcG9pbnRJbkxpbmU7XG59XG5mdW5jdGlvbiBzdHJva2VQYXRoV2l0aENhY2hlKGN0eCwgbGluZSwgc3RhcnQsIGNvdW50KSB7XG4gICAgbGV0IHBhdGggPSBsaW5lLl9wYXRoO1xuICAgIGlmICghcGF0aCkge1xuICAgICAgICBwYXRoID0gbGluZS5fcGF0aCA9IG5ldyBQYXRoMkQoKTtcbiAgICAgICAgaWYgKGxpbmUucGF0aChwYXRoLCBzdGFydCwgY291bnQpKSB7XG4gICAgICAgICAgICBwYXRoLmNsb3NlUGF0aCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldFN0eWxlKGN0eCwgbGluZS5vcHRpb25zKTtcbiAgICBjdHguc3Ryb2tlKHBhdGgpO1xufVxuZnVuY3Rpb24gc3Ryb2tlUGF0aERpcmVjdChjdHgsIGxpbmUsIHN0YXJ0LCBjb3VudCkge1xuICAgIGNvbnN0IHsgc2VnbWVudHMgLCBvcHRpb25zICB9ID0gbGluZTtcbiAgICBjb25zdCBzZWdtZW50TWV0aG9kID0gX2dldFNlZ21lbnRNZXRob2QobGluZSk7XG4gICAgZm9yIChjb25zdCBzZWdtZW50IG9mIHNlZ21lbnRzKXtcbiAgICAgICAgc2V0U3R5bGUoY3R4LCBvcHRpb25zLCBzZWdtZW50LnN0eWxlKTtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBpZiAoc2VnbWVudE1ldGhvZChjdHgsIGxpbmUsIHNlZ21lbnQsIHtcbiAgICAgICAgICAgIHN0YXJ0LFxuICAgICAgICAgICAgZW5kOiBzdGFydCArIGNvdW50IC0gMVxuICAgICAgICB9KSkge1xuICAgICAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICB9XG59XG5jb25zdCB1c2VQYXRoMkQgPSB0eXBlb2YgUGF0aDJEID09PSAnZnVuY3Rpb24nO1xuZnVuY3Rpb24gZHJhdyhjdHgsIGxpbmUsIHN0YXJ0LCBjb3VudCkge1xuICAgIGlmICh1c2VQYXRoMkQgJiYgIWxpbmUub3B0aW9ucy5zZWdtZW50KSB7XG4gICAgICAgIHN0cm9rZVBhdGhXaXRoQ2FjaGUoY3R4LCBsaW5lLCBzdGFydCwgY291bnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHN0cm9rZVBhdGhEaXJlY3QoY3R4LCBsaW5lLCBzdGFydCwgY291bnQpO1xuICAgIH1cbn1cbmNsYXNzIExpbmVFbGVtZW50IGV4dGVuZHMgRWxlbWVudCB7XG4gICAgc3RhdGljIGlkID0gJ2xpbmUnO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgYm9yZGVyQ2FwU3R5bGU6ICdidXR0JyxcbiAgICAgICAgYm9yZGVyRGFzaDogW10sXG4gICAgICAgIGJvcmRlckRhc2hPZmZzZXQ6IDAsXG4gICAgICAgIGJvcmRlckpvaW5TdHlsZTogJ21pdGVyJyxcbiAgICAgICAgYm9yZGVyV2lkdGg6IDMsXG4gICAgICAgIGNhcEJlemllclBvaW50czogdHJ1ZSxcbiAgICAgICAgY3ViaWNJbnRlcnBvbGF0aW9uTW9kZTogJ2RlZmF1bHQnLFxuICAgICAgICBmaWxsOiBmYWxzZSxcbiAgICAgICAgc3BhbkdhcHM6IGZhbHNlLFxuICAgICAgICBzdGVwcGVkOiBmYWxzZSxcbiAgICAgICAgdGVuc2lvbjogMFxuICAgIH07XG4gc3RhdGljIGRlZmF1bHRSb3V0ZXMgPSB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2JhY2tncm91bmRDb2xvcicsXG4gICAgICAgIGJvcmRlckNvbG9yOiAnYm9yZGVyQ29sb3InXG4gICAgfTtcbiAgICBzdGF0aWMgZGVzY3JpcHRvcnMgPSB7XG4gICAgICAgIF9zY3JpcHRhYmxlOiB0cnVlLFxuICAgICAgICBfaW5kZXhhYmxlOiAobmFtZSk9Pm5hbWUgIT09ICdib3JkZXJEYXNoJyAmJiBuYW1lICE9PSAnZmlsbCdcbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKGNmZyl7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuYW5pbWF0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2NoYXJ0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9sb29wID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9mdWxsTG9vcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fcGF0aCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fcG9pbnRzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9zZWdtZW50cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fZGVjaW1hdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3BvaW50c1VwZGF0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fZGF0YXNldEluZGV4ID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoY2ZnKSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIGNmZyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlQ29udHJvbFBvaW50cyhjaGFydEFyZWEsIGluZGV4QXhpcykge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBpZiAoKG9wdGlvbnMudGVuc2lvbiB8fCBvcHRpb25zLmN1YmljSW50ZXJwb2xhdGlvbk1vZGUgPT09ICdtb25vdG9uZScpICYmICFvcHRpb25zLnN0ZXBwZWQgJiYgIXRoaXMuX3BvaW50c1VwZGF0ZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGxvb3AgPSBvcHRpb25zLnNwYW5HYXBzID8gdGhpcy5fbG9vcCA6IHRoaXMuX2Z1bGxMb29wO1xuICAgICAgICAgICAgX3VwZGF0ZUJlemllckNvbnRyb2xQb2ludHModGhpcy5fcG9pbnRzLCBvcHRpb25zLCBjaGFydEFyZWEsIGxvb3AsIGluZGV4QXhpcyk7XG4gICAgICAgICAgICB0aGlzLl9wb2ludHNVcGRhdGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXQgcG9pbnRzKHBvaW50cykge1xuICAgICAgICB0aGlzLl9wb2ludHMgPSBwb2ludHM7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9zZWdtZW50cztcbiAgICAgICAgZGVsZXRlIHRoaXMuX3BhdGg7XG4gICAgICAgIHRoaXMuX3BvaW50c1VwZGF0ZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgZ2V0IHBvaW50cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BvaW50cztcbiAgICB9XG4gICAgZ2V0IHNlZ21lbnRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2VnbWVudHMgfHwgKHRoaXMuX3NlZ21lbnRzID0gX2NvbXB1dGVTZWdtZW50cyh0aGlzLCB0aGlzLm9wdGlvbnMuc2VnbWVudCkpO1xuICAgIH1cbiBmaXJzdCgpIHtcbiAgICAgICAgY29uc3Qgc2VnbWVudHMgPSB0aGlzLnNlZ21lbnRzO1xuICAgICAgICBjb25zdCBwb2ludHMgPSB0aGlzLnBvaW50cztcbiAgICAgICAgcmV0dXJuIHNlZ21lbnRzLmxlbmd0aCAmJiBwb2ludHNbc2VnbWVudHNbMF0uc3RhcnRdO1xuICAgIH1cbiBsYXN0KCkge1xuICAgICAgICBjb25zdCBzZWdtZW50cyA9IHRoaXMuc2VnbWVudHM7XG4gICAgICAgIGNvbnN0IHBvaW50cyA9IHRoaXMucG9pbnRzO1xuICAgICAgICBjb25zdCBjb3VudCA9IHNlZ21lbnRzLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIGNvdW50ICYmIHBvaW50c1tzZWdtZW50c1tjb3VudCAtIDFdLmVuZF07XG4gICAgfVxuIGludGVycG9sYXRlKHBvaW50LCBwcm9wZXJ0eSkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHBvaW50W3Byb3BlcnR5XTtcbiAgICAgICAgY29uc3QgcG9pbnRzID0gdGhpcy5wb2ludHM7XG4gICAgICAgIGNvbnN0IHNlZ21lbnRzID0gX2JvdW5kU2VnbWVudHModGhpcywge1xuICAgICAgICAgICAgcHJvcGVydHksXG4gICAgICAgICAgICBzdGFydDogdmFsdWUsXG4gICAgICAgICAgICBlbmQ6IHZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIXNlZ21lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICBjb25zdCBfaW50ZXJwb2xhdGUgPSBfZ2V0SW50ZXJwb2xhdGlvbk1ldGhvZChvcHRpb25zKTtcbiAgICAgICAgbGV0IGksIGlsZW47XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IHNlZ21lbnRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBjb25zdCB7IHN0YXJ0ICwgZW5kICB9ID0gc2VnbWVudHNbaV07XG4gICAgICAgICAgICBjb25zdCBwMSA9IHBvaW50c1tzdGFydF07XG4gICAgICAgICAgICBjb25zdCBwMiA9IHBvaW50c1tlbmRdO1xuICAgICAgICAgICAgaWYgKHAxID09PSBwMikge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHAxKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHQgPSBNYXRoLmFicygodmFsdWUgLSBwMVtwcm9wZXJ0eV0pIC8gKHAyW3Byb3BlcnR5XSAtIHAxW3Byb3BlcnR5XSkpO1xuICAgICAgICAgICAgY29uc3QgaW50ZXJwb2xhdGVkID0gX2ludGVycG9sYXRlKHAxLCBwMiwgdCwgb3B0aW9ucy5zdGVwcGVkKTtcbiAgICAgICAgICAgIGludGVycG9sYXRlZFtwcm9wZXJ0eV0gPSBwb2ludFtwcm9wZXJ0eV07XG4gICAgICAgICAgICByZXN1bHQucHVzaChpbnRlcnBvbGF0ZWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQubGVuZ3RoID09PSAxID8gcmVzdWx0WzBdIDogcmVzdWx0O1xuICAgIH1cbiBwYXRoU2VnbWVudChjdHgsIHNlZ21lbnQsIHBhcmFtcykge1xuICAgICAgICBjb25zdCBzZWdtZW50TWV0aG9kID0gX2dldFNlZ21lbnRNZXRob2QodGhpcyk7XG4gICAgICAgIHJldHVybiBzZWdtZW50TWV0aG9kKGN0eCwgdGhpcywgc2VnbWVudCwgcGFyYW1zKTtcbiAgICB9XG4gcGF0aChjdHgsIHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCBzZWdtZW50cyA9IHRoaXMuc2VnbWVudHM7XG4gICAgICAgIGNvbnN0IHNlZ21lbnRNZXRob2QgPSBfZ2V0U2VnbWVudE1ldGhvZCh0aGlzKTtcbiAgICAgICAgbGV0IGxvb3AgPSB0aGlzLl9sb29wO1xuICAgICAgICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gICAgICAgIGNvdW50ID0gY291bnQgfHwgdGhpcy5wb2ludHMubGVuZ3RoIC0gc3RhcnQ7XG4gICAgICAgIGZvciAoY29uc3Qgc2VnbWVudCBvZiBzZWdtZW50cyl7XG4gICAgICAgICAgICBsb29wICY9IHNlZ21lbnRNZXRob2QoY3R4LCB0aGlzLCBzZWdtZW50LCB7XG4gICAgICAgICAgICAgICAgc3RhcnQsXG4gICAgICAgICAgICAgICAgZW5kOiBzdGFydCArIGNvdW50IC0gMVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICEhbG9vcDtcbiAgICB9XG4gZHJhdyhjdHgsIGNoYXJ0QXJlYSwgc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMgfHwge307XG4gICAgICAgIGNvbnN0IHBvaW50cyA9IHRoaXMucG9pbnRzIHx8IFtdO1xuICAgICAgICBpZiAocG9pbnRzLmxlbmd0aCAmJiBvcHRpb25zLmJvcmRlcldpZHRoKSB7XG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgZHJhdyhjdHgsIHRoaXMsIHN0YXJ0LCBjb3VudCk7XG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmFuaW1hdGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9wb2ludHNVcGRhdGVkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl9wYXRoID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpblJhbmdlJDEoZWwsIHBvcywgYXhpcywgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBlbC5vcHRpb25zO1xuICAgIGNvbnN0IHsgW2F4aXNdOiB2YWx1ZSAgfSA9IGVsLmdldFByb3BzKFtcbiAgICAgICAgYXhpc1xuICAgIF0sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIHJldHVybiBNYXRoLmFicyhwb3MgLSB2YWx1ZSkgPCBvcHRpb25zLnJhZGl1cyArIG9wdGlvbnMuaGl0UmFkaXVzO1xufVxuY2xhc3MgUG9pbnRFbGVtZW50IGV4dGVuZHMgRWxlbWVudCB7XG4gICAgc3RhdGljIGlkID0gJ3BvaW50JztcbiAgICBwYXJzZWQ7XG4gICAgc2tpcDtcbiAgICBzdG9wO1xuICAgIC8qKlxuICAgKiBAdHlwZSB7YW55fVxuICAgKi8gc3RhdGljIGRlZmF1bHRzID0ge1xuICAgICAgICBib3JkZXJXaWR0aDogMSxcbiAgICAgICAgaGl0UmFkaXVzOiAxLFxuICAgICAgICBob3ZlckJvcmRlcldpZHRoOiAxLFxuICAgICAgICBob3ZlclJhZGl1czogNCxcbiAgICAgICAgcG9pbnRTdHlsZTogJ2NpcmNsZScsXG4gICAgICAgIHJhZGl1czogMyxcbiAgICAgICAgcm90YXRpb246IDBcbiAgICB9O1xuICAgIC8qKlxuICAgKiBAdHlwZSB7YW55fVxuICAgKi8gc3RhdGljIGRlZmF1bHRSb3V0ZXMgPSB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2JhY2tncm91bmRDb2xvcicsXG4gICAgICAgIGJvcmRlckNvbG9yOiAnYm9yZGVyQ29sb3InXG4gICAgfTtcbiAgICBjb25zdHJ1Y3RvcihjZmcpe1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucGFyc2VkID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnNraXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuc3RvcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGNmZykge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBjZmcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGluUmFuZ2UobW91c2VYLCBtb3VzZVksIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgeyB4ICwgeSAgfSA9IHRoaXMuZ2V0UHJvcHMoW1xuICAgICAgICAgICAgJ3gnLFxuICAgICAgICAgICAgJ3knXG4gICAgICAgIF0sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgICByZXR1cm4gTWF0aC5wb3cobW91c2VYIC0geCwgMikgKyBNYXRoLnBvdyhtb3VzZVkgLSB5LCAyKSA8IE1hdGgucG93KG9wdGlvbnMuaGl0UmFkaXVzICsgb3B0aW9ucy5yYWRpdXMsIDIpO1xuICAgIH1cbiAgICBpblhSYW5nZShtb3VzZVgsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGluUmFuZ2UkMSh0aGlzLCBtb3VzZVgsICd4JywgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgfVxuICAgIGluWVJhbmdlKG1vdXNlWSwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gaW5SYW5nZSQxKHRoaXMsIG1vdXNlWSwgJ3knLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICB9XG4gICAgZ2V0Q2VudGVyUG9pbnQodXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICBjb25zdCB7IHggLCB5ICB9ID0gdGhpcy5nZXRQcm9wcyhbXG4gICAgICAgICAgICAneCcsXG4gICAgICAgICAgICAneSdcbiAgICAgICAgXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4LFxuICAgICAgICAgICAgeVxuICAgICAgICB9O1xuICAgIH1cbiAgICBzaXplKG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwgdGhpcy5vcHRpb25zIHx8IHt9O1xuICAgICAgICBsZXQgcmFkaXVzID0gb3B0aW9ucy5yYWRpdXMgfHwgMDtcbiAgICAgICAgcmFkaXVzID0gTWF0aC5tYXgocmFkaXVzLCByYWRpdXMgJiYgb3B0aW9ucy5ob3ZlclJhZGl1cyB8fCAwKTtcbiAgICAgICAgY29uc3QgYm9yZGVyV2lkdGggPSByYWRpdXMgJiYgb3B0aW9ucy5ib3JkZXJXaWR0aCB8fCAwO1xuICAgICAgICByZXR1cm4gKHJhZGl1cyArIGJvcmRlcldpZHRoKSAqIDI7XG4gICAgfVxuICAgIGRyYXcoY3R4LCBhcmVhKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGlmICh0aGlzLnNraXAgfHwgb3B0aW9ucy5yYWRpdXMgPCAwLjEgfHwgIV9pc1BvaW50SW5BcmVhKHRoaXMsIGFyZWEsIHRoaXMuc2l6ZShvcHRpb25zKSAvIDIpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gb3B0aW9ucy5ib3JkZXJDb2xvcjtcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IG9wdGlvbnMuYm9yZGVyV2lkdGg7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLmJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgZHJhd1BvaW50KGN0eCwgb3B0aW9ucywgdGhpcy54LCB0aGlzLnkpO1xuICAgIH1cbiAgICBnZXRSYW5nZSgpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyB8fCB7fTtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBGYWxsYmFja3Mgc2hvdWxkIG5ldmVyIGJlIGhpdCBpbiBwcmFjdGljZVxuICAgICAgICByZXR1cm4gb3B0aW9ucy5yYWRpdXMgKyBvcHRpb25zLmhpdFJhZGl1cztcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldEJhckJvdW5kcyhiYXIsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICBjb25zdCB7IHggLCB5ICwgYmFzZSAsIHdpZHRoICwgaGVpZ2h0ICB9ID0gIGJhci5nZXRQcm9wcyhbXG4gICAgICAgICd4JyxcbiAgICAgICAgJ3knLFxuICAgICAgICAnYmFzZScsXG4gICAgICAgICd3aWR0aCcsXG4gICAgICAgICdoZWlnaHQnXG4gICAgXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgbGV0IGxlZnQsIHJpZ2h0LCB0b3AsIGJvdHRvbSwgaGFsZjtcbiAgICBpZiAoYmFyLmhvcml6b250YWwpIHtcbiAgICAgICAgaGFsZiA9IGhlaWdodCAvIDI7XG4gICAgICAgIGxlZnQgPSBNYXRoLm1pbih4LCBiYXNlKTtcbiAgICAgICAgcmlnaHQgPSBNYXRoLm1heCh4LCBiYXNlKTtcbiAgICAgICAgdG9wID0geSAtIGhhbGY7XG4gICAgICAgIGJvdHRvbSA9IHkgKyBoYWxmO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGhhbGYgPSB3aWR0aCAvIDI7XG4gICAgICAgIGxlZnQgPSB4IC0gaGFsZjtcbiAgICAgICAgcmlnaHQgPSB4ICsgaGFsZjtcbiAgICAgICAgdG9wID0gTWF0aC5taW4oeSwgYmFzZSk7XG4gICAgICAgIGJvdHRvbSA9IE1hdGgubWF4KHksIGJhc2UpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0LFxuICAgICAgICB0b3AsXG4gICAgICAgIHJpZ2h0LFxuICAgICAgICBib3R0b21cbiAgICB9O1xufVxuZnVuY3Rpb24gc2tpcE9yTGltaXQoc2tpcCwgdmFsdWUsIG1pbiwgbWF4KSB7XG4gICAgcmV0dXJuIHNraXAgPyAwIDogX2xpbWl0VmFsdWUodmFsdWUsIG1pbiwgbWF4KTtcbn1cbmZ1bmN0aW9uIHBhcnNlQm9yZGVyV2lkdGgoYmFyLCBtYXhXLCBtYXhIKSB7XG4gICAgY29uc3QgdmFsdWUgPSBiYXIub3B0aW9ucy5ib3JkZXJXaWR0aDtcbiAgICBjb25zdCBza2lwID0gYmFyLmJvcmRlclNraXBwZWQ7XG4gICAgY29uc3QgbyA9IHRvVFJCTCh2YWx1ZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdDogc2tpcE9yTGltaXQoc2tpcC50b3AsIG8udG9wLCAwLCBtYXhIKSxcbiAgICAgICAgcjogc2tpcE9yTGltaXQoc2tpcC5yaWdodCwgby5yaWdodCwgMCwgbWF4VyksXG4gICAgICAgIGI6IHNraXBPckxpbWl0KHNraXAuYm90dG9tLCBvLmJvdHRvbSwgMCwgbWF4SCksXG4gICAgICAgIGw6IHNraXBPckxpbWl0KHNraXAubGVmdCwgby5sZWZ0LCAwLCBtYXhXKVxuICAgIH07XG59XG5mdW5jdGlvbiBwYXJzZUJvcmRlclJhZGl1cyhiYXIsIG1heFcsIG1heEgpIHtcbiAgICBjb25zdCB7IGVuYWJsZUJvcmRlclJhZGl1cyAgfSA9IGJhci5nZXRQcm9wcyhbXG4gICAgICAgICdlbmFibGVCb3JkZXJSYWRpdXMnXG4gICAgXSk7XG4gICAgY29uc3QgdmFsdWUgPSBiYXIub3B0aW9ucy5ib3JkZXJSYWRpdXM7XG4gICAgY29uc3QgbyA9IHRvVFJCTENvcm5lcnModmFsdWUpO1xuICAgIGNvbnN0IG1heFIgPSBNYXRoLm1pbihtYXhXLCBtYXhIKTtcbiAgICBjb25zdCBza2lwID0gYmFyLmJvcmRlclNraXBwZWQ7XG4gICAgY29uc3QgZW5hYmxlQm9yZGVyID0gZW5hYmxlQm9yZGVyUmFkaXVzIHx8IGlzT2JqZWN0KHZhbHVlKTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0b3BMZWZ0OiBza2lwT3JMaW1pdCghZW5hYmxlQm9yZGVyIHx8IHNraXAudG9wIHx8IHNraXAubGVmdCwgby50b3BMZWZ0LCAwLCBtYXhSKSxcbiAgICAgICAgdG9wUmlnaHQ6IHNraXBPckxpbWl0KCFlbmFibGVCb3JkZXIgfHwgc2tpcC50b3AgfHwgc2tpcC5yaWdodCwgby50b3BSaWdodCwgMCwgbWF4UiksXG4gICAgICAgIGJvdHRvbUxlZnQ6IHNraXBPckxpbWl0KCFlbmFibGVCb3JkZXIgfHwgc2tpcC5ib3R0b20gfHwgc2tpcC5sZWZ0LCBvLmJvdHRvbUxlZnQsIDAsIG1heFIpLFxuICAgICAgICBib3R0b21SaWdodDogc2tpcE9yTGltaXQoIWVuYWJsZUJvcmRlciB8fCBza2lwLmJvdHRvbSB8fCBza2lwLnJpZ2h0LCBvLmJvdHRvbVJpZ2h0LCAwLCBtYXhSKVxuICAgIH07XG59XG5mdW5jdGlvbiBib3VuZGluZ1JlY3RzKGJhcikge1xuICAgIGNvbnN0IGJvdW5kcyA9IGdldEJhckJvdW5kcyhiYXIpO1xuICAgIGNvbnN0IHdpZHRoID0gYm91bmRzLnJpZ2h0IC0gYm91bmRzLmxlZnQ7XG4gICAgY29uc3QgaGVpZ2h0ID0gYm91bmRzLmJvdHRvbSAtIGJvdW5kcy50b3A7XG4gICAgY29uc3QgYm9yZGVyID0gcGFyc2VCb3JkZXJXaWR0aChiYXIsIHdpZHRoIC8gMiwgaGVpZ2h0IC8gMik7XG4gICAgY29uc3QgcmFkaXVzID0gcGFyc2VCb3JkZXJSYWRpdXMoYmFyLCB3aWR0aCAvIDIsIGhlaWdodCAvIDIpO1xuICAgIHJldHVybiB7XG4gICAgICAgIG91dGVyOiB7XG4gICAgICAgICAgICB4OiBib3VuZHMubGVmdCxcbiAgICAgICAgICAgIHk6IGJvdW5kcy50b3AsXG4gICAgICAgICAgICB3OiB3aWR0aCxcbiAgICAgICAgICAgIGg6IGhlaWdodCxcbiAgICAgICAgICAgIHJhZGl1c1xuICAgICAgICB9LFxuICAgICAgICBpbm5lcjoge1xuICAgICAgICAgICAgeDogYm91bmRzLmxlZnQgKyBib3JkZXIubCxcbiAgICAgICAgICAgIHk6IGJvdW5kcy50b3AgKyBib3JkZXIudCxcbiAgICAgICAgICAgIHc6IHdpZHRoIC0gYm9yZGVyLmwgLSBib3JkZXIucixcbiAgICAgICAgICAgIGg6IGhlaWdodCAtIGJvcmRlci50IC0gYm9yZGVyLmIsXG4gICAgICAgICAgICByYWRpdXM6IHtcbiAgICAgICAgICAgICAgICB0b3BMZWZ0OiBNYXRoLm1heCgwLCByYWRpdXMudG9wTGVmdCAtIE1hdGgubWF4KGJvcmRlci50LCBib3JkZXIubCkpLFxuICAgICAgICAgICAgICAgIHRvcFJpZ2h0OiBNYXRoLm1heCgwLCByYWRpdXMudG9wUmlnaHQgLSBNYXRoLm1heChib3JkZXIudCwgYm9yZGVyLnIpKSxcbiAgICAgICAgICAgICAgICBib3R0b21MZWZ0OiBNYXRoLm1heCgwLCByYWRpdXMuYm90dG9tTGVmdCAtIE1hdGgubWF4KGJvcmRlci5iLCBib3JkZXIubCkpLFxuICAgICAgICAgICAgICAgIGJvdHRvbVJpZ2h0OiBNYXRoLm1heCgwLCByYWRpdXMuYm90dG9tUmlnaHQgLSBNYXRoLm1heChib3JkZXIuYiwgYm9yZGVyLnIpKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGluUmFuZ2UoYmFyLCB4LCB5LCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgY29uc3Qgc2tpcFggPSB4ID09PSBudWxsO1xuICAgIGNvbnN0IHNraXBZID0geSA9PT0gbnVsbDtcbiAgICBjb25zdCBza2lwQm90aCA9IHNraXBYICYmIHNraXBZO1xuICAgIGNvbnN0IGJvdW5kcyA9IGJhciAmJiAhc2tpcEJvdGggJiYgZ2V0QmFyQm91bmRzKGJhciwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgcmV0dXJuIGJvdW5kcyAmJiAoc2tpcFggfHwgX2lzQmV0d2Vlbih4LCBib3VuZHMubGVmdCwgYm91bmRzLnJpZ2h0KSkgJiYgKHNraXBZIHx8IF9pc0JldHdlZW4oeSwgYm91bmRzLnRvcCwgYm91bmRzLmJvdHRvbSkpO1xufVxuZnVuY3Rpb24gaGFzUmFkaXVzKHJhZGl1cykge1xuICAgIHJldHVybiByYWRpdXMudG9wTGVmdCB8fCByYWRpdXMudG9wUmlnaHQgfHwgcmFkaXVzLmJvdHRvbUxlZnQgfHwgcmFkaXVzLmJvdHRvbVJpZ2h0O1xufVxuIGZ1bmN0aW9uIGFkZE5vcm1hbFJlY3RQYXRoKGN0eCwgcmVjdCkge1xuICAgIGN0eC5yZWN0KHJlY3QueCwgcmVjdC55LCByZWN0LncsIHJlY3QuaCk7XG59XG5mdW5jdGlvbiBpbmZsYXRlUmVjdChyZWN0LCBhbW91bnQsIHJlZlJlY3QgPSB7fSkge1xuICAgIGNvbnN0IHggPSByZWN0LnggIT09IHJlZlJlY3QueCA/IC1hbW91bnQgOiAwO1xuICAgIGNvbnN0IHkgPSByZWN0LnkgIT09IHJlZlJlY3QueSA/IC1hbW91bnQgOiAwO1xuICAgIGNvbnN0IHcgPSAocmVjdC54ICsgcmVjdC53ICE9PSByZWZSZWN0LnggKyByZWZSZWN0LncgPyBhbW91bnQgOiAwKSAtIHg7XG4gICAgY29uc3QgaCA9IChyZWN0LnkgKyByZWN0LmggIT09IHJlZlJlY3QueSArIHJlZlJlY3QuaCA/IGFtb3VudCA6IDApIC0geTtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiByZWN0LnggKyB4LFxuICAgICAgICB5OiByZWN0LnkgKyB5LFxuICAgICAgICB3OiByZWN0LncgKyB3LFxuICAgICAgICBoOiByZWN0LmggKyBoLFxuICAgICAgICByYWRpdXM6IHJlY3QucmFkaXVzXG4gICAgfTtcbn1cbmNsYXNzIEJhckVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50IHtcbiAgICBzdGF0aWMgaWQgPSAnYmFyJztcbiBzdGF0aWMgZGVmYXVsdHMgPSB7XG4gICAgICAgIGJvcmRlclNraXBwZWQ6ICdzdGFydCcsXG4gICAgICAgIGJvcmRlcldpZHRoOiAwLFxuICAgICAgICBib3JkZXJSYWRpdXM6IDAsXG4gICAgICAgIGluZmxhdGVBbW91bnQ6ICdhdXRvJyxcbiAgICAgICAgcG9pbnRTdHlsZTogdW5kZWZpbmVkXG4gICAgfTtcbiBzdGF0aWMgZGVmYXVsdFJvdXRlcyA9IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnYmFja2dyb3VuZENvbG9yJyxcbiAgICAgICAgYm9yZGVyQ29sb3I6ICdib3JkZXJDb2xvcidcbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKGNmZyl7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5ob3Jpem9udGFsID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmJhc2UgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMud2lkdGggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmluZmxhdGVBbW91bnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChjZmcpIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgY2ZnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkcmF3KGN0eCkge1xuICAgICAgICBjb25zdCB7IGluZmxhdGVBbW91bnQgLCBvcHRpb25zOiB7IGJvcmRlckNvbG9yICwgYmFja2dyb3VuZENvbG9yICB9ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBpbm5lciAsIG91dGVyICB9ID0gYm91bmRpbmdSZWN0cyh0aGlzKTtcbiAgICAgICAgY29uc3QgYWRkUmVjdFBhdGggPSBoYXNSYWRpdXMob3V0ZXIucmFkaXVzKSA/IGFkZFJvdW5kZWRSZWN0UGF0aCA6IGFkZE5vcm1hbFJlY3RQYXRoO1xuICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICBpZiAob3V0ZXIudyAhPT0gaW5uZXIudyB8fCBvdXRlci5oICE9PSBpbm5lci5oKSB7XG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBhZGRSZWN0UGF0aChjdHgsIGluZmxhdGVSZWN0KG91dGVyLCBpbmZsYXRlQW1vdW50LCBpbm5lcikpO1xuICAgICAgICAgICAgY3R4LmNsaXAoKTtcbiAgICAgICAgICAgIGFkZFJlY3RQYXRoKGN0eCwgaW5mbGF0ZVJlY3QoaW5uZXIsIC1pbmZsYXRlQW1vdW50LCBvdXRlcikpO1xuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGJvcmRlckNvbG9yO1xuICAgICAgICAgICAgY3R4LmZpbGwoJ2V2ZW5vZGQnKTtcbiAgICAgICAgfVxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGFkZFJlY3RQYXRoKGN0eCwgaW5mbGF0ZVJlY3QoaW5uZXIsIGluZmxhdGVBbW91bnQpKTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG4gICAgaW5SYW5nZShtb3VzZVgsIG1vdXNlWSwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gaW5SYW5nZSh0aGlzLCBtb3VzZVgsIG1vdXNlWSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgfVxuICAgIGluWFJhbmdlKG1vdXNlWCwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gaW5SYW5nZSh0aGlzLCBtb3VzZVgsIG51bGwsIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIH1cbiAgICBpbllSYW5nZShtb3VzZVksIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGluUmFuZ2UodGhpcywgbnVsbCwgbW91c2VZLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICB9XG4gICAgZ2V0Q2VudGVyUG9pbnQodXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICBjb25zdCB7IHggLCB5ICwgYmFzZSAsIGhvcml6b250YWwgIH0gPSAgdGhpcy5nZXRQcm9wcyhbXG4gICAgICAgICAgICAneCcsXG4gICAgICAgICAgICAneScsXG4gICAgICAgICAgICAnYmFzZScsXG4gICAgICAgICAgICAnaG9yaXpvbnRhbCdcbiAgICAgICAgXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiBob3Jpem9udGFsID8gKHggKyBiYXNlKSAvIDIgOiB4LFxuICAgICAgICAgICAgeTogaG9yaXpvbnRhbCA/IHkgOiAoeSArIGJhc2UpIC8gMlxuICAgICAgICB9O1xuICAgIH1cbiAgICBnZXRSYW5nZShheGlzKSB7XG4gICAgICAgIHJldHVybiBheGlzID09PSAneCcgPyB0aGlzLndpZHRoIC8gMiA6IHRoaXMuaGVpZ2h0IC8gMjtcbiAgICB9XG59XG5cbnZhciBlbGVtZW50cyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbl9fcHJvdG9fXzogbnVsbCxcbkFyY0VsZW1lbnQ6IEFyY0VsZW1lbnQsXG5CYXJFbGVtZW50OiBCYXJFbGVtZW50LFxuTGluZUVsZW1lbnQ6IExpbmVFbGVtZW50LFxuUG9pbnRFbGVtZW50OiBQb2ludEVsZW1lbnRcbn0pO1xuXG5jb25zdCBCT1JERVJfQ09MT1JTID0gW1xuICAgICdyZ2IoNTQsIDE2MiwgMjM1KScsXG4gICAgJ3JnYigyNTUsIDk5LCAxMzIpJyxcbiAgICAncmdiKDI1NSwgMTU5LCA2NCknLFxuICAgICdyZ2IoMjU1LCAyMDUsIDg2KScsXG4gICAgJ3JnYig3NSwgMTkyLCAxOTIpJyxcbiAgICAncmdiKDE1MywgMTAyLCAyNTUpJyxcbiAgICAncmdiKDIwMSwgMjAzLCAyMDcpJyAvLyBncmV5XG5dO1xuLy8gQm9yZGVyIGNvbG9ycyB3aXRoIDUwJSB0cmFuc3BhcmVuY3lcbmNvbnN0IEJBQ0tHUk9VTkRfQ09MT1JTID0gLyogI19fUFVSRV9fICovIEJPUkRFUl9DT0xPUlMubWFwKChjb2xvcik9PmNvbG9yLnJlcGxhY2UoJ3JnYignLCAncmdiYSgnKS5yZXBsYWNlKCcpJywgJywgMC41KScpKTtcbmZ1bmN0aW9uIGdldEJvcmRlckNvbG9yKGkpIHtcbiAgICByZXR1cm4gQk9SREVSX0NPTE9SU1tpICUgQk9SREVSX0NPTE9SUy5sZW5ndGhdO1xufVxuZnVuY3Rpb24gZ2V0QmFja2dyb3VuZENvbG9yKGkpIHtcbiAgICByZXR1cm4gQkFDS0dST1VORF9DT0xPUlNbaSAlIEJBQ0tHUk9VTkRfQ09MT1JTLmxlbmd0aF07XG59XG5mdW5jdGlvbiBjb2xvcml6ZURlZmF1bHREYXRhc2V0KGRhdGFzZXQsIGkpIHtcbiAgICBkYXRhc2V0LmJvcmRlckNvbG9yID0gZ2V0Qm9yZGVyQ29sb3IoaSk7XG4gICAgZGF0YXNldC5iYWNrZ3JvdW5kQ29sb3IgPSBnZXRCYWNrZ3JvdW5kQ29sb3IoaSk7XG4gICAgcmV0dXJuICsraTtcbn1cbmZ1bmN0aW9uIGNvbG9yaXplRG91Z2hudXREYXRhc2V0KGRhdGFzZXQsIGkpIHtcbiAgICBkYXRhc2V0LmJhY2tncm91bmRDb2xvciA9IGRhdGFzZXQuZGF0YS5tYXAoKCk9PmdldEJvcmRlckNvbG9yKGkrKykpO1xuICAgIHJldHVybiBpO1xufVxuZnVuY3Rpb24gY29sb3JpemVQb2xhckFyZWFEYXRhc2V0KGRhdGFzZXQsIGkpIHtcbiAgICBkYXRhc2V0LmJhY2tncm91bmRDb2xvciA9IGRhdGFzZXQuZGF0YS5tYXAoKCk9PmdldEJhY2tncm91bmRDb2xvcihpKyspKTtcbiAgICByZXR1cm4gaTtcbn1cbmZ1bmN0aW9uIGdldENvbG9yaXplcihjaGFydCkge1xuICAgIGxldCBpID0gMDtcbiAgICByZXR1cm4gKGRhdGFzZXQsIGRhdGFzZXRJbmRleCk9PntcbiAgICAgICAgY29uc3QgY29udHJvbGxlciA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCkuY29udHJvbGxlcjtcbiAgICAgICAgaWYgKGNvbnRyb2xsZXIgaW5zdGFuY2VvZiBEb3VnaG51dENvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgIGkgPSBjb2xvcml6ZURvdWdobnV0RGF0YXNldChkYXRhc2V0LCBpKTtcbiAgICAgICAgfSBlbHNlIGlmIChjb250cm9sbGVyIGluc3RhbmNlb2YgUG9sYXJBcmVhQ29udHJvbGxlcikge1xuICAgICAgICAgICAgaSA9IGNvbG9yaXplUG9sYXJBcmVhRGF0YXNldChkYXRhc2V0LCBpKTtcbiAgICAgICAgfSBlbHNlIGlmIChjb250cm9sbGVyKSB7XG4gICAgICAgICAgICBpID0gY29sb3JpemVEZWZhdWx0RGF0YXNldChkYXRhc2V0LCBpKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBjb250YWluc0NvbG9yc0RlZmluaXRpb25zKGRlc2NyaXB0b3JzKSB7XG4gICAgbGV0IGs7XG4gICAgZm9yKGsgaW4gZGVzY3JpcHRvcnMpe1xuICAgICAgICBpZiAoZGVzY3JpcHRvcnNba10uYm9yZGVyQ29sb3IgfHwgZGVzY3JpcHRvcnNba10uYmFja2dyb3VuZENvbG9yKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBjb250YWluc0NvbG9yc0RlZmluaXRpb24oZGVzY3JpcHRvcikge1xuICAgIHJldHVybiBkZXNjcmlwdG9yICYmIChkZXNjcmlwdG9yLmJvcmRlckNvbG9yIHx8IGRlc2NyaXB0b3IuYmFja2dyb3VuZENvbG9yKTtcbn1cbnZhciBwbHVnaW5fY29sb3JzID0ge1xuICAgIGlkOiAnY29sb3JzJyxcbiAgICBkZWZhdWx0czoge1xuICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICBmb3JjZU92ZXJyaWRlOiBmYWxzZVxuICAgIH0sXG4gICAgYmVmb3JlTGF5b3V0IChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFvcHRpb25zLmVuYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IGRhdGE6IHsgZGF0YXNldHMgIH0gLCBvcHRpb25zOiBjaGFydE9wdGlvbnMgIH0gPSBjaGFydC5jb25maWc7XG4gICAgICAgIGNvbnN0IHsgZWxlbWVudHMgIH0gPSBjaGFydE9wdGlvbnM7XG4gICAgICAgIGlmICghb3B0aW9ucy5mb3JjZU92ZXJyaWRlICYmIChjb250YWluc0NvbG9yc0RlZmluaXRpb25zKGRhdGFzZXRzKSB8fCBjb250YWluc0NvbG9yc0RlZmluaXRpb24oY2hhcnRPcHRpb25zKSB8fCBlbGVtZW50cyAmJiBjb250YWluc0NvbG9yc0RlZmluaXRpb25zKGVsZW1lbnRzKSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb2xvcml6ZXIgPSBnZXRDb2xvcml6ZXIoY2hhcnQpO1xuICAgICAgICBkYXRhc2V0cy5mb3JFYWNoKGNvbG9yaXplcik7XG4gICAgfVxufTtcblxuZnVuY3Rpb24gbHR0YkRlY2ltYXRpb24oZGF0YSwgc3RhcnQsIGNvdW50LCBhdmFpbGFibGVXaWR0aCwgb3B0aW9ucykge1xuIGNvbnN0IHNhbXBsZXMgPSBvcHRpb25zLnNhbXBsZXMgfHwgYXZhaWxhYmxlV2lkdGg7XG4gICAgaWYgKHNhbXBsZXMgPj0gY291bnQpIHtcbiAgICAgICAgcmV0dXJuIGRhdGEuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgY291bnQpO1xuICAgIH1cbiAgICBjb25zdCBkZWNpbWF0ZWQgPSBbXTtcbiAgICBjb25zdCBidWNrZXRXaWR0aCA9IChjb3VudCAtIDIpIC8gKHNhbXBsZXMgLSAyKTtcbiAgICBsZXQgc2FtcGxlZEluZGV4ID0gMDtcbiAgICBjb25zdCBlbmRJbmRleCA9IHN0YXJ0ICsgY291bnQgLSAxO1xuICAgIGxldCBhID0gc3RhcnQ7XG4gICAgbGV0IGksIG1heEFyZWFQb2ludCwgbWF4QXJlYSwgYXJlYSwgbmV4dEE7XG4gICAgZGVjaW1hdGVkW3NhbXBsZWRJbmRleCsrXSA9IGRhdGFbYV07XG4gICAgZm9yKGkgPSAwOyBpIDwgc2FtcGxlcyAtIDI7IGkrKyl7XG4gICAgICAgIGxldCBhdmdYID0gMDtcbiAgICAgICAgbGV0IGF2Z1kgPSAwO1xuICAgICAgICBsZXQgajtcbiAgICAgICAgY29uc3QgYXZnUmFuZ2VTdGFydCA9IE1hdGguZmxvb3IoKGkgKyAxKSAqIGJ1Y2tldFdpZHRoKSArIDEgKyBzdGFydDtcbiAgICAgICAgY29uc3QgYXZnUmFuZ2VFbmQgPSBNYXRoLm1pbihNYXRoLmZsb29yKChpICsgMikgKiBidWNrZXRXaWR0aCkgKyAxLCBjb3VudCkgKyBzdGFydDtcbiAgICAgICAgY29uc3QgYXZnUmFuZ2VMZW5ndGggPSBhdmdSYW5nZUVuZCAtIGF2Z1JhbmdlU3RhcnQ7XG4gICAgICAgIGZvcihqID0gYXZnUmFuZ2VTdGFydDsgaiA8IGF2Z1JhbmdlRW5kOyBqKyspe1xuICAgICAgICAgICAgYXZnWCArPSBkYXRhW2pdLng7XG4gICAgICAgICAgICBhdmdZICs9IGRhdGFbal0ueTtcbiAgICAgICAgfVxuICAgICAgICBhdmdYIC89IGF2Z1JhbmdlTGVuZ3RoO1xuICAgICAgICBhdmdZIC89IGF2Z1JhbmdlTGVuZ3RoO1xuICAgICAgICBjb25zdCByYW5nZU9mZnMgPSBNYXRoLmZsb29yKGkgKiBidWNrZXRXaWR0aCkgKyAxICsgc3RhcnQ7XG4gICAgICAgIGNvbnN0IHJhbmdlVG8gPSBNYXRoLm1pbihNYXRoLmZsb29yKChpICsgMSkgKiBidWNrZXRXaWR0aCkgKyAxLCBjb3VudCkgKyBzdGFydDtcbiAgICAgICAgY29uc3QgeyB4OiBwb2ludEF4ICwgeTogcG9pbnRBeSAgfSA9IGRhdGFbYV07XG4gICAgICAgIG1heEFyZWEgPSBhcmVhID0gLTE7XG4gICAgICAgIGZvcihqID0gcmFuZ2VPZmZzOyBqIDwgcmFuZ2VUbzsgaisrKXtcbiAgICAgICAgICAgIGFyZWEgPSAwLjUgKiBNYXRoLmFicygocG9pbnRBeCAtIGF2Z1gpICogKGRhdGFbal0ueSAtIHBvaW50QXkpIC0gKHBvaW50QXggLSBkYXRhW2pdLngpICogKGF2Z1kgLSBwb2ludEF5KSk7XG4gICAgICAgICAgICBpZiAoYXJlYSA+IG1heEFyZWEpIHtcbiAgICAgICAgICAgICAgICBtYXhBcmVhID0gYXJlYTtcbiAgICAgICAgICAgICAgICBtYXhBcmVhUG9pbnQgPSBkYXRhW2pdO1xuICAgICAgICAgICAgICAgIG5leHRBID0gajtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBkZWNpbWF0ZWRbc2FtcGxlZEluZGV4KytdID0gbWF4QXJlYVBvaW50O1xuICAgICAgICBhID0gbmV4dEE7XG4gICAgfVxuICAgIGRlY2ltYXRlZFtzYW1wbGVkSW5kZXgrK10gPSBkYXRhW2VuZEluZGV4XTtcbiAgICByZXR1cm4gZGVjaW1hdGVkO1xufVxuZnVuY3Rpb24gbWluTWF4RGVjaW1hdGlvbihkYXRhLCBzdGFydCwgY291bnQsIGF2YWlsYWJsZVdpZHRoKSB7XG4gICAgbGV0IGF2Z1ggPSAwO1xuICAgIGxldCBjb3VudFggPSAwO1xuICAgIGxldCBpLCBwb2ludCwgeCwgeSwgcHJldlgsIG1pbkluZGV4LCBtYXhJbmRleCwgc3RhcnRJbmRleCwgbWluWSwgbWF4WTtcbiAgICBjb25zdCBkZWNpbWF0ZWQgPSBbXTtcbiAgICBjb25zdCBlbmRJbmRleCA9IHN0YXJ0ICsgY291bnQgLSAxO1xuICAgIGNvbnN0IHhNaW4gPSBkYXRhW3N0YXJ0XS54O1xuICAgIGNvbnN0IHhNYXggPSBkYXRhW2VuZEluZGV4XS54O1xuICAgIGNvbnN0IGR4ID0geE1heCAtIHhNaW47XG4gICAgZm9yKGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7ICsraSl7XG4gICAgICAgIHBvaW50ID0gZGF0YVtpXTtcbiAgICAgICAgeCA9IChwb2ludC54IC0geE1pbikgLyBkeCAqIGF2YWlsYWJsZVdpZHRoO1xuICAgICAgICB5ID0gcG9pbnQueTtcbiAgICAgICAgY29uc3QgdHJ1bmNYID0geCB8IDA7XG4gICAgICAgIGlmICh0cnVuY1ggPT09IHByZXZYKSB7XG4gICAgICAgICAgICBpZiAoeSA8IG1pblkpIHtcbiAgICAgICAgICAgICAgICBtaW5ZID0geTtcbiAgICAgICAgICAgICAgICBtaW5JbmRleCA9IGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHkgPiBtYXhZKSB7XG4gICAgICAgICAgICAgICAgbWF4WSA9IHk7XG4gICAgICAgICAgICAgICAgbWF4SW5kZXggPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXZnWCA9IChjb3VudFggKiBhdmdYICsgcG9pbnQueCkgLyArK2NvdW50WDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGxhc3RJbmRleCA9IGkgLSAxO1xuICAgICAgICAgICAgaWYgKCFpc051bGxPclVuZGVmKG1pbkluZGV4KSAmJiAhaXNOdWxsT3JVbmRlZihtYXhJbmRleCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbnRlcm1lZGlhdGVJbmRleDEgPSBNYXRoLm1pbihtaW5JbmRleCwgbWF4SW5kZXgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGludGVybWVkaWF0ZUluZGV4MiA9IE1hdGgubWF4KG1pbkluZGV4LCBtYXhJbmRleCk7XG4gICAgICAgICAgICAgICAgaWYgKGludGVybWVkaWF0ZUluZGV4MSAhPT0gc3RhcnRJbmRleCAmJiBpbnRlcm1lZGlhdGVJbmRleDEgIT09IGxhc3RJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBkZWNpbWF0ZWQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5kYXRhW2ludGVybWVkaWF0ZUluZGV4MV0sXG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBhdmdYXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaW50ZXJtZWRpYXRlSW5kZXgyICE9PSBzdGFydEluZGV4ICYmIGludGVybWVkaWF0ZUluZGV4MiAhPT0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGRlY2ltYXRlZC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmRhdGFbaW50ZXJtZWRpYXRlSW5kZXgyXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IGF2Z1hcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGkgPiAwICYmIGxhc3RJbmRleCAhPT0gc3RhcnRJbmRleCkge1xuICAgICAgICAgICAgICAgIGRlY2ltYXRlZC5wdXNoKGRhdGFbbGFzdEluZGV4XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWNpbWF0ZWQucHVzaChwb2ludCk7XG4gICAgICAgICAgICBwcmV2WCA9IHRydW5jWDtcbiAgICAgICAgICAgIGNvdW50WCA9IDA7XG4gICAgICAgICAgICBtaW5ZID0gbWF4WSA9IHk7XG4gICAgICAgICAgICBtaW5JbmRleCA9IG1heEluZGV4ID0gc3RhcnRJbmRleCA9IGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRlY2ltYXRlZDtcbn1cbmZ1bmN0aW9uIGNsZWFuRGVjaW1hdGVkRGF0YXNldChkYXRhc2V0KSB7XG4gICAgaWYgKGRhdGFzZXQuX2RlY2ltYXRlZCkge1xuICAgICAgICBjb25zdCBkYXRhID0gZGF0YXNldC5fZGF0YTtcbiAgICAgICAgZGVsZXRlIGRhdGFzZXQuX2RlY2ltYXRlZDtcbiAgICAgICAgZGVsZXRlIGRhdGFzZXQuX2RhdGE7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkYXRhc2V0LCAnZGF0YScsIHtcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBkYXRhXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNsZWFuRGVjaW1hdGVkRGF0YShjaGFydCkge1xuICAgIGNoYXJ0LmRhdGEuZGF0YXNldHMuZm9yRWFjaCgoZGF0YXNldCk9PntcbiAgICAgICAgY2xlYW5EZWNpbWF0ZWREYXRhc2V0KGRhdGFzZXQpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZ2V0U3RhcnRBbmRDb3VudE9mVmlzaWJsZVBvaW50c1NpbXBsaWZpZWQobWV0YSwgcG9pbnRzKSB7XG4gICAgY29uc3QgcG9pbnRDb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gICAgbGV0IHN0YXJ0ID0gMDtcbiAgICBsZXQgY291bnQ7XG4gICAgY29uc3QgeyBpU2NhbGUgIH0gPSBtZXRhO1xuICAgIGNvbnN0IHsgbWluICwgbWF4ICwgbWluRGVmaW5lZCAsIG1heERlZmluZWQgIH0gPSBpU2NhbGUuZ2V0VXNlckJvdW5kcygpO1xuICAgIGlmIChtaW5EZWZpbmVkKSB7XG4gICAgICAgIHN0YXJ0ID0gX2xpbWl0VmFsdWUoX2xvb2t1cEJ5S2V5KHBvaW50cywgaVNjYWxlLmF4aXMsIG1pbikubG8sIDAsIHBvaW50Q291bnQgLSAxKTtcbiAgICB9XG4gICAgaWYgKG1heERlZmluZWQpIHtcbiAgICAgICAgY291bnQgPSBfbGltaXRWYWx1ZShfbG9va3VwQnlLZXkocG9pbnRzLCBpU2NhbGUuYXhpcywgbWF4KS5oaSArIDEsIHN0YXJ0LCBwb2ludENvdW50KSAtIHN0YXJ0O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvdW50ID0gcG9pbnRDb3VudCAtIHN0YXJ0O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydCxcbiAgICAgICAgY291bnRcbiAgICB9O1xufVxudmFyIHBsdWdpbl9kZWNpbWF0aW9uID0ge1xuICAgIGlkOiAnZGVjaW1hdGlvbicsXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgYWxnb3JpdGhtOiAnbWluLW1heCcsXG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgfSxcbiAgICBiZWZvcmVFbGVtZW50c1VwZGF0ZTogKGNoYXJ0LCBhcmdzLCBvcHRpb25zKT0+e1xuICAgICAgICBpZiAoIW9wdGlvbnMuZW5hYmxlZCkge1xuICAgICAgICAgICAgY2xlYW5EZWNpbWF0ZWREYXRhKGNoYXJ0KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhdmFpbGFibGVXaWR0aCA9IGNoYXJ0LndpZHRoO1xuICAgICAgICBjaGFydC5kYXRhLmRhdGFzZXRzLmZvckVhY2goKGRhdGFzZXQsIGRhdGFzZXRJbmRleCk9PntcbiAgICAgICAgICAgIGNvbnN0IHsgX2RhdGEgLCBpbmRleEF4aXMgIH0gPSBkYXRhc2V0O1xuICAgICAgICAgICAgY29uc3QgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gX2RhdGEgfHwgZGF0YXNldC5kYXRhO1xuICAgICAgICAgICAgaWYgKHJlc29sdmUoW1xuICAgICAgICAgICAgICAgIGluZGV4QXhpcyxcbiAgICAgICAgICAgICAgICBjaGFydC5vcHRpb25zLmluZGV4QXhpc1xuICAgICAgICAgICAgXSkgPT09ICd5Jykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghbWV0YS5jb250cm9sbGVyLnN1cHBvcnRzRGVjaW1hdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHhBeGlzID0gY2hhcnQuc2NhbGVzW21ldGEueEF4aXNJRF07XG4gICAgICAgICAgICBpZiAoeEF4aXMudHlwZSAhPT0gJ2xpbmVhcicgJiYgeEF4aXMudHlwZSAhPT0gJ3RpbWUnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNoYXJ0Lm9wdGlvbnMucGFyc2luZykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCB7IHN0YXJ0ICwgY291bnQgIH0gPSBnZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzU2ltcGxpZmllZChtZXRhLCBkYXRhKTtcbiAgICAgICAgICAgIGNvbnN0IHRocmVzaG9sZCA9IG9wdGlvbnMudGhyZXNob2xkIHx8IDQgKiBhdmFpbGFibGVXaWR0aDtcbiAgICAgICAgICAgIGlmIChjb3VudCA8PSB0aHJlc2hvbGQpIHtcbiAgICAgICAgICAgICAgICBjbGVhbkRlY2ltYXRlZERhdGFzZXQoZGF0YXNldCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzTnVsbE9yVW5kZWYoX2RhdGEpKSB7XG4gICAgICAgICAgICAgICAgZGF0YXNldC5fZGF0YSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGRhdGFzZXQuZGF0YTtcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZGF0YXNldCwgJ2RhdGEnLCB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kZWNpbWF0ZWQ7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGF0YSA9IGQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBkZWNpbWF0ZWQ7XG4gICAgICAgICAgICBzd2l0Y2gob3B0aW9ucy5hbGdvcml0aG0pe1xuICAgICAgICAgICAgICAgIGNhc2UgJ2x0dGInOlxuICAgICAgICAgICAgICAgICAgICBkZWNpbWF0ZWQgPSBsdHRiRGVjaW1hdGlvbihkYXRhLCBzdGFydCwgY291bnQsIGF2YWlsYWJsZVdpZHRoLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbWluLW1heCc6XG4gICAgICAgICAgICAgICAgICAgIGRlY2ltYXRlZCA9IG1pbk1heERlY2ltYXRpb24oZGF0YSwgc3RhcnQsIGNvdW50LCBhdmFpbGFibGVXaWR0aCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgZGVjaW1hdGlvbiBhbGdvcml0aG0gJyR7b3B0aW9ucy5hbGdvcml0aG19J2ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGF0YXNldC5fZGVjaW1hdGVkID0gZGVjaW1hdGVkO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIGRlc3Ryb3kgKGNoYXJ0KSB7XG4gICAgICAgIGNsZWFuRGVjaW1hdGVkRGF0YShjaGFydCk7XG4gICAgfVxufTtcblxuZnVuY3Rpb24gX3NlZ21lbnRzKGxpbmUsIHRhcmdldCwgcHJvcGVydHkpIHtcbiAgICBjb25zdCBzZWdtZW50cyA9IGxpbmUuc2VnbWVudHM7XG4gICAgY29uc3QgcG9pbnRzID0gbGluZS5wb2ludHM7XG4gICAgY29uc3QgdHBvaW50cyA9IHRhcmdldC5wb2ludHM7XG4gICAgY29uc3QgcGFydHMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHNlZ21lbnQgb2Ygc2VnbWVudHMpe1xuICAgICAgICBsZXQgeyBzdGFydCAsIGVuZCAgfSA9IHNlZ21lbnQ7XG4gICAgICAgIGVuZCA9IF9maW5kU2VnbWVudEVuZChzdGFydCwgZW5kLCBwb2ludHMpO1xuICAgICAgICBjb25zdCBib3VuZHMgPSBfZ2V0Qm91bmRzKHByb3BlcnR5LCBwb2ludHNbc3RhcnRdLCBwb2ludHNbZW5kXSwgc2VnbWVudC5sb29wKTtcbiAgICAgICAgaWYgKCF0YXJnZXQuc2VnbWVudHMpIHtcbiAgICAgICAgICAgIHBhcnRzLnB1c2goe1xuICAgICAgICAgICAgICAgIHNvdXJjZTogc2VnbWVudCxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGJvdW5kcyxcbiAgICAgICAgICAgICAgICBzdGFydDogcG9pbnRzW3N0YXJ0XSxcbiAgICAgICAgICAgICAgICBlbmQ6IHBvaW50c1tlbmRdXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRhcmdldFNlZ21lbnRzID0gX2JvdW5kU2VnbWVudHModGFyZ2V0LCBib3VuZHMpO1xuICAgICAgICBmb3IgKGNvbnN0IHRndCBvZiB0YXJnZXRTZWdtZW50cyl7XG4gICAgICAgICAgICBjb25zdCBzdWJCb3VuZHMgPSBfZ2V0Qm91bmRzKHByb3BlcnR5LCB0cG9pbnRzW3RndC5zdGFydF0sIHRwb2ludHNbdGd0LmVuZF0sIHRndC5sb29wKTtcbiAgICAgICAgICAgIGNvbnN0IGZpbGxTb3VyY2VzID0gX2JvdW5kU2VnbWVudChzZWdtZW50LCBwb2ludHMsIHN1YkJvdW5kcyk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGZpbGxTb3VyY2Ugb2YgZmlsbFNvdXJjZXMpe1xuICAgICAgICAgICAgICAgIHBhcnRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IGZpbGxTb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogdGd0LFxuICAgICAgICAgICAgICAgICAgICBzdGFydDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgW3Byb3BlcnR5XTogX2dldEVkZ2UoYm91bmRzLCBzdWJCb3VuZHMsICdzdGFydCcsIE1hdGgubWF4KVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFtwcm9wZXJ0eV06IF9nZXRFZGdlKGJvdW5kcywgc3ViQm91bmRzLCAnZW5kJywgTWF0aC5taW4pXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGFydHM7XG59XG5mdW5jdGlvbiBfZ2V0Qm91bmRzKHByb3BlcnR5LCBmaXJzdCwgbGFzdCwgbG9vcCkge1xuICAgIGlmIChsb29wKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHN0YXJ0ID0gZmlyc3RbcHJvcGVydHldO1xuICAgIGxldCBlbmQgPSBsYXN0W3Byb3BlcnR5XTtcbiAgICBpZiAocHJvcGVydHkgPT09ICdhbmdsZScpIHtcbiAgICAgICAgc3RhcnQgPSBfbm9ybWFsaXplQW5nbGUoc3RhcnQpO1xuICAgICAgICBlbmQgPSBfbm9ybWFsaXplQW5nbGUoZW5kKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcHJvcGVydHksXG4gICAgICAgIHN0YXJ0LFxuICAgICAgICBlbmRcbiAgICB9O1xufVxuZnVuY3Rpb24gX3BvaW50c0Zyb21TZWdtZW50cyhib3VuZGFyeSwgbGluZSkge1xuICAgIGNvbnN0IHsgeCA9bnVsbCAsIHkgPW51bGwgIH0gPSBib3VuZGFyeSB8fCB7fTtcbiAgICBjb25zdCBsaW5lUG9pbnRzID0gbGluZS5wb2ludHM7XG4gICAgY29uc3QgcG9pbnRzID0gW107XG4gICAgbGluZS5zZWdtZW50cy5mb3JFYWNoKCh7IHN0YXJ0ICwgZW5kICB9KT0+e1xuICAgICAgICBlbmQgPSBfZmluZFNlZ21lbnRFbmQoc3RhcnQsIGVuZCwgbGluZVBvaW50cyk7XG4gICAgICAgIGNvbnN0IGZpcnN0ID0gbGluZVBvaW50c1tzdGFydF07XG4gICAgICAgIGNvbnN0IGxhc3QgPSBsaW5lUG9pbnRzW2VuZF07XG4gICAgICAgIGlmICh5ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBwb2ludHMucHVzaCh7XG4gICAgICAgICAgICAgICAgeDogZmlyc3QueCxcbiAgICAgICAgICAgICAgICB5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHBvaW50cy5wdXNoKHtcbiAgICAgICAgICAgICAgICB4OiBsYXN0LngsXG4gICAgICAgICAgICAgICAgeVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoeCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcG9pbnRzLnB1c2goe1xuICAgICAgICAgICAgICAgIHgsXG4gICAgICAgICAgICAgICAgeTogZmlyc3QueVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwb2ludHMucHVzaCh7XG4gICAgICAgICAgICAgICAgeCxcbiAgICAgICAgICAgICAgICB5OiBsYXN0LnlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHBvaW50cztcbn1cbmZ1bmN0aW9uIF9maW5kU2VnbWVudEVuZChzdGFydCwgZW5kLCBwb2ludHMpIHtcbiAgICBmb3IoOyBlbmQgPiBzdGFydDsgZW5kLS0pe1xuICAgICAgICBjb25zdCBwb2ludCA9IHBvaW50c1tlbmRdO1xuICAgICAgICBpZiAoIWlzTmFOKHBvaW50LngpICYmICFpc05hTihwb2ludC55KSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVuZDtcbn1cbmZ1bmN0aW9uIF9nZXRFZGdlKGEsIGIsIHByb3AsIGZuKSB7XG4gICAgaWYgKGEgJiYgYikge1xuICAgICAgICByZXR1cm4gZm4oYVtwcm9wXSwgYltwcm9wXSk7XG4gICAgfVxuICAgIHJldHVybiBhID8gYVtwcm9wXSA6IGIgPyBiW3Byb3BdIDogMDtcbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUJvdW5kYXJ5TGluZShib3VuZGFyeSwgbGluZSkge1xuICAgIGxldCBwb2ludHMgPSBbXTtcbiAgICBsZXQgX2xvb3AgPSBmYWxzZTtcbiAgICBpZiAoaXNBcnJheShib3VuZGFyeSkpIHtcbiAgICAgICAgX2xvb3AgPSB0cnVlO1xuICAgICAgICBwb2ludHMgPSBib3VuZGFyeTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBwb2ludHMgPSBfcG9pbnRzRnJvbVNlZ21lbnRzKGJvdW5kYXJ5LCBsaW5lKTtcbiAgICB9XG4gICAgcmV0dXJuIHBvaW50cy5sZW5ndGggPyBuZXcgTGluZUVsZW1lbnQoe1xuICAgICAgICBwb2ludHMsXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgIHRlbnNpb246IDBcbiAgICAgICAgfSxcbiAgICAgICAgX2xvb3AsXG4gICAgICAgIF9mdWxsTG9vcDogX2xvb3BcbiAgICB9KSA6IG51bGw7XG59XG5mdW5jdGlvbiBfc2hvdWxkQXBwbHlGaWxsKHNvdXJjZSkge1xuICAgIHJldHVybiBzb3VyY2UgJiYgc291cmNlLmZpbGwgIT09IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBfcmVzb2x2ZVRhcmdldChzb3VyY2VzLCBpbmRleCwgcHJvcGFnYXRlKSB7XG4gICAgY29uc3Qgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgbGV0IGZpbGwgPSBzb3VyY2UuZmlsbDtcbiAgICBjb25zdCB2aXNpdGVkID0gW1xuICAgICAgICBpbmRleFxuICAgIF07XG4gICAgbGV0IHRhcmdldDtcbiAgICBpZiAoIXByb3BhZ2F0ZSkge1xuICAgICAgICByZXR1cm4gZmlsbDtcbiAgICB9XG4gICAgd2hpbGUoZmlsbCAhPT0gZmFsc2UgJiYgdmlzaXRlZC5pbmRleE9mKGZpbGwpID09PSAtMSl7XG4gICAgICAgIGlmICghaXNOdW1iZXJGaW5pdGUoZmlsbCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmaWxsO1xuICAgICAgICB9XG4gICAgICAgIHRhcmdldCA9IHNvdXJjZXNbZmlsbF07XG4gICAgICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhcmdldC52aXNpYmxlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmlsbDtcbiAgICAgICAgfVxuICAgICAgICB2aXNpdGVkLnB1c2goZmlsbCk7XG4gICAgICAgIGZpbGwgPSB0YXJnZXQuZmlsbDtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuIGZ1bmN0aW9uIF9kZWNvZGVGaWxsKGxpbmUsIGluZGV4LCBjb3VudCkge1xuICAgICBjb25zdCBmaWxsID0gcGFyc2VGaWxsT3B0aW9uKGxpbmUpO1xuICAgIGlmIChpc09iamVjdChmaWxsKSkge1xuICAgICAgICByZXR1cm4gaXNOYU4oZmlsbC52YWx1ZSkgPyBmYWxzZSA6IGZpbGw7XG4gICAgfVxuICAgIGxldCB0YXJnZXQgPSBwYXJzZUZsb2F0KGZpbGwpO1xuICAgIGlmIChpc051bWJlckZpbml0ZSh0YXJnZXQpICYmIE1hdGguZmxvb3IodGFyZ2V0KSA9PT0gdGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiBkZWNvZGVUYXJnZXRJbmRleChmaWxsWzBdLCBpbmRleCwgdGFyZ2V0LCBjb3VudCk7XG4gICAgfVxuICAgIHJldHVybiBbXG4gICAgICAgICdvcmlnaW4nLFxuICAgICAgICAnc3RhcnQnLFxuICAgICAgICAnZW5kJyxcbiAgICAgICAgJ3N0YWNrJyxcbiAgICAgICAgJ3NoYXBlJ1xuICAgIF0uaW5kZXhPZihmaWxsKSA+PSAwICYmIGZpbGw7XG59XG5mdW5jdGlvbiBkZWNvZGVUYXJnZXRJbmRleChmaXJzdENoLCBpbmRleCwgdGFyZ2V0LCBjb3VudCkge1xuICAgIGlmIChmaXJzdENoID09PSAnLScgfHwgZmlyc3RDaCA9PT0gJysnKSB7XG4gICAgICAgIHRhcmdldCA9IGluZGV4ICsgdGFyZ2V0O1xuICAgIH1cbiAgICBpZiAodGFyZ2V0ID09PSBpbmRleCB8fCB0YXJnZXQgPCAwIHx8IHRhcmdldCA+PSBjb3VudCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59XG4gZnVuY3Rpb24gX2dldFRhcmdldFBpeGVsKGZpbGwsIHNjYWxlKSB7XG4gICAgbGV0IHBpeGVsID0gbnVsbDtcbiAgICBpZiAoZmlsbCA9PT0gJ3N0YXJ0Jykge1xuICAgICAgICBwaXhlbCA9IHNjYWxlLmJvdHRvbTtcbiAgICB9IGVsc2UgaWYgKGZpbGwgPT09ICdlbmQnKSB7XG4gICAgICAgIHBpeGVsID0gc2NhbGUudG9wO1xuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoZmlsbCkpIHtcbiAgICAgICAgcGl4ZWwgPSBzY2FsZS5nZXRQaXhlbEZvclZhbHVlKGZpbGwudmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoc2NhbGUuZ2V0QmFzZVBpeGVsKSB7XG4gICAgICAgIHBpeGVsID0gc2NhbGUuZ2V0QmFzZVBpeGVsKCk7XG4gICAgfVxuICAgIHJldHVybiBwaXhlbDtcbn1cbiBmdW5jdGlvbiBfZ2V0VGFyZ2V0VmFsdWUoZmlsbCwgc2NhbGUsIHN0YXJ0VmFsdWUpIHtcbiAgICBsZXQgdmFsdWU7XG4gICAgaWYgKGZpbGwgPT09ICdzdGFydCcpIHtcbiAgICAgICAgdmFsdWUgPSBzdGFydFZhbHVlO1xuICAgIH0gZWxzZSBpZiAoZmlsbCA9PT0gJ2VuZCcpIHtcbiAgICAgICAgdmFsdWUgPSBzY2FsZS5vcHRpb25zLnJldmVyc2UgPyBzY2FsZS5taW4gOiBzY2FsZS5tYXg7XG4gICAgfSBlbHNlIGlmIChpc09iamVjdChmaWxsKSkge1xuICAgICAgICB2YWx1ZSA9IGZpbGwudmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSBzY2FsZS5nZXRCYXNlVmFsdWUoKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuIGZ1bmN0aW9uIHBhcnNlRmlsbE9wdGlvbihsaW5lKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IGxpbmUub3B0aW9ucztcbiAgICBjb25zdCBmaWxsT3B0aW9uID0gb3B0aW9ucy5maWxsO1xuICAgIGxldCBmaWxsID0gdmFsdWVPckRlZmF1bHQoZmlsbE9wdGlvbiAmJiBmaWxsT3B0aW9uLnRhcmdldCwgZmlsbE9wdGlvbik7XG4gICAgaWYgKGZpbGwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBmaWxsID0gISFvcHRpb25zLmJhY2tncm91bmRDb2xvcjtcbiAgICB9XG4gICAgaWYgKGZpbGwgPT09IGZhbHNlIHx8IGZpbGwgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoZmlsbCA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gJ29yaWdpbic7XG4gICAgfVxuICAgIHJldHVybiBmaWxsO1xufVxuXG5mdW5jdGlvbiBfYnVpbGRTdGFja0xpbmUoc291cmNlKSB7XG4gICAgY29uc3QgeyBzY2FsZSAsIGluZGV4ICwgbGluZSAgfSA9IHNvdXJjZTtcbiAgICBjb25zdCBwb2ludHMgPSBbXTtcbiAgICBjb25zdCBzZWdtZW50cyA9IGxpbmUuc2VnbWVudHM7XG4gICAgY29uc3Qgc291cmNlUG9pbnRzID0gbGluZS5wb2ludHM7XG4gICAgY29uc3QgbGluZXNCZWxvdyA9IGdldExpbmVzQmVsb3coc2NhbGUsIGluZGV4KTtcbiAgICBsaW5lc0JlbG93LnB1c2goX2NyZWF0ZUJvdW5kYXJ5TGluZSh7XG4gICAgICAgIHg6IG51bGwsXG4gICAgICAgIHk6IHNjYWxlLmJvdHRvbVxuICAgIH0sIGxpbmUpKTtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspe1xuICAgICAgICBjb25zdCBzZWdtZW50ID0gc2VnbWVudHNbaV07XG4gICAgICAgIGZvcihsZXQgaiA9IHNlZ21lbnQuc3RhcnQ7IGogPD0gc2VnbWVudC5lbmQ7IGorKyl7XG4gICAgICAgICAgICBhZGRQb2ludHNCZWxvdyhwb2ludHMsIHNvdXJjZVBvaW50c1tqXSwgbGluZXNCZWxvdyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBMaW5lRWxlbWVudCh7XG4gICAgICAgIHBvaW50cyxcbiAgICAgICAgb3B0aW9uczoge31cbiAgICB9KTtcbn1cbiBmdW5jdGlvbiBnZXRMaW5lc0JlbG93KHNjYWxlLCBpbmRleCkge1xuICAgIGNvbnN0IGJlbG93ID0gW107XG4gICAgY29uc3QgbWV0YXMgPSBzY2FsZS5nZXRNYXRjaGluZ1Zpc2libGVNZXRhcygnbGluZScpO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBtZXRhcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGNvbnN0IG1ldGEgPSBtZXRhc1tpXTtcbiAgICAgICAgaWYgKG1ldGEuaW5kZXggPT09IGluZGV4KSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW1ldGEuaGlkZGVuKSB7XG4gICAgICAgICAgICBiZWxvdy51bnNoaWZ0KG1ldGEuZGF0YXNldCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJlbG93O1xufVxuIGZ1bmN0aW9uIGFkZFBvaW50c0JlbG93KHBvaW50cywgc291cmNlUG9pbnQsIGxpbmVzQmVsb3cpIHtcbiAgICBjb25zdCBwb3N0cG9uZWQgPSBbXTtcbiAgICBmb3IobGV0IGogPSAwOyBqIDwgbGluZXNCZWxvdy5sZW5ndGg7IGorKyl7XG4gICAgICAgIGNvbnN0IGxpbmUgPSBsaW5lc0JlbG93W2pdO1xuICAgICAgICBjb25zdCB7IGZpcnN0ICwgbGFzdCAsIHBvaW50ICB9ID0gZmluZFBvaW50KGxpbmUsIHNvdXJjZVBvaW50LCAneCcpO1xuICAgICAgICBpZiAoIXBvaW50IHx8IGZpcnN0ICYmIGxhc3QpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmaXJzdCkge1xuICAgICAgICAgICAgcG9zdHBvbmVkLnVuc2hpZnQocG9pbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcG9pbnRzLnB1c2gocG9pbnQpO1xuICAgICAgICAgICAgaWYgKCFsYXN0KSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcG9pbnRzLnB1c2goLi4ucG9zdHBvbmVkKTtcbn1cbiBmdW5jdGlvbiBmaW5kUG9pbnQobGluZSwgc291cmNlUG9pbnQsIHByb3BlcnR5KSB7XG4gICAgY29uc3QgcG9pbnQgPSBsaW5lLmludGVycG9sYXRlKHNvdXJjZVBvaW50LCBwcm9wZXJ0eSk7XG4gICAgaWYgKCFwb2ludCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGNvbnN0IHBvaW50VmFsdWUgPSBwb2ludFtwcm9wZXJ0eV07XG4gICAgY29uc3Qgc2VnbWVudHMgPSBsaW5lLnNlZ21lbnRzO1xuICAgIGNvbnN0IGxpbmVQb2ludHMgPSBsaW5lLnBvaW50cztcbiAgICBsZXQgZmlyc3QgPSBmYWxzZTtcbiAgICBsZXQgbGFzdCA9IGZhbHNlO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGNvbnN0IHNlZ21lbnQgPSBzZWdtZW50c1tpXTtcbiAgICAgICAgY29uc3QgZmlyc3RWYWx1ZSA9IGxpbmVQb2ludHNbc2VnbWVudC5zdGFydF1bcHJvcGVydHldO1xuICAgICAgICBjb25zdCBsYXN0VmFsdWUgPSBsaW5lUG9pbnRzW3NlZ21lbnQuZW5kXVtwcm9wZXJ0eV07XG4gICAgICAgIGlmIChfaXNCZXR3ZWVuKHBvaW50VmFsdWUsIGZpcnN0VmFsdWUsIGxhc3RWYWx1ZSkpIHtcbiAgICAgICAgICAgIGZpcnN0ID0gcG9pbnRWYWx1ZSA9PT0gZmlyc3RWYWx1ZTtcbiAgICAgICAgICAgIGxhc3QgPSBwb2ludFZhbHVlID09PSBsYXN0VmFsdWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBmaXJzdCxcbiAgICAgICAgbGFzdCxcbiAgICAgICAgcG9pbnRcbiAgICB9O1xufVxuXG5jbGFzcyBzaW1wbGVBcmMge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpe1xuICAgICAgICB0aGlzLnggPSBvcHRzLng7XG4gICAgICAgIHRoaXMueSA9IG9wdHMueTtcbiAgICAgICAgdGhpcy5yYWRpdXMgPSBvcHRzLnJhZGl1cztcbiAgICB9XG4gICAgcGF0aFNlZ21lbnQoY3R4LCBib3VuZHMsIG9wdHMpIHtcbiAgICAgICAgY29uc3QgeyB4ICwgeSAsIHJhZGl1cyAgfSA9IHRoaXM7XG4gICAgICAgIGJvdW5kcyA9IGJvdW5kcyB8fCB7XG4gICAgICAgICAgICBzdGFydDogMCxcbiAgICAgICAgICAgIGVuZDogVEFVXG4gICAgICAgIH07XG4gICAgICAgIGN0eC5hcmMoeCwgeSwgcmFkaXVzLCBib3VuZHMuZW5kLCBib3VuZHMuc3RhcnQsIHRydWUpO1xuICAgICAgICByZXR1cm4gIW9wdHMuYm91bmRzO1xuICAgIH1cbiAgICBpbnRlcnBvbGF0ZShwb2ludCkge1xuICAgICAgICBjb25zdCB7IHggLCB5ICwgcmFkaXVzICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgYW5nbGUgPSBwb2ludC5hbmdsZTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IHggKyBNYXRoLmNvcyhhbmdsZSkgKiByYWRpdXMsXG4gICAgICAgICAgICB5OiB5ICsgTWF0aC5zaW4oYW5nbGUpICogcmFkaXVzLFxuICAgICAgICAgICAgYW5nbGVcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIF9nZXRUYXJnZXQoc291cmNlKSB7XG4gICAgY29uc3QgeyBjaGFydCAsIGZpbGwgLCBsaW5lICB9ID0gc291cmNlO1xuICAgIGlmIChpc051bWJlckZpbml0ZShmaWxsKSkge1xuICAgICAgICByZXR1cm4gZ2V0TGluZUJ5SW5kZXgoY2hhcnQsIGZpbGwpO1xuICAgIH1cbiAgICBpZiAoZmlsbCA9PT0gJ3N0YWNrJykge1xuICAgICAgICByZXR1cm4gX2J1aWxkU3RhY2tMaW5lKHNvdXJjZSk7XG4gICAgfVxuICAgIGlmIChmaWxsID09PSAnc2hhcGUnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBib3VuZGFyeSA9IGNvbXB1dGVCb3VuZGFyeShzb3VyY2UpO1xuICAgIGlmIChib3VuZGFyeSBpbnN0YW5jZW9mIHNpbXBsZUFyYykge1xuICAgICAgICByZXR1cm4gYm91bmRhcnk7XG4gICAgfVxuICAgIHJldHVybiBfY3JlYXRlQm91bmRhcnlMaW5lKGJvdW5kYXJ5LCBsaW5lKTtcbn1cbiBmdW5jdGlvbiBnZXRMaW5lQnlJbmRleChjaGFydCwgaW5kZXgpIHtcbiAgICBjb25zdCBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoaW5kZXgpO1xuICAgIGNvbnN0IHZpc2libGUgPSBtZXRhICYmIGNoYXJ0LmlzRGF0YXNldFZpc2libGUoaW5kZXgpO1xuICAgIHJldHVybiB2aXNpYmxlID8gbWV0YS5kYXRhc2V0IDogbnVsbDtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVCb3VuZGFyeShzb3VyY2UpIHtcbiAgICBjb25zdCBzY2FsZSA9IHNvdXJjZS5zY2FsZSB8fCB7fTtcbiAgICBpZiAoc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlKSB7XG4gICAgICAgIHJldHVybiBjb21wdXRlQ2lyY3VsYXJCb3VuZGFyeShzb3VyY2UpO1xuICAgIH1cbiAgICByZXR1cm4gY29tcHV0ZUxpbmVhckJvdW5kYXJ5KHNvdXJjZSk7XG59XG5mdW5jdGlvbiBjb21wdXRlTGluZWFyQm91bmRhcnkoc291cmNlKSB7XG4gICAgY29uc3QgeyBzY2FsZSA9e30gLCBmaWxsICB9ID0gc291cmNlO1xuICAgIGNvbnN0IHBpeGVsID0gX2dldFRhcmdldFBpeGVsKGZpbGwsIHNjYWxlKTtcbiAgICBpZiAoaXNOdW1iZXJGaW5pdGUocGl4ZWwpKSB7XG4gICAgICAgIGNvbnN0IGhvcml6b250YWwgPSBzY2FsZS5pc0hvcml6b250YWwoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IGhvcml6b250YWwgPyBwaXhlbCA6IG51bGwsXG4gICAgICAgICAgICB5OiBob3Jpem9udGFsID8gbnVsbCA6IHBpeGVsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gY29tcHV0ZUNpcmN1bGFyQm91bmRhcnkoc291cmNlKSB7XG4gICAgY29uc3QgeyBzY2FsZSAsIGZpbGwgIH0gPSBzb3VyY2U7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHNjYWxlLm9wdGlvbnM7XG4gICAgY29uc3QgbGVuZ3RoID0gc2NhbGUuZ2V0TGFiZWxzKCkubGVuZ3RoO1xuICAgIGNvbnN0IHN0YXJ0ID0gb3B0aW9ucy5yZXZlcnNlID8gc2NhbGUubWF4IDogc2NhbGUubWluO1xuICAgIGNvbnN0IHZhbHVlID0gX2dldFRhcmdldFZhbHVlKGZpbGwsIHNjYWxlLCBzdGFydCk7XG4gICAgY29uc3QgdGFyZ2V0ID0gW107XG4gICAgaWYgKG9wdGlvbnMuZ3JpZC5jaXJjdWxhcikge1xuICAgICAgICBjb25zdCBjZW50ZXIgPSBzY2FsZS5nZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUoMCwgc3RhcnQpO1xuICAgICAgICByZXR1cm4gbmV3IHNpbXBsZUFyYyh7XG4gICAgICAgICAgICB4OiBjZW50ZXIueCxcbiAgICAgICAgICAgIHk6IGNlbnRlci55LFxuICAgICAgICAgICAgcmFkaXVzOiBzY2FsZS5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZSh2YWx1ZSlcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSl7XG4gICAgICAgIHRhcmdldC5wdXNoKHNjYWxlLmdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZShpLCB2YWx1ZSkpO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfZHJhd2ZpbGwoY3R4LCBzb3VyY2UsIGFyZWEpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBfZ2V0VGFyZ2V0KHNvdXJjZSk7XG4gICAgY29uc3QgeyBsaW5lICwgc2NhbGUgLCBheGlzICB9ID0gc291cmNlO1xuICAgIGNvbnN0IGxpbmVPcHRzID0gbGluZS5vcHRpb25zO1xuICAgIGNvbnN0IGZpbGxPcHRpb24gPSBsaW5lT3B0cy5maWxsO1xuICAgIGNvbnN0IGNvbG9yID0gbGluZU9wdHMuYmFja2dyb3VuZENvbG9yO1xuICAgIGNvbnN0IHsgYWJvdmUgPWNvbG9yICwgYmVsb3cgPWNvbG9yICB9ID0gZmlsbE9wdGlvbiB8fCB7fTtcbiAgICBpZiAodGFyZ2V0ICYmIGxpbmUucG9pbnRzLmxlbmd0aCkge1xuICAgICAgICBjbGlwQXJlYShjdHgsIGFyZWEpO1xuICAgICAgICBkb0ZpbGwoY3R4LCB7XG4gICAgICAgICAgICBsaW5lLFxuICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgYWJvdmUsXG4gICAgICAgICAgICBiZWxvdyxcbiAgICAgICAgICAgIGFyZWEsXG4gICAgICAgICAgICBzY2FsZSxcbiAgICAgICAgICAgIGF4aXNcbiAgICAgICAgfSk7XG4gICAgICAgIHVuY2xpcEFyZWEoY3R4KTtcbiAgICB9XG59XG5mdW5jdGlvbiBkb0ZpbGwoY3R4LCBjZmcpIHtcbiAgICBjb25zdCB7IGxpbmUgLCB0YXJnZXQgLCBhYm92ZSAsIGJlbG93ICwgYXJlYSAsIHNjYWxlICB9ID0gY2ZnO1xuICAgIGNvbnN0IHByb3BlcnR5ID0gbGluZS5fbG9vcCA/ICdhbmdsZScgOiBjZmcuYXhpcztcbiAgICBjdHguc2F2ZSgpO1xuICAgIGlmIChwcm9wZXJ0eSA9PT0gJ3gnICYmIGJlbG93ICE9PSBhYm92ZSkge1xuICAgICAgICBjbGlwVmVydGljYWwoY3R4LCB0YXJnZXQsIGFyZWEudG9wKTtcbiAgICAgICAgZmlsbChjdHgsIHtcbiAgICAgICAgICAgIGxpbmUsXG4gICAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgICBjb2xvcjogYWJvdmUsXG4gICAgICAgICAgICBzY2FsZSxcbiAgICAgICAgICAgIHByb3BlcnR5XG4gICAgICAgIH0pO1xuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICBjbGlwVmVydGljYWwoY3R4LCB0YXJnZXQsIGFyZWEuYm90dG9tKTtcbiAgICB9XG4gICAgZmlsbChjdHgsIHtcbiAgICAgICAgbGluZSxcbiAgICAgICAgdGFyZ2V0LFxuICAgICAgICBjb2xvcjogYmVsb3csXG4gICAgICAgIHNjYWxlLFxuICAgICAgICBwcm9wZXJ0eVxuICAgIH0pO1xuICAgIGN0eC5yZXN0b3JlKCk7XG59XG5mdW5jdGlvbiBjbGlwVmVydGljYWwoY3R4LCB0YXJnZXQsIGNsaXBZKSB7XG4gICAgY29uc3QgeyBzZWdtZW50cyAsIHBvaW50cyAgfSA9IHRhcmdldDtcbiAgICBsZXQgZmlyc3QgPSB0cnVlO1xuICAgIGxldCBsaW5lTG9vcCA9IGZhbHNlO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBmb3IgKGNvbnN0IHNlZ21lbnQgb2Ygc2VnbWVudHMpe1xuICAgICAgICBjb25zdCB7IHN0YXJ0ICwgZW5kICB9ID0gc2VnbWVudDtcbiAgICAgICAgY29uc3QgZmlyc3RQb2ludCA9IHBvaW50c1tzdGFydF07XG4gICAgICAgIGNvbnN0IGxhc3RQb2ludCA9IHBvaW50c1tfZmluZFNlZ21lbnRFbmQoc3RhcnQsIGVuZCwgcG9pbnRzKV07XG4gICAgICAgIGlmIChmaXJzdCkge1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyhmaXJzdFBvaW50LngsIGZpcnN0UG9pbnQueSk7XG4gICAgICAgICAgICBmaXJzdCA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3R4LmxpbmVUbyhmaXJzdFBvaW50LngsIGNsaXBZKTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oZmlyc3RQb2ludC54LCBmaXJzdFBvaW50LnkpO1xuICAgICAgICB9XG4gICAgICAgIGxpbmVMb29wID0gISF0YXJnZXQucGF0aFNlZ21lbnQoY3R4LCBzZWdtZW50LCB7XG4gICAgICAgICAgICBtb3ZlOiBsaW5lTG9vcFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGxpbmVMb29wKSB7XG4gICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjdHgubGluZVRvKGxhc3RQb2ludC54LCBjbGlwWSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY3R4LmxpbmVUbyh0YXJnZXQuZmlyc3QoKS54LCBjbGlwWSk7XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIGN0eC5jbGlwKCk7XG59XG5mdW5jdGlvbiBmaWxsKGN0eCwgY2ZnKSB7XG4gICAgY29uc3QgeyBsaW5lICwgdGFyZ2V0ICwgcHJvcGVydHkgLCBjb2xvciAsIHNjYWxlICB9ID0gY2ZnO1xuICAgIGNvbnN0IHNlZ21lbnRzID0gX3NlZ21lbnRzKGxpbmUsIHRhcmdldCwgcHJvcGVydHkpO1xuICAgIGZvciAoY29uc3QgeyBzb3VyY2U6IHNyYyAsIHRhcmdldDogdGd0ICwgc3RhcnQgLCBlbmQgIH0gb2Ygc2VnbWVudHMpe1xuICAgICAgICBjb25zdCB7IHN0eWxlOiB7IGJhY2tncm91bmRDb2xvciA9Y29sb3IgIH0gPSB7fSAgfSA9IHNyYztcbiAgICAgICAgY29uc3Qgbm90U2hhcGUgPSB0YXJnZXQgIT09IHRydWU7XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBiYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgIGNsaXBCb3VuZHMoY3R4LCBzY2FsZSwgbm90U2hhcGUgJiYgX2dldEJvdW5kcyhwcm9wZXJ0eSwgc3RhcnQsIGVuZCkpO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGNvbnN0IGxpbmVMb29wID0gISFsaW5lLnBhdGhTZWdtZW50KGN0eCwgc3JjKTtcbiAgICAgICAgbGV0IGxvb3A7XG4gICAgICAgIGlmIChub3RTaGFwZSkge1xuICAgICAgICAgICAgaWYgKGxpbmVMb29wKSB7XG4gICAgICAgICAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbnRlcnBvbGF0ZWRMaW5lVG8oY3R4LCB0YXJnZXQsIGVuZCwgcHJvcGVydHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0TG9vcCA9ICEhdGFyZ2V0LnBhdGhTZWdtZW50KGN0eCwgdGd0LCB7XG4gICAgICAgICAgICAgICAgbW92ZTogbGluZUxvb3AsXG4gICAgICAgICAgICAgICAgcmV2ZXJzZTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsb29wID0gbGluZUxvb3AgJiYgdGFyZ2V0TG9vcDtcbiAgICAgICAgICAgIGlmICghbG9vcCkge1xuICAgICAgICAgICAgICAgIGludGVycG9sYXRlZExpbmVUbyhjdHgsIHRhcmdldCwgc3RhcnQsIHByb3BlcnR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgIGN0eC5maWxsKGxvb3AgPyAnZXZlbm9kZCcgOiAnbm9uemVybycpO1xuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNsaXBCb3VuZHMoY3R4LCBzY2FsZSwgYm91bmRzKSB7XG4gICAgY29uc3QgeyB0b3AgLCBib3R0b20gIH0gPSBzY2FsZS5jaGFydC5jaGFydEFyZWE7XG4gICAgY29uc3QgeyBwcm9wZXJ0eSAsIHN0YXJ0ICwgZW5kICB9ID0gYm91bmRzIHx8IHt9O1xuICAgIGlmIChwcm9wZXJ0eSA9PT0gJ3gnKSB7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY3R4LnJlY3Qoc3RhcnQsIHRvcCwgZW5kIC0gc3RhcnQsIGJvdHRvbSAtIHRvcCk7XG4gICAgICAgIGN0eC5jbGlwKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gaW50ZXJwb2xhdGVkTGluZVRvKGN0eCwgdGFyZ2V0LCBwb2ludCwgcHJvcGVydHkpIHtcbiAgICBjb25zdCBpbnRlcnBvbGF0ZWRQb2ludCA9IHRhcmdldC5pbnRlcnBvbGF0ZShwb2ludCwgcHJvcGVydHkpO1xuICAgIGlmIChpbnRlcnBvbGF0ZWRQb2ludCkge1xuICAgICAgICBjdHgubGluZVRvKGludGVycG9sYXRlZFBvaW50LngsIGludGVycG9sYXRlZFBvaW50LnkpO1xuICAgIH1cbn1cblxudmFyIGluZGV4ID0ge1xuICAgIGlkOiAnZmlsbGVyJyxcbiAgICBhZnRlckRhdGFzZXRzVXBkYXRlIChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgY291bnQgPSAoY2hhcnQuZGF0YS5kYXRhc2V0cyB8fCBbXSkubGVuZ3RoO1xuICAgICAgICBjb25zdCBzb3VyY2VzID0gW107XG4gICAgICAgIGxldCBtZXRhLCBpLCBsaW5lLCBzb3VyY2U7XG4gICAgICAgIGZvcihpID0gMDsgaSA8IGNvdW50OyArK2kpe1xuICAgICAgICAgICAgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGkpO1xuICAgICAgICAgICAgbGluZSA9IG1ldGEuZGF0YXNldDtcbiAgICAgICAgICAgIHNvdXJjZSA9IG51bGw7XG4gICAgICAgICAgICBpZiAobGluZSAmJiBsaW5lLm9wdGlvbnMgJiYgbGluZSBpbnN0YW5jZW9mIExpbmVFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgc291cmNlID0ge1xuICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiBjaGFydC5pc0RhdGFzZXRWaXNpYmxlKGkpLFxuICAgICAgICAgICAgICAgICAgICBpbmRleDogaSxcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogX2RlY29kZUZpbGwobGluZSwgaSwgY291bnQpLFxuICAgICAgICAgICAgICAgICAgICBjaGFydCxcbiAgICAgICAgICAgICAgICAgICAgYXhpczogbWV0YS5jb250cm9sbGVyLm9wdGlvbnMuaW5kZXhBeGlzLFxuICAgICAgICAgICAgICAgICAgICBzY2FsZTogbWV0YS52U2NhbGUsXG4gICAgICAgICAgICAgICAgICAgIGxpbmVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWV0YS4kZmlsbGVyID0gc291cmNlO1xuICAgICAgICAgICAgc291cmNlcy5wdXNoKHNvdXJjZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgY291bnQ7ICsraSl7XG4gICAgICAgICAgICBzb3VyY2UgPSBzb3VyY2VzW2ldO1xuICAgICAgICAgICAgaWYgKCFzb3VyY2UgfHwgc291cmNlLmZpbGwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzb3VyY2UuZmlsbCA9IF9yZXNvbHZlVGFyZ2V0KHNvdXJjZXMsIGksIG9wdGlvbnMucHJvcGFnYXRlKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgYmVmb3JlRHJhdyAoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGRyYXcgPSBvcHRpb25zLmRyYXdUaW1lID09PSAnYmVmb3JlRHJhdyc7XG4gICAgICAgIGNvbnN0IG1ldGFzZXRzID0gY2hhcnQuZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpO1xuICAgICAgICBjb25zdCBhcmVhID0gY2hhcnQuY2hhcnRBcmVhO1xuICAgICAgICBmb3IobGV0IGkgPSBtZXRhc2V0cy5sZW5ndGggLSAxOyBpID49IDA7IC0taSl7XG4gICAgICAgICAgICBjb25zdCBzb3VyY2UgPSBtZXRhc2V0c1tpXS4kZmlsbGVyO1xuICAgICAgICAgICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNvdXJjZS5saW5lLnVwZGF0ZUNvbnRyb2xQb2ludHMoYXJlYSwgc291cmNlLmF4aXMpO1xuICAgICAgICAgICAgaWYgKGRyYXcgJiYgc291cmNlLmZpbGwpIHtcbiAgICAgICAgICAgICAgICBfZHJhd2ZpbGwoY2hhcnQuY3R4LCBzb3VyY2UsIGFyZWEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBiZWZvcmVEYXRhc2V0c0RyYXcgKGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucy5kcmF3VGltZSAhPT0gJ2JlZm9yZURhdGFzZXRzRHJhdycpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXRhc2V0cyA9IGNoYXJ0LmdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKTtcbiAgICAgICAgZm9yKGxldCBpID0gbWV0YXNldHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpe1xuICAgICAgICAgICAgY29uc3Qgc291cmNlID0gbWV0YXNldHNbaV0uJGZpbGxlcjtcbiAgICAgICAgICAgIGlmIChfc2hvdWxkQXBwbHlGaWxsKHNvdXJjZSkpIHtcbiAgICAgICAgICAgICAgICBfZHJhd2ZpbGwoY2hhcnQuY3R4LCBzb3VyY2UsIGNoYXJ0LmNoYXJ0QXJlYSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGJlZm9yZURhdGFzZXREcmF3IChjaGFydCwgYXJncywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBzb3VyY2UgPSBhcmdzLm1ldGEuJGZpbGxlcjtcbiAgICAgICAgaWYgKCFfc2hvdWxkQXBwbHlGaWxsKHNvdXJjZSkgfHwgb3B0aW9ucy5kcmF3VGltZSAhPT0gJ2JlZm9yZURhdGFzZXREcmF3Jykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIF9kcmF3ZmlsbChjaGFydC5jdHgsIHNvdXJjZSwgY2hhcnQuY2hhcnRBcmVhKTtcbiAgICB9LFxuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIHByb3BhZ2F0ZTogdHJ1ZSxcbiAgICAgICAgZHJhd1RpbWU6ICdiZWZvcmVEYXRhc2V0RHJhdydcbiAgICB9XG59O1xuXG5jb25zdCBnZXRCb3hTaXplID0gKGxhYmVsT3B0cywgZm9udFNpemUpPT57XG4gICAgbGV0IHsgYm94SGVpZ2h0ID1mb250U2l6ZSAsIGJveFdpZHRoID1mb250U2l6ZSAgfSA9IGxhYmVsT3B0cztcbiAgICBpZiAobGFiZWxPcHRzLnVzZVBvaW50U3R5bGUpIHtcbiAgICAgICAgYm94SGVpZ2h0ID0gTWF0aC5taW4oYm94SGVpZ2h0LCBmb250U2l6ZSk7XG4gICAgICAgIGJveFdpZHRoID0gbGFiZWxPcHRzLnBvaW50U3R5bGVXaWR0aCB8fCBNYXRoLm1pbihib3hXaWR0aCwgZm9udFNpemUpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBib3hXaWR0aCxcbiAgICAgICAgYm94SGVpZ2h0LFxuICAgICAgICBpdGVtSGVpZ2h0OiBNYXRoLm1heChmb250U2l6ZSwgYm94SGVpZ2h0KVxuICAgIH07XG59O1xuY29uc3QgaXRlbXNFcXVhbCA9IChhLCBiKT0+YSAhPT0gbnVsbCAmJiBiICE9PSBudWxsICYmIGEuZGF0YXNldEluZGV4ID09PSBiLmRhdGFzZXRJbmRleCAmJiBhLmluZGV4ID09PSBiLmluZGV4O1xuY2xhc3MgTGVnZW5kIGV4dGVuZHMgRWxlbWVudCB7XG4gY29uc3RydWN0b3IoY29uZmlnKXtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fYWRkZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5sZWdlbmRIaXRCb3hlcyA9IFtdO1xuIHRoaXMuX2hvdmVyZWRJdGVtID0gbnVsbDtcbiAgICAgICAgdGhpcy5kb3VnaG51dE1vZGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jaGFydCA9IGNvbmZpZy5jaGFydDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gY29uZmlnLm9wdGlvbnM7XG4gICAgICAgIHRoaXMuY3R4ID0gY29uZmlnLmN0eDtcbiAgICAgICAgdGhpcy5sZWdlbmRJdGVtcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5jb2x1bW5TaXplcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5saW5lV2lkdGhzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm1heEhlaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5tYXhXaWR0aCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy50b3AgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuYm90dG9tID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmxlZnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucmlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLndpZHRoID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9tYXJnaW5zID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnBvc2l0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLndlaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5mdWxsU2l6ZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdXBkYXRlKG1heFdpZHRoLCBtYXhIZWlnaHQsIG1hcmdpbnMpIHtcbiAgICAgICAgdGhpcy5tYXhXaWR0aCA9IG1heFdpZHRoO1xuICAgICAgICB0aGlzLm1heEhlaWdodCA9IG1heEhlaWdodDtcbiAgICAgICAgdGhpcy5fbWFyZ2lucyA9IG1hcmdpbnM7XG4gICAgICAgIHRoaXMuc2V0RGltZW5zaW9ucygpO1xuICAgICAgICB0aGlzLmJ1aWxkTGFiZWxzKCk7XG4gICAgICAgIHRoaXMuZml0KCk7XG4gICAgfVxuICAgIHNldERpbWVuc2lvbnMoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5tYXhXaWR0aDtcbiAgICAgICAgICAgIHRoaXMubGVmdCA9IHRoaXMuX21hcmdpbnMubGVmdDtcbiAgICAgICAgICAgIHRoaXMucmlnaHQgPSB0aGlzLndpZHRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLm1heEhlaWdodDtcbiAgICAgICAgICAgIHRoaXMudG9wID0gdGhpcy5fbWFyZ2lucy50b3A7XG4gICAgICAgICAgICB0aGlzLmJvdHRvbSA9IHRoaXMuaGVpZ2h0O1xuICAgICAgICB9XG4gICAgfVxuICAgIGJ1aWxkTGFiZWxzKCkge1xuICAgICAgICBjb25zdCBsYWJlbE9wdHMgPSB0aGlzLm9wdGlvbnMubGFiZWxzIHx8IHt9O1xuICAgICAgICBsZXQgbGVnZW5kSXRlbXMgPSBjYWxsYmFjayhsYWJlbE9wdHMuZ2VuZXJhdGVMYWJlbHMsIFtcbiAgICAgICAgICAgIHRoaXMuY2hhcnRcbiAgICAgICAgXSwgdGhpcykgfHwgW107XG4gICAgICAgIGlmIChsYWJlbE9wdHMuZmlsdGVyKSB7XG4gICAgICAgICAgICBsZWdlbmRJdGVtcyA9IGxlZ2VuZEl0ZW1zLmZpbHRlcigoaXRlbSk9PmxhYmVsT3B0cy5maWx0ZXIoaXRlbSwgdGhpcy5jaGFydC5kYXRhKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxhYmVsT3B0cy5zb3J0KSB7XG4gICAgICAgICAgICBsZWdlbmRJdGVtcyA9IGxlZ2VuZEl0ZW1zLnNvcnQoKGEsIGIpPT5sYWJlbE9wdHMuc29ydChhLCBiLCB0aGlzLmNoYXJ0LmRhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJldmVyc2UpIHtcbiAgICAgICAgICAgIGxlZ2VuZEl0ZW1zLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxlZ2VuZEl0ZW1zID0gbGVnZW5kSXRlbXM7XG4gICAgfVxuICAgIGZpdCgpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zICwgY3R4ICB9ID0gdGhpcztcbiAgICAgICAgaWYgKCFvcHRpb25zLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSB0aGlzLmhlaWdodCA9IDA7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGFiZWxPcHRzID0gb3B0aW9ucy5sYWJlbHM7XG4gICAgICAgIGNvbnN0IGxhYmVsRm9udCA9IHRvRm9udChsYWJlbE9wdHMuZm9udCk7XG4gICAgICAgIGNvbnN0IGZvbnRTaXplID0gbGFiZWxGb250LnNpemU7XG4gICAgICAgIGNvbnN0IHRpdGxlSGVpZ2h0ID0gdGhpcy5fY29tcHV0ZVRpdGxlSGVpZ2h0KCk7XG4gICAgICAgIGNvbnN0IHsgYm94V2lkdGggLCBpdGVtSGVpZ2h0ICB9ID0gZ2V0Qm94U2l6ZShsYWJlbE9wdHMsIGZvbnRTaXplKTtcbiAgICAgICAgbGV0IHdpZHRoLCBoZWlnaHQ7XG4gICAgICAgIGN0eC5mb250ID0gbGFiZWxGb250LnN0cmluZztcbiAgICAgICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgIHdpZHRoID0gdGhpcy5tYXhXaWR0aDtcbiAgICAgICAgICAgIGhlaWdodCA9IHRoaXMuX2ZpdFJvd3ModGl0bGVIZWlnaHQsIGZvbnRTaXplLCBib3hXaWR0aCwgaXRlbUhlaWdodCkgKyAxMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhlaWdodCA9IHRoaXMubWF4SGVpZ2h0O1xuICAgICAgICAgICAgd2lkdGggPSB0aGlzLl9maXRDb2xzKHRpdGxlSGVpZ2h0LCBsYWJlbEZvbnQsIGJveFdpZHRoLCBpdGVtSGVpZ2h0KSArIDEwO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMud2lkdGggPSBNYXRoLm1pbih3aWR0aCwgb3B0aW9ucy5tYXhXaWR0aCB8fCB0aGlzLm1heFdpZHRoKTtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBNYXRoLm1pbihoZWlnaHQsIG9wdGlvbnMubWF4SGVpZ2h0IHx8IHRoaXMubWF4SGVpZ2h0KTtcbiAgICB9XG4gX2ZpdFJvd3ModGl0bGVIZWlnaHQsIGZvbnRTaXplLCBib3hXaWR0aCwgaXRlbUhlaWdodCkge1xuICAgICAgICBjb25zdCB7IGN0eCAsIG1heFdpZHRoICwgb3B0aW9uczogeyBsYWJlbHM6IHsgcGFkZGluZyAgfSAgfSAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGhpdGJveGVzID0gdGhpcy5sZWdlbmRIaXRCb3hlcyA9IFtdO1xuICAgICAgICBjb25zdCBsaW5lV2lkdGhzID0gdGhpcy5saW5lV2lkdGhzID0gW1xuICAgICAgICAgICAgMFxuICAgICAgICBdO1xuICAgICAgICBjb25zdCBsaW5lSGVpZ2h0ID0gaXRlbUhlaWdodCArIHBhZGRpbmc7XG4gICAgICAgIGxldCB0b3RhbEhlaWdodCA9IHRpdGxlSGVpZ2h0O1xuICAgICAgICBjdHgudGV4dEFsaWduID0gJ2xlZnQnO1xuICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgICAgIGxldCByb3cgPSAtMTtcbiAgICAgICAgbGV0IHRvcCA9IC1saW5lSGVpZ2h0O1xuICAgICAgICB0aGlzLmxlZ2VuZEl0ZW1zLmZvckVhY2goKGxlZ2VuZEl0ZW0sIGkpPT57XG4gICAgICAgICAgICBjb25zdCBpdGVtV2lkdGggPSBib3hXaWR0aCArIGZvbnRTaXplIC8gMiArIGN0eC5tZWFzdXJlVGV4dChsZWdlbmRJdGVtLnRleHQpLndpZHRoO1xuICAgICAgICAgICAgaWYgKGkgPT09IDAgfHwgbGluZVdpZHRoc1tsaW5lV2lkdGhzLmxlbmd0aCAtIDFdICsgaXRlbVdpZHRoICsgMiAqIHBhZGRpbmcgPiBtYXhXaWR0aCkge1xuICAgICAgICAgICAgICAgIHRvdGFsSGVpZ2h0ICs9IGxpbmVIZWlnaHQ7XG4gICAgICAgICAgICAgICAgbGluZVdpZHRoc1tsaW5lV2lkdGhzLmxlbmd0aCAtIChpID4gMCA/IDAgOiAxKV0gPSAwO1xuICAgICAgICAgICAgICAgIHRvcCArPSBsaW5lSGVpZ2h0O1xuICAgICAgICAgICAgICAgIHJvdysrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGl0Ym94ZXNbaV0gPSB7XG4gICAgICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgICAgICB0b3AsXG4gICAgICAgICAgICAgICAgcm93LFxuICAgICAgICAgICAgICAgIHdpZHRoOiBpdGVtV2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBpdGVtSGVpZ2h0XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbGluZVdpZHRoc1tsaW5lV2lkdGhzLmxlbmd0aCAtIDFdICs9IGl0ZW1XaWR0aCArIHBhZGRpbmc7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdG90YWxIZWlnaHQ7XG4gICAgfVxuICAgIF9maXRDb2xzKHRpdGxlSGVpZ2h0LCBsYWJlbEZvbnQsIGJveFdpZHRoLCBfaXRlbUhlaWdodCkge1xuICAgICAgICBjb25zdCB7IGN0eCAsIG1heEhlaWdodCAsIG9wdGlvbnM6IHsgbGFiZWxzOiB7IHBhZGRpbmcgIH0gIH0gIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBoaXRib3hlcyA9IHRoaXMubGVnZW5kSGl0Qm94ZXMgPSBbXTtcbiAgICAgICAgY29uc3QgY29sdW1uU2l6ZXMgPSB0aGlzLmNvbHVtblNpemVzID0gW107XG4gICAgICAgIGNvbnN0IGhlaWdodExpbWl0ID0gbWF4SGVpZ2h0IC0gdGl0bGVIZWlnaHQ7XG4gICAgICAgIGxldCB0b3RhbFdpZHRoID0gcGFkZGluZztcbiAgICAgICAgbGV0IGN1cnJlbnRDb2xXaWR0aCA9IDA7XG4gICAgICAgIGxldCBjdXJyZW50Q29sSGVpZ2h0ID0gMDtcbiAgICAgICAgbGV0IGxlZnQgPSAwO1xuICAgICAgICBsZXQgY29sID0gMDtcbiAgICAgICAgdGhpcy5sZWdlbmRJdGVtcy5mb3JFYWNoKChsZWdlbmRJdGVtLCBpKT0+e1xuICAgICAgICAgICAgY29uc3QgeyBpdGVtV2lkdGggLCBpdGVtSGVpZ2h0ICB9ID0gY2FsY3VsYXRlSXRlbVNpemUoYm94V2lkdGgsIGxhYmVsRm9udCwgY3R4LCBsZWdlbmRJdGVtLCBfaXRlbUhlaWdodCk7XG4gICAgICAgICAgICBpZiAoaSA+IDAgJiYgY3VycmVudENvbEhlaWdodCArIGl0ZW1IZWlnaHQgKyAyICogcGFkZGluZyA+IGhlaWdodExpbWl0KSB7XG4gICAgICAgICAgICAgICAgdG90YWxXaWR0aCArPSBjdXJyZW50Q29sV2lkdGggKyBwYWRkaW5nO1xuICAgICAgICAgICAgICAgIGNvbHVtblNpemVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogY3VycmVudENvbFdpZHRoLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGN1cnJlbnRDb2xIZWlnaHRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBsZWZ0ICs9IGN1cnJlbnRDb2xXaWR0aCArIHBhZGRpbmc7XG4gICAgICAgICAgICAgICAgY29sKys7XG4gICAgICAgICAgICAgICAgY3VycmVudENvbFdpZHRoID0gY3VycmVudENvbEhlaWdodCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoaXRib3hlc1tpXSA9IHtcbiAgICAgICAgICAgICAgICBsZWZ0LFxuICAgICAgICAgICAgICAgIHRvcDogY3VycmVudENvbEhlaWdodCxcbiAgICAgICAgICAgICAgICBjb2wsXG4gICAgICAgICAgICAgICAgd2lkdGg6IGl0ZW1XaWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGl0ZW1IZWlnaHRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjdXJyZW50Q29sV2lkdGggPSBNYXRoLm1heChjdXJyZW50Q29sV2lkdGgsIGl0ZW1XaWR0aCk7XG4gICAgICAgICAgICBjdXJyZW50Q29sSGVpZ2h0ICs9IGl0ZW1IZWlnaHQgKyBwYWRkaW5nO1xuICAgICAgICB9KTtcbiAgICAgICAgdG90YWxXaWR0aCArPSBjdXJyZW50Q29sV2lkdGg7XG4gICAgICAgIGNvbHVtblNpemVzLnB1c2goe1xuICAgICAgICAgICAgd2lkdGg6IGN1cnJlbnRDb2xXaWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogY3VycmVudENvbEhlaWdodFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRvdGFsV2lkdGg7XG4gICAgfVxuICAgIGFkanVzdEhpdEJveGVzKCkge1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5kaXNwbGF5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGl0bGVIZWlnaHQgPSB0aGlzLl9jb21wdXRlVGl0bGVIZWlnaHQoKTtcbiAgICAgICAgY29uc3QgeyBsZWdlbmRIaXRCb3hlczogaGl0Ym94ZXMgLCBvcHRpb25zOiB7IGFsaWduICwgbGFiZWxzOiB7IHBhZGRpbmcgIH0gLCBydGwgIH0gIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBydGxIZWxwZXIgPSBnZXRSdGxBZGFwdGVyKHJ0bCwgdGhpcy5sZWZ0LCB0aGlzLndpZHRoKTtcbiAgICAgICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgIGxldCByb3cgPSAwO1xuICAgICAgICAgICAgbGV0IGxlZnQgPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgdGhpcy5sZWZ0ICsgcGFkZGluZywgdGhpcy5yaWdodCAtIHRoaXMubGluZVdpZHRoc1tyb3ddKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaGl0Ym94IG9mIGhpdGJveGVzKXtcbiAgICAgICAgICAgICAgICBpZiAocm93ICE9PSBoaXRib3gucm93KSB7XG4gICAgICAgICAgICAgICAgICAgIHJvdyA9IGhpdGJveC5yb3c7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQgPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgdGhpcy5sZWZ0ICsgcGFkZGluZywgdGhpcy5yaWdodCAtIHRoaXMubGluZVdpZHRoc1tyb3ddKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaGl0Ym94LnRvcCArPSB0aGlzLnRvcCArIHRpdGxlSGVpZ2h0ICsgcGFkZGluZztcbiAgICAgICAgICAgICAgICBoaXRib3gubGVmdCA9IHJ0bEhlbHBlci5sZWZ0Rm9yTHRyKHJ0bEhlbHBlci54KGxlZnQpLCBoaXRib3gud2lkdGgpO1xuICAgICAgICAgICAgICAgIGxlZnQgKz0gaGl0Ym94LndpZHRoICsgcGFkZGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBjb2wgPSAwO1xuICAgICAgICAgICAgbGV0IHRvcCA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0aGlzLnRvcCArIHRpdGxlSGVpZ2h0ICsgcGFkZGluZywgdGhpcy5ib3R0b20gLSB0aGlzLmNvbHVtblNpemVzW2NvbF0uaGVpZ2h0KTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaGl0Ym94IG9mIGhpdGJveGVzKXtcbiAgICAgICAgICAgICAgICBpZiAoaGl0Ym94LmNvbCAhPT0gY29sKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbCA9IGhpdGJveC5jb2w7XG4gICAgICAgICAgICAgICAgICAgIHRvcCA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0aGlzLnRvcCArIHRpdGxlSGVpZ2h0ICsgcGFkZGluZywgdGhpcy5ib3R0b20gLSB0aGlzLmNvbHVtblNpemVzW2NvbF0uaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaGl0Ym94LnRvcCA9IHRvcDtcbiAgICAgICAgICAgICAgICBoaXRib3gubGVmdCArPSB0aGlzLmxlZnQgKyBwYWRkaW5nO1xuICAgICAgICAgICAgICAgIGhpdGJveC5sZWZ0ID0gcnRsSGVscGVyLmxlZnRGb3JMdHIocnRsSGVscGVyLngoaGl0Ym94LmxlZnQpLCBoaXRib3gud2lkdGgpO1xuICAgICAgICAgICAgICAgIHRvcCArPSBoaXRib3guaGVpZ2h0ICsgcGFkZGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpc0hvcml6b250YWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMucG9zaXRpb24gPT09ICd0b3AnIHx8IHRoaXMub3B0aW9ucy5wb3NpdGlvbiA9PT0gJ2JvdHRvbSc7XG4gICAgfVxuICAgIGRyYXcoKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGlzcGxheSkge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgICAgICAgICBjbGlwQXJlYShjdHgsIHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5fZHJhdygpO1xuICAgICAgICAgICAgdW5jbGlwQXJlYShjdHgpO1xuICAgICAgICB9XG4gICAgfVxuIF9kcmF3KCkge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnM6IG9wdHMgLCBjb2x1bW5TaXplcyAsIGxpbmVXaWR0aHMgLCBjdHggIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IGFsaWduICwgbGFiZWxzOiBsYWJlbE9wdHMgIH0gPSBvcHRzO1xuICAgICAgICBjb25zdCBkZWZhdWx0Q29sb3IgPSBkZWZhdWx0cy5jb2xvcjtcbiAgICAgICAgY29uc3QgcnRsSGVscGVyID0gZ2V0UnRsQWRhcHRlcihvcHRzLnJ0bCwgdGhpcy5sZWZ0LCB0aGlzLndpZHRoKTtcbiAgICAgICAgY29uc3QgbGFiZWxGb250ID0gdG9Gb250KGxhYmVsT3B0cy5mb250KTtcbiAgICAgICAgY29uc3QgeyBwYWRkaW5nICB9ID0gbGFiZWxPcHRzO1xuICAgICAgICBjb25zdCBmb250U2l6ZSA9IGxhYmVsRm9udC5zaXplO1xuICAgICAgICBjb25zdCBoYWxmRm9udFNpemUgPSBmb250U2l6ZSAvIDI7XG4gICAgICAgIGxldCBjdXJzb3I7XG4gICAgICAgIHRoaXMuZHJhd1RpdGxlKCk7XG4gICAgICAgIGN0eC50ZXh0QWxpZ24gPSBydGxIZWxwZXIudGV4dEFsaWduKCdsZWZ0Jyk7XG4gICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IDAuNTtcbiAgICAgICAgY3R4LmZvbnQgPSBsYWJlbEZvbnQuc3RyaW5nO1xuICAgICAgICBjb25zdCB7IGJveFdpZHRoICwgYm94SGVpZ2h0ICwgaXRlbUhlaWdodCAgfSA9IGdldEJveFNpemUobGFiZWxPcHRzLCBmb250U2l6ZSk7XG4gICAgICAgIGNvbnN0IGRyYXdMZWdlbmRCb3ggPSBmdW5jdGlvbih4LCB5LCBsZWdlbmRJdGVtKSB7XG4gICAgICAgICAgICBpZiAoaXNOYU4oYm94V2lkdGgpIHx8IGJveFdpZHRoIDw9IDAgfHwgaXNOYU4oYm94SGVpZ2h0KSB8fCBib3hIZWlnaHQgPCAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgIGNvbnN0IGxpbmVXaWR0aCA9IHZhbHVlT3JEZWZhdWx0KGxlZ2VuZEl0ZW0ubGluZVdpZHRoLCAxKTtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSB2YWx1ZU9yRGVmYXVsdChsZWdlbmRJdGVtLmZpbGxTdHlsZSwgZGVmYXVsdENvbG9yKTtcbiAgICAgICAgICAgIGN0eC5saW5lQ2FwID0gdmFsdWVPckRlZmF1bHQobGVnZW5kSXRlbS5saW5lQ2FwLCAnYnV0dCcpO1xuICAgICAgICAgICAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gdmFsdWVPckRlZmF1bHQobGVnZW5kSXRlbS5saW5lRGFzaE9mZnNldCwgMCk7XG4gICAgICAgICAgICBjdHgubGluZUpvaW4gPSB2YWx1ZU9yRGVmYXVsdChsZWdlbmRJdGVtLmxpbmVKb2luLCAnbWl0ZXInKTtcbiAgICAgICAgICAgIGN0eC5saW5lV2lkdGggPSBsaW5lV2lkdGg7XG4gICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSB2YWx1ZU9yRGVmYXVsdChsZWdlbmRJdGVtLnN0cm9rZVN0eWxlLCBkZWZhdWx0Q29sb3IpO1xuICAgICAgICAgICAgY3R4LnNldExpbmVEYXNoKHZhbHVlT3JEZWZhdWx0KGxlZ2VuZEl0ZW0ubGluZURhc2gsIFtdKSk7XG4gICAgICAgICAgICBpZiAobGFiZWxPcHRzLnVzZVBvaW50U3R5bGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkcmF3T3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiBib3hIZWlnaHQgKiBNYXRoLlNRUlQyIC8gMixcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRTdHlsZTogbGVnZW5kSXRlbS5wb2ludFN0eWxlLFxuICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogbGVnZW5kSXRlbS5yb3RhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IGxpbmVXaWR0aFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29uc3QgY2VudGVyWCA9IHJ0bEhlbHBlci54UGx1cyh4LCBib3hXaWR0aCAvIDIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNlbnRlclkgPSB5ICsgaGFsZkZvbnRTaXplO1xuICAgICAgICAgICAgICAgIGRyYXdQb2ludExlZ2VuZChjdHgsIGRyYXdPcHRpb25zLCBjZW50ZXJYLCBjZW50ZXJZLCBsYWJlbE9wdHMucG9pbnRTdHlsZVdpZHRoICYmIGJveFdpZHRoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeUJveFRvcCA9IHkgKyBNYXRoLm1heCgoZm9udFNpemUgLSBib3hIZWlnaHQpIC8gMiwgMCk7XG4gICAgICAgICAgICAgICAgY29uc3QgeEJveExlZnQgPSBydGxIZWxwZXIubGVmdEZvckx0cih4LCBib3hXaWR0aCk7XG4gICAgICAgICAgICAgICAgY29uc3QgYm9yZGVyUmFkaXVzID0gdG9UUkJMQ29ybmVycyhsZWdlbmRJdGVtLmJvcmRlclJhZGl1cyk7XG4gICAgICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgIGlmIChPYmplY3QudmFsdWVzKGJvcmRlclJhZGl1cykuc29tZSgodik9PnYgIT09IDApKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZFJvdW5kZWRSZWN0UGF0aChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IHhCb3hMZWZ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogeUJveFRvcCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHc6IGJveFdpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgaDogYm94SGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiBib3JkZXJSYWRpdXNcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnJlY3QoeEJveExlZnQsIHlCb3hUb3AsIGJveFdpZHRoLCBib3hIZWlnaHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICAgICAgICAgIGlmIChsaW5lV2lkdGggIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGZpbGxUZXh0ID0gZnVuY3Rpb24oeCwgeSwgbGVnZW5kSXRlbSkge1xuICAgICAgICAgICAgcmVuZGVyVGV4dChjdHgsIGxlZ2VuZEl0ZW0udGV4dCwgeCwgeSArIGl0ZW1IZWlnaHQgLyAyLCBsYWJlbEZvbnQsIHtcbiAgICAgICAgICAgICAgICBzdHJpa2V0aHJvdWdoOiBsZWdlbmRJdGVtLmhpZGRlbixcbiAgICAgICAgICAgICAgICB0ZXh0QWxpZ246IHJ0bEhlbHBlci50ZXh0QWxpZ24obGVnZW5kSXRlbS50ZXh0QWxpZ24pXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgaXNIb3Jpem9udGFsID0gdGhpcy5pc0hvcml6b250YWwoKTtcbiAgICAgICAgY29uc3QgdGl0bGVIZWlnaHQgPSB0aGlzLl9jb21wdXRlVGl0bGVIZWlnaHQoKTtcbiAgICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgY3Vyc29yID0ge1xuICAgICAgICAgICAgICAgIHg6IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0aGlzLmxlZnQgKyBwYWRkaW5nLCB0aGlzLnJpZ2h0IC0gbGluZVdpZHRoc1swXSksXG4gICAgICAgICAgICAgICAgeTogdGhpcy50b3AgKyBwYWRkaW5nICsgdGl0bGVIZWlnaHQsXG4gICAgICAgICAgICAgICAgbGluZTogMFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgICAgICAgICB4OiB0aGlzLmxlZnQgKyBwYWRkaW5nLFxuICAgICAgICAgICAgICAgIHk6IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0aGlzLnRvcCArIHRpdGxlSGVpZ2h0ICsgcGFkZGluZywgdGhpcy5ib3R0b20gLSBjb2x1bW5TaXplc1swXS5oZWlnaHQpLFxuICAgICAgICAgICAgICAgIGxpbmU6IDBcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgb3ZlcnJpZGVUZXh0RGlyZWN0aW9uKHRoaXMuY3R4LCBvcHRzLnRleHREaXJlY3Rpb24pO1xuICAgICAgICBjb25zdCBsaW5lSGVpZ2h0ID0gaXRlbUhlaWdodCArIHBhZGRpbmc7XG4gICAgICAgIHRoaXMubGVnZW5kSXRlbXMuZm9yRWFjaCgobGVnZW5kSXRlbSwgaSk9PntcbiAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGxlZ2VuZEl0ZW0uZm9udENvbG9yO1xuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGxlZ2VuZEl0ZW0uZm9udENvbG9yO1xuICAgICAgICAgICAgY29uc3QgdGV4dFdpZHRoID0gY3R4Lm1lYXN1cmVUZXh0KGxlZ2VuZEl0ZW0udGV4dCkud2lkdGg7XG4gICAgICAgICAgICBjb25zdCB0ZXh0QWxpZ24gPSBydGxIZWxwZXIudGV4dEFsaWduKGxlZ2VuZEl0ZW0udGV4dEFsaWduIHx8IChsZWdlbmRJdGVtLnRleHRBbGlnbiA9IGxhYmVsT3B0cy50ZXh0QWxpZ24pKTtcbiAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gYm94V2lkdGggKyBoYWxmRm9udFNpemUgKyB0ZXh0V2lkdGg7XG4gICAgICAgICAgICBsZXQgeCA9IGN1cnNvci54O1xuICAgICAgICAgICAgbGV0IHkgPSBjdXJzb3IueTtcbiAgICAgICAgICAgIHJ0bEhlbHBlci5zZXRXaWR0aCh0aGlzLndpZHRoKTtcbiAgICAgICAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgICAgICAgICBpZiAoaSA+IDAgJiYgeCArIHdpZHRoICsgcGFkZGluZyA+IHRoaXMucmlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgeSA9IGN1cnNvci55ICs9IGxpbmVIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIGN1cnNvci5saW5lKys7XG4gICAgICAgICAgICAgICAgICAgIHggPSBjdXJzb3IueCA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0aGlzLmxlZnQgKyBwYWRkaW5nLCB0aGlzLnJpZ2h0IC0gbGluZVdpZHRoc1tjdXJzb3IubGluZV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaSA+IDAgJiYgeSArIGxpbmVIZWlnaHQgPiB0aGlzLmJvdHRvbSkge1xuICAgICAgICAgICAgICAgIHggPSBjdXJzb3IueCA9IHggKyBjb2x1bW5TaXplc1tjdXJzb3IubGluZV0ud2lkdGggKyBwYWRkaW5nO1xuICAgICAgICAgICAgICAgIGN1cnNvci5saW5lKys7XG4gICAgICAgICAgICAgICAgeSA9IGN1cnNvci55ID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMudG9wICsgdGl0bGVIZWlnaHQgKyBwYWRkaW5nLCB0aGlzLmJvdHRvbSAtIGNvbHVtblNpemVzW2N1cnNvci5saW5lXS5oZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcmVhbFggPSBydGxIZWxwZXIueCh4KTtcbiAgICAgICAgICAgIGRyYXdMZWdlbmRCb3gocmVhbFgsIHksIGxlZ2VuZEl0ZW0pO1xuICAgICAgICAgICAgeCA9IF90ZXh0WCh0ZXh0QWxpZ24sIHggKyBib3hXaWR0aCArIGhhbGZGb250U2l6ZSwgaXNIb3Jpem9udGFsID8geCArIHdpZHRoIDogdGhpcy5yaWdodCwgb3B0cy5ydGwpO1xuICAgICAgICAgICAgZmlsbFRleHQocnRsSGVscGVyLngoeCksIHksIGxlZ2VuZEl0ZW0pO1xuICAgICAgICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgICAgIGN1cnNvci54ICs9IHdpZHRoICsgcGFkZGluZztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxlZ2VuZEl0ZW0udGV4dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmb250TGluZUhlaWdodCA9IGxhYmVsRm9udC5saW5lSGVpZ2h0O1xuICAgICAgICAgICAgICAgIGN1cnNvci55ICs9IGNhbGN1bGF0ZUxlZ2VuZEl0ZW1IZWlnaHQobGVnZW5kSXRlbSwgZm9udExpbmVIZWlnaHQpICsgcGFkZGluZztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY3Vyc29yLnkgKz0gbGluZUhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJlc3RvcmVUZXh0RGlyZWN0aW9uKHRoaXMuY3R4LCBvcHRzLnRleHREaXJlY3Rpb24pO1xuICAgIH1cbiBkcmF3VGl0bGUoKSB7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHRpdGxlT3B0cyA9IG9wdHMudGl0bGU7XG4gICAgICAgIGNvbnN0IHRpdGxlRm9udCA9IHRvRm9udCh0aXRsZU9wdHMuZm9udCk7XG4gICAgICAgIGNvbnN0IHRpdGxlUGFkZGluZyA9IHRvUGFkZGluZyh0aXRsZU9wdHMucGFkZGluZyk7XG4gICAgICAgIGlmICghdGl0bGVPcHRzLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBydGxIZWxwZXIgPSBnZXRSdGxBZGFwdGVyKG9wdHMucnRsLCB0aGlzLmxlZnQsIHRoaXMud2lkdGgpO1xuICAgICAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSB0aXRsZU9wdHMucG9zaXRpb247XG4gICAgICAgIGNvbnN0IGhhbGZGb250U2l6ZSA9IHRpdGxlRm9udC5zaXplIC8gMjtcbiAgICAgICAgY29uc3QgdG9wUGFkZGluZ1BsdXNIYWxmRm9udFNpemUgPSB0aXRsZVBhZGRpbmcudG9wICsgaGFsZkZvbnRTaXplO1xuICAgICAgICBsZXQgeTtcbiAgICAgICAgbGV0IGxlZnQgPSB0aGlzLmxlZnQ7XG4gICAgICAgIGxldCBtYXhXaWR0aCA9IHRoaXMud2lkdGg7XG4gICAgICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICBtYXhXaWR0aCA9IE1hdGgubWF4KC4uLnRoaXMubGluZVdpZHRocyk7XG4gICAgICAgICAgICB5ID0gdGhpcy50b3AgKyB0b3BQYWRkaW5nUGx1c0hhbGZGb250U2l6ZTtcbiAgICAgICAgICAgIGxlZnQgPSBfYWxpZ25TdGFydEVuZChvcHRzLmFsaWduLCBsZWZ0LCB0aGlzLnJpZ2h0IC0gbWF4V2lkdGgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbWF4SGVpZ2h0ID0gdGhpcy5jb2x1bW5TaXplcy5yZWR1Y2UoKGFjYywgc2l6ZSk9Pk1hdGgubWF4KGFjYywgc2l6ZS5oZWlnaHQpLCAwKTtcbiAgICAgICAgICAgIHkgPSB0b3BQYWRkaW5nUGx1c0hhbGZGb250U2l6ZSArIF9hbGlnblN0YXJ0RW5kKG9wdHMuYWxpZ24sIHRoaXMudG9wLCB0aGlzLmJvdHRvbSAtIG1heEhlaWdodCAtIG9wdHMubGFiZWxzLnBhZGRpbmcgLSB0aGlzLl9jb21wdXRlVGl0bGVIZWlnaHQoKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeCA9IF9hbGlnblN0YXJ0RW5kKHBvc2l0aW9uLCBsZWZ0LCBsZWZ0ICsgbWF4V2lkdGgpO1xuICAgICAgICBjdHgudGV4dEFsaWduID0gcnRsSGVscGVyLnRleHRBbGlnbihfdG9MZWZ0UmlnaHRDZW50ZXIocG9zaXRpb24pKTtcbiAgICAgICAgY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSB0aXRsZU9wdHMuY29sb3I7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSB0aXRsZU9wdHMuY29sb3I7XG4gICAgICAgIGN0eC5mb250ID0gdGl0bGVGb250LnN0cmluZztcbiAgICAgICAgcmVuZGVyVGV4dChjdHgsIHRpdGxlT3B0cy50ZXh0LCB4LCB5LCB0aXRsZUZvbnQpO1xuICAgIH1cbiBfY29tcHV0ZVRpdGxlSGVpZ2h0KCkge1xuICAgICAgICBjb25zdCB0aXRsZU9wdHMgPSB0aGlzLm9wdGlvbnMudGl0bGU7XG4gICAgICAgIGNvbnN0IHRpdGxlRm9udCA9IHRvRm9udCh0aXRsZU9wdHMuZm9udCk7XG4gICAgICAgIGNvbnN0IHRpdGxlUGFkZGluZyA9IHRvUGFkZGluZyh0aXRsZU9wdHMucGFkZGluZyk7XG4gICAgICAgIHJldHVybiB0aXRsZU9wdHMuZGlzcGxheSA/IHRpdGxlRm9udC5saW5lSGVpZ2h0ICsgdGl0bGVQYWRkaW5nLmhlaWdodCA6IDA7XG4gICAgfVxuIF9nZXRMZWdlbmRJdGVtQXQoeCwgeSkge1xuICAgICAgICBsZXQgaSwgaGl0Qm94LCBsaDtcbiAgICAgICAgaWYgKF9pc0JldHdlZW4oeCwgdGhpcy5sZWZ0LCB0aGlzLnJpZ2h0KSAmJiBfaXNCZXR3ZWVuKHksIHRoaXMudG9wLCB0aGlzLmJvdHRvbSkpIHtcbiAgICAgICAgICAgIGxoID0gdGhpcy5sZWdlbmRIaXRCb3hlcztcbiAgICAgICAgICAgIGZvcihpID0gMDsgaSA8IGxoLmxlbmd0aDsgKytpKXtcbiAgICAgICAgICAgICAgICBoaXRCb3ggPSBsaFtpXTtcbiAgICAgICAgICAgICAgICBpZiAoX2lzQmV0d2Vlbih4LCBoaXRCb3gubGVmdCwgaGl0Qm94LmxlZnQgKyBoaXRCb3gud2lkdGgpICYmIF9pc0JldHdlZW4oeSwgaGl0Qm94LnRvcCwgaGl0Qm94LnRvcCArIGhpdEJveC5oZWlnaHQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxlZ2VuZEl0ZW1zW2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gaGFuZGxlRXZlbnQoZSkge1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBpZiAoIWlzTGlzdGVuZWQoZS50eXBlLCBvcHRzKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhvdmVyZWRJdGVtID0gdGhpcy5fZ2V0TGVnZW5kSXRlbUF0KGUueCwgZS55KTtcbiAgICAgICAgaWYgKGUudHlwZSA9PT0gJ21vdXNlbW92ZScgfHwgZS50eXBlID09PSAnbW91c2VvdXQnKSB7XG4gICAgICAgICAgICBjb25zdCBwcmV2aW91cyA9IHRoaXMuX2hvdmVyZWRJdGVtO1xuICAgICAgICAgICAgY29uc3Qgc2FtZUl0ZW0gPSBpdGVtc0VxdWFsKHByZXZpb3VzLCBob3ZlcmVkSXRlbSk7XG4gICAgICAgICAgICBpZiAocHJldmlvdXMgJiYgIXNhbWVJdGVtKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sob3B0cy5vbkxlYXZlLCBbXG4gICAgICAgICAgICAgICAgICAgIGUsXG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzLFxuICAgICAgICAgICAgICAgICAgICB0aGlzXG4gICAgICAgICAgICAgICAgXSwgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9ob3ZlcmVkSXRlbSA9IGhvdmVyZWRJdGVtO1xuICAgICAgICAgICAgaWYgKGhvdmVyZWRJdGVtICYmICFzYW1lSXRlbSkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG9wdHMub25Ib3ZlciwgW1xuICAgICAgICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICAgICAgICBob3ZlcmVkSXRlbSxcbiAgICAgICAgICAgICAgICAgICAgdGhpc1xuICAgICAgICAgICAgICAgIF0sIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGhvdmVyZWRJdGVtKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhvcHRzLm9uQ2xpY2ssIFtcbiAgICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICAgIGhvdmVyZWRJdGVtLFxuICAgICAgICAgICAgICAgIHRoaXNcbiAgICAgICAgICAgIF0sIHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gY2FsY3VsYXRlSXRlbVNpemUoYm94V2lkdGgsIGxhYmVsRm9udCwgY3R4LCBsZWdlbmRJdGVtLCBfaXRlbUhlaWdodCkge1xuICAgIGNvbnN0IGl0ZW1XaWR0aCA9IGNhbGN1bGF0ZUl0ZW1XaWR0aChsZWdlbmRJdGVtLCBib3hXaWR0aCwgbGFiZWxGb250LCBjdHgpO1xuICAgIGNvbnN0IGl0ZW1IZWlnaHQgPSBjYWxjdWxhdGVJdGVtSGVpZ2h0KF9pdGVtSGVpZ2h0LCBsZWdlbmRJdGVtLCBsYWJlbEZvbnQubGluZUhlaWdodCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaXRlbVdpZHRoLFxuICAgICAgICBpdGVtSGVpZ2h0XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNhbGN1bGF0ZUl0ZW1XaWR0aChsZWdlbmRJdGVtLCBib3hXaWR0aCwgbGFiZWxGb250LCBjdHgpIHtcbiAgICBsZXQgbGVnZW5kSXRlbVRleHQgPSBsZWdlbmRJdGVtLnRleHQ7XG4gICAgaWYgKGxlZ2VuZEl0ZW1UZXh0ICYmIHR5cGVvZiBsZWdlbmRJdGVtVGV4dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgbGVnZW5kSXRlbVRleHQgPSBsZWdlbmRJdGVtVGV4dC5yZWR1Y2UoKGEsIGIpPT5hLmxlbmd0aCA+IGIubGVuZ3RoID8gYSA6IGIpO1xuICAgIH1cbiAgICByZXR1cm4gYm94V2lkdGggKyBsYWJlbEZvbnQuc2l6ZSAvIDIgKyBjdHgubWVhc3VyZVRleHQobGVnZW5kSXRlbVRleHQpLndpZHRoO1xufVxuZnVuY3Rpb24gY2FsY3VsYXRlSXRlbUhlaWdodChfaXRlbUhlaWdodCwgbGVnZW5kSXRlbSwgZm9udExpbmVIZWlnaHQpIHtcbiAgICBsZXQgaXRlbUhlaWdodCA9IF9pdGVtSGVpZ2h0O1xuICAgIGlmICh0eXBlb2YgbGVnZW5kSXRlbS50ZXh0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICBpdGVtSGVpZ2h0ID0gY2FsY3VsYXRlTGVnZW5kSXRlbUhlaWdodChsZWdlbmRJdGVtLCBmb250TGluZUhlaWdodCk7XG4gICAgfVxuICAgIHJldHVybiBpdGVtSGVpZ2h0O1xufVxuZnVuY3Rpb24gY2FsY3VsYXRlTGVnZW5kSXRlbUhlaWdodChsZWdlbmRJdGVtLCBmb250TGluZUhlaWdodCkge1xuICAgIGNvbnN0IGxhYmVsSGVpZ2h0ID0gbGVnZW5kSXRlbS50ZXh0ID8gbGVnZW5kSXRlbS50ZXh0Lmxlbmd0aCA6IDA7XG4gICAgcmV0dXJuIGZvbnRMaW5lSGVpZ2h0ICogbGFiZWxIZWlnaHQ7XG59XG5mdW5jdGlvbiBpc0xpc3RlbmVkKHR5cGUsIG9wdHMpIHtcbiAgICBpZiAoKHR5cGUgPT09ICdtb3VzZW1vdmUnIHx8IHR5cGUgPT09ICdtb3VzZW91dCcpICYmIChvcHRzLm9uSG92ZXIgfHwgb3B0cy5vbkxlYXZlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKG9wdHMub25DbGljayAmJiAodHlwZSA9PT0gJ2NsaWNrJyB8fCB0eXBlID09PSAnbW91c2V1cCcpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG52YXIgcGx1Z2luX2xlZ2VuZCA9IHtcbiAgICBpZDogJ2xlZ2VuZCcsXG4gX2VsZW1lbnQ6IExlZ2VuZCxcbiAgICBzdGFydCAoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGxlZ2VuZCA9IGNoYXJ0LmxlZ2VuZCA9IG5ldyBMZWdlbmQoe1xuICAgICAgICAgICAgY3R4OiBjaGFydC5jdHgsXG4gICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgY2hhcnRcbiAgICAgICAgfSk7XG4gICAgICAgIGxheW91dHMuY29uZmlndXJlKGNoYXJ0LCBsZWdlbmQsIG9wdGlvbnMpO1xuICAgICAgICBsYXlvdXRzLmFkZEJveChjaGFydCwgbGVnZW5kKTtcbiAgICB9LFxuICAgIHN0b3AgKGNoYXJ0KSB7XG4gICAgICAgIGxheW91dHMucmVtb3ZlQm94KGNoYXJ0LCBjaGFydC5sZWdlbmQpO1xuICAgICAgICBkZWxldGUgY2hhcnQubGVnZW5kO1xuICAgIH0sXG4gICAgYmVmb3JlVXBkYXRlIChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgbGVnZW5kID0gY2hhcnQubGVnZW5kO1xuICAgICAgICBsYXlvdXRzLmNvbmZpZ3VyZShjaGFydCwgbGVnZW5kLCBvcHRpb25zKTtcbiAgICAgICAgbGVnZW5kLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH0sXG4gICAgYWZ0ZXJVcGRhdGUgKGNoYXJ0KSB7XG4gICAgICAgIGNvbnN0IGxlZ2VuZCA9IGNoYXJ0LmxlZ2VuZDtcbiAgICAgICAgbGVnZW5kLmJ1aWxkTGFiZWxzKCk7XG4gICAgICAgIGxlZ2VuZC5hZGp1c3RIaXRCb3hlcygpO1xuICAgIH0sXG4gICAgYWZ0ZXJFdmVudCAoY2hhcnQsIGFyZ3MpIHtcbiAgICAgICAgaWYgKCFhcmdzLnJlcGxheSkge1xuICAgICAgICAgICAgY2hhcnQubGVnZW5kLmhhbmRsZUV2ZW50KGFyZ3MuZXZlbnQpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBkZWZhdWx0czoge1xuICAgICAgICBkaXNwbGF5OiB0cnVlLFxuICAgICAgICBwb3NpdGlvbjogJ3RvcCcsXG4gICAgICAgIGFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgZnVsbFNpemU6IHRydWUsXG4gICAgICAgIHJldmVyc2U6IGZhbHNlLFxuICAgICAgICB3ZWlnaHQ6IDEwMDAsXG4gICAgICAgIG9uQ2xpY2sgKGUsIGxlZ2VuZEl0ZW0sIGxlZ2VuZCkge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBsZWdlbmRJdGVtLmRhdGFzZXRJbmRleDtcbiAgICAgICAgICAgIGNvbnN0IGNpID0gbGVnZW5kLmNoYXJ0O1xuICAgICAgICAgICAgaWYgKGNpLmlzRGF0YXNldFZpc2libGUoaW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgY2kuaGlkZShpbmRleCk7XG4gICAgICAgICAgICAgICAgbGVnZW5kSXRlbS5oaWRkZW4gPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjaS5zaG93KGluZGV4KTtcbiAgICAgICAgICAgICAgICBsZWdlbmRJdGVtLmhpZGRlbiA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvbkhvdmVyOiBudWxsLFxuICAgICAgICBvbkxlYXZlOiBudWxsLFxuICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgIGNvbG9yOiAoY3R4KT0+Y3R4LmNoYXJ0Lm9wdGlvbnMuY29sb3IsXG4gICAgICAgICAgICBib3hXaWR0aDogNDAsXG4gICAgICAgICAgICBwYWRkaW5nOiAxMCxcbiAgICAgICAgICAgIGdlbmVyYXRlTGFiZWxzIChjaGFydCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFzZXRzID0gY2hhcnQuZGF0YS5kYXRhc2V0cztcbiAgICAgICAgICAgICAgICBjb25zdCB7IGxhYmVsczogeyB1c2VQb2ludFN0eWxlICwgcG9pbnRTdHlsZSAsIHRleHRBbGlnbiAsIGNvbG9yICwgdXNlQm9yZGVyUmFkaXVzICwgYm9yZGVyUmFkaXVzICB9ICB9ID0gY2hhcnQubGVnZW5kLm9wdGlvbnM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoYXJ0Ll9nZXRTb3J0ZWREYXRhc2V0TWV0YXMoKS5tYXAoKG1ldGEpPT57XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlID0gbWV0YS5jb250cm9sbGVyLmdldFN0eWxlKHVzZVBvaW50U3R5bGUgPyAwIDogdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYm9yZGVyV2lkdGggPSB0b1BhZGRpbmcoc3R5bGUuYm9yZGVyV2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogZGF0YXNldHNbbWV0YS5pbmRleF0ubGFiZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxsU3R5bGU6IHN0eWxlLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRDb2xvcjogY29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBoaWRkZW46ICFtZXRhLnZpc2libGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lQ2FwOiBzdHlsZS5ib3JkZXJDYXBTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVEYXNoOiBzdHlsZS5ib3JkZXJEYXNoLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZURhc2hPZmZzZXQ6IHN0eWxlLmJvcmRlckRhc2hPZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lSm9pbjogc3R5bGUuYm9yZGVySm9pblN0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZVdpZHRoOiAoYm9yZGVyV2lkdGgud2lkdGggKyBib3JkZXJXaWR0aC5oZWlnaHQpIC8gNCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZVN0eWxlOiBzdHlsZS5ib3JkZXJDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50U3R5bGU6IHBvaW50U3R5bGUgfHwgc3R5bGUucG9pbnRTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiBzdHlsZS5yb3RhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbjogdGV4dEFsaWduIHx8IHN0eWxlLnRleHRBbGlnbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogdXNlQm9yZGVyUmFkaXVzICYmIChib3JkZXJSYWRpdXMgfHwgc3R5bGUuYm9yZGVyUmFkaXVzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFzZXRJbmRleDogbWV0YS5pbmRleFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0sIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0aXRsZToge1xuICAgICAgICAgICAgY29sb3I6IChjdHgpPT5jdHguY2hhcnQub3B0aW9ucy5jb2xvcixcbiAgICAgICAgICAgIGRpc3BsYXk6IGZhbHNlLFxuICAgICAgICAgICAgcG9zaXRpb246ICdjZW50ZXInLFxuICAgICAgICAgICAgdGV4dDogJydcbiAgICAgICAgfVxuICAgIH0sXG4gICAgZGVzY3JpcHRvcnM6IHtcbiAgICAgICAgX3NjcmlwdGFibGU6IChuYW1lKT0+IW5hbWUuc3RhcnRzV2l0aCgnb24nKSxcbiAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICBfc2NyaXB0YWJsZTogKG5hbWUpPT4hW1xuICAgICAgICAgICAgICAgICAgICAnZ2VuZXJhdGVMYWJlbHMnLFxuICAgICAgICAgICAgICAgICAgICAnZmlsdGVyJyxcbiAgICAgICAgICAgICAgICAgICAgJ3NvcnQnXG4gICAgICAgICAgICAgICAgXS5pbmNsdWRlcyhuYW1lKVxuICAgICAgICB9XG4gICAgfVxufTtcblxuY2xhc3MgVGl0bGUgZXh0ZW5kcyBFbGVtZW50IHtcbiBjb25zdHJ1Y3Rvcihjb25maWcpe1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmNoYXJ0ID0gY29uZmlnLmNoYXJ0O1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBjb25maWcub3B0aW9ucztcbiAgICAgICAgdGhpcy5jdHggPSBjb25maWcuY3R4O1xuICAgICAgICB0aGlzLl9wYWRkaW5nID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnRvcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5ib3R0b20gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubGVmdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5yaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy53aWR0aCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMud2VpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmZ1bGxTaXplID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB1cGRhdGUobWF4V2lkdGgsIG1heEhlaWdodCkge1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgICAgICB0aGlzLmxlZnQgPSAwO1xuICAgICAgICB0aGlzLnRvcCA9IDA7XG4gICAgICAgIGlmICghb3B0cy5kaXNwbGF5KSB7XG4gICAgICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5oZWlnaHQgPSB0aGlzLnJpZ2h0ID0gdGhpcy5ib3R0b20gPSAwO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMud2lkdGggPSB0aGlzLnJpZ2h0ID0gbWF4V2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5ib3R0b20gPSBtYXhIZWlnaHQ7XG4gICAgICAgIGNvbnN0IGxpbmVDb3VudCA9IGlzQXJyYXkob3B0cy50ZXh0KSA/IG9wdHMudGV4dC5sZW5ndGggOiAxO1xuICAgICAgICB0aGlzLl9wYWRkaW5nID0gdG9QYWRkaW5nKG9wdHMucGFkZGluZyk7XG4gICAgICAgIGNvbnN0IHRleHRTaXplID0gbGluZUNvdW50ICogdG9Gb250KG9wdHMuZm9udCkubGluZUhlaWdodCArIHRoaXMuX3BhZGRpbmcuaGVpZ2h0O1xuICAgICAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSB0ZXh0U2l6ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSB0ZXh0U2l6ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpc0hvcml6b250YWwoKSB7XG4gICAgICAgIGNvbnN0IHBvcyA9IHRoaXMub3B0aW9ucy5wb3NpdGlvbjtcbiAgICAgICAgcmV0dXJuIHBvcyA9PT0gJ3RvcCcgfHwgcG9zID09PSAnYm90dG9tJztcbiAgICB9XG4gICAgX2RyYXdBcmdzKG9mZnNldCkge1xuICAgICAgICBjb25zdCB7IHRvcCAsIGxlZnQgLCBib3R0b20gLCByaWdodCAsIG9wdGlvbnMgIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBhbGlnbiA9IG9wdGlvbnMuYWxpZ247XG4gICAgICAgIGxldCByb3RhdGlvbiA9IDA7XG4gICAgICAgIGxldCBtYXhXaWR0aCwgdGl0bGVYLCB0aXRsZVk7XG4gICAgICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICB0aXRsZVggPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgbGVmdCwgcmlnaHQpO1xuICAgICAgICAgICAgdGl0bGVZID0gdG9wICsgb2Zmc2V0O1xuICAgICAgICAgICAgbWF4V2lkdGggPSByaWdodCAtIGxlZnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5wb3NpdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgICAgICAgdGl0bGVYID0gbGVmdCArIG9mZnNldDtcbiAgICAgICAgICAgICAgICB0aXRsZVkgPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgYm90dG9tLCB0b3ApO1xuICAgICAgICAgICAgICAgIHJvdGF0aW9uID0gUEkgKiAtMC41O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aXRsZVggPSByaWdodCAtIG9mZnNldDtcbiAgICAgICAgICAgICAgICB0aXRsZVkgPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgdG9wLCBib3R0b20pO1xuICAgICAgICAgICAgICAgIHJvdGF0aW9uID0gUEkgKiAwLjU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtYXhXaWR0aCA9IGJvdHRvbSAtIHRvcDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGl0bGVYLFxuICAgICAgICAgICAgdGl0bGVZLFxuICAgICAgICAgICAgbWF4V2lkdGgsXG4gICAgICAgICAgICByb3RhdGlvblxuICAgICAgICB9O1xuICAgIH1cbiAgICBkcmF3KCkge1xuICAgICAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgaWYgKCFvcHRzLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmb250T3B0cyA9IHRvRm9udChvcHRzLmZvbnQpO1xuICAgICAgICBjb25zdCBsaW5lSGVpZ2h0ID0gZm9udE9wdHMubGluZUhlaWdodDtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gbGluZUhlaWdodCAvIDIgKyB0aGlzLl9wYWRkaW5nLnRvcDtcbiAgICAgICAgY29uc3QgeyB0aXRsZVggLCB0aXRsZVkgLCBtYXhXaWR0aCAsIHJvdGF0aW9uICB9ID0gdGhpcy5fZHJhd0FyZ3Mob2Zmc2V0KTtcbiAgICAgICAgcmVuZGVyVGV4dChjdHgsIG9wdHMudGV4dCwgMCwgMCwgZm9udE9wdHMsIHtcbiAgICAgICAgICAgIGNvbG9yOiBvcHRzLmNvbG9yLFxuICAgICAgICAgICAgbWF4V2lkdGgsXG4gICAgICAgICAgICByb3RhdGlvbixcbiAgICAgICAgICAgIHRleHRBbGlnbjogX3RvTGVmdFJpZ2h0Q2VudGVyKG9wdHMuYWxpZ24pLFxuICAgICAgICAgICAgdGV4dEJhc2VsaW5lOiAnbWlkZGxlJyxcbiAgICAgICAgICAgIHRyYW5zbGF0aW9uOiBbXG4gICAgICAgICAgICAgICAgdGl0bGVYLFxuICAgICAgICAgICAgICAgIHRpdGxlWVxuICAgICAgICAgICAgXVxuICAgICAgICB9KTtcbiAgICB9XG59XG5mdW5jdGlvbiBjcmVhdGVUaXRsZShjaGFydCwgdGl0bGVPcHRzKSB7XG4gICAgY29uc3QgdGl0bGUgPSBuZXcgVGl0bGUoe1xuICAgICAgICBjdHg6IGNoYXJ0LmN0eCxcbiAgICAgICAgb3B0aW9uczogdGl0bGVPcHRzLFxuICAgICAgICBjaGFydFxuICAgIH0pO1xuICAgIGxheW91dHMuY29uZmlndXJlKGNoYXJ0LCB0aXRsZSwgdGl0bGVPcHRzKTtcbiAgICBsYXlvdXRzLmFkZEJveChjaGFydCwgdGl0bGUpO1xuICAgIGNoYXJ0LnRpdGxlQmxvY2sgPSB0aXRsZTtcbn1cbnZhciBwbHVnaW5fdGl0bGUgPSB7XG4gICAgaWQ6ICd0aXRsZScsXG4gX2VsZW1lbnQ6IFRpdGxlLFxuICAgIHN0YXJ0IChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgY3JlYXRlVGl0bGUoY2hhcnQsIG9wdGlvbnMpO1xuICAgIH0sXG4gICAgc3RvcCAoY2hhcnQpIHtcbiAgICAgICAgY29uc3QgdGl0bGVCbG9jayA9IGNoYXJ0LnRpdGxlQmxvY2s7XG4gICAgICAgIGxheW91dHMucmVtb3ZlQm94KGNoYXJ0LCB0aXRsZUJsb2NrKTtcbiAgICAgICAgZGVsZXRlIGNoYXJ0LnRpdGxlQmxvY2s7XG4gICAgfSxcbiAgICBiZWZvcmVVcGRhdGUgKGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB0aXRsZSA9IGNoYXJ0LnRpdGxlQmxvY2s7XG4gICAgICAgIGxheW91dHMuY29uZmlndXJlKGNoYXJ0LCB0aXRsZSwgb3B0aW9ucyk7XG4gICAgICAgIHRpdGxlLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH0sXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgYWxpZ246ICdjZW50ZXInLFxuICAgICAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICAgICAgZm9udDoge1xuICAgICAgICAgICAgd2VpZ2h0OiAnYm9sZCdcbiAgICAgICAgfSxcbiAgICAgICAgZnVsbFNpemU6IHRydWUsXG4gICAgICAgIHBhZGRpbmc6IDEwLFxuICAgICAgICBwb3NpdGlvbjogJ3RvcCcsXG4gICAgICAgIHRleHQ6ICcnLFxuICAgICAgICB3ZWlnaHQ6IDIwMDBcbiAgICB9LFxuICAgIGRlZmF1bHRSb3V0ZXM6IHtcbiAgICAgICAgY29sb3I6ICdjb2xvcidcbiAgICB9LFxuICAgIGRlc2NyaXB0b3JzOiB7XG4gICAgICAgIF9zY3JpcHRhYmxlOiB0cnVlLFxuICAgICAgICBfaW5kZXhhYmxlOiBmYWxzZVxuICAgIH1cbn07XG5cbmNvbnN0IG1hcCA9IG5ldyBXZWFrTWFwKCk7XG52YXIgcGx1Z2luX3N1YnRpdGxlID0ge1xuICAgIGlkOiAnc3VidGl0bGUnLFxuICAgIHN0YXJ0IChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgdGl0bGUgPSBuZXcgVGl0bGUoe1xuICAgICAgICAgICAgY3R4OiBjaGFydC5jdHgsXG4gICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgY2hhcnRcbiAgICAgICAgfSk7XG4gICAgICAgIGxheW91dHMuY29uZmlndXJlKGNoYXJ0LCB0aXRsZSwgb3B0aW9ucyk7XG4gICAgICAgIGxheW91dHMuYWRkQm94KGNoYXJ0LCB0aXRsZSk7XG4gICAgICAgIG1hcC5zZXQoY2hhcnQsIHRpdGxlKTtcbiAgICB9LFxuICAgIHN0b3AgKGNoYXJ0KSB7XG4gICAgICAgIGxheW91dHMucmVtb3ZlQm94KGNoYXJ0LCBtYXAuZ2V0KGNoYXJ0KSk7XG4gICAgICAgIG1hcC5kZWxldGUoY2hhcnQpO1xuICAgIH0sXG4gICAgYmVmb3JlVXBkYXRlIChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgdGl0bGUgPSBtYXAuZ2V0KGNoYXJ0KTtcbiAgICAgICAgbGF5b3V0cy5jb25maWd1cmUoY2hhcnQsIHRpdGxlLCBvcHRpb25zKTtcbiAgICAgICAgdGl0bGUub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfSxcbiAgICBkZWZhdWx0czoge1xuICAgICAgICBhbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIGRpc3BsYXk6IGZhbHNlLFxuICAgICAgICBmb250OiB7XG4gICAgICAgICAgICB3ZWlnaHQ6ICdub3JtYWwnXG4gICAgICAgIH0sXG4gICAgICAgIGZ1bGxTaXplOiB0cnVlLFxuICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICBwb3NpdGlvbjogJ3RvcCcsXG4gICAgICAgIHRleHQ6ICcnLFxuICAgICAgICB3ZWlnaHQ6IDE1MDBcbiAgICB9LFxuICAgIGRlZmF1bHRSb3V0ZXM6IHtcbiAgICAgICAgY29sb3I6ICdjb2xvcidcbiAgICB9LFxuICAgIGRlc2NyaXB0b3JzOiB7XG4gICAgICAgIF9zY3JpcHRhYmxlOiB0cnVlLFxuICAgICAgICBfaW5kZXhhYmxlOiBmYWxzZVxuICAgIH1cbn07XG5cbmNvbnN0IHBvc2l0aW9uZXJzID0ge1xuIGF2ZXJhZ2UgKGl0ZW1zKSB7XG4gICAgICAgIGlmICghaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGksIGxlbjtcbiAgICAgICAgbGV0IHggPSAwO1xuICAgICAgICBsZXQgeSA9IDA7XG4gICAgICAgIGxldCBjb3VudCA9IDA7XG4gICAgICAgIGZvcihpID0gMCwgbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpe1xuICAgICAgICAgICAgY29uc3QgZWwgPSBpdGVtc1tpXS5lbGVtZW50O1xuICAgICAgICAgICAgaWYgKGVsICYmIGVsLmhhc1ZhbHVlKCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwb3MgPSBlbC50b29sdGlwUG9zaXRpb24oKTtcbiAgICAgICAgICAgICAgICB4ICs9IHBvcy54O1xuICAgICAgICAgICAgICAgIHkgKz0gcG9zLnk7XG4gICAgICAgICAgICAgICAgKytjb3VudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogeCAvIGNvdW50LFxuICAgICAgICAgICAgeTogeSAvIGNvdW50XG4gICAgICAgIH07XG4gICAgfSxcbiBuZWFyZXN0IChpdGVtcywgZXZlbnRQb3NpdGlvbikge1xuICAgICAgICBpZiAoIWl0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGxldCB4ID0gZXZlbnRQb3NpdGlvbi54O1xuICAgICAgICBsZXQgeSA9IGV2ZW50UG9zaXRpb24ueTtcbiAgICAgICAgbGV0IG1pbkRpc3RhbmNlID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICBsZXQgaSwgbGVuLCBuZWFyZXN0RWxlbWVudDtcbiAgICAgICAgZm9yKGkgPSAwLCBsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBsZW47ICsraSl7XG4gICAgICAgICAgICBjb25zdCBlbCA9IGl0ZW1zW2ldLmVsZW1lbnQ7XG4gICAgICAgICAgICBpZiAoZWwgJiYgZWwuaGFzVmFsdWUoKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNlbnRlciA9IGVsLmdldENlbnRlclBvaW50KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZCA9IGRpc3RhbmNlQmV0d2VlblBvaW50cyhldmVudFBvc2l0aW9uLCBjZW50ZXIpO1xuICAgICAgICAgICAgICAgIGlmIChkIDwgbWluRGlzdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgbWluRGlzdGFuY2UgPSBkO1xuICAgICAgICAgICAgICAgICAgICBuZWFyZXN0RWxlbWVudCA9IGVsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobmVhcmVzdEVsZW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRwID0gbmVhcmVzdEVsZW1lbnQudG9vbHRpcFBvc2l0aW9uKCk7XG4gICAgICAgICAgICB4ID0gdHAueDtcbiAgICAgICAgICAgIHkgPSB0cC55O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4LFxuICAgICAgICAgICAgeVxuICAgICAgICB9O1xuICAgIH1cbn07XG5mdW5jdGlvbiBwdXNoT3JDb25jYXQoYmFzZSwgdG9QdXNoKSB7XG4gICAgaWYgKHRvUHVzaCkge1xuICAgICAgICBpZiAoaXNBcnJheSh0b1B1c2gpKSB7XG4gICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShiYXNlLCB0b1B1c2gpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYmFzZS5wdXNoKHRvUHVzaCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJhc2U7XG59XG4gZnVuY3Rpb24gc3BsaXROZXdsaW5lcyhzdHIpIHtcbiAgICBpZiAoKHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnIHx8IHN0ciBpbnN0YW5jZW9mIFN0cmluZykgJiYgc3RyLmluZGV4T2YoJ1xcbicpID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIHN0ci5zcGxpdCgnXFxuJyk7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG59XG4gZnVuY3Rpb24gY3JlYXRlVG9vbHRpcEl0ZW0oY2hhcnQsIGl0ZW0pIHtcbiAgICBjb25zdCB7IGVsZW1lbnQgLCBkYXRhc2V0SW5kZXggLCBpbmRleCAgfSA9IGl0ZW07XG4gICAgY29uc3QgY29udHJvbGxlciA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCkuY29udHJvbGxlcjtcbiAgICBjb25zdCB7IGxhYmVsICwgdmFsdWUgIH0gPSBjb250cm9sbGVyLmdldExhYmVsQW5kVmFsdWUoaW5kZXgpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGNoYXJ0LFxuICAgICAgICBsYWJlbCxcbiAgICAgICAgcGFyc2VkOiBjb250cm9sbGVyLmdldFBhcnNlZChpbmRleCksXG4gICAgICAgIHJhdzogY2hhcnQuZGF0YS5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdLmRhdGFbaW5kZXhdLFxuICAgICAgICBmb3JtYXR0ZWRWYWx1ZTogdmFsdWUsXG4gICAgICAgIGRhdGFzZXQ6IGNvbnRyb2xsZXIuZ2V0RGF0YXNldCgpLFxuICAgICAgICBkYXRhSW5kZXg6IGluZGV4LFxuICAgICAgICBkYXRhc2V0SW5kZXgsXG4gICAgICAgIGVsZW1lbnRcbiAgICB9O1xufVxuIGZ1bmN0aW9uIGdldFRvb2x0aXBTaXplKHRvb2x0aXAsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBjdHggPSB0b29sdGlwLmNoYXJ0LmN0eDtcbiAgICBjb25zdCB7IGJvZHkgLCBmb290ZXIgLCB0aXRsZSAgfSA9IHRvb2x0aXA7XG4gICAgY29uc3QgeyBib3hXaWR0aCAsIGJveEhlaWdodCAgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgYm9keUZvbnQgPSB0b0ZvbnQob3B0aW9ucy5ib2R5Rm9udCk7XG4gICAgY29uc3QgdGl0bGVGb250ID0gdG9Gb250KG9wdGlvbnMudGl0bGVGb250KTtcbiAgICBjb25zdCBmb290ZXJGb250ID0gdG9Gb250KG9wdGlvbnMuZm9vdGVyRm9udCk7XG4gICAgY29uc3QgdGl0bGVMaW5lQ291bnQgPSB0aXRsZS5sZW5ndGg7XG4gICAgY29uc3QgZm9vdGVyTGluZUNvdW50ID0gZm9vdGVyLmxlbmd0aDtcbiAgICBjb25zdCBib2R5TGluZUl0ZW1Db3VudCA9IGJvZHkubGVuZ3RoO1xuICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcob3B0aW9ucy5wYWRkaW5nKTtcbiAgICBsZXQgaGVpZ2h0ID0gcGFkZGluZy5oZWlnaHQ7XG4gICAgbGV0IHdpZHRoID0gMDtcbiAgICBsZXQgY29tYmluZWRCb2R5TGVuZ3RoID0gYm9keS5yZWR1Y2UoKGNvdW50LCBib2R5SXRlbSk9PmNvdW50ICsgYm9keUl0ZW0uYmVmb3JlLmxlbmd0aCArIGJvZHlJdGVtLmxpbmVzLmxlbmd0aCArIGJvZHlJdGVtLmFmdGVyLmxlbmd0aCwgMCk7XG4gICAgY29tYmluZWRCb2R5TGVuZ3RoICs9IHRvb2x0aXAuYmVmb3JlQm9keS5sZW5ndGggKyB0b29sdGlwLmFmdGVyQm9keS5sZW5ndGg7XG4gICAgaWYgKHRpdGxlTGluZUNvdW50KSB7XG4gICAgICAgIGhlaWdodCArPSB0aXRsZUxpbmVDb3VudCAqIHRpdGxlRm9udC5saW5lSGVpZ2h0ICsgKHRpdGxlTGluZUNvdW50IC0gMSkgKiBvcHRpb25zLnRpdGxlU3BhY2luZyArIG9wdGlvbnMudGl0bGVNYXJnaW5Cb3R0b207XG4gICAgfVxuICAgIGlmIChjb21iaW5lZEJvZHlMZW5ndGgpIHtcbiAgICAgICAgY29uc3QgYm9keUxpbmVIZWlnaHQgPSBvcHRpb25zLmRpc3BsYXlDb2xvcnMgPyBNYXRoLm1heChib3hIZWlnaHQsIGJvZHlGb250LmxpbmVIZWlnaHQpIDogYm9keUZvbnQubGluZUhlaWdodDtcbiAgICAgICAgaGVpZ2h0ICs9IGJvZHlMaW5lSXRlbUNvdW50ICogYm9keUxpbmVIZWlnaHQgKyAoY29tYmluZWRCb2R5TGVuZ3RoIC0gYm9keUxpbmVJdGVtQ291bnQpICogYm9keUZvbnQubGluZUhlaWdodCArIChjb21iaW5lZEJvZHlMZW5ndGggLSAxKSAqIG9wdGlvbnMuYm9keVNwYWNpbmc7XG4gICAgfVxuICAgIGlmIChmb290ZXJMaW5lQ291bnQpIHtcbiAgICAgICAgaGVpZ2h0ICs9IG9wdGlvbnMuZm9vdGVyTWFyZ2luVG9wICsgZm9vdGVyTGluZUNvdW50ICogZm9vdGVyRm9udC5saW5lSGVpZ2h0ICsgKGZvb3RlckxpbmVDb3VudCAtIDEpICogb3B0aW9ucy5mb290ZXJTcGFjaW5nO1xuICAgIH1cbiAgICBsZXQgd2lkdGhQYWRkaW5nID0gMDtcbiAgICBjb25zdCBtYXhMaW5lV2lkdGggPSBmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgIHdpZHRoID0gTWF0aC5tYXgod2lkdGgsIGN0eC5tZWFzdXJlVGV4dChsaW5lKS53aWR0aCArIHdpZHRoUGFkZGluZyk7XG4gICAgfTtcbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC5mb250ID0gdGl0bGVGb250LnN0cmluZztcbiAgICBlYWNoKHRvb2x0aXAudGl0bGUsIG1heExpbmVXaWR0aCk7XG4gICAgY3R4LmZvbnQgPSBib2R5Rm9udC5zdHJpbmc7XG4gICAgZWFjaCh0b29sdGlwLmJlZm9yZUJvZHkuY29uY2F0KHRvb2x0aXAuYWZ0ZXJCb2R5KSwgbWF4TGluZVdpZHRoKTtcbiAgICB3aWR0aFBhZGRpbmcgPSBvcHRpb25zLmRpc3BsYXlDb2xvcnMgPyBib3hXaWR0aCArIDIgKyBvcHRpb25zLmJveFBhZGRpbmcgOiAwO1xuICAgIGVhY2goYm9keSwgKGJvZHlJdGVtKT0+e1xuICAgICAgICBlYWNoKGJvZHlJdGVtLmJlZm9yZSwgbWF4TGluZVdpZHRoKTtcbiAgICAgICAgZWFjaChib2R5SXRlbS5saW5lcywgbWF4TGluZVdpZHRoKTtcbiAgICAgICAgZWFjaChib2R5SXRlbS5hZnRlciwgbWF4TGluZVdpZHRoKTtcbiAgICB9KTtcbiAgICB3aWR0aFBhZGRpbmcgPSAwO1xuICAgIGN0eC5mb250ID0gZm9vdGVyRm9udC5zdHJpbmc7XG4gICAgZWFjaCh0b29sdGlwLmZvb3RlciwgbWF4TGluZVdpZHRoKTtcbiAgICBjdHgucmVzdG9yZSgpO1xuICAgIHdpZHRoICs9IHBhZGRpbmcud2lkdGg7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgd2lkdGgsXG4gICAgICAgIGhlaWdodFxuICAgIH07XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVZQWxpZ24oY2hhcnQsIHNpemUpIHtcbiAgICBjb25zdCB7IHkgLCBoZWlnaHQgIH0gPSBzaXplO1xuICAgIGlmICh5IDwgaGVpZ2h0IC8gMikge1xuICAgICAgICByZXR1cm4gJ3RvcCc7XG4gICAgfSBlbHNlIGlmICh5ID4gY2hhcnQuaGVpZ2h0IC0gaGVpZ2h0IC8gMikge1xuICAgICAgICByZXR1cm4gJ2JvdHRvbSc7XG4gICAgfVxuICAgIHJldHVybiAnY2VudGVyJztcbn1cbmZ1bmN0aW9uIGRvZXNOb3RGaXRXaXRoQWxpZ24oeEFsaWduLCBjaGFydCwgb3B0aW9ucywgc2l6ZSkge1xuICAgIGNvbnN0IHsgeCAsIHdpZHRoICB9ID0gc2l6ZTtcbiAgICBjb25zdCBjYXJldCA9IG9wdGlvbnMuY2FyZXRTaXplICsgb3B0aW9ucy5jYXJldFBhZGRpbmc7XG4gICAgaWYgKHhBbGlnbiA9PT0gJ2xlZnQnICYmIHggKyB3aWR0aCArIGNhcmV0ID4gY2hhcnQud2lkdGgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICh4QWxpZ24gPT09ICdyaWdodCcgJiYgeCAtIHdpZHRoIC0gY2FyZXQgPCAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRldGVybWluZVhBbGlnbihjaGFydCwgb3B0aW9ucywgc2l6ZSwgeUFsaWduKSB7XG4gICAgY29uc3QgeyB4ICwgd2lkdGggIH0gPSBzaXplO1xuICAgIGNvbnN0IHsgd2lkdGg6IGNoYXJ0V2lkdGggLCBjaGFydEFyZWE6IHsgbGVmdCAsIHJpZ2h0ICB9ICB9ID0gY2hhcnQ7XG4gICAgbGV0IHhBbGlnbiA9ICdjZW50ZXInO1xuICAgIGlmICh5QWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgIHhBbGlnbiA9IHggPD0gKGxlZnQgKyByaWdodCkgLyAyID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICB9IGVsc2UgaWYgKHggPD0gd2lkdGggLyAyKSB7XG4gICAgICAgIHhBbGlnbiA9ICdsZWZ0JztcbiAgICB9IGVsc2UgaWYgKHggPj0gY2hhcnRXaWR0aCAtIHdpZHRoIC8gMikge1xuICAgICAgICB4QWxpZ24gPSAncmlnaHQnO1xuICAgIH1cbiAgICBpZiAoZG9lc05vdEZpdFdpdGhBbGlnbih4QWxpZ24sIGNoYXJ0LCBvcHRpb25zLCBzaXplKSkge1xuICAgICAgICB4QWxpZ24gPSAnY2VudGVyJztcbiAgICB9XG4gICAgcmV0dXJuIHhBbGlnbjtcbn1cbiBmdW5jdGlvbiBkZXRlcm1pbmVBbGlnbm1lbnQoY2hhcnQsIG9wdGlvbnMsIHNpemUpIHtcbiAgICBjb25zdCB5QWxpZ24gPSBzaXplLnlBbGlnbiB8fCBvcHRpb25zLnlBbGlnbiB8fCBkZXRlcm1pbmVZQWxpZ24oY2hhcnQsIHNpemUpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHhBbGlnbjogc2l6ZS54QWxpZ24gfHwgb3B0aW9ucy54QWxpZ24gfHwgZGV0ZXJtaW5lWEFsaWduKGNoYXJ0LCBvcHRpb25zLCBzaXplLCB5QWxpZ24pLFxuICAgICAgICB5QWxpZ25cbiAgICB9O1xufVxuZnVuY3Rpb24gYWxpZ25YKHNpemUsIHhBbGlnbikge1xuICAgIGxldCB7IHggLCB3aWR0aCAgfSA9IHNpemU7XG4gICAgaWYgKHhBbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICB4IC09IHdpZHRoO1xuICAgIH0gZWxzZSBpZiAoeEFsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICB4IC09IHdpZHRoIC8gMjtcbiAgICB9XG4gICAgcmV0dXJuIHg7XG59XG5mdW5jdGlvbiBhbGlnblkoc2l6ZSwgeUFsaWduLCBwYWRkaW5nQW5kU2l6ZSkge1xuICAgIGxldCB7IHkgLCBoZWlnaHQgIH0gPSBzaXplO1xuICAgIGlmICh5QWxpZ24gPT09ICd0b3AnKSB7XG4gICAgICAgIHkgKz0gcGFkZGluZ0FuZFNpemU7XG4gICAgfSBlbHNlIGlmICh5QWxpZ24gPT09ICdib3R0b20nKSB7XG4gICAgICAgIHkgLT0gaGVpZ2h0ICsgcGFkZGluZ0FuZFNpemU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgeSAtPSBoZWlnaHQgLyAyO1xuICAgIH1cbiAgICByZXR1cm4geTtcbn1cbiBmdW5jdGlvbiBnZXRCYWNrZ3JvdW5kUG9pbnQob3B0aW9ucywgc2l6ZSwgYWxpZ25tZW50LCBjaGFydCkge1xuICAgIGNvbnN0IHsgY2FyZXRTaXplICwgY2FyZXRQYWRkaW5nICwgY29ybmVyUmFkaXVzICB9ID0gb3B0aW9ucztcbiAgICBjb25zdCB7IHhBbGlnbiAsIHlBbGlnbiAgfSA9IGFsaWdubWVudDtcbiAgICBjb25zdCBwYWRkaW5nQW5kU2l6ZSA9IGNhcmV0U2l6ZSArIGNhcmV0UGFkZGluZztcbiAgICBjb25zdCB7IHRvcExlZnQgLCB0b3BSaWdodCAsIGJvdHRvbUxlZnQgLCBib3R0b21SaWdodCAgfSA9IHRvVFJCTENvcm5lcnMoY29ybmVyUmFkaXVzKTtcbiAgICBsZXQgeCA9IGFsaWduWChzaXplLCB4QWxpZ24pO1xuICAgIGNvbnN0IHkgPSBhbGlnblkoc2l6ZSwgeUFsaWduLCBwYWRkaW5nQW5kU2l6ZSk7XG4gICAgaWYgKHlBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgaWYgKHhBbGlnbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgICB4ICs9IHBhZGRpbmdBbmRTaXplO1xuICAgICAgICB9IGVsc2UgaWYgKHhBbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICAgeCAtPSBwYWRkaW5nQW5kU2l6ZTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoeEFsaWduID09PSAnbGVmdCcpIHtcbiAgICAgICAgeCAtPSBNYXRoLm1heCh0b3BMZWZ0LCBib3R0b21MZWZ0KSArIGNhcmV0U2l6ZTtcbiAgICB9IGVsc2UgaWYgKHhBbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICB4ICs9IE1hdGgubWF4KHRvcFJpZ2h0LCBib3R0b21SaWdodCkgKyBjYXJldFNpemU7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHg6IF9saW1pdFZhbHVlKHgsIDAsIGNoYXJ0LndpZHRoIC0gc2l6ZS53aWR0aCksXG4gICAgICAgIHk6IF9saW1pdFZhbHVlKHksIDAsIGNoYXJ0LmhlaWdodCAtIHNpemUuaGVpZ2h0KVxuICAgIH07XG59XG5mdW5jdGlvbiBnZXRBbGlnbmVkWCh0b29sdGlwLCBhbGlnbiwgb3B0aW9ucykge1xuICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcob3B0aW9ucy5wYWRkaW5nKTtcbiAgICByZXR1cm4gYWxpZ24gPT09ICdjZW50ZXInID8gdG9vbHRpcC54ICsgdG9vbHRpcC53aWR0aCAvIDIgOiBhbGlnbiA9PT0gJ3JpZ2h0JyA/IHRvb2x0aXAueCArIHRvb2x0aXAud2lkdGggLSBwYWRkaW5nLnJpZ2h0IDogdG9vbHRpcC54ICsgcGFkZGluZy5sZWZ0O1xufVxuIGZ1bmN0aW9uIGdldEJlZm9yZUFmdGVyQm9keUxpbmVzKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHB1c2hPckNvbmNhdChbXSwgc3BsaXROZXdsaW5lcyhjYWxsYmFjaykpO1xufVxuZnVuY3Rpb24gY3JlYXRlVG9vbHRpcENvbnRleHQocGFyZW50LCB0b29sdGlwLCB0b29sdGlwSXRlbXMpIHtcbiAgICByZXR1cm4gY3JlYXRlQ29udGV4dChwYXJlbnQsIHtcbiAgICAgICAgdG9vbHRpcCxcbiAgICAgICAgdG9vbHRpcEl0ZW1zLFxuICAgICAgICB0eXBlOiAndG9vbHRpcCdcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIG92ZXJyaWRlQ2FsbGJhY2tzKGNhbGxiYWNrcywgY29udGV4dCkge1xuICAgIGNvbnN0IG92ZXJyaWRlID0gY29udGV4dCAmJiBjb250ZXh0LmRhdGFzZXQgJiYgY29udGV4dC5kYXRhc2V0LnRvb2x0aXAgJiYgY29udGV4dC5kYXRhc2V0LnRvb2x0aXAuY2FsbGJhY2tzO1xuICAgIHJldHVybiBvdmVycmlkZSA/IGNhbGxiYWNrcy5vdmVycmlkZShvdmVycmlkZSkgOiBjYWxsYmFja3M7XG59XG5jb25zdCBkZWZhdWx0Q2FsbGJhY2tzID0ge1xuICAgIGJlZm9yZVRpdGxlOiBub29wLFxuICAgIHRpdGxlICh0b29sdGlwSXRlbXMpIHtcbiAgICAgICAgaWYgKHRvb2x0aXBJdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gdG9vbHRpcEl0ZW1zWzBdO1xuICAgICAgICAgICAgY29uc3QgbGFiZWxzID0gaXRlbS5jaGFydC5kYXRhLmxhYmVscztcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsQ291bnQgPSBsYWJlbHMgPyBsYWJlbHMubGVuZ3RoIDogMDtcbiAgICAgICAgICAgIGlmICh0aGlzICYmIHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMubW9kZSA9PT0gJ2RhdGFzZXQnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uZGF0YXNldC5sYWJlbCB8fCAnJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS5sYWJlbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmxhYmVsO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsYWJlbENvdW50ID4gMCAmJiBpdGVtLmRhdGFJbmRleCA8IGxhYmVsQ291bnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGFiZWxzW2l0ZW0uZGF0YUluZGV4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfSxcbiAgICBhZnRlclRpdGxlOiBub29wLFxuICAgIGJlZm9yZUJvZHk6IG5vb3AsXG4gICAgYmVmb3JlTGFiZWw6IG5vb3AsXG4gICAgbGFiZWwgKHRvb2x0aXBJdGVtKSB7XG4gICAgICAgIGlmICh0aGlzICYmIHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMubW9kZSA9PT0gJ2RhdGFzZXQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdG9vbHRpcEl0ZW0ubGFiZWwgKyAnOiAnICsgdG9vbHRpcEl0ZW0uZm9ybWF0dGVkVmFsdWUgfHwgdG9vbHRpcEl0ZW0uZm9ybWF0dGVkVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGxhYmVsID0gdG9vbHRpcEl0ZW0uZGF0YXNldC5sYWJlbCB8fCAnJztcbiAgICAgICAgaWYgKGxhYmVsKSB7XG4gICAgICAgICAgICBsYWJlbCArPSAnOiAnO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdG9vbHRpcEl0ZW0uZm9ybWF0dGVkVmFsdWU7XG4gICAgICAgIGlmICghaXNOdWxsT3JVbmRlZih2YWx1ZSkpIHtcbiAgICAgICAgICAgIGxhYmVsICs9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsYWJlbDtcbiAgICB9LFxuICAgIGxhYmVsQ29sb3IgKHRvb2x0aXBJdGVtKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0b29sdGlwSXRlbS5jaGFydC5nZXREYXRhc2V0TWV0YSh0b29sdGlwSXRlbS5kYXRhc2V0SW5kZXgpO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gbWV0YS5jb250cm9sbGVyLmdldFN0eWxlKHRvb2x0aXBJdGVtLmRhdGFJbmRleCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBib3JkZXJDb2xvcjogb3B0aW9ucy5ib3JkZXJDb2xvcixcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICBib3JkZXJXaWR0aDogb3B0aW9ucy5ib3JkZXJXaWR0aCxcbiAgICAgICAgICAgIGJvcmRlckRhc2g6IG9wdGlvbnMuYm9yZGVyRGFzaCxcbiAgICAgICAgICAgIGJvcmRlckRhc2hPZmZzZXQ6IG9wdGlvbnMuYm9yZGVyRGFzaE9mZnNldCxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogMFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgbGFiZWxUZXh0Q29sb3IgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmJvZHlDb2xvcjtcbiAgICB9LFxuICAgIGxhYmVsUG9pbnRTdHlsZSAodG9vbHRpcEl0ZW0pIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRvb2x0aXBJdGVtLmNoYXJ0LmdldERhdGFzZXRNZXRhKHRvb2x0aXBJdGVtLmRhdGFzZXRJbmRleCk7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBtZXRhLmNvbnRyb2xsZXIuZ2V0U3R5bGUodG9vbHRpcEl0ZW0uZGF0YUluZGV4KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBvaW50U3R5bGU6IG9wdGlvbnMucG9pbnRTdHlsZSxcbiAgICAgICAgICAgIHJvdGF0aW9uOiBvcHRpb25zLnJvdGF0aW9uXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBhZnRlckxhYmVsOiBub29wLFxuICAgIGFmdGVyQm9keTogbm9vcCxcbiAgICBiZWZvcmVGb290ZXI6IG5vb3AsXG4gICAgZm9vdGVyOiBub29wLFxuICAgIGFmdGVyRm9vdGVyOiBub29wXG59O1xuIGZ1bmN0aW9uIGludm9rZUNhbGxiYWNrV2l0aEZhbGxiYWNrKGNhbGxiYWNrcywgbmFtZSwgY3R4LCBhcmcpIHtcbiAgICBjb25zdCByZXN1bHQgPSBjYWxsYmFja3NbbmFtZV0uY2FsbChjdHgsIGFyZyk7XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0Q2FsbGJhY2tzW25hbWVdLmNhbGwoY3R4LCBhcmcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuY2xhc3MgVG9vbHRpcCBleHRlbmRzIEVsZW1lbnQge1xuIHN0YXRpYyBwb3NpdGlvbmVycyA9IHBvc2l0aW9uZXJzO1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZyl7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMub3BhY2l0eSA9IDA7XG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IFtdO1xuICAgICAgICB0aGlzLl9ldmVudFBvc2l0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9zaXplID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9jYWNoZWRBbmltYXRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl90b29sdGlwSXRlbXMgPSBbXTtcbiAgICAgICAgdGhpcy4kYW5pbWF0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy4kY29udGV4dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5jaGFydCA9IGNvbmZpZy5jaGFydDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gY29uZmlnLm9wdGlvbnM7XG4gICAgICAgIHRoaXMuZGF0YVBvaW50cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy50aXRsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5iZWZvcmVCb2R5ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmJvZHkgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuYWZ0ZXJCb2R5ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmZvb3RlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy54QWxpZ24gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMueUFsaWduID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMueSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMud2lkdGggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuY2FyZXRYID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmNhcmV0WSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5sYWJlbENvbG9ycyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5sYWJlbFBvaW50U3R5bGVzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmxhYmVsVGV4dENvbG9ycyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaW5pdGlhbGl6ZShvcHRpb25zKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuX2NhY2hlZEFuaW1hdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuJGNvbnRleHQgPSB1bmRlZmluZWQ7XG4gICAgfVxuIF9yZXNvbHZlQW5pbWF0aW9ucygpIHtcbiAgICAgICAgY29uc3QgY2FjaGVkID0gdGhpcy5fY2FjaGVkQW5pbWF0aW9ucztcbiAgICAgICAgaWYgKGNhY2hlZCkge1xuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoKSk7XG4gICAgICAgIGNvbnN0IG9wdHMgPSBvcHRpb25zLmVuYWJsZWQgJiYgY2hhcnQub3B0aW9ucy5hbmltYXRpb24gJiYgb3B0aW9ucy5hbmltYXRpb25zO1xuICAgICAgICBjb25zdCBhbmltYXRpb25zID0gbmV3IEFuaW1hdGlvbnModGhpcy5jaGFydCwgb3B0cyk7XG4gICAgICAgIGlmIChvcHRzLl9jYWNoZWFibGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlZEFuaW1hdGlvbnMgPSBPYmplY3QuZnJlZXplKGFuaW1hdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbmltYXRpb25zO1xuICAgIH1cbiBnZXRDb250ZXh0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy4kY29udGV4dCB8fCAodGhpcy4kY29udGV4dCA9IGNyZWF0ZVRvb2x0aXBDb250ZXh0KHRoaXMuY2hhcnQuZ2V0Q29udGV4dCgpLCB0aGlzLCB0aGlzLl90b29sdGlwSXRlbXMpKTtcbiAgICB9XG4gICAgZ2V0VGl0bGUoY29udGV4dCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IGNhbGxiYWNrcyAgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGJlZm9yZVRpdGxlID0gaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2soY2FsbGJhY2tzLCAnYmVmb3JlVGl0bGUnLCB0aGlzLCBjb250ZXh0KTtcbiAgICAgICAgY29uc3QgdGl0bGUgPSBpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhjYWxsYmFja3MsICd0aXRsZScsIHRoaXMsIGNvbnRleHQpO1xuICAgICAgICBjb25zdCBhZnRlclRpdGxlID0gaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2soY2FsbGJhY2tzLCAnYWZ0ZXJUaXRsZScsIHRoaXMsIGNvbnRleHQpO1xuICAgICAgICBsZXQgbGluZXMgPSBbXTtcbiAgICAgICAgbGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIHNwbGl0TmV3bGluZXMoYmVmb3JlVGl0bGUpKTtcbiAgICAgICAgbGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIHNwbGl0TmV3bGluZXModGl0bGUpKTtcbiAgICAgICAgbGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIHNwbGl0TmV3bGluZXMoYWZ0ZXJUaXRsZSkpO1xuICAgICAgICByZXR1cm4gbGluZXM7XG4gICAgfVxuICAgIGdldEJlZm9yZUJvZHkodG9vbHRpcEl0ZW1zLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBnZXRCZWZvcmVBZnRlckJvZHlMaW5lcyhpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhvcHRpb25zLmNhbGxiYWNrcywgJ2JlZm9yZUJvZHknLCB0aGlzLCB0b29sdGlwSXRlbXMpKTtcbiAgICB9XG4gICAgZ2V0Qm9keSh0b29sdGlwSXRlbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBjYWxsYmFja3MgIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBib2R5SXRlbXMgPSBbXTtcbiAgICAgICAgZWFjaCh0b29sdGlwSXRlbXMsIChjb250ZXh0KT0+e1xuICAgICAgICAgICAgY29uc3QgYm9keUl0ZW0gPSB7XG4gICAgICAgICAgICAgICAgYmVmb3JlOiBbXSxcbiAgICAgICAgICAgICAgICBsaW5lczogW10sXG4gICAgICAgICAgICAgICAgYWZ0ZXI6IFtdXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3Qgc2NvcGVkID0gb3ZlcnJpZGVDYWxsYmFja3MoY2FsbGJhY2tzLCBjb250ZXh0KTtcbiAgICAgICAgICAgIHB1c2hPckNvbmNhdChib2R5SXRlbS5iZWZvcmUsIHNwbGl0TmV3bGluZXMoaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2soc2NvcGVkLCAnYmVmb3JlTGFiZWwnLCB0aGlzLCBjb250ZXh0KSkpO1xuICAgICAgICAgICAgcHVzaE9yQ29uY2F0KGJvZHlJdGVtLmxpbmVzLCBpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhzY29wZWQsICdsYWJlbCcsIHRoaXMsIGNvbnRleHQpKTtcbiAgICAgICAgICAgIHB1c2hPckNvbmNhdChib2R5SXRlbS5hZnRlciwgc3BsaXROZXdsaW5lcyhpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhzY29wZWQsICdhZnRlckxhYmVsJywgdGhpcywgY29udGV4dCkpKTtcbiAgICAgICAgICAgIGJvZHlJdGVtcy5wdXNoKGJvZHlJdGVtKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBib2R5SXRlbXM7XG4gICAgfVxuICAgIGdldEFmdGVyQm9keSh0b29sdGlwSXRlbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGdldEJlZm9yZUFmdGVyQm9keUxpbmVzKGludm9rZUNhbGxiYWNrV2l0aEZhbGxiYWNrKG9wdGlvbnMuY2FsbGJhY2tzLCAnYWZ0ZXJCb2R5JywgdGhpcywgdG9vbHRpcEl0ZW1zKSk7XG4gICAgfVxuICAgIGdldEZvb3Rlcih0b29sdGlwSXRlbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBjYWxsYmFja3MgIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBiZWZvcmVGb290ZXIgPSBpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhjYWxsYmFja3MsICdiZWZvcmVGb290ZXInLCB0aGlzLCB0b29sdGlwSXRlbXMpO1xuICAgICAgICBjb25zdCBmb290ZXIgPSBpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhjYWxsYmFja3MsICdmb290ZXInLCB0aGlzLCB0b29sdGlwSXRlbXMpO1xuICAgICAgICBjb25zdCBhZnRlckZvb3RlciA9IGludm9rZUNhbGxiYWNrV2l0aEZhbGxiYWNrKGNhbGxiYWNrcywgJ2FmdGVyRm9vdGVyJywgdGhpcywgdG9vbHRpcEl0ZW1zKTtcbiAgICAgICAgbGV0IGxpbmVzID0gW107XG4gICAgICAgIGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBzcGxpdE5ld2xpbmVzKGJlZm9yZUZvb3RlcikpO1xuICAgICAgICBsaW5lcyA9IHB1c2hPckNvbmNhdChsaW5lcywgc3BsaXROZXdsaW5lcyhmb290ZXIpKTtcbiAgICAgICAgbGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIHNwbGl0TmV3bGluZXMoYWZ0ZXJGb290ZXIpKTtcbiAgICAgICAgcmV0dXJuIGxpbmVzO1xuICAgIH1cbiBfY3JlYXRlSXRlbXMob3B0aW9ucykge1xuICAgICAgICBjb25zdCBhY3RpdmUgPSB0aGlzLl9hY3RpdmU7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmNoYXJ0LmRhdGE7XG4gICAgICAgIGNvbnN0IGxhYmVsQ29sb3JzID0gW107XG4gICAgICAgIGNvbnN0IGxhYmVsUG9pbnRTdHlsZXMgPSBbXTtcbiAgICAgICAgY29uc3QgbGFiZWxUZXh0Q29sb3JzID0gW107XG4gICAgICAgIGxldCB0b29sdGlwSXRlbXMgPSBbXTtcbiAgICAgICAgbGV0IGksIGxlbjtcbiAgICAgICAgZm9yKGkgPSAwLCBsZW4gPSBhY3RpdmUubGVuZ3RoOyBpIDwgbGVuOyArK2kpe1xuICAgICAgICAgICAgdG9vbHRpcEl0ZW1zLnB1c2goY3JlYXRlVG9vbHRpcEl0ZW0odGhpcy5jaGFydCwgYWN0aXZlW2ldKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuZmlsdGVyKSB7XG4gICAgICAgICAgICB0b29sdGlwSXRlbXMgPSB0b29sdGlwSXRlbXMuZmlsdGVyKChlbGVtZW50LCBpbmRleCwgYXJyYXkpPT5vcHRpb25zLmZpbHRlcihlbGVtZW50LCBpbmRleCwgYXJyYXksIGRhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5pdGVtU29ydCkge1xuICAgICAgICAgICAgdG9vbHRpcEl0ZW1zID0gdG9vbHRpcEl0ZW1zLnNvcnQoKGEsIGIpPT5vcHRpb25zLml0ZW1Tb3J0KGEsIGIsIGRhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICBlYWNoKHRvb2x0aXBJdGVtcywgKGNvbnRleHQpPT57XG4gICAgICAgICAgICBjb25zdCBzY29wZWQgPSBvdmVycmlkZUNhbGxiYWNrcyhvcHRpb25zLmNhbGxiYWNrcywgY29udGV4dCk7XG4gICAgICAgICAgICBsYWJlbENvbG9ycy5wdXNoKGludm9rZUNhbGxiYWNrV2l0aEZhbGxiYWNrKHNjb3BlZCwgJ2xhYmVsQ29sb3InLCB0aGlzLCBjb250ZXh0KSk7XG4gICAgICAgICAgICBsYWJlbFBvaW50U3R5bGVzLnB1c2goaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2soc2NvcGVkLCAnbGFiZWxQb2ludFN0eWxlJywgdGhpcywgY29udGV4dCkpO1xuICAgICAgICAgICAgbGFiZWxUZXh0Q29sb3JzLnB1c2goaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2soc2NvcGVkLCAnbGFiZWxUZXh0Q29sb3InLCB0aGlzLCBjb250ZXh0KSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmxhYmVsQ29sb3JzID0gbGFiZWxDb2xvcnM7XG4gICAgICAgIHRoaXMubGFiZWxQb2ludFN0eWxlcyA9IGxhYmVsUG9pbnRTdHlsZXM7XG4gICAgICAgIHRoaXMubGFiZWxUZXh0Q29sb3JzID0gbGFiZWxUZXh0Q29sb3JzO1xuICAgICAgICB0aGlzLmRhdGFQb2ludHMgPSB0b29sdGlwSXRlbXM7XG4gICAgICAgIHJldHVybiB0b29sdGlwSXRlbXM7XG4gICAgfVxuICAgIHVwZGF0ZShjaGFuZ2VkLCByZXBsYXkpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucy5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICAgICAgY29uc3QgYWN0aXZlID0gdGhpcy5fYWN0aXZlO1xuICAgICAgICBsZXQgcHJvcGVydGllcztcbiAgICAgICAgbGV0IHRvb2x0aXBJdGVtcyA9IFtdO1xuICAgICAgICBpZiAoIWFjdGl2ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wYWNpdHkgIT09IDApIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzID0ge1xuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gcG9zaXRpb25lcnNbb3B0aW9ucy5wb3NpdGlvbl0uY2FsbCh0aGlzLCBhY3RpdmUsIHRoaXMuX2V2ZW50UG9zaXRpb24pO1xuICAgICAgICAgICAgdG9vbHRpcEl0ZW1zID0gdGhpcy5fY3JlYXRlSXRlbXMob3B0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLnRpdGxlID0gdGhpcy5nZXRUaXRsZSh0b29sdGlwSXRlbXMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy5iZWZvcmVCb2R5ID0gdGhpcy5nZXRCZWZvcmVCb2R5KHRvb2x0aXBJdGVtcywgb3B0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLmJvZHkgPSB0aGlzLmdldEJvZHkodG9vbHRpcEl0ZW1zLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHRoaXMuYWZ0ZXJCb2R5ID0gdGhpcy5nZXRBZnRlckJvZHkodG9vbHRpcEl0ZW1zLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHRoaXMuZm9vdGVyID0gdGhpcy5nZXRGb290ZXIodG9vbHRpcEl0ZW1zLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IHNpemUgPSB0aGlzLl9zaXplID0gZ2V0VG9vbHRpcFNpemUodGhpcywgb3B0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbkFuZFNpemUgPSBPYmplY3QuYXNzaWduKHt9LCBwb3NpdGlvbiwgc2l6ZSk7XG4gICAgICAgICAgICBjb25zdCBhbGlnbm1lbnQgPSBkZXRlcm1pbmVBbGlnbm1lbnQodGhpcy5jaGFydCwgb3B0aW9ucywgcG9zaXRpb25BbmRTaXplKTtcbiAgICAgICAgICAgIGNvbnN0IGJhY2tncm91bmRQb2ludCA9IGdldEJhY2tncm91bmRQb2ludChvcHRpb25zLCBwb3NpdGlvbkFuZFNpemUsIGFsaWdubWVudCwgdGhpcy5jaGFydCk7XG4gICAgICAgICAgICB0aGlzLnhBbGlnbiA9IGFsaWdubWVudC54QWxpZ247XG4gICAgICAgICAgICB0aGlzLnlBbGlnbiA9IGFsaWdubWVudC55QWxpZ247XG4gICAgICAgICAgICBwcm9wZXJ0aWVzID0ge1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICAgICAgeDogYmFja2dyb3VuZFBvaW50LngsXG4gICAgICAgICAgICAgICAgeTogYmFja2dyb3VuZFBvaW50LnksXG4gICAgICAgICAgICAgICAgd2lkdGg6IHNpemUud2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBzaXplLmhlaWdodCxcbiAgICAgICAgICAgICAgICBjYXJldFg6IHBvc2l0aW9uLngsXG4gICAgICAgICAgICAgICAgY2FyZXRZOiBwb3NpdGlvbi55XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Rvb2x0aXBJdGVtcyA9IHRvb2x0aXBJdGVtcztcbiAgICAgICAgdGhpcy4kY29udGV4dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc29sdmVBbmltYXRpb25zKCkudXBkYXRlKHRoaXMsIHByb3BlcnRpZXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGFuZ2VkICYmIG9wdGlvbnMuZXh0ZXJuYWwpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuZXh0ZXJuYWwuY2FsbCh0aGlzLCB7XG4gICAgICAgICAgICAgICAgY2hhcnQ6IHRoaXMuY2hhcnQsXG4gICAgICAgICAgICAgICAgdG9vbHRpcDogdGhpcyxcbiAgICAgICAgICAgICAgICByZXBsYXlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRyYXdDYXJldCh0b29sdGlwUG9pbnQsIGN0eCwgc2l6ZSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBjYXJldFBvc2l0aW9uID0gdGhpcy5nZXRDYXJldFBvc2l0aW9uKHRvb2x0aXBQb2ludCwgc2l6ZSwgb3B0aW9ucyk7XG4gICAgICAgIGN0eC5saW5lVG8oY2FyZXRQb3NpdGlvbi54MSwgY2FyZXRQb3NpdGlvbi55MSk7XG4gICAgICAgIGN0eC5saW5lVG8oY2FyZXRQb3NpdGlvbi54MiwgY2FyZXRQb3NpdGlvbi55Mik7XG4gICAgICAgIGN0eC5saW5lVG8oY2FyZXRQb3NpdGlvbi54MywgY2FyZXRQb3NpdGlvbi55Myk7XG4gICAgfVxuICAgIGdldENhcmV0UG9zaXRpb24odG9vbHRpcFBvaW50LCBzaXplLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgeEFsaWduICwgeUFsaWduICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBjYXJldFNpemUgLCBjb3JuZXJSYWRpdXMgIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCB7IHRvcExlZnQgLCB0b3BSaWdodCAsIGJvdHRvbUxlZnQgLCBib3R0b21SaWdodCAgfSA9IHRvVFJCTENvcm5lcnMoY29ybmVyUmFkaXVzKTtcbiAgICAgICAgY29uc3QgeyB4OiBwdFggLCB5OiBwdFkgIH0gPSB0b29sdGlwUG9pbnQ7XG4gICAgICAgIGNvbnN0IHsgd2lkdGggLCBoZWlnaHQgIH0gPSBzaXplO1xuICAgICAgICBsZXQgeDEsIHgyLCB4MywgeTEsIHkyLCB5MztcbiAgICAgICAgaWYgKHlBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgIHkyID0gcHRZICsgaGVpZ2h0IC8gMjtcbiAgICAgICAgICAgIGlmICh4QWxpZ24gPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgICAgIHgxID0gcHRYO1xuICAgICAgICAgICAgICAgIHgyID0geDEgLSBjYXJldFNpemU7XG4gICAgICAgICAgICAgICAgeTEgPSB5MiArIGNhcmV0U2l6ZTtcbiAgICAgICAgICAgICAgICB5MyA9IHkyIC0gY2FyZXRTaXplO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB4MSA9IHB0WCArIHdpZHRoO1xuICAgICAgICAgICAgICAgIHgyID0geDEgKyBjYXJldFNpemU7XG4gICAgICAgICAgICAgICAgeTEgPSB5MiAtIGNhcmV0U2l6ZTtcbiAgICAgICAgICAgICAgICB5MyA9IHkyICsgY2FyZXRTaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeDMgPSB4MTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh4QWxpZ24gPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgICAgIHgyID0gcHRYICsgTWF0aC5tYXgodG9wTGVmdCwgYm90dG9tTGVmdCkgKyBjYXJldFNpemU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHhBbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICAgICAgIHgyID0gcHRYICsgd2lkdGggLSBNYXRoLm1heCh0b3BSaWdodCwgYm90dG9tUmlnaHQpIC0gY2FyZXRTaXplO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB4MiA9IHRoaXMuY2FyZXRYO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHlBbGlnbiA9PT0gJ3RvcCcpIHtcbiAgICAgICAgICAgICAgICB5MSA9IHB0WTtcbiAgICAgICAgICAgICAgICB5MiA9IHkxIC0gY2FyZXRTaXplO1xuICAgICAgICAgICAgICAgIHgxID0geDIgLSBjYXJldFNpemU7XG4gICAgICAgICAgICAgICAgeDMgPSB4MiArIGNhcmV0U2l6ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgeTEgPSBwdFkgKyBoZWlnaHQ7XG4gICAgICAgICAgICAgICAgeTIgPSB5MSArIGNhcmV0U2l6ZTtcbiAgICAgICAgICAgICAgICB4MSA9IHgyICsgY2FyZXRTaXplO1xuICAgICAgICAgICAgICAgIHgzID0geDIgLSBjYXJldFNpemU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB5MyA9IHkxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4MSxcbiAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICB5MSxcbiAgICAgICAgICAgIHkyLFxuICAgICAgICAgICAgeTNcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZHJhd1RpdGxlKHB0LCBjdHgsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgdGl0bGUgPSB0aGlzLnRpdGxlO1xuICAgICAgICBjb25zdCBsZW5ndGggPSB0aXRsZS5sZW5ndGg7XG4gICAgICAgIGxldCB0aXRsZUZvbnQsIHRpdGxlU3BhY2luZywgaTtcbiAgICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgcnRsSGVscGVyID0gZ2V0UnRsQWRhcHRlcihvcHRpb25zLnJ0bCwgdGhpcy54LCB0aGlzLndpZHRoKTtcbiAgICAgICAgICAgIHB0LnggPSBnZXRBbGlnbmVkWCh0aGlzLCBvcHRpb25zLnRpdGxlQWxpZ24sIG9wdGlvbnMpO1xuICAgICAgICAgICAgY3R4LnRleHRBbGlnbiA9IHJ0bEhlbHBlci50ZXh0QWxpZ24ob3B0aW9ucy50aXRsZUFsaWduKTtcbiAgICAgICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICAgICAgICAgIHRpdGxlRm9udCA9IHRvRm9udChvcHRpb25zLnRpdGxlRm9udCk7XG4gICAgICAgICAgICB0aXRsZVNwYWNpbmcgPSBvcHRpb25zLnRpdGxlU3BhY2luZztcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLnRpdGxlQ29sb3I7XG4gICAgICAgICAgICBjdHguZm9udCA9IHRpdGxlRm9udC5zdHJpbmc7XG4gICAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSl7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxUZXh0KHRpdGxlW2ldLCBydGxIZWxwZXIueChwdC54KSwgcHQueSArIHRpdGxlRm9udC5saW5lSGVpZ2h0IC8gMik7XG4gICAgICAgICAgICAgICAgcHQueSArPSB0aXRsZUZvbnQubGluZUhlaWdodCArIHRpdGxlU3BhY2luZztcbiAgICAgICAgICAgICAgICBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBwdC55ICs9IG9wdGlvbnMudGl0bGVNYXJnaW5Cb3R0b20gLSB0aXRsZVNwYWNpbmc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuIF9kcmF3Q29sb3JCb3goY3R4LCBwdCwgaSwgcnRsSGVscGVyLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGxhYmVsQ29sb3IgPSB0aGlzLmxhYmVsQ29sb3JzW2ldO1xuICAgICAgICBjb25zdCBsYWJlbFBvaW50U3R5bGUgPSB0aGlzLmxhYmVsUG9pbnRTdHlsZXNbaV07XG4gICAgICAgIGNvbnN0IHsgYm94SGVpZ2h0ICwgYm94V2lkdGggIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBib2R5Rm9udCA9IHRvRm9udChvcHRpb25zLmJvZHlGb250KTtcbiAgICAgICAgY29uc3QgY29sb3JYID0gZ2V0QWxpZ25lZFgodGhpcywgJ2xlZnQnLCBvcHRpb25zKTtcbiAgICAgICAgY29uc3QgcnRsQ29sb3JYID0gcnRsSGVscGVyLngoY29sb3JYKTtcbiAgICAgICAgY29uc3QgeU9mZlNldCA9IGJveEhlaWdodCA8IGJvZHlGb250LmxpbmVIZWlnaHQgPyAoYm9keUZvbnQubGluZUhlaWdodCAtIGJveEhlaWdodCkgLyAyIDogMDtcbiAgICAgICAgY29uc3QgY29sb3JZID0gcHQueSArIHlPZmZTZXQ7XG4gICAgICAgIGlmIChvcHRpb25zLnVzZVBvaW50U3R5bGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGRyYXdPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIHJhZGl1czogTWF0aC5taW4oYm94V2lkdGgsIGJveEhlaWdodCkgLyAyLFxuICAgICAgICAgICAgICAgIHBvaW50U3R5bGU6IGxhYmVsUG9pbnRTdHlsZS5wb2ludFN0eWxlLFxuICAgICAgICAgICAgICAgIHJvdGF0aW9uOiBsYWJlbFBvaW50U3R5bGUucm90YXRpb24sXG4gICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDFcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBjZW50ZXJYID0gcnRsSGVscGVyLmxlZnRGb3JMdHIocnRsQ29sb3JYLCBib3hXaWR0aCkgKyBib3hXaWR0aCAvIDI7XG4gICAgICAgICAgICBjb25zdCBjZW50ZXJZID0gY29sb3JZICsgYm94SGVpZ2h0IC8gMjtcbiAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IG9wdGlvbnMubXVsdGlLZXlCYWNrZ3JvdW5kO1xuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMubXVsdGlLZXlCYWNrZ3JvdW5kO1xuICAgICAgICAgICAgZHJhd1BvaW50KGN0eCwgZHJhd09wdGlvbnMsIGNlbnRlclgsIGNlbnRlclkpO1xuICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gbGFiZWxDb2xvci5ib3JkZXJDb2xvcjtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBsYWJlbENvbG9yLmJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgICAgIGRyYXdQb2ludChjdHgsIGRyYXdPcHRpb25zLCBjZW50ZXJYLCBjZW50ZXJZKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN0eC5saW5lV2lkdGggPSBpc09iamVjdChsYWJlbENvbG9yLmJvcmRlcldpZHRoKSA/IE1hdGgubWF4KC4uLk9iamVjdC52YWx1ZXMobGFiZWxDb2xvci5ib3JkZXJXaWR0aCkpIDogbGFiZWxDb2xvci5ib3JkZXJXaWR0aCB8fCAxO1xuICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gbGFiZWxDb2xvci5ib3JkZXJDb2xvcjtcbiAgICAgICAgICAgIGN0eC5zZXRMaW5lRGFzaChsYWJlbENvbG9yLmJvcmRlckRhc2ggfHwgW10pO1xuICAgICAgICAgICAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gbGFiZWxDb2xvci5ib3JkZXJEYXNoT2Zmc2V0IHx8IDA7XG4gICAgICAgICAgICBjb25zdCBvdXRlclggPSBydGxIZWxwZXIubGVmdEZvckx0cihydGxDb2xvclgsIGJveFdpZHRoKTtcbiAgICAgICAgICAgIGNvbnN0IGlubmVyWCA9IHJ0bEhlbHBlci5sZWZ0Rm9yTHRyKHJ0bEhlbHBlci54UGx1cyhydGxDb2xvclgsIDEpLCBib3hXaWR0aCAtIDIpO1xuICAgICAgICAgICAgY29uc3QgYm9yZGVyUmFkaXVzID0gdG9UUkJMQ29ybmVycyhsYWJlbENvbG9yLmJvcmRlclJhZGl1cyk7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LnZhbHVlcyhib3JkZXJSYWRpdXMpLnNvbWUoKHYpPT52ICE9PSAwKSkge1xuICAgICAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5tdWx0aUtleUJhY2tncm91bmQ7XG4gICAgICAgICAgICAgICAgYWRkUm91bmRlZFJlY3RQYXRoKGN0eCwge1xuICAgICAgICAgICAgICAgICAgICB4OiBvdXRlclgsXG4gICAgICAgICAgICAgICAgICAgIHk6IGNvbG9yWSxcbiAgICAgICAgICAgICAgICAgICAgdzogYm94V2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGg6IGJveEhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiBib3JkZXJSYWRpdXNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gbGFiZWxDb2xvci5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgIGFkZFJvdW5kZWRSZWN0UGF0aChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgeDogaW5uZXJYLFxuICAgICAgICAgICAgICAgICAgICB5OiBjb2xvclkgKyAxLFxuICAgICAgICAgICAgICAgICAgICB3OiBib3hXaWR0aCAtIDIsXG4gICAgICAgICAgICAgICAgICAgIGg6IGJveEhlaWdodCAtIDIsXG4gICAgICAgICAgICAgICAgICAgIHJhZGl1czogYm9yZGVyUmFkaXVzXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMubXVsdGlLZXlCYWNrZ3JvdW5kO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsUmVjdChvdXRlclgsIGNvbG9yWSwgYm94V2lkdGgsIGJveEhlaWdodCk7XG4gICAgICAgICAgICAgICAgY3R4LnN0cm9rZVJlY3Qob3V0ZXJYLCBjb2xvclksIGJveFdpZHRoLCBib3hIZWlnaHQpO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBsYWJlbENvbG9yLmJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFJlY3QoaW5uZXJYLCBjb2xvclkgKyAxLCBib3hXaWR0aCAtIDIsIGJveEhlaWdodCAtIDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLmxhYmVsVGV4dENvbG9yc1tpXTtcbiAgICB9XG4gICAgZHJhd0JvZHkocHQsIGN0eCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IGJvZHkgIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IGJvZHlTcGFjaW5nICwgYm9keUFsaWduICwgZGlzcGxheUNvbG9ycyAsIGJveEhlaWdodCAsIGJveFdpZHRoICwgYm94UGFkZGluZyAgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGJvZHlGb250ID0gdG9Gb250KG9wdGlvbnMuYm9keUZvbnQpO1xuICAgICAgICBsZXQgYm9keUxpbmVIZWlnaHQgPSBib2R5Rm9udC5saW5lSGVpZ2h0O1xuICAgICAgICBsZXQgeExpbmVQYWRkaW5nID0gMDtcbiAgICAgICAgY29uc3QgcnRsSGVscGVyID0gZ2V0UnRsQWRhcHRlcihvcHRpb25zLnJ0bCwgdGhpcy54LCB0aGlzLndpZHRoKTtcbiAgICAgICAgY29uc3QgZmlsbExpbmVPZlRleHQgPSBmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICBjdHguZmlsbFRleHQobGluZSwgcnRsSGVscGVyLngocHQueCArIHhMaW5lUGFkZGluZyksIHB0LnkgKyBib2R5TGluZUhlaWdodCAvIDIpO1xuICAgICAgICAgICAgcHQueSArPSBib2R5TGluZUhlaWdodCArIGJvZHlTcGFjaW5nO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBib2R5QWxpZ25Gb3JDYWxjdWxhdGlvbiA9IHJ0bEhlbHBlci50ZXh0QWxpZ24oYm9keUFsaWduKTtcbiAgICAgICAgbGV0IGJvZHlJdGVtLCB0ZXh0Q29sb3IsIGxpbmVzLCBpLCBqLCBpbGVuLCBqbGVuO1xuICAgICAgICBjdHgudGV4dEFsaWduID0gYm9keUFsaWduO1xuICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgICAgIGN0eC5mb250ID0gYm9keUZvbnQuc3RyaW5nO1xuICAgICAgICBwdC54ID0gZ2V0QWxpZ25lZFgodGhpcywgYm9keUFsaWduRm9yQ2FsY3VsYXRpb24sIG9wdGlvbnMpO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5ib2R5Q29sb3I7XG4gICAgICAgIGVhY2godGhpcy5iZWZvcmVCb2R5LCBmaWxsTGluZU9mVGV4dCk7XG4gICAgICAgIHhMaW5lUGFkZGluZyA9IGRpc3BsYXlDb2xvcnMgJiYgYm9keUFsaWduRm9yQ2FsY3VsYXRpb24gIT09ICdyaWdodCcgPyBib2R5QWxpZ24gPT09ICdjZW50ZXInID8gYm94V2lkdGggLyAyICsgYm94UGFkZGluZyA6IGJveFdpZHRoICsgMiArIGJveFBhZGRpbmcgOiAwO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBib2R5Lmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBib2R5SXRlbSA9IGJvZHlbaV07XG4gICAgICAgICAgICB0ZXh0Q29sb3IgPSB0aGlzLmxhYmVsVGV4dENvbG9yc1tpXTtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSB0ZXh0Q29sb3I7XG4gICAgICAgICAgICBlYWNoKGJvZHlJdGVtLmJlZm9yZSwgZmlsbExpbmVPZlRleHQpO1xuICAgICAgICAgICAgbGluZXMgPSBib2R5SXRlbS5saW5lcztcbiAgICAgICAgICAgIGlmIChkaXNwbGF5Q29sb3JzICYmIGxpbmVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2RyYXdDb2xvckJveChjdHgsIHB0LCBpLCBydGxIZWxwZXIsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGJvZHlMaW5lSGVpZ2h0ID0gTWF0aC5tYXgoYm9keUZvbnQubGluZUhlaWdodCwgYm94SGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvcihqID0gMCwgamxlbiA9IGxpbmVzLmxlbmd0aDsgaiA8IGpsZW47ICsrail7XG4gICAgICAgICAgICAgICAgZmlsbExpbmVPZlRleHQobGluZXNbal0pO1xuICAgICAgICAgICAgICAgIGJvZHlMaW5lSGVpZ2h0ID0gYm9keUZvbnQubGluZUhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVhY2goYm9keUl0ZW0uYWZ0ZXIsIGZpbGxMaW5lT2ZUZXh0KTtcbiAgICAgICAgfVxuICAgICAgICB4TGluZVBhZGRpbmcgPSAwO1xuICAgICAgICBib2R5TGluZUhlaWdodCA9IGJvZHlGb250LmxpbmVIZWlnaHQ7XG4gICAgICAgIGVhY2godGhpcy5hZnRlckJvZHksIGZpbGxMaW5lT2ZUZXh0KTtcbiAgICAgICAgcHQueSAtPSBib2R5U3BhY2luZztcbiAgICB9XG4gICAgZHJhd0Zvb3RlcihwdCwgY3R4LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGZvb3RlciA9IHRoaXMuZm9vdGVyO1xuICAgICAgICBjb25zdCBsZW5ndGggPSBmb290ZXIubGVuZ3RoO1xuICAgICAgICBsZXQgZm9vdGVyRm9udCwgaTtcbiAgICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgcnRsSGVscGVyID0gZ2V0UnRsQWRhcHRlcihvcHRpb25zLnJ0bCwgdGhpcy54LCB0aGlzLndpZHRoKTtcbiAgICAgICAgICAgIHB0LnggPSBnZXRBbGlnbmVkWCh0aGlzLCBvcHRpb25zLmZvb3RlckFsaWduLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHB0LnkgKz0gb3B0aW9ucy5mb290ZXJNYXJnaW5Ub3A7XG4gICAgICAgICAgICBjdHgudGV4dEFsaWduID0gcnRsSGVscGVyLnRleHRBbGlnbihvcHRpb25zLmZvb3RlckFsaWduKTtcbiAgICAgICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICAgICAgICAgIGZvb3RlckZvbnQgPSB0b0ZvbnQob3B0aW9ucy5mb290ZXJGb250KTtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLmZvb3RlckNvbG9yO1xuICAgICAgICAgICAgY3R4LmZvbnQgPSBmb290ZXJGb250LnN0cmluZztcbiAgICAgICAgICAgIGZvcihpID0gMDsgaSA8IGxlbmd0aDsgKytpKXtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFRleHQoZm9vdGVyW2ldLCBydGxIZWxwZXIueChwdC54KSwgcHQueSArIGZvb3RlckZvbnQubGluZUhlaWdodCAvIDIpO1xuICAgICAgICAgICAgICAgIHB0LnkgKz0gZm9vdGVyRm9udC5saW5lSGVpZ2h0ICsgb3B0aW9ucy5mb290ZXJTcGFjaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGRyYXdCYWNrZ3JvdW5kKHB0LCBjdHgsIHRvb2x0aXBTaXplLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgeEFsaWduICwgeUFsaWduICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyB4ICwgeSAgfSA9IHB0O1xuICAgICAgICBjb25zdCB7IHdpZHRoICwgaGVpZ2h0ICB9ID0gdG9vbHRpcFNpemU7XG4gICAgICAgIGNvbnN0IHsgdG9wTGVmdCAsIHRvcFJpZ2h0ICwgYm90dG9tTGVmdCAsIGJvdHRvbVJpZ2h0ICB9ID0gdG9UUkJMQ29ybmVycyhvcHRpb25zLmNvcm5lclJhZGl1cyk7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLmJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gb3B0aW9ucy5ib3JkZXJDb2xvcjtcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IG9wdGlvbnMuYm9yZGVyV2lkdGg7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY3R4Lm1vdmVUbyh4ICsgdG9wTGVmdCwgeSk7XG4gICAgICAgIGlmICh5QWxpZ24gPT09ICd0b3AnKSB7XG4gICAgICAgICAgICB0aGlzLmRyYXdDYXJldChwdCwgY3R4LCB0b29sdGlwU2l6ZSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LmxpbmVUbyh4ICsgd2lkdGggLSB0b3BSaWdodCwgeSk7XG4gICAgICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHggKyB3aWR0aCwgeSwgeCArIHdpZHRoLCB5ICsgdG9wUmlnaHQpO1xuICAgICAgICBpZiAoeUFsaWduID09PSAnY2VudGVyJyAmJiB4QWxpZ24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhd0NhcmV0KHB0LCBjdHgsIHRvb2x0aXBTaXplLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBjdHgubGluZVRvKHggKyB3aWR0aCwgeSArIGhlaWdodCAtIGJvdHRvbVJpZ2h0KTtcbiAgICAgICAgY3R4LnF1YWRyYXRpY0N1cnZlVG8oeCArIHdpZHRoLCB5ICsgaGVpZ2h0LCB4ICsgd2lkdGggLSBib3R0b21SaWdodCwgeSArIGhlaWdodCk7XG4gICAgICAgIGlmICh5QWxpZ24gPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgICB0aGlzLmRyYXdDYXJldChwdCwgY3R4LCB0b29sdGlwU2l6ZSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LmxpbmVUbyh4ICsgYm90dG9tTGVmdCwgeSArIGhlaWdodCk7XG4gICAgICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHgsIHkgKyBoZWlnaHQsIHgsIHkgKyBoZWlnaHQgLSBib3R0b21MZWZ0KTtcbiAgICAgICAgaWYgKHlBbGlnbiA9PT0gJ2NlbnRlcicgJiYgeEFsaWduID09PSAnbGVmdCcpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhd0NhcmV0KHB0LCBjdHgsIHRvb2x0aXBTaXplLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBjdHgubGluZVRvKHgsIHkgKyB0b3BMZWZ0KTtcbiAgICAgICAgY3R4LnF1YWRyYXRpY0N1cnZlVG8oeCwgeSwgeCArIHRvcExlZnQsIHkpO1xuICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgIGlmIChvcHRpb25zLmJvcmRlcldpZHRoID4gMCkge1xuICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICB9XG4gICAgfVxuIF91cGRhdGVBbmltYXRpb25UYXJnZXQob3B0aW9ucykge1xuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGNvbnN0IGFuaW1zID0gdGhpcy4kYW5pbWF0aW9ucztcbiAgICAgICAgY29uc3QgYW5pbVggPSBhbmltcyAmJiBhbmltcy54O1xuICAgICAgICBjb25zdCBhbmltWSA9IGFuaW1zICYmIGFuaW1zLnk7XG4gICAgICAgIGlmIChhbmltWCB8fCBhbmltWSkge1xuICAgICAgICAgICAgY29uc3QgcG9zaXRpb24gPSBwb3NpdGlvbmVyc1tvcHRpb25zLnBvc2l0aW9uXS5jYWxsKHRoaXMsIHRoaXMuX2FjdGl2ZSwgdGhpcy5fZXZlbnRQb3NpdGlvbik7XG4gICAgICAgICAgICBpZiAoIXBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMuX3NpemUgPSBnZXRUb29sdGlwU2l6ZSh0aGlzLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uQW5kU2l6ZSA9IE9iamVjdC5hc3NpZ24oe30sIHBvc2l0aW9uLCB0aGlzLl9zaXplKTtcbiAgICAgICAgICAgIGNvbnN0IGFsaWdubWVudCA9IGRldGVybWluZUFsaWdubWVudChjaGFydCwgb3B0aW9ucywgcG9zaXRpb25BbmRTaXplKTtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50ID0gZ2V0QmFja2dyb3VuZFBvaW50KG9wdGlvbnMsIHBvc2l0aW9uQW5kU2l6ZSwgYWxpZ25tZW50LCBjaGFydCk7XG4gICAgICAgICAgICBpZiAoYW5pbVguX3RvICE9PSBwb2ludC54IHx8IGFuaW1ZLl90byAhPT0gcG9pbnQueSkge1xuICAgICAgICAgICAgICAgIHRoaXMueEFsaWduID0gYWxpZ25tZW50LnhBbGlnbjtcbiAgICAgICAgICAgICAgICB0aGlzLnlBbGlnbiA9IGFsaWdubWVudC55QWxpZ247XG4gICAgICAgICAgICAgICAgdGhpcy53aWR0aCA9IHNpemUud2lkdGg7XG4gICAgICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSBzaXplLmhlaWdodDtcbiAgICAgICAgICAgICAgICB0aGlzLmNhcmV0WCA9IHBvc2l0aW9uLng7XG4gICAgICAgICAgICAgICAgdGhpcy5jYXJldFkgPSBwb3NpdGlvbi55O1xuICAgICAgICAgICAgICAgIHRoaXMuX3Jlc29sdmVBbmltYXRpb25zKCkudXBkYXRlKHRoaXMsIHBvaW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiBfd2lsbFJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5vcGFjaXR5O1xuICAgIH1cbiAgICBkcmF3KGN0eCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICBsZXQgb3BhY2l0eSA9IHRoaXMub3BhY2l0eTtcbiAgICAgICAgaWYgKCFvcGFjaXR5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdXBkYXRlQW5pbWF0aW9uVGFyZ2V0KG9wdGlvbnMpO1xuICAgICAgICBjb25zdCB0b29sdGlwU2l6ZSA9IHtcbiAgICAgICAgICAgIHdpZHRoOiB0aGlzLndpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLmhlaWdodFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBwdCA9IHtcbiAgICAgICAgICAgIHg6IHRoaXMueCxcbiAgICAgICAgICAgIHk6IHRoaXMueVxuICAgICAgICB9O1xuICAgICAgICBvcGFjaXR5ID0gTWF0aC5hYnMob3BhY2l0eSkgPCAxZS0zID8gMCA6IG9wYWNpdHk7XG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcob3B0aW9ucy5wYWRkaW5nKTtcbiAgICAgICAgY29uc3QgaGFzVG9vbHRpcENvbnRlbnQgPSB0aGlzLnRpdGxlLmxlbmd0aCB8fCB0aGlzLmJlZm9yZUJvZHkubGVuZ3RoIHx8IHRoaXMuYm9keS5sZW5ndGggfHwgdGhpcy5hZnRlckJvZHkubGVuZ3RoIHx8IHRoaXMuZm9vdGVyLmxlbmd0aDtcbiAgICAgICAgaWYgKG9wdGlvbnMuZW5hYmxlZCAmJiBoYXNUb29sdGlwQ29udGVudCkge1xuICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IG9wYWNpdHk7XG4gICAgICAgICAgICB0aGlzLmRyYXdCYWNrZ3JvdW5kKHB0LCBjdHgsIHRvb2x0aXBTaXplLCBvcHRpb25zKTtcbiAgICAgICAgICAgIG92ZXJyaWRlVGV4dERpcmVjdGlvbihjdHgsIG9wdGlvbnMudGV4dERpcmVjdGlvbik7XG4gICAgICAgICAgICBwdC55ICs9IHBhZGRpbmcudG9wO1xuICAgICAgICAgICAgdGhpcy5kcmF3VGl0bGUocHQsIGN0eCwgb3B0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLmRyYXdCb2R5KHB0LCBjdHgsIG9wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy5kcmF3Rm9vdGVyKHB0LCBjdHgsIG9wdGlvbnMpO1xuICAgICAgICAgICAgcmVzdG9yZVRleHREaXJlY3Rpb24oY3R4LCBvcHRpb25zLnRleHREaXJlY3Rpb24pO1xuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgfVxuICAgIH1cbiBnZXRBY3RpdmVFbGVtZW50cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZSB8fCBbXTtcbiAgICB9XG4gc2V0QWN0aXZlRWxlbWVudHMoYWN0aXZlRWxlbWVudHMsIGV2ZW50UG9zaXRpb24pIHtcbiAgICAgICAgY29uc3QgbGFzdEFjdGl2ZSA9IHRoaXMuX2FjdGl2ZTtcbiAgICAgICAgY29uc3QgYWN0aXZlID0gYWN0aXZlRWxlbWVudHMubWFwKCh7IGRhdGFzZXRJbmRleCAsIGluZGV4ICB9KT0+e1xuICAgICAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuY2hhcnQuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcbiAgICAgICAgICAgIGlmICghbWV0YSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGZpbmQgYSBkYXRhc2V0IGF0IGluZGV4ICcgKyBkYXRhc2V0SW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkYXRhc2V0SW5kZXgsXG4gICAgICAgICAgICAgICAgZWxlbWVudDogbWV0YS5kYXRhW2luZGV4XSxcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGNoYW5nZWQgPSAhX2VsZW1lbnRzRXF1YWwobGFzdEFjdGl2ZSwgYWN0aXZlKTtcbiAgICAgICAgY29uc3QgcG9zaXRpb25DaGFuZ2VkID0gdGhpcy5fcG9zaXRpb25DaGFuZ2VkKGFjdGl2ZSwgZXZlbnRQb3NpdGlvbik7XG4gICAgICAgIGlmIChjaGFuZ2VkIHx8IHBvc2l0aW9uQ2hhbmdlZCkge1xuICAgICAgICAgICAgdGhpcy5fYWN0aXZlID0gYWN0aXZlO1xuICAgICAgICAgICAgdGhpcy5fZXZlbnRQb3NpdGlvbiA9IGV2ZW50UG9zaXRpb247XG4gICAgICAgICAgICB0aGlzLl9pZ25vcmVSZXBsYXlFdmVudHMgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy51cGRhdGUodHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gaGFuZGxlRXZlbnQoZSwgcmVwbGF5LCBpbkNoYXJ0QXJlYSA9IHRydWUpIHtcbiAgICAgICAgaWYgKHJlcGxheSAmJiB0aGlzLl9pZ25vcmVSZXBsYXlFdmVudHMpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pZ25vcmVSZXBsYXlFdmVudHMgPSBmYWxzZTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgbGFzdEFjdGl2ZSA9IHRoaXMuX2FjdGl2ZSB8fCBbXTtcbiAgICAgICAgY29uc3QgYWN0aXZlID0gdGhpcy5fZ2V0QWN0aXZlRWxlbWVudHMoZSwgbGFzdEFjdGl2ZSwgcmVwbGF5LCBpbkNoYXJ0QXJlYSk7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uQ2hhbmdlZCA9IHRoaXMuX3Bvc2l0aW9uQ2hhbmdlZChhY3RpdmUsIGUpO1xuICAgICAgICBjb25zdCBjaGFuZ2VkID0gcmVwbGF5IHx8ICFfZWxlbWVudHNFcXVhbChhY3RpdmUsIGxhc3RBY3RpdmUpIHx8IHBvc2l0aW9uQ2hhbmdlZDtcbiAgICAgICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZSA9IGFjdGl2ZTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmVuYWJsZWQgfHwgb3B0aW9ucy5leHRlcm5hbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50UG9zaXRpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgIHg6IGUueCxcbiAgICAgICAgICAgICAgICAgICAgeTogZS55XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZSh0cnVlLCByZXBsYXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGFuZ2VkO1xuICAgIH1cbiBfZ2V0QWN0aXZlRWxlbWVudHMoZSwgbGFzdEFjdGl2ZSwgcmVwbGF5LCBpbkNoYXJ0QXJlYSkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBpZiAoZS50eXBlID09PSAnbW91c2VvdXQnKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpbkNoYXJ0QXJlYSkge1xuICAgICAgICAgICAgcmV0dXJuIGxhc3RBY3RpdmU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWN0aXZlID0gdGhpcy5jaGFydC5nZXRFbGVtZW50c0F0RXZlbnRGb3JNb2RlKGUsIG9wdGlvbnMubW9kZSwgb3B0aW9ucywgcmVwbGF5KTtcbiAgICAgICAgaWYgKG9wdGlvbnMucmV2ZXJzZSkge1xuICAgICAgICAgICAgYWN0aXZlLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWN0aXZlO1xuICAgIH1cbiBfcG9zaXRpb25DaGFuZ2VkKGFjdGl2ZSwgZSkge1xuICAgICAgICBjb25zdCB7IGNhcmV0WCAsIGNhcmV0WSAsIG9wdGlvbnMgIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHBvc2l0aW9uZXJzW29wdGlvbnMucG9zaXRpb25dLmNhbGwodGhpcywgYWN0aXZlLCBlKTtcbiAgICAgICAgcmV0dXJuIHBvc2l0aW9uICE9PSBmYWxzZSAmJiAoY2FyZXRYICE9PSBwb3NpdGlvbi54IHx8IGNhcmV0WSAhPT0gcG9zaXRpb24ueSk7XG4gICAgfVxufVxudmFyIHBsdWdpbl90b29sdGlwID0ge1xuICAgIGlkOiAndG9vbHRpcCcsXG4gICAgX2VsZW1lbnQ6IFRvb2x0aXAsXG4gICAgcG9zaXRpb25lcnMsXG4gICAgYWZ0ZXJJbml0IChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGNoYXJ0LnRvb2x0aXAgPSBuZXcgVG9vbHRpcCh7XG4gICAgICAgICAgICAgICAgY2hhcnQsXG4gICAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGJlZm9yZVVwZGF0ZSAoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChjaGFydC50b29sdGlwKSB7XG4gICAgICAgICAgICBjaGFydC50b29sdGlwLmluaXRpYWxpemUob3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHJlc2V0IChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGNoYXJ0LnRvb2x0aXApIHtcbiAgICAgICAgICAgIGNoYXJ0LnRvb2x0aXAuaW5pdGlhbGl6ZShvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgYWZ0ZXJEcmF3IChjaGFydCkge1xuICAgICAgICBjb25zdCB0b29sdGlwID0gY2hhcnQudG9vbHRpcDtcbiAgICAgICAgaWYgKHRvb2x0aXAgJiYgdG9vbHRpcC5fd2lsbFJlbmRlcigpKSB7XG4gICAgICAgICAgICBjb25zdCBhcmdzID0ge1xuICAgICAgICAgICAgICAgIHRvb2x0aXBcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoY2hhcnQubm90aWZ5UGx1Z2lucygnYmVmb3JlVG9vbHRpcERyYXcnLCB7XG4gICAgICAgICAgICAgICAgLi4uYXJncyxcbiAgICAgICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgICAgICB9KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0b29sdGlwLmRyYXcoY2hhcnQuY3R4KTtcbiAgICAgICAgICAgIGNoYXJ0Lm5vdGlmeVBsdWdpbnMoJ2FmdGVyVG9vbHRpcERyYXcnLCBhcmdzKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgYWZ0ZXJFdmVudCAoY2hhcnQsIGFyZ3MpIHtcbiAgICAgICAgaWYgKGNoYXJ0LnRvb2x0aXApIHtcbiAgICAgICAgICAgIGNvbnN0IHVzZUZpbmFsUG9zaXRpb24gPSBhcmdzLnJlcGxheTtcbiAgICAgICAgICAgIGlmIChjaGFydC50b29sdGlwLmhhbmRsZUV2ZW50KGFyZ3MuZXZlbnQsIHVzZUZpbmFsUG9zaXRpb24sIGFyZ3MuaW5DaGFydEFyZWEpKSB7XG4gICAgICAgICAgICAgICAgYXJncy5jaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgZXh0ZXJuYWw6IG51bGwsXG4gICAgICAgIHBvc2l0aW9uOiAnYXZlcmFnZScsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwwLDAsMC44KScsXG4gICAgICAgIHRpdGxlQ29sb3I6ICcjZmZmJyxcbiAgICAgICAgdGl0bGVGb250OiB7XG4gICAgICAgICAgICB3ZWlnaHQ6ICdib2xkJ1xuICAgICAgICB9LFxuICAgICAgICB0aXRsZVNwYWNpbmc6IDIsXG4gICAgICAgIHRpdGxlTWFyZ2luQm90dG9tOiA2LFxuICAgICAgICB0aXRsZUFsaWduOiAnbGVmdCcsXG4gICAgICAgIGJvZHlDb2xvcjogJyNmZmYnLFxuICAgICAgICBib2R5U3BhY2luZzogMixcbiAgICAgICAgYm9keUZvbnQ6IHt9LFxuICAgICAgICBib2R5QWxpZ246ICdsZWZ0JyxcbiAgICAgICAgZm9vdGVyQ29sb3I6ICcjZmZmJyxcbiAgICAgICAgZm9vdGVyU3BhY2luZzogMixcbiAgICAgICAgZm9vdGVyTWFyZ2luVG9wOiA2LFxuICAgICAgICBmb290ZXJGb250OiB7XG4gICAgICAgICAgICB3ZWlnaHQ6ICdib2xkJ1xuICAgICAgICB9LFxuICAgICAgICBmb290ZXJBbGlnbjogJ2xlZnQnLFxuICAgICAgICBwYWRkaW5nOiA2LFxuICAgICAgICBjYXJldFBhZGRpbmc6IDIsXG4gICAgICAgIGNhcmV0U2l6ZTogNSxcbiAgICAgICAgY29ybmVyUmFkaXVzOiA2LFxuICAgICAgICBib3hIZWlnaHQ6IChjdHgsIG9wdHMpPT5vcHRzLmJvZHlGb250LnNpemUsXG4gICAgICAgIGJveFdpZHRoOiAoY3R4LCBvcHRzKT0+b3B0cy5ib2R5Rm9udC5zaXplLFxuICAgICAgICBtdWx0aUtleUJhY2tncm91bmQ6ICcjZmZmJyxcbiAgICAgICAgZGlzcGxheUNvbG9yczogdHJ1ZSxcbiAgICAgICAgYm94UGFkZGluZzogMCxcbiAgICAgICAgYm9yZGVyQ29sb3I6ICdyZ2JhKDAsMCwwLDApJyxcbiAgICAgICAgYm9yZGVyV2lkdGg6IDAsXG4gICAgICAgIGFuaW1hdGlvbjoge1xuICAgICAgICAgICAgZHVyYXRpb246IDQwMCxcbiAgICAgICAgICAgIGVhc2luZzogJ2Vhc2VPdXRRdWFydCdcbiAgICAgICAgfSxcbiAgICAgICAgYW5pbWF0aW9uczoge1xuICAgICAgICAgICAgbnVtYmVyczoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgJ3gnLFxuICAgICAgICAgICAgICAgICAgICAneScsXG4gICAgICAgICAgICAgICAgICAgICd3aWR0aCcsXG4gICAgICAgICAgICAgICAgICAgICdoZWlnaHQnLFxuICAgICAgICAgICAgICAgICAgICAnY2FyZXRYJyxcbiAgICAgICAgICAgICAgICAgICAgJ2NhcmV0WSdcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3BhY2l0eToge1xuICAgICAgICAgICAgICAgIGVhc2luZzogJ2xpbmVhcicsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDIwMFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxsYmFja3M6IGRlZmF1bHRDYWxsYmFja3NcbiAgICB9LFxuICAgIGRlZmF1bHRSb3V0ZXM6IHtcbiAgICAgICAgYm9keUZvbnQ6ICdmb250JyxcbiAgICAgICAgZm9vdGVyRm9udDogJ2ZvbnQnLFxuICAgICAgICB0aXRsZUZvbnQ6ICdmb250J1xuICAgIH0sXG4gICAgZGVzY3JpcHRvcnM6IHtcbiAgICAgICAgX3NjcmlwdGFibGU6IChuYW1lKT0+bmFtZSAhPT0gJ2ZpbHRlcicgJiYgbmFtZSAhPT0gJ2l0ZW1Tb3J0JyAmJiBuYW1lICE9PSAnZXh0ZXJuYWwnLFxuICAgICAgICBfaW5kZXhhYmxlOiBmYWxzZSxcbiAgICAgICAgY2FsbGJhY2tzOiB7XG4gICAgICAgICAgICBfc2NyaXB0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICBfaW5kZXhhYmxlOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBhbmltYXRpb246IHtcbiAgICAgICAgICAgIF9mYWxsYmFjazogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgYW5pbWF0aW9uczoge1xuICAgICAgICAgICAgX2ZhbGxiYWNrOiAnYW5pbWF0aW9uJ1xuICAgICAgICB9XG4gICAgfSxcbiAgICBhZGRpdGlvbmFsT3B0aW9uU2NvcGVzOiBbXG4gICAgICAgICdpbnRlcmFjdGlvbidcbiAgICBdXG59O1xuXG52YXIgcGx1Z2lucyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbl9fcHJvdG9fXzogbnVsbCxcbkNvbG9yczogcGx1Z2luX2NvbG9ycyxcbkRlY2ltYXRpb246IHBsdWdpbl9kZWNpbWF0aW9uLFxuRmlsbGVyOiBpbmRleCxcbkxlZ2VuZDogcGx1Z2luX2xlZ2VuZCxcblN1YlRpdGxlOiBwbHVnaW5fc3VidGl0bGUsXG5UaXRsZTogcGx1Z2luX3RpdGxlLFxuVG9vbHRpcDogcGx1Z2luX3Rvb2x0aXBcbn0pO1xuXG5jb25zdCBhZGRJZlN0cmluZyA9IChsYWJlbHMsIHJhdywgaW5kZXgsIGFkZGVkTGFiZWxzKT0+e1xuICAgIGlmICh0eXBlb2YgcmF3ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpbmRleCA9IGxhYmVscy5wdXNoKHJhdykgLSAxO1xuICAgICAgICBhZGRlZExhYmVscy51bnNoaWZ0KHtcbiAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgbGFiZWw6IHJhd1xuICAgICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGlzTmFOKHJhdykpIHtcbiAgICAgICAgaW5kZXggPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gaW5kZXg7XG59O1xuZnVuY3Rpb24gZmluZE9yQWRkTGFiZWwobGFiZWxzLCByYXcsIGluZGV4LCBhZGRlZExhYmVscykge1xuICAgIGNvbnN0IGZpcnN0ID0gbGFiZWxzLmluZGV4T2YocmF3KTtcbiAgICBpZiAoZmlyc3QgPT09IC0xKSB7XG4gICAgICAgIHJldHVybiBhZGRJZlN0cmluZyhsYWJlbHMsIHJhdywgaW5kZXgsIGFkZGVkTGFiZWxzKTtcbiAgICB9XG4gICAgY29uc3QgbGFzdCA9IGxhYmVscy5sYXN0SW5kZXhPZihyYXcpO1xuICAgIHJldHVybiBmaXJzdCAhPT0gbGFzdCA/IGluZGV4IDogZmlyc3Q7XG59XG5jb25zdCB2YWxpZEluZGV4ID0gKGluZGV4LCBtYXgpPT5pbmRleCA9PT0gbnVsbCA/IG51bGwgOiBfbGltaXRWYWx1ZShNYXRoLnJvdW5kKGluZGV4KSwgMCwgbWF4KTtcbmZ1bmN0aW9uIF9nZXRMYWJlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgY29uc3QgbGFiZWxzID0gdGhpcy5nZXRMYWJlbHMoKTtcbiAgICBpZiAodmFsdWUgPj0gMCAmJiB2YWx1ZSA8IGxhYmVscy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGxhYmVsc1t2YWx1ZV07XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmNsYXNzIENhdGVnb3J5U2NhbGUgZXh0ZW5kcyBTY2FsZSB7XG4gICAgc3RhdGljIGlkID0gJ2NhdGVnb3J5JztcbiBzdGF0aWMgZGVmYXVsdHMgPSB7XG4gICAgICAgIHRpY2tzOiB7XG4gICAgICAgICAgICBjYWxsYmFjazogX2dldExhYmVsRm9yVmFsdWVcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3RydWN0b3IoY2ZnKXtcbiAgICAgICAgc3VwZXIoY2ZnKTtcbiAgICAgICAgIHRoaXMuX3N0YXJ0VmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3ZhbHVlUmFuZ2UgPSAwO1xuICAgICAgICB0aGlzLl9hZGRlZExhYmVscyA9IFtdO1xuICAgIH1cbiAgICBpbml0KHNjYWxlT3B0aW9ucykge1xuICAgICAgICBjb25zdCBhZGRlZCA9IHRoaXMuX2FkZGVkTGFiZWxzO1xuICAgICAgICBpZiAoYWRkZWQubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBsYWJlbHMgPSB0aGlzLmdldExhYmVscygpO1xuICAgICAgICAgICAgZm9yIChjb25zdCB7IGluZGV4ICwgbGFiZWwgIH0gb2YgYWRkZWQpe1xuICAgICAgICAgICAgICAgIGlmIChsYWJlbHNbaW5kZXhdID09PSBsYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9hZGRlZExhYmVscyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyLmluaXQoc2NhbGVPcHRpb25zKTtcbiAgICB9XG4gICAgcGFyc2UocmF3LCBpbmRleCkge1xuICAgICAgICBpZiAoaXNOdWxsT3JVbmRlZihyYXcpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYWJlbHMgPSB0aGlzLmdldExhYmVscygpO1xuICAgICAgICBpbmRleCA9IGlzRmluaXRlKGluZGV4KSAmJiBsYWJlbHNbaW5kZXhdID09PSByYXcgPyBpbmRleCA6IGZpbmRPckFkZExhYmVsKGxhYmVscywgcmF3LCB2YWx1ZU9yRGVmYXVsdChpbmRleCwgcmF3KSwgdGhpcy5fYWRkZWRMYWJlbHMpO1xuICAgICAgICByZXR1cm4gdmFsaWRJbmRleChpbmRleCwgbGFiZWxzLmxlbmd0aCAtIDEpO1xuICAgIH1cbiAgICBkZXRlcm1pbmVEYXRhTGltaXRzKCkge1xuICAgICAgICBjb25zdCB7IG1pbkRlZmluZWQgLCBtYXhEZWZpbmVkICB9ID0gdGhpcy5nZXRVc2VyQm91bmRzKCk7XG4gICAgICAgIGxldCB7IG1pbiAsIG1heCAgfSA9IHRoaXMuZ2V0TWluTWF4KHRydWUpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmJvdW5kcyA9PT0gJ3RpY2tzJykge1xuICAgICAgICAgICAgaWYgKCFtaW5EZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbWluID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghbWF4RGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIG1heCA9IHRoaXMuZ2V0TGFiZWxzKCkubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1pbiA9IG1pbjtcbiAgICAgICAgdGhpcy5tYXggPSBtYXg7XG4gICAgfVxuICAgIGJ1aWxkVGlja3MoKSB7XG4gICAgICAgIGNvbnN0IG1pbiA9IHRoaXMubWluO1xuICAgICAgICBjb25zdCBtYXggPSB0aGlzLm1heDtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5vcHRpb25zLm9mZnNldDtcbiAgICAgICAgY29uc3QgdGlja3MgPSBbXTtcbiAgICAgICAgbGV0IGxhYmVscyA9IHRoaXMuZ2V0TGFiZWxzKCk7XG4gICAgICAgIGxhYmVscyA9IG1pbiA9PT0gMCAmJiBtYXggPT09IGxhYmVscy5sZW5ndGggLSAxID8gbGFiZWxzIDogbGFiZWxzLnNsaWNlKG1pbiwgbWF4ICsgMSk7XG4gICAgICAgIHRoaXMuX3ZhbHVlUmFuZ2UgPSBNYXRoLm1heChsYWJlbHMubGVuZ3RoIC0gKG9mZnNldCA/IDAgOiAxKSwgMSk7XG4gICAgICAgIHRoaXMuX3N0YXJ0VmFsdWUgPSB0aGlzLm1pbiAtIChvZmZzZXQgPyAwLjUgOiAwKTtcbiAgICAgICAgZm9yKGxldCB2YWx1ZSA9IG1pbjsgdmFsdWUgPD0gbWF4OyB2YWx1ZSsrKXtcbiAgICAgICAgICAgIHRpY2tzLnB1c2goe1xuICAgICAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGlja3M7XG4gICAgfVxuICAgIGdldExhYmVsRm9yVmFsdWUodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIF9nZXRMYWJlbEZvclZhbHVlLmNhbGwodGhpcywgdmFsdWUpO1xuICAgIH1cbiBjb25maWd1cmUoKSB7XG4gICAgICAgIHN1cGVyLmNvbmZpZ3VyZSgpO1xuICAgICAgICBpZiAoIXRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgIHRoaXMuX3JldmVyc2VQaXhlbHMgPSAhdGhpcy5fcmV2ZXJzZVBpeGVscztcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRQaXhlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHRoaXMucGFyc2UodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCA/IE5hTiA6IHRoaXMuZ2V0UGl4ZWxGb3JEZWNpbWFsKCh2YWx1ZSAtIHRoaXMuX3N0YXJ0VmFsdWUpIC8gdGhpcy5fdmFsdWVSYW5nZSk7XG4gICAgfVxuICAgIGdldFBpeGVsRm9yVGljayhpbmRleCkge1xuICAgICAgICBjb25zdCB0aWNrcyA9IHRoaXMudGlja3M7XG4gICAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPiB0aWNrcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5nZXRQaXhlbEZvclZhbHVlKHRpY2tzW2luZGV4XS52YWx1ZSk7XG4gICAgfVxuICAgIGdldFZhbHVlRm9yUGl4ZWwocGl4ZWwpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodGhpcy5fc3RhcnRWYWx1ZSArIHRoaXMuZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKSAqIHRoaXMuX3ZhbHVlUmFuZ2UpO1xuICAgIH1cbiAgICBnZXRCYXNlUGl4ZWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJvdHRvbTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlVGlja3MkMShnZW5lcmF0aW9uT3B0aW9ucywgZGF0YVJhbmdlKSB7XG4gICAgY29uc3QgdGlja3MgPSBbXTtcbiAgICBjb25zdCBNSU5fU1BBQ0lORyA9IDFlLTE0O1xuICAgIGNvbnN0IHsgYm91bmRzICwgc3RlcCAsIG1pbiAsIG1heCAsIHByZWNpc2lvbiAsIGNvdW50ICwgbWF4VGlja3MgLCBtYXhEaWdpdHMgLCBpbmNsdWRlQm91bmRzICB9ID0gZ2VuZXJhdGlvbk9wdGlvbnM7XG4gICAgY29uc3QgdW5pdCA9IHN0ZXAgfHwgMTtcbiAgICBjb25zdCBtYXhTcGFjZXMgPSBtYXhUaWNrcyAtIDE7XG4gICAgY29uc3QgeyBtaW46IHJtaW4gLCBtYXg6IHJtYXggIH0gPSBkYXRhUmFuZ2U7XG4gICAgY29uc3QgbWluRGVmaW5lZCA9ICFpc051bGxPclVuZGVmKG1pbik7XG4gICAgY29uc3QgbWF4RGVmaW5lZCA9ICFpc051bGxPclVuZGVmKG1heCk7XG4gICAgY29uc3QgY291bnREZWZpbmVkID0gIWlzTnVsbE9yVW5kZWYoY291bnQpO1xuICAgIGNvbnN0IG1pblNwYWNpbmcgPSAocm1heCAtIHJtaW4pIC8gKG1heERpZ2l0cyArIDEpO1xuICAgIGxldCBzcGFjaW5nID0gbmljZU51bSgocm1heCAtIHJtaW4pIC8gbWF4U3BhY2VzIC8gdW5pdCkgKiB1bml0O1xuICAgIGxldCBmYWN0b3IsIG5pY2VNaW4sIG5pY2VNYXgsIG51bVNwYWNlcztcbiAgICBpZiAoc3BhY2luZyA8IE1JTl9TUEFDSU5HICYmICFtaW5EZWZpbmVkICYmICFtYXhEZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHJtaW5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHJtYXhcbiAgICAgICAgICAgIH1cbiAgICAgICAgXTtcbiAgICB9XG4gICAgbnVtU3BhY2VzID0gTWF0aC5jZWlsKHJtYXggLyBzcGFjaW5nKSAtIE1hdGguZmxvb3Iocm1pbiAvIHNwYWNpbmcpO1xuICAgIGlmIChudW1TcGFjZXMgPiBtYXhTcGFjZXMpIHtcbiAgICAgICAgc3BhY2luZyA9IG5pY2VOdW0obnVtU3BhY2VzICogc3BhY2luZyAvIG1heFNwYWNlcyAvIHVuaXQpICogdW5pdDtcbiAgICB9XG4gICAgaWYgKCFpc051bGxPclVuZGVmKHByZWNpc2lvbikpIHtcbiAgICAgICAgZmFjdG9yID0gTWF0aC5wb3coMTAsIHByZWNpc2lvbik7XG4gICAgICAgIHNwYWNpbmcgPSBNYXRoLmNlaWwoc3BhY2luZyAqIGZhY3RvcikgLyBmYWN0b3I7XG4gICAgfVxuICAgIGlmIChib3VuZHMgPT09ICd0aWNrcycpIHtcbiAgICAgICAgbmljZU1pbiA9IE1hdGguZmxvb3Iocm1pbiAvIHNwYWNpbmcpICogc3BhY2luZztcbiAgICAgICAgbmljZU1heCA9IE1hdGguY2VpbChybWF4IC8gc3BhY2luZykgKiBzcGFjaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG5pY2VNaW4gPSBybWluO1xuICAgICAgICBuaWNlTWF4ID0gcm1heDtcbiAgICB9XG4gICAgaWYgKG1pbkRlZmluZWQgJiYgbWF4RGVmaW5lZCAmJiBzdGVwICYmIGFsbW9zdFdob2xlKChtYXggLSBtaW4pIC8gc3RlcCwgc3BhY2luZyAvIDEwMDApKSB7XG4gICAgICAgIG51bVNwYWNlcyA9IE1hdGgucm91bmQoTWF0aC5taW4oKG1heCAtIG1pbikgLyBzcGFjaW5nLCBtYXhUaWNrcykpO1xuICAgICAgICBzcGFjaW5nID0gKG1heCAtIG1pbikgLyBudW1TcGFjZXM7XG4gICAgICAgIG5pY2VNaW4gPSBtaW47XG4gICAgICAgIG5pY2VNYXggPSBtYXg7XG4gICAgfSBlbHNlIGlmIChjb3VudERlZmluZWQpIHtcbiAgICAgICAgbmljZU1pbiA9IG1pbkRlZmluZWQgPyBtaW4gOiBuaWNlTWluO1xuICAgICAgICBuaWNlTWF4ID0gbWF4RGVmaW5lZCA/IG1heCA6IG5pY2VNYXg7XG4gICAgICAgIG51bVNwYWNlcyA9IGNvdW50IC0gMTtcbiAgICAgICAgc3BhY2luZyA9IChuaWNlTWF4IC0gbmljZU1pbikgLyBudW1TcGFjZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbnVtU3BhY2VzID0gKG5pY2VNYXggLSBuaWNlTWluKSAvIHNwYWNpbmc7XG4gICAgICAgIGlmIChhbG1vc3RFcXVhbHMobnVtU3BhY2VzLCBNYXRoLnJvdW5kKG51bVNwYWNlcyksIHNwYWNpbmcgLyAxMDAwKSkge1xuICAgICAgICAgICAgbnVtU3BhY2VzID0gTWF0aC5yb3VuZChudW1TcGFjZXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbnVtU3BhY2VzID0gTWF0aC5jZWlsKG51bVNwYWNlcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZGVjaW1hbFBsYWNlcyA9IE1hdGgubWF4KF9kZWNpbWFsUGxhY2VzKHNwYWNpbmcpLCBfZGVjaW1hbFBsYWNlcyhuaWNlTWluKSk7XG4gICAgZmFjdG9yID0gTWF0aC5wb3coMTAsIGlzTnVsbE9yVW5kZWYocHJlY2lzaW9uKSA/IGRlY2ltYWxQbGFjZXMgOiBwcmVjaXNpb24pO1xuICAgIG5pY2VNaW4gPSBNYXRoLnJvdW5kKG5pY2VNaW4gKiBmYWN0b3IpIC8gZmFjdG9yO1xuICAgIG5pY2VNYXggPSBNYXRoLnJvdW5kKG5pY2VNYXggKiBmYWN0b3IpIC8gZmFjdG9yO1xuICAgIGxldCBqID0gMDtcbiAgICBpZiAobWluRGVmaW5lZCkge1xuICAgICAgICBpZiAoaW5jbHVkZUJvdW5kcyAmJiBuaWNlTWluICE9PSBtaW4pIHtcbiAgICAgICAgICAgIHRpY2tzLnB1c2goe1xuICAgICAgICAgICAgICAgIHZhbHVlOiBtaW5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKG5pY2VNaW4gPCBtaW4pIHtcbiAgICAgICAgICAgICAgICBqKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWxtb3N0RXF1YWxzKE1hdGgucm91bmQoKG5pY2VNaW4gKyBqICogc3BhY2luZykgKiBmYWN0b3IpIC8gZmFjdG9yLCBtaW4sIHJlbGF0aXZlTGFiZWxTaXplKG1pbiwgbWluU3BhY2luZywgZ2VuZXJhdGlvbk9wdGlvbnMpKSkge1xuICAgICAgICAgICAgICAgIGorKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChuaWNlTWluIDwgbWluKSB7XG4gICAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yKDsgaiA8IG51bVNwYWNlczsgKytqKXtcbiAgICAgICAgY29uc3QgdGlja1ZhbHVlID0gTWF0aC5yb3VuZCgobmljZU1pbiArIGogKiBzcGFjaW5nKSAqIGZhY3RvcikgLyBmYWN0b3I7XG4gICAgICAgIGlmIChtYXhEZWZpbmVkICYmIHRpY2tWYWx1ZSA+IG1heCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdGlja3MucHVzaCh7XG4gICAgICAgICAgICB2YWx1ZTogdGlja1ZhbHVlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAobWF4RGVmaW5lZCAmJiBpbmNsdWRlQm91bmRzICYmIG5pY2VNYXggIT09IG1heCkge1xuICAgICAgICBpZiAodGlja3MubGVuZ3RoICYmIGFsbW9zdEVxdWFscyh0aWNrc1t0aWNrcy5sZW5ndGggLSAxXS52YWx1ZSwgbWF4LCByZWxhdGl2ZUxhYmVsU2l6ZShtYXgsIG1pblNwYWNpbmcsIGdlbmVyYXRpb25PcHRpb25zKSkpIHtcbiAgICAgICAgICAgIHRpY2tzW3RpY2tzLmxlbmd0aCAtIDFdLnZhbHVlID0gbWF4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGlja3MucHVzaCh7XG4gICAgICAgICAgICAgICAgdmFsdWU6IG1heFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFtYXhEZWZpbmVkIHx8IG5pY2VNYXggPT09IG1heCkge1xuICAgICAgICB0aWNrcy5wdXNoKHtcbiAgICAgICAgICAgIHZhbHVlOiBuaWNlTWF4XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdGlja3M7XG59XG5mdW5jdGlvbiByZWxhdGl2ZUxhYmVsU2l6ZSh2YWx1ZSwgbWluU3BhY2luZywgeyBob3Jpem9udGFsICwgbWluUm90YXRpb24gIH0pIHtcbiAgICBjb25zdCByYWQgPSB0b1JhZGlhbnMobWluUm90YXRpb24pO1xuICAgIGNvbnN0IHJhdGlvID0gKGhvcml6b250YWwgPyBNYXRoLnNpbihyYWQpIDogTWF0aC5jb3MocmFkKSkgfHwgMC4wMDE7XG4gICAgY29uc3QgbGVuZ3RoID0gMC43NSAqIG1pblNwYWNpbmcgKiAoJycgKyB2YWx1ZSkubGVuZ3RoO1xuICAgIHJldHVybiBNYXRoLm1pbihtaW5TcGFjaW5nIC8gcmF0aW8sIGxlbmd0aCk7XG59XG5jbGFzcyBMaW5lYXJTY2FsZUJhc2UgZXh0ZW5kcyBTY2FsZSB7XG4gICAgY29uc3RydWN0b3IoY2ZnKXtcbiAgICAgICAgc3VwZXIoY2ZnKTtcbiAgICAgICAgIHRoaXMuc3RhcnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLmVuZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMuX3N0YXJ0VmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLl9lbmRWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fdmFsdWVSYW5nZSA9IDA7XG4gICAgfVxuICAgIHBhcnNlKHJhdywgaW5kZXgpIHtcbiAgICAgICAgaWYgKGlzTnVsbE9yVW5kZWYocmF3KSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCh0eXBlb2YgcmF3ID09PSAnbnVtYmVyJyB8fCByYXcgaW5zdGFuY2VvZiBOdW1iZXIpICYmICFpc0Zpbml0ZSgrcmF3KSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICtyYXc7XG4gICAgfVxuICAgIGhhbmRsZVRpY2tSYW5nZU9wdGlvbnMoKSB7XG4gICAgICAgIGNvbnN0IHsgYmVnaW5BdFplcm8gIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHsgbWluRGVmaW5lZCAsIG1heERlZmluZWQgIH0gPSB0aGlzLmdldFVzZXJCb3VuZHMoKTtcbiAgICAgICAgbGV0IHsgbWluICwgbWF4ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3Qgc2V0TWluID0gKHYpPT5taW4gPSBtaW5EZWZpbmVkID8gbWluIDogdjtcbiAgICAgICAgY29uc3Qgc2V0TWF4ID0gKHYpPT5tYXggPSBtYXhEZWZpbmVkID8gbWF4IDogdjtcbiAgICAgICAgaWYgKGJlZ2luQXRaZXJvKSB7XG4gICAgICAgICAgICBjb25zdCBtaW5TaWduID0gc2lnbihtaW4pO1xuICAgICAgICAgICAgY29uc3QgbWF4U2lnbiA9IHNpZ24obWF4KTtcbiAgICAgICAgICAgIGlmIChtaW5TaWduIDwgMCAmJiBtYXhTaWduIDwgMCkge1xuICAgICAgICAgICAgICAgIHNldE1heCgwKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWluU2lnbiA+IDAgJiYgbWF4U2lnbiA+IDApIHtcbiAgICAgICAgICAgICAgICBzZXRNaW4oMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1pbiA9PT0gbWF4KSB7XG4gICAgICAgICAgICBsZXQgb2Zmc2V0ID0gbWF4ID09PSAwID8gMSA6IE1hdGguYWJzKG1heCAqIDAuMDUpO1xuICAgICAgICAgICAgc2V0TWF4KG1heCArIG9mZnNldCk7XG4gICAgICAgICAgICBpZiAoIWJlZ2luQXRaZXJvKSB7XG4gICAgICAgICAgICAgICAgc2V0TWluKG1pbiAtIG9mZnNldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5taW4gPSBtaW47XG4gICAgICAgIHRoaXMubWF4ID0gbWF4O1xuICAgIH1cbiAgICBnZXRUaWNrTGltaXQoKSB7XG4gICAgICAgIGNvbnN0IHRpY2tPcHRzID0gdGhpcy5vcHRpb25zLnRpY2tzO1xuICAgICAgICBsZXQgeyBtYXhUaWNrc0xpbWl0ICwgc3RlcFNpemUgIH0gPSB0aWNrT3B0cztcbiAgICAgICAgbGV0IG1heFRpY2tzO1xuICAgICAgICBpZiAoc3RlcFNpemUpIHtcbiAgICAgICAgICAgIG1heFRpY2tzID0gTWF0aC5jZWlsKHRoaXMubWF4IC8gc3RlcFNpemUpIC0gTWF0aC5mbG9vcih0aGlzLm1pbiAvIHN0ZXBTaXplKSArIDE7XG4gICAgICAgICAgICBpZiAobWF4VGlja3MgPiAxMDAwKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBzY2FsZXMuJHt0aGlzLmlkfS50aWNrcy5zdGVwU2l6ZTogJHtzdGVwU2l6ZX0gd291bGQgcmVzdWx0IGdlbmVyYXRpbmcgdXAgdG8gJHttYXhUaWNrc30gdGlja3MuIExpbWl0aW5nIHRvIDEwMDAuYCk7XG4gICAgICAgICAgICAgICAgbWF4VGlja3MgPSAxMDAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWF4VGlja3MgPSB0aGlzLmNvbXB1dGVUaWNrTGltaXQoKTtcbiAgICAgICAgICAgIG1heFRpY2tzTGltaXQgPSBtYXhUaWNrc0xpbWl0IHx8IDExO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXhUaWNrc0xpbWl0KSB7XG4gICAgICAgICAgICBtYXhUaWNrcyA9IE1hdGgubWluKG1heFRpY2tzTGltaXQsIG1heFRpY2tzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWF4VGlja3M7XG4gICAgfVxuIGNvbXB1dGVUaWNrTGltaXQoKSB7XG4gICAgICAgIHJldHVybiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgfVxuICAgIGJ1aWxkVGlja3MoKSB7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHRpY2tPcHRzID0gb3B0cy50aWNrcztcbiAgICAgICAgbGV0IG1heFRpY2tzID0gdGhpcy5nZXRUaWNrTGltaXQoKTtcbiAgICAgICAgbWF4VGlja3MgPSBNYXRoLm1heCgyLCBtYXhUaWNrcyk7XG4gICAgICAgIGNvbnN0IG51bWVyaWNHZW5lcmF0b3JPcHRpb25zID0ge1xuICAgICAgICAgICAgbWF4VGlja3MsXG4gICAgICAgICAgICBib3VuZHM6IG9wdHMuYm91bmRzLFxuICAgICAgICAgICAgbWluOiBvcHRzLm1pbixcbiAgICAgICAgICAgIG1heDogb3B0cy5tYXgsXG4gICAgICAgICAgICBwcmVjaXNpb246IHRpY2tPcHRzLnByZWNpc2lvbixcbiAgICAgICAgICAgIHN0ZXA6IHRpY2tPcHRzLnN0ZXBTaXplLFxuICAgICAgICAgICAgY291bnQ6IHRpY2tPcHRzLmNvdW50LFxuICAgICAgICAgICAgbWF4RGlnaXRzOiB0aGlzLl9tYXhEaWdpdHMoKSxcbiAgICAgICAgICAgIGhvcml6b250YWw6IHRoaXMuaXNIb3Jpem9udGFsKCksXG4gICAgICAgICAgICBtaW5Sb3RhdGlvbjogdGlja09wdHMubWluUm90YXRpb24gfHwgMCxcbiAgICAgICAgICAgIGluY2x1ZGVCb3VuZHM6IHRpY2tPcHRzLmluY2x1ZGVCb3VuZHMgIT09IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGRhdGFSYW5nZSA9IHRoaXMuX3JhbmdlIHx8IHRoaXM7XG4gICAgICAgIGNvbnN0IHRpY2tzID0gZ2VuZXJhdGVUaWNrcyQxKG51bWVyaWNHZW5lcmF0b3JPcHRpb25zLCBkYXRhUmFuZ2UpO1xuICAgICAgICBpZiAob3B0cy5ib3VuZHMgPT09ICd0aWNrcycpIHtcbiAgICAgICAgICAgIF9zZXRNaW5BbmRNYXhCeUtleSh0aWNrcywgdGhpcywgJ3ZhbHVlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdHMucmV2ZXJzZSkge1xuICAgICAgICAgICAgdGlja3MucmV2ZXJzZSgpO1xuICAgICAgICAgICAgdGhpcy5zdGFydCA9IHRoaXMubWF4O1xuICAgICAgICAgICAgdGhpcy5lbmQgPSB0aGlzLm1pbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnQgPSB0aGlzLm1pbjtcbiAgICAgICAgICAgIHRoaXMuZW5kID0gdGhpcy5tYXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRpY2tzO1xuICAgIH1cbiBjb25maWd1cmUoKSB7XG4gICAgICAgIGNvbnN0IHRpY2tzID0gdGhpcy50aWNrcztcbiAgICAgICAgbGV0IHN0YXJ0ID0gdGhpcy5taW47XG4gICAgICAgIGxldCBlbmQgPSB0aGlzLm1heDtcbiAgICAgICAgc3VwZXIuY29uZmlndXJlKCk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMub2Zmc2V0ICYmIHRpY2tzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gKGVuZCAtIHN0YXJ0KSAvIE1hdGgubWF4KHRpY2tzLmxlbmd0aCAtIDEsIDEpIC8gMjtcbiAgICAgICAgICAgIHN0YXJ0IC09IG9mZnNldDtcbiAgICAgICAgICAgIGVuZCArPSBvZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3RhcnRWYWx1ZSA9IHN0YXJ0O1xuICAgICAgICB0aGlzLl9lbmRWYWx1ZSA9IGVuZDtcbiAgICAgICAgdGhpcy5fdmFsdWVSYW5nZSA9IGVuZCAtIHN0YXJ0O1xuICAgIH1cbiAgICBnZXRMYWJlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBmb3JtYXROdW1iZXIodmFsdWUsIHRoaXMuY2hhcnQub3B0aW9ucy5sb2NhbGUsIHRoaXMub3B0aW9ucy50aWNrcy5mb3JtYXQpO1xuICAgIH1cbn1cblxuY2xhc3MgTGluZWFyU2NhbGUgZXh0ZW5kcyBMaW5lYXJTY2FsZUJhc2Uge1xuICAgIHN0YXRpYyBpZCA9ICdsaW5lYXInO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgIGNhbGxiYWNrOiBUaWNrcy5mb3JtYXR0ZXJzLm51bWVyaWNcbiAgICAgICAgfVxuICAgIH07XG4gICAgZGV0ZXJtaW5lRGF0YUxpbWl0cygpIHtcbiAgICAgICAgY29uc3QgeyBtaW4gLCBtYXggIH0gPSB0aGlzLmdldE1pbk1heCh0cnVlKTtcbiAgICAgICAgdGhpcy5taW4gPSBpc051bWJlckZpbml0ZShtaW4pID8gbWluIDogMDtcbiAgICAgICAgdGhpcy5tYXggPSBpc051bWJlckZpbml0ZShtYXgpID8gbWF4IDogMTtcbiAgICAgICAgdGhpcy5oYW5kbGVUaWNrUmFuZ2VPcHRpb25zKCk7XG4gICAgfVxuIGNvbXB1dGVUaWNrTGltaXQoKSB7XG4gICAgICAgIGNvbnN0IGhvcml6b250YWwgPSB0aGlzLmlzSG9yaXpvbnRhbCgpO1xuICAgICAgICBjb25zdCBsZW5ndGggPSBob3Jpem9udGFsID8gdGhpcy53aWR0aCA6IHRoaXMuaGVpZ2h0O1xuICAgICAgICBjb25zdCBtaW5Sb3RhdGlvbiA9IHRvUmFkaWFucyh0aGlzLm9wdGlvbnMudGlja3MubWluUm90YXRpb24pO1xuICAgICAgICBjb25zdCByYXRpbyA9IChob3Jpem9udGFsID8gTWF0aC5zaW4obWluUm90YXRpb24pIDogTWF0aC5jb3MobWluUm90YXRpb24pKSB8fCAwLjAwMTtcbiAgICAgICAgY29uc3QgdGlja0ZvbnQgPSB0aGlzLl9yZXNvbHZlVGlja0ZvbnRPcHRpb25zKDApO1xuICAgICAgICByZXR1cm4gTWF0aC5jZWlsKGxlbmd0aCAvIE1hdGgubWluKDQwLCB0aWNrRm9udC5saW5lSGVpZ2h0IC8gcmF0aW8pKTtcbiAgICB9XG4gICAgZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgPyBOYU4gOiB0aGlzLmdldFBpeGVsRm9yRGVjaW1hbCgodmFsdWUgLSB0aGlzLl9zdGFydFZhbHVlKSAvIHRoaXMuX3ZhbHVlUmFuZ2UpO1xuICAgIH1cbiAgICBnZXRWYWx1ZUZvclBpeGVsKHBpeGVsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGFydFZhbHVlICsgdGhpcy5nZXREZWNpbWFsRm9yUGl4ZWwocGl4ZWwpICogdGhpcy5fdmFsdWVSYW5nZTtcbiAgICB9XG59XG5cbmNvbnN0IGxvZzEwRmxvb3IgPSAodik9Pk1hdGguZmxvb3IobG9nMTAodikpO1xuY29uc3QgY2hhbmdlRXhwb25lbnQgPSAodiwgbSk9Pk1hdGgucG93KDEwLCBsb2cxMEZsb29yKHYpICsgbSk7XG5mdW5jdGlvbiBpc01ham9yKHRpY2tWYWwpIHtcbiAgICBjb25zdCByZW1haW4gPSB0aWNrVmFsIC8gTWF0aC5wb3coMTAsIGxvZzEwRmxvb3IodGlja1ZhbCkpO1xuICAgIHJldHVybiByZW1haW4gPT09IDE7XG59XG5mdW5jdGlvbiBzdGVwcyhtaW4sIG1heCwgcmFuZ2VFeHApIHtcbiAgICBjb25zdCByYW5nZVN0ZXAgPSBNYXRoLnBvdygxMCwgcmFuZ2VFeHApO1xuICAgIGNvbnN0IHN0YXJ0ID0gTWF0aC5mbG9vcihtaW4gLyByYW5nZVN0ZXApO1xuICAgIGNvbnN0IGVuZCA9IE1hdGguY2VpbChtYXggLyByYW5nZVN0ZXApO1xuICAgIHJldHVybiBlbmQgLSBzdGFydDtcbn1cbmZ1bmN0aW9uIHN0YXJ0RXhwKG1pbiwgbWF4KSB7XG4gICAgY29uc3QgcmFuZ2UgPSBtYXggLSBtaW47XG4gICAgbGV0IHJhbmdlRXhwID0gbG9nMTBGbG9vcihyYW5nZSk7XG4gICAgd2hpbGUoc3RlcHMobWluLCBtYXgsIHJhbmdlRXhwKSA+IDEwKXtcbiAgICAgICAgcmFuZ2VFeHArKztcbiAgICB9XG4gICAgd2hpbGUoc3RlcHMobWluLCBtYXgsIHJhbmdlRXhwKSA8IDEwKXtcbiAgICAgICAgcmFuZ2VFeHAtLTtcbiAgICB9XG4gICAgcmV0dXJuIE1hdGgubWluKHJhbmdlRXhwLCBsb2cxMEZsb29yKG1pbikpO1xufVxuIGZ1bmN0aW9uIGdlbmVyYXRlVGlja3MoZ2VuZXJhdGlvbk9wdGlvbnMsIHsgbWluICwgbWF4ICB9KSB7XG4gICAgbWluID0gZmluaXRlT3JEZWZhdWx0KGdlbmVyYXRpb25PcHRpb25zLm1pbiwgbWluKTtcbiAgICBjb25zdCB0aWNrcyA9IFtdO1xuICAgIGNvbnN0IG1pbkV4cCA9IGxvZzEwRmxvb3IobWluKTtcbiAgICBsZXQgZXhwID0gc3RhcnRFeHAobWluLCBtYXgpO1xuICAgIGxldCBwcmVjaXNpb24gPSBleHAgPCAwID8gTWF0aC5wb3coMTAsIE1hdGguYWJzKGV4cCkpIDogMTtcbiAgICBjb25zdCBzdGVwU2l6ZSA9IE1hdGgucG93KDEwLCBleHApO1xuICAgIGNvbnN0IGJhc2UgPSBtaW5FeHAgPiBleHAgPyBNYXRoLnBvdygxMCwgbWluRXhwKSA6IDA7XG4gICAgY29uc3Qgc3RhcnQgPSBNYXRoLnJvdW5kKChtaW4gLSBiYXNlKSAqIHByZWNpc2lvbikgLyBwcmVjaXNpb247XG4gICAgY29uc3Qgb2Zmc2V0ID0gTWF0aC5mbG9vcigobWluIC0gYmFzZSkgLyBzdGVwU2l6ZSAvIDEwKSAqIHN0ZXBTaXplICogMTA7XG4gICAgbGV0IHNpZ25pZmljYW5kID0gTWF0aC5mbG9vcigoc3RhcnQgLSBvZmZzZXQpIC8gTWF0aC5wb3coMTAsIGV4cCkpO1xuICAgIGxldCB2YWx1ZSA9IGZpbml0ZU9yRGVmYXVsdChnZW5lcmF0aW9uT3B0aW9ucy5taW4sIE1hdGgucm91bmQoKGJhc2UgKyBvZmZzZXQgKyBzaWduaWZpY2FuZCAqIE1hdGgucG93KDEwLCBleHApKSAqIHByZWNpc2lvbikgLyBwcmVjaXNpb24pO1xuICAgIHdoaWxlKHZhbHVlIDwgbWF4KXtcbiAgICAgICAgdGlja3MucHVzaCh7XG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIG1ham9yOiBpc01ham9yKHZhbHVlKSxcbiAgICAgICAgICAgIHNpZ25pZmljYW5kXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoc2lnbmlmaWNhbmQgPj0gMTApIHtcbiAgICAgICAgICAgIHNpZ25pZmljYW5kID0gc2lnbmlmaWNhbmQgPCAxNSA/IDE1IDogMjA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzaWduaWZpY2FuZCsrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaWduaWZpY2FuZCA+PSAyMCkge1xuICAgICAgICAgICAgZXhwKys7XG4gICAgICAgICAgICBzaWduaWZpY2FuZCA9IDI7XG4gICAgICAgICAgICBwcmVjaXNpb24gPSBleHAgPj0gMCA/IDEgOiBwcmVjaXNpb247XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgPSBNYXRoLnJvdW5kKChiYXNlICsgb2Zmc2V0ICsgc2lnbmlmaWNhbmQgKiBNYXRoLnBvdygxMCwgZXhwKSkgKiBwcmVjaXNpb24pIC8gcHJlY2lzaW9uO1xuICAgIH1cbiAgICBjb25zdCBsYXN0VGljayA9IGZpbml0ZU9yRGVmYXVsdChnZW5lcmF0aW9uT3B0aW9ucy5tYXgsIHZhbHVlKTtcbiAgICB0aWNrcy5wdXNoKHtcbiAgICAgICAgdmFsdWU6IGxhc3RUaWNrLFxuICAgICAgICBtYWpvcjogaXNNYWpvcihsYXN0VGljayksXG4gICAgICAgIHNpZ25pZmljYW5kXG4gICAgfSk7XG4gICAgcmV0dXJuIHRpY2tzO1xufVxuY2xhc3MgTG9nYXJpdGhtaWNTY2FsZSBleHRlbmRzIFNjYWxlIHtcbiAgICBzdGF0aWMgaWQgPSAnbG9nYXJpdGhtaWMnO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgIGNhbGxiYWNrOiBUaWNrcy5mb3JtYXR0ZXJzLmxvZ2FyaXRobWljLFxuICAgICAgICAgICAgbWFqb3I6IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKGNmZyl7XG4gICAgICAgIHN1cGVyKGNmZyk7XG4gICAgICAgICB0aGlzLnN0YXJ0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5lbmQgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLl9zdGFydFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl92YWx1ZVJhbmdlID0gMDtcbiAgICB9XG4gICAgcGFyc2UocmF3LCBpbmRleCkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IExpbmVhclNjYWxlQmFzZS5wcm90b3R5cGUucGFyc2UuYXBwbHkodGhpcywgW1xuICAgICAgICAgICAgcmF3LFxuICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgXSk7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5femVybyA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc051bWJlckZpbml0ZSh2YWx1ZSkgJiYgdmFsdWUgPiAwID8gdmFsdWUgOiBudWxsO1xuICAgIH1cbiAgICBkZXRlcm1pbmVEYXRhTGltaXRzKCkge1xuICAgICAgICBjb25zdCB7IG1pbiAsIG1heCAgfSA9IHRoaXMuZ2V0TWluTWF4KHRydWUpO1xuICAgICAgICB0aGlzLm1pbiA9IGlzTnVtYmVyRmluaXRlKG1pbikgPyBNYXRoLm1heCgwLCBtaW4pIDogbnVsbDtcbiAgICAgICAgdGhpcy5tYXggPSBpc051bWJlckZpbml0ZShtYXgpID8gTWF0aC5tYXgoMCwgbWF4KSA6IG51bGw7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYmVnaW5BdFplcm8pIHtcbiAgICAgICAgICAgIHRoaXMuX3plcm8gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl96ZXJvICYmIHRoaXMubWluICE9PSB0aGlzLl9zdWdnZXN0ZWRNaW4gJiYgIWlzTnVtYmVyRmluaXRlKHRoaXMuX3VzZXJNaW4pKSB7XG4gICAgICAgICAgICB0aGlzLm1pbiA9IG1pbiA9PT0gY2hhbmdlRXhwb25lbnQodGhpcy5taW4sIDApID8gY2hhbmdlRXhwb25lbnQodGhpcy5taW4sIC0xKSA6IGNoYW5nZUV4cG9uZW50KHRoaXMubWluLCAwKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmhhbmRsZVRpY2tSYW5nZU9wdGlvbnMoKTtcbiAgICB9XG4gICAgaGFuZGxlVGlja1JhbmdlT3B0aW9ucygpIHtcbiAgICAgICAgY29uc3QgeyBtaW5EZWZpbmVkICwgbWF4RGVmaW5lZCAgfSA9IHRoaXMuZ2V0VXNlckJvdW5kcygpO1xuICAgICAgICBsZXQgbWluID0gdGhpcy5taW47XG4gICAgICAgIGxldCBtYXggPSB0aGlzLm1heDtcbiAgICAgICAgY29uc3Qgc2V0TWluID0gKHYpPT5taW4gPSBtaW5EZWZpbmVkID8gbWluIDogdjtcbiAgICAgICAgY29uc3Qgc2V0TWF4ID0gKHYpPT5tYXggPSBtYXhEZWZpbmVkID8gbWF4IDogdjtcbiAgICAgICAgaWYgKG1pbiA9PT0gbWF4KSB7XG4gICAgICAgICAgICBpZiAobWluIDw9IDApIHtcbiAgICAgICAgICAgICAgICBzZXRNaW4oMSk7XG4gICAgICAgICAgICAgICAgc2V0TWF4KDEwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2V0TWluKGNoYW5nZUV4cG9uZW50KG1pbiwgLTEpKTtcbiAgICAgICAgICAgICAgICBzZXRNYXgoY2hhbmdlRXhwb25lbnQobWF4LCArMSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChtaW4gPD0gMCkge1xuICAgICAgICAgICAgc2V0TWluKGNoYW5nZUV4cG9uZW50KG1heCwgLTEpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF4IDw9IDApIHtcbiAgICAgICAgICAgIHNldE1heChjaGFuZ2VFeHBvbmVudChtaW4sICsxKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5taW4gPSBtaW47XG4gICAgICAgIHRoaXMubWF4ID0gbWF4O1xuICAgIH1cbiAgICBidWlsZFRpY2tzKCkge1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBnZW5lcmF0aW9uT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIG1pbjogdGhpcy5fdXNlck1pbixcbiAgICAgICAgICAgIG1heDogdGhpcy5fdXNlck1heFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCB0aWNrcyA9IGdlbmVyYXRlVGlja3MoZ2VuZXJhdGlvbk9wdGlvbnMsIHRoaXMpO1xuICAgICAgICBpZiAob3B0cy5ib3VuZHMgPT09ICd0aWNrcycpIHtcbiAgICAgICAgICAgIF9zZXRNaW5BbmRNYXhCeUtleSh0aWNrcywgdGhpcywgJ3ZhbHVlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdHMucmV2ZXJzZSkge1xuICAgICAgICAgICAgdGlja3MucmV2ZXJzZSgpO1xuICAgICAgICAgICAgdGhpcy5zdGFydCA9IHRoaXMubWF4O1xuICAgICAgICAgICAgdGhpcy5lbmQgPSB0aGlzLm1pbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnQgPSB0aGlzLm1pbjtcbiAgICAgICAgICAgIHRoaXMuZW5kID0gdGhpcy5tYXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRpY2tzO1xuICAgIH1cbiBnZXRMYWJlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gJzAnIDogZm9ybWF0TnVtYmVyKHZhbHVlLCB0aGlzLmNoYXJ0Lm9wdGlvbnMubG9jYWxlLCB0aGlzLm9wdGlvbnMudGlja3MuZm9ybWF0KTtcbiAgICB9XG4gY29uZmlndXJlKCkge1xuICAgICAgICBjb25zdCBzdGFydCA9IHRoaXMubWluO1xuICAgICAgICBzdXBlci5jb25maWd1cmUoKTtcbiAgICAgICAgdGhpcy5fc3RhcnRWYWx1ZSA9IGxvZzEwKHN0YXJ0KTtcbiAgICAgICAgdGhpcy5fdmFsdWVSYW5nZSA9IGxvZzEwKHRoaXMubWF4KSAtIGxvZzEwKHN0YXJ0KTtcbiAgICB9XG4gICAgZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gMCkge1xuICAgICAgICAgICAgdmFsdWUgPSB0aGlzLm1pbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgaXNOYU4odmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBpeGVsRm9yRGVjaW1hbCh2YWx1ZSA9PT0gdGhpcy5taW4gPyAwIDogKGxvZzEwKHZhbHVlKSAtIHRoaXMuX3N0YXJ0VmFsdWUpIC8gdGhpcy5fdmFsdWVSYW5nZSk7XG4gICAgfVxuICAgIGdldFZhbHVlRm9yUGl4ZWwocGl4ZWwpIHtcbiAgICAgICAgY29uc3QgZGVjaW1hbCA9IHRoaXMuZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKTtcbiAgICAgICAgcmV0dXJuIE1hdGgucG93KDEwLCB0aGlzLl9zdGFydFZhbHVlICsgZGVjaW1hbCAqIHRoaXMuX3ZhbHVlUmFuZ2UpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0VGlja0JhY2tkcm9wSGVpZ2h0KG9wdHMpIHtcbiAgICBjb25zdCB0aWNrT3B0cyA9IG9wdHMudGlja3M7XG4gICAgaWYgKHRpY2tPcHRzLmRpc3BsYXkgJiYgb3B0cy5kaXNwbGF5KSB7XG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcodGlja09wdHMuYmFja2Ryb3BQYWRkaW5nKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlT3JEZWZhdWx0KHRpY2tPcHRzLmZvbnQgJiYgdGlja09wdHMuZm9udC5zaXplLCBkZWZhdWx0cy5mb250LnNpemUpICsgcGFkZGluZy5oZWlnaHQ7XG4gICAgfVxuICAgIHJldHVybiAwO1xufVxuZnVuY3Rpb24gbWVhc3VyZUxhYmVsU2l6ZShjdHgsIGZvbnQsIGxhYmVsKSB7XG4gICAgbGFiZWwgPSBpc0FycmF5KGxhYmVsKSA/IGxhYmVsIDogW1xuICAgICAgICBsYWJlbFxuICAgIF07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdzogX2xvbmdlc3RUZXh0KGN0eCwgZm9udC5zdHJpbmcsIGxhYmVsKSxcbiAgICAgICAgaDogbGFiZWwubGVuZ3RoICogZm9udC5saW5lSGVpZ2h0XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGRldGVybWluZUxpbWl0cyhhbmdsZSwgcG9zLCBzaXplLCBtaW4sIG1heCkge1xuICAgIGlmIChhbmdsZSA9PT0gbWluIHx8IGFuZ2xlID09PSBtYXgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXJ0OiBwb3MgLSBzaXplIC8gMixcbiAgICAgICAgICAgIGVuZDogcG9zICsgc2l6ZSAvIDJcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGFuZ2xlIDwgbWluIHx8IGFuZ2xlID4gbWF4KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGFydDogcG9zIC0gc2l6ZSxcbiAgICAgICAgICAgIGVuZDogcG9zXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0OiBwb3MsXG4gICAgICAgIGVuZDogcG9zICsgc2l6ZVxuICAgIH07XG59XG4gZnVuY3Rpb24gZml0V2l0aFBvaW50TGFiZWxzKHNjYWxlKSB7XG4gICAgY29uc3Qgb3JpZyA9IHtcbiAgICAgICAgbDogc2NhbGUubGVmdCArIHNjYWxlLl9wYWRkaW5nLmxlZnQsXG4gICAgICAgIHI6IHNjYWxlLnJpZ2h0IC0gc2NhbGUuX3BhZGRpbmcucmlnaHQsXG4gICAgICAgIHQ6IHNjYWxlLnRvcCArIHNjYWxlLl9wYWRkaW5nLnRvcCxcbiAgICAgICAgYjogc2NhbGUuYm90dG9tIC0gc2NhbGUuX3BhZGRpbmcuYm90dG9tXG4gICAgfTtcbiAgICBjb25zdCBsaW1pdHMgPSBPYmplY3QuYXNzaWduKHt9LCBvcmlnKTtcbiAgICBjb25zdCBsYWJlbFNpemVzID0gW107XG4gICAgY29uc3QgcGFkZGluZyA9IFtdO1xuICAgIGNvbnN0IHZhbHVlQ291bnQgPSBzY2FsZS5fcG9pbnRMYWJlbHMubGVuZ3RoO1xuICAgIGNvbnN0IHBvaW50TGFiZWxPcHRzID0gc2NhbGUub3B0aW9ucy5wb2ludExhYmVscztcbiAgICBjb25zdCBhZGRpdGlvbmFsQW5nbGUgPSBwb2ludExhYmVsT3B0cy5jZW50ZXJQb2ludExhYmVscyA/IFBJIC8gdmFsdWVDb3VudCA6IDA7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHZhbHVlQ291bnQ7IGkrKyl7XG4gICAgICAgIGNvbnN0IG9wdHMgPSBwb2ludExhYmVsT3B0cy5zZXRDb250ZXh0KHNjYWxlLmdldFBvaW50TGFiZWxDb250ZXh0KGkpKTtcbiAgICAgICAgcGFkZGluZ1tpXSA9IG9wdHMucGFkZGluZztcbiAgICAgICAgY29uc3QgcG9pbnRQb3NpdGlvbiA9IHNjYWxlLmdldFBvaW50UG9zaXRpb24oaSwgc2NhbGUuZHJhd2luZ0FyZWEgKyBwYWRkaW5nW2ldLCBhZGRpdGlvbmFsQW5nbGUpO1xuICAgICAgICBjb25zdCBwbEZvbnQgPSB0b0ZvbnQob3B0cy5mb250KTtcbiAgICAgICAgY29uc3QgdGV4dFNpemUgPSBtZWFzdXJlTGFiZWxTaXplKHNjYWxlLmN0eCwgcGxGb250LCBzY2FsZS5fcG9pbnRMYWJlbHNbaV0pO1xuICAgICAgICBsYWJlbFNpemVzW2ldID0gdGV4dFNpemU7XG4gICAgICAgIGNvbnN0IGFuZ2xlUmFkaWFucyA9IF9ub3JtYWxpemVBbmdsZShzY2FsZS5nZXRJbmRleEFuZ2xlKGkpICsgYWRkaXRpb25hbEFuZ2xlKTtcbiAgICAgICAgY29uc3QgYW5nbGUgPSBNYXRoLnJvdW5kKHRvRGVncmVlcyhhbmdsZVJhZGlhbnMpKTtcbiAgICAgICAgY29uc3QgaExpbWl0cyA9IGRldGVybWluZUxpbWl0cyhhbmdsZSwgcG9pbnRQb3NpdGlvbi54LCB0ZXh0U2l6ZS53LCAwLCAxODApO1xuICAgICAgICBjb25zdCB2TGltaXRzID0gZGV0ZXJtaW5lTGltaXRzKGFuZ2xlLCBwb2ludFBvc2l0aW9uLnksIHRleHRTaXplLmgsIDkwLCAyNzApO1xuICAgICAgICB1cGRhdGVMaW1pdHMobGltaXRzLCBvcmlnLCBhbmdsZVJhZGlhbnMsIGhMaW1pdHMsIHZMaW1pdHMpO1xuICAgIH1cbiAgICBzY2FsZS5zZXRDZW50ZXJQb2ludChvcmlnLmwgLSBsaW1pdHMubCwgbGltaXRzLnIgLSBvcmlnLnIsIG9yaWcudCAtIGxpbWl0cy50LCBsaW1pdHMuYiAtIG9yaWcuYik7XG4gICAgc2NhbGUuX3BvaW50TGFiZWxJdGVtcyA9IGJ1aWxkUG9pbnRMYWJlbEl0ZW1zKHNjYWxlLCBsYWJlbFNpemVzLCBwYWRkaW5nKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUxpbWl0cyhsaW1pdHMsIG9yaWcsIGFuZ2xlLCBoTGltaXRzLCB2TGltaXRzKSB7XG4gICAgY29uc3Qgc2luID0gTWF0aC5hYnMoTWF0aC5zaW4oYW5nbGUpKTtcbiAgICBjb25zdCBjb3MgPSBNYXRoLmFicyhNYXRoLmNvcyhhbmdsZSkpO1xuICAgIGxldCB4ID0gMDtcbiAgICBsZXQgeSA9IDA7XG4gICAgaWYgKGhMaW1pdHMuc3RhcnQgPCBvcmlnLmwpIHtcbiAgICAgICAgeCA9IChvcmlnLmwgLSBoTGltaXRzLnN0YXJ0KSAvIHNpbjtcbiAgICAgICAgbGltaXRzLmwgPSBNYXRoLm1pbihsaW1pdHMubCwgb3JpZy5sIC0geCk7XG4gICAgfSBlbHNlIGlmIChoTGltaXRzLmVuZCA+IG9yaWcucikge1xuICAgICAgICB4ID0gKGhMaW1pdHMuZW5kIC0gb3JpZy5yKSAvIHNpbjtcbiAgICAgICAgbGltaXRzLnIgPSBNYXRoLm1heChsaW1pdHMuciwgb3JpZy5yICsgeCk7XG4gICAgfVxuICAgIGlmICh2TGltaXRzLnN0YXJ0IDwgb3JpZy50KSB7XG4gICAgICAgIHkgPSAob3JpZy50IC0gdkxpbWl0cy5zdGFydCkgLyBjb3M7XG4gICAgICAgIGxpbWl0cy50ID0gTWF0aC5taW4obGltaXRzLnQsIG9yaWcudCAtIHkpO1xuICAgIH0gZWxzZSBpZiAodkxpbWl0cy5lbmQgPiBvcmlnLmIpIHtcbiAgICAgICAgeSA9ICh2TGltaXRzLmVuZCAtIG9yaWcuYikgLyBjb3M7XG4gICAgICAgIGxpbWl0cy5iID0gTWF0aC5tYXgobGltaXRzLmIsIG9yaWcuYiArIHkpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZVBvaW50TGFiZWxJdGVtKHNjYWxlLCBpbmRleCwgaXRlbU9wdHMpIHtcbiAgICBjb25zdCBvdXRlckRpc3RhbmNlID0gc2NhbGUuZHJhd2luZ0FyZWE7XG4gICAgY29uc3QgeyBleHRyYSAsIGFkZGl0aW9uYWxBbmdsZSAsIHBhZGRpbmcgLCBzaXplICB9ID0gaXRlbU9wdHM7XG4gICAgY29uc3QgcG9pbnRMYWJlbFBvc2l0aW9uID0gc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbihpbmRleCwgb3V0ZXJEaXN0YW5jZSArIGV4dHJhICsgcGFkZGluZywgYWRkaXRpb25hbEFuZ2xlKTtcbiAgICBjb25zdCBhbmdsZSA9IE1hdGgucm91bmQodG9EZWdyZWVzKF9ub3JtYWxpemVBbmdsZShwb2ludExhYmVsUG9zaXRpb24uYW5nbGUgKyBIQUxGX1BJKSkpO1xuICAgIGNvbnN0IHkgPSB5Rm9yQW5nbGUocG9pbnRMYWJlbFBvc2l0aW9uLnksIHNpemUuaCwgYW5nbGUpO1xuICAgIGNvbnN0IHRleHRBbGlnbiA9IGdldFRleHRBbGlnbkZvckFuZ2xlKGFuZ2xlKTtcbiAgICBjb25zdCBsZWZ0ID0gbGVmdEZvclRleHRBbGlnbihwb2ludExhYmVsUG9zaXRpb24ueCwgc2l6ZS53LCB0ZXh0QWxpZ24pO1xuICAgIHJldHVybiB7XG4gICAgICAgIHZpc2libGU6IHRydWUsXG4gICAgICAgIHg6IHBvaW50TGFiZWxQb3NpdGlvbi54LFxuICAgICAgICB5LFxuICAgICAgICB0ZXh0QWxpZ24sXG4gICAgICAgIGxlZnQsXG4gICAgICAgIHRvcDogeSxcbiAgICAgICAgcmlnaHQ6IGxlZnQgKyBzaXplLncsXG4gICAgICAgIGJvdHRvbTogeSArIHNpemUuaFxuICAgIH07XG59XG5mdW5jdGlvbiBpc05vdE92ZXJsYXBwZWQoaXRlbSwgYXJlYSkge1xuICAgIGlmICghYXJlYSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgeyBsZWZ0ICwgdG9wICwgcmlnaHQgLCBib3R0b20gIH0gPSBpdGVtO1xuICAgIGNvbnN0IGFwZXhlc0luQXJlYSA9IF9pc1BvaW50SW5BcmVhKHtcbiAgICAgICAgeDogbGVmdCxcbiAgICAgICAgeTogdG9wXG4gICAgfSwgYXJlYSkgfHwgX2lzUG9pbnRJbkFyZWEoe1xuICAgICAgICB4OiBsZWZ0LFxuICAgICAgICB5OiBib3R0b21cbiAgICB9LCBhcmVhKSB8fCBfaXNQb2ludEluQXJlYSh7XG4gICAgICAgIHg6IHJpZ2h0LFxuICAgICAgICB5OiB0b3BcbiAgICB9LCBhcmVhKSB8fCBfaXNQb2ludEluQXJlYSh7XG4gICAgICAgIHg6IHJpZ2h0LFxuICAgICAgICB5OiBib3R0b21cbiAgICB9LCBhcmVhKTtcbiAgICByZXR1cm4gIWFwZXhlc0luQXJlYTtcbn1cbmZ1bmN0aW9uIGJ1aWxkUG9pbnRMYWJlbEl0ZW1zKHNjYWxlLCBsYWJlbFNpemVzLCBwYWRkaW5nKSB7XG4gICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICBjb25zdCB2YWx1ZUNvdW50ID0gc2NhbGUuX3BvaW50TGFiZWxzLmxlbmd0aDtcbiAgICBjb25zdCBvcHRzID0gc2NhbGUub3B0aW9ucztcbiAgICBjb25zdCB7IGNlbnRlclBvaW50TGFiZWxzICwgZGlzcGxheSAgfSA9IG9wdHMucG9pbnRMYWJlbHM7XG4gICAgY29uc3QgaXRlbU9wdHMgPSB7XG4gICAgICAgIGV4dHJhOiBnZXRUaWNrQmFja2Ryb3BIZWlnaHQob3B0cykgLyAyLFxuICAgICAgICBhZGRpdGlvbmFsQW5nbGU6IGNlbnRlclBvaW50TGFiZWxzID8gUEkgLyB2YWx1ZUNvdW50IDogMFxuICAgIH07XG4gICAgbGV0IGFyZWE7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHZhbHVlQ291bnQ7IGkrKyl7XG4gICAgICAgIGl0ZW1PcHRzLnBhZGRpbmcgPSBwYWRkaW5nW2ldO1xuICAgICAgICBpdGVtT3B0cy5zaXplID0gbGFiZWxTaXplc1tpXTtcbiAgICAgICAgY29uc3QgaXRlbSA9IGNyZWF0ZVBvaW50TGFiZWxJdGVtKHNjYWxlLCBpLCBpdGVtT3B0cyk7XG4gICAgICAgIGl0ZW1zLnB1c2goaXRlbSk7XG4gICAgICAgIGlmIChkaXNwbGF5ID09PSAnYXV0bycpIHtcbiAgICAgICAgICAgIGl0ZW0udmlzaWJsZSA9IGlzTm90T3ZlcmxhcHBlZChpdGVtLCBhcmVhKTtcbiAgICAgICAgICAgIGlmIChpdGVtLnZpc2libGUpIHtcbiAgICAgICAgICAgICAgICBhcmVhID0gaXRlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaXRlbXM7XG59XG5mdW5jdGlvbiBnZXRUZXh0QWxpZ25Gb3JBbmdsZShhbmdsZSkge1xuICAgIGlmIChhbmdsZSA9PT0gMCB8fCBhbmdsZSA9PT0gMTgwKSB7XG4gICAgICAgIHJldHVybiAnY2VudGVyJztcbiAgICB9IGVsc2UgaWYgKGFuZ2xlIDwgMTgwKSB7XG4gICAgICAgIHJldHVybiAnbGVmdCc7XG4gICAgfVxuICAgIHJldHVybiAncmlnaHQnO1xufVxuZnVuY3Rpb24gbGVmdEZvclRleHRBbGlnbih4LCB3LCBhbGlnbikge1xuICAgIGlmIChhbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICB4IC09IHc7XG4gICAgfSBlbHNlIGlmIChhbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgeCAtPSB3IC8gMjtcbiAgICB9XG4gICAgcmV0dXJuIHg7XG59XG5mdW5jdGlvbiB5Rm9yQW5nbGUoeSwgaCwgYW5nbGUpIHtcbiAgICBpZiAoYW5nbGUgPT09IDkwIHx8IGFuZ2xlID09PSAyNzApIHtcbiAgICAgICAgeSAtPSBoIC8gMjtcbiAgICB9IGVsc2UgaWYgKGFuZ2xlID4gMjcwIHx8IGFuZ2xlIDwgOTApIHtcbiAgICAgICAgeSAtPSBoO1xuICAgIH1cbiAgICByZXR1cm4geTtcbn1cbmZ1bmN0aW9uIGRyYXdQb2ludExhYmVsQm94KGN0eCwgb3B0cywgaXRlbSkge1xuICAgIGNvbnN0IHsgbGVmdCAsIHRvcCAsIHJpZ2h0ICwgYm90dG9tICB9ID0gaXRlbTtcbiAgICBjb25zdCB7IGJhY2tkcm9wQ29sb3IgIH0gPSBvcHRzO1xuICAgIGlmICghaXNOdWxsT3JVbmRlZihiYWNrZHJvcENvbG9yKSkge1xuICAgICAgICBjb25zdCBib3JkZXJSYWRpdXMgPSB0b1RSQkxDb3JuZXJzKG9wdHMuYm9yZGVyUmFkaXVzKTtcbiAgICAgICAgY29uc3QgcGFkZGluZyA9IHRvUGFkZGluZyhvcHRzLmJhY2tkcm9wUGFkZGluZyk7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBiYWNrZHJvcENvbG9yO1xuICAgICAgICBjb25zdCBiYWNrZHJvcExlZnQgPSBsZWZ0IC0gcGFkZGluZy5sZWZ0O1xuICAgICAgICBjb25zdCBiYWNrZHJvcFRvcCA9IHRvcCAtIHBhZGRpbmcudG9wO1xuICAgICAgICBjb25zdCBiYWNrZHJvcFdpZHRoID0gcmlnaHQgLSBsZWZ0ICsgcGFkZGluZy53aWR0aDtcbiAgICAgICAgY29uc3QgYmFja2Ryb3BIZWlnaHQgPSBib3R0b20gLSB0b3AgKyBwYWRkaW5nLmhlaWdodDtcbiAgICAgICAgaWYgKE9iamVjdC52YWx1ZXMoYm9yZGVyUmFkaXVzKS5zb21lKCh2KT0+diAhPT0gMCkpIHtcbiAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIGFkZFJvdW5kZWRSZWN0UGF0aChjdHgsIHtcbiAgICAgICAgICAgICAgICB4OiBiYWNrZHJvcExlZnQsXG4gICAgICAgICAgICAgICAgeTogYmFja2Ryb3BUb3AsXG4gICAgICAgICAgICAgICAgdzogYmFja2Ryb3BXaWR0aCxcbiAgICAgICAgICAgICAgICBoOiBiYWNrZHJvcEhlaWdodCxcbiAgICAgICAgICAgICAgICByYWRpdXM6IGJvcmRlclJhZGl1c1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KGJhY2tkcm9wTGVmdCwgYmFja2Ryb3BUb3AsIGJhY2tkcm9wV2lkdGgsIGJhY2tkcm9wSGVpZ2h0KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGRyYXdQb2ludExhYmVscyhzY2FsZSwgbGFiZWxDb3VudCkge1xuICAgIGNvbnN0IHsgY3R4ICwgb3B0aW9uczogeyBwb2ludExhYmVscyAgfSAgfSA9IHNjYWxlO1xuICAgIGZvcihsZXQgaSA9IGxhYmVsQ291bnQgLSAxOyBpID49IDA7IGktLSl7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBzY2FsZS5fcG9pbnRMYWJlbEl0ZW1zW2ldO1xuICAgICAgICBpZiAoIWl0ZW0udmlzaWJsZSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3B0c0F0SW5kZXggPSBwb2ludExhYmVscy5zZXRDb250ZXh0KHNjYWxlLmdldFBvaW50TGFiZWxDb250ZXh0KGkpKTtcbiAgICAgICAgZHJhd1BvaW50TGFiZWxCb3goY3R4LCBvcHRzQXRJbmRleCwgaXRlbSk7XG4gICAgICAgIGNvbnN0IHBsRm9udCA9IHRvRm9udChvcHRzQXRJbmRleC5mb250KTtcbiAgICAgICAgY29uc3QgeyB4ICwgeSAsIHRleHRBbGlnbiAgfSA9IGl0ZW07XG4gICAgICAgIHJlbmRlclRleHQoY3R4LCBzY2FsZS5fcG9pbnRMYWJlbHNbaV0sIHgsIHkgKyBwbEZvbnQubGluZUhlaWdodCAvIDIsIHBsRm9udCwge1xuICAgICAgICAgICAgY29sb3I6IG9wdHNBdEluZGV4LmNvbG9yLFxuICAgICAgICAgICAgdGV4dEFsaWduOiB0ZXh0QWxpZ24sXG4gICAgICAgICAgICB0ZXh0QmFzZWxpbmU6ICdtaWRkbGUnXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHBhdGhSYWRpdXNMaW5lKHNjYWxlLCByYWRpdXMsIGNpcmN1bGFyLCBsYWJlbENvdW50KSB7XG4gICAgY29uc3QgeyBjdHggIH0gPSBzY2FsZTtcbiAgICBpZiAoY2lyY3VsYXIpIHtcbiAgICAgICAgY3R4LmFyYyhzY2FsZS54Q2VudGVyLCBzY2FsZS55Q2VudGVyLCByYWRpdXMsIDAsIFRBVSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHBvaW50UG9zaXRpb24gPSBzY2FsZS5nZXRQb2ludFBvc2l0aW9uKDAsIHJhZGl1cyk7XG4gICAgICAgIGN0eC5tb3ZlVG8ocG9pbnRQb3NpdGlvbi54LCBwb2ludFBvc2l0aW9uLnkpO1xuICAgICAgICBmb3IobGV0IGkgPSAxOyBpIDwgbGFiZWxDb3VudDsgaSsrKXtcbiAgICAgICAgICAgIHBvaW50UG9zaXRpb24gPSBzY2FsZS5nZXRQb2ludFBvc2l0aW9uKGksIHJhZGl1cyk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHBvaW50UG9zaXRpb24ueCwgcG9pbnRQb3NpdGlvbi55KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGRyYXdSYWRpdXNMaW5lKHNjYWxlLCBncmlkTGluZU9wdHMsIHJhZGl1cywgbGFiZWxDb3VudCwgYm9yZGVyT3B0cykge1xuICAgIGNvbnN0IGN0eCA9IHNjYWxlLmN0eDtcbiAgICBjb25zdCBjaXJjdWxhciA9IGdyaWRMaW5lT3B0cy5jaXJjdWxhcjtcbiAgICBjb25zdCB7IGNvbG9yICwgbGluZVdpZHRoICB9ID0gZ3JpZExpbmVPcHRzO1xuICAgIGlmICghY2lyY3VsYXIgJiYgIWxhYmVsQ291bnQgfHwgIWNvbG9yIHx8ICFsaW5lV2lkdGggfHwgcmFkaXVzIDwgMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGN0eC5zYXZlKCk7XG4gICAgY3R4LnN0cm9rZVN0eWxlID0gY29sb3I7XG4gICAgY3R4LmxpbmVXaWR0aCA9IGxpbmVXaWR0aDtcbiAgICBjdHguc2V0TGluZURhc2goYm9yZGVyT3B0cy5kYXNoKTtcbiAgICBjdHgubGluZURhc2hPZmZzZXQgPSBib3JkZXJPcHRzLmRhc2hPZmZzZXQ7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIHBhdGhSYWRpdXNMaW5lKHNjYWxlLCByYWRpdXMsIGNpcmN1bGFyLCBsYWJlbENvdW50KTtcbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgY3R4LnN0cm9rZSgpO1xuICAgIGN0eC5yZXN0b3JlKCk7XG59XG5mdW5jdGlvbiBjcmVhdGVQb2ludExhYmVsQ29udGV4dChwYXJlbnQsIGluZGV4LCBsYWJlbCkge1xuICAgIHJldHVybiBjcmVhdGVDb250ZXh0KHBhcmVudCwge1xuICAgICAgICBsYWJlbCxcbiAgICAgICAgaW5kZXgsXG4gICAgICAgIHR5cGU6ICdwb2ludExhYmVsJ1xuICAgIH0pO1xufVxuY2xhc3MgUmFkaWFsTGluZWFyU2NhbGUgZXh0ZW5kcyBMaW5lYXJTY2FsZUJhc2Uge1xuICAgIHN0YXRpYyBpZCA9ICdyYWRpYWxMaW5lYXInO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgYW5pbWF0ZTogdHJ1ZSxcbiAgICAgICAgcG9zaXRpb246ICdjaGFydEFyZWEnLFxuICAgICAgICBhbmdsZUxpbmVzOiB7XG4gICAgICAgICAgICBkaXNwbGF5OiB0cnVlLFxuICAgICAgICAgICAgbGluZVdpZHRoOiAxLFxuICAgICAgICAgICAgYm9yZGVyRGFzaDogW10sXG4gICAgICAgICAgICBib3JkZXJEYXNoT2Zmc2V0OiAwLjBcbiAgICAgICAgfSxcbiAgICAgICAgZ3JpZDoge1xuICAgICAgICAgICAgY2lyY3VsYXI6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHN0YXJ0QW5nbGU6IDAsXG4gICAgICAgIHRpY2tzOiB7XG4gICAgICAgICAgICBzaG93TGFiZWxCYWNrZHJvcDogdHJ1ZSxcbiAgICAgICAgICAgIGNhbGxiYWNrOiBUaWNrcy5mb3JtYXR0ZXJzLm51bWVyaWNcbiAgICAgICAgfSxcbiAgICAgICAgcG9pbnRMYWJlbHM6IHtcbiAgICAgICAgICAgIGJhY2tkcm9wQ29sb3I6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGJhY2tkcm9wUGFkZGluZzogMixcbiAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgICAgICBmb250OiB7XG4gICAgICAgICAgICAgICAgc2l6ZTogMTBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYWxsYmFjayAobGFiZWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGFiZWw7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGFkZGluZzogNSxcbiAgICAgICAgICAgIGNlbnRlclBvaW50TGFiZWxzOiBmYWxzZVxuICAgICAgICB9XG4gICAgfTtcbiAgICBzdGF0aWMgZGVmYXVsdFJvdXRlcyA9IHtcbiAgICAgICAgJ2FuZ2xlTGluZXMuY29sb3InOiAnYm9yZGVyQ29sb3InLFxuICAgICAgICAncG9pbnRMYWJlbHMuY29sb3InOiAnY29sb3InLFxuICAgICAgICAndGlja3MuY29sb3InOiAnY29sb3InXG4gICAgfTtcbiAgICBzdGF0aWMgZGVzY3JpcHRvcnMgPSB7XG4gICAgICAgIGFuZ2xlTGluZXM6IHtcbiAgICAgICAgICAgIF9mYWxsYmFjazogJ2dyaWQnXG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKGNmZyl7XG4gICAgICAgIHN1cGVyKGNmZyk7XG4gICAgICAgICB0aGlzLnhDZW50ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLnlDZW50ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLmRyYXdpbmdBcmVhID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5fcG9pbnRMYWJlbHMgPSBbXTtcbiAgICAgICAgdGhpcy5fcG9pbnRMYWJlbEl0ZW1zID0gW107XG4gICAgfVxuICAgIHNldERpbWVuc2lvbnMoKSB7XG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSB0aGlzLl9wYWRkaW5nID0gdG9QYWRkaW5nKGdldFRpY2tCYWNrZHJvcEhlaWdodCh0aGlzLm9wdGlvbnMpIC8gMik7XG4gICAgICAgIGNvbnN0IHcgPSB0aGlzLndpZHRoID0gdGhpcy5tYXhXaWR0aCAtIHBhZGRpbmcud2lkdGg7XG4gICAgICAgIGNvbnN0IGggPSB0aGlzLmhlaWdodCA9IHRoaXMubWF4SGVpZ2h0IC0gcGFkZGluZy5oZWlnaHQ7XG4gICAgICAgIHRoaXMueENlbnRlciA9IE1hdGguZmxvb3IodGhpcy5sZWZ0ICsgdyAvIDIgKyBwYWRkaW5nLmxlZnQpO1xuICAgICAgICB0aGlzLnlDZW50ZXIgPSBNYXRoLmZsb29yKHRoaXMudG9wICsgaCAvIDIgKyBwYWRkaW5nLnRvcCk7XG4gICAgICAgIHRoaXMuZHJhd2luZ0FyZWEgPSBNYXRoLmZsb29yKE1hdGgubWluKHcsIGgpIC8gMik7XG4gICAgfVxuICAgIGRldGVybWluZURhdGFMaW1pdHMoKSB7XG4gICAgICAgIGNvbnN0IHsgbWluICwgbWF4ICB9ID0gdGhpcy5nZXRNaW5NYXgoZmFsc2UpO1xuICAgICAgICB0aGlzLm1pbiA9IGlzTnVtYmVyRmluaXRlKG1pbikgJiYgIWlzTmFOKG1pbikgPyBtaW4gOiAwO1xuICAgICAgICB0aGlzLm1heCA9IGlzTnVtYmVyRmluaXRlKG1heCkgJiYgIWlzTmFOKG1heCkgPyBtYXggOiAwO1xuICAgICAgICB0aGlzLmhhbmRsZVRpY2tSYW5nZU9wdGlvbnMoKTtcbiAgICB9XG4gY29tcHV0ZVRpY2tMaW1pdCgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguY2VpbCh0aGlzLmRyYXdpbmdBcmVhIC8gZ2V0VGlja0JhY2tkcm9wSGVpZ2h0KHRoaXMub3B0aW9ucykpO1xuICAgIH1cbiAgICBnZW5lcmF0ZVRpY2tMYWJlbHModGlja3MpIHtcbiAgICAgICAgTGluZWFyU2NhbGVCYXNlLnByb3RvdHlwZS5nZW5lcmF0ZVRpY2tMYWJlbHMuY2FsbCh0aGlzLCB0aWNrcyk7XG4gICAgICAgIHRoaXMuX3BvaW50TGFiZWxzID0gdGhpcy5nZXRMYWJlbHMoKS5tYXAoKHZhbHVlLCBpbmRleCk9PntcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gY2FsbGJhY2sodGhpcy5vcHRpb25zLnBvaW50TGFiZWxzLmNhbGxiYWNrLCBbXG4gICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgIF0sIHRoaXMpO1xuICAgICAgICAgICAgcmV0dXJuIGxhYmVsIHx8IGxhYmVsID09PSAwID8gbGFiZWwgOiAnJztcbiAgICAgICAgfSkuZmlsdGVyKCh2LCBpKT0+dGhpcy5jaGFydC5nZXREYXRhVmlzaWJpbGl0eShpKSk7XG4gICAgfVxuICAgIGZpdCgpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgaWYgKG9wdHMuZGlzcGxheSAmJiBvcHRzLnBvaW50TGFiZWxzLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIGZpdFdpdGhQb2ludExhYmVscyh0aGlzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q2VudGVyUG9pbnQoMCwgMCwgMCwgMCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0Q2VudGVyUG9pbnQobGVmdE1vdmVtZW50LCByaWdodE1vdmVtZW50LCB0b3BNb3ZlbWVudCwgYm90dG9tTW92ZW1lbnQpIHtcbiAgICAgICAgdGhpcy54Q2VudGVyICs9IE1hdGguZmxvb3IoKGxlZnRNb3ZlbWVudCAtIHJpZ2h0TW92ZW1lbnQpIC8gMik7XG4gICAgICAgIHRoaXMueUNlbnRlciArPSBNYXRoLmZsb29yKCh0b3BNb3ZlbWVudCAtIGJvdHRvbU1vdmVtZW50KSAvIDIpO1xuICAgICAgICB0aGlzLmRyYXdpbmdBcmVhIC09IE1hdGgubWluKHRoaXMuZHJhd2luZ0FyZWEgLyAyLCBNYXRoLm1heChsZWZ0TW92ZW1lbnQsIHJpZ2h0TW92ZW1lbnQsIHRvcE1vdmVtZW50LCBib3R0b21Nb3ZlbWVudCkpO1xuICAgIH1cbiAgICBnZXRJbmRleEFuZ2xlKGluZGV4KSB7XG4gICAgICAgIGNvbnN0IGFuZ2xlTXVsdGlwbGllciA9IFRBVSAvICh0aGlzLl9wb2ludExhYmVscy5sZW5ndGggfHwgMSk7XG4gICAgICAgIGNvbnN0IHN0YXJ0QW5nbGUgPSB0aGlzLm9wdGlvbnMuc3RhcnRBbmdsZSB8fCAwO1xuICAgICAgICByZXR1cm4gX25vcm1hbGl6ZUFuZ2xlKGluZGV4ICogYW5nbGVNdWx0aXBsaWVyICsgdG9SYWRpYW5zKHN0YXJ0QW5nbGUpKTtcbiAgICB9XG4gICAgZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUodmFsdWUpIHtcbiAgICAgICAgaWYgKGlzTnVsbE9yVW5kZWYodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNjYWxpbmdGYWN0b3IgPSB0aGlzLmRyYXdpbmdBcmVhIC8gKHRoaXMubWF4IC0gdGhpcy5taW4pO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJldmVyc2UpIHtcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5tYXggLSB2YWx1ZSkgKiBzY2FsaW5nRmFjdG9yO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAodmFsdWUgLSB0aGlzLm1pbikgKiBzY2FsaW5nRmFjdG9yO1xuICAgIH1cbiAgICBnZXRWYWx1ZUZvckRpc3RhbmNlRnJvbUNlbnRlcihkaXN0YW5jZSkge1xuICAgICAgICBpZiAoaXNOdWxsT3JVbmRlZihkaXN0YW5jZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2NhbGVkRGlzdGFuY2UgPSBkaXN0YW5jZSAvICh0aGlzLmRyYXdpbmdBcmVhIC8gKHRoaXMubWF4IC0gdGhpcy5taW4pKTtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5yZXZlcnNlID8gdGhpcy5tYXggLSBzY2FsZWREaXN0YW5jZSA6IHRoaXMubWluICsgc2NhbGVkRGlzdGFuY2U7XG4gICAgfVxuICAgIGdldFBvaW50TGFiZWxDb250ZXh0KGluZGV4KSB7XG4gICAgICAgIGNvbnN0IHBvaW50TGFiZWxzID0gdGhpcy5fcG9pbnRMYWJlbHMgfHwgW107XG4gICAgICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgcG9pbnRMYWJlbHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBwb2ludExhYmVsID0gcG9pbnRMYWJlbHNbaW5kZXhdO1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVBvaW50TGFiZWxDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpLCBpbmRleCwgcG9pbnRMYWJlbCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0UG9pbnRQb3NpdGlvbihpbmRleCwgZGlzdGFuY2VGcm9tQ2VudGVyLCBhZGRpdGlvbmFsQW5nbGUgPSAwKSB7XG4gICAgICAgIGNvbnN0IGFuZ2xlID0gdGhpcy5nZXRJbmRleEFuZ2xlKGluZGV4KSAtIEhBTEZfUEkgKyBhZGRpdGlvbmFsQW5nbGU7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiBNYXRoLmNvcyhhbmdsZSkgKiBkaXN0YW5jZUZyb21DZW50ZXIgKyB0aGlzLnhDZW50ZXIsXG4gICAgICAgICAgICB5OiBNYXRoLnNpbihhbmdsZSkgKiBkaXN0YW5jZUZyb21DZW50ZXIgKyB0aGlzLnlDZW50ZXIsXG4gICAgICAgICAgICBhbmdsZVxuICAgICAgICB9O1xuICAgIH1cbiAgICBnZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUoaW5kZXgsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBvaW50UG9zaXRpb24oaW5kZXgsIHRoaXMuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUodmFsdWUpKTtcbiAgICB9XG4gICAgZ2V0QmFzZVBvc2l0aW9uKGluZGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZShpbmRleCB8fCAwLCB0aGlzLmdldEJhc2VWYWx1ZSgpKTtcbiAgICB9XG4gICAgZ2V0UG9pbnRMYWJlbFBvc2l0aW9uKGluZGV4KSB7XG4gICAgICAgIGNvbnN0IHsgbGVmdCAsIHRvcCAsIHJpZ2h0ICwgYm90dG9tICB9ID0gdGhpcy5fcG9pbnRMYWJlbEl0ZW1zW2luZGV4XTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgICB0b3AsXG4gICAgICAgICAgICByaWdodCxcbiAgICAgICAgICAgIGJvdHRvbVxuICAgICAgICB9O1xuICAgIH1cbiBkcmF3QmFja2dyb3VuZCgpIHtcbiAgICAgICAgY29uc3QgeyBiYWNrZ3JvdW5kQ29sb3IgLCBncmlkOiB7IGNpcmN1bGFyICB9ICB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBpZiAoYmFja2dyb3VuZENvbG9yKSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBwYXRoUmFkaXVzTGluZSh0aGlzLCB0aGlzLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHRoaXMuX2VuZFZhbHVlKSwgY2lyY3VsYXIsIHRoaXMuX3BvaW50TGFiZWxzLmxlbmd0aCk7XG4gICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gYmFja2dyb3VuZENvbG9yO1xuICAgICAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gZHJhd0dyaWQoKSB7XG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCB7IGFuZ2xlTGluZXMgLCBncmlkICwgYm9yZGVyICB9ID0gb3B0cztcbiAgICAgICAgY29uc3QgbGFiZWxDb3VudCA9IHRoaXMuX3BvaW50TGFiZWxzLmxlbmd0aDtcbiAgICAgICAgbGV0IGksIG9mZnNldCwgcG9zaXRpb247XG4gICAgICAgIGlmIChvcHRzLnBvaW50TGFiZWxzLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIGRyYXdQb2ludExhYmVscyh0aGlzLCBsYWJlbENvdW50KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ3JpZC5kaXNwbGF5KSB7XG4gICAgICAgICAgICB0aGlzLnRpY2tzLmZvckVhY2goKHRpY2ssIGluZGV4KT0+e1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSB0aGlzLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHRpY2sudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5nZXRDb250ZXh0KGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3B0c0F0SW5kZXggPSBncmlkLnNldENvbnRleHQoY29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wdHNBdEluZGV4Qm9yZGVyID0gYm9yZGVyLnNldENvbnRleHQoY29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIGRyYXdSYWRpdXNMaW5lKHRoaXMsIG9wdHNBdEluZGV4LCBvZmZzZXQsIGxhYmVsQ291bnQsIG9wdHNBdEluZGV4Qm9yZGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYW5nbGVMaW5lcy5kaXNwbGF5KSB7XG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgZm9yKGkgPSBsYWJlbENvdW50IC0gMTsgaSA+PSAwOyBpLS0pe1xuICAgICAgICAgICAgICAgIGNvbnN0IG9wdHNBdEluZGV4ID0gYW5nbGVMaW5lcy5zZXRDb250ZXh0KHRoaXMuZ2V0UG9pbnRMYWJlbENvbnRleHQoaSkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgY29sb3IgLCBsaW5lV2lkdGggIH0gPSBvcHRzQXRJbmRleDtcbiAgICAgICAgICAgICAgICBpZiAoIWxpbmVXaWR0aCB8fCAhY29sb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN0eC5saW5lV2lkdGggPSBsaW5lV2lkdGg7XG4gICAgICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gY29sb3I7XG4gICAgICAgICAgICAgICAgY3R4LnNldExpbmVEYXNoKG9wdHNBdEluZGV4LmJvcmRlckRhc2gpO1xuICAgICAgICAgICAgICAgIGN0eC5saW5lRGFzaE9mZnNldCA9IG9wdHNBdEluZGV4LmJvcmRlckRhc2hPZmZzZXQ7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gdGhpcy5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZShvcHRzLnRpY2tzLnJldmVyc2UgPyB0aGlzLm1pbiA6IHRoaXMubWF4KTtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IHRoaXMuZ2V0UG9pbnRQb3NpdGlvbihpLCBvZmZzZXQpO1xuICAgICAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICBjdHgubW92ZVRvKHRoaXMueENlbnRlciwgdGhpcy55Q2VudGVyKTtcbiAgICAgICAgICAgICAgICBjdHgubGluZVRvKHBvc2l0aW9uLngsIHBvc2l0aW9uLnkpO1xuICAgICAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gZHJhd0JvcmRlcigpIHt9XG4gZHJhd0xhYmVscygpIHtcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHRpY2tPcHRzID0gb3B0cy50aWNrcztcbiAgICAgICAgaWYgKCF0aWNrT3B0cy5kaXNwbGF5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RhcnRBbmdsZSA9IHRoaXMuZ2V0SW5kZXhBbmdsZSgwKTtcbiAgICAgICAgbGV0IG9mZnNldCwgd2lkdGg7XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIGN0eC50cmFuc2xhdGUodGhpcy54Q2VudGVyLCB0aGlzLnlDZW50ZXIpO1xuICAgICAgICBjdHgucm90YXRlKHN0YXJ0QW5nbGUpO1xuICAgICAgICBjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICAgICAgdGhpcy50aWNrcy5mb3JFYWNoKCh0aWNrLCBpbmRleCk9PntcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCAmJiAhb3B0cy5yZXZlcnNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgb3B0c0F0SW5kZXggPSB0aWNrT3B0cy5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dChpbmRleCkpO1xuICAgICAgICAgICAgY29uc3QgdGlja0ZvbnQgPSB0b0ZvbnQob3B0c0F0SW5kZXguZm9udCk7XG4gICAgICAgICAgICBvZmZzZXQgPSB0aGlzLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHRoaXMudGlja3NbaW5kZXhdLnZhbHVlKTtcbiAgICAgICAgICAgIGlmIChvcHRzQXRJbmRleC5zaG93TGFiZWxCYWNrZHJvcCkge1xuICAgICAgICAgICAgICAgIGN0eC5mb250ID0gdGlja0ZvbnQuc3RyaW5nO1xuICAgICAgICAgICAgICAgIHdpZHRoID0gY3R4Lm1lYXN1cmVUZXh0KHRpY2subGFiZWwpLndpZHRoO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRzQXRJbmRleC5iYWNrZHJvcENvbG9yO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcob3B0c0F0SW5kZXguYmFja2Ryb3BQYWRkaW5nKTtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFJlY3QoLXdpZHRoIC8gMiAtIHBhZGRpbmcubGVmdCwgLW9mZnNldCAtIHRpY2tGb250LnNpemUgLyAyIC0gcGFkZGluZy50b3AsIHdpZHRoICsgcGFkZGluZy53aWR0aCwgdGlja0ZvbnQuc2l6ZSArIHBhZGRpbmcuaGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlbmRlclRleHQoY3R4LCB0aWNrLmxhYmVsLCAwLCAtb2Zmc2V0LCB0aWNrRm9udCwge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBvcHRzQXRJbmRleC5jb2xvcixcbiAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogb3B0c0F0SW5kZXgudGV4dFN0cm9rZUNvbG9yLFxuICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiBvcHRzQXRJbmRleC50ZXh0U3Ryb2tlV2lkdGhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG4gZHJhd1RpdGxlKCkge31cbn1cblxuY29uc3QgSU5URVJWQUxTID0ge1xuICAgIG1pbGxpc2Vjb25kOiB7XG4gICAgICAgIGNvbW1vbjogdHJ1ZSxcbiAgICAgICAgc2l6ZTogMSxcbiAgICAgICAgc3RlcHM6IDEwMDBcbiAgICB9LFxuICAgIHNlY29uZDoge1xuICAgICAgICBjb21tb246IHRydWUsXG4gICAgICAgIHNpemU6IDEwMDAsXG4gICAgICAgIHN0ZXBzOiA2MFxuICAgIH0sXG4gICAgbWludXRlOiB7XG4gICAgICAgIGNvbW1vbjogdHJ1ZSxcbiAgICAgICAgc2l6ZTogNjAwMDAsXG4gICAgICAgIHN0ZXBzOiA2MFxuICAgIH0sXG4gICAgaG91cjoge1xuICAgICAgICBjb21tb246IHRydWUsXG4gICAgICAgIHNpemU6IDM2MDAwMDAsXG4gICAgICAgIHN0ZXBzOiAyNFxuICAgIH0sXG4gICAgZGF5OiB7XG4gICAgICAgIGNvbW1vbjogdHJ1ZSxcbiAgICAgICAgc2l6ZTogODY0MDAwMDAsXG4gICAgICAgIHN0ZXBzOiAzMFxuICAgIH0sXG4gICAgd2Vlazoge1xuICAgICAgICBjb21tb246IGZhbHNlLFxuICAgICAgICBzaXplOiA2MDQ4MDAwMDAsXG4gICAgICAgIHN0ZXBzOiA0XG4gICAgfSxcbiAgICBtb250aDoge1xuICAgICAgICBjb21tb246IHRydWUsXG4gICAgICAgIHNpemU6IDIuNjI4ZTksXG4gICAgICAgIHN0ZXBzOiAxMlxuICAgIH0sXG4gICAgcXVhcnRlcjoge1xuICAgICAgICBjb21tb246IGZhbHNlLFxuICAgICAgICBzaXplOiA3Ljg4NGU5LFxuICAgICAgICBzdGVwczogNFxuICAgIH0sXG4gICAgeWVhcjoge1xuICAgICAgICBjb21tb246IHRydWUsXG4gICAgICAgIHNpemU6IDMuMTU0ZTEwXG4gICAgfVxufTtcbiBjb25zdCBVTklUUyA9ICAvKiAjX19QVVJFX18gKi8gT2JqZWN0LmtleXMoSU5URVJWQUxTKTtcbiBmdW5jdGlvbiBzb3J0ZXIoYSwgYikge1xuICAgIHJldHVybiBhIC0gYjtcbn1cbiBmdW5jdGlvbiBwYXJzZShzY2FsZSwgaW5wdXQpIHtcbiAgICBpZiAoaXNOdWxsT3JVbmRlZihpbnB1dCkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IGFkYXB0ZXIgPSBzY2FsZS5fYWRhcHRlcjtcbiAgICBjb25zdCB7IHBhcnNlciAsIHJvdW5kICwgaXNvV2Vla2RheSAgfSA9IHNjYWxlLl9wYXJzZU9wdHM7XG4gICAgbGV0IHZhbHVlID0gaW5wdXQ7XG4gICAgaWYgKHR5cGVvZiBwYXJzZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFsdWUgPSBwYXJzZXIodmFsdWUpO1xuICAgIH1cbiAgICBpZiAoIWlzTnVtYmVyRmluaXRlKHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9IHR5cGVvZiBwYXJzZXIgPT09ICdzdHJpbmcnID8gYWRhcHRlci5wYXJzZSh2YWx1ZSwgIHBhcnNlcikgOiBhZGFwdGVyLnBhcnNlKHZhbHVlKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAocm91bmQpIHtcbiAgICAgICAgdmFsdWUgPSByb3VuZCA9PT0gJ3dlZWsnICYmIChpc051bWJlcihpc29XZWVrZGF5KSB8fCBpc29XZWVrZGF5ID09PSB0cnVlKSA/IGFkYXB0ZXIuc3RhcnRPZih2YWx1ZSwgJ2lzb1dlZWsnLCBpc29XZWVrZGF5KSA6IGFkYXB0ZXIuc3RhcnRPZih2YWx1ZSwgcm91bmQpO1xuICAgIH1cbiAgICByZXR1cm4gK3ZhbHVlO1xufVxuIGZ1bmN0aW9uIGRldGVybWluZVVuaXRGb3JBdXRvVGlja3MobWluVW5pdCwgbWluLCBtYXgsIGNhcGFjaXR5KSB7XG4gICAgY29uc3QgaWxlbiA9IFVOSVRTLmxlbmd0aDtcbiAgICBmb3IobGV0IGkgPSBVTklUUy5pbmRleE9mKG1pblVuaXQpOyBpIDwgaWxlbiAtIDE7ICsraSl7XG4gICAgICAgIGNvbnN0IGludGVydmFsID0gSU5URVJWQUxTW1VOSVRTW2ldXTtcbiAgICAgICAgY29uc3QgZmFjdG9yID0gaW50ZXJ2YWwuc3RlcHMgPyBpbnRlcnZhbC5zdGVwcyA6IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSO1xuICAgICAgICBpZiAoaW50ZXJ2YWwuY29tbW9uICYmIE1hdGguY2VpbCgobWF4IC0gbWluKSAvIChmYWN0b3IgKiBpbnRlcnZhbC5zaXplKSkgPD0gY2FwYWNpdHkpIHtcbiAgICAgICAgICAgIHJldHVybiBVTklUU1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gVU5JVFNbaWxlbiAtIDFdO1xufVxuIGZ1bmN0aW9uIGRldGVybWluZVVuaXRGb3JGb3JtYXR0aW5nKHNjYWxlLCBudW1UaWNrcywgbWluVW5pdCwgbWluLCBtYXgpIHtcbiAgICBmb3IobGV0IGkgPSBVTklUUy5sZW5ndGggLSAxOyBpID49IFVOSVRTLmluZGV4T2YobWluVW5pdCk7IGktLSl7XG4gICAgICAgIGNvbnN0IHVuaXQgPSBVTklUU1tpXTtcbiAgICAgICAgaWYgKElOVEVSVkFMU1t1bml0XS5jb21tb24gJiYgc2NhbGUuX2FkYXB0ZXIuZGlmZihtYXgsIG1pbiwgdW5pdCkgPj0gbnVtVGlja3MgLSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5pdDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gVU5JVFNbbWluVW5pdCA/IFVOSVRTLmluZGV4T2YobWluVW5pdCkgOiAwXTtcbn1cbiBmdW5jdGlvbiBkZXRlcm1pbmVNYWpvclVuaXQodW5pdCkge1xuICAgIGZvcihsZXQgaSA9IFVOSVRTLmluZGV4T2YodW5pdCkgKyAxLCBpbGVuID0gVU5JVFMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgaWYgKElOVEVSVkFMU1tVTklUU1tpXV0uY29tbW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gVU5JVFNbaV07XG4gICAgICAgIH1cbiAgICB9XG59XG4gZnVuY3Rpb24gYWRkVGljayh0aWNrcywgdGltZSwgdGltZXN0YW1wcykge1xuICAgIGlmICghdGltZXN0YW1wcykge1xuICAgICAgICB0aWNrc1t0aW1lXSA9IHRydWU7XG4gICAgfSBlbHNlIGlmICh0aW1lc3RhbXBzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCB7IGxvICwgaGkgIH0gPSBfbG9va3VwKHRpbWVzdGFtcHMsIHRpbWUpO1xuICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSB0aW1lc3RhbXBzW2xvXSA+PSB0aW1lID8gdGltZXN0YW1wc1tsb10gOiB0aW1lc3RhbXBzW2hpXTtcbiAgICAgICAgdGlja3NbdGltZXN0YW1wXSA9IHRydWU7XG4gICAgfVxufVxuIGZ1bmN0aW9uIHNldE1ham9yVGlja3Moc2NhbGUsIHRpY2tzLCBtYXAsIG1ham9yVW5pdCkge1xuICAgIGNvbnN0IGFkYXB0ZXIgPSBzY2FsZS5fYWRhcHRlcjtcbiAgICBjb25zdCBmaXJzdCA9ICthZGFwdGVyLnN0YXJ0T2YodGlja3NbMF0udmFsdWUsIG1ham9yVW5pdCk7XG4gICAgY29uc3QgbGFzdCA9IHRpY2tzW3RpY2tzLmxlbmd0aCAtIDFdLnZhbHVlO1xuICAgIGxldCBtYWpvciwgaW5kZXg7XG4gICAgZm9yKG1ham9yID0gZmlyc3Q7IG1ham9yIDw9IGxhc3Q7IG1ham9yID0gK2FkYXB0ZXIuYWRkKG1ham9yLCAxLCBtYWpvclVuaXQpKXtcbiAgICAgICAgaW5kZXggPSBtYXBbbWFqb3JdO1xuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgdGlja3NbaW5kZXhdLm1ham9yID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGlja3M7XG59XG4gZnVuY3Rpb24gdGlja3NGcm9tVGltZXN0YW1wcyhzY2FsZSwgdmFsdWVzLCBtYWpvclVuaXQpIHtcbiAgICBjb25zdCB0aWNrcyA9IFtdO1xuICAgICBjb25zdCBtYXAgPSB7fTtcbiAgICBjb25zdCBpbGVuID0gdmFsdWVzLmxlbmd0aDtcbiAgICBsZXQgaSwgdmFsdWU7XG4gICAgZm9yKGkgPSAwOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZXNbaV07XG4gICAgICAgIG1hcFt2YWx1ZV0gPSBpO1xuICAgICAgICB0aWNrcy5wdXNoKHtcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgbWFqb3I6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gaWxlbiA9PT0gMCB8fCAhbWFqb3JVbml0ID8gdGlja3MgOiBzZXRNYWpvclRpY2tzKHNjYWxlLCB0aWNrcywgbWFwLCBtYWpvclVuaXQpO1xufVxuY2xhc3MgVGltZVNjYWxlIGV4dGVuZHMgU2NhbGUge1xuICAgIHN0YXRpYyBpZCA9ICd0aW1lJztcbiBzdGF0aWMgZGVmYXVsdHMgPSB7XG4gYm91bmRzOiAnZGF0YScsXG4gICAgICAgIGFkYXB0ZXJzOiB7fSxcbiAgICAgICAgdGltZToge1xuICAgICAgICAgICAgcGFyc2VyOiBmYWxzZSxcbiAgICAgICAgICAgIHVuaXQ6IGZhbHNlLFxuICAgICAgICAgICAgcm91bmQ6IGZhbHNlLFxuICAgICAgICAgICAgaXNvV2Vla2RheTogZmFsc2UsXG4gICAgICAgICAgICBtaW5Vbml0OiAnbWlsbGlzZWNvbmQnLFxuICAgICAgICAgICAgZGlzcGxheUZvcm1hdHM6IHt9XG4gICAgICAgIH0sXG4gICAgICAgIHRpY2tzOiB7XG4gc291cmNlOiAnYXV0bycsXG4gICAgICAgICAgICBjYWxsYmFjazogZmFsc2UsXG4gICAgICAgICAgICBtYWpvcjoge1xuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuIGNvbnN0cnVjdG9yKHByb3BzKXtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICAgdGhpcy5fY2FjaGUgPSB7XG4gICAgICAgICAgICBkYXRhOiBbXSxcbiAgICAgICAgICAgIGxhYmVsczogW10sXG4gICAgICAgICAgICBhbGw6IFtdXG4gICAgICAgIH07XG4gICAgICAgICB0aGlzLl91bml0ID0gJ2RheSc7XG4gICAgICAgICB0aGlzLl9tYWpvclVuaXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX29mZnNldHMgPSB7fTtcbiAgICAgICAgdGhpcy5fbm9ybWFsaXplZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wYXJzZU9wdHMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGluaXQoc2NhbGVPcHRzLCBvcHRzID0ge30pIHtcbiAgICAgICAgY29uc3QgdGltZSA9IHNjYWxlT3B0cy50aW1lIHx8IChzY2FsZU9wdHMudGltZSA9IHt9KTtcbiAgICAgICAgIGNvbnN0IGFkYXB0ZXIgPSB0aGlzLl9hZGFwdGVyID0gbmV3IGFkYXB0ZXJzLl9kYXRlKHNjYWxlT3B0cy5hZGFwdGVycy5kYXRlKTtcbiAgICAgICAgYWRhcHRlci5pbml0KG9wdHMpO1xuICAgICAgICBtZXJnZUlmKHRpbWUuZGlzcGxheUZvcm1hdHMsIGFkYXB0ZXIuZm9ybWF0cygpKTtcbiAgICAgICAgdGhpcy5fcGFyc2VPcHRzID0ge1xuICAgICAgICAgICAgcGFyc2VyOiB0aW1lLnBhcnNlcixcbiAgICAgICAgICAgIHJvdW5kOiB0aW1lLnJvdW5kLFxuICAgICAgICAgICAgaXNvV2Vla2RheTogdGltZS5pc29XZWVrZGF5XG4gICAgICAgIH07XG4gICAgICAgIHN1cGVyLmluaXQoc2NhbGVPcHRzKTtcbiAgICAgICAgdGhpcy5fbm9ybWFsaXplZCA9IG9wdHMubm9ybWFsaXplZDtcbiAgICB9XG4gcGFyc2UocmF3LCBpbmRleCkge1xuICAgICAgICBpZiAocmF3ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZSh0aGlzLCByYXcpO1xuICAgIH1cbiAgICBiZWZvcmVMYXlvdXQoKSB7XG4gICAgICAgIHN1cGVyLmJlZm9yZUxheW91dCgpO1xuICAgICAgICB0aGlzLl9jYWNoZSA9IHtcbiAgICAgICAgICAgIGRhdGE6IFtdLFxuICAgICAgICAgICAgbGFiZWxzOiBbXSxcbiAgICAgICAgICAgIGFsbDogW11cbiAgICAgICAgfTtcbiAgICB9XG4gICAgZGV0ZXJtaW5lRGF0YUxpbWl0cygpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgYWRhcHRlciA9IHRoaXMuX2FkYXB0ZXI7XG4gICAgICAgIGNvbnN0IHVuaXQgPSBvcHRpb25zLnRpbWUudW5pdCB8fCAnZGF5JztcbiAgICAgICAgbGV0IHsgbWluICwgbWF4ICwgbWluRGVmaW5lZCAsIG1heERlZmluZWQgIH0gPSB0aGlzLmdldFVzZXJCb3VuZHMoKTtcbiBmdW5jdGlvbiBfYXBwbHlCb3VuZHMoYm91bmRzKSB7XG4gICAgICAgICAgICBpZiAoIW1pbkRlZmluZWQgJiYgIWlzTmFOKGJvdW5kcy5taW4pKSB7XG4gICAgICAgICAgICAgICAgbWluID0gTWF0aC5taW4obWluLCBib3VuZHMubWluKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghbWF4RGVmaW5lZCAmJiAhaXNOYU4oYm91bmRzLm1heCkpIHtcbiAgICAgICAgICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIGJvdW5kcy5tYXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghbWluRGVmaW5lZCB8fCAhbWF4RGVmaW5lZCkge1xuICAgICAgICAgICAgX2FwcGx5Qm91bmRzKHRoaXMuX2dldExhYmVsQm91bmRzKCkpO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYm91bmRzICE9PSAndGlja3MnIHx8IG9wdGlvbnMudGlja3Muc291cmNlICE9PSAnbGFiZWxzJykge1xuICAgICAgICAgICAgICAgIF9hcHBseUJvdW5kcyh0aGlzLmdldE1pbk1heChmYWxzZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG1pbiA9IGlzTnVtYmVyRmluaXRlKG1pbikgJiYgIWlzTmFOKG1pbikgPyBtaW4gOiArYWRhcHRlci5zdGFydE9mKERhdGUubm93KCksIHVuaXQpO1xuICAgICAgICBtYXggPSBpc051bWJlckZpbml0ZShtYXgpICYmICFpc05hTihtYXgpID8gbWF4IDogK2FkYXB0ZXIuZW5kT2YoRGF0ZS5ub3coKSwgdW5pdCkgKyAxO1xuICAgICAgICB0aGlzLm1pbiA9IE1hdGgubWluKG1pbiwgbWF4IC0gMSk7XG4gICAgICAgIHRoaXMubWF4ID0gTWF0aC5tYXgobWluICsgMSwgbWF4KTtcbiAgICB9XG4gX2dldExhYmVsQm91bmRzKCkge1xuICAgICAgICBjb25zdCBhcnIgPSB0aGlzLmdldExhYmVsVGltZXN0YW1wcygpO1xuICAgICAgICBsZXQgbWluID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICBsZXQgbWF4ID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZO1xuICAgICAgICBpZiAoYXJyLmxlbmd0aCkge1xuICAgICAgICAgICAgbWluID0gYXJyWzBdO1xuICAgICAgICAgICAgbWF4ID0gYXJyW2Fyci5sZW5ndGggLSAxXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWluLFxuICAgICAgICAgICAgbWF4XG4gICAgICAgIH07XG4gICAgfVxuIGJ1aWxkVGlja3MoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHRpbWVPcHRzID0gb3B0aW9ucy50aW1lO1xuICAgICAgICBjb25zdCB0aWNrT3B0cyA9IG9wdGlvbnMudGlja3M7XG4gICAgICAgIGNvbnN0IHRpbWVzdGFtcHMgPSB0aWNrT3B0cy5zb3VyY2UgPT09ICdsYWJlbHMnID8gdGhpcy5nZXRMYWJlbFRpbWVzdGFtcHMoKSA6IHRoaXMuX2dlbmVyYXRlKCk7XG4gICAgICAgIGlmIChvcHRpb25zLmJvdW5kcyA9PT0gJ3RpY2tzJyAmJiB0aW1lc3RhbXBzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5taW4gPSB0aGlzLl91c2VyTWluIHx8IHRpbWVzdGFtcHNbMF07XG4gICAgICAgICAgICB0aGlzLm1heCA9IHRoaXMuX3VzZXJNYXggfHwgdGltZXN0YW1wc1t0aW1lc3RhbXBzLmxlbmd0aCAtIDFdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1pbiA9IHRoaXMubWluO1xuICAgICAgICBjb25zdCBtYXggPSB0aGlzLm1heDtcbiAgICAgICAgY29uc3QgdGlja3MgPSBfZmlsdGVyQmV0d2Vlbih0aW1lc3RhbXBzLCBtaW4sIG1heCk7XG4gICAgICAgIHRoaXMuX3VuaXQgPSB0aW1lT3B0cy51bml0IHx8ICh0aWNrT3B0cy5hdXRvU2tpcCA/IGRldGVybWluZVVuaXRGb3JBdXRvVGlja3ModGltZU9wdHMubWluVW5pdCwgdGhpcy5taW4sIHRoaXMubWF4LCB0aGlzLl9nZXRMYWJlbENhcGFjaXR5KG1pbikpIDogZGV0ZXJtaW5lVW5pdEZvckZvcm1hdHRpbmcodGhpcywgdGlja3MubGVuZ3RoLCB0aW1lT3B0cy5taW5Vbml0LCB0aGlzLm1pbiwgdGhpcy5tYXgpKTtcbiAgICAgICAgdGhpcy5fbWFqb3JVbml0ID0gIXRpY2tPcHRzLm1ham9yLmVuYWJsZWQgfHwgdGhpcy5fdW5pdCA9PT0gJ3llYXInID8gdW5kZWZpbmVkIDogZGV0ZXJtaW5lTWFqb3JVbml0KHRoaXMuX3VuaXQpO1xuICAgICAgICB0aGlzLmluaXRPZmZzZXRzKHRpbWVzdGFtcHMpO1xuICAgICAgICBpZiAob3B0aW9ucy5yZXZlcnNlKSB7XG4gICAgICAgICAgICB0aWNrcy5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRpY2tzRnJvbVRpbWVzdGFtcHModGhpcywgdGlja3MsIHRoaXMuX21ham9yVW5pdCk7XG4gICAgfVxuICAgIGFmdGVyQXV0b1NraXAoKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMub2Zmc2V0QWZ0ZXJBdXRvc2tpcCkge1xuICAgICAgICAgICAgdGhpcy5pbml0T2Zmc2V0cyh0aGlzLnRpY2tzLm1hcCgodGljayk9Pit0aWNrLnZhbHVlKSk7XG4gICAgICAgIH1cbiAgICB9XG4gaW5pdE9mZnNldHModGltZXN0YW1wcyA9IFtdKSB7XG4gICAgICAgIGxldCBzdGFydCA9IDA7XG4gICAgICAgIGxldCBlbmQgPSAwO1xuICAgICAgICBsZXQgZmlyc3QsIGxhc3Q7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMub2Zmc2V0ICYmIHRpbWVzdGFtcHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBmaXJzdCA9IHRoaXMuZ2V0RGVjaW1hbEZvclZhbHVlKHRpbWVzdGFtcHNbMF0pO1xuICAgICAgICAgICAgaWYgKHRpbWVzdGFtcHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgc3RhcnQgPSAxIC0gZmlyc3Q7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0YXJ0ID0gKHRoaXMuZ2V0RGVjaW1hbEZvclZhbHVlKHRpbWVzdGFtcHNbMV0pIC0gZmlyc3QpIC8gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3QgPSB0aGlzLmdldERlY2ltYWxGb3JWYWx1ZSh0aW1lc3RhbXBzW3RpbWVzdGFtcHMubGVuZ3RoIC0gMV0pO1xuICAgICAgICAgICAgaWYgKHRpbWVzdGFtcHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgZW5kID0gbGFzdDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZW5kID0gKGxhc3QgLSB0aGlzLmdldERlY2ltYWxGb3JWYWx1ZSh0aW1lc3RhbXBzW3RpbWVzdGFtcHMubGVuZ3RoIC0gMl0pKSAvIDI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGltaXQgPSB0aW1lc3RhbXBzLmxlbmd0aCA8IDMgPyAwLjUgOiAwLjI1O1xuICAgICAgICBzdGFydCA9IF9saW1pdFZhbHVlKHN0YXJ0LCAwLCBsaW1pdCk7XG4gICAgICAgIGVuZCA9IF9saW1pdFZhbHVlKGVuZCwgMCwgbGltaXQpO1xuICAgICAgICB0aGlzLl9vZmZzZXRzID0ge1xuICAgICAgICAgICAgc3RhcnQsXG4gICAgICAgICAgICBlbmQsXG4gICAgICAgICAgICBmYWN0b3I6IDEgLyAoc3RhcnQgKyAxICsgZW5kKVxuICAgICAgICB9O1xuICAgIH1cbiBfZ2VuZXJhdGUoKSB7XG4gICAgICAgIGNvbnN0IGFkYXB0ZXIgPSB0aGlzLl9hZGFwdGVyO1xuICAgICAgICBjb25zdCBtaW4gPSB0aGlzLm1pbjtcbiAgICAgICAgY29uc3QgbWF4ID0gdGhpcy5tYXg7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHRpbWVPcHRzID0gb3B0aW9ucy50aW1lO1xuICAgICAgICBjb25zdCBtaW5vciA9IHRpbWVPcHRzLnVuaXQgfHwgZGV0ZXJtaW5lVW5pdEZvckF1dG9UaWNrcyh0aW1lT3B0cy5taW5Vbml0LCBtaW4sIG1heCwgdGhpcy5fZ2V0TGFiZWxDYXBhY2l0eShtaW4pKTtcbiAgICAgICAgY29uc3Qgc3RlcFNpemUgPSB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLnRpY2tzLnN0ZXBTaXplLCAxKTtcbiAgICAgICAgY29uc3Qgd2Vla2RheSA9IG1pbm9yID09PSAnd2VlaycgPyB0aW1lT3B0cy5pc29XZWVrZGF5IDogZmFsc2U7XG4gICAgICAgIGNvbnN0IGhhc1dlZWtkYXkgPSBpc051bWJlcih3ZWVrZGF5KSB8fCB3ZWVrZGF5ID09PSB0cnVlO1xuICAgICAgICBjb25zdCB0aWNrcyA9IHt9O1xuICAgICAgICBsZXQgZmlyc3QgPSBtaW47XG4gICAgICAgIGxldCB0aW1lLCBjb3VudDtcbiAgICAgICAgaWYgKGhhc1dlZWtkYXkpIHtcbiAgICAgICAgICAgIGZpcnN0ID0gK2FkYXB0ZXIuc3RhcnRPZihmaXJzdCwgJ2lzb1dlZWsnLCB3ZWVrZGF5KTtcbiAgICAgICAgfVxuICAgICAgICBmaXJzdCA9ICthZGFwdGVyLnN0YXJ0T2YoZmlyc3QsIGhhc1dlZWtkYXkgPyAnZGF5JyA6IG1pbm9yKTtcbiAgICAgICAgaWYgKGFkYXB0ZXIuZGlmZihtYXgsIG1pbiwgbWlub3IpID4gMTAwMDAwICogc3RlcFNpemUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtaW4gKyAnIGFuZCAnICsgbWF4ICsgJyBhcmUgdG9vIGZhciBhcGFydCB3aXRoIHN0ZXBTaXplIG9mICcgKyBzdGVwU2l6ZSArICcgJyArIG1pbm9yKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0aW1lc3RhbXBzID0gb3B0aW9ucy50aWNrcy5zb3VyY2UgPT09ICdkYXRhJyAmJiB0aGlzLmdldERhdGFUaW1lc3RhbXBzKCk7XG4gICAgICAgIGZvcih0aW1lID0gZmlyc3QsIGNvdW50ID0gMDsgdGltZSA8IG1heDsgdGltZSA9ICthZGFwdGVyLmFkZCh0aW1lLCBzdGVwU2l6ZSwgbWlub3IpLCBjb3VudCsrKXtcbiAgICAgICAgICAgIGFkZFRpY2sodGlja3MsIHRpbWUsIHRpbWVzdGFtcHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lID09PSBtYXggfHwgb3B0aW9ucy5ib3VuZHMgPT09ICd0aWNrcycgfHwgY291bnQgPT09IDEpIHtcbiAgICAgICAgICAgIGFkZFRpY2sodGlja3MsIHRpbWUsIHRpbWVzdGFtcHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aWNrcykuc29ydChzb3J0ZXIpLm1hcCgoeCk9Pit4KTtcbiAgICB9XG4gZ2V0TGFiZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBhZGFwdGVyID0gdGhpcy5fYWRhcHRlcjtcbiAgICAgICAgY29uc3QgdGltZU9wdHMgPSB0aGlzLm9wdGlvbnMudGltZTtcbiAgICAgICAgaWYgKHRpbWVPcHRzLnRvb2x0aXBGb3JtYXQpIHtcbiAgICAgICAgICAgIHJldHVybiBhZGFwdGVyLmZvcm1hdCh2YWx1ZSwgdGltZU9wdHMudG9vbHRpcEZvcm1hdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFkYXB0ZXIuZm9ybWF0KHZhbHVlLCB0aW1lT3B0cy5kaXNwbGF5Rm9ybWF0cy5kYXRldGltZSk7XG4gICAgfVxuIGZvcm1hdCh2YWx1ZSwgZm9ybWF0KSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGZvcm1hdHMgPSBvcHRpb25zLnRpbWUuZGlzcGxheUZvcm1hdHM7XG4gICAgICAgIGNvbnN0IHVuaXQgPSB0aGlzLl91bml0O1xuICAgICAgICBjb25zdCBmbXQgPSBmb3JtYXQgfHwgZm9ybWF0c1t1bml0XTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkYXB0ZXIuZm9ybWF0KHZhbHVlLCBmbXQpO1xuICAgIH1cbiBfdGlja0Zvcm1hdEZ1bmN0aW9uKHRpbWUsIGluZGV4LCB0aWNrcywgZm9ybWF0KSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGZvcm1hdHRlciA9IG9wdGlvbnMudGlja3MuY2FsbGJhY2s7XG4gICAgICAgIGlmIChmb3JtYXR0ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhmb3JtYXR0ZXIsIFtcbiAgICAgICAgICAgICAgICB0aW1lLFxuICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgIHRpY2tzXG4gICAgICAgICAgICBdLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmb3JtYXRzID0gb3B0aW9ucy50aW1lLmRpc3BsYXlGb3JtYXRzO1xuICAgICAgICBjb25zdCB1bml0ID0gdGhpcy5fdW5pdDtcbiAgICAgICAgY29uc3QgbWFqb3JVbml0ID0gdGhpcy5fbWFqb3JVbml0O1xuICAgICAgICBjb25zdCBtaW5vckZvcm1hdCA9IHVuaXQgJiYgZm9ybWF0c1t1bml0XTtcbiAgICAgICAgY29uc3QgbWFqb3JGb3JtYXQgPSBtYWpvclVuaXQgJiYgZm9ybWF0c1ttYWpvclVuaXRdO1xuICAgICAgICBjb25zdCB0aWNrID0gdGlja3NbaW5kZXhdO1xuICAgICAgICBjb25zdCBtYWpvciA9IG1ham9yVW5pdCAmJiBtYWpvckZvcm1hdCAmJiB0aWNrICYmIHRpY2subWFqb3I7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGFwdGVyLmZvcm1hdCh0aW1lLCBmb3JtYXQgfHwgKG1ham9yID8gbWFqb3JGb3JtYXQgOiBtaW5vckZvcm1hdCkpO1xuICAgIH1cbiBnZW5lcmF0ZVRpY2tMYWJlbHModGlja3MpIHtcbiAgICAgICAgbGV0IGksIGlsZW4sIHRpY2s7XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IHRpY2tzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICB0aWNrID0gdGlja3NbaV07XG4gICAgICAgICAgICB0aWNrLmxhYmVsID0gdGhpcy5fdGlja0Zvcm1hdEZ1bmN0aW9uKHRpY2sudmFsdWUsIGksIHRpY2tzKTtcbiAgICAgICAgfVxuICAgIH1cbiBnZXREZWNpbWFsRm9yVmFsdWUodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsID8gTmFOIDogKHZhbHVlIC0gdGhpcy5taW4pIC8gKHRoaXMubWF4IC0gdGhpcy5taW4pO1xuICAgIH1cbiBnZXRQaXhlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG9mZnNldHMgPSB0aGlzLl9vZmZzZXRzO1xuICAgICAgICBjb25zdCBwb3MgPSB0aGlzLmdldERlY2ltYWxGb3JWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBpeGVsRm9yRGVjaW1hbCgob2Zmc2V0cy5zdGFydCArIHBvcykgKiBvZmZzZXRzLmZhY3Rvcik7XG4gICAgfVxuIGdldFZhbHVlRm9yUGl4ZWwocGl4ZWwpIHtcbiAgICAgICAgY29uc3Qgb2Zmc2V0cyA9IHRoaXMuX29mZnNldHM7XG4gICAgICAgIGNvbnN0IHBvcyA9IHRoaXMuZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKSAvIG9mZnNldHMuZmFjdG9yIC0gb2Zmc2V0cy5lbmQ7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbiArIHBvcyAqICh0aGlzLm1heCAtIHRoaXMubWluKTtcbiAgICB9XG4gX2dldExhYmVsU2l6ZShsYWJlbCkge1xuICAgICAgICBjb25zdCB0aWNrc09wdHMgPSB0aGlzLm9wdGlvbnMudGlja3M7XG4gICAgICAgIGNvbnN0IHRpY2tMYWJlbFdpZHRoID0gdGhpcy5jdHgubWVhc3VyZVRleHQobGFiZWwpLndpZHRoO1xuICAgICAgICBjb25zdCBhbmdsZSA9IHRvUmFkaWFucyh0aGlzLmlzSG9yaXpvbnRhbCgpID8gdGlja3NPcHRzLm1heFJvdGF0aW9uIDogdGlja3NPcHRzLm1pblJvdGF0aW9uKTtcbiAgICAgICAgY29uc3QgY29zUm90YXRpb24gPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgICAgIGNvbnN0IHNpblJvdGF0aW9uID0gTWF0aC5zaW4oYW5nbGUpO1xuICAgICAgICBjb25zdCB0aWNrRm9udFNpemUgPSB0aGlzLl9yZXNvbHZlVGlja0ZvbnRPcHRpb25zKDApLnNpemU7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB3OiB0aWNrTGFiZWxXaWR0aCAqIGNvc1JvdGF0aW9uICsgdGlja0ZvbnRTaXplICogc2luUm90YXRpb24sXG4gICAgICAgICAgICBoOiB0aWNrTGFiZWxXaWR0aCAqIHNpblJvdGF0aW9uICsgdGlja0ZvbnRTaXplICogY29zUm90YXRpb25cbiAgICAgICAgfTtcbiAgICB9XG4gX2dldExhYmVsQ2FwYWNpdHkoZXhhbXBsZVRpbWUpIHtcbiAgICAgICAgY29uc3QgdGltZU9wdHMgPSB0aGlzLm9wdGlvbnMudGltZTtcbiAgICAgICAgY29uc3QgZGlzcGxheUZvcm1hdHMgPSB0aW1lT3B0cy5kaXNwbGF5Rm9ybWF0cztcbiAgICAgICAgY29uc3QgZm9ybWF0ID0gZGlzcGxheUZvcm1hdHNbdGltZU9wdHMudW5pdF0gfHwgZGlzcGxheUZvcm1hdHMubWlsbGlzZWNvbmQ7XG4gICAgICAgIGNvbnN0IGV4YW1wbGVMYWJlbCA9IHRoaXMuX3RpY2tGb3JtYXRGdW5jdGlvbihleGFtcGxlVGltZSwgMCwgdGlja3NGcm9tVGltZXN0YW1wcyh0aGlzLCBbXG4gICAgICAgICAgICBleGFtcGxlVGltZVxuICAgICAgICBdLCB0aGlzLl9tYWpvclVuaXQpLCBmb3JtYXQpO1xuICAgICAgICBjb25zdCBzaXplID0gdGhpcy5fZ2V0TGFiZWxTaXplKGV4YW1wbGVMYWJlbCk7XG4gICAgICAgIGNvbnN0IGNhcGFjaXR5ID0gTWF0aC5mbG9vcih0aGlzLmlzSG9yaXpvbnRhbCgpID8gdGhpcy53aWR0aCAvIHNpemUudyA6IHRoaXMuaGVpZ2h0IC8gc2l6ZS5oKSAtIDE7XG4gICAgICAgIHJldHVybiBjYXBhY2l0eSA+IDAgPyBjYXBhY2l0eSA6IDE7XG4gICAgfVxuIGdldERhdGFUaW1lc3RhbXBzKCkge1xuICAgICAgICBsZXQgdGltZXN0YW1wcyA9IHRoaXMuX2NhY2hlLmRhdGEgfHwgW107XG4gICAgICAgIGxldCBpLCBpbGVuO1xuICAgICAgICBpZiAodGltZXN0YW1wcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aW1lc3RhbXBzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGFzID0gdGhpcy5nZXRNYXRjaGluZ1Zpc2libGVNZXRhcygpO1xuICAgICAgICBpZiAodGhpcy5fbm9ybWFsaXplZCAmJiBtZXRhcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZS5kYXRhID0gbWV0YXNbMF0uY29udHJvbGxlci5nZXRBbGxQYXJzZWRWYWx1ZXModGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gbWV0YXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIHRpbWVzdGFtcHMgPSB0aW1lc3RhbXBzLmNvbmNhdChtZXRhc1tpXS5jb250cm9sbGVyLmdldEFsbFBhcnNlZFZhbHVlcyh0aGlzKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlLmRhdGEgPSB0aGlzLm5vcm1hbGl6ZSh0aW1lc3RhbXBzKTtcbiAgICB9XG4gZ2V0TGFiZWxUaW1lc3RhbXBzKCkge1xuICAgICAgICBjb25zdCB0aW1lc3RhbXBzID0gdGhpcy5fY2FjaGUubGFiZWxzIHx8IFtdO1xuICAgICAgICBsZXQgaSwgaWxlbjtcbiAgICAgICAgaWYgKHRpbWVzdGFtcHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGltZXN0YW1wcztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYWJlbHMgPSB0aGlzLmdldExhYmVscygpO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBsYWJlbHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIHRpbWVzdGFtcHMucHVzaChwYXJzZSh0aGlzLCBsYWJlbHNbaV0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGUubGFiZWxzID0gdGhpcy5fbm9ybWFsaXplZCA/IHRpbWVzdGFtcHMgOiB0aGlzLm5vcm1hbGl6ZSh0aW1lc3RhbXBzKTtcbiAgICB9XG4gbm9ybWFsaXplKHZhbHVlcykge1xuICAgICAgICByZXR1cm4gX2FycmF5VW5pcXVlKHZhbHVlcy5zb3J0KHNvcnRlcikpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaW50ZXJwb2xhdGUodGFibGUsIHZhbCwgcmV2ZXJzZSkge1xuICAgIGxldCBsbyA9IDA7XG4gICAgbGV0IGhpID0gdGFibGUubGVuZ3RoIC0gMTtcbiAgICBsZXQgcHJldlNvdXJjZSwgbmV4dFNvdXJjZSwgcHJldlRhcmdldCwgbmV4dFRhcmdldDtcbiAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICBpZiAodmFsID49IHRhYmxlW2xvXS5wb3MgJiYgdmFsIDw9IHRhYmxlW2hpXS5wb3MpIHtcbiAgICAgICAgICAgICh7IGxvICwgaGkgIH0gPSBfbG9va3VwQnlLZXkodGFibGUsICdwb3MnLCB2YWwpKTtcbiAgICAgICAgfVxuICAgICAgICAoeyBwb3M6IHByZXZTb3VyY2UgLCB0aW1lOiBwcmV2VGFyZ2V0ICB9ID0gdGFibGVbbG9dKTtcbiAgICAgICAgKHsgcG9zOiBuZXh0U291cmNlICwgdGltZTogbmV4dFRhcmdldCAgfSA9IHRhYmxlW2hpXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHZhbCA+PSB0YWJsZVtsb10udGltZSAmJiB2YWwgPD0gdGFibGVbaGldLnRpbWUpIHtcbiAgICAgICAgICAgICh7IGxvICwgaGkgIH0gPSBfbG9va3VwQnlLZXkodGFibGUsICd0aW1lJywgdmFsKSk7XG4gICAgICAgIH1cbiAgICAgICAgKHsgdGltZTogcHJldlNvdXJjZSAsIHBvczogcHJldlRhcmdldCAgfSA9IHRhYmxlW2xvXSk7XG4gICAgICAgICh7IHRpbWU6IG5leHRTb3VyY2UgLCBwb3M6IG5leHRUYXJnZXQgIH0gPSB0YWJsZVtoaV0pO1xuICAgIH1cbiAgICBjb25zdCBzcGFuID0gbmV4dFNvdXJjZSAtIHByZXZTb3VyY2U7XG4gICAgcmV0dXJuIHNwYW4gPyBwcmV2VGFyZ2V0ICsgKG5leHRUYXJnZXQgLSBwcmV2VGFyZ2V0KSAqICh2YWwgLSBwcmV2U291cmNlKSAvIHNwYW4gOiBwcmV2VGFyZ2V0O1xufVxuY2xhc3MgVGltZVNlcmllc1NjYWxlIGV4dGVuZHMgVGltZVNjYWxlIHtcbiAgICBzdGF0aWMgaWQgPSAndGltZXNlcmllcyc7XG4gc3RhdGljIGRlZmF1bHRzID0gVGltZVNjYWxlLmRlZmF1bHRzO1xuIGNvbnN0cnVjdG9yKHByb3BzKXtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICAgdGhpcy5fdGFibGUgPSBbXTtcbiAgICAgICAgIHRoaXMuX21pblBvcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMuX3RhYmxlUmFuZ2UgPSB1bmRlZmluZWQ7XG4gICAgfVxuIGluaXRPZmZzZXRzKCkge1xuICAgICAgICBjb25zdCB0aW1lc3RhbXBzID0gdGhpcy5fZ2V0VGltZXN0YW1wc0ZvclRhYmxlKCk7XG4gICAgICAgIGNvbnN0IHRhYmxlID0gdGhpcy5fdGFibGUgPSB0aGlzLmJ1aWxkTG9va3VwVGFibGUodGltZXN0YW1wcyk7XG4gICAgICAgIHRoaXMuX21pblBvcyA9IGludGVycG9sYXRlKHRhYmxlLCB0aGlzLm1pbik7XG4gICAgICAgIHRoaXMuX3RhYmxlUmFuZ2UgPSBpbnRlcnBvbGF0ZSh0YWJsZSwgdGhpcy5tYXgpIC0gdGhpcy5fbWluUG9zO1xuICAgICAgICBzdXBlci5pbml0T2Zmc2V0cyh0aW1lc3RhbXBzKTtcbiAgICB9XG4gYnVpbGRMb29rdXBUYWJsZSh0aW1lc3RhbXBzKSB7XG4gICAgICAgIGNvbnN0IHsgbWluICwgbWF4ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICAgICAgY29uc3QgdGFibGUgPSBbXTtcbiAgICAgICAgbGV0IGksIGlsZW4sIHByZXYsIGN1cnIsIG5leHQ7XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IHRpbWVzdGFtcHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIGN1cnIgPSB0aW1lc3RhbXBzW2ldO1xuICAgICAgICAgICAgaWYgKGN1cnIgPj0gbWluICYmIGN1cnIgPD0gbWF4KSB7XG4gICAgICAgICAgICAgICAgaXRlbXMucHVzaChjdXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaXRlbXMubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRpbWU6IG1pbixcbiAgICAgICAgICAgICAgICAgICAgcG9zOiAwXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRpbWU6IG1heCxcbiAgICAgICAgICAgICAgICAgICAgcG9zOiAxXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgbmV4dCA9IGl0ZW1zW2kgKyAxXTtcbiAgICAgICAgICAgIHByZXYgPSBpdGVtc1tpIC0gMV07XG4gICAgICAgICAgICBjdXJyID0gaXRlbXNbaV07XG4gICAgICAgICAgICBpZiAoTWF0aC5yb3VuZCgobmV4dCArIHByZXYpIC8gMikgIT09IGN1cnIpIHtcbiAgICAgICAgICAgICAgICB0YWJsZS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdGltZTogY3VycixcbiAgICAgICAgICAgICAgICAgICAgcG9zOiBpIC8gKGlsZW4gLSAxKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YWJsZTtcbiAgICB9XG4gX2dlbmVyYXRlKCkge1xuICAgICAgICBjb25zdCBtaW4gPSB0aGlzLm1pbjtcbiAgICAgICAgY29uc3QgbWF4ID0gdGhpcy5tYXg7XG4gICAgICAgIGxldCB0aW1lc3RhbXBzID0gc3VwZXIuZ2V0RGF0YVRpbWVzdGFtcHMoKTtcbiAgICAgICAgaWYgKCF0aW1lc3RhbXBzLmluY2x1ZGVzKG1pbikgfHwgIXRpbWVzdGFtcHMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aW1lc3RhbXBzLnNwbGljZSgwLCAwLCBtaW4pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGltZXN0YW1wcy5pbmNsdWRlcyhtYXgpIHx8IHRpbWVzdGFtcHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICB0aW1lc3RhbXBzLnB1c2gobWF4KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGltZXN0YW1wcy5zb3J0KChhLCBiKT0+YSAtIGIpO1xuICAgIH1cbiBfZ2V0VGltZXN0YW1wc0ZvclRhYmxlKCkge1xuICAgICAgICBsZXQgdGltZXN0YW1wcyA9IHRoaXMuX2NhY2hlLmFsbCB8fCBbXTtcbiAgICAgICAgaWYgKHRpbWVzdGFtcHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGltZXN0YW1wcztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5nZXREYXRhVGltZXN0YW1wcygpO1xuICAgICAgICBjb25zdCBsYWJlbCA9IHRoaXMuZ2V0TGFiZWxUaW1lc3RhbXBzKCk7XG4gICAgICAgIGlmIChkYXRhLmxlbmd0aCAmJiBsYWJlbC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRpbWVzdGFtcHMgPSB0aGlzLm5vcm1hbGl6ZShkYXRhLmNvbmNhdChsYWJlbCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGltZXN0YW1wcyA9IGRhdGEubGVuZ3RoID8gZGF0YSA6IGxhYmVsO1xuICAgICAgICB9XG4gICAgICAgIHRpbWVzdGFtcHMgPSB0aGlzLl9jYWNoZS5hbGwgPSB0aW1lc3RhbXBzO1xuICAgICAgICByZXR1cm4gdGltZXN0YW1wcztcbiAgICB9XG4gZ2V0RGVjaW1hbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAoaW50ZXJwb2xhdGUodGhpcy5fdGFibGUsIHZhbHVlKSAtIHRoaXMuX21pblBvcykgLyB0aGlzLl90YWJsZVJhbmdlO1xuICAgIH1cbiBnZXRWYWx1ZUZvclBpeGVsKHBpeGVsKSB7XG4gICAgICAgIGNvbnN0IG9mZnNldHMgPSB0aGlzLl9vZmZzZXRzO1xuICAgICAgICBjb25zdCBkZWNpbWFsID0gdGhpcy5nZXREZWNpbWFsRm9yUGl4ZWwocGl4ZWwpIC8gb2Zmc2V0cy5mYWN0b3IgLSBvZmZzZXRzLmVuZDtcbiAgICAgICAgcmV0dXJuIGludGVycG9sYXRlKHRoaXMuX3RhYmxlLCBkZWNpbWFsICogdGhpcy5fdGFibGVSYW5nZSArIHRoaXMuX21pblBvcywgdHJ1ZSk7XG4gICAgfVxufVxuXG52YXIgc2NhbGVzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuX19wcm90b19fOiBudWxsLFxuQ2F0ZWdvcnlTY2FsZTogQ2F0ZWdvcnlTY2FsZSxcbkxpbmVhclNjYWxlOiBMaW5lYXJTY2FsZSxcbkxvZ2FyaXRobWljU2NhbGU6IExvZ2FyaXRobWljU2NhbGUsXG5SYWRpYWxMaW5lYXJTY2FsZTogUmFkaWFsTGluZWFyU2NhbGUsXG5UaW1lU2NhbGU6IFRpbWVTY2FsZSxcblRpbWVTZXJpZXNTY2FsZTogVGltZVNlcmllc1NjYWxlXG59KTtcblxuY29uc3QgcmVnaXN0ZXJhYmxlcyA9IFtcbiAgICBjb250cm9sbGVycyxcbiAgICBlbGVtZW50cyxcbiAgICBwbHVnaW5zLFxuICAgIHNjYWxlc1xuXTtcblxuZXhwb3J0IHsgQW5pbWF0aW9uLCBBbmltYXRpb25zLCBBcmNFbGVtZW50LCBCYXJDb250cm9sbGVyLCBCYXJFbGVtZW50LCBCYXNlUGxhdGZvcm0sIEJhc2ljUGxhdGZvcm0sIEJ1YmJsZUNvbnRyb2xsZXIsIENhdGVnb3J5U2NhbGUsIENoYXJ0LCBwbHVnaW5fY29sb3JzIGFzIENvbG9ycywgRGF0YXNldENvbnRyb2xsZXIsIHBsdWdpbl9kZWNpbWF0aW9uIGFzIERlY2ltYXRpb24sIERvbVBsYXRmb3JtLCBEb3VnaG51dENvbnRyb2xsZXIsIEVsZW1lbnQsIGluZGV4IGFzIEZpbGxlciwgSW50ZXJhY3Rpb24sIHBsdWdpbl9sZWdlbmQgYXMgTGVnZW5kLCBMaW5lQ29udHJvbGxlciwgTGluZUVsZW1lbnQsIExpbmVhclNjYWxlLCBMb2dhcml0aG1pY1NjYWxlLCBQaWVDb250cm9sbGVyLCBQb2ludEVsZW1lbnQsIFBvbGFyQXJlYUNvbnRyb2xsZXIsIFJhZGFyQ29udHJvbGxlciwgUmFkaWFsTGluZWFyU2NhbGUsIFNjYWxlLCBTY2F0dGVyQ29udHJvbGxlciwgcGx1Z2luX3N1YnRpdGxlIGFzIFN1YlRpdGxlLCBUaWNrcywgVGltZVNjYWxlLCBUaW1lU2VyaWVzU2NhbGUsIHBsdWdpbl90aXRsZSBhcyBUaXRsZSwgcGx1Z2luX3Rvb2x0aXAgYXMgVG9vbHRpcCwgYWRhcHRlcnMgYXMgX2FkYXB0ZXJzLCBfZGV0ZWN0UGxhdGZvcm0sIGFuaW1hdG9yLCBjb250cm9sbGVycywgZGVmYXVsdHMsIGVsZW1lbnRzLCBsYXlvdXRzLCBwbHVnaW5zLCByZWdpc3RlcmFibGVzLCByZWdpc3RyeSwgc2NhbGVzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGFydC5qcy5tYXBcbiIsImltcG9ydCB7Q2hhcnQsIHJlZ2lzdGVyYWJsZXN9IGZyb20gJy4uL2Rpc3QvY2hhcnQuanMnO1xuXG5DaGFydC5yZWdpc3RlciguLi5yZWdpc3RlcmFibGVzKTtcblxuZXhwb3J0ICogZnJvbSAnLi4vZGlzdC9jaGFydC5qcyc7XG5leHBvcnQgZGVmYXVsdCBDaGFydDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9HcmFwaC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0dyYXBoLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBDaGFydCBmcm9tIFwiY2hhcnQuanMvYXV0b1wiO1xuaW1wb3J0IFB1YnN1YiBmcm9tIFwiLi9QdWJzdWJcIjtcbmltcG9ydCBDYWNoZSBmcm9tIFwiLi93ZWF0aGVyL0NhY2hlXCI7XG5pbXBvcnQgXCIuLi9jc3MvbW9kdWxlcy9HcmFwaC5jc3NcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR3JhcGgge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGhpcy5jb250YWluZXIuaWQgPSBcImdyYXBoQ29udGFpbmVyXCI7XG4gICAgdGhpcy5iaW5kRXZlbnRzKCk7XG4gIH1cblxuICBiaW5kRXZlbnRzKCkge1xuICAgIFB1YnN1Yi5vbihcInJlbmRlckdyYXBoXCIsIChpbmRleCkgPT4ge1xuICAgICAgY29uc3QgdG9QYXJzZSA9IE9iamVjdC52YWx1ZXMoXG4gICAgICAgIENhY2hlLmNhY2hlZERhdGEuZm9yZWNhc3QuZm9yZWNhc3RkYXlbaW5kZXhdLmhvdXIsXG4gICAgICApO1xuICAgICAgY29uc3QgcGFyc2VkRGF0YSA9IFtdO1xuICAgICAgdG9QYXJzZS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgIHBhcnNlZERhdGEucHVzaCh7XG4gICAgICAgICAgaG91cjogZWxlbWVudC50aW1lLFxuICAgICAgICAgIHRlbXBfYzogZWxlbWVudC50ZW1wX2MsXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnJlbmRlcihwYXJzZWREYXRhKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJlbmRlcihkYXRhKSB7XG4gICAgaWYgKHRoaXMuY29udGFpbmVyLmNvbnRhaW5zKHRoaXMuY2FudmFzKSkge1xuICAgICAgdGhpcy5jb250YWluZXIucmVtb3ZlQ2hpbGQodGhpcy5jYW52YXMpO1xuICAgIH1cbiAgICB0aGlzLmNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kKHRoaXMuY2FudmFzKTtcbiAgICB0aGlzLmNhY2hlZENoYXJ0ID0gbmV3IENoYXJ0KHRoaXMuY2FudmFzLCB7XG4gICAgICB0eXBlOiBcImxpbmVcIixcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgbGFiZWxzOiBkYXRhLm1hcCgocm93KSA9PiByb3cuaG91ciksXG4gICAgICAgIGRhdGFzZXRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZGF0YTogZGF0YS5tYXAoKHJvdykgPT4gcm93LnRlbXBfYyksXG4gICAgICAgICAgICB0ZW5zaW9uOiAwLjIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH0sXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIG1haW50YWluQXNwZWN0UmF0aW86IGZhbHNlLFxuICAgICAgICByZXNwb25zaXZlOiB0cnVlLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxufVxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0FwcC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0FwcC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgSGVhZGVyIGZyb20gXCIuL3dlYXRoZXIvSGVhZGVyXCI7XG5pbXBvcnQgRGF5c0JhciBmcm9tIFwiLi93ZWF0aGVyL0RheXNCYXJcIjtcbmltcG9ydCBHcmFwaCBmcm9tIFwiLi9HcmFwaFwiO1xuaW1wb3J0IHF1ZXJ5V2VhdGhlckFQSSBmcm9tIFwiLi93ZWF0aGVyL0FQSVwiO1xuaW1wb3J0IFB1YnN1YiBmcm9tIFwiLi9QdWJzdWJcIjtcbmltcG9ydCBDYWNoZSBmcm9tIFwiLi93ZWF0aGVyL0NhY2hlXCI7XG5pbXBvcnQgXCIuLi9jc3MvbW9kdWxlcy9BcHAuY3NzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwcCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIC8vIERPTVxuICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0aGlzLmNvbnRhaW5lci5pZCA9IFwiYXBwQ29udGFpbmVyXCI7XG4gICAgdGhpcy5oZWFkZXIgPSBuZXcgSGVhZGVyKCk7XG4gICAgdGhpcy5ncmFwaCA9IG5ldyBHcmFwaCgpO1xuICAgIHRoaXMuZGF5c0JhciA9IG5ldyBEYXlzQmFyKDgpO1xuICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZChcbiAgICAgIHRoaXMuaGVhZGVyLmNvbnRhaW5lcixcbiAgICAgIHRoaXMuZ3JhcGguY29udGFpbmVyLFxuICAgICAgdGhpcy5kYXlzQmFyLmNvbnRhaW5lcixcbiAgICApO1xuICAgIEFwcC5iaW5kRXZlbnRzKCk7XG4gICAgQXBwLmFwaUNhbGwoKTtcbiAgfVxuXG4gIHN0YXRpYyBhcGlDYWxsKCkge1xuICAgIHF1ZXJ5V2VhdGhlckFQSSgpLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgIENhY2hlLmNhY2hlZERhdGEgPSBkYXRhO1xuICAgICAgUHVic3ViLmVtaXQoXCJyZW5kZXJIZWFkZXJcIiwgMCk7XG4gICAgICBQdWJzdWIuZW1pdChcInJlbmRlckRheXNCYXJcIik7XG4gICAgICBQdWJzdWIuZW1pdChcInJlbmRlckdyYXBoXCIsIDApO1xuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIGJpbmRFdmVudHMoKSB7XG4gICAgUHVic3ViLm9uKFwiYXBpQ2FsbFwiLCAoKSA9PiB7XG4gICAgICBBcHAuYXBpQ2FsbCgpO1xuICAgIH0pO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBxdWVyeVdlYXRoZXJBUEkoKSB7XG4gIC8vIGNvbnN0IHJlcXVlc3RMb2NhdGlvbiA9IGF3YWl0IGZldGNoKFwiaHR0cDovL2lwLWFwaS5jb20vanNvbi9cIik7XG4gIGNvbnN0IGxvY2F0aW9uID0gXCJtb250ZXZpZGVvXCI7XG4gIGNvbnN0IHJlcXVlc3RXZWF0aGVyID1cbiAgICBhd2FpdCBmZXRjaChgaHR0cHM6Ly9hcGkud2VhdGhlcmFwaS5jb20vdjEvZm9yZWNhc3QuanNvbj9rZXk9NmI1MGQ1OTM4ZjBiNDE3M2EwNjIwMjE0ODIzMTIwOCZxPSR7bG9jYXRpb259JmRheXM9MTAmYXFpPW5vJmFsZXJ0cz1ub1xuICAgIGApO1xuICBjb25zdCBkYXRhID0gYXdhaXQgcmVxdWVzdFdlYXRoZXIuanNvbigpO1xuICByZXR1cm4gZGF0YTtcbn1cbiIsImltcG9ydCBcIi4vY3NzL2ZvbnQuY3NzXCI7XG5pbXBvcnQgXCIuL2Nzcy9zdHlsZS5jc3NcIjtcbmltcG9ydCBBcHAgZnJvbSBcIi4vanMvQXBwXCI7XG5cbmNvbnN0IGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYm9keVwiKTtcbmNvbnN0IGFwcCA9IG5ldyBBcHAoKTtcbmJvZHkuYXBwZW5kKGFwcC5jb250YWluZXIpO1xuIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiaSIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJuYyIsImxvY2FscyIsIlB1YnN1YiIsIm9uIiwiZXZlbnROYW1lIiwiZm4iLCJvZmYiLCJlbWl0IiwiZm9yRWFjaCIsIkNhY2hlIiwic3RhdGljIiwiSGVhZGVyIiwiY29uc3RydWN0b3IiLCJjb250YWluZXIiLCJpbWdJY29uIiwiZGl2VGVtcGVyYXR1cmUiLCJkaXZIdW1pZGl0eSIsImRpdldpbmRTcGVlZCIsImRpdkNoYW5jZVJhaW4iLCJkaXZEYXkiLCJkaXZDb25kaXRpb24iLCJhcHBlbmQiLCJiaW5kRXZlbnRzIiwiaWNvbiIsImNhY2hlZERhdGEiLCJmb3JlY2FzdCIsImZvcmVjYXN0ZGF5IiwiZGF5IiwiY29uZGl0aW9uIiwiY2hhbmNlT2ZSYWluIiwiZGFpbHlfY2hhbmNlX29mX3JhaW4iLCJ0ZXh0IiwiRGF0ZSIsImRhdGUiLCJ0b0xvY2FsZURhdGVTdHJpbmciLCJ3ZWVrZGF5IiwidGltZVpvbmUiLCJ0ZW1wQyIsImh1bWlkaXR5Iiwid2luZEtQSCIsIk1hdGgiLCJmbG9vciIsImN1cnJlbnQiLCJ0ZW1wX2MiLCJ3aW5kX2twaCIsImF2Z3RlbXBfYyIsImF2Z2h1bWlkaXR5IiwibWF4d2luZF9rcGgiLCJyZW5kZXIiLCJzcmMiLCJpbm5lclRleHQiLCJEYXkiLCJhcmd1bWVudHMiLCJpc0N1cnJlbnREYXkiLCJkaXZEYXlPZldlZWsiLCJkaXZUZW1wZXJhdHVyZU1BWCIsImRpdlRlbXBlcmF0dXJlTUlOIiwiZGF0ZV9lcG9jaCIsIm1heHRlbXBfYyIsIm1pbnRlbXBfYyIsImFkZEV2ZW50TGlzdGVuZXIiLCJEYXlzQmFyIiwiZGF5cyIsImFtb3VudCIsInJvdW5kIiwidiIsImxpbSIsImwiLCJoIiwibWF4IiwibWluIiwicDJiIiwibjJiIiwiYjJuIiwibjJwIiwibWFwJDEiLCJBIiwiQiIsIkMiLCJEIiwiRSIsIkYiLCJiIiwiYyIsImYiLCJoZXgiLCJoMSIsImgyIiwiZXEiLCJIVUVfUkUiLCJoc2wycmdibiIsInMiLCJoc3YycmdibiIsImh3YjJyZ2JuIiwidyIsInJnYiIsInJnYjJoc2wiLCJyIiwiZyIsImh1ZVZhbHVlIiwiY2FsbG4iLCJBcnJheSIsImlzQXJyYXkiLCJoc2wycmdiIiwiaHVlIiwieCIsIloiLCJZIiwiWCIsIlciLCJWIiwiVSIsIlQiLCJTIiwiUiIsIlEiLCJQIiwiTyIsIk4iLCJNIiwiTCIsIksiLCJHIiwiSCIsIkkiLCJKIiwibmFtZXMkMSIsIk9pY2VYZSIsImFudGlxdWV3RXRlIiwiYXF1YSIsImFxdWFtYXJSZSIsImF6dVkiLCJiZWlnZSIsImJpc3F1ZSIsImJsYWNrIiwiYmxhbktlZE9tb25kIiwiWGUiLCJYZXZpVGV0IiwiYlB3biIsImJ1cmx5d29vZCIsImNhTXRYZSIsIkthcnRZdXNlIiwiS29jVGF0ZSIsImNTTyIsImNTbmZsb3dlclhlIiwiY1Nuc2lsayIsImNyaW1zb24iLCJjeWFuIiwieFhlIiwieGN5YW4iLCJ4Z1RNblBkIiwieFdheSIsInhnWUYiLCJ4Z1l5IiwieGtoYWtpIiwieG1hZ0Z0YSIsInhUaXZlZ1lGIiwieFNhbmdlIiwieFNjRWQiLCJ4WWQiLCJ4c09tb24iLCJ4c0hnWUYiLCJ4VVhlIiwieFVXYXkiLCJ4VWdZeSIsInhRZSIsInh2aVRldCIsImRBcHBSayIsImRBcHNreVhlIiwiZGltV2F5IiwiZGltZ1l5IiwiZG9kZ2VyWGUiLCJmaVlicmljayIsImZsU093RXRlIiwiZm9Zc3RXQW4iLCJmdUtzaWEiLCJnYVJzYlNvIiwiZ2hvc3R3RXRlIiwiZ1RkIiwiZ1RNblBkIiwiV2F5IiwiZ1lGIiwiZ1lGTHciLCJnWXkiLCJob25leU13IiwiaG90cFJrIiwiUmRpYW5ZZCIsIlJkaWdvIiwiaXZTeSIsImtoYWtpIiwibGF2Rk1yIiwibGF2Rk1yWHNoIiwibGF3bmdZRiIsIk5tb25jRWZmb24iLCJaWGUiLCJaY1NPIiwiWmN5YW4iLCJaZ1RNblBkTHciLCJaV2F5IiwiWmdZRiIsIlpnWXkiLCJacFJrIiwiWnNPbW9uIiwiWnNIZ1lGIiwiWnNreVhlIiwiWlVXYXkiLCJaVWdZeSIsIlpzdEFsWGUiLCJaTHciLCJsaW1lIiwibGltZWdZRiIsImxSRiIsIm1hZ0Z0YSIsIm1hUG9uIiwiVmFxdWFtYXJSZSIsIlZYZSIsIlZTY0VkIiwiVnB1cnBOIiwiVnNIZ1lGIiwiVlVYZSIsIlZzcHJSZ2dZRiIsIlZRZSIsIlZ2aVRldFlkIiwibWlkbmlnaHRYZSIsIm1SdGNZYW0iLCJtaXN0eVBzZSIsIm1vY2Nhc1IiLCJuYXZham93RXRlIiwibmF2eSIsIlRkbGFjZSIsIlRpdmUiLCJUaXZlZEJiIiwiU2FuZ2UiLCJTYW5nZVlkIiwiU2NFZCIsInBPZWdUTW5QZCIsInBPZWdZRiIsInBPZVFlIiwicE9ldmlUZXRZZCIsInBhcGF5YXdFcCIsInBIS3B1ZmYiLCJwZXJ1IiwicFJrIiwicGx1bSIsInBvd01yWGUiLCJwdXJwTiIsIlliZWNjYXB1cnBOIiwiWWQiLCJQc3licm93biIsIlB5T1hlIiwic2FkZE5iUHduIiwic09tb24iLCJzYW5keWJQd24iLCJzSGdZRiIsInNIc2hlbGwiLCJzaUZuYSIsInNpbHZlciIsInNreVhlIiwiVVhlIiwiVVdheSIsIlVnWXkiLCJzbm93Iiwic3ByUmdnWUYiLCJzdEFsWGUiLCJ0YW4iLCJ0ZU8iLCJ0RXN0TiIsInRvbWF0byIsIlFlIiwidmlUZXQiLCJKSHQiLCJ3RXRlIiwid0V0ZXNtb2tlIiwiTHciLCJMd2dZRiIsIm5hbWVzIiwiUkdCX1JFIiwidG8iLCJwb3ciLCJmcm9tIiwibW9kSFNMIiwicmF0aW8iLCJ0bXAiLCJjbG9uZSIsInByb3RvIiwiYXNzaWduIiwiZnJvbU9iamVjdCIsImlucHV0IiwiZnVuY3Rpb25QYXJzZSIsInN0ciIsImNoYXJBdCIsIm0iLCJleGVjIiwicmdiUGFyc2UiLCJwMSIsInAyIiwiaHdiMnJnYiIsImhzdjJyZ2IiLCJodWVQYXJzZSIsIkNvbG9yIiwidHlwZSIsInJldCIsImxlbiIsInVucGFja2VkIiwia2V5cyIsInRrZXlzIiwiaiIsIm9rIiwibmsiLCJyZXBsYWNlIiwicGFyc2VJbnQiLCJ1bnBhY2siLCJ0cmFuc3BhcmVudCIsInRvTG93ZXJDYXNlIiwibmFtZVBhcnNlIiwiX3JnYiIsIl92YWxpZCIsInZhbGlkIiwicmdiU3RyaW5nIiwiaGV4U3RyaW5nIiwiaXNTaG9ydCIsImFscGhhIiwiaHNsU3RyaW5nIiwibWl4IiwiY29sb3IiLCJ3ZWlnaHQiLCJjMSIsImMyIiwidzIiLCJwIiwidzEiLCJpbnRlcnBvbGF0ZSIsInQiLCJyZ2IxIiwicmdiMiIsImNsZWFyZXIiLCJncmV5c2NhbGUiLCJ2YWwiLCJvcGFxdWVyIiwibmVnYXRlIiwibGlnaHRlbiIsImRhcmtlbiIsInNhdHVyYXRlIiwiZGVzYXR1cmF0ZSIsInJvdGF0ZSIsImRlZyIsIm5vb3AiLCJ1aWQiLCJpc051bGxPclVuZGVmIiwidmFsdWUiLCJzbGljZSIsImlzT2JqZWN0IiwiaXNOdW1iZXJGaW5pdGUiLCJOdW1iZXIiLCJpc0Zpbml0ZSIsImZpbml0ZU9yRGVmYXVsdCIsImRlZmF1bHRWYWx1ZSIsInZhbHVlT3JEZWZhdWx0IiwidG9EaW1lbnNpb24iLCJkaW1lbnNpb24iLCJlbmRzV2l0aCIsInBhcnNlRmxvYXQiLCJjYWxsYmFjayIsImFyZ3MiLCJ0aGlzQXJnIiwiZWFjaCIsImxvb3BhYmxlIiwicmV2ZXJzZSIsIl9lbGVtZW50c0VxdWFsIiwiYTAiLCJhMSIsImlsZW4iLCJ2MCIsInYxIiwiZGF0YXNldEluZGV4Iiwic291cmNlIiwiY3JlYXRlIiwia2xlbiIsImlzVmFsaWRLZXkiLCJpbmRleE9mIiwiX21lcmdlciIsInR2YWwiLCJzdmFsIiwibWVyZ2UiLCJzb3VyY2VzIiwibWVyZ2VyIiwibWVyZ2VJZiIsIl9tZXJnZXJJZiIsImtleVJlc29sdmVycyIsInkiLCJyZXNvbHZlT2JqZWN0S2V5IiwicmVzb2x2ZXIiLCJwYXJ0cyIsInNwbGl0IiwicGFydCIsIl9zcGxpdEtleSIsIl9nZXRLZXlSZXNvbHZlciIsIl9jYXBpdGFsaXplIiwidG9VcHBlckNhc2UiLCJkZWZpbmVkIiwiaXNGdW5jdGlvbiIsInNldHNFcXVhbCIsInNpemUiLCJoYXMiLCJQSSIsIlRBVSIsIlBJVEFVIiwiSU5GSU5JVFkiLCJQT1NJVElWRV9JTkZJTklUWSIsIlJBRF9QRVJfREVHIiwiSEFMRl9QSSIsIlFVQVJURVJfUEkiLCJUV09fVEhJUkRTX1BJIiwibG9nMTAiLCJzaWduIiwiYWxtb3N0RXF1YWxzIiwiZXBzaWxvbiIsImFicyIsIm5pY2VOdW0iLCJyYW5nZSIsInJvdW5kZWRSYW5nZSIsIm5pY2VSYW5nZSIsImZyYWN0aW9uIiwiaXNOdW1iZXIiLCJpc05hTiIsIl9zZXRNaW5BbmRNYXhCeUtleSIsImFycmF5IiwicHJvcGVydHkiLCJ0b1JhZGlhbnMiLCJkZWdyZWVzIiwidG9EZWdyZWVzIiwicmFkaWFucyIsIl9kZWNpbWFsUGxhY2VzIiwiZ2V0QW5nbGVGcm9tUG9pbnQiLCJjZW50cmVQb2ludCIsImFuZ2xlUG9pbnQiLCJkaXN0YW5jZUZyb21YQ2VudGVyIiwiZGlzdGFuY2VGcm9tWUNlbnRlciIsInJhZGlhbERpc3RhbmNlRnJvbUNlbnRlciIsInNxcnQiLCJhbmdsZSIsImF0YW4yIiwiZGlzdGFuY2UiLCJkaXN0YW5jZUJldHdlZW5Qb2ludHMiLCJwdDEiLCJwdDIiLCJfYW5nbGVEaWZmIiwiX25vcm1hbGl6ZUFuZ2xlIiwiX2FuZ2xlQmV0d2VlbiIsInN0YXJ0IiwiZW5kIiwic2FtZUFuZ2xlSXNGdWxsQ2lyY2xlIiwiYW5nbGVUb1N0YXJ0IiwiYW5nbGVUb0VuZCIsInN0YXJ0VG9BbmdsZSIsImVuZFRvQW5nbGUiLCJfbGltaXRWYWx1ZSIsIl9pc0JldHdlZW4iLCJfbG9va3VwIiwidGFibGUiLCJjbXAiLCJtaWQiLCJoaSIsImxvIiwiX2xvb2t1cEJ5S2V5IiwibGFzdCIsInRpIiwiX3Jsb29rdXBCeUtleSIsImFycmF5RXZlbnRzIiwidW5saXN0ZW5BcnJheUV2ZW50cyIsImxpc3RlbmVyIiwic3R1YiIsIl9jaGFydGpzIiwibGlzdGVuZXJzIiwiX2FycmF5VW5pcXVlIiwiaXRlbXMiLCJzZXQiLCJTZXQiLCJyZXF1ZXN0QW5pbUZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwidGhyb3R0bGVkIiwiYXJnc1RvVXNlIiwidGlja2luZyIsIl90b0xlZnRSaWdodENlbnRlciIsImFsaWduIiwiX2FsaWduU3RhcnRFbmQiLCJfZ2V0U3RhcnRBbmRDb3VudE9mVmlzaWJsZVBvaW50cyIsIm1ldGEiLCJwb2ludHMiLCJhbmltYXRpb25zRGlzYWJsZWQiLCJwb2ludENvdW50IiwiX3NvcnRlZCIsImlTY2FsZSIsIl9wYXJzZWQiLCJheGlzIiwibWluRGVmaW5lZCIsIm1heERlZmluZWQiLCJnZXRVc2VyQm91bmRzIiwiZ2V0UGl4ZWxGb3JWYWx1ZSIsIl9zY2FsZVJhbmdlc0NoYW5nZWQiLCJ4U2NhbGUiLCJ5U2NhbGUiLCJfc2NhbGVSYW5nZXMiLCJuZXdSYW5nZXMiLCJ4bWluIiwieG1heCIsInltaW4iLCJ5bWF4IiwiY2hhbmdlZCIsImF0RWRnZSIsImVsYXN0aWNJbiIsInNpbiIsImVsYXN0aWNPdXQiLCJlZmZlY3RzIiwibGluZWFyIiwiZWFzZUluUXVhZCIsImVhc2VPdXRRdWFkIiwiZWFzZUluT3V0UXVhZCIsImVhc2VJbkN1YmljIiwiZWFzZU91dEN1YmljIiwiZWFzZUluT3V0Q3ViaWMiLCJlYXNlSW5RdWFydCIsImVhc2VPdXRRdWFydCIsImVhc2VJbk91dFF1YXJ0IiwiZWFzZUluUXVpbnQiLCJlYXNlT3V0UXVpbnQiLCJlYXNlSW5PdXRRdWludCIsImVhc2VJblNpbmUiLCJjb3MiLCJlYXNlT3V0U2luZSIsImVhc2VJbk91dFNpbmUiLCJlYXNlSW5FeHBvIiwiZWFzZU91dEV4cG8iLCJlYXNlSW5PdXRFeHBvIiwiZWFzZUluQ2lyYyIsImVhc2VPdXRDaXJjIiwiZWFzZUluT3V0Q2lyYyIsImVhc2VJbkVsYXN0aWMiLCJlYXNlT3V0RWxhc3RpYyIsImVhc2VJbk91dEVsYXN0aWMiLCJlYXNlSW5CYWNrIiwiZWFzZU91dEJhY2siLCJlYXNlSW5PdXRCYWNrIiwiZWFzZUluQm91bmNlIiwiZWFzZU91dEJvdW5jZSIsImVhc2VJbk91dEJvdW5jZSIsImlzUGF0dGVybk9yR3JhZGllbnQiLCJnZXRIb3ZlckNvbG9yIiwibnVtYmVycyIsImNvbG9ycyIsImludGxDYWNoZSIsIk1hcCIsImZvcm1hdE51bWJlciIsIm51bSIsImxvY2FsZSIsImNhY2hlS2V5IiwiZm9ybWF0dGVyIiwiSW50bCIsIk51bWJlckZvcm1hdCIsImdldE51bWJlckZvcm1hdCIsImZvcm1hdCIsImZvcm1hdHRlcnMiLCJ2YWx1ZXMiLCJudW1lcmljIiwidGlja1ZhbHVlIiwidGlja3MiLCJjaGFydCIsIm5vdGF0aW9uIiwiZGVsdGEiLCJtYXhUaWNrIiwiY2FsY3VsYXRlRGVsdGEiLCJsb2dEZWx0YSIsIm51bURlY2ltYWwiLCJtaW5pbXVtRnJhY3Rpb25EaWdpdHMiLCJtYXhpbXVtRnJhY3Rpb25EaWdpdHMiLCJsb2dhcml0aG1pYyIsInJlbWFpbiIsInNpZ25pZmljYW5kIiwiaW5jbHVkZXMiLCJUaWNrcyIsIm92ZXJyaWRlcyIsImRlc2NyaXB0b3JzIiwiZ2V0U2NvcGUkMSIsIm5vZGUiLCJyb290Iiwic2NvcGUiLCJEZWZhdWx0cyIsIl9kZXNjcmlwdG9ycyIsIl9hcHBsaWVycyIsImFuaW1hdGlvbiIsImJhY2tncm91bmRDb2xvciIsImJvcmRlckNvbG9yIiwiZGF0YXNldHMiLCJkZXZpY2VQaXhlbFJhdGlvIiwiY29udGV4dCIsInBsYXRmb3JtIiwiZ2V0RGV2aWNlUGl4ZWxSYXRpbyIsImVsZW1lbnRzIiwiZXZlbnRzIiwiZm9udCIsImZhbWlseSIsImxpbmVIZWlnaHQiLCJob3ZlciIsImhvdmVyQmFja2dyb3VuZENvbG9yIiwiY3R4IiwiaG92ZXJCb3JkZXJDb2xvciIsImhvdmVyQ29sb3IiLCJpbmRleEF4aXMiLCJpbnRlcmFjdGlvbiIsIm1vZGUiLCJpbnRlcnNlY3QiLCJpbmNsdWRlSW52aXNpYmxlIiwibWFpbnRhaW5Bc3BlY3RSYXRpbyIsIm9uSG92ZXIiLCJvbkNsaWNrIiwicGFyc2luZyIsInBsdWdpbnMiLCJyZXNwb25zaXZlIiwic2NhbGUiLCJzY2FsZXMiLCJzaG93TGluZSIsImRyYXdBY3RpdmVFbGVtZW50c09uVG9wIiwiZGVzY3JpYmUiLCJvdmVycmlkZSIsInJvdXRlIiwibmFtZSIsInRhcmdldFNjb3BlIiwidGFyZ2V0TmFtZSIsInNjb3BlT2JqZWN0IiwidGFyZ2V0U2NvcGVPYmplY3QiLCJwcml2YXRlTmFtZSIsImRlZmluZVByb3BlcnRpZXMiLCJ3cml0YWJsZSIsImxvY2FsIiwiYXBwbGllcnMiLCJkZWZhdWx0cyIsIl9zY3JpcHRhYmxlIiwic3RhcnRzV2l0aCIsIl9pbmRleGFibGUiLCJfZmFsbGJhY2siLCJkZWxheSIsImR1cmF0aW9uIiwiZWFzaW5nIiwibG9vcCIsInByb3BlcnRpZXMiLCJhY3RpdmUiLCJyZXNpemUiLCJzaG93IiwiYW5pbWF0aW9ucyIsInZpc2libGUiLCJoaWRlIiwiYXV0b1BhZGRpbmciLCJwYWRkaW5nIiwidG9wIiwicmlnaHQiLCJib3R0b20iLCJsZWZ0IiwiZGlzcGxheSIsIm9mZnNldCIsImJlZ2luQXRaZXJvIiwiYm91bmRzIiwiZ3JhY2UiLCJncmlkIiwibGluZVdpZHRoIiwiZHJhd09uQ2hhcnRBcmVhIiwiZHJhd1RpY2tzIiwidGlja0xlbmd0aCIsInRpY2tXaWR0aCIsIl9jdHgiLCJ0aWNrQ29sb3IiLCJib3JkZXIiLCJkYXNoIiwiZGFzaE9mZnNldCIsIndpZHRoIiwidGl0bGUiLCJtaW5Sb3RhdGlvbiIsIm1heFJvdGF0aW9uIiwibWlycm9yIiwidGV4dFN0cm9rZVdpZHRoIiwidGV4dFN0cm9rZUNvbG9yIiwiYXV0b1NraXAiLCJhdXRvU2tpcFBhZGRpbmciLCJsYWJlbE9mZnNldCIsIm1pbm9yIiwibWFqb3IiLCJjcm9zc0FsaWduIiwic2hvd0xhYmVsQmFja2Ryb3AiLCJiYWNrZHJvcENvbG9yIiwiYmFja2Ryb3BQYWRkaW5nIiwiX21lYXN1cmVUZXh0IiwiZ2MiLCJsb25nZXN0Iiwic3RyaW5nIiwidGV4dFdpZHRoIiwibWVhc3VyZVRleHQiLCJfbG9uZ2VzdFRleHQiLCJhcnJheU9mVGhpbmdzIiwiY2FjaGUiLCJnYXJiYWdlQ29sbGVjdCIsInNhdmUiLCJqbGVuIiwidGhpbmciLCJuZXN0ZWRUaGluZyIsInJlc3RvcmUiLCJnY0xlbiIsIl9hbGlnblBpeGVsIiwicGl4ZWwiLCJjdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyIsImhhbGZXaWR0aCIsImNsZWFyQ2FudmFzIiwiY2FudmFzIiwiZ2V0Q29udGV4dCIsInJlc2V0VHJhbnNmb3JtIiwiY2xlYXJSZWN0IiwiaGVpZ2h0IiwiZHJhd1BvaW50IiwiZHJhd1BvaW50TGVnZW5kIiwieE9mZnNldCIsInlPZmZzZXQiLCJjb3JuZXJSYWRpdXMiLCJ4T2Zmc2V0VyIsInlPZmZzZXRXIiwicG9pbnRTdHlsZSIsInJvdGF0aW9uIiwicmFkaXVzIiwicmFkIiwidHJhbnNsYXRlIiwiZHJhd0ltYWdlIiwiYmVnaW5QYXRoIiwiZWxsaXBzZSIsImFyYyIsImNsb3NlUGF0aCIsIm1vdmVUbyIsImxpbmVUbyIsIlNRUlQxXzIiLCJyZWN0IiwiZmlsbCIsImJvcmRlcldpZHRoIiwic3Ryb2tlIiwiX2lzUG9pbnRJbkFyZWEiLCJwb2ludCIsImFyZWEiLCJtYXJnaW4iLCJjbGlwQXJlYSIsImNsaXAiLCJ1bmNsaXBBcmVhIiwiX3N0ZXBwZWRMaW5lVG8iLCJwcmV2aW91cyIsImZsaXAiLCJtaWRwb2ludCIsIl9iZXppZXJDdXJ2ZVRvIiwiYmV6aWVyQ3VydmVUbyIsImNwMXgiLCJjcDJ4IiwiY3AxeSIsImNwMnkiLCJkZWNvcmF0ZVRleHQiLCJsaW5lIiwib3B0cyIsInN0cmlrZXRocm91Z2giLCJ1bmRlcmxpbmUiLCJtZXRyaWNzIiwiYWN0dWFsQm91bmRpbmdCb3hMZWZ0IiwiYWN0dWFsQm91bmRpbmdCb3hSaWdodCIsImFjdHVhbEJvdW5kaW5nQm94QXNjZW50IiwiYWN0dWFsQm91bmRpbmdCb3hEZXNjZW50IiwieURlY29yYXRpb24iLCJzdHJva2VTdHlsZSIsImZpbGxTdHlsZSIsImRlY29yYXRpb25XaWR0aCIsImRyYXdCYWNrZHJvcCIsIm9sZENvbG9yIiwiZmlsbFJlY3QiLCJyZW5kZXJUZXh0IiwibGluZXMiLCJzdHJva2VXaWR0aCIsInN0cm9rZUNvbG9yIiwidHJhbnNsYXRpb24iLCJ0ZXh0QWxpZ24iLCJ0ZXh0QmFzZWxpbmUiLCJzZXRSZW5kZXJPcHRzIiwiYmFja2Ryb3AiLCJzdHJva2VUZXh0IiwibWF4V2lkdGgiLCJmaWxsVGV4dCIsImFkZFJvdW5kZWRSZWN0UGF0aCIsInRvcExlZnQiLCJib3R0b21MZWZ0IiwiYm90dG9tUmlnaHQiLCJ0b3BSaWdodCIsIkxJTkVfSEVJR0hUIiwiRk9OVF9TVFlMRSIsInRvTGluZUhlaWdodCIsIm1hdGNoZXMiLCJtYXRjaCIsIm51bWJlck9yWmVybyIsIl9yZWFkVmFsdWVUb1Byb3BzIiwicHJvcHMiLCJvYmpQcm9wcyIsInJlYWQiLCJ0b1RSQkwiLCJ0b1RSQkxDb3JuZXJzIiwidG9QYWRkaW5nIiwidG9Gb250IiwiZmFsbGJhY2siLCJjb25zb2xlIiwid2FybiIsInRvRm9udFN0cmluZyIsInJlc29sdmUiLCJpbnB1dHMiLCJpbmZvIiwiY2FjaGVhYmxlIiwiY3JlYXRlQ29udGV4dCIsInBhcmVudENvbnRleHQiLCJfY3JlYXRlUmVzb2x2ZXIiLCJzY29wZXMiLCJwcmVmaXhlcyIsInJvb3RTY29wZXMiLCJmaW5hbFJvb3RTY29wZXMiLCJfcmVzb2x2ZSIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiX2NhY2hlYWJsZSIsIl9zY29wZXMiLCJfcm9vdFNjb3BlcyIsIl9nZXRUYXJnZXQiLCJQcm94eSIsImRlbGV0ZVByb3BlcnR5IiwiX2tleXMiLCJfY2FjaGVkIiwicHJveHkiLCJwcmVmaXgiLCJyZWFkS2V5IiwibmVlZHNTdWJSZXNvbHZlciIsImNyZWF0ZVN1YlJlc29sdmVyIiwiX3Jlc29sdmVXaXRoUHJlZml4ZXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJSZWZsZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJnZXRLZXlzRnJvbUFsbFNjb3BlcyIsIm93bktleXMiLCJzdG9yYWdlIiwiX3N0b3JhZ2UiLCJfYXR0YWNoQ29udGV4dCIsInN1YlByb3h5IiwiZGVzY3JpcHRvckRlZmF1bHRzIiwiX3Byb3h5IiwiX2NvbnRleHQiLCJfc3ViUHJveHkiLCJfc3RhY2siLCJzZXRDb250ZXh0IiwicmVjZWl2ZXIiLCJpc1NjcmlwdGFibGUiLCJnZXRWYWx1ZSIsImFkZCIsImRlbGV0ZSIsIl9yZXNvbHZlU2NyaXB0YWJsZSIsImlzSW5kZXhhYmxlIiwiYXJyIiwiZmlsdGVyIiwiX3Jlc29sdmVBcnJheSIsIl9yZXNvbHZlV2l0aENvbnRleHQiLCJhbGxLZXlzIiwiY29uZmlndXJhYmxlIiwic2NyaXB0YWJsZSIsImluZGV4YWJsZSIsIl9hbGxLZXlzIiwicmVzb2x2ZUZhbGxiYWNrIiwiZ2V0U2NvcGUiLCJwYXJlbnQiLCJhZGRTY29wZXMiLCJwYXJlbnRTY29wZXMiLCJwYXJlbnRGYWxsYmFjayIsImFsbFNjb3BlcyIsImFkZFNjb3Blc0Zyb21LZXkiLCJzdWJHZXRUYXJnZXQiLCJyZXNvbHZlS2V5c0Zyb21BbGxTY29wZXMiLCJfcGFyc2VPYmplY3REYXRhUmFkaWFsU2NhbGUiLCJfcGFyc2luZyIsInBhcnNlZCIsInBhcnNlIiwiRVBTSUxPTiIsImdldFBvaW50Iiwic2tpcCIsImdldFZhbHVlQXhpcyIsInNwbGluZUN1cnZlIiwiZmlyc3RQb2ludCIsIm1pZGRsZVBvaW50IiwiYWZ0ZXJQb2ludCIsIm5leHQiLCJkMDEiLCJkMTIiLCJzMDEiLCJzMTIiLCJmYSIsImZiIiwiY2FwQ29udHJvbFBvaW50IiwicHQiLCJfdXBkYXRlQmV6aWVyQ29udHJvbFBvaW50cyIsImNvbnRyb2xQb2ludHMiLCJzcGFuR2FwcyIsImN1YmljSW50ZXJwb2xhdGlvbk1vZGUiLCJ2YWx1ZUF4aXMiLCJwb2ludHNMZW4iLCJkZWx0YUsiLCJtSyIsInBvaW50QmVmb3JlIiwicG9pbnRDdXJyZW50IiwicG9pbnRBZnRlciIsInNsb3BlRGVsdGEiLCJhbHBoYUsiLCJiZXRhSyIsInRhdUsiLCJzcXVhcmVkTWFnbml0dWRlIiwibW9ub3RvbmVBZGp1c3QiLCJpUGl4ZWwiLCJ2UGl4ZWwiLCJtb25vdG9uZUNvbXB1dGUiLCJzcGxpbmVDdXJ2ZU1vbm90b25lIiwicHJldiIsInRlbnNpb24iLCJjYXBCZXppZXJQb2ludHMiLCJpbkFyZWEiLCJpbkFyZWFQcmV2IiwiaW5BcmVhTmV4dCIsIl9pc0RvbVN1cHBvcnRlZCIsIl9nZXRQYXJlbnROb2RlIiwiZG9tTm9kZSIsImhvc3QiLCJwYXJzZU1heFN0eWxlIiwic3R5bGVWYWx1ZSIsInBhcmVudFByb3BlcnR5IiwidmFsdWVJblBpeGVscyIsImdldENvbXB1dGVkU3R5bGUiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJwb3NpdGlvbnMiLCJnZXRQb3NpdGlvbmVkU3R5bGUiLCJzdHlsZXMiLCJzdWZmaXgiLCJwb3MiLCJ1c2VPZmZzZXRQb3MiLCJzaGFkb3dSb290IiwiZ2V0UmVsYXRpdmVQb3NpdGlvbiIsImV2ZW50IiwiYm9yZGVyQm94IiwiYm94U2l6aW5nIiwicGFkZGluZ3MiLCJib3JkZXJzIiwiYm94IiwidG91Y2hlcyIsIm9mZnNldFgiLCJvZmZzZXRZIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2xpZW50WCIsImNsaWVudFkiLCJnZXRDYW52YXNQb3NpdGlvbiIsInJvdW5kMSIsInJldGluYVNjYWxlIiwiZm9yY2VSYXRpbyIsImZvcmNlU3R5bGUiLCJwaXhlbFJhdGlvIiwiZGV2aWNlSGVpZ2h0IiwiZGV2aWNlV2lkdGgiLCJzZXRUcmFuc2Zvcm0iLCJzdXBwb3J0c0V2ZW50TGlzdGVuZXJPcHRpb25zIiwicGFzc2l2ZVN1cHBvcnRlZCIsInBhc3NpdmUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVhZFVzZWRTaXplIiwiZWwiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiZ2V0U3R5bGUiLCJfcG9pbnRJbkxpbmUiLCJfc3RlcHBlZEludGVycG9sYXRpb24iLCJfYmV6aWVySW50ZXJwb2xhdGlvbiIsImNwMSIsImNwMiIsImdldFJ0bEFkYXB0ZXIiLCJydGwiLCJyZWN0WCIsInNldFdpZHRoIiwieFBsdXMiLCJsZWZ0Rm9yTHRyIiwiaXRlbVdpZHRoIiwiZ2V0UmlnaHRUb0xlZnRBZGFwdGVyIiwiX2l0ZW1XaWR0aCIsIm92ZXJyaWRlVGV4dERpcmVjdGlvbiIsImRpcmVjdGlvbiIsIm9yaWdpbmFsIiwiZ2V0UHJvcGVydHlQcmlvcml0eSIsInNldFByb3BlcnR5IiwicHJldlRleHREaXJlY3Rpb24iLCJyZXN0b3JlVGV4dERpcmVjdGlvbiIsInByb3BlcnR5Rm4iLCJiZXR3ZWVuIiwiY29tcGFyZSIsIm5vcm1hbGl6ZSIsIm5vcm1hbGl6ZVNlZ21lbnQiLCJfYm91bmRTZWdtZW50Iiwic2VnbWVudCIsInN0YXJ0Qm91bmQiLCJlbmRCb3VuZCIsImdldFNlZ21lbnQiLCJwcmV2VmFsdWUiLCJpbnNpZGUiLCJzdWJTdGFydCIsIl9ib3VuZFNlZ21lbnRzIiwic2VnbWVudHMiLCJzdWIiLCJyZWFkU3R5bGUiLCJib3JkZXJDYXBTdHlsZSIsImJvcmRlckRhc2giLCJib3JkZXJEYXNoT2Zmc2V0IiwiYm9yZGVySm9pblN0eWxlIiwic3R5bGVDaGFuZ2VkIiwicHJldlN0eWxlIiwicmVwbGFjZXIiLCJBbmltYXRvciIsIl9yZXF1ZXN0IiwiX2NoYXJ0cyIsIl9ydW5uaW5nIiwiX2xhc3REYXRlIiwiX25vdGlmeSIsImFuaW1zIiwiY2FsbGJhY2tzIiwibnVtU3RlcHMiLCJpbml0aWFsIiwiY3VycmVudFN0ZXAiLCJfcmVmcmVzaCIsIl91cGRhdGUiLCJub3ciLCJyZW1haW5pbmciLCJydW5uaW5nIiwiZHJhdyIsIl9hY3RpdmUiLCJfdG90YWwiLCJ0aWNrIiwicG9wIiwiX2dldEFuaW1zIiwiY2hhcnRzIiwiY29tcGxldGUiLCJwcm9ncmVzcyIsImxpc3RlbiIsImNiIiwicmVkdWNlIiwiYWNjIiwiY3VyIiwiX2R1cmF0aW9uIiwic3RvcCIsImNhbmNlbCIsImFuaW1hdG9yIiwiaW50ZXJwb2xhdG9ycyIsImJvb2xlYW4iLCJmYWN0b3IiLCJjMCIsIm51bWJlciIsIkFuaW1hdGlvbiIsImNmZyIsImN1cnJlbnRWYWx1ZSIsIl9mbiIsIl9lYXNpbmciLCJfc3RhcnQiLCJfbG9vcCIsIl90YXJnZXQiLCJfcHJvcCIsIl9mcm9tIiwiX3RvIiwiX3Byb21pc2VzIiwiZWxhcHNlZCIsIndhaXQiLCJwcm9taXNlcyIsIlByb21pc2UiLCJyZXMiLCJyZWoiLCJyZXNvbHZlZCIsIm1ldGhvZCIsIkFuaW1hdGlvbnMiLCJjb25maWciLCJfY2hhcnQiLCJfcHJvcGVydGllcyIsImNvbmZpZ3VyZSIsImFuaW1hdGlvbk9wdGlvbnMiLCJhbmltYXRlZFByb3BzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIm9wdGlvbiIsIl9hbmltYXRlT3B0aW9ucyIsIm5ld09wdGlvbnMiLCIkc2hhcmVkIiwiJGFuaW1hdGlvbnMiLCJyZXNvbHZlVGFyZ2V0T3B0aW9ucyIsIl9jcmVhdGVBbmltYXRpb25zIiwiYW5pbSIsImFsbCIsImF3YWl0QWxsIiwidGhlbiIsInNjYWxlQ2xpcCIsImFsbG93ZWRPdmVyZmxvdyIsImdldFNvcnRlZERhdGFzZXRJbmRpY2VzIiwiZmlsdGVyVmlzaWJsZSIsIm1ldGFzZXRzIiwiX2dldFNvcnRlZERhdGFzZXRNZXRhcyIsImFwcGx5U3RhY2siLCJzdGFjayIsImRzSW5kZXgiLCJzaW5nbGVNb2RlIiwib3RoZXJWYWx1ZSIsImlzU3RhY2tlZCIsInN0YWNrZWQiLCJnZXRPckNyZWF0ZVN0YWNrIiwic3RhY2tzIiwic3RhY2tLZXkiLCJpbmRleFZhbHVlIiwic3ViU3RhY2siLCJnZXRMYXN0SW5kZXhJblN0YWNrIiwidlNjYWxlIiwicG9zaXRpdmUiLCJnZXRNYXRjaGluZ1Zpc2libGVNZXRhcyIsInVwZGF0ZVN0YWNrcyIsImNvbnRyb2xsZXIiLCJfY2FjaGVkTWV0YSIsIl9zdGFja3MiLCJpQXhpcyIsInZBeGlzIiwiaW5kZXhTY2FsZSIsInZhbHVlU2NhbGUiLCJnZXRTdGFja0tleSIsIl90b3AiLCJfYm90dG9tIiwiX3Zpc3VhbFZhbHVlcyIsImdldEZpcnN0U2NhbGVJZCIsInNoaWZ0IiwiY2xlYXJTdGFja3MiLCJpc0RpcmVjdFVwZGF0ZU1vZGUiLCJjbG9uZUlmTm90U2hhcmVkIiwiY2FjaGVkIiwic2hhcmVkIiwiRGF0YXNldENvbnRyb2xsZXIiLCJfY2FjaGVkRGF0YU9wdHMiLCJnZXRNZXRhIiwiX3R5cGUiLCJfZGF0YSIsIl9vYmplY3REYXRhIiwiX3NoYXJlZE9wdGlvbnMiLCJfZHJhd1N0YXJ0IiwiX2RyYXdDb3VudCIsImVuYWJsZU9wdGlvblNoYXJpbmciLCJzdXBwb3J0c0RlY2ltYXRpb24iLCIkY29udGV4dCIsIl9zeW5jTGlzdCIsImRhdGFzZXRFbGVtZW50VHlwZSIsImRhdGFFbGVtZW50VHlwZSIsImluaXRpYWxpemUiLCJsaW5rU2NhbGVzIiwiX3N0YWNrZWQiLCJhZGRFbGVtZW50cyIsImlzUGx1Z2luRW5hYmxlZCIsInVwZGF0ZUluZGV4IiwiZGF0YXNldCIsImdldERhdGFzZXQiLCJjaG9vc2VJZCIsInhpZCIsInhBeGlzSUQiLCJ5aWQiLCJ5QXhpc0lEIiwicmlkIiwickF4aXNJRCIsImlpZCIsImlBeGlzSUQiLCJ2aWQiLCJ2QXhpc0lEIiwiZ2V0U2NhbGVGb3JJZCIsInJTY2FsZSIsImdldERhdGFzZXRNZXRhIiwic2NhbGVJRCIsIl9nZXRPdGhlclNjYWxlIiwicmVzZXQiLCJfZGVzdHJveSIsIl9kYXRhQ2hlY2siLCJhZGF0YSIsImNvbnZlcnRPYmplY3REYXRhVG9BcnJheSIsImlzRXh0ZW5zaWJsZSIsIm9iamVjdCIsImJ1aWxkT3JVcGRhdGVFbGVtZW50cyIsInJlc2V0TmV3RWxlbWVudHMiLCJzdGFja0NoYW5nZWQiLCJvbGRTdGFja2VkIiwiX3Jlc3luY0VsZW1lbnRzIiwic2NvcGVLZXlzIiwiZGF0YXNldFNjb3BlS2V5cyIsImdldE9wdGlvblNjb3BlcyIsImNyZWF0ZVJlc29sdmVyIiwic29ydGVkIiwicGFyc2VBcnJheURhdGEiLCJwYXJzZU9iamVjdERhdGEiLCJwYXJzZVByaW1pdGl2ZURhdGEiLCJpc05vdEluT3JkZXJDb21wYXJlZFRvUHJldiIsImxhYmVscyIsImdldExhYmVscyIsInNpbmdsZVNjYWxlIiwieEF4aXNLZXkiLCJ5QXhpc0tleSIsImdldFBhcnNlZCIsImdldERhdGFFbGVtZW50IiwidXBkYXRlUmFuZ2VGcm9tUGFyc2VkIiwicGFyc2VkVmFsdWUiLCJOYU4iLCJnZXRNaW5NYXgiLCJjYW5TdGFjayIsIm90aGVyU2NhbGUiLCJoaWRkZW4iLCJjcmVhdGVTdGFjayIsIk5FR0FUSVZFX0lORklOSVRZIiwib3RoZXJNaW4iLCJvdGhlck1heCIsIl9za2lwIiwiZ2V0QWxsUGFyc2VkVmFsdWVzIiwiZ2V0TWF4T3ZlcmZsb3ciLCJnZXRMYWJlbEFuZFZhbHVlIiwibGFiZWwiLCJnZXRMYWJlbEZvclZhbHVlIiwiX2NsaXAiLCJkaXNhYmxlZCIsInRvQ2xpcCIsImRlZmF1bHRDbGlwIiwiY2hhcnRBcmVhIiwicmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9ucyIsInJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMiLCJkYXRhSW5kZXgiLCJyYXciLCJjcmVhdGVEYXRhQ29udGV4dCIsImNyZWF0ZURhdGFzZXRDb250ZXh0IiwiX3Jlc29sdmVFbGVtZW50T3B0aW9ucyIsImVsZW1lbnRUeXBlIiwic2hhcmluZyIsImRhdGFzZXRFbGVtZW50U2NvcGVLZXlzIiwicmVzb2x2ZU5hbWVkT3B0aW9ucyIsImZyZWV6ZSIsIl9yZXNvbHZlQW5pbWF0aW9ucyIsInRyYW5zaXRpb24iLCJkYXRhc2V0QW5pbWF0aW9uU2NvcGVLZXlzIiwiZ2V0U2hhcmVkT3B0aW9ucyIsImluY2x1ZGVPcHRpb25zIiwic2hhcmVkT3B0aW9ucyIsIl9hbmltYXRpb25zRGlzYWJsZWQiLCJfZ2V0U2hhcmVkT3B0aW9ucyIsImZpcnN0T3B0cyIsInByZXZpb3VzbHlTaGFyZWRPcHRpb25zIiwidXBkYXRlU2hhcmVkT3B0aW9ucyIsInVwZGF0ZUVsZW1lbnQiLCJfc2V0U3R5bGUiLCJyZW1vdmVIb3ZlclN0eWxlIiwic2V0SG92ZXJTdHlsZSIsIl9yZW1vdmVEYXRhc2V0SG92ZXJTdHlsZSIsIl9zZXREYXRhc2V0SG92ZXJTdHlsZSIsImFyZzEiLCJhcmcyIiwibnVtTWV0YSIsIm51bURhdGEiLCJfaW5zZXJ0RWxlbWVudHMiLCJfcmVtb3ZlRWxlbWVudHMiLCJtb3ZlIiwidXBkYXRlRWxlbWVudHMiLCJyZW1vdmVkIiwiX3N5bmMiLCJfZGF0YUNoYW5nZXMiLCJfb25EYXRhUHVzaCIsIl9vbkRhdGFQb3AiLCJfb25EYXRhU2hpZnQiLCJfb25EYXRhU3BsaWNlIiwibmV3Q291bnQiLCJfb25EYXRhVW5zaGlmdCIsImNvbXB1dGVNaW5TYW1wbGVTaXplIiwiX2NhY2hlIiwiJGJhciIsInZpc2libGVNZXRhcyIsInNvcnQiLCJnZXRBbGxTY2FsZVZhbHVlcyIsImN1cnIiLCJfbGVuZ3RoIiwidXBkYXRlTWluQW5kUHJldiIsImdldFBpeGVsRm9yVGljayIsInBhcnNlVmFsdWUiLCJlbnRyeSIsInN0YXJ0VmFsdWUiLCJlbmRWYWx1ZSIsImJhclN0YXJ0IiwiYmFyRW5kIiwiX2N1c3RvbSIsInBhcnNlRmxvYXRCYXIiLCJwYXJzZUFycmF5T3JQcmltaXRpdmUiLCJpc0Zsb2F0QmFyIiwiY3VzdG9tIiwic2V0Qm9yZGVyU2tpcHBlZCIsImVkZ2UiLCJib3JkZXJTa2lwcGVkIiwiaG9yaXpvbnRhbCIsImJvcmRlclByb3BzIiwiZW5hYmxlQm9yZGVyUmFkaXVzIiwicGFyc2VFZGdlIiwib3JpZyIsInYyIiwic3RhcnRFbmQiLCJzZXRJbmZsYXRlQW1vdW50IiwiaW5mbGF0ZUFtb3VudCIsIkRvdWdobnV0Q29udHJvbGxlciIsImFuaW1hdGVSb3RhdGUiLCJhbmltYXRlU2NhbGUiLCJjdXRvdXQiLCJjaXJjdW1mZXJlbmNlIiwic3BhY2luZyIsImFzcGVjdFJhdGlvIiwibGVnZW5kIiwiZ2VuZXJhdGVMYWJlbHMiLCJmb250Q29sb3IiLCJnZXREYXRhVmlzaWJpbGl0eSIsImxlZ2VuZEl0ZW0iLCJ0b2dnbGVEYXRhVmlzaWJpbGl0eSIsInN1cGVyIiwiaW5uZXJSYWRpdXMiLCJvdXRlclJhZGl1cyIsIl9nZXRSb3RhdGlvbiIsIl9nZXRDaXJjdW1mZXJlbmNlIiwiX2dldFJvdGF0aW9uRXh0ZW50cyIsImlzRGF0YXNldFZpc2libGUiLCJhcmNzIiwiZ2V0TWF4Qm9yZGVyV2lkdGgiLCJnZXRNYXhPZmZzZXQiLCJtYXhTaXplIiwiY2hhcnRXZWlnaHQiLCJfZ2V0UmluZ1dlaWdodCIsInJhdGlvWCIsInJhdGlvWSIsInN0YXJ0QW5nbGUiLCJlbmRBbmdsZSIsInN0YXJ0WCIsInN0YXJ0WSIsImVuZFgiLCJlbmRZIiwiY2FsY01heCIsImNhbGNNaW4iLCJtYXhYIiwibWF4WSIsIm1pblgiLCJtaW5ZIiwiZ2V0UmF0aW9BbmRPZmZzZXQiLCJtYXhIZWlnaHQiLCJtYXhSYWRpdXMiLCJyYWRpdXNMZW5ndGgiLCJfZ2V0VmlzaWJsZURhdGFzZXRXZWlnaHRUb3RhbCIsInRvdGFsIiwiY2FsY3VsYXRlVG90YWwiLCJfZ2V0UmluZ1dlaWdodE9mZnNldCIsIl9jaXJjdW1mZXJlbmNlIiwiY2FsY3VsYXRlQ2lyY3VtZmVyZW5jZSIsImFuaW1hdGlvbk9wdHMiLCJjZW50ZXJYIiwiY2VudGVyWSIsIm1ldGFEYXRhIiwiYm9yZGVyQWxpZ24iLCJob3ZlckJvcmRlcldpZHRoIiwiaG92ZXJPZmZzZXQiLCJyaW5nV2VpZ2h0T2Zmc2V0IiwiUG9sYXJBcmVhQ29udHJvbGxlciIsImFuZ2xlTGluZXMiLCJjaXJjdWxhciIsInBvaW50TGFiZWxzIiwiYmluZCIsIl91cGRhdGVSYWRpdXMiLCJtaW5TaXplIiwiY3V0b3V0UGVyY2VudGFnZSIsImdldFZpc2libGVEYXRhc2V0Q291bnQiLCJ4Q2VudGVyIiwieUNlbnRlciIsImRhdGFzZXRTdGFydEFuZ2xlIiwiZ2V0SW5kZXhBbmdsZSIsImRlZmF1bHRBbmdsZSIsImNvdW50VmlzaWJsZUVsZW1lbnRzIiwiX2NvbXB1dGVBbmdsZSIsImdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlIiwiY29udHJvbGxlcnMiLCJfX3Byb3RvX18iLCJCYXJDb250cm9sbGVyIiwiY2F0ZWdvcnlQZXJjZW50YWdlIiwiYmFyUGVyY2VudGFnZSIsImdyb3VwZWQiLCJfaW5kZXhfIiwiX3ZhbHVlXyIsImlBeGlzS2V5IiwidkF4aXNLZXkiLCJiYXJzIiwiZ2V0QmFzZVBpeGVsIiwiaXNIb3Jpem9udGFsIiwicnVsZXIiLCJfZ2V0UnVsZXIiLCJ2cGl4ZWxzIiwiX2NhbGN1bGF0ZUJhclZhbHVlUGl4ZWxzIiwiaXBpeGVscyIsIl9jYWxjdWxhdGVCYXJJbmRleFBpeGVscyIsImNlbnRlciIsIl9nZXRTdGFja3MiLCJza2lwTnVsbCIsIl9nZXRTdGFja0NvdW50IiwiX2dldFN0YWNrSW5kZXgiLCJwaXhlbHMiLCJiYXJUaGlja25lc3MiLCJfc3RhcnRQaXhlbCIsIl9lbmRQaXhlbCIsInN0YWNrQ291bnQiLCJiYXNlVmFsdWUiLCJtaW5CYXJMZW5ndGgiLCJhY3R1YWxCYXNlIiwiZmxvYXRpbmciLCJiYXJTaWduIiwic3RhcnRQaXhlbCIsImdldFBpeGVsRm9yRGVjaW1hbCIsImVuZFBpeGVsIiwiZ2V0VmFsdWVGb3JQaXhlbCIsImhhbGZHcmlkIiwiZ2V0TGluZVdpZHRoRm9yVmFsdWUiLCJtYXhCYXJUaGlja25lc3MiLCJJbmZpbml0eSIsInBlcmNlbnQiLCJjaHVuayIsImNvbXB1dGVGbGV4Q2F0ZWdvcnlUcmFpdHMiLCJ0aGlja25lc3MiLCJjb21wdXRlRml0Q2F0ZWdvcnlUcmFpdHMiLCJzdGFja0luZGV4IiwicmVjdHMiLCJCdWJibGVDb250cm9sbGVyIiwiTGluZUNvbnRyb2xsZXIiLCJfZGF0YXNldCIsIl9kYXRhc2V0SW5kZXgiLCJfZGVjaW1hdGVkIiwiYW5pbWF0ZWQiLCJtYXhHYXBMZW5ndGgiLCJkaXJlY3RVcGRhdGUiLCJwb2ludHNDb3VudCIsInByZXZQYXJzZWQiLCJudWxsRGF0YSIsImxhc3RQb2ludCIsInVwZGF0ZUNvbnRyb2xQb2ludHMiLCJQaWVDb250cm9sbGVyIiwiUmFkYXJDb250cm9sbGVyIiwiX2Z1bGxMb29wIiwicG9pbnRQb3NpdGlvbiIsImdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZSIsIlNjYXR0ZXJDb250cm9sbGVyIiwicmVnaXN0cnkiLCJnZXRFbGVtZW50IiwiRGF0ZUFkYXB0ZXJCYXNlIiwibWVtYmVycyIsImluaXQiLCJmb3JtYXRzIiwiZGlmZiIsInN0YXJ0T2YiLCJlbmRPZiIsImFkYXB0ZXJzIiwiYmluYXJ5U2VhcmNoIiwibWV0YXNldCIsImxvb2t1cE1ldGhvZCIsIl9yZXZlcnNlUGl4ZWxzIiwiZ2V0UmFuZ2UiLCJldmFsdWF0ZUludGVyYWN0aW9uSXRlbXMiLCJwb3NpdGlvbiIsImhhbmRsZXIiLCJnZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzIiwiZ2V0SW50ZXJzZWN0SXRlbXMiLCJ1c2VGaW5hbFBvc2l0aW9uIiwiaXNQb2ludEluQXJlYSIsImluUmFuZ2UiLCJnZXROZWFyZXN0SXRlbXMiLCJkaXN0YW5jZU1ldHJpYyIsInVzZVgiLCJ1c2VZIiwiZGVsdGFYIiwiZGVsdGFZIiwiZ2V0RGlzdGFuY2VNZXRyaWNGb3JBeGlzIiwibWluRGlzdGFuY2UiLCJnZXRDZW50ZXJQb2ludCIsImdldE5lYXJlc3RDYXJ0ZXNpYW5JdGVtcyIsImdldFByb3BzIiwiZ2V0TmVhcmVzdFJhZGlhbEl0ZW1zIiwiZ2V0QXhpc0l0ZW1zIiwicmFuZ2VNZXRob2QiLCJpbnRlcnNlY3RzSXRlbSIsIkludGVyYWN0aW9uIiwibW9kZXMiLCJuZWFyZXN0IiwiU1RBVElDX1BPU0lUSU9OUyIsImZpbHRlckJ5UG9zaXRpb24iLCJmaWx0ZXJEeW5hbWljUG9zaXRpb25CeUF4aXMiLCJzb3J0QnlXZWlnaHQiLCJnZXRDb21iaW5lZE1heCIsIm1heFBhZGRpbmciLCJ1cGRhdGVNYXhQYWRkaW5nIiwiYm94UGFkZGluZyIsInVwZGF0ZURpbXMiLCJwYXJhbXMiLCJsYXlvdXQiLCJnZXRQYWRkaW5nIiwibmV3V2lkdGgiLCJvdXRlcldpZHRoIiwibmV3SGVpZ2h0Iiwib3V0ZXJIZWlnaHQiLCJ3aWR0aENoYW5nZWQiLCJoZWlnaHRDaGFuZ2VkIiwic2FtZSIsIm90aGVyIiwiZ2V0TWFyZ2lucyIsIm1hcmdpbkZvclBvc2l0aW9ucyIsImZpdEJveGVzIiwiYm94ZXMiLCJyZWZpdEJveGVzIiwicmVmaXQiLCJmdWxsU2l6ZSIsInNldEJveERpbXMiLCJwbGFjZUJveGVzIiwidXNlclBhZGRpbmciLCJwbGFjZWQiLCJzdGFja1dlaWdodCIsImxheW91dHMiLCJhZGRCb3giLCJfbGF5ZXJzIiwieiIsInJlbW92ZUJveCIsImxheW91dEl0ZW0iLCJtaW5QYWRkaW5nIiwiYXZhaWxhYmxlV2lkdGgiLCJhdmFpbGFibGVIZWlnaHQiLCJsYXlvdXRCb3hlcyIsIndyYXBCb3hlcyIsIndyYXAiLCJjZW50ZXJIb3Jpem9udGFsIiwiY2VudGVyVmVydGljYWwiLCJsZWZ0QW5kVG9wIiwicmlnaHRBbmRCb3R0b20iLCJ2ZXJ0aWNhbCIsImJ1aWxkTGF5b3V0Qm94ZXMiLCJ2ZXJ0aWNhbEJveGVzIiwiaG9yaXpvbnRhbEJveGVzIiwiYmVmb3JlTGF5b3V0IiwidmlzaWJsZVZlcnRpY2FsQm94Q291bnQiLCJ2Qm94TWF4V2lkdGgiLCJoQm94TWF4SGVpZ2h0IiwiYnVpbGRTdGFja3MiLCJzZXRMYXlvdXREaW1zIiwidXBkYXRlUG9zIiwiY2hhbmdlIiwiaGFuZGxlTWF4UGFkZGluZyIsIkJhc2VQbGF0Zm9ybSIsImFjcXVpcmVDb250ZXh0IiwicmVsZWFzZUNvbnRleHQiLCJnZXRNYXhpbXVtU2l6ZSIsImlzQXR0YWNoZWQiLCJ1cGRhdGVDb25maWciLCJCYXNpY1BsYXRmb3JtIiwiRVhQQU5ET19LRVkiLCJFVkVOVF9UWVBFUyIsInRvdWNoc3RhcnQiLCJ0b3VjaG1vdmUiLCJ0b3VjaGVuZCIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJkb3duIiwicG9pbnRlcm1vdmUiLCJwb2ludGVydXAiLCJwb2ludGVybGVhdmUiLCJwb2ludGVyb3V0IiwiaXNOdWxsT3JFbXB0eSIsImV2ZW50TGlzdGVuZXJPcHRpb25zIiwicmVtb3ZlTGlzdGVuZXIiLCJub2RlTGlzdENvbnRhaW5zIiwibm9kZUxpc3QiLCJjb250YWlucyIsImNyZWF0ZUF0dGFjaE9ic2VydmVyIiwib2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwiZW50cmllcyIsInRyaWdnZXIiLCJhZGRlZE5vZGVzIiwicmVtb3ZlZE5vZGVzIiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJjcmVhdGVEZXRhY2hPYnNlcnZlciIsImRycExpc3RlbmluZ0NoYXJ0cyIsIm9sZERldmljZVBpeGVsUmF0aW8iLCJvbldpbmRvd1Jlc2l6ZSIsImRwciIsImNyZWF0ZVJlc2l6ZU9ic2VydmVyIiwiY2xpZW50V2lkdGgiLCJSZXNpemVPYnNlcnZlciIsImNvbnRlbnRSZWN0IiwibGlzdGVuRGV2aWNlUGl4ZWxSYXRpb0NoYW5nZXMiLCJyZWxlYXNlT2JzZXJ2ZXIiLCJkaXNjb25uZWN0IiwidW5saXN0ZW5EZXZpY2VQaXhlbFJhdGlvQ2hhbmdlcyIsImNyZWF0ZVByb3h5QW5kTGlzdGVuIiwibmF0aXZlIiwiZnJvbU5hdGl2ZUV2ZW50IiwiYWRkTGlzdGVuZXIiLCJEb21QbGF0Zm9ybSIsInJlbmRlckhlaWdodCIsImdldEF0dHJpYnV0ZSIsInJlbmRlcldpZHRoIiwiZGlzcGxheVdpZHRoIiwiZGlzcGxheUhlaWdodCIsImluaXRDYW52YXMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJwcm94aWVzIiwiJHByb3hpZXMiLCJhdHRhY2giLCJkZXRhY2giLCJiYldpZHRoIiwiYmJIZWlnaHQiLCJtYXJnaW5zIiwiY29udGFpbmVyU2l6ZSIsImNvbnRhaW5lclN0eWxlIiwiY29udGFpbmVyQm9yZGVyIiwiY29udGFpbmVyUGFkZGluZyIsImNsaWVudEhlaWdodCIsImdldENvbnRhaW5lclNpemUiLCJpc0Nvbm5lY3RlZCIsIkVsZW1lbnQiLCJ0b29sdGlwUG9zaXRpb24iLCJoYXNWYWx1ZSIsImZpbmFsIiwibmV3VGlja3MiLCJtYWpvclN0YXJ0IiwibWFqb3JFbmQiLCJjZWlsIiwib2Zmc2V0RnJvbUVkZ2UiLCJnZXRUaWNrc0xpbWl0IiwidGlja3NMZW5ndGgiLCJtYXhUaWNrc0xpbWl0Iiwic2FtcGxlIiwibnVtSXRlbXMiLCJpbmNyZW1lbnQiLCJnZXRQaXhlbEZvckdyaWRMaW5lIiwib2Zmc2V0R3JpZExpbmVzIiwidmFsaWRJbmRleCIsImxpbmVWYWx1ZSIsImdldFRpY2tNYXJrTGVuZ3RoIiwiZ2V0VGl0bGVIZWlnaHQiLCJ0aXRsZUFsaWduIiwicmV2ZXJzZUFsaWduIiwiU2NhbGUiLCJfbWFyZ2lucyIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJsYWJlbFJvdGF0aW9uIiwiX3JhbmdlIiwiX2dyaWRMaW5lSXRlbXMiLCJfbGFiZWxJdGVtcyIsIl9sYWJlbFNpemVzIiwiX21heExlbmd0aCIsIl9sb25nZXN0VGV4dENhY2hlIiwiX3VzZXJNYXgiLCJfdXNlck1pbiIsIl9zdWdnZXN0ZWRNYXgiLCJfc3VnZ2VzdGVkTWluIiwiX3RpY2tzTGVuZ3RoIiwiX2JvcmRlclZhbHVlIiwiX2RhdGFMaW1pdHNDYWNoZWQiLCJzdWdnZXN0ZWRNaW4iLCJzdWdnZXN0ZWRNYXgiLCJtZXRhcyIsImdldFRpY2tzIiwieExhYmVscyIsInlMYWJlbHMiLCJnZXRMYWJlbEl0ZW1zIiwiX2NvbXB1dGVMYWJlbEl0ZW1zIiwiYmVmb3JlVXBkYXRlIiwidGlja09wdHMiLCJzYW1wbGVTaXplIiwiYmVmb3JlU2V0RGltZW5zaW9ucyIsInNldERpbWVuc2lvbnMiLCJhZnRlclNldERpbWVuc2lvbnMiLCJiZWZvcmVEYXRhTGltaXRzIiwiZGV0ZXJtaW5lRGF0YUxpbWl0cyIsImFmdGVyRGF0YUxpbWl0cyIsIm1pbm1heCIsImtlZXBaZXJvIiwiX2FkZEdyYWNlIiwiYmVmb3JlQnVpbGRUaWNrcyIsImJ1aWxkVGlja3MiLCJhZnRlckJ1aWxkVGlja3MiLCJzYW1wbGluZ0VuYWJsZWQiLCJfY29udmVydFRpY2tzVG9MYWJlbHMiLCJiZWZvcmVDYWxjdWxhdGVMYWJlbFJvdGF0aW9uIiwiY2FsY3VsYXRlTGFiZWxSb3RhdGlvbiIsImFmdGVyQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbiIsImRldGVybWluZWRNYXhUaWNrcyIsIl90aWNrU2l6ZSIsIm1heFNjYWxlIiwibWF4Q2hhcnQiLCJkZXRlcm1pbmVNYXhUaWNrcyIsInRpY2tzTGltaXQiLCJtYWpvckluZGljZXMiLCJlbmFibGVkIiwiZ2V0TWFqb3JJbmRpY2VzIiwibnVtTWFqb3JJbmRpY2VzIiwiZmlyc3QiLCJza2lwTWFqb3JzIiwiZXZlbk1ham9yU3BhY2luZyIsImdldEV2ZW5TcGFjaW5nIiwiZmFjdG9ycyIsIl9mYWN0b3JpemUiLCJjYWxjdWxhdGVTcGFjaW5nIiwiYXZnTWFqb3JTcGFjaW5nIiwiYWZ0ZXJBdXRvU2tpcCIsImJlZm9yZUZpdCIsImZpdCIsImFmdGVyRml0IiwiYWZ0ZXJVcGRhdGUiLCJyZXZlcnNlUGl4ZWxzIiwiX2FsaWduVG9QaXhlbHMiLCJhbGlnblRvUGl4ZWxzIiwiX2NhbGxIb29rcyIsIm5vdGlmeVBsdWdpbnMiLCJiZWZvcmVUaWNrVG9MYWJlbENvbnZlcnNpb24iLCJnZW5lcmF0ZVRpY2tMYWJlbHMiLCJhZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbiIsIm51bVRpY2tzIiwibWF4TGFiZWxEaWFnb25hbCIsIl9pc1Zpc2libGUiLCJsYWJlbFNpemVzIiwiX2dldExhYmVsU2l6ZXMiLCJtYXhMYWJlbFdpZHRoIiwid2lkZXN0IiwibWF4TGFiZWxIZWlnaHQiLCJoaWdoZXN0IiwiYXNpbiIsInRpdGxlT3B0cyIsImdyaWRPcHRzIiwidGl0bGVIZWlnaHQiLCJ0aWNrUGFkZGluZyIsImFuZ2xlUmFkaWFucyIsImxhYmVsSGVpZ2h0IiwibGFiZWxXaWR0aCIsIl9jYWxjdWxhdGVQYWRkaW5nIiwiX2hhbmRsZU1hcmdpbnMiLCJpc1JvdGF0ZWQiLCJsYWJlbHNCZWxvd1RpY2tzIiwib2Zmc2V0TGVmdCIsIm9mZnNldFJpZ2h0IiwiaXNGdWxsU2l6ZSIsIl9jb21wdXRlTGFiZWxTaXplcyIsImNhY2hlcyIsIndpZHRocyIsImhlaWdodHMiLCJ0aWNrRm9udCIsImZvbnRTdHJpbmciLCJuZXN0ZWRMYWJlbCIsIndpZGVzdExhYmVsU2l6ZSIsImhpZ2hlc3RMYWJlbFNpemUiLCJfcmVzb2x2ZVRpY2tGb250T3B0aW9ucyIsInZhbHVlQXQiLCJpZHgiLCJkZWNpbWFsIiwiZ2V0RGVjaW1hbEZvclBpeGVsIiwiZ2V0QmFzZVZhbHVlIiwiY3JlYXRlVGlja0NvbnRleHQiLCJvcHRpb25UaWNrcyIsInJvdCIsIl9jb21wdXRlR3JpZExpbmVJdGVtcyIsInRsIiwiYm9yZGVyT3B0cyIsImF4aXNXaWR0aCIsImF4aXNIYWxmV2lkdGgiLCJhbGlnbkJvcmRlclZhbHVlIiwiYm9yZGVyVmFsdWUiLCJhbGlnbmVkTGluZVZhbHVlIiwidHgxIiwidHkxIiwidHgyIiwidHkyIiwieDEiLCJ5MSIsIngyIiwieTIiLCJwb3NpdGlvbkF4aXNJRCIsImxpbWl0Iiwic3RlcCIsIm9wdHNBdEluZGV4Iiwib3B0c0F0SW5kZXhCb3JkZXIiLCJsaW5lQ29sb3IiLCJ0aWNrQm9yZGVyRGFzaCIsInRpY2tCb3JkZXJEYXNoT2Zmc2V0IiwidGlja0FuZFBhZGRpbmciLCJoVGlja0FuZFBhZGRpbmciLCJsaW5lQ291bnQiLCJ0ZXh0T2Zmc2V0IiwiX2dldFhBeGlzTGFiZWxBbGlnbm1lbnQiLCJfZ2V0WUF4aXNMYWJlbEFsaWdubWVudCIsImhhbGZDb3VudCIsInRpY2tUZXh0QWxpZ24iLCJsYWJlbFBhZGRpbmciLCJfY29tcHV0ZUxhYmVsQXJlYSIsImRyYXdCYWNrZ3JvdW5kIiwiZmluZEluZGV4IiwiZHJhd0dyaWQiLCJkcmF3TGluZSIsInNldExpbmVEYXNoIiwibGluZURhc2hPZmZzZXQiLCJkcmF3Qm9yZGVyIiwibGFzdExpbmVXaWR0aCIsImRyYXdMYWJlbHMiLCJyZW5kZXJUZXh0T3B0aW9ucyIsImRyYXdUaXRsZSIsInRpdGxlWCIsInRpdGxlWSIsInRpdGxlQXJncyIsInR6IiwiZ3oiLCJieiIsImF4aXNJRCIsIl9tYXhEaWdpdHMiLCJmb250U2l6ZSIsIlR5cGVkUmVnaXN0cnkiLCJpc0ZvclR5cGUiLCJpc1Byb3RvdHlwZU9mIiwicmVnaXN0ZXIiLCJwYXJlbnRTY29wZSIsImlzSUNoYXJ0Q29tcG9uZW50IiwiaXRlbURlZmF1bHRzIiwiZGVmYXVsdFJvdXRlcyIsInJvdXRlcyIsInByb3BlcnR5UGFydHMiLCJzb3VyY2VOYW1lIiwic291cmNlU2NvcGUiLCJyb3V0ZURlZmF1bHRzIiwicmVnaXN0ZXJEZWZhdWx0cyIsInVucmVnaXN0ZXIiLCJSZWdpc3RyeSIsIl90eXBlZFJlZ2lzdHJpZXMiLCJfZWFjaCIsImFkZENvbnRyb2xsZXJzIiwiYWRkUGx1Z2lucyIsImFkZFNjYWxlcyIsImdldENvbnRyb2xsZXIiLCJfZ2V0IiwiZ2V0UGx1Z2luIiwiZ2V0U2NhbGUiLCJyZW1vdmVDb250cm9sbGVycyIsInJlbW92ZUVsZW1lbnRzIiwicmVtb3ZlUGx1Z2lucyIsInJlbW92ZVNjYWxlcyIsInR5cGVkUmVnaXN0cnkiLCJhcmciLCJyZWciLCJfZ2V0UmVnaXN0cnlGb3JUeXBlIiwiX2V4ZWMiLCJpdGVtUmVnIiwiY29tcG9uZW50IiwiY2FtZWxNZXRob2QiLCJQbHVnaW5TZXJ2aWNlIiwiX2luaXQiLCJub3RpZnkiLCJob29rIiwiX2NyZWF0ZURlc2NyaXB0b3JzIiwiZGVzY3JpcHRvciIsInBsdWdpbiIsImNhbmNlbGFibGUiLCJpbnZhbGlkYXRlIiwiX29sZENhY2hlIiwiX25vdGlmeVN0YXRlQ2hhbmdlcyIsImxvY2FsSWRzIiwiYWxsUGx1Z2lucyIsImdldE9wdHMiLCJwbHVnaW5PcHRzIiwiY3JlYXRlRGVzY3JpcHRvcnMiLCJwcmV2aW91c0Rlc2NyaXB0b3JzIiwic29tZSIsInBsdWdpblNjb3BlS2V5cyIsImdldEluZGV4QXhpcyIsImRhdGFzZXREZWZhdWx0cyIsImlkTWF0Y2hlc0F4aXMiLCJkZXRlcm1pbmVBeGlzIiwic2NhbGVPcHRpb25zIiwiZ2V0QXhpc0Zyb21EYXRhc2V0IiwiaW5pdE9wdGlvbnMiLCJjaGFydERlZmF1bHRzIiwiY29uZmlnU2NhbGVzIiwiY2hhcnRJbmRleEF4aXMiLCJzY2FsZUNvbmYiLCJlcnJvciIsImJvdW5kRHMiLCJyZXRyaWV2ZUF4aXNGcm9tRGF0YXNldHMiLCJkZWZhdWx0SWQiLCJnZXREZWZhdWx0U2NhbGVJREZyb21BeGlzIiwiZGVmYXVsdFNjYWxlT3B0aW9ucyIsImRlZmF1bHRJRCIsImdldEF4aXNGcm9tRGVmYXVsdFNjYWxlSUQiLCJtZXJnZVNjYWxlQ29uZmlnIiwiaW5pdERhdGEiLCJrZXlDYWNoZSIsImtleXNDYWNoZWQiLCJjYWNoZWRLZXlzIiwiZ2VuZXJhdGUiLCJhZGRJZkZvdW5kIiwiQ29uZmlnIiwiX2NvbmZpZyIsImluaXRDb25maWciLCJfc2NvcGVDYWNoZSIsIl9yZXNvbHZlckNhY2hlIiwiY2xlYXJDYWNoZSIsImNsZWFyIiwiZGF0YXNldFR5cGUiLCJhZGRpdGlvbmFsT3B0aW9uU2NvcGVzIiwiX2NhY2hlZFNjb3BlcyIsIm1haW5TY29wZSIsInJlc2V0Q2FjaGUiLCJrZXlMaXN0cyIsImNoYXJ0T3B0aW9uU2NvcGVzIiwic3ViUHJlZml4ZXMiLCJnZXRSZXNvbHZlciIsImhhc0Z1bmN0aW9uIiwibmVlZENvbnRleHQiLCJyZXNvbHZlckNhY2hlIiwiS05PV05fUE9TSVRJT05TIiwicG9zaXRpb25Jc0hvcml6b250YWwiLCJjb21wYXJlMkxldmVsIiwibDEiLCJsMiIsIm9uQW5pbWF0aW9uc0NvbXBsZXRlIiwib25Db21wbGV0ZSIsIm9uQW5pbWF0aW9uUHJvZ3Jlc3MiLCJvblByb2dyZXNzIiwiZ2V0Q2FudmFzIiwiZ2V0RWxlbWVudEJ5SWQiLCJpbnN0YW5jZXMiLCJnZXRDaGFydCIsIm1vdmVOdW1lcmljS2V5cyIsImludEtleSIsIkNoYXJ0IiwiaW52YWxpZGF0ZVBsdWdpbnMiLCJ1c2VyQ29uZmlnIiwiaW5pdGlhbENhbnZhcyIsImV4aXN0aW5nQ2hhcnQiLCJPZmZzY3JlZW5DYW52YXMiLCJfZGV0ZWN0UGxhdGZvcm0iLCJfb3B0aW9ucyIsIl9hc3BlY3RSYXRpbyIsIl9tZXRhc2V0cyIsIl9sYXN0RXZlbnQiLCJfbGlzdGVuZXJzIiwiX3Jlc3BvbnNpdmVMaXN0ZW5lcnMiLCJfc29ydGVkTWV0YXNldHMiLCJfcGx1Z2lucyIsIl9oaWRkZW5JbmRpY2VzIiwiYXR0YWNoZWQiLCJfZG9SZXNpemUiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImRlYm91bmNlIiwicmVzaXplRGVsYXkiLCJfaW5pdGlhbGl6ZSIsIl9yZXNpemVCZWZvcmVEcmF3IiwiX3Jlc2l6ZSIsIm5ld1NpemUiLCJuZXdSYXRpbyIsIm9uUmVzaXplIiwiZW5zdXJlU2NhbGVzSGF2ZUlEcyIsImF4aXNPcHRpb25zIiwiYnVpbGRPclVwZGF0ZVNjYWxlcyIsInNjYWxlT3B0cyIsInVwZGF0ZWQiLCJpc1JhZGlhbCIsImRwb3NpdGlvbiIsImR0eXBlIiwic2NhbGVUeXBlIiwiaGFzVXBkYXRlZCIsIl91cGRhdGVNZXRhc2V0cyIsIl9kZXN0cm95RGF0YXNldE1ldGEiLCJfcmVtb3ZlVW5yZWZlcmVuY2VkTWV0YXNldHMiLCJidWlsZE9yVXBkYXRlQ29udHJvbGxlcnMiLCJuZXdDb250cm9sbGVycyIsIm9yZGVyIiwiQ29udHJvbGxlckNsYXNzIiwiX3Jlc2V0RWxlbWVudHMiLCJhbmltc0Rpc2FibGVkIiwiX3VwZGF0ZVNjYWxlcyIsIl9jaGVja0V2ZW50QmluZGluZ3MiLCJfdXBkYXRlSGlkZGVuSW5kaWNlcyIsIl9taW5QYWRkaW5nIiwiX3VwZGF0ZUxheW91dCIsIl91cGRhdGVEYXRhc2V0cyIsIl9ldmVudEhhbmRsZXIiLCJfdXBkYXRlSG92ZXJTdHlsZXMiLCJleGlzdGluZ0V2ZW50cyIsIm5ld0V2ZW50cyIsInVuYmluZEV2ZW50cyIsImNoYW5nZXMiLCJfZ2V0VW5pZm9ybURhdGFDaGFuZ2VzIiwiZGF0YXNldENvdW50IiwibWFrZVNldCIsImNoYW5nZVNldCIsIm5vQXJlYSIsIl9pZHgiLCJfdXBkYXRlRGF0YXNldCIsImxheWVycyIsIl9kcmF3RGF0YXNldHMiLCJfZHJhd0RhdGFzZXQiLCJ1c2VDbGlwIiwiZ2V0RGF0YXNldEFyZWEiLCJnZXRFbGVtZW50c0F0RXZlbnRGb3JNb2RlIiwic2V0RGF0YXNldFZpc2liaWxpdHkiLCJfdXBkYXRlVmlzaWJpbGl0eSIsIl9zdG9wIiwiZGVzdHJveSIsInRvQmFzZTY0SW1hZ2UiLCJ0b0RhdGFVUkwiLCJiaW5kVXNlckV2ZW50cyIsImJpbmRSZXNwb25zaXZlRXZlbnRzIiwiX2FkZCIsIl9yZW1vdmUiLCJkZXRhY2hlZCIsInVwZGF0ZUhvdmVyU3R5bGUiLCJnZXRBY3RpdmVFbGVtZW50cyIsInNldEFjdGl2ZUVsZW1lbnRzIiwiYWN0aXZlRWxlbWVudHMiLCJsYXN0QWN0aXZlIiwicGx1Z2luSWQiLCJyZXBsYXkiLCJob3Zlck9wdGlvbnMiLCJkZWFjdGl2YXRlZCIsImFjdGl2YXRlZCIsImluQ2hhcnRBcmVhIiwiZXZlbnRGaWx0ZXIiLCJfaGFuZGxlRXZlbnQiLCJfZ2V0QWN0aXZlRWxlbWVudHMiLCJpc0NsaWNrIiwiX2lzQ2xpY2tFdmVudCIsImxhc3RFdmVudCIsImRldGVybWluZUxhc3RFdmVudCIsInJUaGV0YVRvWFkiLCJ0aGV0YSIsInBhdGhBcmMiLCJwaXhlbE1hcmdpbiIsImlubmVyUiIsInNwYWNpbmdPZmZzZXQiLCJhdk5vZ1NwYWNpbmdSYWRpdXMiLCJhbmdsZU9mZnNldCIsIm91dGVyU3RhcnQiLCJvdXRlckVuZCIsImlubmVyU3RhcnQiLCJpbm5lckVuZCIsImFuZ2xlRGVsdGEiLCJib3JkZXJSYWRpdXMiLCJoYWxmVGhpY2tuZXNzIiwiaW5uZXJMaW1pdCIsImNvbXB1dGVPdXRlckxpbWl0Iiwib3V0ZXJBcmNMaW1pdCIsInBhcnNlQm9yZGVyUmFkaXVzJDEiLCJvdXRlclN0YXJ0QWRqdXN0ZWRSYWRpdXMiLCJvdXRlckVuZEFkanVzdGVkUmFkaXVzIiwib3V0ZXJTdGFydEFkanVzdGVkQW5nbGUiLCJvdXRlckVuZEFkanVzdGVkQW5nbGUiLCJpbm5lclN0YXJ0QWRqdXN0ZWRSYWRpdXMiLCJpbm5lckVuZEFkanVzdGVkUmFkaXVzIiwiaW5uZXJTdGFydEFkanVzdGVkQW5nbGUiLCJpbm5lckVuZEFkanVzdGVkQW5nbGUiLCJvdXRlck1pZEFkanVzdGVkQW5nbGUiLCJwQ2VudGVyIiwicDQiLCJpbm5lck1pZEFkanVzdGVkQW5nbGUiLCJwOCIsIm91dGVyU3RhcnRYIiwib3V0ZXJTdGFydFkiLCJvdXRlckVuZFgiLCJvdXRlckVuZFkiLCJzZXRTdHlsZSIsImxpbmVDYXAiLCJsaW5lSm9pbiIsInBhdGhWYXJzIiwicGFyYW1zU3RhcnQiLCJwYXJhbXNFbmQiLCJzZWdtZW50U3RhcnQiLCJzZWdtZW50RW5kIiwib3V0c2lkZSIsInBhdGhTZWdtZW50IiwibGluZU1ldGhvZCIsInN0ZXBwZWQiLCJnZXRMaW5lTWV0aG9kIiwiZmFzdFBhdGhTZWdtZW50IiwicHJldlgiLCJsYXN0WSIsImF2Z1giLCJjb3VudFgiLCJwb2ludEluZGV4IiwiZHJhd1giLCJ0cnVuY1giLCJfZ2V0U2VnbWVudE1ldGhvZCIsInVzZVBhdGgyRCIsIlBhdGgyRCIsIkxpbmVFbGVtZW50IiwiX3BhdGgiLCJfcG9pbnRzIiwiX3NlZ21lbnRzIiwiX3BvaW50c1VwZGF0ZWQiLCJzZWdtZW50T3B0aW9ucyIsImZpbmRTdGFydEFuZEVuZCIsImNoYXJ0Q29udGV4dCIsImJhc2VTdHlsZSIsImFkZFN0eWxlIiwic3QiLCJkaXIiLCJwMCIsInAwRGF0YUluZGV4IiwicDFEYXRhSW5kZXgiLCJkb1NwbGl0QnlTdHlsZXMiLCJzcGxpdEJ5U3R5bGVzIiwic29saWRTZWdtZW50cyIsIl9jb21wdXRlU2VnbWVudHMiLCJfaW50ZXJwb2xhdGUiLCJfZ2V0SW50ZXJwb2xhdGlvbk1ldGhvZCIsImludGVycG9sYXRlZCIsInNlZ21lbnRNZXRob2QiLCJwYXRoIiwic3Ryb2tlUGF0aFdpdGhDYWNoZSIsInN0cm9rZVBhdGhEaXJlY3QiLCJpblJhbmdlJDEiLCJoaXRSYWRpdXMiLCJnZXRCYXJCb3VuZHMiLCJiYXIiLCJoYWxmIiwic2tpcE9yTGltaXQiLCJza2lwWCIsInNraXBZIiwiYWRkTm9ybWFsUmVjdFBhdGgiLCJpbmZsYXRlUmVjdCIsInJlZlJlY3QiLCJBcmNFbGVtZW50IiwiZnVsbENpcmNsZXMiLCJjaGFydFgiLCJjaGFydFkiLCJyQWRqdXN0IiwiYmV0d2VlbkFuZ2xlcyIsIndpdGhpblJhZGl1cyIsImhhbGZBbmdsZSIsImhhbGZSYWRpdXMiLCJyYWRpdXNPZmZzZXQiLCJkcmF3QXJjIiwiaW5uZXIiLCJhbmdsZU1hcmdpbiIsImNsaXBBcmMiLCJCYXJFbGVtZW50Iiwib3V0ZXIiLCJtYXhXIiwibWF4SCIsInBhcnNlQm9yZGVyV2lkdGgiLCJtYXhSIiwiZW5hYmxlQm9yZGVyIiwicGFyc2VCb3JkZXJSYWRpdXMiLCJib3VuZGluZ1JlY3RzIiwiYWRkUmVjdFBhdGgiLCJtb3VzZVgiLCJtb3VzZVkiLCJpblhSYW5nZSIsImluWVJhbmdlIiwiUG9pbnRFbGVtZW50IiwiaG92ZXJSYWRpdXMiLCJCT1JERVJfQ09MT1JTIiwiQkFDS0dST1VORF9DT0xPUlMiLCJnZXRCb3JkZXJDb2xvciIsImdldEJhY2tncm91bmRDb2xvciIsImNvbnRhaW5zQ29sb3JzRGVmaW5pdGlvbnMiLCJwbHVnaW5fY29sb3JzIiwiZm9yY2VPdmVycmlkZSIsIl9hcmdzIiwiY2hhcnRPcHRpb25zIiwiY29sb3JpemVyIiwiY29sb3JpemVEb3VnaG51dERhdGFzZXQiLCJjb2xvcml6ZVBvbGFyQXJlYURhdGFzZXQiLCJjb2xvcml6ZURlZmF1bHREYXRhc2V0IiwiZ2V0Q29sb3JpemVyIiwiY2xlYW5EZWNpbWF0ZWREYXRhc2V0IiwiY2xlYW5EZWNpbWF0ZWREYXRhIiwicGx1Z2luX2RlY2ltYXRpb24iLCJhbGdvcml0aG0iLCJiZWZvcmVFbGVtZW50c1VwZGF0ZSIsInhBeGlzIiwiZGVjaW1hdGVkIiwiZ2V0U3RhcnRBbmRDb3VudE9mVmlzaWJsZVBvaW50c1NpbXBsaWZpZWQiLCJ0aHJlc2hvbGQiLCJzYW1wbGVzIiwiYnVja2V0V2lkdGgiLCJzYW1wbGVkSW5kZXgiLCJlbmRJbmRleCIsIm1heEFyZWFQb2ludCIsIm1heEFyZWEiLCJuZXh0QSIsImF2Z1kiLCJhdmdSYW5nZVN0YXJ0IiwiYXZnUmFuZ2VFbmQiLCJhdmdSYW5nZUxlbmd0aCIsInJhbmdlT2ZmcyIsInJhbmdlVG8iLCJwb2ludEF4IiwicG9pbnRBeSIsImx0dGJEZWNpbWF0aW9uIiwibWluSW5kZXgiLCJtYXhJbmRleCIsInN0YXJ0SW5kZXgiLCJ4TWluIiwiZHgiLCJsYXN0SW5kZXgiLCJpbnRlcm1lZGlhdGVJbmRleDEiLCJpbnRlcm1lZGlhdGVJbmRleDIiLCJtaW5NYXhEZWNpbWF0aW9uIiwiX2dldEJvdW5kcyIsIl9maW5kU2VnbWVudEVuZCIsIl9nZXRFZGdlIiwiX2NyZWF0ZUJvdW5kYXJ5TGluZSIsImJvdW5kYXJ5IiwibGluZVBvaW50cyIsIl9wb2ludHNGcm9tU2VnbWVudHMiLCJfc2hvdWxkQXBwbHlGaWxsIiwiX3Jlc29sdmVUYXJnZXQiLCJwcm9wYWdhdGUiLCJ2aXNpdGVkIiwiX2RlY29kZUZpbGwiLCJmaWxsT3B0aW9uIiwicGFyc2VGaWxsT3B0aW9uIiwiZmlyc3RDaCIsImRlY29kZVRhcmdldEluZGV4IiwiYWRkUG9pbnRzQmVsb3ciLCJzb3VyY2VQb2ludCIsImxpbmVzQmVsb3ciLCJwb3N0cG9uZWQiLCJmaW5kUG9pbnQiLCJ1bnNoaWZ0IiwicG9pbnRWYWx1ZSIsImZpcnN0VmFsdWUiLCJsYXN0VmFsdWUiLCJzaW1wbGVBcmMiLCJfZHJhd2ZpbGwiLCJnZXRMaW5lQnlJbmRleCIsInNvdXJjZVBvaW50cyIsImJlbG93IiwiZ2V0TGluZXNCZWxvdyIsIl9idWlsZFN0YWNrTGluZSIsIl9nZXRUYXJnZXRWYWx1ZSIsImNvbXB1dGVDaXJjdWxhckJvdW5kYXJ5IiwiX2dldFRhcmdldFBpeGVsIiwiY29tcHV0ZUxpbmVhckJvdW5kYXJ5IiwiY29tcHV0ZUJvdW5kYXJ5IiwibGluZU9wdHMiLCJhYm92ZSIsImNsaXBWZXJ0aWNhbCIsImRvRmlsbCIsImNsaXBZIiwibGluZUxvb3AiLCJ0cG9pbnRzIiwidGFyZ2V0U2VnbWVudHMiLCJ0Z3QiLCJzdWJCb3VuZHMiLCJmaWxsU291cmNlcyIsImZpbGxTb3VyY2UiLCJub3RTaGFwZSIsImNsaXBCb3VuZHMiLCJpbnRlcnBvbGF0ZWRMaW5lVG8iLCJ0YXJnZXRMb29wIiwiaW50ZXJwb2xhdGVkUG9pbnQiLCJhZnRlckRhdGFzZXRzVXBkYXRlIiwiJGZpbGxlciIsImJlZm9yZURyYXciLCJkcmF3VGltZSIsImJlZm9yZURhdGFzZXRzRHJhdyIsImJlZm9yZURhdGFzZXREcmF3IiwiZ2V0Qm94U2l6ZSIsImxhYmVsT3B0cyIsImJveEhlaWdodCIsImJveFdpZHRoIiwidXNlUG9pbnRTdHlsZSIsInBvaW50U3R5bGVXaWR0aCIsIml0ZW1IZWlnaHQiLCJMZWdlbmQiLCJfYWRkZWQiLCJsZWdlbmRIaXRCb3hlcyIsIl9ob3ZlcmVkSXRlbSIsImRvdWdobnV0TW9kZSIsImxlZ2VuZEl0ZW1zIiwiY29sdW1uU2l6ZXMiLCJsaW5lV2lkdGhzIiwiYnVpbGRMYWJlbHMiLCJsYWJlbEZvbnQiLCJfY29tcHV0ZVRpdGxlSGVpZ2h0IiwiX2ZpdFJvd3MiLCJfZml0Q29scyIsImhpdGJveGVzIiwidG90YWxIZWlnaHQiLCJyb3ciLCJfaXRlbUhlaWdodCIsImhlaWdodExpbWl0IiwidG90YWxXaWR0aCIsImN1cnJlbnRDb2xXaWR0aCIsImN1cnJlbnRDb2xIZWlnaHQiLCJjb2wiLCJsZWdlbmRJdGVtVGV4dCIsImNhbGN1bGF0ZUl0ZW1XaWR0aCIsImZvbnRMaW5lSGVpZ2h0IiwiY2FsY3VsYXRlTGVnZW5kSXRlbUhlaWdodCIsImNhbGN1bGF0ZUl0ZW1IZWlnaHQiLCJjYWxjdWxhdGVJdGVtU2l6ZSIsImFkanVzdEhpdEJveGVzIiwicnRsSGVscGVyIiwiaGl0Ym94IiwiX2RyYXciLCJkZWZhdWx0Q29sb3IiLCJoYWxmRm9udFNpemUiLCJjdXJzb3IiLCJ0ZXh0RGlyZWN0aW9uIiwibGluZURhc2giLCJkcmF3T3B0aW9ucyIsIlNRUlQyIiwieUJveFRvcCIsInhCb3hMZWZ0IiwiZHJhd0xlZ2VuZEJveCIsIl90ZXh0WCIsInRpdGxlRm9udCIsInRpdGxlUGFkZGluZyIsInRvcFBhZGRpbmdQbHVzSGFsZkZvbnRTaXplIiwiX2dldExlZ2VuZEl0ZW1BdCIsImhpdEJveCIsImxoIiwiaGFuZGxlRXZlbnQiLCJvbkxlYXZlIiwiaXNMaXN0ZW5lZCIsImhvdmVyZWRJdGVtIiwic2FtZUl0ZW0iLCJwbHVnaW5fbGVnZW5kIiwiX2VsZW1lbnQiLCJhZnRlckV2ZW50IiwiY2kiLCJ1c2VCb3JkZXJSYWRpdXMiLCJUaXRsZSIsIl9wYWRkaW5nIiwidGV4dFNpemUiLCJfZHJhd0FyZ3MiLCJmb250T3B0cyIsInBsdWdpbl90aXRsZSIsInRpdGxlQmxvY2siLCJjcmVhdGVUaXRsZSIsIldlYWtNYXAiLCJwbHVnaW5fc3VidGl0bGUiLCJwb3NpdGlvbmVycyIsImF2ZXJhZ2UiLCJldmVudFBvc2l0aW9uIiwibmVhcmVzdEVsZW1lbnQiLCJ0cCIsInB1c2hPckNvbmNhdCIsInRvUHVzaCIsInNwbGl0TmV3bGluZXMiLCJTdHJpbmciLCJjcmVhdGVUb29sdGlwSXRlbSIsImZvcm1hdHRlZFZhbHVlIiwiZ2V0VG9vbHRpcFNpemUiLCJ0b29sdGlwIiwiYm9keSIsImZvb3RlciIsImJvZHlGb250IiwiZm9vdGVyRm9udCIsInRpdGxlTGluZUNvdW50IiwiZm9vdGVyTGluZUNvdW50IiwiYm9keUxpbmVJdGVtQ291bnQiLCJjb21iaW5lZEJvZHlMZW5ndGgiLCJib2R5SXRlbSIsImJlZm9yZSIsImFmdGVyIiwiYmVmb3JlQm9keSIsImFmdGVyQm9keSIsInRpdGxlU3BhY2luZyIsInRpdGxlTWFyZ2luQm90dG9tIiwiZGlzcGxheUNvbG9ycyIsImJvZHlTcGFjaW5nIiwiZm9vdGVyTWFyZ2luVG9wIiwiZm9vdGVyU3BhY2luZyIsIndpZHRoUGFkZGluZyIsIm1heExpbmVXaWR0aCIsImRldGVybWluZVhBbGlnbiIsInlBbGlnbiIsImNoYXJ0V2lkdGgiLCJ4QWxpZ24iLCJjYXJldCIsImNhcmV0U2l6ZSIsImNhcmV0UGFkZGluZyIsImRvZXNOb3RGaXRXaXRoQWxpZ24iLCJkZXRlcm1pbmVBbGlnbm1lbnQiLCJkZXRlcm1pbmVZQWxpZ24iLCJnZXRCYWNrZ3JvdW5kUG9pbnQiLCJhbGlnbm1lbnQiLCJwYWRkaW5nQW5kU2l6ZSIsImFsaWduWCIsImFsaWduWSIsImdldEFsaWduZWRYIiwiZ2V0QmVmb3JlQWZ0ZXJCb2R5TGluZXMiLCJvdmVycmlkZUNhbGxiYWNrcyIsImRlZmF1bHRDYWxsYmFja3MiLCJiZWZvcmVUaXRsZSIsInRvb2x0aXBJdGVtcyIsImxhYmVsQ291bnQiLCJhZnRlclRpdGxlIiwiYmVmb3JlTGFiZWwiLCJ0b29sdGlwSXRlbSIsImxhYmVsQ29sb3IiLCJsYWJlbFRleHRDb2xvciIsImJvZHlDb2xvciIsImxhYmVsUG9pbnRTdHlsZSIsImFmdGVyTGFiZWwiLCJiZWZvcmVGb290ZXIiLCJhZnRlckZvb3RlciIsImludm9rZUNhbGxiYWNrV2l0aEZhbGxiYWNrIiwiVG9vbHRpcCIsIm9wYWNpdHkiLCJfZXZlbnRQb3NpdGlvbiIsIl9zaXplIiwiX2NhY2hlZEFuaW1hdGlvbnMiLCJfdG9vbHRpcEl0ZW1zIiwiZGF0YVBvaW50cyIsImNhcmV0WCIsImNhcmV0WSIsImxhYmVsQ29sb3JzIiwibGFiZWxQb2ludFN0eWxlcyIsImxhYmVsVGV4dENvbG9ycyIsImdldFRpdGxlIiwiZ2V0QmVmb3JlQm9keSIsImdldEJvZHkiLCJib2R5SXRlbXMiLCJzY29wZWQiLCJnZXRBZnRlckJvZHkiLCJnZXRGb290ZXIiLCJfY3JlYXRlSXRlbXMiLCJpdGVtU29ydCIsInBvc2l0aW9uQW5kU2l6ZSIsImJhY2tncm91bmRQb2ludCIsImV4dGVybmFsIiwiZHJhd0NhcmV0IiwidG9vbHRpcFBvaW50IiwiY2FyZXRQb3NpdGlvbiIsImdldENhcmV0UG9zaXRpb24iLCJ4MyIsInkzIiwicHRYIiwicHRZIiwidGl0bGVDb2xvciIsIl9kcmF3Q29sb3JCb3giLCJjb2xvclgiLCJydGxDb2xvclgiLCJ5T2ZmU2V0IiwiY29sb3JZIiwibXVsdGlLZXlCYWNrZ3JvdW5kIiwib3V0ZXJYIiwiaW5uZXJYIiwic3Ryb2tlUmVjdCIsImRyYXdCb2R5IiwiYm9keUFsaWduIiwiYm9keUxpbmVIZWlnaHQiLCJ4TGluZVBhZGRpbmciLCJmaWxsTGluZU9mVGV4dCIsImJvZHlBbGlnbkZvckNhbGN1bGF0aW9uIiwidGV4dENvbG9yIiwiZHJhd0Zvb3RlciIsImZvb3RlckFsaWduIiwiZm9vdGVyQ29sb3IiLCJ0b29sdGlwU2l6ZSIsInF1YWRyYXRpY0N1cnZlVG8iLCJfdXBkYXRlQW5pbWF0aW9uVGFyZ2V0IiwiYW5pbVgiLCJhbmltWSIsIl93aWxsUmVuZGVyIiwiaGFzVG9vbHRpcENvbnRlbnQiLCJnbG9iYWxBbHBoYSIsInBvc2l0aW9uQ2hhbmdlZCIsIl9wb3NpdGlvbkNoYW5nZWQiLCJfaWdub3JlUmVwbGF5RXZlbnRzIiwicGx1Z2luX3Rvb2x0aXAiLCJhZnRlckluaXQiLCJhZnRlckRyYXciLCJDb2xvcnMiLCJEZWNpbWF0aW9uIiwiRmlsbGVyIiwiU3ViVGl0bGUiLCJfZ2V0TGFiZWxGb3JWYWx1ZSIsInJlbGF0aXZlTGFiZWxTaXplIiwibWluU3BhY2luZyIsIkxpbmVhclNjYWxlQmFzZSIsIl9zdGFydFZhbHVlIiwiX2VuZFZhbHVlIiwiX3ZhbHVlUmFuZ2UiLCJoYW5kbGVUaWNrUmFuZ2VPcHRpb25zIiwic2V0TWluIiwic2V0TWF4IiwibWluU2lnbiIsIm1heFNpZ24iLCJnZXRUaWNrTGltaXQiLCJtYXhUaWNrcyIsInN0ZXBTaXplIiwiY29tcHV0ZVRpY2tMaW1pdCIsImdlbmVyYXRpb25PcHRpb25zIiwiZGF0YVJhbmdlIiwicHJlY2lzaW9uIiwibWF4RGlnaXRzIiwiaW5jbHVkZUJvdW5kcyIsInVuaXQiLCJtYXhTcGFjZXMiLCJybWluIiwicm1heCIsImNvdW50RGVmaW5lZCIsIm5pY2VNaW4iLCJuaWNlTWF4IiwibnVtU3BhY2VzIiwicm91bmRlZCIsImFsbW9zdFdob2xlIiwiZGVjaW1hbFBsYWNlcyIsImdlbmVyYXRlVGlja3MkMSIsIkxpbmVhclNjYWxlIiwibG9nMTBGbG9vciIsImNoYW5nZUV4cG9uZW50IiwiaXNNYWpvciIsInRpY2tWYWwiLCJzdGVwcyIsInJhbmdlRXhwIiwicmFuZ2VTdGVwIiwiTG9nYXJpdGhtaWNTY2FsZSIsIl96ZXJvIiwibWluRXhwIiwiZXhwIiwic3RhcnRFeHAiLCJsYXN0VGljayIsImdlbmVyYXRlVGlja3MiLCJnZXRUaWNrQmFja2Ryb3BIZWlnaHQiLCJtZWFzdXJlTGFiZWxTaXplIiwiZGV0ZXJtaW5lTGltaXRzIiwidXBkYXRlTGltaXRzIiwibGltaXRzIiwiaExpbWl0cyIsInZMaW1pdHMiLCJjcmVhdGVQb2ludExhYmVsSXRlbSIsIml0ZW1PcHRzIiwib3V0ZXJEaXN0YW5jZSIsImRyYXdpbmdBcmVhIiwiZXh0cmEiLCJhZGRpdGlvbmFsQW5nbGUiLCJwb2ludExhYmVsUG9zaXRpb24iLCJnZXRQb2ludFBvc2l0aW9uIiwieUZvckFuZ2xlIiwiZ2V0VGV4dEFsaWduRm9yQW5nbGUiLCJpc05vdE92ZXJsYXBwZWQiLCJkcmF3UG9pbnRMYWJlbEJveCIsImJhY2tkcm9wTGVmdCIsImJhY2tkcm9wVG9wIiwiYmFja2Ryb3BXaWR0aCIsImJhY2tkcm9wSGVpZ2h0IiwicGF0aFJhZGl1c0xpbmUiLCJSYWRpYWxMaW5lYXJTY2FsZSIsImFuaW1hdGUiLCJjZW50ZXJQb2ludExhYmVscyIsIl9wb2ludExhYmVscyIsIl9wb2ludExhYmVsSXRlbXMiLCJ2YWx1ZUNvdW50IiwicG9pbnRMYWJlbE9wdHMiLCJnZXRQb2ludExhYmVsQ29udGV4dCIsInBsRm9udCIsInNldENlbnRlclBvaW50IiwiYnVpbGRQb2ludExhYmVsSXRlbXMiLCJmaXRXaXRoUG9pbnRMYWJlbHMiLCJsZWZ0TW92ZW1lbnQiLCJyaWdodE1vdmVtZW50IiwidG9wTW92ZW1lbnQiLCJib3R0b21Nb3ZlbWVudCIsInNjYWxpbmdGYWN0b3IiLCJnZXRWYWx1ZUZvckRpc3RhbmNlRnJvbUNlbnRlciIsInNjYWxlZERpc3RhbmNlIiwicG9pbnRMYWJlbCIsImNyZWF0ZVBvaW50TGFiZWxDb250ZXh0IiwiZGlzdGFuY2VGcm9tQ2VudGVyIiwiZ2V0QmFzZVBvc2l0aW9uIiwiZ2V0UG9pbnRMYWJlbFBvc2l0aW9uIiwiZHJhd1BvaW50TGFiZWxzIiwiZ3JpZExpbmVPcHRzIiwiZHJhd1JhZGl1c0xpbmUiLCJJTlRFUlZBTFMiLCJtaWxsaXNlY29uZCIsImNvbW1vbiIsInNlY29uZCIsIm1pbnV0ZSIsImhvdXIiLCJ3ZWVrIiwibW9udGgiLCJxdWFydGVyIiwieWVhciIsIlVOSVRTIiwic29ydGVyIiwiYWRhcHRlciIsIl9hZGFwdGVyIiwicGFyc2VyIiwiaXNvV2Vla2RheSIsIl9wYXJzZU9wdHMiLCJkZXRlcm1pbmVVbml0Rm9yQXV0b1RpY2tzIiwibWluVW5pdCIsImNhcGFjaXR5IiwiaW50ZXJ2YWwiLCJNQVhfU0FGRV9JTlRFR0VSIiwiYWRkVGljayIsInRpbWUiLCJ0aW1lc3RhbXBzIiwidGlja3NGcm9tVGltZXN0YW1wcyIsIm1ham9yVW5pdCIsInNldE1ham9yVGlja3MiLCJUaW1lU2NhbGUiLCJkaXNwbGF5Rm9ybWF0cyIsIl91bml0IiwiX21ham9yVW5pdCIsIl9vZmZzZXRzIiwiX25vcm1hbGl6ZWQiLCJub3JtYWxpemVkIiwiX2FwcGx5Qm91bmRzIiwiX2dldExhYmVsQm91bmRzIiwiZ2V0TGFiZWxUaW1lc3RhbXBzIiwidGltZU9wdHMiLCJfZ2VuZXJhdGUiLCJfZmlsdGVyQmV0d2VlbiIsIl9nZXRMYWJlbENhcGFjaXR5IiwiZGV0ZXJtaW5lVW5pdEZvckZvcm1hdHRpbmciLCJkZXRlcm1pbmVNYWpvclVuaXQiLCJpbml0T2Zmc2V0cyIsIm9mZnNldEFmdGVyQXV0b3NraXAiLCJnZXREZWNpbWFsRm9yVmFsdWUiLCJoYXNXZWVrZGF5IiwiZ2V0RGF0YVRpbWVzdGFtcHMiLCJ0b29sdGlwRm9ybWF0IiwiZGF0ZXRpbWUiLCJmbXQiLCJfdGlja0Zvcm1hdEZ1bmN0aW9uIiwibWlub3JGb3JtYXQiLCJtYWpvckZvcm1hdCIsIm9mZnNldHMiLCJfZ2V0TGFiZWxTaXplIiwidGlja3NPcHRzIiwidGlja0xhYmVsV2lkdGgiLCJjb3NSb3RhdGlvbiIsInNpblJvdGF0aW9uIiwidGlja0ZvbnRTaXplIiwiZXhhbXBsZVRpbWUiLCJleGFtcGxlTGFiZWwiLCJwcmV2U291cmNlIiwibmV4dFNvdXJjZSIsInByZXZUYXJnZXQiLCJuZXh0VGFyZ2V0Iiwic3BhbiIsIkNhdGVnb3J5U2NhbGUiLCJfYWRkZWRMYWJlbHMiLCJhZGRlZCIsImFkZGVkTGFiZWxzIiwiYWRkSWZTdHJpbmciLCJsYXN0SW5kZXhPZiIsImZpbmRPckFkZExhYmVsIiwiVGltZVNlcmllc1NjYWxlIiwiX3RhYmxlIiwiX21pblBvcyIsIl90YWJsZVJhbmdlIiwiX2dldFRpbWVzdGFtcHNGb3JUYWJsZSIsImJ1aWxkTG9va3VwVGFibGUiLCJyZWdpc3RlcmFibGVzIiwiR3JhcGgiLCJ0b1BhcnNlIiwicGFyc2VkRGF0YSIsImNhY2hlZENoYXJ0IiwiQXBwIiwiaGVhZGVyIiwiZ3JhcGgiLCJkYXlzQmFyIiwiYXBpQ2FsbCIsImFzeW5jIiwicmVxdWVzdFdlYXRoZXIiLCJmZXRjaCIsImpzb24iLCJxdWVyeVdlYXRoZXJBUEkiLCJhcHAiXSwic291cmNlUm9vdCI6IiJ9