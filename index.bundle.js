/*! For license information please see index.bundle.js.LICENSE.txt */
(() => {
  "use strict";
  var t = {
      217: (t, e, i) => {
        i.d(e, { Z: () => r });
        var s = i(537),
          n = i.n(s),
          o = i(645),
          a = i.n(o)()(n());
        a.push([
          t.id,
          "@import url(https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;1,300;1,400;1,500;1,600&display=swap);",
        ]),
          a.push([
            t.id,
            ':root {\n  font-family: "Open Sans", sans-serif;\n}\n',
            "",
            {
              version: 3,
              sources: ["webpack://./src/css/font.css"],
              names: [],
              mappings: "AAEA;EACE,oCAAoC;AACtC",
              sourcesContent: [
                '@import url("https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;1,300;1,400;1,500;1,600&display=swap");\n\n:root {\n  font-family: "Open Sans", sans-serif;\n}\n',
              ],
              sourceRoot: "",
            },
          ]);
        const r = a;
      },
      830: (t, e, i) => {
        i.d(e, { Z: () => r });
        var s = i(537),
          n = i.n(s),
          o = i(645),
          a = i.n(o)()(n());
        a.push([
          t.id,
          "#appContainer {\n  border: 2px solid red;\n  border-radius: 10px;\n  display: flex;\n  flex-direction: column;\n  width: min(700px, 100%);\n  padding: 10px;\n  gap: 10px;\n}\n",
          "",
          {
            version: 3,
            sources: ["webpack://./src/css/modules/App.css"],
            names: [],
            mappings:
              "AAAA;EACE,qBAAqB;EACrB,mBAAmB;EACnB,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,aAAa;EACb,SAAS;AACX",
            sourcesContent: [
              "#appContainer {\n  border: 2px solid red;\n  border-radius: 10px;\n  display: flex;\n  flex-direction: column;\n  width: min(700px, 100%);\n  padding: 10px;\n  gap: 10px;\n}\n",
            ],
            sourceRoot: "",
          },
        ]);
        const r = a;
      },
      211: (t, e, i) => {
        i.d(e, { Z: () => h });
        var s = i(537),
          n = i.n(s),
          o = i(645),
          a = i.n(o),
          r = i(728),
          l = a()(n());
        l.i(r.Z),
          l.push([
            t.id,
            "#dayContainer {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: 1rem 1fr 1rem;\n  border: 2px solid grey;\n  padding: 5px;\n  border-radius: 10px;\n  gap: 5px;\n}\n\n#dayDay {\n  grid-row: 1;\n  grid-column: 1/-1;\n  text-align: center;\n}\n#dayIcon {\n  grid-row: 2;\n  grid-column: 1/-1;\n  align-self: center;\n  justify-self: center;\n  width: 100%;\n}\n#dayMax {\n  grid-row: 3;\n  grid-column: 1;\n  text-align: center;\n\n  font-size: 0.8rem;\n}\n#dayMin {\n  grid-row: 3;\n  grid-column: 2;\n  text-align: center;\n  font-size: 0.8rem;\n  color: var(--textMid);\n}\n",
            "",
            {
              version: 3,
              sources: ["webpack://./src/css/modules/Day.css"],
              names: [],
              mappings:
                "AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,iCAAiC;EACjC,sBAAsB;EACtB,YAAY;EACZ,mBAAmB;EACnB,QAAQ;AACV;;AAEA;EACE,WAAW;EACX,iBAAiB;EACjB,kBAAkB;AACpB;AACA;EACE,WAAW;EACX,iBAAiB;EACjB,kBAAkB;EAClB,oBAAoB;EACpB,WAAW;AACb;AACA;EACE,WAAW;EACX,cAAc;EACd,kBAAkB;;EAElB,iBAAiB;AACnB;AACA;EACE,WAAW;EACX,cAAc;EACd,kBAAkB;EAClB,iBAAiB;EACjB,qBAAqB;AACvB",
              sourcesContent: [
                '@import url("../variables.css");\n\n#dayContainer {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: 1rem 1fr 1rem;\n  border: 2px solid grey;\n  padding: 5px;\n  border-radius: 10px;\n  gap: 5px;\n}\n\n#dayDay {\n  grid-row: 1;\n  grid-column: 1/-1;\n  text-align: center;\n}\n#dayIcon {\n  grid-row: 2;\n  grid-column: 1/-1;\n  align-self: center;\n  justify-self: center;\n  width: 100%;\n}\n#dayMax {\n  grid-row: 3;\n  grid-column: 1;\n  text-align: center;\n\n  font-size: 0.8rem;\n}\n#dayMin {\n  grid-row: 3;\n  grid-column: 2;\n  text-align: center;\n  font-size: 0.8rem;\n  color: var(--textMid);\n}\n',
              ],
              sourceRoot: "",
            },
          ]);
        const h = l;
      },
      343: (t, e, i) => {
        i.d(e, { Z: () => r });
        var s = i(537),
          n = i.n(s),
          o = i(645),
          a = i.n(o)()(n());
        a.push([
          t.id,
          "#container {\n  display: flex;\n  gap: 10px;\n}\n",
          "",
          {
            version: 3,
            sources: ["webpack://./src/css/modules/DaysBar.css"],
            names: [],
            mappings: "AAAA;EACE,aAAa;EACb,SAAS;AACX",
            sourcesContent: [
              "#container {\n  display: flex;\n  gap: 10px;\n}\n",
            ],
            sourceRoot: "",
          },
        ]);
        const r = a;
      },
      27: (t, e, i) => {
        i.d(e, { Z: () => h });
        var s = i(537),
          n = i.n(s),
          o = i(645),
          a = i.n(o),
          r = i(728),
          l = a()(n());
        l.i(r.Z),
          l.push([
            t.id,
            "#headerContainer {\n  display: grid;\n  grid-template-columns: 5rem 5rem 1fr;\n}\n#headerIcon {\n  grid-column: 1;\n  grid-row: 1;\n  width: 100%;\n  align-self: center;\n  justify-self: center;\n}\n#headerTemperature {\n  grid-column: 2;\n  grid-row: 1;\n  font-size: 3rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n#headerHumidity {\n  grid-column: 1/3;\n  grid-row: 3;\n  font-size: 0.8rem;\n  color: var(--textMid);\n}\n#headerWind {\n  grid-column: 1/3;\n  grid-row: 4;\n  font-size: 0.8rem;\n  color: var(--textMid);\n}\n\n#headerChanceRain {\n  grid-column: 1/3;\n  grid-row: 2;\n  color: var(--textMid);\n  font-size: 0.8rem;\n}\n\n#headerDay {\n  grid-column: -1;\n  grid-row: 2;\n  text-align: end;\n}\n\n#headerCondition {\n  grid-column: -1;\n  grid-row: 3;\n  text-align: end;\n}\n",
            "",
            {
              version: 3,
              sources: ["webpack://./src/css/modules/Header.css"],
              names: [],
              mappings:
                "AAEA;EACE,aAAa;EACb,oCAAoC;AACtC;AACA;EACE,cAAc;EACd,WAAW;EACX,WAAW;EACX,kBAAkB;EAClB,oBAAoB;AACtB;AACA;EACE,cAAc;EACd,WAAW;EACX,eAAe;EACf,aAAa;EACb,mBAAmB;EACnB,uBAAuB;AACzB;AACA;EACE,gBAAgB;EAChB,WAAW;EACX,iBAAiB;EACjB,qBAAqB;AACvB;AACA;EACE,gBAAgB;EAChB,WAAW;EACX,iBAAiB;EACjB,qBAAqB;AACvB;;AAEA;EACE,gBAAgB;EAChB,WAAW;EACX,qBAAqB;EACrB,iBAAiB;AACnB;;AAEA;EACE,eAAe;EACf,WAAW;EACX,eAAe;AACjB;;AAEA;EACE,eAAe;EACf,WAAW;EACX,eAAe;AACjB",
              sourcesContent: [
                '@import url("../variables.css");\n\n#headerContainer {\n  display: grid;\n  grid-template-columns: 5rem 5rem 1fr;\n}\n#headerIcon {\n  grid-column: 1;\n  grid-row: 1;\n  width: 100%;\n  align-self: center;\n  justify-self: center;\n}\n#headerTemperature {\n  grid-column: 2;\n  grid-row: 1;\n  font-size: 3rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n#headerHumidity {\n  grid-column: 1/3;\n  grid-row: 3;\n  font-size: 0.8rem;\n  color: var(--textMid);\n}\n#headerWind {\n  grid-column: 1/3;\n  grid-row: 4;\n  font-size: 0.8rem;\n  color: var(--textMid);\n}\n\n#headerChanceRain {\n  grid-column: 1/3;\n  grid-row: 2;\n  color: var(--textMid);\n  font-size: 0.8rem;\n}\n\n#headerDay {\n  grid-column: -1;\n  grid-row: 2;\n  text-align: end;\n}\n\n#headerCondition {\n  grid-column: -1;\n  grid-row: 3;\n  text-align: end;\n}\n',
              ],
              sourceRoot: "",
            },
          ]);
        const h = l;
      },
      402: (t, e, i) => {
        i.d(e, { Z: () => h });
        var s = i(537),
          n = i.n(s),
          o = i(645),
          a = i.n(o),
          r = i(728),
          l = a()(n());
        l.i(r.Z),
          l.push([
            t.id,
            "body {\n  background: var(--bgDark);\n  color: var(--textLight);\n  min-height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n",
            "",
            {
              version: 3,
              sources: ["webpack://./src/css/style.css"],
              names: [],
              mappings:
                "AAEA;EACE,yBAAyB;EACzB,uBAAuB;EACvB,iBAAiB;EACjB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB",
              sourcesContent: [
                '@import url("./variables.css");\n\nbody {\n  background: var(--bgDark);\n  color: var(--textLight);\n  min-height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n',
              ],
              sourceRoot: "",
            },
          ]);
        const h = l;
      },
      728: (t, e, i) => {
        i.d(e, { Z: () => r });
        var s = i(537),
          n = i.n(s),
          o = i(645),
          a = i.n(o)()(n());
        a.push([
          t.id,
          ":root {\n  --bgDark: #202124;\n  --textDark: #70717a;\n  --textMid: #7f8089;\n  --textLight: #e8eaed;\n}\n",
          "",
          {
            version: 3,
            sources: ["webpack://./src/css/variables.css"],
            names: [],
            mappings:
              "AAAA;EACE,iBAAiB;EACjB,mBAAmB;EACnB,kBAAkB;EAClB,oBAAoB;AACtB",
            sourcesContent: [
              ":root {\n  --bgDark: #202124;\n  --textDark: #70717a;\n  --textMid: #7f8089;\n  --textLight: #e8eaed;\n}\n",
            ],
            sourceRoot: "",
          },
        ]);
        const r = a;
      },
      645: (t) => {
        t.exports = function (t) {
          var e = [];
          return (
            (e.toString = function () {
              return this.map(function (e) {
                var i = "",
                  s = void 0 !== e[5];
                return (
                  e[4] && (i += "@supports (".concat(e[4], ") {")),
                  e[2] && (i += "@media ".concat(e[2], " {")),
                  s &&
                    (i += "@layer".concat(
                      e[5].length > 0 ? " ".concat(e[5]) : "",
                      " {",
                    )),
                  (i += t(e)),
                  s && (i += "}"),
                  e[2] && (i += "}"),
                  e[4] && (i += "}"),
                  i
                );
              }).join("");
            }),
            (e.i = function (t, i, s, n, o) {
              "string" == typeof t && (t = [[null, t, void 0]]);
              var a = {};
              if (s)
                for (var r = 0; r < this.length; r++) {
                  var l = this[r][0];
                  null != l && (a[l] = !0);
                }
              for (var h = 0; h < t.length; h++) {
                var c = [].concat(t[h]);
                (s && a[c[0]]) ||
                  (void 0 !== o &&
                    (void 0 === c[5] ||
                      (c[1] = "@layer"
                        .concat(c[5].length > 0 ? " ".concat(c[5]) : "", " {")
                        .concat(c[1], "}")),
                    (c[5] = o)),
                  i &&
                    (c[2]
                      ? ((c[1] = "@media "
                          .concat(c[2], " {")
                          .concat(c[1], "}")),
                        (c[2] = i))
                      : (c[2] = i)),
                  n &&
                    (c[4]
                      ? ((c[1] = "@supports ("
                          .concat(c[4], ") {")
                          .concat(c[1], "}")),
                        (c[4] = n))
                      : (c[4] = "".concat(n))),
                  e.push(c));
              }
            }),
            e
          );
        };
      },
      537: (t) => {
        t.exports = function (t) {
          var e = t[1],
            i = t[3];
          if (!i) return e;
          if ("function" == typeof btoa) {
            var s = btoa(unescape(encodeURIComponent(JSON.stringify(i)))),
              n =
                "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(
                  s,
                ),
              o = "/*# ".concat(n, " */");
            return [e].concat([o]).join("\n");
          }
          return [e].join("\n");
        };
      },
      379: (t) => {
        var e = [];
        function i(t) {
          for (var i = -1, s = 0; s < e.length; s++)
            if (e[s].identifier === t) {
              i = s;
              break;
            }
          return i;
        }
        function s(t, s) {
          for (var o = {}, a = [], r = 0; r < t.length; r++) {
            var l = t[r],
              h = s.base ? l[0] + s.base : l[0],
              c = o[h] || 0,
              d = "".concat(h, " ").concat(c);
            o[h] = c + 1;
            var u = i(d),
              f = {
                css: l[1],
                media: l[2],
                sourceMap: l[3],
                supports: l[4],
                layer: l[5],
              };
            if (-1 !== u) e[u].references++, e[u].updater(f);
            else {
              var g = n(f, s);
              (s.byIndex = r),
                e.splice(r, 0, { identifier: d, updater: g, references: 1 });
            }
            a.push(d);
          }
          return a;
        }
        function n(t, e) {
          var i = e.domAPI(e);
          return (
            i.update(t),
            function (e) {
              if (e) {
                if (
                  e.css === t.css &&
                  e.media === t.media &&
                  e.sourceMap === t.sourceMap &&
                  e.supports === t.supports &&
                  e.layer === t.layer
                )
                  return;
                i.update((t = e));
              } else i.remove();
            }
          );
        }
        t.exports = function (t, n) {
          var o = s((t = t || []), (n = n || {}));
          return function (t) {
            t = t || [];
            for (var a = 0; a < o.length; a++) {
              var r = i(o[a]);
              e[r].references--;
            }
            for (var l = s(t, n), h = 0; h < o.length; h++) {
              var c = i(o[h]);
              0 === e[c].references && (e[c].updater(), e.splice(c, 1));
            }
            o = l;
          };
        };
      },
      569: (t) => {
        var e = {};
        t.exports = function (t, i) {
          var s = (function (t) {
            if (void 0 === e[t]) {
              var i = document.querySelector(t);
              if (
                window.HTMLIFrameElement &&
                i instanceof window.HTMLIFrameElement
              )
                try {
                  i = i.contentDocument.head;
                } catch (t) {
                  i = null;
                }
              e[t] = i;
            }
            return e[t];
          })(t);
          if (!s)
            throw new Error(
              "Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.",
            );
          s.appendChild(i);
        };
      },
      216: (t) => {
        t.exports = function (t) {
          var e = document.createElement("style");
          return t.setAttributes(e, t.attributes), t.insert(e, t.options), e;
        };
      },
      565: (t, e, i) => {
        t.exports = function (t) {
          var e = i.nc;
          e && t.setAttribute("nonce", e);
        };
      },
      795: (t) => {
        t.exports = function (t) {
          if ("undefined" == typeof document)
            return { update: function () {}, remove: function () {} };
          var e = t.insertStyleElement(t);
          return {
            update: function (i) {
              !(function (t, e, i) {
                var s = "";
                i.supports && (s += "@supports (".concat(i.supports, ") {")),
                  i.media && (s += "@media ".concat(i.media, " {"));
                var n = void 0 !== i.layer;
                n &&
                  (s += "@layer".concat(
                    i.layer.length > 0 ? " ".concat(i.layer) : "",
                    " {",
                  )),
                  (s += i.css),
                  n && (s += "}"),
                  i.media && (s += "}"),
                  i.supports && (s += "}");
                var o = i.sourceMap;
                o &&
                  "undefined" != typeof btoa &&
                  (s +=
                    "\n/*# sourceMappingURL=data:application/json;base64,".concat(
                      btoa(unescape(encodeURIComponent(JSON.stringify(o)))),
                      " */",
                    )),
                  e.styleTagTransform(s, t, e.options);
              })(e, t, i);
            },
            remove: function () {
              !(function (t) {
                if (null === t.parentNode) return !1;
                t.parentNode.removeChild(t);
              })(e);
            },
          };
        };
      },
      589: (t) => {
        t.exports = function (t, e) {
          if (e.styleSheet) e.styleSheet.cssText = t;
          else {
            for (; e.firstChild; ) e.removeChild(e.firstChild);
            e.appendChild(document.createTextNode(t));
          }
        };
      },
    },
    e = {};
  function i(s) {
    var n = e[s];
    if (void 0 !== n) return n.exports;
    var o = (e[s] = { id: s, exports: {} });
    return t[s](o, o.exports, i), o.exports;
  }
  (i.n = (t) => {
    var e = t && t.__esModule ? () => t.default : () => t;
    return i.d(e, { a: e }), e;
  }),
    (i.d = (t, e) => {
      for (var s in e)
        i.o(e, s) &&
          !i.o(t, s) &&
          Object.defineProperty(t, s, { enumerable: !0, get: e[s] });
    }),
    (i.o = (t, e) => Object.prototype.hasOwnProperty.call(t, e)),
    (i.nc = void 0),
    (() => {
      var t = i(379),
        e = i.n(t),
        s = i(795),
        n = i.n(s),
        o = i(569),
        a = i.n(o),
        r = i(565),
        l = i.n(r),
        h = i(216),
        c = i.n(h),
        d = i(589),
        u = i.n(d),
        f = i(217),
        g = {};
      (g.styleTagTransform = u()),
        (g.setAttributes = l()),
        (g.insert = a().bind(null, "head")),
        (g.domAPI = n()),
        (g.insertStyleElement = c()),
        e()(f.Z, g),
        f.Z && f.Z.locals && f.Z.locals;
      var p = i(402),
        m = {};
      (m.styleTagTransform = u()),
        (m.setAttributes = l()),
        (m.insert = a().bind(null, "head")),
        (m.domAPI = n()),
        (m.insertStyleElement = c()),
        e()(p.Z, m),
        p.Z && p.Z.locals && p.Z.locals;
      const b = {
        Pubsub: {},
        on(t, e) {
          (this.Pubsub[t] = this.Pubsub[t] || []), this.Pubsub[t].push(e);
        },
        off(t, e) {
          if (this.Pubsub[t])
            for (let i = 0; i < this.Pubsub[t].length; i++)
              if (this.Pubsub[t][i] === e) {
                this.Pubsub[t].splice(i, 1);
                break;
              }
        },
        emit(t, e) {
          this.Pubsub[t] &&
            this.Pubsub[t].forEach((t) => {
              t(e);
            });
        },
      };
      var x = i(27),
        y = {};
      (y.styleTagTransform = u()),
        (y.setAttributes = l()),
        (y.insert = a().bind(null, "head")),
        (y.domAPI = n()),
        (y.insertStyleElement = c()),
        e()(x.Z, y),
        x.Z && x.Z.locals && x.Z.locals;
      class _ {
        constructor() {
          (this.container = document.createElement("div")),
            (this.container.id = "headerContainer"),
            (this.imgIcon = document.createElement("img")),
            (this.imgIcon.id = "headerIcon"),
            (this.divTemperature = document.createElement("div")),
            (this.divTemperature.id = "headerTemperature"),
            (this.divHumidity = document.createElement("div")),
            (this.divHumidity.id = "headerHumidity"),
            (this.divWindSpeed = document.createElement("div")),
            (this.divWindSpeed.id = "headerWind"),
            (this.divChanceRain = document.createElement("div")),
            (this.divChanceRain.id = "headerChanceRain"),
            (this.divDay = document.createElement("div")),
            (this.divDay.id = "headerDay"),
            (this.divCondition = document.createElement("div")),
            (this.divCondition.id = "headerCondition"),
            this.container.append(
              this.imgIcon,
              this.divTemperature,
              this.divHumidity,
              this.divWindSpeed,
              this.divChanceRain,
              this.divDay,
              this.divCondition,
            ),
            this.bindEvents();
        }
        bindEvents() {
          b.on("renderHeader", (t) => {
            if (t.alreadyProcessed) this.render(t);
            else {
              const { icon: e } = t.forecast.forecastday[0].day.condition,
                { temp_c: i } = t.current,
                { humidity: s } = t.current,
                { wind_kph: n } = t.current,
                { daily_chance_of_rain: o } = t.forecast.forecastday[0].day,
                a = t.forecast.forecastday[0].day.condition.text,
                r = new Date(t.current.last_updated).toLocaleDateString(
                  "en-US",
                  { weekday: "long", timeZone: "UTC" },
                );
              this.render({
                icon: e,
                temp_c: i,
                humidity: s,
                wind_kph: n,
                daily_chance_of_rain: o,
                day: r,
                condition: a,
              });
            }
          });
        }
        render(t) {
          (this.imgIcon.src = t.icon),
            (this.divTemperature.innerText = `${t.temp_c}°`),
            (this.divHumidity.innerText = `Humidity: ${t.humidity}%`),
            (this.divWindSpeed.innerText = `Wind speed: ${t.wind_kph}`),
            (this.divChanceRain.innerText = `Chance of rain: ${t.daily_chance_of_rain}%`),
            (this.divDay.innerText = t.day),
            (this.divCondition.innerText = t.condition);
        }
      }
      var v = i(211),
        A = {};
      (A.styleTagTransform = u()),
        (A.setAttributes = l()),
        (A.insert = a().bind(null, "head")),
        (A.domAPI = n()),
        (A.insertStyleElement = c()),
        e()(v.Z, A),
        v.Z && v.Z.locals && v.Z.locals;
      class w {
        constructor() {
          let t =
            arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
          (this.isCurrentDay = t),
            (this.container = document.createElement("div")),
            (this.container.id = "dayContainer"),
            (this.imgIcon = document.createElement("img")),
            (this.imgIcon.id = "dayIcon"),
            (this.divDayOfWeek = document.createElement("div")),
            (this.divDayOfWeek.id = "dayDay"),
            (this.divTemperatureMAX = document.createElement("div")),
            (this.divTemperatureMAX.id = "dayMax"),
            (this.divTemperatureMIN = document.createElement("div")),
            (this.divTemperatureMIN.id = "dayMin"),
            this.container.append(
              this.imgIcon,
              this.divDayOfWeek,
              this.divTemperatureMAX,
              this.divTemperatureMIN,
            ),
            this.bindEvents();
        }
        render(t) {
          (this.cachedData = t),
            (this.imgIcon.src = t.day.condition.icon),
            (this.divDayOfWeek.innerText = new Date(
              1e3 * t.date_epoch,
            ).toLocaleDateString("en-US", {
              weekday: "short",
              timeZone: "UTC",
            })),
            (this.divTemperatureMAX.innerText = `${t.day.maxtemp_c}°`),
            (this.divTemperatureMIN.innerText = `${t.day.mintemp_c}°`);
        }
        bindEvents() {
          this.container.addEventListener("click", () => {
            if (this.isCurrentDay) b.emit("apiCall");
            else {
              const t = {
                alreadyProcessed: !0,
                icon: this.cachedData.day.condition.icon,
                temp_c: this.cachedData.day.avgtemp_c,
                humidity: this.cachedData.day.avghumidity,
                wind_kph: this.cachedData.day.maxwind_kph,
                daily_chance_of_rain: this.cachedData.day.daily_chance_of_rain,
                day: this.cachedData.date,
                condition: this.cachedData.day.condition.text,
              };
              b.emit("renderHeader", t);
            }
          });
        }
      }
      var M = i(343),
        k = {};
      (k.styleTagTransform = u()),
        (k.setAttributes = l()),
        (k.insert = a().bind(null, "head")),
        (k.domAPI = n()),
        (k.insertStyleElement = c()),
        e()(M.Z, k),
        M.Z && M.Z.locals && M.Z.locals;
      class C {
        #t;
        #e;
        constructor() {
          (this.container = document.createElement("div")),
            (this.container.id = "container"),
            (this.day1 = new w(!0)),
            (this.day2 = new w()),
            (this.day3 = new w()),
            this.container.append(
              this.day1.container,
              this.day2.container,
              this.day3.container,
            ),
            this.bindEvents();
        }
        bindEvents() {
          b.on("renderDays", (t) => {
            this.render(t);
          });
        }
        render(t) {
          this.day1.render(t.forecast.forecastday[0]),
            this.day2.render(t.forecast.forecastday[1]),
            this.day3.render(t.forecast.forecastday[2]);
        }
      }
      function S(t) {
        return (t + 0.5) | 0;
      }
      const D = (t, e, i) => Math.max(Math.min(t, i), e);
      function E(t) {
        return D(S(2.55 * t), 0, 255);
      }
      function P(t) {
        return D(S(255 * t), 0, 255);
      }
      function O(t) {
        return D(S(t / 2.55) / 100, 0, 1);
      }
      function T(t) {
        return D(S(100 * t), 0, 100);
      }
      const L = {
          0: 0,
          1: 1,
          2: 2,
          3: 3,
          4: 4,
          5: 5,
          6: 6,
          7: 7,
          8: 8,
          9: 9,
          A: 10,
          B: 11,
          C: 12,
          D: 13,
          E: 14,
          F: 15,
          a: 10,
          b: 11,
          c: 12,
          d: 13,
          e: 14,
          f: 15,
        },
        R = [..."0123456789ABCDEF"],
        B = (t) => R[15 & t],
        I = (t) => R[(240 & t) >> 4] + R[15 & t],
        z = (t) => (240 & t) >> 4 == (15 & t);
      const F =
        /^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;
      function W(t, e, i) {
        const s = e * Math.min(i, 1 - i),
          n = (e, n = (e + t / 30) % 12) =>
            i - s * Math.max(Math.min(n - 3, 9 - n, 1), -1);
        return [n(0), n(8), n(4)];
      }
      function V(t, e, i) {
        const s = (s, n = (s + t / 60) % 6) =>
          i - i * e * Math.max(Math.min(n, 4 - n, 1), 0);
        return [s(5), s(3), s(1)];
      }
      function N(t, e, i) {
        const s = W(t, 1, 0.5);
        let n;
        for (
          e + i > 1 && ((n = 1 / (e + i)), (e *= n), (i *= n)), n = 0;
          n < 3;
          n++
        )
          (s[n] *= 1 - e - i), (s[n] += e);
        return s;
      }
      function j(t) {
        const e = t.r / 255,
          i = t.g / 255,
          s = t.b / 255,
          n = Math.max(e, i, s),
          o = Math.min(e, i, s),
          a = (n + o) / 2;
        let r, l, h;
        return (
          n !== o &&
            ((h = n - o),
            (l = a > 0.5 ? h / (2 - n - o) : h / (n + o)),
            (r = (function (t, e, i, s, n) {
              return t === n
                ? (e - i) / s + (e < i ? 6 : 0)
                : e === n
                ? (i - t) / s + 2
                : (t - e) / s + 4;
            })(e, i, s, h, n)),
            (r = 60 * r + 0.5)),
          [0 | r, l || 0, a]
        );
      }
      function H(t, e, i, s) {
        return (Array.isArray(e) ? t(e[0], e[1], e[2]) : t(e, i, s)).map(P);
      }
      function $(t, e, i) {
        return H(W, t, e, i);
      }
      function Y(t) {
        return ((t % 360) + 360) % 360;
      }
      const U = {
          x: "dark",
          Z: "light",
          Y: "re",
          X: "blu",
          W: "gr",
          V: "medium",
          U: "slate",
          A: "ee",
          T: "ol",
          S: "or",
          B: "ra",
          C: "lateg",
          D: "ights",
          R: "in",
          Q: "turquois",
          E: "hi",
          P: "ro",
          O: "al",
          N: "le",
          M: "de",
          L: "yello",
          F: "en",
          K: "ch",
          G: "arks",
          H: "ea",
          I: "ightg",
          J: "wh",
        },
        X = {
          OiceXe: "f0f8ff",
          antiquewEte: "faebd7",
          aqua: "ffff",
          aquamarRe: "7fffd4",
          azuY: "f0ffff",
          beige: "f5f5dc",
          bisque: "ffe4c4",
          black: "0",
          blanKedOmond: "ffebcd",
          Xe: "ff",
          XeviTet: "8a2be2",
          bPwn: "a52a2a",
          burlywood: "deb887",
          caMtXe: "5f9ea0",
          KartYuse: "7fff00",
          KocTate: "d2691e",
          cSO: "ff7f50",
          cSnflowerXe: "6495ed",
          cSnsilk: "fff8dc",
          crimson: "dc143c",
          cyan: "ffff",
          xXe: "8b",
          xcyan: "8b8b",
          xgTMnPd: "b8860b",
          xWay: "a9a9a9",
          xgYF: "6400",
          xgYy: "a9a9a9",
          xkhaki: "bdb76b",
          xmagFta: "8b008b",
          xTivegYF: "556b2f",
          xSange: "ff8c00",
          xScEd: "9932cc",
          xYd: "8b0000",
          xsOmon: "e9967a",
          xsHgYF: "8fbc8f",
          xUXe: "483d8b",
          xUWay: "2f4f4f",
          xUgYy: "2f4f4f",
          xQe: "ced1",
          xviTet: "9400d3",
          dAppRk: "ff1493",
          dApskyXe: "bfff",
          dimWay: "696969",
          dimgYy: "696969",
          dodgerXe: "1e90ff",
          fiYbrick: "b22222",
          flSOwEte: "fffaf0",
          foYstWAn: "228b22",
          fuKsia: "ff00ff",
          gaRsbSo: "dcdcdc",
          ghostwEte: "f8f8ff",
          gTd: "ffd700",
          gTMnPd: "daa520",
          Way: "808080",
          gYF: "8000",
          gYFLw: "adff2f",
          gYy: "808080",
          honeyMw: "f0fff0",
          hotpRk: "ff69b4",
          RdianYd: "cd5c5c",
          Rdigo: "4b0082",
          ivSy: "fffff0",
          khaki: "f0e68c",
          lavFMr: "e6e6fa",
          lavFMrXsh: "fff0f5",
          lawngYF: "7cfc00",
          NmoncEffon: "fffacd",
          ZXe: "add8e6",
          ZcSO: "f08080",
          Zcyan: "e0ffff",
          ZgTMnPdLw: "fafad2",
          ZWay: "d3d3d3",
          ZgYF: "90ee90",
          ZgYy: "d3d3d3",
          ZpRk: "ffb6c1",
          ZsOmon: "ffa07a",
          ZsHgYF: "20b2aa",
          ZskyXe: "87cefa",
          ZUWay: "778899",
          ZUgYy: "778899",
          ZstAlXe: "b0c4de",
          ZLw: "ffffe0",
          lime: "ff00",
          limegYF: "32cd32",
          lRF: "faf0e6",
          magFta: "ff00ff",
          maPon: "800000",
          VaquamarRe: "66cdaa",
          VXe: "cd",
          VScEd: "ba55d3",
          VpurpN: "9370db",
          VsHgYF: "3cb371",
          VUXe: "7b68ee",
          VsprRggYF: "fa9a",
          VQe: "48d1cc",
          VviTetYd: "c71585",
          midnightXe: "191970",
          mRtcYam: "f5fffa",
          mistyPse: "ffe4e1",
          moccasR: "ffe4b5",
          navajowEte: "ffdead",
          navy: "80",
          Tdlace: "fdf5e6",
          Tive: "808000",
          TivedBb: "6b8e23",
          Sange: "ffa500",
          SangeYd: "ff4500",
          ScEd: "da70d6",
          pOegTMnPd: "eee8aa",
          pOegYF: "98fb98",
          pOeQe: "afeeee",
          pOeviTetYd: "db7093",
          papayawEp: "ffefd5",
          pHKpuff: "ffdab9",
          peru: "cd853f",
          pRk: "ffc0cb",
          plum: "dda0dd",
          powMrXe: "b0e0e6",
          purpN: "800080",
          YbeccapurpN: "663399",
          Yd: "ff0000",
          Psybrown: "bc8f8f",
          PyOXe: "4169e1",
          saddNbPwn: "8b4513",
          sOmon: "fa8072",
          sandybPwn: "f4a460",
          sHgYF: "2e8b57",
          sHshell: "fff5ee",
          siFna: "a0522d",
          silver: "c0c0c0",
          skyXe: "87ceeb",
          UXe: "6a5acd",
          UWay: "708090",
          UgYy: "708090",
          snow: "fffafa",
          sprRggYF: "ff7f",
          stAlXe: "4682b4",
          tan: "d2b48c",
          teO: "8080",
          tEstN: "d8bfd8",
          tomato: "ff6347",
          Qe: "40e0d0",
          viTet: "ee82ee",
          JHt: "f5deb3",
          wEte: "ffffff",
          wEtesmoke: "f5f5f5",
          Lw: "ffff00",
          LwgYF: "9acd32",
        };
      let Z;
      const q =
          /^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,
        K = (t) =>
          t <= 0.0031308 ? 12.92 * t : 1.055 * Math.pow(t, 1 / 2.4) - 0.055,
        G = (t) =>
          t <= 0.04045 ? t / 12.92 : Math.pow((t + 0.055) / 1.055, 2.4);
      function J(t, e, i) {
        if (t) {
          let s = j(t);
          (s[e] = Math.max(0, Math.min(s[e] + s[e] * i, 0 === e ? 360 : 1))),
            (s = $(s)),
            (t.r = s[0]),
            (t.g = s[1]),
            (t.b = s[2]);
        }
      }
      function Q(t, e) {
        return t ? Object.assign(e || {}, t) : t;
      }
      function tt(t) {
        var e = { r: 0, g: 0, b: 0, a: 255 };
        return (
          Array.isArray(t)
            ? t.length >= 3 &&
              ((e = { r: t[0], g: t[1], b: t[2], a: 255 }),
              t.length > 3 && (e.a = P(t[3])))
            : ((e = Q(t, { r: 0, g: 0, b: 0, a: 1 })).a = P(e.a)),
          e
        );
      }
      function et(t) {
        return "r" === t.charAt(0)
          ? (function (t) {
              const e = q.exec(t);
              let i,
                s,
                n,
                o = 255;
              if (e) {
                if (e[7] !== i) {
                  const t = +e[7];
                  o = e[8] ? E(t) : D(255 * t, 0, 255);
                }
                return (
                  (i = +e[1]),
                  (s = +e[3]),
                  (n = +e[5]),
                  (i = 255 & (e[2] ? E(i) : D(i, 0, 255))),
                  (s = 255 & (e[4] ? E(s) : D(s, 0, 255))),
                  (n = 255 & (e[6] ? E(n) : D(n, 0, 255))),
                  { r: i, g: s, b: n, a: o }
                );
              }
            })(t)
          : (function (t) {
              const e = F.exec(t);
              let i,
                s = 255;
              if (!e) return;
              e[5] !== i && (s = e[6] ? E(+e[5]) : P(+e[5]));
              const n = Y(+e[2]),
                o = +e[3] / 100,
                a = +e[4] / 100;
              return (
                (i =
                  "hwb" === e[1]
                    ? (function (t, e, i) {
                        return H(N, t, e, i);
                      })(n, o, a)
                    : "hsv" === e[1]
                    ? (function (t, e, i) {
                        return H(V, t, e, i);
                      })(n, o, a)
                    : $(n, o, a)),
                { r: i[0], g: i[1], b: i[2], a: s }
              );
            })(t);
      }
      class it {
        constructor(t) {
          if (t instanceof it) return t;
          const e = typeof t;
          let i;
          var s, n, o;
          "object" === e
            ? (i = tt(t))
            : "string" === e &&
              ((o = (s = t).length),
              "#" === s[0] &&
                (4 === o || 5 === o
                  ? (n = {
                      r: 255 & (17 * L[s[1]]),
                      g: 255 & (17 * L[s[2]]),
                      b: 255 & (17 * L[s[3]]),
                      a: 5 === o ? 17 * L[s[4]] : 255,
                    })
                  : (7 !== o && 9 !== o) ||
                    (n = {
                      r: (L[s[1]] << 4) | L[s[2]],
                      g: (L[s[3]] << 4) | L[s[4]],
                      b: (L[s[5]] << 4) | L[s[6]],
                      a: 9 === o ? (L[s[7]] << 4) | L[s[8]] : 255,
                    })),
              (i =
                n ||
                (function (t) {
                  Z ||
                    ((Z = (function () {
                      const t = {},
                        e = Object.keys(X),
                        i = Object.keys(U);
                      let s, n, o, a, r;
                      for (s = 0; s < e.length; s++) {
                        for (a = r = e[s], n = 0; n < i.length; n++)
                          (o = i[n]), (r = r.replace(o, U[o]));
                        (o = parseInt(X[a], 16)),
                          (t[r] = [(o >> 16) & 255, (o >> 8) & 255, 255 & o]);
                      }
                      return t;
                    })()),
                    (Z.transparent = [0, 0, 0, 0]));
                  const e = Z[t.toLowerCase()];
                  return (
                    e && {
                      r: e[0],
                      g: e[1],
                      b: e[2],
                      a: 4 === e.length ? e[3] : 255,
                    }
                  );
                })(t) ||
                et(t))),
            (this._rgb = i),
            (this._valid = !!i);
        }
        get valid() {
          return this._valid;
        }
        get rgb() {
          var t = Q(this._rgb);
          return t && (t.a = O(t.a)), t;
        }
        set rgb(t) {
          this._rgb = tt(t);
        }
        rgbString() {
          return this._valid
            ? (t = this._rgb) &&
                (t.a < 255
                  ? `rgba(${t.r}, ${t.g}, ${t.b}, ${O(t.a)})`
                  : `rgb(${t.r}, ${t.g}, ${t.b})`)
            : void 0;
          var t;
        }
        hexString() {
          return this._valid
            ? ((t = this._rgb),
              (e = ((t) => z(t.r) && z(t.g) && z(t.b) && z(t.a))(t) ? B : I),
              t
                ? "#" +
                  e(t.r) +
                  e(t.g) +
                  e(t.b) +
                  ((t, e) => (t < 255 ? e(t) : ""))(t.a, e)
                : void 0)
            : void 0;
          var t, e;
        }
        hslString() {
          return this._valid
            ? (function (t) {
                if (!t) return;
                const e = j(t),
                  i = e[0],
                  s = T(e[1]),
                  n = T(e[2]);
                return t.a < 255
                  ? `hsla(${i}, ${s}%, ${n}%, ${O(t.a)})`
                  : `hsl(${i}, ${s}%, ${n}%)`;
              })(this._rgb)
            : void 0;
        }
        mix(t, e) {
          if (t) {
            const i = this.rgb,
              s = t.rgb;
            let n;
            const o = e === n ? 0.5 : e,
              a = 2 * o - 1,
              r = i.a - s.a,
              l = ((a * r == -1 ? a : (a + r) / (1 + a * r)) + 1) / 2;
            (n = 1 - l),
              (i.r = 255 & (l * i.r + n * s.r + 0.5)),
              (i.g = 255 & (l * i.g + n * s.g + 0.5)),
              (i.b = 255 & (l * i.b + n * s.b + 0.5)),
              (i.a = o * i.a + (1 - o) * s.a),
              (this.rgb = i);
          }
          return this;
        }
        interpolate(t, e) {
          return (
            t &&
              (this._rgb = (function (t, e, i) {
                const s = G(O(t.r)),
                  n = G(O(t.g)),
                  o = G(O(t.b));
                return {
                  r: P(K(s + i * (G(O(e.r)) - s))),
                  g: P(K(n + i * (G(O(e.g)) - n))),
                  b: P(K(o + i * (G(O(e.b)) - o))),
                  a: t.a + i * (e.a - t.a),
                };
              })(this._rgb, t._rgb, e)),
            this
          );
        }
        clone() {
          return new it(this.rgb);
        }
        alpha(t) {
          return (this._rgb.a = P(t)), this;
        }
        clearer(t) {
          return (this._rgb.a *= 1 - t), this;
        }
        greyscale() {
          const t = this._rgb,
            e = S(0.3 * t.r + 0.59 * t.g + 0.11 * t.b);
          return (t.r = t.g = t.b = e), this;
        }
        opaquer(t) {
          return (this._rgb.a *= 1 + t), this;
        }
        negate() {
          const t = this._rgb;
          return (t.r = 255 - t.r), (t.g = 255 - t.g), (t.b = 255 - t.b), this;
        }
        lighten(t) {
          return J(this._rgb, 2, t), this;
        }
        darken(t) {
          return J(this._rgb, 2, -t), this;
        }
        saturate(t) {
          return J(this._rgb, 1, t), this;
        }
        desaturate(t) {
          return J(this._rgb, 1, -t), this;
        }
        rotate(t) {
          return (
            (function (t, e) {
              var i = j(t);
              (i[0] = Y(i[0] + e)),
                (i = $(i)),
                (t.r = i[0]),
                (t.g = i[1]),
                (t.b = i[2]);
            })(this._rgb, t),
            this
          );
        }
      }
      function st() {}
      const nt = (() => {
        let t = 0;
        return () => t++;
      })();
      function ot(t) {
        return null == t;
      }
      function at(t) {
        if (Array.isArray && Array.isArray(t)) return !0;
        const e = Object.prototype.toString.call(t);
        return "[object" === e.slice(0, 7) && "Array]" === e.slice(-6);
      }
      function rt(t) {
        return (
          null !== t && "[object Object]" === Object.prototype.toString.call(t)
        );
      }
      function lt(t) {
        return ("number" == typeof t || t instanceof Number) && isFinite(+t);
      }
      function ht(t, e) {
        return lt(t) ? t : e;
      }
      function ct(t, e) {
        return void 0 === t ? e : t;
      }
      const dt = (t, e) =>
        "string" == typeof t && t.endsWith("%")
          ? (parseFloat(t) / 100) * e
          : +t;
      function ut(t, e, i) {
        if (t && "function" == typeof t.call) return t.apply(i, e);
      }
      function ft(t, e, i, s) {
        let n, o, a;
        if (at(t))
          if (((o = t.length), s))
            for (n = o - 1; n >= 0; n--) e.call(i, t[n], n);
          else for (n = 0; n < o; n++) e.call(i, t[n], n);
        else if (rt(t))
          for (a = Object.keys(t), o = a.length, n = 0; n < o; n++)
            e.call(i, t[a[n]], a[n]);
      }
      function gt(t, e) {
        let i, s, n, o;
        if (!t || !e || t.length !== e.length) return !1;
        for (i = 0, s = t.length; i < s; ++i)
          if (
            ((n = t[i]),
            (o = e[i]),
            n.datasetIndex !== o.datasetIndex || n.index !== o.index)
          )
            return !1;
        return !0;
      }
      function pt(t) {
        if (at(t)) return t.map(pt);
        if (rt(t)) {
          const e = Object.create(null),
            i = Object.keys(t),
            s = i.length;
          let n = 0;
          for (; n < s; ++n) e[i[n]] = pt(t[i[n]]);
          return e;
        }
        return t;
      }
      function mt(t) {
        return -1 === ["__proto__", "prototype", "constructor"].indexOf(t);
      }
      function bt(t, e, i, s) {
        if (!mt(t)) return;
        const n = e[t],
          o = i[t];
        rt(n) && rt(o) ? xt(n, o, s) : (e[t] = pt(o));
      }
      function xt(t, e, i) {
        const s = at(e) ? e : [e],
          n = s.length;
        if (!rt(t)) return t;
        const o = (i = i || {}).merger || bt;
        let a;
        for (let e = 0; e < n; ++e) {
          if (((a = s[e]), !rt(a))) continue;
          const n = Object.keys(a);
          for (let e = 0, s = n.length; e < s; ++e) o(n[e], t, a, i);
        }
        return t;
      }
      function yt(t, e) {
        return xt(t, e, { merger: _t });
      }
      function _t(t, e, i) {
        if (!mt(t)) return;
        const s = e[t],
          n = i[t];
        rt(s) && rt(n)
          ? yt(s, n)
          : Object.prototype.hasOwnProperty.call(e, t) || (e[t] = pt(n));
      }
      const vt = { "": (t) => t, x: (t) => t.x, y: (t) => t.y };
      function At(t, e) {
        const i =
          vt[e] ||
          (vt[e] = (function (t) {
            const e = (function (t) {
              const e = t.split("."),
                i = [];
              let s = "";
              for (const t of e)
                (s += t),
                  s.endsWith("\\")
                    ? (s = s.slice(0, -1) + ".")
                    : (i.push(s), (s = ""));
              return i;
            })(t);
            return (t) => {
              for (const i of e) {
                if ("" === i) break;
                t = t && t[i];
              }
              return t;
            };
          })(e));
        return i(t);
      }
      function wt(t) {
        return t.charAt(0).toUpperCase() + t.slice(1);
      }
      const Mt = (t) => void 0 !== t,
        kt = (t) => "function" == typeof t,
        Ct = (t, e) => {
          if (t.size !== e.size) return !1;
          for (const i of t) if (!e.has(i)) return !1;
          return !0;
        },
        St = Math.PI,
        Dt = 2 * St,
        Et = Dt + St,
        Pt = Number.POSITIVE_INFINITY,
        Ot = St / 180,
        Tt = St / 2,
        Lt = St / 4,
        Rt = (2 * St) / 3,
        Bt = Math.log10,
        It = Math.sign;
      function zt(t, e, i) {
        return Math.abs(t - e) < i;
      }
      function Ft(t) {
        const e = Math.round(t);
        t = zt(t, e, t / 1e3) ? e : t;
        const i = Math.pow(10, Math.floor(Bt(t))),
          s = t / i;
        return (s <= 1 ? 1 : s <= 2 ? 2 : s <= 5 ? 5 : 10) * i;
      }
      function Wt(t) {
        return !isNaN(parseFloat(t)) && isFinite(t);
      }
      function Vt(t, e, i) {
        let s, n, o;
        for (s = 0, n = t.length; s < n; s++)
          (o = t[s][i]),
            isNaN(o) ||
              ((e.min = Math.min(e.min, o)), (e.max = Math.max(e.max, o)));
      }
      function Nt(t) {
        return t * (St / 180);
      }
      function jt(t) {
        return t * (180 / St);
      }
      function Ht(t) {
        if (!lt(t)) return;
        let e = 1,
          i = 0;
        for (; Math.round(t * e) / e !== t; ) (e *= 10), i++;
        return i;
      }
      function $t(t, e) {
        const i = e.x - t.x,
          s = e.y - t.y,
          n = Math.sqrt(i * i + s * s);
        let o = Math.atan2(s, i);
        return o < -0.5 * St && (o += Dt), { angle: o, distance: n };
      }
      function Yt(t, e) {
        return Math.sqrt(Math.pow(e.x - t.x, 2) + Math.pow(e.y - t.y, 2));
      }
      function Ut(t, e) {
        return ((t - e + Et) % Dt) - St;
      }
      function Xt(t) {
        return ((t % Dt) + Dt) % Dt;
      }
      function Zt(t, e, i, s) {
        const n = Xt(t),
          o = Xt(e),
          a = Xt(i),
          r = Xt(o - n),
          l = Xt(a - n),
          h = Xt(n - o),
          c = Xt(n - a);
        return n === o || n === a || (s && o === a) || (r > l && h < c);
      }
      function qt(t, e, i) {
        return Math.max(e, Math.min(i, t));
      }
      function Kt(t, e, i, s = 1e-6) {
        return t >= Math.min(e, i) - s && t <= Math.max(e, i) + s;
      }
      function Gt(t, e, i) {
        i = i || ((i) => t[i] < e);
        let s,
          n = t.length - 1,
          o = 0;
        for (; n - o > 1; ) (s = (o + n) >> 1), i(s) ? (o = s) : (n = s);
        return { lo: o, hi: n };
      }
      const Jt = (t, e, i, s) =>
          Gt(
            t,
            i,
            s
              ? (s) => {
                  const n = t[s][e];
                  return n < i || (n === i && t[s + 1][e] === i);
                }
              : (s) => t[s][e] < i,
          ),
        Qt = (t, e, i) => Gt(t, i, (s) => t[s][e] >= i),
        te = ["push", "pop", "shift", "splice", "unshift"];
      function ee(t, e) {
        const i = t._chartjs;
        if (!i) return;
        const s = i.listeners,
          n = s.indexOf(e);
        -1 !== n && s.splice(n, 1),
          s.length > 0 ||
            (te.forEach((e) => {
              delete t[e];
            }),
            delete t._chartjs);
      }
      function ie(t) {
        const e = new Set(t);
        return e.size === t.length ? t : Array.from(e);
      }
      const se =
        "undefined" == typeof window
          ? function (t) {
              return t();
            }
          : window.requestAnimationFrame;
      function ne(t, e) {
        let i = [],
          s = !1;
        return function (...n) {
          (i = n),
            s ||
              ((s = !0),
              se.call(window, () => {
                (s = !1), t.apply(e, i);
              }));
        };
      }
      const oe = (t) =>
          "start" === t ? "left" : "end" === t ? "right" : "center",
        ae = (t, e, i) => ("start" === t ? e : "end" === t ? i : (e + i) / 2);
      function re(t, e, i) {
        const s = e.length;
        let n = 0,
          o = s;
        if (t._sorted) {
          const { iScale: a, _parsed: r } = t,
            l = a.axis,
            {
              min: h,
              max: c,
              minDefined: d,
              maxDefined: u,
            } = a.getUserBounds();
          d &&
            (n = qt(
              Math.min(
                Jt(r, l, h).lo,
                i ? s : Jt(e, l, a.getPixelForValue(h)).lo,
              ),
              0,
              s - 1,
            )),
            (o = u
              ? qt(
                  Math.max(
                    Jt(r, a.axis, c, !0).hi + 1,
                    i ? 0 : Jt(e, l, a.getPixelForValue(c), !0).hi + 1,
                  ),
                  n,
                  s,
                ) - n
              : s - n);
        }
        return { start: n, count: o };
      }
      function le(t) {
        const { xScale: e, yScale: i, _scaleRanges: s } = t,
          n = { xmin: e.min, xmax: e.max, ymin: i.min, ymax: i.max };
        if (!s) return (t._scaleRanges = n), !0;
        const o =
          s.xmin !== e.min ||
          s.xmax !== e.max ||
          s.ymin !== i.min ||
          s.ymax !== i.max;
        return Object.assign(s, n), o;
      }
      const he = (t) => 0 === t || 1 === t,
        ce = (t, e, i) =>
          -Math.pow(2, 10 * (t -= 1)) * Math.sin(((t - e) * Dt) / i),
        de = (t, e, i) =>
          Math.pow(2, -10 * t) * Math.sin(((t - e) * Dt) / i) + 1,
        ue = {
          linear: (t) => t,
          easeInQuad: (t) => t * t,
          easeOutQuad: (t) => -t * (t - 2),
          easeInOutQuad: (t) =>
            (t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1),
          easeInCubic: (t) => t * t * t,
          easeOutCubic: (t) => (t -= 1) * t * t + 1,
          easeInOutCubic: (t) =>
            (t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2),
          easeInQuart: (t) => t * t * t * t,
          easeOutQuart: (t) => -((t -= 1) * t * t * t - 1),
          easeInOutQuart: (t) =>
            (t /= 0.5) < 1
              ? 0.5 * t * t * t * t
              : -0.5 * ((t -= 2) * t * t * t - 2),
          easeInQuint: (t) => t * t * t * t * t,
          easeOutQuint: (t) => (t -= 1) * t * t * t * t + 1,
          easeInOutQuint: (t) =>
            (t /= 0.5) < 1
              ? 0.5 * t * t * t * t * t
              : 0.5 * ((t -= 2) * t * t * t * t + 2),
          easeInSine: (t) => 1 - Math.cos(t * Tt),
          easeOutSine: (t) => Math.sin(t * Tt),
          easeInOutSine: (t) => -0.5 * (Math.cos(St * t) - 1),
          easeInExpo: (t) => (0 === t ? 0 : Math.pow(2, 10 * (t - 1))),
          easeOutExpo: (t) => (1 === t ? 1 : 1 - Math.pow(2, -10 * t)),
          easeInOutExpo: (t) =>
            he(t)
              ? t
              : t < 0.5
              ? 0.5 * Math.pow(2, 10 * (2 * t - 1))
              : 0.5 * (2 - Math.pow(2, -10 * (2 * t - 1))),
          easeInCirc: (t) => (t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1)),
          easeOutCirc: (t) => Math.sqrt(1 - (t -= 1) * t),
          easeInOutCirc: (t) =>
            (t /= 0.5) < 1
              ? -0.5 * (Math.sqrt(1 - t * t) - 1)
              : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),
          easeInElastic: (t) => (he(t) ? t : ce(t, 0.075, 0.3)),
          easeOutElastic: (t) => (he(t) ? t : de(t, 0.075, 0.3)),
          easeInOutElastic(t) {
            const e = 0.1125;
            return he(t)
              ? t
              : t < 0.5
              ? 0.5 * ce(2 * t, e, 0.45)
              : 0.5 + 0.5 * de(2 * t - 1, e, 0.45);
          },
          easeInBack(t) {
            const e = 1.70158;
            return t * t * ((e + 1) * t - e);
          },
          easeOutBack(t) {
            const e = 1.70158;
            return (t -= 1) * t * ((e + 1) * t + e) + 1;
          },
          easeInOutBack(t) {
            let e = 1.70158;
            return (t /= 0.5) < 1
              ? t * t * ((1 + (e *= 1.525)) * t - e) * 0.5
              : 0.5 * ((t -= 2) * t * ((1 + (e *= 1.525)) * t + e) + 2);
          },
          easeInBounce: (t) => 1 - ue.easeOutBounce(1 - t),
          easeOutBounce(t) {
            const e = 7.5625,
              i = 2.75;
            return t < 1 / i
              ? e * t * t
              : t < 2 / i
              ? e * (t -= 1.5 / i) * t + 0.75
              : t < 2.5 / i
              ? e * (t -= 2.25 / i) * t + 0.9375
              : e * (t -= 2.625 / i) * t + 0.984375;
          },
          easeInOutBounce: (t) =>
            t < 0.5
              ? 0.5 * ue.easeInBounce(2 * t)
              : 0.5 * ue.easeOutBounce(2 * t - 1) + 0.5,
        };
      function fe(t) {
        if (t && "object" == typeof t) {
          const e = t.toString();
          return (
            "[object CanvasPattern]" === e || "[object CanvasGradient]" === e
          );
        }
        return !1;
      }
      function ge(t) {
        return fe(t) ? t : new it(t);
      }
      function pe(t) {
        return fe(t) ? t : new it(t).saturate(0.5).darken(0.1).hexString();
      }
      const me = ["x", "y", "borderWidth", "radius", "tension"],
        be = ["color", "borderColor", "backgroundColor"],
        xe = new Map();
      function ye(t, e, i) {
        return (function (t, e) {
          e = e || {};
          const i = t + JSON.stringify(e);
          let s = xe.get(i);
          return s || ((s = new Intl.NumberFormat(t, e)), xe.set(i, s)), s;
        })(e, i).format(t);
      }
      const _e = {
        values: (t) => (at(t) ? t : "" + t),
        numeric(t, e, i) {
          if (0 === t) return "0";
          const s = this.chart.options.locale;
          let n,
            o = t;
          if (i.length > 1) {
            const e = Math.max(
              Math.abs(i[0].value),
              Math.abs(i[i.length - 1].value),
            );
            (e < 1e-4 || e > 1e15) && (n = "scientific"),
              (o = (function (t, e) {
                let i =
                  e.length > 3
                    ? e[2].value - e[1].value
                    : e[1].value - e[0].value;
                return (
                  Math.abs(i) >= 1 &&
                    t !== Math.floor(t) &&
                    (i = t - Math.floor(t)),
                  i
                );
              })(t, i));
          }
          const a = Bt(Math.abs(o)),
            r = isNaN(a) ? 1 : Math.max(Math.min(-1 * Math.floor(a), 20), 0),
            l = {
              notation: n,
              minimumFractionDigits: r,
              maximumFractionDigits: r,
            };
          return Object.assign(l, this.options.ticks.format), ye(t, s, l);
        },
        logarithmic(t, e, i) {
          if (0 === t) return "0";
          const s = i[e].significand || t / Math.pow(10, Math.floor(Bt(t)));
          return [1, 2, 3, 5, 10, 15].includes(s) || e > 0.8 * i.length
            ? _e.numeric.call(this, t, e, i)
            : "";
        },
      };
      var ve = { formatters: _e };
      const Ae = Object.create(null),
        we = Object.create(null);
      function Me(t, e) {
        if (!e) return t;
        const i = e.split(".");
        for (let e = 0, s = i.length; e < s; ++e) {
          const s = i[e];
          t = t[s] || (t[s] = Object.create(null));
        }
        return t;
      }
      function ke(t, e, i) {
        return "string" == typeof e ? xt(Me(t, e), i) : xt(Me(t, ""), e);
      }
      class Ce {
        constructor(t, e) {
          (this.animation = void 0),
            (this.backgroundColor = "rgba(0,0,0,0.1)"),
            (this.borderColor = "rgba(0,0,0,0.1)"),
            (this.color = "#666"),
            (this.datasets = {}),
            (this.devicePixelRatio = (t) =>
              t.chart.platform.getDevicePixelRatio()),
            (this.elements = {}),
            (this.events = [
              "mousemove",
              "mouseout",
              "click",
              "touchstart",
              "touchmove",
            ]),
            (this.font = {
              family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
              size: 12,
              style: "normal",
              lineHeight: 1.2,
              weight: null,
            }),
            (this.hover = {}),
            (this.hoverBackgroundColor = (t, e) => pe(e.backgroundColor)),
            (this.hoverBorderColor = (t, e) => pe(e.borderColor)),
            (this.hoverColor = (t, e) => pe(e.color)),
            (this.indexAxis = "x"),
            (this.interaction = {
              mode: "nearest",
              intersect: !0,
              includeInvisible: !1,
            }),
            (this.maintainAspectRatio = !0),
            (this.onHover = null),
            (this.onClick = null),
            (this.parsing = !0),
            (this.plugins = {}),
            (this.responsive = !0),
            (this.scale = void 0),
            (this.scales = {}),
            (this.showLine = !0),
            (this.drawActiveElementsOnTop = !0),
            this.describe(t),
            this.apply(e);
        }
        set(t, e) {
          return ke(this, t, e);
        }
        get(t) {
          return Me(this, t);
        }
        describe(t, e) {
          return ke(we, t, e);
        }
        override(t, e) {
          return ke(Ae, t, e);
        }
        route(t, e, i, s) {
          const n = Me(this, t),
            o = Me(this, i),
            a = "_" + e;
          Object.defineProperties(n, {
            [a]: { value: n[e], writable: !0 },
            [e]: {
              enumerable: !0,
              get() {
                const t = this[a],
                  e = o[s];
                return rt(t) ? Object.assign({}, e, t) : ct(t, e);
              },
              set(t) {
                this[a] = t;
              },
            },
          });
        }
        apply(t) {
          t.forEach((t) => t(this));
        }
      }
      var Se = new Ce(
        {
          _scriptable: (t) => !t.startsWith("on"),
          _indexable: (t) => "events" !== t,
          hover: { _fallback: "interaction" },
          interaction: { _scriptable: !1, _indexable: !1 },
        },
        [
          function (t) {
            t.set("animation", {
              delay: void 0,
              duration: 1e3,
              easing: "easeOutQuart",
              fn: void 0,
              from: void 0,
              loop: void 0,
              to: void 0,
              type: void 0,
            }),
              t.describe("animation", {
                _fallback: !1,
                _indexable: !1,
                _scriptable: (t) =>
                  "onProgress" !== t && "onComplete" !== t && "fn" !== t,
              }),
              t.set("animations", {
                colors: { type: "color", properties: be },
                numbers: { type: "number", properties: me },
              }),
              t.describe("animations", { _fallback: "animation" }),
              t.set("transitions", {
                active: { animation: { duration: 400 } },
                resize: { animation: { duration: 0 } },
                show: {
                  animations: {
                    colors: { from: "transparent" },
                    visible: { type: "boolean", duration: 0 },
                  },
                },
                hide: {
                  animations: {
                    colors: { to: "transparent" },
                    visible: {
                      type: "boolean",
                      easing: "linear",
                      fn: (t) => 0 | t,
                    },
                  },
                },
              });
          },
          function (t) {
            t.set("layout", {
              autoPadding: !0,
              padding: { top: 0, right: 0, bottom: 0, left: 0 },
            });
          },
          function (t) {
            t.set("scale", {
              display: !0,
              offset: !1,
              reverse: !1,
              beginAtZero: !1,
              bounds: "ticks",
              grace: 0,
              grid: {
                display: !0,
                lineWidth: 1,
                drawOnChartArea: !0,
                drawTicks: !0,
                tickLength: 8,
                tickWidth: (t, e) => e.lineWidth,
                tickColor: (t, e) => e.color,
                offset: !1,
              },
              border: { display: !0, dash: [], dashOffset: 0, width: 1 },
              title: { display: !1, text: "", padding: { top: 4, bottom: 4 } },
              ticks: {
                minRotation: 0,
                maxRotation: 50,
                mirror: !1,
                textStrokeWidth: 0,
                textStrokeColor: "",
                padding: 3,
                display: !0,
                autoSkip: !0,
                autoSkipPadding: 3,
                labelOffset: 0,
                callback: ve.formatters.values,
                minor: {},
                major: {},
                align: "center",
                crossAlign: "near",
                showLabelBackdrop: !1,
                backdropColor: "rgba(255, 255, 255, 0.75)",
                backdropPadding: 2,
              },
            }),
              t.route("scale.ticks", "color", "", "color"),
              t.route("scale.grid", "color", "", "borderColor"),
              t.route("scale.border", "color", "", "borderColor"),
              t.route("scale.title", "color", "", "color"),
              t.describe("scale", {
                _fallback: !1,
                _scriptable: (t) =>
                  !t.startsWith("before") &&
                  !t.startsWith("after") &&
                  "callback" !== t &&
                  "parser" !== t,
                _indexable: (t) =>
                  "borderDash" !== t && "tickBorderDash" !== t && "dash" !== t,
              }),
              t.describe("scales", { _fallback: "scale" }),
              t.describe("scale.ticks", {
                _scriptable: (t) => "backdropPadding" !== t && "callback" !== t,
                _indexable: (t) => "backdropPadding" !== t,
              });
          },
        ],
      );
      function De(t, e, i, s, n) {
        let o = e[n];
        return (
          o || ((o = e[n] = t.measureText(n).width), i.push(n)),
          o > s && (s = o),
          s
        );
      }
      function Ee(t, e, i, s) {
        let n = ((s = s || {}).data = s.data || {}),
          o = (s.garbageCollect = s.garbageCollect || []);
        s.font !== e &&
          ((n = s.data = {}), (o = s.garbageCollect = []), (s.font = e)),
          t.save(),
          (t.font = e);
        let a = 0;
        const r = i.length;
        let l, h, c, d, u;
        for (l = 0; l < r; l++)
          if (((d = i[l]), null == d || at(d))) {
            if (at(d))
              for (h = 0, c = d.length; h < c; h++)
                (u = d[h]), null == u || at(u) || (a = De(t, n, o, a, u));
          } else a = De(t, n, o, a, d);
        t.restore();
        const f = o.length / 2;
        if (f > i.length) {
          for (l = 0; l < f; l++) delete n[o[l]];
          o.splice(0, f);
        }
        return a;
      }
      function Pe(t, e, i) {
        const s = t.currentDevicePixelRatio,
          n = 0 !== i ? Math.max(i / 2, 0.5) : 0;
        return Math.round((e - n) * s) / s + n;
      }
      function Oe(t, e) {
        (e = e || t.getContext("2d")).save(),
          e.resetTransform(),
          e.clearRect(0, 0, t.width, t.height),
          e.restore();
      }
      function Te(t, e, i, s) {
        Le(t, e, i, s, null);
      }
      function Le(t, e, i, s, n) {
        let o, a, r, l, h, c, d, u;
        const f = e.pointStyle,
          g = e.rotation,
          p = e.radius;
        let m = (g || 0) * Ot;
        if (
          f &&
          "object" == typeof f &&
          ((o = f.toString()),
          "[object HTMLImageElement]" === o ||
            "[object HTMLCanvasElement]" === o)
        )
          return (
            t.save(),
            t.translate(i, s),
            t.rotate(m),
            t.drawImage(f, -f.width / 2, -f.height / 2, f.width, f.height),
            void t.restore()
          );
        if (!(isNaN(p) || p <= 0)) {
          switch ((t.beginPath(), f)) {
            default:
              n ? t.ellipse(i, s, n / 2, p, 0, 0, Dt) : t.arc(i, s, p, 0, Dt),
                t.closePath();
              break;
            case "triangle":
              (c = n ? n / 2 : p),
                t.moveTo(i + Math.sin(m) * c, s - Math.cos(m) * p),
                (m += Rt),
                t.lineTo(i + Math.sin(m) * c, s - Math.cos(m) * p),
                (m += Rt),
                t.lineTo(i + Math.sin(m) * c, s - Math.cos(m) * p),
                t.closePath();
              break;
            case "rectRounded":
              (h = 0.516 * p),
                (l = p - h),
                (a = Math.cos(m + Lt) * l),
                (d = Math.cos(m + Lt) * (n ? n / 2 - h : l)),
                (r = Math.sin(m + Lt) * l),
                (u = Math.sin(m + Lt) * (n ? n / 2 - h : l)),
                t.arc(i - d, s - r, h, m - St, m - Tt),
                t.arc(i + u, s - a, h, m - Tt, m),
                t.arc(i + d, s + r, h, m, m + Tt),
                t.arc(i - u, s + a, h, m + Tt, m + St),
                t.closePath();
              break;
            case "rect":
              if (!g) {
                (l = Math.SQRT1_2 * p),
                  (c = n ? n / 2 : l),
                  t.rect(i - c, s - l, 2 * c, 2 * l);
                break;
              }
              m += Lt;
            case "rectRot":
              (d = Math.cos(m) * (n ? n / 2 : p)),
                (a = Math.cos(m) * p),
                (r = Math.sin(m) * p),
                (u = Math.sin(m) * (n ? n / 2 : p)),
                t.moveTo(i - d, s - r),
                t.lineTo(i + u, s - a),
                t.lineTo(i + d, s + r),
                t.lineTo(i - u, s + a),
                t.closePath();
              break;
            case "crossRot":
              m += Lt;
            case "cross":
              (d = Math.cos(m) * (n ? n / 2 : p)),
                (a = Math.cos(m) * p),
                (r = Math.sin(m) * p),
                (u = Math.sin(m) * (n ? n / 2 : p)),
                t.moveTo(i - d, s - r),
                t.lineTo(i + d, s + r),
                t.moveTo(i + u, s - a),
                t.lineTo(i - u, s + a);
              break;
            case "star":
              (d = Math.cos(m) * (n ? n / 2 : p)),
                (a = Math.cos(m) * p),
                (r = Math.sin(m) * p),
                (u = Math.sin(m) * (n ? n / 2 : p)),
                t.moveTo(i - d, s - r),
                t.lineTo(i + d, s + r),
                t.moveTo(i + u, s - a),
                t.lineTo(i - u, s + a),
                (m += Lt),
                (d = Math.cos(m) * (n ? n / 2 : p)),
                (a = Math.cos(m) * p),
                (r = Math.sin(m) * p),
                (u = Math.sin(m) * (n ? n / 2 : p)),
                t.moveTo(i - d, s - r),
                t.lineTo(i + d, s + r),
                t.moveTo(i + u, s - a),
                t.lineTo(i - u, s + a);
              break;
            case "line":
              (a = n ? n / 2 : Math.cos(m) * p),
                (r = Math.sin(m) * p),
                t.moveTo(i - a, s - r),
                t.lineTo(i + a, s + r);
              break;
            case "dash":
              t.moveTo(i, s),
                t.lineTo(
                  i + Math.cos(m) * (n ? n / 2 : p),
                  s + Math.sin(m) * p,
                );
              break;
            case !1:
              t.closePath();
          }
          t.fill(), e.borderWidth > 0 && t.stroke();
        }
      }
      function Re(t, e, i) {
        return (
          (i = i || 0.5),
          !e ||
            (t &&
              t.x > e.left - i &&
              t.x < e.right + i &&
              t.y > e.top - i &&
              t.y < e.bottom + i)
        );
      }
      function Be(t, e) {
        t.save(),
          t.beginPath(),
          t.rect(e.left, e.top, e.right - e.left, e.bottom - e.top),
          t.clip();
      }
      function Ie(t) {
        t.restore();
      }
      function ze(t, e, i, s, n) {
        if (!e) return t.lineTo(i.x, i.y);
        if ("middle" === n) {
          const s = (e.x + i.x) / 2;
          t.lineTo(s, e.y), t.lineTo(s, i.y);
        } else ("after" === n) != !!s ? t.lineTo(e.x, i.y) : t.lineTo(i.x, e.y);
        t.lineTo(i.x, i.y);
      }
      function Fe(t, e, i, s) {
        if (!e) return t.lineTo(i.x, i.y);
        t.bezierCurveTo(
          s ? e.cp1x : e.cp2x,
          s ? e.cp1y : e.cp2y,
          s ? i.cp2x : i.cp1x,
          s ? i.cp2y : i.cp1y,
          i.x,
          i.y,
        );
      }
      function We(t, e, i, s, n) {
        if (n.strikethrough || n.underline) {
          const o = t.measureText(s),
            a = e - o.actualBoundingBoxLeft,
            r = e + o.actualBoundingBoxRight,
            l = i - o.actualBoundingBoxAscent,
            h = i + o.actualBoundingBoxDescent,
            c = n.strikethrough ? (l + h) / 2 : h;
          (t.strokeStyle = t.fillStyle),
            t.beginPath(),
            (t.lineWidth = n.decorationWidth || 2),
            t.moveTo(a, c),
            t.lineTo(r, c),
            t.stroke();
        }
      }
      function Ve(t, e) {
        const i = t.fillStyle;
        (t.fillStyle = e.color),
          t.fillRect(e.left, e.top, e.width, e.height),
          (t.fillStyle = i);
      }
      function Ne(t, e, i, s, n, o = {}) {
        const a = at(e) ? e : [e],
          r = o.strokeWidth > 0 && "" !== o.strokeColor;
        let l, h;
        for (
          t.save(),
            t.font = n.string,
            (function (t, e) {
              e.translation && t.translate(e.translation[0], e.translation[1]),
                ot(e.rotation) || t.rotate(e.rotation),
                e.color && (t.fillStyle = e.color),
                e.textAlign && (t.textAlign = e.textAlign),
                e.textBaseline && (t.textBaseline = e.textBaseline);
            })(t, o),
            l = 0;
          l < a.length;
          ++l
        )
          (h = a[l]),
            o.backdrop && Ve(t, o.backdrop),
            r &&
              (o.strokeColor && (t.strokeStyle = o.strokeColor),
              ot(o.strokeWidth) || (t.lineWidth = o.strokeWidth),
              t.strokeText(h, i, s, o.maxWidth)),
            t.fillText(h, i, s, o.maxWidth),
            We(t, i, s, h, o),
            (s += Number(n.lineHeight));
        t.restore();
      }
      function je(t, e) {
        const { x: i, y: s, w: n, h: o, radius: a } = e;
        t.arc(i + a.topLeft, s + a.topLeft, a.topLeft, -Tt, St, !0),
          t.lineTo(i, s + o - a.bottomLeft),
          t.arc(
            i + a.bottomLeft,
            s + o - a.bottomLeft,
            a.bottomLeft,
            St,
            Tt,
            !0,
          ),
          t.lineTo(i + n - a.bottomRight, s + o),
          t.arc(
            i + n - a.bottomRight,
            s + o - a.bottomRight,
            a.bottomRight,
            Tt,
            0,
            !0,
          ),
          t.lineTo(i + n, s + a.topRight),
          t.arc(i + n - a.topRight, s + a.topRight, a.topRight, 0, -Tt, !0),
          t.lineTo(i + a.topLeft, s);
      }
      const He = /^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/,
        $e =
          /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;
      function Ye(t, e) {
        const i = ("" + t).match(He);
        if (!i || "normal" === i[1]) return 1.2 * e;
        switch (((t = +i[2]), i[3])) {
          case "px":
            return t;
          case "%":
            t /= 100;
        }
        return e * t;
      }
      const Ue = (t) => +t || 0;
      function Xe(t, e) {
        const i = {},
          s = rt(e),
          n = s ? Object.keys(e) : e,
          o = rt(t) ? (s ? (i) => ct(t[i], t[e[i]]) : (e) => t[e]) : () => t;
        for (const t of n) i[t] = Ue(o(t));
        return i;
      }
      function Ze(t) {
        return Xe(t, { top: "y", right: "x", bottom: "y", left: "x" });
      }
      function qe(t) {
        return Xe(t, ["topLeft", "topRight", "bottomLeft", "bottomRight"]);
      }
      function Ke(t) {
        const e = Ze(t);
        return (e.width = e.left + e.right), (e.height = e.top + e.bottom), e;
      }
      function Ge(t, e) {
        (t = t || {}), (e = e || Se.font);
        let i = ct(t.size, e.size);
        "string" == typeof i && (i = parseInt(i, 10));
        let s = ct(t.style, e.style);
        s &&
          !("" + s).match($e) &&
          (console.warn('Invalid font style specified: "' + s + '"'),
          (s = void 0));
        const n = {
          family: ct(t.family, e.family),
          lineHeight: Ye(ct(t.lineHeight, e.lineHeight), i),
          size: i,
          style: s,
          weight: ct(t.weight, e.weight),
          string: "",
        };
        return (
          (n.string = (function (t) {
            return !t || ot(t.size) || ot(t.family)
              ? null
              : (t.style ? t.style + " " : "") +
                  (t.weight ? t.weight + " " : "") +
                  t.size +
                  "px " +
                  t.family;
          })(n)),
          n
        );
      }
      function Je(t, e, i, s) {
        let n,
          o,
          a,
          r = !0;
        for (n = 0, o = t.length; n < o; ++n)
          if (
            ((a = t[n]),
            void 0 !== a &&
              (void 0 !== e && "function" == typeof a && ((a = a(e)), (r = !1)),
              void 0 !== i && at(a) && ((a = a[i % a.length]), (r = !1)),
              void 0 !== a))
          )
            return s && !r && (s.cacheable = !1), a;
      }
      function Qe(t, e) {
        return Object.assign(Object.create(t), e);
      }
      function ti(t, e = [""], i, s, n = () => t[0]) {
        const o = i || t;
        void 0 === s && (s = di("_fallback", t));
        const a = {
          [Symbol.toStringTag]: "Object",
          _cacheable: !0,
          _scopes: t,
          _rootScopes: o,
          _fallback: s,
          _getTarget: n,
          override: (i) => ti([i, ...t], e, o, s),
        };
        return new Proxy(a, {
          deleteProperty: (e, i) => (
            delete e[i], delete e._keys, delete t[0][i], !0
          ),
          get: (i, s) =>
            oi(i, s, () =>
              (function (t, e, i, s) {
                let n;
                for (const o of e)
                  if (((n = di(si(o, t), i)), void 0 !== n))
                    return ni(t, n) ? hi(i, s, t, n) : n;
              })(s, e, t, i),
            ),
          getOwnPropertyDescriptor: (t, e) =>
            Reflect.getOwnPropertyDescriptor(t._scopes[0], e),
          getPrototypeOf: () => Reflect.getPrototypeOf(t[0]),
          has: (t, e) => ui(t).includes(e),
          ownKeys: (t) => ui(t),
          set(t, e, i) {
            const s = t._storage || (t._storage = n());
            return (t[e] = s[e] = i), delete t._keys, !0;
          },
        });
      }
      function ei(t, e, i, s) {
        const n = {
          _cacheable: !1,
          _proxy: t,
          _context: e,
          _subProxy: i,
          _stack: new Set(),
          _descriptors: ii(t, s),
          setContext: (e) => ei(t, e, i, s),
          override: (n) => ei(t.override(n), e, i, s),
        };
        return new Proxy(n, {
          deleteProperty: (e, i) => (delete e[i], delete t[i], !0),
          get: (t, e, i) =>
            oi(t, e, () =>
              (function (t, e, i) {
                const {
                  _proxy: s,
                  _context: n,
                  _subProxy: o,
                  _descriptors: a,
                } = t;
                let r = s[e];
                return (
                  kt(r) &&
                    a.isScriptable(e) &&
                    (r = (function (t, e, i, s) {
                      const {
                        _proxy: n,
                        _context: o,
                        _subProxy: a,
                        _stack: r,
                      } = i;
                      if (r.has(t))
                        throw new Error(
                          "Recursion detected: " +
                            Array.from(r).join("->") +
                            "->" +
                            t,
                        );
                      r.add(t);
                      let l = e(o, a || s);
                      return (
                        r.delete(t), ni(t, l) && (l = hi(n._scopes, n, t, l)), l
                      );
                    })(e, r, t, i)),
                  at(r) &&
                    r.length &&
                    (r = (function (t, e, i, s) {
                      const {
                        _proxy: n,
                        _context: o,
                        _subProxy: a,
                        _descriptors: r,
                      } = i;
                      if (void 0 !== o.index && s(t))
                        return e[o.index % e.length];
                      if (rt(e[0])) {
                        const i = e,
                          s = n._scopes.filter((t) => t !== i);
                        e = [];
                        for (const l of i) {
                          const i = hi(s, n, t, l);
                          e.push(ei(i, o, a && a[t], r));
                        }
                      }
                      return e;
                    })(e, r, t, a.isIndexable)),
                  ni(e, r) && (r = ei(r, n, o && o[e], a)),
                  r
                );
              })(t, e, i),
            ),
          getOwnPropertyDescriptor: (e, i) =>
            e._descriptors.allKeys
              ? Reflect.has(t, i)
                ? { enumerable: !0, configurable: !0 }
                : void 0
              : Reflect.getOwnPropertyDescriptor(t, i),
          getPrototypeOf: () => Reflect.getPrototypeOf(t),
          has: (e, i) => Reflect.has(t, i),
          ownKeys: () => Reflect.ownKeys(t),
          set: (e, i, s) => ((t[i] = s), delete e[i], !0),
        });
      }
      function ii(t, e = { scriptable: !0, indexable: !0 }) {
        const {
          _scriptable: i = e.scriptable,
          _indexable: s = e.indexable,
          _allKeys: n = e.allKeys,
        } = t;
        return {
          allKeys: n,
          scriptable: i,
          indexable: s,
          isScriptable: kt(i) ? i : () => i,
          isIndexable: kt(s) ? s : () => s,
        };
      }
      const si = (t, e) => (t ? t + wt(e) : e),
        ni = (t, e) =>
          rt(e) &&
          "adapters" !== t &&
          (null === Object.getPrototypeOf(e) || e.constructor === Object);
      function oi(t, e, i) {
        if (Object.prototype.hasOwnProperty.call(t, e)) return t[e];
        const s = i();
        return (t[e] = s), s;
      }
      function ai(t, e, i) {
        return kt(t) ? t(e, i) : t;
      }
      const ri = (t, e) =>
        !0 === t ? e : "string" == typeof t ? At(e, t) : void 0;
      function li(t, e, i, s, n) {
        for (const o of e) {
          const e = ri(i, o);
          if (e) {
            t.add(e);
            const o = ai(e._fallback, i, n);
            if (void 0 !== o && o !== i && o !== s) return o;
          } else if (!1 === e && void 0 !== s && i !== s) return null;
        }
        return !1;
      }
      function hi(t, e, i, s) {
        const n = e._rootScopes,
          o = ai(e._fallback, i, s),
          a = [...t, ...n],
          r = new Set();
        r.add(s);
        let l = ci(r, a, i, o || i, s);
        return (
          null !== l &&
          (void 0 === o || o === i || ((l = ci(r, a, o, l, s)), null !== l)) &&
          ti(Array.from(r), [""], n, o, () =>
            (function (t, e, i) {
              const s = t._getTarget();
              e in s || (s[e] = {});
              const n = s[e];
              return at(n) && rt(i) ? i : n || {};
            })(e, i, s),
          )
        );
      }
      function ci(t, e, i, s, n) {
        for (; i; ) i = li(t, e, i, s, n);
        return i;
      }
      function di(t, e) {
        for (const i of e) {
          if (!i) continue;
          const e = i[t];
          if (void 0 !== e) return e;
        }
      }
      function ui(t) {
        let e = t._keys;
        return (
          e ||
            (e = t._keys =
              (function (t) {
                const e = new Set();
                for (const i of t)
                  for (const t of Object.keys(i).filter(
                    (t) => !t.startsWith("_"),
                  ))
                    e.add(t);
                return Array.from(e);
              })(t._scopes)),
          e
        );
      }
      function fi(t, e, i, s) {
        const { iScale: n } = t,
          { key: o = "r" } = this._parsing,
          a = new Array(s);
        let r, l, h, c;
        for (r = 0, l = s; r < l; ++r)
          (h = r + i), (c = e[h]), (a[r] = { r: n.parse(At(c, o), h) });
        return a;
      }
      const gi = Number.EPSILON || 1e-14,
        pi = (t, e) => e < t.length && !t[e].skip && t[e],
        mi = (t) => ("x" === t ? "y" : "x");
      function bi(t, e, i, s) {
        const n = t.skip ? e : t,
          o = e,
          a = i.skip ? e : i,
          r = Yt(o, n),
          l = Yt(a, o);
        let h = r / (r + l),
          c = l / (r + l);
        (h = isNaN(h) ? 0 : h), (c = isNaN(c) ? 0 : c);
        const d = s * h,
          u = s * c;
        return {
          previous: { x: o.x - d * (a.x - n.x), y: o.y - d * (a.y - n.y) },
          next: { x: o.x + u * (a.x - n.x), y: o.y + u * (a.y - n.y) },
        };
      }
      function xi(t, e, i) {
        return Math.max(Math.min(t, i), e);
      }
      function yi(t, e, i, s, n) {
        let o, a, r, l;
        if (
          (e.spanGaps && (t = t.filter((t) => !t.skip)),
          "monotone" === e.cubicInterpolationMode)
        )
          !(function (t, e = "x") {
            const i = mi(e),
              s = t.length,
              n = Array(s).fill(0),
              o = Array(s);
            let a,
              r,
              l,
              h = pi(t, 0);
            for (a = 0; a < s; ++a)
              if (((r = l), (l = h), (h = pi(t, a + 1)), l)) {
                if (h) {
                  const t = h[e] - l[e];
                  n[a] = 0 !== t ? (h[i] - l[i]) / t : 0;
                }
                o[a] = r
                  ? h
                    ? It(n[a - 1]) !== It(n[a])
                      ? 0
                      : (n[a - 1] + n[a]) / 2
                    : n[a - 1]
                  : n[a];
              }
            !(function (t, e, i) {
              const s = t.length;
              let n,
                o,
                a,
                r,
                l,
                h = pi(t, 0);
              for (let c = 0; c < s - 1; ++c)
                (l = h),
                  (h = pi(t, c + 1)),
                  l &&
                    h &&
                    (zt(e[c], 0, gi)
                      ? (i[c] = i[c + 1] = 0)
                      : ((n = i[c] / e[c]),
                        (o = i[c + 1] / e[c]),
                        (r = Math.pow(n, 2) + Math.pow(o, 2)),
                        r <= 9 ||
                          ((a = 3 / Math.sqrt(r)),
                          (i[c] = n * a * e[c]),
                          (i[c + 1] = o * a * e[c]))));
            })(t, n, o),
              (function (t, e, i = "x") {
                const s = mi(i),
                  n = t.length;
                let o,
                  a,
                  r,
                  l = pi(t, 0);
                for (let h = 0; h < n; ++h) {
                  if (((a = r), (r = l), (l = pi(t, h + 1)), !r)) continue;
                  const n = r[i],
                    c = r[s];
                  a &&
                    ((o = (n - a[i]) / 3),
                    (r[`cp1${i}`] = n - o),
                    (r[`cp1${s}`] = c - o * e[h])),
                    l &&
                      ((o = (l[i] - n) / 3),
                      (r[`cp2${i}`] = n + o),
                      (r[`cp2${s}`] = c + o * e[h]));
                }
              })(t, o, e);
          })(t, n);
        else {
          let i = s ? t[t.length - 1] : t[0];
          for (o = 0, a = t.length; o < a; ++o)
            (r = t[o]),
              (l = bi(
                i,
                r,
                t[Math.min(o + 1, a - (s ? 0 : 1)) % a],
                e.tension,
              )),
              (r.cp1x = l.previous.x),
              (r.cp1y = l.previous.y),
              (r.cp2x = l.next.x),
              (r.cp2y = l.next.y),
              (i = r);
        }
        e.capBezierPoints &&
          (function (t, e) {
            let i,
              s,
              n,
              o,
              a,
              r = Re(t[0], e);
            for (i = 0, s = t.length; i < s; ++i)
              (a = o),
                (o = r),
                (r = i < s - 1 && Re(t[i + 1], e)),
                o &&
                  ((n = t[i]),
                  a &&
                    ((n.cp1x = xi(n.cp1x, e.left, e.right)),
                    (n.cp1y = xi(n.cp1y, e.top, e.bottom))),
                  r &&
                    ((n.cp2x = xi(n.cp2x, e.left, e.right)),
                    (n.cp2y = xi(n.cp2y, e.top, e.bottom))));
          })(t, i);
      }
      function _i() {
        return "undefined" != typeof window && "undefined" != typeof document;
      }
      function vi(t) {
        let e = t.parentNode;
        return e && "[object ShadowRoot]" === e.toString() && (e = e.host), e;
      }
      function Ai(t, e, i) {
        let s;
        return (
          "string" == typeof t
            ? ((s = parseInt(t, 10)),
              -1 !== t.indexOf("%") && (s = (s / 100) * e.parentNode[i]))
            : (s = t),
          s
        );
      }
      const wi = (t) => t.ownerDocument.defaultView.getComputedStyle(t, null),
        Mi = ["top", "right", "bottom", "left"];
      function ki(t, e, i) {
        const s = {};
        i = i ? "-" + i : "";
        for (let n = 0; n < 4; n++) {
          const o = Mi[n];
          s[o] = parseFloat(t[e + "-" + o + i]) || 0;
        }
        return (s.width = s.left + s.right), (s.height = s.top + s.bottom), s;
      }
      const Ci = (t, e, i) => (t > 0 || e > 0) && (!i || !i.shadowRoot);
      function Si(t, e) {
        if ("native" in t) return t;
        const { canvas: i, currentDevicePixelRatio: s } = e,
          n = wi(i),
          o = "border-box" === n.boxSizing,
          a = ki(n, "padding"),
          r = ki(n, "border", "width"),
          {
            x: l,
            y: h,
            box: c,
          } = (function (t, e) {
            const i = t.touches,
              s = i && i.length ? i[0] : t,
              { offsetX: n, offsetY: o } = s;
            let a,
              r,
              l = !1;
            if (Ci(n, o, t.target)) (a = n), (r = o);
            else {
              const t = e.getBoundingClientRect();
              (a = s.clientX - t.left), (r = s.clientY - t.top), (l = !0);
            }
            return { x: a, y: r, box: l };
          })(t, i),
          d = a.left + (c && r.left),
          u = a.top + (c && r.top);
        let { width: f, height: g } = e;
        return (
          o && ((f -= a.width + r.width), (g -= a.height + r.height)),
          {
            x: Math.round((((l - d) / f) * i.width) / s),
            y: Math.round((((h - u) / g) * i.height) / s),
          }
        );
      }
      const Di = (t) => Math.round(10 * t) / 10;
      function Ei(t, e, i) {
        const s = e || 1,
          n = Math.floor(t.height * s),
          o = Math.floor(t.width * s);
        (t.height = Math.floor(t.height)), (t.width = Math.floor(t.width));
        const a = t.canvas;
        return (
          a.style &&
            (i || (!a.style.height && !a.style.width)) &&
            ((a.style.height = `${t.height}px`),
            (a.style.width = `${t.width}px`)),
          (t.currentDevicePixelRatio !== s ||
            a.height !== n ||
            a.width !== o) &&
            ((t.currentDevicePixelRatio = s),
            (a.height = n),
            (a.width = o),
            t.ctx.setTransform(s, 0, 0, s, 0, 0),
            !0)
        );
      }
      const Pi = (function () {
        let t = !1;
        try {
          const e = {
            get passive() {
              return (t = !0), !1;
            },
          };
          window.addEventListener("test", null, e),
            window.removeEventListener("test", null, e);
        } catch (t) {}
        return t;
      })();
      function Oi(t, e) {
        const i = (function (t, e) {
            return wi(t).getPropertyValue(e);
          })(t, e),
          s = i && i.match(/^(\d+)(\.\d+)?px$/);
        return s ? +s[1] : void 0;
      }
      function Ti(t, e, i, s) {
        return { x: t.x + i * (e.x - t.x), y: t.y + i * (e.y - t.y) };
      }
      function Li(t, e, i, s) {
        return {
          x: t.x + i * (e.x - t.x),
          y:
            "middle" === s
              ? i < 0.5
                ? t.y
                : e.y
              : "after" === s
              ? i < 1
                ? t.y
                : e.y
              : i > 0
              ? e.y
              : t.y,
        };
      }
      function Ri(t, e, i, s) {
        const n = { x: t.cp2x, y: t.cp2y },
          o = { x: e.cp1x, y: e.cp1y },
          a = Ti(t, n, i),
          r = Ti(n, o, i),
          l = Ti(o, e, i),
          h = Ti(a, r, i),
          c = Ti(r, l, i);
        return Ti(h, c, i);
      }
      function Bi(t, e, i) {
        return t
          ? (function (t, e) {
              return {
                x: (i) => t + t + e - i,
                setWidth(t) {
                  e = t;
                },
                textAlign: (t) =>
                  "center" === t ? t : "right" === t ? "left" : "right",
                xPlus: (t, e) => t - e,
                leftForLtr: (t, e) => t - e,
              };
            })(e, i)
          : {
              x: (t) => t,
              setWidth(t) {},
              textAlign: (t) => t,
              xPlus: (t, e) => t + e,
              leftForLtr: (t, e) => t,
            };
      }
      function Ii(t, e) {
        let i, s;
        ("ltr" !== e && "rtl" !== e) ||
          ((i = t.canvas.style),
          (s = [
            i.getPropertyValue("direction"),
            i.getPropertyPriority("direction"),
          ]),
          i.setProperty("direction", e, "important"),
          (t.prevTextDirection = s));
      }
      function zi(t, e) {
        void 0 !== e &&
          (delete t.prevTextDirection,
          t.canvas.style.setProperty("direction", e[0], e[1]));
      }
      function Fi(t) {
        return "angle" === t
          ? { between: Zt, compare: Ut, normalize: Xt }
          : { between: Kt, compare: (t, e) => t - e, normalize: (t) => t };
      }
      function Wi({ start: t, end: e, count: i, loop: s, style: n }) {
        return {
          start: t % i,
          end: e % i,
          loop: s && (e - t + 1) % i == 0,
          style: n,
        };
      }
      function Vi(t, e, i) {
        if (!i) return [t];
        const { property: s, start: n, end: o } = i,
          a = e.length,
          { compare: r, between: l, normalize: h } = Fi(s),
          {
            start: c,
            end: d,
            loop: u,
            style: f,
          } = (function (t, e, i) {
            const { property: s, start: n, end: o } = i,
              { between: a, normalize: r } = Fi(s),
              l = e.length;
            let h,
              c,
              { start: d, end: u, loop: f } = t;
            if (f) {
              for (
                d += l, u += l, h = 0, c = l;
                h < c && a(r(e[d % l][s]), n, o);
                ++h
              )
                d--, u--;
              (d %= l), (u %= l);
            }
            return (
              u < d && (u += l), { start: d, end: u, loop: f, style: t.style }
            );
          })(t, e, i),
          g = [];
        let p,
          m,
          b,
          x = !1,
          y = null;
        for (let t = c, i = c; t <= d; ++t)
          (m = e[t % a]),
            m.skip ||
              ((p = h(m[s])),
              p !== b &&
                ((x = l(p, n, o)),
                null === y &&
                  (x || (l(n, b, p) && 0 !== r(n, b))) &&
                  (y = 0 === r(p, n) ? t : i),
                null !== y &&
                  (!x || 0 === r(o, p) || l(o, b, p)) &&
                  (g.push(
                    Wi({ start: y, end: t, loop: u, count: a, style: f }),
                  ),
                  (y = null)),
                (i = t),
                (b = p)));
        return (
          null !== y &&
            g.push(Wi({ start: y, end: d, loop: u, count: a, style: f })),
          g
        );
      }
      function Ni(t, e) {
        const i = [],
          s = t.segments;
        for (let n = 0; n < s.length; n++) {
          const o = Vi(s[n], t.points, e);
          o.length && i.push(...o);
        }
        return i;
      }
      function ji(t) {
        return {
          backgroundColor: t.backgroundColor,
          borderCapStyle: t.borderCapStyle,
          borderDash: t.borderDash,
          borderDashOffset: t.borderDashOffset,
          borderJoinStyle: t.borderJoinStyle,
          borderWidth: t.borderWidth,
          borderColor: t.borderColor,
        };
      }
      function Hi(t, e) {
        if (!e) return !1;
        const i = [],
          s = function (t, e) {
            return fe(e) ? (i.includes(e) || i.push(e), i.indexOf(e)) : e;
          };
        return JSON.stringify(t, s) !== JSON.stringify(e, s);
      }
      class $i {
        constructor() {
          (this._request = null),
            (this._charts = new Map()),
            (this._running = !1),
            (this._lastDate = void 0);
        }
        _notify(t, e, i, s) {
          const n = e.listeners[s],
            o = e.duration;
          n.forEach((s) =>
            s({
              chart: t,
              initial: e.initial,
              numSteps: o,
              currentStep: Math.min(i - e.start, o),
            }),
          );
        }
        _refresh() {
          this._request ||
            ((this._running = !0),
            (this._request = se.call(window, () => {
              this._update(),
                (this._request = null),
                this._running && this._refresh();
            })));
        }
        _update(t = Date.now()) {
          let e = 0;
          this._charts.forEach((i, s) => {
            if (!i.running || !i.items.length) return;
            const n = i.items;
            let o,
              a = n.length - 1,
              r = !1;
            for (; a >= 0; --a)
              (o = n[a]),
                o._active
                  ? (o._total > i.duration && (i.duration = o._total),
                    o.tick(t),
                    (r = !0))
                  : ((n[a] = n[n.length - 1]), n.pop());
            r && (s.draw(), this._notify(s, i, t, "progress")),
              n.length ||
                ((i.running = !1),
                this._notify(s, i, t, "complete"),
                (i.initial = !1)),
              (e += n.length);
          }),
            (this._lastDate = t),
            0 === e && (this._running = !1);
        }
        _getAnims(t) {
          const e = this._charts;
          let i = e.get(t);
          return (
            i ||
              ((i = {
                running: !1,
                initial: !0,
                items: [],
                listeners: { complete: [], progress: [] },
              }),
              e.set(t, i)),
            i
          );
        }
        listen(t, e, i) {
          this._getAnims(t).listeners[e].push(i);
        }
        add(t, e) {
          e && e.length && this._getAnims(t).items.push(...e);
        }
        has(t) {
          return this._getAnims(t).items.length > 0;
        }
        start(t) {
          const e = this._charts.get(t);
          e &&
            ((e.running = !0),
            (e.start = Date.now()),
            (e.duration = e.items.reduce(
              (t, e) => Math.max(t, e._duration),
              0,
            )),
            this._refresh());
        }
        running(t) {
          if (!this._running) return !1;
          const e = this._charts.get(t);
          return !!(e && e.running && e.items.length);
        }
        stop(t) {
          const e = this._charts.get(t);
          if (!e || !e.items.length) return;
          const i = e.items;
          let s = i.length - 1;
          for (; s >= 0; --s) i[s].cancel();
          (e.items = []), this._notify(t, e, Date.now(), "complete");
        }
        remove(t) {
          return this._charts.delete(t);
        }
      }
      var Yi = new $i();
      const Ui = "transparent",
        Xi = {
          boolean: (t, e, i) => (i > 0.5 ? e : t),
          color(t, e, i) {
            const s = ge(t || Ui),
              n = s.valid && ge(e || Ui);
            return n && n.valid ? n.mix(s, i).hexString() : e;
          },
          number: (t, e, i) => t + (e - t) * i,
        };
      class Zi {
        constructor(t, e, i, s) {
          const n = e[i];
          s = Je([t.to, s, n, t.from]);
          const o = Je([t.from, n, s]);
          (this._active = !0),
            (this._fn = t.fn || Xi[t.type || typeof o]),
            (this._easing = ue[t.easing] || ue.linear),
            (this._start = Math.floor(Date.now() + (t.delay || 0))),
            (this._duration = this._total = Math.floor(t.duration)),
            (this._loop = !!t.loop),
            (this._target = e),
            (this._prop = i),
            (this._from = o),
            (this._to = s),
            (this._promises = void 0);
        }
        active() {
          return this._active;
        }
        update(t, e, i) {
          if (this._active) {
            this._notify(!1);
            const s = this._target[this._prop],
              n = i - this._start,
              o = this._duration - n;
            (this._start = i),
              (this._duration = Math.floor(Math.max(o, t.duration))),
              (this._total += n),
              (this._loop = !!t.loop),
              (this._to = Je([t.to, e, s, t.from])),
              (this._from = Je([t.from, s, e]));
          }
        }
        cancel() {
          this._active &&
            (this.tick(Date.now()), (this._active = !1), this._notify(!1));
        }
        tick(t) {
          const e = t - this._start,
            i = this._duration,
            s = this._prop,
            n = this._from,
            o = this._loop,
            a = this._to;
          let r;
          if (((this._active = n !== a && (o || e < i)), !this._active))
            return (this._target[s] = a), void this._notify(!0);
          e < 0
            ? (this._target[s] = n)
            : ((r = (e / i) % 2),
              (r = o && r > 1 ? 2 - r : r),
              (r = this._easing(Math.min(1, Math.max(0, r)))),
              (this._target[s] = this._fn(n, a, r)));
        }
        wait() {
          const t = this._promises || (this._promises = []);
          return new Promise((e, i) => {
            t.push({ res: e, rej: i });
          });
        }
        _notify(t) {
          const e = t ? "res" : "rej",
            i = this._promises || [];
          for (let t = 0; t < i.length; t++) i[t][e]();
        }
      }
      class qi {
        constructor(t, e) {
          (this._chart = t), (this._properties = new Map()), this.configure(e);
        }
        configure(t) {
          if (!rt(t)) return;
          const e = Object.keys(Se.animation),
            i = this._properties;
          Object.getOwnPropertyNames(t).forEach((s) => {
            const n = t[s];
            if (!rt(n)) return;
            const o = {};
            for (const t of e) o[t] = n[t];
            ((at(n.properties) && n.properties) || [s]).forEach((t) => {
              (t !== s && i.has(t)) || i.set(t, o);
            });
          });
        }
        _animateOptions(t, e) {
          const i = e.options,
            s = (function (t, e) {
              if (!e) return;
              let i = t.options;
              if (i)
                return (
                  i.$shared &&
                    (t.options = i =
                      Object.assign({}, i, { $shared: !1, $animations: {} })),
                  i
                );
              t.options = e;
            })(t, i);
          if (!s) return [];
          const n = this._createAnimations(s, i);
          return (
            i.$shared &&
              (function (t, e) {
                const i = [],
                  s = Object.keys(e);
                for (let e = 0; e < s.length; e++) {
                  const n = t[s[e]];
                  n && n.active() && i.push(n.wait());
                }
                return Promise.all(i);
              })(t.options.$animations, i).then(
                () => {
                  t.options = i;
                },
                () => {},
              ),
            n
          );
        }
        _createAnimations(t, e) {
          const i = this._properties,
            s = [],
            n = t.$animations || (t.$animations = {}),
            o = Object.keys(e),
            a = Date.now();
          let r;
          for (r = o.length - 1; r >= 0; --r) {
            const l = o[r];
            if ("$" === l.charAt(0)) continue;
            if ("options" === l) {
              s.push(...this._animateOptions(t, e));
              continue;
            }
            const h = e[l];
            let c = n[l];
            const d = i.get(l);
            if (c) {
              if (d && c.active()) {
                c.update(d, h, a);
                continue;
              }
              c.cancel();
            }
            d && d.duration
              ? ((n[l] = c = new Zi(d, t, l, h)), s.push(c))
              : (t[l] = h);
          }
          return s;
        }
        update(t, e) {
          if (0 === this._properties.size) return void Object.assign(t, e);
          const i = this._createAnimations(t, e);
          return i.length ? (Yi.add(this._chart, i), !0) : void 0;
        }
      }
      function Ki(t, e) {
        const i = (t && t.options) || {},
          s = i.reverse,
          n = void 0 === i.min ? e : 0,
          o = void 0 === i.max ? e : 0;
        return { start: s ? o : n, end: s ? n : o };
      }
      function Gi(t, e) {
        const i = [],
          s = t._getSortedDatasetMetas(e);
        let n, o;
        for (n = 0, o = s.length; n < o; ++n) i.push(s[n].index);
        return i;
      }
      function Ji(t, e, i, s = {}) {
        const n = t.keys,
          o = "single" === s.mode;
        let a, r, l, h;
        if (null !== e) {
          for (a = 0, r = n.length; a < r; ++a) {
            if (((l = +n[a]), l === i)) {
              if (s.all) continue;
              break;
            }
            (h = t.values[l]),
              lt(h) && (o || 0 === e || It(e) === It(h)) && (e += h);
          }
          return e;
        }
      }
      function Qi(t, e) {
        const i = t && t.options.stacked;
        return i || (void 0 === i && void 0 !== e.stack);
      }
      function ts(t, e, i) {
        const s = t[e] || (t[e] = {});
        return s[i] || (s[i] = {});
      }
      function es(t, e, i, s) {
        for (const n of e.getMatchingVisibleMetas(s).reverse()) {
          const e = t[n.index];
          if ((i && e > 0) || (!i && e < 0)) return n.index;
        }
        return null;
      }
      function is(t, e) {
        const { chart: i, _cachedMeta: s } = t,
          n = i._stacks || (i._stacks = {}),
          { iScale: o, vScale: a, index: r } = s,
          l = o.axis,
          h = a.axis,
          c = (function (t, e, i) {
            return `${t.id}.${e.id}.${i.stack || i.type}`;
          })(o, a, s),
          d = e.length;
        let u;
        for (let t = 0; t < d; ++t) {
          const i = e[t],
            { [l]: o, [h]: d } = i;
          (u = (i._stacks || (i._stacks = {}))[h] = ts(n, c, o)),
            (u[r] = d),
            (u._top = es(u, a, !0, s.type)),
            (u._bottom = es(u, a, !1, s.type)),
            ((u._visualValues || (u._visualValues = {}))[r] = d);
        }
      }
      function ss(t, e) {
        const i = t.scales;
        return Object.keys(i)
          .filter((t) => i[t].axis === e)
          .shift();
      }
      function ns(t, e) {
        const i = t.controller.index,
          s = t.vScale && t.vScale.axis;
        if (s) {
          e = e || t._parsed;
          for (const t of e) {
            const e = t._stacks;
            if (!e || void 0 === e[s] || void 0 === e[s][i]) return;
            delete e[s][i],
              void 0 !== e[s]._visualValues &&
                void 0 !== e[s]._visualValues[i] &&
                delete e[s]._visualValues[i];
          }
        }
      }
      const os = (t) => "reset" === t || "none" === t,
        as = (t, e) => (e ? t : Object.assign({}, t));
      class rs {
        static defaults = {};
        static datasetElementType = null;
        static dataElementType = null;
        constructor(t, e) {
          (this.chart = t),
            (this._ctx = t.ctx),
            (this.index = e),
            (this._cachedDataOpts = {}),
            (this._cachedMeta = this.getMeta()),
            (this._type = this._cachedMeta.type),
            (this.options = void 0),
            (this._parsing = !1),
            (this._data = void 0),
            (this._objectData = void 0),
            (this._sharedOptions = void 0),
            (this._drawStart = void 0),
            (this._drawCount = void 0),
            (this.enableOptionSharing = !1),
            (this.supportsDecimation = !1),
            (this.$context = void 0),
            (this._syncList = []),
            (this.datasetElementType = new.target.datasetElementType),
            (this.dataElementType = new.target.dataElementType),
            this.initialize();
        }
        initialize() {
          const t = this._cachedMeta;
          this.configure(),
            this.linkScales(),
            (t._stacked = Qi(t.vScale, t)),
            this.addElements(),
            this.options.fill &&
              !this.chart.isPluginEnabled("filler") &&
              console.warn(
                "Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options",
              );
        }
        updateIndex(t) {
          this.index !== t && ns(this._cachedMeta), (this.index = t);
        }
        linkScales() {
          const t = this.chart,
            e = this._cachedMeta,
            i = this.getDataset(),
            s = (t, e, i, s) => ("x" === t ? e : "r" === t ? s : i),
            n = (e.xAxisID = ct(i.xAxisID, ss(t, "x"))),
            o = (e.yAxisID = ct(i.yAxisID, ss(t, "y"))),
            a = (e.rAxisID = ct(i.rAxisID, ss(t, "r"))),
            r = e.indexAxis,
            l = (e.iAxisID = s(r, n, o, a)),
            h = (e.vAxisID = s(r, o, n, a));
          (e.xScale = this.getScaleForId(n)),
            (e.yScale = this.getScaleForId(o)),
            (e.rScale = this.getScaleForId(a)),
            (e.iScale = this.getScaleForId(l)),
            (e.vScale = this.getScaleForId(h));
        }
        getDataset() {
          return this.chart.data.datasets[this.index];
        }
        getMeta() {
          return this.chart.getDatasetMeta(this.index);
        }
        getScaleForId(t) {
          return this.chart.scales[t];
        }
        _getOtherScale(t) {
          const e = this._cachedMeta;
          return t === e.iScale ? e.vScale : e.iScale;
        }
        reset() {
          this._update("reset");
        }
        _destroy() {
          const t = this._cachedMeta;
          this._data && ee(this._data, this), t._stacked && ns(t);
        }
        _dataCheck() {
          const t = this.getDataset(),
            e = t.data || (t.data = []),
            i = this._data;
          if (rt(e))
            this._data = (function (t) {
              const e = Object.keys(t),
                i = new Array(e.length);
              let s, n, o;
              for (s = 0, n = e.length; s < n; ++s)
                (o = e[s]), (i[s] = { x: o, y: t[o] });
              return i;
            })(e);
          else if (i !== e) {
            if (i) {
              ee(i, this);
              const t = this._cachedMeta;
              ns(t), (t._parsed = []);
            }
            e &&
              Object.isExtensible(e) &&
              (this,
              (s = e)._chartjs
                ? s._chartjs.listeners.push(this)
                : (Object.defineProperty(s, "_chartjs", {
                    configurable: !0,
                    enumerable: !1,
                    value: { listeners: [this] },
                  }),
                  te.forEach((t) => {
                    const e = "_onData" + wt(t),
                      i = s[t];
                    Object.defineProperty(s, t, {
                      configurable: !0,
                      enumerable: !1,
                      value(...t) {
                        const n = i.apply(this, t);
                        return (
                          s._chartjs.listeners.forEach((i) => {
                            "function" == typeof i[e] && i[e](...t);
                          }),
                          n
                        );
                      },
                    });
                  }))),
              (this._syncList = []),
              (this._data = e);
          }
          var s;
        }
        addElements() {
          const t = this._cachedMeta;
          this._dataCheck(),
            this.datasetElementType &&
              (t.dataset = new this.datasetElementType());
        }
        buildOrUpdateElements(t) {
          const e = this._cachedMeta,
            i = this.getDataset();
          let s = !1;
          this._dataCheck();
          const n = e._stacked;
          (e._stacked = Qi(e.vScale, e)),
            e.stack !== i.stack && ((s = !0), ns(e), (e.stack = i.stack)),
            this._resyncElements(t),
            (s || n !== e._stacked) && is(this, e._parsed);
        }
        configure() {
          const t = this.chart.config,
            e = t.datasetScopeKeys(this._type),
            i = t.getOptionScopes(this.getDataset(), e, !0);
          (this.options = t.createResolver(i, this.getContext())),
            (this._parsing = this.options.parsing),
            (this._cachedDataOpts = {});
        }
        parse(t, e) {
          const { _cachedMeta: i, _data: s } = this,
            { iScale: n, _stacked: o } = i,
            a = n.axis;
          let r,
            l,
            h,
            c = (0 === t && e === s.length) || i._sorted,
            d = t > 0 && i._parsed[t - 1];
          if (!1 === this._parsing) (i._parsed = s), (i._sorted = !0), (h = s);
          else {
            h = at(s[t])
              ? this.parseArrayData(i, s, t, e)
              : rt(s[t])
              ? this.parseObjectData(i, s, t, e)
              : this.parsePrimitiveData(i, s, t, e);
            const n = () => null === l[a] || (d && l[a] < d[a]);
            for (r = 0; r < e; ++r)
              (i._parsed[r + t] = l = h[r]), c && (n() && (c = !1), (d = l));
            i._sorted = c;
          }
          o && is(this, h);
        }
        parsePrimitiveData(t, e, i, s) {
          const { iScale: n, vScale: o } = t,
            a = n.axis,
            r = o.axis,
            l = n.getLabels(),
            h = n === o,
            c = new Array(s);
          let d, u, f;
          for (d = 0, u = s; d < u; ++d)
            (f = d + i),
              (c[d] = { [a]: h || n.parse(l[f], f), [r]: o.parse(e[f], f) });
          return c;
        }
        parseArrayData(t, e, i, s) {
          const { xScale: n, yScale: o } = t,
            a = new Array(s);
          let r, l, h, c;
          for (r = 0, l = s; r < l; ++r)
            (h = r + i),
              (c = e[h]),
              (a[r] = { x: n.parse(c[0], h), y: o.parse(c[1], h) });
          return a;
        }
        parseObjectData(t, e, i, s) {
          const { xScale: n, yScale: o } = t,
            { xAxisKey: a = "x", yAxisKey: r = "y" } = this._parsing,
            l = new Array(s);
          let h, c, d, u;
          for (h = 0, c = s; h < c; ++h)
            (d = h + i),
              (u = e[d]),
              (l[h] = { x: n.parse(At(u, a), d), y: o.parse(At(u, r), d) });
          return l;
        }
        getParsed(t) {
          return this._cachedMeta._parsed[t];
        }
        getDataElement(t) {
          return this._cachedMeta.data[t];
        }
        applyStack(t, e, i) {
          const s = this.chart,
            n = this._cachedMeta,
            o = e[t.axis];
          return Ji(
            { keys: Gi(s, !0), values: e._stacks[t.axis]._visualValues },
            o,
            n.index,
            { mode: i },
          );
        }
        updateRangeFromParsed(t, e, i, s) {
          const n = i[e.axis];
          let o = null === n ? NaN : n;
          const a = s && i._stacks[e.axis];
          s && a && ((s.values = a), (o = Ji(s, n, this._cachedMeta.index))),
            (t.min = Math.min(t.min, o)),
            (t.max = Math.max(t.max, o));
        }
        getMinMax(t, e) {
          const i = this._cachedMeta,
            s = i._parsed,
            n = i._sorted && t === i.iScale,
            o = s.length,
            a = this._getOtherScale(t),
            r = ((t, e, i) =>
              t &&
              !e.hidden &&
              e._stacked && { keys: Gi(i, !0), values: null })(
              e,
              i,
              this.chart,
            ),
            l = {
              min: Number.POSITIVE_INFINITY,
              max: Number.NEGATIVE_INFINITY,
            },
            { min: h, max: c } = (function (t) {
              const {
                min: e,
                max: i,
                minDefined: s,
                maxDefined: n,
              } = t.getUserBounds();
              return {
                min: s ? e : Number.NEGATIVE_INFINITY,
                max: n ? i : Number.POSITIVE_INFINITY,
              };
            })(a);
          let d, u;
          function f() {
            u = s[d];
            const e = u[a.axis];
            return !lt(u[t.axis]) || h > e || c < e;
          }
          for (
            d = 0;
            d < o && (f() || (this.updateRangeFromParsed(l, t, u, r), !n));
            ++d
          );
          if (n)
            for (d = o - 1; d >= 0; --d)
              if (!f()) {
                this.updateRangeFromParsed(l, t, u, r);
                break;
              }
          return l;
        }
        getAllParsedValues(t) {
          const e = this._cachedMeta._parsed,
            i = [];
          let s, n, o;
          for (s = 0, n = e.length; s < n; ++s)
            (o = e[s][t.axis]), lt(o) && i.push(o);
          return i;
        }
        getMaxOverflow() {
          return !1;
        }
        getLabelAndValue(t) {
          const e = this._cachedMeta,
            i = e.iScale,
            s = e.vScale,
            n = this.getParsed(t);
          return {
            label: i ? "" + i.getLabelForValue(n[i.axis]) : "",
            value: s ? "" + s.getLabelForValue(n[s.axis]) : "",
          };
        }
        _update(t) {
          const e = this._cachedMeta;
          this.update(t || "default"),
            (e._clip = (function (t) {
              let e, i, s, n;
              return (
                rt(t)
                  ? ((e = t.top), (i = t.right), (s = t.bottom), (n = t.left))
                  : (e = i = s = n = t),
                { top: e, right: i, bottom: s, left: n, disabled: !1 === t }
              );
            })(
              ct(
                this.options.clip,
                (function (t, e, i) {
                  if (!1 === i) return !1;
                  const s = Ki(t, i),
                    n = Ki(e, i);
                  return {
                    top: n.end,
                    right: s.end,
                    bottom: n.start,
                    left: s.start,
                  };
                })(e.xScale, e.yScale, this.getMaxOverflow()),
              ),
            ));
        }
        update(t) {}
        draw() {
          const t = this._ctx,
            e = this.chart,
            i = this._cachedMeta,
            s = i.data || [],
            n = e.chartArea,
            o = [],
            a = this._drawStart || 0,
            r = this._drawCount || s.length - a,
            l = this.options.drawActiveElementsOnTop;
          let h;
          for (i.dataset && i.dataset.draw(t, n, a, r), h = a; h < a + r; ++h) {
            const e = s[h];
            e.hidden || (e.active && l ? o.push(e) : e.draw(t, n));
          }
          for (h = 0; h < o.length; ++h) o[h].draw(t, n);
        }
        getStyle(t, e) {
          const i = e ? "active" : "default";
          return void 0 === t && this._cachedMeta.dataset
            ? this.resolveDatasetElementOptions(i)
            : this.resolveDataElementOptions(t || 0, i);
        }
        getContext(t, e, i) {
          const s = this.getDataset();
          let n;
          if (t >= 0 && t < this._cachedMeta.data.length) {
            const e = this._cachedMeta.data[t];
            (n =
              e.$context ||
              (e.$context = (function (t, e, i) {
                return Qe(t, {
                  active: !1,
                  dataIndex: e,
                  parsed: void 0,
                  raw: void 0,
                  element: i,
                  index: e,
                  mode: "default",
                  type: "data",
                });
              })(this.getContext(), t, e))),
              (n.parsed = this.getParsed(t)),
              (n.raw = s.data[t]),
              (n.index = n.dataIndex = t);
          } else
            (n =
              this.$context ||
              (this.$context = (function (t, e) {
                return Qe(t, {
                  active: !1,
                  dataset: void 0,
                  datasetIndex: e,
                  index: e,
                  mode: "default",
                  type: "dataset",
                });
              })(this.chart.getContext(), this.index))),
              (n.dataset = s),
              (n.index = n.datasetIndex = this.index);
          return (n.active = !!e), (n.mode = i), n;
        }
        resolveDatasetElementOptions(t) {
          return this._resolveElementOptions(this.datasetElementType.id, t);
        }
        resolveDataElementOptions(t, e) {
          return this._resolveElementOptions(this.dataElementType.id, e, t);
        }
        _resolveElementOptions(t, e = "default", i) {
          const s = "active" === e,
            n = this._cachedDataOpts,
            o = t + "-" + e,
            a = n[o],
            r = this.enableOptionSharing && Mt(i);
          if (a) return as(a, r);
          const l = this.chart.config,
            h = l.datasetElementScopeKeys(this._type, t),
            c = s ? [`${t}Hover`, "hover", t, ""] : [t, ""],
            d = l.getOptionScopes(this.getDataset(), h),
            u = Object.keys(Se.elements[t]),
            f = l.resolveNamedOptions(d, u, () => this.getContext(i, s, e), c);
          return (
            f.$shared && ((f.$shared = r), (n[o] = Object.freeze(as(f, r)))), f
          );
        }
        _resolveAnimations(t, e, i) {
          const s = this.chart,
            n = this._cachedDataOpts,
            o = `animation-${e}`,
            a = n[o];
          if (a) return a;
          let r;
          if (!1 !== s.options.animation) {
            const s = this.chart.config,
              n = s.datasetAnimationScopeKeys(this._type, e),
              o = s.getOptionScopes(this.getDataset(), n);
            r = s.createResolver(o, this.getContext(t, i, e));
          }
          const l = new qi(s, r && r.animations);
          return r && r._cacheable && (n[o] = Object.freeze(l)), l;
        }
        getSharedOptions(t) {
          if (t.$shared)
            return (
              this._sharedOptions ||
              (this._sharedOptions = Object.assign({}, t))
            );
        }
        includeOptions(t, e) {
          return !e || os(t) || this.chart._animationsDisabled;
        }
        _getSharedOptions(t, e) {
          const i = this.resolveDataElementOptions(t, e),
            s = this._sharedOptions,
            n = this.getSharedOptions(i),
            o = this.includeOptions(e, n) || n !== s;
          return (
            this.updateSharedOptions(n, e, i),
            { sharedOptions: n, includeOptions: o }
          );
        }
        updateElement(t, e, i, s) {
          os(s)
            ? Object.assign(t, i)
            : this._resolveAnimations(e, s).update(t, i);
        }
        updateSharedOptions(t, e, i) {
          t && !os(e) && this._resolveAnimations(void 0, e).update(t, i);
        }
        _setStyle(t, e, i, s) {
          t.active = s;
          const n = this.getStyle(e, s);
          this._resolveAnimations(e, i, s).update(t, {
            options: (!s && this.getSharedOptions(n)) || n,
          });
        }
        removeHoverStyle(t, e, i) {
          this._setStyle(t, i, "active", !1);
        }
        setHoverStyle(t, e, i) {
          this._setStyle(t, i, "active", !0);
        }
        _removeDatasetHoverStyle() {
          const t = this._cachedMeta.dataset;
          t && this._setStyle(t, void 0, "active", !1);
        }
        _setDatasetHoverStyle() {
          const t = this._cachedMeta.dataset;
          t && this._setStyle(t, void 0, "active", !0);
        }
        _resyncElements(t) {
          const e = this._data,
            i = this._cachedMeta.data;
          for (const [t, e, i] of this._syncList) this[t](e, i);
          this._syncList = [];
          const s = i.length,
            n = e.length,
            o = Math.min(n, s);
          o && this.parse(0, o),
            n > s
              ? this._insertElements(s, n - s, t)
              : n < s && this._removeElements(n, s - n);
        }
        _insertElements(t, e, i = !0) {
          const s = this._cachedMeta,
            n = s.data,
            o = t + e;
          let a;
          const r = (t) => {
            for (t.length += e, a = t.length - 1; a >= o; a--) t[a] = t[a - e];
          };
          for (r(n), a = t; a < o; ++a) n[a] = new this.dataElementType();
          this._parsing && r(s._parsed),
            this.parse(t, e),
            i && this.updateElements(n, t, e, "reset");
        }
        updateElements(t, e, i, s) {}
        _removeElements(t, e) {
          const i = this._cachedMeta;
          if (this._parsing) {
            const s = i._parsed.splice(t, e);
            i._stacked && ns(i, s);
          }
          i.data.splice(t, e);
        }
        _sync(t) {
          if (this._parsing) this._syncList.push(t);
          else {
            const [e, i, s] = t;
            this[e](i, s);
          }
          this.chart._dataChanges.push([this.index, ...t]);
        }
        _onDataPush() {
          const t = arguments.length;
          this._sync(["_insertElements", this.getDataset().data.length - t, t]);
        }
        _onDataPop() {
          this._sync(["_removeElements", this._cachedMeta.data.length - 1, 1]);
        }
        _onDataShift() {
          this._sync(["_removeElements", 0, 1]);
        }
        _onDataSplice(t, e) {
          e && this._sync(["_removeElements", t, e]);
          const i = arguments.length - 2;
          i && this._sync(["_insertElements", t, i]);
        }
        _onDataUnshift() {
          this._sync(["_insertElements", 0, arguments.length]);
        }
      }
      function ls(t) {
        const e = t.iScale,
          i = (function (t, e) {
            if (!t._cache.$bar) {
              const i = t.getMatchingVisibleMetas(e);
              let s = [];
              for (let e = 0, n = i.length; e < n; e++)
                s = s.concat(i[e].controller.getAllParsedValues(t));
              t._cache.$bar = ie(s.sort((t, e) => t - e));
            }
            return t._cache.$bar;
          })(e, t.type);
        let s,
          n,
          o,
          a,
          r = e._length;
        const l = () => {
          32767 !== o &&
            -32768 !== o &&
            (Mt(a) && (r = Math.min(r, Math.abs(o - a) || r)), (a = o));
        };
        for (s = 0, n = i.length; s < n; ++s)
          (o = e.getPixelForValue(i[s])), l();
        for (a = void 0, s = 0, n = e.ticks.length; s < n; ++s)
          (o = e.getPixelForTick(s)), l();
        return r;
      }
      function hs(t, e, i, s) {
        return (
          at(t)
            ? (function (t, e, i, s) {
                const n = i.parse(t[0], s),
                  o = i.parse(t[1], s),
                  a = Math.min(n, o),
                  r = Math.max(n, o);
                let l = a,
                  h = r;
                Math.abs(a) > Math.abs(r) && ((l = r), (h = a)),
                  (e[i.axis] = h),
                  (e._custom = {
                    barStart: l,
                    barEnd: h,
                    start: n,
                    end: o,
                    min: a,
                    max: r,
                  });
              })(t, e, i, s)
            : (e[i.axis] = i.parse(t, s)),
          e
        );
      }
      function cs(t, e, i, s) {
        const n = t.iScale,
          o = t.vScale,
          a = n.getLabels(),
          r = n === o,
          l = [];
        let h, c, d, u;
        for (h = i, c = i + s; h < c; ++h)
          (u = e[h]),
            (d = {}),
            (d[n.axis] = r || n.parse(a[h], h)),
            l.push(hs(u, d, o, h));
        return l;
      }
      function ds(t) {
        return t && void 0 !== t.barStart && void 0 !== t.barEnd;
      }
      function us(t, e, i, s) {
        let n = e.borderSkipped;
        const o = {};
        if (!n) return void (t.borderSkipped = o);
        if (!0 === n)
          return void (t.borderSkipped = {
            top: !0,
            right: !0,
            bottom: !0,
            left: !0,
          });
        const {
          start: a,
          end: r,
          reverse: l,
          top: h,
          bottom: c,
        } = (function (t) {
          let e, i, s, n, o;
          return (
            t.horizontal
              ? ((e = t.base > t.x), (i = "left"), (s = "right"))
              : ((e = t.base < t.y), (i = "bottom"), (s = "top")),
            e ? ((n = "end"), (o = "start")) : ((n = "start"), (o = "end")),
            { start: i, end: s, reverse: e, top: n, bottom: o }
          );
        })(t);
        "middle" === n &&
          i &&
          ((t.enableBorderRadius = !0),
          (i._top || 0) === s
            ? (n = h)
            : (i._bottom || 0) === s
            ? (n = c)
            : ((o[fs(c, a, r, l)] = !0), (n = h))),
          (o[fs(n, a, r, l)] = !0),
          (t.borderSkipped = o);
      }
      function fs(t, e, i, s) {
        var n, o, a;
        return (
          s
            ? ((a = i),
              (t = gs((t = (n = t) === (o = e) ? a : n === a ? o : n), i, e)))
            : (t = gs(t, e, i)),
          t
        );
      }
      function gs(t, e, i) {
        return "start" === t ? e : "end" === t ? i : t;
      }
      function ps(t, { inflateAmount: e }, i) {
        t.inflateAmount = "auto" === e ? (1 === i ? 0.33 : 0) : e;
      }
      class ms extends rs {
        static id = "doughnut";
        static defaults = {
          datasetElementType: !1,
          dataElementType: "arc",
          animation: { animateRotate: !0, animateScale: !1 },
          animations: {
            numbers: {
              type: "number",
              properties: [
                "circumference",
                "endAngle",
                "innerRadius",
                "outerRadius",
                "startAngle",
                "x",
                "y",
                "offset",
                "borderWidth",
                "spacing",
              ],
            },
          },
          cutout: "50%",
          rotation: 0,
          circumference: 360,
          radius: "100%",
          spacing: 0,
          indexAxis: "r",
        };
        static descriptors = {
          _scriptable: (t) => "spacing" !== t,
          _indexable: (t) =>
            "spacing" !== t &&
            !t.startsWith("borderDash") &&
            !t.startsWith("hoverBorderDash"),
        };
        static overrides = {
          aspectRatio: 1,
          plugins: {
            legend: {
              labels: {
                generateLabels(t) {
                  const e = t.data;
                  if (e.labels.length && e.datasets.length) {
                    const {
                      labels: { pointStyle: i, color: s },
                    } = t.legend.options;
                    return e.labels.map((e, n) => {
                      const o = t.getDatasetMeta(0).controller.getStyle(n);
                      return {
                        text: e,
                        fillStyle: o.backgroundColor,
                        strokeStyle: o.borderColor,
                        fontColor: s,
                        lineWidth: o.borderWidth,
                        pointStyle: i,
                        hidden: !t.getDataVisibility(n),
                        index: n,
                      };
                    });
                  }
                  return [];
                },
              },
              onClick(t, e, i) {
                i.chart.toggleDataVisibility(e.index), i.chart.update();
              },
            },
          },
        };
        constructor(t, e) {
          super(t, e),
            (this.enableOptionSharing = !0),
            (this.innerRadius = void 0),
            (this.outerRadius = void 0),
            (this.offsetX = void 0),
            (this.offsetY = void 0);
        }
        linkScales() {}
        parse(t, e) {
          const i = this.getDataset().data,
            s = this._cachedMeta;
          if (!1 === this._parsing) s._parsed = i;
          else {
            let n,
              o,
              a = (t) => +i[t];
            if (rt(i[t])) {
              const { key: t = "value" } = this._parsing;
              a = (e) => +At(i[e], t);
            }
            for (n = t, o = t + e; n < o; ++n) s._parsed[n] = a(n);
          }
        }
        _getRotation() {
          return Nt(this.options.rotation - 90);
        }
        _getCircumference() {
          return Nt(this.options.circumference);
        }
        _getRotationExtents() {
          let t = Dt,
            e = -Dt;
          for (let i = 0; i < this.chart.data.datasets.length; ++i)
            if (
              this.chart.isDatasetVisible(i) &&
              this.chart.getDatasetMeta(i).type === this._type
            ) {
              const s = this.chart.getDatasetMeta(i).controller,
                n = s._getRotation(),
                o = s._getCircumference();
              (t = Math.min(t, n)), (e = Math.max(e, n + o));
            }
          return { rotation: t, circumference: e - t };
        }
        update(t) {
          const e = this.chart,
            { chartArea: i } = e,
            s = this._cachedMeta,
            n = s.data,
            o =
              this.getMaxBorderWidth() +
              this.getMaxOffset(n) +
              this.options.spacing,
            a = Math.max((Math.min(i.width, i.height) - o) / 2, 0),
            r = Math.min(
              ((h = a),
              "string" == typeof (l = this.options.cutout) && l.endsWith("%")
                ? parseFloat(l) / 100
                : +l / h),
              1,
            );
          var l, h;
          const c = this._getRingWeight(this.index),
            { circumference: d, rotation: u } = this._getRotationExtents(),
            {
              ratioX: f,
              ratioY: g,
              offsetX: p,
              offsetY: m,
            } = (function (t, e, i) {
              let s = 1,
                n = 1,
                o = 0,
                a = 0;
              if (e < Dt) {
                const r = t,
                  l = r + e,
                  h = Math.cos(r),
                  c = Math.sin(r),
                  d = Math.cos(l),
                  u = Math.sin(l),
                  f = (t, e, s) =>
                    Zt(t, r, l, !0) ? 1 : Math.max(e, e * i, s, s * i),
                  g = (t, e, s) =>
                    Zt(t, r, l, !0) ? -1 : Math.min(e, e * i, s, s * i),
                  p = f(0, h, d),
                  m = f(Tt, c, u),
                  b = g(St, h, d),
                  x = g(St + Tt, c, u);
                (s = (p - b) / 2),
                  (n = (m - x) / 2),
                  (o = -(p + b) / 2),
                  (a = -(m + x) / 2);
              }
              return { ratioX: s, ratioY: n, offsetX: o, offsetY: a };
            })(u, d, r),
            b = (i.width - o) / f,
            x = (i.height - o) / g,
            y = Math.max(Math.min(b, x) / 2, 0),
            _ = dt(this.options.radius, y),
            v = (_ - Math.max(_ * r, 0)) / this._getVisibleDatasetWeightTotal();
          (this.offsetX = p * _),
            (this.offsetY = m * _),
            (s.total = this.calculateTotal()),
            (this.outerRadius = _ - v * this._getRingWeightOffset(this.index)),
            (this.innerRadius = Math.max(this.outerRadius - v * c, 0)),
            this.updateElements(n, 0, n.length, t);
        }
        _circumference(t, e) {
          const i = this.options,
            s = this._cachedMeta,
            n = this._getCircumference();
          return (e && i.animation.animateRotate) ||
            !this.chart.getDataVisibility(t) ||
            null === s._parsed[t] ||
            s.data[t].hidden
            ? 0
            : this.calculateCircumference((s._parsed[t] * n) / Dt);
        }
        updateElements(t, e, i, s) {
          const n = "reset" === s,
            o = this.chart,
            a = o.chartArea,
            r = o.options.animation,
            l = (a.left + a.right) / 2,
            h = (a.top + a.bottom) / 2,
            c = n && r.animateScale,
            d = c ? 0 : this.innerRadius,
            u = c ? 0 : this.outerRadius,
            { sharedOptions: f, includeOptions: g } = this._getSharedOptions(
              e,
              s,
            );
          let p,
            m = this._getRotation();
          for (p = 0; p < e; ++p) m += this._circumference(p, n);
          for (p = e; p < e + i; ++p) {
            const e = this._circumference(p, n),
              i = t[p],
              o = {
                x: l + this.offsetX,
                y: h + this.offsetY,
                startAngle: m,
                endAngle: m + e,
                circumference: e,
                outerRadius: u,
                innerRadius: d,
              };
            g &&
              (o.options =
                f ||
                this.resolveDataElementOptions(p, i.active ? "active" : s)),
              (m += e),
              this.updateElement(i, p, o, s);
          }
        }
        calculateTotal() {
          const t = this._cachedMeta,
            e = t.data;
          let i,
            s = 0;
          for (i = 0; i < e.length; i++) {
            const n = t._parsed[i];
            null === n ||
              isNaN(n) ||
              !this.chart.getDataVisibility(i) ||
              e[i].hidden ||
              (s += Math.abs(n));
          }
          return s;
        }
        calculateCircumference(t) {
          const e = this._cachedMeta.total;
          return e > 0 && !isNaN(t) ? Dt * (Math.abs(t) / e) : 0;
        }
        getLabelAndValue(t) {
          const e = this._cachedMeta,
            i = this.chart,
            s = i.data.labels || [],
            n = ye(e._parsed[t], i.options.locale);
          return { label: s[t] || "", value: n };
        }
        getMaxBorderWidth(t) {
          let e = 0;
          const i = this.chart;
          let s, n, o, a, r;
          if (!t)
            for (s = 0, n = i.data.datasets.length; s < n; ++s)
              if (i.isDatasetVisible(s)) {
                (o = i.getDatasetMeta(s)), (t = o.data), (a = o.controller);
                break;
              }
          if (!t) return 0;
          for (s = 0, n = t.length; s < n; ++s)
            (r = a.resolveDataElementOptions(s)),
              "inner" !== r.borderAlign &&
                (e = Math.max(e, r.borderWidth || 0, r.hoverBorderWidth || 0));
          return e;
        }
        getMaxOffset(t) {
          let e = 0;
          for (let i = 0, s = t.length; i < s; ++i) {
            const t = this.resolveDataElementOptions(i);
            e = Math.max(e, t.offset || 0, t.hoverOffset || 0);
          }
          return e;
        }
        _getRingWeightOffset(t) {
          let e = 0;
          for (let i = 0; i < t; ++i)
            this.chart.isDatasetVisible(i) && (e += this._getRingWeight(i));
          return e;
        }
        _getRingWeight(t) {
          return Math.max(ct(this.chart.data.datasets[t].weight, 1), 0);
        }
        _getVisibleDatasetWeightTotal() {
          return (
            this._getRingWeightOffset(this.chart.data.datasets.length) || 1
          );
        }
      }
      class bs extends rs {
        static id = "polarArea";
        static defaults = {
          dataElementType: "arc",
          animation: { animateRotate: !0, animateScale: !0 },
          animations: {
            numbers: {
              type: "number",
              properties: [
                "x",
                "y",
                "startAngle",
                "endAngle",
                "innerRadius",
                "outerRadius",
              ],
            },
          },
          indexAxis: "r",
          startAngle: 0,
        };
        static overrides = {
          aspectRatio: 1,
          plugins: {
            legend: {
              labels: {
                generateLabels(t) {
                  const e = t.data;
                  if (e.labels.length && e.datasets.length) {
                    const {
                      labels: { pointStyle: i, color: s },
                    } = t.legend.options;
                    return e.labels.map((e, n) => {
                      const o = t.getDatasetMeta(0).controller.getStyle(n);
                      return {
                        text: e,
                        fillStyle: o.backgroundColor,
                        strokeStyle: o.borderColor,
                        fontColor: s,
                        lineWidth: o.borderWidth,
                        pointStyle: i,
                        hidden: !t.getDataVisibility(n),
                        index: n,
                      };
                    });
                  }
                  return [];
                },
              },
              onClick(t, e, i) {
                i.chart.toggleDataVisibility(e.index), i.chart.update();
              },
            },
          },
          scales: {
            r: {
              type: "radialLinear",
              angleLines: { display: !1 },
              beginAtZero: !0,
              grid: { circular: !0 },
              pointLabels: { display: !1 },
              startAngle: 0,
            },
          },
        };
        constructor(t, e) {
          super(t, e), (this.innerRadius = void 0), (this.outerRadius = void 0);
        }
        getLabelAndValue(t) {
          const e = this._cachedMeta,
            i = this.chart,
            s = i.data.labels || [],
            n = ye(e._parsed[t].r, i.options.locale);
          return { label: s[t] || "", value: n };
        }
        parseObjectData(t, e, i, s) {
          return fi.bind(this)(t, e, i, s);
        }
        update(t) {
          const e = this._cachedMeta.data;
          this._updateRadius(), this.updateElements(e, 0, e.length, t);
        }
        getMinMax() {
          const t = this._cachedMeta,
            e = {
              min: Number.POSITIVE_INFINITY,
              max: Number.NEGATIVE_INFINITY,
            };
          return (
            t.data.forEach((t, i) => {
              const s = this.getParsed(i).r;
              !isNaN(s) &&
                this.chart.getDataVisibility(i) &&
                (s < e.min && (e.min = s), s > e.max && (e.max = s));
            }),
            e
          );
        }
        _updateRadius() {
          const t = this.chart,
            e = t.chartArea,
            i = t.options,
            s = Math.min(e.right - e.left, e.bottom - e.top),
            n = Math.max(s / 2, 0),
            o =
              (n -
                Math.max(
                  i.cutoutPercentage ? (n / 100) * i.cutoutPercentage : 1,
                  0,
                )) /
              t.getVisibleDatasetCount();
          (this.outerRadius = n - o * this.index),
            (this.innerRadius = this.outerRadius - o);
        }
        updateElements(t, e, i, s) {
          const n = "reset" === s,
            o = this.chart,
            a = o.options.animation,
            r = this._cachedMeta.rScale,
            l = r.xCenter,
            h = r.yCenter,
            c = r.getIndexAngle(0) - 0.5 * St;
          let d,
            u = c;
          const f = 360 / this.countVisibleElements();
          for (d = 0; d < e; ++d) u += this._computeAngle(d, s, f);
          for (d = e; d < e + i; d++) {
            const e = t[d];
            let i = u,
              g = u + this._computeAngle(d, s, f),
              p = o.getDataVisibility(d)
                ? r.getDistanceFromCenterForValue(this.getParsed(d).r)
                : 0;
            (u = g),
              n && (a.animateScale && (p = 0), a.animateRotate && (i = g = c));
            const m = {
              x: l,
              y: h,
              innerRadius: 0,
              outerRadius: p,
              startAngle: i,
              endAngle: g,
              options: this.resolveDataElementOptions(
                d,
                e.active ? "active" : s,
              ),
            };
            this.updateElement(e, d, m, s);
          }
        }
        countVisibleElements() {
          const t = this._cachedMeta;
          let e = 0;
          return (
            t.data.forEach((t, i) => {
              !isNaN(this.getParsed(i).r) &&
                this.chart.getDataVisibility(i) &&
                e++;
            }),
            e
          );
        }
        _computeAngle(t, e, i) {
          return this.chart.getDataVisibility(t)
            ? Nt(this.resolveDataElementOptions(t, e).angle || i)
            : 0;
        }
      }
      var xs = Object.freeze({
        __proto__: null,
        BarController: class extends rs {
          static id = "bar";
          static defaults = {
            datasetElementType: !1,
            dataElementType: "bar",
            categoryPercentage: 0.8,
            barPercentage: 0.9,
            grouped: !0,
            animations: {
              numbers: {
                type: "number",
                properties: ["x", "y", "base", "width", "height"],
              },
            },
          };
          static overrides = {
            scales: {
              _index_: { type: "category", offset: !0, grid: { offset: !0 } },
              _value_: { type: "linear", beginAtZero: !0 },
            },
          };
          parsePrimitiveData(t, e, i, s) {
            return cs(t, e, i, s);
          }
          parseArrayData(t, e, i, s) {
            return cs(t, e, i, s);
          }
          parseObjectData(t, e, i, s) {
            const { iScale: n, vScale: o } = t,
              { xAxisKey: a = "x", yAxisKey: r = "y" } = this._parsing,
              l = "x" === n.axis ? a : r,
              h = "x" === o.axis ? a : r,
              c = [];
            let d, u, f, g;
            for (d = i, u = i + s; d < u; ++d)
              (g = e[d]),
                (f = {}),
                (f[n.axis] = n.parse(At(g, l), d)),
                c.push(hs(At(g, h), f, o, d));
            return c;
          }
          updateRangeFromParsed(t, e, i, s) {
            super.updateRangeFromParsed(t, e, i, s);
            const n = i._custom;
            n &&
              e === this._cachedMeta.vScale &&
              ((t.min = Math.min(t.min, n.min)),
              (t.max = Math.max(t.max, n.max)));
          }
          getMaxOverflow() {
            return 0;
          }
          getLabelAndValue(t) {
            const e = this._cachedMeta,
              { iScale: i, vScale: s } = e,
              n = this.getParsed(t),
              o = n._custom,
              a = ds(o)
                ? "[" + o.start + ", " + o.end + "]"
                : "" + s.getLabelForValue(n[s.axis]);
            return { label: "" + i.getLabelForValue(n[i.axis]), value: a };
          }
          initialize() {
            (this.enableOptionSharing = !0),
              super.initialize(),
              (this._cachedMeta.stack = this.getDataset().stack);
          }
          update(t) {
            const e = this._cachedMeta;
            this.updateElements(e.data, 0, e.data.length, t);
          }
          updateElements(t, e, i, s) {
            const n = "reset" === s,
              {
                index: o,
                _cachedMeta: { vScale: a },
              } = this,
              r = a.getBasePixel(),
              l = a.isHorizontal(),
              h = this._getRuler(),
              { sharedOptions: c, includeOptions: d } = this._getSharedOptions(
                e,
                s,
              );
            for (let u = e; u < e + i; u++) {
              const e = this.getParsed(u),
                i =
                  n || ot(e[a.axis])
                    ? { base: r, head: r }
                    : this._calculateBarValuePixels(u),
                f = this._calculateBarIndexPixels(u, h),
                g = (e._stacks || {})[a.axis],
                p = {
                  horizontal: l,
                  base: i.base,
                  enableBorderRadius:
                    !g || ds(e._custom) || o === g._top || o === g._bottom,
                  x: l ? i.head : f.center,
                  y: l ? f.center : i.head,
                  height: l ? f.size : Math.abs(i.size),
                  width: l ? Math.abs(i.size) : f.size,
                };
              d &&
                (p.options =
                  c ||
                  this.resolveDataElementOptions(
                    u,
                    t[u].active ? "active" : s,
                  ));
              const m = p.options || t[u].options;
              us(p, m, g, o),
                ps(p, m, h.ratio),
                this.updateElement(t[u], u, p, s);
            }
          }
          _getStacks(t, e) {
            const { iScale: i } = this._cachedMeta,
              s = i
                .getMatchingVisibleMetas(this._type)
                .filter((t) => t.controller.options.grouped),
              n = i.options.stacked,
              o = [],
              a = (t) => {
                const i = t.controller.getParsed(e),
                  s = i && i[t.vScale.axis];
                if (ot(s) || isNaN(s)) return !0;
              };
            for (const i of s)
              if (
                (void 0 === e || !a(i)) &&
                ((!1 === n ||
                  -1 === o.indexOf(i.stack) ||
                  (void 0 === n && void 0 === i.stack)) &&
                  o.push(i.stack),
                i.index === t)
              )
                break;
            return o.length || o.push(void 0), o;
          }
          _getStackCount(t) {
            return this._getStacks(void 0, t).length;
          }
          _getStackIndex(t, e, i) {
            const s = this._getStacks(t, i),
              n = void 0 !== e ? s.indexOf(e) : -1;
            return -1 === n ? s.length - 1 : n;
          }
          _getRuler() {
            const t = this.options,
              e = this._cachedMeta,
              i = e.iScale,
              s = [];
            let n, o;
            for (n = 0, o = e.data.length; n < o; ++n)
              s.push(i.getPixelForValue(this.getParsed(n)[i.axis], n));
            const a = t.barThickness;
            return {
              min: a || ls(e),
              pixels: s,
              start: i._startPixel,
              end: i._endPixel,
              stackCount: this._getStackCount(),
              scale: i,
              grouped: t.grouped,
              ratio: a ? 1 : t.categoryPercentage * t.barPercentage,
            };
          }
          _calculateBarValuePixels(t) {
            const {
                _cachedMeta: { vScale: e, _stacked: i, index: s },
                options: { base: n, minBarLength: o },
              } = this,
              a = n || 0,
              r = this.getParsed(t),
              l = r._custom,
              h = ds(l);
            let c,
              d,
              u = r[e.axis],
              f = 0,
              g = i ? this.applyStack(e, r, i) : u;
            g !== u && ((f = g - u), (g = u)),
              h &&
                ((u = l.barStart),
                (g = l.barEnd - l.barStart),
                0 !== u && It(u) !== It(l.barEnd) && (f = 0),
                (f += u));
            const p = ot(n) || h ? f : n;
            let m = e.getPixelForValue(p);
            if (
              ((c = this.chart.getDataVisibility(t)
                ? e.getPixelForValue(f + g)
                : m),
              (d = c - m),
              Math.abs(d) < o)
            ) {
              (d =
                (function (t, e, i) {
                  return 0 !== t
                    ? It(t)
                    : (e.isHorizontal() ? 1 : -1) * (e.min >= i ? 1 : -1);
                })(d, e, a) * o),
                u === a && (m -= d / 2);
              const t = e.getPixelForDecimal(0),
                n = e.getPixelForDecimal(1),
                l = Math.min(t, n),
                f = Math.max(t, n);
              (m = Math.max(Math.min(m, f), l)),
                (c = m + d),
                i &&
                  !h &&
                  (r._stacks[e.axis]._visualValues[s] =
                    e.getValueForPixel(c) - e.getValueForPixel(m));
            }
            if (m === e.getPixelForValue(a)) {
              const t = (It(d) * e.getLineWidthForValue(a)) / 2;
              (m += t), (d -= t);
            }
            return { size: d, base: m, head: c, center: c + d / 2 };
          }
          _calculateBarIndexPixels(t, e) {
            const i = e.scale,
              s = this.options,
              n = s.skipNull,
              o = ct(s.maxBarThickness, 1 / 0);
            let a, r;
            if (e.grouped) {
              const i = n ? this._getStackCount(t) : e.stackCount,
                l =
                  "flex" === s.barThickness
                    ? (function (t, e, i, s) {
                        const n = e.pixels,
                          o = n[t];
                        let a = t > 0 ? n[t - 1] : null,
                          r = t < n.length - 1 ? n[t + 1] : null;
                        const l = i.categoryPercentage;
                        null === a &&
                          (a = o - (null === r ? e.end - e.start : r - o)),
                          null === r && (r = o + o - a);
                        const h = o - ((o - Math.min(a, r)) / 2) * l;
                        return {
                          chunk: ((Math.abs(r - a) / 2) * l) / s,
                          ratio: i.barPercentage,
                          start: h,
                        };
                      })(t, e, s, i)
                    : (function (t, e, i, s) {
                        const n = i.barThickness;
                        let o, a;
                        return (
                          ot(n)
                            ? ((o = e.min * i.categoryPercentage),
                              (a = i.barPercentage))
                            : ((o = n * s), (a = 1)),
                          { chunk: o / s, ratio: a, start: e.pixels[t] - o / 2 }
                        );
                      })(t, e, s, i),
                h = this._getStackIndex(
                  this.index,
                  this._cachedMeta.stack,
                  n ? t : void 0,
                );
              (a = l.start + l.chunk * h + l.chunk / 2),
                (r = Math.min(o, l.chunk * l.ratio));
            } else
              (a = i.getPixelForValue(this.getParsed(t)[i.axis], t)),
                (r = Math.min(o, e.min * e.ratio));
            return { base: a - r / 2, head: a + r / 2, center: a, size: r };
          }
          draw() {
            const t = this._cachedMeta,
              e = t.vScale,
              i = t.data,
              s = i.length;
            let n = 0;
            for (; n < s; ++n)
              null !== this.getParsed(n)[e.axis] && i[n].draw(this._ctx);
          }
        },
        BubbleController: class extends rs {
          static id = "bubble";
          static defaults = {
            datasetElementType: !1,
            dataElementType: "point",
            animations: {
              numbers: {
                type: "number",
                properties: ["x", "y", "borderWidth", "radius"],
              },
            },
          };
          static overrides = {
            scales: { x: { type: "linear" }, y: { type: "linear" } },
          };
          initialize() {
            (this.enableOptionSharing = !0), super.initialize();
          }
          parsePrimitiveData(t, e, i, s) {
            const n = super.parsePrimitiveData(t, e, i, s);
            for (let t = 0; t < n.length; t++)
              n[t]._custom = this.resolveDataElementOptions(t + i).radius;
            return n;
          }
          parseArrayData(t, e, i, s) {
            const n = super.parseArrayData(t, e, i, s);
            for (let t = 0; t < n.length; t++) {
              const s = e[i + t];
              n[t]._custom = ct(
                s[2],
                this.resolveDataElementOptions(t + i).radius,
              );
            }
            return n;
          }
          parseObjectData(t, e, i, s) {
            const n = super.parseObjectData(t, e, i, s);
            for (let t = 0; t < n.length; t++) {
              const s = e[i + t];
              n[t]._custom = ct(
                s && s.r && +s.r,
                this.resolveDataElementOptions(t + i).radius,
              );
            }
            return n;
          }
          getMaxOverflow() {
            const t = this._cachedMeta.data;
            let e = 0;
            for (let i = t.length - 1; i >= 0; --i)
              e = Math.max(e, t[i].size(this.resolveDataElementOptions(i)) / 2);
            return e > 0 && e;
          }
          getLabelAndValue(t) {
            const e = this._cachedMeta,
              i = this.chart.data.labels || [],
              { xScale: s, yScale: n } = e,
              o = this.getParsed(t),
              a = s.getLabelForValue(o.x),
              r = n.getLabelForValue(o.y),
              l = o._custom;
            return {
              label: i[t] || "",
              value: "(" + a + ", " + r + (l ? ", " + l : "") + ")",
            };
          }
          update(t) {
            const e = this._cachedMeta.data;
            this.updateElements(e, 0, e.length, t);
          }
          updateElements(t, e, i, s) {
            const n = "reset" === s,
              { iScale: o, vScale: a } = this._cachedMeta,
              { sharedOptions: r, includeOptions: l } = this._getSharedOptions(
                e,
                s,
              ),
              h = o.axis,
              c = a.axis;
            for (let d = e; d < e + i; d++) {
              const e = t[d],
                i = !n && this.getParsed(d),
                u = {},
                f = (u[h] = n
                  ? o.getPixelForDecimal(0.5)
                  : o.getPixelForValue(i[h])),
                g = (u[c] = n ? a.getBasePixel() : a.getPixelForValue(i[c]));
              (u.skip = isNaN(f) || isNaN(g)),
                l &&
                  ((u.options =
                    r ||
                    this.resolveDataElementOptions(d, e.active ? "active" : s)),
                  n && (u.options.radius = 0)),
                this.updateElement(e, d, u, s);
            }
          }
          resolveDataElementOptions(t, e) {
            const i = this.getParsed(t);
            let s = super.resolveDataElementOptions(t, e);
            s.$shared && (s = Object.assign({}, s, { $shared: !1 }));
            const n = s.radius;
            return (
              "active" !== e && (s.radius = 0),
              (s.radius += ct(i && i._custom, n)),
              s
            );
          }
        },
        DoughnutController: ms,
        LineController: class extends rs {
          static id = "line";
          static defaults = {
            datasetElementType: "line",
            dataElementType: "point",
            showLine: !0,
            spanGaps: !1,
          };
          static overrides = {
            scales: {
              _index_: { type: "category" },
              _value_: { type: "linear" },
            },
          };
          initialize() {
            (this.enableOptionSharing = !0),
              (this.supportsDecimation = !0),
              super.initialize();
          }
          update(t) {
            const e = this._cachedMeta,
              { dataset: i, data: s = [], _dataset: n } = e,
              o = this.chart._animationsDisabled;
            let { start: a, count: r } = re(e, s, o);
            (this._drawStart = a),
              (this._drawCount = r),
              le(e) && ((a = 0), (r = s.length)),
              (i._chart = this.chart),
              (i._datasetIndex = this.index),
              (i._decimated = !!n._decimated),
              (i.points = s);
            const l = this.resolveDatasetElementOptions(t);
            this.options.showLine || (l.borderWidth = 0),
              (l.segment = this.options.segment),
              this.updateElement(i, void 0, { animated: !o, options: l }, t),
              this.updateElements(s, a, r, t);
          }
          updateElements(t, e, i, s) {
            const n = "reset" === s,
              {
                iScale: o,
                vScale: a,
                _stacked: r,
                _dataset: l,
              } = this._cachedMeta,
              { sharedOptions: h, includeOptions: c } = this._getSharedOptions(
                e,
                s,
              ),
              d = o.axis,
              u = a.axis,
              { spanGaps: f, segment: g } = this.options,
              p = Wt(f) ? f : Number.POSITIVE_INFINITY,
              m = this.chart._animationsDisabled || n || "none" === s,
              b = e + i,
              x = t.length;
            let y = e > 0 && this.getParsed(e - 1);
            for (let i = 0; i < x; ++i) {
              const f = t[i],
                x = m ? f : {};
              if (i < e || i >= b) {
                x.skip = !0;
                continue;
              }
              const _ = this.getParsed(i),
                v = ot(_[u]),
                A = (x[d] = o.getPixelForValue(_[d], i)),
                w = (x[u] =
                  n || v
                    ? a.getBasePixel()
                    : a.getPixelForValue(
                        r ? this.applyStack(a, _, r) : _[u],
                        i,
                      ));
              (x.skip = isNaN(A) || isNaN(w) || v),
                (x.stop = i > 0 && Math.abs(_[d] - y[d]) > p),
                g && ((x.parsed = _), (x.raw = l.data[i])),
                c &&
                  (x.options =
                    h ||
                    this.resolveDataElementOptions(i, f.active ? "active" : s)),
                m || this.updateElement(f, i, x, s),
                (y = _);
            }
          }
          getMaxOverflow() {
            const t = this._cachedMeta,
              e = t.dataset,
              i = (e.options && e.options.borderWidth) || 0,
              s = t.data || [];
            if (!s.length) return i;
            const n = s[0].size(this.resolveDataElementOptions(0)),
              o = s[s.length - 1].size(
                this.resolveDataElementOptions(s.length - 1),
              );
            return Math.max(i, n, o) / 2;
          }
          draw() {
            const t = this._cachedMeta;
            t.dataset.updateControlPoints(this.chart.chartArea, t.iScale.axis),
              super.draw();
          }
        },
        PieController: class extends ms {
          static id = "pie";
          static defaults = {
            cutout: 0,
            rotation: 0,
            circumference: 360,
            radius: "100%",
          };
        },
        PolarAreaController: bs,
        RadarController: class extends rs {
          static id = "radar";
          static defaults = {
            datasetElementType: "line",
            dataElementType: "point",
            indexAxis: "r",
            showLine: !0,
            elements: { line: { fill: "start" } },
          };
          static overrides = {
            aspectRatio: 1,
            scales: { r: { type: "radialLinear" } },
          };
          getLabelAndValue(t) {
            const e = this._cachedMeta.vScale,
              i = this.getParsed(t);
            return {
              label: e.getLabels()[t],
              value: "" + e.getLabelForValue(i[e.axis]),
            };
          }
          parseObjectData(t, e, i, s) {
            return fi.bind(this)(t, e, i, s);
          }
          update(t) {
            const e = this._cachedMeta,
              i = e.dataset,
              s = e.data || [],
              n = e.iScale.getLabels();
            if (((i.points = s), "resize" !== t)) {
              const e = this.resolveDatasetElementOptions(t);
              this.options.showLine || (e.borderWidth = 0);
              const o = {
                _loop: !0,
                _fullLoop: n.length === s.length,
                options: e,
              };
              this.updateElement(i, void 0, o, t);
            }
            this.updateElements(s, 0, s.length, t);
          }
          updateElements(t, e, i, s) {
            const n = this._cachedMeta.rScale,
              o = "reset" === s;
            for (let a = e; a < e + i; a++) {
              const e = t[a],
                i = this.resolveDataElementOptions(a, e.active ? "active" : s),
                r = n.getPointPositionForValue(a, this.getParsed(a).r),
                l = o ? n.xCenter : r.x,
                h = o ? n.yCenter : r.y,
                c = {
                  x: l,
                  y: h,
                  angle: r.angle,
                  skip: isNaN(l) || isNaN(h),
                  options: i,
                };
              this.updateElement(e, a, c, s);
            }
          }
        },
        ScatterController: class extends rs {
          static id = "scatter";
          static defaults = {
            datasetElementType: !1,
            dataElementType: "point",
            showLine: !1,
            fill: !1,
          };
          static overrides = {
            interaction: { mode: "point" },
            scales: { x: { type: "linear" }, y: { type: "linear" } },
          };
          getLabelAndValue(t) {
            const e = this._cachedMeta,
              i = this.chart.data.labels || [],
              { xScale: s, yScale: n } = e,
              o = this.getParsed(t),
              a = s.getLabelForValue(o.x),
              r = n.getLabelForValue(o.y);
            return { label: i[t] || "", value: "(" + a + ", " + r + ")" };
          }
          update(t) {
            const e = this._cachedMeta,
              { data: i = [] } = e,
              s = this.chart._animationsDisabled;
            let { start: n, count: o } = re(e, i, s);
            if (
              ((this._drawStart = n),
              (this._drawCount = o),
              le(e) && ((n = 0), (o = i.length)),
              this.options.showLine)
            ) {
              this.datasetElementType || this.addElements();
              const { dataset: n, _dataset: o } = e;
              (n._chart = this.chart),
                (n._datasetIndex = this.index),
                (n._decimated = !!o._decimated),
                (n.points = i);
              const a = this.resolveDatasetElementOptions(t);
              (a.segment = this.options.segment),
                this.updateElement(n, void 0, { animated: !s, options: a }, t);
            } else
              this.datasetElementType &&
                (delete e.dataset, (this.datasetElementType = !1));
            this.updateElements(i, n, o, t);
          }
          addElements() {
            const { showLine: t } = this.options;
            !this.datasetElementType &&
              t &&
              (this.datasetElementType =
                this.chart.registry.getElement("line")),
              super.addElements();
          }
          updateElements(t, e, i, s) {
            const n = "reset" === s,
              {
                iScale: o,
                vScale: a,
                _stacked: r,
                _dataset: l,
              } = this._cachedMeta,
              h = this.resolveDataElementOptions(e, s),
              c = this.getSharedOptions(h),
              d = this.includeOptions(s, c),
              u = o.axis,
              f = a.axis,
              { spanGaps: g, segment: p } = this.options,
              m = Wt(g) ? g : Number.POSITIVE_INFINITY,
              b = this.chart._animationsDisabled || n || "none" === s;
            let x = e > 0 && this.getParsed(e - 1);
            for (let h = e; h < e + i; ++h) {
              const e = t[h],
                i = this.getParsed(h),
                g = b ? e : {},
                y = ot(i[f]),
                _ = (g[u] = o.getPixelForValue(i[u], h)),
                v = (g[f] =
                  n || y
                    ? a.getBasePixel()
                    : a.getPixelForValue(
                        r ? this.applyStack(a, i, r) : i[f],
                        h,
                      ));
              (g.skip = isNaN(_) || isNaN(v) || y),
                (g.stop = h > 0 && Math.abs(i[u] - x[u]) > m),
                p && ((g.parsed = i), (g.raw = l.data[h])),
                d &&
                  (g.options =
                    c ||
                    this.resolveDataElementOptions(h, e.active ? "active" : s)),
                b || this.updateElement(e, h, g, s),
                (x = i);
            }
            this.updateSharedOptions(c, s, h);
          }
          getMaxOverflow() {
            const t = this._cachedMeta,
              e = t.data || [];
            if (!this.options.showLine) {
              let t = 0;
              for (let i = e.length - 1; i >= 0; --i)
                t = Math.max(
                  t,
                  e[i].size(this.resolveDataElementOptions(i)) / 2,
                );
              return t > 0 && t;
            }
            const i = t.dataset,
              s = (i.options && i.options.borderWidth) || 0;
            if (!e.length) return s;
            const n = e[0].size(this.resolveDataElementOptions(0)),
              o = e[e.length - 1].size(
                this.resolveDataElementOptions(e.length - 1),
              );
            return Math.max(s, n, o) / 2;
          }
        },
      });
      function ys() {
        throw new Error(
          "This method is not implemented: Check that a complete date adapter is provided.",
        );
      }
      class _s {
        static override(t) {
          Object.assign(_s.prototype, t);
        }
        options;
        constructor(t) {
          this.options = t || {};
        }
        init() {}
        formats() {
          return ys();
        }
        parse() {
          return ys();
        }
        format() {
          return ys();
        }
        add() {
          return ys();
        }
        diff() {
          return ys();
        }
        startOf() {
          return ys();
        }
        endOf() {
          return ys();
        }
      }
      var vs = _s;
      function As(t, e, i, s) {
        const { controller: n, data: o, _sorted: a } = t,
          r = n._cachedMeta.iScale;
        if (r && e === r.axis && "r" !== e && a && o.length) {
          const t = r._reversePixels ? Qt : Jt;
          if (!s) return t(o, e, i);
          if (n._sharedOptions) {
            const s = o[0],
              n = "function" == typeof s.getRange && s.getRange(e);
            if (n) {
              const s = t(o, e, i - n),
                a = t(o, e, i + n);
              return { lo: s.lo, hi: a.hi };
            }
          }
        }
        return { lo: 0, hi: o.length - 1 };
      }
      function ws(t, e, i, s, n) {
        const o = t.getSortedVisibleDatasetMetas(),
          a = i[e];
        for (let t = 0, i = o.length; t < i; ++t) {
          const { index: i, data: r } = o[t],
            { lo: l, hi: h } = As(o[t], e, a, n);
          for (let t = l; t <= h; ++t) {
            const e = r[t];
            e.skip || s(e, i, t);
          }
        }
      }
      function Ms(t, e, i, s, n) {
        const o = [];
        return n || t.isPointInArea(e)
          ? (ws(
              t,
              i,
              e,
              function (i, a, r) {
                (n || Re(i, t.chartArea, 0)) &&
                  i.inRange(e.x, e.y, s) &&
                  o.push({ element: i, datasetIndex: a, index: r });
              },
              !0,
            ),
            o)
          : o;
      }
      function ks(t, e, i, s, n, o) {
        return o || t.isPointInArea(e)
          ? "r" !== i || s
            ? (function (t, e, i, s, n, o) {
                let a = [];
                const r = (function (t) {
                  const e = -1 !== t.indexOf("x"),
                    i = -1 !== t.indexOf("y");
                  return function (t, s) {
                    const n = e ? Math.abs(t.x - s.x) : 0,
                      o = i ? Math.abs(t.y - s.y) : 0;
                    return Math.sqrt(Math.pow(n, 2) + Math.pow(o, 2));
                  };
                })(i);
                let l = Number.POSITIVE_INFINITY;
                return (
                  ws(t, i, e, function (i, h, c) {
                    const d = i.inRange(e.x, e.y, n);
                    if (s && !d) return;
                    const u = i.getCenterPoint(n);
                    if (!o && !t.isPointInArea(u) && !d) return;
                    const f = r(e, u);
                    f < l
                      ? ((a = [{ element: i, datasetIndex: h, index: c }]),
                        (l = f))
                      : f === l &&
                        a.push({ element: i, datasetIndex: h, index: c });
                  }),
                  a
                );
              })(t, e, i, s, n, o)
            : (function (t, e, i, s) {
                let n = [];
                return (
                  ws(t, i, e, function (t, i, o) {
                    const { startAngle: a, endAngle: r } = t.getProps(
                        ["startAngle", "endAngle"],
                        s,
                      ),
                      { angle: l } = $t(t, { x: e.x, y: e.y });
                    Zt(l, a, r) &&
                      n.push({ element: t, datasetIndex: i, index: o });
                  }),
                  n
                );
              })(t, e, i, n)
          : [];
      }
      function Cs(t, e, i, s, n) {
        const o = [],
          a = "x" === i ? "inXRange" : "inYRange";
        let r = !1;
        return (
          ws(t, i, e, (t, s, l) => {
            t[a](e[i], n) &&
              (o.push({ element: t, datasetIndex: s, index: l }),
              (r = r || t.inRange(e.x, e.y, n)));
          }),
          s && !r ? [] : o
        );
      }
      var Ss = {
        evaluateInteractionItems: ws,
        modes: {
          index(t, e, i, s) {
            const n = Si(e, t),
              o = i.axis || "x",
              a = i.includeInvisible || !1,
              r = i.intersect ? Ms(t, n, o, s, a) : ks(t, n, o, !1, s, a),
              l = [];
            return r.length
              ? (t.getSortedVisibleDatasetMetas().forEach((t) => {
                  const e = r[0].index,
                    i = t.data[e];
                  i &&
                    !i.skip &&
                    l.push({ element: i, datasetIndex: t.index, index: e });
                }),
                l)
              : [];
          },
          dataset(t, e, i, s) {
            const n = Si(e, t),
              o = i.axis || "xy",
              a = i.includeInvisible || !1;
            let r = i.intersect ? Ms(t, n, o, s, a) : ks(t, n, o, !1, s, a);
            if (r.length > 0) {
              const e = r[0].datasetIndex,
                i = t.getDatasetMeta(e).data;
              r = [];
              for (let t = 0; t < i.length; ++t)
                r.push({ element: i[t], datasetIndex: e, index: t });
            }
            return r;
          },
          point: (t, e, i, s) =>
            Ms(t, Si(e, t), i.axis || "xy", s, i.includeInvisible || !1),
          nearest(t, e, i, s) {
            const n = Si(e, t),
              o = i.axis || "xy",
              a = i.includeInvisible || !1;
            return ks(t, n, o, i.intersect, s, a);
          },
          x: (t, e, i, s) => Cs(t, Si(e, t), "x", i.intersect, s),
          y: (t, e, i, s) => Cs(t, Si(e, t), "y", i.intersect, s),
        },
      };
      const Ds = ["left", "top", "right", "bottom"];
      function Es(t, e) {
        return t.filter((t) => t.pos === e);
      }
      function Ps(t, e) {
        return t.filter((t) => -1 === Ds.indexOf(t.pos) && t.box.axis === e);
      }
      function Os(t, e) {
        return t.sort((t, i) => {
          const s = e ? i : t,
            n = e ? t : i;
          return s.weight === n.weight
            ? s.index - n.index
            : s.weight - n.weight;
        });
      }
      function Ts(t, e, i, s) {
        return Math.max(t[i], e[i]) + Math.max(t[s], e[s]);
      }
      function Ls(t, e) {
        (t.top = Math.max(t.top, e.top)),
          (t.left = Math.max(t.left, e.left)),
          (t.bottom = Math.max(t.bottom, e.bottom)),
          (t.right = Math.max(t.right, e.right));
      }
      function Rs(t, e, i, s) {
        const { pos: n, box: o } = i,
          a = t.maxPadding;
        if (!rt(n)) {
          i.size && (t[n] -= i.size);
          const e = s[i.stack] || { size: 0, count: 1 };
          (e.size = Math.max(e.size, i.horizontal ? o.height : o.width)),
            (i.size = e.size / e.count),
            (t[n] += i.size);
        }
        o.getPadding && Ls(a, o.getPadding());
        const r = Math.max(0, e.outerWidth - Ts(a, t, "left", "right")),
          l = Math.max(0, e.outerHeight - Ts(a, t, "top", "bottom")),
          h = r !== t.w,
          c = l !== t.h;
        return (
          (t.w = r),
          (t.h = l),
          i.horizontal ? { same: h, other: c } : { same: c, other: h }
        );
      }
      function Bs(t, e) {
        const i = e.maxPadding;
        return (function (t) {
          const s = { left: 0, top: 0, right: 0, bottom: 0 };
          return (
            t.forEach((t) => {
              s[t] = Math.max(e[t], i[t]);
            }),
            s
          );
        })(t ? ["left", "right"] : ["top", "bottom"]);
      }
      function Is(t, e, i, s) {
        const n = [];
        let o, a, r, l, h, c;
        for (o = 0, a = t.length, h = 0; o < a; ++o) {
          (r = t[o]),
            (l = r.box),
            l.update(r.width || e.w, r.height || e.h, Bs(r.horizontal, e));
          const { same: a, other: d } = Rs(e, i, r, s);
          (h |= a && n.length), (c = c || d), l.fullSize || n.push(r);
        }
        return (h && Is(n, e, i, s)) || c;
      }
      function zs(t, e, i, s, n) {
        (t.top = i),
          (t.left = e),
          (t.right = e + s),
          (t.bottom = i + n),
          (t.width = s),
          (t.height = n);
      }
      function Fs(t, e, i, s) {
        const n = i.padding;
        let { x: o, y: a } = e;
        for (const r of t) {
          const t = r.box,
            l = s[r.stack] || { count: 1, placed: 0, weight: 1 },
            h = r.stackWeight / l.weight || 1;
          if (r.horizontal) {
            const s = e.w * h,
              o = l.size || t.height;
            Mt(l.start) && (a = l.start),
              t.fullSize
                ? zs(t, n.left, a, i.outerWidth - n.right - n.left, o)
                : zs(t, e.left + l.placed, a, s, o),
              (l.start = a),
              (l.placed += s),
              (a = t.bottom);
          } else {
            const s = e.h * h,
              a = l.size || t.width;
            Mt(l.start) && (o = l.start),
              t.fullSize
                ? zs(t, o, n.top, a, i.outerHeight - n.bottom - n.top)
                : zs(t, o, e.top + l.placed, a, s),
              (l.start = o),
              (l.placed += s),
              (o = t.right);
          }
        }
        (e.x = o), (e.y = a);
      }
      var Ws = {
        addBox(t, e) {
          t.boxes || (t.boxes = []),
            (e.fullSize = e.fullSize || !1),
            (e.position = e.position || "top"),
            (e.weight = e.weight || 0),
            (e._layers =
              e._layers ||
              function () {
                return [
                  {
                    z: 0,
                    draw(t) {
                      e.draw(t);
                    },
                  },
                ];
              }),
            t.boxes.push(e);
        },
        removeBox(t, e) {
          const i = t.boxes ? t.boxes.indexOf(e) : -1;
          -1 !== i && t.boxes.splice(i, 1);
        },
        configure(t, e, i) {
          (e.fullSize = i.fullSize),
            (e.position = i.position),
            (e.weight = i.weight);
        },
        update(t, e, i, s) {
          if (!t) return;
          const n = Ke(t.options.layout.padding),
            o = Math.max(e - n.width, 0),
            a = Math.max(i - n.height, 0),
            r = (function (t) {
              const e = (function (t) {
                  const e = [];
                  let i, s, n, o, a, r;
                  for (i = 0, s = (t || []).length; i < s; ++i)
                    (n = t[i]),
                      ({
                        position: o,
                        options: { stack: a, stackWeight: r = 1 },
                      } = n),
                      e.push({
                        index: i,
                        box: n,
                        pos: o,
                        horizontal: n.isHorizontal(),
                        weight: n.weight,
                        stack: a && o + a,
                        stackWeight: r,
                      });
                  return e;
                })(t),
                i = Os(
                  e.filter((t) => t.box.fullSize),
                  !0,
                ),
                s = Os(Es(e, "left"), !0),
                n = Os(Es(e, "right")),
                o = Os(Es(e, "top"), !0),
                a = Os(Es(e, "bottom")),
                r = Ps(e, "x"),
                l = Ps(e, "y");
              return {
                fullSize: i,
                leftAndTop: s.concat(o),
                rightAndBottom: n.concat(l).concat(a).concat(r),
                chartArea: Es(e, "chartArea"),
                vertical: s.concat(n).concat(l),
                horizontal: o.concat(a).concat(r),
              };
            })(t.boxes),
            l = r.vertical,
            h = r.horizontal;
          ft(t.boxes, (t) => {
            "function" == typeof t.beforeLayout && t.beforeLayout();
          });
          const c =
              l.reduce(
                (t, e) =>
                  e.box.options && !1 === e.box.options.display ? t : t + 1,
                0,
              ) || 1,
            d = Object.freeze({
              outerWidth: e,
              outerHeight: i,
              padding: n,
              availableWidth: o,
              availableHeight: a,
              vBoxMaxWidth: o / 2 / c,
              hBoxMaxHeight: a / 2,
            }),
            u = Object.assign({}, n);
          Ls(u, Ke(s));
          const f = Object.assign(
              { maxPadding: u, w: o, h: a, x: n.left, y: n.top },
              n,
            ),
            g = (function (t, e) {
              const i = (function (t) {
                  const e = {};
                  for (const i of t) {
                    const { stack: t, pos: s, stackWeight: n } = i;
                    if (!t || !Ds.includes(s)) continue;
                    const o =
                      e[t] ||
                      (e[t] = { count: 0, placed: 0, weight: 0, size: 0 });
                    o.count++, (o.weight += n);
                  }
                  return e;
                })(t),
                { vBoxMaxWidth: s, hBoxMaxHeight: n } = e;
              let o, a, r;
              for (o = 0, a = t.length; o < a; ++o) {
                r = t[o];
                const { fullSize: a } = r.box,
                  l = i[r.stack],
                  h = l && r.stackWeight / l.weight;
                r.horizontal
                  ? ((r.width = h ? h * s : a && e.availableWidth),
                    (r.height = n))
                  : ((r.width = s),
                    (r.height = h ? h * n : a && e.availableHeight));
              }
              return i;
            })(l.concat(h), d);
          Is(r.fullSize, f, d, g),
            Is(l, f, d, g),
            Is(h, f, d, g) && Is(l, f, d, g),
            (function (t) {
              const e = t.maxPadding;
              function i(i) {
                const s = Math.max(e[i] - t[i], 0);
                return (t[i] += s), s;
              }
              (t.y += i("top")), (t.x += i("left")), i("right"), i("bottom");
            })(f),
            Fs(r.leftAndTop, f, d, g),
            (f.x += f.w),
            (f.y += f.h),
            Fs(r.rightAndBottom, f, d, g),
            (t.chartArea = {
              left: f.left,
              top: f.top,
              right: f.left + f.w,
              bottom: f.top + f.h,
              height: f.h,
              width: f.w,
            }),
            ft(r.chartArea, (e) => {
              const i = e.box;
              Object.assign(i, t.chartArea),
                i.update(f.w, f.h, { left: 0, top: 0, right: 0, bottom: 0 });
            });
        },
      };
      class Vs {
        acquireContext(t, e) {}
        releaseContext(t) {
          return !1;
        }
        addEventListener(t, e, i) {}
        removeEventListener(t, e, i) {}
        getDevicePixelRatio() {
          return 1;
        }
        getMaximumSize(t, e, i, s) {
          return (
            (e = Math.max(0, e || t.width)),
            (i = i || t.height),
            { width: e, height: Math.max(0, s ? Math.floor(e / s) : i) }
          );
        }
        isAttached(t) {
          return !0;
        }
        updateConfig(t) {}
      }
      class Ns extends Vs {
        acquireContext(t) {
          return (t && t.getContext && t.getContext("2d")) || null;
        }
        updateConfig(t) {
          t.options.animation = !1;
        }
      }
      const js = "$chartjs",
        Hs = {
          touchstart: "mousedown",
          touchmove: "mousemove",
          touchend: "mouseup",
          pointerenter: "mouseenter",
          pointerdown: "mousedown",
          pointermove: "mousemove",
          pointerup: "mouseup",
          pointerleave: "mouseout",
          pointerout: "mouseout",
        },
        $s = (t) => null === t || "" === t,
        Ys = !!Pi && { passive: !0 };
      function Us(t, e, i) {
        t.canvas.removeEventListener(e, i, Ys);
      }
      function Xs(t, e) {
        for (const i of t) if (i === e || i.contains(e)) return !0;
      }
      function Zs(t, e, i) {
        const s = t.canvas,
          n = new MutationObserver((t) => {
            let e = !1;
            for (const i of t)
              (e = e || Xs(i.addedNodes, s)), (e = e && !Xs(i.removedNodes, s));
            e && i();
          });
        return n.observe(document, { childList: !0, subtree: !0 }), n;
      }
      function qs(t, e, i) {
        const s = t.canvas,
          n = new MutationObserver((t) => {
            let e = !1;
            for (const i of t)
              (e = e || Xs(i.removedNodes, s)), (e = e && !Xs(i.addedNodes, s));
            e && i();
          });
        return n.observe(document, { childList: !0, subtree: !0 }), n;
      }
      const Ks = new Map();
      let Gs = 0;
      function Js() {
        const t = window.devicePixelRatio;
        t !== Gs &&
          ((Gs = t),
          Ks.forEach((e, i) => {
            i.currentDevicePixelRatio !== t && e();
          }));
      }
      function Qs(t, e, i) {
        const s = t.canvas,
          n = s && vi(s);
        if (!n) return;
        const o = ne((t, e) => {
            const s = n.clientWidth;
            i(t, e), s < n.clientWidth && i();
          }, window),
          a = new ResizeObserver((t) => {
            const e = t[0],
              i = e.contentRect.width,
              s = e.contentRect.height;
            (0 === i && 0 === s) || o(i, s);
          });
        return (
          a.observe(n),
          (function (t, e) {
            Ks.size || window.addEventListener("resize", Js), Ks.set(t, e);
          })(t, o),
          a
        );
      }
      function tn(t, e, i) {
        i && i.disconnect(),
          "resize" === e &&
            (function (t) {
              Ks.delete(t), Ks.size || window.removeEventListener("resize", Js);
            })(t);
      }
      function en(t, e, i) {
        const s = t.canvas,
          n = ne((e) => {
            null !== t.ctx &&
              i(
                (function (t, e) {
                  const i = Hs[t.type] || t.type,
                    { x: s, y: n } = Si(t, e);
                  return {
                    type: i,
                    chart: e,
                    native: t,
                    x: void 0 !== s ? s : null,
                    y: void 0 !== n ? n : null,
                  };
                })(e, t),
              );
          }, t);
        return (
          (function (t, e, i) {
            t.addEventListener(e, i, Ys);
          })(s, e, n),
          n
        );
      }
      class sn extends Vs {
        acquireContext(t, e) {
          const i = t && t.getContext && t.getContext("2d");
          return i && i.canvas === t
            ? ((function (t, e) {
                const i = t.style,
                  s = t.getAttribute("height"),
                  n = t.getAttribute("width");
                if (
                  ((t[js] = {
                    initial: {
                      height: s,
                      width: n,
                      style: {
                        display: i.display,
                        height: i.height,
                        width: i.width,
                      },
                    },
                  }),
                  (i.display = i.display || "block"),
                  (i.boxSizing = i.boxSizing || "border-box"),
                  $s(n))
                ) {
                  const e = Oi(t, "width");
                  void 0 !== e && (t.width = e);
                }
                if ($s(s))
                  if ("" === t.style.height) t.height = t.width / (e || 2);
                  else {
                    const e = Oi(t, "height");
                    void 0 !== e && (t.height = e);
                  }
              })(t, e),
              i)
            : null;
        }
        releaseContext(t) {
          const e = t.canvas;
          if (!e[js]) return !1;
          const i = e[js].initial;
          ["height", "width"].forEach((t) => {
            const s = i[t];
            ot(s) ? e.removeAttribute(t) : e.setAttribute(t, s);
          });
          const s = i.style || {};
          return (
            Object.keys(s).forEach((t) => {
              e.style[t] = s[t];
            }),
            (e.width = e.width),
            delete e[js],
            !0
          );
        }
        addEventListener(t, e, i) {
          this.removeEventListener(t, e);
          const s = t.$proxies || (t.$proxies = {}),
            n = { attach: Zs, detach: qs, resize: Qs }[e] || en;
          s[e] = n(t, e, i);
        }
        removeEventListener(t, e) {
          const i = t.$proxies || (t.$proxies = {}),
            s = i[e];
          s &&
            (({ attach: tn, detach: tn, resize: tn }[e] || Us)(t, e, s),
            (i[e] = void 0));
        }
        getDevicePixelRatio() {
          return window.devicePixelRatio;
        }
        getMaximumSize(t, e, i, s) {
          return (function (t, e, i, s) {
            const n = wi(t),
              o = ki(n, "margin"),
              a = Ai(n.maxWidth, t, "clientWidth") || Pt,
              r = Ai(n.maxHeight, t, "clientHeight") || Pt,
              l = (function (t, e, i) {
                let s, n;
                if (void 0 === e || void 0 === i) {
                  const o = vi(t);
                  if (o) {
                    const t = o.getBoundingClientRect(),
                      a = wi(o),
                      r = ki(a, "border", "width"),
                      l = ki(a, "padding");
                    (e = t.width - l.width - r.width),
                      (i = t.height - l.height - r.height),
                      (s = Ai(a.maxWidth, o, "clientWidth")),
                      (n = Ai(a.maxHeight, o, "clientHeight"));
                  } else (e = t.clientWidth), (i = t.clientHeight);
                }
                return {
                  width: e,
                  height: i,
                  maxWidth: s || Pt,
                  maxHeight: n || Pt,
                };
              })(t, e, i);
            let { width: h, height: c } = l;
            if ("content-box" === n.boxSizing) {
              const t = ki(n, "border", "width"),
                e = ki(n, "padding");
              (h -= e.width + t.width), (c -= e.height + t.height);
            }
            return (
              (h = Math.max(0, h - o.width)),
              (c = Math.max(0, s ? h / s : c - o.height)),
              (h = Di(Math.min(h, a, l.maxWidth))),
              (c = Di(Math.min(c, r, l.maxHeight))),
              h && !c && (c = Di(h / 2)),
              (void 0 !== e || void 0 !== i) &&
                s &&
                l.height &&
                c > l.height &&
                ((c = l.height), (h = Di(Math.floor(c * s)))),
              { width: h, height: c }
            );
          })(t, e, i, s);
        }
        isAttached(t) {
          const e = vi(t);
          return !(!e || !e.isConnected);
        }
      }
      class nn {
        static defaults = {};
        static defaultRoutes = void 0;
        x;
        y;
        active = !1;
        options;
        $animations;
        tooltipPosition(t) {
          const { x: e, y: i } = this.getProps(["x", "y"], t);
          return { x: e, y: i };
        }
        hasValue() {
          return Wt(this.x) && Wt(this.y);
        }
        getProps(t, e) {
          const i = this.$animations;
          if (!e || !i) return this;
          const s = {};
          return (
            t.forEach((t) => {
              s[t] = i[t] && i[t].active() ? i[t]._to : this[t];
            }),
            s
          );
        }
      }
      function on(t, e, i, s, n) {
        const o = ct(s, 0),
          a = Math.min(ct(n, t.length), t.length);
        let r,
          l,
          h,
          c = 0;
        for (
          i = Math.ceil(i),
            n && ((r = n - s), (i = r / Math.floor(r / i))),
            h = o;
          h < 0;

        )
          c++, (h = Math.round(o + c * i));
        for (l = Math.max(o, 0); l < a; l++)
          l === h && (e.push(t[l]), c++, (h = Math.round(o + c * i)));
      }
      const an = (t, e, i) =>
          "top" === e || "left" === e ? t[e] + i : t[e] - i,
        rn = (t, e) => Math.min(e || t, t);
      function ln(t, e) {
        const i = [],
          s = t.length / e,
          n = t.length;
        let o = 0;
        for (; o < n; o += s) i.push(t[Math.floor(o)]);
        return i;
      }
      function hn(t, e, i) {
        const s = t.ticks.length,
          n = Math.min(e, s - 1),
          o = t._startPixel,
          a = t._endPixel,
          r = 1e-6;
        let l,
          h = t.getPixelForTick(n);
        if (
          !(
            i &&
            ((l =
              1 === s
                ? Math.max(h - o, a - h)
                : 0 === e
                ? (t.getPixelForTick(1) - h) / 2
                : (h - t.getPixelForTick(n - 1)) / 2),
            (h += n < e ? l : -l),
            h < o - r || h > a + r)
          )
        )
          return h;
      }
      function cn(t) {
        return t.drawTicks ? t.tickLength : 0;
      }
      function dn(t, e) {
        if (!t.display) return 0;
        const i = Ge(t.font, e),
          s = Ke(t.padding);
        return (at(t.text) ? t.text.length : 1) * i.lineHeight + s.height;
      }
      function un(t, e, i) {
        let s = oe(t);
        return (
          ((i && "right" !== e) || (!i && "right" === e)) &&
            (s = ((t) => ("left" === t ? "right" : "right" === t ? "left" : t))(
              s,
            )),
          s
        );
      }
      class fn extends nn {
        constructor(t) {
          super(),
            (this.id = t.id),
            (this.type = t.type),
            (this.options = void 0),
            (this.ctx = t.ctx),
            (this.chart = t.chart),
            (this.top = void 0),
            (this.bottom = void 0),
            (this.left = void 0),
            (this.right = void 0),
            (this.width = void 0),
            (this.height = void 0),
            (this._margins = { left: 0, right: 0, top: 0, bottom: 0 }),
            (this.maxWidth = void 0),
            (this.maxHeight = void 0),
            (this.paddingTop = void 0),
            (this.paddingBottom = void 0),
            (this.paddingLeft = void 0),
            (this.paddingRight = void 0),
            (this.axis = void 0),
            (this.labelRotation = void 0),
            (this.min = void 0),
            (this.max = void 0),
            (this._range = void 0),
            (this.ticks = []),
            (this._gridLineItems = null),
            (this._labelItems = null),
            (this._labelSizes = null),
            (this._length = 0),
            (this._maxLength = 0),
            (this._longestTextCache = {}),
            (this._startPixel = void 0),
            (this._endPixel = void 0),
            (this._reversePixels = !1),
            (this._userMax = void 0),
            (this._userMin = void 0),
            (this._suggestedMax = void 0),
            (this._suggestedMin = void 0),
            (this._ticksLength = 0),
            (this._borderValue = 0),
            (this._cache = {}),
            (this._dataLimitsCached = !1),
            (this.$context = void 0);
        }
        init(t) {
          (this.options = t.setContext(this.getContext())),
            (this.axis = t.axis),
            (this._userMin = this.parse(t.min)),
            (this._userMax = this.parse(t.max)),
            (this._suggestedMin = this.parse(t.suggestedMin)),
            (this._suggestedMax = this.parse(t.suggestedMax));
        }
        parse(t, e) {
          return t;
        }
        getUserBounds() {
          let {
            _userMin: t,
            _userMax: e,
            _suggestedMin: i,
            _suggestedMax: s,
          } = this;
          return (
            (t = ht(t, Number.POSITIVE_INFINITY)),
            (e = ht(e, Number.NEGATIVE_INFINITY)),
            (i = ht(i, Number.POSITIVE_INFINITY)),
            (s = ht(s, Number.NEGATIVE_INFINITY)),
            {
              min: ht(t, i),
              max: ht(e, s),
              minDefined: lt(t),
              maxDefined: lt(e),
            }
          );
        }
        getMinMax(t) {
          let e,
            {
              min: i,
              max: s,
              minDefined: n,
              maxDefined: o,
            } = this.getUserBounds();
          if (n && o) return { min: i, max: s };
          const a = this.getMatchingVisibleMetas();
          for (let r = 0, l = a.length; r < l; ++r)
            (e = a[r].controller.getMinMax(this, t)),
              n || (i = Math.min(i, e.min)),
              o || (s = Math.max(s, e.max));
          return (
            (i = o && i > s ? s : i),
            (s = n && i > s ? i : s),
            { min: ht(i, ht(s, i)), max: ht(s, ht(i, s)) }
          );
        }
        getPadding() {
          return {
            left: this.paddingLeft || 0,
            top: this.paddingTop || 0,
            right: this.paddingRight || 0,
            bottom: this.paddingBottom || 0,
          };
        }
        getTicks() {
          return this.ticks;
        }
        getLabels() {
          const t = this.chart.data;
          return (
            this.options.labels ||
            (this.isHorizontal() ? t.xLabels : t.yLabels) ||
            t.labels ||
            []
          );
        }
        getLabelItems(t = this.chart.chartArea) {
          return (
            this._labelItems || (this._labelItems = this._computeLabelItems(t))
          );
        }
        beforeLayout() {
          (this._cache = {}), (this._dataLimitsCached = !1);
        }
        beforeUpdate() {
          ut(this.options.beforeUpdate, [this]);
        }
        update(t, e, i) {
          const { beginAtZero: s, grace: n, ticks: o } = this.options,
            a = o.sampleSize;
          this.beforeUpdate(),
            (this.maxWidth = t),
            (this.maxHeight = e),
            (this._margins = i =
              Object.assign({ left: 0, right: 0, top: 0, bottom: 0 }, i)),
            (this.ticks = null),
            (this._labelSizes = null),
            (this._gridLineItems = null),
            (this._labelItems = null),
            this.beforeSetDimensions(),
            this.setDimensions(),
            this.afterSetDimensions(),
            (this._maxLength = this.isHorizontal()
              ? this.width + i.left + i.right
              : this.height + i.top + i.bottom),
            this._dataLimitsCached ||
              (this.beforeDataLimits(),
              this.determineDataLimits(),
              this.afterDataLimits(),
              (this._range = (function (t, e, i) {
                const { min: s, max: n } = t,
                  o = dt(e, (n - s) / 2),
                  a = (t, e) => (i && 0 === t ? 0 : t + e);
                return { min: a(s, -Math.abs(o)), max: a(n, o) };
              })(this, n, s)),
              (this._dataLimitsCached = !0)),
            this.beforeBuildTicks(),
            (this.ticks = this.buildTicks() || []),
            this.afterBuildTicks();
          const r = a < this.ticks.length;
          this._convertTicksToLabels(r ? ln(this.ticks, a) : this.ticks),
            this.configure(),
            this.beforeCalculateLabelRotation(),
            this.calculateLabelRotation(),
            this.afterCalculateLabelRotation(),
            o.display &&
              (o.autoSkip || "auto" === o.source) &&
              ((this.ticks = (function (t, e) {
                const i = t.options.ticks,
                  s = (function (t) {
                    const e = t.options.offset,
                      i = t._tickSize(),
                      s = t._length / i + (e ? 0 : 1),
                      n = t._maxLength / i;
                    return Math.floor(Math.min(s, n));
                  })(t),
                  n = Math.min(i.maxTicksLimit || s, s),
                  o = i.major.enabled
                    ? (function (t) {
                        const e = [];
                        let i, s;
                        for (i = 0, s = t.length; i < s; i++)
                          t[i].major && e.push(i);
                        return e;
                      })(e)
                    : [],
                  a = o.length,
                  r = o[0],
                  l = o[a - 1],
                  h = [];
                if (a > n)
                  return (
                    (function (t, e, i, s) {
                      let n,
                        o = 0,
                        a = i[0];
                      for (s = Math.ceil(s), n = 0; n < t.length; n++)
                        n === a && (e.push(t[n]), o++, (a = i[o * s]));
                    })(e, h, o, a / n),
                    h
                  );
                const c = (function (t, e, i) {
                  const s = (function (t) {
                      const e = t.length;
                      let i, s;
                      if (e < 2) return !1;
                      for (s = t[0], i = 1; i < e; ++i)
                        if (t[i] - t[i - 1] !== s) return !1;
                      return s;
                    })(t),
                    n = e.length / i;
                  if (!s) return Math.max(n, 1);
                  const o = (function (t) {
                    const e = [],
                      i = Math.sqrt(t);
                    let s;
                    for (s = 1; s < i; s++)
                      t % s == 0 && (e.push(s), e.push(t / s));
                    return (
                      i === (0 | i) && e.push(i),
                      e.sort((t, e) => t - e).pop(),
                      e
                    );
                  })(s);
                  for (let t = 0, e = o.length - 1; t < e; t++) {
                    const e = o[t];
                    if (e > n) return e;
                  }
                  return Math.max(n, 1);
                })(o, e, n);
                if (a > 0) {
                  let t, i;
                  const s = a > 1 ? Math.round((l - r) / (a - 1)) : null;
                  for (
                    on(e, h, c, ot(s) ? 0 : r - s, r), t = 0, i = a - 1;
                    t < i;
                    t++
                  )
                    on(e, h, c, o[t], o[t + 1]);
                  return on(e, h, c, l, ot(s) ? e.length : l + s), h;
                }
                return on(e, h, c), h;
              })(this, this.ticks)),
              (this._labelSizes = null),
              this.afterAutoSkip()),
            r && this._convertTicksToLabels(this.ticks),
            this.beforeFit(),
            this.fit(),
            this.afterFit(),
            this.afterUpdate();
        }
        configure() {
          let t,
            e,
            i = this.options.reverse;
          this.isHorizontal()
            ? ((t = this.left), (e = this.right))
            : ((t = this.top), (e = this.bottom), (i = !i)),
            (this._startPixel = t),
            (this._endPixel = e),
            (this._reversePixels = i),
            (this._length = e - t),
            (this._alignToPixels = this.options.alignToPixels);
        }
        afterUpdate() {
          ut(this.options.afterUpdate, [this]);
        }
        beforeSetDimensions() {
          ut(this.options.beforeSetDimensions, [this]);
        }
        setDimensions() {
          this.isHorizontal()
            ? ((this.width = this.maxWidth),
              (this.left = 0),
              (this.right = this.width))
            : ((this.height = this.maxHeight),
              (this.top = 0),
              (this.bottom = this.height)),
            (this.paddingLeft = 0),
            (this.paddingTop = 0),
            (this.paddingRight = 0),
            (this.paddingBottom = 0);
        }
        afterSetDimensions() {
          ut(this.options.afterSetDimensions, [this]);
        }
        _callHooks(t) {
          this.chart.notifyPlugins(t, this.getContext()),
            ut(this.options[t], [this]);
        }
        beforeDataLimits() {
          this._callHooks("beforeDataLimits");
        }
        determineDataLimits() {}
        afterDataLimits() {
          this._callHooks("afterDataLimits");
        }
        beforeBuildTicks() {
          this._callHooks("beforeBuildTicks");
        }
        buildTicks() {
          return [];
        }
        afterBuildTicks() {
          this._callHooks("afterBuildTicks");
        }
        beforeTickToLabelConversion() {
          ut(this.options.beforeTickToLabelConversion, [this]);
        }
        generateTickLabels(t) {
          const e = this.options.ticks;
          let i, s, n;
          for (i = 0, s = t.length; i < s; i++)
            (n = t[i]), (n.label = ut(e.callback, [n.value, i, t], this));
        }
        afterTickToLabelConversion() {
          ut(this.options.afterTickToLabelConversion, [this]);
        }
        beforeCalculateLabelRotation() {
          ut(this.options.beforeCalculateLabelRotation, [this]);
        }
        calculateLabelRotation() {
          const t = this.options,
            e = t.ticks,
            i = rn(this.ticks.length, t.ticks.maxTicksLimit),
            s = e.minRotation || 0,
            n = e.maxRotation;
          let o,
            a,
            r,
            l = s;
          if (
            !this._isVisible() ||
            !e.display ||
            s >= n ||
            i <= 1 ||
            !this.isHorizontal()
          )
            return void (this.labelRotation = s);
          const h = this._getLabelSizes(),
            c = h.widest.width,
            d = h.highest.height,
            u = qt(this.chart.width - c, 0, this.maxWidth);
          (o = t.offset ? this.maxWidth / i : u / (i - 1)),
            c + 6 > o &&
              ((o = u / (i - (t.offset ? 0.5 : 1))),
              (a =
                this.maxHeight -
                cn(t.grid) -
                e.padding -
                dn(t.title, this.chart.options.font)),
              (r = Math.sqrt(c * c + d * d)),
              (l = jt(
                Math.min(
                  Math.asin(qt((h.highest.height + 6) / o, -1, 1)),
                  Math.asin(qt(a / r, -1, 1)) - Math.asin(qt(d / r, -1, 1)),
                ),
              )),
              (l = Math.max(s, Math.min(n, l)))),
            (this.labelRotation = l);
        }
        afterCalculateLabelRotation() {
          ut(this.options.afterCalculateLabelRotation, [this]);
        }
        afterAutoSkip() {}
        beforeFit() {
          ut(this.options.beforeFit, [this]);
        }
        fit() {
          const t = { width: 0, height: 0 },
            {
              chart: e,
              options: { ticks: i, title: s, grid: n },
            } = this,
            o = this._isVisible(),
            a = this.isHorizontal();
          if (o) {
            const o = dn(s, e.options.font);
            if (
              (a
                ? ((t.width = this.maxWidth), (t.height = cn(n) + o))
                : ((t.height = this.maxHeight), (t.width = cn(n) + o)),
              i.display && this.ticks.length)
            ) {
              const {
                  first: e,
                  last: s,
                  widest: n,
                  highest: o,
                } = this._getLabelSizes(),
                r = 2 * i.padding,
                l = Nt(this.labelRotation),
                h = Math.cos(l),
                c = Math.sin(l);
              if (a) {
                const e = i.mirror ? 0 : c * n.width + h * o.height;
                t.height = Math.min(this.maxHeight, t.height + e + r);
              } else {
                const e = i.mirror ? 0 : h * n.width + c * o.height;
                t.width = Math.min(this.maxWidth, t.width + e + r);
              }
              this._calculatePadding(e, s, c, h);
            }
          }
          this._handleMargins(),
            a
              ? ((this.width = this._length =
                  e.width - this._margins.left - this._margins.right),
                (this.height = t.height))
              : ((this.width = t.width),
                (this.height = this._length =
                  e.height - this._margins.top - this._margins.bottom));
        }
        _calculatePadding(t, e, i, s) {
          const {
              ticks: { align: n, padding: o },
              position: a,
            } = this.options,
            r = 0 !== this.labelRotation,
            l = "top" !== a && "x" === this.axis;
          if (this.isHorizontal()) {
            const a = this.getPixelForTick(0) - this.left,
              h = this.right - this.getPixelForTick(this.ticks.length - 1);
            let c = 0,
              d = 0;
            r
              ? l
                ? ((c = s * t.width), (d = i * e.height))
                : ((c = i * t.height), (d = s * e.width))
              : "start" === n
              ? (d = e.width)
              : "end" === n
              ? (c = t.width)
              : "inner" !== n && ((c = t.width / 2), (d = e.width / 2)),
              (this.paddingLeft = Math.max(
                ((c - a + o) * this.width) / (this.width - a),
                0,
              )),
              (this.paddingRight = Math.max(
                ((d - h + o) * this.width) / (this.width - h),
                0,
              ));
          } else {
            let i = e.height / 2,
              s = t.height / 2;
            "start" === n
              ? ((i = 0), (s = t.height))
              : "end" === n && ((i = e.height), (s = 0)),
              (this.paddingTop = i + o),
              (this.paddingBottom = s + o);
          }
        }
        _handleMargins() {
          this._margins &&
            ((this._margins.left = Math.max(
              this.paddingLeft,
              this._margins.left,
            )),
            (this._margins.top = Math.max(this.paddingTop, this._margins.top)),
            (this._margins.right = Math.max(
              this.paddingRight,
              this._margins.right,
            )),
            (this._margins.bottom = Math.max(
              this.paddingBottom,
              this._margins.bottom,
            )));
        }
        afterFit() {
          ut(this.options.afterFit, [this]);
        }
        isHorizontal() {
          const { axis: t, position: e } = this.options;
          return "top" === e || "bottom" === e || "x" === t;
        }
        isFullSize() {
          return this.options.fullSize;
        }
        _convertTicksToLabels(t) {
          let e, i;
          for (
            this.beforeTickToLabelConversion(),
              this.generateTickLabels(t),
              e = 0,
              i = t.length;
            e < i;
            e++
          )
            ot(t[e].label) && (t.splice(e, 1), i--, e--);
          this.afterTickToLabelConversion();
        }
        _getLabelSizes() {
          let t = this._labelSizes;
          if (!t) {
            const e = this.options.ticks.sampleSize;
            let i = this.ticks;
            e < i.length && (i = ln(i, e)),
              (this._labelSizes = t =
                this._computeLabelSizes(
                  i,
                  i.length,
                  this.options.ticks.maxTicksLimit,
                ));
          }
          return t;
        }
        _computeLabelSizes(t, e, i) {
          const { ctx: s, _longestTextCache: n } = this,
            o = [],
            a = [],
            r = Math.floor(e / rn(e, i));
          let l,
            h,
            c,
            d,
            u,
            f,
            g,
            p,
            m,
            b,
            x,
            y = 0,
            _ = 0;
          for (l = 0; l < e; l += r) {
            if (
              ((d = t[l].label),
              (u = this._resolveTickFontOptions(l)),
              (s.font = f = u.string),
              (g = n[f] = n[f] || { data: {}, gc: [] }),
              (p = u.lineHeight),
              (m = b = 0),
              ot(d) || at(d))
            ) {
              if (at(d))
                for (h = 0, c = d.length; h < c; ++h)
                  (x = d[h]),
                    ot(x) ||
                      at(x) ||
                      ((m = De(s, g.data, g.gc, m, x)), (b += p));
            } else (m = De(s, g.data, g.gc, m, d)), (b = p);
            o.push(m), a.push(b), (y = Math.max(m, y)), (_ = Math.max(b, _));
          }
          !(function (t, e) {
            ft(t, (t) => {
              const i = t.gc,
                s = i.length / 2;
              let n;
              if (s > e) {
                for (n = 0; n < s; ++n) delete t.data[i[n]];
                i.splice(0, s);
              }
            });
          })(n, e);
          const v = o.indexOf(y),
            A = a.indexOf(_),
            w = (t) => ({ width: o[t] || 0, height: a[t] || 0 });
          return {
            first: w(0),
            last: w(e - 1),
            widest: w(v),
            highest: w(A),
            widths: o,
            heights: a,
          };
        }
        getLabelForValue(t) {
          return t;
        }
        getPixelForValue(t, e) {
          return NaN;
        }
        getValueForPixel(t) {}
        getPixelForTick(t) {
          const e = this.ticks;
          return t < 0 || t > e.length - 1
            ? null
            : this.getPixelForValue(e[t].value);
        }
        getPixelForDecimal(t) {
          this._reversePixels && (t = 1 - t);
          const e = this._startPixel + t * this._length;
          return qt(
            this._alignToPixels ? Pe(this.chart, e, 0) : e,
            -32768,
            32767,
          );
        }
        getDecimalForPixel(t) {
          const e = (t - this._startPixel) / this._length;
          return this._reversePixels ? 1 - e : e;
        }
        getBasePixel() {
          return this.getPixelForValue(this.getBaseValue());
        }
        getBaseValue() {
          const { min: t, max: e } = this;
          return t < 0 && e < 0 ? e : t > 0 && e > 0 ? t : 0;
        }
        getContext(t) {
          const e = this.ticks || [];
          if (t >= 0 && t < e.length) {
            const i = e[t];
            return (
              i.$context ||
              (i.$context = (function (t, e, i) {
                return Qe(t, { tick: i, index: e, type: "tick" });
              })(this.getContext(), t, i))
            );
          }
          return (
            this.$context ||
            (this.$context = Qe(this.chart.getContext(), {
              scale: this,
              type: "scale",
            }))
          );
        }
        _tickSize() {
          const t = this.options.ticks,
            e = Nt(this.labelRotation),
            i = Math.abs(Math.cos(e)),
            s = Math.abs(Math.sin(e)),
            n = this._getLabelSizes(),
            o = t.autoSkipPadding || 0,
            a = n ? n.widest.width + o : 0,
            r = n ? n.highest.height + o : 0;
          return this.isHorizontal()
            ? r * i > a * s
              ? a / i
              : r / s
            : r * s < a * i
            ? r / i
            : a / s;
        }
        _isVisible() {
          const t = this.options.display;
          return "auto" !== t ? !!t : this.getMatchingVisibleMetas().length > 0;
        }
        _computeGridLineItems(t) {
          const e = this.axis,
            i = this.chart,
            s = this.options,
            { grid: n, position: o, border: a } = s,
            r = n.offset,
            l = this.isHorizontal(),
            h = this.ticks.length + (r ? 1 : 0),
            c = cn(n),
            d = [],
            u = a.setContext(this.getContext()),
            f = u.display ? u.width : 0,
            g = f / 2,
            p = function (t) {
              return Pe(i, t, f);
            };
          let m, b, x, y, _, v, A, w, M, k, C, S;
          if ("top" === o)
            (m = p(this.bottom)),
              (v = this.bottom - c),
              (w = m - g),
              (k = p(t.top) + g),
              (S = t.bottom);
          else if ("bottom" === o)
            (m = p(this.top)),
              (k = t.top),
              (S = p(t.bottom) - g),
              (v = m + g),
              (w = this.top + c);
          else if ("left" === o)
            (m = p(this.right)),
              (_ = this.right - c),
              (A = m - g),
              (M = p(t.left) + g),
              (C = t.right);
          else if ("right" === o)
            (m = p(this.left)),
              (M = t.left),
              (C = p(t.right) - g),
              (_ = m + g),
              (A = this.left + c);
          else if ("x" === e) {
            if ("center" === o) m = p((t.top + t.bottom) / 2 + 0.5);
            else if (rt(o)) {
              const t = Object.keys(o)[0],
                e = o[t];
              m = p(this.chart.scales[t].getPixelForValue(e));
            }
            (k = t.top), (S = t.bottom), (v = m + g), (w = v + c);
          } else if ("y" === e) {
            if ("center" === o) m = p((t.left + t.right) / 2);
            else if (rt(o)) {
              const t = Object.keys(o)[0],
                e = o[t];
              m = p(this.chart.scales[t].getPixelForValue(e));
            }
            (_ = m - g), (A = _ - c), (M = t.left), (C = t.right);
          }
          const D = ct(s.ticks.maxTicksLimit, h),
            E = Math.max(1, Math.ceil(h / D));
          for (b = 0; b < h; b += E) {
            const t = this.getContext(b),
              e = n.setContext(t),
              s = a.setContext(t),
              o = e.lineWidth,
              h = e.color,
              c = s.dash || [],
              u = s.dashOffset,
              f = e.tickWidth,
              g = e.tickColor,
              p = e.tickBorderDash || [],
              m = e.tickBorderDashOffset;
            (x = hn(this, b, r)),
              void 0 !== x &&
                ((y = Pe(i, x, o)),
                l ? (_ = A = M = C = y) : (v = w = k = S = y),
                d.push({
                  tx1: _,
                  ty1: v,
                  tx2: A,
                  ty2: w,
                  x1: M,
                  y1: k,
                  x2: C,
                  y2: S,
                  width: o,
                  color: h,
                  borderDash: c,
                  borderDashOffset: u,
                  tickWidth: f,
                  tickColor: g,
                  tickBorderDash: p,
                  tickBorderDashOffset: m,
                }));
          }
          return (this._ticksLength = h), (this._borderValue = m), d;
        }
        _computeLabelItems(t) {
          const e = this.axis,
            i = this.options,
            { position: s, ticks: n } = i,
            o = this.isHorizontal(),
            a = this.ticks,
            { align: r, crossAlign: l, padding: h, mirror: c } = n,
            d = cn(i.grid),
            u = d + h,
            f = c ? -h : u,
            g = -Nt(this.labelRotation),
            p = [];
          let m,
            b,
            x,
            y,
            _,
            v,
            A,
            w,
            M,
            k,
            C,
            S,
            D = "middle";
          if ("top" === s)
            (v = this.bottom - f), (A = this._getXAxisLabelAlignment());
          else if ("bottom" === s)
            (v = this.top + f), (A = this._getXAxisLabelAlignment());
          else if ("left" === s) {
            const t = this._getYAxisLabelAlignment(d);
            (A = t.textAlign), (_ = t.x);
          } else if ("right" === s) {
            const t = this._getYAxisLabelAlignment(d);
            (A = t.textAlign), (_ = t.x);
          } else if ("x" === e) {
            if ("center" === s) v = (t.top + t.bottom) / 2 + u;
            else if (rt(s)) {
              const t = Object.keys(s)[0],
                e = s[t];
              v = this.chart.scales[t].getPixelForValue(e) + u;
            }
            A = this._getXAxisLabelAlignment();
          } else if ("y" === e) {
            if ("center" === s) _ = (t.left + t.right) / 2 - u;
            else if (rt(s)) {
              const t = Object.keys(s)[0],
                e = s[t];
              _ = this.chart.scales[t].getPixelForValue(e);
            }
            A = this._getYAxisLabelAlignment(d).textAlign;
          }
          "y" === e &&
            ("start" === r ? (D = "top") : "end" === r && (D = "bottom"));
          const E = this._getLabelSizes();
          for (m = 0, b = a.length; m < b; ++m) {
            (x = a[m]), (y = x.label);
            const t = n.setContext(this.getContext(m));
            (w = this.getPixelForTick(m) + n.labelOffset),
              (M = this._resolveTickFontOptions(m)),
              (k = M.lineHeight),
              (C = at(y) ? y.length : 1);
            const e = C / 2,
              i = t.color,
              r = t.textStrokeColor,
              h = t.textStrokeWidth;
            let d,
              u = A;
            if (
              (o
                ? ((_ = w),
                  "inner" === A &&
                    (u =
                      m === b - 1
                        ? this.options.reverse
                          ? "left"
                          : "right"
                        : 0 === m
                        ? this.options.reverse
                          ? "right"
                          : "left"
                        : "center"),
                  (S =
                    "top" === s
                      ? "near" === l || 0 !== g
                        ? -C * k + k / 2
                        : "center" === l
                        ? -E.highest.height / 2 - e * k + k
                        : -E.highest.height + k / 2
                      : "near" === l || 0 !== g
                      ? k / 2
                      : "center" === l
                      ? E.highest.height / 2 - e * k
                      : E.highest.height - C * k),
                  c && (S *= -1),
                  0 === g ||
                    t.showLabelBackdrop ||
                    (_ += (k / 2) * Math.sin(g)))
                : ((v = w), (S = ((1 - C) * k) / 2)),
              t.showLabelBackdrop)
            ) {
              const e = Ke(t.backdropPadding),
                i = E.heights[m],
                s = E.widths[m];
              let n = S - e.top,
                o = 0 - e.left;
              switch (D) {
                case "middle":
                  n -= i / 2;
                  break;
                case "bottom":
                  n -= i;
              }
              switch (A) {
                case "center":
                  o -= s / 2;
                  break;
                case "right":
                  o -= s;
              }
              d = {
                left: o,
                top: n,
                width: s + e.width,
                height: i + e.height,
                color: t.backdropColor,
              };
            }
            p.push({
              label: y,
              font: M,
              textOffset: S,
              options: {
                rotation: g,
                color: i,
                strokeColor: r,
                strokeWidth: h,
                textAlign: u,
                textBaseline: D,
                translation: [_, v],
                backdrop: d,
              },
            });
          }
          return p;
        }
        _getXAxisLabelAlignment() {
          const { position: t, ticks: e } = this.options;
          if (-Nt(this.labelRotation)) return "top" === t ? "left" : "right";
          let i = "center";
          return (
            "start" === e.align
              ? (i = "left")
              : "end" === e.align
              ? (i = "right")
              : "inner" === e.align && (i = "inner"),
            i
          );
        }
        _getYAxisLabelAlignment(t) {
          const {
              position: e,
              ticks: { crossAlign: i, mirror: s, padding: n },
            } = this.options,
            o = t + n,
            a = this._getLabelSizes().widest.width;
          let r, l;
          return (
            "left" === e
              ? s
                ? ((l = this.right + n),
                  "near" === i
                    ? (r = "left")
                    : "center" === i
                    ? ((r = "center"), (l += a / 2))
                    : ((r = "right"), (l += a)))
                : ((l = this.right - o),
                  "near" === i
                    ? (r = "right")
                    : "center" === i
                    ? ((r = "center"), (l -= a / 2))
                    : ((r = "left"), (l = this.left)))
              : "right" === e
              ? s
                ? ((l = this.left + n),
                  "near" === i
                    ? (r = "right")
                    : "center" === i
                    ? ((r = "center"), (l -= a / 2))
                    : ((r = "left"), (l -= a)))
                : ((l = this.left + o),
                  "near" === i
                    ? (r = "left")
                    : "center" === i
                    ? ((r = "center"), (l += a / 2))
                    : ((r = "right"), (l = this.right)))
              : (r = "right"),
            { textAlign: r, x: l }
          );
        }
        _computeLabelArea() {
          if (this.options.ticks.mirror) return;
          const t = this.chart,
            e = this.options.position;
          return "left" === e || "right" === e
            ? { top: 0, left: this.left, bottom: t.height, right: this.right }
            : "top" === e || "bottom" === e
            ? { top: this.top, left: 0, bottom: this.bottom, right: t.width }
            : void 0;
        }
        drawBackground() {
          const {
            ctx: t,
            options: { backgroundColor: e },
            left: i,
            top: s,
            width: n,
            height: o,
          } = this;
          e &&
            (t.save(), (t.fillStyle = e), t.fillRect(i, s, n, o), t.restore());
        }
        getLineWidthForValue(t) {
          const e = this.options.grid;
          if (!this._isVisible() || !e.display) return 0;
          const i = this.ticks.findIndex((e) => e.value === t);
          return i >= 0 ? e.setContext(this.getContext(i)).lineWidth : 0;
        }
        drawGrid(t) {
          const e = this.options.grid,
            i = this.ctx,
            s =
              this._gridLineItems ||
              (this._gridLineItems = this._computeGridLineItems(t));
          let n, o;
          const a = (t, e, s) => {
            s.width &&
              s.color &&
              (i.save(),
              (i.lineWidth = s.width),
              (i.strokeStyle = s.color),
              i.setLineDash(s.borderDash || []),
              (i.lineDashOffset = s.borderDashOffset),
              i.beginPath(),
              i.moveTo(t.x, t.y),
              i.lineTo(e.x, e.y),
              i.stroke(),
              i.restore());
          };
          if (e.display)
            for (n = 0, o = s.length; n < o; ++n) {
              const t = s[n];
              e.drawOnChartArea &&
                a({ x: t.x1, y: t.y1 }, { x: t.x2, y: t.y2 }, t),
                e.drawTicks &&
                  a(
                    { x: t.tx1, y: t.ty1 },
                    { x: t.tx2, y: t.ty2 },
                    {
                      color: t.tickColor,
                      width: t.tickWidth,
                      borderDash: t.tickBorderDash,
                      borderDashOffset: t.tickBorderDashOffset,
                    },
                  );
            }
        }
        drawBorder() {
          const {
              chart: t,
              ctx: e,
              options: { border: i, grid: s },
            } = this,
            n = i.setContext(this.getContext()),
            o = i.display ? n.width : 0;
          if (!o) return;
          const a = s.setContext(this.getContext(0)).lineWidth,
            r = this._borderValue;
          let l, h, c, d;
          this.isHorizontal()
            ? ((l = Pe(t, this.left, o) - o / 2),
              (h = Pe(t, this.right, a) + a / 2),
              (c = d = r))
            : ((c = Pe(t, this.top, o) - o / 2),
              (d = Pe(t, this.bottom, a) + a / 2),
              (l = h = r)),
            e.save(),
            (e.lineWidth = n.width),
            (e.strokeStyle = n.color),
            e.beginPath(),
            e.moveTo(l, c),
            e.lineTo(h, d),
            e.stroke(),
            e.restore();
        }
        drawLabels(t) {
          if (!this.options.ticks.display) return;
          const e = this.ctx,
            i = this._computeLabelArea();
          i && Be(e, i);
          const s = this.getLabelItems(t);
          for (const t of s) {
            const i = t.options,
              s = t.font;
            Ne(e, t.label, 0, t.textOffset, s, i);
          }
          i && Ie(e);
        }
        drawTitle() {
          const {
            ctx: t,
            options: { position: e, title: i, reverse: s },
          } = this;
          if (!i.display) return;
          const n = Ge(i.font),
            o = Ke(i.padding),
            a = i.align;
          let r = n.lineHeight / 2;
          "bottom" === e || "center" === e || rt(e)
            ? ((r += o.bottom),
              at(i.text) && (r += n.lineHeight * (i.text.length - 1)))
            : (r += o.top);
          const {
            titleX: l,
            titleY: h,
            maxWidth: c,
            rotation: d,
          } = (function (t, e, i, s) {
            const { top: n, left: o, bottom: a, right: r, chart: l } = t,
              { chartArea: h, scales: c } = l;
            let d,
              u,
              f,
              g = 0;
            const p = a - n,
              m = r - o;
            if (t.isHorizontal()) {
              if (((u = ae(s, o, r)), rt(i))) {
                const t = Object.keys(i)[0],
                  s = i[t];
                f = c[t].getPixelForValue(s) + p - e;
              } else
                f =
                  "center" === i ? (h.bottom + h.top) / 2 + p - e : an(t, i, e);
              d = r - o;
            } else {
              if (rt(i)) {
                const t = Object.keys(i)[0],
                  s = i[t];
                u = c[t].getPixelForValue(s) - m + e;
              } else
                u =
                  "center" === i ? (h.left + h.right) / 2 - m + e : an(t, i, e);
              (f = ae(s, a, n)), (g = "left" === i ? -Tt : Tt);
            }
            return { titleX: u, titleY: f, maxWidth: d, rotation: g };
          })(this, r, e, a);
          Ne(t, i.text, 0, 0, n, {
            color: i.color,
            maxWidth: c,
            rotation: d,
            textAlign: un(a, e, s),
            textBaseline: "middle",
            translation: [l, h],
          });
        }
        draw(t) {
          this._isVisible() &&
            (this.drawBackground(),
            this.drawGrid(t),
            this.drawBorder(),
            this.drawTitle(),
            this.drawLabels(t));
        }
        _layers() {
          const t = this.options,
            e = (t.ticks && t.ticks.z) || 0,
            i = ct(t.grid && t.grid.z, -1),
            s = ct(t.border && t.border.z, 0);
          return this._isVisible() && this.draw === fn.prototype.draw
            ? [
                {
                  z: i,
                  draw: (t) => {
                    this.drawBackground(), this.drawGrid(t), this.drawTitle();
                  },
                },
                {
                  z: s,
                  draw: () => {
                    this.drawBorder();
                  },
                },
                {
                  z: e,
                  draw: (t) => {
                    this.drawLabels(t);
                  },
                },
              ]
            : [
                {
                  z: e,
                  draw: (t) => {
                    this.draw(t);
                  },
                },
              ];
        }
        getMatchingVisibleMetas(t) {
          const e = this.chart.getSortedVisibleDatasetMetas(),
            i = this.axis + "AxisID",
            s = [];
          let n, o;
          for (n = 0, o = e.length; n < o; ++n) {
            const o = e[n];
            o[i] !== this.id || (t && o.type !== t) || s.push(o);
          }
          return s;
        }
        _resolveTickFontOptions(t) {
          return Ge(this.options.ticks.setContext(this.getContext(t)).font);
        }
        _maxDigits() {
          const t = this._resolveTickFontOptions(0).lineHeight;
          return (this.isHorizontal() ? this.width : this.height) / t;
        }
      }
      class gn {
        constructor(t, e, i) {
          (this.type = t),
            (this.scope = e),
            (this.override = i),
            (this.items = Object.create(null));
        }
        isForType(t) {
          return Object.prototype.isPrototypeOf.call(
            this.type.prototype,
            t.prototype,
          );
        }
        register(t) {
          const e = Object.getPrototypeOf(t);
          let i;
          (function (t) {
            return "id" in t && "defaults" in t;
          })(e) && (i = this.register(e));
          const s = this.items,
            n = t.id,
            o = this.scope + "." + n;
          if (!n) throw new Error("class does not have id: " + t);
          return (
            n in s ||
              ((s[n] = t),
              (function (t, e, i) {
                const s = xt(Object.create(null), [
                  i ? Se.get(i) : {},
                  Se.get(e),
                  t.defaults,
                ]);
                Se.set(e, s),
                  t.defaultRoutes &&
                    (function (t, e) {
                      Object.keys(e).forEach((i) => {
                        const s = i.split("."),
                          n = s.pop(),
                          o = [t].concat(s).join("."),
                          a = e[i].split("."),
                          r = a.pop(),
                          l = a.join(".");
                        Se.route(o, n, l, r);
                      });
                    })(e, t.defaultRoutes),
                  t.descriptors && Se.describe(e, t.descriptors);
              })(t, o, i),
              this.override && Se.override(t.id, t.overrides)),
            o
          );
        }
        get(t) {
          return this.items[t];
        }
        unregister(t) {
          const e = this.items,
            i = t.id,
            s = this.scope;
          i in e && delete e[i],
            s && i in Se[s] && (delete Se[s][i], this.override && delete Ae[i]);
        }
      }
      class pn {
        constructor() {
          (this.controllers = new gn(rs, "datasets", !0)),
            (this.elements = new gn(nn, "elements")),
            (this.plugins = new gn(Object, "plugins")),
            (this.scales = new gn(fn, "scales")),
            (this._typedRegistries = [
              this.controllers,
              this.scales,
              this.elements,
            ]);
        }
        add(...t) {
          this._each("register", t);
        }
        remove(...t) {
          this._each("unregister", t);
        }
        addControllers(...t) {
          this._each("register", t, this.controllers);
        }
        addElements(...t) {
          this._each("register", t, this.elements);
        }
        addPlugins(...t) {
          this._each("register", t, this.plugins);
        }
        addScales(...t) {
          this._each("register", t, this.scales);
        }
        getController(t) {
          return this._get(t, this.controllers, "controller");
        }
        getElement(t) {
          return this._get(t, this.elements, "element");
        }
        getPlugin(t) {
          return this._get(t, this.plugins, "plugin");
        }
        getScale(t) {
          return this._get(t, this.scales, "scale");
        }
        removeControllers(...t) {
          this._each("unregister", t, this.controllers);
        }
        removeElements(...t) {
          this._each("unregister", t, this.elements);
        }
        removePlugins(...t) {
          this._each("unregister", t, this.plugins);
        }
        removeScales(...t) {
          this._each("unregister", t, this.scales);
        }
        _each(t, e, i) {
          [...e].forEach((e) => {
            const s = i || this._getRegistryForType(e);
            i || s.isForType(e) || (s === this.plugins && e.id)
              ? this._exec(t, s, e)
              : ft(e, (e) => {
                  const s = i || this._getRegistryForType(e);
                  this._exec(t, s, e);
                });
          });
        }
        _exec(t, e, i) {
          const s = wt(t);
          ut(i["before" + s], [], i), e[t](i), ut(i["after" + s], [], i);
        }
        _getRegistryForType(t) {
          for (let e = 0; e < this._typedRegistries.length; e++) {
            const i = this._typedRegistries[e];
            if (i.isForType(t)) return i;
          }
          return this.plugins;
        }
        _get(t, e, i) {
          const s = e.get(t);
          if (void 0 === s)
            throw new Error('"' + t + '" is not a registered ' + i + ".");
          return s;
        }
      }
      var mn = new pn();
      class bn {
        constructor() {
          this._init = [];
        }
        notify(t, e, i, s) {
          "beforeInit" === e &&
            ((this._init = this._createDescriptors(t, !0)),
            this._notify(this._init, t, "install"));
          const n = s ? this._descriptors(t).filter(s) : this._descriptors(t),
            o = this._notify(n, t, e, i);
          return (
            "afterDestroy" === e &&
              (this._notify(n, t, "stop"),
              this._notify(this._init, t, "uninstall")),
            o
          );
        }
        _notify(t, e, i, s) {
          s = s || {};
          for (const n of t) {
            const t = n.plugin;
            if (!1 === ut(t[i], [e, s, n.options], t) && s.cancelable)
              return !1;
          }
          return !0;
        }
        invalidate() {
          ot(this._cache) ||
            ((this._oldCache = this._cache), (this._cache = void 0));
        }
        _descriptors(t) {
          if (this._cache) return this._cache;
          const e = (this._cache = this._createDescriptors(t));
          return this._notifyStateChanges(t), e;
        }
        _createDescriptors(t, e) {
          const i = t && t.config,
            s = ct(i.options && i.options.plugins, {}),
            n = (function (t) {
              const e = {},
                i = [],
                s = Object.keys(mn.plugins.items);
              for (let t = 0; t < s.length; t++) i.push(mn.getPlugin(s[t]));
              const n = t.plugins || [];
              for (let t = 0; t < n.length; t++) {
                const s = n[t];
                -1 === i.indexOf(s) && (i.push(s), (e[s.id] = !0));
              }
              return { plugins: i, localIds: e };
            })(i);
          return !1 !== s || e
            ? (function (t, { plugins: e, localIds: i }, s, n) {
                const o = [],
                  a = t.getContext();
                for (const r of e) {
                  const e = r.id,
                    l = xn(s[e], n);
                  null !== l &&
                    o.push({
                      plugin: r,
                      options: yn(t.config, { plugin: r, local: i[e] }, l, a),
                    });
                }
                return o;
              })(t, n, s, e)
            : [];
        }
        _notifyStateChanges(t) {
          const e = this._oldCache || [],
            i = this._cache,
            s = (t, e) =>
              t.filter((t) => !e.some((e) => t.plugin.id === e.plugin.id));
          this._notify(s(e, i), t, "stop"), this._notify(s(i, e), t, "start");
        }
      }
      function xn(t, e) {
        return e || !1 !== t ? (!0 === t ? {} : t) : null;
      }
      function yn(t, { plugin: e, local: i }, s, n) {
        const o = t.pluginScopeKeys(e),
          a = t.getOptionScopes(s, o);
        return (
          i && e.defaults && a.push(e.defaults),
          t.createResolver(a, n, [""], {
            scriptable: !1,
            indexable: !1,
            allKeys: !0,
          })
        );
      }
      function _n(t, e) {
        const i = Se.datasets[t] || {};
        return (
          ((e.datasets || {})[t] || {}).indexAxis ||
          e.indexAxis ||
          i.indexAxis ||
          "x"
        );
      }
      function vn(t) {
        if ("x" === t || "y" === t || "r" === t) return t;
      }
      function An(t, ...e) {
        if (vn(t)) return t;
        for (const s of e) {
          const e =
            s.axis ||
            ("top" === (i = s.position) || "bottom" === i
              ? "x"
              : "left" === i || "right" === i
              ? "y"
              : void 0) ||
            (t.length > 1 && vn(t[0].toLowerCase()));
          if (e) return e;
        }
        var i;
        throw new Error(
          `Cannot determine type of '${t}' axis. Please provide 'axis' or 'position' option.`,
        );
      }
      function wn(t, e, i) {
        if (i[e + "AxisID"] === t) return { axis: e };
      }
      function Mn(t) {
        const e = t.options || (t.options = {});
        (e.plugins = ct(e.plugins, {})),
          (e.scales = (function (t, e) {
            const i = Ae[t.type] || { scales: {} },
              s = e.scales || {},
              n = _n(t.type, e),
              o = Object.create(null);
            return (
              Object.keys(s).forEach((e) => {
                const a = s[e];
                if (!rt(a))
                  return console.error(
                    `Invalid scale configuration for scale: ${e}`,
                  );
                if (a._proxy)
                  return console.warn(
                    `Ignoring resolver passed as options for scale: ${e}`,
                  );
                const r = An(
                    e,
                    a,
                    (function (t, e) {
                      if (e.data && e.data.datasets) {
                        const i = e.data.datasets.filter(
                          (e) => e.xAxisID === t || e.yAxisID === t,
                        );
                        if (i.length)
                          return wn(t, "x", i[0]) || wn(t, "y", i[0]);
                      }
                      return {};
                    })(e, t),
                    Se.scales[a.type],
                  ),
                  l = (function (t, e) {
                    return t === e ? "_index_" : "_value_";
                  })(r, n),
                  h = i.scales || {};
                o[e] = yt(Object.create(null), [{ axis: r }, a, h[r], h[l]]);
              }),
              t.data.datasets.forEach((i) => {
                const n = i.type || t.type,
                  a = i.indexAxis || _n(n, e),
                  r = (Ae[n] || {}).scales || {};
                Object.keys(r).forEach((t) => {
                  const e = (function (t, e) {
                      let i = t;
                      return (
                        "_index_" === t
                          ? (i = e)
                          : "_value_" === t && (i = "x" === e ? "y" : "x"),
                        i
                      );
                    })(t, a),
                    n = i[e + "AxisID"] || e;
                  (o[n] = o[n] || Object.create(null)),
                    yt(o[n], [{ axis: e }, s[n], r[t]]);
                });
              }),
              Object.keys(o).forEach((t) => {
                const e = o[t];
                yt(e, [Se.scales[e.type], Se.scale]);
              }),
              o
            );
          })(t, e));
      }
      function kn(t) {
        return (
          ((t = t || {}).datasets = t.datasets || []),
          (t.labels = t.labels || []),
          t
        );
      }
      const Cn = new Map(),
        Sn = new Set();
      function Dn(t, e) {
        let i = Cn.get(t);
        return i || ((i = e()), Cn.set(t, i), Sn.add(i)), i;
      }
      const En = (t, e, i) => {
        const s = At(e, i);
        void 0 !== s && t.add(s);
      };
      class Pn {
        constructor(t) {
          (this._config = (function (t) {
            return ((t = t || {}).data = kn(t.data)), Mn(t), t;
          })(t)),
            (this._scopeCache = new Map()),
            (this._resolverCache = new Map());
        }
        get platform() {
          return this._config.platform;
        }
        get type() {
          return this._config.type;
        }
        set type(t) {
          this._config.type = t;
        }
        get data() {
          return this._config.data;
        }
        set data(t) {
          this._config.data = kn(t);
        }
        get options() {
          return this._config.options;
        }
        set options(t) {
          this._config.options = t;
        }
        get plugins() {
          return this._config.plugins;
        }
        update() {
          const t = this._config;
          this.clearCache(), Mn(t);
        }
        clearCache() {
          this._scopeCache.clear(), this._resolverCache.clear();
        }
        datasetScopeKeys(t) {
          return Dn(t, () => [[`datasets.${t}`, ""]]);
        }
        datasetAnimationScopeKeys(t, e) {
          return Dn(`${t}.transition.${e}`, () => [
            [`datasets.${t}.transitions.${e}`, `transitions.${e}`],
            [`datasets.${t}`, ""],
          ]);
        }
        datasetElementScopeKeys(t, e) {
          return Dn(`${t}-${e}`, () => [
            [
              `datasets.${t}.elements.${e}`,
              `datasets.${t}`,
              `elements.${e}`,
              "",
            ],
          ]);
        }
        pluginScopeKeys(t) {
          const e = t.id;
          return Dn(`${this.type}-plugin-${e}`, () => [
            [`plugins.${e}`, ...(t.additionalOptionScopes || [])],
          ]);
        }
        _cachedScopes(t, e) {
          const i = this._scopeCache;
          let s = i.get(t);
          return (s && !e) || ((s = new Map()), i.set(t, s)), s;
        }
        getOptionScopes(t, e, i) {
          const { options: s, type: n } = this,
            o = this._cachedScopes(t, i),
            a = o.get(e);
          if (a) return a;
          const r = new Set();
          e.forEach((e) => {
            t && (r.add(t), e.forEach((e) => En(r, t, e))),
              e.forEach((t) => En(r, s, t)),
              e.forEach((t) => En(r, Ae[n] || {}, t)),
              e.forEach((t) => En(r, Se, t)),
              e.forEach((t) => En(r, we, t));
          });
          const l = Array.from(r);
          return (
            0 === l.length && l.push(Object.create(null)),
            Sn.has(e) && o.set(e, l),
            l
          );
        }
        chartOptionScopes() {
          const { options: t, type: e } = this;
          return [t, Ae[e] || {}, Se.datasets[e] || {}, { type: e }, Se, we];
        }
        resolveNamedOptions(t, e, i, s = [""]) {
          const n = { $shared: !0 },
            { resolver: o, subPrefixes: a } = On(this._resolverCache, t, s);
          let r = o;
          (function (t, e) {
            const { isScriptable: i, isIndexable: s } = ii(t);
            for (const n of e) {
              const e = i(n),
                o = s(n),
                a = (o || e) && t[n];
              if ((e && (kt(a) || Tn(a))) || (o && at(a))) return !0;
            }
            return !1;
          })(o, e) &&
            ((n.$shared = !1),
            (r = ei(o, (i = kt(i) ? i() : i), this.createResolver(t, i, a))));
          for (const t of e) n[t] = r[t];
          return n;
        }
        createResolver(t, e, i = [""], s) {
          const { resolver: n } = On(this._resolverCache, t, i);
          return rt(e) ? ei(n, e, void 0, s) : n;
        }
      }
      function On(t, e, i) {
        let s = t.get(e);
        s || ((s = new Map()), t.set(e, s));
        const n = i.join();
        let o = s.get(n);
        return (
          o ||
            ((o = {
              resolver: ti(e, i),
              subPrefixes: i.filter((t) => !t.toLowerCase().includes("hover")),
            }),
            s.set(n, o)),
          o
        );
      }
      const Tn = (t) =>
          rt(t) &&
          Object.getOwnPropertyNames(t).reduce((e, i) => e || kt(t[i]), !1),
        Ln = ["top", "bottom", "left", "right", "chartArea"];
      function Rn(t, e) {
        return (
          "top" === t || "bottom" === t || (-1 === Ln.indexOf(t) && "x" === e)
        );
      }
      function Bn(t, e) {
        return function (i, s) {
          return i[t] === s[t] ? i[e] - s[e] : i[t] - s[t];
        };
      }
      function In(t) {
        const e = t.chart,
          i = e.options.animation;
        e.notifyPlugins("afterRender"), ut(i && i.onComplete, [t], e);
      }
      function zn(t) {
        const e = t.chart,
          i = e.options.animation;
        ut(i && i.onProgress, [t], e);
      }
      function Fn(t) {
        return (
          _i() && "string" == typeof t
            ? (t = document.getElementById(t))
            : t && t.length && (t = t[0]),
          t && t.canvas && (t = t.canvas),
          t
        );
      }
      const Wn = {},
        Vn = (t) => {
          const e = Fn(t);
          return Object.values(Wn)
            .filter((t) => t.canvas === e)
            .pop();
        };
      function Nn(t, e, i) {
        const s = Object.keys(t);
        for (const n of s) {
          const s = +n;
          if (s >= e) {
            const o = t[n];
            delete t[n], (i > 0 || s > e) && (t[s + i] = o);
          }
        }
      }
      class jn {
        static defaults = Se;
        static instances = Wn;
        static overrides = Ae;
        static registry = mn;
        static version = "4.3.3";
        static getChart = Vn;
        static register(...t) {
          mn.add(...t), Hn();
        }
        static unregister(...t) {
          mn.remove(...t), Hn();
        }
        constructor(t, e) {
          const i = (this.config = new Pn(e)),
            s = Fn(t),
            n = Vn(s);
          if (n)
            throw new Error(
              "Canvas is already in use. Chart with ID '" +
                n.id +
                "' must be destroyed before the canvas with ID '" +
                n.canvas.id +
                "' can be reused.",
            );
          const o = i.createResolver(i.chartOptionScopes(), this.getContext());
          (this.platform = new (i.platform ||
            (function (t) {
              return !_i() ||
                ("undefined" != typeof OffscreenCanvas &&
                  t instanceof OffscreenCanvas)
                ? Ns
                : sn;
            })(s))()),
            this.platform.updateConfig(i);
          const a = this.platform.acquireContext(s, o.aspectRatio),
            r = a && a.canvas,
            l = r && r.height,
            h = r && r.width;
          (this.id = nt()),
            (this.ctx = a),
            (this.canvas = r),
            (this.width = h),
            (this.height = l),
            (this._options = o),
            (this._aspectRatio = this.aspectRatio),
            (this._layers = []),
            (this._metasets = []),
            (this._stacks = void 0),
            (this.boxes = []),
            (this.currentDevicePixelRatio = void 0),
            (this.chartArea = void 0),
            (this._active = []),
            (this._lastEvent = void 0),
            (this._listeners = {}),
            (this._responsiveListeners = void 0),
            (this._sortedMetasets = []),
            (this.scales = {}),
            (this._plugins = new bn()),
            (this.$proxies = {}),
            (this._hiddenIndices = {}),
            (this.attached = !1),
            (this._animationsDisabled = void 0),
            (this.$context = void 0),
            (this._doResize = (function (t, e) {
              let i;
              return function (...s) {
                return (
                  e
                    ? (clearTimeout(i), (i = setTimeout(t, e, s)))
                    : t.apply(this, s),
                  e
                );
              };
            })((t) => this.update(t), o.resizeDelay || 0)),
            (this._dataChanges = []),
            (Wn[this.id] = this),
            a && r
              ? (Yi.listen(this, "complete", In),
                Yi.listen(this, "progress", zn),
                this._initialize(),
                this.attached && this.update())
              : console.error(
                  "Failed to create chart: can't acquire context from the given item",
                );
        }
        get aspectRatio() {
          const {
            options: { aspectRatio: t, maintainAspectRatio: e },
            width: i,
            height: s,
            _aspectRatio: n,
          } = this;
          return ot(t) ? (e && n ? n : s ? i / s : null) : t;
        }
        get data() {
          return this.config.data;
        }
        set data(t) {
          this.config.data = t;
        }
        get options() {
          return this._options;
        }
        set options(t) {
          this.config.options = t;
        }
        get registry() {
          return mn;
        }
        _initialize() {
          return (
            this.notifyPlugins("beforeInit"),
            this.options.responsive
              ? this.resize()
              : Ei(this, this.options.devicePixelRatio),
            this.bindEvents(),
            this.notifyPlugins("afterInit"),
            this
          );
        }
        clear() {
          return Oe(this.canvas, this.ctx), this;
        }
        stop() {
          return Yi.stop(this), this;
        }
        resize(t, e) {
          Yi.running(this)
            ? (this._resizeBeforeDraw = { width: t, height: e })
            : this._resize(t, e);
        }
        _resize(t, e) {
          const i = this.options,
            s = this.canvas,
            n = i.maintainAspectRatio && this.aspectRatio,
            o = this.platform.getMaximumSize(s, t, e, n),
            a = i.devicePixelRatio || this.platform.getDevicePixelRatio(),
            r = this.width ? "resize" : "attach";
          (this.width = o.width),
            (this.height = o.height),
            (this._aspectRatio = this.aspectRatio),
            Ei(this, a, !0) &&
              (this.notifyPlugins("resize", { size: o }),
              ut(i.onResize, [this, o], this),
              this.attached && this._doResize(r) && this.render());
        }
        ensureScalesHaveIDs() {
          ft(this.options.scales || {}, (t, e) => {
            t.id = e;
          });
        }
        buildOrUpdateScales() {
          const t = this.options,
            e = t.scales,
            i = this.scales,
            s = Object.keys(i).reduce((t, e) => ((t[e] = !1), t), {});
          let n = [];
          e &&
            (n = n.concat(
              Object.keys(e).map((t) => {
                const i = e[t],
                  s = An(t, i),
                  n = "r" === s,
                  o = "x" === s;
                return {
                  options: i,
                  dposition: n ? "chartArea" : o ? "bottom" : "left",
                  dtype: n ? "radialLinear" : o ? "category" : "linear",
                };
              }),
            )),
            ft(n, (e) => {
              const n = e.options,
                o = n.id,
                a = An(o, n),
                r = ct(n.type, e.dtype);
              (void 0 !== n.position &&
                Rn(n.position, a) === Rn(e.dposition)) ||
                (n.position = e.dposition),
                (s[o] = !0);
              let l = null;
              o in i && i[o].type === r
                ? (l = i[o])
                : ((l = new (mn.getScale(r))({
                    id: o,
                    type: r,
                    ctx: this.ctx,
                    chart: this,
                  })),
                  (i[l.id] = l)),
                l.init(n, t);
            }),
            ft(s, (t, e) => {
              t || delete i[e];
            }),
            ft(i, (t) => {
              Ws.configure(this, t, t.options), Ws.addBox(this, t);
            });
        }
        _updateMetasets() {
          const t = this._metasets,
            e = this.data.datasets.length,
            i = t.length;
          if ((t.sort((t, e) => t.index - e.index), i > e)) {
            for (let t = e; t < i; ++t) this._destroyDatasetMeta(t);
            t.splice(e, i - e);
          }
          this._sortedMetasets = t.slice(0).sort(Bn("order", "index"));
        }
        _removeUnreferencedMetasets() {
          const {
            _metasets: t,
            data: { datasets: e },
          } = this;
          t.length > e.length && delete this._stacks,
            t.forEach((t, i) => {
              0 === e.filter((e) => e === t._dataset).length &&
                this._destroyDatasetMeta(i);
            });
        }
        buildOrUpdateControllers() {
          const t = [],
            e = this.data.datasets;
          let i, s;
          for (
            this._removeUnreferencedMetasets(), i = 0, s = e.length;
            i < s;
            i++
          ) {
            const s = e[i];
            let n = this.getDatasetMeta(i);
            const o = s.type || this.config.type;
            if (
              (n.type &&
                n.type !== o &&
                (this._destroyDatasetMeta(i), (n = this.getDatasetMeta(i))),
              (n.type = o),
              (n.indexAxis = s.indexAxis || _n(o, this.options)),
              (n.order = s.order || 0),
              (n.index = i),
              (n.label = "" + s.label),
              (n.visible = this.isDatasetVisible(i)),
              n.controller)
            )
              n.controller.updateIndex(i), n.controller.linkScales();
            else {
              const e = mn.getController(o),
                { datasetElementType: s, dataElementType: a } = Se.datasets[o];
              Object.assign(e, {
                dataElementType: mn.getElement(a),
                datasetElementType: s && mn.getElement(s),
              }),
                (n.controller = new e(this, i)),
                t.push(n.controller);
            }
          }
          return this._updateMetasets(), t;
        }
        _resetElements() {
          ft(
            this.data.datasets,
            (t, e) => {
              this.getDatasetMeta(e).controller.reset();
            },
            this,
          );
        }
        reset() {
          this._resetElements(), this.notifyPlugins("reset");
        }
        update(t) {
          const e = this.config;
          e.update();
          const i = (this._options = e.createResolver(
              e.chartOptionScopes(),
              this.getContext(),
            )),
            s = (this._animationsDisabled = !i.animation);
          if (
            (this._updateScales(),
            this._checkEventBindings(),
            this._updateHiddenIndices(),
            this._plugins.invalidate(),
            !1 ===
              this.notifyPlugins("beforeUpdate", { mode: t, cancelable: !0 }))
          )
            return;
          const n = this.buildOrUpdateControllers();
          this.notifyPlugins("beforeElementsUpdate");
          let o = 0;
          for (let t = 0, e = this.data.datasets.length; t < e; t++) {
            const { controller: e } = this.getDatasetMeta(t),
              i = !s && -1 === n.indexOf(e);
            e.buildOrUpdateElements(i), (o = Math.max(+e.getMaxOverflow(), o));
          }
          (o = this._minPadding = i.layout.autoPadding ? o : 0),
            this._updateLayout(o),
            s ||
              ft(n, (t) => {
                t.reset();
              }),
            this._updateDatasets(t),
            this.notifyPlugins("afterUpdate", { mode: t }),
            this._layers.sort(Bn("z", "_idx"));
          const { _active: a, _lastEvent: r } = this;
          r
            ? this._eventHandler(r, !0)
            : a.length && this._updateHoverStyles(a, a, !0),
            this.render();
        }
        _updateScales() {
          ft(this.scales, (t) => {
            Ws.removeBox(this, t);
          }),
            this.ensureScalesHaveIDs(),
            this.buildOrUpdateScales();
        }
        _checkEventBindings() {
          const t = this.options,
            e = new Set(Object.keys(this._listeners)),
            i = new Set(t.events);
          (Ct(e, i) && !!this._responsiveListeners === t.responsive) ||
            (this.unbindEvents(), this.bindEvents());
        }
        _updateHiddenIndices() {
          const { _hiddenIndices: t } = this,
            e = this._getUniformDataChanges() || [];
          for (const { method: i, start: s, count: n } of e)
            Nn(t, s, "_removeElements" === i ? -n : n);
        }
        _getUniformDataChanges() {
          const t = this._dataChanges;
          if (!t || !t.length) return;
          this._dataChanges = [];
          const e = this.data.datasets.length,
            i = (e) =>
              new Set(
                t
                  .filter((t) => t[0] === e)
                  .map((t, e) => e + "," + t.splice(1).join(",")),
              ),
            s = i(0);
          for (let t = 1; t < e; t++) if (!Ct(s, i(t))) return;
          return Array.from(s)
            .map((t) => t.split(","))
            .map((t) => ({ method: t[1], start: +t[2], count: +t[3] }));
        }
        _updateLayout(t) {
          if (!1 === this.notifyPlugins("beforeLayout", { cancelable: !0 }))
            return;
          Ws.update(this, this.width, this.height, t);
          const e = this.chartArea,
            i = e.width <= 0 || e.height <= 0;
          (this._layers = []),
            ft(
              this.boxes,
              (t) => {
                (i && "chartArea" === t.position) ||
                  (t.configure && t.configure(),
                  this._layers.push(...t._layers()));
              },
              this,
            ),
            this._layers.forEach((t, e) => {
              t._idx = e;
            }),
            this.notifyPlugins("afterLayout");
        }
        _updateDatasets(t) {
          if (
            !1 !==
            this.notifyPlugins("beforeDatasetsUpdate", {
              mode: t,
              cancelable: !0,
            })
          ) {
            for (let t = 0, e = this.data.datasets.length; t < e; ++t)
              this.getDatasetMeta(t).controller.configure();
            for (let e = 0, i = this.data.datasets.length; e < i; ++e)
              this._updateDataset(e, kt(t) ? t({ datasetIndex: e }) : t);
            this.notifyPlugins("afterDatasetsUpdate", { mode: t });
          }
        }
        _updateDataset(t, e) {
          const i = this.getDatasetMeta(t),
            s = { meta: i, index: t, mode: e, cancelable: !0 };
          !1 !== this.notifyPlugins("beforeDatasetUpdate", s) &&
            (i.controller._update(e),
            (s.cancelable = !1),
            this.notifyPlugins("afterDatasetUpdate", s));
        }
        render() {
          !1 !== this.notifyPlugins("beforeRender", { cancelable: !0 }) &&
            (Yi.has(this)
              ? this.attached && !Yi.running(this) && Yi.start(this)
              : (this.draw(), In({ chart: this })));
        }
        draw() {
          let t;
          if (this._resizeBeforeDraw) {
            const { width: t, height: e } = this._resizeBeforeDraw;
            this._resize(t, e), (this._resizeBeforeDraw = null);
          }
          if ((this.clear(), this.width <= 0 || this.height <= 0)) return;
          if (!1 === this.notifyPlugins("beforeDraw", { cancelable: !0 }))
            return;
          const e = this._layers;
          for (t = 0; t < e.length && e[t].z <= 0; ++t)
            e[t].draw(this.chartArea);
          for (this._drawDatasets(); t < e.length; ++t)
            e[t].draw(this.chartArea);
          this.notifyPlugins("afterDraw");
        }
        _getSortedDatasetMetas(t) {
          const e = this._sortedMetasets,
            i = [];
          let s, n;
          for (s = 0, n = e.length; s < n; ++s) {
            const n = e[s];
            (t && !n.visible) || i.push(n);
          }
          return i;
        }
        getSortedVisibleDatasetMetas() {
          return this._getSortedDatasetMetas(!0);
        }
        _drawDatasets() {
          if (
            !1 === this.notifyPlugins("beforeDatasetsDraw", { cancelable: !0 })
          )
            return;
          const t = this.getSortedVisibleDatasetMetas();
          for (let e = t.length - 1; e >= 0; --e) this._drawDataset(t[e]);
          this.notifyPlugins("afterDatasetsDraw");
        }
        _drawDataset(t) {
          const e = this.ctx,
            i = t._clip,
            s = !i.disabled,
            n =
              (function (t) {
                const { xScale: e, yScale: i } = t;
                if (e && i)
                  return {
                    left: e.left,
                    right: e.right,
                    top: i.top,
                    bottom: i.bottom,
                  };
              })(t) || this.chartArea,
            o = { meta: t, index: t.index, cancelable: !0 };
          !1 !== this.notifyPlugins("beforeDatasetDraw", o) &&
            (s &&
              Be(e, {
                left: !1 === i.left ? 0 : n.left - i.left,
                right: !1 === i.right ? this.width : n.right + i.right,
                top: !1 === i.top ? 0 : n.top - i.top,
                bottom: !1 === i.bottom ? this.height : n.bottom + i.bottom,
              }),
            t.controller.draw(),
            s && Ie(e),
            (o.cancelable = !1),
            this.notifyPlugins("afterDatasetDraw", o));
        }
        isPointInArea(t) {
          return Re(t, this.chartArea, this._minPadding);
        }
        getElementsAtEventForMode(t, e, i, s) {
          const n = Ss.modes[e];
          return "function" == typeof n ? n(this, t, i, s) : [];
        }
        getDatasetMeta(t) {
          const e = this.data.datasets[t],
            i = this._metasets;
          let s = i.filter((t) => t && t._dataset === e).pop();
          return (
            s ||
              ((s = {
                type: null,
                data: [],
                dataset: null,
                controller: null,
                hidden: null,
                xAxisID: null,
                yAxisID: null,
                order: (e && e.order) || 0,
                index: t,
                _dataset: e,
                _parsed: [],
                _sorted: !1,
              }),
              i.push(s)),
            s
          );
        }
        getContext() {
          return (
            this.$context ||
            (this.$context = Qe(null, { chart: this, type: "chart" }))
          );
        }
        getVisibleDatasetCount() {
          return this.getSortedVisibleDatasetMetas().length;
        }
        isDatasetVisible(t) {
          const e = this.data.datasets[t];
          if (!e) return !1;
          const i = this.getDatasetMeta(t);
          return "boolean" == typeof i.hidden ? !i.hidden : !e.hidden;
        }
        setDatasetVisibility(t, e) {
          this.getDatasetMeta(t).hidden = !e;
        }
        toggleDataVisibility(t) {
          this._hiddenIndices[t] = !this._hiddenIndices[t];
        }
        getDataVisibility(t) {
          return !this._hiddenIndices[t];
        }
        _updateVisibility(t, e, i) {
          const s = i ? "show" : "hide",
            n = this.getDatasetMeta(t),
            o = n.controller._resolveAnimations(void 0, s);
          Mt(e)
            ? ((n.data[e].hidden = !i), this.update())
            : (this.setDatasetVisibility(t, i),
              o.update(n, { visible: i }),
              this.update((e) => (e.datasetIndex === t ? s : void 0)));
        }
        hide(t, e) {
          this._updateVisibility(t, e, !1);
        }
        show(t, e) {
          this._updateVisibility(t, e, !0);
        }
        _destroyDatasetMeta(t) {
          const e = this._metasets[t];
          e && e.controller && e.controller._destroy(),
            delete this._metasets[t];
        }
        _stop() {
          let t, e;
          for (
            this.stop(), Yi.remove(this), t = 0, e = this.data.datasets.length;
            t < e;
            ++t
          )
            this._destroyDatasetMeta(t);
        }
        destroy() {
          this.notifyPlugins("beforeDestroy");
          const { canvas: t, ctx: e } = this;
          this._stop(),
            this.config.clearCache(),
            t &&
              (this.unbindEvents(),
              Oe(t, e),
              this.platform.releaseContext(e),
              (this.canvas = null),
              (this.ctx = null)),
            delete Wn[this.id],
            this.notifyPlugins("afterDestroy");
        }
        toBase64Image(...t) {
          return this.canvas.toDataURL(...t);
        }
        bindEvents() {
          this.bindUserEvents(),
            this.options.responsive
              ? this.bindResponsiveEvents()
              : (this.attached = !0);
        }
        bindUserEvents() {
          const t = this._listeners,
            e = this.platform,
            i = (i, s) => {
              e.addEventListener(this, i, s), (t[i] = s);
            },
            s = (t, e, i) => {
              (t.offsetX = e), (t.offsetY = i), this._eventHandler(t);
            };
          ft(this.options.events, (t) => i(t, s));
        }
        bindResponsiveEvents() {
          this._responsiveListeners || (this._responsiveListeners = {});
          const t = this._responsiveListeners,
            e = this.platform,
            i = (i, s) => {
              e.addEventListener(this, i, s), (t[i] = s);
            },
            s = (i, s) => {
              t[i] && (e.removeEventListener(this, i, s), delete t[i]);
            },
            n = (t, e) => {
              this.canvas && this.resize(t, e);
            };
          let o;
          const a = () => {
            s("attach", a),
              (this.attached = !0),
              this.resize(),
              i("resize", n),
              i("detach", o);
          };
          (o = () => {
            (this.attached = !1),
              s("resize", n),
              this._stop(),
              this._resize(0, 0),
              i("attach", a);
          }),
            e.isAttached(this.canvas) ? a() : o();
        }
        unbindEvents() {
          ft(this._listeners, (t, e) => {
            this.platform.removeEventListener(this, e, t);
          }),
            (this._listeners = {}),
            ft(this._responsiveListeners, (t, e) => {
              this.platform.removeEventListener(this, e, t);
            }),
            (this._responsiveListeners = void 0);
        }
        updateHoverStyle(t, e, i) {
          const s = i ? "set" : "remove";
          let n, o, a, r;
          for (
            "dataset" === e &&
              ((n = this.getDatasetMeta(t[0].datasetIndex)),
              n.controller["_" + s + "DatasetHoverStyle"]()),
              a = 0,
              r = t.length;
            a < r;
            ++a
          ) {
            o = t[a];
            const e = o && this.getDatasetMeta(o.datasetIndex).controller;
            e && e[s + "HoverStyle"](o.element, o.datasetIndex, o.index);
          }
        }
        getActiveElements() {
          return this._active || [];
        }
        setActiveElements(t) {
          const e = this._active || [],
            i = t.map(({ datasetIndex: t, index: e }) => {
              const i = this.getDatasetMeta(t);
              if (!i) throw new Error("No dataset found at index " + t);
              return { datasetIndex: t, element: i.data[e], index: e };
            });
          !gt(i, e) &&
            ((this._active = i),
            (this._lastEvent = null),
            this._updateHoverStyles(i, e));
        }
        notifyPlugins(t, e, i) {
          return this._plugins.notify(this, t, e, i);
        }
        isPluginEnabled(t) {
          return (
            1 === this._plugins._cache.filter((e) => e.plugin.id === t).length
          );
        }
        _updateHoverStyles(t, e, i) {
          const s = this.options.hover,
            n = (t, e) =>
              t.filter(
                (t) =>
                  !e.some(
                    (e) =>
                      t.datasetIndex === e.datasetIndex && t.index === e.index,
                  ),
              ),
            o = n(e, t),
            a = i ? t : n(t, e);
          o.length && this.updateHoverStyle(o, s.mode, !1),
            a.length && s.mode && this.updateHoverStyle(a, s.mode, !0);
        }
        _eventHandler(t, e) {
          const i = {
              event: t,
              replay: e,
              cancelable: !0,
              inChartArea: this.isPointInArea(t),
            },
            s = (e) =>
              (e.options.events || this.options.events).includes(t.native.type);
          if (!1 === this.notifyPlugins("beforeEvent", i, s)) return;
          const n = this._handleEvent(t, e, i.inChartArea);
          return (
            (i.cancelable = !1),
            this.notifyPlugins("afterEvent", i, s),
            (n || i.changed) && this.render(),
            this
          );
        }
        _handleEvent(t, e, i) {
          const { _active: s = [], options: n } = this,
            o = e,
            a = this._getActiveElements(t, s, i, o),
            r = (function (t) {
              return (
                "mouseup" === t.type ||
                "click" === t.type ||
                "contextmenu" === t.type
              );
            })(t),
            l = (function (t, e, i, s) {
              return i && "mouseout" !== t.type ? (s ? e : t) : null;
            })(t, this._lastEvent, i, r);
          i &&
            ((this._lastEvent = null),
            ut(n.onHover, [t, a, this], this),
            r && ut(n.onClick, [t, a, this], this));
          const h = !gt(a, s);
          return (
            (h || e) && ((this._active = a), this._updateHoverStyles(a, s, e)),
            (this._lastEvent = l),
            h
          );
        }
        _getActiveElements(t, e, i, s) {
          if ("mouseout" === t.type) return [];
          if (!i) return e;
          const n = this.options.hover;
          return this.getElementsAtEventForMode(t, n.mode, n, s);
        }
      }
      function Hn() {
        return ft(jn.instances, (t) => t._plugins.invalidate());
      }
      function $n(t, e, i, s) {
        return { x: i + t * Math.cos(e), y: s + t * Math.sin(e) };
      }
      function Yn(t, e, i, s, n, o) {
        const { x: a, y: r, startAngle: l, pixelMargin: h, innerRadius: c } = e,
          d = Math.max(e.outerRadius + s + i - h, 0),
          u = c > 0 ? c + s + i + h : 0;
        let f = 0;
        const g = n - l;
        if (s) {
          const t = ((c > 0 ? c - s : 0) + (d > 0 ? d - s : 0)) / 2;
          f = (g - (0 !== t ? (g * t) / (t + s) : g)) / 2;
        }
        const p = (g - Math.max(0.001, g * d - i / St) / d) / 2,
          m = l + p + f,
          b = n - p - f,
          {
            outerStart: x,
            outerEnd: y,
            innerStart: _,
            innerEnd: v,
          } = (function (t, e, i, s) {
            const n = Xe(t.options.borderRadius, [
                "outerStart",
                "outerEnd",
                "innerStart",
                "innerEnd",
              ]),
              o = (i - e) / 2,
              a = Math.min(o, (s * e) / 2),
              r = (t) => {
                const e = ((i - Math.min(o, t)) * s) / 2;
                return qt(t, 0, Math.min(o, e));
              };
            return {
              outerStart: r(n.outerStart),
              outerEnd: r(n.outerEnd),
              innerStart: qt(n.innerStart, 0, a),
              innerEnd: qt(n.innerEnd, 0, a),
            };
          })(e, u, d, b - m),
          A = d - x,
          w = d - y,
          M = m + x / A,
          k = b - y / w,
          C = u + _,
          S = u + v,
          D = m + _ / C,
          E = b - v / S;
        if ((t.beginPath(), o)) {
          const e = (M + k) / 2;
          if ((t.arc(a, r, d, M, e), t.arc(a, r, d, e, k), y > 0)) {
            const e = $n(w, k, a, r);
            t.arc(e.x, e.y, y, k, b + Tt);
          }
          const i = $n(S, b, a, r);
          if ((t.lineTo(i.x, i.y), v > 0)) {
            const e = $n(S, E, a, r);
            t.arc(e.x, e.y, v, b + Tt, E + Math.PI);
          }
          const s = (b - v / u + (m + _ / u)) / 2;
          if (
            (t.arc(a, r, u, b - v / u, s, !0),
            t.arc(a, r, u, s, m + _ / u, !0),
            _ > 0)
          ) {
            const e = $n(C, D, a, r);
            t.arc(e.x, e.y, _, D + Math.PI, m - Tt);
          }
          const n = $n(A, m, a, r);
          if ((t.lineTo(n.x, n.y), x > 0)) {
            const e = $n(A, M, a, r);
            t.arc(e.x, e.y, x, m - Tt, M);
          }
        } else {
          t.moveTo(a, r);
          const e = Math.cos(M) * d + a,
            i = Math.sin(M) * d + r;
          t.lineTo(e, i);
          const s = Math.cos(k) * d + a,
            n = Math.sin(k) * d + r;
          t.lineTo(s, n);
        }
        t.closePath();
      }
      function Un(t, e, i = e) {
        (t.lineCap = ct(i.borderCapStyle, e.borderCapStyle)),
          t.setLineDash(ct(i.borderDash, e.borderDash)),
          (t.lineDashOffset = ct(i.borderDashOffset, e.borderDashOffset)),
          (t.lineJoin = ct(i.borderJoinStyle, e.borderJoinStyle)),
          (t.lineWidth = ct(i.borderWidth, e.borderWidth)),
          (t.strokeStyle = ct(i.borderColor, e.borderColor));
      }
      function Xn(t, e, i) {
        t.lineTo(i.x, i.y);
      }
      function Zn(t, e, i = {}) {
        const s = t.length,
          { start: n = 0, end: o = s - 1 } = i,
          { start: a, end: r } = e,
          l = Math.max(n, a),
          h = Math.min(o, r),
          c = (n < a && o < a) || (n > r && o > r);
        return {
          count: s,
          start: l,
          loop: e.loop,
          ilen: h < l && !c ? s + h - l : h - l,
        };
      }
      function qn(t, e, i, s) {
        const { points: n, options: o } = e,
          { count: a, start: r, loop: l, ilen: h } = Zn(n, i, s),
          c = (function (t) {
            return t.stepped
              ? ze
              : t.tension || "monotone" === t.cubicInterpolationMode
              ? Fe
              : Xn;
          })(o);
        let d,
          u,
          f,
          { move: g = !0, reverse: p } = s || {};
        for (d = 0; d <= h; ++d)
          (u = n[(r + (p ? h - d : d)) % a]),
            u.skip ||
              (g ? (t.moveTo(u.x, u.y), (g = !1)) : c(t, f, u, p, o.stepped),
              (f = u));
        return (
          l && ((u = n[(r + (p ? h : 0)) % a]), c(t, f, u, p, o.stepped)), !!l
        );
      }
      function Kn(t, e, i, s) {
        const n = e.points,
          { count: o, start: a, ilen: r } = Zn(n, i, s),
          { move: l = !0, reverse: h } = s || {};
        let c,
          d,
          u,
          f,
          g,
          p,
          m = 0,
          b = 0;
        const x = (t) => (a + (h ? r - t : t)) % o,
          y = () => {
            f !== g && (t.lineTo(m, g), t.lineTo(m, f), t.lineTo(m, p));
          };
        for (l && ((d = n[x(0)]), t.moveTo(d.x, d.y)), c = 0; c <= r; ++c) {
          if (((d = n[x(c)]), d.skip)) continue;
          const e = d.x,
            i = d.y,
            s = 0 | e;
          s === u
            ? (i < f ? (f = i) : i > g && (g = i), (m = (b * m + e) / ++b))
            : (y(), t.lineTo(e, i), (u = s), (b = 0), (f = g = i)),
            (p = i);
        }
        y();
      }
      function Gn(t) {
        const e = t.options,
          i = e.borderDash && e.borderDash.length;
        return t._decimated ||
          t._loop ||
          e.tension ||
          "monotone" === e.cubicInterpolationMode ||
          e.stepped ||
          i
          ? qn
          : Kn;
      }
      const Jn = "function" == typeof Path2D;
      class Qn extends nn {
        static id = "line";
        static defaults = {
          borderCapStyle: "butt",
          borderDash: [],
          borderDashOffset: 0,
          borderJoinStyle: "miter",
          borderWidth: 3,
          capBezierPoints: !0,
          cubicInterpolationMode: "default",
          fill: !1,
          spanGaps: !1,
          stepped: !1,
          tension: 0,
        };
        static defaultRoutes = {
          backgroundColor: "backgroundColor",
          borderColor: "borderColor",
        };
        static descriptors = {
          _scriptable: !0,
          _indexable: (t) => "borderDash" !== t && "fill" !== t,
        };
        constructor(t) {
          super(),
            (this.animated = !0),
            (this.options = void 0),
            (this._chart = void 0),
            (this._loop = void 0),
            (this._fullLoop = void 0),
            (this._path = void 0),
            (this._points = void 0),
            (this._segments = void 0),
            (this._decimated = !1),
            (this._pointsUpdated = !1),
            (this._datasetIndex = void 0),
            t && Object.assign(this, t);
        }
        updateControlPoints(t, e) {
          const i = this.options;
          if (
            (i.tension || "monotone" === i.cubicInterpolationMode) &&
            !i.stepped &&
            !this._pointsUpdated
          ) {
            const s = i.spanGaps ? this._loop : this._fullLoop;
            yi(this._points, i, t, s, e), (this._pointsUpdated = !0);
          }
        }
        set points(t) {
          (this._points = t),
            delete this._segments,
            delete this._path,
            (this._pointsUpdated = !1);
        }
        get points() {
          return this._points;
        }
        get segments() {
          return (
            this._segments ||
            (this._segments = (function (t, e) {
              const i = t.points,
                s = t.options.spanGaps,
                n = i.length;
              if (!n) return [];
              const o = !!t._loop,
                { start: a, end: r } = (function (t, e, i, s) {
                  let n = 0,
                    o = e - 1;
                  if (i && !s) for (; n < e && !t[n].skip; ) n++;
                  for (; n < e && t[n].skip; ) n++;
                  for (n %= e, i && (o += n); o > n && t[o % e].skip; ) o--;
                  return (o %= e), { start: n, end: o };
                })(i, n, o, s);
              return (function (t, e, i, s) {
                return s && s.setContext && i
                  ? (function (t, e, i, s) {
                      const n = t._chart.getContext(),
                        o = ji(t.options),
                        {
                          _datasetIndex: a,
                          options: { spanGaps: r },
                        } = t,
                        l = i.length,
                        h = [];
                      let c = o,
                        d = e[0].start,
                        u = d;
                      function f(t, e, s, n) {
                        const o = r ? -1 : 1;
                        if (t !== e) {
                          for (t += l; i[t % l].skip; ) t -= o;
                          for (; i[e % l].skip; ) e += o;
                          t % l != e % l &&
                            (h.push({
                              start: t % l,
                              end: e % l,
                              loop: s,
                              style: n,
                            }),
                            (c = n),
                            (d = e % l));
                        }
                      }
                      for (const t of e) {
                        d = r ? d : t.start;
                        let e,
                          o = i[d % l];
                        for (u = d + 1; u <= t.end; u++) {
                          const r = i[u % l];
                          (e = ji(
                            s.setContext(
                              Qe(n, {
                                type: "segment",
                                p0: o,
                                p1: r,
                                p0DataIndex: (u - 1) % l,
                                p1DataIndex: u % l,
                                datasetIndex: a,
                              }),
                            ),
                          )),
                            Hi(e, c) && f(d, u - 1, t.loop, c),
                            (o = r),
                            (c = e);
                        }
                        d < u - 1 && f(d, u - 1, t.loop, c);
                      }
                      return h;
                    })(t, e, i, s)
                  : e;
              })(
                t,
                !0 === s
                  ? [{ start: a, end: r, loop: o }]
                  : (function (t, e, i, s) {
                      const n = t.length,
                        o = [];
                      let a,
                        r = e,
                        l = t[e];
                      for (a = e + 1; a <= i; ++a) {
                        const i = t[a % n];
                        i.skip || i.stop
                          ? l.skip ||
                            ((s = !1),
                            o.push({ start: e % n, end: (a - 1) % n, loop: s }),
                            (e = r = i.stop ? a : null))
                          : ((r = a), l.skip && (e = a)),
                          (l = i);
                      }
                      return (
                        null !== r &&
                          o.push({ start: e % n, end: r % n, loop: s }),
                        o
                      );
                    })(
                      i,
                      a,
                      r < a ? r + n : r,
                      !!t._fullLoop && 0 === a && r === n - 1,
                    ),
                i,
                e,
              );
            })(this, this.options.segment))
          );
        }
        first() {
          const t = this.segments,
            e = this.points;
          return t.length && e[t[0].start];
        }
        last() {
          const t = this.segments,
            e = this.points,
            i = t.length;
          return i && e[t[i - 1].end];
        }
        interpolate(t, e) {
          const i = this.options,
            s = t[e],
            n = this.points,
            o = Ni(this, { property: e, start: s, end: s });
          if (!o.length) return;
          const a = [],
            r = (function (t) {
              return t.stepped
                ? Li
                : t.tension || "monotone" === t.cubicInterpolationMode
                ? Ri
                : Ti;
            })(i);
          let l, h;
          for (l = 0, h = o.length; l < h; ++l) {
            const { start: h, end: c } = o[l],
              d = n[h],
              u = n[c];
            if (d === u) {
              a.push(d);
              continue;
            }
            const f = r(d, u, Math.abs((s - d[e]) / (u[e] - d[e])), i.stepped);
            (f[e] = t[e]), a.push(f);
          }
          return 1 === a.length ? a[0] : a;
        }
        pathSegment(t, e, i) {
          return Gn(this)(t, this, e, i);
        }
        path(t, e, i) {
          const s = this.segments,
            n = Gn(this);
          let o = this._loop;
          (e = e || 0), (i = i || this.points.length - e);
          for (const a of s) o &= n(t, this, a, { start: e, end: e + i - 1 });
          return !!o;
        }
        draw(t, e, i, s) {
          const n = this.options || {};
          (this.points || []).length &&
            n.borderWidth &&
            (t.save(),
            (function (t, e, i, s) {
              Jn && !e.options.segment
                ? (function (t, e, i, s) {
                    let n = e._path;
                    n ||
                      ((n = e._path = new Path2D()),
                      e.path(n, i, s) && n.closePath()),
                      Un(t, e.options),
                      t.stroke(n);
                  })(t, e, i, s)
                : (function (t, e, i, s) {
                    const { segments: n, options: o } = e,
                      a = Gn(e);
                    for (const r of n)
                      Un(t, o, r.style),
                        t.beginPath(),
                        a(t, e, r, { start: i, end: i + s - 1 }) &&
                          t.closePath(),
                        t.stroke();
                  })(t, e, i, s);
            })(t, this, i, s),
            t.restore()),
            this.animated &&
              ((this._pointsUpdated = !1), (this._path = void 0));
        }
      }
      function to(t, e, i, s) {
        const n = t.options,
          { [i]: o } = t.getProps([i], s);
        return Math.abs(e - o) < n.radius + n.hitRadius;
      }
      function eo(t, e) {
        const {
          x: i,
          y: s,
          base: n,
          width: o,
          height: a,
        } = t.getProps(["x", "y", "base", "width", "height"], e);
        let r, l, h, c, d;
        return (
          t.horizontal
            ? ((d = a / 2),
              (r = Math.min(i, n)),
              (l = Math.max(i, n)),
              (h = s - d),
              (c = s + d))
            : ((d = o / 2),
              (r = i - d),
              (l = i + d),
              (h = Math.min(s, n)),
              (c = Math.max(s, n))),
          { left: r, top: h, right: l, bottom: c }
        );
      }
      function io(t, e, i, s) {
        return t ? 0 : qt(e, i, s);
      }
      function so(t, e, i, s) {
        const n = null === e,
          o = null === i,
          a = t && !(n && o) && eo(t, s);
        return (
          a && (n || Kt(e, a.left, a.right)) && (o || Kt(i, a.top, a.bottom))
        );
      }
      function no(t, e) {
        t.rect(e.x, e.y, e.w, e.h);
      }
      function oo(t, e, i = {}) {
        const s = t.x !== i.x ? -e : 0,
          n = t.y !== i.y ? -e : 0,
          o = (t.x + t.w !== i.x + i.w ? e : 0) - s,
          a = (t.y + t.h !== i.y + i.h ? e : 0) - n;
        return {
          x: t.x + s,
          y: t.y + n,
          w: t.w + o,
          h: t.h + a,
          radius: t.radius,
        };
      }
      var ao = Object.freeze({
        __proto__: null,
        ArcElement: class extends nn {
          static id = "arc";
          static defaults = {
            borderAlign: "center",
            borderColor: "#fff",
            borderDash: [],
            borderDashOffset: 0,
            borderJoinStyle: void 0,
            borderRadius: 0,
            borderWidth: 2,
            offset: 0,
            spacing: 0,
            angle: void 0,
            circular: !0,
          };
          static defaultRoutes = { backgroundColor: "backgroundColor" };
          static descriptors = {
            _scriptable: !0,
            _indexable: (t) => "borderDash" !== t,
          };
          circumference;
          endAngle;
          fullCircles;
          innerRadius;
          outerRadius;
          pixelMargin;
          startAngle;
          constructor(t) {
            super(),
              (this.options = void 0),
              (this.circumference = void 0),
              (this.startAngle = void 0),
              (this.endAngle = void 0),
              (this.innerRadius = void 0),
              (this.outerRadius = void 0),
              (this.pixelMargin = 0),
              (this.fullCircles = 0),
              t && Object.assign(this, t);
          }
          inRange(t, e, i) {
            const s = this.getProps(["x", "y"], i),
              { angle: n, distance: o } = $t(s, { x: t, y: e }),
              {
                startAngle: a,
                endAngle: r,
                innerRadius: l,
                outerRadius: h,
                circumference: c,
              } = this.getProps(
                [
                  "startAngle",
                  "endAngle",
                  "innerRadius",
                  "outerRadius",
                  "circumference",
                ],
                i,
              ),
              d = (this.options.spacing + this.options.borderWidth) / 2,
              u = ct(c, r - a) >= Dt || Zt(n, a, r),
              f = Kt(o, l + d, h + d);
            return u && f;
          }
          getCenterPoint(t) {
            const {
                x: e,
                y: i,
                startAngle: s,
                endAngle: n,
                innerRadius: o,
                outerRadius: a,
              } = this.getProps(
                [
                  "x",
                  "y",
                  "startAngle",
                  "endAngle",
                  "innerRadius",
                  "outerRadius",
                ],
                t,
              ),
              { offset: r, spacing: l } = this.options,
              h = (s + n) / 2,
              c = (o + a + l + r) / 2;
            return { x: e + Math.cos(h) * c, y: i + Math.sin(h) * c };
          }
          tooltipPosition(t) {
            return this.getCenterPoint(t);
          }
          draw(t) {
            const { options: e, circumference: i } = this,
              s = (e.offset || 0) / 4,
              n = (e.spacing || 0) / 2,
              o = e.circular;
            if (
              ((this.pixelMargin = "inner" === e.borderAlign ? 0.33 : 0),
              (this.fullCircles = i > Dt ? Math.floor(i / Dt) : 0),
              0 === i || this.innerRadius < 0 || this.outerRadius < 0)
            )
              return;
            t.save();
            const a = (this.startAngle + this.endAngle) / 2;
            t.translate(Math.cos(a) * s, Math.sin(a) * s);
            const r = s * (1 - Math.sin(Math.min(St, i || 0)));
            (t.fillStyle = e.backgroundColor),
              (t.strokeStyle = e.borderColor),
              (function (t, e, i, s, n) {
                const { fullCircles: o, startAngle: a, circumference: r } = e;
                let l = e.endAngle;
                if (o) {
                  Yn(t, e, i, s, l, n);
                  for (let e = 0; e < o; ++e) t.fill();
                  isNaN(r) || (l = a + (r % Dt || Dt));
                }
                Yn(t, e, i, s, l, n), t.fill();
              })(t, this, r, n, o),
              (function (t, e, i, s, n) {
                const {
                    fullCircles: o,
                    startAngle: a,
                    circumference: r,
                    options: l,
                  } = e,
                  {
                    borderWidth: h,
                    borderJoinStyle: c,
                    borderDash: d,
                    borderDashOffset: u,
                  } = l,
                  f = "inner" === l.borderAlign;
                if (!h) return;
                t.setLineDash(d || []),
                  (t.lineDashOffset = u),
                  f
                    ? ((t.lineWidth = 2 * h), (t.lineJoin = c || "round"))
                    : ((t.lineWidth = h), (t.lineJoin = c || "bevel"));
                let g = e.endAngle;
                if (o) {
                  Yn(t, e, i, s, g, n);
                  for (let e = 0; e < o; ++e) t.stroke();
                  isNaN(r) || (g = a + (r % Dt || Dt));
                }
                f &&
                  (function (t, e, i) {
                    const {
                      startAngle: s,
                      pixelMargin: n,
                      x: o,
                      y: a,
                      outerRadius: r,
                      innerRadius: l,
                    } = e;
                    let h = n / r;
                    t.beginPath(),
                      t.arc(o, a, r, s - h, i + h),
                      l > n
                        ? ((h = n / l), t.arc(o, a, l, i + h, s - h, !0))
                        : t.arc(o, a, n, i + Tt, s - Tt),
                      t.closePath(),
                      t.clip();
                  })(t, e, g),
                  o || (Yn(t, e, i, s, g, n), t.stroke());
              })(t, this, r, n, o),
              t.restore();
          }
        },
        BarElement: class extends nn {
          static id = "bar";
          static defaults = {
            borderSkipped: "start",
            borderWidth: 0,
            borderRadius: 0,
            inflateAmount: "auto",
            pointStyle: void 0,
          };
          static defaultRoutes = {
            backgroundColor: "backgroundColor",
            borderColor: "borderColor",
          };
          constructor(t) {
            super(),
              (this.options = void 0),
              (this.horizontal = void 0),
              (this.base = void 0),
              (this.width = void 0),
              (this.height = void 0),
              (this.inflateAmount = void 0),
              t && Object.assign(this, t);
          }
          draw(t) {
            const {
                inflateAmount: e,
                options: { borderColor: i, backgroundColor: s },
              } = this,
              { inner: n, outer: o } = (function (t) {
                const e = eo(t),
                  i = e.right - e.left,
                  s = e.bottom - e.top,
                  n = (function (t, e, i) {
                    const s = t.options.borderWidth,
                      n = t.borderSkipped,
                      o = Ze(s);
                    return {
                      t: io(n.top, o.top, 0, i),
                      r: io(n.right, o.right, 0, e),
                      b: io(n.bottom, o.bottom, 0, i),
                      l: io(n.left, o.left, 0, e),
                    };
                  })(t, i / 2, s / 2),
                  o = (function (t, e, i) {
                    const { enableBorderRadius: s } = t.getProps([
                        "enableBorderRadius",
                      ]),
                      n = t.options.borderRadius,
                      o = qe(n),
                      a = Math.min(e, i),
                      r = t.borderSkipped,
                      l = s || rt(n);
                    return {
                      topLeft: io(!l || r.top || r.left, o.topLeft, 0, a),
                      topRight: io(!l || r.top || r.right, o.topRight, 0, a),
                      bottomLeft: io(
                        !l || r.bottom || r.left,
                        o.bottomLeft,
                        0,
                        a,
                      ),
                      bottomRight: io(
                        !l || r.bottom || r.right,
                        o.bottomRight,
                        0,
                        a,
                      ),
                    };
                  })(t, i / 2, s / 2);
                return {
                  outer: { x: e.left, y: e.top, w: i, h: s, radius: o },
                  inner: {
                    x: e.left + n.l,
                    y: e.top + n.t,
                    w: i - n.l - n.r,
                    h: s - n.t - n.b,
                    radius: {
                      topLeft: Math.max(0, o.topLeft - Math.max(n.t, n.l)),
                      topRight: Math.max(0, o.topRight - Math.max(n.t, n.r)),
                      bottomLeft: Math.max(
                        0,
                        o.bottomLeft - Math.max(n.b, n.l),
                      ),
                      bottomRight: Math.max(
                        0,
                        o.bottomRight - Math.max(n.b, n.r),
                      ),
                    },
                  },
                };
              })(this),
              a =
                (r = o.radius).topLeft ||
                r.topRight ||
                r.bottomLeft ||
                r.bottomRight
                  ? je
                  : no;
            var r;
            t.save(),
              (o.w === n.w && o.h === n.h) ||
                (t.beginPath(),
                a(t, oo(o, e, n)),
                t.clip(),
                a(t, oo(n, -e, o)),
                (t.fillStyle = i),
                t.fill("evenodd")),
              t.beginPath(),
              a(t, oo(n, e)),
              (t.fillStyle = s),
              t.fill(),
              t.restore();
          }
          inRange(t, e, i) {
            return so(this, t, e, i);
          }
          inXRange(t, e) {
            return so(this, t, null, e);
          }
          inYRange(t, e) {
            return so(this, null, t, e);
          }
          getCenterPoint(t) {
            const {
              x: e,
              y: i,
              base: s,
              horizontal: n,
            } = this.getProps(["x", "y", "base", "horizontal"], t);
            return { x: n ? (e + s) / 2 : e, y: n ? i : (i + s) / 2 };
          }
          getRange(t) {
            return "x" === t ? this.width / 2 : this.height / 2;
          }
        },
        LineElement: Qn,
        PointElement: class extends nn {
          static id = "point";
          parsed;
          skip;
          stop;
          static defaults = {
            borderWidth: 1,
            hitRadius: 1,
            hoverBorderWidth: 1,
            hoverRadius: 4,
            pointStyle: "circle",
            radius: 3,
            rotation: 0,
          };
          static defaultRoutes = {
            backgroundColor: "backgroundColor",
            borderColor: "borderColor",
          };
          constructor(t) {
            super(),
              (this.options = void 0),
              (this.parsed = void 0),
              (this.skip = void 0),
              (this.stop = void 0),
              t && Object.assign(this, t);
          }
          inRange(t, e, i) {
            const s = this.options,
              { x: n, y: o } = this.getProps(["x", "y"], i);
            return (
              Math.pow(t - n, 2) + Math.pow(e - o, 2) <
              Math.pow(s.hitRadius + s.radius, 2)
            );
          }
          inXRange(t, e) {
            return to(this, t, "x", e);
          }
          inYRange(t, e) {
            return to(this, t, "y", e);
          }
          getCenterPoint(t) {
            const { x: e, y: i } = this.getProps(["x", "y"], t);
            return { x: e, y: i };
          }
          size(t) {
            let e = (t = t || this.options || {}).radius || 0;
            return (
              (e = Math.max(e, (e && t.hoverRadius) || 0)),
              2 * (e + ((e && t.borderWidth) || 0))
            );
          }
          draw(t, e) {
            const i = this.options;
            this.skip ||
              i.radius < 0.1 ||
              !Re(this, e, this.size(i) / 2) ||
              ((t.strokeStyle = i.borderColor),
              (t.lineWidth = i.borderWidth),
              (t.fillStyle = i.backgroundColor),
              Te(t, i, this.x, this.y));
          }
          getRange() {
            const t = this.options || {};
            return t.radius + t.hitRadius;
          }
        },
      });
      const ro = [
          "rgb(54, 162, 235)",
          "rgb(255, 99, 132)",
          "rgb(255, 159, 64)",
          "rgb(255, 205, 86)",
          "rgb(75, 192, 192)",
          "rgb(153, 102, 255)",
          "rgb(201, 203, 207)",
        ],
        lo = ro.map((t) => t.replace("rgb(", "rgba(").replace(")", ", 0.5)"));
      function ho(t) {
        return ro[t % ro.length];
      }
      function co(t) {
        return lo[t % lo.length];
      }
      function uo(t) {
        let e;
        for (e in t) if (t[e].borderColor || t[e].backgroundColor) return !0;
        return !1;
      }
      var fo = {
        id: "colors",
        defaults: { enabled: !0, forceOverride: !1 },
        beforeLayout(t, e, i) {
          if (!i.enabled) return;
          const {
              data: { datasets: s },
              options: n,
            } = t.config,
            { elements: o } = n;
          if (
            !i.forceOverride &&
            (uo(s) ||
              ((a = n) && (a.borderColor || a.backgroundColor)) ||
              (o && uo(o)))
          )
            return;
          var a;
          const r = (function (t) {
            let e = 0;
            return (i, s) => {
              const n = t.getDatasetMeta(s).controller;
              n instanceof ms
                ? (e = (function (t, e) {
                    return (t.backgroundColor = t.data.map(() => ho(e++))), e;
                  })(i, e))
                : n instanceof bs
                ? (e = (function (t, e) {
                    return (t.backgroundColor = t.data.map(() => co(e++))), e;
                  })(i, e))
                : n &&
                  (e = (function (t, e) {
                    return (
                      (t.borderColor = ho(e)), (t.backgroundColor = co(e)), ++e
                    );
                  })(i, e));
            };
          })(t);
          s.forEach(r);
        },
      };
      function go(t) {
        if (t._decimated) {
          const e = t._data;
          delete t._decimated,
            delete t._data,
            Object.defineProperty(t, "data", {
              configurable: !0,
              enumerable: !0,
              writable: !0,
              value: e,
            });
        }
      }
      function po(t) {
        t.data.datasets.forEach((t) => {
          go(t);
        });
      }
      var mo = {
        id: "decimation",
        defaults: { algorithm: "min-max", enabled: !1 },
        beforeElementsUpdate: (t, e, i) => {
          if (!i.enabled) return void po(t);
          const s = t.width;
          t.data.datasets.forEach((e, n) => {
            const { _data: o, indexAxis: a } = e,
              r = t.getDatasetMeta(n),
              l = o || e.data;
            if ("y" === Je([a, t.options.indexAxis])) return;
            if (!r.controller.supportsDecimation) return;
            const h = t.scales[r.xAxisID];
            if ("linear" !== h.type && "time" !== h.type) return;
            if (t.options.parsing) return;
            let c,
              { start: d, count: u } = (function (t, e) {
                const i = e.length;
                let s,
                  n = 0;
                const { iScale: o } = t,
                  {
                    min: a,
                    max: r,
                    minDefined: l,
                    maxDefined: h,
                  } = o.getUserBounds();
                return (
                  l && (n = qt(Jt(e, o.axis, a).lo, 0, i - 1)),
                  (s = h ? qt(Jt(e, o.axis, r).hi + 1, n, i) - n : i - n),
                  { start: n, count: s }
                );
              })(r, l);
            if (u <= (i.threshold || 4 * s)) go(e);
            else {
              switch (
                (ot(o) &&
                  ((e._data = l),
                  delete e.data,
                  Object.defineProperty(e, "data", {
                    configurable: !0,
                    enumerable: !0,
                    get: function () {
                      return this._decimated;
                    },
                    set: function (t) {
                      this._data = t;
                    },
                  })),
                i.algorithm)
              ) {
                case "lttb":
                  c = (function (t, e, i, s, n) {
                    const o = n.samples || s;
                    if (o >= i) return t.slice(e, e + i);
                    const a = [],
                      r = (i - 2) / (o - 2);
                    let l = 0;
                    const h = e + i - 1;
                    let c,
                      d,
                      u,
                      f,
                      g,
                      p = e;
                    for (a[l++] = t[p], c = 0; c < o - 2; c++) {
                      let s,
                        n = 0,
                        o = 0;
                      const h = Math.floor((c + 1) * r) + 1 + e,
                        m = Math.min(Math.floor((c + 2) * r) + 1, i) + e,
                        b = m - h;
                      for (s = h; s < m; s++) (n += t[s].x), (o += t[s].y);
                      (n /= b), (o /= b);
                      const x = Math.floor(c * r) + 1 + e,
                        y = Math.min(Math.floor((c + 1) * r) + 1, i) + e,
                        { x: _, y: v } = t[p];
                      for (u = f = -1, s = x; s < y; s++)
                        (f =
                          0.5 *
                          Math.abs(
                            (_ - n) * (t[s].y - v) - (_ - t[s].x) * (o - v),
                          )),
                          f > u && ((u = f), (d = t[s]), (g = s));
                      (a[l++] = d), (p = g);
                    }
                    return (a[l++] = t[h]), a;
                  })(l, d, u, s, i);
                  break;
                case "min-max":
                  c = (function (t, e, i, s) {
                    let n,
                      o,
                      a,
                      r,
                      l,
                      h,
                      c,
                      d,
                      u,
                      f,
                      g = 0,
                      p = 0;
                    const m = [],
                      b = e + i - 1,
                      x = t[e].x,
                      y = t[b].x - x;
                    for (n = e; n < e + i; ++n) {
                      (o = t[n]), (a = ((o.x - x) / y) * s), (r = o.y);
                      const e = 0 | a;
                      if (e === l)
                        r < u
                          ? ((u = r), (h = n))
                          : r > f && ((f = r), (c = n)),
                          (g = (p * g + o.x) / ++p);
                      else {
                        const i = n - 1;
                        if (!ot(h) && !ot(c)) {
                          const e = Math.min(h, c),
                            s = Math.max(h, c);
                          e !== d && e !== i && m.push({ ...t[e], x: g }),
                            s !== d && s !== i && m.push({ ...t[s], x: g });
                        }
                        n > 0 && i !== d && m.push(t[i]),
                          m.push(o),
                          (l = e),
                          (p = 0),
                          (u = f = r),
                          (h = c = d = n);
                      }
                    }
                    return m;
                  })(l, d, u, s);
                  break;
                default:
                  throw new Error(
                    `Unsupported decimation algorithm '${i.algorithm}'`,
                  );
              }
              e._decimated = c;
            }
          });
        },
        destroy(t) {
          po(t);
        },
      };
      function bo(t, e, i, s) {
        if (s) return;
        let n = e[t],
          o = i[t];
        return (
          "angle" === t && ((n = Xt(n)), (o = Xt(o))),
          { property: t, start: n, end: o }
        );
      }
      function xo(t, e, i) {
        for (; e > t; e--) {
          const t = i[e];
          if (!isNaN(t.x) && !isNaN(t.y)) break;
        }
        return e;
      }
      function yo(t, e, i, s) {
        return t && e ? s(t[i], e[i]) : t ? t[i] : e ? e[i] : 0;
      }
      function _o(t, e) {
        let i = [],
          s = !1;
        return (
          at(t)
            ? ((s = !0), (i = t))
            : (i = (function (t, e) {
                const { x: i = null, y: s = null } = t || {},
                  n = e.points,
                  o = [];
                return (
                  e.segments.forEach(({ start: t, end: e }) => {
                    e = xo(t, e, n);
                    const a = n[t],
                      r = n[e];
                    null !== s
                      ? (o.push({ x: a.x, y: s }), o.push({ x: r.x, y: s }))
                      : null !== i &&
                        (o.push({ x: i, y: a.y }), o.push({ x: i, y: r.y }));
                  }),
                  o
                );
              })(t, e)),
          i.length
            ? new Qn({
                points: i,
                options: { tension: 0 },
                _loop: s,
                _fullLoop: s,
              })
            : null
        );
      }
      function vo(t) {
        return t && !1 !== t.fill;
      }
      function Ao(t, e, i) {
        let s = t[e].fill;
        const n = [e];
        let o;
        if (!i) return s;
        for (; !1 !== s && -1 === n.indexOf(s); ) {
          if (!lt(s)) return s;
          if (((o = t[s]), !o)) return !1;
          if (o.visible) return s;
          n.push(s), (s = o.fill);
        }
        return !1;
      }
      function wo(t, e, i) {
        const s = (function (t) {
          const e = t.options,
            i = e.fill;
          let s = ct(i && i.target, i);
          return (
            void 0 === s && (s = !!e.backgroundColor),
            !1 !== s && null !== s && (!0 === s ? "origin" : s)
          );
        })(t);
        if (rt(s)) return !isNaN(s.value) && s;
        let n = parseFloat(s);
        return lt(n) && Math.floor(n) === n
          ? (function (t, e, i, s) {
              return (
                ("-" !== t && "+" !== t) || (i = e + i),
                !(i === e || i < 0 || i >= s) && i
              );
            })(s[0], e, n, i)
          : ["origin", "start", "end", "stack", "shape"].indexOf(s) >= 0 && s;
      }
      function Mo(t, e, i) {
        const s = [];
        for (let n = 0; n < i.length; n++) {
          const o = i[n],
            { first: a, last: r, point: l } = ko(o, e, "x");
          if (!(!l || (a && r)))
            if (a) s.unshift(l);
            else if ((t.push(l), !r)) break;
        }
        t.push(...s);
      }
      function ko(t, e, i) {
        const s = t.interpolate(e, i);
        if (!s) return {};
        const n = s[i],
          o = t.segments,
          a = t.points;
        let r = !1,
          l = !1;
        for (let t = 0; t < o.length; t++) {
          const e = o[t],
            s = a[e.start][i],
            h = a[e.end][i];
          if (Kt(n, s, h)) {
            (r = n === s), (l = n === h);
            break;
          }
        }
        return { first: r, last: l, point: s };
      }
      class Co {
        constructor(t) {
          (this.x = t.x), (this.y = t.y), (this.radius = t.radius);
        }
        pathSegment(t, e, i) {
          const { x: s, y: n, radius: o } = this;
          return (
            (e = e || { start: 0, end: Dt }),
            t.arc(s, n, o, e.end, e.start, !0),
            !i.bounds
          );
        }
        interpolate(t) {
          const { x: e, y: i, radius: s } = this,
            n = t.angle;
          return { x: e + Math.cos(n) * s, y: i + Math.sin(n) * s, angle: n };
        }
      }
      function So(t, e, i) {
        const s = (function (t) {
            const { chart: e, fill: i, line: s } = t;
            if (lt(i))
              return (function (t, e) {
                const i = t.getDatasetMeta(e);
                return i && t.isDatasetVisible(e) ? i.dataset : null;
              })(e, i);
            if ("stack" === i)
              return (function (t) {
                const { scale: e, index: i, line: s } = t,
                  n = [],
                  o = s.segments,
                  a = s.points,
                  r = (function (t, e) {
                    const i = [],
                      s = t.getMatchingVisibleMetas("line");
                    for (let t = 0; t < s.length; t++) {
                      const n = s[t];
                      if (n.index === e) break;
                      n.hidden || i.unshift(n.dataset);
                    }
                    return i;
                  })(e, i);
                r.push(_o({ x: null, y: e.bottom }, s));
                for (let t = 0; t < o.length; t++) {
                  const e = o[t];
                  for (let t = e.start; t <= e.end; t++) Mo(n, a[t], r);
                }
                return new Qn({ points: n, options: {} });
              })(t);
            if ("shape" === i) return !0;
            const n = (function (t) {
              return (t.scale || {}).getPointPositionForValue
                ? (function (t) {
                    const { scale: e, fill: i } = t,
                      s = e.options,
                      n = e.getLabels().length,
                      o = s.reverse ? e.max : e.min,
                      a = (function (t, e, i) {
                        let s;
                        return (
                          (s =
                            "start" === t
                              ? i
                              : "end" === t
                              ? e.options.reverse
                                ? e.min
                                : e.max
                              : rt(t)
                              ? t.value
                              : e.getBaseValue()),
                          s
                        );
                      })(i, e, o),
                      r = [];
                    if (s.grid.circular) {
                      const t = e.getPointPositionForValue(0, o);
                      return new Co({
                        x: t.x,
                        y: t.y,
                        radius: e.getDistanceFromCenterForValue(a),
                      });
                    }
                    for (let t = 0; t < n; ++t)
                      r.push(e.getPointPositionForValue(t, a));
                    return r;
                  })(t)
                : (function (t) {
                    const { scale: e = {}, fill: i } = t,
                      s = (function (t, e) {
                        let i = null;
                        return (
                          "start" === t
                            ? (i = e.bottom)
                            : "end" === t
                            ? (i = e.top)
                            : rt(t)
                            ? (i = e.getPixelForValue(t.value))
                            : e.getBasePixel && (i = e.getBasePixel()),
                          i
                        );
                      })(i, e);
                    if (lt(s)) {
                      const t = e.isHorizontal();
                      return { x: t ? s : null, y: t ? null : s };
                    }
                    return null;
                  })(t);
            })(t);
            return n instanceof Co ? n : _o(n, s);
          })(e),
          { line: n, scale: o, axis: a } = e,
          r = n.options,
          l = r.fill,
          h = r.backgroundColor,
          { above: c = h, below: d = h } = l || {};
        s &&
          n.points.length &&
          (Be(t, i),
          (function (t, e) {
            const {
                line: i,
                target: s,
                above: n,
                below: o,
                area: a,
                scale: r,
              } = e,
              l = i._loop ? "angle" : e.axis;
            t.save(),
              "x" === l &&
                o !== n &&
                (Do(t, s, a.top),
                Eo(t, { line: i, target: s, color: n, scale: r, property: l }),
                t.restore(),
                t.save(),
                Do(t, s, a.bottom)),
              Eo(t, { line: i, target: s, color: o, scale: r, property: l }),
              t.restore();
          })(t, {
            line: n,
            target: s,
            above: c,
            below: d,
            area: i,
            scale: o,
            axis: a,
          }),
          Ie(t));
      }
      function Do(t, e, i) {
        const { segments: s, points: n } = e;
        let o = !0,
          a = !1;
        t.beginPath();
        for (const r of s) {
          const { start: s, end: l } = r,
            h = n[s],
            c = n[xo(s, l, n)];
          o
            ? (t.moveTo(h.x, h.y), (o = !1))
            : (t.lineTo(h.x, i), t.lineTo(h.x, h.y)),
            (a = !!e.pathSegment(t, r, { move: a })),
            a ? t.closePath() : t.lineTo(c.x, i);
        }
        t.lineTo(e.first().x, i), t.closePath(), t.clip();
      }
      function Eo(t, e) {
        const { line: i, target: s, property: n, color: o, scale: a } = e,
          r = (function (t, e, i) {
            const s = t.segments,
              n = t.points,
              o = e.points,
              a = [];
            for (const t of s) {
              let { start: s, end: r } = t;
              r = xo(s, r, n);
              const l = bo(i, n[s], n[r], t.loop);
              if (!e.segments) {
                a.push({ source: t, target: l, start: n[s], end: n[r] });
                continue;
              }
              const h = Ni(e, l);
              for (const e of h) {
                const s = bo(i, o[e.start], o[e.end], e.loop),
                  r = Vi(t, n, s);
                for (const t of r)
                  a.push({
                    source: t,
                    target: e,
                    start: { [i]: yo(l, s, "start", Math.max) },
                    end: { [i]: yo(l, s, "end", Math.min) },
                  });
              }
            }
            return a;
          })(i, s, n);
        for (const { source: e, target: l, start: h, end: c } of r) {
          const { style: { backgroundColor: r = o } = {} } = e,
            d = !0 !== s;
          t.save(),
            (t.fillStyle = r),
            Po(t, a, d && bo(n, h, c)),
            t.beginPath();
          const u = !!i.pathSegment(t, e);
          let f;
          if (d) {
            u ? t.closePath() : Oo(t, s, c, n);
            const e = !!s.pathSegment(t, l, { move: u, reverse: !0 });
            (f = u && e), f || Oo(t, s, h, n);
          }
          t.closePath(), t.fill(f ? "evenodd" : "nonzero"), t.restore();
        }
      }
      function Po(t, e, i) {
        const { top: s, bottom: n } = e.chart.chartArea,
          { property: o, start: a, end: r } = i || {};
        "x" === o && (t.beginPath(), t.rect(a, s, r - a, n - s), t.clip());
      }
      function Oo(t, e, i, s) {
        const n = e.interpolate(i, s);
        n && t.lineTo(n.x, n.y);
      }
      var To = {
        id: "filler",
        afterDatasetsUpdate(t, e, i) {
          const s = (t.data.datasets || []).length,
            n = [];
          let o, a, r, l;
          for (a = 0; a < s; ++a)
            (o = t.getDatasetMeta(a)),
              (r = o.dataset),
              (l = null),
              r &&
                r.options &&
                r instanceof Qn &&
                (l = {
                  visible: t.isDatasetVisible(a),
                  index: a,
                  fill: wo(r, a, s),
                  chart: t,
                  axis: o.controller.options.indexAxis,
                  scale: o.vScale,
                  line: r,
                }),
              (o.$filler = l),
              n.push(l);
          for (a = 0; a < s; ++a)
            (l = n[a]), l && !1 !== l.fill && (l.fill = Ao(n, a, i.propagate));
        },
        beforeDraw(t, e, i) {
          const s = "beforeDraw" === i.drawTime,
            n = t.getSortedVisibleDatasetMetas(),
            o = t.chartArea;
          for (let e = n.length - 1; e >= 0; --e) {
            const i = n[e].$filler;
            i &&
              (i.line.updateControlPoints(o, i.axis),
              s && i.fill && So(t.ctx, i, o));
          }
        },
        beforeDatasetsDraw(t, e, i) {
          if ("beforeDatasetsDraw" !== i.drawTime) return;
          const s = t.getSortedVisibleDatasetMetas();
          for (let e = s.length - 1; e >= 0; --e) {
            const i = s[e].$filler;
            vo(i) && So(t.ctx, i, t.chartArea);
          }
        },
        beforeDatasetDraw(t, e, i) {
          const s = e.meta.$filler;
          vo(s) &&
            "beforeDatasetDraw" === i.drawTime &&
            So(t.ctx, s, t.chartArea);
        },
        defaults: { propagate: !0, drawTime: "beforeDatasetDraw" },
      };
      const Lo = (t, e) => {
        let { boxHeight: i = e, boxWidth: s = e } = t;
        return (
          t.usePointStyle &&
            ((i = Math.min(i, e)), (s = t.pointStyleWidth || Math.min(s, e))),
          { boxWidth: s, boxHeight: i, itemHeight: Math.max(e, i) }
        );
      };
      class Ro extends nn {
        constructor(t) {
          super(),
            (this._added = !1),
            (this.legendHitBoxes = []),
            (this._hoveredItem = null),
            (this.doughnutMode = !1),
            (this.chart = t.chart),
            (this.options = t.options),
            (this.ctx = t.ctx),
            (this.legendItems = void 0),
            (this.columnSizes = void 0),
            (this.lineWidths = void 0),
            (this.maxHeight = void 0),
            (this.maxWidth = void 0),
            (this.top = void 0),
            (this.bottom = void 0),
            (this.left = void 0),
            (this.right = void 0),
            (this.height = void 0),
            (this.width = void 0),
            (this._margins = void 0),
            (this.position = void 0),
            (this.weight = void 0),
            (this.fullSize = void 0);
        }
        update(t, e, i) {
          (this.maxWidth = t),
            (this.maxHeight = e),
            (this._margins = i),
            this.setDimensions(),
            this.buildLabels(),
            this.fit();
        }
        setDimensions() {
          this.isHorizontal()
            ? ((this.width = this.maxWidth),
              (this.left = this._margins.left),
              (this.right = this.width))
            : ((this.height = this.maxHeight),
              (this.top = this._margins.top),
              (this.bottom = this.height));
        }
        buildLabels() {
          const t = this.options.labels || {};
          let e = ut(t.generateLabels, [this.chart], this) || [];
          t.filter && (e = e.filter((e) => t.filter(e, this.chart.data))),
            t.sort && (e = e.sort((e, i) => t.sort(e, i, this.chart.data))),
            this.options.reverse && e.reverse(),
            (this.legendItems = e);
        }
        fit() {
          const { options: t, ctx: e } = this;
          if (!t.display) return void (this.width = this.height = 0);
          const i = t.labels,
            s = Ge(i.font),
            n = s.size,
            o = this._computeTitleHeight(),
            { boxWidth: a, itemHeight: r } = Lo(i, n);
          let l, h;
          (e.font = s.string),
            this.isHorizontal()
              ? ((l = this.maxWidth), (h = this._fitRows(o, n, a, r) + 10))
              : ((h = this.maxHeight), (l = this._fitCols(o, s, a, r) + 10)),
            (this.width = Math.min(l, t.maxWidth || this.maxWidth)),
            (this.height = Math.min(h, t.maxHeight || this.maxHeight));
        }
        _fitRows(t, e, i, s) {
          const {
              ctx: n,
              maxWidth: o,
              options: {
                labels: { padding: a },
              },
            } = this,
            r = (this.legendHitBoxes = []),
            l = (this.lineWidths = [0]),
            h = s + a;
          let c = t;
          (n.textAlign = "left"), (n.textBaseline = "middle");
          let d = -1,
            u = -h;
          return (
            this.legendItems.forEach((t, f) => {
              const g = i + e / 2 + n.measureText(t.text).width;
              (0 === f || l[l.length - 1] + g + 2 * a > o) &&
                ((c += h), (l[l.length - (f > 0 ? 0 : 1)] = 0), (u += h), d++),
                (r[f] = { left: 0, top: u, row: d, width: g, height: s }),
                (l[l.length - 1] += g + a);
            }),
            c
          );
        }
        _fitCols(t, e, i, s) {
          const {
              ctx: n,
              maxHeight: o,
              options: {
                labels: { padding: a },
              },
            } = this,
            r = (this.legendHitBoxes = []),
            l = (this.columnSizes = []),
            h = o - t;
          let c = a,
            d = 0,
            u = 0,
            f = 0,
            g = 0;
          return (
            this.legendItems.forEach((t, o) => {
              const { itemWidth: p, itemHeight: m } = (function (
                t,
                e,
                i,
                s,
                n,
              ) {
                const o = (function (t, e, i, s) {
                    let n = t.text;
                    return (
                      n &&
                        "string" != typeof n &&
                        (n = n.reduce((t, e) => (t.length > e.length ? t : e))),
                      e + i.size / 2 + s.measureText(n).width
                    );
                  })(s, t, e, i),
                  a = (function (t, e, i) {
                    let s = t;
                    return "string" != typeof e.text && (s = Bo(e, i)), s;
                  })(n, s, e.lineHeight);
                return { itemWidth: o, itemHeight: a };
              })(i, e, n, t, s);
              o > 0 &&
                u + m + 2 * a > h &&
                ((c += d + a),
                l.push({ width: d, height: u }),
                (f += d + a),
                g++,
                (d = u = 0)),
                (r[o] = { left: f, top: u, col: g, width: p, height: m }),
                (d = Math.max(d, p)),
                (u += m + a);
            }),
            (c += d),
            l.push({ width: d, height: u }),
            c
          );
        }
        adjustHitBoxes() {
          if (!this.options.display) return;
          const t = this._computeTitleHeight(),
            {
              legendHitBoxes: e,
              options: {
                align: i,
                labels: { padding: s },
                rtl: n,
              },
            } = this,
            o = Bi(n, this.left, this.width);
          if (this.isHorizontal()) {
            let n = 0,
              a = ae(i, this.left + s, this.right - this.lineWidths[n]);
            for (const r of e)
              n !== r.row &&
                ((n = r.row),
                (a = ae(i, this.left + s, this.right - this.lineWidths[n]))),
                (r.top += this.top + t + s),
                (r.left = o.leftForLtr(o.x(a), r.width)),
                (a += r.width + s);
          } else {
            let n = 0,
              a = ae(
                i,
                this.top + t + s,
                this.bottom - this.columnSizes[n].height,
              );
            for (const r of e)
              r.col !== n &&
                ((n = r.col),
                (a = ae(
                  i,
                  this.top + t + s,
                  this.bottom - this.columnSizes[n].height,
                ))),
                (r.top = a),
                (r.left += this.left + s),
                (r.left = o.leftForLtr(o.x(r.left), r.width)),
                (a += r.height + s);
          }
        }
        isHorizontal() {
          return (
            "top" === this.options.position ||
            "bottom" === this.options.position
          );
        }
        draw() {
          if (this.options.display) {
            const t = this.ctx;
            Be(t, this), this._draw(), Ie(t);
          }
        }
        _draw() {
          const { options: t, columnSizes: e, lineWidths: i, ctx: s } = this,
            { align: n, labels: o } = t,
            a = Se.color,
            r = Bi(t.rtl, this.left, this.width),
            l = Ge(o.font),
            { padding: h } = o,
            c = l.size,
            d = c / 2;
          let u;
          this.drawTitle(),
            (s.textAlign = r.textAlign("left")),
            (s.textBaseline = "middle"),
            (s.lineWidth = 0.5),
            (s.font = l.string);
          const { boxWidth: f, boxHeight: g, itemHeight: p } = Lo(o, c),
            m = this.isHorizontal(),
            b = this._computeTitleHeight();
          (u = m
            ? {
                x: ae(n, this.left + h, this.right - i[0]),
                y: this.top + h + b,
                line: 0,
              }
            : {
                x: this.left + h,
                y: ae(n, this.top + b + h, this.bottom - e[0].height),
                line: 0,
              }),
            Ii(this.ctx, t.textDirection);
          const x = p + h;
          this.legendItems.forEach((y, _) => {
            (s.strokeStyle = y.fontColor), (s.fillStyle = y.fontColor);
            const v = s.measureText(y.text).width,
              A = r.textAlign(y.textAlign || (y.textAlign = o.textAlign)),
              w = f + d + v;
            let M = u.x,
              k = u.y;
            if (
              (r.setWidth(this.width),
              m
                ? _ > 0 &&
                  M + w + h > this.right &&
                  ((k = u.y += x),
                  u.line++,
                  (M = u.x = ae(n, this.left + h, this.right - i[u.line])))
                : _ > 0 &&
                  k + x > this.bottom &&
                  ((M = u.x = M + e[u.line].width + h),
                  u.line++,
                  (k = u.y =
                    ae(n, this.top + b + h, this.bottom - e[u.line].height))),
              (function (t, e, i) {
                if (isNaN(f) || f <= 0 || isNaN(g) || g < 0) return;
                s.save();
                const n = ct(i.lineWidth, 1);
                if (
                  ((s.fillStyle = ct(i.fillStyle, a)),
                  (s.lineCap = ct(i.lineCap, "butt")),
                  (s.lineDashOffset = ct(i.lineDashOffset, 0)),
                  (s.lineJoin = ct(i.lineJoin, "miter")),
                  (s.lineWidth = n),
                  (s.strokeStyle = ct(i.strokeStyle, a)),
                  s.setLineDash(ct(i.lineDash, [])),
                  o.usePointStyle)
                ) {
                  const a = {
                      radius: (g * Math.SQRT2) / 2,
                      pointStyle: i.pointStyle,
                      rotation: i.rotation,
                      borderWidth: n,
                    },
                    l = r.xPlus(t, f / 2);
                  Le(s, a, l, e + d, o.pointStyleWidth && f);
                } else {
                  const o = e + Math.max((c - g) / 2, 0),
                    a = r.leftForLtr(t, f),
                    l = qe(i.borderRadius);
                  s.beginPath(),
                    Object.values(l).some((t) => 0 !== t)
                      ? je(s, { x: a, y: o, w: f, h: g, radius: l })
                      : s.rect(a, o, f, g),
                    s.fill(),
                    0 !== n && s.stroke();
                }
                s.restore();
              })(r.x(M), k, y),
              (M = ((t, e, i, s) =>
                t === (s ? "left" : "right")
                  ? i
                  : "center" === t
                  ? (e + i) / 2
                  : e)(A, M + f + d, m ? M + w : this.right, t.rtl)),
              (function (t, e, i) {
                Ne(s, i.text, t, e + p / 2, l, {
                  strikethrough: i.hidden,
                  textAlign: r.textAlign(i.textAlign),
                });
              })(r.x(M), k, y),
              m)
            )
              u.x += w + h;
            else if ("string" != typeof y.text) {
              const t = l.lineHeight;
              u.y += Bo(y, t) + h;
            } else u.y += x;
          }),
            zi(this.ctx, t.textDirection);
        }
        drawTitle() {
          const t = this.options,
            e = t.title,
            i = Ge(e.font),
            s = Ke(e.padding);
          if (!e.display) return;
          const n = Bi(t.rtl, this.left, this.width),
            o = this.ctx,
            a = e.position,
            r = i.size / 2,
            l = s.top + r;
          let h,
            c = this.left,
            d = this.width;
          if (this.isHorizontal())
            (d = Math.max(...this.lineWidths)),
              (h = this.top + l),
              (c = ae(t.align, c, this.right - d));
          else {
            const e = this.columnSizes.reduce(
              (t, e) => Math.max(t, e.height),
              0,
            );
            h =
              l +
              ae(
                t.align,
                this.top,
                this.bottom - e - t.labels.padding - this._computeTitleHeight(),
              );
          }
          const u = ae(a, c, c + d);
          (o.textAlign = n.textAlign(oe(a))),
            (o.textBaseline = "middle"),
            (o.strokeStyle = e.color),
            (o.fillStyle = e.color),
            (o.font = i.string),
            Ne(o, e.text, u, h, i);
        }
        _computeTitleHeight() {
          const t = this.options.title,
            e = Ge(t.font),
            i = Ke(t.padding);
          return t.display ? e.lineHeight + i.height : 0;
        }
        _getLegendItemAt(t, e) {
          let i, s, n;
          if (Kt(t, this.left, this.right) && Kt(e, this.top, this.bottom))
            for (n = this.legendHitBoxes, i = 0; i < n.length; ++i)
              if (
                ((s = n[i]),
                Kt(t, s.left, s.left + s.width) &&
                  Kt(e, s.top, s.top + s.height))
              )
                return this.legendItems[i];
          return null;
        }
        handleEvent(t) {
          const e = this.options;
          if (
            !(function (t, e) {
              return (
                !(
                  ("mousemove" !== t && "mouseout" !== t) ||
                  (!e.onHover && !e.onLeave)
                ) || !(!e.onClick || ("click" !== t && "mouseup" !== t))
              );
            })(t.type, e)
          )
            return;
          const i = this._getLegendItemAt(t.x, t.y);
          if ("mousemove" === t.type || "mouseout" === t.type) {
            const o = this._hoveredItem,
              a =
                ((n = i),
                null !== (s = o) &&
                  null !== n &&
                  s.datasetIndex === n.datasetIndex &&
                  s.index === n.index);
            o && !a && ut(e.onLeave, [t, o, this], this),
              (this._hoveredItem = i),
              i && !a && ut(e.onHover, [t, i, this], this);
          } else i && ut(e.onClick, [t, i, this], this);
          var s, n;
        }
      }
      function Bo(t, e) {
        return e * (t.text ? t.text.length : 0);
      }
      var Io = {
        id: "legend",
        _element: Ro,
        start(t, e, i) {
          const s = (t.legend = new Ro({ ctx: t.ctx, options: i, chart: t }));
          Ws.configure(t, s, i), Ws.addBox(t, s);
        },
        stop(t) {
          Ws.removeBox(t, t.legend), delete t.legend;
        },
        beforeUpdate(t, e, i) {
          const s = t.legend;
          Ws.configure(t, s, i), (s.options = i);
        },
        afterUpdate(t) {
          const e = t.legend;
          e.buildLabels(), e.adjustHitBoxes();
        },
        afterEvent(t, e) {
          e.replay || t.legend.handleEvent(e.event);
        },
        defaults: {
          display: !0,
          position: "top",
          align: "center",
          fullSize: !0,
          reverse: !1,
          weight: 1e3,
          onClick(t, e, i) {
            const s = e.datasetIndex,
              n = i.chart;
            n.isDatasetVisible(s)
              ? (n.hide(s), (e.hidden = !0))
              : (n.show(s), (e.hidden = !1));
          },
          onHover: null,
          onLeave: null,
          labels: {
            color: (t) => t.chart.options.color,
            boxWidth: 40,
            padding: 10,
            generateLabels(t) {
              const e = t.data.datasets,
                {
                  labels: {
                    usePointStyle: i,
                    pointStyle: s,
                    textAlign: n,
                    color: o,
                    useBorderRadius: a,
                    borderRadius: r,
                  },
                } = t.legend.options;
              return t._getSortedDatasetMetas().map((t) => {
                const l = t.controller.getStyle(i ? 0 : void 0),
                  h = Ke(l.borderWidth);
                return {
                  text: e[t.index].label,
                  fillStyle: l.backgroundColor,
                  fontColor: o,
                  hidden: !t.visible,
                  lineCap: l.borderCapStyle,
                  lineDash: l.borderDash,
                  lineDashOffset: l.borderDashOffset,
                  lineJoin: l.borderJoinStyle,
                  lineWidth: (h.width + h.height) / 4,
                  strokeStyle: l.borderColor,
                  pointStyle: s || l.pointStyle,
                  rotation: l.rotation,
                  textAlign: n || l.textAlign,
                  borderRadius: a && (r || l.borderRadius),
                  datasetIndex: t.index,
                };
              }, this);
            },
          },
          title: {
            color: (t) => t.chart.options.color,
            display: !1,
            position: "center",
            text: "",
          },
        },
        descriptors: {
          _scriptable: (t) => !t.startsWith("on"),
          labels: {
            _scriptable: (t) =>
              !["generateLabels", "filter", "sort"].includes(t),
          },
        },
      };
      class zo extends nn {
        constructor(t) {
          super(),
            (this.chart = t.chart),
            (this.options = t.options),
            (this.ctx = t.ctx),
            (this._padding = void 0),
            (this.top = void 0),
            (this.bottom = void 0),
            (this.left = void 0),
            (this.right = void 0),
            (this.width = void 0),
            (this.height = void 0),
            (this.position = void 0),
            (this.weight = void 0),
            (this.fullSize = void 0);
        }
        update(t, e) {
          const i = this.options;
          if (((this.left = 0), (this.top = 0), !i.display))
            return void (this.width =
              this.height =
              this.right =
              this.bottom =
                0);
          (this.width = this.right = t), (this.height = this.bottom = e);
          const s = at(i.text) ? i.text.length : 1;
          this._padding = Ke(i.padding);
          const n = s * Ge(i.font).lineHeight + this._padding.height;
          this.isHorizontal() ? (this.height = n) : (this.width = n);
        }
        isHorizontal() {
          const t = this.options.position;
          return "top" === t || "bottom" === t;
        }
        _drawArgs(t) {
          const { top: e, left: i, bottom: s, right: n, options: o } = this,
            a = o.align;
          let r,
            l,
            h,
            c = 0;
          return (
            this.isHorizontal()
              ? ((l = ae(a, i, n)), (h = e + t), (r = n - i))
              : ("left" === o.position
                  ? ((l = i + t), (h = ae(a, s, e)), (c = -0.5 * St))
                  : ((l = n - t), (h = ae(a, e, s)), (c = 0.5 * St)),
                (r = s - e)),
            { titleX: l, titleY: h, maxWidth: r, rotation: c }
          );
        }
        draw() {
          const t = this.ctx,
            e = this.options;
          if (!e.display) return;
          const i = Ge(e.font),
            s = i.lineHeight / 2 + this._padding.top,
            {
              titleX: n,
              titleY: o,
              maxWidth: a,
              rotation: r,
            } = this._drawArgs(s);
          Ne(t, e.text, 0, 0, i, {
            color: e.color,
            maxWidth: a,
            rotation: r,
            textAlign: oe(e.align),
            textBaseline: "middle",
            translation: [n, o],
          });
        }
      }
      var Fo = {
        id: "title",
        _element: zo,
        start(t, e, i) {
          !(function (t, e) {
            const i = new zo({ ctx: t.ctx, options: e, chart: t });
            Ws.configure(t, i, e), Ws.addBox(t, i), (t.titleBlock = i);
          })(t, i);
        },
        stop(t) {
          const e = t.titleBlock;
          Ws.removeBox(t, e), delete t.titleBlock;
        },
        beforeUpdate(t, e, i) {
          const s = t.titleBlock;
          Ws.configure(t, s, i), (s.options = i);
        },
        defaults: {
          align: "center",
          display: !1,
          font: { weight: "bold" },
          fullSize: !0,
          padding: 10,
          position: "top",
          text: "",
          weight: 2e3,
        },
        defaultRoutes: { color: "color" },
        descriptors: { _scriptable: !0, _indexable: !1 },
      };
      const Wo = new WeakMap();
      var Vo = {
        id: "subtitle",
        start(t, e, i) {
          const s = new zo({ ctx: t.ctx, options: i, chart: t });
          Ws.configure(t, s, i), Ws.addBox(t, s), Wo.set(t, s);
        },
        stop(t) {
          Ws.removeBox(t, Wo.get(t)), Wo.delete(t);
        },
        beforeUpdate(t, e, i) {
          const s = Wo.get(t);
          Ws.configure(t, s, i), (s.options = i);
        },
        defaults: {
          align: "center",
          display: !1,
          font: { weight: "normal" },
          fullSize: !0,
          padding: 0,
          position: "top",
          text: "",
          weight: 1500,
        },
        defaultRoutes: { color: "color" },
        descriptors: { _scriptable: !0, _indexable: !1 },
      };
      const No = {
        average(t) {
          if (!t.length) return !1;
          let e,
            i,
            s = 0,
            n = 0,
            o = 0;
          for (e = 0, i = t.length; e < i; ++e) {
            const i = t[e].element;
            if (i && i.hasValue()) {
              const t = i.tooltipPosition();
              (s += t.x), (n += t.y), ++o;
            }
          }
          return { x: s / o, y: n / o };
        },
        nearest(t, e) {
          if (!t.length) return !1;
          let i,
            s,
            n,
            o = e.x,
            a = e.y,
            r = Number.POSITIVE_INFINITY;
          for (i = 0, s = t.length; i < s; ++i) {
            const s = t[i].element;
            if (s && s.hasValue()) {
              const t = Yt(e, s.getCenterPoint());
              t < r && ((r = t), (n = s));
            }
          }
          if (n) {
            const t = n.tooltipPosition();
            (o = t.x), (a = t.y);
          }
          return { x: o, y: a };
        },
      };
      function jo(t, e) {
        return e && (at(e) ? Array.prototype.push.apply(t, e) : t.push(e)), t;
      }
      function Ho(t) {
        return ("string" == typeof t || t instanceof String) &&
          t.indexOf("\n") > -1
          ? t.split("\n")
          : t;
      }
      function $o(t, e) {
        const { element: i, datasetIndex: s, index: n } = e,
          o = t.getDatasetMeta(s).controller,
          { label: a, value: r } = o.getLabelAndValue(n);
        return {
          chart: t,
          label: a,
          parsed: o.getParsed(n),
          raw: t.data.datasets[s].data[n],
          formattedValue: r,
          dataset: o.getDataset(),
          dataIndex: n,
          datasetIndex: s,
          element: i,
        };
      }
      function Yo(t, e) {
        const i = t.chart.ctx,
          { body: s, footer: n, title: o } = t,
          { boxWidth: a, boxHeight: r } = e,
          l = Ge(e.bodyFont),
          h = Ge(e.titleFont),
          c = Ge(e.footerFont),
          d = o.length,
          u = n.length,
          f = s.length,
          g = Ke(e.padding);
        let p = g.height,
          m = 0,
          b = s.reduce(
            (t, e) => t + e.before.length + e.lines.length + e.after.length,
            0,
          );
        (b += t.beforeBody.length + t.afterBody.length),
          d &&
            (p +=
              d * h.lineHeight +
              (d - 1) * e.titleSpacing +
              e.titleMarginBottom),
          b &&
            (p +=
              f * (e.displayColors ? Math.max(r, l.lineHeight) : l.lineHeight) +
              (b - f) * l.lineHeight +
              (b - 1) * e.bodySpacing),
          u &&
            (p +=
              e.footerMarginTop + u * c.lineHeight + (u - 1) * e.footerSpacing);
        let x = 0;
        const y = function (t) {
          m = Math.max(m, i.measureText(t).width + x);
        };
        return (
          i.save(),
          (i.font = h.string),
          ft(t.title, y),
          (i.font = l.string),
          ft(t.beforeBody.concat(t.afterBody), y),
          (x = e.displayColors ? a + 2 + e.boxPadding : 0),
          ft(s, (t) => {
            ft(t.before, y), ft(t.lines, y), ft(t.after, y);
          }),
          (x = 0),
          (i.font = c.string),
          ft(t.footer, y),
          i.restore(),
          (m += g.width),
          { width: m, height: p }
        );
      }
      function Uo(t, e, i, s) {
        const { x: n, width: o } = i,
          {
            width: a,
            chartArea: { left: r, right: l },
          } = t;
        let h = "center";
        return (
          "center" === s
            ? (h = n <= (r + l) / 2 ? "left" : "right")
            : n <= o / 2
            ? (h = "left")
            : n >= a - o / 2 && (h = "right"),
          (function (t, e, i, s) {
            const { x: n, width: o } = s,
              a = i.caretSize + i.caretPadding;
            return (
              ("left" === t && n + o + a > e.width) ||
              ("right" === t && n - o - a < 0) ||
              void 0
            );
          })(h, t, e, i) && (h = "center"),
          h
        );
      }
      function Xo(t, e, i) {
        const s =
          i.yAlign ||
          e.yAlign ||
          (function (t, e) {
            const { y: i, height: s } = e;
            return i < s / 2
              ? "top"
              : i > t.height - s / 2
              ? "bottom"
              : "center";
          })(t, i);
        return { xAlign: i.xAlign || e.xAlign || Uo(t, e, i, s), yAlign: s };
      }
      function Zo(t, e, i, s) {
        const { caretSize: n, caretPadding: o, cornerRadius: a } = t,
          { xAlign: r, yAlign: l } = i,
          h = n + o,
          { topLeft: c, topRight: d, bottomLeft: u, bottomRight: f } = qe(a);
        let g = (function (t, e) {
          let { x: i, width: s } = t;
          return "right" === e ? (i -= s) : "center" === e && (i -= s / 2), i;
        })(e, r);
        const p = (function (t, e, i) {
          let { y: s, height: n } = t;
          return (
            "top" === e ? (s += i) : (s -= "bottom" === e ? n + i : n / 2), s
          );
        })(e, l, h);
        return (
          "center" === l
            ? "left" === r
              ? (g += h)
              : "right" === r && (g -= h)
            : "left" === r
            ? (g -= Math.max(c, u) + n)
            : "right" === r && (g += Math.max(d, f) + n),
          { x: qt(g, 0, s.width - e.width), y: qt(p, 0, s.height - e.height) }
        );
      }
      function qo(t, e, i) {
        const s = Ke(i.padding);
        return "center" === e
          ? t.x + t.width / 2
          : "right" === e
          ? t.x + t.width - s.right
          : t.x + s.left;
      }
      function Ko(t) {
        return jo([], Ho(t));
      }
      function Go(t, e) {
        const i =
          e && e.dataset && e.dataset.tooltip && e.dataset.tooltip.callbacks;
        return i ? t.override(i) : t;
      }
      const Jo = {
        beforeTitle: st,
        title(t) {
          if (t.length > 0) {
            const e = t[0],
              i = e.chart.data.labels,
              s = i ? i.length : 0;
            if (this && this.options && "dataset" === this.options.mode)
              return e.dataset.label || "";
            if (e.label) return e.label;
            if (s > 0 && e.dataIndex < s) return i[e.dataIndex];
          }
          return "";
        },
        afterTitle: st,
        beforeBody: st,
        beforeLabel: st,
        label(t) {
          if (this && this.options && "dataset" === this.options.mode)
            return t.label + ": " + t.formattedValue || t.formattedValue;
          let e = t.dataset.label || "";
          e && (e += ": ");
          const i = t.formattedValue;
          return ot(i) || (e += i), e;
        },
        labelColor(t) {
          const e = t.chart
            .getDatasetMeta(t.datasetIndex)
            .controller.getStyle(t.dataIndex);
          return {
            borderColor: e.borderColor,
            backgroundColor: e.backgroundColor,
            borderWidth: e.borderWidth,
            borderDash: e.borderDash,
            borderDashOffset: e.borderDashOffset,
            borderRadius: 0,
          };
        },
        labelTextColor() {
          return this.options.bodyColor;
        },
        labelPointStyle(t) {
          const e = t.chart
            .getDatasetMeta(t.datasetIndex)
            .controller.getStyle(t.dataIndex);
          return { pointStyle: e.pointStyle, rotation: e.rotation };
        },
        afterLabel: st,
        afterBody: st,
        beforeFooter: st,
        footer: st,
        afterFooter: st,
      };
      function Qo(t, e, i, s) {
        const n = t[e].call(i, s);
        return void 0 === n ? Jo[e].call(i, s) : n;
      }
      class ta extends nn {
        static positioners = No;
        constructor(t) {
          super(),
            (this.opacity = 0),
            (this._active = []),
            (this._eventPosition = void 0),
            (this._size = void 0),
            (this._cachedAnimations = void 0),
            (this._tooltipItems = []),
            (this.$animations = void 0),
            (this.$context = void 0),
            (this.chart = t.chart),
            (this.options = t.options),
            (this.dataPoints = void 0),
            (this.title = void 0),
            (this.beforeBody = void 0),
            (this.body = void 0),
            (this.afterBody = void 0),
            (this.footer = void 0),
            (this.xAlign = void 0),
            (this.yAlign = void 0),
            (this.x = void 0),
            (this.y = void 0),
            (this.height = void 0),
            (this.width = void 0),
            (this.caretX = void 0),
            (this.caretY = void 0),
            (this.labelColors = void 0),
            (this.labelPointStyles = void 0),
            (this.labelTextColors = void 0);
        }
        initialize(t) {
          (this.options = t),
            (this._cachedAnimations = void 0),
            (this.$context = void 0);
        }
        _resolveAnimations() {
          const t = this._cachedAnimations;
          if (t) return t;
          const e = this.chart,
            i = this.options.setContext(this.getContext()),
            s = i.enabled && e.options.animation && i.animations,
            n = new qi(this.chart, s);
          return s._cacheable && (this._cachedAnimations = Object.freeze(n)), n;
        }
        getContext() {
          return (
            this.$context ||
            (this.$context =
              (this,
              Qe(this.chart.getContext(), {
                tooltip: this,
                tooltipItems: this._tooltipItems,
                type: "tooltip",
              })))
          );
        }
        getTitle(t, e) {
          const { callbacks: i } = e,
            s = Qo(i, "beforeTitle", this, t),
            n = Qo(i, "title", this, t),
            o = Qo(i, "afterTitle", this, t);
          let a = [];
          return (a = jo(a, Ho(s))), (a = jo(a, Ho(n))), (a = jo(a, Ho(o))), a;
        }
        getBeforeBody(t, e) {
          return Ko(Qo(e.callbacks, "beforeBody", this, t));
        }
        getBody(t, e) {
          const { callbacks: i } = e,
            s = [];
          return (
            ft(t, (t) => {
              const e = { before: [], lines: [], after: [] },
                n = Go(i, t);
              jo(e.before, Ho(Qo(n, "beforeLabel", this, t))),
                jo(e.lines, Qo(n, "label", this, t)),
                jo(e.after, Ho(Qo(n, "afterLabel", this, t))),
                s.push(e);
            }),
            s
          );
        }
        getAfterBody(t, e) {
          return Ko(Qo(e.callbacks, "afterBody", this, t));
        }
        getFooter(t, e) {
          const { callbacks: i } = e,
            s = Qo(i, "beforeFooter", this, t),
            n = Qo(i, "footer", this, t),
            o = Qo(i, "afterFooter", this, t);
          let a = [];
          return (a = jo(a, Ho(s))), (a = jo(a, Ho(n))), (a = jo(a, Ho(o))), a;
        }
        _createItems(t) {
          const e = this._active,
            i = this.chart.data,
            s = [],
            n = [],
            o = [];
          let a,
            r,
            l = [];
          for (a = 0, r = e.length; a < r; ++a) l.push($o(this.chart, e[a]));
          return (
            t.filter && (l = l.filter((e, s, n) => t.filter(e, s, n, i))),
            t.itemSort && (l = l.sort((e, s) => t.itemSort(e, s, i))),
            ft(l, (e) => {
              const i = Go(t.callbacks, e);
              s.push(Qo(i, "labelColor", this, e)),
                n.push(Qo(i, "labelPointStyle", this, e)),
                o.push(Qo(i, "labelTextColor", this, e));
            }),
            (this.labelColors = s),
            (this.labelPointStyles = n),
            (this.labelTextColors = o),
            (this.dataPoints = l),
            l
          );
        }
        update(t, e) {
          const i = this.options.setContext(this.getContext()),
            s = this._active;
          let n,
            o = [];
          if (s.length) {
            const t = No[i.position].call(this, s, this._eventPosition);
            (o = this._createItems(i)),
              (this.title = this.getTitle(o, i)),
              (this.beforeBody = this.getBeforeBody(o, i)),
              (this.body = this.getBody(o, i)),
              (this.afterBody = this.getAfterBody(o, i)),
              (this.footer = this.getFooter(o, i));
            const e = (this._size = Yo(this, i)),
              a = Object.assign({}, t, e),
              r = Xo(this.chart, i, a),
              l = Zo(i, a, r, this.chart);
            (this.xAlign = r.xAlign),
              (this.yAlign = r.yAlign),
              (n = {
                opacity: 1,
                x: l.x,
                y: l.y,
                width: e.width,
                height: e.height,
                caretX: t.x,
                caretY: t.y,
              });
          } else 0 !== this.opacity && (n = { opacity: 0 });
          (this._tooltipItems = o),
            (this.$context = void 0),
            n && this._resolveAnimations().update(this, n),
            t &&
              i.external &&
              i.external.call(this, {
                chart: this.chart,
                tooltip: this,
                replay: e,
              });
        }
        drawCaret(t, e, i, s) {
          const n = this.getCaretPosition(t, i, s);
          e.lineTo(n.x1, n.y1), e.lineTo(n.x2, n.y2), e.lineTo(n.x3, n.y3);
        }
        getCaretPosition(t, e, i) {
          const { xAlign: s, yAlign: n } = this,
            { caretSize: o, cornerRadius: a } = i,
            { topLeft: r, topRight: l, bottomLeft: h, bottomRight: c } = qe(a),
            { x: d, y: u } = t,
            { width: f, height: g } = e;
          let p, m, b, x, y, _;
          return (
            "center" === n
              ? ((y = u + g / 2),
                "left" === s
                  ? ((p = d), (m = p - o), (x = y + o), (_ = y - o))
                  : ((p = d + f), (m = p + o), (x = y - o), (_ = y + o)),
                (b = p))
              : ((m =
                  "left" === s
                    ? d + Math.max(r, h) + o
                    : "right" === s
                    ? d + f - Math.max(l, c) - o
                    : this.caretX),
                "top" === n
                  ? ((x = u), (y = x - o), (p = m - o), (b = m + o))
                  : ((x = u + g), (y = x + o), (p = m + o), (b = m - o)),
                (_ = x)),
            { x1: p, x2: m, x3: b, y1: x, y2: y, y3: _ }
          );
        }
        drawTitle(t, e, i) {
          const s = this.title,
            n = s.length;
          let o, a, r;
          if (n) {
            const l = Bi(i.rtl, this.x, this.width);
            for (
              t.x = qo(this, i.titleAlign, i),
                e.textAlign = l.textAlign(i.titleAlign),
                e.textBaseline = "middle",
                o = Ge(i.titleFont),
                a = i.titleSpacing,
                e.fillStyle = i.titleColor,
                e.font = o.string,
                r = 0;
              r < n;
              ++r
            )
              e.fillText(s[r], l.x(t.x), t.y + o.lineHeight / 2),
                (t.y += o.lineHeight + a),
                r + 1 === n && (t.y += i.titleMarginBottom - a);
          }
        }
        _drawColorBox(t, e, i, s, n) {
          const o = this.labelColors[i],
            a = this.labelPointStyles[i],
            { boxHeight: r, boxWidth: l } = n,
            h = Ge(n.bodyFont),
            c = qo(this, "left", n),
            d = s.x(c),
            u = r < h.lineHeight ? (h.lineHeight - r) / 2 : 0,
            f = e.y + u;
          if (n.usePointStyle) {
            const e = {
                radius: Math.min(l, r) / 2,
                pointStyle: a.pointStyle,
                rotation: a.rotation,
                borderWidth: 1,
              },
              i = s.leftForLtr(d, l) + l / 2,
              h = f + r / 2;
            (t.strokeStyle = n.multiKeyBackground),
              (t.fillStyle = n.multiKeyBackground),
              Te(t, e, i, h),
              (t.strokeStyle = o.borderColor),
              (t.fillStyle = o.backgroundColor),
              Te(t, e, i, h);
          } else {
            (t.lineWidth = rt(o.borderWidth)
              ? Math.max(...Object.values(o.borderWidth))
              : o.borderWidth || 1),
              (t.strokeStyle = o.borderColor),
              t.setLineDash(o.borderDash || []),
              (t.lineDashOffset = o.borderDashOffset || 0);
            const e = s.leftForLtr(d, l),
              i = s.leftForLtr(s.xPlus(d, 1), l - 2),
              a = qe(o.borderRadius);
            Object.values(a).some((t) => 0 !== t)
              ? (t.beginPath(),
                (t.fillStyle = n.multiKeyBackground),
                je(t, { x: e, y: f, w: l, h: r, radius: a }),
                t.fill(),
                t.stroke(),
                (t.fillStyle = o.backgroundColor),
                t.beginPath(),
                je(t, { x: i, y: f + 1, w: l - 2, h: r - 2, radius: a }),
                t.fill())
              : ((t.fillStyle = n.multiKeyBackground),
                t.fillRect(e, f, l, r),
                t.strokeRect(e, f, l, r),
                (t.fillStyle = o.backgroundColor),
                t.fillRect(i, f + 1, l - 2, r - 2));
          }
          t.fillStyle = this.labelTextColors[i];
        }
        drawBody(t, e, i) {
          const { body: s } = this,
            {
              bodySpacing: n,
              bodyAlign: o,
              displayColors: a,
              boxHeight: r,
              boxWidth: l,
              boxPadding: h,
            } = i,
            c = Ge(i.bodyFont);
          let d = c.lineHeight,
            u = 0;
          const f = Bi(i.rtl, this.x, this.width),
            g = function (i) {
              e.fillText(i, f.x(t.x + u), t.y + d / 2), (t.y += d + n);
            },
            p = f.textAlign(o);
          let m, b, x, y, _, v, A;
          for (
            e.textAlign = o,
              e.textBaseline = "middle",
              e.font = c.string,
              t.x = qo(this, p, i),
              e.fillStyle = i.bodyColor,
              ft(this.beforeBody, g),
              u =
                a && "right" !== p
                  ? "center" === o
                    ? l / 2 + h
                    : l + 2 + h
                  : 0,
              y = 0,
              v = s.length;
            y < v;
            ++y
          ) {
            for (
              m = s[y],
                b = this.labelTextColors[y],
                e.fillStyle = b,
                ft(m.before, g),
                x = m.lines,
                a &&
                  x.length &&
                  (this._drawColorBox(e, t, y, f, i),
                  (d = Math.max(c.lineHeight, r))),
                _ = 0,
                A = x.length;
              _ < A;
              ++_
            )
              g(x[_]), (d = c.lineHeight);
            ft(m.after, g);
          }
          (u = 0), (d = c.lineHeight), ft(this.afterBody, g), (t.y -= n);
        }
        drawFooter(t, e, i) {
          const s = this.footer,
            n = s.length;
          let o, a;
          if (n) {
            const r = Bi(i.rtl, this.x, this.width);
            for (
              t.x = qo(this, i.footerAlign, i),
                t.y += i.footerMarginTop,
                e.textAlign = r.textAlign(i.footerAlign),
                e.textBaseline = "middle",
                o = Ge(i.footerFont),
                e.fillStyle = i.footerColor,
                e.font = o.string,
                a = 0;
              a < n;
              ++a
            )
              e.fillText(s[a], r.x(t.x), t.y + o.lineHeight / 2),
                (t.y += o.lineHeight + i.footerSpacing);
          }
        }
        drawBackground(t, e, i, s) {
          const { xAlign: n, yAlign: o } = this,
            { x: a, y: r } = t,
            { width: l, height: h } = i,
            {
              topLeft: c,
              topRight: d,
              bottomLeft: u,
              bottomRight: f,
            } = qe(s.cornerRadius);
          (e.fillStyle = s.backgroundColor),
            (e.strokeStyle = s.borderColor),
            (e.lineWidth = s.borderWidth),
            e.beginPath(),
            e.moveTo(a + c, r),
            "top" === o && this.drawCaret(t, e, i, s),
            e.lineTo(a + l - d, r),
            e.quadraticCurveTo(a + l, r, a + l, r + d),
            "center" === o && "right" === n && this.drawCaret(t, e, i, s),
            e.lineTo(a + l, r + h - f),
            e.quadraticCurveTo(a + l, r + h, a + l - f, r + h),
            "bottom" === o && this.drawCaret(t, e, i, s),
            e.lineTo(a + u, r + h),
            e.quadraticCurveTo(a, r + h, a, r + h - u),
            "center" === o && "left" === n && this.drawCaret(t, e, i, s),
            e.lineTo(a, r + c),
            e.quadraticCurveTo(a, r, a + c, r),
            e.closePath(),
            e.fill(),
            s.borderWidth > 0 && e.stroke();
        }
        _updateAnimationTarget(t) {
          const e = this.chart,
            i = this.$animations,
            s = i && i.x,
            n = i && i.y;
          if (s || n) {
            const i = No[t.position].call(
              this,
              this._active,
              this._eventPosition,
            );
            if (!i) return;
            const o = (this._size = Yo(this, t)),
              a = Object.assign({}, i, this._size),
              r = Xo(e, t, a),
              l = Zo(t, a, r, e);
            (s._to === l.x && n._to === l.y) ||
              ((this.xAlign = r.xAlign),
              (this.yAlign = r.yAlign),
              (this.width = o.width),
              (this.height = o.height),
              (this.caretX = i.x),
              (this.caretY = i.y),
              this._resolveAnimations().update(this, l));
          }
        }
        _willRender() {
          return !!this.opacity;
        }
        draw(t) {
          const e = this.options.setContext(this.getContext());
          let i = this.opacity;
          if (!i) return;
          this._updateAnimationTarget(e);
          const s = { width: this.width, height: this.height },
            n = { x: this.x, y: this.y };
          i = Math.abs(i) < 0.001 ? 0 : i;
          const o = Ke(e.padding),
            a =
              this.title.length ||
              this.beforeBody.length ||
              this.body.length ||
              this.afterBody.length ||
              this.footer.length;
          e.enabled &&
            a &&
            (t.save(),
            (t.globalAlpha = i),
            this.drawBackground(n, t, s, e),
            Ii(t, e.textDirection),
            (n.y += o.top),
            this.drawTitle(n, t, e),
            this.drawBody(n, t, e),
            this.drawFooter(n, t, e),
            zi(t, e.textDirection),
            t.restore());
        }
        getActiveElements() {
          return this._active || [];
        }
        setActiveElements(t, e) {
          const i = this._active,
            s = t.map(({ datasetIndex: t, index: e }) => {
              const i = this.chart.getDatasetMeta(t);
              if (!i) throw new Error("Cannot find a dataset at index " + t);
              return { datasetIndex: t, element: i.data[e], index: e };
            }),
            n = !gt(i, s),
            o = this._positionChanged(s, e);
          (n || o) &&
            ((this._active = s),
            (this._eventPosition = e),
            (this._ignoreReplayEvents = !0),
            this.update(!0));
        }
        handleEvent(t, e, i = !0) {
          if (e && this._ignoreReplayEvents) return !1;
          this._ignoreReplayEvents = !1;
          const s = this.options,
            n = this._active || [],
            o = this._getActiveElements(t, n, e, i),
            a = this._positionChanged(o, t),
            r = e || !gt(o, n) || a;
          return (
            r &&
              ((this._active = o),
              (s.enabled || s.external) &&
                ((this._eventPosition = { x: t.x, y: t.y }),
                this.update(!0, e))),
            r
          );
        }
        _getActiveElements(t, e, i, s) {
          const n = this.options;
          if ("mouseout" === t.type) return [];
          if (!s) return e;
          const o = this.chart.getElementsAtEventForMode(t, n.mode, n, i);
          return n.reverse && o.reverse(), o;
        }
        _positionChanged(t, e) {
          const { caretX: i, caretY: s, options: n } = this,
            o = No[n.position].call(this, t, e);
          return !1 !== o && (i !== o.x || s !== o.y);
        }
      }
      var ea = {
          id: "tooltip",
          _element: ta,
          positioners: No,
          afterInit(t, e, i) {
            i && (t.tooltip = new ta({ chart: t, options: i }));
          },
          beforeUpdate(t, e, i) {
            t.tooltip && t.tooltip.initialize(i);
          },
          reset(t, e, i) {
            t.tooltip && t.tooltip.initialize(i);
          },
          afterDraw(t) {
            const e = t.tooltip;
            if (e && e._willRender()) {
              const i = { tooltip: e };
              if (
                !1 ===
                t.notifyPlugins("beforeTooltipDraw", { ...i, cancelable: !0 })
              )
                return;
              e.draw(t.ctx), t.notifyPlugins("afterTooltipDraw", i);
            }
          },
          afterEvent(t, e) {
            if (t.tooltip) {
              const i = e.replay;
              t.tooltip.handleEvent(e.event, i, e.inChartArea) &&
                (e.changed = !0);
            }
          },
          defaults: {
            enabled: !0,
            external: null,
            position: "average",
            backgroundColor: "rgba(0,0,0,0.8)",
            titleColor: "#fff",
            titleFont: { weight: "bold" },
            titleSpacing: 2,
            titleMarginBottom: 6,
            titleAlign: "left",
            bodyColor: "#fff",
            bodySpacing: 2,
            bodyFont: {},
            bodyAlign: "left",
            footerColor: "#fff",
            footerSpacing: 2,
            footerMarginTop: 6,
            footerFont: { weight: "bold" },
            footerAlign: "left",
            padding: 6,
            caretPadding: 2,
            caretSize: 5,
            cornerRadius: 6,
            boxHeight: (t, e) => e.bodyFont.size,
            boxWidth: (t, e) => e.bodyFont.size,
            multiKeyBackground: "#fff",
            displayColors: !0,
            boxPadding: 0,
            borderColor: "rgba(0,0,0,0)",
            borderWidth: 0,
            animation: { duration: 400, easing: "easeOutQuart" },
            animations: {
              numbers: {
                type: "number",
                properties: ["x", "y", "width", "height", "caretX", "caretY"],
              },
              opacity: { easing: "linear", duration: 200 },
            },
            callbacks: Jo,
          },
          defaultRoutes: {
            bodyFont: "font",
            footerFont: "font",
            titleFont: "font",
          },
          descriptors: {
            _scriptable: (t) =>
              "filter" !== t && "itemSort" !== t && "external" !== t,
            _indexable: !1,
            callbacks: { _scriptable: !1, _indexable: !1 },
            animation: { _fallback: !1 },
            animations: { _fallback: "animation" },
          },
          additionalOptionScopes: ["interaction"],
        },
        ia = Object.freeze({
          __proto__: null,
          Colors: fo,
          Decimation: mo,
          Filler: To,
          Legend: Io,
          SubTitle: Vo,
          Title: Fo,
          Tooltip: ea,
        });
      function sa(t) {
        const e = this.getLabels();
        return t >= 0 && t < e.length ? e[t] : t;
      }
      function na(t, e, { horizontal: i, minRotation: s }) {
        const n = Nt(s),
          o = (i ? Math.sin(n) : Math.cos(n)) || 0.001,
          a = 0.75 * e * ("" + t).length;
        return Math.min(e / o, a);
      }
      class oa extends fn {
        constructor(t) {
          super(t),
            (this.start = void 0),
            (this.end = void 0),
            (this._startValue = void 0),
            (this._endValue = void 0),
            (this._valueRange = 0);
        }
        parse(t, e) {
          return ot(t) ||
            (("number" == typeof t || t instanceof Number) && !isFinite(+t))
            ? null
            : +t;
        }
        handleTickRangeOptions() {
          const { beginAtZero: t } = this.options,
            { minDefined: e, maxDefined: i } = this.getUserBounds();
          let { min: s, max: n } = this;
          const o = (t) => (s = e ? s : t),
            a = (t) => (n = i ? n : t);
          if (t) {
            const t = It(s),
              e = It(n);
            t < 0 && e < 0 ? a(0) : t > 0 && e > 0 && o(0);
          }
          if (s === n) {
            let e = 0 === n ? 1 : Math.abs(0.05 * n);
            a(n + e), t || o(s - e);
          }
          (this.min = s), (this.max = n);
        }
        getTickLimit() {
          const t = this.options.ticks;
          let e,
            { maxTicksLimit: i, stepSize: s } = t;
          return (
            s
              ? ((e = Math.ceil(this.max / s) - Math.floor(this.min / s) + 1),
                e > 1e3 &&
                  (console.warn(
                    `scales.${this.id}.ticks.stepSize: ${s} would result generating up to ${e} ticks. Limiting to 1000.`,
                  ),
                  (e = 1e3)))
              : ((e = this.computeTickLimit()), (i = i || 11)),
            i && (e = Math.min(i, e)),
            e
          );
        }
        computeTickLimit() {
          return Number.POSITIVE_INFINITY;
        }
        buildTicks() {
          const t = this.options,
            e = t.ticks;
          let i = this.getTickLimit();
          i = Math.max(2, i);
          const s = (function (t, e) {
            const i = [],
              {
                bounds: s,
                step: n,
                min: o,
                max: a,
                precision: r,
                count: l,
                maxTicks: h,
                maxDigits: c,
                includeBounds: d,
              } = t,
              u = n || 1,
              f = h - 1,
              { min: g, max: p } = e,
              m = !ot(o),
              b = !ot(a),
              x = !ot(l),
              y = (p - g) / (c + 1);
            let _,
              v,
              A,
              w,
              M = Ft((p - g) / f / u) * u;
            if (M < 1e-14 && !m && !b) return [{ value: g }, { value: p }];
            (w = Math.ceil(p / M) - Math.floor(g / M)),
              w > f && (M = Ft((w * M) / f / u) * u),
              ot(r) || ((_ = Math.pow(10, r)), (M = Math.ceil(M * _) / _)),
              "ticks" === s
                ? ((v = Math.floor(g / M) * M), (A = Math.ceil(p / M) * M))
                : ((v = g), (A = p)),
              m &&
              b &&
              n &&
              (function (t, e) {
                const i = Math.round(t);
                return i - e <= t && i + e >= t;
              })((a - o) / n, M / 1e3)
                ? ((w = Math.round(Math.min((a - o) / M, h))),
                  (M = (a - o) / w),
                  (v = o),
                  (A = a))
                : x
                ? ((v = m ? o : v),
                  (A = b ? a : A),
                  (w = l - 1),
                  (M = (A - v) / w))
                : ((w = (A - v) / M),
                  (w = zt(w, Math.round(w), M / 1e3)
                    ? Math.round(w)
                    : Math.ceil(w)));
            const k = Math.max(Ht(M), Ht(v));
            (_ = Math.pow(10, ot(r) ? k : r)),
              (v = Math.round(v * _) / _),
              (A = Math.round(A * _) / _);
            let C = 0;
            for (
              m &&
              (d && v !== o
                ? (i.push({ value: o }),
                  v < o && C++,
                  zt(Math.round((v + C * M) * _) / _, o, na(o, y, t)) && C++)
                : v < o && C++);
              C < w;
              ++C
            ) {
              const t = Math.round((v + C * M) * _) / _;
              if (b && t > a) break;
              i.push({ value: t });
            }
            return (
              b && d && A !== a
                ? i.length && zt(i[i.length - 1].value, a, na(a, y, t))
                  ? (i[i.length - 1].value = a)
                  : i.push({ value: a })
                : (b && A !== a) || i.push({ value: A }),
              i
            );
          })(
            {
              maxTicks: i,
              bounds: t.bounds,
              min: t.min,
              max: t.max,
              precision: e.precision,
              step: e.stepSize,
              count: e.count,
              maxDigits: this._maxDigits(),
              horizontal: this.isHorizontal(),
              minRotation: e.minRotation || 0,
              includeBounds: !1 !== e.includeBounds,
            },
            this._range || this,
          );
          return (
            "ticks" === t.bounds && Vt(s, this, "value"),
            t.reverse
              ? (s.reverse(), (this.start = this.max), (this.end = this.min))
              : ((this.start = this.min), (this.end = this.max)),
            s
          );
        }
        configure() {
          const t = this.ticks;
          let e = this.min,
            i = this.max;
          if ((super.configure(), this.options.offset && t.length)) {
            const s = (i - e) / Math.max(t.length - 1, 1) / 2;
            (e -= s), (i += s);
          }
          (this._startValue = e),
            (this._endValue = i),
            (this._valueRange = i - e);
        }
        getLabelForValue(t) {
          return ye(t, this.chart.options.locale, this.options.ticks.format);
        }
      }
      class aa extends oa {
        static id = "linear";
        static defaults = { ticks: { callback: ve.formatters.numeric } };
        determineDataLimits() {
          const { min: t, max: e } = this.getMinMax(!0);
          (this.min = lt(t) ? t : 0),
            (this.max = lt(e) ? e : 1),
            this.handleTickRangeOptions();
        }
        computeTickLimit() {
          const t = this.isHorizontal(),
            e = t ? this.width : this.height,
            i = Nt(this.options.ticks.minRotation),
            s = (t ? Math.sin(i) : Math.cos(i)) || 0.001,
            n = this._resolveTickFontOptions(0);
          return Math.ceil(e / Math.min(40, n.lineHeight / s));
        }
        getPixelForValue(t) {
          return null === t
            ? NaN
            : this.getPixelForDecimal(
                (t - this._startValue) / this._valueRange,
              );
        }
        getValueForPixel(t) {
          return (
            this._startValue + this.getDecimalForPixel(t) * this._valueRange
          );
        }
      }
      const ra = (t) => Math.floor(Bt(t)),
        la = (t, e) => Math.pow(10, ra(t) + e);
      function ha(t) {
        return 1 == t / Math.pow(10, ra(t));
      }
      function ca(t, e, i) {
        const s = Math.pow(10, i),
          n = Math.floor(t / s);
        return Math.ceil(e / s) - n;
      }
      class da extends fn {
        static id = "logarithmic";
        static defaults = {
          ticks: {
            callback: ve.formatters.logarithmic,
            major: { enabled: !0 },
          },
        };
        constructor(t) {
          super(t),
            (this.start = void 0),
            (this.end = void 0),
            (this._startValue = void 0),
            (this._valueRange = 0);
        }
        parse(t, e) {
          const i = oa.prototype.parse.apply(this, [t, e]);
          if (0 !== i) return lt(i) && i > 0 ? i : null;
          this._zero = !0;
        }
        determineDataLimits() {
          const { min: t, max: e } = this.getMinMax(!0);
          (this.min = lt(t) ? Math.max(0, t) : null),
            (this.max = lt(e) ? Math.max(0, e) : null),
            this.options.beginAtZero && (this._zero = !0),
            this._zero &&
              this.min !== this._suggestedMin &&
              !lt(this._userMin) &&
              (this.min =
                t === la(this.min, 0) ? la(this.min, -1) : la(this.min, 0)),
            this.handleTickRangeOptions();
        }
        handleTickRangeOptions() {
          const { minDefined: t, maxDefined: e } = this.getUserBounds();
          let i = this.min,
            s = this.max;
          const n = (e) => (i = t ? i : e),
            o = (t) => (s = e ? s : t);
          i === s && (i <= 0 ? (n(1), o(10)) : (n(la(i, -1)), o(la(s, 1)))),
            i <= 0 && n(la(s, -1)),
            s <= 0 && o(la(i, 1)),
            (this.min = i),
            (this.max = s);
        }
        buildTicks() {
          const t = this.options,
            e = (function (t, { min: e, max: i }) {
              e = ht(t.min, e);
              const s = [],
                n = ra(e);
              let o = (function (t, e) {
                  let i = ra(e - t);
                  for (; ca(t, e, i) > 10; ) i++;
                  for (; ca(t, e, i) < 10; ) i--;
                  return Math.min(i, ra(t));
                })(e, i),
                a = o < 0 ? Math.pow(10, Math.abs(o)) : 1;
              const r = Math.pow(10, o),
                l = n > o ? Math.pow(10, n) : 0,
                h = Math.round((e - l) * a) / a,
                c = Math.floor((e - l) / r / 10) * r * 10;
              let d = Math.floor((h - c) / Math.pow(10, o)),
                u = ht(
                  t.min,
                  Math.round((l + c + d * Math.pow(10, o)) * a) / a,
                );
              for (; u < i; )
                s.push({ value: u, major: ha(u), significand: d }),
                  d >= 10 ? (d = d < 15 ? 15 : 20) : d++,
                  d >= 20 && (o++, (d = 2), (a = o >= 0 ? 1 : a)),
                  (u = Math.round((l + c + d * Math.pow(10, o)) * a) / a);
              const f = ht(t.max, u);
              return s.push({ value: f, major: ha(f), significand: d }), s;
            })({ min: this._userMin, max: this._userMax }, this);
          return (
            "ticks" === t.bounds && Vt(e, this, "value"),
            t.reverse
              ? (e.reverse(), (this.start = this.max), (this.end = this.min))
              : ((this.start = this.min), (this.end = this.max)),
            e
          );
        }
        getLabelForValue(t) {
          return void 0 === t
            ? "0"
            : ye(t, this.chart.options.locale, this.options.ticks.format);
        }
        configure() {
          const t = this.min;
          super.configure(),
            (this._startValue = Bt(t)),
            (this._valueRange = Bt(this.max) - Bt(t));
        }
        getPixelForValue(t) {
          return (
            (void 0 !== t && 0 !== t) || (t = this.min),
            null === t || isNaN(t)
              ? NaN
              : this.getPixelForDecimal(
                  t === this.min
                    ? 0
                    : (Bt(t) - this._startValue) / this._valueRange,
                )
          );
        }
        getValueForPixel(t) {
          const e = this.getDecimalForPixel(t);
          return Math.pow(10, this._startValue + e * this._valueRange);
        }
      }
      function ua(t) {
        const e = t.ticks;
        if (e.display && t.display) {
          const t = Ke(e.backdropPadding);
          return ct(e.font && e.font.size, Se.font.size) + t.height;
        }
        return 0;
      }
      function fa(t, e, i) {
        return (
          (i = at(i) ? i : [i]),
          { w: Ee(t, e.string, i), h: i.length * e.lineHeight }
        );
      }
      function ga(t, e, i, s, n) {
        return t === s || t === n
          ? { start: e - i / 2, end: e + i / 2 }
          : t < s || t > n
          ? { start: e - i, end: e }
          : { start: e, end: e + i };
      }
      function pa(t, e, i, s, n) {
        const o = Math.abs(Math.sin(i)),
          a = Math.abs(Math.cos(i));
        let r = 0,
          l = 0;
        s.start < e.l
          ? ((r = (e.l - s.start) / o), (t.l = Math.min(t.l, e.l - r)))
          : s.end > e.r &&
            ((r = (s.end - e.r) / o), (t.r = Math.max(t.r, e.r + r))),
          n.start < e.t
            ? ((l = (e.t - n.start) / a), (t.t = Math.min(t.t, e.t - l)))
            : n.end > e.b &&
              ((l = (n.end - e.b) / a), (t.b = Math.max(t.b, e.b + l)));
      }
      function ma(t, e, i) {
        const s = t.drawingArea,
          { extra: n, additionalAngle: o, padding: a, size: r } = i,
          l = t.getPointPosition(e, s + n + a, o),
          h = Math.round(jt(Xt(l.angle + Tt))),
          c = (function (t, e, i) {
            return (
              90 === i || 270 === i
                ? (t -= e / 2)
                : (i > 270 || i < 90) && (t -= e),
              t
            );
          })(l.y, r.h, h),
          d = (function (t) {
            return 0 === t || 180 === t ? "center" : t < 180 ? "left" : "right";
          })(h),
          u =
            ((f = l.x),
            (g = r.w),
            "right" === (p = d) ? (f -= g) : "center" === p && (f -= g / 2),
            f);
        var f, g, p;
        return {
          visible: !0,
          x: l.x,
          y: c,
          textAlign: d,
          left: u,
          top: c,
          right: u + r.w,
          bottom: c + r.h,
        };
      }
      function ba(t, e) {
        if (!e) return !0;
        const { left: i, top: s, right: n, bottom: o } = t;
        return !(
          Re({ x: i, y: s }, e) ||
          Re({ x: i, y: o }, e) ||
          Re({ x: n, y: s }, e) ||
          Re({ x: n, y: o }, e)
        );
      }
      function xa(t, e, i) {
        const { left: s, top: n, right: o, bottom: a } = i,
          { backdropColor: r } = e;
        if (!ot(r)) {
          const i = qe(e.borderRadius),
            l = Ke(e.backdropPadding);
          t.fillStyle = r;
          const h = s - l.left,
            c = n - l.top,
            d = o - s + l.width,
            u = a - n + l.height;
          Object.values(i).some((t) => 0 !== t)
            ? (t.beginPath(),
              je(t, { x: h, y: c, w: d, h: u, radius: i }),
              t.fill())
            : t.fillRect(h, c, d, u);
        }
      }
      function ya(t, e, i, s) {
        const { ctx: n } = t;
        if (i) n.arc(t.xCenter, t.yCenter, e, 0, Dt);
        else {
          let i = t.getPointPosition(0, e);
          n.moveTo(i.x, i.y);
          for (let o = 1; o < s; o++)
            (i = t.getPointPosition(o, e)), n.lineTo(i.x, i.y);
        }
      }
      class _a extends oa {
        static id = "radialLinear";
        static defaults = {
          display: !0,
          animate: !0,
          position: "chartArea",
          angleLines: {
            display: !0,
            lineWidth: 1,
            borderDash: [],
            borderDashOffset: 0,
          },
          grid: { circular: !1 },
          startAngle: 0,
          ticks: { showLabelBackdrop: !0, callback: ve.formatters.numeric },
          pointLabels: {
            backdropColor: void 0,
            backdropPadding: 2,
            display: !0,
            font: { size: 10 },
            callback: (t) => t,
            padding: 5,
            centerPointLabels: !1,
          },
        };
        static defaultRoutes = {
          "angleLines.color": "borderColor",
          "pointLabels.color": "color",
          "ticks.color": "color",
        };
        static descriptors = { angleLines: { _fallback: "grid" } };
        constructor(t) {
          super(t),
            (this.xCenter = void 0),
            (this.yCenter = void 0),
            (this.drawingArea = void 0),
            (this._pointLabels = []),
            (this._pointLabelItems = []);
        }
        setDimensions() {
          const t = (this._padding = Ke(ua(this.options) / 2)),
            e = (this.width = this.maxWidth - t.width),
            i = (this.height = this.maxHeight - t.height);
          (this.xCenter = Math.floor(this.left + e / 2 + t.left)),
            (this.yCenter = Math.floor(this.top + i / 2 + t.top)),
            (this.drawingArea = Math.floor(Math.min(e, i) / 2));
        }
        determineDataLimits() {
          const { min: t, max: e } = this.getMinMax(!1);
          (this.min = lt(t) && !isNaN(t) ? t : 0),
            (this.max = lt(e) && !isNaN(e) ? e : 0),
            this.handleTickRangeOptions();
        }
        computeTickLimit() {
          return Math.ceil(this.drawingArea / ua(this.options));
        }
        generateTickLabels(t) {
          oa.prototype.generateTickLabels.call(this, t),
            (this._pointLabels = this.getLabels()
              .map((t, e) => {
                const i = ut(this.options.pointLabels.callback, [t, e], this);
                return i || 0 === i ? i : "";
              })
              .filter((t, e) => this.chart.getDataVisibility(e)));
        }
        fit() {
          const t = this.options;
          t.display && t.pointLabels.display
            ? (function (t) {
                const e = {
                    l: t.left + t._padding.left,
                    r: t.right - t._padding.right,
                    t: t.top + t._padding.top,
                    b: t.bottom - t._padding.bottom,
                  },
                  i = Object.assign({}, e),
                  s = [],
                  n = [],
                  o = t._pointLabels.length,
                  a = t.options.pointLabels,
                  r = a.centerPointLabels ? St / o : 0;
                for (let l = 0; l < o; l++) {
                  const o = a.setContext(t.getPointLabelContext(l));
                  n[l] = o.padding;
                  const h = t.getPointPosition(l, t.drawingArea + n[l], r),
                    c = Ge(o.font),
                    d = fa(t.ctx, c, t._pointLabels[l]);
                  s[l] = d;
                  const u = Xt(t.getIndexAngle(l) + r),
                    f = Math.round(jt(u));
                  pa(
                    i,
                    e,
                    u,
                    ga(f, h.x, d.w, 0, 180),
                    ga(f, h.y, d.h, 90, 270),
                  );
                }
                t.setCenterPoint(e.l - i.l, i.r - e.r, e.t - i.t, i.b - e.b),
                  (t._pointLabelItems = (function (t, e, i) {
                    const s = [],
                      n = t._pointLabels.length,
                      o = t.options,
                      { centerPointLabels: a, display: r } = o.pointLabels,
                      l = { extra: ua(o) / 2, additionalAngle: a ? St / n : 0 };
                    let h;
                    for (let o = 0; o < n; o++) {
                      (l.padding = i[o]), (l.size = e[o]);
                      const n = ma(t, o, l);
                      s.push(n),
                        "auto" === r &&
                          ((n.visible = ba(n, h)), n.visible && (h = n));
                    }
                    return s;
                  })(t, s, n));
              })(this)
            : this.setCenterPoint(0, 0, 0, 0);
        }
        setCenterPoint(t, e, i, s) {
          (this.xCenter += Math.floor((t - e) / 2)),
            (this.yCenter += Math.floor((i - s) / 2)),
            (this.drawingArea -= Math.min(
              this.drawingArea / 2,
              Math.max(t, e, i, s),
            ));
        }
        getIndexAngle(t) {
          return Xt(
            t * (Dt / (this._pointLabels.length || 1)) +
              Nt(this.options.startAngle || 0),
          );
        }
        getDistanceFromCenterForValue(t) {
          if (ot(t)) return NaN;
          const e = this.drawingArea / (this.max - this.min);
          return this.options.reverse ? (this.max - t) * e : (t - this.min) * e;
        }
        getValueForDistanceFromCenter(t) {
          if (ot(t)) return NaN;
          const e = t / (this.drawingArea / (this.max - this.min));
          return this.options.reverse ? this.max - e : this.min + e;
        }
        getPointLabelContext(t) {
          const e = this._pointLabels || [];
          if (t >= 0 && t < e.length) {
            const i = e[t];
            return (function (t, e, i) {
              return Qe(t, { label: i, index: e, type: "pointLabel" });
            })(this.getContext(), t, i);
          }
        }
        getPointPosition(t, e, i = 0) {
          const s = this.getIndexAngle(t) - Tt + i;
          return {
            x: Math.cos(s) * e + this.xCenter,
            y: Math.sin(s) * e + this.yCenter,
            angle: s,
          };
        }
        getPointPositionForValue(t, e) {
          return this.getPointPosition(
            t,
            this.getDistanceFromCenterForValue(e),
          );
        }
        getBasePosition(t) {
          return this.getPointPositionForValue(t || 0, this.getBaseValue());
        }
        getPointLabelPosition(t) {
          const {
            left: e,
            top: i,
            right: s,
            bottom: n,
          } = this._pointLabelItems[t];
          return { left: e, top: i, right: s, bottom: n };
        }
        drawBackground() {
          const {
            backgroundColor: t,
            grid: { circular: e },
          } = this.options;
          if (t) {
            const i = this.ctx;
            i.save(),
              i.beginPath(),
              ya(
                this,
                this.getDistanceFromCenterForValue(this._endValue),
                e,
                this._pointLabels.length,
              ),
              i.closePath(),
              (i.fillStyle = t),
              i.fill(),
              i.restore();
          }
        }
        drawGrid() {
          const t = this.ctx,
            e = this.options,
            { angleLines: i, grid: s, border: n } = e,
            o = this._pointLabels.length;
          let a, r, l;
          if (
            (e.pointLabels.display &&
              (function (t, e) {
                const {
                  ctx: i,
                  options: { pointLabels: s },
                } = t;
                for (let n = e - 1; n >= 0; n--) {
                  const e = t._pointLabelItems[n];
                  if (!e.visible) continue;
                  const o = s.setContext(t.getPointLabelContext(n));
                  xa(i, o, e);
                  const a = Ge(o.font),
                    { x: r, y: l, textAlign: h } = e;
                  Ne(i, t._pointLabels[n], r, l + a.lineHeight / 2, a, {
                    color: o.color,
                    textAlign: h,
                    textBaseline: "middle",
                  });
                }
              })(this, o),
            s.display &&
              this.ticks.forEach((t, e) => {
                if (0 !== e) {
                  r = this.getDistanceFromCenterForValue(t.value);
                  const i = this.getContext(e),
                    a = s.setContext(i),
                    l = n.setContext(i);
                  !(function (t, e, i, s, n) {
                    const o = t.ctx,
                      a = e.circular,
                      { color: r, lineWidth: l } = e;
                    (!a && !s) ||
                      !r ||
                      !l ||
                      i < 0 ||
                      (o.save(),
                      (o.strokeStyle = r),
                      (o.lineWidth = l),
                      o.setLineDash(n.dash),
                      (o.lineDashOffset = n.dashOffset),
                      o.beginPath(),
                      ya(t, i, a, s),
                      o.closePath(),
                      o.stroke(),
                      o.restore());
                  })(this, a, r, o, l);
                }
              }),
            i.display)
          ) {
            for (t.save(), a = o - 1; a >= 0; a--) {
              const s = i.setContext(this.getPointLabelContext(a)),
                { color: n, lineWidth: o } = s;
              o &&
                n &&
                ((t.lineWidth = o),
                (t.strokeStyle = n),
                t.setLineDash(s.borderDash),
                (t.lineDashOffset = s.borderDashOffset),
                (r = this.getDistanceFromCenterForValue(
                  e.ticks.reverse ? this.min : this.max,
                )),
                (l = this.getPointPosition(a, r)),
                t.beginPath(),
                t.moveTo(this.xCenter, this.yCenter),
                t.lineTo(l.x, l.y),
                t.stroke());
            }
            t.restore();
          }
        }
        drawBorder() {}
        drawLabels() {
          const t = this.ctx,
            e = this.options,
            i = e.ticks;
          if (!i.display) return;
          const s = this.getIndexAngle(0);
          let n, o;
          t.save(),
            t.translate(this.xCenter, this.yCenter),
            t.rotate(s),
            (t.textAlign = "center"),
            (t.textBaseline = "middle"),
            this.ticks.forEach((s, a) => {
              if (0 === a && !e.reverse) return;
              const r = i.setContext(this.getContext(a)),
                l = Ge(r.font);
              if (
                ((n = this.getDistanceFromCenterForValue(this.ticks[a].value)),
                r.showLabelBackdrop)
              ) {
                (t.font = l.string),
                  (o = t.measureText(s.label).width),
                  (t.fillStyle = r.backdropColor);
                const e = Ke(r.backdropPadding);
                t.fillRect(
                  -o / 2 - e.left,
                  -n - l.size / 2 - e.top,
                  o + e.width,
                  l.size + e.height,
                );
              }
              Ne(t, s.label, 0, -n, l, {
                color: r.color,
                strokeColor: r.textStrokeColor,
                strokeWidth: r.textStrokeWidth,
              });
            }),
            t.restore();
        }
        drawTitle() {}
      }
      const va = {
          millisecond: { common: !0, size: 1, steps: 1e3 },
          second: { common: !0, size: 1e3, steps: 60 },
          minute: { common: !0, size: 6e4, steps: 60 },
          hour: { common: !0, size: 36e5, steps: 24 },
          day: { common: !0, size: 864e5, steps: 30 },
          week: { common: !1, size: 6048e5, steps: 4 },
          month: { common: !0, size: 2628e6, steps: 12 },
          quarter: { common: !1, size: 7884e6, steps: 4 },
          year: { common: !0, size: 3154e7 },
        },
        Aa = Object.keys(va);
      function wa(t, e) {
        return t - e;
      }
      function Ma(t, e) {
        if (ot(e)) return null;
        const i = t._adapter,
          { parser: s, round: n, isoWeekday: o } = t._parseOpts;
        let a = e;
        return (
          "function" == typeof s && (a = s(a)),
          lt(a) || (a = "string" == typeof s ? i.parse(a, s) : i.parse(a)),
          null === a
            ? null
            : (n &&
                (a =
                  "week" !== n || (!Wt(o) && !0 !== o)
                    ? i.startOf(a, n)
                    : i.startOf(a, "isoWeek", o)),
              +a)
        );
      }
      function ka(t, e, i, s) {
        const n = Aa.length;
        for (let o = Aa.indexOf(t); o < n - 1; ++o) {
          const t = va[Aa[o]],
            n = t.steps ? t.steps : Number.MAX_SAFE_INTEGER;
          if (t.common && Math.ceil((i - e) / (n * t.size)) <= s) return Aa[o];
        }
        return Aa[n - 1];
      }
      function Ca(t, e, i) {
        if (i) {
          if (i.length) {
            const { lo: s, hi: n } = Gt(i, e);
            t[i[s] >= e ? i[s] : i[n]] = !0;
          }
        } else t[e] = !0;
      }
      function Sa(t, e, i) {
        const s = [],
          n = {},
          o = e.length;
        let a, r;
        for (a = 0; a < o; ++a)
          (r = e[a]), (n[r] = a), s.push({ value: r, major: !1 });
        return 0 !== o && i
          ? (function (t, e, i, s) {
              const n = t._adapter,
                o = +n.startOf(e[0].value, s),
                a = e[e.length - 1].value;
              let r, l;
              for (r = o; r <= a; r = +n.add(r, 1, s))
                (l = i[r]), l >= 0 && (e[l].major = !0);
              return e;
            })(t, s, n, i)
          : s;
      }
      class Da extends fn {
        static id = "time";
        static defaults = {
          bounds: "data",
          adapters: {},
          time: {
            parser: !1,
            unit: !1,
            round: !1,
            isoWeekday: !1,
            minUnit: "millisecond",
            displayFormats: {},
          },
          ticks: { source: "auto", callback: !1, major: { enabled: !1 } },
        };
        constructor(t) {
          super(t),
            (this._cache = { data: [], labels: [], all: [] }),
            (this._unit = "day"),
            (this._majorUnit = void 0),
            (this._offsets = {}),
            (this._normalized = !1),
            (this._parseOpts = void 0);
        }
        init(t, e = {}) {
          const i = t.time || (t.time = {}),
            s = (this._adapter = new vs(t.adapters.date));
          s.init(e),
            yt(i.displayFormats, s.formats()),
            (this._parseOpts = {
              parser: i.parser,
              round: i.round,
              isoWeekday: i.isoWeekday,
            }),
            super.init(t),
            (this._normalized = e.normalized);
        }
        parse(t, e) {
          return void 0 === t ? null : Ma(this, t);
        }
        beforeLayout() {
          super.beforeLayout(),
            (this._cache = { data: [], labels: [], all: [] });
        }
        determineDataLimits() {
          const t = this.options,
            e = this._adapter,
            i = t.time.unit || "day";
          let {
            min: s,
            max: n,
            minDefined: o,
            maxDefined: a,
          } = this.getUserBounds();
          function r(t) {
            o || isNaN(t.min) || (s = Math.min(s, t.min)),
              a || isNaN(t.max) || (n = Math.max(n, t.max));
          }
          (o && a) ||
            (r(this._getLabelBounds()),
            ("ticks" === t.bounds && "labels" === t.ticks.source) ||
              r(this.getMinMax(!1))),
            (s = lt(s) && !isNaN(s) ? s : +e.startOf(Date.now(), i)),
            (n = lt(n) && !isNaN(n) ? n : +e.endOf(Date.now(), i) + 1),
            (this.min = Math.min(s, n - 1)),
            (this.max = Math.max(s + 1, n));
        }
        _getLabelBounds() {
          const t = this.getLabelTimestamps();
          let e = Number.POSITIVE_INFINITY,
            i = Number.NEGATIVE_INFINITY;
          return (
            t.length && ((e = t[0]), (i = t[t.length - 1])), { min: e, max: i }
          );
        }
        buildTicks() {
          const t = this.options,
            e = t.time,
            i = t.ticks,
            s =
              "labels" === i.source
                ? this.getLabelTimestamps()
                : this._generate();
          "ticks" === t.bounds &&
            s.length &&
            ((this.min = this._userMin || s[0]),
            (this.max = this._userMax || s[s.length - 1]));
          const n = this.min,
            o = (function (t, e, i) {
              let s = 0,
                n = t.length;
              for (; s < n && t[s] < e; ) s++;
              for (; n > s && t[n - 1] > i; ) n--;
              return s > 0 || n < t.length ? t.slice(s, n) : t;
            })(s, n, this.max);
          return (
            (this._unit =
              e.unit ||
              (i.autoSkip
                ? ka(e.minUnit, this.min, this.max, this._getLabelCapacity(n))
                : (function (t, e, i, s, n) {
                    for (let o = Aa.length - 1; o >= Aa.indexOf(i); o--) {
                      const i = Aa[o];
                      if (va[i].common && t._adapter.diff(n, s, i) >= e - 1)
                        return i;
                    }
                    return Aa[i ? Aa.indexOf(i) : 0];
                  })(this, o.length, e.minUnit, this.min, this.max))),
            (this._majorUnit =
              i.major.enabled && "year" !== this._unit
                ? (function (t) {
                    for (let e = Aa.indexOf(t) + 1, i = Aa.length; e < i; ++e)
                      if (va[Aa[e]].common) return Aa[e];
                  })(this._unit)
                : void 0),
            this.initOffsets(s),
            t.reverse && o.reverse(),
            Sa(this, o, this._majorUnit)
          );
        }
        afterAutoSkip() {
          this.options.offsetAfterAutoskip &&
            this.initOffsets(this.ticks.map((t) => +t.value));
        }
        initOffsets(t = []) {
          let e,
            i,
            s = 0,
            n = 0;
          this.options.offset &&
            t.length &&
            ((e = this.getDecimalForValue(t[0])),
            (s =
              1 === t.length ? 1 - e : (this.getDecimalForValue(t[1]) - e) / 2),
            (i = this.getDecimalForValue(t[t.length - 1])),
            (n =
              1 === t.length
                ? i
                : (i - this.getDecimalForValue(t[t.length - 2])) / 2));
          const o = t.length < 3 ? 0.5 : 0.25;
          (s = qt(s, 0, o)),
            (n = qt(n, 0, o)),
            (this._offsets = { start: s, end: n, factor: 1 / (s + 1 + n) });
        }
        _generate() {
          const t = this._adapter,
            e = this.min,
            i = this.max,
            s = this.options,
            n = s.time,
            o = n.unit || ka(n.minUnit, e, i, this._getLabelCapacity(e)),
            a = ct(s.ticks.stepSize, 1),
            r = "week" === o && n.isoWeekday,
            l = Wt(r) || !0 === r,
            h = {};
          let c,
            d,
            u = e;
          if (
            (l && (u = +t.startOf(u, "isoWeek", r)),
            (u = +t.startOf(u, l ? "day" : o)),
            t.diff(i, e, o) > 1e5 * a)
          )
            throw new Error(
              e +
                " and " +
                i +
                " are too far apart with stepSize of " +
                a +
                " " +
                o,
            );
          const f = "data" === s.ticks.source && this.getDataTimestamps();
          for (c = u, d = 0; c < i; c = +t.add(c, a, o), d++) Ca(h, c, f);
          return (
            (c !== i && "ticks" !== s.bounds && 1 !== d) || Ca(h, c, f),
            Object.keys(h)
              .sort(wa)
              .map((t) => +t)
          );
        }
        getLabelForValue(t) {
          const e = this._adapter,
            i = this.options.time;
          return i.tooltipFormat
            ? e.format(t, i.tooltipFormat)
            : e.format(t, i.displayFormats.datetime);
        }
        format(t, e) {
          const i = this.options.time.displayFormats,
            s = this._unit,
            n = e || i[s];
          return this._adapter.format(t, n);
        }
        _tickFormatFunction(t, e, i, s) {
          const n = this.options,
            o = n.ticks.callback;
          if (o) return ut(o, [t, e, i], this);
          const a = n.time.displayFormats,
            r = this._unit,
            l = this._majorUnit,
            h = r && a[r],
            c = l && a[l],
            d = i[e],
            u = l && c && d && d.major;
          return this._adapter.format(t, s || (u ? c : h));
        }
        generateTickLabels(t) {
          let e, i, s;
          for (e = 0, i = t.length; e < i; ++e)
            (s = t[e]), (s.label = this._tickFormatFunction(s.value, e, t));
        }
        getDecimalForValue(t) {
          return null === t ? NaN : (t - this.min) / (this.max - this.min);
        }
        getPixelForValue(t) {
          const e = this._offsets,
            i = this.getDecimalForValue(t);
          return this.getPixelForDecimal((e.start + i) * e.factor);
        }
        getValueForPixel(t) {
          const e = this._offsets,
            i = this.getDecimalForPixel(t) / e.factor - e.end;
          return this.min + i * (this.max - this.min);
        }
        _getLabelSize(t) {
          const e = this.options.ticks,
            i = this.ctx.measureText(t).width,
            s = Nt(this.isHorizontal() ? e.maxRotation : e.minRotation),
            n = Math.cos(s),
            o = Math.sin(s),
            a = this._resolveTickFontOptions(0).size;
          return { w: i * n + a * o, h: i * o + a * n };
        }
        _getLabelCapacity(t) {
          const e = this.options.time,
            i = e.displayFormats,
            s = i[e.unit] || i.millisecond,
            n = this._tickFormatFunction(
              t,
              0,
              Sa(this, [t], this._majorUnit),
              s,
            ),
            o = this._getLabelSize(n),
            a =
              Math.floor(
                this.isHorizontal() ? this.width / o.w : this.height / o.h,
              ) - 1;
          return a > 0 ? a : 1;
        }
        getDataTimestamps() {
          let t,
            e,
            i = this._cache.data || [];
          if (i.length) return i;
          const s = this.getMatchingVisibleMetas();
          if (this._normalized && s.length)
            return (this._cache.data =
              s[0].controller.getAllParsedValues(this));
          for (t = 0, e = s.length; t < e; ++t)
            i = i.concat(s[t].controller.getAllParsedValues(this));
          return (this._cache.data = this.normalize(i));
        }
        getLabelTimestamps() {
          const t = this._cache.labels || [];
          let e, i;
          if (t.length) return t;
          const s = this.getLabels();
          for (e = 0, i = s.length; e < i; ++e) t.push(Ma(this, s[e]));
          return (this._cache.labels = this._normalized
            ? t
            : this.normalize(t));
        }
        normalize(t) {
          return ie(t.sort(wa));
        }
      }
      function Ea(t, e, i) {
        let s,
          n,
          o,
          a,
          r = 0,
          l = t.length - 1;
        i
          ? (e >= t[r].pos &&
              e <= t[l].pos &&
              ({ lo: r, hi: l } = Jt(t, "pos", e)),
            ({ pos: s, time: o } = t[r]),
            ({ pos: n, time: a } = t[l]))
          : (e >= t[r].time &&
              e <= t[l].time &&
              ({ lo: r, hi: l } = Jt(t, "time", e)),
            ({ time: s, pos: o } = t[r]),
            ({ time: n, pos: a } = t[l]));
        const h = n - s;
        return h ? o + ((a - o) * (e - s)) / h : o;
      }
      var Pa = Object.freeze({
        __proto__: null,
        CategoryScale: class extends fn {
          static id = "category";
          static defaults = { ticks: { callback: sa } };
          constructor(t) {
            super(t),
              (this._startValue = void 0),
              (this._valueRange = 0),
              (this._addedLabels = []);
          }
          init(t) {
            const e = this._addedLabels;
            if (e.length) {
              const t = this.getLabels();
              for (const { index: i, label: s } of e)
                t[i] === s && t.splice(i, 1);
              this._addedLabels = [];
            }
            super.init(t);
          }
          parse(t, e) {
            if (ot(t)) return null;
            const i = this.getLabels();
            return ((t, e) => (null === t ? null : qt(Math.round(t), 0, e)))(
              (e =
                isFinite(e) && i[e] === t
                  ? e
                  : (function (t, e, i, s) {
                      const n = t.indexOf(e);
                      return -1 === n
                        ? ((t, e, i, s) => (
                            "string" == typeof e
                              ? ((i = t.push(e) - 1),
                                s.unshift({ index: i, label: e }))
                              : isNaN(e) && (i = null),
                            i
                          ))(t, e, i, s)
                        : n !== t.lastIndexOf(e)
                        ? i
                        : n;
                    })(i, t, ct(e, t), this._addedLabels)),
              i.length - 1,
            );
          }
          determineDataLimits() {
            const { minDefined: t, maxDefined: e } = this.getUserBounds();
            let { min: i, max: s } = this.getMinMax(!0);
            "ticks" === this.options.bounds &&
              (t || (i = 0), e || (s = this.getLabels().length - 1)),
              (this.min = i),
              (this.max = s);
          }
          buildTicks() {
            const t = this.min,
              e = this.max,
              i = this.options.offset,
              s = [];
            let n = this.getLabels();
            (n = 0 === t && e === n.length - 1 ? n : n.slice(t, e + 1)),
              (this._valueRange = Math.max(n.length - (i ? 0 : 1), 1)),
              (this._startValue = this.min - (i ? 0.5 : 0));
            for (let i = t; i <= e; i++) s.push({ value: i });
            return s;
          }
          getLabelForValue(t) {
            return sa.call(this, t);
          }
          configure() {
            super.configure(),
              this.isHorizontal() ||
                (this._reversePixels = !this._reversePixels);
          }
          getPixelForValue(t) {
            return (
              "number" != typeof t && (t = this.parse(t)),
              null === t
                ? NaN
                : this.getPixelForDecimal(
                    (t - this._startValue) / this._valueRange,
                  )
            );
          }
          getPixelForTick(t) {
            const e = this.ticks;
            return t < 0 || t > e.length - 1
              ? null
              : this.getPixelForValue(e[t].value);
          }
          getValueForPixel(t) {
            return Math.round(
              this._startValue + this.getDecimalForPixel(t) * this._valueRange,
            );
          }
          getBasePixel() {
            return this.bottom;
          }
        },
        LinearScale: aa,
        LogarithmicScale: da,
        RadialLinearScale: _a,
        TimeScale: Da,
        TimeSeriesScale: class extends Da {
          static id = "timeseries";
          static defaults = Da.defaults;
          constructor(t) {
            super(t),
              (this._table = []),
              (this._minPos = void 0),
              (this._tableRange = void 0);
          }
          initOffsets() {
            const t = this._getTimestampsForTable(),
              e = (this._table = this.buildLookupTable(t));
            (this._minPos = Ea(e, this.min)),
              (this._tableRange = Ea(e, this.max) - this._minPos),
              super.initOffsets(t);
          }
          buildLookupTable(t) {
            const { min: e, max: i } = this,
              s = [],
              n = [];
            let o, a, r, l, h;
            for (o = 0, a = t.length; o < a; ++o)
              (l = t[o]), l >= e && l <= i && s.push(l);
            if (s.length < 2)
              return [
                { time: e, pos: 0 },
                { time: i, pos: 1 },
              ];
            for (o = 0, a = s.length; o < a; ++o)
              (h = s[o + 1]),
                (r = s[o - 1]),
                (l = s[o]),
                Math.round((h + r) / 2) !== l &&
                  n.push({ time: l, pos: o / (a - 1) });
            return n;
          }
          _generate() {
            const t = this.min,
              e = this.max;
            let i = super.getDataTimestamps();
            return (
              (i.includes(t) && i.length) || i.splice(0, 0, t),
              (i.includes(e) && 1 !== i.length) || i.push(e),
              i.sort((t, e) => t - e)
            );
          }
          _getTimestampsForTable() {
            let t = this._cache.all || [];
            if (t.length) return t;
            const e = this.getDataTimestamps(),
              i = this.getLabelTimestamps();
            return (
              (t =
                e.length && i.length
                  ? this.normalize(e.concat(i))
                  : e.length
                  ? e
                  : i),
              (t = this._cache.all = t),
              t
            );
          }
          getDecimalForValue(t) {
            return (Ea(this._table, t) - this._minPos) / this._tableRange;
          }
          getValueForPixel(t) {
            const e = this._offsets,
              i = this.getDecimalForPixel(t) / e.factor - e.end;
            return Ea(this._table, i * this._tableRange + this._minPos, !0);
          }
        },
      });
      const Oa = [xs, ao, ia, Pa];
      jn.register(...Oa);
      const Ta = jn;
      class La {
        constructor() {
          (this.container = document.createElement("div")),
            (this.canvas = document.createElement("canvas")),
            this.container.append(this.canvas);
          const t = [
            { year: 2010, count: 10 },
            { year: 2011, count: 20 },
            { year: 2012, count: 15 },
            { year: 2013, count: 25 },
            { year: 2014, count: 22 },
            { year: 2015, count: 30 },
            { year: 2016, count: 28 },
          ];
          this.cachedChart = new Ta(this.canvas, {
            type: "line",
            data: {
              labels: t.map((t) => t.year),
              datasets: [{ data: t.map((t) => t.count), tension: 0.2 }],
            },
          });
        }
      }
      var Ra = i(830),
        Ba = {};
      (Ba.styleTagTransform = u()),
        (Ba.setAttributes = l()),
        (Ba.insert = a().bind(null, "head")),
        (Ba.domAPI = n()),
        (Ba.insertStyleElement = c()),
        e()(Ra.Z, Ba),
        Ra.Z && Ra.Z.locals && Ra.Z.locals;
      const Ia = document.querySelector("body"),
        za = new (class {
          constructor() {
            (this.container = document.createElement("div")),
              (this.container.id = "appContainer"),
              (this.header = new _()),
              (this.graph = new La()),
              (this.daysBar = new C()),
              this.container.append(
                this.header.container,
                this.graph.container,
                this.daysBar.container,
              ),
              this.apiCall(),
              this.bindEvents();
          }
          apiCall() {
            console.log(this),
              (async function () {
                const t = await fetch(
                  "https://api.weatherapi.com/v1/forecast.json?key=6b50d5938f0b4173a06202148231208&q=montevideo&days=3&aqi=no&alerts=no\n    ",
                );
                return await t.json();
              })().then((t) => {
                (this.cachedWeather = t),
                  b.emit("renderHeader", t),
                  b.emit("renderDays", t);
              });
          }
          bindEvents() {
            b.on("apiCall", () => {
              this.apiCall();
            });
          }
          render() {}
        })();
      Ia.append(za.container);
    })();
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
