/*! For license information please see index.bundle.js.LICENSE.txt */
(()=>{"use strict";var t={217:(t,e,i)=>{i.d(e,{Z:()=>a});var n=i(537),s=i.n(n),o=i(645),r=i.n(o)()(s());r.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;1,300;1,400;1,500;1,600&display=swap);"]),r.push([t.id,':root {\n  font-family: "Open Sans", sans-serif;\n}\n',"",{version:3,sources:["webpack://./src/css/font.css"],names:[],mappings:"AAEA;EACE,oCAAoC;AACtC",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;1,300;1,400;1,500;1,600&display=swap");\n\n:root {\n  font-family: "Open Sans", sans-serif;\n}\n'],sourceRoot:""}]);const a=r},830:(t,e,i)=>{i.d(e,{Z:()=>h});var n=i(537),s=i.n(n),o=i(645),r=i.n(o),a=i(728),l=r()(s());l.i(a.Z),l.push([t.id,"#appContainer {\n  border: 2px solid red;\n  border-radius: 10px;\n  display: flex;\n  flex-direction: column;\n  width: min(var(--minWidth), 100%);\n  padding: 10px;\n  gap: 10px;\n}\n","",{version:3,sources:["webpack://./src/css/modules/App.css"],names:[],mappings:"AAEA;EACE,qBAAqB;EACrB,mBAAmB;EACnB,aAAa;EACb,sBAAsB;EACtB,iCAAiC;EACjC,aAAa;EACb,SAAS;AACX",sourcesContent:["@import url(../variables.css);\n\n#appContainer {\n  border: 2px solid red;\n  border-radius: 10px;\n  display: flex;\n  flex-direction: column;\n  width: min(var(--minWidth), 100%);\n  padding: 10px;\n  gap: 10px;\n}\n"],sourceRoot:""}]);const h=l},211:(t,e,i)=>{i.d(e,{Z:()=>h});var n=i(537),s=i.n(n),o=i(645),r=i.n(o),a=i(728),l=r()(s());l.i(a.Z),l.push([t.id,"#dayContainer {\n  flex: 1 0 auto;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: 1rem 1fr 1rem;\n  border: 2px solid grey;\n  padding: 5px;\n  border-radius: 10px;\n  gap: 5px;\n}\n\n#dayDay {\n  grid-row: 1;\n  grid-column: 1/-1;\n  text-align: center;\n}\n#dayIcon {\n  grid-row: 2;\n  grid-column: 1/-1;\n  align-self: center;\n  justify-self: center;\n  width: 100%;\n}\n#dayMax {\n  grid-row: 3;\n  grid-column: 1;\n  text-align: center;\n\n  font-size: 0.8rem;\n}\n#dayMin {\n  grid-row: 3;\n  grid-column: 2;\n  text-align: center;\n  font-size: 0.8rem;\n  color: var(--textMid);\n}\n","",{version:3,sources:["webpack://./src/css/modules/Day.css"],names:[],mappings:"AAEA;EACE,cAAc;EACd,aAAa;EACb,8BAA8B;EAC9B,iCAAiC;EACjC,sBAAsB;EACtB,YAAY;EACZ,mBAAmB;EACnB,QAAQ;AACV;;AAEA;EACE,WAAW;EACX,iBAAiB;EACjB,kBAAkB;AACpB;AACA;EACE,WAAW;EACX,iBAAiB;EACjB,kBAAkB;EAClB,oBAAoB;EACpB,WAAW;AACb;AACA;EACE,WAAW;EACX,cAAc;EACd,kBAAkB;;EAElB,iBAAiB;AACnB;AACA;EACE,WAAW;EACX,cAAc;EACd,kBAAkB;EAClB,iBAAiB;EACjB,qBAAqB;AACvB",sourcesContent:['@import url("../variables.css");\n\n#dayContainer {\n  flex: 1 0 auto;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: 1rem 1fr 1rem;\n  border: 2px solid grey;\n  padding: 5px;\n  border-radius: 10px;\n  gap: 5px;\n}\n\n#dayDay {\n  grid-row: 1;\n  grid-column: 1/-1;\n  text-align: center;\n}\n#dayIcon {\n  grid-row: 2;\n  grid-column: 1/-1;\n  align-self: center;\n  justify-self: center;\n  width: 100%;\n}\n#dayMax {\n  grid-row: 3;\n  grid-column: 1;\n  text-align: center;\n\n  font-size: 0.8rem;\n}\n#dayMin {\n  grid-row: 3;\n  grid-column: 2;\n  text-align: center;\n  font-size: 0.8rem;\n  color: var(--textMid);\n}\n'],sourceRoot:""}]);const h=l},343:(t,e,i)=>{i.d(e,{Z:()=>h});var n=i(537),s=i.n(n),o=i(645),r=i.n(o),a=i(728),l=r()(s());l.i(a.Z),l.push([t.id,"#container {\n  display: flex;\n  gap: 10px;\n  scroll-margin: 20px;\n}\n\n@media (max-width: 725px) {\n  /*  FIX: doesn't work witn var() */\n  #container {\n    overflow-x: scroll;\n  }\n}\n","",{version:3,sources:["webpack://./src/css/modules/DaysBar.css"],names:[],mappings:"AAEA;EACE,aAAa;EACb,SAAS;EACT,mBAAmB;AACrB;;AAEA;EACE,kCAAkC;EAClC;IACE,kBAAkB;EACpB;AACF",sourcesContent:['@import url("../variables.css");\n\n#container {\n  display: flex;\n  gap: 10px;\n  scroll-margin: 20px;\n}\n\n@media (max-width: 725px) {\n  /*  FIX: doesn\'t work witn var() */\n  #container {\n    overflow-x: scroll;\n  }\n}\n'],sourceRoot:""}]);const h=l},988:(t,e,i)=>{i.d(e,{Z:()=>a});var n=i(537),s=i.n(n),o=i(645),r=i.n(o)()(s());r.push([t.id,"#graphContainer {\n  position: relative;\n  width: 100%;\n  height: 200px;\n}\n","",{version:3,sources:["webpack://./src/css/modules/Graph.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,WAAW;EACX,aAAa;AACf",sourcesContent:["#graphContainer {\n  position: relative;\n  width: 100%;\n  height: 200px;\n}\n"],sourceRoot:""}]);const a=r},27:(t,e,i)=>{i.d(e,{Z:()=>h});var n=i(537),s=i.n(n),o=i(645),r=i.n(o),a=i(728),l=r()(s());l.i(a.Z),l.push([t.id,"#headerContainer {\n  display: grid;\n  grid-template-columns: 5rem 5rem 1fr;\n}\n#headerIcon {\n  grid-column: 1;\n  grid-row: 1;\n  width: 100%;\n  align-self: center;\n  justify-self: center;\n}\n#headerTemperature {\n  grid-column: 2;\n  grid-row: 1;\n  font-size: 3rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n#headerHumidity {\n  grid-column: 1/3;\n  grid-row: 3;\n  font-size: 0.8rem;\n  color: var(--textMid);\n}\n#headerWind {\n  grid-column: 1/3;\n  grid-row: 4;\n  font-size: 0.8rem;\n  color: var(--textMid);\n}\n\n#headerChanceRain {\n  grid-column: 1/3;\n  grid-row: 2;\n  color: var(--textMid);\n  font-size: 0.8rem;\n}\n\n#headerDay {\n  grid-column: -1;\n  grid-row: 2;\n  text-align: end;\n}\n\n#headerCondition {\n  grid-column: -1;\n  grid-row: 3;\n  text-align: end;\n}\n","",{version:3,sources:["webpack://./src/css/modules/Header.css"],names:[],mappings:"AAEA;EACE,aAAa;EACb,oCAAoC;AACtC;AACA;EACE,cAAc;EACd,WAAW;EACX,WAAW;EACX,kBAAkB;EAClB,oBAAoB;AACtB;AACA;EACE,cAAc;EACd,WAAW;EACX,eAAe;EACf,aAAa;EACb,mBAAmB;EACnB,uBAAuB;AACzB;AACA;EACE,gBAAgB;EAChB,WAAW;EACX,iBAAiB;EACjB,qBAAqB;AACvB;AACA;EACE,gBAAgB;EAChB,WAAW;EACX,iBAAiB;EACjB,qBAAqB;AACvB;;AAEA;EACE,gBAAgB;EAChB,WAAW;EACX,qBAAqB;EACrB,iBAAiB;AACnB;;AAEA;EACE,eAAe;EACf,WAAW;EACX,eAAe;AACjB;;AAEA;EACE,eAAe;EACf,WAAW;EACX,eAAe;AACjB",sourcesContent:['@import url("../variables.css");\n\n#headerContainer {\n  display: grid;\n  grid-template-columns: 5rem 5rem 1fr;\n}\n#headerIcon {\n  grid-column: 1;\n  grid-row: 1;\n  width: 100%;\n  align-self: center;\n  justify-self: center;\n}\n#headerTemperature {\n  grid-column: 2;\n  grid-row: 1;\n  font-size: 3rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n#headerHumidity {\n  grid-column: 1/3;\n  grid-row: 3;\n  font-size: 0.8rem;\n  color: var(--textMid);\n}\n#headerWind {\n  grid-column: 1/3;\n  grid-row: 4;\n  font-size: 0.8rem;\n  color: var(--textMid);\n}\n\n#headerChanceRain {\n  grid-column: 1/3;\n  grid-row: 2;\n  color: var(--textMid);\n  font-size: 0.8rem;\n}\n\n#headerDay {\n  grid-column: -1;\n  grid-row: 2;\n  text-align: end;\n}\n\n#headerCondition {\n  grid-column: -1;\n  grid-row: 3;\n  text-align: end;\n}\n'],sourceRoot:""}]);const h=l},195:(t,e,i)=>{i.d(e,{Z:()=>h});var n=i(537),s=i.n(n),o=i(645),r=i.n(o),a=i(728),l=r()(s());l.i(a.Z),l.push([t.id,":root {\n  scrollbar-color: #acacac transparent;\n}\n::-webkit-scrollbar {\n  height: 17px;\n  width: 17px;\n  background: var(--bgDark);\n}\n\n::-webkit-scrollbar-thumb {\n  background: var(--textDark);\n  -webkit-border-radius: 1ex;\n  border: solid 5px var(--bgDark);\n}\n\n::-webkit-scrollbar-corner {\n  background: var(--bgDark);\n}\n\n::-webkit-scrollbar-track {\n  box-shadow: inset 0 0 10px 10px var(--bgDark);\n  border: solid 5px var(--bgDark);\n}\n","",{version:3,sources:["webpack://./src/css/scrollbar.css"],names:[],mappings:"AAEA;EACE,oCAAoC;AACtC;AACA;EACE,YAAY;EACZ,WAAW;EACX,yBAAyB;AAC3B;;AAEA;EACE,2BAA2B;EAC3B,0BAA0B;EAC1B,+BAA+B;AACjC;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,6CAA6C;EAC7C,+BAA+B;AACjC",sourcesContent:['@import url("./variables.css");\n\n:root {\n  scrollbar-color: #acacac transparent;\n}\n::-webkit-scrollbar {\n  height: 17px;\n  width: 17px;\n  background: var(--bgDark);\n}\n\n::-webkit-scrollbar-thumb {\n  background: var(--textDark);\n  -webkit-border-radius: 1ex;\n  border: solid 5px var(--bgDark);\n}\n\n::-webkit-scrollbar-corner {\n  background: var(--bgDark);\n}\n\n::-webkit-scrollbar-track {\n  box-shadow: inset 0 0 10px 10px var(--bgDark);\n  border: solid 5px var(--bgDark);\n}\n'],sourceRoot:""}]);const h=l},402:(t,e,i)=>{i.d(e,{Z:()=>c});var n=i(537),s=i.n(n),o=i(645),r=i.n(o),a=i(728),l=i(195),h=r()(s());h.i(a.Z),h.i(l.Z),h.push([t.id,"* {\n  -webkit-user-select: none; /* Safari */\n  -ms-user-select: none; /* IE 10 and IE 11 */\n  user-select: none; /* Standard syntax */\n}\nbody {\n  background: var(--bgDark);\n  color: var(--textLight);\n  min-height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n","",{version:3,sources:["webpack://./src/css/style.css"],names:[],mappings:"AAGA;EACE,yBAAyB,EAAE,WAAW;EACtC,qBAAqB,EAAE,oBAAoB;EAC3C,iBAAiB,EAAE,oBAAoB;AACzC;AACA;EACE,yBAAyB;EACzB,uBAAuB;EACvB,iBAAiB;EACjB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB",sourcesContent:['@import url("./variables.css");\n@import url("./scrollbar.css");\n\n* {\n  -webkit-user-select: none; /* Safari */\n  -ms-user-select: none; /* IE 10 and IE 11 */\n  user-select: none; /* Standard syntax */\n}\nbody {\n  background: var(--bgDark);\n  color: var(--textLight);\n  min-height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n'],sourceRoot:""}]);const c=h},728:(t,e,i)=>{i.d(e,{Z:()=>a});var n=i(537),s=i.n(n),o=i(645),r=i.n(o)()(s());r.push([t.id,":root {\n  --bgDark: #202124;\n  --textDark: #70717a;\n  --textMid: #7f8089;\n  --textLight: #e8eaed;\n\n  --minWidth: 700px;\n}\n","",{version:3,sources:["webpack://./src/css/variables.css"],names:[],mappings:"AAAA;EACE,iBAAiB;EACjB,mBAAmB;EACnB,kBAAkB;EAClB,oBAAoB;;EAEpB,iBAAiB;AACnB",sourcesContent:[":root {\n  --bgDark: #202124;\n  --textDark: #70717a;\n  --textMid: #7f8089;\n  --textLight: #e8eaed;\n\n  --minWidth: 700px;\n}\n"],sourceRoot:""}]);const a=r},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i="",n=void 0!==e[5];return e[4]&&(i+="@supports (".concat(e[4],") {")),e[2]&&(i+="@media ".concat(e[2]," {")),n&&(i+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),i+=t(e),n&&(i+="}"),e[2]&&(i+="}"),e[4]&&(i+="}"),i})).join("")},e.i=function(t,i,n,s,o){"string"==typeof t&&(t=[[null,t,void 0]]);var r={};if(n)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(r[l]=!0)}for(var h=0;h<t.length;h++){var c=[].concat(t[h]);n&&r[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),i&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=i):c[2]=i),s&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=s):c[4]="".concat(s)),e.push(c))}},e}},537:t=>{t.exports=function(t){var e=t[1],i=t[3];if(!i)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),o="/*# ".concat(s," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function i(t){for(var i=-1,n=0;n<e.length;n++)if(e[n].identifier===t){i=n;break}return i}function n(t,n){for(var o={},r=[],a=0;a<t.length;a++){var l=t[a],h=n.base?l[0]+n.base:l[0],c=o[h]||0,d="".concat(h," ").concat(c);o[h]=c+1;var u=i(d),f={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)e[u].references++,e[u].updater(f);else{var p=s(f,n);n.byIndex=a,e.splice(a,0,{identifier:d,updater:p,references:1})}r.push(d)}return r}function s(t,e){var i=e.domAPI(e);return i.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;i.update(t=e)}else i.remove()}}t.exports=function(t,s){var o=n(t=t||[],s=s||{});return function(t){t=t||[];for(var r=0;r<o.length;r++){var a=i(o[r]);e[a].references--}for(var l=n(t,s),h=0;h<o.length;h++){var c=i(o[h]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}o=l}}},569:t=>{var e={};t.exports=function(t,i){var n=function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}e[t]=i}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(i)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,i)=>{t.exports=function(t){var e=i.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(i){!function(t,e,i){var n="";i.supports&&(n+="@supports (".concat(i.supports,") {")),i.media&&(n+="@media ".concat(i.media," {"));var s=void 0!==i.layer;s&&(n+="@layer".concat(i.layer.length>0?" ".concat(i.layer):""," {")),n+=i.css,s&&(n+="}"),i.media&&(n+="}"),i.supports&&(n+="}");var o=i.sourceMap;o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,i)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function i(n){var s=e[n];if(void 0!==s)return s.exports;var o=e[n]={id:n,exports:{}};return t[n](o,o.exports,i),o.exports}i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.nc=void 0,(()=>{var t=i(379),e=i.n(t),n=i(795),s=i.n(n),o=i(569),r=i.n(o),a=i(565),l=i.n(a),h=i(216),c=i.n(h),d=i(589),u=i.n(d),f=i(217),p={};p.styleTagTransform=u(),p.setAttributes=l(),p.insert=r().bind(null,"head"),p.domAPI=s(),p.insertStyleElement=c(),e()(f.Z,p),f.Z&&f.Z.locals&&f.Z.locals;var g=i(402),m={};m.styleTagTransform=u(),m.setAttributes=l(),m.insert=r().bind(null,"head"),m.domAPI=s(),m.insertStyleElement=c(),e()(g.Z,m),g.Z&&g.Z.locals&&g.Z.locals;const x={Pubsub:{},on(t,e){this.Pubsub[t]=this.Pubsub[t]||[],this.Pubsub[t].push(e)},off(t,e){if(this.Pubsub[t])for(let i=0;i<this.Pubsub[t].length;i++)if(this.Pubsub[t][i]===e){this.Pubsub[t].splice(i,1);break}},emit(t,e){this.Pubsub[t]&&this.Pubsub[t].forEach((t=>{t(e)}))}};class b{static cachedData}var y=i(27),v={};v.styleTagTransform=u(),v.setAttributes=l(),v.insert=r().bind(null,"head"),v.domAPI=s(),v.insertStyleElement=c(),e()(y.Z,v),y.Z&&y.Z.locals&&y.Z.locals;class _{constructor(){this.container=document.createElement("div"),this.container.id="headerContainer",this.imgIcon=document.createElement("img"),this.imgIcon.id="headerIcon",this.divTemperature=document.createElement("div"),this.divTemperature.id="headerTemperature",this.divHumidity=document.createElement("div"),this.divHumidity.id="headerHumidity",this.divWindSpeed=document.createElement("div"),this.divWindSpeed.id="headerWind",this.divChanceRain=document.createElement("div"),this.divChanceRain.id="headerChanceRain",this.divDay=document.createElement("div"),this.divDay.id="headerDay",this.divCondition=document.createElement("div"),this.divCondition.id="headerCondition",this.container.append(this.imgIcon,this.divTemperature,this.divHumidity,this.divWindSpeed,this.divChanceRain,this.divDay,this.divCondition),this.bindEvents()}bindEvents(){x.on("renderHeader",(t=>{const{icon:e}=b.cachedData.forecast.forecastday[t].day.condition,i=b.cachedData.forecast.forecastday[t].day.daily_chance_of_rain,n=b.cachedData.forecast.forecastday[t].day.condition.text,s=new Date(b.cachedData.forecast.forecastday[t].date).toLocaleDateString("en-US",{weekday:"long",timeZone:"UTC"});let o,r,a;0===t?(o=Math.floor(b.cachedData.current.temp_c),r=b.cachedData.current.humidity,a=b.cachedData.current.wind_kph):(o=Math.floor(b.cachedData.forecast.forecastday[t].day.avgtemp_c),r=b.cachedData.forecast.forecastday[t].day.avghumidity,a=b.cachedData.forecast.forecastday[t].day.maxwind_kph),this.render({icon:e,tempC:o,humidity:r,windKPH:a,chanceOfRain:i,day:s,condition:n})}))}render(t){this.imgIcon.src=t.icon,this.divTemperature.innerText=`${t.tempC}°`,this.divHumidity.innerText=`Humidity: ${t.humidity}%`,this.divWindSpeed.innerText=`Wind speed: ${t.windKPH}`,this.divChanceRain.innerText=`Chance of rain: ${t.chanceOfRain}%`,this.divDay.innerText=t.day,this.divCondition.innerText=t.condition}}var w=i(211),A={};A.styleTagTransform=u(),A.setAttributes=l(),A.insert=r().bind(null,"head"),A.domAPI=s(),A.insertStyleElement=c(),e()(w.Z,A),w.Z&&w.Z.locals&&w.Z.locals;class M{constructor(t){let e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this.index=t,this.isCurrentDay=e,this.container=document.createElement("div"),this.container.id="dayContainer",this.imgIcon=document.createElement("img"),this.imgIcon.id="dayIcon",this.divDayOfWeek=document.createElement("div"),this.divDayOfWeek.id="dayDay",this.divTemperatureMAX=document.createElement("div"),this.divTemperatureMAX.id="dayMax",this.divTemperatureMIN=document.createElement("div"),this.divTemperatureMIN.id="dayMin",this.container.append(this.imgIcon,this.divDayOfWeek,this.divTemperatureMAX,this.divTemperatureMIN),this.bindEvents()}render(t){this.cachedData=t,this.imgIcon.src=t.day.condition.icon,this.divDayOfWeek.innerText=new Date(1e3*t.date_epoch).toLocaleDateString("en-US",{weekday:"short",timeZone:"UTC"}),this.divTemperatureMAX.innerText=`${t.day.maxtemp_c}°`,this.divTemperatureMIN.innerText=`${t.day.mintemp_c}°`}bindEvents(){this.container.addEventListener("click",(()=>{x.emit("renderHeader",this.index)})),this.container.addEventListener("click",(()=>{x.emit("renderGraph",this.index)}))}}var k=i(343),C={};C.styleTagTransform=u(),C.setAttributes=l(),C.insert=r().bind(null,"head"),C.domAPI=s(),C.insertStyleElement=c(),e()(k.Z,C),k.Z&&k.Z.locals&&k.Z.locals;class S{days=[];constructor(t){this.container=document.createElement("div"),this.container.id="container";for(let e=0;e<t;e++){const t=0===e;this.days.push(new M(e,t)),this.container.append(this.days[e].container)}this.bindEvents()}bindEvents(){x.on("renderDaysBar",(()=>{this.render(b.cachedData)}))}render(t){this.days.forEach((e=>{e.render(t.forecast.forecastday[e.index])}))}}function D(t){return t+.5|0}const E=(t,e,i)=>Math.max(Math.min(t,i),e);function P(t){return E(D(2.55*t),0,255)}function O(t){return E(D(255*t),0,255)}function T(t){return E(D(t/2.55)/100,0,1)}function R(t){return E(D(100*t),0,100)}const B={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},I=[..."0123456789ABCDEF"],L=t=>I[15&t],z=t=>I[(240&t)>>4]+I[15&t],W=t=>(240&t)>>4==(15&t);const F=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function j(t,e,i){const n=e*Math.min(i,1-i),s=(e,s=(e+t/30)%12)=>i-n*Math.max(Math.min(s-3,9-s,1),-1);return[s(0),s(8),s(4)]}function V(t,e,i){const n=(n,s=(n+t/60)%6)=>i-i*e*Math.max(Math.min(s,4-s,1),0);return[n(5),n(3),n(1)]}function N(t,e,i){const n=j(t,1,.5);let s;for(e+i>1&&(s=1/(e+i),e*=s,i*=s),s=0;s<3;s++)n[s]*=1-e-i,n[s]+=e;return n}function H(t){const e=t.r/255,i=t.g/255,n=t.b/255,s=Math.max(e,i,n),o=Math.min(e,i,n),r=(s+o)/2;let a,l,h;return s!==o&&(h=s-o,l=r>.5?h/(2-s-o):h/(s+o),a=function(t,e,i,n,s){return t===s?(e-i)/n+(e<i?6:0):e===s?(i-t)/n+2:(t-e)/n+4}(e,i,n,h,s),a=60*a+.5),[0|a,l||0,r]}function Y(t,e,i,n){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,i,n)).map(O)}function X(t,e,i){return Y(j,t,e,i)}function $(t){return(t%360+360)%360}const U={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},Z={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let q;const K=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,G=t=>t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055,J=t=>t<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4);function Q(t,e,i){if(t){let n=H(t);n[e]=Math.max(0,Math.min(n[e]+n[e]*i,0===e?360:1)),n=X(n),t.r=n[0],t.g=n[1],t.b=n[2]}}function tt(t,e){return t?Object.assign(e||{},t):t}function et(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=O(t[3]))):(e=tt(t,{r:0,g:0,b:0,a:1})).a=O(e.a),e}function it(t){return"r"===t.charAt(0)?function(t){const e=K.exec(t);let i,n,s,o=255;if(e){if(e[7]!==i){const t=+e[7];o=e[8]?P(t):E(255*t,0,255)}return i=+e[1],n=+e[3],s=+e[5],i=255&(e[2]?P(i):E(i,0,255)),n=255&(e[4]?P(n):E(n,0,255)),s=255&(e[6]?P(s):E(s,0,255)),{r:i,g:n,b:s,a:o}}}(t):function(t){const e=F.exec(t);let i,n=255;if(!e)return;e[5]!==i&&(n=e[6]?P(+e[5]):O(+e[5]));const s=$(+e[2]),o=+e[3]/100,r=+e[4]/100;return i="hwb"===e[1]?function(t,e,i){return Y(N,t,e,i)}(s,o,r):"hsv"===e[1]?function(t,e,i){return Y(V,t,e,i)}(s,o,r):X(s,o,r),{r:i[0],g:i[1],b:i[2],a:n}}(t)}class nt{constructor(t){if(t instanceof nt)return t;const e=typeof t;let i;var n,s,o;"object"===e?i=et(t):"string"===e&&(o=(n=t).length,"#"===n[0]&&(4===o||5===o?s={r:255&17*B[n[1]],g:255&17*B[n[2]],b:255&17*B[n[3]],a:5===o?17*B[n[4]]:255}:7!==o&&9!==o||(s={r:B[n[1]]<<4|B[n[2]],g:B[n[3]]<<4|B[n[4]],b:B[n[5]]<<4|B[n[6]],a:9===o?B[n[7]]<<4|B[n[8]]:255})),i=s||function(t){q||(q=function(){const t={},e=Object.keys(Z),i=Object.keys(U);let n,s,o,r,a;for(n=0;n<e.length;n++){for(r=a=e[n],s=0;s<i.length;s++)o=i[s],a=a.replace(o,U[o]);o=parseInt(Z[r],16),t[a]=[o>>16&255,o>>8&255,255&o]}return t}(),q.transparent=[0,0,0,0]);const e=q[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}(t)||it(t)),this._rgb=i,this._valid=!!i}get valid(){return this._valid}get rgb(){var t=tt(this._rgb);return t&&(t.a=T(t.a)),t}set rgb(t){this._rgb=et(t)}rgbString(){return this._valid?(t=this._rgb)&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${T(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`):void 0;var t}hexString(){return this._valid?(t=this._rgb,e=(t=>W(t.r)&&W(t.g)&&W(t.b)&&W(t.a))(t)?L:z,t?"#"+e(t.r)+e(t.g)+e(t.b)+((t,e)=>t<255?e(t):"")(t.a,e):void 0):void 0;var t,e}hslString(){return this._valid?function(t){if(!t)return;const e=H(t),i=e[0],n=R(e[1]),s=R(e[2]);return t.a<255?`hsla(${i}, ${n}%, ${s}%, ${T(t.a)})`:`hsl(${i}, ${n}%, ${s}%)`}(this._rgb):void 0}mix(t,e){if(t){const i=this.rgb,n=t.rgb;let s;const o=e===s?.5:e,r=2*o-1,a=i.a-n.a,l=((r*a==-1?r:(r+a)/(1+r*a))+1)/2;s=1-l,i.r=255&l*i.r+s*n.r+.5,i.g=255&l*i.g+s*n.g+.5,i.b=255&l*i.b+s*n.b+.5,i.a=o*i.a+(1-o)*n.a,this.rgb=i}return this}interpolate(t,e){return t&&(this._rgb=function(t,e,i){const n=J(T(t.r)),s=J(T(t.g)),o=J(T(t.b));return{r:O(G(n+i*(J(T(e.r))-n))),g:O(G(s+i*(J(T(e.g))-s))),b:O(G(o+i*(J(T(e.b))-o))),a:t.a+i*(e.a-t.a)}}(this._rgb,t._rgb,e)),this}clone(){return new nt(this.rgb)}alpha(t){return this._rgb.a=O(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=D(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return Q(this._rgb,2,t),this}darken(t){return Q(this._rgb,2,-t),this}saturate(t){return Q(this._rgb,1,t),this}desaturate(t){return Q(this._rgb,1,-t),this}rotate(t){return function(t,e){var i=H(t);i[0]=$(i[0]+e),i=X(i),t.r=i[0],t.g=i[1],t.b=i[2]}(this._rgb,t),this}}function st(){}const ot=(()=>{let t=0;return()=>t++})();function rt(t){return null==t}function at(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.slice(0,7)&&"Array]"===e.slice(-6)}function lt(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}function ht(t){return("number"==typeof t||t instanceof Number)&&isFinite(+t)}function ct(t,e){return ht(t)?t:e}function dt(t,e){return void 0===t?e:t}const ut=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function ft(t,e,i){if(t&&"function"==typeof t.call)return t.apply(i,e)}function pt(t,e,i,n){let s,o,r;if(at(t))if(o=t.length,n)for(s=o-1;s>=0;s--)e.call(i,t[s],s);else for(s=0;s<o;s++)e.call(i,t[s],s);else if(lt(t))for(r=Object.keys(t),o=r.length,s=0;s<o;s++)e.call(i,t[r[s]],r[s])}function gt(t,e){let i,n,s,o;if(!t||!e||t.length!==e.length)return!1;for(i=0,n=t.length;i<n;++i)if(s=t[i],o=e[i],s.datasetIndex!==o.datasetIndex||s.index!==o.index)return!1;return!0}function mt(t){if(at(t))return t.map(mt);if(lt(t)){const e=Object.create(null),i=Object.keys(t),n=i.length;let s=0;for(;s<n;++s)e[i[s]]=mt(t[i[s]]);return e}return t}function xt(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function bt(t,e,i,n){if(!xt(t))return;const s=e[t],o=i[t];lt(s)&&lt(o)?yt(s,o,n):e[t]=mt(o)}function yt(t,e,i){const n=at(e)?e:[e],s=n.length;if(!lt(t))return t;const o=(i=i||{}).merger||bt;let r;for(let e=0;e<s;++e){if(r=n[e],!lt(r))continue;const s=Object.keys(r);for(let e=0,n=s.length;e<n;++e)o(s[e],t,r,i)}return t}function vt(t,e){return yt(t,e,{merger:_t})}function _t(t,e,i){if(!xt(t))return;const n=e[t],s=i[t];lt(n)&&lt(s)?vt(n,s):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=mt(s))}const wt={"":t=>t,x:t=>t.x,y:t=>t.y};function At(t,e){const i=wt[e]||(wt[e]=function(t){const e=function(t){const e=t.split("."),i=[];let n="";for(const t of e)n+=t,n.endsWith("\\")?n=n.slice(0,-1)+".":(i.push(n),n="");return i}(t);return t=>{for(const i of e){if(""===i)break;t=t&&t[i]}return t}}(e));return i(t)}function Mt(t){return t.charAt(0).toUpperCase()+t.slice(1)}const kt=t=>void 0!==t,Ct=t=>"function"==typeof t,St=(t,e)=>{if(t.size!==e.size)return!1;for(const i of t)if(!e.has(i))return!1;return!0},Dt=Math.PI,Et=2*Dt,Pt=Et+Dt,Ot=Number.POSITIVE_INFINITY,Tt=Dt/180,Rt=Dt/2,Bt=Dt/4,It=2*Dt/3,Lt=Math.log10,zt=Math.sign;function Wt(t,e,i){return Math.abs(t-e)<i}function Ft(t){const e=Math.round(t);t=Wt(t,e,t/1e3)?e:t;const i=Math.pow(10,Math.floor(Lt(t))),n=t/i;return(n<=1?1:n<=2?2:n<=5?5:10)*i}function jt(t){return!isNaN(parseFloat(t))&&isFinite(t)}function Vt(t,e,i){let n,s,o;for(n=0,s=t.length;n<s;n++)o=t[n][i],isNaN(o)||(e.min=Math.min(e.min,o),e.max=Math.max(e.max,o))}function Nt(t){return t*(Dt/180)}function Ht(t){return t*(180/Dt)}function Yt(t){if(!ht(t))return;let e=1,i=0;for(;Math.round(t*e)/e!==t;)e*=10,i++;return i}function Xt(t,e){const i=e.x-t.x,n=e.y-t.y,s=Math.sqrt(i*i+n*n);let o=Math.atan2(n,i);return o<-.5*Dt&&(o+=Et),{angle:o,distance:s}}function $t(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function Ut(t,e){return(t-e+Pt)%Et-Dt}function Zt(t){return(t%Et+Et)%Et}function qt(t,e,i,n){const s=Zt(t),o=Zt(e),r=Zt(i),a=Zt(o-s),l=Zt(r-s),h=Zt(s-o),c=Zt(s-r);return s===o||s===r||n&&o===r||a>l&&h<c}function Kt(t,e,i){return Math.max(e,Math.min(i,t))}function Gt(t,e,i,n=1e-6){return t>=Math.min(e,i)-n&&t<=Math.max(e,i)+n}function Jt(t,e,i){i=i||(i=>t[i]<e);let n,s=t.length-1,o=0;for(;s-o>1;)n=o+s>>1,i(n)?o=n:s=n;return{lo:o,hi:s}}const Qt=(t,e,i,n)=>Jt(t,i,n?n=>{const s=t[n][e];return s<i||s===i&&t[n+1][e]===i}:n=>t[n][e]<i),te=(t,e,i)=>Jt(t,i,(n=>t[n][e]>=i)),ee=["push","pop","shift","splice","unshift"];function ie(t,e){const i=t._chartjs;if(!i)return;const n=i.listeners,s=n.indexOf(e);-1!==s&&n.splice(s,1),n.length>0||(ee.forEach((e=>{delete t[e]})),delete t._chartjs)}function ne(t){const e=new Set(t);return e.size===t.length?t:Array.from(e)}const se="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function oe(t,e){let i=[],n=!1;return function(...s){i=s,n||(n=!0,se.call(window,(()=>{n=!1,t.apply(e,i)})))}}const re=t=>"start"===t?"left":"end"===t?"right":"center",ae=(t,e,i)=>"start"===t?e:"end"===t?i:(e+i)/2;function le(t,e,i){const n=e.length;let s=0,o=n;if(t._sorted){const{iScale:r,_parsed:a}=t,l=r.axis,{min:h,max:c,minDefined:d,maxDefined:u}=r.getUserBounds();d&&(s=Kt(Math.min(Qt(a,l,h).lo,i?n:Qt(e,l,r.getPixelForValue(h)).lo),0,n-1)),o=u?Kt(Math.max(Qt(a,r.axis,c,!0).hi+1,i?0:Qt(e,l,r.getPixelForValue(c),!0).hi+1),s,n)-s:n-s}return{start:s,count:o}}function he(t){const{xScale:e,yScale:i,_scaleRanges:n}=t,s={xmin:e.min,xmax:e.max,ymin:i.min,ymax:i.max};if(!n)return t._scaleRanges=s,!0;const o=n.xmin!==e.min||n.xmax!==e.max||n.ymin!==i.min||n.ymax!==i.max;return Object.assign(n,s),o}const ce=t=>0===t||1===t,de=(t,e,i)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*Et/i),ue=(t,e,i)=>Math.pow(2,-10*t)*Math.sin((t-e)*Et/i)+1,fe={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*Rt),easeOutSine:t=>Math.sin(t*Rt),easeInOutSine:t=>-.5*(Math.cos(Dt*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>ce(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>ce(t)?t:de(t,.075,.3),easeOutElastic:t=>ce(t)?t:ue(t,.075,.3),easeInOutElastic(t){const e=.1125;return ce(t)?t:t<.5?.5*de(2*t,e,.45):.5+.5*ue(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-fe.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,i=2.75;return t<1/i?e*t*t:t<2/i?e*(t-=1.5/i)*t+.75:t<2.5/i?e*(t-=2.25/i)*t+.9375:e*(t-=2.625/i)*t+.984375},easeInOutBounce:t=>t<.5?.5*fe.easeInBounce(2*t):.5*fe.easeOutBounce(2*t-1)+.5};function pe(t){if(t&&"object"==typeof t){const e=t.toString();return"[object CanvasPattern]"===e||"[object CanvasGradient]"===e}return!1}function ge(t){return pe(t)?t:new nt(t)}function me(t){return pe(t)?t:new nt(t).saturate(.5).darken(.1).hexString()}const xe=["x","y","borderWidth","radius","tension"],be=["color","borderColor","backgroundColor"],ye=new Map;function ve(t,e,i){return function(t,e){e=e||{};const i=t+JSON.stringify(e);let n=ye.get(i);return n||(n=new Intl.NumberFormat(t,e),ye.set(i,n)),n}(e,i).format(t)}const _e={values:t=>at(t)?t:""+t,numeric(t,e,i){if(0===t)return"0";const n=this.chart.options.locale;let s,o=t;if(i.length>1){const e=Math.max(Math.abs(i[0].value),Math.abs(i[i.length-1].value));(e<1e-4||e>1e15)&&(s="scientific"),o=function(t,e){let i=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;return Math.abs(i)>=1&&t!==Math.floor(t)&&(i=t-Math.floor(t)),i}(t,i)}const r=Lt(Math.abs(o)),a=isNaN(r)?1:Math.max(Math.min(-1*Math.floor(r),20),0),l={notation:s,minimumFractionDigits:a,maximumFractionDigits:a};return Object.assign(l,this.options.ticks.format),ve(t,n,l)},logarithmic(t,e,i){if(0===t)return"0";const n=i[e].significand||t/Math.pow(10,Math.floor(Lt(t)));return[1,2,3,5,10,15].includes(n)||e>.8*i.length?_e.numeric.call(this,t,e,i):""}};var we={formatters:_e};const Ae=Object.create(null),Me=Object.create(null);function ke(t,e){if(!e)return t;const i=e.split(".");for(let e=0,n=i.length;e<n;++e){const n=i[e];t=t[n]||(t[n]=Object.create(null))}return t}function Ce(t,e,i){return"string"==typeof e?yt(ke(t,e),i):yt(ke(t,""),e)}class Se{constructor(t,e){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>me(e.backgroundColor),this.hoverBorderColor=(t,e)=>me(e.borderColor),this.hoverColor=(t,e)=>me(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0,includeInvisible:!1},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t),this.apply(e)}set(t,e){return Ce(this,t,e)}get(t){return ke(this,t)}describe(t,e){return Ce(Me,t,e)}override(t,e){return Ce(Ae,t,e)}route(t,e,i,n){const s=ke(this,t),o=ke(this,i),r="_"+e;Object.defineProperties(s,{[r]:{value:s[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[r],e=o[n];return lt(t)?Object.assign({},e,t):dt(t,e)},set(t){this[r]=t}}})}apply(t){t.forEach((t=>t(this)))}}var De=new Se({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}},[function(t){t.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0}),t.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),t.set("animations",{colors:{type:"color",properties:be},numbers:{type:"number",properties:xe}}),t.describe("animations",{_fallback:"animation"}),t.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}})},function(t){t.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}})},function(t){t.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1},border:{display:!0,dash:[],dashOffset:0,width:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:we.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),t.route("scale.ticks","color","","color"),t.route("scale.grid","color","","borderColor"),t.route("scale.border","color","","borderColor"),t.route("scale.title","color","","color"),t.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t&&"dash"!==t}),t.describe("scales",{_fallback:"scale"}),t.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t})}]);function Ee(t,e,i,n,s){let o=e[s];return o||(o=e[s]=t.measureText(s).width,i.push(s)),o>n&&(n=o),n}function Pe(t,e,i,n){let s=(n=n||{}).data=n.data||{},o=n.garbageCollect=n.garbageCollect||[];n.font!==e&&(s=n.data={},o=n.garbageCollect=[],n.font=e),t.save(),t.font=e;let r=0;const a=i.length;let l,h,c,d,u;for(l=0;l<a;l++)if(d=i[l],null==d||at(d)){if(at(d))for(h=0,c=d.length;h<c;h++)u=d[h],null==u||at(u)||(r=Ee(t,s,o,r,u))}else r=Ee(t,s,o,r,d);t.restore();const f=o.length/2;if(f>i.length){for(l=0;l<f;l++)delete s[o[l]];o.splice(0,f)}return r}function Oe(t,e,i){const n=t.currentDevicePixelRatio,s=0!==i?Math.max(i/2,.5):0;return Math.round((e-s)*n)/n+s}function Te(t,e){(e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore()}function Re(t,e,i,n){Be(t,e,i,n,null)}function Be(t,e,i,n,s){let o,r,a,l,h,c,d,u;const f=e.pointStyle,p=e.rotation,g=e.radius;let m=(p||0)*Tt;if(f&&"object"==typeof f&&(o=f.toString(),"[object HTMLImageElement]"===o||"[object HTMLCanvasElement]"===o))return t.save(),t.translate(i,n),t.rotate(m),t.drawImage(f,-f.width/2,-f.height/2,f.width,f.height),void t.restore();if(!(isNaN(g)||g<=0)){switch(t.beginPath(),f){default:s?t.ellipse(i,n,s/2,g,0,0,Et):t.arc(i,n,g,0,Et),t.closePath();break;case"triangle":c=s?s/2:g,t.moveTo(i+Math.sin(m)*c,n-Math.cos(m)*g),m+=It,t.lineTo(i+Math.sin(m)*c,n-Math.cos(m)*g),m+=It,t.lineTo(i+Math.sin(m)*c,n-Math.cos(m)*g),t.closePath();break;case"rectRounded":h=.516*g,l=g-h,r=Math.cos(m+Bt)*l,d=Math.cos(m+Bt)*(s?s/2-h:l),a=Math.sin(m+Bt)*l,u=Math.sin(m+Bt)*(s?s/2-h:l),t.arc(i-d,n-a,h,m-Dt,m-Rt),t.arc(i+u,n-r,h,m-Rt,m),t.arc(i+d,n+a,h,m,m+Rt),t.arc(i-u,n+r,h,m+Rt,m+Dt),t.closePath();break;case"rect":if(!p){l=Math.SQRT1_2*g,c=s?s/2:l,t.rect(i-c,n-l,2*c,2*l);break}m+=Bt;case"rectRot":d=Math.cos(m)*(s?s/2:g),r=Math.cos(m)*g,a=Math.sin(m)*g,u=Math.sin(m)*(s?s/2:g),t.moveTo(i-d,n-a),t.lineTo(i+u,n-r),t.lineTo(i+d,n+a),t.lineTo(i-u,n+r),t.closePath();break;case"crossRot":m+=Bt;case"cross":d=Math.cos(m)*(s?s/2:g),r=Math.cos(m)*g,a=Math.sin(m)*g,u=Math.sin(m)*(s?s/2:g),t.moveTo(i-d,n-a),t.lineTo(i+d,n+a),t.moveTo(i+u,n-r),t.lineTo(i-u,n+r);break;case"star":d=Math.cos(m)*(s?s/2:g),r=Math.cos(m)*g,a=Math.sin(m)*g,u=Math.sin(m)*(s?s/2:g),t.moveTo(i-d,n-a),t.lineTo(i+d,n+a),t.moveTo(i+u,n-r),t.lineTo(i-u,n+r),m+=Bt,d=Math.cos(m)*(s?s/2:g),r=Math.cos(m)*g,a=Math.sin(m)*g,u=Math.sin(m)*(s?s/2:g),t.moveTo(i-d,n-a),t.lineTo(i+d,n+a),t.moveTo(i+u,n-r),t.lineTo(i-u,n+r);break;case"line":r=s?s/2:Math.cos(m)*g,a=Math.sin(m)*g,t.moveTo(i-r,n-a),t.lineTo(i+r,n+a);break;case"dash":t.moveTo(i,n),t.lineTo(i+Math.cos(m)*(s?s/2:g),n+Math.sin(m)*g);break;case!1:t.closePath()}t.fill(),e.borderWidth>0&&t.stroke()}}function Ie(t,e,i){return i=i||.5,!e||t&&t.x>e.left-i&&t.x<e.right+i&&t.y>e.top-i&&t.y<e.bottom+i}function Le(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function ze(t){t.restore()}function We(t,e,i,n,s){if(!e)return t.lineTo(i.x,i.y);if("middle"===s){const n=(e.x+i.x)/2;t.lineTo(n,e.y),t.lineTo(n,i.y)}else"after"===s!=!!n?t.lineTo(e.x,i.y):t.lineTo(i.x,e.y);t.lineTo(i.x,i.y)}function Fe(t,e,i,n){if(!e)return t.lineTo(i.x,i.y);t.bezierCurveTo(n?e.cp1x:e.cp2x,n?e.cp1y:e.cp2y,n?i.cp2x:i.cp1x,n?i.cp2y:i.cp1y,i.x,i.y)}function je(t,e,i,n,s){if(s.strikethrough||s.underline){const o=t.measureText(n),r=e-o.actualBoundingBoxLeft,a=e+o.actualBoundingBoxRight,l=i-o.actualBoundingBoxAscent,h=i+o.actualBoundingBoxDescent,c=s.strikethrough?(l+h)/2:h;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=s.decorationWidth||2,t.moveTo(r,c),t.lineTo(a,c),t.stroke()}}function Ve(t,e){const i=t.fillStyle;t.fillStyle=e.color,t.fillRect(e.left,e.top,e.width,e.height),t.fillStyle=i}function Ne(t,e,i,n,s,o={}){const r=at(e)?e:[e],a=o.strokeWidth>0&&""!==o.strokeColor;let l,h;for(t.save(),t.font=s.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]),rt(e.rotation)||t.rotate(e.rotation),e.color&&(t.fillStyle=e.color),e.textAlign&&(t.textAlign=e.textAlign),e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,o),l=0;l<r.length;++l)h=r[l],o.backdrop&&Ve(t,o.backdrop),a&&(o.strokeColor&&(t.strokeStyle=o.strokeColor),rt(o.strokeWidth)||(t.lineWidth=o.strokeWidth),t.strokeText(h,i,n,o.maxWidth)),t.fillText(h,i,n,o.maxWidth),je(t,i,n,h,o),n+=Number(s.lineHeight);t.restore()}function He(t,e){const{x:i,y:n,w:s,h:o,radius:r}=e;t.arc(i+r.topLeft,n+r.topLeft,r.topLeft,-Rt,Dt,!0),t.lineTo(i,n+o-r.bottomLeft),t.arc(i+r.bottomLeft,n+o-r.bottomLeft,r.bottomLeft,Dt,Rt,!0),t.lineTo(i+s-r.bottomRight,n+o),t.arc(i+s-r.bottomRight,n+o-r.bottomRight,r.bottomRight,Rt,0,!0),t.lineTo(i+s,n+r.topRight),t.arc(i+s-r.topRight,n+r.topRight,r.topRight,0,-Rt,!0),t.lineTo(i+r.topLeft,n)}const Ye=/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/,Xe=/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;function $e(t,e){const i=(""+t).match(Ye);if(!i||"normal"===i[1])return 1.2*e;switch(t=+i[2],i[3]){case"px":return t;case"%":t/=100}return e*t}const Ue=t=>+t||0;function Ze(t,e){const i={},n=lt(e),s=n?Object.keys(e):e,o=lt(t)?n?i=>dt(t[i],t[e[i]]):e=>t[e]:()=>t;for(const t of s)i[t]=Ue(o(t));return i}function qe(t){return Ze(t,{top:"y",right:"x",bottom:"y",left:"x"})}function Ke(t){return Ze(t,["topLeft","topRight","bottomLeft","bottomRight"])}function Ge(t){const e=qe(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function Je(t,e){t=t||{},e=e||De.font;let i=dt(t.size,e.size);"string"==typeof i&&(i=parseInt(i,10));let n=dt(t.style,e.style);n&&!(""+n).match(Xe)&&(console.warn('Invalid font style specified: "'+n+'"'),n=void 0);const s={family:dt(t.family,e.family),lineHeight:$e(dt(t.lineHeight,e.lineHeight),i),size:i,style:n,weight:dt(t.weight,e.weight),string:""};return s.string=function(t){return!t||rt(t.size)||rt(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}(s),s}function Qe(t,e,i,n){let s,o,r,a=!0;for(s=0,o=t.length;s<o;++s)if(r=t[s],void 0!==r&&(void 0!==e&&"function"==typeof r&&(r=r(e),a=!1),void 0!==i&&at(r)&&(r=r[i%r.length],a=!1),void 0!==r))return n&&!a&&(n.cacheable=!1),r}function ti(t,e){return Object.assign(Object.create(t),e)}function ei(t,e=[""],i,n,s=(()=>t[0])){const o=i||t;void 0===n&&(n=ui("_fallback",t));const r={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:o,_fallback:n,_getTarget:s,override:i=>ei([i,...t],e,o,n)};return new Proxy(r,{deleteProperty:(e,i)=>(delete e[i],delete e._keys,delete t[0][i],!0),get:(i,n)=>ri(i,n,(()=>function(t,e,i,n){let s;for(const o of e)if(s=ui(si(o,t),i),void 0!==s)return oi(t,s)?ci(i,n,t,s):s}(n,e,t,i))),getOwnPropertyDescriptor:(t,e)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],e),getPrototypeOf:()=>Reflect.getPrototypeOf(t[0]),has:(t,e)=>fi(t).includes(e),ownKeys:t=>fi(t),set(t,e,i){const n=t._storage||(t._storage=s());return t[e]=n[e]=i,delete t._keys,!0}})}function ii(t,e,i,n){const s={_cacheable:!1,_proxy:t,_context:e,_subProxy:i,_stack:new Set,_descriptors:ni(t,n),setContext:e=>ii(t,e,i,n),override:s=>ii(t.override(s),e,i,n)};return new Proxy(s,{deleteProperty:(e,i)=>(delete e[i],delete t[i],!0),get:(t,e,i)=>ri(t,e,(()=>function(t,e,i){const{_proxy:n,_context:s,_subProxy:o,_descriptors:r}=t;let a=n[e];return Ct(a)&&r.isScriptable(e)&&(a=function(t,e,i,n){const{_proxy:s,_context:o,_subProxy:r,_stack:a}=i;if(a.has(t))throw new Error("Recursion detected: "+Array.from(a).join("->")+"->"+t);a.add(t);let l=e(o,r||n);return a.delete(t),oi(t,l)&&(l=ci(s._scopes,s,t,l)),l}(e,a,t,i)),at(a)&&a.length&&(a=function(t,e,i,n){const{_proxy:s,_context:o,_subProxy:r,_descriptors:a}=i;if(void 0!==o.index&&n(t))return e[o.index%e.length];if(lt(e[0])){const i=e,n=s._scopes.filter((t=>t!==i));e=[];for(const l of i){const i=ci(n,s,t,l);e.push(ii(i,o,r&&r[t],a))}}return e}(e,a,t,r.isIndexable)),oi(e,a)&&(a=ii(a,s,o&&o[e],r)),a}(t,e,i))),getOwnPropertyDescriptor:(e,i)=>e._descriptors.allKeys?Reflect.has(t,i)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,i),getPrototypeOf:()=>Reflect.getPrototypeOf(t),has:(e,i)=>Reflect.has(t,i),ownKeys:()=>Reflect.ownKeys(t),set:(e,i,n)=>(t[i]=n,delete e[i],!0)})}function ni(t,e={scriptable:!0,indexable:!0}){const{_scriptable:i=e.scriptable,_indexable:n=e.indexable,_allKeys:s=e.allKeys}=t;return{allKeys:s,scriptable:i,indexable:n,isScriptable:Ct(i)?i:()=>i,isIndexable:Ct(n)?n:()=>n}}const si=(t,e)=>t?t+Mt(e):e,oi=(t,e)=>lt(e)&&"adapters"!==t&&(null===Object.getPrototypeOf(e)||e.constructor===Object);function ri(t,e,i){if(Object.prototype.hasOwnProperty.call(t,e))return t[e];const n=i();return t[e]=n,n}function ai(t,e,i){return Ct(t)?t(e,i):t}const li=(t,e)=>!0===t?e:"string"==typeof t?At(e,t):void 0;function hi(t,e,i,n,s){for(const o of e){const e=li(i,o);if(e){t.add(e);const o=ai(e._fallback,i,s);if(void 0!==o&&o!==i&&o!==n)return o}else if(!1===e&&void 0!==n&&i!==n)return null}return!1}function ci(t,e,i,n){const s=e._rootScopes,o=ai(e._fallback,i,n),r=[...t,...s],a=new Set;a.add(n);let l=di(a,r,i,o||i,n);return null!==l&&(void 0===o||o===i||(l=di(a,r,o,l,n),null!==l))&&ei(Array.from(a),[""],s,o,(()=>function(t,e,i){const n=t._getTarget();e in n||(n[e]={});const s=n[e];return at(s)&&lt(i)?i:s||{}}(e,i,n)))}function di(t,e,i,n,s){for(;i;)i=hi(t,e,i,n,s);return i}function ui(t,e){for(const i of e){if(!i)continue;const e=i[t];if(void 0!==e)return e}}function fi(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const i of t)for(const t of Object.keys(i).filter((t=>!t.startsWith("_"))))e.add(t);return Array.from(e)}(t._scopes)),e}function pi(t,e,i,n){const{iScale:s}=t,{key:o="r"}=this._parsing,r=new Array(n);let a,l,h,c;for(a=0,l=n;a<l;++a)h=a+i,c=e[h],r[a]={r:s.parse(At(c,o),h)};return r}const gi=Number.EPSILON||1e-14,mi=(t,e)=>e<t.length&&!t[e].skip&&t[e],xi=t=>"x"===t?"y":"x";function bi(t,e,i,n){const s=t.skip?e:t,o=e,r=i.skip?e:i,a=$t(o,s),l=$t(r,o);let h=a/(a+l),c=l/(a+l);h=isNaN(h)?0:h,c=isNaN(c)?0:c;const d=n*h,u=n*c;return{previous:{x:o.x-d*(r.x-s.x),y:o.y-d*(r.y-s.y)},next:{x:o.x+u*(r.x-s.x),y:o.y+u*(r.y-s.y)}}}function yi(t,e,i){return Math.max(Math.min(t,i),e)}function vi(t,e,i,n,s){let o,r,a,l;if(e.spanGaps&&(t=t.filter((t=>!t.skip))),"monotone"===e.cubicInterpolationMode)!function(t,e="x"){const i=xi(e),n=t.length,s=Array(n).fill(0),o=Array(n);let r,a,l,h=mi(t,0);for(r=0;r<n;++r)if(a=l,l=h,h=mi(t,r+1),l){if(h){const t=h[e]-l[e];s[r]=0!==t?(h[i]-l[i])/t:0}o[r]=a?h?zt(s[r-1])!==zt(s[r])?0:(s[r-1]+s[r])/2:s[r-1]:s[r]}!function(t,e,i){const n=t.length;let s,o,r,a,l,h=mi(t,0);for(let c=0;c<n-1;++c)l=h,h=mi(t,c+1),l&&h&&(Wt(e[c],0,gi)?i[c]=i[c+1]=0:(s=i[c]/e[c],o=i[c+1]/e[c],a=Math.pow(s,2)+Math.pow(o,2),a<=9||(r=3/Math.sqrt(a),i[c]=s*r*e[c],i[c+1]=o*r*e[c])))}(t,s,o),function(t,e,i="x"){const n=xi(i),s=t.length;let o,r,a,l=mi(t,0);for(let h=0;h<s;++h){if(r=a,a=l,l=mi(t,h+1),!a)continue;const s=a[i],c=a[n];r&&(o=(s-r[i])/3,a[`cp1${i}`]=s-o,a[`cp1${n}`]=c-o*e[h]),l&&(o=(l[i]-s)/3,a[`cp2${i}`]=s+o,a[`cp2${n}`]=c+o*e[h])}}(t,o,e)}(t,s);else{let i=n?t[t.length-1]:t[0];for(o=0,r=t.length;o<r;++o)a=t[o],l=bi(i,a,t[Math.min(o+1,r-(n?0:1))%r],e.tension),a.cp1x=l.previous.x,a.cp1y=l.previous.y,a.cp2x=l.next.x,a.cp2y=l.next.y,i=a}e.capBezierPoints&&function(t,e){let i,n,s,o,r,a=Ie(t[0],e);for(i=0,n=t.length;i<n;++i)r=o,o=a,a=i<n-1&&Ie(t[i+1],e),o&&(s=t[i],r&&(s.cp1x=yi(s.cp1x,e.left,e.right),s.cp1y=yi(s.cp1y,e.top,e.bottom)),a&&(s.cp2x=yi(s.cp2x,e.left,e.right),s.cp2y=yi(s.cp2y,e.top,e.bottom)))}(t,i)}function _i(){return"undefined"!=typeof window&&"undefined"!=typeof document}function wi(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function Ai(t,e,i){let n;return"string"==typeof t?(n=parseInt(t,10),-1!==t.indexOf("%")&&(n=n/100*e.parentNode[i])):n=t,n}const Mi=t=>t.ownerDocument.defaultView.getComputedStyle(t,null),ki=["top","right","bottom","left"];function Ci(t,e,i){const n={};i=i?"-"+i:"";for(let s=0;s<4;s++){const o=ki[s];n[o]=parseFloat(t[e+"-"+o+i])||0}return n.width=n.left+n.right,n.height=n.top+n.bottom,n}const Si=(t,e,i)=>(t>0||e>0)&&(!i||!i.shadowRoot);function Di(t,e){if("native"in t)return t;const{canvas:i,currentDevicePixelRatio:n}=e,s=Mi(i),o="border-box"===s.boxSizing,r=Ci(s,"padding"),a=Ci(s,"border","width"),{x:l,y:h,box:c}=function(t,e){const i=t.touches,n=i&&i.length?i[0]:t,{offsetX:s,offsetY:o}=n;let r,a,l=!1;if(Si(s,o,t.target))r=s,a=o;else{const t=e.getBoundingClientRect();r=n.clientX-t.left,a=n.clientY-t.top,l=!0}return{x:r,y:a,box:l}}(t,i),d=r.left+(c&&a.left),u=r.top+(c&&a.top);let{width:f,height:p}=e;return o&&(f-=r.width+a.width,p-=r.height+a.height),{x:Math.round((l-d)/f*i.width/n),y:Math.round((h-u)/p*i.height/n)}}const Ei=t=>Math.round(10*t)/10;function Pi(t,e,i){const n=e||1,s=Math.floor(t.height*n),o=Math.floor(t.width*n);t.height=Math.floor(t.height),t.width=Math.floor(t.width);const r=t.canvas;return r.style&&(i||!r.style.height&&!r.style.width)&&(r.style.height=`${t.height}px`,r.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==n||r.height!==s||r.width!==o)&&(t.currentDevicePixelRatio=n,r.height=s,r.width=o,t.ctx.setTransform(n,0,0,n,0,0),!0)}const Oi=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};window.addEventListener("test",null,e),window.removeEventListener("test",null,e)}catch(t){}return t}();function Ti(t,e){const i=function(t,e){return Mi(t).getPropertyValue(e)}(t,e),n=i&&i.match(/^(\d+)(\.\d+)?px$/);return n?+n[1]:void 0}function Ri(t,e,i,n){return{x:t.x+i*(e.x-t.x),y:t.y+i*(e.y-t.y)}}function Bi(t,e,i,n){return{x:t.x+i*(e.x-t.x),y:"middle"===n?i<.5?t.y:e.y:"after"===n?i<1?t.y:e.y:i>0?e.y:t.y}}function Ii(t,e,i,n){const s={x:t.cp2x,y:t.cp2y},o={x:e.cp1x,y:e.cp1y},r=Ri(t,s,i),a=Ri(s,o,i),l=Ri(o,e,i),h=Ri(r,a,i),c=Ri(a,l,i);return Ri(h,c,i)}function Li(t,e,i){return t?function(t,e){return{x:i=>t+t+e-i,setWidth(t){e=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,e)=>t-e,leftForLtr:(t,e)=>t-e}}(e,i):{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,e)=>t+e,leftForLtr:(t,e)=>t}}function zi(t,e){let i,n;"ltr"!==e&&"rtl"!==e||(i=t.canvas.style,n=[i.getPropertyValue("direction"),i.getPropertyPriority("direction")],i.setProperty("direction",e,"important"),t.prevTextDirection=n)}function Wi(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function Fi(t){return"angle"===t?{between:qt,compare:Ut,normalize:Zt}:{between:Gt,compare:(t,e)=>t-e,normalize:t=>t}}function ji({start:t,end:e,count:i,loop:n,style:s}){return{start:t%i,end:e%i,loop:n&&(e-t+1)%i==0,style:s}}function Vi(t,e,i){if(!i)return[t];const{property:n,start:s,end:o}=i,r=e.length,{compare:a,between:l,normalize:h}=Fi(n),{start:c,end:d,loop:u,style:f}=function(t,e,i){const{property:n,start:s,end:o}=i,{between:r,normalize:a}=Fi(n),l=e.length;let h,c,{start:d,end:u,loop:f}=t;if(f){for(d+=l,u+=l,h=0,c=l;h<c&&r(a(e[d%l][n]),s,o);++h)d--,u--;d%=l,u%=l}return u<d&&(u+=l),{start:d,end:u,loop:f,style:t.style}}(t,e,i),p=[];let g,m,x,b=!1,y=null;for(let t=c,i=c;t<=d;++t)m=e[t%r],m.skip||(g=h(m[n]),g!==x&&(b=l(g,s,o),null===y&&(b||l(s,x,g)&&0!==a(s,x))&&(y=0===a(g,s)?t:i),null!==y&&(!b||0===a(o,g)||l(o,x,g))&&(p.push(ji({start:y,end:t,loop:u,count:r,style:f})),y=null),i=t,x=g));return null!==y&&p.push(ji({start:y,end:d,loop:u,count:r,style:f})),p}function Ni(t,e){const i=[],n=t.segments;for(let s=0;s<n.length;s++){const o=Vi(n[s],t.points,e);o.length&&i.push(...o)}return i}function Hi(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function Yi(t,e){if(!e)return!1;const i=[],n=function(t,e){return pe(e)?(i.includes(e)||i.push(e),i.indexOf(e)):e};return JSON.stringify(t,n)!==JSON.stringify(e,n)}class Xi{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,i,n){const s=e.listeners[n],o=e.duration;s.forEach((n=>n({chart:t,initial:e.initial,numSteps:o,currentStep:Math.min(i-e.start,o)})))}_refresh(){this._request||(this._running=!0,this._request=se.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(t=Date.now()){let e=0;this._charts.forEach(((i,n)=>{if(!i.running||!i.items.length)return;const s=i.items;let o,r=s.length-1,a=!1;for(;r>=0;--r)o=s[r],o._active?(o._total>i.duration&&(i.duration=o._total),o.tick(t),a=!0):(s[r]=s[s.length-1],s.pop());a&&(n.draw(),this._notify(n,i,t,"progress")),s.length||(i.running=!1,this._notify(n,i,t,"complete"),i.initial=!1),e+=s.length})),this._lastDate=t,0===e&&(this._running=!1)}_getAnims(t){const e=this._charts;let i=e.get(t);return i||(i={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,i)),i}listen(t,e,i){this._getAnims(t).listeners[e].push(i)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce(((t,e)=>Math.max(t,e._duration)),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const i=e.items;let n=i.length-1;for(;n>=0;--n)i[n].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}}var $i=new Xi;const Ui="transparent",Zi={boolean:(t,e,i)=>i>.5?e:t,color(t,e,i){const n=ge(t||Ui),s=n.valid&&ge(e||Ui);return s&&s.valid?s.mix(n,i).hexString():e},number:(t,e,i)=>t+(e-t)*i};class qi{constructor(t,e,i,n){const s=e[i];n=Qe([t.to,n,s,t.from]);const o=Qe([t.from,s,n]);this._active=!0,this._fn=t.fn||Zi[t.type||typeof o],this._easing=fe[t.easing]||fe.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=i,this._from=o,this._to=n,this._promises=void 0}active(){return this._active}update(t,e,i){if(this._active){this._notify(!1);const n=this._target[this._prop],s=i-this._start,o=this._duration-s;this._start=i,this._duration=Math.floor(Math.max(o,t.duration)),this._total+=s,this._loop=!!t.loop,this._to=Qe([t.to,e,n,t.from]),this._from=Qe([t.from,n,e])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){const e=t-this._start,i=this._duration,n=this._prop,s=this._from,o=this._loop,r=this._to;let a;if(this._active=s!==r&&(o||e<i),!this._active)return this._target[n]=r,void this._notify(!0);e<0?this._target[n]=s:(a=e/i%2,a=o&&a>1?2-a:a,a=this._easing(Math.min(1,Math.max(0,a))),this._target[n]=this._fn(s,r,a))}wait(){const t=this._promises||(this._promises=[]);return new Promise(((e,i)=>{t.push({res:e,rej:i})}))}_notify(t){const e=t?"res":"rej",i=this._promises||[];for(let t=0;t<i.length;t++)i[t][e]()}}class Ki{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!lt(t))return;const e=Object.keys(De.animation),i=this._properties;Object.getOwnPropertyNames(t).forEach((n=>{const s=t[n];if(!lt(s))return;const o={};for(const t of e)o[t]=s[t];(at(s.properties)&&s.properties||[n]).forEach((t=>{t!==n&&i.has(t)||i.set(t,o)}))}))}_animateOptions(t,e){const i=e.options,n=function(t,e){if(!e)return;let i=t.options;if(i)return i.$shared&&(t.options=i=Object.assign({},i,{$shared:!1,$animations:{}})),i;t.options=e}(t,i);if(!n)return[];const s=this._createAnimations(n,i);return i.$shared&&function(t,e){const i=[],n=Object.keys(e);for(let e=0;e<n.length;e++){const s=t[n[e]];s&&s.active()&&i.push(s.wait())}return Promise.all(i)}(t.options.$animations,i).then((()=>{t.options=i}),(()=>{})),s}_createAnimations(t,e){const i=this._properties,n=[],s=t.$animations||(t.$animations={}),o=Object.keys(e),r=Date.now();let a;for(a=o.length-1;a>=0;--a){const l=o[a];if("$"===l.charAt(0))continue;if("options"===l){n.push(...this._animateOptions(t,e));continue}const h=e[l];let c=s[l];const d=i.get(l);if(c){if(d&&c.active()){c.update(d,h,r);continue}c.cancel()}d&&d.duration?(s[l]=c=new qi(d,t,l,h),n.push(c)):t[l]=h}return n}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const i=this._createAnimations(t,e);return i.length?($i.add(this._chart,i),!0):void 0}}function Gi(t,e){const i=t&&t.options||{},n=i.reverse,s=void 0===i.min?e:0,o=void 0===i.max?e:0;return{start:n?o:s,end:n?s:o}}function Ji(t,e){const i=[],n=t._getSortedDatasetMetas(e);let s,o;for(s=0,o=n.length;s<o;++s)i.push(n[s].index);return i}function Qi(t,e,i,n={}){const s=t.keys,o="single"===n.mode;let r,a,l,h;if(null!==e){for(r=0,a=s.length;r<a;++r){if(l=+s[r],l===i){if(n.all)continue;break}h=t.values[l],ht(h)&&(o||0===e||zt(e)===zt(h))&&(e+=h)}return e}}function tn(t,e){const i=t&&t.options.stacked;return i||void 0===i&&void 0!==e.stack}function en(t,e,i){const n=t[e]||(t[e]={});return n[i]||(n[i]={})}function nn(t,e,i,n){for(const s of e.getMatchingVisibleMetas(n).reverse()){const e=t[s.index];if(i&&e>0||!i&&e<0)return s.index}return null}function sn(t,e){const{chart:i,_cachedMeta:n}=t,s=i._stacks||(i._stacks={}),{iScale:o,vScale:r,index:a}=n,l=o.axis,h=r.axis,c=function(t,e,i){return`${t.id}.${e.id}.${i.stack||i.type}`}(o,r,n),d=e.length;let u;for(let t=0;t<d;++t){const i=e[t],{[l]:o,[h]:d}=i;u=(i._stacks||(i._stacks={}))[h]=en(s,c,o),u[a]=d,u._top=nn(u,r,!0,n.type),u._bottom=nn(u,r,!1,n.type),(u._visualValues||(u._visualValues={}))[a]=d}}function on(t,e){const i=t.scales;return Object.keys(i).filter((t=>i[t].axis===e)).shift()}function rn(t,e){const i=t.controller.index,n=t.vScale&&t.vScale.axis;if(n){e=e||t._parsed;for(const t of e){const e=t._stacks;if(!e||void 0===e[n]||void 0===e[n][i])return;delete e[n][i],void 0!==e[n]._visualValues&&void 0!==e[n]._visualValues[i]&&delete e[n]._visualValues[i]}}}const an=t=>"reset"===t||"none"===t,ln=(t,e)=>e?t:Object.assign({},t);class hn{static defaults={};static datasetElementType=null;static dataElementType=null;constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.supportsDecimation=!1,this.$context=void 0,this._syncList=[],this.datasetElementType=new.target.datasetElementType,this.dataElementType=new.target.dataElementType,this.initialize()}initialize(){const t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=tn(t.vScale,t),this.addElements(),this.options.fill&&!this.chart.isPluginEnabled("filler")&&console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options")}updateIndex(t){this.index!==t&&rn(this._cachedMeta),this.index=t}linkScales(){const t=this.chart,e=this._cachedMeta,i=this.getDataset(),n=(t,e,i,n)=>"x"===t?e:"r"===t?n:i,s=e.xAxisID=dt(i.xAxisID,on(t,"x")),o=e.yAxisID=dt(i.yAxisID,on(t,"y")),r=e.rAxisID=dt(i.rAxisID,on(t,"r")),a=e.indexAxis,l=e.iAxisID=n(a,s,o,r),h=e.vAxisID=n(a,o,s,r);e.xScale=this.getScaleForId(s),e.yScale=this.getScaleForId(o),e.rScale=this.getScaleForId(r),e.iScale=this.getScaleForId(l),e.vScale=this.getScaleForId(h)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&ie(this._data,this),t._stacked&&rn(t)}_dataCheck(){const t=this.getDataset(),e=t.data||(t.data=[]),i=this._data;if(lt(e))this._data=function(t){const e=Object.keys(t),i=new Array(e.length);let n,s,o;for(n=0,s=e.length;n<s;++n)o=e[n],i[n]={x:o,y:t[o]};return i}(e);else if(i!==e){if(i){ie(i,this);const t=this._cachedMeta;rn(t),t._parsed=[]}e&&Object.isExtensible(e)&&(this,(n=e)._chartjs?n._chartjs.listeners.push(this):(Object.defineProperty(n,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[this]}}),ee.forEach((t=>{const e="_onData"+Mt(t),i=n[t];Object.defineProperty(n,t,{configurable:!0,enumerable:!1,value(...t){const s=i.apply(this,t);return n._chartjs.listeners.forEach((i=>{"function"==typeof i[e]&&i[e](...t)})),s}})})))),this._syncList=[],this._data=e}var n}addElements(){const t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){const e=this._cachedMeta,i=this.getDataset();let n=!1;this._dataCheck();const s=e._stacked;e._stacked=tn(e.vScale,e),e.stack!==i.stack&&(n=!0,rn(e),e.stack=i.stack),this._resyncElements(t),(n||s!==e._stacked)&&sn(this,e._parsed)}configure(){const t=this.chart.config,e=t.datasetScopeKeys(this._type),i=t.getOptionScopes(this.getDataset(),e,!0);this.options=t.createResolver(i,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,e){const{_cachedMeta:i,_data:n}=this,{iScale:s,_stacked:o}=i,r=s.axis;let a,l,h,c=0===t&&e===n.length||i._sorted,d=t>0&&i._parsed[t-1];if(!1===this._parsing)i._parsed=n,i._sorted=!0,h=n;else{h=at(n[t])?this.parseArrayData(i,n,t,e):lt(n[t])?this.parseObjectData(i,n,t,e):this.parsePrimitiveData(i,n,t,e);const s=()=>null===l[r]||d&&l[r]<d[r];for(a=0;a<e;++a)i._parsed[a+t]=l=h[a],c&&(s()&&(c=!1),d=l);i._sorted=c}o&&sn(this,h)}parsePrimitiveData(t,e,i,n){const{iScale:s,vScale:o}=t,r=s.axis,a=o.axis,l=s.getLabels(),h=s===o,c=new Array(n);let d,u,f;for(d=0,u=n;d<u;++d)f=d+i,c[d]={[r]:h||s.parse(l[f],f),[a]:o.parse(e[f],f)};return c}parseArrayData(t,e,i,n){const{xScale:s,yScale:o}=t,r=new Array(n);let a,l,h,c;for(a=0,l=n;a<l;++a)h=a+i,c=e[h],r[a]={x:s.parse(c[0],h),y:o.parse(c[1],h)};return r}parseObjectData(t,e,i,n){const{xScale:s,yScale:o}=t,{xAxisKey:r="x",yAxisKey:a="y"}=this._parsing,l=new Array(n);let h,c,d,u;for(h=0,c=n;h<c;++h)d=h+i,u=e[d],l[h]={x:s.parse(At(u,r),d),y:o.parse(At(u,a),d)};return l}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,i){const n=this.chart,s=this._cachedMeta,o=e[t.axis];return Qi({keys:Ji(n,!0),values:e._stacks[t.axis]._visualValues},o,s.index,{mode:i})}updateRangeFromParsed(t,e,i,n){const s=i[e.axis];let o=null===s?NaN:s;const r=n&&i._stacks[e.axis];n&&r&&(n.values=r,o=Qi(n,s,this._cachedMeta.index)),t.min=Math.min(t.min,o),t.max=Math.max(t.max,o)}getMinMax(t,e){const i=this._cachedMeta,n=i._parsed,s=i._sorted&&t===i.iScale,o=n.length,r=this._getOtherScale(t),a=((t,e,i)=>t&&!e.hidden&&e._stacked&&{keys:Ji(i,!0),values:null})(e,i,this.chart),l={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:h,max:c}=function(t){const{min:e,max:i,minDefined:n,maxDefined:s}=t.getUserBounds();return{min:n?e:Number.NEGATIVE_INFINITY,max:s?i:Number.POSITIVE_INFINITY}}(r);let d,u;function f(){u=n[d];const e=u[r.axis];return!ht(u[t.axis])||h>e||c<e}for(d=0;d<o&&(f()||(this.updateRangeFromParsed(l,t,u,a),!s));++d);if(s)for(d=o-1;d>=0;--d)if(!f()){this.updateRangeFromParsed(l,t,u,a);break}return l}getAllParsedValues(t){const e=this._cachedMeta._parsed,i=[];let n,s,o;for(n=0,s=e.length;n<s;++n)o=e[n][t.axis],ht(o)&&i.push(o);return i}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,i=e.iScale,n=e.vScale,s=this.getParsed(t);return{label:i?""+i.getLabelForValue(s[i.axis]):"",value:n?""+n.getLabelForValue(s[n.axis]):""}}_update(t){const e=this._cachedMeta;this.update(t||"default"),e._clip=function(t){let e,i,n,s;return lt(t)?(e=t.top,i=t.right,n=t.bottom,s=t.left):e=i=n=s=t,{top:e,right:i,bottom:n,left:s,disabled:!1===t}}(dt(this.options.clip,function(t,e,i){if(!1===i)return!1;const n=Gi(t,i),s=Gi(e,i);return{top:s.end,right:n.end,bottom:s.start,left:n.start}}(e.xScale,e.yScale,this.getMaxOverflow())))}update(t){}draw(){const t=this._ctx,e=this.chart,i=this._cachedMeta,n=i.data||[],s=e.chartArea,o=[],r=this._drawStart||0,a=this._drawCount||n.length-r,l=this.options.drawActiveElementsOnTop;let h;for(i.dataset&&i.dataset.draw(t,s,r,a),h=r;h<r+a;++h){const e=n[h];e.hidden||(e.active&&l?o.push(e):e.draw(t,s))}for(h=0;h<o.length;++h)o[h].draw(t,s)}getStyle(t,e){const i=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(i):this.resolveDataElementOptions(t||0,i)}getContext(t,e,i){const n=this.getDataset();let s;if(t>=0&&t<this._cachedMeta.data.length){const e=this._cachedMeta.data[t];s=e.$context||(e.$context=function(t,e,i){return ti(t,{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:i,index:e,mode:"default",type:"data"})}(this.getContext(),t,e)),s.parsed=this.getParsed(t),s.raw=n.data[t],s.index=s.dataIndex=t}else s=this.$context||(this.$context=function(t,e){return ti(t,{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),s.dataset=n,s.index=s.datasetIndex=this.index;return s.active=!!e,s.mode=i,s}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",i){const n="active"===e,s=this._cachedDataOpts,o=t+"-"+e,r=s[o],a=this.enableOptionSharing&&kt(i);if(r)return ln(r,a);const l=this.chart.config,h=l.datasetElementScopeKeys(this._type,t),c=n?[`${t}Hover`,"hover",t,""]:[t,""],d=l.getOptionScopes(this.getDataset(),h),u=Object.keys(De.elements[t]),f=l.resolveNamedOptions(d,u,(()=>this.getContext(i,n,e)),c);return f.$shared&&(f.$shared=a,s[o]=Object.freeze(ln(f,a))),f}_resolveAnimations(t,e,i){const n=this.chart,s=this._cachedDataOpts,o=`animation-${e}`,r=s[o];if(r)return r;let a;if(!1!==n.options.animation){const n=this.chart.config,s=n.datasetAnimationScopeKeys(this._type,e),o=n.getOptionScopes(this.getDataset(),s);a=n.createResolver(o,this.getContext(t,i,e))}const l=new Ki(n,a&&a.animations);return a&&a._cacheable&&(s[o]=Object.freeze(l)),l}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||an(t)||this.chart._animationsDisabled}_getSharedOptions(t,e){const i=this.resolveDataElementOptions(t,e),n=this._sharedOptions,s=this.getSharedOptions(i),o=this.includeOptions(e,s)||s!==n;return this.updateSharedOptions(s,e,i),{sharedOptions:s,includeOptions:o}}updateElement(t,e,i,n){an(n)?Object.assign(t,i):this._resolveAnimations(e,n).update(t,i)}updateSharedOptions(t,e,i){t&&!an(e)&&this._resolveAnimations(void 0,e).update(t,i)}_setStyle(t,e,i,n){t.active=n;const s=this.getStyle(e,n);this._resolveAnimations(e,i,n).update(t,{options:!n&&this.getSharedOptions(s)||s})}removeHoverStyle(t,e,i){this._setStyle(t,i,"active",!1)}setHoverStyle(t,e,i){this._setStyle(t,i,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this._data,i=this._cachedMeta.data;for(const[t,e,i]of this._syncList)this[t](e,i);this._syncList=[];const n=i.length,s=e.length,o=Math.min(s,n);o&&this.parse(0,o),s>n?this._insertElements(n,s-n,t):s<n&&this._removeElements(s,n-s)}_insertElements(t,e,i=!0){const n=this._cachedMeta,s=n.data,o=t+e;let r;const a=t=>{for(t.length+=e,r=t.length-1;r>=o;r--)t[r]=t[r-e]};for(a(s),r=t;r<o;++r)s[r]=new this.dataElementType;this._parsing&&a(n._parsed),this.parse(t,e),i&&this.updateElements(s,t,e,"reset")}updateElements(t,e,i,n){}_removeElements(t,e){const i=this._cachedMeta;if(this._parsing){const n=i._parsed.splice(t,e);i._stacked&&rn(i,n)}i.data.splice(t,e)}_sync(t){if(this._parsing)this._syncList.push(t);else{const[e,i,n]=t;this[e](i,n)}this.chart._dataChanges.push([this.index,...t])}_onDataPush(){const t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){e&&this._sync(["_removeElements",t,e]);const i=arguments.length-2;i&&this._sync(["_insertElements",t,i])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function cn(t){const e=t.iScale,i=function(t,e){if(!t._cache.$bar){const i=t.getMatchingVisibleMetas(e);let n=[];for(let e=0,s=i.length;e<s;e++)n=n.concat(i[e].controller.getAllParsedValues(t));t._cache.$bar=ne(n.sort(((t,e)=>t-e)))}return t._cache.$bar}(e,t.type);let n,s,o,r,a=e._length;const l=()=>{32767!==o&&-32768!==o&&(kt(r)&&(a=Math.min(a,Math.abs(o-r)||a)),r=o)};for(n=0,s=i.length;n<s;++n)o=e.getPixelForValue(i[n]),l();for(r=void 0,n=0,s=e.ticks.length;n<s;++n)o=e.getPixelForTick(n),l();return a}function dn(t,e,i,n){return at(t)?function(t,e,i,n){const s=i.parse(t[0],n),o=i.parse(t[1],n),r=Math.min(s,o),a=Math.max(s,o);let l=r,h=a;Math.abs(r)>Math.abs(a)&&(l=a,h=r),e[i.axis]=h,e._custom={barStart:l,barEnd:h,start:s,end:o,min:r,max:a}}(t,e,i,n):e[i.axis]=i.parse(t,n),e}function un(t,e,i,n){const s=t.iScale,o=t.vScale,r=s.getLabels(),a=s===o,l=[];let h,c,d,u;for(h=i,c=i+n;h<c;++h)u=e[h],d={},d[s.axis]=a||s.parse(r[h],h),l.push(dn(u,d,o,h));return l}function fn(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function pn(t,e,i,n){let s=e.borderSkipped;const o={};if(!s)return void(t.borderSkipped=o);if(!0===s)return void(t.borderSkipped={top:!0,right:!0,bottom:!0,left:!0});const{start:r,end:a,reverse:l,top:h,bottom:c}=function(t){let e,i,n,s,o;return t.horizontal?(e=t.base>t.x,i="left",n="right"):(e=t.base<t.y,i="bottom",n="top"),e?(s="end",o="start"):(s="start",o="end"),{start:i,end:n,reverse:e,top:s,bottom:o}}(t);"middle"===s&&i&&(t.enableBorderRadius=!0,(i._top||0)===n?s=h:(i._bottom||0)===n?s=c:(o[gn(c,r,a,l)]=!0,s=h)),o[gn(s,r,a,l)]=!0,t.borderSkipped=o}function gn(t,e,i,n){var s,o,r;return n?(r=i,t=mn(t=(s=t)===(o=e)?r:s===r?o:s,i,e)):t=mn(t,e,i),t}function mn(t,e,i){return"start"===t?e:"end"===t?i:t}function xn(t,{inflateAmount:e},i){t.inflateAmount="auto"===e?1===i?.33:0:e}class bn extends hn{static id="doughnut";static defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"};static descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t&&!t.startsWith("borderDash")&&!t.startsWith("hoverBorderDash")};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i,color:n}}=t.legend.options;return e.labels.map(((e,s)=>{const o=t.getDatasetMeta(0).controller.getStyle(s);return{text:e,fillStyle:o.backgroundColor,strokeStyle:o.borderColor,fontColor:n,lineWidth:o.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(s),index:s}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}}}};constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){const i=this.getDataset().data,n=this._cachedMeta;if(!1===this._parsing)n._parsed=i;else{let s,o,r=t=>+i[t];if(lt(i[t])){const{key:t="value"}=this._parsing;r=e=>+At(i[e],t)}for(s=t,o=t+e;s<o;++s)n._parsed[s]=r(s)}}_getRotation(){return Nt(this.options.rotation-90)}_getCircumference(){return Nt(this.options.circumference)}_getRotationExtents(){let t=Et,e=-Et;for(let i=0;i<this.chart.data.datasets.length;++i)if(this.chart.isDatasetVisible(i)&&this.chart.getDatasetMeta(i).type===this._type){const n=this.chart.getDatasetMeta(i).controller,s=n._getRotation(),o=n._getCircumference();t=Math.min(t,s),e=Math.max(e,s+o)}return{rotation:t,circumference:e-t}}update(t){const e=this.chart,{chartArea:i}=e,n=this._cachedMeta,s=n.data,o=this.getMaxBorderWidth()+this.getMaxOffset(s)+this.options.spacing,r=Math.max((Math.min(i.width,i.height)-o)/2,0),a=Math.min((h=r,"string"==typeof(l=this.options.cutout)&&l.endsWith("%")?parseFloat(l)/100:+l/h),1);var l,h;const c=this._getRingWeight(this.index),{circumference:d,rotation:u}=this._getRotationExtents(),{ratioX:f,ratioY:p,offsetX:g,offsetY:m}=function(t,e,i){let n=1,s=1,o=0,r=0;if(e<Et){const a=t,l=a+e,h=Math.cos(a),c=Math.sin(a),d=Math.cos(l),u=Math.sin(l),f=(t,e,n)=>qt(t,a,l,!0)?1:Math.max(e,e*i,n,n*i),p=(t,e,n)=>qt(t,a,l,!0)?-1:Math.min(e,e*i,n,n*i),g=f(0,h,d),m=f(Rt,c,u),x=p(Dt,h,d),b=p(Dt+Rt,c,u);n=(g-x)/2,s=(m-b)/2,o=-(g+x)/2,r=-(m+b)/2}return{ratioX:n,ratioY:s,offsetX:o,offsetY:r}}(u,d,a),x=(i.width-o)/f,b=(i.height-o)/p,y=Math.max(Math.min(x,b)/2,0),v=ut(this.options.radius,y),_=(v-Math.max(v*a,0))/this._getVisibleDatasetWeightTotal();this.offsetX=g*v,this.offsetY=m*v,n.total=this.calculateTotal(),this.outerRadius=v-_*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-_*c,0),this.updateElements(s,0,s.length,t)}_circumference(t,e){const i=this.options,n=this._cachedMeta,s=this._getCircumference();return e&&i.animation.animateRotate||!this.chart.getDataVisibility(t)||null===n._parsed[t]||n.data[t].hidden?0:this.calculateCircumference(n._parsed[t]*s/Et)}updateElements(t,e,i,n){const s="reset"===n,o=this.chart,r=o.chartArea,a=o.options.animation,l=(r.left+r.right)/2,h=(r.top+r.bottom)/2,c=s&&a.animateScale,d=c?0:this.innerRadius,u=c?0:this.outerRadius,{sharedOptions:f,includeOptions:p}=this._getSharedOptions(e,n);let g,m=this._getRotation();for(g=0;g<e;++g)m+=this._circumference(g,s);for(g=e;g<e+i;++g){const e=this._circumference(g,s),i=t[g],o={x:l+this.offsetX,y:h+this.offsetY,startAngle:m,endAngle:m+e,circumference:e,outerRadius:u,innerRadius:d};p&&(o.options=f||this.resolveDataElementOptions(g,i.active?"active":n)),m+=e,this.updateElement(i,g,o,n)}}calculateTotal(){const t=this._cachedMeta,e=t.data;let i,n=0;for(i=0;i<e.length;i++){const s=t._parsed[i];null===s||isNaN(s)||!this.chart.getDataVisibility(i)||e[i].hidden||(n+=Math.abs(s))}return n}calculateCircumference(t){const e=this._cachedMeta.total;return e>0&&!isNaN(t)?Et*(Math.abs(t)/e):0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,n=i.data.labels||[],s=ve(e._parsed[t],i.options.locale);return{label:n[t]||"",value:s}}getMaxBorderWidth(t){let e=0;const i=this.chart;let n,s,o,r,a;if(!t)for(n=0,s=i.data.datasets.length;n<s;++n)if(i.isDatasetVisible(n)){o=i.getDatasetMeta(n),t=o.data,r=o.controller;break}if(!t)return 0;for(n=0,s=t.length;n<s;++n)a=r.resolveDataElementOptions(n),"inner"!==a.borderAlign&&(e=Math.max(e,a.borderWidth||0,a.hoverBorderWidth||0));return e}getMaxOffset(t){let e=0;for(let i=0,n=t.length;i<n;++i){const t=this.resolveDataElementOptions(i);e=Math.max(e,t.offset||0,t.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let i=0;i<t;++i)this.chart.isDatasetVisible(i)&&(e+=this._getRingWeight(i));return e}_getRingWeight(t){return Math.max(dt(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}class yn extends hn{static id="polarArea";static defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i,color:n}}=t.legend.options;return e.labels.map(((e,s)=>{const o=t.getDatasetMeta(0).controller.getStyle(s);return{text:e,fillStyle:o.backgroundColor,strokeStyle:o.borderColor,fontColor:n,lineWidth:o.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(s),index:s}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,n=i.data.labels||[],s=ve(e._parsed[t].r,i.options.locale);return{label:n[t]||"",value:s}}parseObjectData(t,e,i,n){return pi.bind(this)(t,e,i,n)}update(t){const e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}getMinMax(){const t=this._cachedMeta,e={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY};return t.data.forEach(((t,i)=>{const n=this.getParsed(i).r;!isNaN(n)&&this.chart.getDataVisibility(i)&&(n<e.min&&(e.min=n),n>e.max&&(e.max=n))})),e}_updateRadius(){const t=this.chart,e=t.chartArea,i=t.options,n=Math.min(e.right-e.left,e.bottom-e.top),s=Math.max(n/2,0),o=(s-Math.max(i.cutoutPercentage?s/100*i.cutoutPercentage:1,0))/t.getVisibleDatasetCount();this.outerRadius=s-o*this.index,this.innerRadius=this.outerRadius-o}updateElements(t,e,i,n){const s="reset"===n,o=this.chart,r=o.options.animation,a=this._cachedMeta.rScale,l=a.xCenter,h=a.yCenter,c=a.getIndexAngle(0)-.5*Dt;let d,u=c;const f=360/this.countVisibleElements();for(d=0;d<e;++d)u+=this._computeAngle(d,n,f);for(d=e;d<e+i;d++){const e=t[d];let i=u,p=u+this._computeAngle(d,n,f),g=o.getDataVisibility(d)?a.getDistanceFromCenterForValue(this.getParsed(d).r):0;u=p,s&&(r.animateScale&&(g=0),r.animateRotate&&(i=p=c));const m={x:l,y:h,innerRadius:0,outerRadius:g,startAngle:i,endAngle:p,options:this.resolveDataElementOptions(d,e.active?"active":n)};this.updateElement(e,d,m,n)}}countVisibleElements(){const t=this._cachedMeta;let e=0;return t.data.forEach(((t,i)=>{!isNaN(this.getParsed(i).r)&&this.chart.getDataVisibility(i)&&e++})),e}_computeAngle(t,e,i){return this.chart.getDataVisibility(t)?Nt(this.resolveDataElementOptions(t,e).angle||i):0}}var vn=Object.freeze({__proto__:null,BarController:class extends hn{static id="bar";static defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}};static overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};parsePrimitiveData(t,e,i,n){return un(t,e,i,n)}parseArrayData(t,e,i,n){return un(t,e,i,n)}parseObjectData(t,e,i,n){const{iScale:s,vScale:o}=t,{xAxisKey:r="x",yAxisKey:a="y"}=this._parsing,l="x"===s.axis?r:a,h="x"===o.axis?r:a,c=[];let d,u,f,p;for(d=i,u=i+n;d<u;++d)p=e[d],f={},f[s.axis]=s.parse(At(p,l),d),c.push(dn(At(p,h),f,o,d));return c}updateRangeFromParsed(t,e,i,n){super.updateRangeFromParsed(t,e,i,n);const s=i._custom;s&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,s.min),t.max=Math.max(t.max,s.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:i,vScale:n}=e,s=this.getParsed(t),o=s._custom,r=fn(o)?"["+o.start+", "+o.end+"]":""+n.getLabelForValue(s[n.axis]);return{label:""+i.getLabelForValue(s[i.axis]),value:r}}initialize(){this.enableOptionSharing=!0,super.initialize(),this._cachedMeta.stack=this.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,i,n){const s="reset"===n,{index:o,_cachedMeta:{vScale:r}}=this,a=r.getBasePixel(),l=r.isHorizontal(),h=this._getRuler(),{sharedOptions:c,includeOptions:d}=this._getSharedOptions(e,n);for(let u=e;u<e+i;u++){const e=this.getParsed(u),i=s||rt(e[r.axis])?{base:a,head:a}:this._calculateBarValuePixels(u),f=this._calculateBarIndexPixels(u,h),p=(e._stacks||{})[r.axis],g={horizontal:l,base:i.base,enableBorderRadius:!p||fn(e._custom)||o===p._top||o===p._bottom,x:l?i.head:f.center,y:l?f.center:i.head,height:l?f.size:Math.abs(i.size),width:l?Math.abs(i.size):f.size};d&&(g.options=c||this.resolveDataElementOptions(u,t[u].active?"active":n));const m=g.options||t[u].options;pn(g,m,p,o),xn(g,m,h.ratio),this.updateElement(t[u],u,g,n)}}_getStacks(t,e){const{iScale:i}=this._cachedMeta,n=i.getMatchingVisibleMetas(this._type).filter((t=>t.controller.options.grouped)),s=i.options.stacked,o=[],r=t=>{const i=t.controller.getParsed(e),n=i&&i[t.vScale.axis];if(rt(n)||isNaN(n))return!0};for(const i of n)if((void 0===e||!r(i))&&((!1===s||-1===o.indexOf(i.stack)||void 0===s&&void 0===i.stack)&&o.push(i.stack),i.index===t))break;return o.length||o.push(void 0),o}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,i){const n=this._getStacks(t,i),s=void 0!==e?n.indexOf(e):-1;return-1===s?n.length-1:s}_getRuler(){const t=this.options,e=this._cachedMeta,i=e.iScale,n=[];let s,o;for(s=0,o=e.data.length;s<o;++s)n.push(i.getPixelForValue(this.getParsed(s)[i.axis],s));const r=t.barThickness;return{min:r||cn(e),pixels:n,start:i._startPixel,end:i._endPixel,stackCount:this._getStackCount(),scale:i,grouped:t.grouped,ratio:r?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){const{_cachedMeta:{vScale:e,_stacked:i,index:n},options:{base:s,minBarLength:o}}=this,r=s||0,a=this.getParsed(t),l=a._custom,h=fn(l);let c,d,u=a[e.axis],f=0,p=i?this.applyStack(e,a,i):u;p!==u&&(f=p-u,p=u),h&&(u=l.barStart,p=l.barEnd-l.barStart,0!==u&&zt(u)!==zt(l.barEnd)&&(f=0),f+=u);const g=rt(s)||h?f:s;let m=e.getPixelForValue(g);if(c=this.chart.getDataVisibility(t)?e.getPixelForValue(f+p):m,d=c-m,Math.abs(d)<o){d=function(t,e,i){return 0!==t?zt(t):(e.isHorizontal()?1:-1)*(e.min>=i?1:-1)}(d,e,r)*o,u===r&&(m-=d/2);const t=e.getPixelForDecimal(0),s=e.getPixelForDecimal(1),l=Math.min(t,s),f=Math.max(t,s);m=Math.max(Math.min(m,f),l),c=m+d,i&&!h&&(a._stacks[e.axis]._visualValues[n]=e.getValueForPixel(c)-e.getValueForPixel(m))}if(m===e.getPixelForValue(r)){const t=zt(d)*e.getLineWidthForValue(r)/2;m+=t,d-=t}return{size:d,base:m,head:c,center:c+d/2}}_calculateBarIndexPixels(t,e){const i=e.scale,n=this.options,s=n.skipNull,o=dt(n.maxBarThickness,1/0);let r,a;if(e.grouped){const i=s?this._getStackCount(t):e.stackCount,l="flex"===n.barThickness?function(t,e,i,n){const s=e.pixels,o=s[t];let r=t>0?s[t-1]:null,a=t<s.length-1?s[t+1]:null;const l=i.categoryPercentage;null===r&&(r=o-(null===a?e.end-e.start:a-o)),null===a&&(a=o+o-r);const h=o-(o-Math.min(r,a))/2*l;return{chunk:Math.abs(a-r)/2*l/n,ratio:i.barPercentage,start:h}}(t,e,n,i):function(t,e,i,n){const s=i.barThickness;let o,r;return rt(s)?(o=e.min*i.categoryPercentage,r=i.barPercentage):(o=s*n,r=1),{chunk:o/n,ratio:r,start:e.pixels[t]-o/2}}(t,e,n,i),h=this._getStackIndex(this.index,this._cachedMeta.stack,s?t:void 0);r=l.start+l.chunk*h+l.chunk/2,a=Math.min(o,l.chunk*l.ratio)}else r=i.getPixelForValue(this.getParsed(t)[i.axis],t),a=Math.min(o,e.min*e.ratio);return{base:r-a/2,head:r+a/2,center:r,size:a}}draw(){const t=this._cachedMeta,e=t.vScale,i=t.data,n=i.length;let s=0;for(;s<n;++s)null!==this.getParsed(s)[e.axis]&&i[s].draw(this._ctx)}},BubbleController:class extends hn{static id="bubble";static defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}};static overrides={scales:{x:{type:"linear"},y:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,e,i,n){const s=super.parsePrimitiveData(t,e,i,n);for(let t=0;t<s.length;t++)s[t]._custom=this.resolveDataElementOptions(t+i).radius;return s}parseArrayData(t,e,i,n){const s=super.parseArrayData(t,e,i,n);for(let t=0;t<s.length;t++){const n=e[i+t];s[t]._custom=dt(n[2],this.resolveDataElementOptions(t+i).radius)}return s}parseObjectData(t,e,i,n){const s=super.parseObjectData(t,e,i,n);for(let t=0;t<s.length;t++){const n=e[i+t];s[t]._custom=dt(n&&n.r&&+n.r,this.resolveDataElementOptions(t+i).radius)}return s}getMaxOverflow(){const t=this._cachedMeta.data;let e=0;for(let i=t.length-1;i>=0;--i)e=Math.max(e,t[i].size(this.resolveDataElementOptions(i))/2);return e>0&&e}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart.data.labels||[],{xScale:n,yScale:s}=e,o=this.getParsed(t),r=n.getLabelForValue(o.x),a=s.getLabelForValue(o.y),l=o._custom;return{label:i[t]||"",value:"("+r+", "+a+(l?", "+l:"")+")"}}update(t){const e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,i,n){const s="reset"===n,{iScale:o,vScale:r}=this._cachedMeta,{sharedOptions:a,includeOptions:l}=this._getSharedOptions(e,n),h=o.axis,c=r.axis;for(let d=e;d<e+i;d++){const e=t[d],i=!s&&this.getParsed(d),u={},f=u[h]=s?o.getPixelForDecimal(.5):o.getPixelForValue(i[h]),p=u[c]=s?r.getBasePixel():r.getPixelForValue(i[c]);u.skip=isNaN(f)||isNaN(p),l&&(u.options=a||this.resolveDataElementOptions(d,e.active?"active":n),s&&(u.options.radius=0)),this.updateElement(e,d,u,n)}}resolveDataElementOptions(t,e){const i=this.getParsed(t);let n=super.resolveDataElementOptions(t,e);n.$shared&&(n=Object.assign({},n,{$shared:!1}));const s=n.radius;return"active"!==e&&(n.radius=0),n.radius+=dt(i&&i._custom,s),n}},DoughnutController:bn,LineController:class extends hn{static id="line";static defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1};static overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,this.supportsDecimation=!0,super.initialize()}update(t){const e=this._cachedMeta,{dataset:i,data:n=[],_dataset:s}=e,o=this.chart._animationsDisabled;let{start:r,count:a}=le(e,n,o);this._drawStart=r,this._drawCount=a,he(e)&&(r=0,a=n.length),i._chart=this.chart,i._datasetIndex=this.index,i._decimated=!!s._decimated,i.points=n;const l=this.resolveDatasetElementOptions(t);this.options.showLine||(l.borderWidth=0),l.segment=this.options.segment,this.updateElement(i,void 0,{animated:!o,options:l},t),this.updateElements(n,r,a,t)}updateElements(t,e,i,n){const s="reset"===n,{iScale:o,vScale:r,_stacked:a,_dataset:l}=this._cachedMeta,{sharedOptions:h,includeOptions:c}=this._getSharedOptions(e,n),d=o.axis,u=r.axis,{spanGaps:f,segment:p}=this.options,g=jt(f)?f:Number.POSITIVE_INFINITY,m=this.chart._animationsDisabled||s||"none"===n,x=e+i,b=t.length;let y=e>0&&this.getParsed(e-1);for(let i=0;i<b;++i){const f=t[i],b=m?f:{};if(i<e||i>=x){b.skip=!0;continue}const v=this.getParsed(i),_=rt(v[u]),w=b[d]=o.getPixelForValue(v[d],i),A=b[u]=s||_?r.getBasePixel():r.getPixelForValue(a?this.applyStack(r,v,a):v[u],i);b.skip=isNaN(w)||isNaN(A)||_,b.stop=i>0&&Math.abs(v[d]-y[d])>g,p&&(b.parsed=v,b.raw=l.data[i]),c&&(b.options=h||this.resolveDataElementOptions(i,f.active?"active":n)),m||this.updateElement(f,i,b,n),y=v}}getMaxOverflow(){const t=this._cachedMeta,e=t.dataset,i=e.options&&e.options.borderWidth||0,n=t.data||[];if(!n.length)return i;const s=n[0].size(this.resolveDataElementOptions(0)),o=n[n.length-1].size(this.resolveDataElementOptions(n.length-1));return Math.max(i,s,o)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}},PieController:class extends bn{static id="pie";static defaults={cutout:0,rotation:0,circumference:360,radius:"100%"}},PolarAreaController:yn,RadarController:class extends hn{static id="radar";static defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}};static overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};getLabelAndValue(t){const e=this._cachedMeta.vScale,i=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(i[e.axis])}}parseObjectData(t,e,i,n){return pi.bind(this)(t,e,i,n)}update(t){const e=this._cachedMeta,i=e.dataset,n=e.data||[],s=e.iScale.getLabels();if(i.points=n,"resize"!==t){const e=this.resolveDatasetElementOptions(t);this.options.showLine||(e.borderWidth=0);const o={_loop:!0,_fullLoop:s.length===n.length,options:e};this.updateElement(i,void 0,o,t)}this.updateElements(n,0,n.length,t)}updateElements(t,e,i,n){const s=this._cachedMeta.rScale,o="reset"===n;for(let r=e;r<e+i;r++){const e=t[r],i=this.resolveDataElementOptions(r,e.active?"active":n),a=s.getPointPositionForValue(r,this.getParsed(r).r),l=o?s.xCenter:a.x,h=o?s.yCenter:a.y,c={x:l,y:h,angle:a.angle,skip:isNaN(l)||isNaN(h),options:i};this.updateElement(e,r,c,n)}}},ScatterController:class extends hn{static id="scatter";static defaults={datasetElementType:!1,dataElementType:"point",showLine:!1,fill:!1};static overrides={interaction:{mode:"point"},scales:{x:{type:"linear"},y:{type:"linear"}}};getLabelAndValue(t){const e=this._cachedMeta,i=this.chart.data.labels||[],{xScale:n,yScale:s}=e,o=this.getParsed(t),r=n.getLabelForValue(o.x),a=s.getLabelForValue(o.y);return{label:i[t]||"",value:"("+r+", "+a+")"}}update(t){const e=this._cachedMeta,{data:i=[]}=e,n=this.chart._animationsDisabled;let{start:s,count:o}=le(e,i,n);if(this._drawStart=s,this._drawCount=o,he(e)&&(s=0,o=i.length),this.options.showLine){this.datasetElementType||this.addElements();const{dataset:s,_dataset:o}=e;s._chart=this.chart,s._datasetIndex=this.index,s._decimated=!!o._decimated,s.points=i;const r=this.resolveDatasetElementOptions(t);r.segment=this.options.segment,this.updateElement(s,void 0,{animated:!n,options:r},t)}else this.datasetElementType&&(delete e.dataset,this.datasetElementType=!1);this.updateElements(i,s,o,t)}addElements(){const{showLine:t}=this.options;!this.datasetElementType&&t&&(this.datasetElementType=this.chart.registry.getElement("line")),super.addElements()}updateElements(t,e,i,n){const s="reset"===n,{iScale:o,vScale:r,_stacked:a,_dataset:l}=this._cachedMeta,h=this.resolveDataElementOptions(e,n),c=this.getSharedOptions(h),d=this.includeOptions(n,c),u=o.axis,f=r.axis,{spanGaps:p,segment:g}=this.options,m=jt(p)?p:Number.POSITIVE_INFINITY,x=this.chart._animationsDisabled||s||"none"===n;let b=e>0&&this.getParsed(e-1);for(let h=e;h<e+i;++h){const e=t[h],i=this.getParsed(h),p=x?e:{},y=rt(i[f]),v=p[u]=o.getPixelForValue(i[u],h),_=p[f]=s||y?r.getBasePixel():r.getPixelForValue(a?this.applyStack(r,i,a):i[f],h);p.skip=isNaN(v)||isNaN(_)||y,p.stop=h>0&&Math.abs(i[u]-b[u])>m,g&&(p.parsed=i,p.raw=l.data[h]),d&&(p.options=c||this.resolveDataElementOptions(h,e.active?"active":n)),x||this.updateElement(e,h,p,n),b=i}this.updateSharedOptions(c,n,h)}getMaxOverflow(){const t=this._cachedMeta,e=t.data||[];if(!this.options.showLine){let t=0;for(let i=e.length-1;i>=0;--i)t=Math.max(t,e[i].size(this.resolveDataElementOptions(i))/2);return t>0&&t}const i=t.dataset,n=i.options&&i.options.borderWidth||0;if(!e.length)return n;const s=e[0].size(this.resolveDataElementOptions(0)),o=e[e.length-1].size(this.resolveDataElementOptions(e.length-1));return Math.max(n,s,o)/2}}});function _n(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class wn{static override(t){Object.assign(wn.prototype,t)}options;constructor(t){this.options=t||{}}init(){}formats(){return _n()}parse(){return _n()}format(){return _n()}add(){return _n()}diff(){return _n()}startOf(){return _n()}endOf(){return _n()}}var An=wn;function Mn(t,e,i,n){const{controller:s,data:o,_sorted:r}=t,a=s._cachedMeta.iScale;if(a&&e===a.axis&&"r"!==e&&r&&o.length){const t=a._reversePixels?te:Qt;if(!n)return t(o,e,i);if(s._sharedOptions){const n=o[0],s="function"==typeof n.getRange&&n.getRange(e);if(s){const n=t(o,e,i-s),r=t(o,e,i+s);return{lo:n.lo,hi:r.hi}}}}return{lo:0,hi:o.length-1}}function kn(t,e,i,n,s){const o=t.getSortedVisibleDatasetMetas(),r=i[e];for(let t=0,i=o.length;t<i;++t){const{index:i,data:a}=o[t],{lo:l,hi:h}=Mn(o[t],e,r,s);for(let t=l;t<=h;++t){const e=a[t];e.skip||n(e,i,t)}}}function Cn(t,e,i,n,s){const o=[];return s||t.isPointInArea(e)?(kn(t,i,e,(function(i,r,a){(s||Ie(i,t.chartArea,0))&&i.inRange(e.x,e.y,n)&&o.push({element:i,datasetIndex:r,index:a})}),!0),o):o}function Sn(t,e,i,n,s,o){return o||t.isPointInArea(e)?"r"!==i||n?function(t,e,i,n,s,o){let r=[];const a=function(t){const e=-1!==t.indexOf("x"),i=-1!==t.indexOf("y");return function(t,n){const s=e?Math.abs(t.x-n.x):0,o=i?Math.abs(t.y-n.y):0;return Math.sqrt(Math.pow(s,2)+Math.pow(o,2))}}(i);let l=Number.POSITIVE_INFINITY;return kn(t,i,e,(function(i,h,c){const d=i.inRange(e.x,e.y,s);if(n&&!d)return;const u=i.getCenterPoint(s);if(!o&&!t.isPointInArea(u)&&!d)return;const f=a(e,u);f<l?(r=[{element:i,datasetIndex:h,index:c}],l=f):f===l&&r.push({element:i,datasetIndex:h,index:c})})),r}(t,e,i,n,s,o):function(t,e,i,n){let s=[];return kn(t,i,e,(function(t,i,o){const{startAngle:r,endAngle:a}=t.getProps(["startAngle","endAngle"],n),{angle:l}=Xt(t,{x:e.x,y:e.y});qt(l,r,a)&&s.push({element:t,datasetIndex:i,index:o})})),s}(t,e,i,s):[]}function Dn(t,e,i,n,s){const o=[],r="x"===i?"inXRange":"inYRange";let a=!1;return kn(t,i,e,((t,n,l)=>{t[r](e[i],s)&&(o.push({element:t,datasetIndex:n,index:l}),a=a||t.inRange(e.x,e.y,s))})),n&&!a?[]:o}var En={evaluateInteractionItems:kn,modes:{index(t,e,i,n){const s=Di(e,t),o=i.axis||"x",r=i.includeInvisible||!1,a=i.intersect?Cn(t,s,o,n,r):Sn(t,s,o,!1,n,r),l=[];return a.length?(t.getSortedVisibleDatasetMetas().forEach((t=>{const e=a[0].index,i=t.data[e];i&&!i.skip&&l.push({element:i,datasetIndex:t.index,index:e})})),l):[]},dataset(t,e,i,n){const s=Di(e,t),o=i.axis||"xy",r=i.includeInvisible||!1;let a=i.intersect?Cn(t,s,o,n,r):Sn(t,s,o,!1,n,r);if(a.length>0){const e=a[0].datasetIndex,i=t.getDatasetMeta(e).data;a=[];for(let t=0;t<i.length;++t)a.push({element:i[t],datasetIndex:e,index:t})}return a},point:(t,e,i,n)=>Cn(t,Di(e,t),i.axis||"xy",n,i.includeInvisible||!1),nearest(t,e,i,n){const s=Di(e,t),o=i.axis||"xy",r=i.includeInvisible||!1;return Sn(t,s,o,i.intersect,n,r)},x:(t,e,i,n)=>Dn(t,Di(e,t),"x",i.intersect,n),y:(t,e,i,n)=>Dn(t,Di(e,t),"y",i.intersect,n)}};const Pn=["left","top","right","bottom"];function On(t,e){return t.filter((t=>t.pos===e))}function Tn(t,e){return t.filter((t=>-1===Pn.indexOf(t.pos)&&t.box.axis===e))}function Rn(t,e){return t.sort(((t,i)=>{const n=e?i:t,s=e?t:i;return n.weight===s.weight?n.index-s.index:n.weight-s.weight}))}function Bn(t,e,i,n){return Math.max(t[i],e[i])+Math.max(t[n],e[n])}function In(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function Ln(t,e,i,n){const{pos:s,box:o}=i,r=t.maxPadding;if(!lt(s)){i.size&&(t[s]-=i.size);const e=n[i.stack]||{size:0,count:1};e.size=Math.max(e.size,i.horizontal?o.height:o.width),i.size=e.size/e.count,t[s]+=i.size}o.getPadding&&In(r,o.getPadding());const a=Math.max(0,e.outerWidth-Bn(r,t,"left","right")),l=Math.max(0,e.outerHeight-Bn(r,t,"top","bottom")),h=a!==t.w,c=l!==t.h;return t.w=a,t.h=l,i.horizontal?{same:h,other:c}:{same:c,other:h}}function zn(t,e){const i=e.maxPadding;return function(t){const n={left:0,top:0,right:0,bottom:0};return t.forEach((t=>{n[t]=Math.max(e[t],i[t])})),n}(t?["left","right"]:["top","bottom"])}function Wn(t,e,i,n){const s=[];let o,r,a,l,h,c;for(o=0,r=t.length,h=0;o<r;++o){a=t[o],l=a.box,l.update(a.width||e.w,a.height||e.h,zn(a.horizontal,e));const{same:r,other:d}=Ln(e,i,a,n);h|=r&&s.length,c=c||d,l.fullSize||s.push(a)}return h&&Wn(s,e,i,n)||c}function Fn(t,e,i,n,s){t.top=i,t.left=e,t.right=e+n,t.bottom=i+s,t.width=n,t.height=s}function jn(t,e,i,n){const s=i.padding;let{x:o,y:r}=e;for(const a of t){const t=a.box,l=n[a.stack]||{count:1,placed:0,weight:1},h=a.stackWeight/l.weight||1;if(a.horizontal){const n=e.w*h,o=l.size||t.height;kt(l.start)&&(r=l.start),t.fullSize?Fn(t,s.left,r,i.outerWidth-s.right-s.left,o):Fn(t,e.left+l.placed,r,n,o),l.start=r,l.placed+=n,r=t.bottom}else{const n=e.h*h,r=l.size||t.width;kt(l.start)&&(o=l.start),t.fullSize?Fn(t,o,s.top,r,i.outerHeight-s.bottom-s.top):Fn(t,o,e.top+l.placed,r,n),l.start=o,l.placed+=n,o=t.right}}e.x=o,e.y=r}var Vn={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const i=t.boxes?t.boxes.indexOf(e):-1;-1!==i&&t.boxes.splice(i,1)},configure(t,e,i){e.fullSize=i.fullSize,e.position=i.position,e.weight=i.weight},update(t,e,i,n){if(!t)return;const s=Ge(t.options.layout.padding),o=Math.max(e-s.width,0),r=Math.max(i-s.height,0),a=function(t){const e=function(t){const e=[];let i,n,s,o,r,a;for(i=0,n=(t||[]).length;i<n;++i)s=t[i],({position:o,options:{stack:r,stackWeight:a=1}}=s),e.push({index:i,box:s,pos:o,horizontal:s.isHorizontal(),weight:s.weight,stack:r&&o+r,stackWeight:a});return e}(t),i=Rn(e.filter((t=>t.box.fullSize)),!0),n=Rn(On(e,"left"),!0),s=Rn(On(e,"right")),o=Rn(On(e,"top"),!0),r=Rn(On(e,"bottom")),a=Tn(e,"x"),l=Tn(e,"y");return{fullSize:i,leftAndTop:n.concat(o),rightAndBottom:s.concat(l).concat(r).concat(a),chartArea:On(e,"chartArea"),vertical:n.concat(s).concat(l),horizontal:o.concat(r).concat(a)}}(t.boxes),l=a.vertical,h=a.horizontal;pt(t.boxes,(t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}));const c=l.reduce(((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1),0)||1,d=Object.freeze({outerWidth:e,outerHeight:i,padding:s,availableWidth:o,availableHeight:r,vBoxMaxWidth:o/2/c,hBoxMaxHeight:r/2}),u=Object.assign({},s);In(u,Ge(n));const f=Object.assign({maxPadding:u,w:o,h:r,x:s.left,y:s.top},s),p=function(t,e){const i=function(t){const e={};for(const i of t){const{stack:t,pos:n,stackWeight:s}=i;if(!t||!Pn.includes(n))continue;const o=e[t]||(e[t]={count:0,placed:0,weight:0,size:0});o.count++,o.weight+=s}return e}(t),{vBoxMaxWidth:n,hBoxMaxHeight:s}=e;let o,r,a;for(o=0,r=t.length;o<r;++o){a=t[o];const{fullSize:r}=a.box,l=i[a.stack],h=l&&a.stackWeight/l.weight;a.horizontal?(a.width=h?h*n:r&&e.availableWidth,a.height=s):(a.width=n,a.height=h?h*s:r&&e.availableHeight)}return i}(l.concat(h),d);Wn(a.fullSize,f,d,p),Wn(l,f,d,p),Wn(h,f,d,p)&&Wn(l,f,d,p),function(t){const e=t.maxPadding;function i(i){const n=Math.max(e[i]-t[i],0);return t[i]+=n,n}t.y+=i("top"),t.x+=i("left"),i("right"),i("bottom")}(f),jn(a.leftAndTop,f,d,p),f.x+=f.w,f.y+=f.h,jn(a.rightAndBottom,f,d,p),t.chartArea={left:f.left,top:f.top,right:f.left+f.w,bottom:f.top+f.h,height:f.h,width:f.w},pt(a.chartArea,(e=>{const i=e.box;Object.assign(i,t.chartArea),i.update(f.w,f.h,{left:0,top:0,right:0,bottom:0})}))}};class Nn{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,i){}removeEventListener(t,e,i){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,i,n){return e=Math.max(0,e||t.width),i=i||t.height,{width:e,height:Math.max(0,n?Math.floor(e/n):i)}}isAttached(t){return!0}updateConfig(t){}}class Hn extends Nn{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}}const Yn="$chartjs",Xn={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},$n=t=>null===t||""===t,Un=!!Oi&&{passive:!0};function Zn(t,e,i){t.canvas.removeEventListener(e,i,Un)}function qn(t,e){for(const i of t)if(i===e||i.contains(e))return!0}function Kn(t,e,i){const n=t.canvas,s=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||qn(i.addedNodes,n),e=e&&!qn(i.removedNodes,n);e&&i()}));return s.observe(document,{childList:!0,subtree:!0}),s}function Gn(t,e,i){const n=t.canvas,s=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||qn(i.removedNodes,n),e=e&&!qn(i.addedNodes,n);e&&i()}));return s.observe(document,{childList:!0,subtree:!0}),s}const Jn=new Map;let Qn=0;function ts(){const t=window.devicePixelRatio;t!==Qn&&(Qn=t,Jn.forEach(((e,i)=>{i.currentDevicePixelRatio!==t&&e()})))}function es(t,e,i){const n=t.canvas,s=n&&wi(n);if(!s)return;const o=oe(((t,e)=>{const n=s.clientWidth;i(t,e),n<s.clientWidth&&i()}),window),r=new ResizeObserver((t=>{const e=t[0],i=e.contentRect.width,n=e.contentRect.height;0===i&&0===n||o(i,n)}));return r.observe(s),function(t,e){Jn.size||window.addEventListener("resize",ts),Jn.set(t,e)}(t,o),r}function is(t,e,i){i&&i.disconnect(),"resize"===e&&function(t){Jn.delete(t),Jn.size||window.removeEventListener("resize",ts)}(t)}function ns(t,e,i){const n=t.canvas,s=oe((e=>{null!==t.ctx&&i(function(t,e){const i=Xn[t.type]||t.type,{x:n,y:s}=Di(t,e);return{type:i,chart:e,native:t,x:void 0!==n?n:null,y:void 0!==s?s:null}}(e,t))}),t);return function(t,e,i){t.addEventListener(e,i,Un)}(n,e,s),s}class ss extends Nn{acquireContext(t,e){const i=t&&t.getContext&&t.getContext("2d");return i&&i.canvas===t?(function(t,e){const i=t.style,n=t.getAttribute("height"),s=t.getAttribute("width");if(t[Yn]={initial:{height:n,width:s,style:{display:i.display,height:i.height,width:i.width}}},i.display=i.display||"block",i.boxSizing=i.boxSizing||"border-box",$n(s)){const e=Ti(t,"width");void 0!==e&&(t.width=e)}if($n(n))if(""===t.style.height)t.height=t.width/(e||2);else{const e=Ti(t,"height");void 0!==e&&(t.height=e)}}(t,e),i):null}releaseContext(t){const e=t.canvas;if(!e[Yn])return!1;const i=e[Yn].initial;["height","width"].forEach((t=>{const n=i[t];rt(n)?e.removeAttribute(t):e.setAttribute(t,n)}));const n=i.style||{};return Object.keys(n).forEach((t=>{e.style[t]=n[t]})),e.width=e.width,delete e[Yn],!0}addEventListener(t,e,i){this.removeEventListener(t,e);const n=t.$proxies||(t.$proxies={}),s={attach:Kn,detach:Gn,resize:es}[e]||ns;n[e]=s(t,e,i)}removeEventListener(t,e){const i=t.$proxies||(t.$proxies={}),n=i[e];n&&(({attach:is,detach:is,resize:is}[e]||Zn)(t,e,n),i[e]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,i,n){return function(t,e,i,n){const s=Mi(t),o=Ci(s,"margin"),r=Ai(s.maxWidth,t,"clientWidth")||Ot,a=Ai(s.maxHeight,t,"clientHeight")||Ot,l=function(t,e,i){let n,s;if(void 0===e||void 0===i){const o=wi(t);if(o){const t=o.getBoundingClientRect(),r=Mi(o),a=Ci(r,"border","width"),l=Ci(r,"padding");e=t.width-l.width-a.width,i=t.height-l.height-a.height,n=Ai(r.maxWidth,o,"clientWidth"),s=Ai(r.maxHeight,o,"clientHeight")}else e=t.clientWidth,i=t.clientHeight}return{width:e,height:i,maxWidth:n||Ot,maxHeight:s||Ot}}(t,e,i);let{width:h,height:c}=l;if("content-box"===s.boxSizing){const t=Ci(s,"border","width"),e=Ci(s,"padding");h-=e.width+t.width,c-=e.height+t.height}return h=Math.max(0,h-o.width),c=Math.max(0,n?h/n:c-o.height),h=Ei(Math.min(h,r,l.maxWidth)),c=Ei(Math.min(c,a,l.maxHeight)),h&&!c&&(c=Ei(h/2)),(void 0!==e||void 0!==i)&&n&&l.height&&c>l.height&&(c=l.height,h=Ei(Math.floor(c*n))),{width:h,height:c}}(t,e,i,n)}isAttached(t){const e=wi(t);return!(!e||!e.isConnected)}}class os{static defaults={};static defaultRoutes=void 0;x;y;active=!1;options;$animations;tooltipPosition(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}hasValue(){return jt(this.x)&&jt(this.y)}getProps(t,e){const i=this.$animations;if(!e||!i)return this;const n={};return t.forEach((t=>{n[t]=i[t]&&i[t].active()?i[t]._to:this[t]})),n}}function rs(t,e,i,n,s){const o=dt(n,0),r=Math.min(dt(s,t.length),t.length);let a,l,h,c=0;for(i=Math.ceil(i),s&&(a=s-n,i=a/Math.floor(a/i)),h=o;h<0;)c++,h=Math.round(o+c*i);for(l=Math.max(o,0);l<r;l++)l===h&&(e.push(t[l]),c++,h=Math.round(o+c*i))}const as=(t,e,i)=>"top"===e||"left"===e?t[e]+i:t[e]-i,ls=(t,e)=>Math.min(e||t,t);function hs(t,e){const i=[],n=t.length/e,s=t.length;let o=0;for(;o<s;o+=n)i.push(t[Math.floor(o)]);return i}function cs(t,e,i){const n=t.ticks.length,s=Math.min(e,n-1),o=t._startPixel,r=t._endPixel,a=1e-6;let l,h=t.getPixelForTick(s);if(!(i&&(l=1===n?Math.max(h-o,r-h):0===e?(t.getPixelForTick(1)-h)/2:(h-t.getPixelForTick(s-1))/2,h+=s<e?l:-l,h<o-a||h>r+a)))return h}function ds(t){return t.drawTicks?t.tickLength:0}function us(t,e){if(!t.display)return 0;const i=Je(t.font,e),n=Ge(t.padding);return(at(t.text)?t.text.length:1)*i.lineHeight+n.height}function fs(t,e,i){let n=re(t);return(i&&"right"!==e||!i&&"right"===e)&&(n=(t=>"left"===t?"right":"right"===t?"left":t)(n)),n}class ps extends os{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:i,_suggestedMax:n}=this;return t=ct(t,Number.POSITIVE_INFINITY),e=ct(e,Number.NEGATIVE_INFINITY),i=ct(i,Number.POSITIVE_INFINITY),n=ct(n,Number.NEGATIVE_INFINITY),{min:ct(t,i),max:ct(e,n),minDefined:ht(t),maxDefined:ht(e)}}getMinMax(t){let e,{min:i,max:n,minDefined:s,maxDefined:o}=this.getUserBounds();if(s&&o)return{min:i,max:n};const r=this.getMatchingVisibleMetas();for(let a=0,l=r.length;a<l;++a)e=r[a].controller.getMinMax(this,t),s||(i=Math.min(i,e.min)),o||(n=Math.max(n,e.max));return i=o&&i>n?n:i,n=s&&i>n?i:n,{min:ct(i,ct(n,i)),max:ct(n,ct(i,n))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}getLabelItems(t=this.chart.chartArea){return this._labelItems||(this._labelItems=this._computeLabelItems(t))}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){ft(this.options.beforeUpdate,[this])}update(t,e,i){const{beginAtZero:n,grace:s,ticks:o}=this.options,r=o.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this._margins=i=Object.assign({left:0,right:0,top:0,bottom:0},i),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+i.left+i.right:this.height+i.top+i.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=function(t,e,i){const{min:n,max:s}=t,o=ut(e,(s-n)/2),r=(t,e)=>i&&0===t?0:t+e;return{min:r(n,-Math.abs(o)),max:r(s,o)}}(this,s,n),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const a=r<this.ticks.length;this._convertTicksToLabels(a?hs(this.ticks,r):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),o.display&&(o.autoSkip||"auto"===o.source)&&(this.ticks=function(t,e){const i=t.options.ticks,n=function(t){const e=t.options.offset,i=t._tickSize(),n=t._length/i+(e?0:1),s=t._maxLength/i;return Math.floor(Math.min(n,s))}(t),s=Math.min(i.maxTicksLimit||n,n),o=i.major.enabled?function(t){const e=[];let i,n;for(i=0,n=t.length;i<n;i++)t[i].major&&e.push(i);return e}(e):[],r=o.length,a=o[0],l=o[r-1],h=[];if(r>s)return function(t,e,i,n){let s,o=0,r=i[0];for(n=Math.ceil(n),s=0;s<t.length;s++)s===r&&(e.push(t[s]),o++,r=i[o*n])}(e,h,o,r/s),h;const c=function(t,e,i){const n=function(t){const e=t.length;let i,n;if(e<2)return!1;for(n=t[0],i=1;i<e;++i)if(t[i]-t[i-1]!==n)return!1;return n}(t),s=e.length/i;if(!n)return Math.max(s,1);const o=function(t){const e=[],i=Math.sqrt(t);let n;for(n=1;n<i;n++)t%n==0&&(e.push(n),e.push(t/n));return i===(0|i)&&e.push(i),e.sort(((t,e)=>t-e)).pop(),e}(n);for(let t=0,e=o.length-1;t<e;t++){const e=o[t];if(e>s)return e}return Math.max(s,1)}(o,e,s);if(r>0){let t,i;const n=r>1?Math.round((l-a)/(r-1)):null;for(rs(e,h,c,rt(n)?0:a-n,a),t=0,i=r-1;t<i;t++)rs(e,h,c,o[t],o[t+1]);return rs(e,h,c,l,rt(n)?e.length:l+n),h}return rs(e,h,c),h}(this,this.ticks),this._labelSizes=null,this.afterAutoSkip()),a&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t,e,i=this.options.reverse;this.isHorizontal()?(t=this.left,e=this.right):(t=this.top,e=this.bottom,i=!i),this._startPixel=t,this._endPixel=e,this._reversePixels=i,this._length=e-t,this._alignToPixels=this.options.alignToPixels}afterUpdate(){ft(this.options.afterUpdate,[this])}beforeSetDimensions(){ft(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){ft(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),ft(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){ft(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this.options.ticks;let i,n,s;for(i=0,n=t.length;i<n;i++)s=t[i],s.label=ft(e.callback,[s.value,i,t],this)}afterTickToLabelConversion(){ft(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){ft(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this.options,e=t.ticks,i=ls(this.ticks.length,t.ticks.maxTicksLimit),n=e.minRotation||0,s=e.maxRotation;let o,r,a,l=n;if(!this._isVisible()||!e.display||n>=s||i<=1||!this.isHorizontal())return void(this.labelRotation=n);const h=this._getLabelSizes(),c=h.widest.width,d=h.highest.height,u=Kt(this.chart.width-c,0,this.maxWidth);o=t.offset?this.maxWidth/i:u/(i-1),c+6>o&&(o=u/(i-(t.offset?.5:1)),r=this.maxHeight-ds(t.grid)-e.padding-us(t.title,this.chart.options.font),a=Math.sqrt(c*c+d*d),l=Ht(Math.min(Math.asin(Kt((h.highest.height+6)/o,-1,1)),Math.asin(Kt(r/a,-1,1))-Math.asin(Kt(d/a,-1,1)))),l=Math.max(n,Math.min(s,l))),this.labelRotation=l}afterCalculateLabelRotation(){ft(this.options.afterCalculateLabelRotation,[this])}afterAutoSkip(){}beforeFit(){ft(this.options.beforeFit,[this])}fit(){const t={width:0,height:0},{chart:e,options:{ticks:i,title:n,grid:s}}=this,o=this._isVisible(),r=this.isHorizontal();if(o){const o=us(n,e.options.font);if(r?(t.width=this.maxWidth,t.height=ds(s)+o):(t.height=this.maxHeight,t.width=ds(s)+o),i.display&&this.ticks.length){const{first:e,last:n,widest:s,highest:o}=this._getLabelSizes(),a=2*i.padding,l=Nt(this.labelRotation),h=Math.cos(l),c=Math.sin(l);if(r){const e=i.mirror?0:c*s.width+h*o.height;t.height=Math.min(this.maxHeight,t.height+e+a)}else{const e=i.mirror?0:h*s.width+c*o.height;t.width=Math.min(this.maxWidth,t.width+e+a)}this._calculatePadding(e,n,c,h)}}this._handleMargins(),r?(this.width=this._length=e.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=e.height-this._margins.top-this._margins.bottom)}_calculatePadding(t,e,i,n){const{ticks:{align:s,padding:o},position:r}=this.options,a=0!==this.labelRotation,l="top"!==r&&"x"===this.axis;if(this.isHorizontal()){const r=this.getPixelForTick(0)-this.left,h=this.right-this.getPixelForTick(this.ticks.length-1);let c=0,d=0;a?l?(c=n*t.width,d=i*e.height):(c=i*t.height,d=n*e.width):"start"===s?d=e.width:"end"===s?c=t.width:"inner"!==s&&(c=t.width/2,d=e.width/2),this.paddingLeft=Math.max((c-r+o)*this.width/(this.width-r),0),this.paddingRight=Math.max((d-h+o)*this.width/(this.width-h),0)}else{let i=e.height/2,n=t.height/2;"start"===s?(i=0,n=t.height):"end"===s&&(i=e.height,n=0),this.paddingTop=i+o,this.paddingBottom=n+o}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){ft(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){let e,i;for(this.beforeTickToLabelConversion(),this.generateTickLabels(t),e=0,i=t.length;e<i;e++)rt(t[e].label)&&(t.splice(e,1),i--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){let t=this._labelSizes;if(!t){const e=this.options.ticks.sampleSize;let i=this.ticks;e<i.length&&(i=hs(i,e)),this._labelSizes=t=this._computeLabelSizes(i,i.length,this.options.ticks.maxTicksLimit)}return t}_computeLabelSizes(t,e,i){const{ctx:n,_longestTextCache:s}=this,o=[],r=[],a=Math.floor(e/ls(e,i));let l,h,c,d,u,f,p,g,m,x,b,y=0,v=0;for(l=0;l<e;l+=a){if(d=t[l].label,u=this._resolveTickFontOptions(l),n.font=f=u.string,p=s[f]=s[f]||{data:{},gc:[]},g=u.lineHeight,m=x=0,rt(d)||at(d)){if(at(d))for(h=0,c=d.length;h<c;++h)b=d[h],rt(b)||at(b)||(m=Ee(n,p.data,p.gc,m,b),x+=g)}else m=Ee(n,p.data,p.gc,m,d),x=g;o.push(m),r.push(x),y=Math.max(m,y),v=Math.max(x,v)}!function(t,e){pt(t,(t=>{const i=t.gc,n=i.length/2;let s;if(n>e){for(s=0;s<n;++s)delete t.data[i[s]];i.splice(0,n)}}))}(s,e);const _=o.indexOf(y),w=r.indexOf(v),A=t=>({width:o[t]||0,height:r[t]||0});return{first:A(0),last:A(e-1),widest:A(_),highest:A(w),widths:o,heights:r}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);const e=this._startPixel+t*this._length;return Kt(this._alignToPixels?Oe(this.chart,e,0):e,-32768,32767)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this.ticks||[];if(t>=0&&t<e.length){const i=e[t];return i.$context||(i.$context=function(t,e,i){return ti(t,{tick:i,index:e,type:"tick"})}(this.getContext(),t,i))}return this.$context||(this.$context=ti(this.chart.getContext(),{scale:this,type:"scale"}))}_tickSize(){const t=this.options.ticks,e=Nt(this.labelRotation),i=Math.abs(Math.cos(e)),n=Math.abs(Math.sin(e)),s=this._getLabelSizes(),o=t.autoSkipPadding||0,r=s?s.widest.width+o:0,a=s?s.highest.height+o:0;return this.isHorizontal()?a*i>r*n?r/i:a/n:a*n<r*i?a/i:r/n}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this.axis,i=this.chart,n=this.options,{grid:s,position:o,border:r}=n,a=s.offset,l=this.isHorizontal(),h=this.ticks.length+(a?1:0),c=ds(s),d=[],u=r.setContext(this.getContext()),f=u.display?u.width:0,p=f/2,g=function(t){return Oe(i,t,f)};let m,x,b,y,v,_,w,A,M,k,C,S;if("top"===o)m=g(this.bottom),_=this.bottom-c,A=m-p,k=g(t.top)+p,S=t.bottom;else if("bottom"===o)m=g(this.top),k=t.top,S=g(t.bottom)-p,_=m+p,A=this.top+c;else if("left"===o)m=g(this.right),v=this.right-c,w=m-p,M=g(t.left)+p,C=t.right;else if("right"===o)m=g(this.left),M=t.left,C=g(t.right)-p,v=m+p,w=this.left+c;else if("x"===e){if("center"===o)m=g((t.top+t.bottom)/2+.5);else if(lt(o)){const t=Object.keys(o)[0],e=o[t];m=g(this.chart.scales[t].getPixelForValue(e))}k=t.top,S=t.bottom,_=m+p,A=_+c}else if("y"===e){if("center"===o)m=g((t.left+t.right)/2);else if(lt(o)){const t=Object.keys(o)[0],e=o[t];m=g(this.chart.scales[t].getPixelForValue(e))}v=m-p,w=v-c,M=t.left,C=t.right}const D=dt(n.ticks.maxTicksLimit,h),E=Math.max(1,Math.ceil(h/D));for(x=0;x<h;x+=E){const t=this.getContext(x),e=s.setContext(t),n=r.setContext(t),o=e.lineWidth,h=e.color,c=n.dash||[],u=n.dashOffset,f=e.tickWidth,p=e.tickColor,g=e.tickBorderDash||[],m=e.tickBorderDashOffset;b=cs(this,x,a),void 0!==b&&(y=Oe(i,b,o),l?v=w=M=C=y:_=A=k=S=y,d.push({tx1:v,ty1:_,tx2:w,ty2:A,x1:M,y1:k,x2:C,y2:S,width:o,color:h,borderDash:c,borderDashOffset:u,tickWidth:f,tickColor:p,tickBorderDash:g,tickBorderDashOffset:m}))}return this._ticksLength=h,this._borderValue=m,d}_computeLabelItems(t){const e=this.axis,i=this.options,{position:n,ticks:s}=i,o=this.isHorizontal(),r=this.ticks,{align:a,crossAlign:l,padding:h,mirror:c}=s,d=ds(i.grid),u=d+h,f=c?-h:u,p=-Nt(this.labelRotation),g=[];let m,x,b,y,v,_,w,A,M,k,C,S,D="middle";if("top"===n)_=this.bottom-f,w=this._getXAxisLabelAlignment();else if("bottom"===n)_=this.top+f,w=this._getXAxisLabelAlignment();else if("left"===n){const t=this._getYAxisLabelAlignment(d);w=t.textAlign,v=t.x}else if("right"===n){const t=this._getYAxisLabelAlignment(d);w=t.textAlign,v=t.x}else if("x"===e){if("center"===n)_=(t.top+t.bottom)/2+u;else if(lt(n)){const t=Object.keys(n)[0],e=n[t];_=this.chart.scales[t].getPixelForValue(e)+u}w=this._getXAxisLabelAlignment()}else if("y"===e){if("center"===n)v=(t.left+t.right)/2-u;else if(lt(n)){const t=Object.keys(n)[0],e=n[t];v=this.chart.scales[t].getPixelForValue(e)}w=this._getYAxisLabelAlignment(d).textAlign}"y"===e&&("start"===a?D="top":"end"===a&&(D="bottom"));const E=this._getLabelSizes();for(m=0,x=r.length;m<x;++m){b=r[m],y=b.label;const t=s.setContext(this.getContext(m));A=this.getPixelForTick(m)+s.labelOffset,M=this._resolveTickFontOptions(m),k=M.lineHeight,C=at(y)?y.length:1;const e=C/2,i=t.color,a=t.textStrokeColor,h=t.textStrokeWidth;let d,u=w;if(o?(v=A,"inner"===w&&(u=m===x-1?this.options.reverse?"left":"right":0===m?this.options.reverse?"right":"left":"center"),S="top"===n?"near"===l||0!==p?-C*k+k/2:"center"===l?-E.highest.height/2-e*k+k:-E.highest.height+k/2:"near"===l||0!==p?k/2:"center"===l?E.highest.height/2-e*k:E.highest.height-C*k,c&&(S*=-1),0===p||t.showLabelBackdrop||(v+=k/2*Math.sin(p))):(_=A,S=(1-C)*k/2),t.showLabelBackdrop){const e=Ge(t.backdropPadding),i=E.heights[m],n=E.widths[m];let s=S-e.top,o=0-e.left;switch(D){case"middle":s-=i/2;break;case"bottom":s-=i}switch(w){case"center":o-=n/2;break;case"right":o-=n}d={left:o,top:s,width:n+e.width,height:i+e.height,color:t.backdropColor}}g.push({label:y,font:M,textOffset:S,options:{rotation:p,color:i,strokeColor:a,strokeWidth:h,textAlign:u,textBaseline:D,translation:[v,_],backdrop:d}})}return g}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-Nt(this.labelRotation))return"top"===t?"left":"right";let i="center";return"start"===e.align?i="left":"end"===e.align?i="right":"inner"===e.align&&(i="inner"),i}_getYAxisLabelAlignment(t){const{position:e,ticks:{crossAlign:i,mirror:n,padding:s}}=this.options,o=t+s,r=this._getLabelSizes().widest.width;let a,l;return"left"===e?n?(l=this.right+s,"near"===i?a="left":"center"===i?(a="center",l+=r/2):(a="right",l+=r)):(l=this.right-o,"near"===i?a="right":"center"===i?(a="center",l-=r/2):(a="left",l=this.left)):"right"===e?n?(l=this.left+s,"near"===i?a="right":"center"===i?(a="center",l-=r/2):(a="left",l-=r)):(l=this.left+o,"near"===i?a="left":"center"===i?(a="center",l+=r/2):(a="right",l=this.right)):a="right",{textAlign:a,x:l}}_computeLabelArea(){if(this.options.ticks.mirror)return;const t=this.chart,e=this.options.position;return"left"===e||"right"===e?{top:0,left:this.left,bottom:t.height,right:this.right}:"top"===e||"bottom"===e?{top:this.top,left:0,bottom:this.bottom,right:t.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:i,top:n,width:s,height:o}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(i,n,s,o),t.restore())}getLineWidthForValue(t){const e=this.options.grid;if(!this._isVisible()||!e.display)return 0;const i=this.ticks.findIndex((e=>e.value===t));return i>=0?e.setContext(this.getContext(i)).lineWidth:0}drawGrid(t){const e=this.options.grid,i=this.ctx,n=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t));let s,o;const r=(t,e,n)=>{n.width&&n.color&&(i.save(),i.lineWidth=n.width,i.strokeStyle=n.color,i.setLineDash(n.borderDash||[]),i.lineDashOffset=n.borderDashOffset,i.beginPath(),i.moveTo(t.x,t.y),i.lineTo(e.x,e.y),i.stroke(),i.restore())};if(e.display)for(s=0,o=n.length;s<o;++s){const t=n[s];e.drawOnChartArea&&r({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),e.drawTicks&&r({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const{chart:t,ctx:e,options:{border:i,grid:n}}=this,s=i.setContext(this.getContext()),o=i.display?s.width:0;if(!o)return;const r=n.setContext(this.getContext(0)).lineWidth,a=this._borderValue;let l,h,c,d;this.isHorizontal()?(l=Oe(t,this.left,o)-o/2,h=Oe(t,this.right,r)+r/2,c=d=a):(c=Oe(t,this.top,o)-o/2,d=Oe(t,this.bottom,r)+r/2,l=h=a),e.save(),e.lineWidth=s.width,e.strokeStyle=s.color,e.beginPath(),e.moveTo(l,c),e.lineTo(h,d),e.stroke(),e.restore()}drawLabels(t){if(!this.options.ticks.display)return;const e=this.ctx,i=this._computeLabelArea();i&&Le(e,i);const n=this.getLabelItems(t);for(const t of n){const i=t.options,n=t.font;Ne(e,t.label,0,t.textOffset,n,i)}i&&ze(e)}drawTitle(){const{ctx:t,options:{position:e,title:i,reverse:n}}=this;if(!i.display)return;const s=Je(i.font),o=Ge(i.padding),r=i.align;let a=s.lineHeight/2;"bottom"===e||"center"===e||lt(e)?(a+=o.bottom,at(i.text)&&(a+=s.lineHeight*(i.text.length-1))):a+=o.top;const{titleX:l,titleY:h,maxWidth:c,rotation:d}=function(t,e,i,n){const{top:s,left:o,bottom:r,right:a,chart:l}=t,{chartArea:h,scales:c}=l;let d,u,f,p=0;const g=r-s,m=a-o;if(t.isHorizontal()){if(u=ae(n,o,a),lt(i)){const t=Object.keys(i)[0],n=i[t];f=c[t].getPixelForValue(n)+g-e}else f="center"===i?(h.bottom+h.top)/2+g-e:as(t,i,e);d=a-o}else{if(lt(i)){const t=Object.keys(i)[0],n=i[t];u=c[t].getPixelForValue(n)-m+e}else u="center"===i?(h.left+h.right)/2-m+e:as(t,i,e);f=ae(n,r,s),p="left"===i?-Rt:Rt}return{titleX:u,titleY:f,maxWidth:d,rotation:p}}(this,a,e,r);Ne(t,i.text,0,0,s,{color:i.color,maxWidth:c,rotation:d,textAlign:fs(r,e,n),textBaseline:"middle",translation:[l,h]})}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){const t=this.options,e=t.ticks&&t.ticks.z||0,i=dt(t.grid&&t.grid.z,-1),n=dt(t.border&&t.border.z,0);return this._isVisible()&&this.draw===ps.prototype.draw?[{z:i,draw:t=>{this.drawBackground(),this.drawGrid(t),this.drawTitle()}},{z:n,draw:()=>{this.drawBorder()}},{z:e,draw:t=>{this.drawLabels(t)}}]:[{z:e,draw:t=>{this.draw(t)}}]}getMatchingVisibleMetas(t){const e=this.chart.getSortedVisibleDatasetMetas(),i=this.axis+"AxisID",n=[];let s,o;for(s=0,o=e.length;s<o;++s){const o=e[s];o[i]!==this.id||t&&o.type!==t||n.push(o)}return n}_resolveTickFontOptions(t){return Je(this.options.ticks.setContext(this.getContext(t)).font)}_maxDigits(){const t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}class gs{constructor(t,e,i){this.type=t,this.scope=e,this.override=i,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=Object.getPrototypeOf(t);let i;(function(t){return"id"in t&&"defaults"in t})(e)&&(i=this.register(e));const n=this.items,s=t.id,o=this.scope+"."+s;if(!s)throw new Error("class does not have id: "+t);return s in n||(n[s]=t,function(t,e,i){const n=yt(Object.create(null),[i?De.get(i):{},De.get(e),t.defaults]);De.set(e,n),t.defaultRoutes&&function(t,e){Object.keys(e).forEach((i=>{const n=i.split("."),s=n.pop(),o=[t].concat(n).join("."),r=e[i].split("."),a=r.pop(),l=r.join(".");De.route(o,s,l,a)}))}(e,t.defaultRoutes),t.descriptors&&De.describe(e,t.descriptors)}(t,o,i),this.override&&De.override(t.id,t.overrides)),o}get(t){return this.items[t]}unregister(t){const e=this.items,i=t.id,n=this.scope;i in e&&delete e[i],n&&i in De[n]&&(delete De[n][i],this.override&&delete Ae[i])}}class ms{constructor(){this.controllers=new gs(hn,"datasets",!0),this.elements=new gs(os,"elements"),this.plugins=new gs(Object,"plugins"),this.scales=new gs(ps,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,i){[...e].forEach((e=>{const n=i||this._getRegistryForType(e);i||n.isForType(e)||n===this.plugins&&e.id?this._exec(t,n,e):pt(e,(e=>{const n=i||this._getRegistryForType(e);this._exec(t,n,e)}))}))}_exec(t,e,i){const n=Mt(t);ft(i["before"+n],[],i),e[t](i),ft(i["after"+n],[],i)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const i=this._typedRegistries[e];if(i.isForType(t))return i}return this.plugins}_get(t,e,i){const n=e.get(t);if(void 0===n)throw new Error('"'+t+'" is not a registered '+i+".");return n}}var xs=new ms;class bs{constructor(){this._init=[]}notify(t,e,i,n){"beforeInit"===e&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));const s=n?this._descriptors(t).filter(n):this._descriptors(t),o=this._notify(s,t,e,i);return"afterDestroy"===e&&(this._notify(s,t,"stop"),this._notify(this._init,t,"uninstall")),o}_notify(t,e,i,n){n=n||{};for(const s of t){const t=s.plugin;if(!1===ft(t[i],[e,n,s.options],t)&&n.cancelable)return!1}return!0}invalidate(){rt(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const i=t&&t.config,n=dt(i.options&&i.options.plugins,{}),s=function(t){const e={},i=[],n=Object.keys(xs.plugins.items);for(let t=0;t<n.length;t++)i.push(xs.getPlugin(n[t]));const s=t.plugins||[];for(let t=0;t<s.length;t++){const n=s[t];-1===i.indexOf(n)&&(i.push(n),e[n.id]=!0)}return{plugins:i,localIds:e}}(i);return!1!==n||e?function(t,{plugins:e,localIds:i},n,s){const o=[],r=t.getContext();for(const a of e){const e=a.id,l=ys(n[e],s);null!==l&&o.push({plugin:a,options:vs(t.config,{plugin:a,local:i[e]},l,r)})}return o}(t,s,n,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],i=this._cache,n=(t,e)=>t.filter((t=>!e.some((e=>t.plugin.id===e.plugin.id))));this._notify(n(e,i),t,"stop"),this._notify(n(i,e),t,"start")}}function ys(t,e){return e||!1!==t?!0===t?{}:t:null}function vs(t,{plugin:e,local:i},n,s){const o=t.pluginScopeKeys(e),r=t.getOptionScopes(n,o);return i&&e.defaults&&r.push(e.defaults),t.createResolver(r,s,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function _s(t,e){const i=De.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||i.indexAxis||"x"}function ws(t){if("x"===t||"y"===t||"r"===t)return t}function As(t,...e){if(ws(t))return t;for(const n of e){const e=n.axis||("top"===(i=n.position)||"bottom"===i?"x":"left"===i||"right"===i?"y":void 0)||t.length>1&&ws(t[0].toLowerCase());if(e)return e}var i;throw new Error(`Cannot determine type of '${t}' axis. Please provide 'axis' or 'position' option.`)}function Ms(t,e,i){if(i[e+"AxisID"]===t)return{axis:e}}function ks(t){const e=t.options||(t.options={});e.plugins=dt(e.plugins,{}),e.scales=function(t,e){const i=Ae[t.type]||{scales:{}},n=e.scales||{},s=_s(t.type,e),o=Object.create(null);return Object.keys(n).forEach((e=>{const r=n[e];if(!lt(r))return console.error(`Invalid scale configuration for scale: ${e}`);if(r._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${e}`);const a=As(e,r,function(t,e){if(e.data&&e.data.datasets){const i=e.data.datasets.filter((e=>e.xAxisID===t||e.yAxisID===t));if(i.length)return Ms(t,"x",i[0])||Ms(t,"y",i[0])}return{}}(e,t),De.scales[r.type]),l=function(t,e){return t===e?"_index_":"_value_"}(a,s),h=i.scales||{};o[e]=vt(Object.create(null),[{axis:a},r,h[a],h[l]])})),t.data.datasets.forEach((i=>{const s=i.type||t.type,r=i.indexAxis||_s(s,e),a=(Ae[s]||{}).scales||{};Object.keys(a).forEach((t=>{const e=function(t,e){let i=t;return"_index_"===t?i=e:"_value_"===t&&(i="x"===e?"y":"x"),i}(t,r),s=i[e+"AxisID"]||e;o[s]=o[s]||Object.create(null),vt(o[s],[{axis:e},n[s],a[t]])}))})),Object.keys(o).forEach((t=>{const e=o[t];vt(e,[De.scales[e.type],De.scale])})),o}(t,e)}function Cs(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const Ss=new Map,Ds=new Set;function Es(t,e){let i=Ss.get(t);return i||(i=e(),Ss.set(t,i),Ds.add(i)),i}const Ps=(t,e,i)=>{const n=At(e,i);void 0!==n&&t.add(n)};class Os{constructor(t){this._config=function(t){return(t=t||{}).data=Cs(t.data),ks(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=Cs(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),ks(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return Es(t,(()=>[[`datasets.${t}`,""]]))}datasetAnimationScopeKeys(t,e){return Es(`${t}.transition.${e}`,(()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]]))}datasetElementScopeKeys(t,e){return Es(`${t}-${e}`,(()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]]))}pluginScopeKeys(t){const e=t.id;return Es(`${this.type}-plugin-${e}`,(()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]]))}_cachedScopes(t,e){const i=this._scopeCache;let n=i.get(t);return n&&!e||(n=new Map,i.set(t,n)),n}getOptionScopes(t,e,i){const{options:n,type:s}=this,o=this._cachedScopes(t,i),r=o.get(e);if(r)return r;const a=new Set;e.forEach((e=>{t&&(a.add(t),e.forEach((e=>Ps(a,t,e)))),e.forEach((t=>Ps(a,n,t))),e.forEach((t=>Ps(a,Ae[s]||{},t))),e.forEach((t=>Ps(a,De,t))),e.forEach((t=>Ps(a,Me,t)))}));const l=Array.from(a);return 0===l.length&&l.push(Object.create(null)),Ds.has(e)&&o.set(e,l),l}chartOptionScopes(){const{options:t,type:e}=this;return[t,Ae[e]||{},De.datasets[e]||{},{type:e},De,Me]}resolveNamedOptions(t,e,i,n=[""]){const s={$shared:!0},{resolver:o,subPrefixes:r}=Ts(this._resolverCache,t,n);let a=o;(function(t,e){const{isScriptable:i,isIndexable:n}=ni(t);for(const s of e){const e=i(s),o=n(s),r=(o||e)&&t[s];if(e&&(Ct(r)||Rs(r))||o&&at(r))return!0}return!1})(o,e)&&(s.$shared=!1,a=ii(o,i=Ct(i)?i():i,this.createResolver(t,i,r)));for(const t of e)s[t]=a[t];return s}createResolver(t,e,i=[""],n){const{resolver:s}=Ts(this._resolverCache,t,i);return lt(e)?ii(s,e,void 0,n):s}}function Ts(t,e,i){let n=t.get(e);n||(n=new Map,t.set(e,n));const s=i.join();let o=n.get(s);return o||(o={resolver:ei(e,i),subPrefixes:i.filter((t=>!t.toLowerCase().includes("hover")))},n.set(s,o)),o}const Rs=t=>lt(t)&&Object.getOwnPropertyNames(t).reduce(((e,i)=>e||Ct(t[i])),!1),Bs=["top","bottom","left","right","chartArea"];function Is(t,e){return"top"===t||"bottom"===t||-1===Bs.indexOf(t)&&"x"===e}function Ls(t,e){return function(i,n){return i[t]===n[t]?i[e]-n[e]:i[t]-n[t]}}function zs(t){const e=t.chart,i=e.options.animation;e.notifyPlugins("afterRender"),ft(i&&i.onComplete,[t],e)}function Ws(t){const e=t.chart,i=e.options.animation;ft(i&&i.onProgress,[t],e)}function Fs(t){return _i()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const js={},Vs=t=>{const e=Fs(t);return Object.values(js).filter((t=>t.canvas===e)).pop()};function Ns(t,e,i){const n=Object.keys(t);for(const s of n){const n=+s;if(n>=e){const o=t[s];delete t[s],(i>0||n>e)&&(t[n+i]=o)}}}class Hs{static defaults=De;static instances=js;static overrides=Ae;static registry=xs;static version="4.3.3";static getChart=Vs;static register(...t){xs.add(...t),Ys()}static unregister(...t){xs.remove(...t),Ys()}constructor(t,e){const i=this.config=new Os(e),n=Fs(t),s=Vs(n);if(s)throw new Error("Canvas is already in use. Chart with ID '"+s.id+"' must be destroyed before the canvas with ID '"+s.canvas.id+"' can be reused.");const o=i.createResolver(i.chartOptionScopes(),this.getContext());this.platform=new(i.platform||function(t){return!_i()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?Hn:ss}(n)),this.platform.updateConfig(i);const r=this.platform.acquireContext(n,o.aspectRatio),a=r&&r.canvas,l=a&&a.height,h=a&&a.width;this.id=ot(),this.ctx=r,this.canvas=a,this.width=h,this.height=l,this._options=o,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new bs,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=function(t,e){let i;return function(...n){return e?(clearTimeout(i),i=setTimeout(t,e,n)):t.apply(this,n),e}}((t=>this.update(t)),o.resizeDelay||0),this._dataChanges=[],js[this.id]=this,r&&a?($i.listen(this,"complete",zs),$i.listen(this,"progress",Ws),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:i,height:n,_aspectRatio:s}=this;return rt(t)?e&&s?s:n?i/n:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}get registry(){return xs}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():Pi(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return Te(this.canvas,this.ctx),this}stop(){return $i.stop(this),this}resize(t,e){$i.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const i=this.options,n=this.canvas,s=i.maintainAspectRatio&&this.aspectRatio,o=this.platform.getMaximumSize(n,t,e,s),r=i.devicePixelRatio||this.platform.getDevicePixelRatio(),a=this.width?"resize":"attach";this.width=o.width,this.height=o.height,this._aspectRatio=this.aspectRatio,Pi(this,r,!0)&&(this.notifyPlugins("resize",{size:o}),ft(i.onResize,[this,o],this),this.attached&&this._doResize(a)&&this.render())}ensureScalesHaveIDs(){pt(this.options.scales||{},((t,e)=>{t.id=e}))}buildOrUpdateScales(){const t=this.options,e=t.scales,i=this.scales,n=Object.keys(i).reduce(((t,e)=>(t[e]=!1,t)),{});let s=[];e&&(s=s.concat(Object.keys(e).map((t=>{const i=e[t],n=As(t,i),s="r"===n,o="x"===n;return{options:i,dposition:s?"chartArea":o?"bottom":"left",dtype:s?"radialLinear":o?"category":"linear"}})))),pt(s,(e=>{const s=e.options,o=s.id,r=As(o,s),a=dt(s.type,e.dtype);void 0!==s.position&&Is(s.position,r)===Is(e.dposition)||(s.position=e.dposition),n[o]=!0;let l=null;o in i&&i[o].type===a?l=i[o]:(l=new(xs.getScale(a))({id:o,type:a,ctx:this.ctx,chart:this}),i[l.id]=l),l.init(s,t)})),pt(n,((t,e)=>{t||delete i[e]})),pt(i,(t=>{Vn.configure(this,t,t.options),Vn.addBox(this,t)}))}_updateMetasets(){const t=this._metasets,e=this.data.datasets.length,i=t.length;if(t.sort(((t,e)=>t.index-e.index)),i>e){for(let t=e;t<i;++t)this._destroyDatasetMeta(t);t.splice(e,i-e)}this._sortedMetasets=t.slice(0).sort(Ls("order","index"))}_removeUnreferencedMetasets(){const{_metasets:t,data:{datasets:e}}=this;t.length>e.length&&delete this._stacks,t.forEach(((t,i)=>{0===e.filter((e=>e===t._dataset)).length&&this._destroyDatasetMeta(i)}))}buildOrUpdateControllers(){const t=[],e=this.data.datasets;let i,n;for(this._removeUnreferencedMetasets(),i=0,n=e.length;i<n;i++){const n=e[i];let s=this.getDatasetMeta(i);const o=n.type||this.config.type;if(s.type&&s.type!==o&&(this._destroyDatasetMeta(i),s=this.getDatasetMeta(i)),s.type=o,s.indexAxis=n.indexAxis||_s(o,this.options),s.order=n.order||0,s.index=i,s.label=""+n.label,s.visible=this.isDatasetVisible(i),s.controller)s.controller.updateIndex(i),s.controller.linkScales();else{const e=xs.getController(o),{datasetElementType:n,dataElementType:r}=De.datasets[o];Object.assign(e,{dataElementType:xs.getElement(r),datasetElementType:n&&xs.getElement(n)}),s.controller=new e(this,i),t.push(s.controller)}}return this._updateMetasets(),t}_resetElements(){pt(this.data.datasets,((t,e)=>{this.getDatasetMeta(e).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this.config;e.update();const i=this._options=e.createResolver(e.chartOptionScopes(),this.getContext()),n=this._animationsDisabled=!i.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const s=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let o=0;for(let t=0,e=this.data.datasets.length;t<e;t++){const{controller:e}=this.getDatasetMeta(t),i=!n&&-1===s.indexOf(e);e.buildOrUpdateElements(i),o=Math.max(+e.getMaxOverflow(),o)}o=this._minPadding=i.layout.autoPadding?o:0,this._updateLayout(o),n||pt(s,(t=>{t.reset()})),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(Ls("z","_idx"));const{_active:r,_lastEvent:a}=this;a?this._eventHandler(a,!0):r.length&&this._updateHoverStyles(r,r,!0),this.render()}_updateScales(){pt(this.scales,(t=>{Vn.removeBox(this,t)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const t=this.options,e=new Set(Object.keys(this._listeners)),i=new Set(t.events);St(e,i)&&!!this._responsiveListeners===t.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:t}=this,e=this._getUniformDataChanges()||[];for(const{method:i,start:n,count:s}of e)Ns(t,n,"_removeElements"===i?-s:s)}_getUniformDataChanges(){const t=this._dataChanges;if(!t||!t.length)return;this._dataChanges=[];const e=this.data.datasets.length,i=e=>new Set(t.filter((t=>t[0]===e)).map(((t,e)=>e+","+t.splice(1).join(",")))),n=i(0);for(let t=1;t<e;t++)if(!St(n,i(t)))return;return Array.from(n).map((t=>t.split(","))).map((t=>({method:t[1],start:+t[2],count:+t[3]})))}_updateLayout(t){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;Vn.update(this,this.width,this.height,t);const e=this.chartArea,i=e.width<=0||e.height<=0;this._layers=[],pt(this.boxes,(t=>{i&&"chartArea"===t.position||(t.configure&&t.configure(),this._layers.push(...t._layers()))}),this),this._layers.forEach(((t,e)=>{t._idx=e})),this.notifyPlugins("afterLayout")}_updateDatasets(t){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let t=0,e=this.data.datasets.length;t<e;++t)this.getDatasetMeta(t).controller.configure();for(let e=0,i=this.data.datasets.length;e<i;++e)this._updateDataset(e,Ct(t)?t({datasetIndex:e}):t);this.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const i=this.getDatasetMeta(t),n={meta:i,index:t,mode:e,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",n)&&(i.controller._update(e),n.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",n))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&($i.has(this)?this.attached&&!$i.running(this)&&$i.start(this):(this.draw(),zs({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){const{width:t,height:e}=this._resizeBeforeDraw;this._resize(t,e),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const e=this._layers;for(t=0;t<e.length&&e[t].z<=0;++t)e[t].draw(this.chartArea);for(this._drawDatasets();t<e.length;++t)e[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,i=[];let n,s;for(n=0,s=e.length;n<s;++n){const s=e[n];t&&!s.visible||i.push(s)}return i}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=this.getSortedVisibleDatasetMetas();for(let e=t.length-1;e>=0;--e)this._drawDataset(t[e]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this.ctx,i=t._clip,n=!i.disabled,s=function(t){const{xScale:e,yScale:i}=t;if(e&&i)return{left:e.left,right:e.right,top:i.top,bottom:i.bottom}}(t)||this.chartArea,o={meta:t,index:t.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",o)&&(n&&Le(e,{left:!1===i.left?0:s.left-i.left,right:!1===i.right?this.width:s.right+i.right,top:!1===i.top?0:s.top-i.top,bottom:!1===i.bottom?this.height:s.bottom+i.bottom}),t.controller.draw(),n&&ze(e),o.cancelable=!1,this.notifyPlugins("afterDatasetDraw",o))}isPointInArea(t){return Ie(t,this.chartArea,this._minPadding)}getElementsAtEventForMode(t,e,i,n){const s=En.modes[e];return"function"==typeof s?s(this,t,i,n):[]}getDatasetMeta(t){const e=this.data.datasets[t],i=this._metasets;let n=i.filter((t=>t&&t._dataset===e)).pop();return n||(n={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},i.push(n)),n}getContext(){return this.$context||(this.$context=ti(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const i=this.getDatasetMeta(t);return"boolean"==typeof i.hidden?!i.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,e,i){const n=i?"show":"hide",s=this.getDatasetMeta(t),o=s.controller._resolveAnimations(void 0,n);kt(e)?(s.data[e].hidden=!i,this.update()):(this.setDatasetVisibility(t,i),o.update(s,{visible:i}),this.update((e=>e.datasetIndex===t?n:void 0)))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){const e=this._metasets[t];e&&e.controller&&e.controller._destroy(),delete this._metasets[t]}_stop(){let t,e;for(this.stop(),$i.remove(this),t=0,e=this.data.datasets.length;t<e;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:t,ctx:e}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),Te(t,e),this.platform.releaseContext(e),this.canvas=null,this.ctx=null),delete js[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this._listeners,e=this.platform,i=(i,n)=>{e.addEventListener(this,i,n),t[i]=n},n=(t,e,i)=>{t.offsetX=e,t.offsetY=i,this._eventHandler(t)};pt(this.options.events,(t=>i(t,n)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const t=this._responsiveListeners,e=this.platform,i=(i,n)=>{e.addEventListener(this,i,n),t[i]=n},n=(i,n)=>{t[i]&&(e.removeEventListener(this,i,n),delete t[i])},s=(t,e)=>{this.canvas&&this.resize(t,e)};let o;const r=()=>{n("attach",r),this.attached=!0,this.resize(),i("resize",s),i("detach",o)};o=()=>{this.attached=!1,n("resize",s),this._stop(),this._resize(0,0),i("attach",r)},e.isAttached(this.canvas)?r():o()}unbindEvents(){pt(this._listeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._listeners={},pt(this._responsiveListeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._responsiveListeners=void 0}updateHoverStyle(t,e,i){const n=i?"set":"remove";let s,o,r,a;for("dataset"===e&&(s=this.getDatasetMeta(t[0].datasetIndex),s.controller["_"+n+"DatasetHoverStyle"]()),r=0,a=t.length;r<a;++r){o=t[r];const e=o&&this.getDatasetMeta(o.datasetIndex).controller;e&&e[n+"HoverStyle"](o.element,o.datasetIndex,o.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this._active||[],i=t.map((({datasetIndex:t,index:e})=>{const i=this.getDatasetMeta(t);if(!i)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:i.data[e],index:e}}));!gt(i,e)&&(this._active=i,this._lastEvent=null,this._updateHoverStyles(i,e))}notifyPlugins(t,e,i){return this._plugins.notify(this,t,e,i)}isPluginEnabled(t){return 1===this._plugins._cache.filter((e=>e.plugin.id===t)).length}_updateHoverStyles(t,e,i){const n=this.options.hover,s=(t,e)=>t.filter((t=>!e.some((e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)))),o=s(e,t),r=i?t:s(t,e);o.length&&this.updateHoverStyle(o,n.mode,!1),r.length&&n.mode&&this.updateHoverStyle(r,n.mode,!0)}_eventHandler(t,e){const i={event:t,replay:e,cancelable:!0,inChartArea:this.isPointInArea(t)},n=e=>(e.options.events||this.options.events).includes(t.native.type);if(!1===this.notifyPlugins("beforeEvent",i,n))return;const s=this._handleEvent(t,e,i.inChartArea);return i.cancelable=!1,this.notifyPlugins("afterEvent",i,n),(s||i.changed)&&this.render(),this}_handleEvent(t,e,i){const{_active:n=[],options:s}=this,o=e,r=this._getActiveElements(t,n,i,o),a=function(t){return"mouseup"===t.type||"click"===t.type||"contextmenu"===t.type}(t),l=function(t,e,i,n){return i&&"mouseout"!==t.type?n?e:t:null}(t,this._lastEvent,i,a);i&&(this._lastEvent=null,ft(s.onHover,[t,r,this],this),a&&ft(s.onClick,[t,r,this],this));const h=!gt(r,n);return(h||e)&&(this._active=r,this._updateHoverStyles(r,n,e)),this._lastEvent=l,h}_getActiveElements(t,e,i,n){if("mouseout"===t.type)return[];if(!i)return e;const s=this.options.hover;return this.getElementsAtEventForMode(t,s.mode,s,n)}}function Ys(){return pt(Hs.instances,(t=>t._plugins.invalidate()))}function Xs(t,e,i,n){return{x:i+t*Math.cos(e),y:n+t*Math.sin(e)}}function $s(t,e,i,n,s,o){const{x:r,y:a,startAngle:l,pixelMargin:h,innerRadius:c}=e,d=Math.max(e.outerRadius+n+i-h,0),u=c>0?c+n+i+h:0;let f=0;const p=s-l;if(n){const t=((c>0?c-n:0)+(d>0?d-n:0))/2;f=(p-(0!==t?p*t/(t+n):p))/2}const g=(p-Math.max(.001,p*d-i/Dt)/d)/2,m=l+g+f,x=s-g-f,{outerStart:b,outerEnd:y,innerStart:v,innerEnd:_}=function(t,e,i,n){const s=Ze(t.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]),o=(i-e)/2,r=Math.min(o,n*e/2),a=t=>{const e=(i-Math.min(o,t))*n/2;return Kt(t,0,Math.min(o,e))};return{outerStart:a(s.outerStart),outerEnd:a(s.outerEnd),innerStart:Kt(s.innerStart,0,r),innerEnd:Kt(s.innerEnd,0,r)}}(e,u,d,x-m),w=d-b,A=d-y,M=m+b/w,k=x-y/A,C=u+v,S=u+_,D=m+v/C,E=x-_/S;if(t.beginPath(),o){const e=(M+k)/2;if(t.arc(r,a,d,M,e),t.arc(r,a,d,e,k),y>0){const e=Xs(A,k,r,a);t.arc(e.x,e.y,y,k,x+Rt)}const i=Xs(S,x,r,a);if(t.lineTo(i.x,i.y),_>0){const e=Xs(S,E,r,a);t.arc(e.x,e.y,_,x+Rt,E+Math.PI)}const n=(x-_/u+(m+v/u))/2;if(t.arc(r,a,u,x-_/u,n,!0),t.arc(r,a,u,n,m+v/u,!0),v>0){const e=Xs(C,D,r,a);t.arc(e.x,e.y,v,D+Math.PI,m-Rt)}const s=Xs(w,m,r,a);if(t.lineTo(s.x,s.y),b>0){const e=Xs(w,M,r,a);t.arc(e.x,e.y,b,m-Rt,M)}}else{t.moveTo(r,a);const e=Math.cos(M)*d+r,i=Math.sin(M)*d+a;t.lineTo(e,i);const n=Math.cos(k)*d+r,s=Math.sin(k)*d+a;t.lineTo(n,s)}t.closePath()}function Us(t,e,i=e){t.lineCap=dt(i.borderCapStyle,e.borderCapStyle),t.setLineDash(dt(i.borderDash,e.borderDash)),t.lineDashOffset=dt(i.borderDashOffset,e.borderDashOffset),t.lineJoin=dt(i.borderJoinStyle,e.borderJoinStyle),t.lineWidth=dt(i.borderWidth,e.borderWidth),t.strokeStyle=dt(i.borderColor,e.borderColor)}function Zs(t,e,i){t.lineTo(i.x,i.y)}function qs(t,e,i={}){const n=t.length,{start:s=0,end:o=n-1}=i,{start:r,end:a}=e,l=Math.max(s,r),h=Math.min(o,a),c=s<r&&o<r||s>a&&o>a;return{count:n,start:l,loop:e.loop,ilen:h<l&&!c?n+h-l:h-l}}function Ks(t,e,i,n){const{points:s,options:o}=e,{count:r,start:a,loop:l,ilen:h}=qs(s,i,n),c=function(t){return t.stepped?We:t.tension||"monotone"===t.cubicInterpolationMode?Fe:Zs}(o);let d,u,f,{move:p=!0,reverse:g}=n||{};for(d=0;d<=h;++d)u=s[(a+(g?h-d:d))%r],u.skip||(p?(t.moveTo(u.x,u.y),p=!1):c(t,f,u,g,o.stepped),f=u);return l&&(u=s[(a+(g?h:0))%r],c(t,f,u,g,o.stepped)),!!l}function Gs(t,e,i,n){const s=e.points,{count:o,start:r,ilen:a}=qs(s,i,n),{move:l=!0,reverse:h}=n||{};let c,d,u,f,p,g,m=0,x=0;const b=t=>(r+(h?a-t:t))%o,y=()=>{f!==p&&(t.lineTo(m,p),t.lineTo(m,f),t.lineTo(m,g))};for(l&&(d=s[b(0)],t.moveTo(d.x,d.y)),c=0;c<=a;++c){if(d=s[b(c)],d.skip)continue;const e=d.x,i=d.y,n=0|e;n===u?(i<f?f=i:i>p&&(p=i),m=(x*m+e)/++x):(y(),t.lineTo(e,i),u=n,x=0,f=p=i),g=i}y()}function Js(t){const e=t.options,i=e.borderDash&&e.borderDash.length;return t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||i?Ks:Gs}const Qs="function"==typeof Path2D;class to extends os{static id="line";static defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};static descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){const i=this.options;if((i.tension||"monotone"===i.cubicInterpolationMode)&&!i.stepped&&!this._pointsUpdated){const n=i.spanGaps?this._loop:this._fullLoop;vi(this._points,i,t,n,e),this._pointsUpdated=!0}}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=function(t,e){const i=t.points,n=t.options.spanGaps,s=i.length;if(!s)return[];const o=!!t._loop,{start:r,end:a}=function(t,e,i,n){let s=0,o=e-1;if(i&&!n)for(;s<e&&!t[s].skip;)s++;for(;s<e&&t[s].skip;)s++;for(s%=e,i&&(o+=s);o>s&&t[o%e].skip;)o--;return o%=e,{start:s,end:o}}(i,s,o,n);return function(t,e,i,n){return n&&n.setContext&&i?function(t,e,i,n){const s=t._chart.getContext(),o=Hi(t.options),{_datasetIndex:r,options:{spanGaps:a}}=t,l=i.length,h=[];let c=o,d=e[0].start,u=d;function f(t,e,n,s){const o=a?-1:1;if(t!==e){for(t+=l;i[t%l].skip;)t-=o;for(;i[e%l].skip;)e+=o;t%l!=e%l&&(h.push({start:t%l,end:e%l,loop:n,style:s}),c=s,d=e%l)}}for(const t of e){d=a?d:t.start;let e,o=i[d%l];for(u=d+1;u<=t.end;u++){const a=i[u%l];e=Hi(n.setContext(ti(s,{type:"segment",p0:o,p1:a,p0DataIndex:(u-1)%l,p1DataIndex:u%l,datasetIndex:r}))),Yi(e,c)&&f(d,u-1,t.loop,c),o=a,c=e}d<u-1&&f(d,u-1,t.loop,c)}return h}(t,e,i,n):e}(t,!0===n?[{start:r,end:a,loop:o}]:function(t,e,i,n){const s=t.length,o=[];let r,a=e,l=t[e];for(r=e+1;r<=i;++r){const i=t[r%s];i.skip||i.stop?l.skip||(n=!1,o.push({start:e%s,end:(r-1)%s,loop:n}),e=a=i.stop?r:null):(a=r,l.skip&&(e=r)),l=i}return null!==a&&o.push({start:e%s,end:a%s,loop:n}),o}(i,r,a<r?a+s:a,!!t._fullLoop&&0===r&&a===s-1),i,e)}(this,this.options.segment))}first(){const t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){const t=this.segments,e=this.points,i=t.length;return i&&e[t[i-1].end]}interpolate(t,e){const i=this.options,n=t[e],s=this.points,o=Ni(this,{property:e,start:n,end:n});if(!o.length)return;const r=[],a=function(t){return t.stepped?Bi:t.tension||"monotone"===t.cubicInterpolationMode?Ii:Ri}(i);let l,h;for(l=0,h=o.length;l<h;++l){const{start:h,end:c}=o[l],d=s[h],u=s[c];if(d===u){r.push(d);continue}const f=a(d,u,Math.abs((n-d[e])/(u[e]-d[e])),i.stepped);f[e]=t[e],r.push(f)}return 1===r.length?r[0]:r}pathSegment(t,e,i){return Js(this)(t,this,e,i)}path(t,e,i){const n=this.segments,s=Js(this);let o=this._loop;e=e||0,i=i||this.points.length-e;for(const r of n)o&=s(t,this,r,{start:e,end:e+i-1});return!!o}draw(t,e,i,n){const s=this.options||{};(this.points||[]).length&&s.borderWidth&&(t.save(),function(t,e,i,n){Qs&&!e.options.segment?function(t,e,i,n){let s=e._path;s||(s=e._path=new Path2D,e.path(s,i,n)&&s.closePath()),Us(t,e.options),t.stroke(s)}(t,e,i,n):function(t,e,i,n){const{segments:s,options:o}=e,r=Js(e);for(const a of s)Us(t,o,a.style),t.beginPath(),r(t,e,a,{start:i,end:i+n-1})&&t.closePath(),t.stroke()}(t,e,i,n)}(t,this,i,n),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function eo(t,e,i,n){const s=t.options,{[i]:o}=t.getProps([i],n);return Math.abs(e-o)<s.radius+s.hitRadius}function io(t,e){const{x:i,y:n,base:s,width:o,height:r}=t.getProps(["x","y","base","width","height"],e);let a,l,h,c,d;return t.horizontal?(d=r/2,a=Math.min(i,s),l=Math.max(i,s),h=n-d,c=n+d):(d=o/2,a=i-d,l=i+d,h=Math.min(n,s),c=Math.max(n,s)),{left:a,top:h,right:l,bottom:c}}function no(t,e,i,n){return t?0:Kt(e,i,n)}function so(t,e,i,n){const s=null===e,o=null===i,r=t&&!(s&&o)&&io(t,n);return r&&(s||Gt(e,r.left,r.right))&&(o||Gt(i,r.top,r.bottom))}function oo(t,e){t.rect(e.x,e.y,e.w,e.h)}function ro(t,e,i={}){const n=t.x!==i.x?-e:0,s=t.y!==i.y?-e:0,o=(t.x+t.w!==i.x+i.w?e:0)-n,r=(t.y+t.h!==i.y+i.h?e:0)-s;return{x:t.x+n,y:t.y+s,w:t.w+o,h:t.h+r,radius:t.radius}}var ao=Object.freeze({__proto__:null,ArcElement:class extends os{static id="arc";static defaults={borderAlign:"center",borderColor:"#fff",borderDash:[],borderDashOffset:0,borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0,circular:!0};static defaultRoutes={backgroundColor:"backgroundColor"};static descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t};circumference;endAngle;fullCircles;innerRadius;outerRadius;pixelMargin;startAngle;constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,i){const n=this.getProps(["x","y"],i),{angle:s,distance:o}=Xt(n,{x:t,y:e}),{startAngle:r,endAngle:a,innerRadius:l,outerRadius:h,circumference:c}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],i),d=(this.options.spacing+this.options.borderWidth)/2,u=dt(c,a-r)>=Et||qt(s,r,a),f=Gt(o,l+d,h+d);return u&&f}getCenterPoint(t){const{x:e,y:i,startAngle:n,endAngle:s,innerRadius:o,outerRadius:r}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius"],t),{offset:a,spacing:l}=this.options,h=(n+s)/2,c=(o+r+l+a)/2;return{x:e+Math.cos(h)*c,y:i+Math.sin(h)*c}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const{options:e,circumference:i}=this,n=(e.offset||0)/4,s=(e.spacing||0)/2,o=e.circular;if(this.pixelMargin="inner"===e.borderAlign?.33:0,this.fullCircles=i>Et?Math.floor(i/Et):0,0===i||this.innerRadius<0||this.outerRadius<0)return;t.save();const r=(this.startAngle+this.endAngle)/2;t.translate(Math.cos(r)*n,Math.sin(r)*n);const a=n*(1-Math.sin(Math.min(Dt,i||0)));t.fillStyle=e.backgroundColor,t.strokeStyle=e.borderColor,function(t,e,i,n,s){const{fullCircles:o,startAngle:r,circumference:a}=e;let l=e.endAngle;if(o){$s(t,e,i,n,l,s);for(let e=0;e<o;++e)t.fill();isNaN(a)||(l=r+(a%Et||Et))}$s(t,e,i,n,l,s),t.fill()}(t,this,a,s,o),function(t,e,i,n,s){const{fullCircles:o,startAngle:r,circumference:a,options:l}=e,{borderWidth:h,borderJoinStyle:c,borderDash:d,borderDashOffset:u}=l,f="inner"===l.borderAlign;if(!h)return;t.setLineDash(d||[]),t.lineDashOffset=u,f?(t.lineWidth=2*h,t.lineJoin=c||"round"):(t.lineWidth=h,t.lineJoin=c||"bevel");let p=e.endAngle;if(o){$s(t,e,i,n,p,s);for(let e=0;e<o;++e)t.stroke();isNaN(a)||(p=r+(a%Et||Et))}f&&function(t,e,i){const{startAngle:n,pixelMargin:s,x:o,y:r,outerRadius:a,innerRadius:l}=e;let h=s/a;t.beginPath(),t.arc(o,r,a,n-h,i+h),l>s?(h=s/l,t.arc(o,r,l,i+h,n-h,!0)):t.arc(o,r,s,i+Rt,n-Rt),t.closePath(),t.clip()}(t,e,p),o||($s(t,e,i,n,p,s),t.stroke())}(t,this,a,s,o),t.restore()}},BarElement:class extends os{static id="bar";static defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){const{inflateAmount:e,options:{borderColor:i,backgroundColor:n}}=this,{inner:s,outer:o}=function(t){const e=io(t),i=e.right-e.left,n=e.bottom-e.top,s=function(t,e,i){const n=t.options.borderWidth,s=t.borderSkipped,o=qe(n);return{t:no(s.top,o.top,0,i),r:no(s.right,o.right,0,e),b:no(s.bottom,o.bottom,0,i),l:no(s.left,o.left,0,e)}}(t,i/2,n/2),o=function(t,e,i){const{enableBorderRadius:n}=t.getProps(["enableBorderRadius"]),s=t.options.borderRadius,o=Ke(s),r=Math.min(e,i),a=t.borderSkipped,l=n||lt(s);return{topLeft:no(!l||a.top||a.left,o.topLeft,0,r),topRight:no(!l||a.top||a.right,o.topRight,0,r),bottomLeft:no(!l||a.bottom||a.left,o.bottomLeft,0,r),bottomRight:no(!l||a.bottom||a.right,o.bottomRight,0,r)}}(t,i/2,n/2);return{outer:{x:e.left,y:e.top,w:i,h:n,radius:o},inner:{x:e.left+s.l,y:e.top+s.t,w:i-s.l-s.r,h:n-s.t-s.b,radius:{topLeft:Math.max(0,o.topLeft-Math.max(s.t,s.l)),topRight:Math.max(0,o.topRight-Math.max(s.t,s.r)),bottomLeft:Math.max(0,o.bottomLeft-Math.max(s.b,s.l)),bottomRight:Math.max(0,o.bottomRight-Math.max(s.b,s.r))}}}}(this),r=(a=o.radius).topLeft||a.topRight||a.bottomLeft||a.bottomRight?He:oo;var a;t.save(),o.w===s.w&&o.h===s.h||(t.beginPath(),r(t,ro(o,e,s)),t.clip(),r(t,ro(s,-e,o)),t.fillStyle=i,t.fill("evenodd")),t.beginPath(),r(t,ro(s,e)),t.fillStyle=n,t.fill(),t.restore()}inRange(t,e,i){return so(this,t,e,i)}inXRange(t,e){return so(this,t,null,e)}inYRange(t,e){return so(this,null,t,e)}getCenterPoint(t){const{x:e,y:i,base:n,horizontal:s}=this.getProps(["x","y","base","horizontal"],t);return{x:s?(e+n)/2:e,y:s?i:(i+n)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}},LineElement:to,PointElement:class extends os{static id="point";parsed;skip;stop;static defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,i){const n=this.options,{x:s,y:o}=this.getProps(["x","y"],i);return Math.pow(t-s,2)+Math.pow(e-o,2)<Math.pow(n.hitRadius+n.radius,2)}inXRange(t,e){return eo(this,t,"x",e)}inYRange(t,e){return eo(this,t,"y",e)}getCenterPoint(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}size(t){let e=(t=t||this.options||{}).radius||0;return e=Math.max(e,e&&t.hoverRadius||0),2*(e+(e&&t.borderWidth||0))}draw(t,e){const i=this.options;this.skip||i.radius<.1||!Ie(this,e,this.size(i)/2)||(t.strokeStyle=i.borderColor,t.lineWidth=i.borderWidth,t.fillStyle=i.backgroundColor,Re(t,i,this.x,this.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}}});const lo=["rgb(54, 162, 235)","rgb(255, 99, 132)","rgb(255, 159, 64)","rgb(255, 205, 86)","rgb(75, 192, 192)","rgb(153, 102, 255)","rgb(201, 203, 207)"],ho=lo.map((t=>t.replace("rgb(","rgba(").replace(")",", 0.5)")));function co(t){return lo[t%lo.length]}function uo(t){return ho[t%ho.length]}function fo(t){let e;for(e in t)if(t[e].borderColor||t[e].backgroundColor)return!0;return!1}var po={id:"colors",defaults:{enabled:!0,forceOverride:!1},beforeLayout(t,e,i){if(!i.enabled)return;const{data:{datasets:n},options:s}=t.config,{elements:o}=s;if(!i.forceOverride&&(fo(n)||(r=s)&&(r.borderColor||r.backgroundColor)||o&&fo(o)))return;var r;const a=function(t){let e=0;return(i,n)=>{const s=t.getDatasetMeta(n).controller;s instanceof bn?e=function(t,e){return t.backgroundColor=t.data.map((()=>co(e++))),e}(i,e):s instanceof yn?e=function(t,e){return t.backgroundColor=t.data.map((()=>uo(e++))),e}(i,e):s&&(e=function(t,e){return t.borderColor=co(e),t.backgroundColor=uo(e),++e}(i,e))}}(t);n.forEach(a)}};function go(t){if(t._decimated){const e=t._data;delete t._decimated,delete t._data,Object.defineProperty(t,"data",{configurable:!0,enumerable:!0,writable:!0,value:e})}}function mo(t){t.data.datasets.forEach((t=>{go(t)}))}var xo={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(t,e,i)=>{if(!i.enabled)return void mo(t);const n=t.width;t.data.datasets.forEach(((e,s)=>{const{_data:o,indexAxis:r}=e,a=t.getDatasetMeta(s),l=o||e.data;if("y"===Qe([r,t.options.indexAxis]))return;if(!a.controller.supportsDecimation)return;const h=t.scales[a.xAxisID];if("linear"!==h.type&&"time"!==h.type)return;if(t.options.parsing)return;let c,{start:d,count:u}=function(t,e){const i=e.length;let n,s=0;const{iScale:o}=t,{min:r,max:a,minDefined:l,maxDefined:h}=o.getUserBounds();return l&&(s=Kt(Qt(e,o.axis,r).lo,0,i-1)),n=h?Kt(Qt(e,o.axis,a).hi+1,s,i)-s:i-s,{start:s,count:n}}(a,l);if(u<=(i.threshold||4*n))go(e);else{switch(rt(o)&&(e._data=l,delete e.data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(t){this._data=t}})),i.algorithm){case"lttb":c=function(t,e,i,n,s){const o=s.samples||n;if(o>=i)return t.slice(e,e+i);const r=[],a=(i-2)/(o-2);let l=0;const h=e+i-1;let c,d,u,f,p,g=e;for(r[l++]=t[g],c=0;c<o-2;c++){let n,s=0,o=0;const h=Math.floor((c+1)*a)+1+e,m=Math.min(Math.floor((c+2)*a)+1,i)+e,x=m-h;for(n=h;n<m;n++)s+=t[n].x,o+=t[n].y;s/=x,o/=x;const b=Math.floor(c*a)+1+e,y=Math.min(Math.floor((c+1)*a)+1,i)+e,{x:v,y:_}=t[g];for(u=f=-1,n=b;n<y;n++)f=.5*Math.abs((v-s)*(t[n].y-_)-(v-t[n].x)*(o-_)),f>u&&(u=f,d=t[n],p=n);r[l++]=d,g=p}return r[l++]=t[h],r}(l,d,u,n,i);break;case"min-max":c=function(t,e,i,n){let s,o,r,a,l,h,c,d,u,f,p=0,g=0;const m=[],x=e+i-1,b=t[e].x,y=t[x].x-b;for(s=e;s<e+i;++s){o=t[s],r=(o.x-b)/y*n,a=o.y;const e=0|r;if(e===l)a<u?(u=a,h=s):a>f&&(f=a,c=s),p=(g*p+o.x)/++g;else{const i=s-1;if(!rt(h)&&!rt(c)){const e=Math.min(h,c),n=Math.max(h,c);e!==d&&e!==i&&m.push({...t[e],x:p}),n!==d&&n!==i&&m.push({...t[n],x:p})}s>0&&i!==d&&m.push(t[i]),m.push(o),l=e,g=0,u=f=a,h=c=d=s}}return m}(l,d,u,n);break;default:throw new Error(`Unsupported decimation algorithm '${i.algorithm}'`)}e._decimated=c}}))},destroy(t){mo(t)}};function bo(t,e,i,n){if(n)return;let s=e[t],o=i[t];return"angle"===t&&(s=Zt(s),o=Zt(o)),{property:t,start:s,end:o}}function yo(t,e,i){for(;e>t;e--){const t=i[e];if(!isNaN(t.x)&&!isNaN(t.y))break}return e}function vo(t,e,i,n){return t&&e?n(t[i],e[i]):t?t[i]:e?e[i]:0}function _o(t,e){let i=[],n=!1;return at(t)?(n=!0,i=t):i=function(t,e){const{x:i=null,y:n=null}=t||{},s=e.points,o=[];return e.segments.forEach((({start:t,end:e})=>{e=yo(t,e,s);const r=s[t],a=s[e];null!==n?(o.push({x:r.x,y:n}),o.push({x:a.x,y:n})):null!==i&&(o.push({x:i,y:r.y}),o.push({x:i,y:a.y}))})),o}(t,e),i.length?new to({points:i,options:{tension:0},_loop:n,_fullLoop:n}):null}function wo(t){return t&&!1!==t.fill}function Ao(t,e,i){let n=t[e].fill;const s=[e];let o;if(!i)return n;for(;!1!==n&&-1===s.indexOf(n);){if(!ht(n))return n;if(o=t[n],!o)return!1;if(o.visible)return n;s.push(n),n=o.fill}return!1}function Mo(t,e,i){const n=function(t){const e=t.options,i=e.fill;let n=dt(i&&i.target,i);return void 0===n&&(n=!!e.backgroundColor),!1!==n&&null!==n&&(!0===n?"origin":n)}(t);if(lt(n))return!isNaN(n.value)&&n;let s=parseFloat(n);return ht(s)&&Math.floor(s)===s?function(t,e,i,n){return"-"!==t&&"+"!==t||(i=e+i),!(i===e||i<0||i>=n)&&i}(n[0],e,s,i):["origin","start","end","stack","shape"].indexOf(n)>=0&&n}function ko(t,e,i){const n=[];for(let s=0;s<i.length;s++){const o=i[s],{first:r,last:a,point:l}=Co(o,e,"x");if(!(!l||r&&a))if(r)n.unshift(l);else if(t.push(l),!a)break}t.push(...n)}function Co(t,e,i){const n=t.interpolate(e,i);if(!n)return{};const s=n[i],o=t.segments,r=t.points;let a=!1,l=!1;for(let t=0;t<o.length;t++){const e=o[t],n=r[e.start][i],h=r[e.end][i];if(Gt(s,n,h)){a=s===n,l=s===h;break}}return{first:a,last:l,point:n}}class So{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,e,i){const{x:n,y:s,radius:o}=this;return e=e||{start:0,end:Et},t.arc(n,s,o,e.end,e.start,!0),!i.bounds}interpolate(t){const{x:e,y:i,radius:n}=this,s=t.angle;return{x:e+Math.cos(s)*n,y:i+Math.sin(s)*n,angle:s}}}function Do(t,e,i){const n=function(t){const{chart:e,fill:i,line:n}=t;if(ht(i))return function(t,e){const i=t.getDatasetMeta(e);return i&&t.isDatasetVisible(e)?i.dataset:null}(e,i);if("stack"===i)return function(t){const{scale:e,index:i,line:n}=t,s=[],o=n.segments,r=n.points,a=function(t,e){const i=[],n=t.getMatchingVisibleMetas("line");for(let t=0;t<n.length;t++){const s=n[t];if(s.index===e)break;s.hidden||i.unshift(s.dataset)}return i}(e,i);a.push(_o({x:null,y:e.bottom},n));for(let t=0;t<o.length;t++){const e=o[t];for(let t=e.start;t<=e.end;t++)ko(s,r[t],a)}return new to({points:s,options:{}})}(t);if("shape"===i)return!0;const s=function(t){return(t.scale||{}).getPointPositionForValue?function(t){const{scale:e,fill:i}=t,n=e.options,s=e.getLabels().length,o=n.reverse?e.max:e.min,r=function(t,e,i){let n;return n="start"===t?i:"end"===t?e.options.reverse?e.min:e.max:lt(t)?t.value:e.getBaseValue(),n}(i,e,o),a=[];if(n.grid.circular){const t=e.getPointPositionForValue(0,o);return new So({x:t.x,y:t.y,radius:e.getDistanceFromCenterForValue(r)})}for(let t=0;t<s;++t)a.push(e.getPointPositionForValue(t,r));return a}(t):function(t){const{scale:e={},fill:i}=t,n=function(t,e){let i=null;return"start"===t?i=e.bottom:"end"===t?i=e.top:lt(t)?i=e.getPixelForValue(t.value):e.getBasePixel&&(i=e.getBasePixel()),i}(i,e);if(ht(n)){const t=e.isHorizontal();return{x:t?n:null,y:t?null:n}}return null}(t)}(t);return s instanceof So?s:_o(s,n)}(e),{line:s,scale:o,axis:r}=e,a=s.options,l=a.fill,h=a.backgroundColor,{above:c=h,below:d=h}=l||{};n&&s.points.length&&(Le(t,i),function(t,e){const{line:i,target:n,above:s,below:o,area:r,scale:a}=e,l=i._loop?"angle":e.axis;t.save(),"x"===l&&o!==s&&(Eo(t,n,r.top),Po(t,{line:i,target:n,color:s,scale:a,property:l}),t.restore(),t.save(),Eo(t,n,r.bottom)),Po(t,{line:i,target:n,color:o,scale:a,property:l}),t.restore()}(t,{line:s,target:n,above:c,below:d,area:i,scale:o,axis:r}),ze(t))}function Eo(t,e,i){const{segments:n,points:s}=e;let o=!0,r=!1;t.beginPath();for(const a of n){const{start:n,end:l}=a,h=s[n],c=s[yo(n,l,s)];o?(t.moveTo(h.x,h.y),o=!1):(t.lineTo(h.x,i),t.lineTo(h.x,h.y)),r=!!e.pathSegment(t,a,{move:r}),r?t.closePath():t.lineTo(c.x,i)}t.lineTo(e.first().x,i),t.closePath(),t.clip()}function Po(t,e){const{line:i,target:n,property:s,color:o,scale:r}=e,a=function(t,e,i){const n=t.segments,s=t.points,o=e.points,r=[];for(const t of n){let{start:n,end:a}=t;a=yo(n,a,s);const l=bo(i,s[n],s[a],t.loop);if(!e.segments){r.push({source:t,target:l,start:s[n],end:s[a]});continue}const h=Ni(e,l);for(const e of h){const n=bo(i,o[e.start],o[e.end],e.loop),a=Vi(t,s,n);for(const t of a)r.push({source:t,target:e,start:{[i]:vo(l,n,"start",Math.max)},end:{[i]:vo(l,n,"end",Math.min)}})}}return r}(i,n,s);for(const{source:e,target:l,start:h,end:c}of a){const{style:{backgroundColor:a=o}={}}=e,d=!0!==n;t.save(),t.fillStyle=a,Oo(t,r,d&&bo(s,h,c)),t.beginPath();const u=!!i.pathSegment(t,e);let f;if(d){u?t.closePath():To(t,n,c,s);const e=!!n.pathSegment(t,l,{move:u,reverse:!0});f=u&&e,f||To(t,n,h,s)}t.closePath(),t.fill(f?"evenodd":"nonzero"),t.restore()}}function Oo(t,e,i){const{top:n,bottom:s}=e.chart.chartArea,{property:o,start:r,end:a}=i||{};"x"===o&&(t.beginPath(),t.rect(r,n,a-r,s-n),t.clip())}function To(t,e,i,n){const s=e.interpolate(i,n);s&&t.lineTo(s.x,s.y)}var Ro={id:"filler",afterDatasetsUpdate(t,e,i){const n=(t.data.datasets||[]).length,s=[];let o,r,a,l;for(r=0;r<n;++r)o=t.getDatasetMeta(r),a=o.dataset,l=null,a&&a.options&&a instanceof to&&(l={visible:t.isDatasetVisible(r),index:r,fill:Mo(a,r,n),chart:t,axis:o.controller.options.indexAxis,scale:o.vScale,line:a}),o.$filler=l,s.push(l);for(r=0;r<n;++r)l=s[r],l&&!1!==l.fill&&(l.fill=Ao(s,r,i.propagate))},beforeDraw(t,e,i){const n="beforeDraw"===i.drawTime,s=t.getSortedVisibleDatasetMetas(),o=t.chartArea;for(let e=s.length-1;e>=0;--e){const i=s[e].$filler;i&&(i.line.updateControlPoints(o,i.axis),n&&i.fill&&Do(t.ctx,i,o))}},beforeDatasetsDraw(t,e,i){if("beforeDatasetsDraw"!==i.drawTime)return;const n=t.getSortedVisibleDatasetMetas();for(let e=n.length-1;e>=0;--e){const i=n[e].$filler;wo(i)&&Do(t.ctx,i,t.chartArea)}},beforeDatasetDraw(t,e,i){const n=e.meta.$filler;wo(n)&&"beforeDatasetDraw"===i.drawTime&&Do(t.ctx,n,t.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const Bo=(t,e)=>{let{boxHeight:i=e,boxWidth:n=e}=t;return t.usePointStyle&&(i=Math.min(i,e),n=t.pointStyleWidth||Math.min(n,e)),{boxWidth:n,boxHeight:i,itemHeight:Math.max(e,i)}};class Io extends os{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,i){this.maxWidth=t,this.maxHeight=e,this._margins=i,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const t=this.options.labels||{};let e=ft(t.generateLabels,[this.chart],this)||[];t.filter&&(e=e.filter((e=>t.filter(e,this.chart.data)))),t.sort&&(e=e.sort(((e,i)=>t.sort(e,i,this.chart.data)))),this.options.reverse&&e.reverse(),this.legendItems=e}fit(){const{options:t,ctx:e}=this;if(!t.display)return void(this.width=this.height=0);const i=t.labels,n=Je(i.font),s=n.size,o=this._computeTitleHeight(),{boxWidth:r,itemHeight:a}=Bo(i,s);let l,h;e.font=n.string,this.isHorizontal()?(l=this.maxWidth,h=this._fitRows(o,s,r,a)+10):(h=this.maxHeight,l=this._fitCols(o,n,r,a)+10),this.width=Math.min(l,t.maxWidth||this.maxWidth),this.height=Math.min(h,t.maxHeight||this.maxHeight)}_fitRows(t,e,i,n){const{ctx:s,maxWidth:o,options:{labels:{padding:r}}}=this,a=this.legendHitBoxes=[],l=this.lineWidths=[0],h=n+r;let c=t;s.textAlign="left",s.textBaseline="middle";let d=-1,u=-h;return this.legendItems.forEach(((t,f)=>{const p=i+e/2+s.measureText(t.text).width;(0===f||l[l.length-1]+p+2*r>o)&&(c+=h,l[l.length-(f>0?0:1)]=0,u+=h,d++),a[f]={left:0,top:u,row:d,width:p,height:n},l[l.length-1]+=p+r})),c}_fitCols(t,e,i,n){const{ctx:s,maxHeight:o,options:{labels:{padding:r}}}=this,a=this.legendHitBoxes=[],l=this.columnSizes=[],h=o-t;let c=r,d=0,u=0,f=0,p=0;return this.legendItems.forEach(((t,o)=>{const{itemWidth:g,itemHeight:m}=function(t,e,i,n,s){const o=function(t,e,i,n){let s=t.text;return s&&"string"!=typeof s&&(s=s.reduce(((t,e)=>t.length>e.length?t:e))),e+i.size/2+n.measureText(s).width}(n,t,e,i),r=function(t,e,i){let n=t;return"string"!=typeof e.text&&(n=Lo(e,i)),n}(s,n,e.lineHeight);return{itemWidth:o,itemHeight:r}}(i,e,s,t,n);o>0&&u+m+2*r>h&&(c+=d+r,l.push({width:d,height:u}),f+=d+r,p++,d=u=0),a[o]={left:f,top:u,col:p,width:g,height:m},d=Math.max(d,g),u+=m+r})),c+=d,l.push({width:d,height:u}),c}adjustHitBoxes(){if(!this.options.display)return;const t=this._computeTitleHeight(),{legendHitBoxes:e,options:{align:i,labels:{padding:n},rtl:s}}=this,o=Li(s,this.left,this.width);if(this.isHorizontal()){let s=0,r=ae(i,this.left+n,this.right-this.lineWidths[s]);for(const a of e)s!==a.row&&(s=a.row,r=ae(i,this.left+n,this.right-this.lineWidths[s])),a.top+=this.top+t+n,a.left=o.leftForLtr(o.x(r),a.width),r+=a.width+n}else{let s=0,r=ae(i,this.top+t+n,this.bottom-this.columnSizes[s].height);for(const a of e)a.col!==s&&(s=a.col,r=ae(i,this.top+t+n,this.bottom-this.columnSizes[s].height)),a.top=r,a.left+=this.left+n,a.left=o.leftForLtr(o.x(a.left),a.width),r+=a.height+n}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const t=this.ctx;Le(t,this),this._draw(),ze(t)}}_draw(){const{options:t,columnSizes:e,lineWidths:i,ctx:n}=this,{align:s,labels:o}=t,r=De.color,a=Li(t.rtl,this.left,this.width),l=Je(o.font),{padding:h}=o,c=l.size,d=c/2;let u;this.drawTitle(),n.textAlign=a.textAlign("left"),n.textBaseline="middle",n.lineWidth=.5,n.font=l.string;const{boxWidth:f,boxHeight:p,itemHeight:g}=Bo(o,c),m=this.isHorizontal(),x=this._computeTitleHeight();u=m?{x:ae(s,this.left+h,this.right-i[0]),y:this.top+h+x,line:0}:{x:this.left+h,y:ae(s,this.top+x+h,this.bottom-e[0].height),line:0},zi(this.ctx,t.textDirection);const b=g+h;this.legendItems.forEach(((y,v)=>{n.strokeStyle=y.fontColor,n.fillStyle=y.fontColor;const _=n.measureText(y.text).width,w=a.textAlign(y.textAlign||(y.textAlign=o.textAlign)),A=f+d+_;let M=u.x,k=u.y;if(a.setWidth(this.width),m?v>0&&M+A+h>this.right&&(k=u.y+=b,u.line++,M=u.x=ae(s,this.left+h,this.right-i[u.line])):v>0&&k+b>this.bottom&&(M=u.x=M+e[u.line].width+h,u.line++,k=u.y=ae(s,this.top+x+h,this.bottom-e[u.line].height)),function(t,e,i){if(isNaN(f)||f<=0||isNaN(p)||p<0)return;n.save();const s=dt(i.lineWidth,1);if(n.fillStyle=dt(i.fillStyle,r),n.lineCap=dt(i.lineCap,"butt"),n.lineDashOffset=dt(i.lineDashOffset,0),n.lineJoin=dt(i.lineJoin,"miter"),n.lineWidth=s,n.strokeStyle=dt(i.strokeStyle,r),n.setLineDash(dt(i.lineDash,[])),o.usePointStyle){const r={radius:p*Math.SQRT2/2,pointStyle:i.pointStyle,rotation:i.rotation,borderWidth:s},l=a.xPlus(t,f/2);Be(n,r,l,e+d,o.pointStyleWidth&&f)}else{const o=e+Math.max((c-p)/2,0),r=a.leftForLtr(t,f),l=Ke(i.borderRadius);n.beginPath(),Object.values(l).some((t=>0!==t))?He(n,{x:r,y:o,w:f,h:p,radius:l}):n.rect(r,o,f,p),n.fill(),0!==s&&n.stroke()}n.restore()}(a.x(M),k,y),M=((t,e,i,n)=>t===(n?"left":"right")?i:"center"===t?(e+i)/2:e)(w,M+f+d,m?M+A:this.right,t.rtl),function(t,e,i){Ne(n,i.text,t,e+g/2,l,{strikethrough:i.hidden,textAlign:a.textAlign(i.textAlign)})}(a.x(M),k,y),m)u.x+=A+h;else if("string"!=typeof y.text){const t=l.lineHeight;u.y+=Lo(y,t)+h}else u.y+=b})),Wi(this.ctx,t.textDirection)}drawTitle(){const t=this.options,e=t.title,i=Je(e.font),n=Ge(e.padding);if(!e.display)return;const s=Li(t.rtl,this.left,this.width),o=this.ctx,r=e.position,a=i.size/2,l=n.top+a;let h,c=this.left,d=this.width;if(this.isHorizontal())d=Math.max(...this.lineWidths),h=this.top+l,c=ae(t.align,c,this.right-d);else{const e=this.columnSizes.reduce(((t,e)=>Math.max(t,e.height)),0);h=l+ae(t.align,this.top,this.bottom-e-t.labels.padding-this._computeTitleHeight())}const u=ae(r,c,c+d);o.textAlign=s.textAlign(re(r)),o.textBaseline="middle",o.strokeStyle=e.color,o.fillStyle=e.color,o.font=i.string,Ne(o,e.text,u,h,i)}_computeTitleHeight(){const t=this.options.title,e=Je(t.font),i=Ge(t.padding);return t.display?e.lineHeight+i.height:0}_getLegendItemAt(t,e){let i,n,s;if(Gt(t,this.left,this.right)&&Gt(e,this.top,this.bottom))for(s=this.legendHitBoxes,i=0;i<s.length;++i)if(n=s[i],Gt(t,n.left,n.left+n.width)&&Gt(e,n.top,n.top+n.height))return this.legendItems[i];return null}handleEvent(t){const e=this.options;if(!function(t,e){return!("mousemove"!==t&&"mouseout"!==t||!e.onHover&&!e.onLeave)||!(!e.onClick||"click"!==t&&"mouseup"!==t)}(t.type,e))return;const i=this._getLegendItemAt(t.x,t.y);if("mousemove"===t.type||"mouseout"===t.type){const o=this._hoveredItem,r=(s=i,null!==(n=o)&&null!==s&&n.datasetIndex===s.datasetIndex&&n.index===s.index);o&&!r&&ft(e.onLeave,[t,o,this],this),this._hoveredItem=i,i&&!r&&ft(e.onHover,[t,i,this],this)}else i&&ft(e.onClick,[t,i,this],this);var n,s}}function Lo(t,e){return e*(t.text?t.text.length:0)}var zo={id:"legend",_element:Io,start(t,e,i){const n=t.legend=new Io({ctx:t.ctx,options:i,chart:t});Vn.configure(t,n,i),Vn.addBox(t,n)},stop(t){Vn.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,i){const n=t.legend;Vn.configure(t,n,i),n.options=i},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,i){const n=e.datasetIndex,s=i.chart;s.isDatasetVisible(n)?(s.hide(n),e.hidden=!0):(s.show(n),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const e=t.data.datasets,{labels:{usePointStyle:i,pointStyle:n,textAlign:s,color:o,useBorderRadius:r,borderRadius:a}}=t.legend.options;return t._getSortedDatasetMetas().map((t=>{const l=t.controller.getStyle(i?0:void 0),h=Ge(l.borderWidth);return{text:e[t.index].label,fillStyle:l.backgroundColor,fontColor:o,hidden:!t.visible,lineCap:l.borderCapStyle,lineDash:l.borderDash,lineDashOffset:l.borderDashOffset,lineJoin:l.borderJoinStyle,lineWidth:(h.width+h.height)/4,strokeStyle:l.borderColor,pointStyle:n||l.pointStyle,rotation:l.rotation,textAlign:s||l.textAlign,borderRadius:r&&(a||l.borderRadius),datasetIndex:t.index}}),this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class Wo extends os{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){const i=this.options;if(this.left=0,this.top=0,!i.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=t,this.height=this.bottom=e;const n=at(i.text)?i.text.length:1;this._padding=Ge(i.padding);const s=n*Je(i.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=s:this.width=s}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:e,left:i,bottom:n,right:s,options:o}=this,r=o.align;let a,l,h,c=0;return this.isHorizontal()?(l=ae(r,i,s),h=e+t,a=s-i):("left"===o.position?(l=i+t,h=ae(r,n,e),c=-.5*Dt):(l=s-t,h=ae(r,e,n),c=.5*Dt),a=n-e),{titleX:l,titleY:h,maxWidth:a,rotation:c}}draw(){const t=this.ctx,e=this.options;if(!e.display)return;const i=Je(e.font),n=i.lineHeight/2+this._padding.top,{titleX:s,titleY:o,maxWidth:r,rotation:a}=this._drawArgs(n);Ne(t,e.text,0,0,i,{color:e.color,maxWidth:r,rotation:a,textAlign:re(e.align),textBaseline:"middle",translation:[s,o]})}}var Fo={id:"title",_element:Wo,start(t,e,i){!function(t,e){const i=new Wo({ctx:t.ctx,options:e,chart:t});Vn.configure(t,i,e),Vn.addBox(t,i),t.titleBlock=i}(t,i)},stop(t){const e=t.titleBlock;Vn.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,i){const n=t.titleBlock;Vn.configure(t,n,i),n.options=i},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const jo=new WeakMap;var Vo={id:"subtitle",start(t,e,i){const n=new Wo({ctx:t.ctx,options:i,chart:t});Vn.configure(t,n,i),Vn.addBox(t,n),jo.set(t,n)},stop(t){Vn.removeBox(t,jo.get(t)),jo.delete(t)},beforeUpdate(t,e,i){const n=jo.get(t);Vn.configure(t,n,i),n.options=i},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const No={average(t){if(!t.length)return!1;let e,i,n=0,s=0,o=0;for(e=0,i=t.length;e<i;++e){const i=t[e].element;if(i&&i.hasValue()){const t=i.tooltipPosition();n+=t.x,s+=t.y,++o}}return{x:n/o,y:s/o}},nearest(t,e){if(!t.length)return!1;let i,n,s,o=e.x,r=e.y,a=Number.POSITIVE_INFINITY;for(i=0,n=t.length;i<n;++i){const n=t[i].element;if(n&&n.hasValue()){const t=$t(e,n.getCenterPoint());t<a&&(a=t,s=n)}}if(s){const t=s.tooltipPosition();o=t.x,r=t.y}return{x:o,y:r}}};function Ho(t,e){return e&&(at(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function Yo(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function Xo(t,e){const{element:i,datasetIndex:n,index:s}=e,o=t.getDatasetMeta(n).controller,{label:r,value:a}=o.getLabelAndValue(s);return{chart:t,label:r,parsed:o.getParsed(s),raw:t.data.datasets[n].data[s],formattedValue:a,dataset:o.getDataset(),dataIndex:s,datasetIndex:n,element:i}}function $o(t,e){const i=t.chart.ctx,{body:n,footer:s,title:o}=t,{boxWidth:r,boxHeight:a}=e,l=Je(e.bodyFont),h=Je(e.titleFont),c=Je(e.footerFont),d=o.length,u=s.length,f=n.length,p=Ge(e.padding);let g=p.height,m=0,x=n.reduce(((t,e)=>t+e.before.length+e.lines.length+e.after.length),0);x+=t.beforeBody.length+t.afterBody.length,d&&(g+=d*h.lineHeight+(d-1)*e.titleSpacing+e.titleMarginBottom),x&&(g+=f*(e.displayColors?Math.max(a,l.lineHeight):l.lineHeight)+(x-f)*l.lineHeight+(x-1)*e.bodySpacing),u&&(g+=e.footerMarginTop+u*c.lineHeight+(u-1)*e.footerSpacing);let b=0;const y=function(t){m=Math.max(m,i.measureText(t).width+b)};return i.save(),i.font=h.string,pt(t.title,y),i.font=l.string,pt(t.beforeBody.concat(t.afterBody),y),b=e.displayColors?r+2+e.boxPadding:0,pt(n,(t=>{pt(t.before,y),pt(t.lines,y),pt(t.after,y)})),b=0,i.font=c.string,pt(t.footer,y),i.restore(),m+=p.width,{width:m,height:g}}function Uo(t,e,i,n){const{x:s,width:o}=i,{width:r,chartArea:{left:a,right:l}}=t;let h="center";return"center"===n?h=s<=(a+l)/2?"left":"right":s<=o/2?h="left":s>=r-o/2&&(h="right"),function(t,e,i,n){const{x:s,width:o}=n,r=i.caretSize+i.caretPadding;return"left"===t&&s+o+r>e.width||"right"===t&&s-o-r<0||void 0}(h,t,e,i)&&(h="center"),h}function Zo(t,e,i){const n=i.yAlign||e.yAlign||function(t,e){const{y:i,height:n}=e;return i<n/2?"top":i>t.height-n/2?"bottom":"center"}(t,i);return{xAlign:i.xAlign||e.xAlign||Uo(t,e,i,n),yAlign:n}}function qo(t,e,i,n){const{caretSize:s,caretPadding:o,cornerRadius:r}=t,{xAlign:a,yAlign:l}=i,h=s+o,{topLeft:c,topRight:d,bottomLeft:u,bottomRight:f}=Ke(r);let p=function(t,e){let{x:i,width:n}=t;return"right"===e?i-=n:"center"===e&&(i-=n/2),i}(e,a);const g=function(t,e,i){let{y:n,height:s}=t;return"top"===e?n+=i:n-="bottom"===e?s+i:s/2,n}(e,l,h);return"center"===l?"left"===a?p+=h:"right"===a&&(p-=h):"left"===a?p-=Math.max(c,u)+s:"right"===a&&(p+=Math.max(d,f)+s),{x:Kt(p,0,n.width-e.width),y:Kt(g,0,n.height-e.height)}}function Ko(t,e,i){const n=Ge(i.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-n.right:t.x+n.left}function Go(t){return Ho([],Yo(t))}function Jo(t,e){const i=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return i?t.override(i):t}const Qo={beforeTitle:st,title(t){if(t.length>0){const e=t[0],i=e.chart.data.labels,n=i?i.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(n>0&&e.dataIndex<n)return i[e.dataIndex]}return""},afterTitle:st,beforeBody:st,beforeLabel:st,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");const i=t.formattedValue;return rt(i)||(e+=i),e},labelColor(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:st,afterBody:st,beforeFooter:st,footer:st,afterFooter:st};function tr(t,e,i,n){const s=t[e].call(i,n);return void 0===s?Qo[e].call(i,n):s}class er extends os{static positioners=No;constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this._cachedAnimations;if(t)return t;const e=this.chart,i=this.options.setContext(this.getContext()),n=i.enabled&&e.options.animation&&i.animations,s=new Ki(this.chart,n);return n._cacheable&&(this._cachedAnimations=Object.freeze(s)),s}getContext(){return this.$context||(this.$context=(this,ti(this.chart.getContext(),{tooltip:this,tooltipItems:this._tooltipItems,type:"tooltip"})))}getTitle(t,e){const{callbacks:i}=e,n=tr(i,"beforeTitle",this,t),s=tr(i,"title",this,t),o=tr(i,"afterTitle",this,t);let r=[];return r=Ho(r,Yo(n)),r=Ho(r,Yo(s)),r=Ho(r,Yo(o)),r}getBeforeBody(t,e){return Go(tr(e.callbacks,"beforeBody",this,t))}getBody(t,e){const{callbacks:i}=e,n=[];return pt(t,(t=>{const e={before:[],lines:[],after:[]},s=Jo(i,t);Ho(e.before,Yo(tr(s,"beforeLabel",this,t))),Ho(e.lines,tr(s,"label",this,t)),Ho(e.after,Yo(tr(s,"afterLabel",this,t))),n.push(e)})),n}getAfterBody(t,e){return Go(tr(e.callbacks,"afterBody",this,t))}getFooter(t,e){const{callbacks:i}=e,n=tr(i,"beforeFooter",this,t),s=tr(i,"footer",this,t),o=tr(i,"afterFooter",this,t);let r=[];return r=Ho(r,Yo(n)),r=Ho(r,Yo(s)),r=Ho(r,Yo(o)),r}_createItems(t){const e=this._active,i=this.chart.data,n=[],s=[],o=[];let r,a,l=[];for(r=0,a=e.length;r<a;++r)l.push(Xo(this.chart,e[r]));return t.filter&&(l=l.filter(((e,n,s)=>t.filter(e,n,s,i)))),t.itemSort&&(l=l.sort(((e,n)=>t.itemSort(e,n,i)))),pt(l,(e=>{const i=Jo(t.callbacks,e);n.push(tr(i,"labelColor",this,e)),s.push(tr(i,"labelPointStyle",this,e)),o.push(tr(i,"labelTextColor",this,e))})),this.labelColors=n,this.labelPointStyles=s,this.labelTextColors=o,this.dataPoints=l,l}update(t,e){const i=this.options.setContext(this.getContext()),n=this._active;let s,o=[];if(n.length){const t=No[i.position].call(this,n,this._eventPosition);o=this._createItems(i),this.title=this.getTitle(o,i),this.beforeBody=this.getBeforeBody(o,i),this.body=this.getBody(o,i),this.afterBody=this.getAfterBody(o,i),this.footer=this.getFooter(o,i);const e=this._size=$o(this,i),r=Object.assign({},t,e),a=Zo(this.chart,i,r),l=qo(i,r,a,this.chart);this.xAlign=a.xAlign,this.yAlign=a.yAlign,s={opacity:1,x:l.x,y:l.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==this.opacity&&(s={opacity:0});this._tooltipItems=o,this.$context=void 0,s&&this._resolveAnimations().update(this,s),t&&i.external&&i.external.call(this,{chart:this.chart,tooltip:this,replay:e})}drawCaret(t,e,i,n){const s=this.getCaretPosition(t,i,n);e.lineTo(s.x1,s.y1),e.lineTo(s.x2,s.y2),e.lineTo(s.x3,s.y3)}getCaretPosition(t,e,i){const{xAlign:n,yAlign:s}=this,{caretSize:o,cornerRadius:r}=i,{topLeft:a,topRight:l,bottomLeft:h,bottomRight:c}=Ke(r),{x:d,y:u}=t,{width:f,height:p}=e;let g,m,x,b,y,v;return"center"===s?(y=u+p/2,"left"===n?(g=d,m=g-o,b=y+o,v=y-o):(g=d+f,m=g+o,b=y-o,v=y+o),x=g):(m="left"===n?d+Math.max(a,h)+o:"right"===n?d+f-Math.max(l,c)-o:this.caretX,"top"===s?(b=u,y=b-o,g=m-o,x=m+o):(b=u+p,y=b+o,g=m+o,x=m-o),v=b),{x1:g,x2:m,x3:x,y1:b,y2:y,y3:v}}drawTitle(t,e,i){const n=this.title,s=n.length;let o,r,a;if(s){const l=Li(i.rtl,this.x,this.width);for(t.x=Ko(this,i.titleAlign,i),e.textAlign=l.textAlign(i.titleAlign),e.textBaseline="middle",o=Je(i.titleFont),r=i.titleSpacing,e.fillStyle=i.titleColor,e.font=o.string,a=0;a<s;++a)e.fillText(n[a],l.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+r,a+1===s&&(t.y+=i.titleMarginBottom-r)}}_drawColorBox(t,e,i,n,s){const o=this.labelColors[i],r=this.labelPointStyles[i],{boxHeight:a,boxWidth:l}=s,h=Je(s.bodyFont),c=Ko(this,"left",s),d=n.x(c),u=a<h.lineHeight?(h.lineHeight-a)/2:0,f=e.y+u;if(s.usePointStyle){const e={radius:Math.min(l,a)/2,pointStyle:r.pointStyle,rotation:r.rotation,borderWidth:1},i=n.leftForLtr(d,l)+l/2,h=f+a/2;t.strokeStyle=s.multiKeyBackground,t.fillStyle=s.multiKeyBackground,Re(t,e,i,h),t.strokeStyle=o.borderColor,t.fillStyle=o.backgroundColor,Re(t,e,i,h)}else{t.lineWidth=lt(o.borderWidth)?Math.max(...Object.values(o.borderWidth)):o.borderWidth||1,t.strokeStyle=o.borderColor,t.setLineDash(o.borderDash||[]),t.lineDashOffset=o.borderDashOffset||0;const e=n.leftForLtr(d,l),i=n.leftForLtr(n.xPlus(d,1),l-2),r=Ke(o.borderRadius);Object.values(r).some((t=>0!==t))?(t.beginPath(),t.fillStyle=s.multiKeyBackground,He(t,{x:e,y:f,w:l,h:a,radius:r}),t.fill(),t.stroke(),t.fillStyle=o.backgroundColor,t.beginPath(),He(t,{x:i,y:f+1,w:l-2,h:a-2,radius:r}),t.fill()):(t.fillStyle=s.multiKeyBackground,t.fillRect(e,f,l,a),t.strokeRect(e,f,l,a),t.fillStyle=o.backgroundColor,t.fillRect(i,f+1,l-2,a-2))}t.fillStyle=this.labelTextColors[i]}drawBody(t,e,i){const{body:n}=this,{bodySpacing:s,bodyAlign:o,displayColors:r,boxHeight:a,boxWidth:l,boxPadding:h}=i,c=Je(i.bodyFont);let d=c.lineHeight,u=0;const f=Li(i.rtl,this.x,this.width),p=function(i){e.fillText(i,f.x(t.x+u),t.y+d/2),t.y+=d+s},g=f.textAlign(o);let m,x,b,y,v,_,w;for(e.textAlign=o,e.textBaseline="middle",e.font=c.string,t.x=Ko(this,g,i),e.fillStyle=i.bodyColor,pt(this.beforeBody,p),u=r&&"right"!==g?"center"===o?l/2+h:l+2+h:0,y=0,_=n.length;y<_;++y){for(m=n[y],x=this.labelTextColors[y],e.fillStyle=x,pt(m.before,p),b=m.lines,r&&b.length&&(this._drawColorBox(e,t,y,f,i),d=Math.max(c.lineHeight,a)),v=0,w=b.length;v<w;++v)p(b[v]),d=c.lineHeight;pt(m.after,p)}u=0,d=c.lineHeight,pt(this.afterBody,p),t.y-=s}drawFooter(t,e,i){const n=this.footer,s=n.length;let o,r;if(s){const a=Li(i.rtl,this.x,this.width);for(t.x=Ko(this,i.footerAlign,i),t.y+=i.footerMarginTop,e.textAlign=a.textAlign(i.footerAlign),e.textBaseline="middle",o=Je(i.footerFont),e.fillStyle=i.footerColor,e.font=o.string,r=0;r<s;++r)e.fillText(n[r],a.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+i.footerSpacing}}drawBackground(t,e,i,n){const{xAlign:s,yAlign:o}=this,{x:r,y:a}=t,{width:l,height:h}=i,{topLeft:c,topRight:d,bottomLeft:u,bottomRight:f}=Ke(n.cornerRadius);e.fillStyle=n.backgroundColor,e.strokeStyle=n.borderColor,e.lineWidth=n.borderWidth,e.beginPath(),e.moveTo(r+c,a),"top"===o&&this.drawCaret(t,e,i,n),e.lineTo(r+l-d,a),e.quadraticCurveTo(r+l,a,r+l,a+d),"center"===o&&"right"===s&&this.drawCaret(t,e,i,n),e.lineTo(r+l,a+h-f),e.quadraticCurveTo(r+l,a+h,r+l-f,a+h),"bottom"===o&&this.drawCaret(t,e,i,n),e.lineTo(r+u,a+h),e.quadraticCurveTo(r,a+h,r,a+h-u),"center"===o&&"left"===s&&this.drawCaret(t,e,i,n),e.lineTo(r,a+c),e.quadraticCurveTo(r,a,r+c,a),e.closePath(),e.fill(),n.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this.chart,i=this.$animations,n=i&&i.x,s=i&&i.y;if(n||s){const i=No[t.position].call(this,this._active,this._eventPosition);if(!i)return;const o=this._size=$o(this,t),r=Object.assign({},i,this._size),a=Zo(e,t,r),l=qo(t,r,a,e);n._to===l.x&&s._to===l.y||(this.xAlign=a.xAlign,this.yAlign=a.yAlign,this.width=o.width,this.height=o.height,this.caretX=i.x,this.caretY=i.y,this._resolveAnimations().update(this,l))}}_willRender(){return!!this.opacity}draw(t){const e=this.options.setContext(this.getContext());let i=this.opacity;if(!i)return;this._updateAnimationTarget(e);const n={width:this.width,height:this.height},s={x:this.x,y:this.y};i=Math.abs(i)<.001?0:i;const o=Ge(e.padding),r=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;e.enabled&&r&&(t.save(),t.globalAlpha=i,this.drawBackground(s,t,n,e),zi(t,e.textDirection),s.y+=o.top,this.drawTitle(s,t,e),this.drawBody(s,t,e),this.drawFooter(s,t,e),Wi(t,e.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const i=this._active,n=t.map((({datasetIndex:t,index:e})=>{const i=this.chart.getDatasetMeta(t);if(!i)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:i.data[e],index:e}})),s=!gt(i,n),o=this._positionChanged(n,e);(s||o)&&(this._active=n,this._eventPosition=e,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,e,i=!0){if(e&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const n=this.options,s=this._active||[],o=this._getActiveElements(t,s,e,i),r=this._positionChanged(o,t),a=e||!gt(o,s)||r;return a&&(this._active=o,(n.enabled||n.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,e))),a}_getActiveElements(t,e,i,n){const s=this.options;if("mouseout"===t.type)return[];if(!n)return e;const o=this.chart.getElementsAtEventForMode(t,s.mode,s,i);return s.reverse&&o.reverse(),o}_positionChanged(t,e){const{caretX:i,caretY:n,options:s}=this,o=No[s.position].call(this,t,e);return!1!==o&&(i!==o.x||n!==o.y)}}var ir={id:"tooltip",_element:er,positioners:No,afterInit(t,e,i){i&&(t.tooltip=new er({chart:t,options:i}))},beforeUpdate(t,e,i){t.tooltip&&t.tooltip.initialize(i)},reset(t,e,i){t.tooltip&&t.tooltip.initialize(i)},afterDraw(t){const e=t.tooltip;if(e&&e._willRender()){const i={tooltip:e};if(!1===t.notifyPlugins("beforeTooltipDraw",{...i,cancelable:!0}))return;e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",i)}},afterEvent(t,e){if(t.tooltip){const i=e.replay;t.tooltip.handleEvent(e.event,i,e.inChartArea)&&(e.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:Qo},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},nr=Object.freeze({__proto__:null,Colors:po,Decimation:xo,Filler:Ro,Legend:zo,SubTitle:Vo,Title:Fo,Tooltip:ir});function sr(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}function or(t,e,{horizontal:i,minRotation:n}){const s=Nt(n),o=(i?Math.sin(s):Math.cos(s))||.001,r=.75*e*(""+t).length;return Math.min(e/o,r)}class rr extends ps{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return rt(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const{beginAtZero:t}=this.options,{minDefined:e,maxDefined:i}=this.getUserBounds();let{min:n,max:s}=this;const o=t=>n=e?n:t,r=t=>s=i?s:t;if(t){const t=zt(n),e=zt(s);t<0&&e<0?r(0):t>0&&e>0&&o(0)}if(n===s){let e=0===s?1:Math.abs(.05*s);r(s+e),t||o(n-e)}this.min=n,this.max=s}getTickLimit(){const t=this.options.ticks;let e,{maxTicksLimit:i,stepSize:n}=t;return n?(e=Math.ceil(this.max/n)-Math.floor(this.min/n)+1,e>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${n} would result generating up to ${e} ticks. Limiting to 1000.`),e=1e3)):(e=this.computeTickLimit(),i=i||11),i&&(e=Math.min(i,e)),e}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this.options,e=t.ticks;let i=this.getTickLimit();i=Math.max(2,i);const n=function(t,e){const i=[],{bounds:n,step:s,min:o,max:r,precision:a,count:l,maxTicks:h,maxDigits:c,includeBounds:d}=t,u=s||1,f=h-1,{min:p,max:g}=e,m=!rt(o),x=!rt(r),b=!rt(l),y=(g-p)/(c+1);let v,_,w,A,M=Ft((g-p)/f/u)*u;if(M<1e-14&&!m&&!x)return[{value:p},{value:g}];A=Math.ceil(g/M)-Math.floor(p/M),A>f&&(M=Ft(A*M/f/u)*u),rt(a)||(v=Math.pow(10,a),M=Math.ceil(M*v)/v),"ticks"===n?(_=Math.floor(p/M)*M,w=Math.ceil(g/M)*M):(_=p,w=g),m&&x&&s&&function(t,e){const i=Math.round(t);return i-e<=t&&i+e>=t}((r-o)/s,M/1e3)?(A=Math.round(Math.min((r-o)/M,h)),M=(r-o)/A,_=o,w=r):b?(_=m?o:_,w=x?r:w,A=l-1,M=(w-_)/A):(A=(w-_)/M,A=Wt(A,Math.round(A),M/1e3)?Math.round(A):Math.ceil(A));const k=Math.max(Yt(M),Yt(_));v=Math.pow(10,rt(a)?k:a),_=Math.round(_*v)/v,w=Math.round(w*v)/v;let C=0;for(m&&(d&&_!==o?(i.push({value:o}),_<o&&C++,Wt(Math.round((_+C*M)*v)/v,o,or(o,y,t))&&C++):_<o&&C++);C<A;++C){const t=Math.round((_+C*M)*v)/v;if(x&&t>r)break;i.push({value:t})}return x&&d&&w!==r?i.length&&Wt(i[i.length-1].value,r,or(r,y,t))?i[i.length-1].value=r:i.push({value:r}):x&&w!==r||i.push({value:w}),i}({maxTicks:i,bounds:t.bounds,min:t.min,max:t.max,precision:e.precision,step:e.stepSize,count:e.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:e.minRotation||0,includeBounds:!1!==e.includeBounds},this._range||this);return"ticks"===t.bounds&&Vt(n,this,"value"),t.reverse?(n.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),n}configure(){const t=this.ticks;let e=this.min,i=this.max;if(super.configure(),this.options.offset&&t.length){const n=(i-e)/Math.max(t.length-1,1)/2;e-=n,i+=n}this._startValue=e,this._endValue=i,this._valueRange=i-e}getLabelForValue(t){return ve(t,this.chart.options.locale,this.options.ticks.format)}}class ar extends rr{static id="linear";static defaults={ticks:{callback:we.formatters.numeric}};determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=ht(t)?t:0,this.max=ht(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){const t=this.isHorizontal(),e=t?this.width:this.height,i=Nt(this.options.ticks.minRotation),n=(t?Math.sin(i):Math.cos(i))||.001,s=this._resolveTickFontOptions(0);return Math.ceil(e/Math.min(40,s.lineHeight/n))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}const lr=t=>Math.floor(Lt(t)),hr=(t,e)=>Math.pow(10,lr(t)+e);function cr(t){return 1==t/Math.pow(10,lr(t))}function dr(t,e,i){const n=Math.pow(10,i),s=Math.floor(t/n);return Math.ceil(e/n)-s}class ur extends ps{static id="logarithmic";static defaults={ticks:{callback:we.formatters.logarithmic,major:{enabled:!0}}};constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){const i=rr.prototype.parse.apply(this,[t,e]);if(0!==i)return ht(i)&&i>0?i:null;this._zero=!0}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=ht(t)?Math.max(0,t):null,this.max=ht(e)?Math.max(0,e):null,this.options.beginAtZero&&(this._zero=!0),this._zero&&this.min!==this._suggestedMin&&!ht(this._userMin)&&(this.min=t===hr(this.min,0)?hr(this.min,-1):hr(this.min,0)),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let i=this.min,n=this.max;const s=e=>i=t?i:e,o=t=>n=e?n:t;i===n&&(i<=0?(s(1),o(10)):(s(hr(i,-1)),o(hr(n,1)))),i<=0&&s(hr(n,-1)),n<=0&&o(hr(i,1)),this.min=i,this.max=n}buildTicks(){const t=this.options,e=function(t,{min:e,max:i}){e=ct(t.min,e);const n=[],s=lr(e);let o=function(t,e){let i=lr(e-t);for(;dr(t,e,i)>10;)i++;for(;dr(t,e,i)<10;)i--;return Math.min(i,lr(t))}(e,i),r=o<0?Math.pow(10,Math.abs(o)):1;const a=Math.pow(10,o),l=s>o?Math.pow(10,s):0,h=Math.round((e-l)*r)/r,c=Math.floor((e-l)/a/10)*a*10;let d=Math.floor((h-c)/Math.pow(10,o)),u=ct(t.min,Math.round((l+c+d*Math.pow(10,o))*r)/r);for(;u<i;)n.push({value:u,major:cr(u),significand:d}),d>=10?d=d<15?15:20:d++,d>=20&&(o++,d=2,r=o>=0?1:r),u=Math.round((l+c+d*Math.pow(10,o))*r)/r;const f=ct(t.max,u);return n.push({value:f,major:cr(f),significand:d}),n}({min:this._userMin,max:this._userMax},this);return"ticks"===t.bounds&&Vt(e,this,"value"),t.reverse?(e.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),e}getLabelForValue(t){return void 0===t?"0":ve(t,this.chart.options.locale,this.options.ticks.format)}configure(){const t=this.min;super.configure(),this._startValue=Lt(t),this._valueRange=Lt(this.max)-Lt(t)}getPixelForValue(t){return void 0!==t&&0!==t||(t=this.min),null===t||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:(Lt(t)-this._startValue)/this._valueRange)}getValueForPixel(t){const e=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+e*this._valueRange)}}function fr(t){const e=t.ticks;if(e.display&&t.display){const t=Ge(e.backdropPadding);return dt(e.font&&e.font.size,De.font.size)+t.height}return 0}function pr(t,e,i){return i=at(i)?i:[i],{w:Pe(t,e.string,i),h:i.length*e.lineHeight}}function gr(t,e,i,n,s){return t===n||t===s?{start:e-i/2,end:e+i/2}:t<n||t>s?{start:e-i,end:e}:{start:e,end:e+i}}function mr(t,e,i,n,s){const o=Math.abs(Math.sin(i)),r=Math.abs(Math.cos(i));let a=0,l=0;n.start<e.l?(a=(e.l-n.start)/o,t.l=Math.min(t.l,e.l-a)):n.end>e.r&&(a=(n.end-e.r)/o,t.r=Math.max(t.r,e.r+a)),s.start<e.t?(l=(e.t-s.start)/r,t.t=Math.min(t.t,e.t-l)):s.end>e.b&&(l=(s.end-e.b)/r,t.b=Math.max(t.b,e.b+l))}function xr(t,e,i){const n=t.drawingArea,{extra:s,additionalAngle:o,padding:r,size:a}=i,l=t.getPointPosition(e,n+s+r,o),h=Math.round(Ht(Zt(l.angle+Rt))),c=function(t,e,i){return 90===i||270===i?t-=e/2:(i>270||i<90)&&(t-=e),t}(l.y,a.h,h),d=function(t){return 0===t||180===t?"center":t<180?"left":"right"}(h),u=(f=l.x,p=a.w,"right"===(g=d)?f-=p:"center"===g&&(f-=p/2),f);var f,p,g;return{visible:!0,x:l.x,y:c,textAlign:d,left:u,top:c,right:u+a.w,bottom:c+a.h}}function br(t,e){if(!e)return!0;const{left:i,top:n,right:s,bottom:o}=t;return!(Ie({x:i,y:n},e)||Ie({x:i,y:o},e)||Ie({x:s,y:n},e)||Ie({x:s,y:o},e))}function yr(t,e,i){const{left:n,top:s,right:o,bottom:r}=i,{backdropColor:a}=e;if(!rt(a)){const i=Ke(e.borderRadius),l=Ge(e.backdropPadding);t.fillStyle=a;const h=n-l.left,c=s-l.top,d=o-n+l.width,u=r-s+l.height;Object.values(i).some((t=>0!==t))?(t.beginPath(),He(t,{x:h,y:c,w:d,h:u,radius:i}),t.fill()):t.fillRect(h,c,d,u)}}function vr(t,e,i,n){const{ctx:s}=t;if(i)s.arc(t.xCenter,t.yCenter,e,0,Et);else{let i=t.getPointPosition(0,e);s.moveTo(i.x,i.y);for(let o=1;o<n;o++)i=t.getPointPosition(o,e),s.lineTo(i.x,i.y)}}class _r extends rr{static id="radialLinear";static defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:we.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:t=>t,padding:5,centerPointLabels:!1}};static defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"};static descriptors={angleLines:{_fallback:"grid"}};constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this._padding=Ge(fr(this.options)/2),e=this.width=this.maxWidth-t.width,i=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+e/2+t.left),this.yCenter=Math.floor(this.top+i/2+t.top),this.drawingArea=Math.floor(Math.min(e,i)/2)}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!1);this.min=ht(t)&&!isNaN(t)?t:0,this.max=ht(e)&&!isNaN(e)?e:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/fr(this.options))}generateTickLabels(t){rr.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map(((t,e)=>{const i=ft(this.options.pointLabels.callback,[t,e],this);return i||0===i?i:""})).filter(((t,e)=>this.chart.getDataVisibility(e)))}fit(){const t=this.options;t.display&&t.pointLabels.display?function(t){const e={l:t.left+t._padding.left,r:t.right-t._padding.right,t:t.top+t._padding.top,b:t.bottom-t._padding.bottom},i=Object.assign({},e),n=[],s=[],o=t._pointLabels.length,r=t.options.pointLabels,a=r.centerPointLabels?Dt/o:0;for(let l=0;l<o;l++){const o=r.setContext(t.getPointLabelContext(l));s[l]=o.padding;const h=t.getPointPosition(l,t.drawingArea+s[l],a),c=Je(o.font),d=pr(t.ctx,c,t._pointLabels[l]);n[l]=d;const u=Zt(t.getIndexAngle(l)+a),f=Math.round(Ht(u));mr(i,e,u,gr(f,h.x,d.w,0,180),gr(f,h.y,d.h,90,270))}t.setCenterPoint(e.l-i.l,i.r-e.r,e.t-i.t,i.b-e.b),t._pointLabelItems=function(t,e,i){const n=[],s=t._pointLabels.length,o=t.options,{centerPointLabels:r,display:a}=o.pointLabels,l={extra:fr(o)/2,additionalAngle:r?Dt/s:0};let h;for(let o=0;o<s;o++){l.padding=i[o],l.size=e[o];const s=xr(t,o,l);n.push(s),"auto"===a&&(s.visible=br(s,h),s.visible&&(h=s))}return n}(t,n,s)}(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,e,i,n){this.xCenter+=Math.floor((t-e)/2),this.yCenter+=Math.floor((i-n)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,e,i,n))}getIndexAngle(t){return Zt(t*(Et/(this._pointLabels.length||1))+Nt(this.options.startAngle||0))}getDistanceFromCenterForValue(t){if(rt(t))return NaN;const e=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*e:(t-this.min)*e}getValueForDistanceFromCenter(t){if(rt(t))return NaN;const e=t/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-e:this.min+e}getPointLabelContext(t){const e=this._pointLabels||[];if(t>=0&&t<e.length){const i=e[t];return function(t,e,i){return ti(t,{label:i,index:e,type:"pointLabel"})}(this.getContext(),t,i)}}getPointPosition(t,e,i=0){const n=this.getIndexAngle(t)-Rt+i;return{x:Math.cos(n)*e+this.xCenter,y:Math.sin(n)*e+this.yCenter,angle:n}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:e,top:i,right:n,bottom:s}=this._pointLabelItems[t];return{left:e,top:i,right:n,bottom:s}}drawBackground(){const{backgroundColor:t,grid:{circular:e}}=this.options;if(t){const i=this.ctx;i.save(),i.beginPath(),vr(this,this.getDistanceFromCenterForValue(this._endValue),e,this._pointLabels.length),i.closePath(),i.fillStyle=t,i.fill(),i.restore()}}drawGrid(){const t=this.ctx,e=this.options,{angleLines:i,grid:n,border:s}=e,o=this._pointLabels.length;let r,a,l;if(e.pointLabels.display&&function(t,e){const{ctx:i,options:{pointLabels:n}}=t;for(let s=e-1;s>=0;s--){const e=t._pointLabelItems[s];if(!e.visible)continue;const o=n.setContext(t.getPointLabelContext(s));yr(i,o,e);const r=Je(o.font),{x:a,y:l,textAlign:h}=e;Ne(i,t._pointLabels[s],a,l+r.lineHeight/2,r,{color:o.color,textAlign:h,textBaseline:"middle"})}}(this,o),n.display&&this.ticks.forEach(((t,e)=>{if(0!==e){a=this.getDistanceFromCenterForValue(t.value);const i=this.getContext(e),r=n.setContext(i),l=s.setContext(i);!function(t,e,i,n,s){const o=t.ctx,r=e.circular,{color:a,lineWidth:l}=e;!r&&!n||!a||!l||i<0||(o.save(),o.strokeStyle=a,o.lineWidth=l,o.setLineDash(s.dash),o.lineDashOffset=s.dashOffset,o.beginPath(),vr(t,i,r,n),o.closePath(),o.stroke(),o.restore())}(this,r,a,o,l)}})),i.display){for(t.save(),r=o-1;r>=0;r--){const n=i.setContext(this.getPointLabelContext(r)),{color:s,lineWidth:o}=n;o&&s&&(t.lineWidth=o,t.strokeStyle=s,t.setLineDash(n.borderDash),t.lineDashOffset=n.borderDashOffset,a=this.getDistanceFromCenterForValue(e.ticks.reverse?this.min:this.max),l=this.getPointPosition(r,a),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(l.x,l.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const t=this.ctx,e=this.options,i=e.ticks;if(!i.display)return;const n=this.getIndexAngle(0);let s,o;t.save(),t.translate(this.xCenter,this.yCenter),t.rotate(n),t.textAlign="center",t.textBaseline="middle",this.ticks.forEach(((n,r)=>{if(0===r&&!e.reverse)return;const a=i.setContext(this.getContext(r)),l=Je(a.font);if(s=this.getDistanceFromCenterForValue(this.ticks[r].value),a.showLabelBackdrop){t.font=l.string,o=t.measureText(n.label).width,t.fillStyle=a.backdropColor;const e=Ge(a.backdropPadding);t.fillRect(-o/2-e.left,-s-l.size/2-e.top,o+e.width,l.size+e.height)}Ne(t,n.label,0,-s,l,{color:a.color,strokeColor:a.textStrokeColor,strokeWidth:a.textStrokeWidth})})),t.restore()}drawTitle(){}}const wr={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},Ar=Object.keys(wr);function Mr(t,e){return t-e}function kr(t,e){if(rt(e))return null;const i=t._adapter,{parser:n,round:s,isoWeekday:o}=t._parseOpts;let r=e;return"function"==typeof n&&(r=n(r)),ht(r)||(r="string"==typeof n?i.parse(r,n):i.parse(r)),null===r?null:(s&&(r="week"!==s||!jt(o)&&!0!==o?i.startOf(r,s):i.startOf(r,"isoWeek",o)),+r)}function Cr(t,e,i,n){const s=Ar.length;for(let o=Ar.indexOf(t);o<s-1;++o){const t=wr[Ar[o]],s=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((i-e)/(s*t.size))<=n)return Ar[o]}return Ar[s-1]}function Sr(t,e,i){if(i){if(i.length){const{lo:n,hi:s}=Jt(i,e);t[i[n]>=e?i[n]:i[s]]=!0}}else t[e]=!0}function Dr(t,e,i){const n=[],s={},o=e.length;let r,a;for(r=0;r<o;++r)a=e[r],s[a]=r,n.push({value:a,major:!1});return 0!==o&&i?function(t,e,i,n){const s=t._adapter,o=+s.startOf(e[0].value,n),r=e[e.length-1].value;let a,l;for(a=o;a<=r;a=+s.add(a,1,n))l=i[a],l>=0&&(e[l].major=!0);return e}(t,n,s,i):n}class Er extends ps{static id="time";static defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",callback:!1,major:{enabled:!1}}};constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e={}){const i=t.time||(t.time={}),n=this._adapter=new An(t.adapters.date);n.init(e),vt(i.displayFormats,n.formats()),this._parseOpts={parser:i.parser,round:i.round,isoWeekday:i.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:kr(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this.options,e=this._adapter,i=t.time.unit||"day";let{min:n,max:s,minDefined:o,maxDefined:r}=this.getUserBounds();function a(t){o||isNaN(t.min)||(n=Math.min(n,t.min)),r||isNaN(t.max)||(s=Math.max(s,t.max))}o&&r||(a(this._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||a(this.getMinMax(!1))),n=ht(n)&&!isNaN(n)?n:+e.startOf(Date.now(),i),s=ht(s)&&!isNaN(s)?s:+e.endOf(Date.now(),i)+1,this.min=Math.min(n,s-1),this.max=Math.max(n+1,s)}_getLabelBounds(){const t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],i=t[t.length-1]),{min:e,max:i}}buildTicks(){const t=this.options,e=t.time,i=t.ticks,n="labels"===i.source?this.getLabelTimestamps():this._generate();"ticks"===t.bounds&&n.length&&(this.min=this._userMin||n[0],this.max=this._userMax||n[n.length-1]);const s=this.min,o=function(t,e,i){let n=0,s=t.length;for(;n<s&&t[n]<e;)n++;for(;s>n&&t[s-1]>i;)s--;return n>0||s<t.length?t.slice(n,s):t}(n,s,this.max);return this._unit=e.unit||(i.autoSkip?Cr(e.minUnit,this.min,this.max,this._getLabelCapacity(s)):function(t,e,i,n,s){for(let o=Ar.length-1;o>=Ar.indexOf(i);o--){const i=Ar[o];if(wr[i].common&&t._adapter.diff(s,n,i)>=e-1)return i}return Ar[i?Ar.indexOf(i):0]}(this,o.length,e.minUnit,this.min,this.max)),this._majorUnit=i.major.enabled&&"year"!==this._unit?function(t){for(let e=Ar.indexOf(t)+1,i=Ar.length;e<i;++e)if(wr[Ar[e]].common)return Ar[e]}(this._unit):void 0,this.initOffsets(n),t.reverse&&o.reverse(),Dr(this,o,this._majorUnit)}afterAutoSkip(){this.options.offsetAfterAutoskip&&this.initOffsets(this.ticks.map((t=>+t.value)))}initOffsets(t=[]){let e,i,n=0,s=0;this.options.offset&&t.length&&(e=this.getDecimalForValue(t[0]),n=1===t.length?1-e:(this.getDecimalForValue(t[1])-e)/2,i=this.getDecimalForValue(t[t.length-1]),s=1===t.length?i:(i-this.getDecimalForValue(t[t.length-2]))/2);const o=t.length<3?.5:.25;n=Kt(n,0,o),s=Kt(s,0,o),this._offsets={start:n,end:s,factor:1/(n+1+s)}}_generate(){const t=this._adapter,e=this.min,i=this.max,n=this.options,s=n.time,o=s.unit||Cr(s.minUnit,e,i,this._getLabelCapacity(e)),r=dt(n.ticks.stepSize,1),a="week"===o&&s.isoWeekday,l=jt(a)||!0===a,h={};let c,d,u=e;if(l&&(u=+t.startOf(u,"isoWeek",a)),u=+t.startOf(u,l?"day":o),t.diff(i,e,o)>1e5*r)throw new Error(e+" and "+i+" are too far apart with stepSize of "+r+" "+o);const f="data"===n.ticks.source&&this.getDataTimestamps();for(c=u,d=0;c<i;c=+t.add(c,r,o),d++)Sr(h,c,f);return c!==i&&"ticks"!==n.bounds&&1!==d||Sr(h,c,f),Object.keys(h).sort(Mr).map((t=>+t))}getLabelForValue(t){const e=this._adapter,i=this.options.time;return i.tooltipFormat?e.format(t,i.tooltipFormat):e.format(t,i.displayFormats.datetime)}format(t,e){const i=this.options.time.displayFormats,n=this._unit,s=e||i[n];return this._adapter.format(t,s)}_tickFormatFunction(t,e,i,n){const s=this.options,o=s.ticks.callback;if(o)return ft(o,[t,e,i],this);const r=s.time.displayFormats,a=this._unit,l=this._majorUnit,h=a&&r[a],c=l&&r[l],d=i[e],u=l&&c&&d&&d.major;return this._adapter.format(t,n||(u?c:h))}generateTickLabels(t){let e,i,n;for(e=0,i=t.length;e<i;++e)n=t[e],n.label=this._tickFormatFunction(n.value,e,t)}getDecimalForValue(t){return null===t?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){const e=this._offsets,i=this.getDecimalForValue(t);return this.getPixelForDecimal((e.start+i)*e.factor)}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return this.min+i*(this.max-this.min)}_getLabelSize(t){const e=this.options.ticks,i=this.ctx.measureText(t).width,n=Nt(this.isHorizontal()?e.maxRotation:e.minRotation),s=Math.cos(n),o=Math.sin(n),r=this._resolveTickFontOptions(0).size;return{w:i*s+r*o,h:i*o+r*s}}_getLabelCapacity(t){const e=this.options.time,i=e.displayFormats,n=i[e.unit]||i.millisecond,s=this._tickFormatFunction(t,0,Dr(this,[t],this._majorUnit),n),o=this._getLabelSize(s),r=Math.floor(this.isHorizontal()?this.width/o.w:this.height/o.h)-1;return r>0?r:1}getDataTimestamps(){let t,e,i=this._cache.data||[];if(i.length)return i;const n=this.getMatchingVisibleMetas();if(this._normalized&&n.length)return this._cache.data=n[0].controller.getAllParsedValues(this);for(t=0,e=n.length;t<e;++t)i=i.concat(n[t].controller.getAllParsedValues(this));return this._cache.data=this.normalize(i)}getLabelTimestamps(){const t=this._cache.labels||[];let e,i;if(t.length)return t;const n=this.getLabels();for(e=0,i=n.length;e<i;++e)t.push(kr(this,n[e]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return ne(t.sort(Mr))}}function Pr(t,e,i){let n,s,o,r,a=0,l=t.length-1;i?(e>=t[a].pos&&e<=t[l].pos&&({lo:a,hi:l}=Qt(t,"pos",e)),({pos:n,time:o}=t[a]),({pos:s,time:r}=t[l])):(e>=t[a].time&&e<=t[l].time&&({lo:a,hi:l}=Qt(t,"time",e)),({time:n,pos:o}=t[a]),({time:s,pos:r}=t[l]));const h=s-n;return h?o+(r-o)*(e-n)/h:o}var Or=Object.freeze({__proto__:null,CategoryScale:class extends ps{static id="category";static defaults={ticks:{callback:sr}};constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){const e=this._addedLabels;if(e.length){const t=this.getLabels();for(const{index:i,label:n}of e)t[i]===n&&t.splice(i,1);this._addedLabels=[]}super.init(t)}parse(t,e){if(rt(t))return null;const i=this.getLabels();return((t,e)=>null===t?null:Kt(Math.round(t),0,e))(e=isFinite(e)&&i[e]===t?e:function(t,e,i,n){const s=t.indexOf(e);return-1===s?((t,e,i,n)=>("string"==typeof e?(i=t.push(e)-1,n.unshift({index:i,label:e})):isNaN(e)&&(i=null),i))(t,e,i,n):s!==t.lastIndexOf(e)?i:s}(i,t,dt(e,t),this._addedLabels),i.length-1)}determineDataLimits(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let{min:i,max:n}=this.getMinMax(!0);"ticks"===this.options.bounds&&(t||(i=0),e||(n=this.getLabels().length-1)),this.min=i,this.max=n}buildTicks(){const t=this.min,e=this.max,i=this.options.offset,n=[];let s=this.getLabels();s=0===t&&e===s.length-1?s:s.slice(t,e+1),this._valueRange=Math.max(s.length-(i?0:1),1),this._startValue=this.min-(i?.5:0);for(let i=t;i<=e;i++)n.push({value:i});return n}getLabelForValue(t){return sr.call(this,t)}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return"number"!=typeof t&&(t=this.parse(t)),null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}},LinearScale:ar,LogarithmicScale:ur,RadialLinearScale:_r,TimeScale:Er,TimeSeriesScale:class extends Er{static id="timeseries";static defaults=Er.defaults;constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this._getTimestampsForTable(),e=this._table=this.buildLookupTable(t);this._minPos=Pr(e,this.min),this._tableRange=Pr(e,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){const{min:e,max:i}=this,n=[],s=[];let o,r,a,l,h;for(o=0,r=t.length;o<r;++o)l=t[o],l>=e&&l<=i&&n.push(l);if(n.length<2)return[{time:e,pos:0},{time:i,pos:1}];for(o=0,r=n.length;o<r;++o)h=n[o+1],a=n[o-1],l=n[o],Math.round((h+a)/2)!==l&&s.push({time:l,pos:o/(r-1)});return s}_generate(){const t=this.min,e=this.max;let i=super.getDataTimestamps();return i.includes(t)&&i.length||i.splice(0,0,t),i.includes(e)&&1!==i.length||i.push(e),i.sort(((t,e)=>t-e))}_getTimestampsForTable(){let t=this._cache.all||[];if(t.length)return t;const e=this.getDataTimestamps(),i=this.getLabelTimestamps();return t=e.length&&i.length?this.normalize(e.concat(i)):e.length?e:i,t=this._cache.all=t,t}getDecimalForValue(t){return(Pr(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return Pr(this._table,i*this._tableRange+this._minPos,!0)}}});const Tr=[vn,ao,nr,Or];Hs.register(...Tr);const Rr=Hs,Br={modes:{point:(t,e)=>Lr(t,e,{intersect:!0}),nearest:(t,e,i)=>function(t,e,i){let n=Number.POSITIVE_INFINITY;return Lr(t,e,i).reduce(((t,s)=>{const o=s.getCenterPoint(),r=function(t,e,i){return"x"===i?{x:t.x,y:e.y}:"y"===i?{x:e.x,y:t.y}:e}(e,o,i.axis),a=$t(e,r);return a<n?(t=[s],n=a):a===n&&t.push(s),t}),[]).sort(((t,e)=>t._index-e._index)).slice(0,1)}(t,e,i),x:(t,e,i)=>Lr(t,e,{intersect:i.intersect,axis:"x"}),y:(t,e,i)=>Lr(t,e,{intersect:i.intersect,axis:"y"})}};function Ir(t,e,i){return(Br.modes[i.mode]||Br.modes.nearest)(t,e,i)}function Lr(t,e,i){return t.visibleElements.filter((t=>i.intersect?t.inRange(e.x,e.y):function(t,e,i){return"x"!==i&&"y"!==i?t.inRange(e.x,e.y,"x",!0)||t.inRange(e.x,e.y,"y",!0):t.inRange(e.x,e.y,i,!0)}(t,e,i.axis)))}const zr=(t,e)=>e>t||t.length>e.length&&t.slice(0,e.length)===e,Wr=.001,Fr=(t,e,i)=>Math.min(i,Math.max(e,t));function jr(t,e,i){for(const n of Object.keys(t))t[n]=Fr(t[n],e,i);return t}function Vr(t,{x:e,y:i,x2:n,y2:s},o,r){const a=r/2,l=t.x>=e-a-Wr&&t.x<=n+a+Wr,h=t.y>=i-a-Wr&&t.y<=s+a+Wr;return"x"===o?l:("y"===o||l)&&h}function Nr(t,e){const{centerX:i,centerY:n}=t.getProps(["centerX","centerY"],e);return{x:i,y:n}}const Hr=t=>"string"==typeof t&&t.endsWith("%"),Yr=t=>parseFloat(t)/100,Xr=t=>Fr(Yr(t),0,1),$r=(t,e)=>({x:t,y:e,x2:t,y2:e,width:0,height:0}),Ur={box:t=>$r(t.centerX,t.centerY),ellipse:t=>({centerX:t.centerX,centerY:t.centerX,radius:0,width:0,height:0}),label:t=>$r(t.centerX,t.centerY),line:t=>$r(t.x,t.y),point:t=>({centerX:t.centerX,centerY:t.centerY,radius:0,width:0,height:0}),polygon:t=>$r(t.centerX,t.centerY)};function Zr(t,e){return"start"===e?0:"end"===e?t:Hr(e)?Xr(e)*t:t/2}function qr(t,e,i=!0){return"number"==typeof e?e:Hr(e)?(i?Xr(e):Yr(e))*t:t}function Kr(t,e="center"){return lt(t)?{x:dt(t.x,e),y:dt(t.y,e)}:{x:t=dt(t,e),y:t}}function Gr(t){return t&&(kt(t.xValue)||kt(t.yValue))}function Jr(t,e,i){const n=i.init;if(n)return!0===n?ta(e,i):function(t,e,i){const n=ft(i.init,[{chart:t,properties:e,options:i}]);return!0===n?ta(e,i):lt(n)?n:void 0}(t,e,i)}function Qr(t,e,i){let n=!1;return e.forEach((e=>{Ct(t[e])?(n=!0,i[e]=t[e]):kt(i[e])&&delete i[e]})),n}function ta(t,e){const i=e.type||"line";return Ur[i](t)}const ea=new Map,ia=t=>t.reduce((function(t,e){return t+e.string}),"");function na(t){if(t&&"object"==typeof t){const e=t.toString();return"[object HTMLImageElement]"===e||"[object HTMLCanvasElement]"===e}}function sa(t,{x:e,y:i},n){n&&(t.translate(e,i),t.rotate(Nt(n)),t.translate(-e,-i))}function oa(t,e){if(e&&e.borderWidth)return t.lineCap=e.borderCapStyle,t.setLineDash(e.borderDash),t.lineDashOffset=e.borderDashOffset,t.lineJoin=e.borderJoinStyle,t.lineWidth=e.borderWidth,t.strokeStyle=e.borderColor,!0}function ra(t,e){t.shadowColor=e.backgroundShadowColor,t.shadowBlur=e.shadowBlur,t.shadowOffsetX=e.shadowOffsetX,t.shadowOffsetY=e.shadowOffsetY}function aa(t,e){const i=e.content;if(na(i))return{width:qr(i.width,e.width),height:qr(i.height,e.height)};const n=e.font,s=at(n)?n.map((t=>Je(t))):[Je(n)],o=e.textStrokeWidth,r=at(i)?i:[i],a=r.join()+ia(s)+o+(t._measureText?"-spriting":"");return ea.has(a)||ea.set(a,function(t,e,i,n){t.save();const s=e.length;let o=0,r=n;for(let a=0;a<s;a++){const s=i[Math.min(a,i.length-1)];t.font=s.string;const l=e[a];o=Math.max(o,t.measureText(l).width+n),r+=s.lineHeight}return t.restore(),{width:o,height:r}}(t,r,s,o)),ea.get(a)}function la(t,e,i){const{x:n,y:s,width:o,height:r}=e;t.save(),ra(t,i);const a=oa(t,i);t.fillStyle=i.backgroundColor,t.beginPath(),He(t,{x:n,y:s,w:o,h:r,radius:jr(Ke(i.borderRadius),0,Math.min(o,r)/2)}),t.closePath(),t.fill(),a&&(t.shadowColor=i.borderShadowColor,t.stroke()),t.restore()}const ha={xScaleID:{min:"xMin",max:"xMax",start:"left",end:"right",startProp:"x",endProp:"x2"},yScaleID:{min:"yMin",max:"yMax",start:"bottom",end:"top",startProp:"y",endProp:"y2"}};function ca(t,e,i){return ht(e="number"==typeof e?e:t.parse(e))?t.getPixelForValue(e):i}function da(t,e,i){const n=e[i];if(n||"scaleID"===i)return n;const s=i.charAt(0),o=Object.values(t).filter((t=>t.axis&&t.axis===s));return o.length?o[0].id:s}function ua(t,e){if(t){const i=t.options.reverse;return{start:ca(t,e.min,i?e.end:e.start),end:ca(t,e.max,i?e.start:e.end)}}}function fa(t,e){const{chartArea:i,scales:n}=t,s=n[da(n,e,"xScaleID")],o=n[da(n,e,"yScaleID")];let r=i.width/2,a=i.height/2;return s&&(r=ca(s,e.xValue,s.left+s.width/2)),o&&(a=ca(o,e.yValue,o.top+o.height/2)),{x:r,y:a}}function pa(t,e){const i=t.scales,n=i[da(i,e,"xScaleID")],s=i[da(i,e,"yScaleID")];if(!n&&!s)return{};let{left:o,right:r}=n||t.chartArea,{top:a,bottom:l}=s||t.chartArea;const h=xa(n,{min:e.xMin,max:e.xMax,start:o,end:r});o=h.start,r=h.end;const c=xa(s,{min:e.yMin,max:e.yMax,start:l,end:a});return a=c.start,l=c.end,{x:o,y:a,x2:r,y2:l,width:r-o,height:l-a,centerX:o+(r-o)/2,centerY:a+(l-a)/2}}function ga(t,e){if(!Gr(e)){const i=pa(t,e);let n=e.radius;n&&!isNaN(n)||(n=Math.min(i.width,i.height)/2,e.radius=n);const s=2*n,o=i.centerX+e.xAdjust,r=i.centerY+e.yAdjust;return{x:o-n,y:r-n,x2:o+n,y2:r+n,centerX:o,centerY:r,width:s,height:s,radius:n}}return function(t,e){const i=fa(t,e),n=2*e.radius;return{x:i.x-e.radius+e.xAdjust,y:i.y-e.radius+e.yAdjust,x2:i.x+e.radius+e.xAdjust,y2:i.y+e.radius+e.yAdjust,centerX:i.x+e.xAdjust,centerY:i.y+e.yAdjust,radius:e.radius,width:n,height:n}}(t,e)}function ma(t,e){const i=pa(t,e);return i.initProperties=Jr(t,i,e),i.elements=[{type:"label",optionScope:"label",properties:ya(t,i,e),initProperties:i.initProperties}],i}function xa(t,e){const i=ua(t,e)||e;return{start:Math.min(i.start,i.end),end:Math.max(i.start,i.end)}}function ba(t,e){const{start:i,end:n,borderWidth:s}=t,{position:o,padding:{start:r,end:a},adjust:l}=e;return i+s/2+l+Zr(n-s-i-r-a-e.size,o)}function ya(t,e,i){const n=i.label;n.backgroundColor="transparent",n.callout.display=!1;const s=Kr(n.position),o=Ge(n.padding),r=aa(t.ctx,n),a=function({properties:t,options:e},i,n,s){const{x:o,x2:r,width:a}=t;return ba({start:o,end:r,size:a,borderWidth:e.borderWidth},{position:n.x,padding:{start:s.left,end:s.right},adjust:e.label.xAdjust,size:i.width})}({properties:e,options:i},r,s,o),l=function({properties:t,options:e},i,n,s){const{y:o,y2:r,height:a}=t;return ba({start:o,end:r,size:a,borderWidth:e.borderWidth},{position:n.y,padding:{start:s.top,end:s.bottom},adjust:e.label.yAdjust,size:i.height})}({properties:e,options:i},r,s,o),h=r.width+o.width,c=r.height+o.height;return{x:a,y:l,x2:a+h,y2:l+c,width:h,height:c,centerX:a+h/2,centerY:l+c/2,rotation:n.rotation}}function va(t,e,i){const n=Math.cos(i),s=Math.sin(i),o=e.x,r=e.y;return{x:o+n*(t.x-o)-s*(t.y-r),y:r+s*(t.x-o)+n*(t.y-r)}}const _a=["enter","leave"],wa=_a.concat("click");function Aa({state:t,event:e},i,n,s){let o;for(const r of n)s.indexOf(r)<0&&(o=Ma(r.options[i]||t.listeners[i],r,e)||o);return o}function Ma(t,e,i){return!0===ft(t,[e.$context,i])}const ka=["afterDraw","beforeDraw"];function Ca(t,e,i){if(t.hooked)return ft(e.options[i]||t.hooks[i],[e.$context])}function Sa(t,e,i,n){if(ht(e[i])&&!function(t,e,i){return kt(t[e])||kt(t[i])}(t.options,i,n)){const n=t[i]!==e[i];return t[i]=e[i],n}}function Da(t,e){for(const i of["scaleID","xScaleID","yScaleID"]){const n=da(e,t,i);n&&!e[n]&&Ea(t,i)&&console.warn(`No scale found with id '${n}' for annotation '${t.id}'`)}}function Ea(t,e){if("scaleID"===e)return!0;const i=e.charAt(0);for(const e of["Min","Max","Value"])if(kt(t[i+e]))return!0;return!1}function Pa(t,e,i,n){for(const s of i){const i=t[s];if(kt(i)){const t=e.parse(i);n.min=Math.min(n.min,t),n.max=Math.max(n.max,t)}}}class Oa extends os{inRange(t,e,i,n){const{x:s,y:o}=va({x:t,y:e},this.getCenterPoint(n),Nt(-this.options.rotation));return Vr({x:s,y:o},this.getProps(["x","y","x2","y2"],n),i,this.options.borderWidth)}getCenterPoint(t){return Nr(this,t)}draw(t){t.save(),sa(t,this.getCenterPoint(),this.options.rotation),la(t,this,this.options),t.restore()}get label(){return this.elements&&this.elements[0]}resolveElementProperties(t,e){return ma(t,e)}}Oa.id="boxAnnotation",Oa.defaults={adjustScaleRange:!0,backgroundShadowColor:"transparent",borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderRadius:0,borderShadowColor:"transparent",borderWidth:1,display:!0,init:void 0,label:{backgroundColor:"transparent",borderWidth:0,callout:{display:!1},color:"black",content:null,display:!1,drawTime:void 0,font:{family:void 0,lineHeight:void 0,size:void 0,style:void 0,weight:"bold"},height:void 0,opacity:void 0,padding:6,position:"center",rotation:void 0,textAlign:"start",textStrokeColor:void 0,textStrokeWidth:0,width:void 0,xAdjust:0,yAdjust:0,z:void 0},rotation:0,shadowBlur:0,shadowOffsetX:0,shadowOffsetY:0,xMax:void 0,xMin:void 0,xScaleID:void 0,yMax:void 0,yMin:void 0,yScaleID:void 0,z:0},Oa.defaultRoutes={borderColor:"color",backgroundColor:"color"},Oa.descriptors={label:{_fallback:!0}};const Ta=["left","bottom","top","right"];class Ra extends os{inRange(t,e,i,n){const{x:s,y:o}=va({x:t,y:e},this.getCenterPoint(n),Nt(-this.rotation));return Vr({x:s,y:o},this.getProps(["x","y","x2","y2"],n),i,this.options.borderWidth)}getCenterPoint(t){return Nr(this,t)}draw(t){const e=this.options,i=!kt(this._visible)||this._visible;e.display&&e.content&&i&&(t.save(),sa(t,this.getCenterPoint(),this.rotation),function(t,e){const{pointX:i,pointY:n,options:s}=e,o=s.callout,r=o&&o.display&&function(t,e){const i=e.position;return Ta.includes(i)?i:function(t,e){const{x:i,y:n,x2:s,y2:o,width:r,height:a,pointX:l,pointY:h,centerX:c,centerY:d,rotation:u}=t,f={x:c,y:d},p=e.start,g=qr(r,p),m=[i,i+g,i+g,s],x=[n+qr(a,p),o,n,o],b=[];for(let t=0;t<4;t++){const e=va({x:m[t],y:x[t]},f,Nt(u));b.push({position:Ta[t],distance:$t(e,{x:l,y:h})})}return b.sort(((t,e)=>t.distance-e.distance))[0].position}(t,e)}(e,o);if(!r||function(t,e,i){const{pointX:n,pointY:s}=t,o=e.margin;let r=n,a=s;return"left"===i?r+=o:"right"===i?r-=o:"top"===i?a+=o:"bottom"===i&&(a-=o),t.inRange(r,a)}(e,o,r))return;t.save(),t.beginPath();if(!oa(t,o))return t.restore();const{separatorStart:a,separatorEnd:l}=function(t,e){const{x:i,y:n,x2:s,y2:o}=t,r=function(t,e){const{width:i,height:n,options:s}=t,o=s.callout.margin+s.borderWidth/2;return"right"===e?i+o:"bottom"===e?n+o:-o}(t,e);let a,l;return"left"===e||"right"===e?(a={x:i+r,y:n},l={x:a.x,y:o}):(a={x:i,y:n+r},l={x:s,y:a.y}),{separatorStart:a,separatorEnd:l}}(e,r),{sideStart:h,sideEnd:c}=function(t,e,i){const{y:n,width:s,height:o,options:r}=t,a=r.callout.start,l=function(t,e){const i=e.side;return"left"===t||"top"===t?-i:i}(e,r.callout);let h,c;return"left"===e||"right"===e?(h={x:i.x,y:n+qr(o,a)},c={x:h.x+l,y:h.y}):(h={x:i.x+qr(s,a),y:i.y},c={x:h.x,y:h.y+l}),{sideStart:h,sideEnd:c}}(e,r,a);(o.margin>0||0===s.borderWidth)&&(t.moveTo(a.x,a.y),t.lineTo(l.x,l.y)),t.moveTo(h.x,h.y),t.lineTo(c.x,c.y);const d=va({x:i,y:n},e.getCenterPoint(),Nt(-e.rotation));t.lineTo(d.x,d.y),t.stroke(),t.restore()}(t,this),la(t,this,e),function(t,e,i){const n=i.content;if(na(n))return t.save(),t.globalAlpha=function(t,e){const i=jt(t)?t:e;return jt(i)?Fr(i,0,1):1}(i.opacity,n.style.opacity),t.drawImage(n,e.x,e.y,e.width,e.height),void t.restore();const s=at(n)?n:[n],o=i.font,r=at(o)?o.map((t=>Je(t))):[Je(o)],a=i.color,l=at(a)?a:[a],h=function(t,e){const{x:i,width:n}=t,s=e.textAlign;return"center"===s?i+n/2:"end"===s||"right"===s?i+n:i}(e,i),c=e.y+i.textStrokeWidth/2;t.save(),t.textBaseline="middle",t.textAlign=i.textAlign,function(t,e){if(e.textStrokeWidth>0)return t.lineJoin="round",t.miterLimit=2,t.lineWidth=e.textStrokeWidth,t.strokeStyle=e.textStrokeColor,!0}(t,i)&&function(t,{x:e,y:i},n,s){t.beginPath();let o=0;n.forEach((function(n,r){const a=s[Math.min(r,s.length-1)],l=a.lineHeight;t.font=a.string,t.strokeText(n,e,i+l/2+o),o+=l})),t.stroke()}(t,{x:h,y:c},s,r),function(t,{x:e,y:i},n,{fonts:s,colors:o}){let r=0;n.forEach((function(n,a){const l=o[Math.min(a,o.length-1)],h=s[Math.min(a,s.length-1)],c=h.lineHeight;t.beginPath(),t.font=h.string,t.fillStyle=l,t.fillText(n,e,i+c/2+r),r+=c,t.fill()}))}(t,{x:h,y:c},s,{fonts:r,colors:l}),t.restore()}(t,function({x:t,y:e,width:i,height:n,options:s}){const o=s.borderWidth/2,r=Ge(s.padding);return{x:t+r.left+o,y:e+r.top+o,width:i-r.left-r.right-s.borderWidth,height:n-r.top-r.bottom-s.borderWidth}}(this),e),t.restore())}resolveElementProperties(t,e){let i;if(Gr(e))i=fa(t,e);else{const{centerX:n,centerY:s}=pa(t,e);i={x:n,y:s}}const n=Ge(e.padding),s=function(t,e,i,n){const s=e.width+n.width+i.borderWidth,o=e.height+n.height+i.borderWidth,r=Kr(i.position,"center"),a=Ba(t.x,s,i.xAdjust,r.x),l=Ba(t.y,o,i.yAdjust,r.y);return{x:a,y:l,x2:a+s,y2:l+o,width:s,height:o,centerX:a+s/2,centerY:l+o/2}}(i,aa(t.ctx,e),e,n);return{initProperties:Jr(t,s,e),pointX:i.x,pointY:i.y,...s,rotation:e.rotation}}}function Ba(t,e,i=0,n){return t-Zr(e,n)+i}Ra.id="labelAnnotation",Ra.defaults={adjustScaleRange:!0,backgroundColor:"transparent",backgroundShadowColor:"transparent",borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderRadius:0,borderShadowColor:"transparent",borderWidth:0,callout:{borderCapStyle:"butt",borderColor:void 0,borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:1,display:!1,margin:5,position:"auto",side:5,start:"50%"},color:"black",content:null,display:!0,font:{family:void 0,lineHeight:void 0,size:void 0,style:void 0,weight:void 0},height:void 0,init:void 0,opacity:void 0,padding:6,position:"center",rotation:0,shadowBlur:0,shadowOffsetX:0,shadowOffsetY:0,textAlign:"center",textStrokeColor:void 0,textStrokeWidth:0,width:void 0,xAdjust:0,xMax:void 0,xMin:void 0,xScaleID:void 0,xValue:void 0,yAdjust:0,yMax:void 0,yMin:void 0,yScaleID:void 0,yValue:void 0,z:0},Ra.defaultRoutes={borderColor:"color"};const Ia=(t,e,i)=>({x:t.x+i*(e.x-t.x),y:t.y+i*(e.y-t.y)}),La=(t,e,i)=>Ia(e,i,Math.abs((t-e.y)/(i.y-e.y))).x,za=(t,e,i)=>Ia(e,i,Math.abs((t-e.x)/(i.x-e.x))).y,Wa=t=>t*t,Fa=(t,e,i,n)=>(1-n)*(1-n)*t+2*(1-n)*n*e+n*n*i,ja=(t,e,i,n)=>({x:Fa(t.x,e.x,i.x,n),y:Fa(t.y,e.y,i.y,n)}),Va=(t,e,i,n)=>2*(1-n)*(e-t)+2*n*(i-e),Na=(t,e,i,n)=>-Math.atan2(Va(t.x,e.x,i.x,n),Va(t.y,e.y,i.y,n))+.5*Dt;class Ha extends os{inRange(t,e,i,n){const s=this.options.borderWidth/2;if("x"!==i&&"y"!==i){const i={mouseX:t,mouseY:e},{path:o,ctx:r}=this;if(o){oa(r,this.options);const{chart:s}=this.$context,a=t*s.currentDevicePixelRatio,l=e*s.currentDevicePixelRatio,h=r.isPointInStroke(o,a,l)||$a(this,i,n);return r.restore(),h}return function(t,{mouseX:e,mouseY:i},n=.001,s){const{x:o,y:r,x2:a,y2:l}=t.getProps(["x","y","x2","y2"],s),h=a-o,c=l-r,d=Wa(h)+Wa(c),u=0===d?-1:((e-o)*h+(i-r)*c)/d;let f,p;return u<0?(f=o,p=r):u>1?(f=a,p=l):(f=o+u*h,p=r+u*c),Wa(e-f)+Wa(i-p)<=n}(this,i,Wa(s),n)||$a(this,i,n)}return function(t,{mouseX:e,mouseY:i},n,{hBorderWidth:s,useFinalPosition:o}){const r=((t,e,{x:i,y:n,x2:s,y2:o},r)=>"y"===r?{start:Math.min(n,o),end:Math.max(n,o),value:e}:{start:Math.min(i,s),end:Math.max(i,s),value:t})(e,i,t.getProps(["x","y","x2","y2"],o),n);return r.value>=r.start-s&&r.value<=r.end+s||$a(t,{mouseX:e,mouseY:i},o,n)}(this,{mouseX:t,mouseY:e},i,{hBorderWidth:s,useFinalPosition:n})}getCenterPoint(t){return Nr(this,t)}draw(t){const{x:e,y:i,x2:n,y2:s,cp:o,options:r}=this;if(t.save(),!oa(t,r))return t.restore();ra(t,r);const a=Math.sqrt(Math.pow(n-e,2)+Math.pow(s-i,2));if(r.curve&&o)return function(t,e,i,n){const{x:s,y:o,x2:r,y2:a,options:l}=e,{startOpts:h,endOpts:c,startAdjust:d,endAdjust:u}=qa(e),f={x:s,y:o},p={x:r,y:a},g=Na(f,i,p,0),m=Na(f,i,p,1)-Dt,x=ja(f,i,p,d/n),b=ja(f,i,p,1-u/n),y=new Path2D;t.beginPath(),y.moveTo(x.x,x.y),y.quadraticCurveTo(i.x,i.y,b.x,b.y),t.shadowColor=l.borderShadowColor,t.stroke(y),e.path=y,e.ctx=t,Ja(t,x,{angle:g,adjust:d},h),Ja(t,b,{angle:m,adjust:u},c)}(t,this,o,a),t.restore();const{startOpts:l,endOpts:h,startAdjust:c,endAdjust:d}=qa(this),u=Math.atan2(s-i,n-e);t.translate(e,i),t.rotate(u),t.beginPath(),t.moveTo(0+c,0),t.lineTo(a-d,0),t.shadowColor=r.borderShadowColor,t.stroke(),Ga(t,0,c,l),Ga(t,a,-d,h),t.restore()}get label(){return this.elements&&this.elements[0]}resolveElementProperties(t,e){const i=function(t,e){const{scales:i,chartArea:n}=t,s=i[e.scaleID],o={x:n.left,y:n.top,x2:n.right,y2:n.bottom};return s?function(t,e,i){const n=ca(t,i.value,NaN),s=ca(t,i.endValue,n);t.isHorizontal()?(e.x=n,e.x2=s):(e.y=n,e.y2=s)}(s,o,e):function(t,e,i){for(const n of Object.keys(ha)){const s=t[da(t,i,n)];if(s){const{min:t,max:o,start:r,end:a,startProp:l,endProp:h}=ha[n],c=ua(s,{min:i[t],max:i[o],start:s[r],end:s[a]});e[l]=c.start,e[h]=c.end}}}(i,o,e),o}(t,e),{x:n,y:s,x2:o,y2:r}=i,a=function({x:t,y:e,x2:i,y2:n},{top:s,right:o,bottom:r,left:a}){return!(t<a&&i<a||t>o&&i>o||e<s&&n<s||e>r&&n>r)}(i,t.chartArea),l=a?function(t,e,i){const{x:n,y:s}=Xa(t,e,i),{x:o,y:r}=Xa(e,t,i);return{x:n,y:s,x2:o,y2:r,width:Math.abs(o-n),height:Math.abs(r-s)}}({x:n,y:s},{x:o,y:r},t.chartArea):{x:n,y:s,x2:o,y2:r,width:Math.abs(o-n),height:Math.abs(r-s)};if(l.centerX=(o+n)/2,l.centerY=(r+s)/2,l.initProperties=Jr(t,l,e),e.curve){const t={x:l.x,y:l.y},i={x:l.x2,y:l.y2};l.cp=function(t,e,i){const{x:n,y:s,x2:o,y2:r,centerX:a,centerY:l}=t,h=Math.atan2(r-s,o-n),c=Kr(e.controlPoint,0);return va({x:a+qr(i,c.x,!1),y:l+qr(i,c.y,!1)},{x:a,y:l},h)}(l,e,$t(t,i))}const h=function(t,e,i){const n=i.borderWidth,s=Ge(i.padding),o=aa(t.ctx,i);return function(t,e,i,n){const{width:s,height:o,padding:r}=i,{xAdjust:a,yAdjust:l}=e,h={x:t.x,y:t.y},c={x:t.x2,y:t.y2},d="auto"===e.rotation?function(t){const{x:e,y:i,x2:n,y2:s}=t,o=Math.atan2(s-i,n-e);return o>Dt/2?o-Dt:o<Dt/-2?o+Dt:o}(t):Nt(e.rotation),u=function(t,e,i){const n=Math.cos(i),s=Math.sin(i);return{w:Math.abs(t*n)+Math.abs(e*s),h:Math.abs(t*s)+Math.abs(e*n)}}(s,o,d),f=function(t,e,i,n){let s;const o=function(t,e){const{x:i,x2:n,y:s,y2:o}=t,r=Math.min(s,o)-e.top,a=Math.min(i,n)-e.left,l=e.bottom-Math.max(s,o),h=e.right-Math.max(i,n);return{x:Math.min(a,h),y:Math.min(r,l),dx:a<=h?1:-1,dy:r<=l?1:-1}}(t,n);return s="start"===e.position?Ua({w:t.x2-t.x,h:t.y2-t.y},i,0,o):"end"===e.position?1-Ua({w:t.x-t.x2,h:t.y-t.y2},i,0,o):Zr(1,e.position),s}(t,e,{labelSize:u,padding:r},n),p=t.cp?ja(h,t.cp,c,f):Ia(h,c,f),g={size:u.w,min:n.left,max:n.right,padding:r.left},m={size:u.h,min:n.top,max:n.bottom,padding:r.top},x=Za(p.x,g)+a,b=Za(p.y,m)+l;return{x:x-s/2,y:b-o/2,x2:x+s/2,y2:b+o/2,centerX:x,centerY:b,pointX:p.x,pointY:p.y,width:s,height:o,rotation:Ht(d)}}(e,i,{width:o.width+s.width+n,height:o.height+s.height+n,padding:s},t.chartArea)}(t,l,e.label);return h._visible=a,l.elements=[{type:"label",optionScope:"label",properties:h,initProperties:l.initProperties}],l}}Ha.id="lineAnnotation";const Ya={backgroundColor:void 0,backgroundShadowColor:void 0,borderColor:void 0,borderDash:void 0,borderDashOffset:void 0,borderShadowColor:void 0,borderWidth:void 0,display:void 0,fill:void 0,length:void 0,shadowBlur:void 0,shadowOffsetX:void 0,shadowOffsetY:void 0,width:void 0};function Xa({x:t,y:e},i,{top:n,right:s,bottom:o,left:r}){return t<r&&(e=za(r,{x:t,y:e},i),t=r),t>s&&(e=za(s,{x:t,y:e},i),t=s),e<n&&(t=La(n,{x:t,y:e},i),e=n),e>o&&(t=La(o,{x:t,y:e},i),e=o),{x:t,y:e}}function $a(t,{mouseX:e,mouseY:i},n,s){const o=t.label;return o.options.display&&o.inRange(e,i,s,n)}function Ua(t,e,i,n){const{labelSize:s,padding:o}=e,r=t.w*n.dx,a=t.h*n.dy,l=r>0&&(s.w/2+o.left-n.x)/r,h=a>0&&(s.h/2+o.top-n.y)/a;return Fr(Math.max(l,h),0,.25)}function Za(t,e){const{size:i,min:n,max:s,padding:o}=e,r=i/2;return i>s-n?(s+n)/2:(n>=t-o-r&&(t=n+o+r),s<=t+o+r&&(t=s-o-r),t)}function qa(t){const e=t.options,i=e.arrowHeads&&e.arrowHeads.start,n=e.arrowHeads&&e.arrowHeads.end;return{startOpts:i,endOpts:n,startAdjust:Ka(t,i),endAdjust:Ka(t,n)}}function Ka(t,e){if(!e||!e.display)return 0;const{length:i,width:n}=e,s=t.options.borderWidth/2,o={x:i,y:n+s},r={x:0,y:s};return Math.abs(La(0,o,r))}function Ga(t,e,i,n){if(!n||!n.display)return;const{length:s,width:o,fill:r,backgroundColor:a,borderColor:l}=n,h=Math.abs(e-s)+i;t.beginPath(),ra(t,n),oa(t,n),t.moveTo(h,-o),t.lineTo(e+i,0),t.lineTo(h,o),!0===r?(t.fillStyle=a||l,t.closePath(),t.fill(),t.shadowColor="transparent"):t.shadowColor=n.borderShadowColor,t.stroke()}function Ja(t,{x:e,y:i},{angle:n,adjust:s},o){o&&o.display&&(t.save(),t.translate(e,i),t.rotate(n),Ga(t,0,-s,o),t.restore())}Ha.defaults={adjustScaleRange:!0,arrowHeads:{display:!1,end:Object.assign({},Ya),fill:!1,length:12,start:Object.assign({},Ya),width:6},borderDash:[],borderDashOffset:0,borderShadowColor:"transparent",borderWidth:2,curve:!1,controlPoint:{y:"-50%"},display:!0,endValue:void 0,init:void 0,label:{backgroundColor:"rgba(0,0,0,0.8)",backgroundShadowColor:"transparent",borderCapStyle:"butt",borderColor:"black",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderRadius:6,borderShadowColor:"transparent",borderWidth:0,callout:Object.assign({},Ra.defaults.callout),color:"#fff",content:null,display:!1,drawTime:void 0,font:{family:void 0,lineHeight:void 0,size:void 0,style:void 0,weight:"bold"},height:void 0,opacity:void 0,padding:6,position:"center",rotation:0,shadowBlur:0,shadowOffsetX:0,shadowOffsetY:0,textAlign:"center",textStrokeColor:void 0,textStrokeWidth:0,width:void 0,xAdjust:0,yAdjust:0,z:void 0},scaleID:void 0,shadowBlur:0,shadowOffsetX:0,shadowOffsetY:0,value:void 0,xMax:void 0,xMin:void 0,xScaleID:void 0,yMax:void 0,yMin:void 0,yScaleID:void 0,z:0},Ha.descriptors={arrowHeads:{start:{_fallback:!0},end:{_fallback:!0},_fallback:!0}},Ha.defaultRoutes={borderColor:"color"};class Qa extends os{inRange(t,e,i,n){const s=this.options.rotation,o=this.options.borderWidth;if("x"!==i&&"y"!==i)return function(t,e,i,n){const{width:s,height:o,centerX:r,centerY:a}=e,l=s/2,h=o/2;if(l<=0||h<=0)return!1;const c=Nt(i||0),d=n/2||0,u=Math.cos(c),f=Math.sin(c),p=Math.pow(u*(t.x-r)+f*(t.y-a),2),g=Math.pow(f*(t.x-r)-u*(t.y-a),2);return p/Math.pow(l+d,2)+g/Math.pow(h+d,2)<=1.0001}({x:t,y:e},this.getProps(["width","height","centerX","centerY"],n),s,o);const{x:r,y:a,x2:l,y2:h}=this.getProps(["x","y","x2","y2"],n),c=o/2,d="y"===i?{start:a,end:h}:{start:r,end:l},u=va({x:t,y:e},this.getCenterPoint(n),Nt(-s));return u[i]>=d.start-c-Wr&&u[i]<=d.end+c+Wr}getCenterPoint(t){return Nr(this,t)}draw(t){const{width:e,height:i,centerX:n,centerY:s,options:o}=this;t.save(),sa(t,this.getCenterPoint(),o.rotation),ra(t,this.options),t.beginPath(),t.fillStyle=o.backgroundColor;const r=oa(t,o);t.ellipse(n,s,i/2,e/2,Dt/2,0,2*Dt),t.fill(),r&&(t.shadowColor=o.borderShadowColor,t.stroke()),t.restore()}get label(){return this.elements&&this.elements[0]}resolveElementProperties(t,e){return ma(t,e)}}Qa.id="ellipseAnnotation",Qa.defaults={adjustScaleRange:!0,backgroundShadowColor:"transparent",borderDash:[],borderDashOffset:0,borderShadowColor:"transparent",borderWidth:1,display:!0,init:void 0,label:Object.assign({},Oa.defaults.label),rotation:0,shadowBlur:0,shadowOffsetX:0,shadowOffsetY:0,xMax:void 0,xMin:void 0,xScaleID:void 0,yMax:void 0,yMin:void 0,yScaleID:void 0,z:0},Qa.defaultRoutes={borderColor:"color",backgroundColor:"color"},Qa.descriptors={label:{_fallback:!0}};class tl extends os{inRange(t,e,i,n){const{x:s,y:o,x2:r,y2:a,width:l}=this.getProps(["x","y","x2","y2","width"],n),h=this.options.borderWidth;if("x"!==i&&"y"!==i)return function(t,e,i,n){if(!t||!e||i<=0)return!1;const s=n/2;return Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2)<=Math.pow(i+s,2)}({x:t,y:e},this.getCenterPoint(n),l/2,h);const c=h/2,d="y"===i?{start:o,end:a,value:e}:{start:s,end:r,value:t};return d.value>=d.start-c&&d.value<=d.end+c}getCenterPoint(t){return Nr(this,t)}draw(t){const e=this.options,i=e.borderWidth;if(e.radius<.1)return;t.save(),t.fillStyle=e.backgroundColor,ra(t,e);const n=oa(t,e);(function(t,e,i,n){const{radius:s,options:o}=e,r=o.pointStyle,a=o.rotation;let l=(a||0)*Tt;if(na(r))return t.save(),t.translate(i,n),t.rotate(l),t.drawImage(r,-r.width/2,-r.height/2,r.width,r.height),void t.restore();(t=>isNaN(t)||t<=0)(s)||function(t,{x:e,y:i,radius:n,rotation:s,style:o,rad:r}){let a,l,h,c;switch(t.beginPath(),o){default:t.arc(e,i,n,0,Et),t.closePath();break;case"triangle":t.moveTo(e+Math.sin(r)*n,i-Math.cos(r)*n),r+=It,t.lineTo(e+Math.sin(r)*n,i-Math.cos(r)*n),r+=It,t.lineTo(e+Math.sin(r)*n,i-Math.cos(r)*n),t.closePath();break;case"rectRounded":c=.516*n,h=n-c,a=Math.cos(r+Bt)*h,l=Math.sin(r+Bt)*h,t.arc(e-a,i-l,c,r-Dt,r-Rt),t.arc(e+l,i-a,c,r-Rt,r),t.arc(e+a,i+l,c,r,r+Rt),t.arc(e-l,i+a,c,r+Rt,r+Dt),t.closePath();break;case"rect":if(!s){h=Math.SQRT1_2*n,t.rect(e-h,i-h,2*h,2*h);break}r+=Bt;case"rectRot":a=Math.cos(r)*n,l=Math.sin(r)*n,t.moveTo(e-a,i-l),t.lineTo(e+l,i-a),t.lineTo(e+a,i+l),t.lineTo(e-l,i+a),t.closePath();break;case"crossRot":r+=Bt;case"cross":a=Math.cos(r)*n,l=Math.sin(r)*n,t.moveTo(e-a,i-l),t.lineTo(e+a,i+l),t.moveTo(e+l,i-a),t.lineTo(e-l,i+a);break;case"star":a=Math.cos(r)*n,l=Math.sin(r)*n,t.moveTo(e-a,i-l),t.lineTo(e+a,i+l),t.moveTo(e+l,i-a),t.lineTo(e-l,i+a),r+=Bt,a=Math.cos(r)*n,l=Math.sin(r)*n,t.moveTo(e-a,i-l),t.lineTo(e+a,i+l),t.moveTo(e+l,i-a),t.lineTo(e-l,i+a);break;case"line":a=Math.cos(r)*n,l=Math.sin(r)*n,t.moveTo(e-a,i-l),t.lineTo(e+a,i+l);break;case"dash":t.moveTo(e,i),t.lineTo(e+Math.cos(r)*n,i+Math.sin(r)*n)}t.fill()}(t,{x:i,y:n,radius:s,rotation:a,style:r,rad:l})})(t,this,this.centerX,this.centerY),n&&!na(e.pointStyle)&&(t.shadowColor=e.borderShadowColor,t.stroke()),t.restore(),e.borderWidth=i}resolveElementProperties(t,e){const i=ga(t,e);return i.initProperties=Jr(t,i,e),i}}tl.id="pointAnnotation",tl.defaults={adjustScaleRange:!0,backgroundShadowColor:"transparent",borderDash:[],borderDashOffset:0,borderShadowColor:"transparent",borderWidth:1,display:!0,init:void 0,pointStyle:"circle",radius:10,rotation:0,shadowBlur:0,shadowOffsetX:0,shadowOffsetY:0,xAdjust:0,xMax:void 0,xMin:void 0,xScaleID:void 0,xValue:void 0,yAdjust:0,yMax:void 0,yMin:void 0,yScaleID:void 0,yValue:void 0,z:0},tl.defaultRoutes={borderColor:"color",backgroundColor:"color"};class el extends os{inRange(t,e,i,n){if("x"!==i&&"y"!==i)return this.options.radius>=.1&&this.elements.length>1&&function(t,e,i,n){let s=!1,o=t[t.length-1].getProps(["bX","bY"],n);for(const r of t){const t=r.getProps(["bX","bY"],n);t.bY>i!=o.bY>i&&e<(o.bX-t.bX)*(i-t.bY)/(o.bY-t.bY)+t.bX&&(s=!s),o=t}return s}(this.elements,t,e,n);const s=va({x:t,y:e},this.getCenterPoint(n),Nt(-this.options.rotation)),o=this.elements.map((t=>"y"===i?t.bY:t.bX)),r=Math.min(...o),a=Math.max(...o);return s[i]>=r&&s[i]<=a}getCenterPoint(t){return Nr(this,t)}draw(t){const{elements:e,options:i}=this;t.save(),t.beginPath(),t.fillStyle=i.backgroundColor,ra(t,i);const n=oa(t,i);let s=!0;for(const i of e)s?(t.moveTo(i.x,i.y),s=!1):t.lineTo(i.x,i.y);t.closePath(),t.fill(),n&&(t.shadowColor=i.borderShadowColor,t.stroke()),t.restore()}resolveElementProperties(t,e){const i=ga(t,e),{sides:n,rotation:s}=e,o=[],r=2*Dt/n;let a=s*Tt;for(let s=0;s<n;s++,a+=r){const n=il(i,e,a);n.initProperties=Jr(t,i,e),o.push(n)}return i.elements=o,i}}function il({centerX:t,centerY:e},{radius:i,borderWidth:n},s){const o=n/2,r=Math.sin(s),a=Math.cos(s),l={x:t+r*i,y:e-a*i};return{type:"point",optionScope:"point",properties:{x:l.x,y:l.y,centerX:l.x,centerY:l.y,bX:t+r*(i+o),bY:e-a*(i+o)}}}el.id="polygonAnnotation",el.defaults={adjustScaleRange:!0,backgroundShadowColor:"transparent",borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderShadowColor:"transparent",borderWidth:1,display:!0,init:void 0,point:{radius:0},radius:10,rotation:0,shadowBlur:0,shadowOffsetX:0,shadowOffsetY:0,sides:3,xAdjust:0,xMax:void 0,xMin:void 0,xScaleID:void 0,xValue:void 0,yAdjust:0,yMax:void 0,yMin:void 0,yScaleID:void 0,yValue:void 0,z:0},el.defaultRoutes={borderColor:"color",backgroundColor:"color"};const nl={box:Oa,ellipse:Qa,label:Ra,line:Ha,point:tl,polygon:el};Object.keys(nl).forEach((t=>{De.describe(`elements.${nl[t].id}`,{_fallback:"plugins.annotation.common"})}));const sl={update:Object.assign},ol=wa.concat(ka),rl=(t,e)=>lt(e)?fl(t,e):t,al=t=>"color"===t||"font"===t;function ll(t="line"){return nl[t]?t:(console.warn(`Unknown annotation type: '${t}', defaulting to 'line'`),"line")}function hl(t){return isNaN(t.x)||isNaN(t.y)}function cl(t,e,i,n){const s=t.elements||(t.elements=[]);s.length=e.length;for(let t=0;t<e.length;t++){const o=e[t],r=o.properties,a=dl(s,t,o.type,o.initProperties),l=i[o.optionScope].override(o);r.options=ul(l),n.update(a,r)}}function dl(t,e,i,n){const s=nl[ll(i)];let o=t[e];return o&&o instanceof s||(o=t[e]=new s,Object.assign(o,n)),o}function ul(t){const e=nl[ll(t.type)],i={};i.id=t.id,i.type=t.type,i.drawTime=t.drawTime,Object.assign(i,fl(t,e.defaults),fl(t,e.defaultRoutes));for(const e of ol)i[e]=t[e];return i}function fl(t,e){const i={};for(const n of Object.keys(e)){const s=e[n],o=t[n];al(n)&&at(o)?i[n]=o.map((t=>rl(t,s))):i[n]=rl(o,s)}return i}function pl(t,e,i){return e.$context||(e.$context=Object.assign(Object.create(t.getContext()),{element:e,id:i.id,type:"annotation"}))}const gl=new Map,ml=wa.concat(ka);var xl={id:"annotation",version:"3.0.1",beforeRegister(){!function(t,e,i,n=!0){const s=i.split(".");let o=0;for(const r of e.split(".")){const a=s[o++];if(parseInt(r,10)<parseInt(a,10))break;if(zr(a,r)){if(n)throw new Error(`${t} v${i} is not supported. v${e} or newer is required.`);return!1}}}("chart.js","4.0",Hs.version)},afterRegister(){Hs.register(nl)},afterUnregister(){Hs.unregister(nl)},beforeInit(t){gl.set(t,{annotations:[],elements:[],visibleElements:[],listeners:{},listened:!1,moveListened:!1,hooks:{},hooked:!1,hovered:[]})},beforeUpdate(t,e,i){const n=gl.get(t).annotations=[];let s=i.annotations;lt(s)?Object.keys(s).forEach((t=>{const e=s[t];lt(e)&&(e.id=t,n.push(e))})):at(s)&&n.push(...s),function(t,e){for(const i of t)Da(i,e)}(n,t.scales)},afterDataLimits(t,e){const i=gl.get(t);!function(t,e,i){const n=function(t,e,i){const n=e.axis,s=e.id,o=n+"ScaleID",r={min:dt(e.min,Number.NEGATIVE_INFINITY),max:dt(e.max,Number.POSITIVE_INFINITY)};for(const a of i)a.scaleID===s?Pa(a,e,["value","endValue"],r):da(t,a,o)===s&&Pa(a,e,[n+"Min",n+"Max",n+"Value"],r);return r}(t.scales,e,i);let s=Sa(e,n,"min","suggestedMin");s=Sa(e,n,"max","suggestedMax")||s,s&&Ct(e.handleTickRangeOptions)&&e.handleTickRangeOptions()}(t,e.scale,i.annotations.filter((t=>t.display&&t.adjustScaleRange)))},afterUpdate(t,e,i){const n=gl.get(t);!function(t,e,i){e.listened=Qr(i,wa,e.listeners),e.moveListened=!1,e._getElements=Ir,_a.forEach((t=>{Ct(i[t])&&(e.moveListened=!0)})),e.listened&&e.moveListened||e.annotations.forEach((t=>{!e.listened&&Ct(t.click)&&(e.listened=!0),e.moveListened||_a.forEach((i=>{Ct(t[i])&&(e.listened=!0,e.moveListened=!0)}))}))}(0,n,i),function(t,e,i,n){const s=function(t,e,i){return"reset"===i||"none"===i||"resize"===i?sl:new Ki(t,e)}(t,i.animations,n),o=e.annotations,r=function(t,e){const i=e.length,n=t.length;if(n<i){const e=i-n;t.splice(n,0,...new Array(e))}else n>i&&t.splice(i,n-i);return t}(e.elements,o);for(let e=0;e<o.length;e++){const i=o[e],n=dl(r,e,i.type),a=i.setContext(pl(t,n,i)),l=n.resolveElementProperties(t,a);l.skip=hl(l),"elements"in l&&(cl(n,l.elements,a,s),delete l.elements),kt(n.x)||Object.assign(n,l),Object.assign(n,l.initProperties),l.options=ul(a),s.update(n,l)}}(t,n,i,e.mode),n.visibleElements=n.elements.filter((t=>!t.skip&&t.options.display)),function(t,e,i){const n=e.visibleElements;e.hooked=Qr(i,ka,e.hooks),e.hooked||n.forEach((t=>{e.hooked||ka.forEach((i=>{Ct(t.options[i])&&(e.hooked=!0)}))}))}(0,n,i)},beforeDatasetsDraw(t,e,i){bl(t,"beforeDatasetsDraw",i.clip)},afterDatasetsDraw(t,e,i){bl(t,"afterDatasetsDraw",i.clip)},beforeDraw(t,e,i){bl(t,"beforeDraw",i.clip)},afterDraw(t,e,i){bl(t,"afterDraw",i.clip)},beforeEvent(t,e,i){(function(t,e,i){if(t.listened)switch(e.type){case"mousemove":case"mouseout":return function(t,e,i){if(!t.moveListened)return;let n;n="mousemove"===e.type?Ir(t,e,i.interaction):[];const s=t.hovered;t.hovered=n;const o={state:t,event:e};let r=Aa(o,"leave",s,n);return Aa(o,"enter",n,s)||r}(t,e,i);case"click":return function(t,e,i){const n=t.listeners,s=Ir(t,e,i.interaction);let o;for(const t of s)o=Ma(t.options.click||n.click,t,e)||o;return o}(t,e,i)}})(gl.get(t),e.event,i)&&(e.changed=!0)},afterDestroy(t){gl.delete(t)},_getState:t=>gl.get(t),defaults:{animations:{numbers:{properties:["x","y","x2","y2","width","height","centerX","centerY","pointX","pointY","radius"],type:"number"}},clip:!0,interaction:{mode:void 0,axis:void 0,intersect:void 0},common:{drawTime:"afterDatasetsDraw",init:!1,label:{}}},descriptors:{_indexable:!1,_scriptable:t=>!ml.includes(t)&&"init"!==t,annotations:{_allKeys:!1,_fallback:(t,e)=>`elements.${nl[ll(e.type)].id}`},interaction:{_fallback:!0},common:{label:{_indexable:al,_fallback:!0},_indexable:al}},additionalOptionScopes:[""]};function bl(t,e,i){const{ctx:n,chartArea:s}=t,o=gl.get(t);i&&Le(n,s);const r=function(t,e){const i=[];for(const n of t)if(n.options.drawTime===e&&i.push({element:n,main:!0}),n.elements&&n.elements.length)for(const t of n.elements)t.options.display&&t.options.drawTime===e&&i.push({element:t});return i}(o.visibleElements,e).sort(((t,e)=>t.element.options.z-e.element.options.z));for(const t of r)yl(n,s,o,t);i&&ze(n)}function yl(t,e,i,n){const s=n.element;n.main?(Ca(i,s,"beforeDraw"),s.draw(t,e),Ca(i,s,"afterDraw")):s.draw(t,e)}var vl=i(988),_l={};_l.styleTagTransform=u(),_l.setAttributes=l(),_l.insert=r().bind(null,"head"),_l.domAPI=s(),_l.insertStyleElement=c(),e()(vl.Z,_l),vl.Z&&vl.Z.locals&&vl.Z.locals;class wl{constructor(){Rr.register(xl),this.container=document.createElement("div"),this.container.id="graphContainer",this.bindEvents()}bindEvents(){x.on("renderGraph",(t=>{const e=Object.values(b.cachedData.forecast.forecastday[t].hour),i=[];e.forEach((t=>{const e=new Date(t.time).getHours();i.push({hour:e,temp_c:t.temp_c})}));const n=0===t;this.render({parsedData:i,isCurrentDay:n})}))}render(t){console.log(t),console.log(b.cachedData),console.log(t.isCurrentDay);const e=t.isCurrentDay?1:0,i=new Date(b.cachedData.current.last_updated).getHours();this.container.contains(this.canvas)&&this.container.removeChild(this.canvas),this.canvas=document.createElement("canvas"),this.container.append(this.canvas),this.cachedChart=new Rr(this.canvas,{type:"line",data:{labels:t.parsedData.map((t=>t.hour)),datasets:[{data:t.parsedData.map((t=>t.temp_c)),tension:.2}]},options:{maintainAspectRatio:!1,responsive:!0,plugins:{annotation:{annotations:{line1:{adjustScaleRange:!0,drawTime:"afterDatasetsDraw",type:"line",mode:"horizontal",scaleID:"x",borderColor:"orange",borderWidth:e,value:i}}},legend:{display:!1}},annotations:{line1:{}}}})}}var Al=i(830),Ml={};Ml.styleTagTransform=u(),Ml.setAttributes=l(),Ml.insert=r().bind(null,"head"),Ml.domAPI=s(),Ml.insertStyleElement=c(),e()(Al.Z,Ml),Al.Z&&Al.Z.locals&&Al.Z.locals;class kl{constructor(){this.container=document.createElement("div"),this.container.id="appContainer",this.header=new _,this.graph=new wl,this.daysBar=new S(8),this.container.append(this.header.container,this.graph.container,this.daysBar.container),kl.bindEvents(),kl.apiCall()}static apiCall(){(async function(){const t=await fetch("https://api.weatherapi.com/v1/forecast.json?key=6b50d5938f0b4173a06202148231208&q=montevideo&days=10&aqi=no&alerts=no\n    ");return await t.json()})().then((t=>{b.cachedData=t,x.emit("renderHeader",0),x.emit("renderDaysBar"),x.emit("renderGraph",0)}))}static bindEvents(){x.on("apiCall",(()=>{kl.apiCall()}))}}const Cl=document.querySelector("body"),Sl=new kl;Cl.append(Sl.container)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,